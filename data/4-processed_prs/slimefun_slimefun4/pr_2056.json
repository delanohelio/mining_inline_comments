{"pr_number": 2056, "pr_title": "Added Climbing Pick", "pr_createdAt": "2020-06-26T19:08:04Z", "pr_url": "https://github.com/Slimefun/Slimefun4/pull/2056", "timeline": [{"oid": "207cb35ddafbce971951a917027e956dc95767b7", "url": "https://github.com/Slimefun/Slimefun4/commit/207cb35ddafbce971951a917027e956dc95767b7", "message": "Added Climbing Pick", "committedDate": "2020-06-26T19:03:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NTI2NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446365264", "bodyText": "This is a stupidly long line", "author": "WalshyDev", "createdAt": "2020-06-26T19:16:04Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {\n+\n+    private final Map<String, Double> materialSpeedsDef = new HashMap<>();\n+    private final ItemSetting<Map<String, Double>> materialSpeeds = new ItemSetting<>(\"launch-amounts\", materialSpeedsDef);\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6D);\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) materialSpeedsDef.put(Material.BLACKSTONE.name(), 0.6D);", "originalCommit": "207cb35ddafbce971951a917027e956dc95767b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NjkzNg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446366936", "bodyText": "You could save some intention and just negate + return.", "author": "WalshyDev", "createdAt": "2020-06-26T19:19:39Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {\n+\n+    private final Map<String, Double> materialSpeedsDef = new HashMap<>();\n+    private final ItemSetting<Map<String, Double>> materialSpeeds = new ItemSetting<>(\"launch-amounts\", materialSpeedsDef);\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6D);\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) materialSpeedsDef.put(Material.BLACKSTONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.NETHERRACK.name(), 0.6D);\n+\n+        addItemSetting(materialSpeeds);\n+    }\n+\n+    @Override\n+    public void preRegister() {\n+        super.preRegister();\n+\n+        addItemHandler(getBlockBreakHandler());\n+    }\n+\n+    \n+    @Override\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            if (e.getClickedBlock().isPresent()) {", "originalCommit": "207cb35ddafbce971951a917027e956dc95767b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NzY3Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446367676", "bodyText": "Don't do a fucking containsKey and a get. A containsKey literally is a get anyway", "author": "WalshyDev", "createdAt": "2020-06-26T19:21:22Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {\n+\n+    private final Map<String, Double> materialSpeedsDef = new HashMap<>();\n+    private final ItemSetting<Map<String, Double>> materialSpeeds = new ItemSetting<>(\"launch-amounts\", materialSpeedsDef);\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6D);\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) materialSpeedsDef.put(Material.BLACKSTONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.NETHERRACK.name(), 0.6D);\n+\n+        addItemSetting(materialSpeeds);\n+    }\n+\n+    @Override\n+    public void preRegister() {\n+        super.preRegister();\n+\n+        addItemHandler(getBlockBreakHandler());\n+    }\n+\n+    \n+    @Override\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            if (e.getClickedBlock().isPresent()) {\n+                Block block = e.getClickedBlock().get();\n+                ItemStack item = e.getItem();\n+                Player p = e.getPlayer();\n+\n+                if (!getID().equals(\"TEST_CLIMBING_PICK\") && p.getLocation().distance(block.getLocation()) > 1.5) return;\n+                if (e.getClickedFace() == BlockFace.DOWN || e.getClickedFace() == BlockFace.UP) return;\n+\n+                if (!users.contains(p.getUniqueId())) {\n+                    Vector velocity = new Vector(1, 1, 1);\n+                    if (!getID().equals(\"TEST_CLIMBING_PICK\")) {\n+                        velocity = p.getVelocity();\n+                    }\n+\n+                    Material mat = block.getType();\n+                    if (materialSpeeds.getValue().containsKey(mat.name())) {\n+                        double launch = materialSpeeds.getValue().get(mat.name());", "originalCommit": "207cb35ddafbce971951a917027e956dc95767b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2ODExMA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446368110", "bodyText": "Again, get after a containsKey. Slowing this down for no reason", "author": "WalshyDev", "createdAt": "2020-06-26T19:22:22Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {\n+\n+    private final Map<String, Double> materialSpeedsDef = new HashMap<>();\n+    private final ItemSetting<Map<String, Double>> materialSpeeds = new ItemSetting<>(\"launch-amounts\", materialSpeedsDef);\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6D);\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) materialSpeedsDef.put(Material.BLACKSTONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.NETHERRACK.name(), 0.6D);\n+\n+        addItemSetting(materialSpeeds);\n+    }\n+\n+    @Override\n+    public void preRegister() {\n+        super.preRegister();\n+\n+        addItemHandler(getBlockBreakHandler());\n+    }\n+\n+    \n+    @Override\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            if (e.getClickedBlock().isPresent()) {\n+                Block block = e.getClickedBlock().get();\n+                ItemStack item = e.getItem();\n+                Player p = e.getPlayer();\n+\n+                if (!getID().equals(\"TEST_CLIMBING_PICK\") && p.getLocation().distance(block.getLocation()) > 1.5) return;\n+                if (e.getClickedFace() == BlockFace.DOWN || e.getClickedFace() == BlockFace.UP) return;\n+\n+                if (!users.contains(p.getUniqueId())) {\n+                    Vector velocity = new Vector(1, 1, 1);\n+                    if (!getID().equals(\"TEST_CLIMBING_PICK\")) {\n+                        velocity = p.getVelocity();\n+                    }\n+\n+                    Material mat = block.getType();\n+                    if (materialSpeeds.getValue().containsKey(mat.name())) {\n+                        double launch = materialSpeeds.getValue().get(mat.name());\n+                        if (item.getEnchantments().containsKey(Enchantment.DIG_SPEED)) {\n+                            launch += (item.getEnchantmentLevel(Enchantment.DIG_SPEED) * 0.2);", "originalCommit": "207cb35ddafbce971951a917027e956dc95767b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2OTIzOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446369238", "bodyText": "What the hell is the point of this listener...", "author": "WalshyDev", "createdAt": "2020-06-26T19:25:02Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ClimbingPickListener.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import org.bukkit.GameMode;\n+import org.bukkit.Sound;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ClimbingPick;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The special event listener for {@link ClimbingPick}.\n+ * This is made like this to allow addons to add more materials to climbing pick.\n+ *\n+ * @author Linox\n+ *\n+ * @see ClimbingPick\n+ *\n+ */\n+public class ClimbingPickListener implements Listener {", "originalCommit": "207cb35ddafbce971951a917027e956dc95767b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3NjUwMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446376503", "bodyText": "To allow for other addons to add more materials before actually applying the new velocity.", "author": "LinoxGH", "createdAt": "2020-06-26T19:42:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2OTIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM5MjY3Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446392673", "bodyText": "This wont do shit for other addons though???? They can listen if they want. You doing this does literally nothing", "author": "WalshyDev", "createdAt": "2020-06-26T20:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2OTIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2OTgyNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446369825", "bodyText": "Why is the unit test item in here...", "author": "WalshyDev", "createdAt": "2020-06-26T19:26:31Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {\n+\n+    private final Map<String, Double> materialSpeedsDef = new HashMap<>();\n+    private final ItemSetting<Map<String, Double>> materialSpeeds = new ItemSetting<>(\"launch-amounts\", materialSpeedsDef);\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6D);\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) materialSpeedsDef.put(Material.BLACKSTONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.NETHERRACK.name(), 0.6D);\n+\n+        addItemSetting(materialSpeeds);\n+    }\n+\n+    @Override\n+    public void preRegister() {\n+        super.preRegister();\n+\n+        addItemHandler(getBlockBreakHandler());\n+    }\n+\n+    \n+    @Override\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            if (e.getClickedBlock().isPresent()) {\n+                Block block = e.getClickedBlock().get();\n+                ItemStack item = e.getItem();\n+                Player p = e.getPlayer();\n+\n+                if (!getID().equals(\"TEST_CLIMBING_PICK\") && p.getLocation().distance(block.getLocation()) > 1.5) return;\n+                if (e.getClickedFace() == BlockFace.DOWN || e.getClickedFace() == BlockFace.UP) return;\n+\n+                if (!users.contains(p.getUniqueId())) {\n+                    Vector velocity = new Vector(1, 1, 1);\n+                    if (!getID().equals(\"TEST_CLIMBING_PICK\")) {", "originalCommit": "207cb35ddafbce971951a917027e956dc95767b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM3Njg5Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446376896", "bodyText": "Because a player cannot have a velocity in MockBukkit. so p.getVelocity() just throws an exception when used in a test.", "author": "LinoxGH", "createdAt": "2020-06-26T19:43:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2OTgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM5Mjg4Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446392886", "bodyText": "That's a stupidly bad hacky workaround. Just PR the simple patch to MockBukkit and note that this PR is blocked by that one.", "author": "WalshyDev", "createdAt": "2020-06-26T20:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2OTgyNQ=="}], "type": "inlineReview"}, {"oid": "f1aa8a08d0b9ea7dd9df7f542985c3af71faab0d", "url": "https://github.com/Slimefun/Slimefun4/commit/f1aa8a08d0b9ea7dd9df7f542985c3af71faab0d", "message": "Did the requested changes", "committedDate": "2020-06-26T20:59:40Z", "type": "commit"}, {"oid": "6334e251cb866b0c521dbf435f28a92dcf01a7a8", "url": "https://github.com/Slimefun/Slimefun4/commit/6334e251cb866b0c521dbf435f28a92dcf01a7a8", "message": "Improved the computation of velocity.", "committedDate": "2020-06-26T21:06:22Z", "type": "commit"}, {"oid": "9fcbe94553d25fc6205a6eb6e4014ec350de3120", "url": "https://github.com/Slimefun/Slimefun4/commit/9fcbe94553d25fc6205a6eb6e4014ec350de3120", "message": "Organized the new imports.", "committedDate": "2020-06-26T21:13:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNjA4Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446416086", "bodyText": "I very much like the Addition of this Event but it should also include a reference to the corresponding ClimbingPick that was used, in case there may be multiple kinds in the future.", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:22:57Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/ClimbingPickLaunchEvent.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ClimbingPick;\n+\n+/**\n+ * An {@link Event} that is called whenever a {@link Player} has\n+ * used a {@link ClimbingPick} on a climbable surface.\n+ *\n+ * @author Linox\n+ *\n+ * @see ClimbingPick\n+ *\n+ */\n+public class ClimbingPickLaunchEvent extends Event implements Cancellable {\n+\n+    private static final HandlerList handlers = new HandlerList();\n+\n+    private final Player player;\n+    private final Vector velocity;\n+    private final ItemStack pick;\n+    private boolean cancelled;\n+\n+    public ClimbingPickLaunchEvent(Player player, Vector velocity, ItemStack pick) {", "originalCommit": "9fcbe94553d25fc6205a6eb6e4014ec350de3120", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNjI2Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446416267", "bodyText": "Also this should extend PlayerEvent, since it features a Player.", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:23:32Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/ClimbingPickLaunchEvent.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ClimbingPick;\n+\n+/**\n+ * An {@link Event} that is called whenever a {@link Player} has\n+ * used a {@link ClimbingPick} on a climbable surface.\n+ *\n+ * @author Linox\n+ *\n+ * @see ClimbingPick\n+ *\n+ */\n+public class ClimbingPickLaunchEvent extends Event implements Cancellable {", "originalCommit": "9fcbe94553d25fc6205a6eb6e4014ec350de3120", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNjM1MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446416350", "bodyText": "Missing @Override annotation.", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:23:47Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/ClimbingPickLaunchEvent.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ClimbingPick;\n+\n+/**\n+ * An {@link Event} that is called whenever a {@link Player} has\n+ * used a {@link ClimbingPick} on a climbable surface.\n+ *\n+ * @author Linox\n+ *\n+ * @see ClimbingPick\n+ *\n+ */\n+public class ClimbingPickLaunchEvent extends Event implements Cancellable {\n+\n+    private static final HandlerList handlers = new HandlerList();\n+\n+    private final Player player;\n+    private final Vector velocity;\n+    private final ItemStack pick;\n+    private boolean cancelled;\n+\n+    public ClimbingPickLaunchEvent(Player player, Vector velocity, ItemStack pick) {\n+        super(false);\n+\n+        this.player = player;\n+        this.velocity = velocity;\n+        this.pick = pick;\n+    }\n+\n+    public HandlerList getHandlers() {", "originalCommit": "9fcbe94553d25fc6205a6eb6e4014ec350de3120", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNjYxMA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446416610", "bodyText": "For Velocity, we should probably also add a setter, since that's something that may be fun to play around with.\nShould also add a Validate.notNull(v, ...) check in that setter then though.", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:24:35Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/ClimbingPickLaunchEvent.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ClimbingPick;\n+\n+/**\n+ * An {@link Event} that is called whenever a {@link Player} has\n+ * used a {@link ClimbingPick} on a climbable surface.\n+ *\n+ * @author Linox\n+ *\n+ * @see ClimbingPick\n+ *\n+ */\n+public class ClimbingPickLaunchEvent extends Event implements Cancellable {\n+\n+    private static final HandlerList handlers = new HandlerList();\n+\n+    private final Player player;\n+    private final Vector velocity;\n+    private final ItemStack pick;\n+    private boolean cancelled;\n+\n+    public ClimbingPickLaunchEvent(Player player, Vector velocity, ItemStack pick) {\n+        super(false);\n+\n+        this.player = player;\n+        this.velocity = velocity;\n+        this.pick = pick;\n+    }\n+\n+    public HandlerList getHandlers() {\n+        return handlers;\n+    }\n+\n+    public static HandlerList getHandlerList() {\n+        return handlers;\n+    }\n+\n+    /**\n+     * This returns the {@link Player} that used the {@link ClimbingPick}.\n+     *\n+     * @return The {@link Player} that used\n+     */\n+    public Player getPlayer() {\n+        return player;\n+    }\n+\n+    /**\n+     * This returns the {@link Vector} velocity that was applied to the {@link Player}\n+     * who used the {@link ClimbingPick}.\n+     *\n+     * @return The {@link Vector} of the applied velocity\n+     */\n+    public Vector getVelocity() {\n+        return velocity;\n+    }", "originalCommit": "9fcbe94553d25fc6205a6eb6e4014ec350de3120", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzAwNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446417005", "bodyText": "You should keep ExplosivePickaxe too there.", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:25:39Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ExplosiveShovel.java", "diffHunk": "@@ -21,7 +21,7 @@\n  * \n  * @author Linox\n  * \n- * @see ExplosivePickaxe\n+ * @see ExplosiveTool", "originalCommit": "9fcbe94553d25fc6205a6eb6e4014ec350de3120", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzMyMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446417323", "bodyText": "Removing this is quite a bad idea, you should always use the primitive boolean here instead of boxing it.", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:26:35Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ExplosiveTool.java", "diffHunk": "@@ -59,7 +59,7 @@ public boolean onBlockBreak(BlockBreakEvent e, ItemStack item, int fortune, List\n \n                         List<Block> blocks = findBlocks(e.getBlock());\n \n-                        if (callExplosionEvent.getValue().booleanValue()) {\n+                        if (callExplosionEvent.getValue()) {", "originalCommit": "9fcbe94553d25fc6205a6eb6e4014ec350de3120", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzg3NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446417874", "bodyText": "Why even? This method does literally nothing.", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:28:03Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/SlimefunItem.java", "diffHunk": "@@ -429,6 +429,7 @@ private void loadItemHandlers() {\n             if (!handler.isPrivate()) {\n                 Set<ItemHandler> handlerset = getPublicItemHandlers(handler.getIdentifier());\n                 handlerset.add(handler);\n+                SlimefunPlugin.getRegistry().getPublicItemHandlers().replace(handler.getIdentifier(), handlerset);", "originalCommit": "9fcbe94553d25fc6205a6eb6e4014ec350de3120", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NTMxNw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446445317", "bodyText": "It does. Without this the handlerset inside the publicItemHandlers doesn't change. I know this because I tested it.", "author": "LinoxGH", "createdAt": "2020-06-26T23:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzg3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxODA4MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446418081", "bodyText": "This should be moved below the overloaded method.", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:28:35Z", "path": "src/test/java/io/github/thebusybiscuit/slimefun4/testing/interfaces/SlimefunItemTest.java", "diffHunk": "@@ -39,4 +41,9 @@ default void simulateConsumption(Player player, T item) {\n         item.callItemHandler(ItemConsumptionHandler.class, handler -> handler.onConsume(event, player, event.getItem()));\n     }\n \n+    default void simulateRightClickBlock(Player player, T item, BlockMock block, BlockFace face) {\n+        PlayerInteractEvent e = new PlayerInteractEvent(player, Action.RIGHT_CLICK_BLOCK, item.getItem().clone(), block, face, EquipmentSlot.HAND);\n+        PlayerRightClickEvent event = new PlayerRightClickEvent(e);\n+        item.callItemHandler(ItemUseHandler.class, handler -> handler.onRightClick(event));\n+    }", "originalCommit": "9fcbe94553d25fc6205a6eb6e4014ec350de3120", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxODM2Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446418366", "bodyText": "Please don't use a static variable for this, use a seperate item for every test.", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:29:21Z", "path": "src/test/java/io/github/thebusybiscuit/slimefun4/testing/tests/items/implementations/tools/TestClimbingPick.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.github.thebusybiscuit.slimefun4.testing.tests.items.implementations.tools;\n+\n+import org.bukkit.Material;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.inventory.ItemStack;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import be.seeseemelk.mockbukkit.MockBukkit;\n+import be.seeseemelk.mockbukkit.ServerMock;\n+import be.seeseemelk.mockbukkit.block.BlockMock;\n+import be.seeseemelk.mockbukkit.entity.PlayerMock;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ClimbingPick;\n+import io.github.thebusybiscuit.slimefun4.testing.TestUtilities;\n+import io.github.thebusybiscuit.slimefun4.testing.interfaces.SlimefunItemTest;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+public class TestClimbingPick implements SlimefunItemTest<ClimbingPick> {\n+\n+    private static ServerMock server;\n+    private static SlimefunPlugin plugin;\n+    private static ClimbingPick pick;\n+\n+    @BeforeAll\n+    public static void load() {\n+        server = MockBukkit.mock();\n+        plugin = MockBukkit.load(SlimefunPlugin.class);\n+        TestUtilities.registerDefaultTags(server);\n+    }\n+\n+    @AfterAll\n+    public static void unload() {\n+        MockBukkit.unmock();\n+    }\n+\n+    @Override\n+    public ClimbingPick registerSlimefunItem(SlimefunPlugin plugin, String id) {\n+        SlimefunItemStack item = new SlimefunItemStack(id, Material.IRON_PICKAXE, \"&5Test Pick\");\n+        ClimbingPick pick = new ClimbingPick(TestUtilities.getCategory(plugin, \"climbing_pick\"), item, RecipeType.NULL, new ItemStack[9]);\n+        pick.register(plugin);\n+        return pick;\n+    }\n+\n+    @Test\n+    public void testItemUse() {\n+        PlayerMock player = server.addPlayer();\n+        if (pick == null) pick = registerSlimefunItem(plugin, \"TEST_CLIMBING_PICK\");", "originalCommit": "9fcbe94553d25fc6205a6eb6e4014ec350de3120", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxODYzNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446418635", "bodyText": "This should very well be a parameterized test instead of using a BlockFace for loop here.", "author": "TheBusyBiscuit", "createdAt": "2020-06-26T21:29:43Z", "path": "src/test/java/io/github/thebusybiscuit/slimefun4/testing/tests/items/implementations/tools/TestClimbingPick.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package io.github.thebusybiscuit.slimefun4.testing.tests.items.implementations.tools;\n+\n+import org.bukkit.Material;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.inventory.ItemStack;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import be.seeseemelk.mockbukkit.MockBukkit;\n+import be.seeseemelk.mockbukkit.ServerMock;\n+import be.seeseemelk.mockbukkit.block.BlockMock;\n+import be.seeseemelk.mockbukkit.entity.PlayerMock;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ClimbingPick;\n+import io.github.thebusybiscuit.slimefun4.testing.TestUtilities;\n+import io.github.thebusybiscuit.slimefun4.testing.interfaces.SlimefunItemTest;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+public class TestClimbingPick implements SlimefunItemTest<ClimbingPick> {\n+\n+    private static ServerMock server;\n+    private static SlimefunPlugin plugin;\n+    private static ClimbingPick pick;\n+\n+    @BeforeAll\n+    public static void load() {\n+        server = MockBukkit.mock();\n+        plugin = MockBukkit.load(SlimefunPlugin.class);\n+        TestUtilities.registerDefaultTags(server);\n+    }\n+\n+    @AfterAll\n+    public static void unload() {\n+        MockBukkit.unmock();\n+    }\n+\n+    @Override\n+    public ClimbingPick registerSlimefunItem(SlimefunPlugin plugin, String id) {\n+        SlimefunItemStack item = new SlimefunItemStack(id, Material.IRON_PICKAXE, \"&5Test Pick\");\n+        ClimbingPick pick = new ClimbingPick(TestUtilities.getCategory(plugin, \"climbing_pick\"), item, RecipeType.NULL, new ItemStack[9]);\n+        pick.register(plugin);\n+        return pick;\n+    }\n+\n+    @Test\n+    public void testItemUse() {\n+        PlayerMock player = server.addPlayer();\n+        if (pick == null) pick = registerSlimefunItem(plugin, \"TEST_CLIMBING_PICK\");\n+\n+        for (BlockFace face : BlockFace.values()) {", "originalCommit": "9fcbe94553d25fc6205a6eb6e4014ec350de3120", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bc074c83eea012bc297b95cf9098f5ee145d9aca", "url": "https://github.com/Slimefun/Slimefun4/commit/bc074c83eea012bc297b95cf9098f5ee145d9aca", "message": "Did the requested changes.", "committedDate": "2020-06-26T23:22:17Z", "type": "commit"}, {"oid": "2ecf5a8845d647e7a987804d5fcf578be878322d", "url": "https://github.com/Slimefun/Slimefun4/commit/2ecf5a8845d647e7a987804d5fcf578be878322d", "message": "Performance Improvement.", "committedDate": "2020-06-27T21:33:17Z", "type": "commit"}, {"oid": "dd5024b0be87a0c146aedc498ad647cf8349d938", "url": "https://github.com/Slimefun/Slimefun4/commit/dd5024b0be87a0c146aedc498ad647cf8349d938", "message": "Disabled the JUnit test until MockBukkit pr is merged.", "committedDate": "2020-06-28T11:13:40Z", "type": "commit"}, {"oid": "d2c66e9b93c3c0b641cffe24c6c46a83933f0d63", "url": "https://github.com/Slimefun/Slimefun4/commit/d2c66e9b93c3c0b641cffe24c6c46a83933f0d63", "message": "Merge branch 'master' into IcePick", "committedDate": "2020-06-28T11:16:28Z", "type": "commit"}, {"oid": "073fe1322b22573bd53b12475f224ceb4a3e06f4", "url": "https://github.com/Slimefun/Slimefun4/commit/073fe1322b22573bd53b12475f224ceb4a3e06f4", "message": "Merge branch 'master' of https://github.com/TheBusyBiscuit/Slimefun4 into IcePick\n\n\u0001 Conflicts:\n\u0001\tsrc/test/java/io/github/thebusybiscuit/slimefun4/testing/TestUtilities.java", "committedDate": "2020-06-28T11:42:34Z", "type": "commit"}, {"oid": "64debe70decd5b8ce0c051f3ad34ba82b1b4ffd8", "url": "https://github.com/Slimefun/Slimefun4/commit/64debe70decd5b8ce0c051f3ad34ba82b1b4ffd8", "message": "Fixed the build errors.", "committedDate": "2020-06-28T11:49:20Z", "type": "commit"}, {"oid": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "url": "https://github.com/Slimefun/Slimefun4/commit/61067c375cd0f11a524604700f17f9e32d2bf6ff", "message": "Merge remote-tracking branch 'origin/IcePick' into IcePick\n\n# Conflicts:\n#\tsrc/test/java/io/github/thebusybiscuit/slimefun4/testing/TestUtilities.java", "committedDate": "2020-06-28T11:51:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MTg2Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446641862", "bodyText": "The ItemStack and Block of this Event may be good to have too.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:01:01Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/ClimbingPickLaunchEvent.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import org.apache.commons.lang.Validate;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.bukkit.event.player.PlayerEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ClimbingPick;\n+\n+/**\n+ * An {@link Event} that is called whenever a {@link Player} has\n+ * used a {@link ClimbingPick} on a climbable surface.\n+ *\n+ * @author Linox\n+ *\n+ * @see ClimbingPick\n+ *\n+ */\n+public class ClimbingPickLaunchEvent extends PlayerEvent implements Cancellable {\n+\n+    private static final HandlerList handlers = new HandlerList();\n+\n+    private Vector velocity;\n+    private final ClimbingPick pick;\n+    private boolean cancelled;\n+\n+    public ClimbingPickLaunchEvent(Player player, Vector velocity, ClimbingPick pick) {", "originalCommit": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MzM5MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446643391", "bodyText": "ItemStack is ClimbingPick anyway?", "author": "LinoxGH", "createdAt": "2020-06-28T12:16:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MTg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MzUzMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446643533", "bodyText": "No, ClimbingPick is a SlimefunItem, not the actual ItemStack that was used.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:18:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MTg2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MTkzNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446641935", "bodyText": "Just an enhancement idea:\nImplement RecipeDisplayItem and list the blocks that can be climbed in the guide below.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:01:45Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {", "originalCommit": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MTk3MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446641970", "bodyText": "Do not use ItemSetting for complex data types, such as a Map...", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:02:15Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {\n+\n+    private final Map<String, Double> materialSpeedsDef = new HashMap<>();\n+    private final ItemSetting<Map<String, Double>> materialSpeeds = new ItemSetting<>(\"launch-amounts\", materialSpeedsDef);", "originalCommit": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0NDAxOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446644018", "bodyText": "How can I fix this?", "author": "LinoxGH", "createdAt": "2020-06-28T12:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MTk3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0NDMxNw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446644317", "bodyText": "By removing this ItemSetting.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MTk3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjAzOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446642039", "bodyText": "Why this special case?", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:02:59Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {\n+\n+    private final Map<String, Double> materialSpeedsDef = new HashMap<>();\n+    private final ItemSetting<Map<String, Double>> materialSpeeds = new ItemSetting<>(\"launch-amounts\", materialSpeedsDef);\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.NETHERRACK.name(), 0.6D);\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) {\n+            materialSpeedsDef.put(Material.BLACKSTONE.name(), 0.6D);\n+        }\n+\n+        addItemSetting(materialSpeeds);\n+    }\n+\n+    @Override\n+    public void preRegister() {\n+        super.preRegister();\n+\n+        addItemHandler(getBlockBreakHandler());\n+    }\n+\n+    \n+    @Override\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            if (!e.getClickedBlock().isPresent()) return;\n+\n+            Block block = e.getClickedBlock().get();\n+            ItemStack item = e.getItem();\n+            Player p = e.getPlayer();\n+\n+            if (!getID().startsWith(\"TEST_CLIMBING_PICK\") && p.getLocation().distance(block.getLocation()) > 1.5) return;", "originalCommit": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjEzOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446642138", "bodyText": "Don't box this double, use the primitive value and use getOrDefault.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:03:51Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {\n+\n+    private final Map<String, Double> materialSpeedsDef = new HashMap<>();\n+    private final ItemSetting<Map<String, Double>> materialSpeeds = new ItemSetting<>(\"launch-amounts\", materialSpeedsDef);\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.NETHERRACK.name(), 0.6D);\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) {\n+            materialSpeedsDef.put(Material.BLACKSTONE.name(), 0.6D);\n+        }\n+\n+        addItemSetting(materialSpeeds);\n+    }\n+\n+    @Override\n+    public void preRegister() {\n+        super.preRegister();\n+\n+        addItemHandler(getBlockBreakHandler());\n+    }\n+\n+    \n+    @Override\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            if (!e.getClickedBlock().isPresent()) return;\n+\n+            Block block = e.getClickedBlock().get();\n+            ItemStack item = e.getItem();\n+            Player p = e.getPlayer();\n+\n+            if (!getID().startsWith(\"TEST_CLIMBING_PICK\") && p.getLocation().distance(block.getLocation()) > 1.5) return;\n+            if (e.getClickedFace() == BlockFace.DOWN || e.getClickedFace() == BlockFace.UP) return;\n+\n+            if (!users.contains(p.getUniqueId())) {\n+                Material mat = block.getType();\n+                Double launch = materialSpeeds.getValue().get(mat.name());", "originalCommit": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjE4Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446642182", "bodyText": "You made this a cancellable event, yet you don't listen for whether it was cancelled.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:04:28Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {\n+\n+    private final Map<String, Double> materialSpeedsDef = new HashMap<>();\n+    private final ItemSetting<Map<String, Double>> materialSpeeds = new ItemSetting<>(\"launch-amounts\", materialSpeedsDef);\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.NETHERRACK.name(), 0.6D);\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) {\n+            materialSpeedsDef.put(Material.BLACKSTONE.name(), 0.6D);\n+        }\n+\n+        addItemSetting(materialSpeeds);\n+    }\n+\n+    @Override\n+    public void preRegister() {\n+        super.preRegister();\n+\n+        addItemHandler(getBlockBreakHandler());\n+    }\n+\n+    \n+    @Override\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            if (!e.getClickedBlock().isPresent()) return;\n+\n+            Block block = e.getClickedBlock().get();\n+            ItemStack item = e.getItem();\n+            Player p = e.getPlayer();\n+\n+            if (!getID().startsWith(\"TEST_CLIMBING_PICK\") && p.getLocation().distance(block.getLocation()) > 1.5) return;\n+            if (e.getClickedFace() == BlockFace.DOWN || e.getClickedFace() == BlockFace.UP) return;\n+\n+            if (!users.contains(p.getUniqueId())) {\n+                Material mat = block.getType();\n+                Double launch = materialSpeeds.getValue().get(mat.name());\n+\n+                Vector velocity = new Vector(0, 0, 0);\n+                if (launch != null) {\n+                    Integer efficiencyLevel = item.getEnchantments().get(Enchantment.DIG_SPEED);\n+                    if (efficiencyLevel != null){\n+                        launch += (efficiencyLevel * 0.2);\n+                    }\n+                    velocity.setY(launch);\n+\n+                    users.add(p.getUniqueId());\n+                    Bukkit.getScheduler().runTaskLaterAsynchronously(SlimefunPlugin.instance, () -> users.remove(p.getUniqueId()), 4L);\n+                }\n+\n+                ClimbingPickLaunchEvent event = new ClimbingPickLaunchEvent(p, velocity, this);\n+                Bukkit.getPluginManager().callEvent(event);\n+\n+                p.setVelocity(event.getVelocity());\n+                p.playSound(p.getLocation(), Sound.ENTITY_ENDERMAN_TELEPORT, 1F, 1F);\n+\n+                if (p.getGameMode() != GameMode.CREATIVE) {\n+                    damageItem(p, e.getItem());\n+                }", "originalCommit": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjI3Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446642277", "bodyText": "I find this addition rather useless, people should be able to use it to mine too. Is ee no reason why this would be a problem.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:05:14Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {\n+\n+    private final Map<String, Double> materialSpeedsDef = new HashMap<>();\n+    private final ItemSetting<Map<String, Double>> materialSpeeds = new ItemSetting<>(\"launch-amounts\", materialSpeedsDef);\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.NETHERRACK.name(), 0.6D);\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) {\n+            materialSpeedsDef.put(Material.BLACKSTONE.name(), 0.6D);\n+        }\n+\n+        addItemSetting(materialSpeeds);\n+    }\n+\n+    @Override\n+    public void preRegister() {\n+        super.preRegister();\n+\n+        addItemHandler(getBlockBreakHandler());\n+    }\n+\n+    \n+    @Override\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            if (!e.getClickedBlock().isPresent()) return;\n+\n+            Block block = e.getClickedBlock().get();\n+            ItemStack item = e.getItem();\n+            Player p = e.getPlayer();\n+\n+            if (!getID().startsWith(\"TEST_CLIMBING_PICK\") && p.getLocation().distance(block.getLocation()) > 1.5) return;\n+            if (e.getClickedFace() == BlockFace.DOWN || e.getClickedFace() == BlockFace.UP) return;\n+\n+            if (!users.contains(p.getUniqueId())) {\n+                Material mat = block.getType();\n+                Double launch = materialSpeeds.getValue().get(mat.name());\n+\n+                Vector velocity = new Vector(0, 0, 0);\n+                if (launch != null) {\n+                    Integer efficiencyLevel = item.getEnchantments().get(Enchantment.DIG_SPEED);\n+                    if (efficiencyLevel != null){\n+                        launch += (efficiencyLevel * 0.2);\n+                    }\n+                    velocity.setY(launch);\n+\n+                    users.add(p.getUniqueId());\n+                    Bukkit.getScheduler().runTaskLaterAsynchronously(SlimefunPlugin.instance, () -> users.remove(p.getUniqueId()), 4L);\n+                }\n+\n+                ClimbingPickLaunchEvent event = new ClimbingPickLaunchEvent(p, velocity, this);\n+                Bukkit.getPluginManager().callEvent(event);\n+\n+                p.setVelocity(event.getVelocity());\n+                p.playSound(p.getLocation(), Sound.ENTITY_ENDERMAN_TELEPORT, 1F, 1F);\n+\n+                if (p.getGameMode() != GameMode.CREATIVE) {\n+                    damageItem(p, e.getItem());\n+                }\n+            }\n+        };\n+    }\n+\n+    private BlockBreakHandler getBlockBreakHandler() {\n+        return new BlockBreakHandler() {\n+            @Override\n+            public boolean onBlockBreak(BlockBreakEvent e, ItemStack item, int fortune, List<ItemStack> drops) {\n+                if (isItem(item)) {\n+                    e.setCancelled(true);\n+                    return true;\n+                }\n+                return false;\n+            }\n+\n+            @Override\n+            public boolean isPrivate() {\n+                return false;\n+            }\n+        };\n+    }", "originalCommit": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0ODQ3Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446648472", "bodyText": "your suggestion said that...", "author": "LinoxGH", "createdAt": "2020-06-28T13:03:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjI3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjMyNA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446642324", "bodyText": "No need for the D, floating point numbers are doubles by default.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:05:52Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {\n+\n+    private final Map<String, Double> materialSpeedsDef = new HashMap<>();\n+    private final ItemSetting<Map<String, Double>> materialSpeeds = new ItemSetting<>(\"launch-amounts\", materialSpeedsDef);\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.NETHERRACK.name(), 0.6D);\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) {\n+            materialSpeedsDef.put(Material.BLACKSTONE.name(), 0.6D);", "originalCommit": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjM4Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446642387", "bodyText": "Why are you doing .name() here?\nShould really just store the Enum and even better: Use an EnumMap<>\nThis is much more cleaner and better storage-wise.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:06:30Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {\n+\n+    private final Map<String, Double> materialSpeedsDef = new HashMap<>();\n+    private final ItemSetting<Map<String, Double>> materialSpeeds = new ItemSetting<>(\"launch-amounts\", materialSpeedsDef);\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.NETHERRACK.name(), 0.6D);", "originalCommit": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0ODQxOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446648419", "bodyText": "yeah but when they are printed to the config sth like \"!Material.ANDESITE :\" is printed\nthis is completely for aesthetics in items.yml", "author": "LinoxGH", "createdAt": "2020-06-28T13:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjM4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjQxNg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446642416", "bodyText": "Can just use 1, no need for the D here.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:06:45Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {\n+\n+    private final Map<String, Double> materialSpeedsDef = new HashMap<>();\n+    private final ItemSetting<Map<String, Double>> materialSpeeds = new ItemSetting<>(\"launch-amounts\", materialSpeedsDef);\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);", "originalCommit": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0ODg0OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446648848", "bodyText": "nah can't because the map has it Double", "author": "LinoxGH", "createdAt": "2020-06-28T13:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjQxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0ODkyMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446648921", "bodyText": "it only accepts double values", "author": "LinoxGH", "createdAt": "2020-06-28T13:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjQxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjQzMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446642432", "bodyText": "Why Concrete Powder?", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:06:53Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {\n+\n+    private final Map<String, Double> materialSpeedsDef = new HashMap<>();\n+    private final ItemSetting<Map<String, Double>> materialSpeeds = new ItemSetting<>(\"launch-amounts\", materialSpeedsDef);\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {", "originalCommit": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0ODI2Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446648262", "bodyText": "Thought they may be nice to be able to climbed. Also I thought this pick can be used in parkour maps so a bit color options for them?", "author": "LinoxGH", "createdAt": "2020-06-28T13:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjUxOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446642519", "bodyText": "I find this Enderman sound a bit inappropriate here, the Player isn't getting teleported. They're climbing.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:07:50Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {\n+\n+    private final Map<String, Double> materialSpeedsDef = new HashMap<>();\n+    private final ItemSetting<Map<String, Double>> materialSpeeds = new ItemSetting<>(\"launch-amounts\", materialSpeedsDef);\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.NETHERRACK.name(), 0.6D);\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) {\n+            materialSpeedsDef.put(Material.BLACKSTONE.name(), 0.6D);\n+        }\n+\n+        addItemSetting(materialSpeeds);\n+    }\n+\n+    @Override\n+    public void preRegister() {\n+        super.preRegister();\n+\n+        addItemHandler(getBlockBreakHandler());\n+    }\n+\n+    \n+    @Override\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            if (!e.getClickedBlock().isPresent()) return;\n+\n+            Block block = e.getClickedBlock().get();\n+            ItemStack item = e.getItem();\n+            Player p = e.getPlayer();\n+\n+            if (!getID().startsWith(\"TEST_CLIMBING_PICK\") && p.getLocation().distance(block.getLocation()) > 1.5) return;\n+            if (e.getClickedFace() == BlockFace.DOWN || e.getClickedFace() == BlockFace.UP) return;\n+\n+            if (!users.contains(p.getUniqueId())) {\n+                Material mat = block.getType();\n+                Double launch = materialSpeeds.getValue().get(mat.name());\n+\n+                Vector velocity = new Vector(0, 0, 0);\n+                if (launch != null) {\n+                    Integer efficiencyLevel = item.getEnchantments().get(Enchantment.DIG_SPEED);\n+                    if (efficiencyLevel != null){\n+                        launch += (efficiencyLevel * 0.2);\n+                    }\n+                    velocity.setY(launch);\n+\n+                    users.add(p.getUniqueId());\n+                    Bukkit.getScheduler().runTaskLaterAsynchronously(SlimefunPlugin.instance, () -> users.remove(p.getUniqueId()), 4L);\n+                }\n+\n+                ClimbingPickLaunchEvent event = new ClimbingPickLaunchEvent(p, velocity, this);\n+                Bukkit.getPluginManager().callEvent(event);\n+\n+                p.setVelocity(event.getVelocity());\n+                p.playSound(p.getLocation(), Sound.ENTITY_ENDERMAN_TELEPORT, 1F, 1F);", "originalCommit": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjU3Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446642577", "bodyText": "Why 4?\nWhy asynchronously? If you are accessing this Set asynchronously, you should absolutely use a thread-safe implementation like ConcurrentSet.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:08:27Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockBreakHandler;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem {\n+\n+    private final Map<String, Double> materialSpeedsDef = new HashMap<>();\n+    private final ItemSetting<Map<String, Double>> materialSpeeds = new ItemSetting<>(\"launch-amounts\", materialSpeedsDef);\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6D);\n+        materialSpeedsDef.put(Material.NETHERRACK.name(), 0.6D);\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) {\n+            materialSpeedsDef.put(Material.BLACKSTONE.name(), 0.6D);\n+        }\n+\n+        addItemSetting(materialSpeeds);\n+    }\n+\n+    @Override\n+    public void preRegister() {\n+        super.preRegister();\n+\n+        addItemHandler(getBlockBreakHandler());\n+    }\n+\n+    \n+    @Override\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            if (!e.getClickedBlock().isPresent()) return;\n+\n+            Block block = e.getClickedBlock().get();\n+            ItemStack item = e.getItem();\n+            Player p = e.getPlayer();\n+\n+            if (!getID().startsWith(\"TEST_CLIMBING_PICK\") && p.getLocation().distance(block.getLocation()) > 1.5) return;\n+            if (e.getClickedFace() == BlockFace.DOWN || e.getClickedFace() == BlockFace.UP) return;\n+\n+            if (!users.contains(p.getUniqueId())) {\n+                Material mat = block.getType();\n+                Double launch = materialSpeeds.getValue().get(mat.name());\n+\n+                Vector velocity = new Vector(0, 0, 0);\n+                if (launch != null) {\n+                    Integer efficiencyLevel = item.getEnchantments().get(Enchantment.DIG_SPEED);\n+                    if (efficiencyLevel != null){\n+                        launch += (efficiencyLevel * 0.2);\n+                    }\n+                    velocity.setY(launch);\n+\n+                    users.add(p.getUniqueId());\n+                    Bukkit.getScheduler().runTaskLaterAsynchronously(SlimefunPlugin.instance, () -> users.remove(p.getUniqueId()), 4L);", "originalCommit": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0NzkxMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446647913", "bodyText": "I tested and 4 is the most ideal to actually climb. After 5-6 ticks the player starts to fall down.", "author": "LinoxGH", "createdAt": "2020-06-28T12:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0Nzk0NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446647944", "bodyText": "ah that needs to be sync...", "author": "LinoxGH", "createdAt": "2020-06-28T12:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjU3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjY3OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446642679", "bodyText": "Again, this .replace() call is completely unnecessary here, the Set is already from the Hashmap and computed otherwise, adding it to the Set itself is enough, this is a wasteful call.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:09:34Z", "path": "src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/SlimefunItem.java", "diffHunk": "@@ -430,6 +430,7 @@ private void loadItemHandlers() {\n             if (!handler.isPrivate()) {\n                 Set<ItemHandler> handlerset = getPublicItemHandlers(handler.getIdentifier());\n                 handlerset.add(handler);\n+                SlimefunPlugin.getRegistry().getPublicItemHandlers().replace(handler.getIdentifier(), handlerset);", "originalCommit": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0Mjc0MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446642741", "bodyText": "You made a Pull Request for it, so wait till that is merged instead of disabling this.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:10:03Z", "path": "src/test/java/io/github/thebusybiscuit/slimefun4/testing/tests/items/implementations/tools/TestClimbingPick.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package io.github.thebusybiscuit.slimefun4.testing.tests.items.implementations.tools;\n+\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.inventory.ItemStack;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+\n+import be.seeseemelk.mockbukkit.MockBukkit;\n+import be.seeseemelk.mockbukkit.ServerMock;\n+import be.seeseemelk.mockbukkit.block.BlockMock;\n+import be.seeseemelk.mockbukkit.entity.PlayerMock;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ClimbingPick;\n+import io.github.thebusybiscuit.slimefun4.testing.TestUtilities;\n+import io.github.thebusybiscuit.slimefun4.testing.interfaces.SlimefunItemTest;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+public class TestClimbingPick implements SlimefunItemTest<ClimbingPick> {\n+\n+    private static ServerMock server;\n+    private static SlimefunPlugin plugin;\n+\n+    @BeforeAll\n+    public static void load() {\n+        server = MockBukkit.mock();\n+        plugin = MockBukkit.load(SlimefunPlugin.class);\n+        TestUtilities.registerDefaultTags(server);\n+    }\n+\n+    @AfterAll\n+    public static void unload() {\n+        MockBukkit.unmock();\n+    }\n+\n+    @Override\n+    public ClimbingPick registerSlimefunItem(SlimefunPlugin plugin, String id) {\n+        SlimefunItemStack item = new SlimefunItemStack(id, Material.IRON_PICKAXE, \"&5Test Pick\");\n+        ClimbingPick pick = new ClimbingPick(TestUtilities.getCategory(plugin, \"climbing_pick\"), item, RecipeType.NULL, new ItemStack[9]);\n+        pick.register(plugin);\n+        return pick;\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(value = BlockFace.class)\n+    @Disabled(\"Player velocity is currently not fully implemented in MockBukkit\")", "originalCommit": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0NDU1NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446644554", "bodyText": "Yeah but I don't have much time left so I just want to be done with these prs", "author": "LinoxGH", "createdAt": "2020-06-28T12:27:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0Mjc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MjgwOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446642809", "bodyText": "You know... you also could have just done\nshouldCancel = face == BlockFace.DOWN || face == BlockFace.UP\n...", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T12:10:56Z", "path": "src/test/java/io/github/thebusybiscuit/slimefun4/testing/tests/items/implementations/tools/TestClimbingPick.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package io.github.thebusybiscuit.slimefun4.testing.tests.items.implementations.tools;\n+\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.inventory.ItemStack;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+\n+import be.seeseemelk.mockbukkit.MockBukkit;\n+import be.seeseemelk.mockbukkit.ServerMock;\n+import be.seeseemelk.mockbukkit.block.BlockMock;\n+import be.seeseemelk.mockbukkit.entity.PlayerMock;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ClimbingPick;\n+import io.github.thebusybiscuit.slimefun4.testing.TestUtilities;\n+import io.github.thebusybiscuit.slimefun4.testing.interfaces.SlimefunItemTest;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+public class TestClimbingPick implements SlimefunItemTest<ClimbingPick> {\n+\n+    private static ServerMock server;\n+    private static SlimefunPlugin plugin;\n+\n+    @BeforeAll\n+    public static void load() {\n+        server = MockBukkit.mock();\n+        plugin = MockBukkit.load(SlimefunPlugin.class);\n+        TestUtilities.registerDefaultTags(server);\n+    }\n+\n+    @AfterAll\n+    public static void unload() {\n+        MockBukkit.unmock();\n+    }\n+\n+    @Override\n+    public ClimbingPick registerSlimefunItem(SlimefunPlugin plugin, String id) {\n+        SlimefunItemStack item = new SlimefunItemStack(id, Material.IRON_PICKAXE, \"&5Test Pick\");\n+        ClimbingPick pick = new ClimbingPick(TestUtilities.getCategory(plugin, \"climbing_pick\"), item, RecipeType.NULL, new ItemStack[9]);\n+        pick.register(plugin);\n+        return pick;\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(value = BlockFace.class)\n+    @Disabled(\"Player velocity is currently not fully implemented in MockBukkit\")\n+    public void testItemUse(BlockFace face) {\n+        PlayerMock player = server.addPlayer();\n+        ClimbingPick pick = registerSlimefunItem(plugin, \"TEST_CLIMBING_PICK_\" + face.name());\n+\n+        boolean shouldCancel = false;\n+        if (face == BlockFace.DOWN || face == BlockFace.UP) shouldCancel = true;", "originalCommit": "61067c375cd0f11a524604700f17f9e32d2bf6ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ef1735985e3fae288f0beb654e7c703307a975d8", "url": "https://github.com/Slimefun/Slimefun4/commit/ef1735985e3fae288f0beb654e7c703307a975d8", "message": "Did the requested changes, enabled and fixed JUnit test.", "committedDate": "2020-06-28T13:42:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2MTQ2OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446661468", "bodyText": "You can remove the D here, it's redundant. You can just use 1.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T15:01:32Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.Effect;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.item.CustomItem;\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem, RecipeDisplayItem {\n+\n+    private final Map<String, Double> materialSpeeds;\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        Map<String, Double> materialSpeedsDef = new HashMap<>();\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);", "originalCommit": "ef1735985e3fae288f0beb654e7c703307a975d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2MTUxNg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446661516", "bodyText": "Please use the actual Materials and not .name() ...\nYou should also use an EnumMap for this.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T15:02:04Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.Effect;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.item.CustomItem;\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem, RecipeDisplayItem {\n+\n+    private final Map<String, Double> materialSpeeds;\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        Map<String, Double> materialSpeedsDef = new HashMap<>();\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6);\n+        materialSpeedsDef.put(Material.NETHERRACK.name(), 0.6);\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) {\n+            materialSpeedsDef.put(Material.BLACKSTONE.name(), 0.6);\n+        }", "originalCommit": "ef1735985e3fae288f0beb654e7c703307a975d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2MTU0Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446661547", "bodyText": "Remove this line.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T15:02:16Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.Effect;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.item.CustomItem;\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem, RecipeDisplayItem {\n+\n+    private final Map<String, Double> materialSpeeds;\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        Map<String, Double> materialSpeedsDef = new HashMap<>();\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6);\n+        materialSpeedsDef.put(Material.NETHERRACK.name(), 0.6);\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) {\n+            materialSpeedsDef.put(Material.BLACKSTONE.name(), 0.6);\n+        }\n+        materialSpeeds = SlimefunPlugin.getItemCfg().getOrSetDefault(getID() + \".launch-amounts\", materialSpeedsDef);", "originalCommit": "ef1735985e3fae288f0beb654e7c703307a975d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2MTY0Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446661642", "bodyText": "This is a really badly done lore.\nFirst of all, you should not change the name... The user should see what Block they can climb. Just do new ItemStack(mat) instead.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T15:03:19Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.Effect;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.item.CustomItem;\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem, RecipeDisplayItem {\n+\n+    private final Map<String, Double> materialSpeeds;\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        Map<String, Double> materialSpeedsDef = new HashMap<>();\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6);\n+        materialSpeedsDef.put(Material.NETHERRACK.name(), 0.6);\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) {\n+            materialSpeedsDef.put(Material.BLACKSTONE.name(), 0.6);\n+        }\n+        materialSpeeds = SlimefunPlugin.getItemCfg().getOrSetDefault(getID() + \".launch-amounts\", materialSpeedsDef);\n+    }\n+    \n+    @Override\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            if (!e.getClickedBlock().isPresent()) return;\n+\n+            Block block = e.getClickedBlock().get();\n+            ItemStack item = e.getItem();\n+            Player p = e.getPlayer();\n+\n+            if (p.getLocation().distanceSquared(block.getLocation()) > 2.25) return;\n+            if (e.getClickedFace() == BlockFace.DOWN || e.getClickedFace() == BlockFace.UP) return;\n+\n+            if (!users.contains(p.getUniqueId())) {\n+                Material mat = block.getType();\n+                double launch = materialSpeeds.getOrDefault(mat.name(), 0D);\n+\n+                Vector velocity = new Vector(0, 0, 0);\n+                if (launch > 0.05) {\n+                    int efficiencyLevel = item.getEnchantments().getOrDefault(Enchantment.DIG_SPEED, 0);\n+                    if (efficiencyLevel != 0){\n+                        launch += (efficiencyLevel * 0.2);\n+                    }\n+                    velocity.setY(launch);\n+\n+                    users.add(p.getUniqueId());\n+                    Bukkit.getScheduler().runTaskLater(SlimefunPlugin.instance, () -> users.remove(p.getUniqueId()), 4L);\n+                }\n+\n+                ClimbingPickLaunchEvent event = new ClimbingPickLaunchEvent(p, velocity, this, item, block);\n+                Bukkit.getPluginManager().callEvent(event);\n+\n+                if (!event.isCancelled()) {\n+                    p.setVelocity(event.getVelocity());\n+                    p.getWorld().playEffect(block.getLocation(), Effect.STEP_SOUND, 1);\n+\n+                    if (p.getGameMode() != GameMode.CREATIVE) {\n+                        damageItem(p, e.getItem());\n+                    }\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public boolean isDamageable() {\n+        return true;\n+    }\n+\n+    @Override\n+    public List<ItemStack> getDisplayRecipes() {\n+        List<ItemStack> display = new ArrayList<>();\n+        for (String matName : materialSpeeds.keySet()) {\n+            Material mat = Material.getMaterial(matName);\n+            if (mat == null) continue;\n+            display.add(new CustomItem(mat, \"&bCan Climb This Block\"));", "originalCommit": "ef1735985e3fae288f0beb654e7c703307a975d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2MTY5NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2056#discussion_r446661694", "bodyText": "When implementing this, you should also override the label method and add a new string to the language file, since it would otherwise say \"These recipes can be crafted in this machine\" by default.", "author": "TheBusyBiscuit", "createdAt": "2020-06-28T15:03:55Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/tools/ClimbingPick.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.tools;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.Effect;\n+import org.bukkit.GameMode;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.util.Vector;\n+\n+import io.github.thebusybiscuit.cscorelib2.item.CustomItem;\n+import io.github.thebusybiscuit.cscorelib2.materials.MaterialCollections;\n+import io.github.thebusybiscuit.slimefun4.api.events.ClimbingPickLaunchEvent;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemUseHandler;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link ClimbingPick} launches you 1 block upwards when you right click\n+ * on a ice {@link Block}.\n+ * Every level of efficiency {@link Enchantment} increases the launch by 0.2 blocks.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class ClimbingPick extends SimpleSlimefunItem<ItemUseHandler> implements DamageableItem, RecipeDisplayItem {\n+\n+    private final Map<String, Double> materialSpeeds;\n+    private final Set<UUID> users = new HashSet<>();\n+\n+    public ClimbingPick(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        Map<String, Double> materialSpeedsDef = new HashMap<>();\n+        for (Material mat : MaterialCollections.getAllIceBlocks()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllConcretePowderColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+        for (Material mat : MaterialCollections.getAllTerracottaColors()) {\n+            materialSpeedsDef.put(mat.name(), 1D);\n+        }\n+\n+        materialSpeedsDef.put(Material.GRAVEL.name(), 0.4);\n+        materialSpeedsDef.put(Material.SAND.name(), 0.4);\n+        materialSpeedsDef.put(Material.STONE.name(), 0.6);\n+        materialSpeedsDef.put(Material.DIORITE.name(), 0.6);\n+        materialSpeedsDef.put(Material.GRANITE.name(), 0.6);\n+        materialSpeedsDef.put(Material.ANDESITE.name(), 0.6);\n+        materialSpeedsDef.put(Material.NETHERRACK.name(), 0.6);\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) {\n+            materialSpeedsDef.put(Material.BLACKSTONE.name(), 0.6);\n+        }\n+        materialSpeeds = SlimefunPlugin.getItemCfg().getOrSetDefault(getID() + \".launch-amounts\", materialSpeedsDef);\n+    }\n+    \n+    @Override\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            if (!e.getClickedBlock().isPresent()) return;\n+\n+            Block block = e.getClickedBlock().get();\n+            ItemStack item = e.getItem();\n+            Player p = e.getPlayer();\n+\n+            if (p.getLocation().distanceSquared(block.getLocation()) > 2.25) return;\n+            if (e.getClickedFace() == BlockFace.DOWN || e.getClickedFace() == BlockFace.UP) return;\n+\n+            if (!users.contains(p.getUniqueId())) {\n+                Material mat = block.getType();\n+                double launch = materialSpeeds.getOrDefault(mat.name(), 0D);\n+\n+                Vector velocity = new Vector(0, 0, 0);\n+                if (launch > 0.05) {\n+                    int efficiencyLevel = item.getEnchantments().getOrDefault(Enchantment.DIG_SPEED, 0);\n+                    if (efficiencyLevel != 0){\n+                        launch += (efficiencyLevel * 0.2);\n+                    }\n+                    velocity.setY(launch);\n+\n+                    users.add(p.getUniqueId());\n+                    Bukkit.getScheduler().runTaskLater(SlimefunPlugin.instance, () -> users.remove(p.getUniqueId()), 4L);\n+                }\n+\n+                ClimbingPickLaunchEvent event = new ClimbingPickLaunchEvent(p, velocity, this, item, block);\n+                Bukkit.getPluginManager().callEvent(event);\n+\n+                if (!event.isCancelled()) {\n+                    p.setVelocity(event.getVelocity());\n+                    p.getWorld().playEffect(block.getLocation(), Effect.STEP_SOUND, 1);\n+\n+                    if (p.getGameMode() != GameMode.CREATIVE) {\n+                        damageItem(p, e.getItem());\n+                    }\n+                }\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public boolean isDamageable() {\n+        return true;\n+    }\n+\n+    @Override\n+    public List<ItemStack> getDisplayRecipes() {", "originalCommit": "ef1735985e3fae288f0beb654e7c703307a975d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "005d4c04cc3873bbe15026898f1fb19d5a0580d5", "url": "https://github.com/Slimefun/Slimefun4/commit/005d4c04cc3873bbe15026898f1fb19d5a0580d5", "message": "Did the requested changes.", "committedDate": "2020-06-28T15:53:12Z", "type": "commit"}, {"oid": "12176a9ae794e780c4e3053dd4e2e4e28b0ea61f", "url": "https://github.com/Slimefun/Slimefun4/commit/12176a9ae794e780c4e3053dd4e2e4e28b0ea61f", "message": "Merge branch 'experimental' into IcePick", "committedDate": "2020-06-30T10:09:02Z", "type": "commit"}, {"oid": "d18a2ee121e041191e9bd04b80978ae51332301e", "url": "https://github.com/Slimefun/Slimefun4/commit/d18a2ee121e041191e9bd04b80978ae51332301e", "message": "Updated MockBukkit dependency", "committedDate": "2020-07-03T20:04:58Z", "type": "commit"}, {"oid": "ca2c068e7aedcc2a1d5fd5d507423cd123b13bae", "url": "https://github.com/Slimefun/Slimefun4/commit/ca2c068e7aedcc2a1d5fd5d507423cd123b13bae", "message": "Merge branch 'experimental' into IcePick", "committedDate": "2020-07-06T17:13:18Z", "type": "commit"}, {"oid": "3b17874ea2f31d55d04444dd75a6547dea598865", "url": "https://github.com/Slimefun/Slimefun4/commit/3b17874ea2f31d55d04444dd75a6547dea598865", "message": "Merge branch 'experimental' into IcePick", "committedDate": "2020-07-24T16:39:59Z", "type": "commit"}, {"oid": "c56ebe9c23a8450ed01a3910dad8bdca46d65a61", "url": "https://github.com/Slimefun/Slimefun4/commit/c56ebe9c23a8450ed01a3910dad8bdca46d65a61", "message": "Merge branch 'master' into IcePick", "committedDate": "2020-08-04T17:12:00Z", "type": "commit"}, {"oid": "5f78e7a854c0a2ebb857150bce76a6ea95f751fd", "url": "https://github.com/Slimefun/Slimefun4/commit/5f78e7a854c0a2ebb857150bce76a6ea95f751fd", "message": "Merge branch 'master' into IcePick", "committedDate": "2020-08-20T08:43:14Z", "type": "commit"}, {"oid": "0946b88cd12e0395b4d98e8d3e81a61cd8a7fa05", "url": "https://github.com/Slimefun/Slimefun4/commit/0946b88cd12e0395b4d98e8d3e81a61cd8a7fa05", "message": "Fixed symbol name issues in ClimbingPick.java", "committedDate": "2020-08-20T11:11:46Z", "type": "commit"}, {"oid": "bf3b04a4c52239a39e5c2229112314614f8d470f", "url": "https://github.com/Slimefun/Slimefun4/commit/bf3b04a4c52239a39e5c2229112314614f8d470f", "message": "Oops sorry for this silly mistake", "committedDate": "2020-08-20T11:19:48Z", "type": "commit"}, {"oid": "37bacaa8cb04efff280d427f225303b40c409379", "url": "https://github.com/Slimefun/Slimefun4/commit/37bacaa8cb04efff280d427f225303b40c409379", "message": "Apparently SlimefunPlugin.instance is private now.", "committedDate": "2020-08-20T11:30:21Z", "type": "commit"}, {"oid": "73d623a0fd8f4e7d91dc8a5c0d7a21002f9fb879", "url": "https://github.com/Slimefun/Slimefun4/commit/73d623a0fd8f4e7d91dc8a5c0d7a21002f9fb879", "message": "Github Web and its indent issues.", "committedDate": "2020-08-20T11:39:31Z", "type": "commit"}, {"oid": "29092b87c9ee3650b190a218de720735aaad3ce0", "url": "https://github.com/Slimefun/Slimefun4/commit/29092b87c9ee3650b190a218de720735aaad3ce0", "message": "Merge branch 'experimental' into IcePick", "committedDate": "2020-08-20T20:56:09Z", "type": "commit"}]}