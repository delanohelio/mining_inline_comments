{"pr_number": 2088, "pr_title": "LUCENE-9617: Reset lowestUnassignedFieldNumber in FieldNumbers.clear()", "pr_createdAt": "2020-11-18T20:27:10Z", "pr_url": "https://github.com/apache/lucene-solr/pull/2088", "timeline": [{"oid": "704f242c37513ae5d91266ffab653b1784a09a16", "url": "https://github.com/apache/lucene-solr/commit/704f242c37513ae5d91266ffab653b1784a09a16", "message": "LUCENE-9617: Reset lowestUnassignedFieldNumber in FieldNumbers.clear()\n\nFieldNumbers.clear() is called from IndexWriter.deleteAll(), which is\nsupposed to completely reset the state of the index. This includes\nclearing all known fields.\n\nPrior to this change, it would allocate progressively higher field\nnumbers, which results in larger and  larger arrays for\nFieldInfos.byNumber, effectively \"leaking\" field numbers every time\ndeleteAll() is called.", "committedDate": "2020-11-18T20:13:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg5Mzg2Nw==", "url": "https://github.com/apache/lucene-solr/pull/2088#discussion_r526893867", "bodyText": "Can you rewrite in terms of what a user might understand?  e.g.\nIndexWriter.deleteAll now resets internal field numbers; prevents ever-increasing numbers in unusual use-cases\nThe latter part of what you wrote isn't bad but the first part is technical mumbo-jumbo that only Lucene deep divers would even recognize.", "author": "dsmiley", "createdAt": "2020-11-19T13:39:44Z", "path": "lucene/CHANGES.txt", "diffHunk": "@@ -184,6 +184,9 @@ Bug fixes\n * LUCENE-9365: FuzzyQuery was missing matches when prefix length was equal to the term length\n   (Mark Harwood, Mike Drob)\n \n+* LUCENE-9617: Reset lowestUnassignedFieldNumber on FieldNumbers.clear(), to avoid leaking", "originalCommit": "704f242c37513ae5d91266ffab653b1784a09a16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc1NDQzMg==", "url": "https://github.com/apache/lucene-solr/pull/2088#discussion_r527754432", "bodyText": "How about something like this?:\nFix FieldInfos.clear() to reset its internal next field number state back to 0, which was otherwise causing a slow memory leak for applications relying on IndexWriter.deleteAll.", "author": "mikemccand", "createdAt": "2020-11-20T15:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg5Mzg2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkwNzQwOA==", "url": "https://github.com/apache/lucene-solr/pull/2088#discussion_r527907408", "bodyText": "Thinking backwards from the user (who probably cares about the slow memory leak more than anything), how about:\nFix per-field memory leak in IndexWriter.deleteAll(). Reset next available internal field number to 0 on FieldInfos.clear(), to avoid wasting FieldInfo references.\n\nIt gets the user-visible impact out front, explains the fix, and what was leaking, all in about 20 words.", "author": "msfroh", "createdAt": "2020-11-20T18:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg5Mzg2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg5NTE5OA==", "url": "https://github.com/apache/lucene-solr/pull/2088#discussion_r526895198", "bodyText": "My only problem with unit tests like this is that it doesn't test what we really want to know -- that when IW.deleteAll() is called (a user level thing, fieldNumbers.clear() is not), that the field numbers get reset.", "author": "dsmiley", "createdAt": "2020-11-19T13:41:49Z", "path": "lucene/core/src/test/org/apache/lucene/index/TestFieldInfos.java", "diffHunk": "@@ -187,4 +187,23 @@ public void testMergedFieldInfos_singleLeaf() throws IOException {\n     writer.close();\n     dir.close();\n   }\n+\n+  public void testFieldNumbersAutoIncrement() {\n+    FieldInfos.FieldNumbers fieldNumbers = new FieldInfos.FieldNumbers(\"softDeletes\");\n+    for (int i = 0; i < 10; i++) {\n+      fieldNumbers.addOrGet(\"field\" + i, -1, IndexOptions.NONE, DocValuesType.NONE,\n+          0, 0, 0, 0,\n+          VectorValues.SearchStrategy.NONE, false);\n+    }\n+    int idx = fieldNumbers.addOrGet(\"EleventhField\", -1, IndexOptions.NONE, DocValuesType.NONE,\n+        0, 0, 0, 0,\n+        VectorValues.SearchStrategy.NONE, false);\n+    assertEquals(\"Field numbers 0 through 9 were allocated\", 10, idx);\n+\n+    fieldNumbers.clear();", "originalCommit": "704f242c37513ae5d91266ffab653b1784a09a16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMDE2NQ==", "url": "https://github.com/apache/lucene-solr/pull/2088#discussion_r527730165", "bodyText": "Uhm, but this is the purpose of a unit-test?\nIt should test the lowest \"unit\" of the software, in this case FieldInfos and its clear method.\nThe fact that IW.deleteAll() is the \"user space manifestation\" of this particular low level problem is actually unimportant, from the standpoint of this unit test.  The unit test should only test the smallest / shrink-wrapped problem, which is indeed that FieldInfos.clear() failed to do its job correctly.\nWe could consider adding a unit test that \"IW.deleteAll does not leak memory\", but I don't think that is required for committing this fix to an obvious bug  ...", "author": "mikemccand", "createdAt": "2020-11-20T14:31:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg5NTE5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAxMzU5NA==", "url": "https://github.com/apache/lucene-solr/pull/2088#discussion_r528013594", "bodyText": "I agree that nothing more than what was done is required.  My feedback reflects my low opinion of the value of some unit tests like this one.  I've seen low level unit tests before that seem nice at a glance yet the component still doesn't work as intended due to other reasons.  From the conversation over the course of today I see here... it seems my point has some credence ;-)", "author": "dsmiley", "createdAt": "2020-11-20T22:55:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg5NTE5OA=="}], "type": "inlineReview"}, {"oid": "19537f2350728ee8f1d9a2cdbff5097af725db54", "url": "https://github.com/apache/lucene-solr/commit/19537f2350728ee8f1d9a2cdbff5097af725db54", "message": "Update change description and add deleteAll test\n\n1. Updated CHANGES.txt message for the issue to better reflect the user\n   impact (i.e. IndexWriter.deleteAll doesn't leak any more).\n2. Added a test that triggered an OOME without the fix.", "committedDate": "2020-11-20T23:39:55Z", "type": "forcePushed"}, {"oid": "d4f6be31c8e7b0fb5af24bdd25f34ca53fdbab60", "url": "https://github.com/apache/lucene-solr/commit/d4f6be31c8e7b0fb5af24bdd25f34ca53fdbab60", "message": "Update change description and add deleteAll test\n\n1. Updated CHANGES.txt message for the issue to better reflect the user\n   impact (i.e. IndexWriter.deleteAll doesn't leak any more).\n2. Added a test that triggered an OOME without the fix.", "committedDate": "2020-11-20T23:55:09Z", "type": "commit"}, {"oid": "d4f6be31c8e7b0fb5af24bdd25f34ca53fdbab60", "url": "https://github.com/apache/lucene-solr/commit/d4f6be31c8e7b0fb5af24bdd25f34ca53fdbab60", "message": "Update change description and add deleteAll test\n\n1. Updated CHANGES.txt message for the issue to better reflect the user\n   impact (i.e. IndexWriter.deleteAll doesn't leak any more).\n2. Added a test that triggered an OOME without the fix.", "committedDate": "2020-11-20T23:55:09Z", "type": "forcePushed"}]}