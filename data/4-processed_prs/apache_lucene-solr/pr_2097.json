{"pr_number": 2097, "pr_title": "LUCENE-9537", "pr_createdAt": "2020-11-25T15:03:18Z", "pr_url": "https://github.com/apache/lucene-solr/pull/2097", "timeline": [{"oid": "087d9d2a07cd8c4999daf6ac4ae8901a97abd877", "url": "https://github.com/apache/lucene-solr/commit/087d9d2a07cd8c4999daf6ac4ae8901a97abd877", "message": "Added smoothing score", "committedDate": "2020-11-24T18:00:23Z", "type": "commit"}, {"oid": "8e93ceee634c679e73d9871619057a049b301317", "url": "https://github.com/apache/lucene-solr/commit/8e93ceee634c679e73d9871619057a049b301317", "message": "Indri smoothing implementation and formatting", "committedDate": "2020-11-24T20:10:10Z", "type": "commit"}, {"oid": "3c75db2fc8925414f67c335043fd1f9d92fa24b5", "url": "https://github.com/apache/lucene-solr/commit/3c75db2fc8925414f67c335043fd1f9d92fa24b5", "message": "Additional smoothing score fixes", "committedDate": "2020-11-24T20:18:35Z", "type": "commit"}, {"oid": "71a0bcf551a444f2d793c838b7dd7bd47cf36397", "url": "https://github.com/apache/lucene-solr/commit/71a0bcf551a444f2d793c838b7dd7bd47cf36397", "message": "Add smoothing score to additional classes", "committedDate": "2020-11-25T14:47:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMDYzNQ==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532220635", "bodyText": "Hmm should this be return in.smoothingScore(docId) instead?", "author": "mikemccand", "createdAt": "2020-11-29T14:54:37Z", "path": "lucene/core/src/java/org/apache/lucene/search/FilterScorable.java", "diffHunk": "@@ -46,6 +46,11 @@ public float score() throws IOException {\n     return in.score();\n   }\n \n+  @Override\n+  public float smoothingScore(int docId) throws IOException {\n+    return 0;", "originalCommit": "71a0bcf551a444f2d793c838b7dd7bd47cf36397", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMDgwNg==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532220806", "bodyText": "Hmm, should we also cache the smoothingScore for this hit?\nOr, if we will keep it at returning 0, couldn't we remove this impl and inherit the default from Scorable?", "author": "mikemccand", "createdAt": "2020-11-29T14:55:40Z", "path": "lucene/core/src/java/org/apache/lucene/search/CachingCollector.java", "diffHunk": "@@ -59,6 +59,11 @@\n     @Override\n     public final float score() { return score; }\n \n+    @Override\n+    public float smoothingScore(int docId) throws IOException {\n+      return 0;", "originalCommit": "71a0bcf551a444f2d793c838b7dd7bd47cf36397", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMDg2Mw==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532220863", "bodyText": "Could you add the standard Apache copyright header here and in all the new classes?", "author": "mikemccand", "createdAt": "2020-11-29T14:56:05Z", "path": "lucene/core/src/java/org/apache/lucene/search/IndriAndQuery.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.apache.lucene.search;", "originalCommit": "71a0bcf551a444f2d793c838b7dd7bd47cf36397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwNTI1Mw==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532905253", "bodyText": "Done :-)", "author": "cammiemw", "createdAt": "2020-11-30T21:10:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMDg2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMTAyOQ==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532221029", "bodyText": "In general, BooleanClause can hold any Lucene Query implementation, but it looks like we are only supporting TermQuery and other IndriAndQuery clauses (just from reading the javadoc)?  If so, should we check/enforce this?", "author": "mikemccand", "createdAt": "2020-11-29T14:57:30Z", "path": "lucene/core/src/java/org/apache/lucene/search/IndriAndQuery.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/** A Query that matches documents matching combinations of \n+ * {@link TermQuery}s or other IndriAndQuerys.\n+ */\n+public class IndriAndQuery extends IndriQuery {\n+  \n+  public IndriAndQuery(List<BooleanClause> clauses) {", "originalCommit": "71a0bcf551a444f2d793c838b7dd7bd47cf36397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MDAxNw==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r542490017", "bodyText": "Hello, any comment on this one?", "author": "mikemccand", "createdAt": "2020-12-14T15:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMTAyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMTM5MA==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532221390", "bodyText": "Can you factor out the 2nd two statements under each of the true and false clauses here?  I.e., only the first line needs to be conditional?", "author": "mikemccand", "createdAt": "2020-11-29T15:00:22Z", "path": "lucene/core/src/java/org/apache/lucene/search/IndriAndScorer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/** Combines scores of subscorers. If a subscorer does not contain\n+ *  the docId, a smoothing score is calculated for that \n+ *  document/subscorer combination.\n+ */\n+public class IndriAndScorer extends IndriDisjunctionScorer {\n+  \n+  protected IndriAndScorer(Weight weight, List<Scorer> subScorers,\n+      ScoreMode scoreMode, float boost) throws IOException {\n+    super(weight, subScorers, scoreMode, boost);\n+  }\n+  \n+  @Override\n+  public float score(List<Scorer> subScorers) throws IOException {\n+    int docId = this.docID();\n+    return scoreDoc(subScorers, docId);\n+  }\n+  \n+  @Override\n+  public float smoothingScore(List<Scorer> subScorers, int docId)\n+      throws IOException {\n+    return scoreDoc(subScorers, docId);\n+  }\n+  \n+  private float scoreDoc(List<Scorer> subScorers, int docId)\n+      throws IOException {\n+    double score = 0;\n+    double boostSum = 0.0;\n+    for (Scorer scorer : subScorers) {\n+      if (scorer instanceof IndriScorer) {\n+        IndriScorer indriScorer = (IndriScorer) scorer;\n+        int scorerDocId = indriScorer.docID();\n+        //If the query exists in the document, score the document\n+        //Otherwise, compute a smoothing score, which acts like an idf\n+        //for subqueries/terms\n+        if (docId == scorerDocId) {", "originalCommit": "71a0bcf551a444f2d793c838b7dd7bd47cf36397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwNTM5MA==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532905390", "bodyText": "Done :-)", "author": "cammiemw", "createdAt": "2020-11-30T21:10:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMTM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMTY0OQ==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532221649", "bodyText": "Do we expect to have other scorers that need to extend the IndriDisjunctionScorer?  Here we have only one such subclass, so I wonder if we could just fold all of this into a single IndriDisjunctionScorer class?  Or, are you laying bedrock for future additional query types?", "author": "mikemccand", "createdAt": "2020-11-29T15:02:15Z", "path": "lucene/core/src/java/org/apache/lucene/search/IndriAndScorer.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/** Combines scores of subscorers. If a subscorer does not contain\n+ *  the docId, a smoothing score is calculated for that \n+ *  document/subscorer combination.\n+ */\n+public class IndriAndScorer extends IndriDisjunctionScorer {", "originalCommit": "71a0bcf551a444f2d793c838b7dd7bd47cf36397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyNzI4Nw==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532927287", "bodyText": "Yes, I do hope to be able to add additional Indri query types that will extend the IndriDisjuctionScorer.", "author": "cammiemw", "createdAt": "2020-11-30T21:52:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMTY0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMTg0NA==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532221844", "bodyText": "Remove extra for?", "author": "mikemccand", "createdAt": "2020-11-29T15:03:24Z", "path": "lucene/core/src/java/org/apache/lucene/search/IndriDisjunctionScorer.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * The Indri implemenation of a disjunction scorer which stores the subscorers\n+ * for for the child queries. The score and smoothingScore methods use the list", "originalCommit": "71a0bcf551a444f2d793c838b7dd7bd47cf36397", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMjU0NQ==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532222545", "bodyText": "Hmm is this (to store boost) the only reason to have a separate IndriScorer?  If I remember right, Lucene used to apply boost similarly (every scorer kept track of it) but at one point we moved all boosting to a dedicated BoostQuery.", "author": "mikemccand", "createdAt": "2020-11-29T15:08:59Z", "path": "lucene/core/src/java/org/apache/lucene/search/IndriScorer.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The Indri parent scorer that stores the boost so that \n+ * IndriScorers can use the boost outside of the term.\n+ *\n+ */\n+abstract public class IndriScorer extends Scorer {\n+\n+\tprivate float boost;", "originalCommit": "71a0bcf551a444f2d793c838b7dd7bd47cf36397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzMzc1OA==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532933758", "bodyText": "I did this because I apply the boost in the scorer rather than in the similarity (such as in LMDirichletSimilarity), and I divide by the sum of the boosts.  I originally did this to exactly match the Indri scores; however, this is not a huge priority.  I don't have much issue with dropping this if it doesn't fit in the Lucene workflow well.", "author": "cammiemw", "createdAt": "2020-11-30T22:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMjU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMjU5Mg==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532222592", "bodyText": "Maybe link to Indri paper that describes/motivates this?", "author": "mikemccand", "createdAt": "2020-11-29T15:09:18Z", "path": "lucene/core/src/java/org/apache/lucene/search/Scorable.java", "diffHunk": "@@ -30,6 +30,13 @@\n    * Returns the score of the current document matching the query.\n    */\n   public abstract float score() throws IOException;\n+  \n+  /**\n+   * Returns the smoothing score of the current document matching the query.\n+   * This score is used when the query/term does not appear in the document.\n+   * This can return 0 or a smoothing score.", "originalCommit": "71a0bcf551a444f2d793c838b7dd7bd47cf36397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwNzk1MA==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532907950", "bodyText": "I have added more detail and a paper the describes the motivation of the smoothing score.  The description of how the smoothing score is used is at the bottom of page 11 in the paper.  It is important to note that most of the explanation has to do with when the score is a product.  Even though the IndriAndScorer does not use a product, the smoothing score is still helpful for acting like an idf.  Additionally, there are many more Indri operators that I would like to add that do use a product.", "author": "cammiemw", "createdAt": "2020-11-30T21:15:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMjU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NTA3OQ==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r542495079", "bodyText": "Great, thanks.", "author": "mikemccand", "createdAt": "2020-12-14T15:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMjU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMzMxMA==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532223310", "bodyText": "Maybe, add a few words giving some intuition about what mu does?  It looks like it roughly lets you tune how important document length is in the scoring?\nAlso, the formatting of the above equations looks like it got garbled?  You will need to use html/javadoc markup to make the formatting survive future developers viewing in browser...", "author": "mikemccand", "createdAt": "2020-11-29T15:14:30Z", "path": "lucene/core/src/java/org/apache/lucene/search/similarities/IndriDirichletSimilarity.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * ===============================================================================================\n+ * Copyright (c) 2019 Carnegie Mellon University and University of Massachusetts. All Rights\n+ * Reserved.\n+ *\n+ * Use of the Lemur Toolkit for Language Modeling and Information Retrieval is subject to the terms\n+ * of the software license set forth in the LICENSE file included with this software, and also\n+ * available at http://www.lemurproject.org/license.html\n+ *\n+ * ================================================================================================\n+ */\n+package org.apache.lucene.search.similarities;\n+\n+import java.util.List;\n+import java.util.Locale;\n+\n+import org.apache.lucene.search.Explanation;\n+import org.apache.lucene.search.similarities.BasicStats;\n+import org.apache.lucene.search.similarities.LMSimilarity;\n+\n+/**\n+ * Bayesian smoothing using Dirichlet priors as implemented in the Indri Search\n+ * engine (http://www.lemurproject.org/indri.php). Indri Dirichelet Smoothing!\n+ * tf_E + mu*P(t|D) P(t|E)= ------------------------ documentLength + documentMu\n+ * mu*P(t|C) + tf_D where P(t|D)= --------------------- doclen + mu\n+ */", "originalCommit": "71a0bcf551a444f2d793c838b7dd7bd47cf36397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwODY2MQ==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532908661", "bodyText": "I tried adding more formatting and a description of mu.  Let me know if you would like to see anything different or more.  Thanks!", "author": "cammiemw", "createdAt": "2020-11-30T21:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMzMxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMzcyNQ==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532223725", "bodyText": "Normally in Lucene AND implies MUST, i.e. required clauses.\nBut this query is actually disjunctive, right?  Documents will match even if they are missing some of the terms.  Should we name it IndriOrQuery maybe?  Or, IndriBooleanQuery?", "author": "mikemccand", "createdAt": "2020-11-29T15:17:13Z", "path": "lucene/core/src/java/org/apache/lucene/search/IndriAndQuery.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/** A Query that matches documents matching combinations of \n+ * {@link TermQuery}s or other IndriAndQuerys.\n+ */\n+public class IndriAndQuery extends IndriQuery {", "originalCommit": "71a0bcf551a444f2d793c838b7dd7bd47cf36397", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwNTAxMQ==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r532905011", "bodyText": "I agree the naming is confusing.  I have taken the naming schema as well as the logic from the original Indri search engine implementation.  The issue with renaming it is that there is already IndriOrQuery, which I have created and hope to be able to add at a future time.  I will continue to think about whether there is a better name for the IndriAndQuery though.", "author": "cammiemw", "createdAt": "2020-11-30T21:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMzcyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4OTgwNg==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r542489806", "bodyText": "OK let's keep the (somewhat confusing) naming for now.  Naming is the hardest part!!", "author": "mikemccand", "createdAt": "2020-12-14T15:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyMzcyNQ=="}], "type": "inlineReview"}, {"oid": "22e00f2224dda27f0b947d9792eb0813dc0e575b", "url": "https://github.com/apache/lucene-solr/commit/22e00f2224dda27f0b947d9792eb0813dc0e575b", "message": "Merge remote-tracking branch 'upstream/master' into LUCENE-9537", "committedDate": "2020-11-30T19:21:10Z", "type": "commit"}, {"oid": "8e784de47c27d5f629311d5148cbe8a4a3ae4752", "url": "https://github.com/apache/lucene-solr/commit/8e784de47c27d5f629311d5148cbe8a4a3ae4752", "message": "Addressed first set of git pull request comments", "committedDate": "2020-11-30T20:59:44Z", "type": "commit"}, {"oid": "f0ddef0727f9ede2e5ea97bc137c239b468b0cc2", "url": "https://github.com/apache/lucene-solr/commit/f0ddef0727f9ede2e5ea97bc137c239b468b0cc2", "message": "Added lucene copyright to test classes", "committedDate": "2020-11-30T21:21:41Z", "type": "commit"}, {"oid": "0a89a86885af36ed9dab5ef889f3b0e25f94d2ce", "url": "https://github.com/apache/lucene-solr/commit/0a89a86885af36ed9dab5ef889f3b0e25f94d2ce", "message": "Fixed tabs in IndriScorer", "committedDate": "2020-11-30T21:46:48Z", "type": "commit"}, {"oid": "219bb77017b102e6eaed086290983f0bc54a9d0e", "url": "https://github.com/apache/lucene-solr/commit/219bb77017b102e6eaed086290983f0bc54a9d0e", "message": "Fixed tabs (again)", "committedDate": "2020-11-30T22:47:27Z", "type": "commit"}, {"oid": "54ae042c36958f23e5714389857cdadd8ee3ac7d", "url": "https://github.com/apache/lucene-solr/commit/54ae042c36958f23e5714389857cdadd8ee3ac7d", "message": "Added smoothingScore to termScorer so that the IndriAndQuery can get smoothing scores for TermQueries that have a frequency of 0", "committedDate": "2020-12-01T03:05:42Z", "type": "commit"}, {"oid": "b36cc3456b03c9e9df6c8ccea5adb14ecb9d406f", "url": "https://github.com/apache/lucene-solr/commit/b36cc3456b03c9e9df6c8ccea5adb14ecb9d406f", "message": "Fixed typo", "committedDate": "2020-12-01T10:54:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MjIwNg==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r542492206", "bodyText": "Random question: will IndriQuery take advantage of Block MAX Weak And optimization?  The added smoothingScore must alter the optimization logic to find the min block score to skip to?\nI think it's OK to defer BMW to followon improvements, as long as it is not kicking in incorrectly here.", "author": "mikemccand", "createdAt": "2020-12-14T15:50:48Z", "path": "lucene/core/src/java/org/apache/lucene/search/IndriQuery.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * A Basic abstract query that all IndriQueries can extend to implement\n+ * toString, equals, getClauses, and iterator.\n+ *\n+ */\n+public abstract class IndriQuery extends Query", "originalCommit": "b36cc3456b03c9e9df6c8ccea5adb14ecb9d406f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4MjI3NQ==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r555482275", "bodyText": "Currently, IndriQuery does not take advantage of Block MAX Weak and optimization.  We iterate through all documents that that have a posting for at least one of the search terms.  I would be interested in expanding the smoothing score functionality to more parts of lucene in the future.", "author": "cammiemw", "createdAt": "2021-01-12T03:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5MjIwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NjcyOA==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r542496728", "bodyText": "Hmm, why not add a default method in the Scorable interface to return 0?  Then we don't have to add this default method in all these subclasses?", "author": "mikemccand", "createdAt": "2020-12-14T15:56:28Z", "path": "lucene/core/src/java/org/apache/lucene/search/ScoreAndDoc.java", "diffHunk": "@@ -32,4 +33,9 @@ public int docID() {\n   public float score() {\n     return score;\n   }\n+\n+  @Override\n+  public float smoothingScore(int docId) throws IOException {", "originalCommit": "b36cc3456b03c9e9df6c8ccea5adb14ecb9d406f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4Mjg5Mw==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r555482893", "bodyText": "I agree that this makes more sense :-)  I have added the default implementation of smoothingScore in Scorable and reverted my changes to add the smoothingScore method to all the unnecessary extending classes.", "author": "cammiemw", "createdAt": "2021-01-12T03:11:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NjcyOA=="}], "type": "inlineReview"}, {"oid": "4737298c1450946d71791521acbbbb362e7d503a", "url": "https://github.com/apache/lucene-solr/commit/4737298c1450946d71791521acbbbb362e7d503a", "message": "Merge remote-tracking branch 'upstream/master' into LUCENE-9537", "committedDate": "2020-12-18T20:39:15Z", "type": "commit"}, {"oid": "c625f5ef02a2aaeff414dcaebfa40e2d6ee20f25", "url": "https://github.com/apache/lucene-solr/commit/c625f5ef02a2aaeff414dcaebfa40e2d6ee20f25", "message": "Added smoothing score implementation to Scorable and removed it from extending classes", "committedDate": "2021-01-12T02:55:09Z", "type": "commit"}, {"oid": "c6d35dc75c6e5a6e2ac389742b331143f03ba404", "url": "https://github.com/apache/lucene-solr/commit/c6d35dc75c6e5a6e2ac389742b331143f03ba404", "message": "Merge remote-tracking branch 'upstream/master' into LUCENE-9537", "committedDate": "2021-01-12T03:24:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUwNTEzOA==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r555505138", "bodyText": "NULLPTR_DEREFERENCE:  accessing memory that is the null pointer on line 117 indirectly during the call to IndriAndWeight.scorer(...).", "author": "sonatype-lift", "createdAt": "2021-01-12T04:22:05Z", "path": "lucene/core/src/java/org/apache/lucene/search/IndriAndWeight.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.search;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.lucene.index.LeafReaderContext;\n+\n+/**\n+ * The Weight for IndriAndQuery, used to normalize, score and explain these\n+ * queries.\n+ */\n+public class IndriAndWeight extends Weight {\n+  \n+  private final IndriAndQuery query;\n+  private final ArrayList<Weight> weights;\n+  private final ScoreMode scoreMode;\n+  private final float boost;\n+  \n+  public IndriAndWeight(IndriAndQuery query, IndexSearcher searcher,\n+      ScoreMode scoreMode, float boost) throws IOException {\n+    super(query);\n+    this.query = query;\n+    this.boost = boost;\n+    this.scoreMode = scoreMode;\n+    weights = new ArrayList<>();\n+    for (BooleanClause c : query) {\n+      Weight w = searcher.createWeight(c.getQuery(), scoreMode, 1.0f);\n+      weights.add(w);\n+    }\n+  }\n+  \n+  private Scorer getScorer(LeafReaderContext context) throws IOException {\n+    List<Scorer> subScorers = new ArrayList<>();\n+    \n+    for (Weight w : weights) {\n+      Scorer scorer = w.scorer(context);\n+      if (scorer != null) {\n+        subScorers.add(scorer);\n+      }\n+    }\n+    \n+    if (subScorers.isEmpty()) {\n+      return null;\n+    }\n+    Scorer scorer = subScorers.get(0);\n+    if (subScorers.size() > 1) {\n+      scorer = new IndriAndScorer(this, subScorers, scoreMode, boost);\n+    }\n+    return scorer;\n+  }\n+  \n+  @Override\n+  public Scorer scorer(LeafReaderContext context) throws IOException {\n+    return getScorer(context);\n+  }\n+  \n+  @Override\n+  public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n+    Scorer scorer = getScorer(context);\n+    if (scorer != null) {\n+      BulkScorer bulkScorer = new DefaultBulkScorer(scorer);\n+      return bulkScorer;\n+    }\n+    return null;\n+  }\n+  \n+  @Override\n+  public boolean isCacheable(LeafReaderContext ctx) {\n+    for (Weight w : weights) {\n+      if (w.isCacheable(ctx) == false) return false;\n+    }\n+    return true;\n+  }\n+  \n+  @Override\n+  public Explanation explain(LeafReaderContext context, int doc)\n+      throws IOException {\n+    List<Explanation> subs = new ArrayList<>();\n+    boolean fail = false;\n+    Iterator<BooleanClause> cIter = query.iterator();\n+    for (Iterator<Weight> wIter = weights.iterator(); wIter.hasNext();) {\n+      Weight w = wIter.next();\n+      BooleanClause c = cIter.next();\n+      Explanation e = w.explain(context, doc);\n+      if (e.isMatch()) {\n+        subs.add(e);\n+      } else if (c.isRequired()) {\n+        subs.add(Explanation.noMatch(\n+            \"no match on required clause (\" + c.getQuery().toString() + \")\",\n+            e));\n+        fail = true;\n+      }\n+    }\n+    if (fail) {\n+      return Explanation.noMatch(\n+          \"Failure to meet condition(s) of required/prohibited clause(s)\",\n+          subs);\n+    } else {\n+      Scorer scorer = scorer(context);\n+      int advanced = scorer.iterator().advance(doc);", "originalCommit": "c625f5ef02a2aaeff414dcaebfa40e2d6ee20f25", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc5Mjk3NA==", "url": "https://github.com/apache/lucene-solr/pull/2097#discussion_r555792974", "bodyText": "Hmm, can scorer ever be null?  Other Lucene queries can/do return null scorers to indicate that there are no matches for this query in this segment, and callers need to check for that.  But maybe in this context it never happens?", "author": "mikemccand", "createdAt": "2021-01-12T14:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTUwNTEzOA=="}], "type": "inlineReview"}, {"oid": "88c9c350903a289a66a1a8e17ad522691381851f", "url": "https://github.com/apache/lucene-solr/commit/88c9c350903a289a66a1a8e17ad522691381851f", "message": "Formatting fixes and IndriAndWeight explain NullPointer fix", "committedDate": "2021-01-12T21:39:41Z", "type": "commit"}, {"oid": "0c61859e1bc2892ff80e0ca19727047e2e63412d", "url": "https://github.com/apache/lucene-solr/commit/0c61859e1bc2892ff80e0ca19727047e2e63412d", "message": "Ran ./gradlew :lucene:core:spotlessApply", "committedDate": "2021-01-12T22:15:47Z", "type": "commit"}, {"oid": "95e063cc6cabb282ee712aafd53ec77887087e13", "url": "https://github.com/apache/lucene-solr/commit/95e063cc6cabb282ee712aafd53ec77887087e13", "message": "Merge remote-tracking branch 'upstream/master' into LUCENE-9537", "committedDate": "2021-01-20T20:00:12Z", "type": "commit"}, {"oid": "e6ce673b4d21047ab4ad94aa74197f10565523e0", "url": "https://github.com/apache/lucene-solr/commit/e6ce673b4d21047ab4ad94aa74197f10565523e0", "message": "Added entry to CHANGES.txt", "committedDate": "2021-01-20T20:20:25Z", "type": "commit"}, {"oid": "b68cf4340346afdd9bf53f03d29a78be527a2c43", "url": "https://github.com/apache/lucene-solr/commit/b68cf4340346afdd9bf53f03d29a78be527a2c43", "message": "Fixed CHANGES.txt formatting", "committedDate": "2021-01-20T20:25:11Z", "type": "commit"}, {"oid": "3bbb848e37b9e1bb5f76cb5f72f73a320b7aba05", "url": "https://github.com/apache/lucene-solr/commit/3bbb848e37b9e1bb5f76cb5f72f73a320b7aba05", "message": "Merge remote-tracking branch 'upstream/master' into LUCENE-9537", "committedDate": "2021-01-26T17:16:24Z", "type": "commit"}, {"oid": "91ff3111791278b8ea5ee39f137b402f801431e0", "url": "https://github.com/apache/lucene-solr/commit/91ff3111791278b8ea5ee39f137b402f801431e0", "message": "Removed smoothingScore method from Scorer to fix TestFeature Error", "committedDate": "2021-01-26T17:18:07Z", "type": "commit"}, {"oid": "1a5b9547202e9db89ab4eb6166b1e91abc7e33a3", "url": "https://github.com/apache/lucene-solr/commit/1a5b9547202e9db89ab4eb6166b1e91abc7e33a3", "message": "Ran spotlessApply", "committedDate": "2021-01-26T17:38:27Z", "type": "commit"}, {"oid": "87b7b41948d4203b435356051ec45e9439147e97", "url": "https://github.com/apache/lucene-solr/commit/87b7b41948d4203b435356051ec45e9439147e97", "message": "Merge remote-tracking branch 'upstream/master' into LUCENE-9537", "committedDate": "2021-01-27T22:20:01Z", "type": "commit"}, {"oid": "d18c782d21a4a3536569ede88f8d7641be4e73ae", "url": "https://github.com/apache/lucene-solr/commit/d18c782d21a4a3536569ede88f8d7641be4e73ae", "message": "Fixed TestFeature smoothingScore implementation", "committedDate": "2021-01-27T22:48:10Z", "type": "commit"}]}