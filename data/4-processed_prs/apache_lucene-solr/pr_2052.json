{"pr_number": 2052, "pr_title": "LUCENE-8982:  Make NativeUnixDirectory pure java with FileChannel direct IO flag, and rename to DirectIODirectory", "pr_createdAt": "2020-10-31T03:20:10Z", "pr_url": "https://github.com/apache/lucene-solr/pull/2052", "timeline": [{"oid": "c1abb549f0b8c973b5470fc4405b6d8d4b45a9bf", "url": "https://github.com/apache/lucene-solr/commit/c1abb549f0b8c973b5470fc4405b6d8d4b45a9bf", "message": "LUCENE-8982: Make NativeUnixDirectory pure java with FileChannel direct IO flag, and rename to DirectIODirectory", "committedDate": "2020-10-31T02:46:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0NTM2MA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r518845360", "bodyText": "Will this be Lucene 9.0 only?\nThe com.sun.nio.file.ExtendedOpenOption.DIRECT was added as of JDK 10 right?\nSince Lucene 8.x still allows Java 8.x (and Lucene 9.x will require Java 11.x minimum), I think this improvement must be Lucene 9.x only?", "author": "mikemccand", "createdAt": "2020-11-06T15:59:37Z", "path": "lucene/CHANGES.txt", "diffHunk": "@@ -156,6 +156,9 @@ Improvements\n * LUCENE-9531: Consolidated CharStream and FastCharStream classes: these have been moved\n   from each query parser package to org.apache.lucene.queryparser.charstream (Dawid Weiss).\n \n+* LUCENE-8982: Make NativeUnixDirectory pure java with FileChannel direct IO flag,", "originalCommit": "c1abb549f0b8c973b5470fc4405b6d8d4b45a9bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTEzNDgyMg==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r519134822", "bodyText": "Yes according to https://bugs.openjdk.java.net/browse/JDK-8189192, com.sun.nio.file.ExtendedOpenOption.DIRECT was added since JDK 10, so this is Lucene 9.0 only feature.", "author": "zacharymorn", "createdAt": "2020-11-07T06:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0NTM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0NjA2Nw==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r518846067", "bodyText": "Hmm I wonder why we got away without using .alignedSlice before?", "author": "mikemccand", "createdAt": "2020-11-06T16:00:46Z", "path": "lucene/misc/src/java/org/apache/lucene/store/DirectIODirectory.java", "diffHunk": "@@ -164,15 +149,16 @@ public IndexOutput createOutput(String name, IOContext context) throws IOExcepti\n     private long fileLength;\n     private boolean isOpen;\n \n-    public NativeUnixIndexOutput(Path path, String name, int bufferSize) throws IOException {\n-      super(\"NativeUnixIndexOutput(path=\\\"\" + path.toString() + \"\\\")\", name);\n-      //this.path = path;\n-      final FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), false);\n-      fos = new FileOutputStream(fd);\n-      //fos = new FileOutputStream(path);\n-      channel = fos.getChannel();\n-      buffer = ByteBuffer.allocateDirect(bufferSize);\n-      this.bufferSize = bufferSize;\n+  @SuppressForbidden(reason = \"com.sun.nio.file.ExtendedOpenOption: Direct I/O with FileChannel requires the use of internal proprietary API ExtendedOpenOption.DIRECT\")\n+  public DirectIOIndexOutput(Path path, String name) throws IOException {\n+      super(\"DirectIOIndexOutput(path=\\\"\" + path.toString() + \"\\\")\", name);\n+\n+      int blockSize = Math.toIntExact(Files.getFileStore(path).getBlockSize());\n+      bufferSize = Math.addExact(blockSize, blockSize - 1);\n+      buffer = ByteBuffer.allocateDirect(bufferSize).alignedSlice(blockSize);", "originalCommit": "c1abb549f0b8c973b5470fc4405b6d8d4b45a9bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTEzNDk3MQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r519134971", "bodyText": "ByteBuffer.alignedSlice was added since JDK 9 which was released in 2017, so I guess it's just the code hasn't been updated to take advantage of the new API?", "author": "zacharymorn", "createdAt": "2020-11-07T06:39:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0NjA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0NzA4OA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r518847088", "bodyText": "Hmm does this mean we are losing the byte buffering during merging?", "author": "mikemccand", "createdAt": "2020-11-06T16:02:33Z", "path": "lucene/misc/src/java/org/apache/lucene/store/DirectIODirectory.java", "diffHunk": "@@ -66,45 +66,32 @@\n  *\n  * @lucene.experimental\n  */\n-public class NativeUnixDirectory extends FSDirectory {\n+public class DirectIODirectory extends FSDirectory {\n \n   // TODO: this is OS dependent, but likely 512 is the LCD\n   private final static long ALIGN = 512;\n   private final static long ALIGN_NOT_MASK = ~(ALIGN-1);\n-  \n-  /** Default buffer size before writing to disk (256 KB);\n-   *  larger means less IO load but more RAM and direct\n-   *  buffer storage space consumed during merging. */\n-\n-  public final static int DEFAULT_MERGE_BUFFER_SIZE = 262144;\n \n   /** Default min expected merge size before direct IO is\n    *  used (10 MB): */\n   public final static long DEFAULT_MIN_BYTES_DIRECT = 10*1024*1024;\n \n-  private final int mergeBufferSize;\n   private final long minBytesDirect;\n   private final Directory delegate;\n \n   /** Create a new NIOFSDirectory for the named location.\n    * \n    * @param path the path of the directory\n-   * @param lockFactory to use\n-   * @param mergeBufferSize Size of buffer to use for\n-   *    merging.  See {@link #DEFAULT_MERGE_BUFFER_SIZE}.\n    * @param minBytesDirect Merges, or files to be opened for\n    *   reading, smaller than this will\n    *   not use direct IO.  See {@link\n    *   #DEFAULT_MIN_BYTES_DIRECT}\n+   * @param lockFactory to use\n    * @param delegate fallback Directory for non-merges\n    * @throws IOException If there is a low-level I/O error\n    */\n-  public NativeUnixDirectory(Path path, int mergeBufferSize, long minBytesDirect, LockFactory lockFactory, Directory delegate) throws IOException {\n+  public DirectIODirectory(Path path, long minBytesDirect, LockFactory lockFactory, Directory delegate) throws IOException {\n     super(path, lockFactory);\n-    if ((mergeBufferSize & ALIGN) != 0) {\n-      throw new IllegalArgumentException(\"mergeBufferSize must be 0 mod \" + ALIGN + \" (got: \" + mergeBufferSize + \")\");\n-    }\n-    this.mergeBufferSize = mergeBufferSize;", "originalCommit": "c1abb549f0b8c973b5470fc4405b6d8d4b45a9bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTEzNTAxMw==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r519135013", "bodyText": "This section was removed since mergeBufferSize was no longer being used in the constructors for DirectIODirectory$DirectIOIndexInput and DirectIODirectory$DirectIOIndexOutput (previously passed in to fill the bufferSize constructor parameter), as those are now replaced by the dynamic block size allocation:\nblockSize = Math.toIntExact(Files.getFileStore(path).getBlockSize());\nbufferSize = Math.addExact(blockSize, blockSize - 1);\n\nI assume the new bufferSize being 2 x  dynamic blockSize will still provide that buffering?", "author": "zacharymorn", "createdAt": "2020-11-07T06:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0NzA4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg2ODA3OQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r519868079", "bodyText": "Hmm but previously it was a 256 KB buffer, by default, and caller could change that if they wanted.\nBut with this change, it's now hardwired to something much smaller (512 bytes, or 1 or 4 KB; I'm not sure what \"typical\" filesystem block sizes are now?).\nThis buffering, and its size, is really important when using direct IO because every write will go straight to the device, so a larger buffer amortizes the cost of such writes.  I think we need to keep the option for caller to set this buffer size, and leave it at the 256 KB default?  Or at least, let's not try to change that behavior here, and leave this change 100% focused on moving to pure java implementation?", "author": "mikemccand", "createdAt": "2020-11-09T14:47:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0NzA4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2ODc0Mw==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r520268743", "bodyText": "I see it makes sense. I've reverted the relevant section of code in the latest commits to keep it focused on moving to pure java implementation.", "author": "zacharymorn", "createdAt": "2020-11-10T03:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0NzA4OA=="}], "type": "inlineReview"}, {"oid": "74e364807c037e2a03c738a397363a39307679de", "url": "https://github.com/apache/lucene-solr/commit/74e364807c037e2a03c738a397363a39307679de", "message": "Revert back to using existing bufferSize instead of deriving from blockSize, which may be too small for actual lucene use cases", "committedDate": "2020-11-10T03:45:58Z", "type": "commit"}, {"oid": "ae2c4646c804c922e7b3c78095a2ab7df1240a5f", "url": "https://github.com/apache/lucene-solr/commit/ae2c4646c804c922e7b3c78095a2ab7df1240a5f", "message": "Remove extra line and fix indentation", "committedDate": "2020-11-10T03:54:11Z", "type": "commit"}, {"oid": "877a689c9cf854b49b8c12a800b2c32ec56f5234", "url": "https://github.com/apache/lucene-solr/commit/877a689c9cf854b49b8c12a800b2c32ec56f5234", "message": "Merge branch 'master' into LUCENE-8982-DirectIO", "committedDate": "2020-11-16T19:56:36Z", "type": "commit"}, {"oid": "d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f", "url": "https://github.com/apache/lucene-solr/commit/d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f", "message": "Update test case and implementation", "committedDate": "2020-11-17T06:41:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0MjU3OA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r524942578", "bodyText": "I think we should make a copy of the NativeUnixDirectory, modify this to direct IO, then perhaps benchmark how they perform? If we replace in-place we won't be able to do it (unless you compile from different git commits). Then any removal of native code, should it follow-up, would be a cleaner patch as well.", "author": "dweiss", "createdAt": "2020-11-17T07:49:15Z", "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -74,12 +65,12 @@\n  *\n  * @lucene.experimental\n  */\n-public class NativeUnixDirectory extends FSDirectory {", "originalCommit": "d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk1MDg0NA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r524950844", "bodyText": "I don't think any explicit perf testing is needed, as we just replace the calls to our CPP file by setting the flag on open of FileChannel.\nIt's good that I have seen this pull request, because I was wondering why we took the \"make native builds available\" at all.\nWe should also remove WindowsDirectory, because this one also works on Windows.", "author": "uschindler", "createdAt": "2020-11-17T08:04:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk1ODEzMQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r524958131", "bodyText": "Ok then - up to you! It was a fun exercise to combine native code anyway. :)", "author": "dweiss", "createdAt": "2020-11-17T08:12:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2MTgzMQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r524961831", "bodyText": "I am not fully sure if the ExtendedOpenOption works at all with Windows. When checking the OpenJDK sources it seems to throw UOE, but haven't tested with new JDKs yet.\nAnyways, we should try to get rid of WindowsDirectory, too, as the intention behind it is the same: do direct IO, it's just named differently on Windows.\nWe should maybe also look into the other ExtendedOpenptions.", "author": "uschindler", "createdAt": "2020-11-17T08:18:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2Mjc3MQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r524962771", "bodyText": "Thanks @dweiss and @uschindler for the reviews! The reason I originally opened another independent PR to make native build, and replaced the NativeUnixDirectory code in place here with the new flag was that, when I played with the luceneutil tool a bit, I noticed it took two complete lucene-solr check outs and run them side-by-side for performance testing. Plus there's more code in native code than just open direct setting. So I thought it might work better here if these two changes happened independently.\nWill push another commit to remove WindowsDirectory in a day, as it's getting too late for me now :)", "author": "zacharymorn", "createdAt": "2020-11-17T08:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2MzYwNA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r524963604", "bodyText": "IMHO, we should add more Javadocs, that this directory may throw UnsupportedOperationException if the underlying platform does not allow direct IO.", "author": "uschindler", "createdAt": "2020-11-17T08:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2NzcxNQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r524967715", "bodyText": "I can confirm, windows works: http://cr.openjdk.java.net/~bpb/8164900/webrev.19/", "author": "uschindler", "createdAt": "2020-11-17T08:28:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk3MjA1Ng==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r524972056", "bodyText": "No worries, Zach. I think that native build part was a fun exercise! Code comes and goes, it's normal. Sleep well.", "author": "dweiss", "createdAt": "2020-11-17T08:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMwNTk0Mg==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525305942", "bodyText": "Will push another commit to remove WindowsDirectory in a day, as it's getting too late for me now :)\n\nWe should make a completely separate PR out of this. WindowsDirectory is also native, but we should still discuss if it was ever used. On Windows, currently you can only use MMapDirectory in a highly concurrent environment, because of the locking problem with positional reads in FileChannel.", "author": "uschindler", "createdAt": "2020-11-17T16:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0NjYyOA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525746628", "bodyText": "IMHO, we should add more Javadocs, that this directory may throw UnsupportedOperationException if the underlying platform does not allow direct IO.\n\nOps yes I saw saw as well, but forgot to add earlier. Just added more java docs in latest commit.\n\nNo worries, Zach. I think that native build part was a fun exercise! Code comes and goes, it's normal. Sleep well.\n\nHaha thanks Dawid! I've learnt a great deal from that exercise as well!\n\nOn Windows, currently you can only use MMapDirectory in a highly concurrent environment, because of the locking problem with positional reads in FileChannel.\n\nI would like to learn more about this issue but can't seems to find in java doc for ExtendedOpenOption.DIRECT. Is this the one you are referring to:\n\nhttps://lucene.apache.org/core/8_1_1/core/org/apache/lucene/store/FSDirectory.html  \"Unfortunately, due to a Windows-only Sun JRE bug this is a poor choice for Windows, but on all other platforms this is the preferred choice.\"\nhttps://bugs.java.com/bugdatabase/view_bug.do?bug_id=6265734", "author": "zacharymorn", "createdAt": "2020-11-18T03:43:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkwOTMyMQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525909321", "bodyText": "You are right, WindowsDirectory is unrelated to direct IO. So let's discuss this on separate issue! The background is here: https://issues.apache.org/jira/browse/LUCENE-2791. The issue behind that is the following: https://bugs.openjdk.java.net/browse/JDK-6265734", "author": "uschindler", "createdAt": "2020-11-18T08:48:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk0MjU3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk1NDExOA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r524954118", "bodyText": "More of the javadocs below need to go away, too.", "author": "uschindler", "createdAt": "2020-11-17T08:07:31Z", "path": "lucene/misc/src/java/overview.html", "diffHunk": "@@ -35,7 +35,7 @@ <h2>NativeUnixDirectory</h2>\n have to compile on your platform.\n \n <p>\n-{@link org.apache.lucene.misc.store.NativeUnixDirectory} is a Directory implementation that bypasses the\n+{@link org.apache.lucene.misc.store.DirectIODirectory} is a Directory implementation that bypasses the", "originalCommit": "d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0NjY4NA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525746684", "bodyText": "Done.", "author": "zacharymorn", "createdAt": "2020-11-18T03:43:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk1NDExOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk1ODc0Nw==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r524958747", "bodyText": "In my opinion, this test should also extend the BaseDirectoryTestCase, because it then does a full test of all I/O functionality, including multi-threaded and corner cases - this is important to make sure that the directory works as expected, also if somebody uses it when not merging (e.g. for searching). The original test did not do this as this relied on a native library.\nNevertheless: I am not fully sure if Windows supports this ExtendedOpenOption. I had no time to test this yet.", "author": "uschindler", "createdAt": "2020-11-17T08:13:21Z", "path": "lucene/misc/src/test/org/apache/lucene/misc/store/DirectIODirectoryTest.java", "diffHunk": "@@ -18,29 +18,37 @@\n \n import com.carrotsearch.randomizedtesting.LifecycleScope;\n import com.carrotsearch.randomizedtesting.RandomizedTest;\n-import org.apache.lucene.store.ByteBuffersDirectory;\n-import org.apache.lucene.store.Directory;\n-import org.apache.lucene.store.IOContext;\n-import org.apache.lucene.store.MergeInfo;\n+import org.apache.lucene.store.*;\n import org.apache.lucene.util.LuceneTestCase;\n-import org.junit.Rule;\n-import org.junit.rules.TestRule;\n \n import java.io.IOException;\n-import java.util.EnumSet;\n+import java.nio.file.Files;\n \n-public class NativeUnixDirectoryTest extends LuceneTestCase {\n-  @Rule\n-  public static TestRule requiresNative = new NativeLibEnableRule(\n-      EnumSet.of(NativeLibEnableRule.OperatingSystem.MAC,\n-          NativeLibEnableRule.OperatingSystem.FREE_BSD,\n-          NativeLibEnableRule.OperatingSystem.LINUX));\n+import static org.apache.lucene.misc.store.DirectIODirectory.DEFAULT_MIN_BYTES_DIRECT;\n \n-  public void testLibraryLoaded() throws IOException {\n+public class DirectIODirectoryTest extends LuceneTestCase {", "originalCommit": "d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2MTMzMQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r524961331", "bodyText": "The native version worked for me. I agree with extending base directory test case - I just showed an example of how to make the test run across platforms, even if it required a native dependency.", "author": "dweiss", "createdAt": "2020-11-17T08:17:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk1ODc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2NTQ2NA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r524965464", "bodyText": "OK, then WindowsDirectory is obsolete, too. Thanks for testing. Nevertheless, as mentioned before, we should add javadocs, that on unsupported platforms, this directory may throw UOE on opening/closing IndexInputs.\nWe should also extend this test to use a random directory (FS based) as delegate. It looks strange to me to just use a ByteBuffersDirectory as delegate, as the filestore is totally different.\nSo: Extend the BaseDirectoryTestcase and then create a random temp dir and then build  FSDirectory.open() as backend and use DirectIO as wrapper on top.", "author": "uschindler", "createdAt": "2020-11-17T08:25:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk1ODc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0NzQxOQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525747419", "bodyText": "Extend the BaseDirectoryTestcase and then create a random temp dir and then build FSDirectory.open() as backend and use DirectIO as wrapper on top.\n\nDone (hope I got it right?)", "author": "zacharymorn", "createdAt": "2020-11-18T03:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk1ODc0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI1NzMxNQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525257315", "bodyText": "This should really be a // nocommit right?  I.e. we want to solve this question before committing, and we don't plan to commit this // TODO.", "author": "mikemccand", "createdAt": "2020-11-17T15:35:03Z", "path": "lucene/misc/native/src/main/posix/NativePosixUtil.cpp", "diffHunk": "@@ -102,6 +102,7 @@ JNIEXPORT jint JNICALL Java_org_apache_lucene_misc_store_NativePosixUtil_posix_1\n }\n #endif\n \n+// TODO: To be removed together?", "originalCommit": "d1eb451bc053a78f9c01ccd1d99c7e3d7feae93f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5NDE0OQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525294149", "bodyText": "I'd like to get rid of it as soon as possible. This class is obsolete and completely unused, unless we also keep the original directory implementation.", "author": "uschindler", "createdAt": "2020-11-17T16:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI1NzMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0NzA4Mg==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525747082", "bodyText": "This should really be a // nocommit right? I.e. we want to solve this question before committing, and we don't plan to commit this // TODO.\n\nOps sorry, didn't realize the nocommit usage there. Will use it for future patches.\n\nI'd like to get rid of it as soon as possible. This class is obsolete and completely unused, unless we also keep the original directory implementation.\n\nI've removed them in latest commit.", "author": "zacharymorn", "createdAt": "2020-11-18T03:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI1NzMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NzgyNg==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r527777826", "bodyText": "Awesome!\nYeah, // nocommit comment is really helpful in patches/PRs to note something that you know you need to fix before pushing.  Plus, our build tooling will catch us if we accidentally push code with // nocommit still.", "author": "mikemccand", "createdAt": "2020-11-20T15:43:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI1NzMxNQ=="}], "type": "inlineReview"}, {"oid": "759e4b49bf56e769e7013dd9ea175ddb5b8b5feb", "url": "https://github.com/apache/lucene-solr/commit/759e4b49bf56e769e7013dd9ea175ddb5b8b5feb", "message": "Address following comments:\n1. Remove outdated comment in overview.html\n2. Add java docs for UnsupportedOperationException when direct IO is not available\n3. Remove outdated open_direct method in native code and java jni\n4. Update test to extend BaseDirectoryTestCase, and use FSDirectory.open to create a real directory on file system for testing", "committedDate": "2020-11-18T03:23:26Z", "type": "commit"}, {"oid": "321242178526a47958f902680a9e0c44d9089592", "url": "https://github.com/apache/lucene-solr/commit/321242178526a47958f902680a9e0c44d9089592", "message": "Miss one java doc update", "committedDate": "2020-11-18T03:27:21Z", "type": "commit"}, {"oid": "0e2b787aeca722e96d81cbcc72c02df36b368c11", "url": "https://github.com/apache/lucene-solr/commit/0e2b787aeca722e96d81cbcc72c02df36b368c11", "message": "Remove WindowsDirectory", "committedDate": "2020-11-18T03:28:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc1OTQyMQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525759421", "bodyText": "Renamed DirectIODirectoryTest to TestDirectIODirectory to follow the convention, and applied changes to test as suggested. Looks like Git somehow see this as a new file now.", "author": "zacharymorn", "createdAt": "2020-11-18T03:56:42Z", "path": "lucene/misc/src/test/org/apache/lucene/misc/store/TestDirectIODirectory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.misc.store;\n+\n+import com.carrotsearch.randomizedtesting.LifecycleScope;\n+import com.carrotsearch.randomizedtesting.RandomizedTest;\n+import org.apache.lucene.store.*;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static org.apache.lucene.misc.store.DirectIODirectory.DEFAULT_MIN_BYTES_DIRECT;\n+\n+public class TestDirectIODirectory extends BaseDirectoryTestCase {", "originalCommit": "321242178526a47958f902680a9e0c44d9089592", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMDkyOQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525910929", "bodyText": "That's because of the new tests in it, it looks too different to the forked file. So it's 2 different files now. But this really depends on the Git version that is used.", "author": "uschindler", "createdAt": "2020-11-18T08:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc1OTQyMQ=="}], "type": "inlineReview"}, {"oid": "cc628007396f0fea0ce0cef910daac69560d6d7f", "url": "https://github.com/apache/lucene-solr/commit/cc628007396f0fea0ce0cef910daac69560d6d7f", "message": "Revert \"Remove WindowsDirectory\"\n\nThis reverts commit 0e2b787aeca722e96d81cbcc72c02df36b368c11.", "committedDate": "2020-11-18T08:25:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMjQ3OA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525912478", "bodyText": "Thanks great. We have to check, if the base class also sometimes send the correct IOContexts, so our directory is triggered. Because the wrong IOContext will cause everything to be delegated to the underlying FSDirectory.", "author": "uschindler", "createdAt": "2020-11-18T08:53:08Z", "path": "lucene/misc/src/test/org/apache/lucene/misc/store/TestDirectIODirectory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.misc.store;\n+\n+import com.carrotsearch.randomizedtesting.LifecycleScope;\n+import com.carrotsearch.randomizedtesting.RandomizedTest;\n+import org.apache.lucene.store.*;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static org.apache.lucene.misc.store.DirectIODirectory.DEFAULT_MIN_BYTES_DIRECT;\n+\n+public class TestDirectIODirectory extends BaseDirectoryTestCase {\n+  public void testWriteReadWithDirectIO() throws IOException {\n+    try(Directory dir = getDirectory(RandomizedTest.newTempDir(LifecycleScope.TEST))) {\n+      final long blockSize = Files.getFileStore(createTempFile()).getBlockSize();\n+      final long minBytesDirect = Double.valueOf(Math.ceil(DEFAULT_MIN_BYTES_DIRECT / blockSize)).longValue() *\n+                                    blockSize;\n+      // Need to worry about overflows here?\n+      final int writtenByteLength = Math.toIntExact(minBytesDirect);\n+\n+      MergeInfo mergeInfo = new MergeInfo(1000, Integer.MAX_VALUE, true, 1);\n+      final IOContext context = new IOContext(mergeInfo);\n+\n+      IndexOutput indexOutput = dir.createOutput(\"test\", context);\n+      indexOutput.writeBytes(new byte[writtenByteLength], 0, writtenByteLength);\n+      IndexInput indexInput = dir.openInput(\"test\", context);\n+\n+      assertEquals(\"The length of bytes read should equal to written\", writtenByteLength, indexInput.length());\n+\n+      indexOutput.close();\n+      indexInput.close();\n+    }\n+  }\n+\n+  @Override\n+  protected Directory getDirectory(Path path) throws IOException {", "originalCommit": "cc628007396f0fea0ce0cef910daac69560d6d7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxODI3OQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525918279", "bodyText": "I verified: BaseDirectoryTestCase uses newIOContext(Random). So we have the correct randomization and our directory is used from time to time.", "author": "uschindler", "createdAt": "2020-11-18T09:01:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMjQ3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwNzM5Nw==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r526607397", "bodyText": "Cool thanks for the verification!", "author": "zacharymorn", "createdAt": "2020-11-19T05:42:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMjQ3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMzA2MA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r525913060", "bodyText": "We also have LuceneTestCase.newFSDirectory(path), which adds some randomization. I'd suggest to use this method instead.", "author": "uschindler", "createdAt": "2020-11-18T08:54:02Z", "path": "lucene/misc/src/test/org/apache/lucene/misc/store/TestDirectIODirectory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.misc.store;\n+\n+import com.carrotsearch.randomizedtesting.LifecycleScope;\n+import com.carrotsearch.randomizedtesting.RandomizedTest;\n+import org.apache.lucene.store.*;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import static org.apache.lucene.misc.store.DirectIODirectory.DEFAULT_MIN_BYTES_DIRECT;\n+\n+public class TestDirectIODirectory extends BaseDirectoryTestCase {\n+  public void testWriteReadWithDirectIO() throws IOException {\n+    try(Directory dir = getDirectory(RandomizedTest.newTempDir(LifecycleScope.TEST))) {\n+      final long blockSize = Files.getFileStore(createTempFile()).getBlockSize();\n+      final long minBytesDirect = Double.valueOf(Math.ceil(DEFAULT_MIN_BYTES_DIRECT / blockSize)).longValue() *\n+                                    blockSize;\n+      // Need to worry about overflows here?\n+      final int writtenByteLength = Math.toIntExact(minBytesDirect);\n+\n+      MergeInfo mergeInfo = new MergeInfo(1000, Integer.MAX_VALUE, true, 1);\n+      final IOContext context = new IOContext(mergeInfo);\n+\n+      IndexOutput indexOutput = dir.createOutput(\"test\", context);\n+      indexOutput.writeBytes(new byte[writtenByteLength], 0, writtenByteLength);\n+      IndexInput indexInput = dir.openInput(\"test\", context);\n+\n+      assertEquals(\"The length of bytes read should equal to written\", writtenByteLength, indexInput.length());\n+\n+      indexOutput.close();\n+      indexInput.close();\n+    }\n+  }\n+\n+  @Override\n+  protected Directory getDirectory(Path path) throws IOException {\n+    Directory delegate = FSDirectory.open(path);", "originalCommit": "cc628007396f0fea0ce0cef910daac69560d6d7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxNTQ2MQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r526615461", "bodyText": "I just gave this a try, but looks like it would consistently fail some test cases in BaseDirectoryTestCase:\n\nWith plain replacement of FSDirectory.open(path) with LuceneTestCase.newFSDirectory(path), this would fail  BaseDirectoryTestCase.testCreateOutputForExistingFile. The issue is DirectIODirectory delegates to MockDirectoryWrapper.createOutput for file creation, but FSDirectory.deleteFile for file deletion. This cause MockDirectoryWrapper.createdFiles variable to not be updated properly for deletion, and thus test failed with exception FileAlreadyExistsException\nWhen I also tried to delegate DirectIODirectory.deleteFile to MockDirectoryWrapper.deleteFile with\n\n@Override\npublic void deleteFile(String name) throws IOException {\n  delegate.deleteFile(name);\n}\n\nBaseDirectoryTestCase.testCreateOutputForExistingFile will now pass, but BaseDirectoryTestCase.testPendingDeletions  will start to fail with FileAlreadyExistsException, with tempDir folder containing a bunch of random files not deleted due to VirusCheckingFS rejecting deletion. I'm still debugging this but it may take some time.", "author": "zacharymorn", "createdAt": "2020-11-19T06:08:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMzA2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM3MzA0Ng==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r527373046", "bodyText": "I've figured it out. Looks like more methods in DirectIODirectory need to be delegated. Could you please take a look at the latest commit, and let me know if if looks good?", "author": "zacharymorn", "createdAt": "2020-11-20T03:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkxMzA2MA=="}], "type": "inlineReview"}, {"oid": "a4752d5cc0f79eb0b233b03f84167f6e1ee42ed1", "url": "https://github.com/apache/lucene-solr/commit/a4752d5cc0f79eb0b233b03f84167f6e1ee42ed1", "message": "Replace FSDirectory.open with LuceneTestCase.newFSDirectory for test, and update DirectIODirectory to delegate some calls", "committedDate": "2020-11-19T21:12:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3MzkwNQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r527773905", "bodyText": "Can we move this to @throws javadoc tag?", "author": "mikemccand", "createdAt": "2020-11-20T15:37:26Z", "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -72,14 +64,17 @@\n  * and OS X; other Unixes should work but have not been\n  * tested!  Use at your own risk.\n  *\n+ * <p>Throws UnsupportedOperationException if the operating system or", "originalCommit": "a4752d5cc0f79eb0b233b03f84167f6e1ee42ed1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA1Mzk4NQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r528053985", "bodyText": "Ops. Fixed.", "author": "zacharymorn", "createdAt": "2020-11-21T02:07:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3MzkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NTkwNg==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r527775906", "bodyText": "Hmm why did we remove the randomness about which (confusingly) different exception to throw here?  This randomness was (is?) useful to help test that Lucene indeed catches FNFE and NSFE interchangeably.", "author": "mikemccand", "createdAt": "2020-11-20T15:40:26Z", "path": "lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper.java", "diffHunk": "@@ -745,7 +745,7 @@ public synchronized IndexInput openInput(String name, IOContext context) throws\n       maybeThrowDeterministicException();\n     }\n     if (!LuceneTestCase.slowFileExists(in, name)) {\n-      throw randomState.nextBoolean() ? new FileNotFoundException(name + \" in dir=\" + in) : new NoSuchFileException(name + \" in dir=\" + in);\n+      throw new NoSuchFileException(name + \" in dir=\" + in);", "originalCommit": "a4752d5cc0f79eb0b233b03f84167f6e1ee42ed1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODA1NDA4OQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r528054089", "bodyText": "Ops sorry this was work-in-progress and got accidentally pushed (I got too excited from all the tests passed after changing to LuceneTestCase.newFSDirectory(path) in test) .\nThe reason for the change here is that in BaseDirectoryTestCase.testPendingDeletions, it specifically tests for NoSuchFileException , so I initially removed it to confirm that's the code failing the test:\n\n  \n    \n      lucene-solr/lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase.java\n    \n    \n        Lines 1197 to 1199\n      in\n      fddb531\n    \n    \n    \n    \n\n        \n          \n           expectThrows(NoSuchFileException.class, () -> {       \n        \n\n        \n          \n             fsDir.openInput(fileName, IOContext.DEFAULT); \n        \n\n        \n          \n           }); \n        \n    \n  \n\n\nI've reverted this change, and update the test method to check for either exception.\n\nThis randomness was (is?) useful to help test\n\nI did run ./gradlew check with the randomness removed a few times, and the tests passed, so either the randomness did not kick in, or the other exception wasn't actually used in code under test.", "author": "zacharymorn", "createdAt": "2020-11-21T02:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NTkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODExMTQ1Mw==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r528111453", "bodyText": "You can \"multiply\" test runs to avoid re-running manually, Zach. Read up on how to do it (and how it works) here:\nhttps://github.com/apache/lucene-solr/blob/master/help/tests.txt#L84", "author": "dweiss", "createdAt": "2020-11-21T07:15:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NTkwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA0NDE5Mg==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r533044192", "bodyText": "Sorry Dawid for the late reply, I took a week long vacation for Thanksgiving.\nAh this is a great tip! Was waiting for about half an hour before for each ./gradlew check. Thanks for the suggestion!", "author": "zacharymorn", "createdAt": "2020-12-01T03:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NTkwNg=="}], "type": "inlineReview"}, {"oid": "cb1c7501359b8febdc4fc2f43e823c74c1b6cc92", "url": "https://github.com/apache/lucene-solr/commit/cb1c7501359b8febdc4fc2f43e823c74c1b6cc92", "message": "Address comments\n1. Add back the randomess for no file exception, and update BaseDirectoryTestCase to handle it accordingly\n2. Remove native related code for POSIX", "committedDate": "2020-11-20T20:07:18Z", "type": "commit"}, {"oid": "74c529a9934da30f8e4441d7e89ac0199358ff0d", "url": "https://github.com/apache/lucene-solr/commit/74c529a9934da30f8e4441d7e89ac0199358ff0d", "message": "Fix stylying", "committedDate": "2020-11-21T02:07:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg1MTQxNw==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r534851417", "bodyText": "I'd leave it in as it was (multiplatform includes, conditionally) - doesn't hurt even if we only compile on a single platform and may save somebody some head-scratching in the future.", "author": "dweiss", "createdAt": "2020-12-03T07:55:11Z", "path": "lucene/misc/native/build.gradle", "diffHunk": "@@ -51,11 +47,7 @@ tasks.withType(CppCompile).configureEach {\n   // is present.\n   systemIncludes.from file(\"${javaHome}/include\")\n \n-  for (def path : [", "originalCommit": "74c529a9934da30f8e4441d7e89ac0199358ff0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgxMjIxMA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r535812210", "bodyText": "Sorry for dropping off the radar a bit. It looks good to me. It is a pity we can't drop native builds on Windows too!\n\nNo problem, and thanks again for your review and comment on this PR! I would feel sad to see all of native build code gone at once actually. So this helps soften the blow :D", "author": "zacharymorn", "createdAt": "2020-12-04T03:38:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg1MTQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkyMTE5MA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r535921190", "bodyText": "\"Soften the blow\", you say? :) Even the cover of the album this song is from kind of reflects the nature of open source, doesn't it?\nhttps://www.youtube.com/watch?v=G1pfrCOQWHY", "author": "dweiss", "createdAt": "2020-12-04T08:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg1MTQxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUzMTc1NQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r536531755", "bodyText": "Hahahahahaha! YES DEFINITELY! Good one Dawid!", "author": "zacharymorn", "createdAt": "2020-12-05T07:02:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg1MTQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1NDY2Nw==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r535354667", "bodyText": "We can remove this For example -- this is ancient history and no longer can occur since we removed IndexOutput.seek entirely.", "author": "mikemccand", "createdAt": "2020-12-03T15:50:09Z", "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -51,16 +50,9 @@\n  * to the provided Directory instance.\n  *\n  * <p>See <a\n- * href=\"{@docRoot}/overview-summary.html#NativeUnixDirectory\">Overview</a>\n+ * href=\"{@docRoot}/overview-summary.html#DirectIODirectory\">Overview</a>\n  * for more details.\n  *\n- * <p>To use this you must compile\n- * NativePosixUtil.cpp (exposes Linux-specific APIs through\n- * JNI) for your platform, by running <code>./gradlew build</code>, and then putting the resulting\n- * <code>libLuceneNativeIO.so</code> or <code>libLuceneNativeIO.dylib</code>\n- * (from <code>lucene/misc/native/build/lib/release/platform/</code>) onto your dynamic\n- * linker search path.\n- *\n  * <p><b>WARNING</b>: this code is very new and quite easily\n  * could contain horrible bugs.  For example, here's one\n  * known issue: if you use seek in <code>IndexOutput</code>, and then", "originalCommit": "74c529a9934da30f8e4441d7e89ac0199358ff0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgxMjUwOQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r535812509", "bodyText": "Ah good catch! I updated this as well as surrounding docs to also include Window compatibility.\nOne thing I wasn't sure though and feel like asking is, shall I also remove this line :D\n\n\n\nWARNING: this code is very new and quite easily could contain horrible bugs. \n\n\n\nAs it's been around for some time now (although not used by many yet?), and being pure-java means it's less error prone.\nWhat do you think?", "author": "zacharymorn", "createdAt": "2020-12-04T03:39:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1NDY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2MTUyMw==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r537561523", "bodyText": "Let's leave the warning for now?  Because this was JNI code, bringing it risks like SIGSEGV / memory leaks / etc. (even though in this instances those risks were very small), and requiring C++ compilation to build per-platform, very few users tried it out.\nNow that it will be pure java (thank you @zacharymorn!!), it should see more usage.\nEspecially for search applications that do concurrent indexing and searching on a single box (e.g. Elasticsearch!), this Directory should be a huge win to bring down interference of a large merge running on a box and impacting queries as hot pages are swapped out.\nSo, let's wait and see if we can remove this warning at a later date, if users really do use this and have good results?\nAlso, this directory requires some tuning (the buffer size).", "author": "mikemccand", "createdAt": "2020-12-07T14:44:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1NDY2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3NTY1Mw==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r537975653", "bodyText": "Sounds good that makes sense. Thanks for the detailed explanation Mike!", "author": "zacharymorn", "createdAt": "2020-12-08T02:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1NDY2Nw=="}], "type": "inlineReview"}, {"oid": "5aa1c0e0e1a435413197d6fe2d0b7b98022d95eb", "url": "https://github.com/apache/lucene-solr/commit/5aa1c0e0e1a435413197d6fe2d0b7b98022d95eb", "message": "Update javadoc", "committedDate": "2020-12-04T03:36:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2ODQxOQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r537568419", "bodyText": "I wonder if we should simply extend FilterDirectory here?  Let that class (designed for such delegation) handle delegating all existing Directory methods?  It would lower the risk that a new Directory method fails to get delegated here ...\nBut, we can do this as followon issue.", "author": "mikemccand", "createdAt": "2020-12-07T14:53:18Z", "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -154,14 +146,43 @@ public IndexOutput createOutput(String name, IOContext context) throws IOExcepti\n     if (context.context != Context.MERGE || context.mergeInfo.estimatedMergeBytes < minBytesDirect) {\n       return delegate.createOutput(name, context);\n     } else {\n-      return new NativeUnixIndexOutput(getDirectory().resolve(name), name, mergeBufferSize);\n+      return new DirectIOIndexOutput(getDirectory().resolve(name), name, mergeBufferSize);\n     }\n   }\n \n-  @SuppressForbidden(reason = \"java.io.File: native API requires old-style FileDescriptor\")\n-  private final static class NativeUnixIndexOutput extends IndexOutput {\n+  @Override\n+  public void deleteFile(String name) throws IOException {\n+    delegate.deleteFile(name);\n+  }\n+\n+  @Override\n+  public Set<String> getPendingDeletions() throws IOException {", "originalCommit": "5aa1c0e0e1a435413197d6fe2d0b7b98022d95eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3NDMzOQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r537974339", "bodyText": "Ha I had this same thought for a split second before, but then got distracted and forgot to come back to it later.  I just pushed a commit to make this change.", "author": "zacharymorn", "createdAt": "2020-12-08T01:59:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2ODQxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2OTM4NA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r542469384", "bodyText": "Great, thanks!", "author": "mikemccand", "createdAt": "2020-12-14T15:23:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2ODQxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2OTY4MA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r537569680", "bodyText": "Maybe use IOUtils.close(...) here instead?  It will try to close both even if one of them throws exception.", "author": "mikemccand", "createdAt": "2020-12-07T14:54:50Z", "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -154,14 +146,43 @@ public IndexOutput createOutput(String name, IOContext context) throws IOExcepti\n     if (context.context != Context.MERGE || context.mergeInfo.estimatedMergeBytes < minBytesDirect) {\n       return delegate.createOutput(name, context);\n     } else {\n-      return new NativeUnixIndexOutput(getDirectory().resolve(name), name, mergeBufferSize);\n+      return new DirectIOIndexOutput(getDirectory().resolve(name), name, mergeBufferSize);\n     }\n   }\n \n-  @SuppressForbidden(reason = \"java.io.File: native API requires old-style FileDescriptor\")\n-  private final static class NativeUnixIndexOutput extends IndexOutput {\n+  @Override\n+  public void deleteFile(String name) throws IOException {\n+    delegate.deleteFile(name);\n+  }\n+\n+  @Override\n+  public Set<String> getPendingDeletions() throws IOException {\n+    return delegate.getPendingDeletions();\n+  }\n+\n+  @Override\n+  public String[] listAll() throws IOException {\n+    return delegate.listAll();\n+  }\n+\n+  @Override\n+  public long fileLength(String name) throws IOException {\n+    return delegate.fileLength(name);\n+  }\n+\n+  @Override\n+  public void rename(String source, String dest) throws IOException {\n+    delegate.rename(source, dest);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    delegate.close();", "originalCommit": "5aa1c0e0e1a435413197d6fe2d0b7b98022d95eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3NDQzMg==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r537974432", "bodyText": "I made the update to replace delegate.close() with IOUtils.close(delegate), but I don't think I could achieve super.close() through IOUtils.close(this) as well, as that leads to stackoverflow? Or am I misinterpreting the comment here?", "author": "zacharymorn", "createdAt": "2020-12-08T01:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2OTY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2OTE1NA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r542469154", "bodyText": "Oh yeah hmm, that is frustrating :)  I was hoping we could pass two things to IOUtils.close ... maybe pass FilterDirectory.this?  Though I suspect that would indeed just call this existing close() method, leading to infinite recursion.  Hrmph, this is beyond my Java knowledge but sure seems like it ought to be possible.  Maybe @uschindler knows :)", "author": "mikemccand", "createdAt": "2020-12-14T15:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU2OTY4MA=="}], "type": "inlineReview"}, {"oid": "bd383e3fc6b6f10b06c0c92c6339e284f455489f", "url": "https://github.com/apache/lucene-solr/commit/bd383e3fc6b6f10b06c0c92c6339e284f455489f", "message": "Use IOUtils.close instead", "committedDate": "2020-12-07T18:04:23Z", "type": "commit"}, {"oid": "9233274a6f7a8d7f4689314dc678363edd49c063", "url": "https://github.com/apache/lucene-solr/commit/9233274a6f7a8d7f4689314dc678363edd49c063", "message": "Have DirectIODirectory to extend FilterDirectory instead", "committedDate": "2020-12-07T18:37:05Z", "type": "commit"}, {"oid": "d23d5a6caef7e64ab3b50771ba3970f88763a0ef", "url": "https://github.com/apache/lucene-solr/commit/d23d5a6caef7e64ab3b50771ba3970f88763a0ef", "message": "Use reflective class and enum lookup for ExtendedOpenOption.DIRECT", "committedDate": "2020-12-19T06:11:25Z", "type": "commit"}, {"oid": "df13bdf89f269bb16d8c5589af7f8923561d412b", "url": "https://github.com/apache/lucene-solr/commit/df13bdf89f269bb16d8c5589af7f8923561d412b", "message": "Cache direct open option to avoid repeated lookup", "committedDate": "2020-12-19T08:27:33Z", "type": "commit"}, {"oid": "4018debba505e1c94cf8209afb5fb2df67777d2c", "url": "https://github.com/apache/lucene-solr/commit/4018debba505e1c94cf8209afb5fb2df67777d2c", "message": "Move the lookup of enum constant to a static initializer; throw UOE instead of IOException; run test only when supported", "committedDate": "2020-12-19T12:11:08Z", "type": "commit"}, {"oid": "4018debba505e1c94cf8209afb5fb2df67777d2c", "url": "https://github.com/apache/lucene-solr/commit/4018debba505e1c94cf8209afb5fb2df67777d2c", "message": "Move the lookup of enum constant to a static initializer; throw UOE instead of IOException; run test only when supported", "committedDate": "2020-12-19T12:11:08Z", "type": "forcePushed"}, {"oid": "6b207f8d7e9154260ba4f4041391ca614e55dd8d", "url": "https://github.com/apache/lucene-solr/commit/6b207f8d7e9154260ba4f4041391ca614e55dd8d", "message": "Update java doc to use UOE instead of IOE, and removed some stale IOE throwing suggested by IDE", "committedDate": "2020-12-19T18:25:40Z", "type": "commit"}, {"oid": "397a6f600f4a1fb924e4bf54e74825f51c1efc6b", "url": "https://github.com/apache/lucene-solr/commit/397a6f600f4a1fb924e4bf54e74825f51c1efc6b", "message": "Fix alignment handling, remove all duplicate position and size fields and use what ByteBuffer provides to handle the buffer's remaining bytes and position", "committedDate": "2020-12-19T21:20:27Z", "type": "commit"}, {"oid": "195f18119eb41baa1dd7446b32af768055bf4c9a", "url": "https://github.com/apache/lucene-solr/commit/195f18119eb41baa1dd7446b32af768055bf4c9a", "message": "Use capacity of buffer if we use buffersize, use limit only to control refill; remove the length of file tracking (this is a relic from times where we were able to also seek in IndexOutputs)", "committedDate": "2020-12-19T21:49:02Z", "type": "commit"}, {"oid": "1e09470767068c7850a9e5145dc61c2abf9a387c", "url": "https://github.com/apache/lucene-solr/commit/1e09470767068c7850a9e5145dc61c2abf9a387c", "message": "Committing my current state", "committedDate": "2020-12-19T23:54:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM5Mjk3OQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r546392979", "bodyText": "Please remove the path argument: this makes no sense to duplicate it twice (it is already fed to delegate as its FSDirectory). Especially in a public constructor duplicating method parameters only invites bugs. Call delegate.getDirectory() to get the underlying path.", "author": "rmuir", "createdAt": "2020-12-20T15:39:44Z", "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.misc.store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.OpenOption;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Arrays;\n+\n+import org.apache.lucene.store.*;\n+import org.apache.lucene.store.IOContext.Context;\n+\n+/**\n+ * A {@link Directory} implementation for all Unixes and Windows that uses\n+ * DIRECT I/O to bypass OS level IO caching during\n+ * merging.  For all other cases (searching, writing) we delegate\n+ * to the provided Directory instance.\n+ *\n+ * <p>See <a\n+ * href=\"{@docRoot}/overview-summary.html#DirectIODirectory\">Overview</a>\n+ * for more details.\n+ *\n+ * <p><b>WARNING</b>: this code is very new and quite easily\n+ * could contain horrible bugs.\n+ *\n+ * <p>This directory passes Solr and Lucene tests on Linux, OS X,\n+ * and Windows; other systems should work but have not been\n+ * tested! Use at your own risk.\n+ *\n+ * <p>@throws UnsupportedOperationException if the operating system, file system or JDK\n+ * does not support Direct I/O or a sufficient equivalent.\n+ *\n+ * @lucene.experimental\n+ */\n+public class DirectIODirectory extends FilterDirectory {\n+\n+  /** Default buffer size before writing to disk (256 KB);\n+   *  larger means less IO load but more RAM and direct\n+   *  buffer storage space consumed during merging. */\n+\n+  public final static int DEFAULT_MERGE_BUFFER_SIZE = 262144;\n+\n+  /** Default min expected merge size before direct IO is\n+   *  used (10 MB): */\n+  public final static long DEFAULT_MIN_BYTES_DIRECT = 10*1024*1024;\n+\n+  private final int blockSize, mergeBufferSize;\n+  private final long minBytesDirect;\n+  private final Path path;\n+  \n+  volatile boolean isOpen = true;\n+\n+  /** Reference to {@code com.sun.nio.file.ExtendedOpenOption.DIRECT} by reflective class and enum lookup.\n+   * There are two reasons for using this instead of directly referencing ExtendedOpenOption.DIRECT:\n+   * <ol>\n+   * <li> ExtendedOpenOption.DIRECT is OpenJDK's internal proprietary API. This API causes un-suppressible(?) warning to be emitted\n+   *  when compiling with --release flag and value N, where N is smaller than the the version of javac used for compilation.</li>\n+   * <li> It is possible that Lucene is run using JDK that does not support ExtendedOpenOption.DIRECT. In such a\n+   *  case, dynamic lookup allows us to bail out with UnsupportedOperationException with meaningful error message.</li>\n+   * </ol>\n+   * <p>This reference is {@code null}, if the JDK does not support direct I/O.\n+   */\n+  static final OpenOption ExtendedOpenOption_DIRECT; // visible for test\n+  static {\n+    OpenOption option;\n+    try {\n+      final Class<? extends OpenOption> clazz = Class.forName(\"com.sun.nio.file.ExtendedOpenOption\").asSubclass(OpenOption.class);\n+      option = Arrays.stream(clazz.getEnumConstants())\n+                      .filter(e -> e.toString().equalsIgnoreCase(\"DIRECT\"))\n+                      .findFirst()\n+                      .orElse(null);\n+    } catch (Exception e) {\n+      option = null;\n+    }\n+    ExtendedOpenOption_DIRECT = option;\n+  }\n+\n+  /** Create a new DirectIODirectory for the named location.\n+   * \n+   * @param path the path of the directory\n+   * @param mergeBufferSize Size of buffer to use for\n+   *    merging.\n+   * @param minBytesDirect Merges, or files to be opened for\n+   *   reading, smaller than this will\n+   *   not use direct IO.  See {@link\n+   *   #DEFAULT_MIN_BYTES_DIRECT}\n+   * @param delegate fallback Directory for non-merges\n+   * @throws IOException If there is a low-level I/O error\n+   */\n+  public DirectIODirectory(Path path, int mergeBufferSize, long minBytesDirect, FSDirectory delegate) throws IOException {", "originalCommit": "1e09470767068c7850a9e5145dc61c2abf9a387c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ1NDY0Nw==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r546454647", "bodyText": "I fixed this in 9a59b56", "author": "uschindler", "createdAt": "2020-12-20T23:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM5Mjk3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM5MzAzNw==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r546393037", "bodyText": "Remove path here too.", "author": "rmuir", "createdAt": "2020-12-20T15:40:23Z", "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.misc.store;\n+\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.OpenOption;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Arrays;\n+\n+import org.apache.lucene.store.*;\n+import org.apache.lucene.store.IOContext.Context;\n+\n+/**\n+ * A {@link Directory} implementation for all Unixes and Windows that uses\n+ * DIRECT I/O to bypass OS level IO caching during\n+ * merging.  For all other cases (searching, writing) we delegate\n+ * to the provided Directory instance.\n+ *\n+ * <p>See <a\n+ * href=\"{@docRoot}/overview-summary.html#DirectIODirectory\">Overview</a>\n+ * for more details.\n+ *\n+ * <p><b>WARNING</b>: this code is very new and quite easily\n+ * could contain horrible bugs.\n+ *\n+ * <p>This directory passes Solr and Lucene tests on Linux, OS X,\n+ * and Windows; other systems should work but have not been\n+ * tested! Use at your own risk.\n+ *\n+ * <p>@throws UnsupportedOperationException if the operating system, file system or JDK\n+ * does not support Direct I/O or a sufficient equivalent.\n+ *\n+ * @lucene.experimental\n+ */\n+public class DirectIODirectory extends FilterDirectory {\n+\n+  /** Default buffer size before writing to disk (256 KB);\n+   *  larger means less IO load but more RAM and direct\n+   *  buffer storage space consumed during merging. */\n+\n+  public final static int DEFAULT_MERGE_BUFFER_SIZE = 262144;\n+\n+  /** Default min expected merge size before direct IO is\n+   *  used (10 MB): */\n+  public final static long DEFAULT_MIN_BYTES_DIRECT = 10*1024*1024;\n+\n+  private final int blockSize, mergeBufferSize;\n+  private final long minBytesDirect;\n+  private final Path path;\n+  \n+  volatile boolean isOpen = true;\n+\n+  /** Reference to {@code com.sun.nio.file.ExtendedOpenOption.DIRECT} by reflective class and enum lookup.\n+   * There are two reasons for using this instead of directly referencing ExtendedOpenOption.DIRECT:\n+   * <ol>\n+   * <li> ExtendedOpenOption.DIRECT is OpenJDK's internal proprietary API. This API causes un-suppressible(?) warning to be emitted\n+   *  when compiling with --release flag and value N, where N is smaller than the the version of javac used for compilation.</li>\n+   * <li> It is possible that Lucene is run using JDK that does not support ExtendedOpenOption.DIRECT. In such a\n+   *  case, dynamic lookup allows us to bail out with UnsupportedOperationException with meaningful error message.</li>\n+   * </ol>\n+   * <p>This reference is {@code null}, if the JDK does not support direct I/O.\n+   */\n+  static final OpenOption ExtendedOpenOption_DIRECT; // visible for test\n+  static {\n+    OpenOption option;\n+    try {\n+      final Class<? extends OpenOption> clazz = Class.forName(\"com.sun.nio.file.ExtendedOpenOption\").asSubclass(OpenOption.class);\n+      option = Arrays.stream(clazz.getEnumConstants())\n+                      .filter(e -> e.toString().equalsIgnoreCase(\"DIRECT\"))\n+                      .findFirst()\n+                      .orElse(null);\n+    } catch (Exception e) {\n+      option = null;\n+    }\n+    ExtendedOpenOption_DIRECT = option;\n+  }\n+\n+  /** Create a new DirectIODirectory for the named location.\n+   * \n+   * @param path the path of the directory\n+   * @param mergeBufferSize Size of buffer to use for\n+   *    merging.\n+   * @param minBytesDirect Merges, or files to be opened for\n+   *   reading, smaller than this will\n+   *   not use direct IO.  See {@link\n+   *   #DEFAULT_MIN_BYTES_DIRECT}\n+   * @param delegate fallback Directory for non-merges\n+   * @throws IOException If there is a low-level I/O error\n+   */\n+  public DirectIODirectory(Path path, int mergeBufferSize, long minBytesDirect, FSDirectory delegate) throws IOException {\n+    super(delegate);\n+    this.blockSize = Math.toIntExact(Files.getFileStore(path).getBlockSize());\n+    this.mergeBufferSize = mergeBufferSize;\n+    this.minBytesDirect = minBytesDirect;\n+    this.path = path.toRealPath();\n+  }\n+\n+  /** Create a new DirectIODirectory for the named location.\n+   * \n+   * @param path the path of the directory\n+   * @param delegate fallback Directory for non-merges\n+   * @throws IOException If there is a low-level I/O error\n+   */\n+  public DirectIODirectory(Path path, FSDirectory delegate) throws IOException {", "originalCommit": "1e09470767068c7850a9e5145dc61c2abf9a387c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ1NDY1Mw==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r546454653", "bodyText": "I fixed this in 9a59b56", "author": "uschindler", "createdAt": "2020-12-20T23:52:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM5MzAzNw=="}], "type": "inlineReview"}, {"oid": "9a59b56f2f94aed53d2268c3053e0fa37382ce44", "url": "https://github.com/apache/lucene-solr/commit/9a59b56f2f94aed53d2268c3053e0fa37382ce44", "message": "Remove the explicit path in constructor and take the one from wrapped FSDirectory", "committedDate": "2020-12-20T23:49:19Z", "type": "commit"}, {"oid": "d803d0b016b923c4993a6178979288c2190697a1", "url": "https://github.com/apache/lucene-solr/commit/d803d0b016b923c4993a6178979288c2190697a1", "message": "Cleaner solution", "committedDate": "2020-12-20T23:56:37Z", "type": "commit"}, {"oid": "6f1a9fdffecaaf043858e0702bb155765860183d", "url": "https://github.com/apache/lucene-solr/commit/6f1a9fdffecaaf043858e0702bb155765860183d", "message": "Add checksum and a test to exercise DirectIODirectory with real index, and updated code to pass failing tests testZInt, testSeekPastEOF & testCreateOutputForExistingFile in BaseDirectoryTestCase", "committedDate": "2021-01-03T02:07:22Z", "type": "commit"}, {"oid": "fa509059d2644ac66fed446113bf4829ec8ea574", "url": "https://github.com/apache/lucene-solr/commit/fa509059d2644ac66fed446113bf4829ec8ea574", "message": "Add reference to JDK compiler bug ticket", "committedDate": "2021-01-04T07:02:59Z", "type": "commit"}, {"oid": "8453fdcc96103b9e27a9af09cac5eab044eb0de9", "url": "https://github.com/apache/lucene-solr/commit/8453fdcc96103b9e27a9af09cac5eab044eb0de9", "message": "Merge branch 'master' into LUCENE-8982-DirectIO", "committedDate": "2021-01-15T06:50:04Z", "type": "commit"}, {"oid": "5e458b52171105cf8a0df66604f336be93ab9ff2", "url": "https://github.com/apache/lucene-solr/commit/5e458b52171105cf8a0df66604f336be93ab9ff2", "message": "Fix formatting by running ./gradlew :lucene:misc:spotlessApply", "committedDate": "2021-01-15T06:52:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ5MTg4Mg==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r558491882", "bodyText": "Thanks, this was driving me crazy when I tried to fix this (I gave up after some beers deep night).", "author": "uschindler", "createdAt": "2021-01-15T18:27:17Z", "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -307,7 +314,14 @@ public void close() throws IOException {\n \n     @Override\n     public long getFilePointer() {\n-      return filePos + buffer.position();\n+      long filePointer = filePos + buffer.position();\n+\n+      // opening the input and immediately calling getFilePointer without calling readX (and thus refill) first,\n+      // will result in negative value equal to bufferSize being returned,\n+      // due to the initialization method filePos = -bufferSize used in constructor.\n+      assert filePointer == -buffer.capacity() || filePointer >= 0 :\n+        \"filePointer should either be initial value equal to negative buffer capacity, or larger than or equal to 0\";\n+      return Math.max(filePointer, 0);", "originalCommit": "6f1a9fdffecaaf043858e0702bb155765860183d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ5MjAwMA==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r558492000", "bodyText": "Thanks, this was driving me crazy when I tried to fix this (I gave up after some beers deep night).", "author": "uschindler", "createdAt": "2021-01-15T18:27:32Z", "path": "lucene/misc/src/java/org/apache/lucene/misc/store/DirectIODirectory.java", "diffHunk": "@@ -346,17 +360,21 @@ public byte readByte() throws IOException {\n \n     private void refill() throws IOException {\n       filePos += buffer.capacity();\n-      \n+\n+      // BaseDirectoryTestCase#testSeekPastEOF test for consecutive read past EOF,\n+      // hence throwing EOFException early to maintain buffer state (position in particular)\n+      if(filePos >= channel.size()) {", "originalCommit": "6f1a9fdffecaaf043858e0702bb155765860183d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODg0MDMyMQ==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r558840321", "bodyText": "I think this was exactly the problem. I was yesterday about to change this to > instead of >=. It is allowed to seek to exectly the file size, which was obviously causing the test failures on windows.", "author": "uschindler", "createdAt": "2021-01-16T11:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ5MjAwMA=="}], "type": "inlineReview"}, {"oid": "46747982553f45d9424f6fb5cd2ce41d5874fa66", "url": "https://github.com/apache/lucene-solr/commit/46747982553f45d9424f6fb5cd2ce41d5874fa66", "message": "Fix EOF exception thrown for some tests on Windows platform as filePos == channel.size() when refill", "committedDate": "2021-01-16T05:45:29Z", "type": "commit"}, {"oid": "d640d118d03791bf323e7c45410c8bed3bc402bc", "url": "https://github.com/apache/lucene-solr/commit/d640d118d03791bf323e7c45410c8bed3bc402bc", "message": "Fix EOF handling", "committedDate": "2021-01-16T07:34:33Z", "type": "commit"}, {"oid": "314bbdccef82d0ef672e2e9ec99546b714f26b3b", "url": "https://github.com/apache/lucene-solr/commit/314bbdccef82d0ef672e2e9ec99546b714f26b3b", "message": "Fix formatting and refactoring", "committedDate": "2021-01-16T08:19:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODg0MDQwNg==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r558840406", "bodyText": "Yes that's the correct way to test it, use the local FS block size \ud83d\udc4d .", "author": "uschindler", "createdAt": "2021-01-16T11:03:50Z", "path": "lucene/misc/src/test/org/apache/lucene/misc/store/TestDirectIODirectory.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.misc.store;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.lucene.document.*;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.RandomIndexWriter;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.PhraseQuery;\n+import org.apache.lucene.store.*;\n+import org.junit.BeforeClass;\n+\n+public class TestDirectIODirectory extends BaseDirectoryTestCase {\n+\n+  @BeforeClass\n+  public static void checkSupported() {\n+    assumeTrue(\n+        \"This test required a JDK version that has support for ExtendedOpenOption.DIRECT\",\n+        DirectIODirectory.ExtendedOpenOption_DIRECT != null);\n+  }\n+\n+  @Override\n+  protected DirectIODirectory getDirectory(Path path) throws IOException {\n+    return new DirectIODirectory(\n+        FSDirectory.open(path), DirectIODirectory.DEFAULT_MERGE_BUFFER_SIZE, 0L) {\n+      @Override\n+      protected boolean useDirectIO(IOContext context) {\n+        return true;\n+      }\n+    };\n+  }\n+\n+  public void testIndexWriteRead() throws IOException {\n+    try (Directory dir = getDirectory(createTempDir(\"testDirectIODirectory\"))) {\n+      try (RandomIndexWriter iw = new RandomIndexWriter(random(), dir)) {\n+        Document doc = new Document();\n+        Field field = newField(\"field\", \"foo bar\", TextField.TYPE_STORED);\n+        doc.add(field);\n+\n+        iw.addDocument(doc);\n+        iw.commit();\n+      }\n+\n+      try (IndexReader ir = DirectoryReader.open(dir)) {\n+        IndexSearcher s = newSearcher(ir);\n+        assertEquals(1, s.count(new PhraseQuery(\"field\", \"foo\", \"bar\")));\n+      }\n+    }\n+  }\n+\n+  public void testIllegalEOFWithFileSizeMultipleOfBlockSize() throws Exception {\n+    Path path = createTempDir(\"testIllegalEOF\");\n+    final int fileSize = Math.toIntExact(Files.getFileStore(path).getBlockSize()) * 2;", "originalCommit": "314bbdccef82d0ef672e2e9ec99546b714f26b3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTAyNTY3Nw==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r559025677", "bodyText": "Thanks!", "author": "zacharymorn", "createdAt": "2021-01-16T19:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODg0MDQwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODg0MDU1Mw==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r558840553", "bodyText": "It is very good that this test uses the \"hack\" DirectIODirectory that ALWAYS uses our implementation! By default it would only use it for merges, but here we enforce use of IndexInput/IndexOutput for all transactions (although they may be slower).", "author": "uschindler", "createdAt": "2021-01-16T11:05:39Z", "path": "lucene/misc/src/test/org/apache/lucene/misc/store/TestDirectIODirectory.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.misc.store;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.lucene.document.*;\n+import org.apache.lucene.index.DirectoryReader;\n+import org.apache.lucene.index.IndexReader;\n+import org.apache.lucene.index.RandomIndexWriter;\n+import org.apache.lucene.search.IndexSearcher;\n+import org.apache.lucene.search.PhraseQuery;\n+import org.apache.lucene.store.*;\n+import org.junit.BeforeClass;\n+\n+public class TestDirectIODirectory extends BaseDirectoryTestCase {\n+\n+  @BeforeClass\n+  public static void checkSupported() {\n+    assumeTrue(\n+        \"This test required a JDK version that has support for ExtendedOpenOption.DIRECT\",\n+        DirectIODirectory.ExtendedOpenOption_DIRECT != null);\n+  }\n+\n+  @Override\n+  protected DirectIODirectory getDirectory(Path path) throws IOException {\n+    return new DirectIODirectory(\n+        FSDirectory.open(path), DirectIODirectory.DEFAULT_MERGE_BUFFER_SIZE, 0L) {\n+      @Override\n+      protected boolean useDirectIO(IOContext context) {\n+        return true;\n+      }\n+    };\n+  }\n+\n+  public void testIndexWriteRead() throws IOException {\n+    try (Directory dir = getDirectory(createTempDir(\"testDirectIODirectory\"))) {", "originalCommit": "314bbdccef82d0ef672e2e9ec99546b714f26b3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTAyNTcyMg==", "url": "https://github.com/apache/lucene-solr/pull/2052#discussion_r559025722", "bodyText": "Yup agreed! Otherwise subtle bugs like above could easily go undetected for a long time and hard to debug later.", "author": "zacharymorn", "createdAt": "2021-01-16T19:54:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODg0MDU1Mw=="}], "type": "inlineReview"}, {"oid": "18216c39550552d88ce2e1fb62da200d928fa630", "url": "https://github.com/apache/lucene-solr/commit/18216c39550552d88ce2e1fb62da200d928fa630", "message": "Improve the useDirectIO protected method to allow subclasses a better control on when direct IO is used", "committedDate": "2021-01-17T12:12:37Z", "type": "commit"}, {"oid": "2a7cadd75521b0fd36fe50f0ee7c5965dc9b50fe", "url": "https://github.com/apache/lucene-solr/commit/2a7cadd75521b0fd36fe50f0ee7c5965dc9b50fe", "message": "Update changes", "committedDate": "2021-01-17T22:53:52Z", "type": "commit"}]}