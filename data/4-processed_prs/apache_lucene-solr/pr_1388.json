{"pr_number": 1388, "pr_title": "LUCENE-9278: Use -linkoffline instead of relative paths to make links to other projects", "pr_createdAt": "2020-03-29T12:27:56Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1388", "timeline": [{"oid": "00975e1e6f8b3023b720271e343f5998e8fdba0b", "url": "https://github.com/apache/lucene-solr/commit/00975e1e6f8b3023b720271e343f5998e8fdba0b", "message": "LUCENE-9278: use -linkoffline instead of relative paths to make links to parent projects", "committedDate": "2020-03-29T12:04:14Z", "type": "commit"}, {"oid": "263e508684bcbf48b2aa865deb5777d9a44036f7", "url": "https://github.com/apache/lucene-solr/commit/263e508684bcbf48b2aa865deb5777d9a44036f7", "message": "minor change for a configure block", "committedDate": "2020-03-29T13:44:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwMDUxMg==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r399800512", "bodyText": "I reused the output destination dir for the gradle default \"javadoc\" task here. This can be moved to another location if needed.", "author": "mocobeta", "createdAt": "2020-03-29T13:49:13Z", "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -15,93 +15,105 @@\n  * limitations under the License.\n  */\n \n-// generate javadocs by using Ant javadoc task\n+// generate javadocs by calling javadoc tool\n+// see https://docs.oracle.com/en/java/javase/11/tools/javadoc.html\n+\n+// utility function to convert project path to document output dir\n+// e.g.: ':lucene:analysis:common' => 'analysis/common'\n+def pathToDocdir = { path -> path.split(':').drop(2).join('/') }\n \n allprojects {\n   plugins.withType(JavaPlugin) {\n-    ext {\n-      javadocRoot = project.path.startsWith(':lucene') ? project(':lucene').file(\"build/docs\") : project(':solr').file(\"build/docs\")\n-      javadocDestDir = \"${javadocRoot}/${project.name}\"\n-    }\n-\n     task renderJavadoc {\n-      description \"Generates Javadoc API documentation for the main source code. This invokes Ant Javadoc Task.\"\n+      description \"Generates Javadoc API documentation for the main source code. This directly invokes javadoc tool.\"\n       group \"documentation\"\n \n       ext {\n-        linksource = \"no\"\n+        linksource = false\n         linkJUnit = false\n-        linkHref = []\n+        linkLuceneProjects = []\n+        linkSorlProjects = []\n       }\n \n       dependsOn sourceSets.main.compileClasspath\n \n       inputs.files { sourceSets.main.java.asFileTree }\n-      outputs.dir project.javadocRoot\n+      outputs.dir project.javadoc.destinationDir\n \n       def libName = project.path.startsWith(\":lucene\") ? \"Lucene\" : \"Solr\"\n       def title = \"${libName} ${project.version} ${project.name} API\".toString()\n \n+      // absolute urls for \"-linkoffline\" option\n+      def javaSEDocUrl = \"https://docs.oracle.com/en/java/javase/11/docs/api/\"\n+      def junitDocUrl = \"https://junit.org/junit4/javadoc/4.12/\"\n+      def luceneDocUrl = \"https://lucene.apache.org/core/${project.version.replace(\".\", \"_\")}\".toString()\n+      def solrDocUrl = \"https://lucene.apache.org/solr/${project.version.replace(\".\", \"_\")}\".toString()\n+\n+      def javadocCmd = org.gradle.internal.jvm.Jvm.current().getJavadocExecutable()\n+\n       doFirst {\n         def srcDirs = sourceSets.main.java.srcDirs.findAll { dir -> dir.exists() }\n \n-        ant.javadoc(\n-            overview: file(\"src/java/overview.html\"),\n-            packagenames: \"org.apache.lucene.*,org.apache.solr.*\",\n-            destDir: javadocDestDir,\n-            access: \"protected\",\n-            encoding: \"UTF-8\",\n-            charset: \"UTF-8\",\n-            docencoding: \"UTF-8\",\n-            noindex: \"true\",\n-            includenosourcepackages: \"true\",\n-            author: \"true\",\n-            version: \"true\",\n-            linksource: linksource,\n-            use: \"true\",\n-            failonerror: \"true\",\n-            locale: \"en_US\",\n-            windowtitle: title,\n-            doctitle: title,\n-            maxmemory: \"512m\",\n-            classpath: sourceSets.main.compileClasspath.asPath,\n-            bottom: \"<i>Copyright &copy; 2000-${buildYear} Apache Software Foundation. All Rights Reserved.</i>\"\n-        ) {\n-          srcDirs.collect { srcDir ->\n-            packageset(dir: srcDir)\n+        project.exec {\n+          executable javadocCmd\n+\n+          args += [ \"-overview\", file(\"src/java/overview.html\").toString() ]\n+          args += [ \"-sourcepath\", srcDirs.join(\" \") ]\n+          args += [ \"-subpackages\", project.path.startsWith(\":lucene\") ? \"org.apache.lucene\" : \"org.apache.solr\"]\n+          args += [ \"-d\", project.javadoc.destinationDir.toString() ]", "originalCommit": "263e508684bcbf48b2aa865deb5777d9a44036f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTYxNw==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400021617", "bodyText": "I like it.", "author": "dweiss", "createdAt": "2020-03-30T08:43:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwMDUxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTE4MQ==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400021181", "bodyText": "Not sure if it's using Gradle's \"internal\" JVM or the \"project's\" JVM. We should be using the javadoc tool that is aligned with what is used for the compiler and execution (tests). I think you got it right but maybe worth double checking.\nhttps://docs.gradle.org/current/userguide/build_environment.html\n(what happens if you set org.gradle.java.home=... to an older JVM, for example).", "author": "dweiss", "createdAt": "2020-03-30T08:43:18Z", "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -15,93 +15,105 @@\n  * limitations under the License.\n  */\n \n-// generate javadocs by using Ant javadoc task\n+// generate javadocs by calling javadoc tool\n+// see https://docs.oracle.com/en/java/javase/11/tools/javadoc.html\n+\n+// utility function to convert project path to document output dir\n+// e.g.: ':lucene:analysis:common' => 'analysis/common'\n+def pathToDocdir = { path -> path.split(':').drop(2).join('/') }\n \n allprojects {\n   plugins.withType(JavaPlugin) {\n-    ext {\n-      javadocRoot = project.path.startsWith(':lucene') ? project(':lucene').file(\"build/docs\") : project(':solr').file(\"build/docs\")\n-      javadocDestDir = \"${javadocRoot}/${project.name}\"\n-    }\n-\n     task renderJavadoc {\n-      description \"Generates Javadoc API documentation for the main source code. This invokes Ant Javadoc Task.\"\n+      description \"Generates Javadoc API documentation for the main source code. This directly invokes javadoc tool.\"\n       group \"documentation\"\n \n       ext {\n-        linksource = \"no\"\n+        linksource = false\n         linkJUnit = false\n-        linkHref = []\n+        linkLuceneProjects = []\n+        linkSorlProjects = []\n       }\n \n       dependsOn sourceSets.main.compileClasspath\n \n       inputs.files { sourceSets.main.java.asFileTree }\n-      outputs.dir project.javadocRoot\n+      outputs.dir project.javadoc.destinationDir\n \n       def libName = project.path.startsWith(\":lucene\") ? \"Lucene\" : \"Solr\"\n       def title = \"${libName} ${project.version} ${project.name} API\".toString()\n \n+      // absolute urls for \"-linkoffline\" option\n+      def javaSEDocUrl = \"https://docs.oracle.com/en/java/javase/11/docs/api/\"\n+      def junitDocUrl = \"https://junit.org/junit4/javadoc/4.12/\"\n+      def luceneDocUrl = \"https://lucene.apache.org/core/${project.version.replace(\".\", \"_\")}\".toString()\n+      def solrDocUrl = \"https://lucene.apache.org/solr/${project.version.replace(\".\", \"_\")}\".toString()\n+\n+      def javadocCmd = org.gradle.internal.jvm.Jvm.current().getJavadocExecutable()", "originalCommit": "263e508684bcbf48b2aa865deb5777d9a44036f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY4MjMxOA==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400682318", "bodyText": "I set the default java home to JDK14 (that is used to launch gradle) and \"org.gradle.java.home\" to JDK11.\n$ echo $JAVA_HOME\n/Library/Java/JavaVirtualMachines/adoptopenjdk-14.jdk/Contents/Home\n$ java -version\nopenjdk version \"14\" 2020-03-17\n$ cat gradle.properties\norg.gradle.java.home=/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home\n\nI did just print debug for org.gradle.internal.jvm.Jvm.current().getJavadocExecutable(), that said the JVM.current() points the same jvm to org.gradle.java.home property.\n/Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home/bin/javadoc\n\nIs this expected behaviour (or is there another configuration point)?", "author": "mocobeta", "createdAt": "2020-03-31T06:56:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxNTY1Ng==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400715656", "bodyText": "I'm not sure, to be honest. In that setting, which JVM is used for running tests? My assumption was that it'd be the first one one from path (or JAVA_HOME) but maybe I'm wrong.", "author": "dweiss", "createdAt": "2020-03-31T08:00:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5Njg0MQ==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r404996841", "bodyText": "In that setting, which JVM is used for running tests?\n\nGradle Test task has a customizable property executable, the documentation says \"The name of the executable to use. Default with java plugin: java command for the current JVM.\" If my understanding is correct, it is the runtime on which tests are run.\nhttps://docs.gradle.org/current/dsl/org.gradle.api.tasks.testing.Test.html\nI tried to print test's executable and javadoc's executable by adding doLast{} clause on the default test task (gradle/default-tests.gradle).\n      doLast {\n        println(\"Test executable\\t \" + executable)\n        println(\"Javadoc executable\\t\" + org.gradle.internal.jvm.Jvm.current().getJavadocExecutable())\n      }\n\nI set\nJAVA_HOME=/usr/local/java/adoptopenjdk/jdk-14+36/ and\norg.gradle.java.home=/usr/local/java/adoptopenjdk/jdk-11.0.3+7/\nthen, ran the tests. It said both executable point the gradle's java home. (Here we don't change the executable for test, so the default \"current\" JVM should be used.)\nTest executable        /usr/local/java/adoptopenjdk/jdk-11.0.3+7/bin/java\nJavadoc executable      /usr/local/java/adoptopenjdk/jdk-11.0.3+7/bin/javadoc\n\nLooks consistent to me, though i could miss something here... what do you think @dweiss ?", "author": "mocobeta", "createdAt": "2020-04-07T17:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxNDg3Nw==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r405014877", "bodyText": "I really don't know the details here. Thank you for investigating! I know it is possible to separate gradle's JVM and the JVM used for everything else but I never did this. ES folks do have this separation implemented but I only skipped through that code a while ago.\nhttps://github.com/elastic/elasticsearch/blob/master/buildSrc/src/main/java/org/elasticsearch/gradle/info/GlobalBuildInfoPlugin.java", "author": "dweiss", "createdAt": "2020-04-07T18:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwMzUyNA==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r405603524", "bodyText": "I did a little more experiments with org.gradle.internal.jvm.Jvm.current(), which is used both on compilation and test execution, the search path is\n\norg.gradle.java.home\n$JAVA_HOME\nuser's default java (on $PATH)\n\nIt's consistent with their documentation.\nElasticsearch's custom build plugin takes completely different search strategy from gradle's.\n\n\"compiler.java\" system property\n$JAVA_HOME\norg.gradle.java.home\nuser's default java (on $PATH)\n\n(I didn't run it but just interpreted this method https://github.com/elastic/elasticsearch/blob/master/buildSrc/src/main/java/org/elasticsearch/gradle/info/GlobalBuildInfoPlugin.java#L209)", "author": "mocobeta", "createdAt": "2020-04-08T15:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYwNjA3MA==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r405606070", "bodyText": "I am going to merge it to master branch since I think I understand what I did here with org.gradle.internal.jvm.Jvm.current().", "author": "mocobeta", "createdAt": "2020-04-08T15:19:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4NDcyNA==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r405684724", "bodyText": "Thanks for looking into this, Tomoko. We may have to do something similar to what ES does since we want to be able to run javac, javadocs and tests against new JVMs (which gradle itself may not support yet). It's a different issue though and it can certainly wait.", "author": "dweiss", "createdAt": "2020-04-08T17:15:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg3ODk3Nw==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r405878977", "bodyText": "I just merged it to the master.\n\nWe may have to do something similar to what ES does since we want to be able to run javac, javadocs and tests against new JVMs (which gradle itself may not support yet).\n\nShould we open an issue for that, or can it be delayed?", "author": "mocobeta", "createdAt": "2020-04-08T23:51:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwMzUyMg==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r406003522", "bodyText": "I've opened https://issues.apache.org/jira/browse/LUCENE-9312 and will perhaps take a look at it this Eastern -- feel free to join! It is important and your investigation helps.", "author": "dweiss", "createdAt": "2020-04-09T07:18:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMjgxNw==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400022817", "bodyText": "Why is toURL required? It was a path previously.", "author": "dweiss", "createdAt": "2020-03-30T08:45:49Z", "path": "gradle/render-javadoc.gradle", "diffHunk": "@@ -15,93 +15,105 @@\n  * limitations under the License.\n  */\n \n-// generate javadocs by using Ant javadoc task\n+// generate javadocs by calling javadoc tool\n+// see https://docs.oracle.com/en/java/javase/11/tools/javadoc.html\n+\n+// utility function to convert project path to document output dir\n+// e.g.: ':lucene:analysis:common' => 'analysis/common'\n+def pathToDocdir = { path -> path.split(':').drop(2).join('/') }\n \n allprojects {\n   plugins.withType(JavaPlugin) {\n-    ext {\n-      javadocRoot = project.path.startsWith(':lucene') ? project(':lucene').file(\"build/docs\") : project(':solr').file(\"build/docs\")\n-      javadocDestDir = \"${javadocRoot}/${project.name}\"\n-    }\n-\n     task renderJavadoc {\n-      description \"Generates Javadoc API documentation for the main source code. This invokes Ant Javadoc Task.\"\n+      description \"Generates Javadoc API documentation for the main source code. This directly invokes javadoc tool.\"\n       group \"documentation\"\n \n       ext {\n-        linksource = \"no\"\n+        linksource = false\n         linkJUnit = false\n-        linkHref = []\n+        linkLuceneProjects = []\n+        linkSorlProjects = []\n       }\n \n       dependsOn sourceSets.main.compileClasspath\n \n       inputs.files { sourceSets.main.java.asFileTree }\n-      outputs.dir project.javadocRoot\n+      outputs.dir project.javadoc.destinationDir\n \n       def libName = project.path.startsWith(\":lucene\") ? \"Lucene\" : \"Solr\"\n       def title = \"${libName} ${project.version} ${project.name} API\".toString()\n \n+      // absolute urls for \"-linkoffline\" option\n+      def javaSEDocUrl = \"https://docs.oracle.com/en/java/javase/11/docs/api/\"\n+      def junitDocUrl = \"https://junit.org/junit4/javadoc/4.12/\"\n+      def luceneDocUrl = \"https://lucene.apache.org/core/${project.version.replace(\".\", \"_\")}\".toString()\n+      def solrDocUrl = \"https://lucene.apache.org/solr/${project.version.replace(\".\", \"_\")}\".toString()\n+\n+      def javadocCmd = org.gradle.internal.jvm.Jvm.current().getJavadocExecutable()\n+\n       doFirst {\n         def srcDirs = sourceSets.main.java.srcDirs.findAll { dir -> dir.exists() }\n \n-        ant.javadoc(\n-            overview: file(\"src/java/overview.html\"),\n-            packagenames: \"org.apache.lucene.*,org.apache.solr.*\",\n-            destDir: javadocDestDir,\n-            access: \"protected\",\n-            encoding: \"UTF-8\",\n-            charset: \"UTF-8\",\n-            docencoding: \"UTF-8\",\n-            noindex: \"true\",\n-            includenosourcepackages: \"true\",\n-            author: \"true\",\n-            version: \"true\",\n-            linksource: linksource,\n-            use: \"true\",\n-            failonerror: \"true\",\n-            locale: \"en_US\",\n-            windowtitle: title,\n-            doctitle: title,\n-            maxmemory: \"512m\",\n-            classpath: sourceSets.main.compileClasspath.asPath,\n-            bottom: \"<i>Copyright &copy; 2000-${buildYear} Apache Software Foundation. All Rights Reserved.</i>\"\n-        ) {\n-          srcDirs.collect { srcDir ->\n-            packageset(dir: srcDir)\n+        project.exec {\n+          executable javadocCmd\n+\n+          args += [ \"-overview\", file(\"src/java/overview.html\").toString() ]\n+          args += [ \"-sourcepath\", srcDirs.join(\" \") ]\n+          args += [ \"-subpackages\", project.path.startsWith(\":lucene\") ? \"org.apache.lucene\" : \"org.apache.solr\"]\n+          args += [ \"-d\", project.javadoc.destinationDir.toString() ]\n+          args += [ \"-protected\" ]\n+          args += [ \"-encoding\", \"UTF-8\" ]\n+          args += [ \"-charset\", \"UTF-8\" ]\n+          args += [ \"-docencoding\", \"UTF-8\" ]\n+          args += [ \"-noindex\" ]\n+          args += [ \"-author\" ]\n+          args += [ \"-version\" ]\n+          if (linksource) {\n+            args += [ \"-linksource\" ]\n           }\n+          args += [ \"-use\" ]\n+          args += [ \"-locale\", \"en_US\" ]\n+          args += [ \"-windowtitle\", title ]\n+          args += [ \"-doctitle\", title ]\n+          args += [ \"-classpath\", sourceSets.main.compileClasspath.asPath ]\n+          args += [ \"-bottom\", \"<i>Copyright &copy; 2000-${buildYear} Apache Software Foundation. All Rights Reserved.</i>\" ]\n \n-          tag(name: \"lucene.experimental\", description: \"WARNING: This API is experimental and might change in incompatible ways in the next release.\")\n-          tag(name: \"lucene.internal\", description: \"NOTE: This API is for internal purposes only and might change in incompatible ways in the next release.\")\n-          tag(name: \"lucene.spi\", description: \"SPI Name (Note: This is case-insensitive. e.g., if the name is 'htmlStrip', 'htmlstrip' can be used when looking up the service):\", scope: \"types\")\n+          args += [ \"-tag\", \"lucene.experimental:a:WARNING: This API is experimental and might change in incompatible ways in the next release.\" ]\n+          args += [ \"-tag\", \"lucene.internal:a:NOTE: This API is for internal purposes only and might change in incompatible ways in the next release.\" ]\n+          args += [ \"-tag\", \"lucene.spi:t:SPI Name (case-insensitive: if the name is 'htmlStrip', 'htmlstrip' can be used when looking up the service).\" ]\n \n           // resolve links to JavaSE and JUnit API\n-          link(offline: \"true\", href: \"https://docs.oracle.com/en/java/javase/11/docs/api/\", packageListLoc: project(\":lucene\").file(\"tools/javadoc/java11/\").toString())\n+          args += [ \"-linkoffline\", javaSEDocUrl, project(\":lucene\").file(\"tools/javadoc/java11/\").toURL() ]", "originalCommit": "263e508684bcbf48b2aa865deb5777d9a44036f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY5OTgzMw==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400699833", "bodyText": "According to -linkoffline documentation the second parameter takes url, so I used toURL() here. But file path is also fine (there is no difference in terms of generated documents).\nhttps://docs.oracle.com/en/java/javase/11/tools/javadoc.html\n-linkoffline url1 url2", "author": "mocobeta", "createdAt": "2020-03-31T07:32:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMjgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxNjcxMg==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400716712", "bodyText": "This documentation looks weird to me ;) Specifically the \"relative\" url2 is not clear. If you do toURL() I think it'll be converted into a full file://.../ URL and it's no longer relative... There is also the question of what it does on Windows where file paths are quite odd.", "author": "dweiss", "createdAt": "2020-03-31T08:02:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMjgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc1MTQ5MQ==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400751491", "bodyText": "I changed toURL() to toString(). Both methods return absolute url / path and equally effective for me (MacOS and Linux) here, but I cannot confirm the outputs on Windows file system soon...", "author": "mocobeta", "createdAt": "2020-03-31T08:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMjgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc1NjE1NA==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400756154", "bodyText": "I can check it on Windows. Let me know what to run, specifically, and if you need anything from me.", "author": "dweiss", "createdAt": "2020-03-31T09:07:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMjgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4MDM2MA==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400780360", "bodyText": "Thanks, i'd be glad if you check the (absolute) links are correctly created by changes here when built on Windows. :)\n./gradlew :lucene:analysis:common:renderJavadoc\n\nThis should generate hyperlinks to core module, for example\nlucene/analysis/common/build/docs/javadoc/org/apache/lucene/analysis/ar/ArabicAnalyzer.html should look like this on browser:\n\nHere, org.apache.lucene.analysis.Analyzer should be <a> link to\nhttps://lucene.apache.org/core/9_0_0-SNAPSHOT/core/org/apache/lucene/analysis/Analyzer.html (url will be changed depending on project.version).", "author": "mocobeta", "createdAt": "2020-03-31T09:45:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMjgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4ODUxMQ==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400788511", "bodyText": "Darn. I get execution error:\n> Task :lucene:core:renderJavadoc FAILED\njavadoc: error - Illegal package name: \"<i>Copyright &copy; 2000-2020 Apache Software Foundation. All Rights Reserved.</i>\"\n1 error\n\nFAILURE: Build failed with an exception.\n\n* Where:\nScript 'O:\\repos\\lucene-gradle-master\\gradle\\render-javadoc.gradle' line: 57\n\n* What went wrong:\nExecution failed for task ':lucene:core:renderJavadoc'.\n> Process 'command 'C:\\Tools\\java\\jdk\\bin\\javadoc.exe'' finished with non-zero exit value 2\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\n\n* Get more help at https://help.gradle.org\n\nBUILD FAILED in 15s\n2 actionable tasks: 1 executed, 1 up-to-date\n\nI think it's because something is escaped improperly. Let me look into this.", "author": "dweiss", "createdAt": "2020-03-31T09:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMjgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwMDQ2MQ==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400800461", "bodyText": "I think the generation is working properly:\n<li><a href=\"https://lucene.apache.org/core/9_0_0-SNAPSHOT/core/org/apache/lucene/analysis/Analyzer.html?is-external=true\" title=\"class or interface in org.apache.lucene.analysis\" class=\"externalLink\">org.apache.lucene.analysis.Analyzer</a></li>\n\nI am surprised this worked for you since the classpath for one of the modules is empty and this created an empty argument (which was skipped). Hence the problem above. I had to add:\n      if (!sourceSets.main.compileClasspath.isEmpty()) {\n        args += [ \"-classpath\", sourceSets.main.compileClasspath.asPath ]\n      } \n\nto make it work.\nI am also inclined to generate those arguments into a temporary file and use javadoc's \"@file\" syntax to pass arguments from that file. This is what gradle does; it also makes inspecting exact options passed to javadoc a tad easier (the file is task-temporary but remains under tmp if the task fails).", "author": "dweiss", "createdAt": "2020-03-31T10:18:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMjgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxNDU5Nw==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400814597", "bodyText": "I fixed this on f48c6ec.\n\nI am also inclined to generate those arguments into a temporary file and use javadoc's \"@file\" syntax to pass arguments from that file. This is what gradle does; it also makes inspecting exact options passed to javadoc a tad easier (the file is task-temporary but remains under tmp if the task fails).\n\nOk, I can do this. Let me know another PR would be preferred for the change.", "author": "mocobeta", "createdAt": "2020-03-31T10:43:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMjgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxNjg5NA==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r400816894", "bodyText": "Either way, whatever is more convenient for you. :)", "author": "dweiss", "createdAt": "2020-03-31T10:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMjgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY4NjMyMA==", "url": "https://github.com/apache/lucene-solr/pull/1388#discussion_r403686320", "bodyText": "hi @dweiss,\nI made following changes to the PR:\n\nsave javadoc options to a file under the tmp directory for each task (project/build/tmp/renderJavadoc).\npass the options file to javadoc tool via \"@file\" argument.\nwhen the task fails, it shows raw javadoc tool err message and options file path for debugging.\n\nI've tested it on MacOS/Fedora Linux/Windows10. Works for me, but I'd appreciate if you could cross-check especially if you come up with some edge cases on Windows.", "author": "mocobeta", "createdAt": "2020-04-05T11:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMjgxNw=="}], "type": "inlineReview"}, {"oid": "46f02c36aee8a41c2ba9d5f12aa9446c1a1372fb", "url": "https://github.com/apache/lucene-solr/commit/46f02c36aee8a41c2ba9d5f12aa9446c1a1372fb", "message": "change toURL() to toString() for pointing element-list location", "committedDate": "2020-03-31T08:53:06Z", "type": "commit"}, {"oid": "f48c6ecbe3b5a47ae2cc677dae8e1c44b513ac9c", "url": "https://github.com/apache/lucene-solr/commit/f48c6ecbe3b5a47ae2cc677dae8e1c44b513ac9c", "message": "skip -classpath option if compile classpath is empty", "committedDate": "2020-03-31T10:30:06Z", "type": "commit"}, {"oid": "a81e8327867964bd7f7827459363886fcd7d0b9b", "url": "https://github.com/apache/lucene-solr/commit/a81e8327867964bd7f7827459363886fcd7d0b9b", "message": "Pass javadoc options via a (temporary) file.", "committedDate": "2020-04-05T09:16:02Z", "type": "commit"}, {"oid": "7964a2bdb0bcef0078c2d5a57f99ccda7e0d9746", "url": "https://github.com/apache/lucene-solr/commit/7964a2bdb0bcef0078c2d5a57f99ccda7e0d9746", "message": "Show options file path when task fails", "committedDate": "2020-04-05T09:48:03Z", "type": "commit"}, {"oid": "f8597a9bd78120f77764b35c10bd6875722ddae4", "url": "https://github.com/apache/lucene-solr/commit/f8597a9bd78120f77764b35c10bd6875722ddae4", "message": "fix file path string", "committedDate": "2020-04-05T10:30:46Z", "type": "commit"}, {"oid": "63e70784bca6198122df662a16cac89c8ff17ed7", "url": "https://github.com/apache/lucene-solr/commit/63e70784bca6198122df662a16cac89c8ff17ed7", "message": "throw GradleExeption when task fails", "committedDate": "2020-04-05T10:33:31Z", "type": "commit"}, {"oid": "3e82fa6584e3850db53c5cd5da30804f615a97ec", "url": "https://github.com/apache/lucene-solr/commit/3e82fa6584e3850db53c5cd5da30804f615a97ec", "message": "fix bug in previous commit", "committedDate": "2020-04-05T10:35:41Z", "type": "commit"}, {"oid": "75a4011a69025bd87824eeb6564fc96a1750e924", "url": "https://github.com/apache/lucene-solr/commit/75a4011a69025bd87824eeb6564fc96a1750e924", "message": "simplify checks for temp file; redirect stdout/stderr to a temp file.", "committedDate": "2020-04-07T07:22:35Z", "type": "commit"}]}