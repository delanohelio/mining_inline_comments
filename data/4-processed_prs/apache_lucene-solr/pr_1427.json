{"pr_number": 1427, "pr_title": "LUCENE-9304: Fix IW#getMaxCompletedSequenceNumber() ", "pr_createdAt": "2020-04-12T19:31:43Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1427", "timeline": [{"oid": "86fb34d48403514739ee6cb118845cb4b5ea5631", "url": "https://github.com/apache/lucene-solr/commit/86fb34d48403514739ee6cb118845cb4b5ea5631", "message": "fist cut", "committedDate": "2020-04-12T10:13:11Z", "type": "commit"}, {"oid": "b4f2892e6b9b44e9dbd3e62b5f98e951d2b97212", "url": "https://github.com/apache/lucene-solr/commit/b4f2892e6b9b44e9dbd3e62b5f98e951d2b97212", "message": "fixed it", "committedDate": "2020-04-12T13:51:37Z", "type": "commit"}, {"oid": "5fe912951ad84204513e6f9d6e1271e01b2ea94e", "url": "https://github.com/apache/lucene-solr/commit/5fe912951ad84204513e6f9d6e1271e01b2ea94e", "message": "progress", "committedDate": "2020-04-12T19:18:29Z", "type": "commit"}, {"oid": "b82ee712a262013effaa4d17b5d94a83a7006d7e", "url": "https://github.com/apache/lucene-solr/commit/b82ee712a262013effaa4d17b5d94a83a7006d7e", "message": "Merge branch 'master' into fix_max_seq_id", "committedDate": "2020-04-13T11:46:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NzU1OQ==", "url": "https://github.com/apache/lucene-solr/pull/1427#discussion_r407857559", "bodyText": "maybe use updateAndGet instead of loop.", "author": "dnhatn", "createdAt": "2020-04-14T04:20:04Z", "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java", "diffHunk": "@@ -3949,4 +3950,69 @@ public void testRandomOperationsWithSoftDeletes() throws Exception {\n       }\n     }\n   }\n+\n+  public void testMaxCompletedSequenceNumber() throws IOException, InterruptedException {\n+    try (Directory dir = newDirectory();\n+         IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig());) {\n+      assertEquals(1, writer.addDocument(new Document()));\n+      assertEquals(2, writer.updateDocument(new Term(\"foo\", \"bar\"), new Document()));\n+      writer.flushNextBuffer();\n+      assertEquals(3, writer.commit());\n+      assertEquals(4, writer.addDocument(new Document()));\n+      assertEquals(4, writer.getMaxCompletedSequenceNumber());\n+      // commit moves seqNo by 2 since there is one DWPT that could still be in-flight\n+      assertEquals(6, writer.commit());\n+      assertEquals(6, writer.getMaxCompletedSequenceNumber());\n+      assertEquals(7, writer.addDocument(new Document()));\n+      writer.getReader().close();\n+      // getReader moves seqNo by 2 since there is one DWPT that could still be in-flight\n+      assertEquals(9, writer.getMaxCompletedSequenceNumber());\n+    }\n+    try (Directory dir = newDirectory();\n+         IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig());\n+         SearcherManager manager = new SearcherManager(writer, new SearcherFactory())) {\n+      CountDownLatch start = new CountDownLatch(1);\n+      int numDocs = 100 + random().nextInt(500);\n+      AtomicLong maxCompletedSeqID = new AtomicLong(-1);\n+      Thread[] threads = new Thread[2 + random().nextInt(2)];\n+      for (int i = 0; i < threads.length; i++) {\n+        int idx = i;\n+        threads[i] = new Thread(() -> {\n+          try {\n+            start.await();\n+            for (int j = 0; j < numDocs; j++) {\n+              Document doc = new Document();\n+              String id = idx +\"-\"+j;\n+              doc.add(new StringField(\"id\", id, Field.Store.NO));\n+              long seqNo = writer.addDocument(doc);\n+              if (maxCompletedSeqID.get() < seqNo) {\n+                long maxCompletedSequenceNumber = writer.getMaxCompletedSequenceNumber();\n+                manager.maybeRefreshBlocking();\n+                long prevValue;\n+                while ((prevValue = maxCompletedSeqID.get()) < maxCompletedSequenceNumber) {", "originalCommit": "b82ee712a262013effaa4d17b5d94a83a7006d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4NzYyNQ==", "url": "https://github.com/apache/lucene-solr/pull/1427#discussion_r407987625", "bodyText": "\ud83d\udc4d", "author": "s1monw", "createdAt": "2020-04-14T09:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NzU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1Nzk2NQ==", "url": "https://github.com/apache/lucene-solr/pull/1427#discussion_r407857965", "bodyText": "s/the the/the", "author": "dnhatn", "createdAt": "2020-04-14T04:21:48Z", "path": "lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.java", "diffHunk": "@@ -538,17 +546,65 @@ public String toString() {\n \n   public long getNextSequenceNumber() {\n     long seqNo = nextSeqNo.getAndIncrement();\n-    assert seqNo < maxSeqNo: \"seqNo=\" + seqNo + \" vs maxSeqNo=\" + maxSeqNo;\n+    assert seqNo <= maxSeqNo: \"seqNo=\" + seqNo + \" vs maxSeqNo=\" + maxSeqNo;\n     return seqNo;\n   }  \n \n-  public long getLastSequenceNumber() {\n+  long getLastSequenceNumber() {\n     return nextSeqNo.get()-1;\n   }  \n \n   /** Inserts a gap in the sequence numbers.  This is used by IW during flush or commit to ensure any in-flight threads get sequence numbers\n    *  inside the gap */\n-  public void skipSequenceNumbers(long jump) {\n+  void skipSequenceNumbers(long jump) {\n     nextSeqNo.addAndGet(jump);\n-  }  \n+  }\n+\n+  /**\n+   * Returns the maximum completed seq no for this queue.\n+   */\n+  long getMaxCompletedSeqNo() {\n+    if (startSeqNo < nextSeqNo.get()) {\n+      return getLastSequenceNumber();\n+    } else {\n+      // if we haven't advanced the seqNo make sure we fall back to the previous queue\n+      long value = previousMaxSeqId.getAsLong();\n+      assert value <= startSeqNo : \"illegal max sequence ID: \" + value + \" start was: \" + startSeqNo;\n+      return value;\n+    }\n+  }\n+\n+  /**\n+   * Advances the queue to the next queue on flush. This carries over the the generation to the next queue and", "originalCommit": "b82ee712a262013effaa4d17b5d94a83a7006d7e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg2MTEzOA==", "url": "https://github.com/apache/lucene-solr/pull/1427#discussion_r407861138", "bodyText": "I ran the second part of this test without the fix several thousand iterations, but all of them passed. It would be great if this test can reproduce the current issue.", "author": "dnhatn", "createdAt": "2020-04-14T04:33:48Z", "path": "lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java", "diffHunk": "@@ -3949,4 +3950,69 @@ public void testRandomOperationsWithSoftDeletes() throws Exception {\n       }\n     }\n   }\n+\n+  public void testMaxCompletedSequenceNumber() throws IOException, InterruptedException {\n+    try (Directory dir = newDirectory();\n+         IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig());) {\n+      assertEquals(1, writer.addDocument(new Document()));\n+      assertEquals(2, writer.updateDocument(new Term(\"foo\", \"bar\"), new Document()));\n+      writer.flushNextBuffer();\n+      assertEquals(3, writer.commit());\n+      assertEquals(4, writer.addDocument(new Document()));\n+      assertEquals(4, writer.getMaxCompletedSequenceNumber());\n+      // commit moves seqNo by 2 since there is one DWPT that could still be in-flight\n+      assertEquals(6, writer.commit());\n+      assertEquals(6, writer.getMaxCompletedSequenceNumber());\n+      assertEquals(7, writer.addDocument(new Document()));\n+      writer.getReader().close();\n+      // getReader moves seqNo by 2 since there is one DWPT that could still be in-flight\n+      assertEquals(9, writer.getMaxCompletedSequenceNumber());\n+    }\n+    try (Directory dir = newDirectory();", "originalCommit": "b82ee712a262013effaa4d17b5d94a83a7006d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4Nzk2NQ==", "url": "https://github.com/apache/lucene-solr/pull/1427#discussion_r407987965", "bodyText": "I added a very specific testcase that fails always. good call on pushing for a better test!", "author": "s1monw", "createdAt": "2020-04-14T09:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg2MTEzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg2NDY1NQ==", "url": "https://github.com/apache/lucene-solr/pull/1427#discussion_r407864655", "bodyText": "I think we can harden the assertion as value should always be smaller than startSeqNo.", "author": "dnhatn", "createdAt": "2020-04-14T04:47:20Z", "path": "lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.java", "diffHunk": "@@ -538,17 +546,65 @@ public String toString() {\n \n   public long getNextSequenceNumber() {\n     long seqNo = nextSeqNo.getAndIncrement();\n-    assert seqNo < maxSeqNo: \"seqNo=\" + seqNo + \" vs maxSeqNo=\" + maxSeqNo;\n+    assert seqNo <= maxSeqNo: \"seqNo=\" + seqNo + \" vs maxSeqNo=\" + maxSeqNo;\n     return seqNo;\n   }  \n \n-  public long getLastSequenceNumber() {\n+  long getLastSequenceNumber() {\n     return nextSeqNo.get()-1;\n   }  \n \n   /** Inserts a gap in the sequence numbers.  This is used by IW during flush or commit to ensure any in-flight threads get sequence numbers\n    *  inside the gap */\n-  public void skipSequenceNumbers(long jump) {\n+  void skipSequenceNumbers(long jump) {\n     nextSeqNo.addAndGet(jump);\n-  }  \n+  }\n+\n+  /**\n+   * Returns the maximum completed seq no for this queue.\n+   */\n+  long getMaxCompletedSeqNo() {\n+    if (startSeqNo < nextSeqNo.get()) {\n+      return getLastSequenceNumber();\n+    } else {\n+      // if we haven't advanced the seqNo make sure we fall back to the previous queue\n+      long value = previousMaxSeqId.getAsLong();\n+      assert value <= startSeqNo : \"illegal max sequence ID: \" + value + \" start was: \" + startSeqNo;", "originalCommit": "b82ee712a262013effaa4d17b5d94a83a7006d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4ODAzNA==", "url": "https://github.com/apache/lucene-solr/pull/1427#discussion_r407988034", "bodyText": "\ud83d\udc4d", "author": "s1monw", "createdAt": "2020-04-14T09:16:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg2NDY1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg2NTQzOA==", "url": "https://github.com/apache/lucene-solr/pull/1427#discussion_r407865438", "bodyText": "Should () -> nextSeqNo.get() - 1 be this:: getMaxCompletedSeqNo instead?", "author": "dnhatn", "createdAt": "2020-04-14T04:50:18Z", "path": "lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue.java", "diffHunk": "@@ -538,17 +546,65 @@ public String toString() {\n \n   public long getNextSequenceNumber() {\n     long seqNo = nextSeqNo.getAndIncrement();\n-    assert seqNo < maxSeqNo: \"seqNo=\" + seqNo + \" vs maxSeqNo=\" + maxSeqNo;\n+    assert seqNo <= maxSeqNo: \"seqNo=\" + seqNo + \" vs maxSeqNo=\" + maxSeqNo;\n     return seqNo;\n   }  \n \n-  public long getLastSequenceNumber() {\n+  long getLastSequenceNumber() {\n     return nextSeqNo.get()-1;\n   }  \n \n   /** Inserts a gap in the sequence numbers.  This is used by IW during flush or commit to ensure any in-flight threads get sequence numbers\n    *  inside the gap */\n-  public void skipSequenceNumbers(long jump) {\n+  void skipSequenceNumbers(long jump) {\n     nextSeqNo.addAndGet(jump);\n-  }  \n+  }\n+\n+  /**\n+   * Returns the maximum completed seq no for this queue.\n+   */\n+  long getMaxCompletedSeqNo() {\n+    if (startSeqNo < nextSeqNo.get()) {\n+      return getLastSequenceNumber();\n+    } else {\n+      // if we haven't advanced the seqNo make sure we fall back to the previous queue\n+      long value = previousMaxSeqId.getAsLong();\n+      assert value <= startSeqNo : \"illegal max sequence ID: \" + value + \" start was: \" + startSeqNo;\n+      return value;\n+    }\n+  }\n+\n+  /**\n+   * Advances the queue to the next queue on flush. This carries over the the generation to the next queue and\n+   * set the {@link #getMaxSeqNo()} based on the given maxNumPendingOps. This method can only be called once, subsequently\n+   * the returned queue should be used.\n+   * @param maxNumPendingOps the max number of possible concurrent operations that will execute on this queue after\n+   *                         it was advanced. This corresponds the the number of DWPTs that own the current queue at the\n+   *                         moment when this queue is advanced since each these DWPTs can increment the seqId after we\n+   *                         advanced it.\n+   * @return a new queue as a successor of this queue.\n+   */\n+  synchronized DocumentsWriterDeleteQueue advanceQueue(int maxNumPendingOps) {\n+    if (advanced) {\n+      throw new IllegalStateException(\"queue was already advanced\");\n+    }\n+    advanced = true;\n+    long seqNo = getLastSequenceNumber() + maxNumPendingOps + 1;\n+    maxSeqNo = seqNo;\n+    return new DocumentsWriterDeleteQueue(infoStream, generation + 1, seqNo + 1, () -> nextSeqNo.get() - 1);", "originalCommit": "b82ee712a262013effaa4d17b5d94a83a7006d7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4ODE1Mg==", "url": "https://github.com/apache/lucene-solr/pull/1427#discussion_r407988152", "bodyText": "I left a comment why this is not a good idea.", "author": "s1monw", "createdAt": "2020-04-14T09:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg2NTQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzODMyNA==", "url": "https://github.com/apache/lucene-solr/pull/1427#discussion_r408138324", "bodyText": "Good point, thanks.", "author": "dnhatn", "createdAt": "2020-04-14T13:32:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg2NTQzOA=="}], "type": "inlineReview"}, {"oid": "3674ad67c8c1a7a819ce381edff19595aa715c06", "url": "https://github.com/apache/lucene-solr/commit/3674ad67c8c1a7a819ce381edff19595aa715c06", "message": "add better testcase", "committedDate": "2020-04-14T09:01:51Z", "type": "commit"}, {"oid": "bad5fd1fcd23850506ab8c6854a47fa80120f935", "url": "https://github.com/apache/lucene-solr/commit/bad5fd1fcd23850506ab8c6854a47fa80120f935", "message": "apply review comments", "committedDate": "2020-04-14T09:15:45Z", "type": "commit"}, {"oid": "0217d4c7c8c8243936d8946b08a68f395157b2f2", "url": "https://github.com/apache/lucene-solr/commit/0217d4c7c8c8243936d8946b08a68f395157b2f2", "message": "foo", "committedDate": "2020-04-14T09:25:46Z", "type": "commit"}]}