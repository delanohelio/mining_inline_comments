{"pr_number": 1157, "pr_title": "Add RAT check using Gradle", "pr_createdAt": "2020-01-09T22:13:16Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1157", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEwODU1Mg==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r365108552", "bodyText": "This technically isn't an invocation; typically it configures defaults for some task.", "author": "dweiss", "createdAt": "2020-01-10T07:55:49Z", "path": "gradle/validation/rat-sources.gradle", "diffHunk": "@@ -0,0 +1,167 @@\n+import org.gradle.api.internal.project.IsolatedAntBuilder\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+// This applies the Apache RAT plugin to our source and test files\n+\n+// Largely copied from Apache Kafka\n+apply plugin: RatPlugin\n+// This invocation needs to go out to each project instead of being here\n+rat {", "originalCommit": "552c3a93f3dac4429b1c2a6f518358c14dfc5832", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEwOTg1OA==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r365109858", "bodyText": "I wouldn't go into plugin creation at this moment. You don't need a plugin to define a task - just define the task class and add tasks of that type on projects where they're applicable. You can use ant tasks from gradle directly - no need to isolate anything.", "author": "dweiss", "createdAt": "2020-01-10T08:00:19Z", "path": "gradle/validation/rat-sources.gradle", "diffHunk": "@@ -0,0 +1,167 @@\n+import org.gradle.api.internal.project.IsolatedAntBuilder\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+// This applies the Apache RAT plugin to our source and test files\n+\n+// Largely copied from Apache Kafka\n+apply plugin: RatPlugin\n+// This invocation needs to go out to each project instead of being here\n+rat {\n+}\n+\n+class RatTask extends DefaultTask {\n+    @Input\n+    List<String> includes = []\n+\n+    @Input\n+    List<String> excludes = []\n+\n+    def reportDir = project.file('build/rat')\n+    def xmlReport = new File(reportDir, 'rat-report.xml')\n+\n+    def generateXmlReport(File reportDir) {\n+        // Probably better to use the IsolatedAntBuilder if we can, but it seems to have issues with substringMatcher\n+        // def antBuilder = services.get(IsolatedAntBuilder)\n+\n+        def ratClasspath = project.configurations.rat\n+        def projectPath = project.getRootDir().getAbsolutePath()\n+        ant.taskdef(resource: 'org/apache/rat/anttasks/antlib.xml', classpath: ratClasspath.asPath)\n+        ant.report(format: 'xml', reportFile: xmlReport, addDefaultLicenseMatchers: true) {\n+            fileset(dir: projectPath) {\n+                patternset {\n+                    includes.each {\n+                        include(name: it)\n+                    }\n+                    excludes.each {\n+                        exclude(name: it)\n+                    }\n+                }\n+            }\n+\n+            // The license rules below were manually copied from lucene/common-build.xml, there is currently no mechanism to sync them\n+\n+            // BSD 4-clause stuff (is disallowed below)\n+            substringMatcher(licenseFamilyCategory: \"BSD4 \", licenseFamilyName: \"Original BSD License (with advertising clause)\") {\n+                pattern(substring: \"All advertising materials\")\n+            }\n+\n+            // BSD-like stuff\n+            substringMatcher(licenseFamilyCategory: \"BSD  \", licenseFamilyName: \"Modified BSD License\") {\n+                // brics automaton\n+                pattern(substring: \"Copyright (c) 2001-2009 Anders Moeller\")\n+                // snowball\n+                pattern(substring: \"Copyright (c) 2001, Dr Martin Porter\")\n+                // UMASS kstem\n+                pattern(substring: \"THIS SOFTWARE IS PROVIDED BY UNIVERSITY OF MASSACHUSETTS AND OTHER CONTRIBUTORS\")\n+                // Egothor\n+                pattern(substring: \"Egothor Software License version 1.00\")\n+                // JaSpell\n+                pattern(substring: \"Copyright (c) 2005 Bruno Martins\")\n+                // d3.js\n+                pattern(substring: \"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\")\n+                // highlight.js\n+                pattern(substring: \"THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS\")\n+            }\n+\n+            // MIT-like\n+            substringMatcher(licenseFamilyCategory: \"MIT  \", licenseFamilyName:\"Modified BSD License\") {\n+                // ICU license\n+                pattern(substring: \"Permission is hereby granted, free of charge, to any person obtaining a copy\")\n+            }\n+\n+            // Apache\n+            substringMatcher(licenseFamilyCategory: \"AL   \", licenseFamilyName: \"Apache\") {\n+                pattern(substring: \"Licensed to the Apache Software Foundation (ASF) under\")\n+                // this is the old - school one under some files\n+                pattern(substring: \"Licensed under the Apache License, Version 2.0 (the &quot;License&quot;)\")\n+            }\n+\n+            substringMatcher(licenseFamilyCategory: \"GEN  \", licenseFamilyName: \"Generated\") {\n+                // <!-- svg files generated by gnuplot -->\n+                pattern(substring: \"Produced by GNUPLOT\")\n+                // <!-- snowball stemmers generated by snowball compiler -->\n+                pattern(substring: \"This file was generated automatically by the Snowball to Java compiler\")\n+                // <!-- parsers generated by antlr -->\n+                pattern(substring: \"ANTLR GENERATED CODE\")\n+            }\n+\n+            approvedLicense(familyName: \"Apache\")\n+            approvedLicense(familyName: \"The MIT License\")\n+            approvedLicense(familyName: \"Modified BSD License\")\n+            approvedLicense(familyName: \"Generated\")\n+        }\n+    }\n+\n+    def printUnknownFiles() {\n+        def ratXml = new XmlParser().parse(xmlReport)\n+        def unknownLicenses = 0\n+        ratXml.resource.each { resource ->\n+            if (resource.'license-approval'.@name[0] == \"false\") {\n+                // println('Unknown license: ' + resource.@name)\n+                unknownLicenses++\n+            }\n+        }\n+        if (unknownLicenses > 0) {\n+            throw new GradleException(\"Found \" + unknownLicenses + \" files with \" +\n+                    \"unknown licenses.\")\n+        }\n+    }\n+\n+    @TaskAction\n+    def rat() {\n+        if (!reportDir.exists()) {\n+            reportDir.mkdirs()\n+        }\n+        def origEncoding = System.getProperty(\"file.encoding\")\n+        try {\n+            System.setProperty(\"file.encoding\", \"UTF-8\") //affects the output of the ant rat task\n+            generateXmlReport(reportDir)\n+            printUnknownFiles()\n+        } finally {\n+            System.setProperty(\"file.encoding\", origEncoding)\n+        }\n+    }\n+}\n+\n+class RatPlugin implements Plugin<Project> {", "originalCommit": "552c3a93f3dac4429b1c2a6f518358c14dfc5832", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4NDM0OA==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r365184348", "bodyText": "This is wrong I think. It should be project.projectDir", "author": "dweiss", "createdAt": "2020-01-10T11:08:43Z", "path": "gradle/validation/rat-sources.gradle", "diffHunk": "@@ -0,0 +1,167 @@\n+import org.gradle.api.internal.project.IsolatedAntBuilder\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+// This applies the Apache RAT plugin to our source and test files\n+\n+// Largely copied from Apache Kafka\n+apply plugin: RatPlugin\n+// This invocation needs to go out to each project instead of being here\n+rat {\n+}\n+\n+class RatTask extends DefaultTask {\n+    @Input\n+    List<String> includes = []\n+\n+    @Input\n+    List<String> excludes = []\n+\n+    def reportDir = project.file('build/rat')\n+    def xmlReport = new File(reportDir, 'rat-report.xml')\n+\n+    def generateXmlReport(File reportDir) {\n+        // Probably better to use the IsolatedAntBuilder if we can, but it seems to have issues with substringMatcher\n+        // def antBuilder = services.get(IsolatedAntBuilder)\n+\n+        def ratClasspath = project.configurations.rat\n+        def projectPath = project.getRootDir().getAbsolutePath()", "originalCommit": "552c3a93f3dac4429b1c2a6f518358c14dfc5832", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4NTEyOQ==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r365185129", "bodyText": "mkdirs alone is fine; it'll check for existence anyway.", "author": "dweiss", "createdAt": "2020-01-10T11:10:55Z", "path": "gradle/validation/rat-sources.gradle", "diffHunk": "@@ -0,0 +1,167 @@\n+import org.gradle.api.internal.project.IsolatedAntBuilder\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+// This applies the Apache RAT plugin to our source and test files\n+\n+// Largely copied from Apache Kafka\n+apply plugin: RatPlugin\n+// This invocation needs to go out to each project instead of being here\n+rat {\n+}\n+\n+class RatTask extends DefaultTask {\n+    @Input\n+    List<String> includes = []\n+\n+    @Input\n+    List<String> excludes = []\n+\n+    def reportDir = project.file('build/rat')\n+    def xmlReport = new File(reportDir, 'rat-report.xml')\n+\n+    def generateXmlReport(File reportDir) {\n+        // Probably better to use the IsolatedAntBuilder if we can, but it seems to have issues with substringMatcher\n+        // def antBuilder = services.get(IsolatedAntBuilder)\n+\n+        def ratClasspath = project.configurations.rat\n+        def projectPath = project.getRootDir().getAbsolutePath()\n+        ant.taskdef(resource: 'org/apache/rat/anttasks/antlib.xml', classpath: ratClasspath.asPath)\n+        ant.report(format: 'xml', reportFile: xmlReport, addDefaultLicenseMatchers: true) {\n+            fileset(dir: projectPath) {\n+                patternset {\n+                    includes.each {\n+                        include(name: it)\n+                    }\n+                    excludes.each {\n+                        exclude(name: it)\n+                    }\n+                }\n+            }\n+\n+            // The license rules below were manually copied from lucene/common-build.xml, there is currently no mechanism to sync them\n+\n+            // BSD 4-clause stuff (is disallowed below)\n+            substringMatcher(licenseFamilyCategory: \"BSD4 \", licenseFamilyName: \"Original BSD License (with advertising clause)\") {\n+                pattern(substring: \"All advertising materials\")\n+            }\n+\n+            // BSD-like stuff\n+            substringMatcher(licenseFamilyCategory: \"BSD  \", licenseFamilyName: \"Modified BSD License\") {\n+                // brics automaton\n+                pattern(substring: \"Copyright (c) 2001-2009 Anders Moeller\")\n+                // snowball\n+                pattern(substring: \"Copyright (c) 2001, Dr Martin Porter\")\n+                // UMASS kstem\n+                pattern(substring: \"THIS SOFTWARE IS PROVIDED BY UNIVERSITY OF MASSACHUSETTS AND OTHER CONTRIBUTORS\")\n+                // Egothor\n+                pattern(substring: \"Egothor Software License version 1.00\")\n+                // JaSpell\n+                pattern(substring: \"Copyright (c) 2005 Bruno Martins\")\n+                // d3.js\n+                pattern(substring: \"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\")\n+                // highlight.js\n+                pattern(substring: \"THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS\")\n+            }\n+\n+            // MIT-like\n+            substringMatcher(licenseFamilyCategory: \"MIT  \", licenseFamilyName:\"Modified BSD License\") {\n+                // ICU license\n+                pattern(substring: \"Permission is hereby granted, free of charge, to any person obtaining a copy\")\n+            }\n+\n+            // Apache\n+            substringMatcher(licenseFamilyCategory: \"AL   \", licenseFamilyName: \"Apache\") {\n+                pattern(substring: \"Licensed to the Apache Software Foundation (ASF) under\")\n+                // this is the old - school one under some files\n+                pattern(substring: \"Licensed under the Apache License, Version 2.0 (the &quot;License&quot;)\")\n+            }\n+\n+            substringMatcher(licenseFamilyCategory: \"GEN  \", licenseFamilyName: \"Generated\") {\n+                // <!-- svg files generated by gnuplot -->\n+                pattern(substring: \"Produced by GNUPLOT\")\n+                // <!-- snowball stemmers generated by snowball compiler -->\n+                pattern(substring: \"This file was generated automatically by the Snowball to Java compiler\")\n+                // <!-- parsers generated by antlr -->\n+                pattern(substring: \"ANTLR GENERATED CODE\")\n+            }\n+\n+            approvedLicense(familyName: \"Apache\")\n+            approvedLicense(familyName: \"The MIT License\")\n+            approvedLicense(familyName: \"Modified BSD License\")\n+            approvedLicense(familyName: \"Generated\")\n+        }\n+    }\n+\n+    def printUnknownFiles() {\n+        def ratXml = new XmlParser().parse(xmlReport)\n+        def unknownLicenses = 0\n+        ratXml.resource.each { resource ->\n+            if (resource.'license-approval'.@name[0] == \"false\") {\n+                // println('Unknown license: ' + resource.@name)\n+                unknownLicenses++\n+            }\n+        }\n+        if (unknownLicenses > 0) {\n+            throw new GradleException(\"Found \" + unknownLicenses + \" files with \" +\n+                    \"unknown licenses.\")\n+        }\n+    }\n+\n+    @TaskAction\n+    def rat() {\n+        if (!reportDir.exists()) {\n+            reportDir.mkdirs()", "originalCommit": "552c3a93f3dac4429b1c2a6f518358c14dfc5832", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4NTk4OA==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r365185988", "bodyText": "This is crappy. An XML file should be UTF-8 unless it declares a different encoding in the preamble. We should not have to adjust file.encoding (in fact, we must not) - it seems like a bug somewhere down the toolchain.", "author": "dweiss", "createdAt": "2020-01-10T11:13:12Z", "path": "gradle/validation/rat-sources.gradle", "diffHunk": "@@ -0,0 +1,167 @@\n+import org.gradle.api.internal.project.IsolatedAntBuilder\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+// This applies the Apache RAT plugin to our source and test files\n+\n+// Largely copied from Apache Kafka\n+apply plugin: RatPlugin\n+// This invocation needs to go out to each project instead of being here\n+rat {\n+}\n+\n+class RatTask extends DefaultTask {\n+    @Input\n+    List<String> includes = []\n+\n+    @Input\n+    List<String> excludes = []\n+\n+    def reportDir = project.file('build/rat')\n+    def xmlReport = new File(reportDir, 'rat-report.xml')\n+\n+    def generateXmlReport(File reportDir) {\n+        // Probably better to use the IsolatedAntBuilder if we can, but it seems to have issues with substringMatcher\n+        // def antBuilder = services.get(IsolatedAntBuilder)\n+\n+        def ratClasspath = project.configurations.rat\n+        def projectPath = project.getRootDir().getAbsolutePath()\n+        ant.taskdef(resource: 'org/apache/rat/anttasks/antlib.xml', classpath: ratClasspath.asPath)\n+        ant.report(format: 'xml', reportFile: xmlReport, addDefaultLicenseMatchers: true) {\n+            fileset(dir: projectPath) {\n+                patternset {\n+                    includes.each {\n+                        include(name: it)\n+                    }\n+                    excludes.each {\n+                        exclude(name: it)\n+                    }\n+                }\n+            }\n+\n+            // The license rules below were manually copied from lucene/common-build.xml, there is currently no mechanism to sync them\n+\n+            // BSD 4-clause stuff (is disallowed below)\n+            substringMatcher(licenseFamilyCategory: \"BSD4 \", licenseFamilyName: \"Original BSD License (with advertising clause)\") {\n+                pattern(substring: \"All advertising materials\")\n+            }\n+\n+            // BSD-like stuff\n+            substringMatcher(licenseFamilyCategory: \"BSD  \", licenseFamilyName: \"Modified BSD License\") {\n+                // brics automaton\n+                pattern(substring: \"Copyright (c) 2001-2009 Anders Moeller\")\n+                // snowball\n+                pattern(substring: \"Copyright (c) 2001, Dr Martin Porter\")\n+                // UMASS kstem\n+                pattern(substring: \"THIS SOFTWARE IS PROVIDED BY UNIVERSITY OF MASSACHUSETTS AND OTHER CONTRIBUTORS\")\n+                // Egothor\n+                pattern(substring: \"Egothor Software License version 1.00\")\n+                // JaSpell\n+                pattern(substring: \"Copyright (c) 2005 Bruno Martins\")\n+                // d3.js\n+                pattern(substring: \"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\")\n+                // highlight.js\n+                pattern(substring: \"THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS\")\n+            }\n+\n+            // MIT-like\n+            substringMatcher(licenseFamilyCategory: \"MIT  \", licenseFamilyName:\"Modified BSD License\") {\n+                // ICU license\n+                pattern(substring: \"Permission is hereby granted, free of charge, to any person obtaining a copy\")\n+            }\n+\n+            // Apache\n+            substringMatcher(licenseFamilyCategory: \"AL   \", licenseFamilyName: \"Apache\") {\n+                pattern(substring: \"Licensed to the Apache Software Foundation (ASF) under\")\n+                // this is the old - school one under some files\n+                pattern(substring: \"Licensed under the Apache License, Version 2.0 (the &quot;License&quot;)\")\n+            }\n+\n+            substringMatcher(licenseFamilyCategory: \"GEN  \", licenseFamilyName: \"Generated\") {\n+                // <!-- svg files generated by gnuplot -->\n+                pattern(substring: \"Produced by GNUPLOT\")\n+                // <!-- snowball stemmers generated by snowball compiler -->\n+                pattern(substring: \"This file was generated automatically by the Snowball to Java compiler\")\n+                // <!-- parsers generated by antlr -->\n+                pattern(substring: \"ANTLR GENERATED CODE\")\n+            }\n+\n+            approvedLicense(familyName: \"Apache\")\n+            approvedLicense(familyName: \"The MIT License\")\n+            approvedLicense(familyName: \"Modified BSD License\")\n+            approvedLicense(familyName: \"Generated\")\n+        }\n+    }\n+\n+    def printUnknownFiles() {\n+        def ratXml = new XmlParser().parse(xmlReport)\n+        def unknownLicenses = 0\n+        ratXml.resource.each { resource ->\n+            if (resource.'license-approval'.@name[0] == \"false\") {\n+                // println('Unknown license: ' + resource.@name)\n+                unknownLicenses++\n+            }\n+        }\n+        if (unknownLicenses > 0) {\n+            throw new GradleException(\"Found \" + unknownLicenses + \" files with \" +\n+                    \"unknown licenses.\")\n+        }\n+    }\n+\n+    @TaskAction\n+    def rat() {\n+        if (!reportDir.exists()) {\n+            reportDir.mkdirs()\n+        }\n+        def origEncoding = System.getProperty(\"file.encoding\")\n+        try {\n+            System.setProperty(\"file.encoding\", \"UTF-8\") //affects the output of the ant rat task", "originalCommit": "552c3a93f3dac4429b1c2a6f518358c14dfc5832", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMxOTA4Nw==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r365319087", "bodyText": "Yea, I was a little surprised at it too, but didn't want to touch it when copying from the original implementation. I'm assuming they ran into some issue that we may or may not see. I'll comment it out for now, but leave a note so if we're in trouble later we might be able to identify why a bit easier.", "author": "madrob", "createdAt": "2020-01-10T16:28:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4NTk4OA=="}], "type": "inlineReview"}, {"oid": "d7907b1ccc462ecd08cd2bee6f9253820723a520", "url": "https://github.com/apache/lucene-solr/commit/d7907b1ccc462ecd08cd2bee6f9253820723a520", "message": "skip plugin, use rat task directly", "committedDate": "2020-01-10T16:24:29Z", "type": "forcePushed"}, {"oid": "f9d6d11409bfb0047dca5a526b6b42eac6bb5df4", "url": "https://github.com/apache/lucene-solr/commit/f9d6d11409bfb0047dca5a526b6b42eac6bb5df4", "message": "skip plugin, use rat task directly, use rat on subproj", "committedDate": "2020-01-10T23:32:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NTAyNw==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r365565027", "bodyText": "These rat checks seem to apply not just to java projects but to other files (non-java files) as well. If so then the task should be applicable to any project, not just those with the java plugin?\nI think we'd need to cross-check with what the ant script does (whether it runs those checks on non-java folders).", "author": "dweiss", "createdAt": "2020-01-12T08:13:02Z", "path": "gradle/validation/rat-sources.gradle", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import groovy.xml.NamespaceBuilder\n+\n+allprojects {\n+    configurations {\n+        rat\n+    }\n+\n+    dependencies {\n+        rat 'org.apache.rat:apache-rat-tasks:0.13'\n+    }\n+}\n+\n+subprojects {\n+    plugins.withId(\"java\", {", "originalCommit": "f9d6d11409bfb0047dca5a526b6b42eac6bb5df4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4MzMwNA==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r365983304", "bodyText": "This is a quirk of Gradle where the Java plugin is what actually creates sourceSets.main and test, afaict. It also filters out projects where sourceSets.main doesn't exist, which was throwing exceptions for me.", "author": "madrob", "createdAt": "2020-01-13T19:24:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NTAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjIyOTg4MA==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r366229880", "bodyText": "That's not a quirk :) What I'm saying is that you explicitly rely on the project to be a java convention project. We don't need to require this but then have to decide what to use as source folders.", "author": "dweiss", "createdAt": "2020-01-14T09:28:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NTAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUyNDM4Ng==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r366524386", "bodyText": "We could explicitly code the src/java and src/test paths here, but we are also already doing this in gradle/ant-compat/folder-layout.gradle and I'd like to stick to doing it in one place. As for projects with files but not the java plugin... do we have those? I'll need to figure out what happens if we have a failed file in lucene/ directory directly...", "author": "madrob", "createdAt": "2020-01-14T19:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NTAyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NTIwNA==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r365565204", "bodyText": "something like [project.sourceSets.main, project.sourceSets.test].each { location -> ... }", "author": "dweiss", "createdAt": "2020-01-12T08:16:23Z", "path": "gradle/validation/rat-sources.gradle", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import groovy.xml.NamespaceBuilder\n+\n+allprojects {\n+    configurations {\n+        rat\n+    }\n+\n+    dependencies {\n+        rat 'org.apache.rat:apache-rat-tasks:0.13'\n+    }\n+}\n+\n+subprojects {\n+    plugins.withId(\"java\", {\n+        task(\"rat\", type: RatTask) {\n+            group = 'Verification'\n+            description = 'Runs Apache Rat checks.'\n+        }\n+    })\n+}\n+\n+// Somewhat inspired by existing task from Apache Kafka\n+class RatTask extends DefaultTask {\n+    @Input\n+    List<String> includes = []\n+\n+    @Input\n+    List<String> excludes = []\n+\n+    @Input\n+    List<String> additionalExcludes = []\n+\n+    def reportDir = new File(project.buildDir, 'rat')\n+    def xmlReport = new File(reportDir, 'rat-report.xml')\n+\n+    def generateXmlReport(File reportDir) {\n+        def uri = 'antlib:org.apache.rat.anttasks'\n+        def ratClasspath = project.configurations.rat.asPath\n+        ant.taskdef(resource: 'org/apache/rat/anttasks/antlib.xml', uri: uri, classpath: ratClasspath)\n+\n+        def projectPath = project.projectDir.absolutePath\n+\n+        def rat = NamespaceBuilder.newInstance(ant, uri)\n+        rat.report(format: 'xml', reportFile: xmlReport, addDefaultLicenseMatchers: true) {\n+            ant.fileset(dir: projectPath) {\n+                ant.include(name: '*.xml')\n+                includes.each {\n+                    ant.include(name: it)\n+                }\n+                additionalExcludes.each {\n+                    ant.exclude(name: it)\n+                }\n+            }\n+\n+            // There may be a more efficient way to write these next two blocks since they use the same logic", "originalCommit": "f9d6d11409bfb0047dca5a526b6b42eac6bb5df4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NTIzMg==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r365565232", "bodyText": "I'd be explicit and use variable for closures rather than \"it\", especially in larger code blocks.", "author": "dweiss", "createdAt": "2020-01-12T08:17:01Z", "path": "gradle/validation/rat-sources.gradle", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import groovy.xml.NamespaceBuilder\n+\n+allprojects {\n+    configurations {\n+        rat\n+    }\n+\n+    dependencies {\n+        rat 'org.apache.rat:apache-rat-tasks:0.13'\n+    }\n+}\n+\n+subprojects {\n+    plugins.withId(\"java\", {\n+        task(\"rat\", type: RatTask) {\n+            group = 'Verification'\n+            description = 'Runs Apache Rat checks.'\n+        }\n+    })\n+}\n+\n+// Somewhat inspired by existing task from Apache Kafka\n+class RatTask extends DefaultTask {\n+    @Input\n+    List<String> includes = []\n+\n+    @Input\n+    List<String> excludes = []\n+\n+    @Input\n+    List<String> additionalExcludes = []\n+\n+    def reportDir = new File(project.buildDir, 'rat')\n+    def xmlReport = new File(reportDir, 'rat-report.xml')\n+\n+    def generateXmlReport(File reportDir) {\n+        def uri = 'antlib:org.apache.rat.anttasks'\n+        def ratClasspath = project.configurations.rat.asPath\n+        ant.taskdef(resource: 'org/apache/rat/anttasks/antlib.xml', uri: uri, classpath: ratClasspath)\n+\n+        def projectPath = project.projectDir.absolutePath\n+\n+        def rat = NamespaceBuilder.newInstance(ant, uri)\n+        rat.report(format: 'xml', reportFile: xmlReport, addDefaultLicenseMatchers: true) {\n+            ant.fileset(dir: projectPath) {\n+                ant.include(name: '*.xml')\n+                includes.each {\n+                    ant.include(name: it)\n+                }\n+                additionalExcludes.each {\n+                    ant.exclude(name: it)\n+                }\n+            }\n+\n+            // There may be a more efficient way to write these next two blocks since they use the same logic\n+            project.sourceSets.main.java.srcDirs.each {\n+                ant.fileset(dir: it, erroronmissingdir: false) {", "originalCommit": "f9d6d11409bfb0047dca5a526b6b42eac6bb5df4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NTMzMA==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r365565330", "bodyText": "collect offending resources to an array and throw the exception with all offenders -- see other validation tasks (license checksum validation for example)?\nthis matters when tasks run concurrently - easier to spot the problem (reported by gradle at the end of the build).", "author": "dweiss", "createdAt": "2020-01-12T08:19:07Z", "path": "gradle/validation/rat-sources.gradle", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import groovy.xml.NamespaceBuilder\n+\n+allprojects {\n+    configurations {\n+        rat\n+    }\n+\n+    dependencies {\n+        rat 'org.apache.rat:apache-rat-tasks:0.13'\n+    }\n+}\n+\n+subprojects {\n+    plugins.withId(\"java\", {\n+        task(\"rat\", type: RatTask) {\n+            group = 'Verification'\n+            description = 'Runs Apache Rat checks.'\n+        }\n+    })\n+}\n+\n+// Somewhat inspired by existing task from Apache Kafka\n+class RatTask extends DefaultTask {\n+    @Input\n+    List<String> includes = []\n+\n+    @Input\n+    List<String> excludes = []\n+\n+    @Input\n+    List<String> additionalExcludes = []\n+\n+    def reportDir = new File(project.buildDir, 'rat')\n+    def xmlReport = new File(reportDir, 'rat-report.xml')\n+\n+    def generateXmlReport(File reportDir) {\n+        def uri = 'antlib:org.apache.rat.anttasks'\n+        def ratClasspath = project.configurations.rat.asPath\n+        ant.taskdef(resource: 'org/apache/rat/anttasks/antlib.xml', uri: uri, classpath: ratClasspath)\n+\n+        def projectPath = project.projectDir.absolutePath\n+\n+        def rat = NamespaceBuilder.newInstance(ant, uri)\n+        rat.report(format: 'xml', reportFile: xmlReport, addDefaultLicenseMatchers: true) {\n+            ant.fileset(dir: projectPath) {\n+                ant.include(name: '*.xml')\n+                includes.each {\n+                    ant.include(name: it)\n+                }\n+                additionalExcludes.each {\n+                    ant.exclude(name: it)\n+                }\n+            }\n+\n+            // There may be a more efficient way to write these next two blocks since they use the same logic\n+            project.sourceSets.main.java.srcDirs.each {\n+                ant.fileset(dir: it, erroronmissingdir: false) {\n+                    excludes.each { x -> ant.exclude(name: x) }\n+                }\n+            }\n+            project.sourceSets.test.java.srcDirs.each {\n+                ant.fileset(dir: it, erroronmissingdir: false) {\n+                    excludes.each { x -> ant.exclude(name: x) }\n+                }\n+            }\n+\n+            project.sourceSets.main.resources.srcDirs.each {\n+                ant.fileset(dir: it, erroronmissingdir: false) {\n+                    ant.include(name: 'META-INF/**')\n+                }\n+            }\n+\n+            // The license rules below were manually copied from lucene/common-build.xml, there is currently no mechanism to sync them\n+\n+            // BSD 4-clause stuff (is disallowed below)\n+            substringMatcher(licenseFamilyCategory: \"BSD4 \", licenseFamilyName: \"Original BSD License (with advertising clause)\") {\n+                pattern(substring: \"All advertising materials\")\n+            }\n+\n+            // BSD-like stuff\n+            substringMatcher(licenseFamilyCategory: \"BSD  \", licenseFamilyName: \"Modified BSD License\") {\n+                // brics automaton\n+                pattern(substring: \"Copyright (c) 2001-2009 Anders Moeller\")\n+                // snowball\n+                pattern(substring: \"Copyright (c) 2001, Dr Martin Porter\")\n+                // UMASS kstem\n+                pattern(substring: \"THIS SOFTWARE IS PROVIDED BY UNIVERSITY OF MASSACHUSETTS AND OTHER CONTRIBUTORS\")\n+                // Egothor\n+                pattern(substring: \"Egothor Software License version 1.00\")\n+                // JaSpell\n+                pattern(substring: \"Copyright (c) 2005 Bruno Martins\")\n+                // d3.js\n+                pattern(substring: \"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\")\n+                // highlight.js\n+                pattern(substring: \"THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS\")\n+            }\n+\n+            // MIT-like\n+            substringMatcher(licenseFamilyCategory: \"MIT  \", licenseFamilyName:\"Modified BSD License\") {\n+                // ICU license\n+                pattern(substring: \"Permission is hereby granted, free of charge, to any person obtaining a copy\")\n+            }\n+\n+            // Apache\n+            substringMatcher(licenseFamilyCategory: \"AL   \", licenseFamilyName: \"Apache\") {\n+                pattern(substring: \"Licensed to the Apache Software Foundation (ASF) under\")\n+                // this is the old - school one under some files\n+                pattern(substring: \"Licensed under the Apache License, Version 2.0 (the &quot;License&quot;)\")\n+            }\n+\n+            substringMatcher(licenseFamilyCategory: \"GEN  \", licenseFamilyName: \"Generated\") {\n+                // svg files generated by gnuplot\n+                pattern(substring: \"Produced by GNUPLOT\")\n+                // snowball stemmers generated by snowball compiler\n+                pattern(substring: \"This file was generated automatically by the Snowball to Java compiler\")\n+                // parsers generated by antlr\n+                pattern(substring: \"ANTLR GENERATED CODE\")\n+            }\n+\n+            approvedLicense(familyName: \"Apache\")\n+            approvedLicense(familyName: \"The MIT License\")\n+            approvedLicense(familyName: \"Modified BSD License\")\n+            approvedLicense(familyName: \"Generated\")\n+        }\n+    }\n+\n+    def printUnknownFiles() {\n+        def ratXml = new XmlParser().parse(xmlReport)\n+        def unknownLicenses = 0\n+        ratXml.resource.each { resource ->\n+            if (resource.'license-approval'.@name[0] == \"false\") {\n+                println('Unknown license: ' + resource.@name)", "originalCommit": "f9d6d11409bfb0047dca5a526b6b42eac6bb5df4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU2NTQ3NA==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r365565474", "bodyText": "I can't believe ant rat would change the default encoding (does it?!). If it does it's crazy. File encoding should be a property of rat's ant task not the system global default", "author": "dweiss", "createdAt": "2020-01-12T08:21:29Z", "path": "gradle/validation/rat-sources.gradle", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import groovy.xml.NamespaceBuilder\n+\n+allprojects {\n+    configurations {\n+        rat\n+    }\n+\n+    dependencies {\n+        rat 'org.apache.rat:apache-rat-tasks:0.13'\n+    }\n+}\n+\n+subprojects {\n+    plugins.withId(\"java\", {\n+        task(\"rat\", type: RatTask) {\n+            group = 'Verification'\n+            description = 'Runs Apache Rat checks.'\n+        }\n+    })\n+}\n+\n+// Somewhat inspired by existing task from Apache Kafka\n+class RatTask extends DefaultTask {\n+    @Input\n+    List<String> includes = []\n+\n+    @Input\n+    List<String> excludes = []\n+\n+    @Input\n+    List<String> additionalExcludes = []\n+\n+    def reportDir = new File(project.buildDir, 'rat')\n+    def xmlReport = new File(reportDir, 'rat-report.xml')\n+\n+    def generateXmlReport(File reportDir) {\n+        def uri = 'antlib:org.apache.rat.anttasks'\n+        def ratClasspath = project.configurations.rat.asPath\n+        ant.taskdef(resource: 'org/apache/rat/anttasks/antlib.xml', uri: uri, classpath: ratClasspath)\n+\n+        def projectPath = project.projectDir.absolutePath\n+\n+        def rat = NamespaceBuilder.newInstance(ant, uri)\n+        rat.report(format: 'xml', reportFile: xmlReport, addDefaultLicenseMatchers: true) {\n+            ant.fileset(dir: projectPath) {\n+                ant.include(name: '*.xml')\n+                includes.each {\n+                    ant.include(name: it)\n+                }\n+                additionalExcludes.each {\n+                    ant.exclude(name: it)\n+                }\n+            }\n+\n+            // There may be a more efficient way to write these next two blocks since they use the same logic\n+            project.sourceSets.main.java.srcDirs.each {\n+                ant.fileset(dir: it, erroronmissingdir: false) {\n+                    excludes.each { x -> ant.exclude(name: x) }\n+                }\n+            }\n+            project.sourceSets.test.java.srcDirs.each {\n+                ant.fileset(dir: it, erroronmissingdir: false) {\n+                    excludes.each { x -> ant.exclude(name: x) }\n+                }\n+            }\n+\n+            project.sourceSets.main.resources.srcDirs.each {\n+                ant.fileset(dir: it, erroronmissingdir: false) {\n+                    ant.include(name: 'META-INF/**')\n+                }\n+            }\n+\n+            // The license rules below were manually copied from lucene/common-build.xml, there is currently no mechanism to sync them\n+\n+            // BSD 4-clause stuff (is disallowed below)\n+            substringMatcher(licenseFamilyCategory: \"BSD4 \", licenseFamilyName: \"Original BSD License (with advertising clause)\") {\n+                pattern(substring: \"All advertising materials\")\n+            }\n+\n+            // BSD-like stuff\n+            substringMatcher(licenseFamilyCategory: \"BSD  \", licenseFamilyName: \"Modified BSD License\") {\n+                // brics automaton\n+                pattern(substring: \"Copyright (c) 2001-2009 Anders Moeller\")\n+                // snowball\n+                pattern(substring: \"Copyright (c) 2001, Dr Martin Porter\")\n+                // UMASS kstem\n+                pattern(substring: \"THIS SOFTWARE IS PROVIDED BY UNIVERSITY OF MASSACHUSETTS AND OTHER CONTRIBUTORS\")\n+                // Egothor\n+                pattern(substring: \"Egothor Software License version 1.00\")\n+                // JaSpell\n+                pattern(substring: \"Copyright (c) 2005 Bruno Martins\")\n+                // d3.js\n+                pattern(substring: \"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\")\n+                // highlight.js\n+                pattern(substring: \"THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS\")\n+            }\n+\n+            // MIT-like\n+            substringMatcher(licenseFamilyCategory: \"MIT  \", licenseFamilyName:\"Modified BSD License\") {\n+                // ICU license\n+                pattern(substring: \"Permission is hereby granted, free of charge, to any person obtaining a copy\")\n+            }\n+\n+            // Apache\n+            substringMatcher(licenseFamilyCategory: \"AL   \", licenseFamilyName: \"Apache\") {\n+                pattern(substring: \"Licensed to the Apache Software Foundation (ASF) under\")\n+                // this is the old - school one under some files\n+                pattern(substring: \"Licensed under the Apache License, Version 2.0 (the &quot;License&quot;)\")\n+            }\n+\n+            substringMatcher(licenseFamilyCategory: \"GEN  \", licenseFamilyName: \"Generated\") {\n+                // svg files generated by gnuplot\n+                pattern(substring: \"Produced by GNUPLOT\")\n+                // snowball stemmers generated by snowball compiler\n+                pattern(substring: \"This file was generated automatically by the Snowball to Java compiler\")\n+                // parsers generated by antlr\n+                pattern(substring: \"ANTLR GENERATED CODE\")\n+            }\n+\n+            approvedLicense(familyName: \"Apache\")\n+            approvedLicense(familyName: \"The MIT License\")\n+            approvedLicense(familyName: \"Modified BSD License\")\n+            approvedLicense(familyName: \"Generated\")\n+        }\n+    }\n+\n+    def printUnknownFiles() {\n+        def ratXml = new XmlParser().parse(xmlReport)\n+        def unknownLicenses = 0\n+        ratXml.resource.each { resource ->\n+            if (resource.'license-approval'.@name[0] == \"false\") {\n+                println('Unknown license: ' + resource.@name)\n+                unknownLicenses++\n+            }\n+        }\n+        if (unknownLicenses > 0) {\n+            throw new GradleException(\"Found \" + unknownLicenses + \" files with \" +\n+                    \"unknown licenses.\")\n+        }\n+    }\n+\n+    @TaskAction\n+    def rat() {\n+        reportDir.mkdirs()\n+        def origEncoding = System.getProperty(\"file.encoding\")", "originalCommit": "f9d6d11409bfb0047dca5a526b6b42eac6bb5df4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dbe3caf39bb695d5c2c4be30169f7c5439e75ff0", "url": "https://github.com/apache/lucene-solr/commit/dbe3caf39bb695d5c2c4be30169f7c5439e75ff0", "message": "Add Apache Rat check to gradle\n\nAdditional Authors: Dawid Weiss <dweiss@apache.org>", "committedDate": "2020-01-13T20:49:41Z", "type": "commit"}, {"oid": "dbe3caf39bb695d5c2c4be30169f7c5439e75ff0", "url": "https://github.com/apache/lucene-solr/commit/dbe3caf39bb695d5c2c4be30169f7c5439e75ff0", "message": "Add Apache Rat check to gradle\n\nAdditional Authors: Dawid Weiss <dweiss@apache.org>", "committedDate": "2020-01-13T20:49:41Z", "type": "forcePushed"}, {"oid": "d17fd3a0fee61fb67cee3b7595ca874429038dd3", "url": "https://github.com/apache/lucene-solr/commit/d17fd3a0fee61fb67cee3b7595ca874429038dd3", "message": "Minor RAT tweaks\n\nTune include/exclude to match ant\nRename in/ex patterns to be more clear about what their functions are", "committedDate": "2020-01-13T22:30:19Z", "type": "commit"}, {"oid": "03a434141a5ad09bf3342aa0d3cf5acd7e9f9177", "url": "https://github.com/apache/lucene-solr/commit/03a434141a5ad09bf3342aa0d3cf5acd7e9f9177", "message": "Define rat task on all projects, not just java\n\nAdd java conditional inside the task so that we can verify source sets\nexist before using them.", "committedDate": "2020-01-14T21:05:30Z", "type": "commit"}, {"oid": "8052104bf2697a812e6dcfd09e0a75a7dd1284ea", "url": "https://github.com/apache/lucene-solr/commit/8052104bf2697a812e6dcfd09e0a75a7dd1284ea", "message": "Add missing directories that don't have projects", "committedDate": "2020-01-14T22:42:35Z", "type": "commit"}, {"oid": "62addc732730fbf56500095985c96321b106f701", "url": "https://github.com/apache/lucene-solr/commit/62addc732730fbf56500095985c96321b106f701", "message": "whitespace", "committedDate": "2020-01-14T22:45:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjczMzg1NQ==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r366733855", "bodyText": "The idea was but I changed a whole bunch of stuff along the way. There are similarities and the attribution is there but I think we can consider it our own.", "author": "dweiss", "createdAt": "2020-01-15T07:55:00Z", "path": "gradle/validation/rat-sources.gradle", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import groovy.xml.NamespaceBuilder\n+\n+configure(rootProject) {\n+    configurations {\n+        rat\n+    }\n+\n+    dependencies {\n+        rat \"org.apache.rat:apache-rat\"\n+    }\n+}\n+\n+allprojects {\n+    task(\"rat\", type: RatTask) {\n+        group = 'Verification'\n+        description = 'Runs Apache Rat checks.'\n+    }\n+\n+    if (project == rootProject) {\n+        rat {\n+            includes += [\n+                \"buildSrc/**/*.java\",\n+                \"lucene/tools/forbiddenApis/**\",\n+                \"lucene/tools/prettify/**\",\n+                // \"dev-tools/**\"\n+            ]\n+            excludes += [\n+                // Unclear if this needs ASF header, depends on how much was copied from ElasticSearch", "originalCommit": "62addc732730fbf56500095985c96321b106f701", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjczNDIwMg==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r366734202", "bodyText": "This is one of the reasons I'd rather have our own check - we don't have to rely on a black box (or look inside rat's code to figure out what it does).", "author": "dweiss", "createdAt": "2020-01-15T07:56:02Z", "path": "gradle/validation/rat-sources.gradle", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import groovy.xml.NamespaceBuilder\n+\n+configure(rootProject) {\n+    configurations {\n+        rat\n+    }\n+\n+    dependencies {\n+        rat \"org.apache.rat:apache-rat\"\n+    }\n+}\n+\n+allprojects {\n+    task(\"rat\", type: RatTask) {\n+        group = 'Verification'\n+        description = 'Runs Apache Rat checks.'\n+    }\n+\n+    if (project == rootProject) {\n+        rat {\n+            includes += [\n+                \"buildSrc/**/*.java\",\n+                \"lucene/tools/forbiddenApis/**\",\n+                \"lucene/tools/prettify/**\",\n+                // \"dev-tools/**\"\n+            ]\n+            excludes += [\n+                // Unclear if this needs ASF header, depends on how much was copied from ElasticSearch\n+                \"**/ErrorReportingTestListener.java\"\n+            ]\n+        }\n+    }\n+\n+    if (project.path == \":lucene:analysis:common\") {\n+        rat {\n+            srcExcludes += [\n+                \"**/*.aff\",\n+                \"**/*.dic\",\n+                \"**/charfilter/*.htm*\",\n+                \"**/*LuceneResourcesWikiPage.html\"\n+            ]\n+        }\n+    }\n+\n+    if (project.path == \":lucene:analysis:kuromoji\") {\n+        rat {\n+            srcExcludes += [\n+                // whether rat detects this as binary or not is platform dependent?!", "originalCommit": "62addc732730fbf56500095985c96321b106f701", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjczNDQxOQ==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r366734419", "bodyText": "I don't think there will be lucene:tools anymore once we depart from ant - I don't think there is any relevant code in there that should stay.", "author": "dweiss", "createdAt": "2020-01-15T07:56:45Z", "path": "gradle/validation/rat-sources.gradle", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import groovy.xml.NamespaceBuilder\n+\n+configure(rootProject) {\n+    configurations {\n+        rat\n+    }\n+\n+    dependencies {\n+        rat \"org.apache.rat:apache-rat\"\n+    }\n+}\n+\n+allprojects {\n+    task(\"rat\", type: RatTask) {\n+        group = 'Verification'\n+        description = 'Runs Apache Rat checks.'\n+    }\n+\n+    if (project == rootProject) {\n+        rat {\n+            includes += [\n+                \"buildSrc/**/*.java\",\n+                \"lucene/tools/forbiddenApis/**\",\n+                \"lucene/tools/prettify/**\",\n+                // \"dev-tools/**\"\n+            ]\n+            excludes += [\n+                // Unclear if this needs ASF header, depends on how much was copied from ElasticSearch\n+                \"**/ErrorReportingTestListener.java\"\n+            ]\n+        }\n+    }\n+\n+    if (project.path == \":lucene:analysis:common\") {\n+        rat {\n+            srcExcludes += [\n+                \"**/*.aff\",\n+                \"**/*.dic\",\n+                \"**/charfilter/*.htm*\",\n+                \"**/*LuceneResourcesWikiPage.html\"\n+            ]\n+        }\n+    }\n+\n+    if (project.path == \":lucene:analysis:kuromoji\") {\n+        rat {\n+            srcExcludes += [\n+                // whether rat detects this as binary or not is platform dependent?!\n+                \"**/bocchan.utf-8\"\n+            ]\n+        }\n+    }\n+\n+    if (project.path == \":lucene:analysis:opennlp\") {\n+        rat {\n+            excludes += [\n+                \"src/tools/test-model-data/*.txt\",\n+            ]\n+        }\n+    }\n+\n+    if (project.path == \":lucene:highlighter\") {\n+        rat {\n+            srcExcludes += [\n+                \"**/CambridgeMA.utf8\"\n+            ]\n+        }\n+    }\n+\n+    if (project.path == \":lucene:suggest\") {\n+        rat {\n+            srcExcludes += [\n+                \"**/Top50KWiki.utf8\",\n+                \"**/stop-snowball.txt\"\n+            ]\n+        }\n+    }\n+\n+    if (project.path == \":lucene:tools\") {\n+        rat {\n+            includes += [\n+                \"forbiddenApis/**\",\n+                \"prettify/**\",\n+                // If/when :lucene:tools becomes a gradle project, then the following line will fail", "originalCommit": "62addc732730fbf56500095985c96321b106f701", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjczNDg4OQ==", "url": "https://github.com/apache/lucene-solr/pull/1157#discussion_r366734889", "bodyText": "Did you run gradlew precommit? :) Because I think the lock update file isn't included in the patch.", "author": "dweiss", "createdAt": "2020-01-15T07:58:17Z", "path": "versions.props", "diffHunk": "@@ -72,6 +72,7 @@ org.apache.opennlp:opennlp-tools=1.9.1\n org.apache.pdfbox:*=2.0.17\n org.apache.pdfbox:jempbox=1.8.16\n org.apache.poi:*=4.1.1\n+org.apache.rat:apache-rat:0.11", "originalCommit": "62addc732730fbf56500095985c96321b106f701", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}