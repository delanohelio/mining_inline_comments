{"pr_number": 1477, "pr_title": "LUCENE-9321: Port markdown task to Gradle", "pr_createdAt": "2020-05-01T16:27:58Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1477", "timeline": [{"oid": "914ba181f6b8c3c1ad5171d975db1f352cf52349", "url": "https://github.com/apache/lucene-solr/commit/914ba181f6b8c3c1ad5171d975db1f352cf52349", "message": "LUCENE-9321: Port markdown task to Gradle", "committedDate": "2020-05-01T16:25:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2OTI2OQ==", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r418669269", "bodyText": "I'd rather have it as separate configure(\":lucene\"), configure(\":solr\") blocks... would be easier to separate the logic between the two?", "author": "dweiss", "createdAt": "2020-05-01T18:18:30Z", "path": "gradle/documentation/documentation.gradle", "diffHunk": "@@ -34,4 +36,11 @@ configure(subprojects.findAll { it.path == ':lucene' || it.path == ':solr' }) {\n   ext {\n     docroot = \"${project.buildDir}/documentation\"\n   }\n+  \n+  task copyDocumentationAssets(type: Copy) {\n+    includeEmptyDirs = false\n+    from('site/html')      // lucene", "originalCommit": "914ba181f6b8c3c1ad5171d975db1f352cf52349", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4MzI1Mg==", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r418783252", "bodyText": "Here it's easy to separate, will do!", "author": "uschindler", "createdAt": "2020-05-01T23:55:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2OTI2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4NjcyOQ==", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r425286729", "bodyText": "I did this for the main task. At this place we can also do it, but that's less to maintain.", "author": "uschindler", "createdAt": "2020-05-14T16:51:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2OTI2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2OTM2MQ==", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r418669361", "bodyText": "Right... same here.", "author": "dweiss", "createdAt": "2020-05-01T18:18:44Z", "path": "gradle/documentation/markdown.gradle", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import com.vladsch.flexmark.util.ast.Document;\n+import com.vladsch.flexmark.ast.Heading;\n+import com.vladsch.flexmark.html.HtmlRenderer;\n+import com.vladsch.flexmark.parser.Parser;\n+import com.vladsch.flexmark.parser.ParserEmulationProfile;\n+import com.vladsch.flexmark.util.sequence.Escaping;\n+import com.vladsch.flexmark.util.data.MutableDataSet;\n+import com.vladsch.flexmark.ext.abbreviation.AbbreviationExtension;\n+import com.vladsch.flexmark.ext.autolink.AutolinkExtension;\n+\n+buildscript {\n+  repositories {\n+    mavenCentral()\n+  }\n+\n+  dependencies {\n+    def flexmarkVersion = '0.61.24'\n+  \n+    classpath 'com.vladsch.flexmark:flexmark:' + flexmarkVersion\n+    classpath 'com.vladsch.flexmark:flexmark-ext-autolink:' + flexmarkVersion\n+    classpath 'com.vladsch.flexmark:flexmark-ext-abbreviation:' + flexmarkVersion\n+  }\n+}\n+\n+configure(subprojects.findAll { it.path == ':lucene' || it.path == ':solr' }) {\n+  task markdownToHtml(type: Copy) {\n+    filteringCharset = 'UTF-8'\n+    includeEmptyDirs = false\n+    from('.') {            // lucene", "originalCommit": "914ba181f6b8c3c1ad5171d975db1f352cf52349", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4MzgzOQ==", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r418783839", "bodyText": "I was thinking about that too, but this was easier to begin with. I did not want to clone the whole \"Copy\" task several times. If you tell me how to do this easier, give me a hint!\nShould I remove the from here and then add 2 separate configures for lucene and solr just adding the from?", "author": "uschindler", "createdAt": "2020-05-01T23:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2OTM2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2OTYyNA==", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r418669624", "bodyText": "Looks legit to me, not a hack? :)", "author": "dweiss", "createdAt": "2020-05-01T18:19:17Z", "path": "gradle/documentation/markdown.gradle", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import com.vladsch.flexmark.util.ast.Document;\n+import com.vladsch.flexmark.ast.Heading;\n+import com.vladsch.flexmark.html.HtmlRenderer;\n+import com.vladsch.flexmark.parser.Parser;\n+import com.vladsch.flexmark.parser.ParserEmulationProfile;\n+import com.vladsch.flexmark.util.sequence.Escaping;\n+import com.vladsch.flexmark.util.data.MutableDataSet;\n+import com.vladsch.flexmark.ext.abbreviation.AbbreviationExtension;\n+import com.vladsch.flexmark.ext.autolink.AutolinkExtension;\n+\n+buildscript {\n+  repositories {\n+    mavenCentral()\n+  }\n+\n+  dependencies {\n+    def flexmarkVersion = '0.61.24'\n+  \n+    classpath 'com.vladsch.flexmark:flexmark:' + flexmarkVersion\n+    classpath 'com.vladsch.flexmark:flexmark-ext-autolink:' + flexmarkVersion\n+    classpath 'com.vladsch.flexmark:flexmark-ext-abbreviation:' + flexmarkVersion\n+  }\n+}\n+\n+configure(subprojects.findAll { it.path == ':lucene' || it.path == ':solr' }) {\n+  task markdownToHtml(type: Copy) {\n+    filteringCharset = 'UTF-8'\n+    includeEmptyDirs = false\n+    from('.') {            // lucene\n+      include 'MIGRATE.md'\n+      include 'JRE_VERSION_MIGRATION.md'\n+      include 'SYSTEM_REQUIREMENTS.md'\n+    }\n+    from('site') {         // solr\n+      include '**/*.md'\n+    }\n+    into project.docroot\n+    rename(/\\.md$/, '.html')\n+    filter(MarkdownFilter)\n+  }\n+  \n+  task createDocumentationIndex {\n+    // nocommit: this needs to be implemented next\n+  }\n+}\n+\n+class MarkdownFilter extends FilterReader {\n+  public MarkdownFilter(Reader reader) throws IOException {\n+    // this is a hack: it reads whole file, converts it and provides result as a StringReader", "originalCommit": "914ba181f6b8c3c1ad5171d975db1f352cf52349", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc4MzM1Mw==", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r418783353", "bodyText": "It looks like misuse of a FilterReader, because you do everything in the constructor.", "author": "uschindler", "createdAt": "2020-05-01T23:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2OTYyNA=="}], "type": "inlineReview"}, {"oid": "b4d3903838662cb62efd52252054400319c72cfd", "url": "https://github.com/apache/lucene-solr/commit/b4d3903838662cb62efd52252054400319c72cfd", "message": "Set flexmark version in root project", "committedDate": "2020-05-01T23:39:03Z", "type": "commit"}, {"oid": "800f5d68f9e0afadadb877fa1f1b4b29e4f4d35e", "url": "https://github.com/apache/lucene-solr/commit/800f5d68f9e0afadadb877fa1f1b4b29e4f4d35e", "message": "Make dependency declaration similar to other by @dweiss", "committedDate": "2020-05-01T23:52:11Z", "type": "commit"}, {"oid": "0b3b28142970050cbd1eaea56a0902e8ae244f4b", "url": "https://github.com/apache/lucene-solr/commit/0b3b28142970050cbd1eaea56a0902e8ae244f4b", "message": "Merge branch 'master' of https://gitbox.apache.org/repos/asf/lucene-solr into jira/LUCENE-9321", "committedDate": "2020-05-02T09:49:44Z", "type": "commit"}, {"oid": "5d32aa28cd2b28e29b17d6489484bd20a7eeea4f", "url": "https://github.com/apache/lucene-solr/commit/5d32aa28cd2b28e29b17d6489484bd20a7eeea4f", "message": "Merge branch 'master' of https://gitbox.apache.org/repos/asf/lucene-solr into jira/LUCENE-9321\n\n# Conflicts:\n#\tbuild.gradle\n#\tgradle/documentation/documentation.gradle", "committedDate": "2020-05-14T11:22:07Z", "type": "commit"}, {"oid": "8dca5bb4be788435ca0ba0c50e9550a7ee46a804", "url": "https://github.com/apache/lucene-solr/commit/8dca5bb4be788435ca0ba0c50e9550a7ee46a804", "message": "Add markdown implementation of index.html (for Lucene only)", "committedDate": "2020-05-14T16:15:32Z", "type": "commit"}, {"oid": "25ec475288effa9e94b017d00aa836c2bbc1757e", "url": "https://github.com/apache/lucene-solr/commit/25ec475288effa9e94b017d00aa836c2bbc1757e", "message": "Fix formatting", "committedDate": "2020-05-14T16:27:38Z", "type": "commit"}, {"oid": "839ad4d8d3c76f63cd5963d8bc48897ab08d3ebd", "url": "https://github.com/apache/lucene-solr/commit/839ad4d8d3c76f63cd5963d8bc48897ab08d3ebd", "message": "Fix link to be HTTPS", "committedDate": "2020-05-14T16:34:10Z", "type": "commit"}, {"oid": "aabfb27913598d4b4e95d905f4d72918a8ac4162", "url": "https://github.com/apache/lucene-solr/commit/aabfb27913598d4b4e95d905f4d72918a8ac4162", "message": "Update versions (also for Ant)", "committedDate": "2020-05-14T18:01:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTEwOA==", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r425355108", "bodyText": "Should we move it to an external file? Then we can have a proper suffix and editor support.", "author": "dweiss", "createdAt": "2020-05-14T18:43:49Z", "path": "gradle/documentation/markdown.gradle", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import com.vladsch.flexmark.ast.Heading;\n+import com.vladsch.flexmark.ext.abbreviation.AbbreviationExtension;\n+import com.vladsch.flexmark.ext.attributes.AttributesExtension;\n+import com.vladsch.flexmark.ext.autolink.AutolinkExtension;\n+import com.vladsch.flexmark.html.HtmlRenderer;\n+import com.vladsch.flexmark.parser.Parser;\n+import com.vladsch.flexmark.parser.ParserEmulationProfile;\n+import com.vladsch.flexmark.util.ast.Document;\n+import com.vladsch.flexmark.util.data.MutableDataSet;\n+import com.vladsch.flexmark.util.sequence.Escaping;\n+\n+buildscript {\n+  repositories {\n+    mavenCentral()\n+  }\n+\n+  dependencies {\n+    classpath \"com.vladsch.flexmark:flexmark:${scriptDepVersions['flexmark']}\"\n+    classpath \"com.vladsch.flexmark:flexmark-ext-abbreviation:${scriptDepVersions['flexmark']}\"\n+    classpath \"com.vladsch.flexmark:flexmark-ext-attributes:${scriptDepVersions['flexmark']}\"\n+    classpath \"com.vladsch.flexmark:flexmark-ext-autolink:${scriptDepVersions['flexmark']}\"\n+  }\n+}\n+\n+def getListOfProjectsAsMarkdown = { prefix ->\n+  def projects = allprojects.findAll{ it.path.startsWith(prefix) && it.tasks.findByName('renderSiteJavadoc') }\n+    .sort(false, Comparator.comparing{ (it.name != 'core') as Boolean }\n+      .thenComparing(Comparator.comparing{ (it.name == 'test-framework') as Boolean })\n+      .thenComparing(Comparator.comparing{ it.path }));\n+  return projects.collect{ project ->\n+    def text = \"**[${project.path.substring(prefix.length()).replace(':','-')}](${project.relativeDocPath}/index.html):** ${project.description}\"\n+    if (project.name == 'core') {\n+      text = text.concat(' {style=\"font-size:larger; margin-bottom:.5em\"}')\n+    }\n+    return '* ' + text;\n+  }.join('\\n')\n+}\n+\n+configure(subprojects.findAll { it.path == ':lucene' || it.path == ':solr' }) {\n+  task markdownToHtml(type: Copy) {\n+    filteringCharset = 'UTF-8'\n+    includeEmptyDirs = false\n+    into project.docroot\n+    rename(/\\.md$/, '.html')\n+    filter(MarkdownFilter)\n+  }\n+}\n+\n+configure(project(':lucene')) {\n+  markdownToHtml {\n+    from('.') {\n+      include 'MIGRATE.md'\n+      include 'JRE_VERSION_MIGRATION.md'\n+      include 'SYSTEM_REQUIREMENTS.md'\n+    }\n+  }\n+  \n+  task createDocumentationIndex {\n+    def outputFile = file(\"${project.docroot}/index.html\");\n+    def defaultCodecFile = project(':lucene:core').file('src/java/org/apache/lucene/codecs/Codec.java')\n+    \n+    inputs.file(defaultCodecFile)\n+    outputs.file(outputFile)\n+    \n+    doLast {\n+      // static Codec defaultCodec   =   LOADER    .   lookup    (   \"LuceneXXX\"  )   ;\n+      def regex = ~/\\bdefaultCodec\\s*=\\s*LOADER\\s*\\.\\s*lookup\\s*\\(\\s*\"([^\"]+)\"\\s*\\)\\s*;/\n+      def matcher = regex.matcher(defaultCodecFile.getText('UTF-8'))\n+      if (!matcher.find()) {\n+        throw GradleException(\"Cannot determine default codec from file ${defaultCodecFile}\")\n+      }\n+      def defaultCodecPackage = matcher.group(1).toLowerCase(Locale.ROOT)\n+      def markdown = \"\"\"", "originalCommit": "aabfb27913598d4b4e95d905f4d72918a8ac4162", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM3MTEyOQ==", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r425371129", "bodyText": "That was my question. Can we include it in a way so the groovy variables are parsed?", "author": "uschindler", "createdAt": "2020-05-14T19:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM3NTgzMg==", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r425375832", "bodyText": "https://docs.groovy-lang.org/latest/html/api/groovy/text/SimpleTemplateEngine.html\nShould work?", "author": "dweiss", "createdAt": "2020-05-14T19:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4NDk5Mg==", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r425384992", "bodyText": "Cool. So I will place the file next to the legacy XSL file used by Ant. Once Ant is retired, the latter can go away.", "author": "uschindler", "createdAt": "2020-05-14T19:39:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1NTEwOA=="}], "type": "inlineReview"}, {"oid": "ac3245ba11afb97db358fd61ddd38b210d80a416", "url": "https://github.com/apache/lucene-solr/commit/ac3245ba11afb97db358fd61ddd38b210d80a416", "message": "First version using Groovy's SimpleTemplateEngine", "committedDate": "2020-05-14T22:57:42Z", "type": "commit"}, {"oid": "d18725983590f70fd3e8e2dfaf13ce910dcaba53", "url": "https://github.com/apache/lucene-solr/commit/d18725983590f70fd3e8e2dfaf13ce910dcaba53", "message": "fix typo", "committedDate": "2020-05-14T23:00:01Z", "type": "commit"}, {"oid": "50c83c881f58f04a939fe083cbd0064e693c74f6", "url": "https://github.com/apache/lucene-solr/commit/50c83c881f58f04a939fe083cbd0064e693c74f6", "message": "Remove import", "committedDate": "2020-05-14T23:01:35Z", "type": "commit"}, {"oid": "39d529d30a2aaf8f1b3b459aaf337b20fd683bb0", "url": "https://github.com/apache/lucene-solr/commit/39d529d30a2aaf8f1b3b459aaf337b20fd683bb0", "message": "Use baseVersion to create URLs; TODO: Move this to a central place", "committedDate": "2020-05-15T09:47:15Z", "type": "commit"}, {"oid": "16e75cd068f6d295ba3f3abce5f8adc089246420", "url": "https://github.com/apache/lucene-solr/commit/16e75cd068f6d295ba3f3abce5f8adc089246420", "message": "Add a task class with inputs/outputs for the template processing. The binding of variables is defined by a closure called by the main action", "committedDate": "2020-05-15T09:48:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0OTUyNg==", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r425749526", "bodyText": "Would it be better inserting <!DOCTYPE html> at the beginning (as a valid html5)?", "author": "mocobeta", "createdAt": "2020-05-15T11:52:19Z", "path": "gradle/documentation/markdown.gradle", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import com.vladsch.flexmark.ast.Heading;\n+import com.vladsch.flexmark.ext.abbreviation.AbbreviationExtension;\n+import com.vladsch.flexmark.ext.attributes.AttributesExtension;\n+import com.vladsch.flexmark.ext.autolink.AutolinkExtension;\n+import com.vladsch.flexmark.html.HtmlRenderer;\n+import com.vladsch.flexmark.parser.Parser;\n+import com.vladsch.flexmark.parser.ParserEmulationProfile;\n+import com.vladsch.flexmark.util.ast.Document;\n+import com.vladsch.flexmark.util.data.MutableDataSet;\n+import com.vladsch.flexmark.util.sequence.Escaping;\n+import groovy.text.SimpleTemplateEngine;\n+\n+buildscript {\n+  repositories {\n+    mavenCentral()\n+  }\n+\n+  dependencies {\n+    classpath \"com.vladsch.flexmark:flexmark:${scriptDepVersions['flexmark']}\"\n+    classpath \"com.vladsch.flexmark:flexmark-ext-abbreviation:${scriptDepVersions['flexmark']}\"\n+    classpath \"com.vladsch.flexmark:flexmark-ext-attributes:${scriptDepVersions['flexmark']}\"\n+    classpath \"com.vladsch.flexmark:flexmark-ext-autolink:${scriptDepVersions['flexmark']}\"\n+  }\n+}\n+\n+def getListOfProjectsAsMarkdown = { prefix ->\n+  def projects = allprojects.findAll{ it.path.startsWith(prefix) && it.tasks.findByName('renderSiteJavadoc') }\n+    .sort(false, Comparator.comparing{ (it.name != 'core') as Boolean }\n+      .thenComparing(Comparator.comparing{ (it.name == 'test-framework') as Boolean })\n+      .thenComparing(Comparator.comparing{ it.path }));\n+  return projects.collect{ project ->\n+    def text = \"**[${project.path.substring(prefix.length()).replace(':','-')}](${project.relativeDocPath}/index.html):** ${project.description}\"\n+    if (project.name == 'core') {\n+      text = text.concat(' {style=\"font-size:larger; margin-bottom:.5em\"}')\n+    }\n+    return '* ' + text;\n+  }.join('\\n')\n+}\n+\n+configure(subprojects.findAll { it.path == ':lucene' || it.path == ':solr' }) {\n+  task markdownToHtml(type: Copy) {\n+    filteringCharset = 'UTF-8'\n+    includeEmptyDirs = false\n+    into project.docroot\n+    rename(/\\.md$/, '.html')\n+    filter(MarkdownFilter)\n+  }\n+}\n+\n+configure(project(':lucene')) {\n+  markdownToHtml {\n+    from('.') {\n+      include 'MIGRATE.md'\n+      include 'JRE_VERSION_MIGRATION.md'\n+      include 'SYSTEM_REQUIREMENTS.md'\n+    }\n+  }\n+  \n+  task createDocumentationIndex(type: MarkdownTemplateTask) {\n+    def defaultCodecFile = project(':lucene:core').file('src/java/org/apache/lucene/codecs/Codec.java')\n+    inputs.file(defaultCodecFile)\n+\n+    outputFile = file(\"${project.docroot}/index.html\")\n+    templateFile = file('site/xsl/index.template.md')\n+    \n+    binding = {\n+      // static Codec defaultCodec   =   LOADER    .   lookup    (   \"LuceneXXX\"  )   ;\n+      def regex = ~/\\bdefaultCodec\\s*=\\s*LOADER\\s*\\.\\s*lookup\\s*\\(\\s*\"([^\"]+)\"\\s*\\)\\s*;/\n+      def matcher = regex.matcher(defaultCodecFile.getText('UTF-8'))\n+      if (!matcher.find()) {\n+        throw GradleException(\"Cannot determine default codec from file ${defaultCodecFile}\")\n+      }\n+      def majorVersion = project.version.split(/\\./)[0] as int;\n+      return [\n+        defaultCodecPackage : matcher.group(1).toLowerCase(Locale.ROOT),\n+        version : project.version,\n+        majorVersion : majorVersion,\n+        projectList : getListOfProjectsAsMarkdown(':lucene:')\n+      ]\n+    }\n+  }\n+}\n+\n+configure(project(':solr')) {\n+  markdownToHtml {\n+    from('site') {\n+      include '**/*.md'\n+    }\n+  }\n+  \n+  task createDocumentationIndex {\n+    // nocommit: this needs to be implemented next\n+  }\n+}\n+\n+// filter that can be used with the \"copy\" task of Gradle that transforms Markdown files\n+// from source location to HTML (adding HTML header, styling,...)\n+class MarkdownFilter extends FilterReader {\n+\n+  public MarkdownFilter(Reader reader) throws IOException {\n+    // this is not really a filter: it reads whole file in ctor,\n+    // converts it and provides result downstream as a StringReader\n+    super(new StringReader(convert(reader.text)));\n+  }\n+  \n+  public static String convert(String markdownSource) {\n+    // first replace LUCENE and SOLR issue numbers with a markdown link\n+    markdownSource = markdownSource.replaceAll(/(?s)\\b(LUCENE|SOLR)\\-\\d+\\b/,\n+      '[$0](https://issues.apache.org/jira/browse/$0)');\n+  \n+    // convert the markdown\n+    MutableDataSet options = new MutableDataSet();\n+    options.setFrom(ParserEmulationProfile.MARKDOWN);\n+    options.set(Parser.EXTENSIONS, [ AbbreviationExtension.create(), AutolinkExtension.create(), AttributesExtension.create() ]);\n+    options.set(HtmlRenderer.RENDER_HEADER_ID, true);\n+    options.set(HtmlRenderer.MAX_TRAILING_BLANK_LINES, 0);\n+    Document parsed = Parser.builder(options).build().parse(markdownSource);\n+\n+    StringBuilder html = new StringBuilder('<html>\\n<head>\\n');", "originalCommit": "16e75cd068f6d295ba3f3abce5f8adc089246420", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NjQzNg==", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r425756436", "bodyText": "Yes, if we add CSS that's a good idea. With the current unstyled stuff this was the simplest we can do.\nIf we change that here, we should also do this in tools/ where Ant's script is located.", "author": "uschindler", "createdAt": "2020-05-15T12:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0OTUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc2Mzk3Nw==", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r425763977", "bodyText": "Applying CSS was in my mind. I will add the tag later when I add the style file.", "author": "mocobeta", "createdAt": "2020-05-15T12:22:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0OTUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc2OTEyNQ==", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r425769125", "bodyText": "I would add CSS in a separate issue. I just want to get everything running first. What do you think about current state?", "author": "uschindler", "createdAt": "2020-05-15T12:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0OTUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc3NDczMg==", "url": "https://github.com/apache/lucene-solr/pull/1477#discussion_r425774732", "bodyText": "I would add CSS in a separate issue.\n\nYes I think so too. I will open separate issue for that.", "author": "mocobeta", "createdAt": "2020-05-15T12:42:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0OTUyNg=="}], "type": "inlineReview"}, {"oid": "06e3e531f2a1763180b17d38579259ede85acea6", "url": "https://github.com/apache/lucene-solr/commit/06e3e531f2a1763180b17d38579259ede85acea6", "message": "Add some metadata to build.gradle files (core and analysis only)", "committedDate": "2020-05-15T12:31:05Z", "type": "commit"}, {"oid": "c0ffc326b47b63017a87708c5ad517083b79885f", "url": "https://github.com/apache/lucene-solr/commit/c0ffc326b47b63017a87708c5ad517083b79885f", "message": "Move some common bindings to task", "committedDate": "2020-05-15T17:49:16Z", "type": "commit"}, {"oid": "b2ce12cf04abd212fb5503ab81e99eda3c4f8098", "url": "https://github.com/apache/lucene-solr/commit/b2ce12cf04abd212fb5503ab81e99eda3c4f8098", "message": "Make binding optional", "committedDate": "2020-05-15T17:57:14Z", "type": "commit"}, {"oid": "abd659db1cd8be15c629fc55bcba65a7b6bf082e", "url": "https://github.com/apache/lucene-solr/commit/abd659db1cd8be15c629fc55bcba65a7b6bf082e", "message": "Add descriptions to remaining projects", "committedDate": "2020-05-15T22:03:50Z", "type": "commit"}, {"oid": "5f1008917c36f4050e149c7f616b88a787d5edf3", "url": "https://github.com/apache/lucene-solr/commit/5f1008917c36f4050e149c7f616b88a787d5edf3", "message": "Merge branch 'master' of https://gitbox.apache.org/repos/asf/lucene-solr into jira/LUCENE-9321", "committedDate": "2020-05-15T22:14:50Z", "type": "commit"}, {"oid": "a7ca47758467ef58a2d1149918c81137753a048d", "url": "https://github.com/apache/lucene-solr/commit/a7ca47758467ef58a2d1149918c81137753a048d", "message": "Add Solr minimal online (shipped in tgz/zip) and full documentation.\nCleanup of code; move URL properties to more common places", "committedDate": "2020-05-16T11:23:58Z", "type": "commit"}, {"oid": "5e742ff41cd62a829b321db936c096a148915a4d", "url": "https://github.com/apache/lucene-solr/commit/5e742ff41cd62a829b321db936c096a148915a4d", "message": "Fix precommit error caused by Ant not excluding markdown templates", "committedDate": "2020-05-16T11:45:26Z", "type": "commit"}, {"oid": "363873a478dabdc0eb7db6ecc26d5e48ed306455", "url": "https://github.com/apache/lucene-solr/commit/363873a478dabdc0eb7db6ecc26d5e48ed306455", "message": "Fix broken links (with disabled render task); also move solrj up in list", "committedDate": "2020-05-16T11:52:07Z", "type": "commit"}, {"oid": "c2c24065718d5e9b9541b4298eaab3fbb12b3284", "url": "https://github.com/apache/lucene-solr/commit/c2c24065718d5e9b9541b4298eaab3fbb12b3284", "message": "Use new provider/property API of gradle for lazy evaluation; add project properties used in template as input of task; add withProjectList() to task", "committedDate": "2020-05-17T11:20:27Z", "type": "commit"}, {"oid": "f033a3c3290718da8be515065deb20f188bf53c9", "url": "https://github.com/apache/lucene-solr/commit/f033a3c3290718da8be515065deb20f188bf53c9", "message": "Split Lucene/Solr documentation task", "committedDate": "2020-05-17T12:26:53Z", "type": "commit"}]}