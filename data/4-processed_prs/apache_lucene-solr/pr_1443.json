{"pr_number": 1443, "pr_title": "LUCENE-9337: Ensure CMS updates it's thread accounting datastructures consistently", "pr_createdAt": "2020-04-21T21:31:43Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1443", "timeline": [{"oid": "a12873ff90fcc7e2735401c599e278ef092e5de1", "url": "https://github.com/apache/lucene-solr/commit/a12873ff90fcc7e2735401c599e278ef092e5de1", "message": "LUCENE-9337: Ensure CMS updates it's thread accounting datastructures consistently\n\nCMS today releases it's lock after finishing a merge before it re-acquires it to update\nthe thread accounting datastructures. This causes threading issues where concurrently\nfinishing threads fail to pick up pending merges causing potential thread starvation\non forceMerge calls.", "committedDate": "2020-04-21T21:27:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NjU5NQ==", "url": "https://github.com/apache/lucene-solr/pull/1443#discussion_r412876595", "bodyText": "Wow, what an exotic sequence of events :)  Great catch!\ns/non/none\nadd  time at the end?", "author": "mikemccand", "createdAt": "2020-04-22T10:49:27Z", "path": "lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java", "diffHunk": "@@ -657,4 +659,88 @@ protected void doStall() {\n \n     assertFalse(failed.get());\n   }\n+\n+  /*\n+   * This test tries to produce 2 merges running concurrently with 2 segments per merge. While these\n+   * merges run we kick off a forceMerge that puts a pending merge in the queue but waits for things to happen.\n+   * While we do this we reduce maxMergeCount to 1. If concurrency in CMS is not right the forceMerge will wait forever\n+   * since non of the currently running merges picks up the pending merge. This test fails every", "originalCommit": "a12873ff90fcc7e2735401c599e278ef092e5de1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzI1Mw==", "url": "https://github.com/apache/lucene-solr/pull/1443#discussion_r412877253", "bodyText": "Sneaky (using InfoStream to tickle things)!", "author": "mikemccand", "createdAt": "2020-04-22T10:50:36Z", "path": "lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler.java", "diffHunk": "@@ -657,4 +659,88 @@ protected void doStall() {\n \n     assertFalse(failed.get());\n   }\n+\n+  /*\n+   * This test tries to produce 2 merges running concurrently with 2 segments per merge. While these\n+   * merges run we kick off a forceMerge that puts a pending merge in the queue but waits for things to happen.\n+   * While we do this we reduce maxMergeCount to 1. If concurrency in CMS is not right the forceMerge will wait forever\n+   * since non of the currently running merges picks up the pending merge. This test fails every\n+   */\n+  public void testChangeMaxMergeCountyWhileForceMerge() throws IOException, InterruptedException {\n+    int numIters = TEST_NIGHTLY ? 100 : 10;\n+    for (int iters = 0; iters < numIters; iters++) {\n+      LogDocMergePolicy mp = new LogDocMergePolicy();\n+      mp.setMergeFactor(2);\n+      CountDownLatch forceMergeWaits = new CountDownLatch(1);\n+      CountDownLatch mergeThreadsStartAfterWait = new CountDownLatch(1);\n+      CountDownLatch mergeThreadsArrived = new CountDownLatch(2);\n+      InfoStream stream = new InfoStream() {\n+        @Override\n+        public void message(String component, String message) {", "originalCommit": "a12873ff90fcc7e2735401c599e278ef092e5de1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkzMDA3NQ==", "url": "https://github.com/apache/lucene-solr/pull/1443#discussion_r412930075", "bodyText": "yeah I take whatever I get in these cases :D", "author": "s1monw", "createdAt": "2020-04-22T12:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzI1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg3NzgyNw==", "url": "https://github.com/apache/lucene-solr/pull/1443#discussion_r412877827", "bodyText": "s/synched/sync'd?", "author": "mikemccand", "createdAt": "2020-04-22T10:51:28Z", "path": "lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java", "diffHunk": "@@ -633,6 +634,27 @@ protected synchronized MergeThread getMergeThread(IndexWriter writer, OneMerge m\n     return thread;\n   }\n \n+  synchronized void runOnMergeFinished(IndexWriter writer) {\n+    // the merge call as well as the merge thread handling in the finally\n+    // block must be synched on CMS otherwise stalling decisions might cause", "originalCommit": "a12873ff90fcc7e2735401c599e278ef092e5de1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e6fc926e5634d1f8ae2ca6b5eac5b958e60ee16d", "url": "https://github.com/apache/lucene-solr/commit/e6fc926e5634d1f8ae2ca6b5eac5b958e60ee16d", "message": "apply feedback and add changes.txt", "committedDate": "2020-04-22T12:13:55Z", "type": "commit"}]}