{"pr_number": 1482, "pr_title": "LUCENE-7822: CodecUtil#checkFooter should throw a CorruptIndexException as the main exception.", "pr_createdAt": "2020-05-04T07:42:37Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1482", "timeline": [{"oid": "09fdc87ead1f35a06ea4f00ebf846819d3268e1b", "url": "https://github.com/apache/lucene-solr/commit/09fdc87ead1f35a06ea4f00ebf846819d3268e1b", "message": "LUCENE-7822: CodecUtil#checkFooter should throw a CorruptIndexException as the main exception.", "committedDate": "2020-05-04T07:42:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNjQxMg==", "url": "https://github.com/apache/lucene-solr/pull/1482#discussion_r419406412", "bodyText": "Nitpick: ; instead of , since these are really two separate sentences?", "author": "mikemccand", "createdAt": "2020-05-04T12:43:05Z", "path": "lucene/core/src/java/org/apache/lucene/codecs/CodecUtil.java", "diffHunk": "@@ -448,24 +448,27 @@ public static void checkFooter(ChecksumIndexInput in, Throwable priorException)\n       checkFooter(in);\n     } else {\n       try {\n+        // If we have evidence of corruption then we return the corruption as the\n+        // main exception and the prior exception gets suppressed. Otherwise we\n+        // return the prior exception with a suppressed exception that notifies\n+        // the user that checksums matched.\n         long remaining = in.length() - in.getFilePointer();\n         if (remaining < footerLength()) {\n           // corruption caused us to read into the checksum footer already: we can't proceed\n-          priorException.addSuppressed(new CorruptIndexException(\"checksum status indeterminate: remaining=\" + remaining +\n-                                                                 \", please run checkindex for more details\", in));\n+          throw new CorruptIndexException(\"checksum status indeterminate: remaining=\" + remaining +\n+                                          \", please run checkindex for more details\", in);", "originalCommit": "09fdc87ead1f35a06ea4f00ebf846819d3268e1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNzg4OA==", "url": "https://github.com/apache/lucene-solr/pull/1482#discussion_r419407888", "bodyText": "Do we normally (in other places) also use CorruptIndexException to indicate a valid checksum?  I feel like we need a NotCorruptIndexException for this :)", "author": "mikemccand", "createdAt": "2020-05-04T12:45:26Z", "path": "lucene/core/src/java/org/apache/lucene/codecs/CodecUtil.java", "diffHunk": "@@ -448,24 +448,27 @@ public static void checkFooter(ChecksumIndexInput in, Throwable priorException)\n       checkFooter(in);\n     } else {\n       try {\n+        // If we have evidence of corruption then we return the corruption as the\n+        // main exception and the prior exception gets suppressed. Otherwise we\n+        // return the prior exception with a suppressed exception that notifies\n+        // the user that checksums matched.\n         long remaining = in.length() - in.getFilePointer();\n         if (remaining < footerLength()) {\n           // corruption caused us to read into the checksum footer already: we can't proceed\n-          priorException.addSuppressed(new CorruptIndexException(\"checksum status indeterminate: remaining=\" + remaining +\n-                                                                 \", please run checkindex for more details\", in));\n+          throw new CorruptIndexException(\"checksum status indeterminate: remaining=\" + remaining +\n+                                          \", please run checkindex for more details\", in);\n         } else {\n           // otherwise, skip any unread bytes.\n           in.skipBytes(remaining - footerLength());\n           \n           // now check the footer\n-          try {\n-            long checksum = checkFooter(in);\n-            priorException.addSuppressed(new CorruptIndexException(\"checksum passed (\" + Long.toHexString(checksum) + \n-                                                                   \"). possibly transient resource issue, or a Lucene or JVM bug\", in));\n-          } catch (CorruptIndexException t) {\n-            priorException.addSuppressed(t);\n-          }\n+          long checksum = checkFooter(in);\n+          priorException.addSuppressed(new CorruptIndexException(\"checksum passed (\" + Long.toHexString(checksum) +", "originalCommit": "09fdc87ead1f35a06ea4f00ebf846819d3268e1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMzMzY3NQ==", "url": "https://github.com/apache/lucene-solr/pull/1482#discussion_r421333675", "bodyText": "This case is interesting indeed, it could either be a Lucene bug or a silent corruption.", "author": "jpountz", "createdAt": "2020-05-07T08:34:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNzg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NzExNg==", "url": "https://github.com/apache/lucene-solr/pull/1482#discussion_r419467116", "bodyText": "no longer as suppressed", "author": "madrob", "createdAt": "2020-05-04T14:12:37Z", "path": "lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter.java", "diffHunk": "@@ -353,12 +352,10 @@ protected void corruptFile() throws IOException {\n \n       // This corruption made OfflineSorter fail with its own exception, but we verify it also went and added (as suppressed) that the", "originalCommit": "09fdc87ead1f35a06ea4f00ebf846819d3268e1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3da2cd5742a8e7fc4ef2638a6b30f1b696fb00ea", "url": "https://github.com/apache/lucene-solr/commit/3da2cd5742a8e7fc4ef2638a6b30f1b696fb00ea", "message": "iter", "committedDate": "2020-05-07T08:36:37Z", "type": "commit"}]}