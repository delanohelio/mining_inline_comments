{"pr_number": 1444, "pr_title": "LUCENE-9338: Clean up type safety in SimpleBindings", "pr_createdAt": "2020-04-22T11:47:00Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1444", "timeline": [{"oid": "66b4c54e0835c96fa2189d81e6611ba84c25eefd", "url": "https://github.com/apache/lucene-solr/commit/66b4c54e0835c96fa2189d81e6611ba84c25eefd", "message": "Clean up type safety in SimpleBindings", "committedDate": "2020-04-22T11:42:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0NzkwMw==", "url": "https://github.com/apache/lucene-solr/pull/1444#discussion_r412947903", "bodyText": "Hmm this is a pre-existing issues but catching stack overflows is usually a bad idea as it might leave objects in an inconsistent state. I wonder if it could be checked differently. Also is it ok to move the catch from validate() to here?", "author": "jpountz", "createdAt": "2020-04-22T12:43:21Z", "path": "lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource.java", "diffHunk": "@@ -42,13 +42,17 @@\n     this.expression = Objects.requireNonNull(expression);\n     variables = new DoubleValuesSource[expression.variables.length];\n     boolean needsScores = false;\n-    for (int i = 0; i < variables.length; i++) {\n-      DoubleValuesSource source = bindings.getDoubleValuesSource(expression.variables[i]);\n-      if (source == null) {\n-        throw new RuntimeException(\"Internal error. Variable (\" + expression.variables[i] + \") does not exist.\");\n+    try {\n+      for (int i = 0; i < variables.length; i++) {\n+        DoubleValuesSource source = bindings.getDoubleValuesSource(expression.variables[i]);\n+        if (source == null) {\n+          throw new RuntimeException(\"Internal error. Variable (\" + expression.variables[i] + \") does not exist.\");\n+        }\n+        needsScores |= source.needsScores();\n+        variables[i] = source;\n       }\n-      needsScores |= source.needsScores();\n-      variables[i] = source;\n+    } catch (StackOverflowError e) {", "originalCommit": "66b4c54e0835c96fa2189d81e6611ba84c25eefd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY3MDk3Nw==", "url": "https://github.com/apache/lucene-solr/pull/1444#discussion_r413670977", "bodyText": "I've reworked this so that instead of a Supplier<DoubleValuesSource> we store a Function<Bindings, DoubleValuesSource>, and supply a special Bindings implementation in validate() that checks for cycles.  Definitely much nicer, thanks for nudging me in the right direction!", "author": "romseygeek", "createdAt": "2020-04-23T09:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0NzkwMw=="}], "type": "inlineReview"}, {"oid": "423c9da6aa661e157c324c22b47cc3181abbfef9", "url": "https://github.com/apache/lucene-solr/commit/423c9da6aa661e157c324c22b47cc3181abbfef9", "message": "Improve cycle detection", "committedDate": "2020-04-23T09:39:25Z", "type": "commit"}, {"oid": "f4a935d2c5ca6e563aa17801b535891eb9d11bc9", "url": "https://github.com/apache/lucene-solr/commit/f4a935d2c5ca6e563aa17801b535891eb9d11bc9", "message": "Merge remote-tracking branch 'origin/master' into simplebindings", "committedDate": "2020-04-23T13:34:25Z", "type": "commit"}, {"oid": "f31cb0601615b147f1f980115216f0965b092287", "url": "https://github.com/apache/lucene-solr/commit/f31cb0601615b147f1f980115216f0965b092287", "message": "Detect recursion at more than one level", "committedDate": "2020-04-23T13:44:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwNzQ2Mg==", "url": "https://github.com/apache/lucene-solr/pull/1444#discussion_r413907462", "bodyText": "Have you considered returning the map, or an immutable view on it, so that callers can use this to enumerate all the dependencies? In a similar framework, I've found this to be pretty helpful for analyzing query patterns. It's also nice to know if the same name occurs multiple times in the dependency tree; maybe one should cache its value in that case.", "author": "msokolov", "createdAt": "2020-04-23T15:42:00Z", "path": "lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings.java", "diffHunk": "@@ -96,24 +90,51 @@ public DoubleValuesSource getDoubleValuesSource(String name) {\n       case SCORE:\n         return DoubleValuesSource.SCORES;\n       default:\n-        throw new UnsupportedOperationException(); \n+        throw new UnsupportedOperationException();\n     }\n   }\n   \n-  /** \n-   * Traverses the graph of bindings, checking there are no cycles or missing references \n-   * @throws IllegalArgumentException if the bindings is inconsistent \n+  @Override\n+  public DoubleValuesSource getDoubleValuesSource(String name) {\n+    if (map.containsKey(name) == false) {\n+      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n+    }\n+    return map.get(name).apply(this);\n+  }\n+\n+  /**\n+   * Traverses the graph of bindings, checking there are no cycles or missing references\n+   * @throws IllegalArgumentException if the bindings is inconsistent\n    */\n   public void validate() {", "originalCommit": "f31cb0601615b147f1f980115216f0965b092287", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkxMTc1Mw==", "url": "https://github.com/apache/lucene-solr/pull/1444#discussion_r413911753", "bodyText": "Cacheing is a whole other conversation, which I think is related to the stuff that @mkhludnev is working on around grouping (in that we could plausibly have multiple references to the same iterator all moving in lockstep, where at the moment we pull separate iterators for each reference).  But I think that's for a follow-up really, this issue is just a bit of refactoring to improve type safety.", "author": "romseygeek", "createdAt": "2020-04-23T15:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwNzQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkzMzAwNw==", "url": "https://github.com/apache/lucene-solr/pull/1444#discussion_r413933007", "bodyText": "Is containsKey boolean check more clear than get with a null check? I think the latter is going to be more efficient because it's only a single map operation, but I guess this way might be better for the JVM's escape analysis?", "author": "madrob", "createdAt": "2020-04-23T16:14:02Z", "path": "lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings.java", "diffHunk": "@@ -96,24 +90,51 @@ public DoubleValuesSource getDoubleValuesSource(String name) {\n       case SCORE:\n         return DoubleValuesSource.SCORES;\n       default:\n-        throw new UnsupportedOperationException(); \n+        throw new UnsupportedOperationException();\n     }\n   }\n   \n-  /** \n-   * Traverses the graph of bindings, checking there are no cycles or missing references \n-   * @throws IllegalArgumentException if the bindings is inconsistent \n+  @Override\n+  public DoubleValuesSource getDoubleValuesSource(String name) {\n+    if (map.containsKey(name) == false) {", "originalCommit": "f31cb0601615b147f1f980115216f0965b092287", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkzNjA3OA==", "url": "https://github.com/apache/lucene-solr/pull/1444#discussion_r413936078", "bodyText": "I'm pretty sure this won't be in the hot path - it's part of query setup, not query execution - and I think it reads more clearly.", "author": "romseygeek", "createdAt": "2020-04-23T16:18:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkzMzAwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1MDA5OQ==", "url": "https://github.com/apache/lucene-solr/pull/1444#discussion_r414350099", "bodyText": "nit: use entrySet() since you consume both keys and values?", "author": "jpountz", "createdAt": "2020-04-24T07:16:28Z", "path": "lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings.java", "diffHunk": "@@ -96,24 +90,51 @@ public DoubleValuesSource getDoubleValuesSource(String name) {\n       case SCORE:\n         return DoubleValuesSource.SCORES;\n       default:\n-        throw new UnsupportedOperationException(); \n+        throw new UnsupportedOperationException();\n     }\n   }\n   \n-  /** \n-   * Traverses the graph of bindings, checking there are no cycles or missing references \n-   * @throws IllegalArgumentException if the bindings is inconsistent \n+  @Override\n+  public DoubleValuesSource getDoubleValuesSource(String name) {\n+    if (map.containsKey(name) == false) {\n+      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n+    }\n+    return map.get(name).apply(this);\n+  }\n+\n+  /**\n+   * Traverses the graph of bindings, checking there are no cycles or missing references\n+   * @throws IllegalArgumentException if the bindings is inconsistent\n    */\n   public void validate() {\n-    for (Object o : map.values()) {\n-      if (o instanceof Expression) {\n-        Expression expr = (Expression) o;\n-        try {\n-          expr.getDoubleValuesSource(this);\n-        } catch (StackOverflowError e) {\n-          throw new IllegalArgumentException(\"Recursion Error: Cycle detected originating in (\" + expr.sourceText + \")\");\n-        }\n+    for (String origin : map.keySet()) {", "originalCommit": "f31cb0601615b147f1f980115216f0965b092287", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1MzQ0MQ==", "url": "https://github.com/apache/lucene-solr/pull/1444#discussion_r414353441", "bodyText": "I provided this test but I don't think we should add it as it relies on iteration order and might get defeated on some JVMs or future versions of Java. I'd suggest to not add this test, or to change the map in SimpleBindings from a HashMap to a TreeMap to be able to better test such cases (in which case we'd have to swap cycle0/cycle2), this could be done in a follow-up too.", "author": "jpountz", "createdAt": "2020-04-24T07:22:40Z", "path": "lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionValidation.java", "diffHunk": "@@ -110,4 +110,15 @@ public void testCoRecursion4() throws Exception {\n     });\n     assertTrue(expected.getMessage().contains(\"Cycle detected\"));\n   }\n+\n+  public void testCoRecursion42() throws Exception {", "originalCommit": "f31cb0601615b147f1f980115216f0965b092287", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8823281fec0c55fe35dd57938d731fb3cbdaaa4c", "url": "https://github.com/apache/lucene-solr/commit/8823281fec0c55fe35dd57938d731fb3cbdaaa4c", "message": "feedback, changes", "committedDate": "2020-04-24T09:05:39Z", "type": "commit"}]}