{"pr_number": 2023, "pr_title": "LUCENE-9319: Clean up package name conflicts for sandbox module", "pr_createdAt": "2020-10-24T09:33:40Z", "pr_url": "https://github.com/apache/lucene-solr/pull/2023", "timeline": [{"oid": "ba2820f309533f5020d4a4ffb8192c31219dbcb1", "url": "https://github.com/apache/lucene-solr/commit/ba2820f309533f5020d4a4ffb8192c31219dbcb1", "message": "move o.a.l.codecs to o.a.l.sandobox.codecs", "committedDate": "2020-10-24T07:30:51Z", "type": "commit"}, {"oid": "070b915da2906f4201628d4059679b9b59248a19", "url": "https://github.com/apache/lucene-solr/commit/070b915da2906f4201628d4059679b9b59248a19", "message": "move o.a.l.document to o.a.l.sandbox.document; relax visibility of o.a.l.RangeFieldQuery", "committedDate": "2020-10-24T08:08:51Z", "type": "commit"}, {"oid": "ef874af04658b03b26ba27afe98b7b36c2617935", "url": "https://github.com/apache/lucene-solr/commit/ef874af04658b03b26ba27afe98b7b36c2617935", "message": "move o.a.l.search to o.a.l.sandbox.search; relax classes/methods visibility in the core module", "committedDate": "2020-10-24T09:12:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2NDg5Mw==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511364893", "bodyText": "This is used in o.a.l.sandbox.document.LatLonBoundingBox.", "author": "mocobeta", "createdAt": "2020-10-24T09:37:22Z", "path": "lucene/core/src/java/org/apache/lucene/document/RangeFieldQuery.java", "diffHunk": "@@ -41,7 +41,7 @@\n /**\n  * Query class for searching {@code RangeField} types by a defined {@link Relation}.\n  */\n-abstract class RangeFieldQuery extends Query {\n+public abstract class RangeFieldQuery extends Query {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2NTYyOA==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511365628", "bodyText": "This is used in o.a.l.sandbox.document.LatLonBoundingBox.", "author": "mocobeta", "createdAt": "2020-10-24T09:39:14Z", "path": "lucene/core/src/java/org/apache/lucene/document/RangeFieldQuery.java", "diffHunk": "@@ -57,7 +57,7 @@\n   final int bytesPerDim;\n \n   /** Used by {@code RangeFieldQuery} to check how each internal or leaf node relates to the query. */\n-  enum QueryType {\n+  public enum QueryType {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2NzM4MQ==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511367381", "bodyText": "This is used in o.a.l.sandbox.document.LatLonBoundingBox.", "author": "mocobeta", "createdAt": "2020-10-24T09:43:07Z", "path": "lucene/core/src/java/org/apache/lucene/document/RangeFieldQuery.java", "diffHunk": "@@ -228,7 +228,7 @@ boolean matches(byte[] queryPackedValue, byte[] packedValue, int numDims, int by\n    * @param ranges encoded range values; this is done by the {@code RangeField} implementation\n    * @param queryType the query relation\n    */\n-  RangeFieldQuery(String field, final byte[] ranges, final int numDims, final QueryType queryType) {\n+  protected RangeFieldQuery(String field, final byte[] ranges, final int numDims, final QueryType queryType) {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2Nzk3Mg==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511367972", "bodyText": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "author": "mocobeta", "createdAt": "2020-10-24T09:44:42Z", "path": "lucene/core/src/java/org/apache/lucene/search/ExactPhraseMatcher.java", "diffHunk": "@@ -33,7 +33,8 @@\n import org.apache.lucene.search.similarities.Similarity.SimScorer;\n import org.apache.lucene.util.PriorityQueue;\n \n-final class ExactPhraseMatcher extends PhraseMatcher {\n+/** Expert: Find exact phrases */\n+public final class ExactPhraseMatcher extends PhraseMatcher {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2ODE1MQ==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511368151", "bodyText": "Same avobe.", "author": "mocobeta", "createdAt": "2020-10-24T09:45:19Z", "path": "lucene/core/src/java/org/apache/lucene/search/ExactPhraseMatcher.java", "diffHunk": "@@ -50,7 +51,8 @@ public PostingsAndPosition(PostingsEnum postings, int offset) {\n   private final DocIdSetIterator approximation;\n   private final ImpactsDISI impactsApproximation;\n \n-  ExactPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, ScoreMode scoreMode, SimScorer scorer, float matchCost) {\n+  /** Expert: Creates ExactPhraseMatcher instance */\n+  public ExactPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, ScoreMode scoreMode, SimScorer scorer, float matchCost) {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2ODYyNQ==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511368625", "bodyText": "This is used in o.a.l.sandbox.search.LargeNumHitsTopDocsCollector.", "author": "mocobeta", "createdAt": "2020-10-24T09:46:31Z", "path": "lucene/core/src/java/org/apache/lucene/search/HitQueue.java", "diffHunk": "@@ -19,7 +19,8 @@\n \n import org.apache.lucene.util.PriorityQueue;\n \n-final class HitQueue extends PriorityQueue<ScoreDoc> {\n+/** Expert: Priority queue containing hit docs */\n+public final class HitQueue extends PriorityQueue<ScoreDoc> {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2ODY4OA==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511368688", "bodyText": "Same above.", "author": "mocobeta", "createdAt": "2020-10-24T09:46:40Z", "path": "lucene/core/src/java/org/apache/lucene/search/HitQueue.java", "diffHunk": "@@ -59,7 +60,7 @@\n    * @param prePopulate\n    *          specifies whether to pre-populate the queue with sentinel values.\n    */\n-  HitQueue(int size, boolean prePopulate) {\n+  public HitQueue(int size, boolean prePopulate) {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2OTM5Mg==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511369392", "bodyText": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "author": "mocobeta", "createdAt": "2020-10-24T09:48:24Z", "path": "lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java", "diffHunk": "@@ -410,7 +410,7 @@ private boolean termArraysEquals(Term[][] termArrays1, Term[][] termArrays2) {\n    * <p>\n    * Note: positions are merged during freq()\n    */\n-  static class UnionPostingsEnum extends PostingsEnum {\n+  public static class UnionPostingsEnum extends PostingsEnum {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2OTQ2MQ==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511369461", "bodyText": "Same avobe.", "author": "mocobeta", "createdAt": "2020-10-24T09:48:34Z", "path": "lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java", "diffHunk": "@@ -423,7 +423,7 @@ private boolean termArraysEquals(Term[][] termArrays1, Term[][] termArrays2) {\n     /** list of subs (unordered) */\n     final PostingsEnum[] subs;\n \n-    UnionPostingsEnum(Collection<PostingsEnum> subs) {\n+    public UnionPostingsEnum(Collection<PostingsEnum> subs) {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2OTc3MA==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511369770", "bodyText": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "author": "mocobeta", "createdAt": "2020-10-24T09:49:25Z", "path": "lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java", "diffHunk": "@@ -575,17 +575,17 @@ private void growArray() {\n     }\n   }\n \n-  // Slower version of UnionPostingsEnum that delegates offsets and positions, for\n-  // use by MatchesIterator\n-  static class UnionFullPostingsEnum extends UnionPostingsEnum {\n+  /** Slower version of UnionPostingsEnum that delegates offsets and positions, for\n+   use by MatchesIterator */\n+  public static class UnionFullPostingsEnum extends UnionPostingsEnum {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2OTgzNw==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511369837", "bodyText": "Same above.", "author": "mocobeta", "createdAt": "2020-10-24T09:49:33Z", "path": "lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java", "diffHunk": "@@ -575,17 +575,17 @@ private void growArray() {\n     }\n   }\n \n-  // Slower version of UnionPostingsEnum that delegates offsets and positions, for\n-  // use by MatchesIterator\n-  static class UnionFullPostingsEnum extends UnionPostingsEnum {\n+  /** Slower version of UnionPostingsEnum that delegates offsets and positions, for\n+   use by MatchesIterator */\n+  public static class UnionFullPostingsEnum extends UnionPostingsEnum {\n \n     int freq = -1;\n     boolean started = false;\n \n     final PriorityQueue<PostingsAndPosition> posQueue;\n     final Collection<PostingsAndPosition> subs;\n \n-    UnionFullPostingsEnum(List<PostingsEnum> subs) {\n+    public UnionFullPostingsEnum(List<PostingsEnum> subs) {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MDEwMQ==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511370101", "bodyText": "This is used in o.a.l.sandbox.search.CoveringQuery.", "author": "mocobeta", "createdAt": "2020-10-24T09:50:29Z", "path": "lucene/core/src/java/org/apache/lucene/search/Multiset.java", "diffHunk": "@@ -29,13 +29,13 @@\n  * Iteration order is not specified.\n  * @lucene.internal\n  */\n-final class Multiset<T> extends AbstractCollection<T> {\n+public final class Multiset<T> extends AbstractCollection<T> {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MDE1Mw==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511370153", "bodyText": "Same above.", "author": "mocobeta", "createdAt": "2020-10-24T09:50:37Z", "path": "lucene/core/src/java/org/apache/lucene/search/Multiset.java", "diffHunk": "@@ -29,13 +29,13 @@\n  * Iteration order is not specified.\n  * @lucene.internal\n  */\n-final class Multiset<T> extends AbstractCollection<T> {\n+public final class Multiset<T> extends AbstractCollection<T> {\n \n   private final Map<T, Integer> map = new HashMap<>();\n   private int size;\n \n   /** Create an empty {@link Multiset}. */\n-  Multiset() {\n+  public Multiset() {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MDcwNw==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511370707", "bodyText": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "author": "mocobeta", "createdAt": "2020-10-24T09:52:01Z", "path": "lucene/core/src/java/org/apache/lucene/search/PhraseMatcher.java", "diffHunk": "@@ -26,7 +26,7 @@\n  * relevant document, then call {@link #reset()}.  Clients can then call\n  * {@link #nextMatch()} to iterate over the matches\n  */\n-abstract class PhraseMatcher {\n+public abstract class PhraseMatcher {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MTAyOA==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511371028", "bodyText": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "author": "mocobeta", "createdAt": "2020-10-24T09:53:03Z", "path": "lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java", "diffHunk": "@@ -304,13 +304,15 @@ public void visit(QueryVisitor visitor) {\n     v.consumeTerms(this, terms);\n   }\n \n-  static class PostingsAndFreq implements Comparable<PostingsAndFreq> {\n+  /** Term postings and position information for phrase matching */\n+  public static class PostingsAndFreq implements Comparable<PostingsAndFreq> {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MTQxMA==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511371410", "bodyText": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "author": "mocobeta", "createdAt": "2020-10-24T09:54:05Z", "path": "lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java", "diffHunk": "@@ -413,7 +415,7 @@ public boolean equals(Object obj) {\n    *  This is for use by {@link TwoPhaseIterator#matchCost} implementations.\n    *  @param termsEnum The term is the term at which this TermsEnum is positioned.\n    */\n-  static float termPositionsCost(TermsEnum termsEnum) throws IOException {\n+  public static float termPositionsCost(TermsEnum termsEnum) throws IOException {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MTc3Nw==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511371777", "bodyText": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "author": "mocobeta", "createdAt": "2020-10-24T09:54:54Z", "path": "lucene/core/src/java/org/apache/lucene/search/PhraseWeight.java", "diffHunk": "@@ -23,13 +23,15 @@\n import org.apache.lucene.search.similarities.Similarity;\n import org.apache.lucene.search.similarities.Similarity.SimScorer;\n \n-abstract class PhraseWeight extends Weight {\n+/** Expert: Weight class for phrase matching */\n+public abstract class PhraseWeight extends Weight {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MjE2MA==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511372160", "bodyText": "This is used in o.a.l.sandbox.search.PhraseWildcardQuery.", "author": "mocobeta", "createdAt": "2020-10-24T09:55:59Z", "path": "lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher.java", "diffHunk": "@@ -53,7 +53,7 @@\n  * would get same score as \"g f\"~2, although \"c b\"~2 could be matched twice.\n  * We may want to fix this in the future (currently not, for performance reasons).\n  */\n-final class SloppyPhraseMatcher extends PhraseMatcher {\n+public final class SloppyPhraseMatcher extends PhraseMatcher {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MjUyOA==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511372528", "bodyText": "Same above.", "author": "mocobeta", "createdAt": "2020-10-24T09:57:00Z", "path": "lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher.java", "diffHunk": "@@ -81,7 +81,7 @@\n   private boolean positioned;\n   private int matchLength;\n \n-  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, ScoreMode scoreMode, SimScorer scorer, float matchCost, boolean captureLeadMatch) {\n+  public SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, ScoreMode scoreMode, SimScorer scorer, float matchCost, boolean captureLeadMatch) {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MjgxNg==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511372816", "bodyText": "This is used in o.a.l.sandbox.search.BM25FQuery.", "author": "mocobeta", "createdAt": "2020-10-24T09:57:52Z", "path": "lucene/core/src/java/org/apache/lucene/search/TermScorer.java", "diffHunk": "@@ -25,7 +25,7 @@\n \n /** Expert: A <code>Scorer</code> for documents matching a <code>Term</code>.\n  */\n-final class TermScorer extends Scorer {\n+public final class TermScorer extends Scorer {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MzE2MQ==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511373161", "bodyText": "Same above.", "author": "mocobeta", "createdAt": "2020-10-24T09:58:52Z", "path": "lucene/core/src/java/org/apache/lucene/search/TermScorer.java", "diffHunk": "@@ -35,7 +35,7 @@\n   /**\n    * Construct a {@link TermScorer} that will iterate all documents.\n    */\n-  TermScorer(Weight weight, PostingsEnum postingsEnum, LeafSimScorer docScorer) {\n+  public TermScorer(Weight weight, PostingsEnum postingsEnum, LeafSimScorer docScorer) {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3MzQzNw==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511373437", "bodyText": "Same above.", "author": "mocobeta", "createdAt": "2020-10-24T09:59:37Z", "path": "lucene/core/src/java/org/apache/lucene/search/TermScorer.java", "diffHunk": "@@ -60,7 +60,8 @@ public int docID() {\n     return postingsEnum.docID();\n   }\n \n-  final int freq() throws IOException {\n+  /** Returns term frequency in the current document. */\n+  public final int freq() throws IOException {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3Mzg3NA==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511373874", "bodyText": "This is used in o.a.l.sandbox.search.LargeNumHitsTopDocsCollector.", "author": "mocobeta", "createdAt": "2020-10-24T10:00:56Z", "path": "lucene/core/src/java/org/apache/lucene/search/TopDocsCollector.java", "diffHunk": "@@ -35,7 +35,7 @@\n \n   /** This is used in case topDocs() is called with illegal parameters, or there\n    *  simply aren't (enough) results. */\n-  protected static final TopDocs EMPTY_TOPDOCS = new TopDocs(new TotalHits(0, TotalHits.Relation.EQUAL_TO), new ScoreDoc[0]);\n+  public static final TopDocs EMPTY_TOPDOCS = new TopDocs(new TotalHits(0, TotalHits.Relation.EQUAL_TO), new ScoreDoc[0]);", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3NDI2MQ==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511374261", "bodyText": "This is used in o.a.l.sandbox.search.LargeNumHitsTopDocsCollector.", "author": "mocobeta", "createdAt": "2020-10-24T10:02:08Z", "path": "lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector.java", "diffHunk": "@@ -38,9 +38,10 @@\n  */\n public abstract class TopScoreDocCollector extends TopDocsCollector<ScoreDoc> {\n \n-  abstract static class ScorerLeafCollector implements LeafCollector {\n+  /** Scorable leaf collector */\n+  public abstract static class ScorerLeafCollector implements LeafCollector {", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM3NDMxOQ==", "url": "https://github.com/apache/lucene-solr/pull/2023#discussion_r511374319", "bodyText": "Same above.", "author": "mocobeta", "createdAt": "2020-10-24T10:02:18Z", "path": "lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector.java", "diffHunk": "@@ -38,9 +38,10 @@\n  */\n public abstract class TopScoreDocCollector extends TopDocsCollector<ScoreDoc> {\n \n-  abstract static class ScorerLeafCollector implements LeafCollector {\n+  /** Scorable leaf collector */\n+  public abstract static class ScorerLeafCollector implements LeafCollector {\n \n-    Scorable scorer;\n+    protected Scorable scorer;", "originalCommit": "ef874af04658b03b26ba27afe98b7b36c2617935", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fa91304904ba370f9022ce30eb1e9a179a70e6c3", "url": "https://github.com/apache/lucene-solr/commit/fa91304904ba370f9022ce30eb1e9a179a70e6c3", "message": "CoveringScorer can be package private.", "committedDate": "2020-10-24T10:04:43Z", "type": "commit"}, {"oid": "cd0773ea4357c1ebf4bb03e464c1b0603913dff9", "url": "https://github.com/apache/lucene-solr/commit/cd0773ea4357c1ebf4bb03e464c1b0603913dff9", "message": "MultiNormsLeafScorer can be package private.", "committedDate": "2020-10-24T10:07:03Z", "type": "commit"}, {"oid": "06dade2bb0c21dfe3bb2a0e7a19550ae5b3ba3f0", "url": "https://github.com/apache/lucene-solr/commit/06dade2bb0c21dfe3bb2a0e7a19550ae5b3ba3f0", "message": "add lucene.internal doclet tag to classes that are made publicly accessible.", "committedDate": "2020-10-31T14:51:18Z", "type": "commit"}, {"oid": "204ada96a63566591f5ab8d9fdcc4e44462f64d3", "url": "https://github.com/apache/lucene-solr/commit/204ada96a63566591f5ab8d9fdcc4e44462f64d3", "message": "Add CHANGES and MIGRATE entries", "committedDate": "2020-11-03T02:41:12Z", "type": "commit"}, {"oid": "91e12fa9d7ecfa985a3038dedf916c720294fdea", "url": "https://github.com/apache/lucene-solr/commit/91e12fa9d7ecfa985a3038dedf916c720294fdea", "message": "Merge branch 'master' into jira/LUCENE-9319", "committedDate": "2020-11-03T02:43:53Z", "type": "commit"}]}