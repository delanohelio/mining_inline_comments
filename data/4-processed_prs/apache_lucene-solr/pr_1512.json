{"pr_number": 1512, "pr_title": "SOLR-13325: Add a collection selector to ComputePlanAction", "pr_createdAt": "2020-05-12T05:13:39Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1512", "timeline": [{"oid": "330b76c8bad446fc7aa2df2a3227a132bf937655", "url": "https://github.com/apache/lucene-solr/commit/330b76c8bad446fc7aa2df2a3227a132bf937655", "message": "SOLR-13325: Add a collection selector to ComputePlanAction", "committedDate": "2020-05-12T04:26:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NTIwOQ==", "url": "https://github.com/apache/lucene-solr/pull/1512#discussion_r423495209", "bodyText": "It's a very terse description of a new powerful feature... IMHO at least it should mention that all other collection properties are supported, the property value must be equal, the implicit AND is used when multiple props are specified, and perhaps it should give some other examples.", "author": "sigram", "createdAt": "2020-05-12T06:39:58Z", "path": "solr/solr-ref-guide/src/solrcloud-autoscaling-trigger-actions.adoc", "diffHunk": "@@ -29,12 +29,13 @@ commands which can re-balance the cluster in response to trigger events.\n The following parameters are configurable:\n \n `collections`::\n-A comma-separated list of collection names. If this list is not empty then\n-the computed operations will only calculate collection operations that affect\n-listed collections and ignore any other collection operations for collections\n+A comma-separated list of collection names. This can also be a selector on the collection property e.g. `collections: {'policy': 'my_custom_policy'}` will match all collections which use the policy named `my_customer_policy`.", "originalCommit": "330b76c8bad446fc7aa2df2a3227a132bf937655", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzNzg5Mg==", "url": "https://github.com/apache/lucene-solr/pull/1512#discussion_r426437892", "bodyText": "Thanks. I expanded the description a bit. I added another example that I am not really happy with -- I cannot think of a use-case where something other than policy might be useful especially given the fact that values must match exactly. Suggestions welcome.", "author": "shalinmangar", "createdAt": "2020-05-18T08:02:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NTIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAwNTk2Ng==", "url": "https://github.com/apache/lucene-solr/pull/1512#discussion_r428005966", "bodyText": "There's a typo (name mismatch) in the policy name in the doc - 'my_custom_policy' vs. 'my_customER_policy'.\nOne other possible property that comes to my mind would be 'router' to separate collections with TRA / CRA .. but in this case the collection could equally well be set up with its own policy - so for now maybe there's no other property that makes sense. :)", "author": "sigram", "createdAt": "2020-05-20T13:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NTIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MjUyMg==", "url": "https://github.com/apache/lucene-solr/pull/1512#discussion_r429042522", "bodyText": "Thanks. I had reworded the description so the my_custom_policy and my_customer_policy are both replaced with my_policy everywhere. I'll keep the example here because it conveys how to use more than one key/value pair.", "author": "shalinmangar", "createdAt": "2020-05-22T04:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NTIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5NjEyNA==", "url": "https://github.com/apache/lucene-solr/pull/1512#discussion_r423496124", "bodyText": "This is indeed a nice cleanup!", "author": "sigram", "createdAt": "2020-05-12T06:42:06Z", "path": "solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction.java", "diffHunk": "@@ -18,46 +18,23 @@\n package org.apache.solr.cloud.autoscaling;\n \n \n-import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n \n-import org.apache.solr.client.solrj.cloud.autoscaling.NoneSuggester;\n-import org.apache.solr.client.solrj.cloud.autoscaling.Policy;\n import org.apache.solr.client.solrj.cloud.SolrCloudManager;\n-import org.apache.solr.client.solrj.cloud.autoscaling.Suggester;\n-import org.apache.solr.client.solrj.impl.ClusterStateProvider;\n-import org.apache.solr.common.SolrException;\n-import org.apache.solr.common.cloud.ClusterState;\n-import org.apache.solr.common.cloud.DocCollection;\n-import org.apache.solr.common.cloud.ZkStateReader;\n+import org.apache.solr.core.SolrResourceLoader;\n \n+import static org.apache.solr.common.cloud.ZkStateReader.AUTO_ADD_REPLICAS;\n+\n+/**\n+ * This class configures the parent ComputePlanAction to compute plan\n+ * only for collections which have autoAddReplicas=true.\n+ */\n public class AutoAddReplicasPlanAction extends ComputePlanAction {\n \n   @Override\n-  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) throws IOException {\n-    // for backward compatibility\n-    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n-    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n-    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n-      return NoneSuggester.get(session);\n-    }\n-\n-    Suggester suggester = super.getSuggester(session, event, context, cloudManager);\n-    ClusterState clusterState;\n-    try {\n-      clusterState = stateProvider.getClusterState();\n-    } catch (IOException e) {\n-      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n-    }\n-\n-    boolean anyCollections = false;\n-    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n-      if (collection.getAutoAddReplicas()) {\n-        anyCollections = true;\n-        suggester.hint(Suggester.Hint.COLL, collection.getName());\n-      }\n-    }\n-\n-    if (!anyCollections) return NoneSuggester.get(session);\n-    return suggester;\n+  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n+    properties.put(\"collections\", Collections.singletonMap(AUTO_ADD_REPLICAS, \"true\"));\n+    super.configure(loader, cloudManager, properties);", "originalCommit": "330b76c8bad446fc7aa2df2a3227a132bf937655", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5OTA0Mw==", "url": "https://github.com/apache/lucene-solr/pull/1512#discussion_r423499043", "bodyText": "IIRC using wildcard imports was frowned upon?", "author": "sigram", "createdAt": "2020-05-12T06:48:33Z", "path": "solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction.java", "diffHunk": "@@ -17,38 +17,28 @@\n \n package org.apache.solr.cloud.autoscaling;\n \n-import java.io.IOException;\n-import java.lang.invoke.MethodHandles;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n import org.apache.solr.client.solrj.SolrRequest;\n import org.apache.solr.client.solrj.cloud.SolrCloudManager;\n-import org.apache.solr.client.solrj.cloud.autoscaling.AutoScalingConfig;\n-import org.apache.solr.client.solrj.cloud.autoscaling.NoneSuggester;\n-import org.apache.solr.client.solrj.cloud.autoscaling.Policy;\n-import org.apache.solr.client.solrj.cloud.autoscaling.PolicyHelper;\n-import org.apache.solr.client.solrj.cloud.autoscaling.Suggester;\n-import org.apache.solr.client.solrj.cloud.autoscaling.UnsupportedSuggester;\n+import org.apache.solr.client.solrj.cloud.autoscaling.*;\n import org.apache.solr.common.SolrException;\n import org.apache.solr.common.cloud.ClusterState;\n import org.apache.solr.common.cloud.DocCollection;\n import org.apache.solr.common.cloud.Replica;\n import org.apache.solr.common.params.AutoScalingParams;\n import org.apache.solr.common.params.CollectionParams;\n-import org.apache.solr.common.params.CoreAdminParams;\n import org.apache.solr.common.util.Pair;\n import org.apache.solr.common.util.StrUtils;\n import org.apache.solr.core.SolrResourceLoader;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.util.*;", "originalCommit": "330b76c8bad446fc7aa2df2a3227a132bf937655", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzODM1MA==", "url": "https://github.com/apache/lucene-solr/pull/1512#discussion_r426438350", "bodyText": "I just imported the project in idea using the gradle scripts. precommit also seems happy. I don't recall a rule about wildcards import?", "author": "shalinmangar", "createdAt": "2020-05-18T08:03:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5OTA0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxMTI2MQ==", "url": "https://github.com/apache/lucene-solr/pull/1512#discussion_r428011261", "bodyText": "Right, there's no formal rule. I checked the expanded list of imports here - indeed it's very long.", "author": "sigram", "createdAt": "2020-05-20T13:30:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ5OTA0Mw=="}], "type": "inlineReview"}, {"oid": "d6f64bd8de960a7ad7d27b4b6ea829e7b884fcc1", "url": "https://github.com/apache/lucene-solr/commit/d6f64bd8de960a7ad7d27b4b6ea829e7b884fcc1", "message": "SOLR-13325: Expanded the description of the new feature to include the fact that values must match exactly and all properties must match. Added an example with multiple properties.", "committedDate": "2020-05-18T08:01:11Z", "type": "commit"}, {"oid": "8c399d5a2734e8d6c5d25d01239280ac07fabe05", "url": "https://github.com/apache/lucene-solr/commit/8c399d5a2734e8d6c5d25d01239280ac07fabe05", "message": "Merge branch 'master' into jira/solr-13325", "committedDate": "2020-05-22T04:59:07Z", "type": "commit"}, {"oid": "b898159655b31741ad3753e90b1fde031ac04fc4", "url": "https://github.com/apache/lucene-solr/commit/b898159655b31741ad3753e90b1fde031ac04fc4", "message": "SOLR-13325: Add entry to CHANGES.txt", "committedDate": "2020-05-22T05:03:41Z", "type": "commit"}]}