{"pr_number": 1842, "pr_title": "LUCENE-9512: Move LockFactory stress test to be a unit/integration test", "pr_createdAt": "2020-09-08T17:23:53Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1842", "timeline": [{"oid": "06bb8990d13e1c00254dce6d885af6f1732682c8", "url": "https://github.com/apache/lucene-solr/commit/06bb8990d13e1c00254dce6d885af6f1732682c8", "message": "LUCENE-9512: Move LockFactory stress test to be a unit/integration test", "committedDate": "2020-09-08T17:19:59Z", "type": "commit"}, {"oid": "a7de6b445e6de1cf527de7e2d7c082a8ee350857", "url": "https://github.com/apache/lucene-solr/commit/a7de6b445e6de1cf527de7e2d7c082a8ee350857", "message": "Add @SuppressForbidden, because ProcessBuilder only allows java.io.File", "committedDate": "2020-09-08T17:38:47Z", "type": "commit"}, {"oid": "e3a0dbb462707f907362aed76a5a45a738a40f54", "url": "https://github.com/apache/lucene-solr/commit/e3a0dbb462707f907362aed76a5a45a738a40f54", "message": "Actually output by childs is no longer counted", "committedDate": "2020-09-08T17:40:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNTYyMQ==", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485115621", "bodyText": "1 second may not be enough on heavy loaded machines?", "author": "dweiss", "createdAt": "2020-09-08T18:28:17Z", "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.store;\n+\n+import java.lang.ProcessBuilder.Redirect;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.NamedThreadFactory;\n+import org.apache.lucene.util.SuppressForbidden;\n+\n+public class TestLockFactoriesMultiJVM extends LuceneTestCase {\n+  \n+  @SuppressForbidden(reason = \"ProcessBuilder only allows to redirect to java.io.File\")\n+  private static final ProcessBuilder applyRedirection(ProcessBuilder pb, int client, Path dir) {\n+    if (LuceneTestCase.VERBOSE) {\n+      return pb.inheritIO();\n+    } else {\n+      return pb\n+        .redirectError(dir.resolve(\"err-\" + client + \".txt\").toFile())\n+        .redirectOutput(dir.resolve(\"out-\" + client + \".txt\").toFile())\n+        .redirectInput(Redirect.INHERIT);\n+    }\n+  }\n+  \n+  private void runImpl(Class<? extends LockFactory> impl) throws Exception {\n+    // make sure we are in clean state:\n+    LockVerifyServer.PORT.set(-1);\n+    \n+    final int clients = 2;\n+    final String host = \"127.0.0.1\";\n+    final int delay = 1;\n+    final int rounds = (LuceneTestCase.TEST_NIGHTLY ? 30000 : 500) * LuceneTestCase.RANDOM_MULTIPLIER;\n+    \n+    final Path dir = LuceneTestCase.createTempDir(impl.getSimpleName());\n+    \n+    // create the LockVerifyServer in a separate thread\n+    final ExecutorService pool = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"lockfactory-tester-\"));\n+    try {\n+      pool.submit(() -> {\n+        LockVerifyServer.main(host, Integer.toString(clients));\n+        return (Void) null;\n+      });\n+      \n+      // wait for it to boot up\n+      int port;\n+      while ((port = LockVerifyServer.PORT.get()) == -1) {\n+        Thread.sleep(100L);\n+      }\n+      \n+      // spawn clients as separate Java processes\n+      final List<Process> processes = new ArrayList<>();\n+      for (int i = 0; i < clients; i++) {\n+        processes.add(applyRedirection(new ProcessBuilder(\n+            Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n+            \"-cp\",\n+            System.getProperty(\"java.class.path\"),\n+            LockStressTest.class.getName(),\n+            Integer.toString(i),\n+            host,\n+            Integer.toString(port),\n+            impl.getName(),\n+            dir.toString(),\n+            Integer.toString(delay),\n+            Integer.toString(rounds)\n+          ), i, dir).start());\n+      }\n+      \n+      // wait for all processes to exit\n+      int exited = 0;\n+      while (exited < clients) {\n+        for (Process p : processes) {\n+          if (p.waitFor(1, TimeUnit.SECONDS)) {", "originalCommit": "e3a0dbb462707f907362aed76a5a45a738a40f54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzNjc5NQ==", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485136795", "bodyText": "this is inside a loop though: so it will effectively wait forever?", "author": "rmuir", "createdAt": "2020-09-08T19:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNTYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE1MjE1Mg==", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485152152", "bodyText": "Ah, correct. A completable future wait-for would be more elegant here I think but fine as it is too.", "author": "dweiss", "createdAt": "2020-09-08T19:37:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNTYyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNjAzNA==", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485116034", "bodyText": "This property wouldn't be needed if you forked the \"server: side as well as clients... :)", "author": "dweiss", "createdAt": "2020-09-08T18:28:59Z", "path": "gradle/testing/randomization/policies/tests.policy", "diffHunk": "@@ -64,6 +64,9 @@ grant {\n   permission java.lang.RuntimePermission \"getClassLoader\";\n   permission java.lang.RuntimePermission \"setContextClassLoader\";\n \n+  // TestLockFactoriesMultiJVM opens a random port on 127.0.0.1 (port 0 = ephemeral port range):", "originalCommit": "e3a0dbb462707f907362aed76a5a45a738a40f54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2OTIxMw==", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485169213", "bodyText": "This does not work, as there needs to be a communication, so the test knows when to start the clients. This was not different in Ant (the main process was running fork=false, the clients fork=true)\nI don't want to start any other processes. I think @rmuir is fine with this addition of SocketPermission", "author": "uschindler", "createdAt": "2020-09-08T20:11:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNjAzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNjU2Mg==", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485116562", "bodyText": "Does it make sense to limit the default heap of these subprocesses here?", "author": "dweiss", "createdAt": "2020-09-08T18:29:56Z", "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.store;\n+\n+import java.lang.ProcessBuilder.Redirect;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.NamedThreadFactory;\n+import org.apache.lucene.util.SuppressForbidden;\n+\n+public class TestLockFactoriesMultiJVM extends LuceneTestCase {\n+  \n+  @SuppressForbidden(reason = \"ProcessBuilder only allows to redirect to java.io.File\")\n+  private static final ProcessBuilder applyRedirection(ProcessBuilder pb, int client, Path dir) {\n+    if (LuceneTestCase.VERBOSE) {\n+      return pb.inheritIO();\n+    } else {\n+      return pb\n+        .redirectError(dir.resolve(\"err-\" + client + \".txt\").toFile())\n+        .redirectOutput(dir.resolve(\"out-\" + client + \".txt\").toFile())\n+        .redirectInput(Redirect.INHERIT);\n+    }\n+  }\n+  \n+  private void runImpl(Class<? extends LockFactory> impl) throws Exception {\n+    // make sure we are in clean state:\n+    LockVerifyServer.PORT.set(-1);\n+    \n+    final int clients = 2;\n+    final String host = \"127.0.0.1\";\n+    final int delay = 1;\n+    final int rounds = (LuceneTestCase.TEST_NIGHTLY ? 30000 : 500) * LuceneTestCase.RANDOM_MULTIPLIER;\n+    \n+    final Path dir = LuceneTestCase.createTempDir(impl.getSimpleName());\n+    \n+    // create the LockVerifyServer in a separate thread\n+    final ExecutorService pool = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"lockfactory-tester-\"));\n+    try {\n+      pool.submit(() -> {\n+        LockVerifyServer.main(host, Integer.toString(clients));\n+        return (Void) null;\n+      });\n+      \n+      // wait for it to boot up\n+      int port;\n+      while ((port = LockVerifyServer.PORT.get()) == -1) {\n+        Thread.sleep(100L);\n+      }\n+      \n+      // spawn clients as separate Java processes\n+      final List<Process> processes = new ArrayList<>();\n+      for (int i = 0; i < clients; i++) {\n+        processes.add(applyRedirection(new ProcessBuilder(\n+            Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),", "originalCommit": "e3a0dbb462707f907362aed76a5a45a738a40f54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2OTQ0OA==", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485169448", "bodyText": "i tested 32M, coming in next push", "author": "uschindler", "createdAt": "2020-09-08T20:11:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNjU2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzA2Mg==", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485117062", "bodyText": "I would maybe mark this as belonging to Slow group? Just a thought.", "author": "dweiss", "createdAt": "2020-09-08T18:30:52Z", "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.store;\n+\n+import java.lang.ProcessBuilder.Redirect;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.NamedThreadFactory;\n+import org.apache.lucene.util.SuppressForbidden;\n+\n+public class TestLockFactoriesMultiJVM extends LuceneTestCase {", "originalCommit": "e3a0dbb462707f907362aed76a5a45a738a40f54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzODQ2OQ==", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485138469", "bodyText": "FYI I ran it locally on a 2-core laptop. The tests are a bit slow but not the slowest in lucene-core.\nThe slowest tests (exceeding 500 ms) during this run:\n2.76s TestIndexWriter.testMaxCompletedSequenceNumber (:lucene:core)\n1.96s TestNRTCachingDirectory.testNRTAndCommit (:lucene:core)\n1.69s TestIndexWriter.testThreadInterruptDeadlock (:lucene:core)\n1.60s TestShardSearching.testSimple (:lucene:core)\n1.55s TestStandardAnalyzer.testLargePartiallyMatchingToken (:lucene:core)\n1.46s TestTieredMergePolicy.testSimulateAppendOnly (:lucene:core)\n1.32s TestLockFactoriesMultiJVM.testNativeFSLockFactory (:lucene:core)\n1.23s TestLockFactoriesMultiJVM.testSimpleFSLockFactory (:lucene:core)\n1.17s TestLevenshteinAutomata.testLev2 (:lucene:core)\n1.15s TestIndexSorting.testConcurrentUpdates (:lucene:core)", "author": "rmuir", "createdAt": "2020-09-08T19:11:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzA2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3MDEzMA==", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485170130", "bodyText": "It will be sligtly faster soon, but can be tuned. But marking it as @Slow is a bad idea because this is a very important test! Especially to collect information from users, if it really works everywhere.\nTo really do extensive testing do -Dtests.nightly=true, then it runs about 2 minutes.", "author": "uschindler", "createdAt": "2020-09-08T20:13:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzA2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExOTcwOQ==", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485119709", "bodyText": "I think we should absolutely try to clean up forked processes in case something goes wrong (even if it's an internal suite timeout!) - regardless of the outcome of the test. I'd do a run over the process list in finally and if it's still in a live state, kill it.\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Process.html#destroyForcibly()\nAnother thought is maybe to use a list of completable futures to wait for all forked processes instead of counting them?\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Process.html#onExit()\nThese are details; the cleanup is kind of important.", "author": "dweiss", "createdAt": "2020-09-08T18:35:51Z", "path": "lucene/core/src/test/org/apache/lucene/store/TestLockFactoriesMultiJVM.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.store;\n+\n+import java.lang.ProcessBuilder.Redirect;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.NamedThreadFactory;\n+import org.apache.lucene.util.SuppressForbidden;\n+\n+public class TestLockFactoriesMultiJVM extends LuceneTestCase {\n+  \n+  @SuppressForbidden(reason = \"ProcessBuilder only allows to redirect to java.io.File\")\n+  private static final ProcessBuilder applyRedirection(ProcessBuilder pb, int client, Path dir) {\n+    if (LuceneTestCase.VERBOSE) {\n+      return pb.inheritIO();\n+    } else {\n+      return pb\n+        .redirectError(dir.resolve(\"err-\" + client + \".txt\").toFile())\n+        .redirectOutput(dir.resolve(\"out-\" + client + \".txt\").toFile())\n+        .redirectInput(Redirect.INHERIT);\n+    }\n+  }\n+  \n+  private void runImpl(Class<? extends LockFactory> impl) throws Exception {\n+    // make sure we are in clean state:\n+    LockVerifyServer.PORT.set(-1);\n+    \n+    final int clients = 2;\n+    final String host = \"127.0.0.1\";\n+    final int delay = 1;\n+    final int rounds = (LuceneTestCase.TEST_NIGHTLY ? 30000 : 500) * LuceneTestCase.RANDOM_MULTIPLIER;\n+    \n+    final Path dir = LuceneTestCase.createTempDir(impl.getSimpleName());\n+    \n+    // create the LockVerifyServer in a separate thread\n+    final ExecutorService pool = Executors.newSingleThreadExecutor(new NamedThreadFactory(\"lockfactory-tester-\"));\n+    try {\n+      pool.submit(() -> {\n+        LockVerifyServer.main(host, Integer.toString(clients));\n+        return (Void) null;\n+      });\n+      \n+      // wait for it to boot up\n+      int port;\n+      while ((port = LockVerifyServer.PORT.get()) == -1) {\n+        Thread.sleep(100L);\n+      }\n+      \n+      // spawn clients as separate Java processes\n+      final List<Process> processes = new ArrayList<>();\n+      for (int i = 0; i < clients; i++) {\n+        processes.add(applyRedirection(new ProcessBuilder(\n+            Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n+            \"-cp\",\n+            System.getProperty(\"java.class.path\"),\n+            LockStressTest.class.getName(),\n+            Integer.toString(i),\n+            host,\n+            Integer.toString(port),\n+            impl.getName(),\n+            dir.toString(),\n+            Integer.toString(delay),\n+            Integer.toString(rounds)\n+          ), i, dir).start());\n+      }\n+      \n+      // wait for all processes to exit\n+      int exited = 0;\n+      while (exited < clients) {\n+        for (Process p : processes) {", "originalCommit": "e3a0dbb462707f907362aed76a5a45a738a40f54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3MDg2Nw==", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485170867", "bodyText": "I copied this code from another test doing similar stuff (crushing JVM). I will work change it a bit.", "author": "uschindler", "createdAt": "2020-09-08T20:14:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExOTcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE3NTE0OA==", "url": "https://github.com/apache/lucene-solr/pull/1842#discussion_r485175148", "bodyText": "onExit is from Java 9 (so wasn't available). I vaguely remember destroyForcibly didn't work as expected if it forked processes of its own (only killed the forked process, not its entire hierarchy) -- we have wrappers that take care of that (because we use process forking extensively in integration tests). From Java 11 on you can enumerate the hierarchy and kill it manually.\nhttps://github.com/carrotsearch/procfork/blob/master/src/main/java/com/carrotsearch/procfork/ForkedProcess.java#L92-L93", "author": "dweiss", "createdAt": "2020-09-08T20:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExOTcwOQ=="}], "type": "inlineReview"}, {"oid": "6a83fea05c28ba58124e8c7cbd6e225e704060aa", "url": "https://github.com/apache/lucene-solr/commit/6a83fea05c28ba58124e8c7cbd6e225e704060aa", "message": "Improvements:\n- Remove AtomicBoolean and use a callback\n- Remove the thread pool (not needed because of cleanup)\n- Clean up processes and force them to close if not dying", "committedDate": "2020-09-08T20:22:40Z", "type": "commit"}, {"oid": "0dfb1d83d9b5520e8ad436090d270742e82f1b45", "url": "https://github.com/apache/lucene-solr/commit/0dfb1d83d9b5520e8ad436090d270742e82f1b45", "message": "Reorder parameters; cleanup; list size", "committedDate": "2020-09-08T22:49:59Z", "type": "commit"}, {"oid": "0dfb1d83d9b5520e8ad436090d270742e82f1b45", "url": "https://github.com/apache/lucene-solr/commit/0dfb1d83d9b5520e8ad436090d270742e82f1b45", "message": "Reorder parameters; cleanup; list size", "committedDate": "2020-09-08T22:49:59Z", "type": "forcePushed"}, {"oid": "36ea51695eeca9afd815cbc3d4fe539c8f4e900f", "url": "https://github.com/apache/lucene-solr/commit/36ea51695eeca9afd815cbc3d4fe539c8f4e900f", "message": "Merge branch 'master' of https://gitbox.apache.org/repos/asf/lucene-solr into dev/LUCENE-9512", "committedDate": "2020-09-09T07:36:19Z", "type": "commit"}, {"oid": "07d3b3529cdab0257f2a20fa168f7293e9e6b255", "url": "https://github.com/apache/lucene-solr/commit/07d3b3529cdab0257f2a20fa168f7293e9e6b255", "message": "Implement forked and in-JVM client for lock stress tests.", "committedDate": "2020-09-09T08:21:30Z", "type": "commit"}, {"oid": "3ead6fbbaed72fcef5af6c31f4e790ccb6cdb21d", "url": "https://github.com/apache/lucene-solr/commit/3ead6fbbaed72fcef5af6c31f4e790ccb6cdb21d", "message": "Disable filesystem wrapping (we want this test run on native OS filesystems)", "committedDate": "2020-09-09T10:02:34Z", "type": "commit"}, {"oid": "4000012fba5828a12322fb9ca972a7537e478964", "url": "https://github.com/apache/lucene-solr/commit/4000012fba5828a12322fb9ca972a7537e478964", "message": "Rename test", "committedDate": "2020-09-09T10:19:58Z", "type": "commit"}, {"oid": "1a006233debf021c769e67efed6c9e9aac5bc876", "url": "https://github.com/apache/lucene-solr/commit/1a006233debf021c769e67efed6c9e9aac5bc876", "message": "Cleanup/reorder methods", "committedDate": "2020-09-09T10:40:22Z", "type": "commit"}, {"oid": "6ca27e27454f64bcc884b9520ad74b163efaafb0", "url": "https://github.com/apache/lucene-solr/commit/6ca27e27454f64bcc884b9520ad74b163efaafb0", "message": "Remove LockClientSupplier and make just have 1 thread client vs. 3 process clients (modulo 4). Also rename some methods to make consistent (execute -> run)", "committedDate": "2020-09-09T12:57:21Z", "type": "commit"}, {"oid": "c9cd7a5078bf3c932f699bdf44e27247ba64f236", "url": "https://github.com/apache/lucene-solr/commit/c9cd7a5078bf3c932f699bdf44e27247ba64f236", "message": "Change number of clients", "committedDate": "2020-09-09T13:13:02Z", "type": "commit"}, {"oid": "f04c773367f254d057faab29992f738ac3b2ffa5", "url": "https://github.com/apache/lucene-solr/commit/f04c773367f254d057faab29992f738ac3b2ffa5", "message": "Revert the in-process code, but keep the magic numbers as constants", "committedDate": "2020-09-09T14:00:35Z", "type": "commit"}, {"oid": "ad86aac72e0360d76fe29ecefe124667ace84ec9", "url": "https://github.com/apache/lucene-solr/commit/ad86aac72e0360d76fe29ecefe124667ace84ec9", "message": "Disable filesystem wrapping (we want this test run on native OS filesystems)", "committedDate": "2020-09-09T14:03:08Z", "type": "commit"}, {"oid": "4387790d90fde93edf85d041dc65a2df70293a8c", "url": "https://github.com/apache/lucene-solr/commit/4387790d90fde93edf85d041dc65a2df70293a8c", "message": "Run with 5 clients in nightly tests", "committedDate": "2020-09-09T14:06:52Z", "type": "commit"}, {"oid": "11ceb954af8335d972b78a7b01e1a39997efdda9", "url": "https://github.com/apache/lucene-solr/commit/11ceb954af8335d972b78a7b01e1a39997efdda9", "message": "Add changes", "committedDate": "2020-09-09T16:37:43Z", "type": "commit"}, {"oid": "3003b74c0349e465932a92c404668e5f941a85e1", "url": "https://github.com/apache/lucene-solr/commit/3003b74c0349e465932a92c404668e5f941a85e1", "message": "Merge branch 'master' of https://gitbox.apache.org/repos/asf/lucene-solr into dev/LUCENE-9512\n\n# Conflicts:\n#\tlucene/CHANGES.txt", "committedDate": "2020-09-09T16:39:44Z", "type": "commit"}, {"oid": "be287dab40d64a1b41a71c39f4e44459d065bc18", "url": "https://github.com/apache/lucene-solr/commit/be287dab40d64a1b41a71c39f4e44459d065bc18", "message": "fix CHANGES.txt", "committedDate": "2020-09-09T16:41:23Z", "type": "commit"}]}