{"pr_number": 1733, "pr_title": "LUCENE-9450 Use BinaryDocValues in the taxonomy writer", "pr_createdAt": "2020-08-10T21:40:13Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1733", "timeline": [{"oid": "7c3b7a70144533fec074106b2c4dad5a48eb2e8f", "url": "https://github.com/apache/lucene-solr/commit/7c3b7a70144533fec074106b2c4dad5a48eb2e8f", "message": "WIP: Modify DirectoryTaxonomyWriter to use BinaryDocValues", "committedDate": "2020-08-09T23:13:00Z", "type": "commit"}, {"oid": "df51f041f2dc4d6c39cae23bedfebf5598b65225", "url": "https://github.com/apache/lucene-solr/commit/df51f041f2dc4d6c39cae23bedfebf5598b65225", "message": "Remove extra comment", "committedDate": "2020-08-09T23:17:01Z", "type": "commit"}, {"oid": "bbc391adc558d774bfd2ab2c169c68137b59dc88", "url": "https://github.com/apache/lucene-solr/commit/bbc391adc558d774bfd2ab2c169c68137b59dc88", "message": "LUCENE-9450 Use advanceExact to iterate to the field", "committedDate": "2020-08-10T21:05:10Z", "type": "commit"}, {"oid": "5ddd5c832fa4a57cc7cf8d620f2e3efe6459dc9f", "url": "https://github.com/apache/lucene-solr/commit/5ddd5c832fa4a57cc7cf8d620f2e3efe6459dc9f", "message": "Merge branch 'master' of https://github.com/gautamworah96/lucene-solr", "committedDate": "2020-08-10T21:18:19Z", "type": "commit"}, {"oid": "4b45f96fbd9f0b217db3c88dd13c82b9431cf947", "url": "https://github.com/apache/lucene-solr/commit/4b45f96fbd9f0b217db3c88dd13c82b9431cf947", "message": "SOLR-14641: PeerSync, remove canHandleVersionRanges check (#1663)", "committedDate": "2020-08-10T21:18:45Z", "type": "commit"}, {"oid": "12205b42c73b881c2d96aecd7564e7cbd322c888", "url": "https://github.com/apache/lucene-solr/commit/12205b42c73b881c2d96aecd7564e7cbd322c888", "message": "SOLR-14641: Update CHANGES.txt", "committedDate": "2020-08-10T21:18:45Z", "type": "commit"}, {"oid": "dc637cf5f3a875c30087c56dbbac09a708fb36ec", "url": "https://github.com/apache/lucene-solr/commit/dc637cf5f3a875c30087c56dbbac09a708fb36ec", "message": "LUCENE-9452: remove jenkins.build.ref.guide.sh as it's no longer needed", "committedDate": "2020-08-10T21:18:45Z", "type": "commit"}, {"oid": "ff5eba72d17b3fbb7b4339806254271caca6272c", "url": "https://github.com/apache/lucene-solr/commit/ff5eba72d17b3fbb7b4339806254271caca6272c", "message": "LUCENE-9450 Use BinaryDocValues in the taxonomy writer", "committedDate": "2020-08-10T21:26:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwNjQ4NA==", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r468806484", "bodyText": "I think instead of the boxed Integer catIDInteger we should pass the int ordinal to .advanceExact(...)?  Not the cause of the NPE, just cleaner.", "author": "mikemccand", "createdAt": "2020-08-11T19:12:42Z", "path": "lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.java", "diffHunk": "@@ -323,8 +323,10 @@ public FacetLabel getPath(int ordinal) throws IOException {\n       }\n     }\n     \n-    Document doc = indexReader.document(ordinal);\n-    FacetLabel ret = new FacetLabel(FacetsConfig.stringToPath(doc.get(Consts.FULL)));\n+    boolean found = MultiDocValues.getBinaryValues(indexReader, Consts.FULL).advanceExact(catIDInteger);", "originalCommit": "5ddd5c832fa4a57cc7cf8d620f2e3efe6459dc9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwODkwNA==", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r468808904", "bodyText": "OK, I see one issue -- you are pulling a new BinaryDocValues, calling .advanceExact on it (good), but then pulling a new BinaryDocValues below and not calling .advanceExact on it.\nI think you must add a new local variable, e.g. BinaryDocValues values.  Pull it once (using the MultiDocValues.getBinaryValues sugar API).  Then call .advanceExact on that and assert it succeeded. Finally, use that same values instance (now that it has advanced to the right docId) to call .binaryValue().utf8ToString().\nI think that should fix the NPE?\nThis is misuse of the API for the default Lucene Codec for BinaryDocValues, since you were calling .binaryValue() before .advanceExact().  It is somewhat disappointing that the codec threw a confusing NPE and not a clearer (best effort) exception stating that you must first call .advanceExact.  Maybe we could improve the default Codec?  (Though, not if that would hurt performance of correct usage).  OK I see: the NPE is because of MultiDocValues.currentValues is null since .advanceExact was not yet called.  Maybe we could add an assert there, confirming .advanceExact was indeed called and had returned true?  It would have made debugging this easier, and should not hurt performance when assertions are disabled ...", "author": "mikemccand", "createdAt": "2020-08-11T19:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwNjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgxMjUyNw==", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r468812527", "bodyText": "One more idea: instead of using MultiDocValues sugar, I think we should use Lucene's ReaderUtil to quickly (binary search) determine which leaf holds this docId, then pull BinaryDocValues from that LeafReader?", "author": "mikemccand", "createdAt": "2020-08-11T19:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwNjQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyNzc0Mw==", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r469727743", "bodyText": "Thank you for looking at it so closely (and helping in debugging).\nThe new PR has the following changes:\n\nUse ordinal  instead of catIDInteger (IntelliJ says that boxing is anyways not needed, perhaps we can remove?)\nUse the correct values instance that has advanced to the correct docId\nUse ReaderUtil to get to the leaf and then use LeafReader instead of using the higher level MultiDocValues call\n\nTEST:\nant test in the lucene-solr/lucene/facets directory (passes successfully)\nant precommit\nI've not added any new tests because this PR changes a low level implementation detail and the current tests already cover this\nThe next step is to run lucene benchmarks!", "author": "gautamworah96", "createdAt": "2020-08-13T06:36:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwNjQ4NA=="}], "type": "inlineReview"}, {"oid": "f8eeb3da5c7792976073311fcc60773e4efebc11", "url": "https://github.com/apache/lucene-solr/commit/f8eeb3da5c7792976073311fcc60773e4efebc11", "message": "Merge branch 'master' of https://github.com/apache/lucene-solr into HEAD", "committedDate": "2020-08-12T04:36:58Z", "type": "commit"}, {"oid": "ae1c5d648db865f2f3cc9e69c35e7781a0783676", "url": "https://github.com/apache/lucene-solr/commit/ae1c5d648db865f2f3cc9e69c35e7781a0783676", "message": "Store a variable `values` to store the exact BinaryDocValue", "committedDate": "2020-08-12T05:49:57Z", "type": "commit"}, {"oid": "75d0f6214f61fc639547547a7d2e33df280c0836", "url": "https://github.com/apache/lucene-solr/commit/75d0f6214f61fc639547547a7d2e33df280c0836", "message": "Merge branch 'master' of https://github.com/gautamworah96/lucene-solr into HEAD", "committedDate": "2020-08-12T06:06:10Z", "type": "commit"}, {"oid": "a768d9f57cd6ebfc90aaedadd361c32eada2afa1", "url": "https://github.com/apache/lucene-solr/commit/a768d9f57cd6ebfc90aaedadd361c32eada2afa1", "message": "Fixed the NPE error, also use ReaderUtil to get the docId", "committedDate": "2020-08-12T20:21:30Z", "type": "commit"}, {"oid": "4b7e345c0825969a1701ad465c14744880de6110", "url": "https://github.com/apache/lucene-solr/commit/4b7e345c0825969a1701ad465c14744880de6110", "message": "Merge branch 'master' of https://github.com/apache/lucene-solr into LUCENE-9450", "committedDate": "2020-08-12T21:51:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3NzI5Nw==", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r469977297", "bodyText": "Pre-existing: I don't like that we return null up above if the requested ordinal is out-of-bounds.  That's dangerous leniency and likely means the user is refreshing their main IndexReader and the TaxonomyReader in the wrong order.  It would be better to throw an exception here?  @gautamworah96 could you open a follow-on issue to fix that?  Thanks.", "author": "mikemccand", "createdAt": "2020-08-13T14:06:25Z", "path": "lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.java", "diffHunk": "@@ -322,9 +324,14 @@ public FacetLabel getPath(int ordinal) throws IOException {\n         return res;\n       }\n     }", "originalCommit": "4b7e345c0825969a1701ad465c14744880de6110", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwNDA3MA==", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r470204070", "bodyText": "Opened LUCENE-9460 for this", "author": "gautamworah96", "createdAt": "2020-08-13T19:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3NzI5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3ODQzOQ==", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r469978439", "bodyText": "Could you factor out the FacetsConfig.pathToString(...) part in a new local variable and re-use that?  We use it in (at least?) two places here.", "author": "mikemccand", "createdAt": "2020-08-13T14:08:06Z", "path": "lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.java", "diffHunk": "@@ -494,6 +496,7 @@ private int addCategoryDocument(FacetLabel categoryPath, int parent) throws IOEx\n \n     fullPathField.setStringValue(FacetsConfig.pathToString(categoryPath.components, categoryPath.length));\n     d.add(fullPathField);\n+    d.add(new BinaryDocValuesField(Consts.FULL, new BytesRef(FacetsConfig.pathToString(categoryPath.components, categoryPath.length))));", "originalCommit": "4b7e345c0825969a1701ad465c14744880de6110", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2MDc5OQ==", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r470160799", "bodyText": "Yep, this could be cleaner. Extracted out in the next commit", "author": "gautamworah96", "createdAt": "2020-08-13T18:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3ODQzOQ=="}], "type": "inlineReview"}, {"oid": "709c5ae3fda5eaab4a6827111835c4e8285f4cda", "url": "https://github.com/apache/lucene-solr/commit/709c5ae3fda5eaab4a6827111835c4e8285f4cda", "message": "Extract FacetsConfig.pathToString in a new variable", "committedDate": "2020-08-13T18:24:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1OTQ2Mg==", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r474059462", "bodyText": "Could you open a new issue to optimize this better in the future, to do bulk lookup of ordinal -> FacetLabel?  And then add a // TODO  pointing to that issue and describing the optimization?", "author": "mikemccand", "createdAt": "2020-08-20T15:12:31Z", "path": "lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.java", "diffHunk": "@@ -322,9 +324,14 @@ public FacetLabel getPath(int ordinal) throws IOException {\n         return res;\n       }\n     }\n-    \n-    Document doc = indexReader.document(ordinal);\n-    FacetLabel ret = new FacetLabel(FacetsConfig.stringToPath(doc.get(Consts.FULL)));\n+\n+    int readerIndex = ReaderUtil.subIndex(ordinal, indexReader.leaves());\n+    LeafReader leafReader = indexReader.leaves().get(readerIndex).reader();\n+    BinaryDocValues values = leafReader.getBinaryDocValues(Consts.FULL);", "originalCommit": "709c5ae3fda5eaab4a6827111835c4e8285f4cda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM1NjMyNQ==", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r474356325", "bodyText": "Could you give an example of what that bulk lookup function params would look like / some reference in the code where something of this sort is implemented?", "author": "gautamworah96", "createdAt": "2020-08-21T01:23:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1OTQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMwMDYxNA==", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r475300614", "bodyText": "I created a new issue LUCENE 9476", "author": "gautamworah96", "createdAt": "2020-08-24T01:41:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1OTQ2Mg=="}], "type": "inlineReview"}, {"oid": "0e80511b6cc25a05fa98604089698fe27ba3f2a9", "url": "https://github.com/apache/lucene-solr/commit/0e80511b6cc25a05fa98604089698fe27ba3f2a9", "message": "Add a condition to make the DirectoryTaxonomyReader backwards compatible\n\nAlso add a TODO for the bulk lookup API", "committedDate": "2020-08-24T02:18:13Z", "type": "commit"}, {"oid": "402d9086bb832302afc8e4688b52528585bbeb05", "url": "https://github.com/apache/lucene-solr/commit/402d9086bb832302afc8e4688b52528585bbeb05", "message": "Run all tests in a PR", "committedDate": "2020-10-08T01:22:57Z", "type": "commit"}, {"oid": "08901b62133cee89861a6cd92137e3511ab0a795", "url": "https://github.com/apache/lucene-solr/commit/08901b62133cee89861a6cd92137e3511ab0a795", "message": "Merge pull request #1 from gautamworah96/github_pr_tests\n\nRun all tests in a PR", "committedDate": "2020-10-08T01:24:51Z", "type": "commit"}, {"oid": "ee2bdc1b717addbec11f5535755eafd9595670bb", "url": "https://github.com/apache/lucene-solr/commit/ee2bdc1b717addbec11f5535755eafd9595670bb", "message": "Implemented support for back compat using a test case", "committedDate": "2020-10-30T08:15:43Z", "type": "commit"}, {"oid": "4a1d483a9ce7286e54c0ea9ddf48e9c130bb7f60", "url": "https://github.com/apache/lucene-solr/commit/4a1d483a9ce7286e54c0ea9ddf48e9c130bb7f60", "message": "Revert \"Run all tests in a PR\"\n\nThis reverts commit 402d9086bb832302afc8e4688b52528585bbeb05.", "committedDate": "2020-10-30T08:16:23Z", "type": "commit"}, {"oid": "4a1d483a9ce7286e54c0ea9ddf48e9c130bb7f60", "url": "https://github.com/apache/lucene-solr/commit/4a1d483a9ce7286e54c0ea9ddf48e9c130bb7f60", "message": "Revert \"Run all tests in a PR\"\n\nThis reverts commit 402d9086bb832302afc8e4688b52528585bbeb05.", "committedDate": "2020-10-30T08:16:23Z", "type": "forcePushed"}, {"oid": "7d6a16c13897cc052281a1265a2c266b4374f486", "url": "https://github.com/apache/lucene-solr/commit/7d6a16c13897cc052281a1265a2c266b4374f486", "message": "Add the zip file for the old index", "committedDate": "2020-10-30T08:22:43Z", "type": "commit"}, {"oid": "d3b0de983d190e75947eed03b24064c305148ae4", "url": "https://github.com/apache/lucene-solr/commit/d3b0de983d190e75947eed03b24064c305148ae4", "message": "Minor style fixes", "committedDate": "2020-10-30T08:31:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3OTI0Nw==", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r515279247", "bodyText": "Hmm, can you move this assert above the assertNotNull?", "author": "mikemccand", "createdAt": "2020-10-30T17:52:38Z", "path": "lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestBackwardsCompatibility.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.facet.taxonomy.directory;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.apache.lucene.facet.taxonomy.FacetLabel;\n+import org.apache.lucene.facet.taxonomy.TaxonomyReader;\n+import org.apache.lucene.facet.taxonomy.TaxonomyWriter;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.TestUtil;\n+import org.junit.Ignore;\n+\n+/*\n+  Verify we can read previous versions' taxonomy indexes, do searches\n+  against them, and add documents to them.\n+*/\n+// See: https://issues.apache.org/jira/browse/SOLR-12028 Tests cannot remove files on Windows machines occasionally\n+public class TestBackwardsCompatibility extends LuceneTestCase {\n+\n+    // To generate backcompat indexes with the current default codec, run the following gradle command:\n+    //  gradlew test -Dtestcase=TestBackwardsCompatibility -Dtests.bwcdir=/path/to/store/indexes\n+    //           -Dtests.codec=default -Dtests.useSecurityManager=false\n+    // Also add testmethod with one of the index creation methods below, for example:\n+    //    -Dtestmethod=testCreateOldTaxonomy\n+    //\n+    // Zip up the generated indexes:\n+    //\n+    //    cd /path/to/store/indexes/index.cfs   ; zip index.<VERSION>-cfs.zip *\n+    //\n+    // Then move the zip file to your trunk checkout and use it in your test cases\n+\n+    public static final String oldTaxonomyIndexName = \"taxonomy.8.6.3-cfs\";\n+\n+    public void testCreateNewTaxonomy() throws IOException {\n+        createNewTaxonomyIndex(oldTaxonomyIndexName);\n+    }\n+\n+    // Opens up a pre-existing old taxonomy index and adds new BinaryDocValues based fields\n+    private void createNewTaxonomyIndex(String dirName) throws IOException {\n+        Path indexDir = createTempDir(oldTaxonomyIndexName);\n+        TestUtil.unzip(getDataInputStream(dirName + \".zip\"), indexDir);\n+        Directory dir = newFSDirectory(indexDir);\n+\n+        DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir);\n+\n+        FacetLabel cp_b = new FacetLabel(\"b\");\n+        writer.addCategory(cp_b);\n+        writer.getInternalIndexWriter().forceMerge(1);\n+        writer.commit();\n+\n+        TaxonomyReader reader = new DirectoryTaxonomyReader(writer);\n+\n+        int ord1 = reader.getOrdinal(new FacetLabel(\"a\"));\n+        // Just asserting ord1 != TaxonomyReader.INVALID_ORDINAL is not enough to check compatibility\n+        assertNotNull(reader.getPath(ord1));\n+        assert ord1 != TaxonomyReader.INVALID_ORDINAL;", "originalCommit": "d3b0de983d190e75947eed03b24064c305148ae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5MDI0Mw==", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r515290243", "bodyText": "Fixed", "author": "gautamworah96", "createdAt": "2020-10-30T18:08:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3OTI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3OTMxNQ==", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r515279315", "bodyText": "This one too?", "author": "mikemccand", "createdAt": "2020-10-30T17:52:45Z", "path": "lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestBackwardsCompatibility.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.lucene.facet.taxonomy.directory;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.apache.lucene.facet.taxonomy.FacetLabel;\n+import org.apache.lucene.facet.taxonomy.TaxonomyReader;\n+import org.apache.lucene.facet.taxonomy.TaxonomyWriter;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.util.LuceneTestCase;\n+import org.apache.lucene.util.TestUtil;\n+import org.junit.Ignore;\n+\n+/*\n+  Verify we can read previous versions' taxonomy indexes, do searches\n+  against them, and add documents to them.\n+*/\n+// See: https://issues.apache.org/jira/browse/SOLR-12028 Tests cannot remove files on Windows machines occasionally\n+public class TestBackwardsCompatibility extends LuceneTestCase {\n+\n+    // To generate backcompat indexes with the current default codec, run the following gradle command:\n+    //  gradlew test -Dtestcase=TestBackwardsCompatibility -Dtests.bwcdir=/path/to/store/indexes\n+    //           -Dtests.codec=default -Dtests.useSecurityManager=false\n+    // Also add testmethod with one of the index creation methods below, for example:\n+    //    -Dtestmethod=testCreateOldTaxonomy\n+    //\n+    // Zip up the generated indexes:\n+    //\n+    //    cd /path/to/store/indexes/index.cfs   ; zip index.<VERSION>-cfs.zip *\n+    //\n+    // Then move the zip file to your trunk checkout and use it in your test cases\n+\n+    public static final String oldTaxonomyIndexName = \"taxonomy.8.6.3-cfs\";\n+\n+    public void testCreateNewTaxonomy() throws IOException {\n+        createNewTaxonomyIndex(oldTaxonomyIndexName);\n+    }\n+\n+    // Opens up a pre-existing old taxonomy index and adds new BinaryDocValues based fields\n+    private void createNewTaxonomyIndex(String dirName) throws IOException {\n+        Path indexDir = createTempDir(oldTaxonomyIndexName);\n+        TestUtil.unzip(getDataInputStream(dirName + \".zip\"), indexDir);\n+        Directory dir = newFSDirectory(indexDir);\n+\n+        DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir);\n+\n+        FacetLabel cp_b = new FacetLabel(\"b\");\n+        writer.addCategory(cp_b);\n+        writer.getInternalIndexWriter().forceMerge(1);\n+        writer.commit();\n+\n+        TaxonomyReader reader = new DirectoryTaxonomyReader(writer);\n+\n+        int ord1 = reader.getOrdinal(new FacetLabel(\"a\"));\n+        // Just asserting ord1 != TaxonomyReader.INVALID_ORDINAL is not enough to check compatibility\n+        assertNotNull(reader.getPath(ord1));\n+        assert ord1 != TaxonomyReader.INVALID_ORDINAL;\n+\n+        int ord2 = reader.getOrdinal(cp_b);\n+        assertNotNull(reader.getPath(ord2));\n+        assert ord2 != TaxonomyReader.INVALID_ORDINAL;", "originalCommit": "d3b0de983d190e75947eed03b24064c305148ae4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI4OTk5Ng==", "url": "https://github.com/apache/lucene-solr/pull/1733#discussion_r515289996", "bodyText": "Fixed", "author": "gautamworah96", "createdAt": "2020-10-30T18:08:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3OTMxNQ=="}], "type": "inlineReview"}, {"oid": "f4bcc2374570dcd786a3be58f120780f046e3a5d", "url": "https://github.com/apache/lucene-solr/commit/f4bcc2374570dcd786a3be58f120780f046e3a5d", "message": "Fix order of asserts in the test case", "committedDate": "2020-10-30T18:06:54Z", "type": "commit"}, {"oid": "9147704900cb22bc687adc084929cc8a2a8526ec", "url": "https://github.com/apache/lucene-solr/commit/9147704900cb22bc687adc084929cc8a2a8526ec", "message": "Add backwards codecs to test dependency", "committedDate": "2020-11-06T23:22:31Z", "type": "commit"}, {"oid": "b10ae399396b7335bb9584d5200925b701c30760", "url": "https://github.com/apache/lucene-solr/commit/b10ae399396b7335bb9584d5200925b701c30760", "message": "Add comment explaining why we need the Lucene 8.6.3 codec jar.\n\nTested the commit with the original Lucene master branch and it passes successfully. This test was failing initially without the dependency.", "committedDate": "2020-11-06T23:35:29Z", "type": "commit"}, {"oid": "87f39193c0b8806fbd431c9e125788bae14d69f0", "url": "https://github.com/apache/lucene-solr/commit/87f39193c0b8806fbd431c9e125788bae14d69f0", "message": "Added dependency locking", "committedDate": "2020-11-09T00:06:24Z", "type": "commit"}, {"oid": "f347133a5df996ed7d285de5ac29abef70b64ba5", "url": "https://github.com/apache/lucene-solr/commit/f347133a5df996ed7d285de5ac29abef70b64ba5", "message": "Fix merge conflicts. Pull in changes from master branch", "committedDate": "2020-11-12T20:19:02Z", "type": "commit"}]}