{"pr_number": 1952, "pr_title": "LUCENE-9565 Fix competitive iteration", "pr_createdAt": "2020-10-06T14:29:12Z", "pr_url": "https://github.com/apache/lucene-solr/pull/1952", "timeline": [{"oid": "574245c96db19291138b2eb7253451b567c69d89", "url": "https://github.com/apache/lucene-solr/commit/574245c96db19291138b2eb7253451b567c69d89", "message": "LUCENE-9565 Fix competitive iteration\n\nPR #1351 introduced a sort optimization where documents can be skipped.\nBut iteration over competitive iterators was not properly organized,\nas they were not storing the current docID, and\nwhen competitive iterator was updated the current doc ID was lost.\n\nThis patch fixed it.\n\nRelates to #1351", "committedDate": "2020-10-06T14:23:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3MjY1OA==", "url": "https://github.com/apache/lucene-solr/pull/1952#discussion_r500372658", "bodyText": "I don't think that this is good enough as we might be advancing ahead of scorerIterator? This was why I thought that we should instead wrap scorerIterator in such a way that its initial docID would be -1.", "author": "jpountz", "createdAt": "2020-10-06T15:09:31Z", "path": "lucene/core/src/java/org/apache/lucene/search/Weight.java", "diffHunk": "@@ -204,9 +204,14 @@ public int score(LeafCollector collector, Bits acceptDocs, int min, int max) thr\n       collector.setScorer(scorer);\n       DocIdSetIterator scorerIterator = twoPhase == null ? iterator : twoPhase.approximation();\n       DocIdSetIterator collectorIterator = collector.competitiveIterator();\n-      // if possible filter scorerIterator to keep only competitive docs as defined by collector\n-      DocIdSetIterator filteredIterator = collectorIterator == null ? scorerIterator :\n-          ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));\n+      DocIdSetIterator filteredIterator = scorerIterator;\n+      if (collectorIterator != null) {\n+        if (scorerIterator.docID() != -1) {\n+          collectorIterator.advance(scorerIterator.docID());\n+        }", "originalCommit": "574245c96db19291138b2eb7253451b567c69d89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxMjA2Mw==", "url": "https://github.com/apache/lucene-solr/pull/1952#discussion_r500412063", "bodyText": "@jpountz  Addressed in cba6cf7", "author": "mayya-sharipova", "createdAt": "2020-10-06T15:54:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3MjY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1MzE0MA==", "url": "https://github.com/apache/lucene-solr/pull/1952#discussion_r500453140", "bodyText": "oh, I had not considered setting scorerIterator.docID() as a min docID, maybe this means that we no longer need the min parameter of RangeDISIWrapper?", "author": "jpountz", "createdAt": "2020-10-06T16:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3MjY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2MTUyNg==", "url": "https://github.com/apache/lucene-solr/pull/1952#discussion_r500461526", "bodyText": "Thanks @jpountz , addressed in d42c464", "author": "mayya-sharipova", "createdAt": "2020-10-06T17:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3MjY1OA=="}], "type": "inlineReview"}, {"oid": "cba6cf75f48a26cd48f09152c25518c91fd6660d", "url": "https://github.com/apache/lucene-solr/commit/cba6cf75f48a26cd48f09152c25518c91fd6660d", "message": "Wrap ScorerIterator to start from -1 for conjunction", "committedDate": "2020-10-06T15:53:39Z", "type": "commit"}, {"oid": "d42c4649c81364f13c51c0b147dd600e57d7cccc", "url": "https://github.com/apache/lucene-solr/commit/d42c4649c81364f13c51c0b147dd600e57d7cccc", "message": "Address Adrien's comments", "committedDate": "2020-10-06T17:07:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3NDM0MQ==", "url": "https://github.com/apache/lucene-solr/pull/1952#discussion_r500574341", "bodyText": "it just occurred to me that this implementation is not correct in the case that the minimum bound of the range of doc IDs to score is less than the current doc ID of the scorer, have you seen any failures with your change? I wonder that we would need to do\nif (target >= scorer.docID()) { return scorer.docID(); }\n\nbut we should create a test that fails without this", "author": "jpountz", "createdAt": "2020-10-06T20:25:18Z", "path": "lucene/core/src/java/org/apache/lucene/search/Weight.java", "diffHunk": "@@ -266,4 +274,45 @@ static void scoreAll(LeafCollector collector, DocIdSetIterator iterator, TwoPhas\n     }\n   }\n \n+  /**\n+   * Wraps an internal docIdSetIterator for it to start with docID = -1\n+   */\n+  protected static class RangeDISIWrapper extends DocIdSetIterator {\n+    private final DocIdSetIterator in;\n+    private final int min;\n+    private final int max;\n+    private int docID = -1;\n+\n+    public RangeDISIWrapper(DocIdSetIterator in, int max) {\n+      this.in = in;\n+      this.min = in.docID();\n+      this.max = max;\n+    }\n+\n+    @Override\n+    public int docID() {\n+      return docID;\n+    }\n+\n+    @Override\n+    public int nextDoc() throws IOException {\n+      return advance(docID + 1);\n+    }\n+\n+    @Override\n+    public int advance(int target) throws IOException {\n+      target = Math.max(min, target);\n+      if (target >= max) {\n+        return docID = NO_MORE_DOCS;\n+      }\n+      return docID = in.advance(target);", "originalCommit": "d42c4649c81364f13c51c0b147dd600e57d7cccc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYwNDA5Mw==", "url": "https://github.com/apache/lucene-solr/pull/1952#discussion_r500604093", "bodyText": "Indeed the recent failures on Lucene are because of this. ReqExclBulkScorer callsscore method several times and sometimes with the minimum bound that is <= scorer.docID().\nI am thinking the logic is becoming more difficult. I am thinking to go back to the initial commit and advance collectorIterator to the same doc as scorerIterator. At the beginning a  collectorIterator matches all docs, so it should precisely advance to the `scorerIterator.docID()).", "author": "mayya-sharipova", "createdAt": "2020-10-06T21:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3NDM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYxNjU3MA==", "url": "https://github.com/apache/lucene-solr/pull/1952#discussion_r500616570", "bodyText": "@jpountz  I've created a new PR: #1955.  So sorry for the mess.", "author": "mayya-sharipova", "createdAt": "2020-10-06T21:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3NDM0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDcwMzg2MQ==", "url": "https://github.com/apache/lucene-solr/pull/1952#discussion_r500703861", "bodyText": "@jpountz\n\nBy this if (target >= scorer.docID()) { return scorer.docID(); }\n\nDid you mean if (target <= scorer.docID()) { return scorer.docID(); } ?", "author": "mayya-sharipova", "createdAt": "2020-10-07T02:36:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3NDM0MQ=="}], "type": "inlineReview"}]}