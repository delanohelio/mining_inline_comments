{"pr_number": 238, "pr_title": "Revisiting identity-related classes.", "pr_createdAt": "2020-05-21T00:23:34Z", "pr_url": "https://github.com/Azure/azure-sdk-for-android/pull/238", "timeline": [{"oid": "cbff4d0f9f1e651dc14df8b589b7caebc1949aea", "url": "https://github.com/Azure/azure-sdk-for-android/commit/cbff4d0f9f1e651dc14df8b589b7caebc1949aea", "message": "Moved AccessToken from sample-app to azure-core. Renamed storage.blob.credentials to storage.blob.credential. Made slight corrections to the TokenRequest classes' Javadoc in sample-app.", "committedDate": "2020-05-21T00:20:30Z", "type": "commit"}, {"oid": "c530c009d263b9970bf63a86f13ec2b8ecd53f6f", "url": "https://github.com/Azure/azure-sdk-for-android/commit/c530c009d263b9970bf63a86f13ec2b8ecd53f6f", "message": "Created azure-identity package.", "committedDate": "2020-07-14T15:40:06Z", "type": "commit"}, {"oid": "14a4900d3204c0037b7dfafd7ab0100ce24564b5", "url": "https://github.com/Azure/azure-sdk-for-android/commit/14a4900d3204c0037b7dfafd7ab0100ce24564b5", "message": "Moved TokenRequest* classes from the sample app to azure-identity.", "committedDate": "2020-07-14T22:32:05Z", "type": "commit"}, {"oid": "021fa001bb1758c70bc5b7160f2cc7dced58a985", "url": "https://github.com/Azure/azure-sdk-for-android/commit/021fa001bb1758c70bc5b7160f2cc7dced58a985", "message": "Moved AccessToken from azure-core to azure-identity. Polished Javadoc for identity classes.", "committedDate": "2020-07-14T23:15:57Z", "type": "commit"}, {"oid": "6bffe57afcb3f748fa38fb507c9cc3c8c6ac3dde", "url": "https://github.com/Azure/azure-sdk-for-android/commit/6bffe57afcb3f748fa38fb507c9cc3c8c6ac3dde", "message": "Moved the current identity classes to azure-core. Created unit tests for most of them. Removed the azure-identity package.", "committedDate": "2020-07-17T02:16:51Z", "type": "commit"}, {"oid": "0270f5924cc9b9f730321f813eb54397c92f5094", "url": "https://github.com/Azure/azure-sdk-for-android/commit/0270f5924cc9b9f730321f813eb54397c92f5094", "message": "Created TokenRequestObservableAuthInterceptorTest, which uses Robolectric to access Android types due to TokenRequestObservable using LiveData.observe(LifecycleOwner, TokenRequestObserver).", "committedDate": "2020-07-17T02:19:40Z", "type": "commit"}, {"oid": "7a31652ba7a7d1da85f82afdbd126a0a9a87cceb", "url": "https://github.com/Azure/azure-sdk-for-android/commit/7a31652ba7a7d1da85f82afdbd126a0a9a87cceb", "message": "Modified TokenRequestObservableAuthInterceptorTest to use Mockito instead of Robolectric.", "committedDate": "2020-07-17T03:05:04Z", "type": "commit"}, {"oid": "26894c1c4246b40a537c7be7b442bf98b614c528", "url": "https://github.com/Azure/azure-sdk-for-android/commit/26894c1c4246b40a537c7be7b442bf98b614c528", "message": "Added observeForever() and removeObserver() to TokenRequestObservableAuthInterceptor. Modified TokenRequestObservableAuthInterceptorTest to use observeForever(). Removed the  Mockito test dependency.", "committedDate": "2020-07-17T03:05:18Z", "type": "commit"}, {"oid": "95b5c85647f793fe3564b3367aad81790f5a09ee", "url": "https://github.com/Azure/azure-sdk-for-android/commit/95b5c85647f793fe3564b3367aad81790f5a09ee", "message": "Merge remote-tracking branch 'upstream/dev' into identity-classes\n\n# Conflicts:\n#\tsamples/sample-app-storage/src/main/java/com/azure/android/storage/sample/ContainerBlobsPaginationRepository.java\n#\tsamples/sample-app-storage/src/main/java/com/azure/android/storage/sample/ListAndDownloadBlobsActivity.java\n#\tsamples/sample-app-storage/src/main/java/com/azure/android/storage/sample/UploadFileActivity.java\n#\tsdk/core/azure-core/build.gradle", "committedDate": "2020-07-17T03:06:33Z", "type": "commit"}, {"oid": "95b5c85647f793fe3564b3367aad81790f5a09ee", "url": "https://github.com/Azure/azure-sdk-for-android/commit/95b5c85647f793fe3564b3367aad81790f5a09ee", "message": "Merge remote-tracking branch 'upstream/dev' into identity-classes\n\n# Conflicts:\n#\tsamples/sample-app-storage/src/main/java/com/azure/android/storage/sample/ContainerBlobsPaginationRepository.java\n#\tsamples/sample-app-storage/src/main/java/com/azure/android/storage/sample/ListAndDownloadBlobsActivity.java\n#\tsamples/sample-app-storage/src/main/java/com/azure/android/storage/sample/UploadFileActivity.java\n#\tsdk/core/azure-core/build.gradle", "committedDate": "2020-07-17T03:06:33Z", "type": "forcePushed"}, {"oid": "cdc6f8c8658ae93c63a0bbafe2429544ac006b11", "url": "https://github.com/Azure/azure-sdk-for-android/commit/cdc6f8c8658ae93c63a0bbafe2429544ac006b11", "message": "Fixed build issues.", "committedDate": "2020-07-17T03:39:58Z", "type": "commit"}, {"oid": "beb97c921c9508c8c2fa47f556e74c402f77dde0", "url": "https://github.com/Azure/azure-sdk-for-android/commit/beb97c921c9508c8c2fa47f556e74c402f77dde0", "message": "Removed observeForever() and removeObserver() from TokenRequestObservableAuthInterceptor. Modified TokenRequestObservableAuthInterceptorTest to use observe() with our own mock of LifecycleOwner.", "committedDate": "2020-07-20T00:51:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzMzQ2Nw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/238#discussion_r457633467", "bodyText": "If these are package-private, why are we just using a comment rather than declaring them with package-private visibility (that is, no visibility modifier)? I know the class itself is package-private, but then why call out certain methods as package-private and others not?", "author": "bsiegel", "createdAt": "2020-07-20T19:13:24Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/credential/TokenRequestHandle.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.azure.android.core.credential;\n+\n+import org.threeten.bp.Duration;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A {@link TokenRequestHandle handle} that a background running thread (e.g. OkHttp thread) uses to synchronously\n+ * receive an {@link AccessToken} produced by the main UI thread. A background running thread can initiate the\n+ * {@link AccessToken} request by calling {@link TokenRequestObservable#sendRequest(List)} ()}, which returns a\n+ * {@link TokenRequestHandle} instance. The background thread then waits for the arrival of the {@link AccessToken}\n+ * by calling {@link TokenRequestHandle#waitForToken(Duration)}.\n+ * <p>\n+ * IMPLEMENTATION NOTE: The {@link TokenRequestObservable} INTERNALLY uses the same {@link TokenRequestHandle} object\n+ * (returned from {@link TokenRequestObservable#sendRequest(List)}) as an Event to notify a {@link TokenRequestObserver}\n+ * about the need for {@link AccessToken}. Upon receiving this event, the {@link TokenRequestObserver} invokes\n+ * {@link TokenRequestObserver#onTokenRequest(String[], TokenResponseCallback)} ({@link TokenResponseCallback})}\n+ * which is responsible for retrieving the {@link AccessToken}, the observer then sets the {@link AccessToken} or\n+ * {@link AccessToken} retrieval error in the Handle using it's package PRIVATE setters\n+ * {@link TokenRequestHandle#setToken(AccessToken)}, {@link TokenRequestHandle#setError(Throwable)}.\n+ * <p>\n+ * It is important that an Event instance is processed only once by the {@link TokenRequestObserver}. The\n+ * {@link TokenRequestObservable} uses a {@link androidx.lifecycle.LiveData} instance to post the Event to\n+ * {@link TokenRequestObserver}. {@link androidx.lifecycle.LiveData} is designed to cache the latest value (in\n+ * this case Event) and re-deliver it when there is a new Observer. An example for unexpected re-delivery is: Let's\n+ * say the {@link TokenRequestObservable} is owned by a {@link androidx.lifecycle.ViewModel} which lives\n+ * through multiple {@code Activity::onCreate} - {@code Activity::onDestroy} spans and in\n+ * {@code Activity::onCreate} we register a {@link TokenRequestObserver} to this {@link androidx.lifecycle.ViewModel}\n+ * 's scoped Observable. When a background thread requests for a token, the Observer will receive the request and\n+ * process it. If the user begins rotating the screen (i.e configuration changed) then {@code Activity::onDestroy} is\n+ * called and once the rotation is done {@code Activity::onCreate} method will be called again, which will result in\n+ * the registration of a new {@link TokenRequestObserver} and will internally cause\n+ * {@link androidx.lifecycle.LiveData} to re-deliver the old cached/handled Event, which we definitely don't want the\n+ * new Observer to handle. To identify such an Event, the Observer uses {@link TokenRequestHandle#isConsumed()}.\n+ */\n+class TokenRequestHandle {\n+    // The scope of the token requested by the handle owner.\n+    private final List<String> scopes;\n+    // Indicates whether the handle has already been consumed by a TokenRequestObserver.\n+    private boolean isConsumed;\n+    // The latch that signals the handle owner that the token acquisition operation is completed (successfully or\n+    // error-ed).\n+    private CountDownLatch latch = new CountDownLatch(1);\n+    // The retrieved access token.\n+    private AccessToken token;\n+    // The error on token retrieval.\n+    private Throwable error;\n+\n+    /**\n+     * Creates a {@link TokenRequestHandle}.\n+     *\n+     * @param scopes The requested token scope.\n+     */\n+    public TokenRequestHandle(List<String> scopes) {\n+        this.scopes = new ArrayList<>(scopes);\n+    }\n+\n+    /**\n+     * Synchronously wait for the arrival of an {@link AccessToken} requested via\n+     * {@link TokenRequestObservable#sendRequest(List)}}.\n+     *\n+     * @param timeout The maximum time to wait in milliseconds.\n+     * @return The {@link AccessToken}.\n+     * @throws Throwable if there is an error.\n+     */\n+    public AccessToken waitForToken(Duration timeout) throws Throwable {\n+        this.latch.await(timeout.toMillis(), TimeUnit.MILLISECONDS);\n+\n+        if (this.error != null) {\n+            throw this.error;\n+        } else {\n+            return this.token;\n+        }\n+    }\n+\n+    /**\n+     * PACKAGE PRIVATE METHOD.", "originalCommit": "beb97c921c9508c8c2fa47f556e74c402f77dde0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2OTU5NQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/238#discussion_r458269595", "bodyText": "Good catch! This comes from the time these classes were originally written and I must have missed it when migrating them to azure-core.", "author": "vcolin7", "createdAt": "2020-07-21T17:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzMzQ2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNDY5OA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/238#discussion_r457634698", "bodyText": "I know you didn't actually change this code, but in iOS we don't check if the token is expired, we just let the service call fail with the appropriate error response. This goes with the pattern of not implementing logic in the client library, that is also implemented on the service side (since you can never guarantee the same logic will be implemented identically in both places).\nCan or should we remove this check? If the answer is yes, it doesn't need to be done in this PR, we should just file an issue.", "author": "bsiegel", "createdAt": "2020-07-20T19:15:44Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/credential/TokenRequestObservableAuthInterceptor.java", "diffHunk": "@@ -28,30 +28,31 @@\n     private final ReentrantLock sendRequestLock = new ReentrantLock();\n \n     /**\n-     * Creates TokenRequestObservableAuthInterceptor.\n+     * Creates a {@link TokenRequestObservableAuthInterceptor}.\n      *\n-     * @param scopes the scope for the requested token\n+     * @param scopes The scope for the requested token.\n      */\n     public TokenRequestObservableAuthInterceptor(List<String> scopes) {\n         this.scopes = new ArrayList<>(scopes);\n     }\n \n     /**\n-     * @return the token request observable that UI can Observe for access-token\n-     * request coming from this interceptor.\n+     * @return The {@link TokenRequestObservable} that the UI can observe for an {@link AccessToken} request coming\n+     * from this interceptor.\n      */\n     public TokenRequestObservable getTokenRequestObservable() {\n         return this.requestObservable;\n     }\n \n+    @NonNull\n     @Override\n-    public Response intercept(Chain chain) throws IOException {\n-        if (this.accessToken != null && !this.accessToken.isExpired()) {\n-            return setAuthenticationHeader(chain, this.accessToken);\n-        } else {\n+    public Response intercept(@NonNull Chain chain) throws IOException {\n+        if (this.accessToken == null || this.accessToken.isExpired()) {", "originalCommit": "beb97c921c9508c8c2fa47f556e74c402f77dde0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2ODk1MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/238#discussion_r458268950", "bodyText": "Checking for expiration is simple enough with this AccessToken class and I believe that we should not make additional calls if we can easily know if the token is still valid, however, I do not know what other checks might be ocurring in the service side, so discussing this a little further sounds like a good idea.", "author": "vcolin7", "createdAt": "2020-07-21T17:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNDY5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNTk1Nw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/238#discussion_r457635957", "bodyText": "I know we talked about using this \"T-2 minutes\" value as the expiration before, but I couldn't for the life of me figure out where that idea originated. I ended up taking it out of the iOS implementation. If we keep expiresAt here (which we may not depending on the decision about checking for expiration), we should probably remove this magic 2 minute adjustment to the expiration time.", "author": "bsiegel", "createdAt": "2020-07-20T19:18:05Z", "path": "sdk/core/azure-core/src/main/java/com/azure/android/core/credential/AccessToken.java", "diffHunk": "@@ -14,30 +14,30 @@\n \n     /**\n      * Creates an access token instance.\n-     * @param token the token string.\n-     * @param expiresAt the expiration time.\n+     * @param token The token string.\n+     * @param expiresAt The expiration time.\n      */\n     public AccessToken(String token, OffsetDateTime expiresAt) {\n         this.token = token;\n         this.expiresAt = expiresAt.minusMinutes(2); // 2 minutes before token expires", "originalCommit": "beb97c921c9508c8c2fa47f556e74c402f77dde0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0MDY1Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/238#discussion_r457740652", "bodyText": "I just talked to Jianghao on the Java team about this since they use the 2 minutes subtraction. He explained that the idea is that there's delay between when an access token's expiry time is checked in the BearerTokenPolicy and when the request reaches the service, this is more so when the Netty request queue is backed up and a request is sitting there for a long time. However, they are changing this behavior soon so AccessToken returns the actual expiresAt value and moving it to SimpleaTokenCache.\nBased on this. I believe we can do as you suggest and remove the subtraction altogether and worry about the delay between a request being made and it being serviced somewhere else.", "author": "vcolin7", "createdAt": "2020-07-20T23:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNTk1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwNjMyNg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/238#discussion_r457806326", "bodyText": "Interesting, so on iOS we don't look at the expiration at all, we just send the token to the service and let it respond with an error if it's expired. Does it make sense to do that here too? Relatedly:\nWe don't currently have any mechanism for caching tokens (which I believe is also true for Android? - correct me if I'm wrong). If that's the case, then there's really no advantage to trying to determine whether a token is expired or not in the client library. Now, if we did have token caching implemented, then it would make sense since the expiration of the token would be the trigger to evict it from the cache.\nI will have to look into this caching mechanism, because the logic for caching tokens seemed pretty complex when I started thinking about it so that's why I didn't try to implement one for iOS.", "author": "bsiegel", "createdAt": "2020-07-21T02:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNTk1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4OTUxMA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/238#discussion_r458289510", "bodyText": "I agree that checking for expiration in the cache makes way more sense than to do it in the token itself. For now, I think removing this check from the token and let the service tell us if it's expired is the best way to go, like you suggested.", "author": "vcolin7", "createdAt": "2020-07-21T18:04:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzNTk1Nw=="}], "type": "inlineReview"}, {"oid": "c05f0a0195b9f05685f46b67298958f24f2c0d4b", "url": "https://github.com/Azure/azure-sdk-for-android/commit/c05f0a0195b9f05685f46b67298958f24f2c0d4b", "message": "Marked methods that were intended to be package private in TokenRequestHandle as such.", "committedDate": "2020-07-21T17:32:46Z", "type": "commit"}, {"oid": "cddd1be94bb84acbbc4d142d3a65bc3eb2c0aa18", "url": "https://github.com/Azure/azure-sdk-for-android/commit/cddd1be94bb84acbbc4d142d3a65bc3eb2c0aa18", "message": "Merge branch 'dev' into identity-classes", "committedDate": "2020-07-21T17:59:20Z", "type": "commit"}, {"oid": "afec14129400b0899f5685e3d9e8f31022628c1c", "url": "https://github.com/Azure/azure-sdk-for-android/commit/afec14129400b0899f5685e3d9e8f31022628c1c", "message": "Removed magic number subtraction from AccessToken's expiresAt field.", "committedDate": "2020-07-23T23:08:32Z", "type": "commit"}, {"oid": "3cb3932c02c484c694e2248354f1879f85f00c72", "url": "https://github.com/Azure/azure-sdk-for-android/commit/3cb3932c02c484c694e2248354f1879f85f00c72", "message": "Merge branch 'dev' into identity-classes", "committedDate": "2020-07-28T23:29:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1Mzk1MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/238#discussion_r461953950", "bodyText": "This is no longer true, does this test file need to be updated?", "author": "bsiegel", "createdAt": "2020-07-28T23:38:36Z", "path": "sdk/core/azure-core/src/test/java/com/azure/android/core/credential/AccessTokenTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.azure.android.core.credential;\n+\n+import org.junit.Test;\n+import org.threeten.bp.OffsetDateTime;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class AccessTokenTest {\n+    private String token = \"testToken\";\n+    private OffsetDateTime time; // Expiration is set to 2 minutes before the given time.", "originalCommit": "3cb3932c02c484c694e2248354f1879f85f00c72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAwOTIwNA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/238#discussion_r462009204", "bodyText": "I thought I had made this change, let me do that right now.", "author": "vcolin7", "createdAt": "2020-07-29T03:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1Mzk1MA=="}], "type": "inlineReview"}, {"oid": "94845f687b21639edf1f5b714d596a05d77cb21f", "url": "https://github.com/Azure/azure-sdk-for-android/commit/94845f687b21639edf1f5b714d596a05d77cb21f", "message": "Fixed comment in test AccessTokenTest.", "committedDate": "2020-07-29T03:03:14Z", "type": "commit"}, {"oid": "6b6bbc00ea70c7ac70c8919e921070db07fcb027", "url": "https://github.com/Azure/azure-sdk-for-android/commit/6b6bbc00ea70c7ac70c8919e921070db07fcb027", "message": "Merge branch 'identity-classes' of github.com:vcolin7/azure-sdk-for-android into identity-classes", "committedDate": "2020-07-29T03:03:32Z", "type": "commit"}]}