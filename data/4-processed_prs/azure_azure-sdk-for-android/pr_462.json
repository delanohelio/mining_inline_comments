{"pr_number": 462, "pr_title": "Renaming", "pr_createdAt": "2020-11-19T19:43:12Z", "pr_url": "https://github.com/Azure/azure-sdk-for-android/pull/462", "timeline": [{"oid": "060e3fb33c81f9bab8cc57b59d716beaf879d9e9", "url": "https://github.com/Azure/azure-sdk-for-android/commit/060e3fb33c81f9bab8cc57b59d716beaf879d9e9", "message": "Rename thread member to participant, rename member to participant", "committedDate": "2020-11-16T20:41:40Z", "type": "commit"}, {"oid": "a35f861629c44a281d82d6ad89264fc9e49c7aa2", "url": "https://github.com/Azure/azure-sdk-for-android/commit/a35f861629c44a281d82d6ad89264fc9e49c7aa2", "message": "Rename ReadReceipt to ChatMessageReadReceipt in model", "committedDate": "2020-11-17T23:05:30Z", "type": "commit"}, {"oid": "06ddb12c2549107326999691cfd23c5c5676dc15", "url": "https://github.com/Azure/azure-sdk-for-android/commit/06ddb12c2549107326999691cfd23c5c5676dc15", "message": "Rename updateChatThread to updateTopic", "committedDate": "2020-11-18T00:57:30Z", "type": "commit"}, {"oid": "cd57f24dc2126cd906b11752f4af90a84e1dd75f", "url": "https://github.com/Azure/azure-sdk-for-android/commit/cd57f24dc2126cd906b11752f4af90a84e1dd75f", "message": "Ability to add a participant, previously we can only add participants in batch", "committedDate": "2020-11-18T22:00:19Z", "type": "commit"}, {"oid": "d7a1b8493acdd5ee003172eaea944199f9aaf396", "url": "https://github.com/Azure/azure-sdk-for-android/commit/d7a1b8493acdd5ee003172eaea944199f9aaf396", "message": "Return messageId instead of SendChatMessageResult", "committedDate": "2020-11-19T05:31:19Z", "type": "commit"}, {"oid": "420d56364e54e294b52731022280e2590bcae359", "url": "https://github.com/Azure/azure-sdk-for-android/commit/420d56364e54e294b52731022280e2590bcae359", "message": "Keep system messages as they are used by trouter / cns\nbring back some auto deleted imports", "committedDate": "2020-11-19T19:37:57Z", "type": "commit"}, {"oid": "30653f763f7ab72b570796e7345adf229fcce1db", "url": "https://github.com/Azure/azure-sdk-for-android/commit/30653f763f7ab72b570796e7345adf229fcce1db", "message": "Update swagger to preview-3, run autorest on new swagger\nadd back SendChatMessageResult\nupdate readme", "committedDate": "2020-11-23T05:07:17Z", "type": "commit"}, {"oid": "84d6b7cf666689b41dfcb9b4a89f285e5327bf5a", "url": "https://github.com/Azure/azure-sdk-for-android/commit/84d6b7cf666689b41dfcb9b4a89f285e5327bf5a", "message": "Add converter as convenience layer to convert SendChatMessageResult into String messageId\nupdate test, remove redundant tests\nupdate readme", "committedDate": "2020-11-23T05:38:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwNzIzOA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r528807238", "bodyText": "This part is not true anymore : 'The initiator of the create request must be in the list of participants of the chat thread.'\nLets start removing that from comments and docs with the changes we are doing.", "author": "juancamilor", "createdAt": "2020-11-23T15:55:32Z", "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -79,11 +81,11 @@ AzureCommunicationChatServiceAsyncClient client = new AzureCommunicationChatServ\n \n User access tokens enable you to build client applications that directly authenticate to Azure Communication Services. Refer [here](https://docs.microsoft.com/azure/communication-services/quickstarts/access-tokens) to learn how to create a user and issue a User Access Token.\n \n-The id for the user created above will be necessary later to add said user as a member of a new chat thread. The initiator of the create request must be in the list of members of the chat thread.\n+The id for the user created above will be necessary later to add said user as a participant of a new chat thread. The initiator of the create request must be in the list of participants of the chat thread.", "originalCommit": "84d6b7cf666689b41dfcb9b4a89f285e5327bf5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NjkzMw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r529166933", "bodyText": "In Java we use explicit imports, not sure if we need to follow the same for Android. What do you think @bsiegel, @anuchandy, @JonathanGiles?", "author": "vcolin7", "createdAt": "2020-11-24T02:51:52Z", "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -5,47 +5,13 @@\n package com.azure.android.communication.chat;\n \n import com.azure.android.communication.chat.implementation.AzureCommunicationChatServiceImpl;\n-import com.azure.android.communication.chat.models.AddChatThreadMembersRequest;\n-import com.azure.android.communication.chat.models.ChatMessage;\n-import com.azure.android.communication.chat.models.ChatMessagesCollection;\n-import com.azure.android.communication.chat.models.ChatThread;\n-import com.azure.android.communication.chat.models.ChatThreadInfo;\n-import com.azure.android.communication.chat.models.ChatThreadMember;\n-import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n-import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n-import com.azure.android.communication.chat.models.CreateChatThreadRequest;\n-import com.azure.android.communication.chat.models.ErrorException;\n-import com.azure.android.communication.chat.models.MultiStatusResponse;\n-import com.azure.android.communication.chat.models.ReadReceipt;\n-import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n-import com.azure.android.communication.chat.models.SendChatMessageRequest;\n-import com.azure.android.communication.chat.models.SendChatMessageResult;\n-import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n-import com.azure.android.communication.chat.models.UpdateChatMessageRequest;\n-import com.azure.android.communication.chat.models.UpdateChatThreadRequest;\n+import com.azure.android.communication.chat.models.*;", "originalCommit": "84d6b7cf666689b41dfcb9b4a89f285e5327bf5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkyNTA5OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r529925099", "bodyText": "I had been trying to avoid \"import *\" as much as I can. But this change may be overwritten by next swagger change, I wouldn't be overly picky on this.", "author": "JianpingChen", "createdAt": "2020-11-24T22:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NjkzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzMzAxOA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r530633018", "bodyText": "Does this mean the \"import *\" statements coming from AutoRest?", "author": "vcolin7", "createdAt": "2020-11-25T20:42:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NjkzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2ODE2OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r529168169", "bodyText": "Why was this removed? This was not included in the issue description nor the details link.", "author": "vcolin7", "createdAt": "2020-11-24T02:55:34Z", "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -61,100 +27,61 @@\n     }\n \n     /**\n-     * Gets read receipts for a thread.\n+     * Gets chat message read receipts for a thread.\n      *\n-     * @param chatThreadId Thread id to get the read receipts for.\n-     * @param callback the Callback that receives the response.\n-     * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @throws ErrorException thrown if the request is rejected by server.\n-     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     */\n-    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {", "originalCommit": "84d6b7cf666689b41dfcb9b4a89f285e5327bf5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MDM0Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r530590346", "bodyText": "We do not want to expose \"naked\" page but only expose either PagedDataCollection or PageResponseDataCollection", "author": "JianpingChen", "createdAt": "2020-11-25T19:09:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2ODE2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyNzg3Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r530627876", "bodyText": "Some of my comments on a client might apply to its async/sync counterpart. Also, were these changes made manually or were they re-generated from an updated Swagger?\n\nMost comments you list here are generated code from Swagger, the list message methods are removed by new autorest generator, Jianping did it intentionally to force user use Page methods.", "author": "marche0133", "createdAt": "2020-11-25T20:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2ODE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2ODYzNg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r529168636", "bodyText": "Why was this removed? This was not included in the issue description nor the details link.", "author": "vcolin7", "createdAt": "2020-11-24T02:56:59Z", "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -61,100 +27,61 @@\n     }\n \n     /**\n-     * Gets read receipts for a thread.\n+     * Gets chat message read receipts for a thread.\n      *\n-     * @param chatThreadId Thread id to get the read receipts for.\n-     * @param callback the Callback that receives the response.\n-     * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @throws ErrorException thrown if the request is rejected by server.\n-     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     */\n-    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n-        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n-    }\n-\n-    /**\n-     * Gets read receipts for a thread.\n-     *\n-     * @param chatThreadId Thread id to get the read receipts for.\n-     * @param collectionCallback the Callback that receives the response collection.\n+     * @param chatThreadId Thread id to get the chat message read receipts for.\n+     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.\n+     * @param skip Skips chat message read receipts up to a specified position in response.\n+     * @param callback the Callback that receives the response collection.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n-        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    public void listChatReadReceiptsPages(String chatThreadId, Integer maxPageSize, Integer skip, final Callback<AsyncPagedDataCollection<ChatMessageReadReceipt, Page<ChatMessageReadReceipt>>> callback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, maxPageSize, skip, callback);\n     }\n \n     /**\n      * Sends a read receipt event to a thread, on behalf of a user.\n      *\n      * @param chatThreadId Thread id to send the read receipt event to.\n-     * @param body Request payload for sending a read receipt.\n+     * @param sendReadReceiptRequest Request payload for sending a read receipt.\n      * @param callback the Callback that receives the response.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n-        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, sendReadReceiptRequest, callback);\n     }\n \n     /**\n      * Sends a message to a thread.\n      *\n      * @param chatThreadId The thread id to send the message to.\n-     * @param body Details of the message to send.\n-     * @param callback the Callback that receives the response.\n-     * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @throws ErrorException thrown if the request is rejected by server.\n-     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     */\n-    public void sendChatMessage(String chatThreadId, SendChatMessageRequest body, final Callback<SendChatMessageResult> callback) {\n-        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n-    }\n-\n-    /**\n-     * Gets a list of messages from a thread.\n-     *\n-     * @param chatThreadId The thread id of the message.\n-     * @param maxPageSize The maximum number of messages to be returned per page.\n-     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n-     * @param callback the Callback that receives the response.\n-     * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @throws ErrorException thrown if the request is rejected by server.\n-     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     */\n-    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {", "originalCommit": "84d6b7cf666689b41dfcb9b4a89f285e5327bf5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MTI4MA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r530591280", "bodyText": "Similar idea as for ReadReceipts, the less we expose the lower we lose backward compatibility", "author": "JianpingChen", "createdAt": "2020-11-25T19:11:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2ODYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2ODk2Mg==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r529168962", "bodyText": "Should this also include a skip parameter like listChatReadReceiptsPages above? It seems other paging methods accept said parameter.", "author": "vcolin7", "createdAt": "2020-11-24T02:57:56Z", "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -61,100 +27,61 @@\n     }\n \n     /**\n-     * Gets read receipts for a thread.\n+     * Gets chat message read receipts for a thread.\n      *\n-     * @param chatThreadId Thread id to get the read receipts for.\n-     * @param callback the Callback that receives the response.\n-     * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @throws ErrorException thrown if the request is rejected by server.\n-     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     */\n-    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n-        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n-    }\n-\n-    /**\n-     * Gets read receipts for a thread.\n-     *\n-     * @param chatThreadId Thread id to get the read receipts for.\n-     * @param collectionCallback the Callback that receives the response collection.\n+     * @param chatThreadId Thread id to get the chat message read receipts for.\n+     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.\n+     * @param skip Skips chat message read receipts up to a specified position in response.\n+     * @param callback the Callback that receives the response collection.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n-        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    public void listChatReadReceiptsPages(String chatThreadId, Integer maxPageSize, Integer skip, final Callback<AsyncPagedDataCollection<ChatMessageReadReceipt, Page<ChatMessageReadReceipt>>> callback) {\n+        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, maxPageSize, skip, callback);\n     }\n \n     /**\n      * Sends a read receipt event to a thread, on behalf of a user.\n      *\n      * @param chatThreadId Thread id to send the read receipt event to.\n-     * @param body Request payload for sending a read receipt.\n+     * @param sendReadReceiptRequest Request payload for sending a read receipt.\n      * @param callback the Callback that receives the response.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest body, final Callback<Void> callback) {\n-        this.serviceClient.sendChatReadReceipt(chatThreadId, body, callback);\n+    public void sendChatReadReceipt(String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest, final Callback<Void> callback) {\n+        this.serviceClient.sendChatReadReceipt(chatThreadId, sendReadReceiptRequest, callback);\n     }\n \n     /**\n      * Sends a message to a thread.\n      *\n      * @param chatThreadId The thread id to send the message to.\n-     * @param body Details of the message to send.\n-     * @param callback the Callback that receives the response.\n-     * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @throws ErrorException thrown if the request is rejected by server.\n-     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     */\n-    public void sendChatMessage(String chatThreadId, SendChatMessageRequest body, final Callback<SendChatMessageResult> callback) {\n-        this.serviceClient.sendChatMessage(chatThreadId, body, callback);\n-    }\n-\n-    /**\n-     * Gets a list of messages from a thread.\n-     *\n-     * @param chatThreadId The thread id of the message.\n-     * @param maxPageSize The maximum number of messages to be returned per page.\n-     * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n-     * @param callback the Callback that receives the response.\n-     * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @throws ErrorException thrown if the request is rejected by server.\n-     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     */\n-    public void listChatMessages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatMessage>> callback) {\n-        this.serviceClient.listChatMessages(chatThreadId, maxPageSize, startTime, callback);\n-    }\n-\n-    /**\n-     * Gets a list of messages from a thread.\n-     *\n-     * @param chatThreadId The thread id of the message.\n+     * @param sendChatMessageRequest Details of the message to send.\n      * @param callback the Callback that receives the response.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void listChatMessages(String chatThreadId, final Callback<Page<ChatMessage>> callback) {\n-        this.serviceClient.listChatMessages(chatThreadId, callback);\n+    public void sendChatMessage(String chatThreadId, SendChatMessageRequest sendChatMessageRequest, final Callback<String> callback) {\n+        this.serviceClient.sendChatMessage(chatThreadId, sendChatMessageRequest, callback);\n     }\n \n     /**\n      * Gets a list of messages from a thread.\n      *\n      * @param chatThreadId The thread id of the message.\n-     * @param collectionCallback the Callback that receives the response collection.\n      * @param maxPageSize The maximum number of messages to be returned per page.\n      * @param startTime The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response collection.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void listChatMessagesPages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> collectionCallback) {\n-        this.serviceClient.listChatMessagesPagesAsync(chatThreadId, maxPageSize, startTime, collectionCallback);\n+    public void listChatMessagesPages(String chatThreadId, Integer maxPageSize, OffsetDateTime startTime, final Callback<AsyncPagedDataCollection<ChatMessage, Page<ChatMessage>>> callback) {", "originalCommit": "84d6b7cf666689b41dfcb9b4a89f285e5327bf5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2OTg5Mw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r529169893", "bodyText": "Have you brought up the naming of the skip parameter with the arch board? I saw there was a board review but this was not mentioned in the meeting's notes. Some could argue in favor of using use offset for instance, although personally I prefer skip in this case.", "author": "vcolin7", "createdAt": "2020-11-24T03:00:46Z", "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -61,100 +27,61 @@\n     }\n \n     /**\n-     * Gets read receipts for a thread.\n+     * Gets chat message read receipts for a thread.\n      *\n-     * @param chatThreadId Thread id to get the read receipts for.\n-     * @param callback the Callback that receives the response.\n-     * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @throws ErrorException thrown if the request is rejected by server.\n-     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     */\n-    public void listChatReadReceipts(String chatThreadId, final Callback<Page<ReadReceipt>> callback) {\n-        this.serviceClient.listChatReadReceipts(chatThreadId, callback);\n-    }\n-\n-    /**\n-     * Gets read receipts for a thread.\n-     *\n-     * @param chatThreadId Thread id to get the read receipts for.\n-     * @param collectionCallback the Callback that receives the response collection.\n+     * @param chatThreadId Thread id to get the chat message read receipts for.\n+     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.\n+     * @param skip Skips chat message read receipts up to a specified position in response.\n+     * @param callback the Callback that receives the response collection.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void listChatReadReceiptsPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ReadReceipt, Page<ReadReceipt>>> collectionCallback) {\n-        this.serviceClient.listChatReadReceiptsPagesAsync(chatThreadId, collectionCallback);\n+    public void listChatReadReceiptsPages(String chatThreadId, Integer maxPageSize, Integer skip, final Callback<AsyncPagedDataCollection<ChatMessageReadReceipt, Page<ChatMessageReadReceipt>>> callback) {", "originalCommit": "84d6b7cf666689b41dfcb9b4a89f285e5327bf5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3MDE4Ng==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r529170186", "bodyText": "Are we just removing all listing methods in favor of ones that return a paged collection?", "author": "vcolin7", "createdAt": "2020-11-24T03:01:44Z", "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -214,124 +141,101 @@ public void sendTypingNotification(String chatThreadId, final Callback<Void> cal\n     }\n \n     /**\n-     * Gets the members of a thread.\n+     * Gets the participants of a thread.\n      *\n-     * @param chatThreadId Thread id to get members for.\n-     * @param callback the Callback that receives the response.\n+     * @param chatThreadId Thread id to get participants for.\n+     * @param maxPageSize The maximum number of participants to be returned per page.\n+     * @param skip Skips participants up to a specified position in response.\n+     * @param callback the Callback that receives the response collection.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {", "originalCommit": "84d6b7cf666689b41dfcb9b4a89f285e5327bf5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MTc3OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r530591779", "bodyText": "Yes. Anu and I think that's easier to maintain backward compatibility", "author": "JianpingChen", "createdAt": "2020-11-25T19:12:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3MDE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3MDYwNA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r529170604", "bodyText": "nit; I would put the simpler overloads first, helps with readability.", "author": "vcolin7", "createdAt": "2020-11-24T03:03:05Z", "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -214,124 +141,101 @@ public void sendTypingNotification(String chatThreadId, final Callback<Void> cal\n     }\n \n     /**\n-     * Gets the members of a thread.\n+     * Gets the participants of a thread.\n      *\n-     * @param chatThreadId Thread id to get members for.\n-     * @param callback the Callback that receives the response.\n+     * @param chatThreadId Thread id to get participants for.\n+     * @param maxPageSize The maximum number of participants to be returned per page.\n+     * @param skip Skips participants up to a specified position in response.\n+     * @param callback the Callback that receives the response collection.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n-        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    public void listChatParticipantsPages(String chatThreadId, Integer maxPageSize, Integer skip, final Callback<AsyncPagedDataCollection<ChatParticipant, Page<ChatParticipant>>> callback) {\n+        this.serviceClient.listChatParticipantsPagesAsync(chatThreadId, maxPageSize, skip, callback);\n     }\n \n     /**\n-     * Gets the members of a thread.\n+     * Adds thread participants to a thread. If participants already exist, no change occurs.\n      *\n-     * @param chatThreadId Thread id to get members for.\n-     * @param collectionCallback the Callback that receives the response collection.\n-     * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @throws ErrorException thrown if the request is rejected by server.\n-     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     */\n-    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n-        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n-    }\n-\n-    /**\n-     * Adds thread members to a thread. If members already exist, no change occurs.\n-     *\n-     * @param chatThreadId Id of the thread to add members to.\n-     * @param body Thread members to be added to the thread.\n+     * @param chatThreadId Id of the thread to add participants to.\n+     * @param addChatParticipantsRequest Participants to be added to the thread.\n      * @param callback the Callback that receives the response.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersRequest body, final Callback<Void> callback) {\n-        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    public void addChatParticipants(String chatThreadId, AddChatParticipantsRequest addChatParticipantsRequest, final Callback<Void> callback) {\n+        this.serviceClient.addChatParticipants(chatThreadId, addChatParticipantsRequest, callback);\n     }\n \n     /**\n-     * Remove a member from a thread.\n+     * Remove a participant from a thread.\n      *\n-     * @param chatThreadId Thread id to remove the member from.\n-     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param chatThreadId Thread id to remove the participant from.\n+     * @param chatParticipantId Id of the thread participant to remove from the thread.\n      * @param callback the Callback that receives the response.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n-        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    public void removeChatParticipant(String chatThreadId, String chatParticipantId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatParticipant(chatThreadId, chatParticipantId, callback);\n     }\n \n     /**\n      * Creates a chat thread.\n      *\n-     * @param body Request payload for creating a chat thread.\n-     * @param callback the Callback that receives the response.\n-     * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @throws ErrorException thrown if the request is rejected by server.\n-     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     */\n-    public void createChatThread(CreateChatThreadRequest body, final Callback<MultiStatusResponse> callback) {\n-        this.serviceClient.createChatThread(body, callback);\n-    }\n-\n-    /**\n-     * Gets the list of chat threads of a user.\n-     *\n-     * @param maxPageSize The maximum number of chat threads returned per page.\n-     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param createChatThreadRequest Request payload for creating a chat thread.\n+     * @param azureAcsIdempotencyKey Idempotency key to ensure request retries don't yield different side effects.\n      * @param callback the Callback that receives the response.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void listChatThreads(Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatThreadInfo>> callback) {\n-        this.serviceClient.listChatThreads(maxPageSize, startTime, callback);\n+    public void createChatThread(CreateChatThreadRequest createChatThreadRequest, String azureAcsIdempotencyKey, final Callback<ChatThread> callback) {\n+        this.serviceClient.createChatThread(createChatThreadRequest, azureAcsIdempotencyKey, callback);\n     }\n \n     /**\n-     * Gets the list of chat threads of a user.\n+     * Creates a chat thread.\n      *\n+     * @param createChatThreadRequest Request payload for creating a chat thread.\n      * @param callback the Callback that receives the response.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void listChatThreads(final Callback<Page<ChatThreadInfo>> callback) {\n-        this.serviceClient.listChatThreads(callback);\n+    public void createChatThread(CreateChatThreadRequest createChatThreadRequest, final Callback<ChatThread> callback) {", "originalCommit": "84d6b7cf666689b41dfcb9b4a89f285e5327bf5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3MDc2NA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r529170764", "bodyText": "Does this also not accept a skip parameter?", "author": "vcolin7", "createdAt": "2020-11-24T03:03:42Z", "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceAsyncClient.java", "diffHunk": "@@ -214,124 +141,101 @@ public void sendTypingNotification(String chatThreadId, final Callback<Void> cal\n     }\n \n     /**\n-     * Gets the members of a thread.\n+     * Gets the participants of a thread.\n      *\n-     * @param chatThreadId Thread id to get members for.\n-     * @param callback the Callback that receives the response.\n+     * @param chatThreadId Thread id to get participants for.\n+     * @param maxPageSize The maximum number of participants to be returned per page.\n+     * @param skip Skips participants up to a specified position in response.\n+     * @param callback the Callback that receives the response collection.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void listChatThreadMembers(String chatThreadId, final Callback<Page<ChatThreadMember>> callback) {\n-        this.serviceClient.listChatThreadMembers(chatThreadId, callback);\n+    public void listChatParticipantsPages(String chatThreadId, Integer maxPageSize, Integer skip, final Callback<AsyncPagedDataCollection<ChatParticipant, Page<ChatParticipant>>> callback) {\n+        this.serviceClient.listChatParticipantsPagesAsync(chatThreadId, maxPageSize, skip, callback);\n     }\n \n     /**\n-     * Gets the members of a thread.\n+     * Adds thread participants to a thread. If participants already exist, no change occurs.\n      *\n-     * @param chatThreadId Thread id to get members for.\n-     * @param collectionCallback the Callback that receives the response collection.\n-     * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @throws ErrorException thrown if the request is rejected by server.\n-     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     */\n-    public void listChatThreadMembersPages(String chatThreadId, final Callback<AsyncPagedDataCollection<ChatThreadMember, Page<ChatThreadMember>>> collectionCallback) {\n-        this.serviceClient.listChatThreadMembersPagesAsync(chatThreadId, collectionCallback);\n-    }\n-\n-    /**\n-     * Adds thread members to a thread. If members already exist, no change occurs.\n-     *\n-     * @param chatThreadId Id of the thread to add members to.\n-     * @param body Thread members to be added to the thread.\n+     * @param chatThreadId Id of the thread to add participants to.\n+     * @param addChatParticipantsRequest Participants to be added to the thread.\n      * @param callback the Callback that receives the response.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void addChatThreadMembers(String chatThreadId, AddChatThreadMembersRequest body, final Callback<Void> callback) {\n-        this.serviceClient.addChatThreadMembers(chatThreadId, body, callback);\n+    public void addChatParticipants(String chatThreadId, AddChatParticipantsRequest addChatParticipantsRequest, final Callback<Void> callback) {\n+        this.serviceClient.addChatParticipants(chatThreadId, addChatParticipantsRequest, callback);\n     }\n \n     /**\n-     * Remove a member from a thread.\n+     * Remove a participant from a thread.\n      *\n-     * @param chatThreadId Thread id to remove the member from.\n-     * @param chatMemberId Id of the thread member to remove from the thread.\n+     * @param chatThreadId Thread id to remove the participant from.\n+     * @param chatParticipantId Id of the thread participant to remove from the thread.\n      * @param callback the Callback that receives the response.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void removeChatThreadMember(String chatThreadId, String chatMemberId, final Callback<Void> callback) {\n-        this.serviceClient.removeChatThreadMember(chatThreadId, chatMemberId, callback);\n+    public void removeChatParticipant(String chatThreadId, String chatParticipantId, final Callback<Void> callback) {\n+        this.serviceClient.removeChatParticipant(chatThreadId, chatParticipantId, callback);\n     }\n \n     /**\n      * Creates a chat thread.\n      *\n-     * @param body Request payload for creating a chat thread.\n-     * @param callback the Callback that receives the response.\n-     * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @throws ErrorException thrown if the request is rejected by server.\n-     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     */\n-    public void createChatThread(CreateChatThreadRequest body, final Callback<MultiStatusResponse> callback) {\n-        this.serviceClient.createChatThread(body, callback);\n-    }\n-\n-    /**\n-     * Gets the list of chat threads of a user.\n-     *\n-     * @param maxPageSize The maximum number of chat threads returned per page.\n-     * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param createChatThreadRequest Request payload for creating a chat thread.\n+     * @param azureAcsIdempotencyKey Idempotency key to ensure request retries don't yield different side effects.\n      * @param callback the Callback that receives the response.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void listChatThreads(Integer maxPageSize, OffsetDateTime startTime, final Callback<Page<ChatThreadInfo>> callback) {\n-        this.serviceClient.listChatThreads(maxPageSize, startTime, callback);\n+    public void createChatThread(CreateChatThreadRequest createChatThreadRequest, String azureAcsIdempotencyKey, final Callback<ChatThread> callback) {\n+        this.serviceClient.createChatThread(createChatThreadRequest, azureAcsIdempotencyKey, callback);\n     }\n \n     /**\n-     * Gets the list of chat threads of a user.\n+     * Creates a chat thread.\n      *\n+     * @param createChatThreadRequest Request payload for creating a chat thread.\n      * @param callback the Callback that receives the response.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void listChatThreads(final Callback<Page<ChatThreadInfo>> callback) {\n-        this.serviceClient.listChatThreads(callback);\n+    public void createChatThread(CreateChatThreadRequest createChatThreadRequest, final Callback<ChatThread> callback) {\n+        this.serviceClient.createChatThread(createChatThreadRequest, callback);\n     }\n \n     /**\n      * Gets the list of chat threads of a user.\n      *\n-     * @param collectionCallback the Callback that receives the response collection.\n      * @param maxPageSize The maximum number of chat threads returned per page.\n      * @param startTime The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.\n+     * @param callback the Callback that receives the response collection.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      */\n-    public void listChatThreadsPages(Integer maxPageSize, OffsetDateTime startTime, final Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>> collectionCallback) {\n-        this.serviceClient.listChatThreadsPagesAsync(maxPageSize, startTime, collectionCallback);\n+    public void listChatThreadsPages(Integer maxPageSize, OffsetDateTime startTime, final Callback<AsyncPagedDataCollection<ChatThreadInfo, Page<ChatThreadInfo>>> callback) {", "originalCommit": "84d6b7cf666689b41dfcb9b4a89f285e5327bf5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3MTc1OA==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r529171758", "bodyText": "I don't think this is very descriptive. Maybe we could use something like \"An empty response indicating the operation's completion.\"", "author": "vcolin7", "createdAt": "2020-11-24T03:06:46Z", "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceClient.java", "diffHunk": "@@ -61,90 +39,66 @@\n     }\n \n     /**\n-     * Gets read receipts for a thread.\n-     * \n-     * @param chatThreadId Thread id to get the read receipts for.\n+     * Gets chat message read receipts for a thread.\n+     *\n+     * @param chatThreadId Thread id to get the chat message read receipts for.\n+     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.\n+     * @param skip Skips chat message read receipts up to a specified position in response.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     * @return read receipts for a thread.\n+     * @return chat message read receipts for a thread.\n      */\n-    public Response<Page<ReadReceipt>> listChatReadReceiptsWithRestResponse(String chatThreadId) {\n-        return this.serviceClient.listChatReadReceiptsWithRestResponse(chatThreadId);\n+    public PagedDataResponseCollection<ChatMessageReadReceipt, Page<ChatMessageReadReceipt>> listChatReadReceiptsWithPageResponse(String chatThreadId, Integer maxPageSize, Integer skip) {\n+        return this.serviceClient.listChatReadReceiptsWithPageResponse(chatThreadId, maxPageSize, skip);\n     }\n \n     /**\n-     * Gets read receipts for a thread.\n-     * \n-     * @param chatThreadId Thread id to get the read receipts for.\n+     * Gets chat message read receipts for a thread.\n+     *\n+     * @param chatThreadId Thread id to get the chat message read receipts for.\n+     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.\n+     * @param skip Skips chat message read receipts up to a specified position in response.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     * @return read receipts for a thread.\n+     * @return chat message read receipts for a thread.\n      */\n-    public PagedDataResponseCollection<ReadReceipt, Page<ReadReceipt>> listChatReadReceiptsWithPageResponse(String chatThreadId) {\n-        return this.serviceClient.listChatReadReceiptsWithPageResponse(chatThreadId);\n-    }\n-\n-    /**\n-     * Gets read receipts for a thread.\n-     * \n-     * @param chatThreadId Thread id to get the read receipts for.\n-     * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @throws ErrorException thrown if the request is rejected by server.\n-     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     * @return read receipts for a thread.\n-     */\n-    public PagedDataCollection<ReadReceipt, Page<ReadReceipt>> listChatReadReceiptsWithPage(String chatThreadId) {\n-        return this.serviceClient.listChatReadReceiptsWithPage(chatThreadId);\n+    public PagedDataCollection<ChatMessageReadReceipt, Page<ChatMessageReadReceipt>> listChatReadReceiptsWithPage(String chatThreadId, Integer maxPageSize, Integer skip) {\n+        return this.serviceClient.listChatReadReceiptsWithPage(chatThreadId, maxPageSize, skip);\n     }\n \n     /**\n      * Sends a read receipt event to a thread, on behalf of a user.\n-     * \n+     *\n      * @param chatThreadId Thread id to send the read receipt event to.\n-     * @param body Request payload for sending a read receipt.\n+     * @param sendReadReceiptRequest Request payload for sending a read receipt.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     * @return the response.\n+     * @return the completion.", "originalCommit": "84d6b7cf666689b41dfcb9b4a89f285e5327bf5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3MTk4NQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r529171985", "bodyText": "The return Javadoc should read \"The ID of the message sent.\" or something like that.", "author": "vcolin7", "createdAt": "2020-11-24T03:07:30Z", "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceClient.java", "diffHunk": "@@ -61,90 +39,66 @@\n     }\n \n     /**\n-     * Gets read receipts for a thread.\n-     * \n-     * @param chatThreadId Thread id to get the read receipts for.\n+     * Gets chat message read receipts for a thread.\n+     *\n+     * @param chatThreadId Thread id to get the chat message read receipts for.\n+     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.\n+     * @param skip Skips chat message read receipts up to a specified position in response.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     * @return read receipts for a thread.\n+     * @return chat message read receipts for a thread.\n      */\n-    public Response<Page<ReadReceipt>> listChatReadReceiptsWithRestResponse(String chatThreadId) {\n-        return this.serviceClient.listChatReadReceiptsWithRestResponse(chatThreadId);\n+    public PagedDataResponseCollection<ChatMessageReadReceipt, Page<ChatMessageReadReceipt>> listChatReadReceiptsWithPageResponse(String chatThreadId, Integer maxPageSize, Integer skip) {\n+        return this.serviceClient.listChatReadReceiptsWithPageResponse(chatThreadId, maxPageSize, skip);\n     }\n \n     /**\n-     * Gets read receipts for a thread.\n-     * \n-     * @param chatThreadId Thread id to get the read receipts for.\n+     * Gets chat message read receipts for a thread.\n+     *\n+     * @param chatThreadId Thread id to get the chat message read receipts for.\n+     * @param maxPageSize The maximum number of chat message read receipts to be returned per page.\n+     * @param skip Skips chat message read receipts up to a specified position in response.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     * @return read receipts for a thread.\n+     * @return chat message read receipts for a thread.\n      */\n-    public PagedDataResponseCollection<ReadReceipt, Page<ReadReceipt>> listChatReadReceiptsWithPageResponse(String chatThreadId) {\n-        return this.serviceClient.listChatReadReceiptsWithPageResponse(chatThreadId);\n-    }\n-\n-    /**\n-     * Gets read receipts for a thread.\n-     * \n-     * @param chatThreadId Thread id to get the read receipts for.\n-     * @throws IllegalArgumentException thrown if parameters fail the validation.\n-     * @throws ErrorException thrown if the request is rejected by server.\n-     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     * @return read receipts for a thread.\n-     */\n-    public PagedDataCollection<ReadReceipt, Page<ReadReceipt>> listChatReadReceiptsWithPage(String chatThreadId) {\n-        return this.serviceClient.listChatReadReceiptsWithPage(chatThreadId);\n+    public PagedDataCollection<ChatMessageReadReceipt, Page<ChatMessageReadReceipt>> listChatReadReceiptsWithPage(String chatThreadId, Integer maxPageSize, Integer skip) {\n+        return this.serviceClient.listChatReadReceiptsWithPage(chatThreadId, maxPageSize, skip);\n     }\n \n     /**\n      * Sends a read receipt event to a thread, on behalf of a user.\n-     * \n+     *\n      * @param chatThreadId Thread id to send the read receipt event to.\n-     * @param body Request payload for sending a read receipt.\n+     * @param sendReadReceiptRequest Request payload for sending a read receipt.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     * @return the response.\n+     * @return the completion.\n      */\n-    public Response<Void> sendChatReadReceiptWithRestResponse(String chatThreadId, SendReadReceiptRequest body) {\n-        return this.serviceClient.sendChatReadReceiptWithRestResponse(chatThreadId, body);\n+    public Response<Void> sendChatReadReceiptWithRestResponse(String chatThreadId, SendReadReceiptRequest sendReadReceiptRequest) {\n+        return this.serviceClient.sendChatReadReceiptWithRestResponse(chatThreadId, sendReadReceiptRequest);\n     }\n \n     /**\n      * Sends a message to a thread.\n-     * \n+     *\n      * @param chatThreadId The thread id to send the message to.\n-     * @param body Details of the message to send.\n+     * @param sendChatMessageRequest Details of the message to send.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n      * @return result of the send message operation.", "originalCommit": "84d6b7cf666689b41dfcb9b4a89f285e5327bf5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3MjQ3OQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r529172479", "bodyText": "Same comment as above, this needs to be more descriptive. Apply this to all instances where we use \"the completion\".", "author": "vcolin7", "createdAt": "2020-11-24T03:09:17Z", "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/android/communication/chat/AzureCommunicationChatServiceClient.java", "diffHunk": "@@ -201,143 +142,134 @@\n \n     /**\n      * Updates a message.\n-     * \n+     *\n      * @param chatThreadId The thread id to which the message was sent.\n      * @param chatMessageId The message id.\n-     * @param body Details of the request to update the message.\n+     * @param updateChatMessageRequest Details of the request to update the message.\n      * @throws IllegalArgumentException thrown if parameters fail the validation.\n      * @throws ErrorException thrown if the request is rejected by server.\n      * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.\n-     * @return the response.\n+     * @return the completion.", "originalCommit": "84d6b7cf666689b41dfcb9b4a89f285e5327bf5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3Mjk1MQ==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r529172951", "bodyText": "We probably want to use explicit imports.", "author": "vcolin7", "createdAt": "2020-11-24T03:10:39Z", "path": "sdk/communication/azure-communication-chat/src/main/java/com/azure/android/communication/chat/implementation/AzureCommunicationChatServiceImpl.java", "diffHunk": "@@ -4,24 +4,8 @@\n \n package com.azure.android.communication.chat.implementation;\n \n-import com.azure.android.communication.chat.models.AddChatThreadMembersRequest;\n-import com.azure.android.communication.chat.models.ChatMessage;\n-import com.azure.android.communication.chat.models.ChatMessagesCollection;\n-import com.azure.android.communication.chat.models.ChatThread;\n-import com.azure.android.communication.chat.models.ChatThreadInfo;\n-import com.azure.android.communication.chat.models.ChatThreadMember;\n-import com.azure.android.communication.chat.models.ChatThreadMembersCollection;\n-import com.azure.android.communication.chat.models.ChatThreadsInfoCollection;\n-import com.azure.android.communication.chat.models.CreateChatThreadRequest;\n-import com.azure.android.communication.chat.models.ErrorException;\n-import com.azure.android.communication.chat.models.MultiStatusResponse;\n-import com.azure.android.communication.chat.models.ReadReceipt;\n-import com.azure.android.communication.chat.models.ReadReceiptsCollection;\n-import com.azure.android.communication.chat.models.SendChatMessageRequest;\n-import com.azure.android.communication.chat.models.SendChatMessageResult;\n-import com.azure.android.communication.chat.models.SendReadReceiptRequest;\n-import com.azure.android.communication.chat.models.UpdateChatMessageRequest;\n-import com.azure.android.communication.chat.models.UpdateChatThreadRequest;\n+import com.azure.android.communication.chat.implementation.converters.SendChatMessageResultConverter;\n+import com.azure.android.communication.chat.models.*;", "originalCommit": "84d6b7cf666689b41dfcb9b4a89f285e5327bf5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE3NzA4Nw==", "url": "https://github.com/Azure/azure-sdk-for-android/pull/462#discussion_r529177087", "bodyText": "Maybe we can rephrase this to:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The current Server - Chat Api Version is **2020-11-01-preview3**.\n          \n          \n            \n            \n          \n          \n            \n            The current Client - Chat SDK Version is **1.0.0-beta.3**.\n          \n          \n            \n            The current Azure Communication Chat Service Version is **2020-11-01-preview3**.\n          \n          \n            \n            \n          \n          \n            \n            The current Azure Communication Chat SDK Version is **1.0.0-beta.3**.\n          \n      \n    \n    \n  \n\nOr some other way that makes it easier to read.", "author": "vcolin7", "createdAt": "2020-11-24T03:24:24Z", "path": "sdk/communication/azure-communication-chat/README.md", "diffHunk": "@@ -15,7 +15,9 @@ This package contains the Chat client library for Azure Communication Services.\n * The library is written in Java 8. Your application must be built with Android Gradle plugin 3.0.0 or later, and must be configured to [enable Java 8 language desugaring](https://developer.android.com/studio/write/java8-support.html#supported_features) to use this library. Java 8 language features that require a target API level > 21 are not used, nor are any Java 8+ APIs that would require the Java 8+ API desugaring provided by Android Gradle plugin 4.0.0.\n \n ### Versions available\n-The current version of this library is **1.0.0-beta.2**.\n+The current Server - Chat Api Version is **2020-11-01-preview3**.\n+\n+The current Client - Chat SDK Version is **1.0.0-beta.3**.", "originalCommit": "84d6b7cf666689b41dfcb9b4a89f285e5327bf5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ce1412f3f55d8efe174b836b71070f30189a2271", "url": "https://github.com/Azure/azure-sdk-for-android/commit/ce1412f3f55d8efe174b836b71070f30189a2271", "message": "Update sdk/communication/azure-communication-chat/README.md\n\nCo-authored-by: vcolin7 <vicolina@microsoft.com>", "committedDate": "2020-11-24T21:27:18Z", "type": "commit"}, {"oid": "0b6f3bf0806e803003a61ab9bd7bca138ccbb68d", "url": "https://github.com/Azure/azure-sdk-for-android/commit/0b6f3bf0806e803003a61ab9bd7bca138ccbb68d", "message": "Update readme, update JavaDoc return for message ID", "committedDate": "2020-11-24T22:32:47Z", "type": "commit"}]}