{"pr_number": 2929, "pr_title": "OpenApiMembersManager", "pr_createdAt": "2020-10-12T18:31:30Z", "pr_url": "https://github.com/CESNET/perun/pull/2929", "timeline": [{"oid": "e5d45c8d66040d36523f9710b72db0da85cb7b07", "url": "https://github.com/CESNET/perun/commit/e5d45c8d66040d36523f9710b72db0da85cb7b07", "message": "OpenApiMembersManagerNeededMethodsImplemented", "committedDate": "2020-10-26T04:37:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2NDQzNw==", "url": "https://github.com/CESNET/perun/pull/2929#discussion_r512464437", "bodyText": "I think this attribute should be optional. Therefore, you can reference it.", "author": "balcirakpeter", "createdAt": "2020-10-27T07:26:44Z", "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -8140,6 +8206,241 @@ paths:\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n+  /json/membersManager/findCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersForGroup\n+      summary: Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+        If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+        If this group is top level group, so find richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/findCompleteRichMembers/attrs:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersByAttributes\n+      summary: Return list of richMembers from perun by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+        - name: \"allowedStatuses[]\"", "originalCommit": "e5d45c8d66040d36523f9710b72db0da85cb7b07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2NDkxMA==", "url": "https://github.com/CESNET/perun/pull/2929#discussion_r512464910", "bodyText": "I think when there is no groupId, this parameter does not make sense", "author": "balcirakpeter", "createdAt": "2020-10-27T07:27:53Z", "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -8140,6 +8206,241 @@ paths:\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n+  /json/membersManager/findCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersForGroup\n+      summary: Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+        If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+        If this group is top level group, so find richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/findCompleteRichMembers/attrs:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersByAttributes\n+      summary: Return list of richMembers from perun by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'", "originalCommit": "e5d45c8d66040d36523f9710b72db0da85cb7b07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ3MzYzNg==", "url": "https://github.com/CESNET/perun/pull/2929#discussion_r512473636", "bodyText": "This referenced attribute is set as required but I think for this scenario it should be optional.", "author": "balcirakpeter", "createdAt": "2020-10-27T07:46:44Z", "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -8140,6 +8206,241 @@ paths:\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n+  /json/membersManager/findCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersForGroup\n+      summary: Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+        If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+        If this group is top level group, so find richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/findCompleteRichMembers/attrs:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersByAttributes\n+      summary: Return list of richMembers from perun by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+        - name: \"allowedStatuses[]\"\n+          description: \"list of allowed statuses List<String>\"\n+          in: query\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+          default:\n+            $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/createMember/extSource:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberFromExtSource\n+      summary: Creates a new member and sets all member's attributes from the candidate.\n+        Also stores the associated user if doesn't exist. This method is used by the registrar.\n+        This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberFromExtSource\n+              description: \"input to create member from extSource\"\n+              type: object\n+              required:\n+                - vo\n+                - extSourceName\n+                - extSourceType\n+                - login\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                extSourceName: { type: string }\n+                extSourceType: { type: string }\n+                login: { type: string }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+\n+  /json/membersManager/createMember/u:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: CreateMemberForUser\n+      summary: Creates a new member from user. This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForUser\n+              description: \"input to create member for user\"\n+              type: object\n+              required:\n+                - vo\n+                - user\n+              properties:\n+                vo: { type: integer }\n+                user: { type: integer }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/createMember/c:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberForCandidate\n+      summary: Creates a new member from candidate returned by the method VosManager.findCandidates\n+        which fills Candidate.userExtSource. This method also add user to all groups in list. Empty list of groups is ok,\n+        the behavior is then same like in the method without list of groups. This method runs asynchronously\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForCandidate\n+              description: \"input to create member for candidate\"\n+              type: object\n+              required:\n+                - vo\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/getCompleteRichMembers/v:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForVo\n+      summary: Get all RichMembers with attributes specific for list of attrsNames from the vo and have only status\n+        which is contain in list of statuses. If attrsNames is empty or null return all attributes for specific richMembers.\n+        If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/voId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'", "originalCommit": "e5d45c8d66040d36523f9710b72db0da85cb7b07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MDIzNw==", "url": "https://github.com/CESNET/perun/pull/2929#discussion_r512550237", "bodyText": "You can use attrsNames which is already declared as a parameter but you have to fix its name. I have noticed it is wrong attrsNames -> attrsNames[]", "author": "Vojtech-Sassmann", "createdAt": "2020-10-27T09:52:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ3MzYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ3NTA2Nw==", "url": "https://github.com/CESNET/perun/pull/2929#discussion_r512475067", "bodyText": "Same here.", "author": "balcirakpeter", "createdAt": "2020-10-27T07:49:37Z", "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -8140,6 +8206,241 @@ paths:\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n+  /json/membersManager/findCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersForGroup\n+      summary: Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+        If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+        If this group is top level group, so find richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/findCompleteRichMembers/attrs:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersByAttributes\n+      summary: Return list of richMembers from perun by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+        - name: \"allowedStatuses[]\"\n+          description: \"list of allowed statuses List<String>\"\n+          in: query\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+          default:\n+            $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/createMember/extSource:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberFromExtSource\n+      summary: Creates a new member and sets all member's attributes from the candidate.\n+        Also stores the associated user if doesn't exist. This method is used by the registrar.\n+        This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberFromExtSource\n+              description: \"input to create member from extSource\"\n+              type: object\n+              required:\n+                - vo\n+                - extSourceName\n+                - extSourceType\n+                - login\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                extSourceName: { type: string }\n+                extSourceType: { type: string }\n+                login: { type: string }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+\n+  /json/membersManager/createMember/u:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: CreateMemberForUser\n+      summary: Creates a new member from user. This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForUser\n+              description: \"input to create member for user\"\n+              type: object\n+              required:\n+                - vo\n+                - user\n+              properties:\n+                vo: { type: integer }\n+                user: { type: integer }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/createMember/c:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberForCandidate\n+      summary: Creates a new member from candidate returned by the method VosManager.findCandidates\n+        which fills Candidate.userExtSource. This method also add user to all groups in list. Empty list of groups is ok,\n+        the behavior is then same like in the method without list of groups. This method runs asynchronously\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForCandidate\n+              description: \"input to create member for candidate\"\n+              type: object\n+              required:\n+                - vo\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/getCompleteRichMembers/v:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForVo\n+      summary: Get all RichMembers with attributes specific for list of attrsNames from the vo and have only status\n+        which is contain in list of statuses. If attrsNames is empty or null return all attributes for specific richMembers.\n+        If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/voId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/getCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForGroup\n+      summary: Get all RichMembers with attributes specific for list of attrsNames from the group and have only status\n+        which is contain in list of statuses. If attrsNames is empty or null return all attributes for specific richMembers.\n+        If listOfStatuses is empty or null, return all possible statuses. If lookingInParentGroup is true,\n+        get all these richMembers only for parentGroup of this group. If this group is top level group,\n+        so get richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'", "originalCommit": "e5d45c8d66040d36523f9710b72db0da85cb7b07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU0MDQ1NQ==", "url": "https://github.com/CESNET/perun/pull/2929#discussion_r512540455", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /json/membersManager/deleteMembers:\n          \n          \n            \n              /urlinjsonout/membersManager/deleteMembers:", "author": "Vojtech-Sassmann", "createdAt": "2020-10-27T09:37:34Z", "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -8122,11 +8153,46 @@ paths:\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n+  /json/membersManager/deleteMembers:", "originalCommit": "e5d45c8d66040d36523f9710b72db0da85cb7b07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MTI0Nw==", "url": "https://github.com/CESNET/perun/pull/2929#discussion_r512551247", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      description: status (VALID | INVALID | SUSPENDED | EXPIRED | DISABLED)\n          \n          \n            \n                      description: status (VALID | INVALID | EXPIRED | DISABLED)", "author": "Vojtech-Sassmann", "createdAt": "2020-10-27T09:53:58Z", "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -8140,6 +8206,241 @@ paths:\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n+  /json/membersManager/findCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersForGroup\n+      summary: Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+        If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+        If this group is top level group, so find richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/findCompleteRichMembers/attrs:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersByAttributes\n+      summary: Return list of richMembers from perun by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+        - name: \"allowedStatuses[]\"\n+          description: \"list of allowed statuses List<String>\"\n+          in: query\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+          default:\n+            $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/createMember/extSource:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberFromExtSource\n+      summary: Creates a new member and sets all member's attributes from the candidate.\n+        Also stores the associated user if doesn't exist. This method is used by the registrar.\n+        This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberFromExtSource\n+              description: \"input to create member from extSource\"\n+              type: object\n+              required:\n+                - vo\n+                - extSourceName\n+                - extSourceType\n+                - login\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                extSourceName: { type: string }\n+                extSourceType: { type: string }\n+                login: { type: string }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+\n+  /json/membersManager/createMember/u:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: CreateMemberForUser\n+      summary: Creates a new member from user. This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForUser\n+              description: \"input to create member for user\"\n+              type: object\n+              required:\n+                - vo\n+                - user\n+              properties:\n+                vo: { type: integer }\n+                user: { type: integer }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/createMember/c:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberForCandidate\n+      summary: Creates a new member from candidate returned by the method VosManager.findCandidates\n+        which fills Candidate.userExtSource. This method also add user to all groups in list. Empty list of groups is ok,\n+        the behavior is then same like in the method without list of groups. This method runs asynchronously\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForCandidate\n+              description: \"input to create member for candidate\"\n+              type: object\n+              required:\n+                - vo\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/getCompleteRichMembers/v:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForVo\n+      summary: Get all RichMembers with attributes specific for list of attrsNames from the vo and have only status\n+        which is contain in list of statuses. If attrsNames is empty or null return all attributes for specific richMembers.\n+        If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/voId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/getCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForGroup\n+      summary: Get all RichMembers with attributes specific for list of attrsNames from the group and have only status\n+        which is contain in list of statuses. If attrsNames is empty or null return all attributes for specific richMembers.\n+        If listOfStatuses is empty or null, return all possible statuses. If lookingInParentGroup is true,\n+        get all these richMembers only for parentGroup of this group. If this group is top level group,\n+        so get richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/getCompleteRichMembers/g-r:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForGroupResource\n+      summary: Get all RichMembers with attributes specific for list of attrsNames.\n+        Attributes are defined by member (user) and resource (facility) objects.\n+        It returns also user-facility (in userAttributes of RichMember) and member-resource (in memberAttributes of RichMember) attributes.\n+        Members are defined by group and are filtered by list of allowed statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/resourceId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - name: \"allowedStatuses[]\"\n+          description: \"list of allowed statuses List<String>\"\n+          in: query\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/membersManager/setStatus:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: setStatus\n+      summary: Set membership status of a member.\n+      parameters:\n+        - $ref: '#/components/parameters/memberId'\n+        - name: status\n+          description: status (VALID | INVALID | SUSPENDED | EXPIRED | DISABLED)", "originalCommit": "e5d45c8d66040d36523f9710b72db0da85cb7b07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MTgyOQ==", "url": "https://github.com/CESNET/perun/pull/2929#discussion_r512551829", "bodyText": "This is no longer possible, please, remove it.", "author": "Vojtech-Sassmann", "createdAt": "2020-10-27T09:54:47Z", "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -8140,6 +8206,241 @@ paths:\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n+  /json/membersManager/findCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersForGroup\n+      summary: Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+        If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+        If this group is top level group, so find richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/findCompleteRichMembers/attrs:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersByAttributes\n+      summary: Return list of richMembers from perun by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+        - name: \"allowedStatuses[]\"\n+          description: \"list of allowed statuses List<String>\"\n+          in: query\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+          default:\n+            $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/createMember/extSource:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberFromExtSource\n+      summary: Creates a new member and sets all member's attributes from the candidate.\n+        Also stores the associated user if doesn't exist. This method is used by the registrar.\n+        This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberFromExtSource\n+              description: \"input to create member from extSource\"\n+              type: object\n+              required:\n+                - vo\n+                - extSourceName\n+                - extSourceType\n+                - login\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                extSourceName: { type: string }\n+                extSourceType: { type: string }\n+                login: { type: string }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+\n+  /json/membersManager/createMember/u:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: CreateMemberForUser\n+      summary: Creates a new member from user. This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForUser\n+              description: \"input to create member for user\"\n+              type: object\n+              required:\n+                - vo\n+                - user\n+              properties:\n+                vo: { type: integer }\n+                user: { type: integer }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/createMember/c:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberForCandidate\n+      summary: Creates a new member from candidate returned by the method VosManager.findCandidates\n+        which fills Candidate.userExtSource. This method also add user to all groups in list. Empty list of groups is ok,\n+        the behavior is then same like in the method without list of groups. This method runs asynchronously\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForCandidate\n+              description: \"input to create member for candidate\"\n+              type: object\n+              required:\n+                - vo\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/getCompleteRichMembers/v:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForVo\n+      summary: Get all RichMembers with attributes specific for list of attrsNames from the vo and have only status\n+        which is contain in list of statuses. If attrsNames is empty or null return all attributes for specific richMembers.\n+        If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/voId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/getCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForGroup\n+      summary: Get all RichMembers with attributes specific for list of attrsNames from the group and have only status\n+        which is contain in list of statuses. If attrsNames is empty or null return all attributes for specific richMembers.\n+        If listOfStatuses is empty or null, return all possible statuses. If lookingInParentGroup is true,\n+        get all these richMembers only for parentGroup of this group. If this group is top level group,\n+        so get richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/getCompleteRichMembers/g-r:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForGroupResource\n+      summary: Get all RichMembers with attributes specific for list of attrsNames.\n+        Attributes are defined by member (user) and resource (facility) objects.\n+        It returns also user-facility (in userAttributes of RichMember) and member-resource (in memberAttributes of RichMember) attributes.\n+        Members are defined by group and are filtered by list of allowed statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/resourceId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - name: \"allowedStatuses[]\"\n+          description: \"list of allowed statuses List<String>\"\n+          in: query\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/membersManager/setStatus:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: setStatus\n+      summary: Set membership status of a member.\n+      parameters:\n+        - $ref: '#/components/parameters/memberId'\n+        - name: status\n+          description: status (VALID | INVALID | SUSPENDED | EXPIRED | DISABLED)\n+          schema:\n+            type: string\n+          in: query\n+          required: true\n+        - name: message\n+          description: \"reason for suspension\"\n+          schema:\n+            type: string\n+          in: query\n+          required: false", "originalCommit": "e5d45c8d66040d36523f9710b72db0da85cb7b07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "14f6ffea3259130b0756838167322b1fd357f610", "url": "https://github.com/CESNET/perun/commit/14f6ffea3259130b0756838167322b1fd357f610", "message": "OpenApiMembersManagerNeededMethodsImplemented", "committedDate": "2020-12-07T12:22:00Z", "type": "commit"}, {"oid": "14f6ffea3259130b0756838167322b1fd357f610", "url": "https://github.com/CESNET/perun/commit/14f6ffea3259130b0756838167322b1fd357f610", "message": "OpenApiMembersManagerNeededMethodsImplemented", "committedDate": "2020-12-07T12:22:00Z", "type": "forcePushed"}, {"oid": "be98d5440925f32f91b335dc4746e973c35b88d7", "url": "https://github.com/CESNET/perun/commit/be98d5440925f32f91b335dc4746e973c35b88d7", "message": "Merge branch 'master' into OpenApiMemberSection", "committedDate": "2020-12-07T12:31:42Z", "type": "commit"}]}