{"pr_number": 6641, "pr_title": "mEDRA DOI fetcher implementation.", "pr_createdAt": "2020-06-26T08:14:03Z", "pr_url": "https://github.com/JabRef/jabref/pull/6641", "timeline": [{"oid": "2d75da284cf9431b14a38a8399d0337d70c7bfee", "url": "https://github.com/JabRef/jabref/commit/2d75da284cf9431b14a38a8399d0337d70c7bfee", "message": "mEDRA DOI fetcher implementation.", "committedDate": "2020-06-26T07:59:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1MTA4MQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r446051081", "bodyText": "Why don't you use the application/x-bibtex header as for the other DOI fetcher well? That would make fetching a lot easier!", "author": "Siedlerchr", "createdAt": "2020-06-26T08:43:46Z", "path": "src/main/java/org/jabref/logic/net/URLDownload.java", "diffHunk": "@@ -81,6 +82,11 @@ public URLDownload(String source) throws MalformedURLException {\n     public URLDownload(URL source) {\n         this.source = source;\n         this.addHeader(\"User-Agent\", URLDownload.USER_AGENT);\n+\n+        // mEDRA requires Accept header attribute with desired content type\n+        if (source.toString().contains(Medra.API_URL)) {\n+            this.addHeader(\"Accept\", Medra.CONTENT_TYPE_JSON);", "originalCommit": "2d75da284cf9431b14a38a8399d0337d70c7bfee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI1MzUwNA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r446253504", "bodyText": "I made a few tests but bibtext type seems to not work as exptected with mEDRA.\nHere are the outputs of URLDonwnload.asString():\nmEDRA\n@article{OLLETT, Andrew_2018, title={S?tav?hana and N?g?rjuna}, ISSN={2507-0347}, url={http://doi.org/10.2143/JIABS.41.0.3285748}, DOI={10.2143/JIABS.41.0.3285748}, number={0}, journal={Journal of the International Association of Buddhist Studies}, publisher={Peeters online journals}, author={OLLETT, Andrew}, year={2018}, pages={421\u2013472} }\nINSPIREHEP (similarly for GoogleScholar):\n@article{Maggiore:2017jjr,\nauthor = \"Maggiore, M. and Campo, D. and Antonini, P. and Lombardi, A. and Manzolaro, M. and Andrighetto, A. and Monetti, A. and Scarpa, D. and Esposito, J. and Silvestrin, L.\",\ntitle = \"{SPES: A new cyclotron-based facility for research and applications with high-intensity beams}\",\ndoi = \"10.1142/S0217732317400107\",\njournal = \"Mod. Phys. Lett. A\",\nvolume = \"32\",\nnumber = \"17\",\npages = \"1740010\",\nyear = \"2017\"\n}\n\nFrom what I understand, as a result, BibtexParser is not able to parse mEDRA string and returns no entries, while it works correctly in the other case.", "author": "mind000", "createdAt": "2020-06-26T15:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1MTA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5MDk2OA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r446290968", "bodyText": "In general this works, but the specific authors of the citation contain umlauts which seem to be not correclty returned:\nhttp://doi.org/10.2143/JIABS.41.0.3285748", "author": "Siedlerchr", "createdAt": "2020-06-26T16:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1MTA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NDg4Nw==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r446694887", "bodyText": "I performed several other tests with random mEDRA DOIs retrieved at https://api.medra.org/doiprefixlist?doiPrefix=10.2143 but only 1 over maybe 50 happened to be correctly parsed in bibtex type. Json type, instead, never failed and the only errors was due to the 500 error code returned by mEDRA.\nAt this point i believe the bibtex style returned by mEDRA could be the issue, but since this is my first contribution I'm really open to any other advice or suggestion you think i could work on to tackle this issue.\nI'm committing some refactoring of the previous code along with WebFetchers class modified to show mEDRA agency in the drop down list of the Web Search pane.", "author": "mind000", "createdAt": "2020-06-28T20:32:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1MTA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5OTgyNQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r446699825", "bodyText": "Thanks for the investigation! I think it's fine to use the json as workaround then.\nFrom a users perspective, I don't want to know to whom a DOI actually belongs or to manually try another DOI fetcher.\nIt would be nice if there was some \"magic\" in the background. I just enter the DOI (no matter who \"owns\" it ) and I get my bibtex entry from it.\nSome suggestions: Implement the IDBasedFetcher interface, it's meant for fetchers which work based on an ID, e.g DOI, ISBN\nThe SearchBasedFetcher is meant for fetcher where you can enter a search term e.g. \"abcdf\"\nScenario:\n\nUser enters doi (e.g. new entry from DOI)\nIf the DOI starts with medra prefix number => call medra fetcher and return result\nelse use the normal DOI results.\n\nWe have a similar setup for ISBNFetcher, we first check site a  and then site b in case the first didn't return anything.\nFor parsing DOIs we have the DOI.java class.\n\nAdd a method like getPrefix to return the prefix of the DOI and then you could use that in the above scenario\n\nI hope that makes it a bit more clear now. Feel free to ask if you have any further questions or problems.", "author": "Siedlerchr", "createdAt": "2020-06-28T21:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1MTA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyNzE3OQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r447027179", "bodyText": "Thanks @Siedlerchr, I really appreciate your suggestions.\nHere are some more checks I've performed.\nI've figured out that the DoiFetcher.performSearchById was correctly retrieving the bibtex of mEDRA DOIs, even before I made any changes, but cannot parse it for the reason already mentioned. Thus, JabRef not retrieving mEDRA DOIs metadata was not the issue in #6602.\nFurthermore, I have not found an easy way of knowing the agency by prefix through mEDRA api without retrieving a list of DOIs registered for a particular prefix and then checking whether this is empty or not, so I don't think a getPrefix method would help.\nThe most straightforward way seems to be calling https://doi.org/doiRA/10.2143/10.2143/JCS.2.0.583382 (DOI handbook - 5.2.1) which in turn returns a single object array as follow:\n[ { \"DOI\": \"10.2143/JCS.2.0.583382\", \"RA\": \"mEDRA\" } ]\nI've then used this and created a getAgency method on DoiFetcher. This in turn would provide the condition to move processing toward mEDRA fetcher.\nLast, as suggested I have implemented IdBasedParserFetcher instead of SearchBasedParserFetcher and overridden IdBasedParserFetcher.performSearchByID within Medra class.\nI hope my info are clear and if you think this could be a good way of proceeding I would update the PR.\nIn this case I should remove SearchBasedParserFetcher from the open PR. Can I do delete it directly from the Files Changed view of this PR? Is it the correct way to do it?\nThank you so much.", "author": "mind000", "createdAt": "2020-06-29T14:45:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1MTA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2NjE5OQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r447066199", "bodyText": "Ah, yes, then the DoiFetcher getAgency makes more sense.\nJust delete/modify your changes locally and push your new commit with the changes, the PR will then be updated automatically.", "author": "Siedlerchr", "createdAt": "2020-06-29T15:38:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1MTA4MQ=="}], "type": "inlineReview"}, {"oid": "df31be7b9ef6f88116c7ac387e976db437cfbe66", "url": "https://github.com/JabRef/jabref/commit/df31be7b9ef6f88116c7ac387e976db437cfbe66", "message": "mEDRA DOI fetcher implementation", "committedDate": "2020-06-28T20:32:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5OTE5OQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r446699199", "bodyText": "You should wrap the stream in a Try With Resources Statement to make sure that the stream gets closed automatically on errors. And also please rename \"b\" to a more meaningful variable, e.g. readByte\nhttps://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html", "author": "Siedlerchr", "createdAt": "2020-06-28T21:16:24Z", "path": "src/main/java/org/jabref/logic/importer/SearchBasedParserFetcher.java", "diffHunk": "@@ -68,10 +70,19 @@ default URLDownload getUrlDownload(String query) throws MalformedURLException, F\n         }\n \n         try (InputStream stream = getUrlDownload(query).asInputStream()) {\n-            List<BibEntry> fetchedEntries = getParser().parseEntries(stream);\n+            List<BibEntry> fetchedEntries = new ArrayList<>();\n \n-            // Post-cleanup\n-            fetchedEntries.forEach(this::doPostCleanup);\n+            // check if there is anything to read since mEDRA '404 not found' returns nothing\n+            PushbackInputStream pushbackInputStream = new PushbackInputStream(stream);", "originalCommit": "df31be7b9ef6f88116c7ac387e976db437cfbe66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMTI4MQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448611281", "bodyText": "This is still not adressed. Needs to be as soon as our git issues are resolved ^^", "author": "koppor", "createdAt": "2020-07-01T20:55:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5OTE5OQ=="}], "type": "inlineReview"}, {"oid": "b521e7c2ca289925f3b0b0bd8168f27784722339", "url": "https://github.com/JabRef/jabref/commit/b521e7c2ca289925f3b0b0bd8168f27784722339", "message": "mEDRA DOI fetcher implementation", "committedDate": "2020-06-30T07:52:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MDE3NA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r447570174", "bodyText": "We try to avoid null. Instead you can use Optionals.\nhttps://blog.indrek.io/articles/optionals-in-java-8/", "author": "Siedlerchr", "createdAt": "2020-06-30T10:10:12Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -84,4 +100,22 @@ private void doPostCleanup(BibEntry entry) {\n             return Collections.emptyList();\n         }\n     }\n+\n+    /**\n+     * Returns registration agency. Null if no agency is found.\n+     *\n+     * @param doi the doi to be searched\n+     * @throws JSONException\n+     * @throws IOException\n+     */\n+    public String getAgency(DOI doi) throws JSONException, IOException {\n+        String agency = null;", "originalCommit": "b521e7c2ca289925f3b0b0bd8168f27784722339", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzMTU1Mg==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r447631552", "bodyText": "Could be something like this?\npublic Optional<String> getAgency(DOI doi) throws JSONException, IOException {\n         Optional<String> agency = Optional.empty();\n         URLDownload download = new URLDownload(DOI.AGENCY_RESOLVER + \"/\" + doi.getDOI());\n         JSONObject response = new JSONArray(download.asString()).getJSONObject(0);\n         if (response != null) {\n            agency = Optional.of(response.optString(\"RA\"));\n        }\n        return agency;\n    }\n\nand the condition in performSearchById would then be\nif (\"medra\".equalsIgnoreCase(getAgency(doi.get()).get()))", "author": "mind000", "createdAt": "2020-06-30T12:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MDE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzNTE1Mg==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r447635152", "bodyText": "You need to check if the value is present first:\ngetAgency(...).ifPresent() && getAgency(...).get().equals(medra)", "author": "Siedlerchr", "createdAt": "2020-06-30T12:13:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MDE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY0MzQ1OA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r447643458", "bodyText": "Yes, sure, and I also needs to change agency = Optional.of(response.optString(\"RA\")); to agency = Optional.ofNullable(response.optString(\"RA\")); since optString could return a null.", "author": "mind000", "createdAt": "2020-06-30T12:28:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MDE3NA=="}], "type": "inlineReview"}, {"oid": "353907949014fde2110f0f7574ff983213511ee7", "url": "https://github.com/JabRef/jabref/commit/353907949014fde2110f0f7574ff983213511ee7", "message": "mEDRA DOI fetcher implementation", "committedDate": "2020-06-30T19:44:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4MTA1Mw==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448181053", "bodyText": "Do you really need the SearchBasedParserFetcher interface?\nI think this is superflous. The IDBasedFetcher should be sufficient", "author": "Siedlerchr", "createdAt": "2020-07-01T07:50:23Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/Medra.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PushbackInputStream;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.IdBasedParserFetcher;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.SearchBasedParserFetcher;\n+import org.jabref.logic.importer.util.JsonReader;\n+import org.jabref.logic.importer.util.MediaTypes;\n+import org.jabref.logic.net.URLDownload;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.EntryType;\n+import org.jabref.model.entry.types.StandardEntryType;\n+import kong.unirest.json.JSONArray;\n+import kong.unirest.json.JSONException;\n+import kong.unirest.json.JSONObject;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+/**\n+ * A class for fetching DOIs from Medra\n+ *\n+ * @see <a href=\"https://data.medra.org\">mEDRA Content Negotiation API</a> for an overview of the API\n+ * <p>\n+ * It requires \"Accept\" request Header attribute to be set to desired content-type.\n+ */\n+public class Medra implements SearchBasedParserFetcher, IdBasedParserFetcher {", "originalCommit": "353907949014fde2110f0f7574ff983213511ee7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4ODQ4OA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448188488", "bodyText": "Ah yes, I forgot to remove it.\nIn this case I don't see why i should add Medra Fetcher to org.jabref.logic.importer.WebFetchersTest array test, since it seems that this already loads Medra class to expected array of getIdBasedFetchersReturnsAllFetcherDerivingFromIdBasedFetcher() and the test is passed.\nAm I missing anything?", "author": "mind000", "createdAt": "2020-07-01T08:04:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4MTA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMDUwMg==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448220502", "bodyText": "That was probaby the reason for the failing test at first. If it passes now it's fine. Nothing to do then.\nPlease take a look at the checkstyle issues, than it's ready to go!", "author": "Siedlerchr", "createdAt": "2020-07-01T08:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4MTA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4MjM4NA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448282384", "bodyText": "Maybe I fixed the style issues and wanted to run ./gradlew checkstyleMain checkstyleTest checkstyleJmh from terminal to test them before committing but i get:\n`Starting a Gradle Daemon (subsequent builds will be faster)\n\n> Configure project :\nFound module name 'org.jabref'\n\n> Task :compileJava\norg.apache.logging.log4j.LoggingException: Unable to create Plugin Service Class org.jabref.gui.logging.plugins.Log4jPlugins\n        at org.apache.logging.log4j.plugins.processor.PluginProcessor.createSourceFile(PluginProcessor.java:201)\n        at org.apache.logging.log4j.plugins.processor.PluginProcessor.writeClassFile(PluginProcessor.java:163)\n        at org.apache.logging.log4j.plugins.processor.PluginProcessor.process(PluginProcessor.java:91)\n        at org.gradle.api.internal.tasks.compile.processing.DelegatingProcessor.process(DelegatingProcessor.java:62)`\n\nrunning with --info gives some more details:\n> Task :compileJava\nCaching disabled for task ':compileJava' because:\n  Build cache is disabled\nTask ':compileJava' is not up-to-date because:\n  Task has failed previously.\nThe input changes require a full rebuild for incremental task ':compileJava'.\nFull recompilation is required because no incremental change information is available. This is usually caused by clean builds or changing compiler arguments.\nCompiling with JDK Java compiler API.\norg.apache.logging.log4j.LoggingException: Unable to create Plugin Service Class org.jabref.gui.logging.plugins.Log4jPlugins\n        at org.apache.logging.log4j.plugins.processor.PluginProcessor.createSourceFile(PluginProcessor.java:201)\n        at org.apache.logging.log4j.plugins.processor.PluginProcessor.writeClassFile(PluginProcessor.java:163)\n\nShould I commit anyway and see what the tests say?", "author": "mind000", "createdAt": "2020-07-01T10:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4MTA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4NTE0Mw==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448285143", "bodyText": "Yes, just commit.", "author": "Siedlerchr", "createdAt": "2020-07-01T11:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4MTA1Mw=="}], "type": "inlineReview"}, {"oid": "1b78fd56f1865e252350ad40c97d5dca0b271cf8", "url": "https://github.com/JabRef/jabref/commit/1b78fd56f1865e252350ad40c97d5dca0b271cf8", "message": "mEDRA DOI fetcher implementation", "committedDate": "2020-07-01T11:10:03Z", "type": "commit"}, {"oid": "81d5cc395b8704e17015659ec9d1b3065922ecc9", "url": "https://github.com/JabRef/jabref/commit/81d5cc395b8704e17015659ec9d1b3065922ecc9", "message": "Merge branch 'master' into medra-fetcher", "committedDate": "2020-07-01T12:17:58Z", "type": "commit"}, {"oid": "51423cb4a8bb0ac98426521615ee493bac765efd", "url": "https://github.com/JabRef/jabref/commit/51423cb4a8bb0ac98426521615ee493bac765efd", "message": "mEDRA DOI fetcher implementation", "committedDate": "2020-07-01T14:05:32Z", "type": "commit"}, {"oid": "a42904c6584d76c14b96b5566131b6511c1aa1a3", "url": "https://github.com/JabRef/jabref/commit/a42904c6584d76c14b96b5566131b6511c1aa1a3", "message": "mEDRA DOI fetcher implementation", "committedDate": "2020-07-01T14:24:19Z", "type": "commit"}, {"oid": "c0a329f08c86d457f59f13f2ea61baebd7dfab31", "url": "https://github.com/JabRef/jabref/commit/c0a329f08c86d457f59f13f2ea61baebd7dfab31", "message": "mEDRA DOI fetcher implementation", "committedDate": "2020-07-01T14:25:58Z", "type": "commit"}, {"oid": "85fc98f2305cb4c32074270bd3f1ef1d6adb216b", "url": "https://github.com/JabRef/jabref/commit/85fc98f2305cb4c32074270bd3f1ef1d6adb216b", "message": "Merge branch 'medra-fetcher' of https://github.com/mind000/jabref into\nmedra-fetcher\n# Please enter a commit message to explain why this merge is necessary,\n# especially if it merges an updated upstream into a topic branch.\n#\n# Lines starting with '#' will be ignored, and an empty message aborts\n# the commit.", "committedDate": "2020-07-01T14:38:57Z", "type": "commit"}, {"oid": "2ede4acfd414f9acabeaf54d645d74f6f0a0843e", "url": "https://github.com/JabRef/jabref/commit/2ede4acfd414f9acabeaf54d645d74f6f0a0843e", "message": "mEDRA DOI fetcher implementation", "committedDate": "2020-07-01T14:55:23Z", "type": "commit"}, {"oid": "a1089743739ddf9a1df58018028ab90e7267088b", "url": "https://github.com/JabRef/jabref/commit/a1089743739ddf9a1df58018028ab90e7267088b", "message": "mEDRA DOI fetcher implementation", "committedDate": "2020-07-01T15:07:12Z", "type": "commit"}, {"oid": "4f96aab62293ecc52a5383c1fb33a9510f06370e", "url": "https://github.com/JabRef/jabref/commit/4f96aab62293ecc52a5383c1fb33a9510f06370e", "message": "Revert wrong merge", "committedDate": "2020-07-01T21:08:15Z", "type": "commit"}, {"oid": "4cfc672b6616a456e2c467b5a74f4ec3c807982f", "url": "https://github.com/JabRef/jabref/commit/4cfc672b6616a456e2c467b5a74f4ec3c807982f", "message": "Merge remote-tracking branch 'origin/master' into fix", "committedDate": "2020-07-01T21:08:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxODU1MA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448618550", "bodyText": "This calls for discussing good and bad deisgn. - Why should a general class handle special cases of a sub clasS?\nThe mEDRA getUrlDownload should provide a proper stream. We will see it below.\nFirst idea: It can be wrapped into a BufferedStream and checked if there is something and reset if everythign is OK. If not, an empty stream should be returend, which should lead to an empty list of bib entries, doesn't it?", "author": "koppor", "createdAt": "2020-07-01T21:11:56Z", "path": "src/main/java/org/jabref/logic/importer/SearchBasedParserFetcher.java", "diffHunk": "@@ -68,10 +70,19 @@ default URLDownload getUrlDownload(String query) throws MalformedURLException, F\n         }\n \n         try (InputStream stream = getUrlDownload(query).asInputStream()) {\n-            List<BibEntry> fetchedEntries = getParser().parseEntries(stream);\n+            List<BibEntry> fetchedEntries = new ArrayList<>();\n \n-            // Post-cleanup\n-            fetchedEntries.forEach(this::doPostCleanup);\n+            // check if there is anything to read since mEDRA '404 not found' returns nothing", "originalCommit": "4cfc672b6616a456e2c467b5a74f4ec3c807982f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4ODA5MQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r449788091", "bodyText": "This was the first implementation i did, then I've overridden performSearchById inside Medra class.", "author": "mind000", "createdAt": "2020-07-04T16:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxODU1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg5NTA0MA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r449895040", "bodyText": "Then please revert this changes here, as it's no longer necessary, right?", "author": "Siedlerchr", "createdAt": "2020-07-05T16:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxODU1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxOTYxMQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448619611", "bodyText": "There is .orElseThrow(...) in optionals. Rewriting is difficult here. And it was like that before you touched the code, so no importance here.", "author": "koppor", "createdAt": "2020-07-01T21:14:28Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -47,18 +51,28 @@ public String getName() {\n     @Override\n     public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n         Optional<DOI> doi = DOI.parse(identifier);\n+        String agency = \"\";\n         try {\n             if (doi.isPresent()) {", "originalCommit": "4cfc672b6616a456e2c467b5a74f4ec3c807982f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4ODE0MA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r449788140", "bodyText": "About .orElseThrow I left the code as I found it. In this method I just added the medra check.\nIn some other parts as well I preferred to leave the code style I found.", "author": "mind000", "createdAt": "2020-07-04T16:52:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxOTYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMDIyOA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448620228", "bodyText": "Why is no doPostCleanup executed in this case? I would do it here for consitency, too.", "author": "koppor", "createdAt": "2020-07-01T21:15:52Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -47,18 +51,28 @@ public String getName() {\n     @Override\n     public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n         Optional<DOI> doi = DOI.parse(identifier);\n+        String agency = \"\";\n         try {\n             if (doi.isPresent()) {\n-                URL doiURL = new URL(doi.get().getURIAsASCIIString());\n+                Optional<BibEntry> fetchedEntry;\n+\n+                // mEDRA does not return a parsable bibtex string\n+                if (getAgency(doi.get()).isPresent() && \"medra\".equalsIgnoreCase(getAgency(doi.get()).get())) {\n+                    fetchedEntry = new Medra().performSearchById(identifier);", "originalCommit": "4cfc672b6616a456e2c467b5a74f4ec3c807982f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMTAxOA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448621018", "bodyText": "I would test for the agency and directly return the fetched entry. No else branch necessary --> quick exit and less nesting", "author": "koppor", "createdAt": "2020-07-01T21:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMDIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4ODE2MQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r449788161", "bodyText": "doPostCleanup is performed inside performSearchById of Medra class.\nElse removed.", "author": "mind000", "createdAt": "2020-07-04T16:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMDIyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMTQwMw==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448621403", "bodyText": "Please remove empty JavaDoc @throws annotations.\nMaybe, in this case, the JsonException can be handled locally --> log the exception and return Optional.empty?", "author": "koppor", "createdAt": "2020-07-01T21:18:31Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -84,4 +100,23 @@ private void doPostCleanup(BibEntry entry) {\n             return Collections.emptyList();\n         }\n     }\n+\n+    /**\n+     * Returns registration agency. Null if no agency is found.\n+     *\n+     * @param doi the doi to be searched\n+     * @throws JSONException", "originalCommit": "4cfc672b6616a456e2c467b5a74f4ec3c807982f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4ODE4NA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r449788184", "bodyText": "Handled.", "author": "mind000", "createdAt": "2020-07-04T16:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMTQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMTYzNg==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448621636", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns registration agency. Null if no agency is found.\n          \n          \n            \n                 * Returns registration agency. Optional.empty() if no agency is found.", "author": "koppor", "createdAt": "2020-07-01T21:19:07Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -84,4 +100,23 @@ private void doPostCleanup(BibEntry entry) {\n             return Collections.emptyList();\n         }\n     }\n+\n+    /**\n+     * Returns registration agency. Null if no agency is found.", "originalCommit": "4cfc672b6616a456e2c467b5a74f4ec3c807982f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4ODE5NA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r449788194", "bodyText": "Done.", "author": "mind000", "createdAt": "2020-07-04T16:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMTYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMjAyNQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448622025", "bodyText": "These 4 lines can be done shorter as it is a single entry:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return entries;\n          \n          \n            \n                        return Collections.singleton(jsonITemToBibEntry(response));", "author": "koppor", "createdAt": "2020-07-01T21:20:05Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/Medra.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PushbackInputStream;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.IdBasedParserFetcher;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.util.JsonReader;\n+import org.jabref.logic.importer.util.MediaTypes;\n+import org.jabref.logic.net.URLDownload;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.EntryType;\n+import org.jabref.model.entry.types.StandardEntryType;\n+\n+import kong.unirest.json.JSONArray;\n+import kong.unirest.json.JSONException;\n+import kong.unirest.json.JSONObject;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+/**\n+ * A class for fetching DOIs from Medra\n+ *\n+ * @see <a href=\"https://data.medra.org\">mEDRA Content Negotiation API</a> for an overview of the API\n+ * <p>\n+ * It requires \"Accept\" request Header attribute to be set to desired content-type.\n+ */\n+public class Medra implements IdBasedParserFetcher {\n+\n+    public static final String API_URL = \"https://data.medra.org\";\n+\n+    @Override\n+    public String getName() {\n+        return \"mEDRA\";\n+    }\n+\n+    @Override\n+    public Parser getParser() {\n+        return inputStream -> {\n+            JSONObject response = JsonReader.toJsonObject(inputStream);\n+\n+            List<BibEntry> entries = new ArrayList<>();\n+            BibEntry entry = jsonItemToBibEntry(response);\n+            entries.add(entry);\n+\n+            return entries;", "originalCommit": "4cfc672b6616a456e2c467b5a74f4ec3c807982f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMjUxOA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448622518", "bodyText": "Could you do a chaining of setField?\n  return new BibEntry(convertType(item.getString(\"type\")))\n    .withField(StandardField.TITLE, item.getString(\"title\"))\n    .withField...\n    ...", "author": "koppor", "createdAt": "2020-07-01T21:21:13Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/Medra.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PushbackInputStream;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.IdBasedParserFetcher;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.util.JsonReader;\n+import org.jabref.logic.importer.util.MediaTypes;\n+import org.jabref.logic.net.URLDownload;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.EntryType;\n+import org.jabref.model.entry.types.StandardEntryType;\n+\n+import kong.unirest.json.JSONArray;\n+import kong.unirest.json.JSONException;\n+import kong.unirest.json.JSONObject;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+/**\n+ * A class for fetching DOIs from Medra\n+ *\n+ * @see <a href=\"https://data.medra.org\">mEDRA Content Negotiation API</a> for an overview of the API\n+ * <p>\n+ * It requires \"Accept\" request Header attribute to be set to desired content-type.\n+ */\n+public class Medra implements IdBasedParserFetcher {\n+\n+    public static final String API_URL = \"https://data.medra.org\";\n+\n+    @Override\n+    public String getName() {\n+        return \"mEDRA\";\n+    }\n+\n+    @Override\n+    public Parser getParser() {\n+        return inputStream -> {\n+            JSONObject response = JsonReader.toJsonObject(inputStream);\n+\n+            List<BibEntry> entries = new ArrayList<>();\n+            BibEntry entry = jsonItemToBibEntry(response);\n+            entries.add(entry);\n+\n+            return entries;\n+        };\n+    }\n+\n+    private BibEntry jsonItemToBibEntry(JSONObject item) throws ParseException {\n+        try {\n+            BibEntry entry = new BibEntry();\n+            entry.setType(convertType(item.getString(\"type\")));", "originalCommit": "4cfc672b6616a456e2c467b5a74f4ec3c807982f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4ODM2NQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r449788365", "bodyText": "Done.", "author": "mind000", "createdAt": "2020-07-04T16:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMjUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4OTY0MQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450789641", "bodyText": "That comment also applied for the test cases. I did that in https://github.com/mind000/jabref/pull/1/commits/9b9b14f2871dceddf4e9a8f7c748b668c5c97f15 to show what I meant.", "author": "koppor", "createdAt": "2020-07-07T11:17:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMjUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDQ0OA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448624448", "bodyText": "Ah, you mean HTTP 404 returns an empty response.\nIn line 259 of URLDownload is is implemented exactly as that.\nWhy do the other fetchers cope well with that and here you have to do some special tweaks?\nMaybe, the response from the mEDRA thing is different?", "author": "koppor", "createdAt": "2020-07-01T21:25:36Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/Medra.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PushbackInputStream;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.IdBasedParserFetcher;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.util.JsonReader;\n+import org.jabref.logic.importer.util.MediaTypes;\n+import org.jabref.logic.net.URLDownload;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.EntryType;\n+import org.jabref.model.entry.types.StandardEntryType;\n+\n+import kong.unirest.json.JSONArray;\n+import kong.unirest.json.JSONException;\n+import kong.unirest.json.JSONObject;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+/**\n+ * A class for fetching DOIs from Medra\n+ *\n+ * @see <a href=\"https://data.medra.org\">mEDRA Content Negotiation API</a> for an overview of the API\n+ * <p>\n+ * It requires \"Accept\" request Header attribute to be set to desired content-type.\n+ */\n+public class Medra implements IdBasedParserFetcher {\n+\n+    public static final String API_URL = \"https://data.medra.org\";\n+\n+    @Override\n+    public String getName() {\n+        return \"mEDRA\";\n+    }\n+\n+    @Override\n+    public Parser getParser() {\n+        return inputStream -> {\n+            JSONObject response = JsonReader.toJsonObject(inputStream);\n+\n+            List<BibEntry> entries = new ArrayList<>();\n+            BibEntry entry = jsonItemToBibEntry(response);\n+            entries.add(entry);\n+\n+            return entries;\n+        };\n+    }\n+\n+    private BibEntry jsonItemToBibEntry(JSONObject item) throws ParseException {\n+        try {\n+            BibEntry entry = new BibEntry();\n+            entry.setType(convertType(item.getString(\"type\")));\n+            entry.setField(StandardField.TITLE, item.getString(\"title\"));\n+            entry.setField(StandardField.AUTHOR, toAuthors(item.optJSONArray(\"author\")));\n+            entry.setField(StandardField.YEAR,\n+                           Optional.ofNullable(item.optJSONObject(\"issued\"))\n+                                   .map(array -> array.optJSONArray(\"date-parts\"))\n+                                   .map(array -> array.optJSONArray(0))\n+                                   .map(array -> array.optInt(0))\n+                                   .map(year -> Integer.toString(year)).orElse(\"\"));\n+            entry.setField(StandardField.DOI, item.getString(\"DOI\"));\n+            entry.setField(StandardField.PAGES, item.optString(\"page\"));\n+            entry.setField(StandardField.ISSN, item.optString(\"ISSN\"));\n+            entry.setField(StandardField.JOURNAL, item.optString(\"container-title\"));\n+            entry.setField(StandardField.PUBLISHER, item.optString(\"publisher\"));\n+            entry.setField(StandardField.URL, item.optString(\"URL\"));\n+            entry.setField(StandardField.VOLUME, item.optString(\"volume\"));\n+            return entry;\n+        } catch (JSONException exception) {\n+            throw new ParseException(\"mEdRA API JSON format has changed\", exception);\n+        }\n+    }\n+\n+    private EntryType convertType(String type) {\n+        switch (type) {\n+            case \"article-journal\":\n+                return StandardEntryType.Article;\n+            default:\n+                return StandardEntryType.Misc;\n+        }\n+    }\n+\n+    private String toAuthors(JSONArray authors) {\n+        if (authors == null) {\n+            return \"\";\n+        }\n+\n+        // input: list of {\"literal\":\"A.\"}\n+        AuthorList authorsParsed = new AuthorList();\n+        String name = \"\";\n+\n+        for (int i = 0; i < authors.length(); i++) {\n+            JSONObject author = authors.getJSONObject(i);\n+            if (author.has(\"literal\")) {\n+                name = author.optString(\"literal\", \"\");\n+            } else {\n+                name = author.optString(\"family\", \"\") + \" \" + author.optString(\"given\", \"\");\n+            }\n+\n+            authorsParsed.addAuthor(\n+                                    name,\n+                                    \"\",\n+                                    \"\",\n+                                    \"\",\n+                                    \"\");\n+\n+        }\n+        return authorsParsed.getAsFirstLastNamesWithAnd();\n+    }\n+\n+    @Override\n+    public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n+\n+        try (InputStream stream = getUrlDownload(identifier).asInputStream();\n+             PushbackInputStream pushbackInputStream = new PushbackInputStream(stream)) {\n+\n+            List<BibEntry> fetchedEntries = new ArrayList<>();\n+\n+            // check if there is anything to read since mEDRA '404 not found' returns nothing", "originalCommit": "4cfc672b6616a456e2c467b5a74f4ec3c807982f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4OTMxNg==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r449789316", "bodyText": "You're right, URLDownload returns empty stream but I thought somewhere I had to check whether it's empty or not before trying to parse it to JSON.\nCrossref serach by ID doesn't cope well with that, for example, because there's not empty stream check. I added a test for valid DOI returning nothing to CrossRefTest and the test failed.\nIf you think this could be the case I could implement just that check on performSearchById of Crossref as well, otherwise i just commit my changes.", "author": "mind000", "createdAt": "2020-07-04T17:09:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg5NDkwMw==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r449894903", "bodyText": "I think it makes sense to add that to CrossRef as well", "author": "Siedlerchr", "createdAt": "2020-07-05T16:26:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDQ0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4OTgzNw==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450789837", "bodyText": "I think, this is fixed in https://github.com/mind000/jabref/pull/1/, too.", "author": "koppor", "createdAt": "2020-07-07T11:18:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDQ0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDc5NA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448624794", "bodyText": "application/json is a different mime type. Could you rename the constant?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String APPLICATION_JSON = \"application/vnd.citationstyles.csl+json\";\n          \n          \n            \n                public static final String CITATIONSTYLES_JSON = \"application/vnd.citationstyles.csl+json\";", "author": "koppor", "createdAt": "2020-07-01T21:26:24Z", "path": "src/main/java/org/jabref/logic/importer/util/MediaTypes.java", "diffHunk": "@@ -5,4 +5,5 @@\n  */\n public class MediaTypes {\n     public static final String APPLICATION_BIBTEX = \"application/x-bibtex\";\n+    public static final String APPLICATION_JSON = \"application/vnd.citationstyles.csl+json\";", "originalCommit": "4cfc672b6616a456e2c467b5a74f4ec3c807982f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4ODQ0OQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r449788449", "bodyText": "Done.", "author": "mind000", "createdAt": "2020-07-04T16:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDk4MA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448624980", "bodyText": "Could you do a withField chain, here?", "author": "koppor", "createdAt": "2020-07-01T21:26:45Z", "path": "src/test/java/org/jabref/logic/importer/fetcher/DoiFetcherTest.java", "diffHunk": "@@ -48,6 +49,27 @@ public void setUp() {\n         bibEntryDecker2007.setField(StandardField.TITLE, \"{BPEL}4Chor: Extending {BPEL} for Modeling Choreographies\");\n         bibEntryDecker2007.setField(StandardField.YEAR, \"2007\");\n         bibEntryDecker2007.setField(StandardField.DOI, \"10.1109/icws.2007.59\");\n+\n+        // mEDRA BibEntry\n+        bibEntryIannarelli2019 = new BibEntry();\n+        bibEntryIannarelli2019.setType(StandardEntryType.Article);", "originalCommit": "4cfc672b6616a456e2c467b5a74f4ec3c807982f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4ODQ1Nw==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r449788457", "bodyText": "Done.", "author": "mind000", "createdAt": "2020-07-04T16:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNTQzMA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r448625430", "bodyText": "Is it possible to add a test for searching a syntactially valid DOI, but not a valid doi (meaning returning nothing)?", "author": "koppor", "createdAt": "2020-07-01T21:27:43Z", "path": "src/test/java/org/jabref/logic/importer/fetcher/MedraTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.StandardEntryType;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class MedraTest {\n+\n+    private Medra fetcher;\n+    private BibEntry bibEntrySpileers2018;\n+    private BibEntry bibEntryIannarelli2019;\n+    private BibEntry bibEntryCisternino1999;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        fetcher = new Medra();\n+\n+        bibEntrySpileers2018 = new BibEntry();\n+        bibEntrySpileers2018.setType(StandardEntryType.Article);\n+        bibEntrySpileers2018.setField(StandardField.AUTHOR, \"SPILEERS, Steven \");\n+        bibEntrySpileers2018.setField(StandardField.PUBLISHER, \"Peeters online journals\");\n+        bibEntrySpileers2018.setField(StandardField.TITLE, \"Algemene kroniek\");\n+        bibEntrySpileers2018.setField(StandardField.YEAR, \"2018\");\n+        bibEntrySpileers2018.setField(StandardField.DOI, \"10.2143/TVF.80.3.3285690\");\n+        bibEntrySpileers2018.setField(StandardField.ISSN, \"2031-8952\");\n+        bibEntrySpileers2018.setField(StandardField.JOURNAL, \"Tijdschrift voor Filosofie\");\n+        bibEntrySpileers2018.setField(StandardField.PAGES, \"625-629\");\n+        bibEntrySpileers2018.setField(StandardField.URL, \"http://doi.org/10.2143/TVF.80.3.3285690\");\n+\n+        bibEntryIannarelli2019 = new BibEntry();\n+        bibEntryIannarelli2019.setType(StandardEntryType.Article);\n+        bibEntryIannarelli2019.setField(StandardField.AUTHOR,\n+                                        \"\"\n+                                                            + \"Iannarelli Riccardo  and \"\n+                                                            + \"Novello Anna  and \"\n+                                                            + \"Stricker Damien  and \"\n+                                                            + \"Cisternino Marco  and \"\n+                                                            + \"Gallizio Federico  and \"\n+                                                            + \"Telib Haysam  and \"\n+                                                            + \"Meyer Thierry \");\n+        bibEntryIannarelli2019.setField(StandardField.PUBLISHER, \"AIDIC: Italian Association of Chemical Engineering\");\n+        bibEntryIannarelli2019.setField(StandardField.TITLE, \"Safety in research institutions: how to better communicate the risks using numerical simulations\");\n+        bibEntryIannarelli2019.setField(StandardField.YEAR, \"2019\");\n+        bibEntryIannarelli2019.setField(StandardField.DOI, \"10.3303/CET1977146\");\n+        bibEntryIannarelli2019.setField(StandardField.JOURNAL, \"Chemical Engineering Transactions\");\n+        bibEntryIannarelli2019.setField(StandardField.PAGES, \"871-876\");\n+        bibEntryIannarelli2019.setField(StandardField.URL, \"http://doi.org/10.3303/CET1977146\");\n+        bibEntryIannarelli2019.setField(StandardField.VOLUME, \"77\");\n+\n+        bibEntryCisternino1999 = new BibEntry();\n+        bibEntryCisternino1999.setType(StandardEntryType.Article);\n+        bibEntryCisternino1999.setField(StandardField.AUTHOR, \"Cisternino Paola \");\n+        bibEntryCisternino1999.setField(StandardField.PUBLISHER, \"Edizioni Otto Novecento\");\n+        bibEntryCisternino1999.setField(StandardField.TITLE, \"Diagramma semantico dei lemmi : casa, parola, silenzio e attesa in \u00c8 fatto giorno e Margherite e rosolacci di Rocco Scotellaro\");\n+        bibEntryCisternino1999.setField(StandardField.YEAR, \"1999\");\n+        bibEntryCisternino1999.setField(StandardField.DOI, \"10.1400/115378\");\n+        bibEntryCisternino1999.setField(StandardField.JOURNAL, \"Otto/Novecento : rivista quadrimestrale di critica e storia letteraria\");\n+        bibEntryCisternino1999.setField(StandardField.URL, \"http://doi.org/10.1400/115378\");\n+    }\n+\n+    @Test\n+    public void testGetName() {\n+        assertEquals(\"mEDRA\", fetcher.getName());\n+    }\n+\n+    @Test\n+    public void testPerformSearchSpileers2018() throws FetcherException {\n+        Optional<BibEntry> fetchedEntry = fetcher.performSearchById(\"10.2143/TVF.80.3.3285690\");", "originalCommit": "4cfc672b6616a456e2c467b5a74f4ec3c807982f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4ODQ2Ng==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r449788466", "bodyText": "Done", "author": "mind000", "createdAt": "2020-07-04T16:57:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNTQzMA=="}], "type": "inlineReview"}, {"oid": "4ae1788ec8fdc3776e41bdb6e0cf8158357e04d4", "url": "https://github.com/JabRef/jabref/commit/4ae1788ec8fdc3776e41bdb6e0cf8158357e04d4", "message": "mEDRA DOI fetcher implementation", "committedDate": "2020-07-05T20:26:12Z", "type": "commit"}, {"oid": "8c7f1b54393d8c4284b2cf17cfd94d6a0f9ab649", "url": "https://github.com/JabRef/jabref/commit/8c7f1b54393d8c4284b2cf17cfd94d6a0f9ab649", "message": "Merge branch 'master' into medra-fetcher", "committedDate": "2020-07-07T06:46:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0MzM2NA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450643364", "bodyText": "What's the reason for these changes here? Maybe it's better to include them directly in IdBasedParserFetcher ?", "author": "tobiasdiez", "createdAt": "2020-07-07T06:43:38Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/CrossRef.java", "diffHunk": "@@ -98,6 +103,44 @@ public Parser getParser() {\n         };\n     }\n \n+    @Override\n+    public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n+        if (StringUtil.isBlank(identifier)) {\n+            return Optional.empty();\n+        }\n+\n+        try (InputStream stream = new URLDownload(getURLForID(identifier)).asInputStream();", "originalCommit": "4ae1788ec8fdc3776e41bdb6e0cf8158357e04d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0ODEwMw==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450648103", "bodyText": "In all cases, there should be a comment on the byte reading etc. - So that the code is self-explanatory and no need to dive into the discussions in this PR.", "author": "koppor", "createdAt": "2020-07-07T06:55:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0MzM2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4MDA5NQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450780095", "bodyText": "Changing JsonReader to handle empty input stream properly (as below), I will remove this from CrossRef.", "author": "mind000", "createdAt": "2020-07-07T10:57:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0MzM2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4MzAyNQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450783025", "bodyText": "Fixed in https://github.com/mind000/jabref/pull/1.", "author": "koppor", "createdAt": "2020-07-07T11:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0MzM2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4NDIwMw==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450784203", "bodyText": "Hope that we did not do the same work in parallel ^^. Feel free to show up in Skype (I have the same id there) to discuss things. I think, this PR is close to be finished.", "author": "koppor", "createdAt": "2020-07-07T11:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0MzM2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0MzkyOA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450643928", "bodyText": "Simply return new Medra()...  should work.", "author": "tobiasdiez", "createdAt": "2020-07-07T06:45:08Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -47,8 +55,17 @@ public String getName() {\n     @Override\n     public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n         Optional<DOI> doi = DOI.parse(identifier);\n+\n         try {\n             if (doi.isPresent()) {\n+                Optional<BibEntry> fetchedEntry;\n+\n+                // mEDRA does not return a parsable bibtex string\n+                if (getAgency(doi.get()).isPresent() && \"medra\".equalsIgnoreCase(getAgency(doi.get()).get())) {\n+                    fetchedEntry = new Medra().performSearchById(identifier);", "originalCommit": "4ae1788ec8fdc3776e41bdb6e0cf8158357e04d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2Mzg4OQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450663889", "bodyText": "Ok", "author": "mind000", "createdAt": "2020-07-07T07:29:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0MzkyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NDUwMA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450644500", "bodyText": "Please move this method to the DOI class (i..e the call should look like doi.getAgency())", "author": "tobiasdiez", "createdAt": "2020-07-07T06:46:35Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/DoiFetcher.java", "diffHunk": "@@ -84,4 +104,29 @@ private void doPostCleanup(BibEntry entry) {\n             return Collections.emptyList();\n         }\n     }\n+\n+    /**\n+     * Returns registration agency. Optional.empty() if no agency is found.\n+     *\n+     * @param doi the doi to be searched\n+     */\n+    public Optional<String> getAgency(DOI doi) throws IOException {", "originalCommit": "4ae1788ec8fdc3776e41bdb6e0cf8158357e04d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2NzAyNA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450667024", "bodyText": "I was not sure where to put it in the beginning, but it makes sense to move to DOI class.", "author": "mind000", "createdAt": "2020-07-07T07:35:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NDUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NTU1Ng==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450645556", "bodyText": "Same question here as above; normally you don't need to overwrite the performSearchById method.", "author": "tobiasdiez", "createdAt": "2020-07-07T06:49:20Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/Medra.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PushbackInputStream;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.IdBasedParserFetcher;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.util.JsonReader;\n+import org.jabref.logic.importer.util.MediaTypes;\n+import org.jabref.logic.net.URLDownload;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.EntryType;\n+import org.jabref.model.entry.types.StandardEntryType;\n+import org.jabref.model.strings.StringUtil;\n+\n+import kong.unirest.json.JSONArray;\n+import kong.unirest.json.JSONException;\n+import kong.unirest.json.JSONObject;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+/**\n+ * A class for fetching DOIs from Medra\n+ *\n+ * @see <a href=\"https://data.medra.org\">mEDRA Content Negotiation API</a> for an overview of the API\n+ * <p>\n+ * It requires \"Accept\" request Header attribute to be set to desired content-type.\n+ */\n+public class Medra implements IdBasedParserFetcher {\n+\n+    public static final String API_URL = \"https://data.medra.org\";\n+\n+    @Override\n+    public String getName() {\n+        return \"mEDRA\";\n+    }\n+\n+    @Override\n+    public Parser getParser() {\n+        return inputStream -> {\n+            JSONObject response = JsonReader.toJsonObject(inputStream);\n+\n+            return Collections.singletonList(jsonItemToBibEntry(response));\n+        };\n+    }\n+\n+    private BibEntry jsonItemToBibEntry(JSONObject item) throws ParseException {\n+        try {\n+\n+            return new BibEntry(convertType(item.getString(\"type\")))\n+                                                                    .withField(StandardField.TITLE, item.getString(\"title\"))\n+                                                                    .withField(StandardField.AUTHOR, toAuthors(item.optJSONArray(\"author\")))\n+                                                                    .withField(StandardField.YEAR,\n+                                                                               Optional.ofNullable(item.optJSONObject(\"issued\"))\n+                                                                                       .map(array -> array.optJSONArray(\"date-parts\"))\n+                                                                                       .map(array -> array.optJSONArray(0))\n+                                                                                       .map(array -> array.optInt(0))\n+                                                                                       .map(year -> Integer.toString(year)).orElse(\"\"))\n+                                                                    .withField(StandardField.DOI, item.getString(\"DOI\"))\n+                                                                    .withField(StandardField.PAGES, item.optString(\"page\"))\n+                                                                    .withField(StandardField.ISSN, item.optString(\"ISSN\"))\n+                                                                    .withField(StandardField.JOURNAL, item.optString(\"container-title\"))\n+                                                                    .withField(StandardField.PUBLISHER, item.optString(\"publisher\"))\n+                                                                    .withField(StandardField.URL, item.optString(\"URL\"))\n+                                                                    .withField(StandardField.VOLUME, item.optString(\"volume\"));\n+\n+        } catch (JSONException exception) {\n+            throw new ParseException(\"mEdRA API JSON format has changed\", exception);\n+        }\n+    }\n+\n+    private EntryType convertType(String type) {\n+        switch (type) {\n+            case \"article-journal\":\n+                return StandardEntryType.Article;\n+            default:\n+                return StandardEntryType.Misc;\n+        }\n+    }\n+\n+    private String toAuthors(JSONArray authors) {\n+        if (authors == null) {\n+            return \"\";\n+        }\n+\n+        // input: list of {\"literal\":\"A.\"}\n+        AuthorList authorsParsed = new AuthorList();\n+        String name = \"\";\n+\n+        for (int i = 0; i < authors.length(); i++) {\n+            JSONObject author = authors.getJSONObject(i);\n+            name = author.optString(\"literal\", \"\") + \" \" + author.optString(\"family\", \"\") + \" \" + author.optString(\"given\", \"\");\n+\n+            authorsParsed.addAuthor(\n+                                    name,\n+                                    \"\",\n+                                    \"\",\n+                                    \"\",\n+                                    \"\");\n+\n+        }\n+        return authorsParsed.getAsFirstLastNamesWithAnd();\n+    }\n+\n+    @Override\n+    public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {", "originalCommit": "8c7f1b54393d8c4284b2cf17cfd94d6a0f9ab649", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY4ODEwMQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450688101", "bodyText": "In this case I have overridden the method because I needed to add a header attribute to URLDownload and IdBasedParserFetcher does not have a getUrlDownload to override. It invokes URLDownload constructor directly inside the try resource, while for example SearchBasedParserFetcher invokes getUrlDownload method.", "author": "mind000", "createdAt": "2020-07-07T08:16:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NTU1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4MjIwOA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450782208", "bodyText": "Fixed in https://github.com/mind000/jabref/pull/1.", "author": "koppor", "createdAt": "2020-07-07T11:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NTU1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4NjIzMg==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450786232", "bodyText": "The getUrlDownload method in SearchBasedParserFetcher was added exactly for this reason. As this seems to be a common issue for fetchers, the IdBasedParserFetcher should be changed accordingly. Then there shouldn't be any need to overwrite the performSearchById method, but only getUrlDownload.\n\n  \n    \n      jabref/src/main/java/org/jabref/logic/importer/SearchBasedParserFetcher.java\n    \n    \n        Lines 52 to 62\n      in\n      d6244d7\n    \n    \n    \n    \n\n        \n          \n               /** \n        \n\n        \n          \n                * Gets the {@link URLDownload} object for downloading content. Overwrite, if you need to send additional headers for the download \n        \n\n        \n          \n                * \n        \n\n        \n          \n                * @param query The search query \n        \n\n        \n          \n                * @throws MalformedURLException \n        \n\n        \n          \n                * @throws FetcherException \n        \n\n        \n          \n                * @throws URISyntaxException \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               default URLDownload getUrlDownload(String query) throws MalformedURLException, FetcherException, URISyntaxException { \n        \n\n        \n          \n                   return new URLDownload(getURLForQuery(query)); \n        \n\n        \n          \n               }", "author": "tobiasdiez", "createdAt": "2020-07-07T11:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NTU1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4ODc3Mg==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450788772", "bodyText": "@tobiasdiez Fixed in https://github.com/mind000/jabref/pull/1. Due to multi-inheritcance, I had to name the method getUrlDownloadForIdentifier (in this way, it is distinguishable from getUrlDownloadForQuery. Both accept String parameter and return a `URLDownload). deep link to the commit https://github.com/mind000/jabref/pull/1/commits/6fd81c3fd4f36610835097f39c91ceb77769bb05", "author": "koppor", "createdAt": "2020-07-07T11:16:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NTU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY1MzkxOA==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450653918", "bodyText": "Could you please comment why this was done?\nI would bet that getParser().parseEntries(pushbackInputStream) works for an empty input stream (and does not throw any exceptions).\nOh, I lost my bet:\n\nMaybe, change line 28 to return an empty JSonObject and comment the JavaDoc accordingly. --> An empty input stream results in an empty JsonObject and not into an error. With that change, the whole \"hack\" with with PushbackInputStream should not be required anymore.\nMaybe, there is a test case missing demonstrating that functionality.\nThe UrlDownload returns an empty input stream to avoid such code:", "author": "koppor", "createdAt": "2020-07-07T07:08:57Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/Medra.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PushbackInputStream;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.IdBasedParserFetcher;\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.util.JsonReader;\n+import org.jabref.logic.importer.util.MediaTypes;\n+import org.jabref.logic.net.URLDownload;\n+import org.jabref.model.entry.AuthorList;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.types.EntryType;\n+import org.jabref.model.entry.types.StandardEntryType;\n+import org.jabref.model.strings.StringUtil;\n+\n+import kong.unirest.json.JSONArray;\n+import kong.unirest.json.JSONException;\n+import kong.unirest.json.JSONObject;\n+import org.apache.http.client.utils.URIBuilder;\n+\n+/**\n+ * A class for fetching DOIs from Medra\n+ *\n+ * @see <a href=\"https://data.medra.org\">mEDRA Content Negotiation API</a> for an overview of the API\n+ * <p>\n+ * It requires \"Accept\" request Header attribute to be set to desired content-type.\n+ */\n+public class Medra implements IdBasedParserFetcher {\n+\n+    public static final String API_URL = \"https://data.medra.org\";\n+\n+    @Override\n+    public String getName() {\n+        return \"mEDRA\";\n+    }\n+\n+    @Override\n+    public Parser getParser() {\n+        return inputStream -> {\n+            JSONObject response = JsonReader.toJsonObject(inputStream);\n+\n+            return Collections.singletonList(jsonItemToBibEntry(response));\n+        };\n+    }\n+\n+    private BibEntry jsonItemToBibEntry(JSONObject item) throws ParseException {\n+        try {\n+\n+            return new BibEntry(convertType(item.getString(\"type\")))\n+                                                                    .withField(StandardField.TITLE, item.getString(\"title\"))\n+                                                                    .withField(StandardField.AUTHOR, toAuthors(item.optJSONArray(\"author\")))\n+                                                                    .withField(StandardField.YEAR,\n+                                                                               Optional.ofNullable(item.optJSONObject(\"issued\"))\n+                                                                                       .map(array -> array.optJSONArray(\"date-parts\"))\n+                                                                                       .map(array -> array.optJSONArray(0))\n+                                                                                       .map(array -> array.optInt(0))\n+                                                                                       .map(year -> Integer.toString(year)).orElse(\"\"))\n+                                                                    .withField(StandardField.DOI, item.getString(\"DOI\"))\n+                                                                    .withField(StandardField.PAGES, item.optString(\"page\"))\n+                                                                    .withField(StandardField.ISSN, item.optString(\"ISSN\"))\n+                                                                    .withField(StandardField.JOURNAL, item.optString(\"container-title\"))\n+                                                                    .withField(StandardField.PUBLISHER, item.optString(\"publisher\"))\n+                                                                    .withField(StandardField.URL, item.optString(\"URL\"))\n+                                                                    .withField(StandardField.VOLUME, item.optString(\"volume\"));\n+\n+        } catch (JSONException exception) {\n+            throw new ParseException(\"mEdRA API JSON format has changed\", exception);\n+        }\n+    }\n+\n+    private EntryType convertType(String type) {\n+        switch (type) {\n+            case \"article-journal\":\n+                return StandardEntryType.Article;\n+            default:\n+                return StandardEntryType.Misc;\n+        }\n+    }\n+\n+    private String toAuthors(JSONArray authors) {\n+        if (authors == null) {\n+            return \"\";\n+        }\n+\n+        // input: list of {\"literal\":\"A.\"}\n+        AuthorList authorsParsed = new AuthorList();\n+        String name = \"\";\n+\n+        for (int i = 0; i < authors.length(); i++) {\n+            JSONObject author = authors.getJSONObject(i);\n+            name = author.optString(\"literal\", \"\") + \" \" + author.optString(\"family\", \"\") + \" \" + author.optString(\"given\", \"\");\n+\n+            authorsParsed.addAuthor(\n+                                    name,\n+                                    \"\",\n+                                    \"\",\n+                                    \"\",\n+                                    \"\");\n+\n+        }\n+        return authorsParsed.getAsFirstLastNamesWithAnd();\n+    }\n+\n+    @Override\n+    public Optional<BibEntry> performSearchById(String identifier) throws FetcherException {\n+        if (StringUtil.isBlank(identifier)) {\n+            return Optional.empty();\n+        }\n+\n+        try (InputStream stream = getUrlDownload(identifier).asInputStream();\n+             PushbackInputStream pushbackInputStream = new PushbackInputStream(stream)) {\n+\n+            List<BibEntry> fetchedEntries = new ArrayList<>();\n+\n+            // check if there is anything to read\n+            int readByte;\n+            readByte = pushbackInputStream.read();", "originalCommit": "8c7f1b54393d8c4284b2cf17cfd94d6a0f9ab649", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3OTM4Mg==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450779382", "bodyText": "Sure, if I modify JsonReader this would fix empty stream exception for JSON parsing. In this way i can remove the hack. I could log 'Empty input!' and return the empty JsonObject.\nExactly, in CrossRefTest there wasn't a test case for this, that's why I've inserted one in the last commit.", "author": "mind000", "createdAt": "2020-07-07T10:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY1MzkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4MjI3OQ==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r450782279", "bodyText": "Fixed in https://github.com/mind000/jabref/pull/1.", "author": "koppor", "createdAt": "2020-07-07T11:02:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY1MzkxOA=="}], "type": "inlineReview"}, {"oid": "5504e52665cc97e7d4f07f8a7e62b66d128a30ac", "url": "https://github.com/JabRef/jabref/commit/5504e52665cc97e7d4f07f8a7e62b66d128a30ac", "message": "Rewrite JsonReader to accept an empty input stream", "committedDate": "2020-07-07T09:55:53Z", "type": "commit"}, {"oid": "6fd81c3fd4f36610835097f39c91ceb77769bb05", "url": "https://github.com/JabRef/jabref/commit/6fd81c3fd4f36610835097f39c91ceb77769bb05", "message": "Introduce \"getUrlDownloadForIdentifier\" and shrink fetcher code\n\n- Rename getURLForID to getUrlForIdentifier\n- Shrink Medra fetcher\n- Shrink CrossRef fetcher", "committedDate": "2020-07-07T10:38:25Z", "type": "commit"}, {"oid": "9b9b14f2871dceddf4e9a8f7c748b668c5c97f15", "url": "https://github.com/JabRef/jabref/commit/9b9b14f2871dceddf4e9a8f7c748b668c5c97f15", "message": "Use parameterized tests (and add ISSN to Cisternino Paola)", "committedDate": "2020-07-07T10:52:12Z", "type": "commit"}, {"oid": "35964420d7cc60885f13e9d1491570e9684733dd", "url": "https://github.com/JabRef/jabref/commit/35964420d7cc60885f13e9d1491570e9684733dd", "message": "Fix parsing of names", "committedDate": "2020-07-07T11:01:38Z", "type": "commit"}, {"oid": "d17af0fcf09988b3d14c616852de963360171427", "url": "https://github.com/JabRef/jabref/commit/d17af0fcf09988b3d14c616852de963360171427", "message": "Fix checkstyle", "committedDate": "2020-07-07T11:03:59Z", "type": "commit"}, {"oid": "dd0a66525bfe97f19f0bacabd73bf6cc77bc0722", "url": "https://github.com/JabRef/jabref/commit/dd0a66525bfe97f19f0bacabd73bf6cc77bc0722", "message": "Move \"getUrlDownload\" up to WebFetcher\n\nReastion: It is the common base of both SearchBasedParserFetcher and IdBasedParserFetcher", "committedDate": "2020-07-07T13:23:31Z", "type": "commit"}, {"oid": "4fa073e441b8ffbc4f5031a9406b3e56441ce8ea", "url": "https://github.com/JabRef/jabref/commit/4fa073e441b8ffbc4f5031a9406b3e56441ce8ea", "message": "Use new method \"getUrlDownload\"", "committedDate": "2020-07-07T13:32:29Z", "type": "commit"}, {"oid": "faa304a09338b7047785f99ce58a3cd13ba825f8", "url": "https://github.com/JabRef/jabref/commit/faa304a09338b7047785f99ce58a3cd13ba825f8", "message": "Merge pull request #1 from JabRef/improveJsonReader\n\nImprove json reader", "committedDate": "2020-07-07T16:15:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4Mjg5Mw==", "url": "https://github.com/JabRef/jabref/pull/6641#discussion_r451982893", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String inputStr = new String(ByteStreams.toByteArray(inputStream), Charsets.UTF_8);\n          \n          \n            \n                        String inputStr = new String((inputStream.readAllByte()), Charsets.UTF_8);\n          \n      \n    \n    \n  \n\nThis is possible since java 9", "author": "Siedlerchr", "createdAt": "2020-07-09T06:04:54Z", "path": "src/main/java/org/jabref/logic/importer/util/JsonReader.java", "diffHunk": "@@ -1,39 +1,35 @@\n package org.jabref.logic.importer.util;\n \n-import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.nio.charset.StandardCharsets;\n \n import org.jabref.logic.importer.ParseException;\n \n+import com.google.common.base.Charsets;\n+import com.google.common.io.ByteStreams;\n+import kong.unirest.json.JSONException;\n import kong.unirest.json.JSONObject;\n \n /**\n  * Converts an {@link InputStream} into a {@link JSONObject}.\n  */\n public class JsonReader {\n \n-    public static JSONObject toJsonObject(InputStreamReader input) throws ParseException {\n-        BufferedReader streamReader = new BufferedReader(input);\n-        StringBuilder responseStrBuilder = new StringBuilder();\n-\n+    /**\n+     * Converts the given input stream into a {@link JSONObject}.\n+     *\n+     * @return A {@link JSONObject}. An empty JSON object is returned in the case an empty stream is passed.\n+     */\n+    public static JSONObject toJsonObject(InputStream inputStream) throws ParseException {\n         try {\n-            String inputStr;\n-            while ((inputStr = streamReader.readLine()) != null) {\n-                responseStrBuilder.append(inputStr);\n-            }\n-            if (responseStrBuilder.toString().isBlank()) {\n-                throw new ParseException(\"Empty input!\");\n+            String inputStr = new String(ByteStreams.toByteArray(inputStream), Charsets.UTF_8);", "originalCommit": "faa304a09338b7047785f99ce58a3cd13ba825f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4523f1d7525a7909af11d106d3d402eb704fd3fe", "url": "https://github.com/JabRef/jabref/commit/4523f1d7525a7909af11d106d3d402eb704fd3fe", "message": "mEDRA DOI fetcher implementation", "committedDate": "2020-07-09T09:11:13Z", "type": "commit"}, {"oid": "17938709942b413a484d5aaec719b6154ff596af", "url": "https://github.com/JabRef/jabref/commit/17938709942b413a484d5aaec719b6154ff596af", "message": "Merge branch 'master' into medra-fetcher", "committedDate": "2020-07-09T09:48:17Z", "type": "commit"}]}