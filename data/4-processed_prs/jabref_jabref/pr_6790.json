{"pr_number": 6790, "pr_title": "Fix more fetchers", "pr_createdAt": "2020-08-24T22:31:49Z", "pr_url": "https://github.com/JabRef/jabref/pull/6790", "timeline": [{"oid": "96349deae8e82a34c11a53684fd1ff88b3b28af2", "url": "https://github.com/JabRef/jabref/commit/96349deae8e82a34c11a53684fd1ff88b3b28af2", "message": "Refine Google Scholar\n\n- Remove broken URL for title search\n- Switch to google.ch (maybe that's better?)\n- Add more LOGGER statements to Google Scho", "committedDate": "2020-08-24T21:02:11Z", "type": "commit"}, {"oid": "4207ada6d61951f93549f9211f805d0e2c1afe96", "url": "https://github.com/JabRef/jabref/commit/4207ada6d61951f93549f9211f805d0e2c1afe96", "message": "Fix the bad data of MODS", "committedDate": "2020-08-24T21:52:47Z", "type": "commit"}, {"oid": "6a5dfdc78b8ae202438148c5361618c33b3a886a", "url": "https://github.com/JabRef/jabref/commit/6a5dfdc78b8ae202438148c5361618c33b3a886a", "message": "Add failed URL to logger", "committedDate": "2020-08-24T22:03:50Z", "type": "commit"}, {"oid": "f69f78239b2acc1734dd2d9626016f17b2f1c67b", "url": "https://github.com/JabRef/jabref/commit/f69f78239b2acc1734dd2d9626016f17b2f1c67b", "message": "Log used URL", "committedDate": "2020-08-24T22:23:45Z", "type": "commit"}, {"oid": "cab731d12a9025c33b7c4269e706741aa5ff1c17", "url": "https://github.com/JabRef/jabref/commit/cab731d12a9025c33b7c4269e706741aa5ff1c17", "message": "Refine comment", "committedDate": "2020-08-24T22:23:52Z", "type": "commit"}, {"oid": "e1ff139afafe6788deccaa2136d4584e45fdd41e", "url": "https://github.com/JabRef/jabref/commit/e1ff139afafe6788deccaa2136d4584e45fdd41e", "message": "Disable the test for a non-working capability", "committedDate": "2020-08-24T22:24:08Z", "type": "commit"}, {"oid": "fe4713468033cd2add6a18769ac39a6b1dad9454", "url": "https://github.com/JabRef/jabref/commit/fe4713468033cd2add6a18769ac39a6b1dad9454", "message": "SpringerLink also uses Springer API key", "committedDate": "2020-08-24T22:27:44Z", "type": "commit"}, {"oid": "b5a1026808d7db4161c287605a786757e1cdbb97", "url": "https://github.com/JabRef/jabref/commit/b5a1026808d7db4161c287605a786757e1cdbb97", "message": "Fix checkstyle", "committedDate": "2020-08-25T04:12:46Z", "type": "commit"}, {"oid": "ddf6346ac3c4991c2d8acdfc30bbe6bb063ab15f", "url": "https://github.com/JabRef/jabref/commit/ddf6346ac3c4991c2d8acdfc30bbe6bb063ab15f", "message": "Identifiers in CCSB are now put as key/value fields (instead of flat CSV field)", "committedDate": "2020-08-25T05:00:42Z", "type": "commit"}, {"oid": "4306332e6a3b2b02d314fb33791752167b2cfa93", "url": "https://github.com/JabRef/jabref/commit/4306332e6a3b2b02d314fb33791752167b2cfa93", "message": "Fix checkstyle", "committedDate": "2020-08-25T05:12:16Z", "type": "commit"}, {"oid": "770a6c27b8d11863213420a6ca71396909f6e538", "url": "https://github.com/JabRef/jabref/commit/770a6c27b8d11863213420a6ca71396909f6e538", "message": "Adapt CiteSeerTest to new CiteSeer capabilities", "committedDate": "2020-08-25T05:28:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5NjIxMw==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476196213", "bodyText": "Extract to constant to be consistent with other code:\n    private static final Logger LOGGER = LoggerFactory.getLogger(SearchBasedParserFetcher.java .class);", "author": "Siedlerchr", "createdAt": "2020-08-25T06:00:00Z", "path": "src/main/java/org/jabref/logic/importer/SearchBasedParserFetcher.java", "diffHunk": "@@ -39,16 +41,22 @@\n             return Collections.emptyList();\n         }\n \n-        try (InputStream stream = getUrlDownload(getURLForQuery(query)).asInputStream()) {\n+        URL urlForQuery;\n+        try {\n+            urlForQuery = getURLForQuery(query);\n+        } catch (URISyntaxException | MalformedURLException e) {\n+            LoggerFactory.getLogger(this.getClass()).info(\"Search URL {} is malformed\", query);\n+            throw new FetcherException(\"Search URI is malformed\", e);\n+        }\n+        try (InputStream stream = getUrlDownload(urlForQuery).asInputStream()) {\n             List<BibEntry> fetchedEntries = getParser().parseEntries(stream);\n \n             // Post-cleanup\n             fetchedEntries.forEach(this::doPostCleanup);\n \n             return fetchedEntries;\n-        } catch (URISyntaxException e) {\n-            throw new FetcherException(\"Search URI is malformed\", e);\n         } catch (IOException e) {\n+            LoggerFactory.getLogger(this.getClass()).info(\"IOException at URL {}\", urlForQuery.toString());", "originalCommit": "770a6c27b8d11863213420a6ca71396909f6e538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1NzE1NQ==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476257155", "bodyText": "I'll add a comment that variables are not possible in interfaces (are they?)", "author": "koppor", "createdAt": "2020-08-25T08:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5NjIxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMxMjcyNA==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476312724", "bodyText": "Sorry, did not see it's an interface. Variables are possibe in interface, but only public. You could extract it to a default method but I think in this case it's irrelevant", "author": "Siedlerchr", "createdAt": "2020-08-25T09:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5NjIxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2NTE5Ng==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476365196", "bodyText": "Since you rethrow the exception anyway, I don't think you need to add a logger statement here. It's the job of the caller to decide how to handle (i.e. log / show to user) the exception.", "author": "tobiasdiez", "createdAt": "2020-08-25T11:08:27Z", "path": "src/main/java/org/jabref/logic/importer/SearchBasedParserFetcher.java", "diffHunk": "@@ -39,16 +41,22 @@\n             return Collections.emptyList();\n         }\n \n-        try (InputStream stream = getUrlDownload(getURLForQuery(query)).asInputStream()) {\n+        URL urlForQuery;\n+        try {\n+            urlForQuery = getURLForQuery(query);\n+        } catch (URISyntaxException | MalformedURLException e) {\n+            LoggerFactory.getLogger(this.getClass()).info(\"Search URL {} is malformed\", query);", "originalCommit": "770a6c27b8d11863213420a6ca71396909f6e538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyNjYyMg==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476626622", "bodyText": "I switch to debug. Better more logging than too less.", "author": "koppor", "createdAt": "2020-08-25T17:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2NTE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzOTQ0OA==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476639448", "bodyText": "OK, found some article in the net that one should either log or throw the excpetion --> https://howtodoinjava.com/best-practices/java-exception-handling-best-practices/#6\nTherefore, introdcuging String.format for the exception message.", "author": "koppor", "createdAt": "2020-08-25T18:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2NTE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2OTkxMA==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476369910", "bodyText": "Is it really necessary to extract this from the try (...) statement? I found the previous version easier to understand.", "author": "tobiasdiez", "createdAt": "2020-08-25T11:18:11Z", "path": "src/main/java/org/jabref/logic/importer/SearchBasedParserFetcher.java", "diffHunk": "@@ -39,16 +41,22 @@\n             return Collections.emptyList();\n         }\n \n-        try (InputStream stream = getUrlDownload(getURLForQuery(query)).asInputStream()) {\n+        URL urlForQuery;\n+        try {\n+            urlForQuery = getURLForQuery(query);", "originalCommit": "770a6c27b8d11863213420a6ca71396909f6e538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzNzIyMg==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476637222", "bodyText": "Aim: I want to log when the URL is incorrect\n\nI don't know how to include it in the same try:", "author": "koppor", "createdAt": "2020-08-25T17:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2OTkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2OTUyOQ==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476669529", "bodyText": "Sorry, I cannot follow. The previous code had a URISyntaxException handler...", "author": "tobiasdiez", "createdAt": "2020-08-25T18:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2OTkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4NjUwOQ==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476686509", "bodyText": "The code before the PR had issues with code pulication. I tried to get rid of them during the PR.\nI now includ the URL in the exception with the cost of a nested try..catch\n        } catch (IOException e) {\n            // TODO: Catch HTTP Response 401/403 errors and report that user has no rights to access resource\n            try {\n                throw new FetcherException(\"A network error occurred while fetching from \" + getURLForQuery(query), e);\n            } catch (URISyntaxException | MalformedURLException uriSyntaxException) {\n                // does not happen\n                throw new FetcherException(\"A network error occurred\", e);\n            }\n        } catch (ParseException e) {\n            try {\n                throw new FetcherException(\"An internal parser error occurred while fetching from \" + getURLForQuery(query), e);\n            } catch (URISyntaxException | MalformedURLException uriSyntaxException) {\n                // does not happen\n                throw new FetcherException(\"An internal parser error occurred\", e);\n            }\n        }\nHope, you like it! (I don't, but at least the first try stays the same)", "author": "koppor", "createdAt": "2020-08-25T19:28:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2OTkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc4OTY5NA==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476789694", "bodyText": "Well, the code duplication was introduced in the complex-query-PR. We've accepted it as a temporary solution, which should be replaced by forwarding the normal search by query method to the search by complex query method or what is probably better in the long term is to completely replace all normal text-based search fetcher by complex query fetchers. I'm not sure if your changes here really help for this.", "author": "tobiasdiez", "createdAt": "2020-08-25T22:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2OTkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIxOTcyNA==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r477219724", "bodyText": "Note that the discussion on the code duplication is separate from the discussion how to log URLs. Sorry for doing two things in one PR - and discussing two things without making it excplicit that we are discussing two things.\nIn the context of URL creation and logging, I created the ADR-0014 summarizing our discussion. The full file is there: https://github.com/JabRef/jabref/blob/fix-fetchers/docs/adr/0014-separate-URL-creation-to-enable-proper-logging.md\nHere are the options:\n\nSeparate URL creation (my favorite)\nCreate URL when logging the URL (IMHO your favorite)\nInclude URL creation as statement before the stream creation in the try-with-resources block", "author": "koppor", "createdAt": "2020-08-26T11:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2OTkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI0NTU4NQ==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r477245585", "bodyText": "I agree if you really need the url in the catch block, then the code that you had before (creating it before the try with resource block) is the best. I'm still not convinced that you should show the URL to the user. It's only somewhat helpful for a developer fixing the fetcher tests, but not for a user (except if I overlook something).\nBut that's actually a topic for a bigger discussion: where and how to log vs throw exceptions. I propose we move this discussion to the JabCon. Since if i understood you correctly, the aim of this PR is to fix some of the fetcher, I would suggest to extract all other changes (log & refactoring) to their own PR. Then we can merge this on, so that we finally release 5.1. What do you think?", "author": "tobiasdiez", "createdAt": "2020-08-26T12:00:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2OTkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNDQzMw==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r477334433", "bodyText": "Ah, I get the point for \"showing the URL\". Call for an ADR ^^. https://howtodoinjava.com/best-practices/java-exception-handling-best-practices/#6\nI take the freedom to choose \"Separate URL creation\" (and do not refactor the interface).", "author": "koppor", "createdAt": "2020-08-26T14:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2OTkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU5MjE3Mg==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r477592172", "bodyText": "Well, the merged version still contains the refactored interface, as well as the disabled tests. It would be nice if you could revist those points in one of the next evenings, when everything is a bit more quite and no coming release is hanging over our heads creating the impression of urgency.", "author": "tobiasdiez", "createdAt": "2020-08-26T21:12:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2OTkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxMTcxNw==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r477611717", "bodyText": "We included a private method in the interface, which reduced code clones. I will create a new issue for tracking.", "author": "koppor", "createdAt": "2020-08-26T21:55:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2OTkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxMzc2Nw==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r477613767", "bodyText": "Added as issue --> koppor#467", "author": "koppor", "createdAt": "2020-08-26T22:00:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM2OTkxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3MDg3OQ==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476370879", "bodyText": "Isn't a regex better / more flexible than this manual string splitting?", "author": "tobiasdiez", "createdAt": "2020-08-25T11:20:05Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesFetcher.java", "diffHunk": "@@ -53,5 +56,29 @@ public void doPostCleanup(BibEntry entry) {\n         new FieldFormatterCleanup(StandardField.ABSTRACT, new ReplaceTabsBySpaceFormater()).cleanup(entry);\n         new FieldFormatterCleanup(StandardField.ABSTRACT, new RemoveRedundantSpacesFormatter()).cleanup(entry);\n         new FieldFormatterCleanup(StandardField.EDITOR, new RemoveDigitsFormatter()).cleanup(entry);\n+        // identifier fields is a key-value field\n+        // example: \"urn:isbn:978-1-4503-5217-8; doi:10.1145/3129790.3129810; ISI:000505046100032; Scopus 2-s2.0-85037741580\"\n+        // thus, key can contain multiple \":\"; sometimes value seaprated by \" \" instead of \":\"\n+        UnknownField identifierField = new UnknownField(\"identifier\");\n+        entry.getField(identifierField)\n+             .stream()\n+             .flatMap(value -> Arrays.stream(value.split(\"; \")))", "originalCommit": "770a6c27b8d11863213420a6ca71396909f6e538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1MDA5OA==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476650098", "bodyText": "The initial shot is\nPattern pattern = Pattern.compile(\"\\(([a-z]+:)?\\([a-z]+\\):\\([^; ]+)\\(; )?\\)*\");\nMaybe, some () are still wrong. I find that harder than going \"manually\" throught he AST\nI can use JavaCC (or ANTLR) to generate a grammar and parse the AST of CCSB identifier field. This is the recommended computer science way. Maye at a follow-up pull-request.", "author": "koppor", "createdAt": "2020-08-25T18:22:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3MDg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3MDEyOA==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476670128", "bodyText": "I like the regex ;-)", "author": "tobiasdiez", "createdAt": "2020-08-25T18:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3MDg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3MDk4Mg==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476370982", "bodyText": "only set the field when it's empty?", "author": "tobiasdiez", "createdAt": "2020-08-25T11:20:17Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesFetcher.java", "diffHunk": "@@ -53,5 +56,29 @@ public void doPostCleanup(BibEntry entry) {\n         new FieldFormatterCleanup(StandardField.ABSTRACT, new ReplaceTabsBySpaceFormater()).cleanup(entry);\n         new FieldFormatterCleanup(StandardField.ABSTRACT, new RemoveRedundantSpacesFormatter()).cleanup(entry);\n         new FieldFormatterCleanup(StandardField.EDITOR, new RemoveDigitsFormatter()).cleanup(entry);\n+        // identifier fields is a key-value field\n+        // example: \"urn:isbn:978-1-4503-5217-8; doi:10.1145/3129790.3129810; ISI:000505046100032; Scopus 2-s2.0-85037741580\"\n+        // thus, key can contain multiple \":\"; sometimes value seaprated by \" \" instead of \":\"\n+        UnknownField identifierField = new UnknownField(\"identifier\");\n+        entry.getField(identifierField)\n+             .stream()\n+             .flatMap(value -> Arrays.stream(value.split(\"; \")))\n+             .forEach(identifierKeyValue -> {\n+                 // check for pattern \"Scopus 2-...\"\n+                 String[] identifierKeyValueSplit = identifierKeyValue.split(\" \");\n+                 if (identifierKeyValueSplit.length == 1) {\n+                     // check for pattern \"doi:...\"\n+                     identifierKeyValueSplit = identifierKeyValue.split(\":\");\n+                 }\n+                 int length = identifierKeyValueSplit.length;\n+                 if (length < 2) {\n+                     return;\n+                 }\n+                 // in the case \"urn:isbn:\", just \"isbn\" is used\n+                 String key = identifierKeyValueSplit[length - 2];\n+                 String value = identifierKeyValueSplit[length - 1];\n+                 entry.setField(FieldFactory.parseField(key), value);", "originalCommit": "770a6c27b8d11863213420a6ca71396909f6e538", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3MjAwOQ==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476372009", "bodyText": "Similar to above, why did you moved the try block?", "author": "tobiasdiez", "createdAt": "2020-08-25T11:22:26Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/GoogleScholar.java", "diffHunk": "@@ -131,33 +130,36 @@ public String getName() {\n     public List<BibEntry> performSearch(String query) throws FetcherException {\n         try {\n             obtainAndModifyCookie();\n-            List<BibEntry> foundEntries = new ArrayList<>(10);\n+            List<BibEntry> foundEntries = new ArrayList<>(20);\n \n             URIBuilder uriBuilder = new URIBuilder(BASIC_SEARCH_URL);\n             uriBuilder.addParameter(\"hl\", \"en\");\n             uriBuilder.addParameter(\"btnG\", \"Search\");\n             uriBuilder.addParameter(\"q\", query);\n \n-            addHitsFromQuery(foundEntries, uriBuilder.toString());\n-\n-            if (foundEntries.size() == 10) {\n-                uriBuilder.addParameter(\"start\", \"10\");\n+            try {\n                 addHitsFromQuery(foundEntries, uriBuilder.toString());\n+\n+                if (foundEntries.size() == 10) {\n+                    uriBuilder.addParameter(\"start\", \"10\");\n+                    addHitsFromQuery(foundEntries, uriBuilder.toString());\n+                }\n+            } catch (IOException e) {", "originalCommit": "770a6c27b8d11863213420a6ca71396909f6e538", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3MjU3Nw==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476372577", "bodyText": "Given the problems with the google fetcher, is it really wise to query it a second time for the next 10 results?", "author": "tobiasdiez", "createdAt": "2020-08-25T11:23:41Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/GoogleScholar.java", "diffHunk": "@@ -131,33 +130,36 @@ public String getName() {\n     public List<BibEntry> performSearch(String query) throws FetcherException {\n         try {\n             obtainAndModifyCookie();\n-            List<BibEntry> foundEntries = new ArrayList<>(10);\n+            List<BibEntry> foundEntries = new ArrayList<>(20);\n \n             URIBuilder uriBuilder = new URIBuilder(BASIC_SEARCH_URL);\n             uriBuilder.addParameter(\"hl\", \"en\");\n             uriBuilder.addParameter(\"btnG\", \"Search\");\n             uriBuilder.addParameter(\"q\", query);\n \n-            addHitsFromQuery(foundEntries, uriBuilder.toString());\n-\n-            if (foundEntries.size() == 10) {\n-                uriBuilder.addParameter(\"start\", \"10\");\n+            try {\n                 addHitsFromQuery(foundEntries, uriBuilder.toString());\n+\n+                if (foundEntries.size() == 10) {", "originalCommit": "770a6c27b8d11863213420a6ca71396909f6e538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1MzE3OQ==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476653179", "bodyText": "Removed additional call.", "author": "koppor", "createdAt": "2020-08-25T18:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3MjU3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3Mjg0Mg==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476372842", "bodyText": "Can also be removed in my opinion.", "author": "tobiasdiez", "createdAt": "2020-08-25T11:24:12Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/GoogleScholar.java", "diffHunk": "@@ -215,6 +219,7 @@ private void addHitsFromQuery(List<BibEntry> entryList, String queryURL) throws\n         String content = new URLDownload(queryURL).asString();\n \n         if (needsCaptcha(content)) {\n+            LOGGER.info(\"Captcha hit at {}\", queryURL);", "originalCommit": "770a6c27b8d11863213420a6ca71396909f6e538", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3Mzc4OQ==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476373789", "bodyText": "Comments can be deleted in my opinion", "author": "tobiasdiez", "createdAt": "2020-08-25T11:25:57Z", "path": "src/test/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesFetcherTest.java", "diffHunk": "@@ -66,7 +67,12 @@ public void performSearchReturnsMatchingMultipleEntries() throws FetcherExceptio\n \n         BibEntry secondBibEntry = new BibEntry(StandardEntryType.Article)\n                 .withCiteKey(\"oai:DiVA.org:lnu-68408\")\n-                .withField(new UnknownField(\"identifier\"), \"urn:isbn:978-1-4503-5217-8; doi:10.1145/3129790.3129810; ISI:000426556400034; Scopus 2-s2.0-85037741580\")\n+                // instead of the plain \"identifier\" field, the converter maps that field to", "originalCommit": "770a6c27b8d11863213420a6ca71396909f6e538", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3ODcxNw==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476378717", "bodyText": "I'm a bit split between adding disabled here or not. The fetcher doesn't adhere to the interface tested here, so it's correct that the test is failing, or not? I'm a bit afraid that once you mark tests as disabled, no one will try to fix it because well there are no failing tests, right?", "author": "tobiasdiez", "createdAt": "2020-08-25T11:34:52Z", "path": "src/test/java/org/jabref/logic/importer/fetcher/SpringerFetcherTest.java", "diffHunk": "@@ -80,6 +80,12 @@ void searchByEmptyQueryFindsNothing() throws Exception {\n         assertEquals(Collections.emptyList(), fetcher.performSearch(\"\"));\n     }\n \n+    @Test\n+    @Disabled(\"Year search is currently broken, because the API returns mutliple years.\")", "originalCommit": "770a6c27b8d11863213420a6ca71396909f6e538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxMzU2NQ==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r477613565", "bodyText": "Added to the agenda of JabCon", "author": "koppor", "createdAt": "2020-08-26T21:59:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM3ODcxNw=="}], "type": "inlineReview"}, {"oid": "404251ab7a945348e9dcd04fdff6814e6426c094", "url": "https://github.com/JabRef/jabref/commit/404251ab7a945348e9dcd04fdff6814e6426c094", "message": "Address commetn ins SearchBasedParserFetcher", "committedDate": "2020-08-25T18:23:14Z", "type": "commit"}, {"oid": "43e022f926b7d8cfebd9c2c8b3bada3552da4282", "url": "https://github.com/JabRef/jabref/commit/43e022f926b7d8cfebd9c2c8b3bada3552da4282", "message": "Address CCSB issues", "committedDate": "2020-08-25T18:31:39Z", "type": "commit"}, {"oid": "bb2eb1c6651b48e2d3107fcc1d5511f07e8fe975", "url": "https://github.com/JabRef/jabref/commit/bb2eb1c6651b48e2d3107fcc1d5511f07e8fe975", "message": "Adress Google Scholar Fetcher comments", "committedDate": "2020-08-25T18:31:53Z", "type": "commit"}, {"oid": "214d0072c71b1044eaf3c7cb28d1b0378391640f", "url": "https://github.com/JabRef/jabref/commit/214d0072c71b1044eaf3c7cb28d1b0378391640f", "message": "Final fixes", "committedDate": "2020-08-25T19:03:41Z", "type": "commit"}, {"oid": "ad9eb48c892577aa5418e7c6e9695fdcbe3048c2", "url": "https://github.com/JabRef/jabref/commit/ad9eb48c892577aa5418e7c6e9695fdcbe3048c2", "message": "Merge remote-tracking branch 'origin/master' into fix-fetchers", "committedDate": "2020-08-25T19:04:41Z", "type": "commit"}, {"oid": "f5cc4dd0a1eaa1902fd61a8b4c6fef9528ea5338", "url": "https://github.com/JabRef/jabref/commit/f5cc4dd0a1eaa1902fd61a8b4c6fef9528ea5338", "message": "Keep structure, but include URL in exception", "committedDate": "2020-08-25T19:28:49Z", "type": "commit"}, {"oid": "776220d5a04672766bbcde9c0b75652074097263", "url": "https://github.com/JabRef/jabref/commit/776220d5a04672766bbcde9c0b75652074097263", "message": "Fix copy'n'paste error", "committedDate": "2020-08-25T19:29:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc5MzQ2MQ==", "url": "https://github.com/JabRef/jabref/pull/6790#discussion_r476793461", "bodyText": "Do you really think we need to show the url to the user? What is the additional value of this? They cannot click on it anyway, and mostly likely the error is not in the url but in their configuration or because their internet is down.", "author": "tobiasdiez", "createdAt": "2020-08-25T22:19:07Z", "path": "src/main/java/org/jabref/logic/importer/SearchBasedParserFetcher.java", "diffHunk": "@@ -73,9 +85,19 @@\n             throw new FetcherException(\"Search URI is malformed\", e);\n         } catch (IOException e) {\n             // TODO: Catch HTTP Response 401/403 errors and report that user has no rights to access resource\n-            throw new FetcherException(\"A network error occurred\", e);\n+            try {\n+                throw new FetcherException(\"A network error occurred while fetching from \" + getComplexQueryURL(complexSearchQuery), e);", "originalCommit": "776220d5a04672766bbcde9c0b75652074097263", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a90e21abae63b1ed8652c6bbe10fce2e27286028", "url": "https://github.com/JabRef/jabref/commit/a90e21abae63b1ed8652c6bbe10fce2e27286028", "message": "Add ADR on logging", "committedDate": "2020-08-26T11:08:51Z", "type": "commit"}, {"oid": "faeb0d517936967441d5b9f06f216fec65363e90", "url": "https://github.com/JabRef/jabref/commit/faeb0d517936967441d5b9f06f216fec65363e90", "message": "Add forgotten code (and another \"Bad, because\" statement)", "committedDate": "2020-08-26T11:13:12Z", "type": "commit"}, {"oid": "bf77fd3a4e3d81bceb388de3b467b997720d9cd7", "url": "https://github.com/JabRef/jabref/commit/bf77fd3a4e3d81bceb388de3b467b997720d9cd7", "message": "Fix code", "committedDate": "2020-08-26T11:13:55Z", "type": "commit"}, {"oid": "bbc994a7d7e44c1abdce9342b91b57d3fbc1f5e1", "url": "https://github.com/JabRef/jabref/commit/bbc994a7d7e44c1abdce9342b91b57d3fbc1f5e1", "message": "Finalize SearchbasedParserFetcher", "committedDate": "2020-08-26T19:53:39Z", "type": "commit"}]}