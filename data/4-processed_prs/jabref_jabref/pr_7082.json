{"pr_number": 7082, "pr_title": "Feature/enable paginated fetchers", "pr_createdAt": "2020-11-07T13:02:51Z", "pr_url": "https://github.com/JabRef/jabref/pull/7082", "timeline": [{"oid": "e5fca671ab27a6bbe239c480e4f23a8ee7934191", "url": "https://github.com/JabRef/jabref/commit/e5fca671ab27a6bbe239c480e4f23a8ee7934191", "message": "Add paged fetchers and complex search paged fetchers", "committedDate": "2020-11-06T20:06:09Z", "type": "commit"}, {"oid": "f2ca2cf665fbe6fb7bb508928ce9bb030a4a727f", "url": "https://github.com/JabRef/jabref/commit/f2ca2cf665fbe6fb7bb508928ce9bb030a4a727f", "message": "Merge remote-tracking branch 'upstream/master' into feature/enable-paginated-fetchers", "committedDate": "2020-11-07T12:54:53Z", "type": "commit"}, {"oid": "1fdbc6d4f9724c4f00e26abd60c0026d9070708f", "url": "https://github.com/JabRef/jabref/commit/1fdbc6d4f9724c4f00e26abd60c0026d9070708f", "message": "Fix Checkstyle\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-11-07T13:08:24Z", "type": "commit"}, {"oid": "215c1772311e6c9e004685e935013bba4f066aab", "url": "https://github.com/JabRef/jabref/commit/215c1772311e6c9e004685e935013bba4f066aab", "message": "Fix Checkstyle\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-11-07T13:15:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3ODQ4Nw==", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r519178487", "bodyText": "This struck me recently, isn't there a way to check if the exception is a more specific exception so that one could check for the status code number?", "author": "Siedlerchr", "createdAt": "2020-11-07T13:38:46Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/GoogleScholar.java", "diffHunk": "@@ -259,4 +230,46 @@ private void obtainAndModifyCookie() throws FetcherException {\n             throw new FetcherException(\"Cookie configuration for Google Scholar failed.\", e);\n         }\n     }\n+\n+    @Override\n+    public Page<BibEntry> performSearchPaged(String query, int pageNumber) throws FetcherException {\n+        LOGGER.debug(\"Using URL {}\", query);\n+        obtainAndModifyCookie();\n+        List<BibEntry> foundEntries = new ArrayList<>(20);\n+\n+        URIBuilder uriBuilder = null;\n+        try {\n+            uriBuilder = new URIBuilder(BASIC_SEARCH_URL);\n+        } catch (URISyntaxException e) {\n+            throw new FetcherException(\"Error while fetching from \" + getName() + \" at URL \" + BASIC_SEARCH_URL, e);\n+        }\n+\n+        uriBuilder.addParameter(\"hl\", \"en\");\n+        uriBuilder.addParameter(\"start\", String.valueOf(pageNumber * getPageSize()));\n+        uriBuilder.addParameter(\"num\", String.valueOf(getPageSize()));\n+        uriBuilder.addParameter(\"btnG\", \"Search\");\n+        uriBuilder.addParameter(\"q\", query);\n+        String queryURL = uriBuilder.toString();\n+\n+        try {\n+            addHitsFromQuery(foundEntries, queryURL);\n+        } catch (IOException e) {\n+            // if there are too much requests from the same IP address google is answering with a 503 and redirecting to a captcha challenge\n+            // The caught IOException looks for example like this:\n+            // java.io.IOException: Server returned HTTP response code: 503 for URL: https://ipv4.google.com/sorry/index?continue=https://scholar.google.com/scholar%3Fhl%3Den%26btnG%3DSearch%26q%3Dbpmn&hl=en&q=CGMSBI0NBDkYuqy9wAUiGQDxp4NLQCWbIEY1HjpH5zFJhv4ANPGdWj0\n+            if (e.getMessage().contains(\"Server returned HTTP response code: 503 for URL\")) {", "originalCommit": "215c1772311e6c9e004685e935013bba4f066aab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5MTgwMg==", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r519191802", "bodyText": "I do not quite understand what the benefits of that would be.\nCould you provide me with an example to grasp your idea, please? :)", "author": "DominikVoigt", "createdAt": "2020-11-07T16:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE3ODQ4Nw=="}], "type": "inlineReview"}, {"oid": "4d862650dcd87cc45344770b73225d78c8dcc2d1", "url": "https://github.com/JabRef/jabref/commit/4d862650dcd87cc45344770b73225d78c8dcc2d1", "message": "Make method calls consistent\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-11-07T16:04:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMDkxNw==", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r520500917", "bodyText": "This should be the default implementation, i.e. push to PagedSearchBasedParserFetcher", "author": "tobiasdiez", "createdAt": "2020-11-10T11:45:23Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/IEEE.java", "diffHunk": "@@ -234,8 +228,31 @@ public String getName() {\n \n     @Override\n     public URL getComplexQueryURL(ComplexSearchQuery complexSearchQuery) throws URISyntaxException, MalformedURLException {\n+        return getComplexQueryURL(complexSearchQuery, 0);", "originalCommit": "4d862650dcd87cc45344770b73225d78c8dcc2d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzMjE2MA==", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r521432160", "bodyText": "You have currently quite a lot of code duplications. The main sources are:\n\nComplex and string-based queries have to be implemented separately, leading to mostly the same code. Suggestion: remove string-based queries completely\nUnpaged search methods always fall back to paged search method with page number 0. Suggestion: put these fallbacks in the general PagedSearchFetcher interface.\n\n\nThanks for your feedback! :)\nRegarding 1:\nI think that this is a good idea but will require more work than just replacing the method.\nThis is because for the WebSearchPane for instance the normal string-based search is used as a fallback case when the query could not be parsed.\nTherefore I do not feel comfortable just tossing the string-based version.\nHowever, I will address this in the upcoming weeks :)!", "author": "DominikVoigt", "createdAt": "2020-11-11T15:20:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMDkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQzMjM5Mw==", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r521432393", "bodyText": "I implemented all other suggestions", "author": "DominikVoigt", "createdAt": "2020-11-11T15:21:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMDkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ4ODU2Mg==", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r521488562", "bodyText": "Good!\nConcerning the first point, doesn't it work to parse the queries as follows:\nauthor=me and title=something -> ComplexQuery[author: \"me\", title: \"something\", rest: \"\"]\nauthor=me something -> ComplexQuery[author: \"me\", title: \"\", rest: \"something\"]\nsomething -> ComplexQuery[author: \"\", title: \"\", rest: \"\"something]\nThen you don't need any fall-back to a purely string-based search.\nIn my opinion, this question should be resolved before changing the fetcher in other ways. Otherwise you have a lot of overhead/code duplication now, that will be removed later.", "author": "tobiasdiez", "createdAt": "2020-11-11T16:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMDkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyOTAzNQ==", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r522129035", "bodyText": "I now removed the normal performSearch all together :)", "author": "DominikVoigt", "createdAt": "2020-11-12T14:04:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMDkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ0ODU0MQ==", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r522448541", "bodyText": "Thanks a lot! If you now also remove the \"complex\" in the names, I'm super happy ;-)", "author": "tobiasdiez", "createdAt": "2020-11-12T21:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMDkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwODAzNw==", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r523008037", "bodyText": "I now removed the complex from perform search :)\nRegarding the query object, I believe that it is sensible to keep that name as it will be extended in the future such as structured information.", "author": "DominikVoigt", "createdAt": "2020-11-13T15:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMDkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMTk0Nw==", "url": "https://github.com/JabRef/jabref/pull/7082#discussion_r520501947", "bodyText": "That is a good general test that should exist for every paged fetcher, thus I suggest to move it to the general test class (not sure about the name, maybe PagedSearchFetcherTests?)", "author": "tobiasdiez", "createdAt": "2020-11-10T11:47:21Z", "path": "src/test/java/org/jabref/logic/importer/fetcher/SpringerFetcherTest.java", "diffHunk": "@@ -132,6 +134,20 @@ public void supportsBooleanANDSearch() throws Exception {\n                           .map(Optional::get).forEach(authorField -> assertTrue(authorField.contains(\"Redmiles\")));\n     }\n \n+    /**\n+     * Ensure that different page return different entries\n+     */\n+    @Test\n+    public void pageSearchReturnsUniqueResultsPerPage() throws Exception {", "originalCommit": "4d862650dcd87cc45344770b73225d78c8dcc2d1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9a87a5e5845ed534562b2f7cbf9653ace7133a27", "url": "https://github.com/JabRef/jabref/commit/9a87a5e5845ed534562b2f7cbf9653ace7133a27", "message": "Add test interface for paged fetchers\nMove common methods into default implementation\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-11-11T15:15:59Z", "type": "commit"}, {"oid": "c76bf45bdb74062f6d3f3d38f43798f641e17559", "url": "https://github.com/JabRef/jabref/commit/c76bf45bdb74062f6d3f3d38f43798f641e17559", "message": "Remove performSearch and adapt all tests accordingly\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-11-12T13:09:47Z", "type": "commit"}, {"oid": "189632595c3e9a612d91a00f0d3ea0f99426f1e6", "url": "https://github.com/JabRef/jabref/commit/189632595c3e9a612d91a00f0d3ea0f99426f1e6", "message": "Remove normal paged search\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-11-12T14:01:43Z", "type": "commit"}, {"oid": "4e4e4197fececedf1984fe016edf6248eda0abfb", "url": "https://github.com/JabRef/jabref/commit/4e4e4197fececedf1984fe016edf6248eda0abfb", "message": "Remove the complex part from perform search\nAdapt query parser and add new tests\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-11-13T15:00:02Z", "type": "commit"}]}