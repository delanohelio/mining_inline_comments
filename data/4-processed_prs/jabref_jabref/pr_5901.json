{"pr_number": 5901, "pr_title": "IDE setup updated and extended", "pr_createdAt": "2020-01-31T19:59:08Z", "pr_url": "https://github.com/JabRef/jabref/pull/5901", "timeline": [{"oid": "9f94335add1cb524367895624b19be82cea30068", "url": "https://github.com/JabRef/jabref/commit/9f94335add1cb524367895624b19be82cea30068", "message": "IDE setup updated and extended", "committedDate": "2020-01-31T19:56:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY4MDAzMA==", "url": "https://github.com/JabRef/jabref/pull/5901#discussion_r373680030", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            4. Open the existing project in Eclipse\n          \n          \n            \n            4. Open or import the existing project in Eclipse as Java project. Import as gradle project will not work correctly.", "author": "Siedlerchr", "createdAt": "2020-01-31T20:52:25Z", "path": "docs/guidelines-for-setting-up-a-local-workspace.md", "diffHunk": "@@ -45,55 +45,159 @@ Under Ubuntu Linux, you can follow the [documentation from the Ubuntu Community]\n * Go to the newly created jabref folder: `cd jabref`\n * Generate additional source code: `./gradlew assemble`\n * Start JabRef: `./gradlew run`\n+  * The JabRef's GUI should now start up.\n \n ## Configure your IDE\n \n-### IntelliJ\n+### Setup for IntelliJ\n \n 1. Open `jabref/build.gradle` as a project\n 2. Enable annotation processors:\n-   * File -> Settings -> Compiler -> Annotation processors -> Check \"Enable annotation processing\"\n-3. Configure module settings: Right click on project -> Open Module Settings\n-   * Ensure that the projects SDK is Java 13: Project Settings -> Project -> Project SDK: Choose Java 13\n-   * Ensure that standard SDK is Java 13: Platform Settings -> SDK -> Choose Java 13\n-4. Specify additional compiler arguments: File -> Settings -> Build, Execution, Deployment -> Compiler -> Java Compiler -> Under \"Override compiler parameters per-module\" add the following compiler arguments for the `JabRef.main` module:\n-   ```text\n-   --patch-module test=fastparse_2.12-1.0.0.jar\n-   --patch-module test2=fastparse-utils_2.12-1.0.0.jar\n-   --patch-module test3=sourcecode_2.12-0.1.4.jar\n-   --add-exports javafx.controls/com.sun.javafx.scene.control=org.jabref\n-   --add-exports org.controlsfx.controls/impl.org.controlsfx.skin=org.jabref\n-   --add-exports javafx.graphics/com.sun.javafx.scene=org.controlsfx.controls\n-   --add-exports javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls\n-   --add-exports javafx.graphics/com.sun.javafx.css=org.controlsfx.controls\n-   --add-exports javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls\n-   --add-exports javafx.controls/com.sun.javafx.scene.control=org.controlsfx.controls\n-   --add-exports javafx.controls/com.sun.javafx.scene.control.inputmap=org.controlsfx.controls\n-   --add-exports javafx.base/com.sun.javafx.event=org.controlsfx.controls\n-   --add-exports javafx.base/com.sun.javafx.collections=org.controlsfx.controls\n-   --add-exports javafx.base/com.sun.javafx.runtime=org.controlsfx.controls\n-   --add-exports javafx.web/com.sun.webkit=org.controlsfx.controls\n-   --add-exports javafx.graphics/com.sun.javafx.css=org.controlsfx.controls\n-   --add-exports javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix\n-   --patch-module org.jabref=build/resources/main\n+   * File -> Settings -> Compiler -> Annotation processors:\n+     * Check \"Enable annotation processing\"\n+3. Configure module settings: Right click on project -> Open Module Settings:\n+   * Ensure that the projects' SDK is Java 13:\n+     * Project Settings -> Project -> Project SDK: Choose Java 13\n+   * Ensure that standard SDK is Java 13:\n+     * Platform Settings -> SDK -> Choose Java 13\n+4. Specify additional compiler arguments:\n+   * File -> Settings -> Build, Execution, Deployment -> Compiler -> Java Compiler:\n+     * Under \"Override compiler parameters per-module\" add ([+]) the following compiler arguments for the `JabRef.main` module:\n+\n+   ```\n+   --add-exports=javafx.controls/com.sun.javafx.scene.control=org.jabref\n+   --add-exports=org.controlsfx.controls/impl.org.controlsfx.skin=org.jabref\n    ```\n-4. Use IntellJ to build and run (instead of gradle): File -> Settings -> Build, Execution, Deployment ->  Build Tools -> Gradle -> At \"Build and run using\" and \"Run tests using\" choose \"Intellj IDEA\"\n-4. Ensure that JDK13 is enabled for Gradle: Use IntellJ to build and run (instead of gradle): File -> Settings -> Build, Execution, Deployment ->  Build Tools -> Gradle -> Gradle -> Gradle JVM\n-5. Use the provided code style:\n-   1. Install the [CheckStyle-IDEA plugin](http://plugins.jetbrains.com/plugin/1065?pr=idea), it can be found via plug-in repository (File > Settings > Plugins > Marketplace -> Search for \"Checkstyle\" and choose \"CheckStyle-IDEA). Close the settings afterwards and restart IntelliJ.\n-   2. Go to File > Settings > Editor > Code Style, choose a code style (or create a new one) \n-   3. Click on the settings wheel (next to the scheme chooser), then click \"Import Scheme\" and choose \"IntelliJ Code Style xml\". Select the IntelliJ configuration file `config/IntelliJ Code Style.xml`. Click OK.\n-   4. Go to File -> Settings -> Checkstyle and import the CheckStyle configuration file. Activate it.\n-6. Use the provided run configuration: Run -> Run \"JabRef Main\"\n-\n-### Set-up Eclipse\n-\n-1. Run `./gradlew run` to generate all resources and to check if jabref runs. (This step is only required once)\n-2. Run `./gradlew eclipse` (This has to be always execute, when there are new upstream changes)\n-7. Copy the file Log4jPlugins.java from `build\\generated\\sources\\annotationProcessor\\java\\main\\org\\jabref\\gui\\logging\\plugins` to `org.jabref.gui.logging.plugins`\n-8. Create a run/debug configuration for main class `org.jabref.JabRefLauncher` \n-9. In the arguments tab enter the same runtime arguments as above for intellij.\n-10. Optional: Install the [e(fx)clipse plugin](http://www.eclipse.org/efxclipse/index.html) from the eclipse marketplace\n+\n+5. Use IntellJ to build and run (instead of gradle):\n+   * File -> Settings -> Build, Execution, Deployment -> Build Tools -> Gradle:\n+     * Set \"Build and run using\" and \"Run tests using\" both to \"IntelliJ IDEA\"\n+6. Ensure that the JDK13 is enabled for Gradle: Use IntellJ to build and run (instead of gradle):\n+   * File -> Settings -> Build, Execution, Deployment -> Build Tools -> Gradle -> Gradle:\n+     * Set \"Gradle JVM\" to \"JDK13\"\n+7. Use the provided code style:\n+   1. Install the [CheckStyle-IDEA plugin](http://plugins.jetbrains.com/plugin/1065?pr=idea), it can be found via the plug-in repository:\n+      1. File > Settings > Plugins > Marketplace\n+      2. Search for \"Checkstyle\" and choose \"CheckStyle-IDEA\"\n+      3. Close the settings afterwards and restart IntelliJ\n+   2. Go to File > Settings > Editor > Code Style:\n+      1. Click on the settings wheel (next to the scheme chooser), then click \"Import Scheme\" and choose \"IntelliJ Code Style.xml\".\n+      2. Select the IntelliJ configuration file `config/IntelliJ Code Style.xml`.\n+      3. Click \"OK\".\n+   4. Go to File -> Settings -> Checkstyle -> Configuration File:\n+      1. Import the CheckStyle configuration file by clicking the [+] button\n+      2. For the description provide e.g. \"CheckStyle\"\n+      3. Click \"Browse\" and choose `config/checkstyle/checkstyle.xml`\n+      4. Click \"Next\" and \"Finish\"\n+      5. Activate the CheckStyle configuration file by ticking it in the list\n+      6. Save settings by clicking \"OK\"\n+8. Open Run -> Edit Configurations...:\n+   1. Select Application -> JabRef Main\n+   2. Verify, that \"JRE\" is set to \"Default (JDK 13)\" or to JDK 13\n+   3. Set \"VM Options\" to the following:\n+\n+    ```\n+    --patch-module org.jabref=build/resources/main\n+    --add-exports javafx.controls/com.sun.javafx.scene.control=org.jabref\n+    --add-exports org.controlsfx.controls/impl.org.controlsfx.skin=org.jabref\n+    --add-exports javafx.graphics/com.sun.javafx.scene=org.controlsfx.controls\n+    --add-exports javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls\n+    --add-exports javafx.graphics/com.sun.javafx.css=org.controlsfx.controls\n+    --add-exports javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls\n+    --add-exports javafx.controls/com.sun.javafx.scene.control=org.controlsfx.controls\n+    --add-exports javafx.controls/com.sun.javafx.scene.control.inputmap=org.controlsfx.controls\n+    --add-exports javafx.base/com.sun.javafx.event=org.controlsfx.controls\n+    --add-exports javafx.base/com.sun.javafx.collections=org.controlsfx.controls\n+    --add-exports javafx.base/com.sun.javafx.runtime=org.controlsfx.controls\n+    --add-exports javafx.web/com.sun.webkit=org.controlsfx.controls\n+    --add-exports javafx.graphics/com.sun.javafx.css=org.controlsfx.controls\n+    --add-exports javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix\n+    --add-exports com.oracle.truffle.regex/com.oracle.truffle.regex=org.graalvm.truffle\n+    --add-opens javafx.controls/javafx.scene.control=org.jabref\n+    --add-opens org.controlsfx.controls/org.controlsfx.control.textfield=org.jabref\n+    --add-opens javafx.controls/javafx.scene.control.skin=org.controlsfx.controls\n+    --add-opens javafx.graphics/javafx.scene=org.controlsfx.controls\n+    --add-opens javafx.controls/com.sun.javafx.scene.control=org.jabref\n+    --add-opens javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix\n+    --add-opens javafx.base/com.sun.javafx.binding=com.jfoenix\n+    --add-opens javafx.graphics/com.sun.javafx.stage=com.jfoenix\n+    --add-opens javafx.base/com.sun.javafx.event=com.jfoenix\n+    ```\n+\n+     Optionally the following entries can also be added (but they currently only produce warnings and they are not needed):\n+\n+   ```\n+    --patch-module test=fastparse_2.12-1.0.0.jar\n+    --patch-module test2=fastparse-utils_2.12-1.0.0.jar\n+    --patch-module test3=sourcecode_2.12-0.1.4.jar\n+   ```\n+\n+9. If you have configured Eclipse for the same project (the required steps are described below), then the additionally added file `Log4jPlugins.java` must be excluded from the compilation process, otherwise an error will occur during the compilation of the project:\n+   * File -> Settings -> Build, Execution, Deployment -> Compiler -> Excludes: Add the following file to the list ([+]), in order to exclude it:\n+     * `src/main/java/org/jabref/gui/logging/plugins/Log4jPlugins.java`\n+10. Use the provided run configuration: Run -> Run \"JabRef Main\"\n+    * This uses now IntelliJ for building and running/debugging the application, which is recommended, since the application starts quite fast.\n+11. Alternatively, the project can also be built and run/debugged by using gradle from within the IDE, which is not recommended, since the application starts significantly slower:\n+    1. Open the gradle tool window:\n+       * View -> Tool Windows -> Gradle\n+    2. Navigate to the following entry in the gradle tool window:\n+       * JabRef -> Tasks -> application -> run\n+    3. Double click \"run\" to build and run the application\n+    4. After that a new entry called \"jabref [run]\" will appear in the run configurations\n+    5. Now you can also select \"jabref [run]\" and either run or debug the application from within IntelliJ\n+       * Equivalently, this can also be executed from the terminal by running `./gradlew run`.\n+\n+\n+### Setup for Eclipse\n+\n+1. Run `./gradlew run` to generate all resources and to check if jabref runs.\n+   * The JabRef GUI should finally appear.\n+   * This step is only required once.\n+2. Run `./gradlew eclipse`\n+   * **This must always be executed, when there are new upstream changes.**\n+3. Copy the file `Log4jPlugins.java` from `build\\generated\\sources\\annotationProcessor\\java\\main\\org\\jabref\\gui\\logging\\plugins` to `src/main/java/org/jabref/gui/logging/plugins/`\n+   * Usually, the folder `plugins` must be created for that.\n+4. Open the existing project in Eclipse", "originalCommit": "9f94335add1cb524367895624b19be82cea30068", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3MjI3MA==", "url": "https://github.com/JabRef/jabref/pull/5901#discussion_r373772270", "bodyText": "This was already missing before the other changes, but it would be nice, if you could fix it here, since it is printed there too:\n... Settings -> Build, Execution, Deployment -> Compiler ...", "author": "calixtus", "createdAt": "2020-02-01T10:24:34Z", "path": "docs/guidelines-for-setting-up-a-local-workspace.md", "diffHunk": "@@ -45,55 +45,159 @@ Under Ubuntu Linux, you can follow the [documentation from the Ubuntu Community]\n * Go to the newly created jabref folder: `cd jabref`\n * Generate additional source code: `./gradlew assemble`\n * Start JabRef: `./gradlew run`\n+  * The JabRef's GUI should now start up.\n \n ## Configure your IDE\n \n-### IntelliJ\n+### Setup for IntelliJ\n \n 1. Open `jabref/build.gradle` as a project\n 2. Enable annotation processors:\n-   * File -> Settings -> Compiler -> Annotation processors -> Check \"Enable annotation processing\"\n-3. Configure module settings: Right click on project -> Open Module Settings\n-   * Ensure that the projects SDK is Java 13: Project Settings -> Project -> Project SDK: Choose Java 13\n-   * Ensure that standard SDK is Java 13: Platform Settings -> SDK -> Choose Java 13\n-4. Specify additional compiler arguments: File -> Settings -> Build, Execution, Deployment -> Compiler -> Java Compiler -> Under \"Override compiler parameters per-module\" add the following compiler arguments for the `JabRef.main` module:\n-   ```text\n-   --patch-module test=fastparse_2.12-1.0.0.jar\n-   --patch-module test2=fastparse-utils_2.12-1.0.0.jar\n-   --patch-module test3=sourcecode_2.12-0.1.4.jar\n-   --add-exports javafx.controls/com.sun.javafx.scene.control=org.jabref\n-   --add-exports org.controlsfx.controls/impl.org.controlsfx.skin=org.jabref\n-   --add-exports javafx.graphics/com.sun.javafx.scene=org.controlsfx.controls\n-   --add-exports javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls\n-   --add-exports javafx.graphics/com.sun.javafx.css=org.controlsfx.controls\n-   --add-exports javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls\n-   --add-exports javafx.controls/com.sun.javafx.scene.control=org.controlsfx.controls\n-   --add-exports javafx.controls/com.sun.javafx.scene.control.inputmap=org.controlsfx.controls\n-   --add-exports javafx.base/com.sun.javafx.event=org.controlsfx.controls\n-   --add-exports javafx.base/com.sun.javafx.collections=org.controlsfx.controls\n-   --add-exports javafx.base/com.sun.javafx.runtime=org.controlsfx.controls\n-   --add-exports javafx.web/com.sun.webkit=org.controlsfx.controls\n-   --add-exports javafx.graphics/com.sun.javafx.css=org.controlsfx.controls\n-   --add-exports javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix\n-   --patch-module org.jabref=build/resources/main\n+   * File -> Settings -> Compiler -> Annotation processors:", "originalCommit": "9f94335add1cb524367895624b19be82cea30068", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3Mjc2NQ==", "url": "https://github.com/JabRef/jabref/pull/5901#discussion_r373772765", "bodyText": "Same thing here: ... Settings -> Other Settings -> Checkstyle ...", "author": "calixtus", "createdAt": "2020-02-01T10:35:29Z", "path": "docs/guidelines-for-setting-up-a-local-workspace.md", "diffHunk": "@@ -45,55 +45,159 @@ Under Ubuntu Linux, you can follow the [documentation from the Ubuntu Community]\n * Go to the newly created jabref folder: `cd jabref`\n * Generate additional source code: `./gradlew assemble`\n * Start JabRef: `./gradlew run`\n+  * The JabRef's GUI should now start up.\n \n ## Configure your IDE\n \n-### IntelliJ\n+### Setup for IntelliJ\n \n 1. Open `jabref/build.gradle` as a project\n 2. Enable annotation processors:\n-   * File -> Settings -> Compiler -> Annotation processors -> Check \"Enable annotation processing\"\n-3. Configure module settings: Right click on project -> Open Module Settings\n-   * Ensure that the projects SDK is Java 13: Project Settings -> Project -> Project SDK: Choose Java 13\n-   * Ensure that standard SDK is Java 13: Platform Settings -> SDK -> Choose Java 13\n-4. Specify additional compiler arguments: File -> Settings -> Build, Execution, Deployment -> Compiler -> Java Compiler -> Under \"Override compiler parameters per-module\" add the following compiler arguments for the `JabRef.main` module:\n-   ```text\n-   --patch-module test=fastparse_2.12-1.0.0.jar\n-   --patch-module test2=fastparse-utils_2.12-1.0.0.jar\n-   --patch-module test3=sourcecode_2.12-0.1.4.jar\n-   --add-exports javafx.controls/com.sun.javafx.scene.control=org.jabref\n-   --add-exports org.controlsfx.controls/impl.org.controlsfx.skin=org.jabref\n-   --add-exports javafx.graphics/com.sun.javafx.scene=org.controlsfx.controls\n-   --add-exports javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls\n-   --add-exports javafx.graphics/com.sun.javafx.css=org.controlsfx.controls\n-   --add-exports javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls\n-   --add-exports javafx.controls/com.sun.javafx.scene.control=org.controlsfx.controls\n-   --add-exports javafx.controls/com.sun.javafx.scene.control.inputmap=org.controlsfx.controls\n-   --add-exports javafx.base/com.sun.javafx.event=org.controlsfx.controls\n-   --add-exports javafx.base/com.sun.javafx.collections=org.controlsfx.controls\n-   --add-exports javafx.base/com.sun.javafx.runtime=org.controlsfx.controls\n-   --add-exports javafx.web/com.sun.webkit=org.controlsfx.controls\n-   --add-exports javafx.graphics/com.sun.javafx.css=org.controlsfx.controls\n-   --add-exports javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix\n-   --patch-module org.jabref=build/resources/main\n+   * File -> Settings -> Compiler -> Annotation processors:\n+     * Check \"Enable annotation processing\"\n+3. Configure module settings: Right click on project -> Open Module Settings:\n+   * Ensure that the projects' SDK is Java 13:\n+     * Project Settings -> Project -> Project SDK: Choose Java 13\n+   * Ensure that standard SDK is Java 13:\n+     * Platform Settings -> SDK -> Choose Java 13\n+4. Specify additional compiler arguments:\n+   * File -> Settings -> Build, Execution, Deployment -> Compiler -> Java Compiler:\n+     * Under \"Override compiler parameters per-module\" add ([+]) the following compiler arguments for the `JabRef.main` module:\n+\n+   ```\n+   --add-exports=javafx.controls/com.sun.javafx.scene.control=org.jabref\n+   --add-exports=org.controlsfx.controls/impl.org.controlsfx.skin=org.jabref\n    ```\n-4. Use IntellJ to build and run (instead of gradle): File -> Settings -> Build, Execution, Deployment ->  Build Tools -> Gradle -> At \"Build and run using\" and \"Run tests using\" choose \"Intellj IDEA\"\n-4. Ensure that JDK13 is enabled for Gradle: Use IntellJ to build and run (instead of gradle): File -> Settings -> Build, Execution, Deployment ->  Build Tools -> Gradle -> Gradle -> Gradle JVM\n-5. Use the provided code style:\n-   1. Install the [CheckStyle-IDEA plugin](http://plugins.jetbrains.com/plugin/1065?pr=idea), it can be found via plug-in repository (File > Settings > Plugins > Marketplace -> Search for \"Checkstyle\" and choose \"CheckStyle-IDEA). Close the settings afterwards and restart IntelliJ.\n-   2. Go to File > Settings > Editor > Code Style, choose a code style (or create a new one) \n-   3. Click on the settings wheel (next to the scheme chooser), then click \"Import Scheme\" and choose \"IntelliJ Code Style xml\". Select the IntelliJ configuration file `config/IntelliJ Code Style.xml`. Click OK.\n-   4. Go to File -> Settings -> Checkstyle and import the CheckStyle configuration file. Activate it.\n-6. Use the provided run configuration: Run -> Run \"JabRef Main\"\n-\n-### Set-up Eclipse\n-\n-1. Run `./gradlew run` to generate all resources and to check if jabref runs. (This step is only required once)\n-2. Run `./gradlew eclipse` (This has to be always execute, when there are new upstream changes)\n-7. Copy the file Log4jPlugins.java from `build\\generated\\sources\\annotationProcessor\\java\\main\\org\\jabref\\gui\\logging\\plugins` to `org.jabref.gui.logging.plugins`\n-8. Create a run/debug configuration for main class `org.jabref.JabRefLauncher` \n-9. In the arguments tab enter the same runtime arguments as above for intellij.\n-10. Optional: Install the [e(fx)clipse plugin](http://www.eclipse.org/efxclipse/index.html) from the eclipse marketplace\n+\n+5. Use IntellJ to build and run (instead of gradle):\n+   * File -> Settings -> Build, Execution, Deployment -> Build Tools -> Gradle:\n+     * Set \"Build and run using\" and \"Run tests using\" both to \"IntelliJ IDEA\"\n+6. Ensure that the JDK13 is enabled for Gradle: Use IntellJ to build and run (instead of gradle):\n+   * File -> Settings -> Build, Execution, Deployment -> Build Tools -> Gradle -> Gradle:\n+     * Set \"Gradle JVM\" to \"JDK13\"\n+7. Use the provided code style:\n+   1. Install the [CheckStyle-IDEA plugin](http://plugins.jetbrains.com/plugin/1065?pr=idea), it can be found via the plug-in repository:\n+      1. File > Settings > Plugins > Marketplace\n+      2. Search for \"Checkstyle\" and choose \"CheckStyle-IDEA\"\n+      3. Close the settings afterwards and restart IntelliJ\n+   2. Go to File > Settings > Editor > Code Style:\n+      1. Click on the settings wheel (next to the scheme chooser), then click \"Import Scheme\" and choose \"IntelliJ Code Style.xml\".\n+      2. Select the IntelliJ configuration file `config/IntelliJ Code Style.xml`.\n+      3. Click \"OK\".\n+   4. Go to File -> Settings -> Checkstyle -> Configuration File:", "originalCommit": "9f94335add1cb524367895624b19be82cea30068", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3MzA3Mw==", "url": "https://github.com/JabRef/jabref/pull/5901#discussion_r373773073", "bodyText": "Can the two lines here be merged?", "author": "calixtus", "createdAt": "2020-02-01T10:41:25Z", "path": "docs/guidelines-for-setting-up-a-local-workspace.md", "diffHunk": "@@ -45,55 +45,159 @@ Under Ubuntu Linux, you can follow the [documentation from the Ubuntu Community]\n * Go to the newly created jabref folder: `cd jabref`\n * Generate additional source code: `./gradlew assemble`\n * Start JabRef: `./gradlew run`\n+  * The JabRef's GUI should now start up.\n \n ## Configure your IDE\n \n-### IntelliJ\n+### Setup for IntelliJ\n \n 1. Open `jabref/build.gradle` as a project\n 2. Enable annotation processors:\n-   * File -> Settings -> Compiler -> Annotation processors -> Check \"Enable annotation processing\"\n-3. Configure module settings: Right click on project -> Open Module Settings\n-   * Ensure that the projects SDK is Java 13: Project Settings -> Project -> Project SDK: Choose Java 13\n-   * Ensure that standard SDK is Java 13: Platform Settings -> SDK -> Choose Java 13\n-4. Specify additional compiler arguments: File -> Settings -> Build, Execution, Deployment -> Compiler -> Java Compiler -> Under \"Override compiler parameters per-module\" add the following compiler arguments for the `JabRef.main` module:\n-   ```text\n-   --patch-module test=fastparse_2.12-1.0.0.jar\n-   --patch-module test2=fastparse-utils_2.12-1.0.0.jar\n-   --patch-module test3=sourcecode_2.12-0.1.4.jar\n-   --add-exports javafx.controls/com.sun.javafx.scene.control=org.jabref\n-   --add-exports org.controlsfx.controls/impl.org.controlsfx.skin=org.jabref\n-   --add-exports javafx.graphics/com.sun.javafx.scene=org.controlsfx.controls\n-   --add-exports javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls\n-   --add-exports javafx.graphics/com.sun.javafx.css=org.controlsfx.controls\n-   --add-exports javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls\n-   --add-exports javafx.controls/com.sun.javafx.scene.control=org.controlsfx.controls\n-   --add-exports javafx.controls/com.sun.javafx.scene.control.inputmap=org.controlsfx.controls\n-   --add-exports javafx.base/com.sun.javafx.event=org.controlsfx.controls\n-   --add-exports javafx.base/com.sun.javafx.collections=org.controlsfx.controls\n-   --add-exports javafx.base/com.sun.javafx.runtime=org.controlsfx.controls\n-   --add-exports javafx.web/com.sun.webkit=org.controlsfx.controls\n-   --add-exports javafx.graphics/com.sun.javafx.css=org.controlsfx.controls\n-   --add-exports javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix\n-   --patch-module org.jabref=build/resources/main\n+   * File -> Settings -> Compiler -> Annotation processors:\n+     * Check \"Enable annotation processing\"\n+3. Configure module settings: Right click on project -> Open Module Settings:\n+   * Ensure that the projects' SDK is Java 13:\n+     * Project Settings -> Project -> Project SDK: Choose Java 13\n+   * Ensure that standard SDK is Java 13:\n+     * Platform Settings -> SDK -> Choose Java 13\n+4. Specify additional compiler arguments:\n+   * File -> Settings -> Build, Execution, Deployment -> Compiler -> Java Compiler:\n+     * Under \"Override compiler parameters per-module\" add ([+]) the following compiler arguments for the `JabRef.main` module:\n+\n+   ```\n+   --add-exports=javafx.controls/com.sun.javafx.scene.control=org.jabref\n+   --add-exports=org.controlsfx.controls/impl.org.controlsfx.skin=org.jabref\n    ```\n-4. Use IntellJ to build and run (instead of gradle): File -> Settings -> Build, Execution, Deployment ->  Build Tools -> Gradle -> At \"Build and run using\" and \"Run tests using\" choose \"Intellj IDEA\"\n-4. Ensure that JDK13 is enabled for Gradle: Use IntellJ to build and run (instead of gradle): File -> Settings -> Build, Execution, Deployment ->  Build Tools -> Gradle -> Gradle -> Gradle JVM\n-5. Use the provided code style:\n-   1. Install the [CheckStyle-IDEA plugin](http://plugins.jetbrains.com/plugin/1065?pr=idea), it can be found via plug-in repository (File > Settings > Plugins > Marketplace -> Search for \"Checkstyle\" and choose \"CheckStyle-IDEA). Close the settings afterwards and restart IntelliJ.\n-   2. Go to File > Settings > Editor > Code Style, choose a code style (or create a new one) \n-   3. Click on the settings wheel (next to the scheme chooser), then click \"Import Scheme\" and choose \"IntelliJ Code Style xml\". Select the IntelliJ configuration file `config/IntelliJ Code Style.xml`. Click OK.\n-   4. Go to File -> Settings -> Checkstyle and import the CheckStyle configuration file. Activate it.\n-6. Use the provided run configuration: Run -> Run \"JabRef Main\"\n-\n-### Set-up Eclipse\n-\n-1. Run `./gradlew run` to generate all resources and to check if jabref runs. (This step is only required once)\n-2. Run `./gradlew eclipse` (This has to be always execute, when there are new upstream changes)\n-7. Copy the file Log4jPlugins.java from `build\\generated\\sources\\annotationProcessor\\java\\main\\org\\jabref\\gui\\logging\\plugins` to `org.jabref.gui.logging.plugins`\n-8. Create a run/debug configuration for main class `org.jabref.JabRefLauncher` \n-9. In the arguments tab enter the same runtime arguments as above for intellij.\n-10. Optional: Install the [e(fx)clipse plugin](http://www.eclipse.org/efxclipse/index.html) from the eclipse marketplace\n+\n+5. Use IntellJ to build and run (instead of gradle):\n+   * File -> Settings -> Build, Execution, Deployment -> Build Tools -> Gradle:\n+     * Set \"Build and run using\" and \"Run tests using\" both to \"IntelliJ IDEA\"\n+6. Ensure that the JDK13 is enabled for Gradle: Use IntellJ to build and run (instead of gradle):\n+   * File -> Settings -> Build, Execution, Deployment -> Build Tools -> Gradle -> Gradle:\n+     * Set \"Gradle JVM\" to \"JDK13\"\n+7. Use the provided code style:\n+   1. Install the [CheckStyle-IDEA plugin](http://plugins.jetbrains.com/plugin/1065?pr=idea), it can be found via the plug-in repository:\n+      1. File > Settings > Plugins > Marketplace\n+      2. Search for \"Checkstyle\" and choose \"CheckStyle-IDEA\"\n+      3. Close the settings afterwards and restart IntelliJ\n+   2. Go to File > Settings > Editor > Code Style:\n+      1. Click on the settings wheel (next to the scheme chooser), then click \"Import Scheme\" and choose \"IntelliJ Code Style.xml\".\n+      2. Select the IntelliJ configuration file `config/IntelliJ Code Style.xml`.\n+      3. Click \"OK\".\n+   4. Go to File -> Settings -> Checkstyle -> Configuration File:\n+      1. Import the CheckStyle configuration file by clicking the [+] button\n+      2. For the description provide e.g. \"CheckStyle\"\n+      3. Click \"Browse\" and choose `config/checkstyle/checkstyle.xml`\n+      4. Click \"Next\" and \"Finish\"\n+      5. Activate the CheckStyle configuration file by ticking it in the list\n+      6. Save settings by clicking \"OK\"\n+8. Open Run -> Edit Configurations...:\n+   1. Select Application -> JabRef Main", "originalCommit": "9f94335add1cb524367895624b19be82cea30068", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NDI4OQ==", "url": "https://github.com/JabRef/jabref/pull/5901#discussion_r373774289", "bodyText": "Do you mean the two lines\n8. Open Run -> Edit Configurations...:\n   1. Select Application -> JabRef Main\n\n?\nThey could. It depends on how one likes it more.", "author": "systemoperator", "createdAt": "2020-02-01T11:11:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3MzA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NDkzMQ==", "url": "https://github.com/JabRef/jabref/pull/5901#discussion_r373774931", "bodyText": "Well, you did it in the other breadcrumbs... \ud83d\ude05", "author": "calixtus", "createdAt": "2020-02-01T11:27:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3MzA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NzcxMA==", "url": "https://github.com/JabRef/jabref/pull/5901#discussion_r373777710", "bodyText": "updated", "author": "systemoperator", "createdAt": "2020-02-01T12:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3MzA3Mw=="}], "type": "inlineReview"}, {"oid": "0560bc31f9ab83a522804d260ea72ee08c35a3c6", "url": "https://github.com/JabRef/jabref/commit/0560bc31f9ab83a522804d260ea72ee08c35a3c6", "message": "Update docs/guidelines-for-setting-up-a-local-workspace.md\n\nCo-Authored-By: Christoph <cschwentker@gmail.com>", "committedDate": "2020-02-01T11:03:34Z", "type": "commit"}, {"oid": "8c010ffa62848730788692d54b645899a06bf3ff", "url": "https://github.com/JabRef/jabref/commit/8c010ffa62848730788692d54b645899a06bf3ff", "message": "update", "committedDate": "2020-02-01T11:16:12Z", "type": "commit"}, {"oid": "5eb9ab64230314d94a1121d8598c9b3b076402d8", "url": "https://github.com/JabRef/jabref/commit/5eb9ab64230314d94a1121d8598c9b3b076402d8", "message": "update", "committedDate": "2020-02-01T12:31:53Z", "type": "commit"}, {"oid": "fcb243bf9b988d2e5ee9a9f8ba86ec280265f9f3", "url": "https://github.com/JabRef/jabref/commit/fcb243bf9b988d2e5ee9a9f8ba86ec280265f9f3", "message": "minor changes", "committedDate": "2020-02-01T15:25:21Z", "type": "commit"}]}