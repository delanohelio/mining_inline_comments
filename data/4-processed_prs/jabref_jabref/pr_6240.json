{"pr_number": 6240, "pr_title": "Add simple Unit Tests for #6207", "pr_createdAt": "2020-04-04T16:50:38Z", "pr_url": "https://github.com/JabRef/jabref/pull/6240", "timeline": [{"oid": "b9c73fd41747dbd440bd9dbb0a0b1bba627cbfcc", "url": "https://github.com/JabRef/jabref/commit/b9c73fd41747dbd440bd9dbb0a0b1bba627cbfcc", "message": "Unit tests improvement for #6207\n\nAdd the following changes:\n-remove multiple assert statements in test cases\n-split each assert statement in different test methods with meaningful\ntest names", "committedDate": "2020-04-04T16:39:52Z", "type": "commit"}, {"oid": "b37a9213b36a0d52df74b710948c67ae0db536e1", "url": "https://github.com/JabRef/jabref/commit/b37a9213b36a0d52df74b710948c67ae0db536e1", "message": "Fix some problems\n\nFix some encoding problems\nFix merge conflict with the master branch", "committedDate": "2020-04-04T17:00:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzAyOA==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r403697028", "bodyText": "I would move all these tests to TitleCheckerTest and just keep one subtitle tests here.\nThis test class here is only for an integration test (TitleChecker is integrated in the IntegrityCheck) - the \"real\" functionality is in org.jabref.logic.integrity.TitleChecker.\nWhen you are on it, you could fix the capitalization in TitleCheckerTest:", "author": "koppor", "createdAt": "2020-04-05T12:45:03Z", "path": "src/test/java/org/jabref/logic/integrity/IntegrityCheckTest.java", "diffHunk": "@@ -186,6 +292,17 @@ void testTitleChecks() {\n         assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a {Title}\"), BibDatabaseMode.BIBTEX));\n         assertCorrect(withMode(createContext(StandardField.TITLE, \"{C}urrent {C}hronicle\"), BibDatabaseMode.BIBTEX));\n         assertCorrect(withMode(createContext(StandardField.TITLE, \"{A Model-Driven Approach for Monitoring {ebBP} BusinessTransactions}\"), BibDatabaseMode.BIBTEX));\n+        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a sub title 1: This is a sub title 2\"), BibDatabaseMode.BIBTEX));", "originalCommit": "b37a9213b36a0d52df74b710948c67ae0db536e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fe9546de7350f29f6e3d16a4a41fb08e2ada979d", "url": "https://github.com/JabRef/jabref/commit/fe9546de7350f29f6e3d16a4a41fb08e2ada979d", "message": "Fix merge conflict", "committedDate": "2020-04-10T20:55:00Z", "type": "commit"}, {"oid": "02e8f678d2bb99c6009e1d88f7e92422d4766f58", "url": "https://github.com/JabRef/jabref/commit/02e8f678d2bb99c6009e1d88f7e92422d4766f58", "message": "Add more unit tests\n\nAdd the following changes:\n-move tests from IntegrityCheckTest to the appropriate Test classes\n-remove multiple assert statements in different test methods\n-fix the capitalization in TitleCheckerTest", "committedDate": "2020-04-12T14:49:21Z", "type": "commit"}, {"oid": "b204b6bc4009fef11d03ea8d12cc9d8e7d21c26b", "url": "https://github.com/JabRef/jabref/commit/b204b6bc4009fef11d03ea8d12cc9d8e7d21c26b", "message": "Solve some issues\n\nChange two failing tests to succesfull\nRemove one test", "committedDate": "2020-04-12T19:35:09Z", "type": "commit"}, {"oid": "0595351cdb5c84555f0f42188d9082a1ec309f4f", "url": "https://github.com/JabRef/jabref/commit/0595351cdb5c84555f0f42188d9082a1ec309f4f", "message": "Merge from upstream/master", "committedDate": "2020-04-15T11:04:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MDIxNw==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r412660217", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void fieldAcceptsASCIICharacters() {\n          \n          \n            \n                void fieldAcceptsAsciiCharacters() {\n          \n      \n    \n    \n  \n\nEven not conform with current JabRef classes, please use defined camel case - see https://google.github.io/styleguide/javaguide.html#s5.3-camel-case for details.", "author": "koppor", "createdAt": "2020-04-22T04:26:57Z", "path": "src/test/java/org/jabref/logic/integrity/ASCIICharacterCheckerTest.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.jabref.logic.integrity;\n+\n+import org.jabref.model.entry.field.StandardField;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ASCIICharacterCheckerTest {\n+\n+    @Test\n+    void fieldAcceptsASCIICharacters() {", "originalCommit": "0595351cdb5c84555f0f42188d9082a1ec309f4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MDg0OA==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r412660848", "bodyText": "Please use checker.checkValue instead of IntegrityCheckTest.... Reason: Keep the tests focused in the test subject.\nSee the name \"AbbreviationCheckerTest\"? It tests the class \"AbbreviationChecker\". This class is instantiated in line 25.\nAlso applies for the other checks you added. Could you please rework?", "author": "koppor", "createdAt": "2020-04-22T04:29:02Z", "path": "src/test/java/org/jabref/logic/integrity/AbbreviationCheckerTest.java", "diffHunk": "@@ -32,4 +35,25 @@ void checkValueDoesNotComplainAboutJournalNameThatHasSameAbbreviation() {\n         abbreviationRepository.addEntry(new Abbreviation(\"Journal\", \"Journal\"));\n         assertEquals(Optional.empty(), checker.checkValue(\"Journal\"));\n     }\n+\n+    @Test\n+    void journalNameAcceptsFullForm() {\n+        for (Field field : Arrays.asList(StandardField.BOOKTITLE, StandardField.JOURNAL)) {\n+            IntegrityCheckTest.assertCorrect(IntegrityCheckTest.createContext(field, \"IEEE Software\"));", "originalCommit": "0595351cdb5c84555f0f42188d9082a1ec309f4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcxMTM3NA==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r413711374", "bodyText": "@koppor I changed every class that has a checkValue method. But some of them like ASCIICharacterChecker.java has a different method(public List check(BibEntry entry)). Do you want me to change those tests too? If yes can you suggest me something? Because it is like IntegrityCheck.java and you haven't made any comments on my test class.", "author": "dimitra-karadima", "createdAt": "2020-04-23T10:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MDg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4MjI2OQ==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r414082269", "bodyText": "No errors: assertEquals(Collections.emptyList(), assciCharacterChecker.check(entry));\nErrors: assertEquals(List.of(new IntegrityCheckMessage(\"...text\", StandardFields.DOI)), assciCharacterChecker.check(entry));). This way, the real error message is checked. And if someone changes something in the checker, it is also noted in the tests. See our long disucssions at #6300 (which are also caused by failing tests - and we were forced to think about the intended behavior more deeply).", "author": "koppor", "createdAt": "2020-04-23T19:56:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MDg0OA=="}], "type": "inlineReview"}, {"oid": "3a4f9d72d4884b4d7234ad7d4b51105c359a337a", "url": "https://github.com/JabRef/jabref/commit/3a4f9d72d4884b4d7234ad7d4b51105c359a337a", "message": "Rework the added tests\n\nAdd the following changes:\n-Use checker.checkValue or checker.check instead of IntegrityCheckTest...\n-Split a method with multiple assertion methods in FileCheckerTest into three different with a simple assertion method\n-Rename a method in ASCIICharacterCheckerTest in order to use defined camel case", "committedDate": "2020-04-23T23:00:23Z", "type": "commit"}, {"oid": "c9320d45ece0a36df4192abfd9156fd22b94da97", "url": "https://github.com/JabRef/jabref/commit/c9320d45ece0a36df4192abfd9156fd22b94da97", "message": "Merge branch 'master' into fix-for-issue-6207", "committedDate": "2020-05-05T19:27:59Z", "type": "commit"}, {"oid": "ed2e7ea153663372bf2e089fa777e7d121007bc9", "url": "https://github.com/JabRef/jabref/commit/ed2e7ea153663372bf2e089fa777e7d121007bc9", "message": "Fix conflicts", "committedDate": "2020-05-05T19:41:45Z", "type": "commit"}, {"oid": "dc72c059c39f1e7bec827e384ff751e8432e2579", "url": "https://github.com/JabRef/jabref/commit/dc72c059c39f1e7bec827e384ff751e8432e2579", "message": "Merge master to branch", "committedDate": "2020-05-05T19:52:32Z", "type": "commit"}, {"oid": "3933821379bfa8958829310fdac9e143d60cdb2c", "url": "https://github.com/JabRef/jabref/commit/3933821379bfa8958829310fdac9e143d60cdb2c", "message": "Merge branch 'master' into fix-for-issue-6207", "committedDate": "2020-05-06T22:58:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MTQxOA==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r421141418", "bodyText": "No need for the @BeforeEach here. Just initialize the checker in line 13. --> One SLOC insted of 6 for the same functionality. -- JUnit initializes the class on each run.\nPlease check the other (modified) classes, too.", "author": "koppor", "createdAt": "2020-05-06T23:02:05Z", "path": "src/test/java/org/jabref/logic/integrity/BooktitleCheckerTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.jabref.logic.integrity;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+\n+public class BooktitleCheckerTest {\n+\n+    private BooktitleChecker checker;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        checker = new BooktitleChecker();", "originalCommit": "3933821379bfa8958829310fdac9e143d60cdb2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MTc0MQ==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r421141741", "bodyText": "Here, the @BeforeEach is OK, because there is more happening than just creating objects.", "author": "koppor", "createdAt": "2020-05-06T23:03:01Z", "path": "src/test/java/org/jabref/logic/integrity/EditionCheckerTest.java", "diffHunk": "@@ -3,15 +3,35 @@\n import java.util.Optional;\n \n import org.jabref.model.database.BibDatabaseContext;\n-\n+import org.jabref.model.database.BibDatabaseMode;\n+import org.jabref.model.entry.BibEntry;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class EditionCheckerTest {\n \n+    private EditionChecker checker;\n+    private EditionChecker checkerb;\n+    private BibEntry entry;\n+    private BibDatabaseContext bibtex;\n+    private BibDatabaseContext biblatex;\n+\n+    @BeforeEach\n+    void setUp() {", "originalCommit": "3933821379bfa8958829310fdac9e143d60cdb2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MTg0NQ==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r421141845", "bodyText": "Why is here commented code?", "author": "koppor", "createdAt": "2020-05-06T23:03:24Z", "path": "src/test/java/org/jabref/logic/integrity/FileCheckerTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.jabref.logic.integrity;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.database.BibDatabaseMode;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.metadata.FilePreferences;\n+import org.jabref.model.metadata.MetaData;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+\n+public class FileCheckerTest {\n+\n+    private FileChecker checker;\n+    private BibEntry entry;\n+    private BibDatabaseContext bibDatabaseContext;\n+    private List<IntegrityMessage> messages;\n+    MetaData metaData = mock(MetaData.class);\n+    //private FilePreferences f;", "originalCommit": "3933821379bfa8958829310fdac9e143d60cdb2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MjYyMA==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r421142620", "bodyText": "Why was the modifier changed? Is this method used outside of this class? It should be private. Adding static is OK for me.", "author": "koppor", "createdAt": "2020-05-06T23:05:33Z", "path": "src/test/java/org/jabref/logic/integrity/IntegrityCheckTest.java", "diffHunk": "@@ -390,21 +84,21 @@ private BibDatabaseContext createContext(Field field, String value, EntryType ty\n         return new BibDatabaseContext(bibDatabase);\n     }\n \n-    private BibDatabaseContext createContext(Field field, String value, MetaData metaData) {\n+    protected static BibDatabaseContext createContext(Field field, String value, MetaData metaData) {", "originalCommit": "3933821379bfa8958829310fdac9e143d60cdb2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4NjM3NA==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r421486374", "bodyText": "@koppor yes it was used outside of the class. I changed it now so all classes are independent. And I think I covered all the issues mentioned with my new commits. Please check it out and let me know what you think!", "author": "dimitra-karadima", "createdAt": "2020-05-07T13:03:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MjYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MzQ1MQ==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r421143451", "bodyText": "I don't find this commented code in the old IntegrityCheck Test. Why is it here?", "author": "koppor", "createdAt": "2020-05-06T23:07:58Z", "path": "src/test/java/org/jabref/logic/integrity/FileCheckerTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.jabref.logic.integrity;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.database.BibDatabaseMode;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.metadata.FilePreferences;\n+import org.jabref.model.metadata.MetaData;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+\n+public class FileCheckerTest {\n+\n+    private FileChecker checker;\n+    private BibEntry entry;\n+    private BibDatabaseContext bibDatabaseContext;\n+    private List<IntegrityMessage> messages;\n+    MetaData metaData = mock(MetaData.class);\n+    //private FilePreferences f;\n+    //Map<Field, String> hash;\n+\n+    @BeforeEach\n+    void setUp() {\n+        //hash.put(StandardField.ABSTRACT, \"\");", "originalCommit": "3933821379bfa8958829310fdac9e143d60cdb2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0NTE5NA==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r421145194", "bodyText": "Is this checker ever used in this class?\nI would propose to\na) remove this unused code\nb) readd the test void testFileChecks() { in the IntegrityCheck class as the DIFFERENCE to this test is that the FILE field is checked - and this coudl have some side effects.\nMore background:\nI wondered why metaData has to be mocked. The only reason can be the special treatment of the file field. I think, we should keep this code. The code can be left in the IntegrityCheckerTest class - if we don't come up with some better place.", "author": "koppor", "createdAt": "2020-05-06T23:13:04Z", "path": "src/test/java/org/jabref/logic/integrity/FileCheckerTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.jabref.logic.integrity;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jabref.model.database.BibDatabaseContext;\n+import org.jabref.model.database.BibDatabaseMode;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.metadata.FilePreferences;\n+import org.jabref.model.metadata.MetaData;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+\n+public class FileCheckerTest {\n+\n+    private FileChecker checker;\n+    private BibEntry entry;\n+    private BibDatabaseContext bibDatabaseContext;\n+    private List<IntegrityMessage> messages;\n+    MetaData metaData = mock(MetaData.class);\n+    //private FilePreferences f;\n+    //Map<Field, String> hash;\n+\n+    @BeforeEach\n+    void setUp() {\n+        //hash.put(StandardField.ABSTRACT, \"\");\n+        //f = new FilePreferences(\"\", hash, true, \"\", \"\");\n+        bibDatabaseContext = new BibDatabaseContext();\n+        checker = new FileChecker(bibDatabaseContext, mock(FilePreferences.class));", "originalCommit": "3933821379bfa8958829310fdac9e143d60cdb2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ca9f2f477b6da1ca79ab5a1c4e75300daa0aaab9", "url": "https://github.com/JabRef/jabref/commit/ca9f2f477b6da1ca79ab5a1c4e75300daa0aaab9", "message": "Rework IntegrityCheckTest and BibtexKeyCheckerTest\n\nAdd the following changes:\n-Revert all methods from protected static to private\n-Change BibtexKeyCheckerTest in order not to use IntegrityCheckTest's methods\n-Add two tests methods that were moved to another class", "committedDate": "2020-05-07T12:34:07Z", "type": "commit"}, {"oid": "207b28f41080eae124fc69b4125c215bfff6e0af", "url": "https://github.com/JabRef/jabref/commit/207b28f41080eae124fc69b4125c215bfff6e0af", "message": "Change JournalInAbbreviationListCheckerTest\n\nDue to recent merges to master the JournalAbbreviationRepository constructor changed so the creation of the object changes as well.", "committedDate": "2020-05-07T12:39:34Z", "type": "commit"}, {"oid": "1544c73eeda835fe462dcdd1c874e50c0fe7e281", "url": "https://github.com/JabRef/jabref/commit/1544c73eeda835fe462dcdd1c874e50c0fe7e281", "message": "Remove @BeforeEach from test classes\n\nRemove it wherever it was just creating objects", "committedDate": "2020-05-07T12:43:54Z", "type": "commit"}, {"oid": "16129ca2777001e367473c0a73add01a7fe22e10", "url": "https://github.com/JabRef/jabref/commit/16129ca2777001e367473c0a73add01a7fe22e10", "message": "Rework EditionCheckerTest\n\nRemove unnecessary BibEntry initialization and import", "committedDate": "2020-05-07T12:47:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwNzAxMg==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r422407012", "bodyText": "I don't find this for loop in the new code. Was it deleted completely or did I just not find it? If it was deleted, please re-add it. -- Maybe: Is the test already existing somewhere else?", "author": "koppor", "createdAt": "2020-05-08T22:38:57Z", "path": "src/test/java/org/jabref/logic/integrity/IntegrityCheckTest.java", "diffHunk": "@@ -39,197 +37,23 @@\n class IntegrityCheckTest {\n \n     @Test\n-    void testEntryTypeChecks() {\n+    void bibTexAcceptsStandardEntryType() {\n         assertCorrect(withMode(createContext(StandardField.TITLE, \"sometitle\", StandardEntryType.Article), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.TITLE, \"sometitle\", IEEETranEntryType.Patent), BibDatabaseMode.BIBTEX));\n-        assertCorrect((withMode(createContext(StandardField.TITLE, \"sometitle\", IEEETranEntryType.Patent), BibDatabaseMode.BIBLATEX)));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"sometitle\", StandardEntryType.Article), BibDatabaseMode.BIBLATEX));\n-    }\n-\n-    @Test\n-    void testUrlChecks() {\n-        assertCorrect(createContext(StandardField.URL, \"http://www.google.com\"));\n-        assertCorrect(createContext(StandardField.URL, \"file://c:/asdf/asdf\"));\n-        assertCorrect(createContext(StandardField.URL, \"http://scikit-learn.org/stable/modules/ensemble.html#random-forests\"));\n-\n-        assertWrong(createContext(StandardField.URL, \"www.google.com\"));\n-        assertWrong(createContext(StandardField.URL, \"google.com\"));\n-        assertWrong(createContext(StandardField.URL, \"c:/asdf/asdf\"));\n-    }\n-\n-    @Test\n-    void testYearChecks() {\n-        assertCorrect(createContext(StandardField.YEAR, \"2014\"));\n-        assertCorrect(createContext(StandardField.YEAR, \"1986\"));\n-        assertCorrect(createContext(StandardField.YEAR, \"around 1986\"));\n-        assertCorrect(createContext(StandardField.YEAR, \"(around 1986)\"));\n-        assertCorrect(createContext(StandardField.YEAR, \"1986,\"));\n-        assertCorrect(createContext(StandardField.YEAR, \"1986}%\"));\n-        assertCorrect(createContext(StandardField.YEAR, \"1986(){},.;!?<>%&$\"));\n-        assertWrong(createContext(StandardField.YEAR, \"abc\"));\n-        assertWrong(createContext(StandardField.YEAR, \"86\"));\n-        assertWrong(createContext(StandardField.YEAR, \"204\"));\n-        assertWrong(createContext(StandardField.YEAR, \"1986a\"));\n-        assertWrong(createContext(StandardField.YEAR, \"(1986a)\"));\n-        assertWrong(createContext(StandardField.YEAR, \"1986a,\"));\n-        assertWrong(createContext(StandardField.YEAR, \"1986}a%\"));\n-        assertWrong(createContext(StandardField.YEAR, \"1986a(){},.;!?<>%&$\"));\n-    }\n-\n-    @Test\n-    void testEditionChecks() {\n-        assertCorrect(withMode(createContext(StandardField.EDITION, \"Second\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.EDITION, \"Third\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.EDITION, \"second\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.EDITION, \"2\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.EDITION, \"2\"), BibDatabaseMode.BIBTEX), true);\n-        assertWrong(withMode(createContext(StandardField.EDITION, \"2nd\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.EDITION, \"2\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.EDITION, \"10\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.EDITION, \"Third, revised and expanded edition\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.EDITION, \"Edition 2000\"), BibDatabaseMode.BIBLATEX));\n-        assertWrong(withMode(createContext(StandardField.EDITION, \"2nd\"), BibDatabaseMode.BIBLATEX));\n-        assertWrong(withMode(createContext(StandardField.EDITION, \"1\"), BibDatabaseMode.BIBTEX));\n-    }\n-\n-    @Test\n-    void testNoteChecks() {\n-        assertCorrect(withMode(createContext(StandardField.NOTE, \"Lorem ipsum\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.NOTE, \"Lorem ipsum? 10\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.NOTE, \"lorem ipsum\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.NOTE, \"Lorem ipsum\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.NOTE, \"\\\\url{someurl}\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.NOTE, \"lorem ipsum\"), BibDatabaseMode.BIBLATEX));\n-    }\n-\n-    @Test\n-    void testHowpublishedChecks() {\n-        assertCorrect(withMode(createContext(StandardField.HOWPUBLISHED, \"Lorem ipsum\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.HOWPUBLISHED, \"Lorem ipsum? 10\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.HOWPUBLISHED, \"lorem ipsum\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.HOWPUBLISHED, \"\\\\url{someurl}\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.HOWPUBLISHED, \"Lorem ipsum\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.HOWPUBLISHED, \"lorem ipsum\"), BibDatabaseMode.BIBLATEX));\n     }\n \n     @Test\n-    void testMonthChecks() {\n-        assertCorrect(withMode(createContext(StandardField.MONTH, \"#mar#\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.MONTH, \"#dec#\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"#bla#\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"Dec\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"December\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"Lorem\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"10\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.MONTH, \"1\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.MONTH, \"10\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.MONTH, \"#jan#\"), BibDatabaseMode.BIBLATEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"jan\"), BibDatabaseMode.BIBLATEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"january\"), BibDatabaseMode.BIBLATEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"January\"), BibDatabaseMode.BIBLATEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"Lorem\"), BibDatabaseMode.BIBLATEX));\n-    }\n-\n-    @Test\n-    void testJournaltitleChecks() {\n-        assertWrong(withMode(createContext(StandardField.JOURNALTITLE, \"A journal\"), BibDatabaseMode.BIBLATEX));\n-        assertWrong(withMode(createContext(StandardField.JOURNAL, \"A journal\"), BibDatabaseMode.BIBTEX));\n-    }\n-\n-    @Test\n-    void testBibtexkeyChecks() {\n-        final BibDatabaseContext correctContext = createContext(InternalField.KEY_FIELD, \"Knuth2014\");\n-        correctContext.getDatabase().getEntries().get(0).setField(StandardField.AUTHOR, \"Knuth\");\n-        correctContext.getDatabase().getEntries().get(0).setField(StandardField.YEAR, \"2014\");\n-        assertCorrect(correctContext);\n-\n-        final BibDatabaseContext wrongContext = createContext(InternalField.KEY_FIELD, \"Knuth2014a\");\n-        wrongContext.getDatabase().getEntries().get(0).setField(StandardField.AUTHOR, \"Knuth\");\n-        wrongContext.getDatabase().getEntries().get(0).setField(StandardField.YEAR, \"2014\");\n-        assertWrong(wrongContext);\n-    }\n-\n-    @Test\n-    void testBracketChecks() {\n-        assertCorrect(createContext(StandardField.TITLE, \"x\"));\n-        assertCorrect(createContext(StandardField.TITLE, \"{x}\"));\n-        assertCorrect(createContext(StandardField.TITLE, \"{x}x{}x{{}}\"));\n-        assertWrong(createContext(StandardField.TITLE, \"{x}x{}}x{{}}\"));\n-        assertWrong(createContext(StandardField.TITLE, \"}\"));\n-        assertWrong(createContext(StandardField.TITLE, \"{\"));\n-    }\n-\n-    @Test\n-    void testAuthorNameChecks() {\n-        for (Field field : FieldFactory.getPersonNameFields()) {", "originalCommit": "16129ca2777001e367473c0a73add01a7fe22e10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NDA4Nw==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r422474087", "bodyText": "@koppor I placed these tests in the PersonNamesCheckerTest. Do you want me to add the for loops in all the added tests there?", "author": "dimitra-karadima", "createdAt": "2020-05-09T09:22:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwNzAxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIzMzMyOA==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r423233328", "bodyText": "I just checked. Did not find assertCorrect(withMode(createContext(field, \"\"), BibDatabaseMode.BIBLATEX)) there. Could you do a double check for commit and push, please?\nFor the for loop, please use @MethodSource as described at https://www.baeldung.com/parameterized-tests-junit-5#6-method.", "author": "koppor", "createdAt": "2020-05-11T18:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwNzAxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyODYxMg==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r423328612", "bodyText": "@koppor I will use the @MethodSource as you suggested but the line you mentioned have been replaced because the methods used are declared in the IntegrityCheckTest and we want all the test classes to be interdependent.", "author": "dimitra-karadima", "createdAt": "2020-05-11T21:24:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwNzAxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1NDYxMg==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r423454612", "bodyText": "Good step forward. Note to self:\n\nCheck for FieldFactory.getPersonNameFields() in PersonNamesCheckerTest.\nCheck for Stream.of(Arguments.of in the new code (as this was linked to from https://www.baeldung.com/parameterized-tests-junit-5#6-method)\n\nAfter thinking longer, the first aspect cannot be made in PersonChecker.\nThus, please rewrite the test here to provide a Field from FieldFactory.getPersonNameFields() as source: Split the asserts up and have field as paramter. Thus, each assertCorrect and each assertWrong will become a separate @Test.\n(The alternative is to provide two parameters to a  @Test as you did in PersonNamesCheckerTest).", "author": "koppor", "createdAt": "2020-05-12T04:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwNzAxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwNzMxMQ==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r422407311", "bodyText": "I did not find this test in the diff. Is the test already existing somewhere else?", "author": "koppor", "createdAt": "2020-05-08T22:39:53Z", "path": "src/test/java/org/jabref/logic/integrity/IntegrityCheckTest.java", "diffHunk": "@@ -39,197 +37,23 @@\n class IntegrityCheckTest {\n \n     @Test\n-    void testEntryTypeChecks() {\n+    void bibTexAcceptsStandardEntryType() {\n         assertCorrect(withMode(createContext(StandardField.TITLE, \"sometitle\", StandardEntryType.Article), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.TITLE, \"sometitle\", IEEETranEntryType.Patent), BibDatabaseMode.BIBTEX));\n-        assertCorrect((withMode(createContext(StandardField.TITLE, \"sometitle\", IEEETranEntryType.Patent), BibDatabaseMode.BIBLATEX)));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"sometitle\", StandardEntryType.Article), BibDatabaseMode.BIBLATEX));\n-    }\n-\n-    @Test\n-    void testUrlChecks() {\n-        assertCorrect(createContext(StandardField.URL, \"http://www.google.com\"));\n-        assertCorrect(createContext(StandardField.URL, \"file://c:/asdf/asdf\"));\n-        assertCorrect(createContext(StandardField.URL, \"http://scikit-learn.org/stable/modules/ensemble.html#random-forests\"));\n-\n-        assertWrong(createContext(StandardField.URL, \"www.google.com\"));\n-        assertWrong(createContext(StandardField.URL, \"google.com\"));\n-        assertWrong(createContext(StandardField.URL, \"c:/asdf/asdf\"));\n-    }\n-\n-    @Test\n-    void testYearChecks() {\n-        assertCorrect(createContext(StandardField.YEAR, \"2014\"));\n-        assertCorrect(createContext(StandardField.YEAR, \"1986\"));\n-        assertCorrect(createContext(StandardField.YEAR, \"around 1986\"));\n-        assertCorrect(createContext(StandardField.YEAR, \"(around 1986)\"));\n-        assertCorrect(createContext(StandardField.YEAR, \"1986,\"));\n-        assertCorrect(createContext(StandardField.YEAR, \"1986}%\"));\n-        assertCorrect(createContext(StandardField.YEAR, \"1986(){},.;!?<>%&$\"));\n-        assertWrong(createContext(StandardField.YEAR, \"abc\"));\n-        assertWrong(createContext(StandardField.YEAR, \"86\"));\n-        assertWrong(createContext(StandardField.YEAR, \"204\"));\n-        assertWrong(createContext(StandardField.YEAR, \"1986a\"));\n-        assertWrong(createContext(StandardField.YEAR, \"(1986a)\"));\n-        assertWrong(createContext(StandardField.YEAR, \"1986a,\"));\n-        assertWrong(createContext(StandardField.YEAR, \"1986}a%\"));\n-        assertWrong(createContext(StandardField.YEAR, \"1986a(){},.;!?<>%&$\"));\n-    }\n-\n-    @Test\n-    void testEditionChecks() {\n-        assertCorrect(withMode(createContext(StandardField.EDITION, \"Second\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.EDITION, \"Third\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.EDITION, \"second\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.EDITION, \"2\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.EDITION, \"2\"), BibDatabaseMode.BIBTEX), true);\n-        assertWrong(withMode(createContext(StandardField.EDITION, \"2nd\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.EDITION, \"2\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.EDITION, \"10\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.EDITION, \"Third, revised and expanded edition\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.EDITION, \"Edition 2000\"), BibDatabaseMode.BIBLATEX));\n-        assertWrong(withMode(createContext(StandardField.EDITION, \"2nd\"), BibDatabaseMode.BIBLATEX));\n-        assertWrong(withMode(createContext(StandardField.EDITION, \"1\"), BibDatabaseMode.BIBTEX));\n-    }\n-\n-    @Test\n-    void testNoteChecks() {\n-        assertCorrect(withMode(createContext(StandardField.NOTE, \"Lorem ipsum\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.NOTE, \"Lorem ipsum? 10\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.NOTE, \"lorem ipsum\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.NOTE, \"Lorem ipsum\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.NOTE, \"\\\\url{someurl}\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.NOTE, \"lorem ipsum\"), BibDatabaseMode.BIBLATEX));\n-    }\n-\n-    @Test\n-    void testHowpublishedChecks() {\n-        assertCorrect(withMode(createContext(StandardField.HOWPUBLISHED, \"Lorem ipsum\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.HOWPUBLISHED, \"Lorem ipsum? 10\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.HOWPUBLISHED, \"lorem ipsum\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.HOWPUBLISHED, \"\\\\url{someurl}\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.HOWPUBLISHED, \"Lorem ipsum\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.HOWPUBLISHED, \"lorem ipsum\"), BibDatabaseMode.BIBLATEX));\n     }\n \n     @Test\n-    void testMonthChecks() {\n-        assertCorrect(withMode(createContext(StandardField.MONTH, \"#mar#\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.MONTH, \"#dec#\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"#bla#\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"Dec\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"December\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"Lorem\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"10\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.MONTH, \"1\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.MONTH, \"10\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.MONTH, \"#jan#\"), BibDatabaseMode.BIBLATEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"jan\"), BibDatabaseMode.BIBLATEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"january\"), BibDatabaseMode.BIBLATEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"January\"), BibDatabaseMode.BIBLATEX));\n-        assertWrong(withMode(createContext(StandardField.MONTH, \"Lorem\"), BibDatabaseMode.BIBLATEX));\n-    }\n-\n-    @Test\n-    void testJournaltitleChecks() {\n-        assertWrong(withMode(createContext(StandardField.JOURNALTITLE, \"A journal\"), BibDatabaseMode.BIBLATEX));\n-        assertWrong(withMode(createContext(StandardField.JOURNAL, \"A journal\"), BibDatabaseMode.BIBTEX));\n-    }\n-\n-    @Test\n-    void testBibtexkeyChecks() {\n-        final BibDatabaseContext correctContext = createContext(InternalField.KEY_FIELD, \"Knuth2014\");\n-        correctContext.getDatabase().getEntries().get(0).setField(StandardField.AUTHOR, \"Knuth\");\n-        correctContext.getDatabase().getEntries().get(0).setField(StandardField.YEAR, \"2014\");\n-        assertCorrect(correctContext);\n-\n-        final BibDatabaseContext wrongContext = createContext(InternalField.KEY_FIELD, \"Knuth2014a\");\n-        wrongContext.getDatabase().getEntries().get(0).setField(StandardField.AUTHOR, \"Knuth\");\n-        wrongContext.getDatabase().getEntries().get(0).setField(StandardField.YEAR, \"2014\");\n-        assertWrong(wrongContext);\n-    }\n-\n-    @Test\n-    void testBracketChecks() {\n-        assertCorrect(createContext(StandardField.TITLE, \"x\"));\n-        assertCorrect(createContext(StandardField.TITLE, \"{x}\"));\n-        assertCorrect(createContext(StandardField.TITLE, \"{x}x{}x{{}}\"));\n-        assertWrong(createContext(StandardField.TITLE, \"{x}x{}}x{{}}\"));\n-        assertWrong(createContext(StandardField.TITLE, \"}\"));\n-        assertWrong(createContext(StandardField.TITLE, \"{\"));\n-    }\n-\n-    @Test\n-    void testAuthorNameChecks() {\n-        for (Field field : FieldFactory.getPersonNameFields()) {\n-            // getPersonNameFields returns fields that are available in biblatex only\n-            // if run without mode, the NoBibtexFieldChecker will complain that \"afterword\" is a biblatex only field\n-            assertCorrect(withMode(createContext(field, \"\"), BibDatabaseMode.BIBLATEX));\n-            assertCorrect(withMode(createContext(field, \"Knuth\"), BibDatabaseMode.BIBLATEX));\n-            assertWrong(withMode(createContext(field, \"   Knuth, Donald E. \"), BibDatabaseMode.BIBLATEX));\n-            assertWrong(withMode(createContext(field, \"Knuth, Donald E. and Kurt Cobain and A. Einstein\"), BibDatabaseMode.BIBLATEX));\n-            assertCorrect(withMode(createContext(field, \"Donald E. Knuth and Kurt Cobain and A. Einstein\"), BibDatabaseMode.BIBLATEX));\n-            assertWrong(withMode(createContext(field, \", and Kurt Cobain and A. Einstein\"), BibDatabaseMode.BIBLATEX));\n-            assertWrong(withMode(createContext(field, \"Donald E. Knuth and Kurt Cobain and ,\"), BibDatabaseMode.BIBLATEX));\n-            assertWrong(withMode(createContext(field, \"and Kurt Cobain and A. Einstein\"), BibDatabaseMode.BIBLATEX));\n-            assertWrong(withMode(createContext(field, \"Donald E. Knuth and Kurt Cobain and\"), BibDatabaseMode.BIBLATEX));\n-        }\n-    }\n-\n-    @Test\n-    void testTitleChecks() {\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a title\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.TITLE, \"This is a Title\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a {T}itle\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"{This is a Title}\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a {Title}\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"{C}urrent {C}hronicle\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"{A Model-Driven Approach for Monitoring {ebBP} BusinessTransactions}\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a sub title 1: This is a sub title 2\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a sub title 1: this is a sub title 2\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.TITLE, \"This is a sub title 1: This is A sub title 2\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.TITLE, \"This is a sub title 1: this is A sub title 2\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a sub title 1: This is {A} sub title 2\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a sub title 1: this is {A} sub title 2\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a sub title 1...This is a sub title 2\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.TITLE, \"This is a sub title 1... this is a sub Title 2\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is; A sub title 1.... This is a sub title 2\"), BibDatabaseMode.BIBTEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This!is!!A!Title??\"), BibDatabaseMode.BIBTEX));\n-        assertWrong(withMode(createContext(StandardField.TITLE, \"This!is!!A!TitlE??\"), BibDatabaseMode.BIBTEX));\n-\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a title\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a Title\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a {T}itle\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"{This is a Title}\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a {Title}\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"{C}urrent {C}hronicle\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"{A Model-Driven Approach for Monitoring {ebBP} BusinessTransactions}\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a sub title 1: This is a sub title 2\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a sub title 1: this is a sub title 2\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a sub title 1: This is A sub title 2\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a sub title 1: this is A sub title 2\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a sub title 1: This is {A} sub title 2\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a sub title 1: this is {A} sub title 2\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a sub title 1...This is a sub title 2\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is a sub title 1... this is a sub Title 2\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This is; A sub title 1.... This is a sub title 2\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This!is!!A!Title??\"), BibDatabaseMode.BIBLATEX));\n-        assertCorrect(withMode(createContext(StandardField.TITLE, \"This!is!!A!TitlE??\"), BibDatabaseMode.BIBLATEX));\n+    void bibTexDoesNotAcceptIEEETranEntryType() {\n+        assertWrong(withMode(createContext(StandardField.TITLE, \"sometitle\", IEEETranEntryType.Patent), BibDatabaseMode.BIBTEX));\n     }\n \n     @Test\n-    void testAbbreviationChecks() {\n-        for (Field field : Arrays.asList(StandardField.BOOKTITLE, StandardField.JOURNAL)) {", "originalCommit": "16129ca2777001e367473c0a73add01a7fe22e10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NTk2OA==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r422475968", "bodyText": "@koppor I thought that these tests were covered in the AbbreviationCheckerTest.  Do you want me to re-add these tests here?", "author": "dimitra-karadima", "createdAt": "2020-05-09T09:41:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwNzMxMQ=="}], "type": "inlineReview"}, {"oid": "870ce0da24cdc28a7e84820e7662df61e7178291", "url": "https://github.com/JabRef/jabref/commit/870ce0da24cdc28a7e84820e7662df61e7178291", "message": "Fix checkstyle\n\nRework test class because checkstyle is failing", "committedDate": "2020-05-09T09:51:39Z", "type": "commit"}, {"oid": "85290507c5f381371caa1e2b693a0dc2d9894fb5", "url": "https://github.com/JabRef/jabref/commit/85290507c5f381371caa1e2b693a0dc2d9894fb5", "message": "Fix checkstyle again\n\nFix because instance variable definition was in wrong order.", "committedDate": "2020-05-11T21:14:12Z", "type": "commit"}, {"oid": "193d420b7ea3e72b5e59082d0ff932d1c80a5a33", "url": "https://github.com/JabRef/jabref/commit/193d420b7ea3e72b5e59082d0ff932d1c80a5a33", "message": "Rework PersonNamesCheckersTest\n\nChange from multiple test methods to two parameterized with @MethodSource", "committedDate": "2020-05-11T21:26:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1NDkwMQ==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r423454901", "bodyText": "This is a good step forward.\nThe aspect of a field check is missing. To keep that in IntegrityCheckTest is a good idea. See my comments there.\nThe inputs will be duplicated, but that is OK.", "author": "koppor", "createdAt": "2020-05-12T04:28:46Z", "path": "src/test/java/org/jabref/logic/integrity/PersonNamesCheckerTest.java", "diffHunk": "@@ -62,4 +69,29 @@ public void validCorporateNameAndPerson() throws Exception {\n         assertEquals(Optional.empty(), checker.checkValue(\"{JabRef} and Stefan Kolb\"));\n         assertEquals(Optional.empty(), checker.checkValue(\"{JabRef} and Kolb, Stefan\"));\n     }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"provideCorrectFormats\")", "originalCommit": "193d420b7ea3e72b5e59082d0ff932d1c80a5a33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2MTMyNA==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r423461324", "bodyText": "I think, a JavaDoc should be added explaning the difference between this test and the CheckerTests. Here a proposal:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            class IntegrityCheckTest {\n          \n          \n            \n            /**\n          \n          \n            \n             * This class tests the Integrity Checker as a whole. Aspects are: selected fields, issues arising in a complete BibTeX entry, ... When testing a checker works with a certain input, this test has to go to a test belonging to the respective checker. See PersonNamesCheckerTest for an example test.\n          \n          \n            \n             */\n          \n          \n            \n            class IntegrityCheckTest {", "author": "koppor", "createdAt": "2020-05-12T04:54:27Z", "path": "src/test/java/org/jabref/logic/integrity/IntegrityCheckTest.java", "diffHunk": "@@ -39,197 +37,23 @@\n class IntegrityCheckTest {", "originalCommit": "193d420b7ea3e72b5e59082d0ff932d1c80a5a33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2MjA1MQ==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r423462051", "bodyText": "Since a single String string is required at each test, please use following code:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String[] data = new String[] {\"\", \"Knuth\", \"Donald E. Knuth and Kurt Cobain and A. Einstein\"};\n          \n          \n            \n                    return Stream.of(\"\", \"Knuth\", \"Donald E. Knuth and Kurt Cobain and A. Einstein\");\n          \n      \n    \n    \n  \n\nThis is more readble than String[]. The return type will be Stream<String>.", "author": "koppor", "createdAt": "2020-05-12T04:57:20Z", "path": "src/test/java/org/jabref/logic/integrity/PersonNamesCheckerTest.java", "diffHunk": "@@ -62,4 +69,29 @@ public void validCorporateNameAndPerson() throws Exception {\n         assertEquals(Optional.empty(), checker.checkValue(\"{JabRef} and Stefan Kolb\"));\n         assertEquals(Optional.empty(), checker.checkValue(\"{JabRef} and Kolb, Stefan\"));\n     }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"provideCorrectFormats\")\n+    public void authorNameInCorrectFormatsShouldNotComplain(String input) {\n+        assertEquals(Optional.empty(), checkerb.checkValue(input));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"provideIncorrectFormats\")\n+    public void authorNameInIncorrectFormatsShouldComplain(String input) {\n+        assertNotEquals(Optional.empty(), checkerb.checkValue(input));\n+    }\n+\n+    private static String[] provideCorrectFormats() {\n+        String[] data = new String[] {\"\", \"Knuth\", \"Donald E. Knuth and Kurt Cobain and A. Einstein\"};", "originalCommit": "193d420b7ea3e72b5e59082d0ff932d1c80a5a33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2MjE5OA==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r423462198", "bodyText": "See above --> Stream.of(...).", "author": "koppor", "createdAt": "2020-05-12T04:57:56Z", "path": "src/test/java/org/jabref/logic/integrity/PersonNamesCheckerTest.java", "diffHunk": "@@ -62,4 +69,29 @@ public void validCorporateNameAndPerson() throws Exception {\n         assertEquals(Optional.empty(), checker.checkValue(\"{JabRef} and Stefan Kolb\"));\n         assertEquals(Optional.empty(), checker.checkValue(\"{JabRef} and Kolb, Stefan\"));\n     }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"provideCorrectFormats\")\n+    public void authorNameInCorrectFormatsShouldNotComplain(String input) {\n+        assertEquals(Optional.empty(), checkerb.checkValue(input));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"provideIncorrectFormats\")\n+    public void authorNameInIncorrectFormatsShouldComplain(String input) {\n+        assertNotEquals(Optional.empty(), checkerb.checkValue(input));\n+    }\n+\n+    private static String[] provideCorrectFormats() {\n+        String[] data = new String[] {\"\", \"Knuth\", \"Donald E. Knuth and Kurt Cobain and A. Einstein\"};\n+        return data;\n+    }\n+\n+    private static String[] provideIncorrectFormats() {\n+        String[] data = new String[] {\"   Knuth, Donald E. \", \"Knuth, Donald E. and Kurt Cobain and A. Einstein\",", "originalCommit": "193d420b7ea3e72b5e59082d0ff932d1c80a5a33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "08afd1235e4318ec23261d7503f5ed943b6768bf", "url": "https://github.com/JabRef/jabref/commit/08afd1235e4318ec23261d7503f5ed943b6768bf", "message": "Update PersonNamesCheckerTest\n\nChange the return type of two methods from String[] to Stream<String> since it is more readable.", "committedDate": "2020-05-12T13:01:32Z", "type": "commit"}, {"oid": "4eae95ae5d25df72c0579a1868733d7a452e351a", "url": "https://github.com/JabRef/jabref/commit/4eae95ae5d25df72c0579a1868733d7a452e351a", "message": "Update IntegrityCheckTest\n\nAdd the following changes:\n-Add Javadoc\n-Rewrite testAuthorNameChecks with @MethodSource", "committedDate": "2020-05-12T13:06:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NDUyOQ==", "url": "https://github.com/JabRef/jabref/pull/6240#discussion_r424174529", "bodyText": "No empty line between JavaDoc and code.", "author": "koppor", "createdAt": "2020-05-13T05:05:52Z", "path": "src/test/java/org/jabref/logic/integrity/IntegrityCheckTest.java", "diffHunk": "@@ -27,13 +28,21 @@\n \n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.io.TempDir;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n import org.mockito.Mockito;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.mockito.Matchers.any;\n import static org.mockito.Mockito.mock;\n \n+/**\n+ * This class tests the Integrity Checker as a whole.\n+ * Aspects are: selected fields, issues arising in a complete BibTeX entry, ... When testing a checker works with a certain input,\n+ * this test has to go to a test belonging to the respective checker. See PersonNamesCheckerTest for an example test.\n+ */\n+", "originalCommit": "4eae95ae5d25df72c0579a1868733d7a452e351a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}