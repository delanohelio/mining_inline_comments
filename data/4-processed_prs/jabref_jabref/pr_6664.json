{"pr_number": 6664, "pr_title": "Add Collection of Comp Sci Bibliographies fetcher", "pr_createdAt": "2020-07-01T14:45:27Z", "pr_url": "https://github.com/JabRef/jabref/pull/6664", "timeline": [{"oid": "9a25b8e33e001a51a93d9816702f0f24ae52db5f", "url": "https://github.com/JabRef/jabref/commit/9a25b8e33e001a51a93d9816702f0f24ae52db5f", "message": "Add Collection of Comp Sci Bibliographies fetcher", "committedDate": "2020-07-01T14:34:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQyNjEwNw==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448426107", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import com.microsoft.applicationinsights.core.dependencies.http.client.utils.URIBuilder;\n          \n          \n            \n            import org.apache.http.client.utils.URIBuilder;\n          \n      \n    \n    \n  \n\nSeems like you got the wrong import", "author": "Siedlerchr", "createdAt": "2020-07-01T15:01:24Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesFetcher.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.SearchBasedParserFetcher;\n+import org.jabref.logic.importer.fetcher.CollectionOfComputerScienceBibliographiesParser;\n+\n+import com.microsoft.applicationinsights.core.dependencies.http.client.utils.URIBuilder;", "originalCommit": "9a25b8e33e001a51a93d9816702f0f24ae52db5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MTYxNg==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448441616", "bodyText": "Thanks, I've fixed this now!", "author": "daniel-price", "createdAt": "2020-07-01T15:25:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQyNjEwNw=="}], "type": "inlineReview"}, {"oid": "70ac2e94127e9ced8a9792213879640ddc99a7d7", "url": "https://github.com/JabRef/jabref/commit/70ac2e94127e9ced8a9792213879640ddc99a7d7", "message": "Fix import", "committedDate": "2020-07-01T15:08:41Z", "type": "commit"}, {"oid": "05a800074c971013afe21f400ed6f72818ea869b", "url": "https://github.com/JabRef/jabref/commit/05a800074c971013afe21f400ed6f72818ea869b", "message": "Fix import and checkstyle", "committedDate": "2020-07-01T15:24:39Z", "type": "commit"}, {"oid": "a8e3738677605f0a7e665786b2699d9713f8d6e4", "url": "https://github.com/JabRef/jabref/commit/a8e3738677605f0a7e665786b2699d9713f8d6e4", "message": "Fix test bib files", "committedDate": "2020-07-01T15:37:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzOTI3MQ==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448539271", "bodyText": "I like links; thus, I added one\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - We added a new fetcher to enable users to search \"Collection of Computer Science Bibliographies\". [#6638](https://github.com/JabRef/jabref/issues/6638)\n          \n          \n            \n            - We added a new fetcher to enable users to search \"[Collection of Computer Science Bibliographies](https://liinwww.ira.uka.de/bibliography/index.html)\". [#6638](https://github.com/JabRef/jabref/issues/6638)", "author": "koppor", "createdAt": "2020-07-01T18:20:12Z", "path": "CHANGELOG.md", "diffHunk": "@@ -11,6 +11,7 @@ Note that this project **does not** adhere to [Semantic Versioning](http://semve\n \n ### Added\n \n+- We added a new fetcher to enable users to search \"Collection of Computer Science Bibliographies\". [#6638](https://github.com/JabRef/jabref/issues/6638)", "originalCommit": "a8e3738677605f0a7e665786b2699d9713f8d6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzOTg0NQ==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448539845", "bodyText": "Please add an empty line before", "author": "koppor", "createdAt": "2020-07-01T18:21:22Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesFetcher.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.SearchBasedParserFetcher;\n+\n+import org.apache.http.client.utils.URIBuilder;\n+\n+public class CollectionOfComputerScienceBibliographiesFetcher implements SearchBasedParserFetcher {\n+    private static final String BASIC_SEARCH_URL = \"http://liinwww.ira.uka.de/bibliography/rss?\";", "originalCommit": "a8e3738677605f0a7e665786b2699d9713f8d6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MTA5OQ==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448541099", "bodyText": "Please chain the method calls:\nreturn new URIBuilder(BASIC_SEARCH_URL))\n  .addParameter(\"query\", query)\n  .addParameter(\"sort\", \"score\")\n  .build()\n  .toURL();", "author": "koppor", "createdAt": "2020-07-01T18:23:49Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesFetcher.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.logic.importer.SearchBasedParserFetcher;\n+\n+import org.apache.http.client.utils.URIBuilder;\n+\n+public class CollectionOfComputerScienceBibliographiesFetcher implements SearchBasedParserFetcher {\n+    private static final String BASIC_SEARCH_URL = \"http://liinwww.ira.uka.de/bibliography/rss?\";\n+\n+    @Override\n+    public URL getURLForQuery(String query) throws URISyntaxException, MalformedURLException, FetcherException {\n+        URIBuilder uriBuilder = new URIBuilder(BASIC_SEARCH_URL);\n+        uriBuilder.addParameter(\"query\", query);", "originalCommit": "a8e3738677605f0a7e665786b2699d9713f8d6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MjExNw==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448542117", "bodyText": "Can XMLUtil print to a log file?\nThen one could use LOGGER.debug(...)\nThe current solution is also OK for me.", "author": "koppor", "createdAt": "2020-07-01T18:25:51Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesParser.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class CollectionOfComputerScienceBibliographiesParser implements Parser {\n+    @Override\n+    public List<BibEntry> parseEntries(InputStream inputStream) throws ParseException {\n+        try {\n+            Document document = buildDocumentFromInputStream(inputStream);\n+            // uncomment to generate test case xml\n+            // XMLUtil.printDocument(document);", "originalCommit": "a8e3738677605f0a7e665786b2699d9713f8d6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MjU0NA==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448542544", "bodyText": "Note that toString() in the BibTeX class does not produce \"valid\" BibTeX in all cases - see the method comment there. - However, in this case, it is fine.", "author": "koppor", "createdAt": "2020-07-01T18:26:46Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesParser.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class CollectionOfComputerScienceBibliographiesParser implements Parser {\n+    @Override\n+    public List<BibEntry> parseEntries(InputStream inputStream) throws ParseException {\n+        try {\n+            Document document = buildDocumentFromInputStream(inputStream);\n+            // uncomment to generate test case xml\n+            // XMLUtil.printDocument(document);\n+\n+            NodeList childNodes = document.getChildNodes();\n+            List<Element> itemElements = findItemElementsRecursively(childNodes);\n+            List<BibEntry> bibEntries = parseItemElements(itemElements);\n+\n+            // uncomment to generate test case bib files\n+            // System.out.println(bibEntries);", "originalCommit": "a8e3738677605f0a7e665786b2699d9713f8d6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0Mjk3MA==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448542970", "bodyText": "Not sure whether this should be closed, too.\nI think, however, that closing the inputStream is enough. (Which surely happens somehwere in the code)", "author": "koppor", "createdAt": "2020-07-01T18:27:39Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesParser.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class CollectionOfComputerScienceBibliographiesParser implements Parser {\n+    @Override\n+    public List<BibEntry> parseEntries(InputStream inputStream) throws ParseException {\n+        try {\n+            Document document = buildDocumentFromInputStream(inputStream);\n+            // uncomment to generate test case xml\n+            // XMLUtil.printDocument(document);\n+\n+            NodeList childNodes = document.getChildNodes();\n+            List<Element> itemElements = findItemElementsRecursively(childNodes);\n+            List<BibEntry> bibEntries = parseItemElements(itemElements);\n+\n+            // uncomment to generate test case bib files\n+            // System.out.println(bibEntries);\n+\n+            return bibEntries;\n+        } catch (ParserConfigurationException | SAXException | IOException exception) {\n+            throw new ParseException(exception);\n+        }\n+    }\n+\n+    private Document buildDocumentFromInputStream(InputStream inputStream) throws ParserConfigurationException, SAXException, IOException {\n+        DocumentBuilder dbuild = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+        Reader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);", "originalCommit": "a8e3738677605f0a7e665786b2699d9713f8d6e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwOTc1MQ==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448609751", "bodyText": "Good point. Actually, unless I'm missing something, I don't think the inputStream is closed - I will refactor this code so that I make sure to close the inputStream and the reader in a finally block.", "author": "daniel-price", "createdAt": "2020-07-01T20:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0Mjk3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0NDMzMg==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448644332", "bodyText": "Typically, one should use the try-with-resoruces feature by Java --> https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\nCould be hard here since the thing is distributed among multiple methods", "author": "koppor", "createdAt": "2020-07-01T22:16:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0Mjk3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyMDIwNg==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r449920206", "bodyText": "Actually you are correct - they were using try-with-resources for the InputStream. I have used the same pattern for the InputStream I create in my latest commit.", "author": "daniel-price", "createdAt": "2020-07-05T21:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0Mjk3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MzQzMQ==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448543431", "bodyText": "Be general at the first possible place:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LinkedList<Element> itemNodes = new LinkedList();\n          \n          \n            \n                    List<Element> itemNodes = new LinkedList();\n          \n      \n    \n    \n  \n\nI think, ArrayList could be a better data structure in this case.", "author": "koppor", "createdAt": "2020-07-01T18:28:36Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesParser.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class CollectionOfComputerScienceBibliographiesParser implements Parser {\n+    @Override\n+    public List<BibEntry> parseEntries(InputStream inputStream) throws ParseException {\n+        try {\n+            Document document = buildDocumentFromInputStream(inputStream);\n+            // uncomment to generate test case xml\n+            // XMLUtil.printDocument(document);\n+\n+            NodeList childNodes = document.getChildNodes();\n+            List<Element> itemElements = findItemElementsRecursively(childNodes);\n+            List<BibEntry> bibEntries = parseItemElements(itemElements);\n+\n+            // uncomment to generate test case bib files\n+            // System.out.println(bibEntries);\n+\n+            return bibEntries;\n+        } catch (ParserConfigurationException | SAXException | IOException exception) {\n+            throw new ParseException(exception);\n+        }\n+    }\n+\n+    private Document buildDocumentFromInputStream(InputStream inputStream) throws ParserConfigurationException, SAXException, IOException {\n+        DocumentBuilder dbuild = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+        Reader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n+        InputSource is = new InputSource(reader);\n+        return dbuild.parse(is);\n+    }\n+\n+    private List<Element> findItemElementsRecursively(NodeList nodeList) {\n+        LinkedList<Element> itemNodes = new LinkedList();", "originalCommit": "a8e3738677605f0a7e665786b2699d9713f8d6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MzkzMw==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448543933", "bodyText": "Here, java8 streams can be isued:\nreturn itemElements.stream()\n  .map(element -> parseItemElement(element))\n  .collect(Collectors.toList());", "author": "koppor", "createdAt": "2020-07-01T18:29:35Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesParser.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class CollectionOfComputerScienceBibliographiesParser implements Parser {\n+    @Override\n+    public List<BibEntry> parseEntries(InputStream inputStream) throws ParseException {\n+        try {\n+            Document document = buildDocumentFromInputStream(inputStream);\n+            // uncomment to generate test case xml\n+            // XMLUtil.printDocument(document);\n+\n+            NodeList childNodes = document.getChildNodes();\n+            List<Element> itemElements = findItemElementsRecursively(childNodes);\n+            List<BibEntry> bibEntries = parseItemElements(itemElements);\n+\n+            // uncomment to generate test case bib files\n+            // System.out.println(bibEntries);\n+\n+            return bibEntries;\n+        } catch (ParserConfigurationException | SAXException | IOException exception) {\n+            throw new ParseException(exception);\n+        }\n+    }\n+\n+    private Document buildDocumentFromInputStream(InputStream inputStream) throws ParserConfigurationException, SAXException, IOException {\n+        DocumentBuilder dbuild = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+        Reader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n+        InputSource is = new InputSource(reader);\n+        return dbuild.parse(is);\n+    }\n+\n+    private List<Element> findItemElementsRecursively(NodeList nodeList) {\n+        LinkedList<Element> itemNodes = new LinkedList();\n+        for (int i = 0; i < nodeList.getLength(); i++) {\n+            Node child = nodeList.item(i);\n+            if (child.getNodeName().equals(\"item\")\n+                    && child.getNodeType() == Node.ELEMENT_NODE) {\n+                Element element = (Element) child;\n+                itemNodes.add(element);\n+            } else {\n+                NodeList childNodes = child.getChildNodes();\n+                List<Element> childItemNodes = findItemElementsRecursively(childNodes);\n+                itemNodes.addAll(childItemNodes);\n+            }\n+        }\n+\n+        return itemNodes;\n+    }\n+\n+    private List<BibEntry> parseItemElements(List<Element> itemElements) {\n+        List<BibEntry> items = new LinkedList<>();\n+        for (Element itemElement : itemElements) {", "originalCommit": "a8e3738677605f0a7e665786b2699d9713f8d6e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwMDA3Ng==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448600076", "bodyText": "Thanks for the information, I'll make use of streams!", "author": "daniel-price", "createdAt": "2020-07-01T20:30:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0MzkzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NjQ1OQ==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448546459", "bodyText": "This reminds me of DublinCore. We have support for Dublin Core somehwere in JabRef.\nWith checking for dc:title, the parser will fail if the XML namespace prefix changes to dc2 or something other than dc.\nI think, for the current PR, it's OK. For a future PR, I would be very happy if you digged into the Dublin Core thing.\nThis is a task where the patience is requested. Deep thinking what's better. Starting point: #938 (comment)", "author": "koppor", "createdAt": "2020-07-01T18:34:35Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesParser.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.jabref.logic.importer.ParseException;\n+import org.jabref.logic.importer.Parser;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+public class CollectionOfComputerScienceBibliographiesParser implements Parser {\n+    @Override\n+    public List<BibEntry> parseEntries(InputStream inputStream) throws ParseException {\n+        try {\n+            Document document = buildDocumentFromInputStream(inputStream);\n+            // uncomment to generate test case xml\n+            // XMLUtil.printDocument(document);\n+\n+            NodeList childNodes = document.getChildNodes();\n+            List<Element> itemElements = findItemElementsRecursively(childNodes);\n+            List<BibEntry> bibEntries = parseItemElements(itemElements);\n+\n+            // uncomment to generate test case bib files\n+            // System.out.println(bibEntries);\n+\n+            return bibEntries;\n+        } catch (ParserConfigurationException | SAXException | IOException exception) {\n+            throw new ParseException(exception);\n+        }\n+    }\n+\n+    private Document buildDocumentFromInputStream(InputStream inputStream) throws ParserConfigurationException, SAXException, IOException {\n+        DocumentBuilder dbuild = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+        Reader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n+        InputSource is = new InputSource(reader);\n+        return dbuild.parse(is);\n+    }\n+\n+    private List<Element> findItemElementsRecursively(NodeList nodeList) {\n+        LinkedList<Element> itemNodes = new LinkedList();\n+        for (int i = 0; i < nodeList.getLength(); i++) {\n+            Node child = nodeList.item(i);\n+            if (child.getNodeName().equals(\"item\")\n+                    && child.getNodeType() == Node.ELEMENT_NODE) {\n+                Element element = (Element) child;\n+                itemNodes.add(element);\n+            } else {\n+                NodeList childNodes = child.getChildNodes();\n+                List<Element> childItemNodes = findItemElementsRecursively(childNodes);\n+                itemNodes.addAll(childItemNodes);\n+            }\n+        }\n+\n+        return itemNodes;\n+    }\n+\n+    private List<BibEntry> parseItemElements(List<Element> itemElements) {\n+        List<BibEntry> items = new LinkedList<>();\n+        for (Element itemElement : itemElements) {\n+            BibEntry bibEntry = parseItemElement(itemElement);\n+            items.add(bibEntry);\n+        }\n+\n+        return items;\n+    }\n+\n+    private BibEntry parseItemElement(Element item) {\n+        BibEntry bibEntry = new BibEntry();\n+        setFieldFromTag(bibEntry, item, StandardField.TITLE, \"dc:title\");", "originalCommit": "a8e3738677605f0a7e665786b2699d9713f8d6e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyMDI2NA==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r449920264", "bodyText": "Thanks for the information! I've changed the way we do this now to use the existing Bibtex parser, but will bear this in mind for next time.", "author": "daniel-price", "createdAt": "2020-07-05T21:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NjQ1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NzU1Mw==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448547553", "bodyText": "Could you please use our BibEntry build thingy, here`\nbibEntry2 = new BibEntry()\n  .withField(...)\n  .withField(...)\n  ...\nWe try to use builders whereever possible in the code to make contributors used to it.", "author": "koppor", "createdAt": "2020-07-01T18:36:45Z", "path": "src/test/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesFetcherTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.testutils.category.FetcherTest;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@FetcherTest\n+class CollectionOfComputerScienceBibliographiesFetcherTest {\n+    private CollectionOfComputerScienceBibliographiesFetcher fetcher;\n+    private BibEntry bibEntry1;\n+    private BibEntry bibEntry2;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        fetcher = new CollectionOfComputerScienceBibliographiesFetcher();\n+\n+        bibEntry1 = new BibEntry();\n+        bibEntry1.setField(StandardField.TITLE, \"The relationship of code churn and architectural violations in the open source software JabRef\");\n+        bibEntry1.setField(StandardField.AUTHOR, \"Tobias Olsson, Morgan Ericsson, Anna Wingkvist\");\n+        bibEntry1.setField(StandardField.DATE, \"2017\");\n+        bibEntry1.setField(StandardField.URL, \"http://liinwww.ira.uka.de/searchbib/index?query=lgqcdpmrnlbbtgtqnxgpnddcrtxhcdxl&results=bibtex&mode=dup&rss=1\");\n+\n+        bibEntry2 = new BibEntry();\n+        bibEntry2.setField(StandardField.TITLE, \"Literaturverwaltungsprogramme im \u00dcberblick\");", "originalCommit": "a8e3738677605f0a7e665786b2699d9713f8d6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0ODY0NQ==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448548645", "bodyText": "The tests are a good start. They should cover much more!\nI searched for \"kopp decker\", which gives me following result:\n\nThe corresponding BibTeX is the following one:\n``bibtex\n@Article{journals/dke/DeckerKLW09,\ntitle =\t\"Interacting services: From specification to\nexecution\",\nauthor =\t\"Gero Decker and Oliver Kopp and Frank Leymann and\nMathias Weske\",\njournal =\t\"Data Knowl. Eng\",\nyear = \t\"2009\",\nnumber =\t\"10\",\nvolume =\t\"68\",\nbibdate =\t\"2019-06-02\",\nbibsource =\t\"DBLP,\nhttp://dblp.uni-trier.de/https://doi.org/10.1016/j.datak.2009.04.003;\nDBLP,\nhttp://dblp.uni-trier.de/https://www.wikidata.org/entity/Q59898182;\nDBLP,\nhttp://dblp.uni-trier.de/db/journals/dke/dke68.html#DeckerKLW09\",\npages =\t\"946--972\",\n}\n\nI would expect, title, author, journal, year, number, volume and pages being present in the result. These are all requried fields for a `@article`.\n\nMaybe, even all returend by the \"BibTeX\" result of CCSB could be shown here?", "author": "koppor", "createdAt": "2020-07-01T18:38:56Z", "path": "src/test/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesFetcherTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.testutils.category.FetcherTest;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@FetcherTest\n+class CollectionOfComputerScienceBibliographiesFetcherTest {", "originalCommit": "a8e3738677605f0a7e665786b2699d9713f8d6e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMDczOA==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448620738", "bodyText": "Having looked at this a little more, I think I want to slightly change my plan and would like your opinion on it. My understanding is:\n\n\nDoing a search returns a number of citation results.\ne.g. http://liinwww.ira.uka.de/bibliography/rss?query=kopp%20decker&sort=score\n\n\nEach of these results has a single link which itself has a one or more BibTeX results.\ne.g. the first result has a link to http://liinwww.ira.uka.de/searchbib/index?query=hmdtbhgnnqjrcfgprnkqtprfkhdrpqkq&results=bibtex&mode=dup&rss=1\n\n\nCurrently I retrieve the citation results (1), and parse a few fields to generate a BibEntry for each one. I think instead I want to parse just the link from each one, and retrieve the BibTeX results from that link (2). Then I can use the existing BibtexParser to generate a BibEntry for each of those.\nHave I understood correctly? Does my new plan sound sensible to you?\nThank you for the feedback!", "author": "daniel-price", "createdAt": "2020-07-01T21:16:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0ODY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxMDg3Mg==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r449710872", "bodyText": "Yeah, sounds perfect! This way, we don't need to convert for ourselves, but use the \"intelligence\" of the provider!\n(And sorry for the delayed reply)", "author": "koppor", "createdAt": "2020-07-03T22:01:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0ODY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkyMDM5Mw==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r449920393", "bodyText": "Fantastic, thank you. I've reworked this to do the above process instead. Please let me know if you have any other suggestions.", "author": "daniel-price", "createdAt": "2020-07-05T21:26:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0ODY0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0OTE0Ng==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448549146", "bodyText": "The fetcher should generate a BibTeX key. (I currently do not know how this works. Maybe the code of other fetchers can help? Think, its nested in doPostCleanup somehwere)", "author": "koppor", "createdAt": "2020-07-01T18:40:00Z", "path": "src/test/resources/org/jabref/logic/importer/fetcher/collection_of_computer_science_bibliographies_multiple_results_first_result.bib", "diffHunk": "@@ -0,0 +1,5 @@\n+@misc{,", "originalCommit": "a8e3738677605f0a7e665786b2699d9713f8d6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MDIzMA==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448550230", "bodyText": "Multiple authors should be represnted in BibTeX format.\nTobias Olsson and Morgan Ericsson and Anna Wingkvist\n\nWe have an AuthorFormatter which can change the authors.\nThe other variant is to try to get the BibTeX directly from dblp.\nIf you stick with the dublin core parsing, please add an ADR for it. In case you switch to the BibTeX, an ADR cannot harm.", "author": "koppor", "createdAt": "2020-07-01T18:42:08Z", "path": "src/test/resources/org/jabref/logic/importer/fetcher/collection_of_computer_science_bibliographies_single_result.bib", "diffHunk": "@@ -0,0 +1,6 @@\n+@misc{,\n+  author = {Tobias Olsson, Morgan Ericsson, Anna Wingkvist},", "originalCommit": "a8e3738677605f0a7e665786b2699d9713f8d6e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2NzkwMQ==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448567901", "bodyText": "We have a dblp fetcher already that could be used here", "author": "Siedlerchr", "createdAt": "2020-07-01T19:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MDIzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MDM0Mw==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r448550343", "bodyText": "Please let all files end with a new line", "author": "koppor", "createdAt": "2020-07-01T18:42:22Z", "path": "src/test/resources/org/jabref/logic/importer/fetcher/collection_of_computer_science_bibliographies_single_result.xml", "diffHunk": "@@ -0,0 +1,45 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<?xml-stylesheet title=\"XSL_formatting\" type=\"text/xsl\" href=\"http://liinwww.ira.uka.de/bibliography/rss.xsl\"?><rss version=\"2.0\">\n+    \n+    <channel xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n+        \n+        <title>CCSB: \"The relationship of code churn and architectural violations in the open source software JabRef\"</title>\n+        <link>http://liinwww.ira.uka.de/bibliography/#search</link>\n+        <description>Search results in The Collection of Computer Science Bibliographies for query: \"The relationship of code churn and architectural violations in the open source software JabRef\"</description>\n+        <language>en</language>\n+        <copyright>The data is available for noncommercial or private use only, harvesting is prohibited (the data may be obtained using other means and not this RSS feed).</copyright>\n+        <webMaster>liinwwwa@ira.uka.de</webMaster>\n+        <lastBuildDate>Mon,  09  Mar 2020 03:14:28 +0100</lastBuildDate>\n+        <ttl>5760</ttl>\n+        \n+        <item>\n+            <link>http://liinwww.ira.uka.de/searchbib/index?query=lgqcdpmrnlbbtgtqnxgpnddcrtxhcdxl&amp;results=bibtex&amp;mode=dup&amp;rss=1</link>\n+            \n+            <description>\n+                <p>\n+                    Author: Tobias Olsson, Morgan Ericsson, Anna Wingkvist; \n+                    <br/>\n+                    Title: The relationship of code churn and architectural violations in the open source software JabRef; \n+                    <br/>\n+                    Year: 2017; \n+                    <br/>\n+                    Abstract available; \n+                    <br/>\n+                    URLs available (possible fulltext access); \n+                    <br/>\n+                    2 records for this title/author combination available.\n+                </p>\n+            </description>\n+            \n+            <dc:title>The relationship of code churn and architectural violations in the open source software JabRef</dc:title>\n+            \n+            <title>[2017] The relationship of code churn and architectural violations in the open source software JabRef (by: Tobias Olsson, Morgan Ericsson, Anna Wingkvist)</title>\n+            \n+            <dc:date>2017</dc:date>\n+            \n+            <dc:creator>Tobias Olsson, Morgan Ericsson, Anna Wingkvist</dc:creator>\n+            \n+        </item>\n+        \n+    </channel>\n+</rss>", "originalCommit": "a8e3738677605f0a7e665786b2699d9713f8d6e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "66273f3c1904fa4d83622a0a41b7caa0aae482f2", "url": "https://github.com/JabRef/jabref/commit/66273f3c1904fa4d83622a0a41b7caa0aae482f2", "message": "Update CHANGELOG.md\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>", "committedDate": "2020-07-01T19:51:33Z", "type": "commit"}, {"oid": "2b7e223c6dbc86886ef4620c234c13160dd78b65", "url": "https://github.com/JabRef/jabref/commit/2b7e223c6dbc86886ef4620c234c13160dd78b65", "message": "Change to retrieve BibTex results", "committedDate": "2020-07-05T21:17:02Z", "type": "commit"}, {"oid": "9a7bcd96ef4e9d170bd011b737d0d460c1e3b1c4", "url": "https://github.com/JabRef/jabref/commit/9a7bcd96ef4e9d170bd011b737d0d460c1e3b1c4", "message": "Merge branch 'new-fetcher-collection-of-computer-science-bibliographies' of https://github.com/daniel-price/jabref into new-fetcher-collection-of-computer-science-bibliographies", "committedDate": "2020-07-05T21:20:58Z", "type": "commit"}, {"oid": "6782bd9251af28dbe67e1011d3aa9066c115ec53", "url": "https://github.com/JabRef/jabref/commit/6782bd9251af28dbe67e1011d3aa9066c115ec53", "message": "Merge branch 'master' into new-fetcher-collection-of-computer-science-bibliographies", "committedDate": "2020-07-05T21:22:34Z", "type": "commit"}, {"oid": "bd26ed1132063482d295ac6c308ed3e040a05075", "url": "https://github.com/JabRef/jabref/commit/bd26ed1132063482d295ac6c308ed3e040a05075", "message": "Fix to dependency on Global", "committedDate": "2020-07-05T21:47:39Z", "type": "commit"}, {"oid": "584bcac84acdf2923bdf73be193361c73975e068", "url": "https://github.com/JabRef/jabref/commit/584bcac84acdf2923bdf73be193361c73975e068", "message": "Merge branch 'new-fetcher-collection-of-computer-science-bibliographies' of https://github.com/daniel-price/jabref into new-fetcher-collection-of-computer-science-bibliographies", "committedDate": "2020-07-05T21:48:27Z", "type": "commit"}, {"oid": "a7ac84e540f32ee0eb190bf451029e270c8281a1", "url": "https://github.com/JabRef/jabref/commit/a7ac84e540f32ee0eb190bf451029e270c8281a1", "message": "Merge branch 'master' into new-fetcher-collection-of-computer-science-bibliographies", "committedDate": "2020-07-06T10:40:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxNDc1OA==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r450814758", "bodyText": "On the one hand, I think, the aim is to be careful when testing and be open to a new format. On the other hand, JabRef decided to test for the concrete format returned by the site. Seeing changes there very often, leads to an early attention of us (and not users showing up complaining that a fetcher does not work; refs #6369)\nSee https://github.com/JabRef/jabref/blob/master/src/test/java/org/jabref/logic/importer/fetcher/INSPIREFetcherTest.java for some examples.\nCould you please add these kinds of tests, too?", "author": "koppor", "createdAt": "2020-07-07T12:07:52Z", "path": "src/test/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesFetcherTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.testutils.category.FetcherTest;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Answers;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@FetcherTest\n+class CollectionOfComputerScienceBibliographiesFetcherTest {\n+    private CollectionOfComputerScienceBibliographiesFetcher fetcher;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        ImportFormatPreferences importFormatPreferences = mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS);\n+        when(importFormatPreferences.getKeywordSeparator()).thenReturn(',');\n+        fetcher = new CollectionOfComputerScienceBibliographiesFetcher(importFormatPreferences);\n+    }\n+\n+    @Test\n+    public void getNameReturnsCorrectName() {\n+        assertEquals(\"Collection of Computer Science Bibliographies\", fetcher.getName());\n+    }\n+\n+    @Test\n+    public void getUrlForQueryReturnsCorrectUrl() throws MalformedURLException, URISyntaxException, FetcherException {\n+        String query = \"java jdk\";\n+        URL url = fetcher.getURLForQuery(query);\n+        assertEquals(\"http://liinwww.ira.uka.de/bibliography/rss?query=java+jdk&sort=score\", url.toString());\n+    }\n+\n+    @Test\n+    public void performSearchReturnsMatchingMultipleEntries() throws FetcherException {\n+        List<BibEntry> searchResult = fetcher.performSearch(\"jabref\");\n+        BibEntry bibEntry = searchResult.get(0);\n+        assertNotNull(bibEntry.getField(StandardField.ABSTRACT));", "originalCommit": "a7ac84e540f32ee0eb190bf451029e270c8281a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkyNzUyNA==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r450927524", "bodyText": "I have changed the tests so that we now check explicitly that each field is as we expect.", "author": "daniel-price", "createdAt": "2020-07-07T14:54:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxNDc1OA=="}], "type": "inlineReview"}, {"oid": "7bb268545e430e8af9974ba4a8e665fc99dcc22d", "url": "https://github.com/JabRef/jabref/commit/7bb268545e430e8af9974ba4a8e665fc99dcc22d", "message": "Make fetcher test more specific by checking each field explicitly", "committedDate": "2020-07-07T14:52:20Z", "type": "commit"}, {"oid": "3e798a68ccbec1b87751121ac06eb8423fc9231f", "url": "https://github.com/JabRef/jabref/commit/3e798a68ccbec1b87751121ac06eb8423fc9231f", "message": "Merge branch 'new-fetcher-collection-of-computer-science-bibliographies' of https://github.com/daniel-price/jabref into new-fetcher-collection-of-computer-science-bibliographies", "committedDate": "2020-07-07T14:54:25Z", "type": "commit"}, {"oid": "43b94d9af6fddbeb63e1023d793f46e24383f125", "url": "https://github.com/JabRef/jabref/commit/43b94d9af6fddbeb63e1023d793f46e24383f125", "message": "Fix to imports", "committedDate": "2020-07-07T14:57:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzNzkzOQ==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r450937939", "bodyText": "Would it be possible to remove \\t\\t  from the abstract?\nCan we replace \\r\\n by the configured newline character (OS.NEWLINE)? --> Use org.jabref.logic.formatter.bibtexfields.NormalizeNewlinesFormatter in a CleanupJob.\norg.jabref.logic.formatter.bibtexfields.TrimWhitespaceFormatter cannot be used for the first requriement. Think we need a new TrimWhitespaceAndFixNewLinesInTextFieldFormatter. Would it be possible for you to add such a Formatter?", "author": "koppor", "createdAt": "2020-07-07T15:07:41Z", "path": "src/test/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesFetcherTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.field.UnknownField;\n+import org.jabref.model.entry.types.StandardEntryType;\n+import org.jabref.testutils.category.FetcherTest;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Answers;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@FetcherTest\n+class CollectionOfComputerScienceBibliographiesFetcherTest {\n+    private CollectionOfComputerScienceBibliographiesFetcher fetcher;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        ImportFormatPreferences importFormatPreferences = mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS);\n+        when(importFormatPreferences.getKeywordSeparator()).thenReturn(',');\n+        fetcher = new CollectionOfComputerScienceBibliographiesFetcher(importFormatPreferences);\n+    }\n+\n+    @Test\n+    public void getNameReturnsCorrectName() {\n+        assertEquals(\"Collection of Computer Science Bibliographies\", fetcher.getName());\n+    }\n+\n+    @Test\n+    public void getUrlForQueryReturnsCorrectUrl() throws MalformedURLException, URISyntaxException, FetcherException {\n+        String query = \"java jdk\";\n+        URL url = fetcher.getURLForQuery(query);\n+        assertEquals(\"http://liinwww.ira.uka.de/bibliography/rss?query=java+jdk&sort=score\", url.toString());\n+    }\n+\n+    @Test\n+    public void performSearchReturnsMatchingMultipleEntries() throws FetcherException {\n+        List<BibEntry> searchResult = fetcher.performSearch(\"jabref\");\n+\n+        BibEntry firstBibEntry = new BibEntry(StandardEntryType.InProceedings)\n+                .withCiteKey(\"conf/ecsa/OlssonEW17\")\n+                .withField(StandardField.AUTHOR, \"Tobias Olsson and Morgan Ericsson and Anna Wingkvist\")\n+                .withField(StandardField.EDITOR, \"Rog{\\\\~A}{\\\\copyright}rio de Lemos\")\n+                .withField(StandardField.ISBN, \"978-1-4503-5217-8\")\n+                .withField(StandardField.PAGES, \"152--158\")\n+                .withField(StandardField.PUBLISHER, \"ACM\")\n+                .withField(StandardField.TITLE, \"The relationship of code churn and architectural violations in the open source software JabRef\")\n+                .withField(StandardField.URL, \"http://dl.acm.org/citation.cfm?id=3129790\")\n+                .withField(StandardField.YEAR, \"2017\")\n+                .withField(StandardField.BOOKTITLE, \"11th European Conference on Software Architecture, ECSA 2017, Companion Proceedings, Canterbury, United Kingdom, September 11-15, 2017\")\n+                .withField(new UnknownField(\"bibsource\"), \"DBLP, http://dblp.uni-trier.de/https://doi.org/10.1145/3129790.3129810; DBLP, http://dblp.uni-trier.de/db/conf/ecsa/ecsa2017c.html#OlssonEW17\")\n+                .withField(new UnknownField(\"bibdate\"), \"2018-11-06\");\n+\n+        BibEntry secondBibEntry = new BibEntry(StandardEntryType.Article)\n+                .withCiteKey(\"oai:DiVA.org:lnu-68408\")\n+                .withField(new UnknownField(\"identifier\"), \"urn:isbn:978-1-4503-5217-8; doi:10.1145/3129790.3129810; ISI:000426556400034\")\n+                .withField(new UnknownField(\"subject\"), \"Software Architecture; Code Churn; Open Source; Architecrual Erosion; Technical Debt; Software Engineering; Programvaruteknik\")\n+                .withField(new UnknownField(\"relation\"), \"ACM International Conference Proceeding Series; ECSA '17~Proceedings of the 11th European Conference on Software Architecture : Companion Proceedings, p. 152-158\")\n+                .withField(StandardField.ABSTRACT, \"The open source application JabRef has existed since\\r\\n\" +\n+                        \"\\t\\t 2003. In 2015, the developers decided to make an\\r\\n\" +", "originalCommit": "43b94d9af6fddbeb63e1023d793f46e24383f125", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk2NTM5Ng==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r450965396", "bodyText": "I can see that there is also an RemoveNewlinesFormatter - what is the reason for choosing to normalize the new lines rather than remove them? It looks like the new lines were added due for formatting reasons, and were not actually present in the original paper's abstract.\nI therefore propose that I use the existing RemoveNewlinesFormatter, and also add a RemoveTabFormatter which removes any instance of \\t.\nWhat do you think?", "author": "daniel-price", "createdAt": "2020-07-07T15:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzNzkzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3Mjc4MA==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r450972780", "bodyText": "Yeah, let's see how it works out!", "author": "koppor", "createdAt": "2020-07-07T15:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzNzkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzODU5Mw==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r450938593", "bodyText": "Could you add a comment: \"// Checking entries in the set as the query is generic and returns a changing result set\"", "author": "koppor", "createdAt": "2020-07-07T15:08:32Z", "path": "src/test/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesFetcherTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jabref.logic.importer.FetcherException;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.model.entry.field.StandardField;\n+import org.jabref.model.entry.field.UnknownField;\n+import org.jabref.model.entry.types.StandardEntryType;\n+import org.jabref.testutils.category.FetcherTest;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Answers;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@FetcherTest\n+class CollectionOfComputerScienceBibliographiesFetcherTest {\n+    private CollectionOfComputerScienceBibliographiesFetcher fetcher;\n+\n+    @BeforeEach\n+    public void setUp() {\n+        ImportFormatPreferences importFormatPreferences = mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS);\n+        when(importFormatPreferences.getKeywordSeparator()).thenReturn(',');\n+        fetcher = new CollectionOfComputerScienceBibliographiesFetcher(importFormatPreferences);\n+    }\n+\n+    @Test\n+    public void getNameReturnsCorrectName() {\n+        assertEquals(\"Collection of Computer Science Bibliographies\", fetcher.getName());\n+    }\n+\n+    @Test\n+    public void getUrlForQueryReturnsCorrectUrl() throws MalformedURLException, URISyntaxException, FetcherException {\n+        String query = \"java jdk\";\n+        URL url = fetcher.getURLForQuery(query);\n+        assertEquals(\"http://liinwww.ira.uka.de/bibliography/rss?query=java+jdk&sort=score\", url.toString());\n+    }\n+\n+    @Test\n+    public void performSearchReturnsMatchingMultipleEntries() throws FetcherException {\n+        List<BibEntry> searchResult = fetcher.performSearch(\"jabref\");\n+\n+        BibEntry firstBibEntry = new BibEntry(StandardEntryType.InProceedings)\n+                .withCiteKey(\"conf/ecsa/OlssonEW17\")\n+                .withField(StandardField.AUTHOR, \"Tobias Olsson and Morgan Ericsson and Anna Wingkvist\")\n+                .withField(StandardField.EDITOR, \"Rog{\\\\~A}{\\\\copyright}rio de Lemos\")\n+                .withField(StandardField.ISBN, \"978-1-4503-5217-8\")\n+                .withField(StandardField.PAGES, \"152--158\")\n+                .withField(StandardField.PUBLISHER, \"ACM\")\n+                .withField(StandardField.TITLE, \"The relationship of code churn and architectural violations in the open source software JabRef\")\n+                .withField(StandardField.URL, \"http://dl.acm.org/citation.cfm?id=3129790\")\n+                .withField(StandardField.YEAR, \"2017\")\n+                .withField(StandardField.BOOKTITLE, \"11th European Conference on Software Architecture, ECSA 2017, Companion Proceedings, Canterbury, United Kingdom, September 11-15, 2017\")\n+                .withField(new UnknownField(\"bibsource\"), \"DBLP, http://dblp.uni-trier.de/https://doi.org/10.1145/3129790.3129810; DBLP, http://dblp.uni-trier.de/db/conf/ecsa/ecsa2017c.html#OlssonEW17\")\n+                .withField(new UnknownField(\"bibdate\"), \"2018-11-06\");\n+\n+        BibEntry secondBibEntry = new BibEntry(StandardEntryType.Article)\n+                .withCiteKey(\"oai:DiVA.org:lnu-68408\")\n+                .withField(new UnknownField(\"identifier\"), \"urn:isbn:978-1-4503-5217-8; doi:10.1145/3129790.3129810; ISI:000426556400034\")\n+                .withField(new UnknownField(\"subject\"), \"Software Architecture; Code Churn; Open Source; Architecrual Erosion; Technical Debt; Software Engineering; Programvaruteknik\")\n+                .withField(new UnknownField(\"relation\"), \"ACM International Conference Proceeding Series; ECSA '17~Proceedings of the 11th European Conference on Software Architecture : Companion Proceedings, p. 152-158\")\n+                .withField(StandardField.ABSTRACT, \"The open source application JabRef has existed since\\r\\n\" +\n+                        \"\\t\\t 2003. In 2015, the developers decided to make an\\r\\n\" +\n+                        \"\\t\\t architectural refactoring as continued development was\\r\\n\" +\n+                        \"\\t\\t deemed too demanding. The developers also introduced\\r\\n\" +\n+                        \"\\t\\t Static Architecture Conformance Checking (SACC) to\\r\\n\" +\n+                        \"\\t\\t prevent violations to the intended architecture.\\r\\n\" +\n+                        \"\\t\\t Measurements mined from source code repositories such\\r\\n\" +\n+                        \"\\t\\t as code churn and code ownership has been linked to\\r\\n\" +\n+                        \"\\t\\t several problems, for example fault proneness, security\\r\\n\" +\n+                        \"\\t\\t vulnerabilities, code smells, and degraded\\r\\n\" +\n+                        \"\\t\\t maintainability. The root cause of such problems can be\\r\\n\" +\n+                        \"\\t\\t architectural. To determine the impact of the\\r\\n\" +\n+                        \"\\t\\t refactoring of JabRef, we measure the code churn and\\r\\n\" +\n+                        \"\\t\\t code ownership before and after the refactoring and\\r\\n\" +\n+                        \"\\t\\t find that large files with violations had a\\r\\n\" +\n+                        \"\\t\\t significantly higher code churn than large files\\r\\n\" +\n+                        \"\\t\\t without violations before the refactoring. After the\\r\\n\" +\n+                        \"\\t\\t refactoring, the files that had violations show a more\\r\\n\" +\n+                        \"\\t\\t normal code churn. We find no such effect on code\\r\\n\" +\n+                        \"\\t\\t ownership. We conclude that files that contain\\r\\n\" +\n+                        \"\\t\\t violations detectable by SACC methods are connected to\\r\\n\" +\n+                        \"\\t\\t higher than normal code churn.\")\n+                .withField(StandardField.TYPE, \"info:eu-repo/semantics/conferenceObject\")\n+                .withField(new UnknownField(\"description\"), \"Information and Software Qualtiy\")\n+                .withField(StandardField.PAGES, \"152--158\")\n+                .withField(new UnknownField(\"bibsource\"), \"OAI-PMH server at www.diva-portal.org\")\n+                .withField(new UnknownField(\"rights\"), \"info:eu-repo/semantics/openAccess\")\n+                .withField(StandardField.URL, \"http://urn.kb.se/resolve?urn=urn:nbn:se:lnu:diva-68408\")\n+                .withField(new UnknownField(\"oai\"), \"oai:DiVA.org:lnu-68408\")\n+                .withField(StandardField.TITLE, \"The relationship of code churn and architectural violations in the open source software JabRef\")\n+                .withField(StandardField.PUBLISHER, \"Linn{\\\\'e}universitetet, Institutionen f{\\\\\\\"o}r datavetenskap (DV); Linn{\\\\'e}universitetet, Institutionen f{\\\\\\\"o}r datavetenskap (DV); Linn{\\\\'e}universitetet, Institutionen f{\\\\\\\"o}r datavetenskap (DV); New York, NY, USA\")\n+                .withField(StandardField.LANGUAGE, \"eng\")\n+                .withField(StandardField.AUTHOR, \"Tobias Olsson and Morgan Ericsson and Anna Wingkvist\")\n+                .withField(StandardField.YEAR, \"2017\");\n+\n+        assertTrue(searchResult.contains(firstBibEntry));", "originalCommit": "43b94d9af6fddbeb63e1023d793f46e24383f125", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0MDc5MA==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r450940790", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        BibEntryAssert.assertEquals(GvkParserTest.class, resourceNames.get(i), entries.get(i));\n          \n          \n            \n                        BibEntryAssert.assertEquals(CollectionOfComputerScienceBibliographiesParserTest.class, resourceNames.get(i), entries.get(i));", "author": "koppor", "createdAt": "2020-07-07T15:11:33Z", "path": "src/test/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesParserTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.jabref.logic.importer.fetcher;\n+\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jabref.logic.bibtex.BibEntryAssert;\n+import org.jabref.logic.importer.ImportFormatPreferences;\n+import org.jabref.model.entry.BibEntry;\n+import org.jabref.testutils.category.FetcherTest;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Answers;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@FetcherTest\n+public class CollectionOfComputerScienceBibliographiesParserTest {\n+    @Test\n+    public void parseEntriesReturnsEmptyListIfXmlHasNoResults() throws Exception {\n+        parseXmlAndCheckResults(\"collection_of_computer_science_bibliographies_empty_result.xml\", Collections.emptyList());\n+    }\n+\n+    @Test\n+    public void parseEntriesReturnsOneBibEntryInListIfXmlHasSingleResult() throws Exception {\n+        parseXmlAndCheckResults(\"collection_of_computer_science_bibliographies_single_result.xml\", Collections.singletonList(\"collection_of_computer_science_bibliographies_single_result.bib\"));\n+    }\n+\n+    @Test\n+    public void parseEntriesReturnsMultipleBibEntriesInListIfXmlHasMultipleResults() throws Exception {\n+        parseXmlAndCheckResults(\"collection_of_computer_science_bibliographies_multiple_results.xml\", Arrays.asList(\"collection_of_computer_science_bibliographies_multiple_results_first_result.bib\", \"collection_of_computer_science_bibliographies_multiple_results_second_result.bib\"));\n+    }\n+\n+    private void parseXmlAndCheckResults(String xmlName, List<String> resourceNames) throws Exception {\n+        ImportFormatPreferences importFormatPreferences = mock(ImportFormatPreferences.class, Answers.RETURNS_DEEP_STUBS);\n+        when(importFormatPreferences.getKeywordSeparator()).thenReturn(',');\n+\n+        InputStream is = CollectionOfComputerScienceBibliographiesParserTest.class.getResourceAsStream(xmlName);\n+        CollectionOfComputerScienceBibliographiesParser parser = new CollectionOfComputerScienceBibliographiesParser(importFormatPreferences);\n+        List<BibEntry> entries = parser.parseEntries(is);\n+        assertNotNull(entries);\n+        assertEquals(resourceNames.size(), entries.size());\n+        for (int i = 0; i < resourceNames.size(); i++) {\n+            BibEntryAssert.assertEquals(GvkParserTest.class, resourceNames.get(i), entries.get(i));", "originalCommit": "43b94d9af6fddbeb63e1023d793f46e24383f125", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0MjE3Ng==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r450942176", "bodyText": "Interesting. In CollectionOfComputerScienceBibliographiesFetcherTest.java, there was eng set as language. Where did the change come from? Does CCSB provide different languages?", "author": "koppor", "createdAt": "2020-07-07T15:13:23Z", "path": "src/test/resources/org/jabref/logic/importer/fetcher/collection_of_computer_science_bibliographies_empty_result.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<?xml-stylesheet title=\"XSL_formatting\" type=\"text/xsl\" href=\"http://liinwww.ira.uka.de/bibliography/rss.xsl\"?><rss version=\"2.0\">\n+    \n+    <channel xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n+        \n+        <title>CCSB: \"test string which returns no results\"</title>\n+        <link>http://liinwww.ira.uka.de/bibliography/#search</link>\n+        <description>Search results in The Collection of Computer Science Bibliographies for query: \"test string which returns no results\"</description>\n+        <language>en</language>", "originalCommit": "43b94d9af6fddbeb63e1023d793f46e24383f125", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4MDk4NQ==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r450980985", "bodyText": "This xml is for the first page returned after a search (example). But for each of the results in here, there is a link to a second page (example)\n which itself has a one or more BibTeX results. The BibTex results themselves can specify a language (e.g. ger for german), which is then parsed by the existing BibTexParser. I believe that eng is the default.", "author": "daniel-price", "createdAt": "2020-07-07T16:10:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0MjE3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4NzYzOQ==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r450987639", "bodyText": "The search result is interesting, because these two are the same papers ^^.\nNo need to invest much time in that. A org.jabref.logic.formatter.bibtexfields.NormalizeLanguageFormatter would be cool; but not at all required. Passing the language field as is, is perfectly fine with me. (Knowing that a new Formatter needs tests and that causes work)", "author": "koppor", "createdAt": "2020-07-07T16:20:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0MjE3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0NDQ4Mg==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r450944482", "bodyText": "Oh, wow, the 0001 and 0002 are generated by CCSB?\nWould it be possible to remove [ ]\\d+ at editors?\nExcpected result:\nStefan Kolb and Christian Sturm", "author": "koppor", "createdAt": "2020-07-07T15:16:40Z", "path": "src/test/resources/org/jabref/logic/importer/fetcher/collection_of_computer_science_bibliographies_single_result.bib", "diffHunk": "@@ -0,0 +1,14 @@\n+@inproceedings{conf/zeus/SimonDDK19,\n+  author = {Martin K. Simon and Linus W. Dietz and Tobias Diez and Oliver Kopp},\n+  bibdate = {2019-05-28},\n+  bibsource = {DBLP, http://dblp.uni-trier.de/db/conf/zeus/zeus2019.html#SimonDDK19},\n+  booktitle = {Proceedings of the 11th Central European Workshop on Services and their Composition, Bayreuth, Germany, February 14-15, 2019},\n+  editor = {Stefan Kolb 0001 and Christian Sturm 0002},", "originalCommit": "43b94d9af6fddbeb63e1023d793f46e24383f125", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2b2646be26e2228636e356e315b603a59fa35e65", "url": "https://github.com/JabRef/jabref/commit/2b2646be26e2228636e356e315b603a59fa35e65", "message": "Update src/test/java/org/jabref/logic/importer/fetcher/CollectionOfComputerScienceBibliographiesParserTest.java\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>", "committedDate": "2020-07-07T15:18:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4NTQ3Mg==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r450985472", "bodyText": "I think, this should be english - if possible!\nSource: https://tex.stackexchange.com/a/108019/9075", "author": "koppor", "createdAt": "2020-07-07T16:17:04Z", "path": "src/test/resources/org/jabref/logic/importer/fetcher/collection_of_computer_science_bibliographies_multiple_results.xml", "diffHunk": "@@ -0,0 +1,66 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<?xml-stylesheet title=\"XSL_formatting\" type=\"text/xsl\" href=\"http://liinwww.ira.uka.de/bibliography/rss.xsl\"?><rss version=\"2.0\">\n+\n+    <channel xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n+\n+        <title>CCSB: +\"effective java\" +\"joshua bloch\" +\"java series\"</title>\n+        <link>http://liinwww.ira.uka.de/bibliography/#search</link>\n+        <description>Search results in The Collection of Computer Science Bibliographies for query: +\"effective java\" +\"joshua bloch\" +\"java series\"</description>\n+        <language>en</language>", "originalCommit": "2b2646be26e2228636e356e315b603a59fa35e65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAzMTc2Nw==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r451031767", "bodyText": "This is the exact xml which is returned from doing a query, in this case from viewing the page source on this page", "author": "daniel-price", "createdAt": "2020-07-07T17:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4NTQ3Mg=="}], "type": "inlineReview"}, {"oid": "b9ea9b05a01efbdb4e21ba634c2be38d81d45f98", "url": "https://github.com/JabRef/jabref/commit/b9ea9b05a01efbdb4e21ba634c2be38d81d45f98", "message": "Add three formatters to fix new lines in abstract and digits in editors", "committedDate": "2020-07-07T17:58:02Z", "type": "commit"}, {"oid": "e28254aabcb693accbec012c302a6c09ae7d58d6", "url": "https://github.com/JabRef/jabref/commit/e28254aabcb693accbec012c302a6c09ae7d58d6", "message": "Merge branch 'new-fetcher-collection-of-computer-science-bibliographies' of https://github.com/daniel-price/jabref into new-fetcher-collection-of-computer-science-bibliographies", "committedDate": "2020-07-07T17:58:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MjEyNQ==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r451092125", "bodyText": "Please remove the empty line", "author": "koppor", "createdAt": "2020-07-07T19:26:03Z", "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RemoveTabsFormatter.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.jabref.logic.formatter.bibtexfields;\n+\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n+\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.cleanup.Formatter;\n+\n+/**\n+ * Replaces any tab with a space\n+ */\n+public class RemoveTabsFormatter extends Formatter {\n+\n+    private static final Pattern TAB = Pattern.compile(\"\\t+\");\n+\n+    @Override\n+    public String getName() {\n+        return Localization.lang(\"Remove tabs\");\n+    }\n+\n+    @Override\n+    public String getKey() {\n+        return \"remove_tabs\";\n+    }\n+\n+    @Override\n+    public String format(String value) {\n+        Objects.requireNonNull(value);\n+", "originalCommit": "b9ea9b05a01efbdb4e21ba634c2be38d81d45f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5NDExMQ==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r451094111", "bodyText": "Oh, tabs are replaced by a space.\nMaybe change the formatter name to ReplaceTabsBySpaceFormater and change the descriptoin accordingly.", "author": "koppor", "createdAt": "2020-07-07T19:30:00Z", "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RemoveTabsFormatter.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.jabref.logic.formatter.bibtexfields;\n+\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n+\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.cleanup.Formatter;\n+\n+/**\n+ * Replaces any tab with a space\n+ */\n+public class RemoveTabsFormatter extends Formatter {\n+\n+    private static final Pattern TAB = Pattern.compile(\"\\t+\");\n+\n+    @Override\n+    public String getName() {\n+        return Localization.lang(\"Remove tabs\");\n+    }\n+\n+    @Override\n+    public String getKey() {\n+        return \"remove_tabs\";\n+    }\n+\n+    @Override\n+    public String format(String value) {\n+        Objects.requireNonNull(value);\n+\n+        return TAB.matcher(value).replaceAll(\" \");", "originalCommit": "b9ea9b05a01efbdb4e21ba634c2be38d81d45f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5NDM0NA==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r451094344", "bodyText": "Don't forget to add that string to JabRef_en.properties.", "author": "koppor", "createdAt": "2020-07-07T19:30:25Z", "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RemoveRedundantSpacesFormatter.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.jabref.logic.formatter.bibtexfields;\n+\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n+\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.cleanup.Formatter;\n+\n+/**\n+ * Finds any occurrence of consecutive spaces and replaces it with a single space\n+ */\n+public class RemoveRedundantSpacesFormatter extends Formatter {\n+\n+    private static final Pattern MULTIPLE_SPACES = Pattern.compile(\" {2,}\");\n+\n+    @Override\n+    public String getName() {\n+        return Localization.lang(\"Remove redundant spaces\");\n+    }\n+\n+    @Override\n+    public String getKey() {\n+        return \"remove_redundant_spaces\";\n+    }\n+\n+    @Override\n+    public String format(String value) {\n+        Objects.requireNonNull(value);\n+\n+        return MULTIPLE_SPACES.matcher(value).replaceAll(\" \");\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return Localization.lang(\"Replaces consecutive spaces with a single space in the field content.\");", "originalCommit": "b9ea9b05a01efbdb4e21ba634c2be38d81d45f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5NDUyNA==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r451094524", "bodyText": "Could you please remove the empty line?", "author": "koppor", "createdAt": "2020-07-07T19:30:47Z", "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/RemoveRedundantSpacesFormatter.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.jabref.logic.formatter.bibtexfields;\n+\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n+\n+import org.jabref.logic.l10n.Localization;\n+import org.jabref.model.cleanup.Formatter;\n+\n+/**\n+ * Finds any occurrence of consecutive spaces and replaces it with a single space\n+ */\n+public class RemoveRedundantSpacesFormatter extends Formatter {\n+\n+    private static final Pattern MULTIPLE_SPACES = Pattern.compile(\" {2,}\");\n+\n+    @Override\n+    public String getName() {\n+        return Localization.lang(\"Remove redundant spaces\");\n+    }\n+\n+    @Override\n+    public String getKey() {\n+        return \"remove_redundant_spaces\";\n+    }\n+\n+    @Override\n+    public String format(String value) {\n+        Objects.requireNonNull(value);\n+", "originalCommit": "b9ea9b05a01efbdb4e21ba634c2be38d81d45f98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "837502904b181231538df8dece01ac3393363e06", "url": "https://github.com/JabRef/jabref/commit/837502904b181231538df8dece01ac3393363e06", "message": "Add localisation strings and renamed formatter", "committedDate": "2020-07-07T19:51:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNzgxMA==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r451107810", "bodyText": "Could we also use by instead of with? \ud83d\ude07  (consistency with class name)", "author": "koppor", "createdAt": "2020-07-07T19:56:15Z", "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/ReplaceTabsBySpaceFormater.java", "diffHunk": "@@ -9,13 +9,13 @@\n /**\n  * Replaces any tab with a space\n  */\n-public class RemoveTabsFormatter extends Formatter {\n+public class ReplaceTabsBySpaceFormater extends Formatter {\n \n     private static final Pattern TAB = Pattern.compile(\"\\t+\");\n \n     @Override\n     public String getName() {\n-        return Localization.lang(\"Remove tabs\");\n+        return Localization.lang(\"Replace tabs with space\");", "originalCommit": "837502904b181231538df8dece01ac3393363e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMTQ0NQ==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r451111445", "bodyText": "Yep - will change now!", "author": "daniel-price", "createdAt": "2020-07-07T20:03:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNzgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNzkyMA==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r451107920", "bodyText": "See above \ud83d\ude07", "author": "koppor", "createdAt": "2020-07-07T19:56:29Z", "path": "src/main/java/org/jabref/logic/formatter/bibtexfields/ReplaceTabsBySpaceFormater.java", "diffHunk": "@@ -26,13 +26,12 @@ public String getKey() {\n     @Override\n     public String format(String value) {\n         Objects.requireNonNull(value);\n-\n         return TAB.matcher(value).replaceAll(\" \");\n     }\n \n     @Override\n     public String getDescription() {\n-        return Localization.lang(\"Removes tabs in the field content.\");\n+        return Localization.lang(\"Replace tabs with space in the field content.\");", "originalCommit": "837502904b181231538df8dece01ac3393363e06", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwODQ5OA==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r451108498", "bodyText": "Could you remove the . at the end? This would reduce load at our translators (as it is the same string as in the line above).\n(Hope, I did not overlook something)", "author": "koppor", "createdAt": "2020-07-07T19:57:36Z", "path": "src/main/resources/l10n/JabRef_en.properties", "diffHunk": "@@ -2255,3 +2255,10 @@ Reveal\\ in\\ file\\ explorer=Reveal in file explorer\n Reset=Reset\n Reset\\ entry\\ types\\ and\\ fields\\ to\\ defaults=Reset entry types and fields to defaults\n This\\ will\\ reset\\ all\\ entry\\ types\\ to\\ their\\ default\\ values\\ and\\ remove\\ all\\ custom\\ entry\\ types=This will reset all entry types to their default values and remove all custom entry types\n+\n+Replace\\ tabs\\ with\\ space=Replace tabs with space\n+Replace\\ tabs\\ with\\ space\\ in\\ the\\ field\\ content.=Replace tabs with space in the field content.\n+Remove\\ redundant\\ spaces=Remove redundant spaces\n+Replaces\\ consecutive\\ spaces\\ with\\ a\\ single\\ space\\ in\\ the\\ field\\ content.=Replaces consecutive spaces with a single space in the field content.\n+Remove\\ digits=Remove digits\n+Removes\\ digits.=Removes digits.", "originalCommit": "837502904b181231538df8dece01ac3393363e06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMDk1Mw==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r451110953", "bodyText": "I added the full stop to make the formatter getDescription() consistent with other implementations of Formatter, which also have a full-stop at the end. Perhaps I should add a bit more to the description anyway, to make it more descriptive..\nIf not, I guess I should also make it remove instead of remove**s**, to make it the exact same string?", "author": "daniel-price", "createdAt": "2020-07-07T20:02:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwODQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMzAxMA==", "url": "https://github.com/JabRef/jabref/pull/6664#discussion_r451123010", "bodyText": "Ah, didn't see the s. \ud83d\ude07  Then, everything is fine.", "author": "koppor", "createdAt": "2020-07-07T20:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwODQ5OA=="}], "type": "inlineReview"}]}