{"pr_number": 6799, "pr_title": "Feature/enable lucene query parsing", "pr_createdAt": "2020-08-27T09:37:32Z", "pr_url": "https://github.com/JabRef/jabref/pull/6799", "timeline": [{"oid": "c8ebc91d4799e59518ac887f69e584040cf29994", "url": "https://github.com/JabRef/jabref/commit/c8ebc91d4799e59518ac887f69e584040cf29994", "message": "Squashed 'src/main/resources/csl-styles/' changes from bf698acec7..827b986621\n\n827b986621 add DOI preprint to american-society-for-microbiology.csl (#4946)\n7cab2f7d8a Create depro-ufs.csl (#4947)\n2fcda1fe03 Create journal-of-sport-science-and-medicine.csl (#4949)\ncd457d4bce Update american-marketing-association.csl (#4945)\ncacc4eefbd Create nejm-catalyst.csl (#4943)\nbd769b91da Update and rename dependent/chinese-medical-journal.csl to chinese-me\u2026 (#4941)\n1f706cda6c Update health-services-research.csl (#4939)\n76bcd1d9d7 Update journal-of-the-royal-society-of-western-australia.csl (#4932)\ne79640e74d Create afro-asia.csl (#4934)\nc601aa4e0f Update lancaster-university-harvard.csl (#4938)\n184fd90210 Update collection-du-centre-jean-berard.csl (#4936)\n82f9aec90f fix et-al & add DOI thyroid.csl (#4937)\n4af169fc11 Create universidade-estadual-de-alagoas-uneal-abnt (#4885)\n47165b3d5a Update and rename medical-physics.csl to dependent/medical-physics.csl (AMA) (#4905)\n3cab27dc1a Update thieme-german.csl (#4931)\neb2c9776e0 Create zeitschrift-fur-zahnarztliche-implantologie.csl (#4925)\n4adb1ea0be Create karstenia.csl (#4929)\n530a136786 Fix author substitute in Universita Cattolica\n\ngit-subtree-dir: src/main/resources/csl-styles\ngit-subtree-split: 827b986621348627f8e894d1b7f11191f905a8e2", "committedDate": "2020-08-01T02:13:15Z", "type": "commit"}, {"oid": "f5f02cf3ced81d19b74844b770abc1dba0b61fa1", "url": "https://github.com/JabRef/jabref/commit/f5f02cf3ced81d19b74844b770abc1dba0b61fa1", "message": "Merge commit 'c8ebc91d4799e59518ac887f69e584040cf29994'", "committedDate": "2020-08-01T02:13:15Z", "type": "commit"}, {"oid": "37c2d64e449ef617bb98c0ad3b39a903d8f3d886", "url": "https://github.com/JabRef/jabref/commit/37c2d64e449ef617bb98c0ad3b39a903d8f3d886", "message": "Squashed 'src/main/resources/csl-styles/' changes from 827b986621..eb0d37e0ff\n\neb0d37e0ff Create natbib-plainnat-author-dat.csl (#4967)\nfb1592a1cd Update journal-of-fish-biology.csl (#4969)\nf6876cbe0f Update .travis.yml (#4970)\nd6d400b207 Create london-review-of-international-law.csl (#4966)\nd2a5ae1b16 Update harvard-stellenbosch-university.csl (#4965)\n9c62141a40 Create phytopathologia-mediterranea.csl (#4964)\n8ca2ea1a9c Update historical-materialism.csl (#4960)\n80456dc749 Update historical-materialism.csl\nbe2d91090c Update historical-materialism.csl\n1d1cf095a6 Create atlande.csl (#4930)\n89f41d404d Create juristische-zitierweise-oeffentliches-recht.csl (#4944)\n8c677a08c5 Create korean-journal-of-gastroenterology.csl (#4954)\neadb9508dd Create historical-materialism.csl (#4955)\n5553dcdc9c Create revista-materia.csl (#4957)\nd23a3abd79 Bug fix in APA 6 original publication macro (#4959)\n66f9974980 Always print publisher in APA 6th edition (#4899)\n868809c063 Create agora.csl (#4940)\n99c19c397e Update anthropologie-et-societes.csl (#4952)\nee17423a93 Create critical-reviews-in-solid-state-and-materials-science.csl (#4951)\n7a13a7d59e Create korean-journal-of-internal-medicine.csl (#4953)\n\ngit-subtree-dir: src/main/resources/csl-styles\ngit-subtree-split: eb0d37e0ff253e7c6d256b619e4831af306a28cf", "committedDate": "2020-08-15T02:17:10Z", "type": "commit"}, {"oid": "b85ebe3e3f9b956f1ab56ef24bf2a1cd0b03d632", "url": "https://github.com/JabRef/jabref/commit/b85ebe3e3f9b956f1ab56ef24bf2a1cd0b03d632", "message": "Merge commit '37c2d64e449ef617bb98c0ad3b39a903d8f3d886' into master", "committedDate": "2020-08-15T02:17:10Z", "type": "commit"}, {"oid": "f10ea5f1d86aed42a29b38d5b4683f60cb964c1c", "url": "https://github.com/JabRef/jabref/commit/f10ea5f1d86aed42a29b38d5b4683f60cb964c1c", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-08-25T19:10:13Z", "type": "commit"}, {"oid": "172b11301d20b11d4ff3f22c1aa768b3fc6db9e4", "url": "https://github.com/JabRef/jabref/commit/172b11301d20b11d4ff3f22c1aa768b3fc6db9e4", "message": "Enable Query String into ComplexQuery parsing using lucene.\nFix some FetcherTests.\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-08-26T19:31:00Z", "type": "commit"}, {"oid": "90a629e1db45de25abb05d2fb849a85528c8de35", "url": "https://github.com/JabRef/jabref/commit/90a629e1db45de25abb05d2fb849a85528c8de35", "message": "Add ADR\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-08-27T08:44:31Z", "type": "commit"}, {"oid": "3af3781a00296847eb92188334250825189b9631", "url": "https://github.com/JabRef/jabref/commit/3af3781a00296847eb92188334250825189b9631", "message": "Add Changelog entry\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-08-27T09:38:29Z", "type": "commit"}, {"oid": "26851a75217eb6f4c4874538df11ca007cc91f4a", "url": "https://github.com/JabRef/jabref/commit/26851a75217eb6f4c4874538df11ca007cc91f4a", "message": "Merge remote-tracking branch 'upstream/master' into feature/enable-lucene-query-parsing", "committedDate": "2020-08-27T09:39:22Z", "type": "commit"}, {"oid": "8468ad440b989cc67a3745ee3a690b0a2e6b3ef2", "url": "https://github.com/JabRef/jabref/commit/8468ad440b989cc67a3745ee3a690b0a2e6b3ef2", "message": "Move Changelog entry\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-08-27T09:40:19Z", "type": "commit"}, {"oid": "d592a47b853ae6978696d635776e32e8e105e478", "url": "https://github.com/JabRef/jabref/commit/d592a47b853ae6978696d635776e32e8e105e478", "message": "Increment ADR number\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-08-27T09:44:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwNzEwNw==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r478307107", "bodyText": "I would call this QueryParser. I guess parser is more common for conversion from string to some object (its also the name used in Lucene).", "author": "tobiasdiez", "createdAt": "2020-08-27T10:09:25Z", "path": "src/main/java/org/jabref/logic/importer/QueryConverter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.jabref.logic.importer;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.jabref.logic.importer.fetcher.ComplexSearchQuery;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.queryparser.flexible.core.QueryNodeException;\n+import org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.QueryVisitor;\n+\n+/**\n+ * This class converts a query string written in lucene syntax into a complex search query.\n+ *\n+ * For simplicity this is limited to fielded data and the boolean AND operator.\n+ */\n+public class QueryConverter {", "originalCommit": "d592a47b853ae6978696d635776e32e8e105e478", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwODI1MA==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r478308250", "bodyText": "Is the QueryNodeException helpful in diagnosing where the syntax error is, i.e. can it be converted to a meaningful error message shown to the user? If not, I would propose to catch it in the main body, change the return value to Optional<Query> and return an empty optional in case of a syntax error.", "author": "tobiasdiez", "createdAt": "2020-08-27T10:11:32Z", "path": "src/main/java/org/jabref/logic/importer/QueryConverter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.jabref.logic.importer;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.jabref.logic.importer.fetcher.ComplexSearchQuery;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.queryparser.flexible.core.QueryNodeException;\n+import org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.QueryVisitor;\n+\n+/**\n+ * This class converts a query string written in lucene syntax into a complex search query.\n+ *\n+ * For simplicity this is limited to fielded data and the boolean AND operator.\n+ */\n+public class QueryConverter {\n+\n+    /**\n+     * Converts the given query string into a complex query using lucene.\n+     * Note: For unique fields, the alphabetically first instance in the query string is used in the complex query.\n+     *\n+     * @param queryString The given query string\n+     * @return A complex query containing all fields of the query string\n+     * @throws QueryNodeException Error during parsing\n+     */\n+    public ComplexSearchQuery convertQueryStringIntoComplexQuery(String queryString) throws QueryNodeException {", "originalCommit": "d592a47b853ae6978696d635776e32e8e105e478", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwODY1Nw==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r478308657", "bodyText": "It's considered bad practice to have an optional around a list. Just return an empty list, instead of an empty optional.", "author": "tobiasdiez", "createdAt": "2020-08-27T10:12:22Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/ComplexSearchQuery.java", "diffHunk": "@@ -28,7 +31,7 @@ private ComplexSearchQuery(String defaultField, List<String> authors, List<Strin\n         this.singleYear = singleYear;\n     }\n \n-    public Optional<String> getDefaultField() {\n+    public Optional<List<String>> getDefaultFieldPhrases() {", "originalCommit": "d592a47b853ae6978696d635776e32e8e105e478", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxMTQ2OQ==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r478311469", "bodyText": "I would add this directly as a constructor, or if you want to have a more descriptive name as a static ComplexSearchQuery fromTerms(Collection<Term> terms) method in ComplexSearchQuery. The builder pattern is only useful if you have a lot of possible constructor arguments, and want to create a nice interface for it. I actually think the builder interface is mostly outdated since IDEs are now intelligent enough to show named constructor arguments, e.g", "author": "tobiasdiez", "createdAt": "2020-08-27T10:17:49Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/ComplexSearchQuery.java", "diffHunk": "@@ -135,6 +142,21 @@ public ComplexSearchQueryBuilder journal(String journal) {\n             return this;\n         }\n \n+        public ComplexSearchQueryBuilder terms(Collection<Term> terms) {", "originalCommit": "d592a47b853ae6978696d635776e32e8e105e478", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxMTk5NA==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r478311994", "bodyText": "Reuse converter here and in the other tests.", "author": "tobiasdiez", "createdAt": "2020-08-27T10:18:59Z", "path": "src/test/java/org/jabref/logic/importer/QueryConverterTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.jabref.logic.importer;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jabref.logic.importer.fetcher.ComplexSearchQuery;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class QueryConverterTest {\n+    QueryConverter converter = new QueryConverter();\n+\n+    @Test\n+    public void convertAuthorField() throws Exception {\n+        ComplexSearchQuery searchQuery = new QueryConverter().convertQueryStringIntoComplexQuery(\"author:\\\"Igor Steinmacher\\\"\");", "originalCommit": "d592a47b853ae6978696d635776e32e8e105e478", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxMjk3OA==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r478312978", "bodyText": "Please create a new expected complex search query, and test against this. For example, the current test also passes if searchQuery has a non-empty title because this field is not checked in this test.", "author": "tobiasdiez", "createdAt": "2020-08-27T10:20:57Z", "path": "src/test/java/org/jabref/logic/importer/QueryConverterTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.jabref.logic.importer;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.jabref.logic.importer.fetcher.ComplexSearchQuery;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class QueryConverterTest {\n+    QueryConverter converter = new QueryConverter();\n+\n+    @Test\n+    public void convertAuthorField() throws Exception {\n+        ComplexSearchQuery searchQuery = new QueryConverter().convertQueryStringIntoComplexQuery(\"author:\\\"Igor Steinmacher\\\"\");\n+        assertEquals(List.of(\"\\\"Igor Steinmacher\\\"\"), searchQuery.getAuthors().get());", "originalCommit": "d592a47b853ae6978696d635776e32e8e105e478", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4610451ff908accf977328100f4a5f578fed9dd7", "url": "https://github.com/JabRef/jabref/commit/4610451ff908accf977328100f4a5f578fed9dd7", "message": "Remove Optional from Lists\nRename QueryConverter to QueryParser\nModify parser tests to compare complex queries\nMake complex query construction from terms independent from normal building\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-08-27T12:46:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQxNjEwMw==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r478416103", "bodyText": "rename to parser", "author": "tobiasdiez", "createdAt": "2020-08-27T13:24:23Z", "path": "src/test/java/org/jabref/logic/importer/QueryParserTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package org.jabref.logic.importer;\n+\n+import org.jabref.logic.importer.fetcher.ComplexSearchQuery;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+class QueryParserTest {\n+    QueryParser converter = new QueryParser();", "originalCommit": "4610451ff908accf977328100f4a5f578fed9dd7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQxNjY5Mw==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r478416693", "bodyText": "rename to parse?", "author": "tobiasdiez", "createdAt": "2020-08-27T13:25:11Z", "path": "src/main/java/org/jabref/logic/importer/QueryParser.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.jabref.logic.importer;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.jabref.logic.importer.fetcher.ComplexSearchQuery;\n+\n+import org.apache.lucene.index.Term;\n+import org.apache.lucene.queryparser.flexible.core.QueryNodeException;\n+import org.apache.lucene.queryparser.flexible.standard.StandardQueryParser;\n+import org.apache.lucene.search.Query;\n+import org.apache.lucene.search.QueryVisitor;\n+\n+/**\n+ * This class converts a query string written in lucene syntax into a complex search query.\n+ *\n+ * For simplicity this is limited to fielded data and the boolean AND operator.\n+ */\n+public class QueryParser {\n+\n+    /**\n+     * Converts the given query string into a complex query using lucene.\n+     * Note: For unique fields, the alphabetically first instance in the query string is used in the complex query.\n+     *\n+     * @param queryString The given query string\n+     * @return A complex query containing all fields of the query string\n+     * @throws QueryNodeException Error during parsing\n+     */\n+    public Optional<ComplexSearchQuery> convertQueryStringIntoComplexQuery(String queryString) {", "originalCommit": "4610451ff908accf977328100f4a5f578fed9dd7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "86c65767484f8c3379c822fbd2eb97e1bf206e48", "url": "https://github.com/JabRef/jabref/commit/86c65767484f8c3379c822fbd2eb97e1bf206e48", "message": "Rename slipped occurences of converter\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-08-27T14:59:10Z", "type": "commit"}, {"oid": "e2447f67987d9aa19f2a2631bec8822de093abfb", "url": "https://github.com/JabRef/jabref/commit/e2447f67987d9aa19f2a2631bec8822de093abfb", "message": "Merge remote-tracking branch 'upstream/master' into feature/enable-lucene-query-parsing", "committedDate": "2020-08-28T14:41:51Z", "type": "commit"}, {"oid": "0642d49e208776d9bff095782b110061aacbf7d3", "url": "https://github.com/JabRef/jabref/commit/0642d49e208776d9bff095782b110061aacbf7d3", "message": "Mapping of unknown fields onto default field\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-08-30T12:05:50Z", "type": "commit"}, {"oid": "11afbe9f1e94e6058b0078bc2da1e62e98e65ca5", "url": "https://github.com/JabRef/jabref/commit/11afbe9f1e94e6058b0078bc2da1e62e98e65ca5", "message": "Ignores unknown fields\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-08-30T12:20:39Z", "type": "commit"}, {"oid": "6fde8814c3cc45772689049697acd364b35c9de6", "url": "https://github.com/JabRef/jabref/commit/6fde8814c3cc45772689049697acd364b35c9de6", "message": "Merge branch 'master' into feature/enable-lucene-query-parsing", "committedDate": "2020-08-30T21:33:42Z", "type": "commit"}, {"oid": "e27ebcc869ed3e9bfc390c061785442a790d9d49", "url": "https://github.com/JabRef/jabref/commit/e27ebcc869ed3e9bfc390c061785442a790d9d49", "message": "Merge remote-tracking branch 'upstream/master' into feature/enable-lucene-query-parsing", "committedDate": "2020-08-31T10:16:31Z", "type": "commit"}, {"oid": "239095e9e5b6d854435383caa5edc929719ecbc1", "url": "https://github.com/JabRef/jabref/commit/239095e9e5b6d854435383caa5edc929719ecbc1", "message": "Fix checkstyle issues\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-08-31T10:36:52Z", "type": "commit"}, {"oid": "467cbfc0171a789f8fff20506077948707eff8ec", "url": "https://github.com/JabRef/jabref/commit/467cbfc0171a789f8fff20506077948707eff8ec", "message": "Merge branch 'master' into feature/enable-lucene-query-parsing", "committedDate": "2020-08-31T10:54:27Z", "type": "commit"}, {"oid": "ff6a7d36becea42617bc23c4ec07a6bd0f1dba96", "url": "https://github.com/JabRef/jabref/commit/ff6a7d36becea42617bc23c4ec07a6bd0f1dba96", "message": "Merge branch 'feature/enable-lucene-query-parsing' of https://github.com/DominikVoigt/jabref into feature/enable-lucene-query-parsing", "committedDate": "2020-08-31T11:04:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0OTI4Mw==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480049283", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * \\[author:\"Igor Steinmacher\" author:\"Christoph Treude\" year:2017\\] will be converted to\n          \n          \n            \n              * `author:\"Igor Steinmacher\" author:\"Christoph Treude\" year:2017` will be converted to", "author": "koppor", "createdAt": "2020-08-31T10:56:18Z", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author\n+  * title\n+  * journal\n+  * year (for single year)\n+  * year-range (for range e.g. year-range:2012-2015)\n+* The journal, year, and year-range fields should only be populated once in each query\n+* Example:\n+  * \\[author:\"Igor Steinmacher\" author:\"Christoph Treude\" year:2017\\] will be converted to", "originalCommit": "467cbfc0171a789f8fff20506077948707eff8ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0OTM4NA==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480049384", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * \\[author:\"Igor Steinmacher\" AND author:\"Christoph Treude\" AND year:2017\\]\n          \n          \n            \n              * `author:\"Igor Steinmacher\" AND author:\"Christoph Treude\" AND year:2017`", "author": "koppor", "createdAt": "2020-08-31T10:56:32Z", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author\n+  * title\n+  * journal\n+  * year (for single year)\n+  * year-range (for range e.g. year-range:2012-2015)\n+* The journal, year, and year-range fields should only be populated once in each query\n+* Example:\n+  * \\[author:\"Igor Steinmacher\" author:\"Christoph Treude\" year:2017\\] will be converted to\n+  * \\[author:\"Igor Steinmacher\" AND author:\"Christoph Treude\" AND year:2017\\]", "originalCommit": "467cbfc0171a789f8fff20506077948707eff8ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0OTQ2MQ==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480049461", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Well Known\n          \n          \n            \n            * Well known", "author": "koppor", "createdAt": "2020-08-31T10:56:44Z", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author\n+  * title\n+  * journal\n+  * year (for single year)\n+  * year-range (for range e.g. year-range:2012-2015)\n+* The journal, year, and year-range fields should only be populated once in each query\n+* Example:\n+  * \\[author:\"Igor Steinmacher\" author:\"Christoph Treude\" year:2017\\] will be converted to\n+  * \\[author:\"Igor Steinmacher\" AND author:\"Christoph Treude\" AND year:2017\\]\n+\n+### Positive Consequences\n+\n+* Already tested\n+* Well Known", "originalCommit": "467cbfc0171a789f8fff20506077948707eff8ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0OTYyNA==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480049624", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * author\n          \n          \n            \n              * `author`", "author": "koppor", "createdAt": "2020-08-31T10:57:00Z", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author", "originalCommit": "467cbfc0171a789f8fff20506077948707eff8ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0OTczNA==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480049734", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * title\n          \n          \n            \n              * `title`", "author": "koppor", "createdAt": "2020-08-31T10:57:08Z", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author\n+  * title", "originalCommit": "467cbfc0171a789f8fff20506077948707eff8ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0OTg5MA==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480049890", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * journal\n          \n          \n            \n              * `journal`", "author": "koppor", "createdAt": "2020-08-31T10:57:17Z", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author\n+  * title\n+  * journal", "originalCommit": "467cbfc0171a789f8fff20506077948707eff8ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1MDAxNw==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480050017", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * year (for single year)\n          \n          \n            \n              * `year` (for single year)", "author": "koppor", "createdAt": "2020-08-31T10:57:27Z", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author\n+  * title\n+  * journal\n+  * year (for single year)", "originalCommit": "467cbfc0171a789f8fff20506077948707eff8ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1MDQ2NA==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480050464", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * year-range (for range e.g. year-range:2012-2015)\n          \n          \n            \n              * `year-range` (for range e.g. `year-range:2012-2015`)", "author": "koppor", "createdAt": "2020-08-31T10:57:55Z", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author\n+  * title\n+  * journal\n+  * year (for single year)\n+  * year-range (for range e.g. year-range:2012-2015)", "originalCommit": "467cbfc0171a789f8fff20506077948707eff8ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1MDc1Mg==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480050752", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * The journal, year, and year-range fields should only be populated once in each query\n          \n          \n            \n            * The `journal`, `year`, and `year-range` fields should only be populated once in each query", "author": "koppor", "createdAt": "2020-08-31T10:58:11Z", "path": "docs/adr/0015-support-an-abstract-query-syntax-for-query-conversion.md", "diffHunk": "@@ -0,0 +1,56 @@\n+# Query syntax design\n+\n+## Context and Problem Statement\n+\n+All libraries use their own query syntax for advanced search options. To increase usability, users should be able to formulate their (abstract) search queries in a query syntax that can be mapped to the library specific search queries. To achieve this, the query has to be parsed into an AST.\n+\n+Which query syntax should be used for the abstract queries?\n+Which features should the syntax support?\n+\n+## Considered Options\n+\n+* Use a simplified syntax that is derived of the [lucene](https://lucene.apache.org/core/8_6_1/queryparser/org/apache/lucene/queryparser/classic/package-summary.html) query syntax\n+* Formulate a own query syntax\n+\n+## Decision Outcome\n+\n+Chosen option: \"Use a syntax that is derived of the lucene query syntax\", because only option that is already known, and easy to implemenent.\n+Furthermore parsers for lucene already exist and are tested.\n+For simplicitly, and lack of universal capabilities across fetchers, only basic query features and therefor syntax is supported:\n+\n+* All terms in the query are whitespace separated and will be ANDed\n+* Default and certain fielded terms are supported\n+* Fielded Terms:\n+  * author\n+  * title\n+  * journal\n+  * year (for single year)\n+  * year-range (for range e.g. year-range:2012-2015)\n+* The journal, year, and year-range fields should only be populated once in each query", "originalCommit": "467cbfc0171a789f8fff20506077948707eff8ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1MjIyMg==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480052222", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Default Implementation behaves like perform search using the default field phrases as query\n          \n          \n            \n                    // Default implementation behaves as performSearch using the default field phrases as query", "author": "koppor", "createdAt": "2020-08-31T10:59:36Z", "path": "src/main/java/org/jabref/logic/importer/SearchBasedFetcher.java", "diffHunk": "@@ -26,7 +26,8 @@\n      * @return a list of {@link BibEntry}, which are matched by the query (may be empty)\n      */\n     default List<BibEntry> performComplexSearch(ComplexSearchQuery complexSearchQuery) throws FetcherException {\n-        // Default Implementation behaves like perform search using the default field as query\n-        return performSearch(complexSearchQuery.getDefaultField().orElse(\"\"));\n+        // Default Implementation behaves like perform search using the default field phrases as query", "originalCommit": "467cbfc0171a789f8fff20506077948707eff8ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1MjU4NQ==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480052585", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Default Implementation behaves like getURLForQuery using the default field phrases as query\n          \n          \n            \n                    // Default implementation behaves as getURLForQuery using the default field phrases as query", "author": "koppor", "createdAt": "2020-08-31T10:59:57Z", "path": "src/main/java/org/jabref/logic/importer/SearchBasedParserFetcher.java", "diffHunk": "@@ -83,8 +83,9 @@\n     }\n \n     default URL getComplexQueryURL(ComplexSearchQuery complexSearchQuery) throws URISyntaxException, MalformedURLException, FetcherException {\n-        // Default Implementation behaves like getURLForQuery using the default field as query\n-        return this.getURLForQuery(complexSearchQuery.getDefaultField().orElse(\"\"));\n+        // Default Implementation behaves like getURLForQuery using the default field phrases as query", "originalCommit": "467cbfc0171a789f8fff20506077948707eff8ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1NTUxMg==", "url": "https://github.com/JabRef/jabref/pull/6799#discussion_r480055512", "bodyText": "NumberFormatException should be catched here.\nSee https://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html#valueOf(java.lang.String). I would use 0 and 9999 as default valuesto keep the search going.", "author": "koppor", "createdAt": "2020-08-31T11:02:58Z", "path": "src/main/java/org/jabref/logic/importer/fetcher/ComplexSearchQuery.java", "diffHunk": "@@ -28,16 +31,32 @@ private ComplexSearchQuery(String defaultField, List<String> authors, List<Strin\n         this.singleYear = singleYear;\n     }\n \n-    public Optional<String> getDefaultField() {\n-        return Optional.ofNullable(defaultField);\n+    public static ComplexSearchQuery fromTerms(Collection<Term> terms) {\n+        ComplexSearchQueryBuilder builder = ComplexSearchQuery.builder();\n+        terms.forEach(term -> {\n+            String termText = term.text();\n+            switch (term.field().toLowerCase()) {\n+                case \"author\" -> builder.author(termText);\n+                case \"title\" -> builder.titlePhrase(termText);\n+                case \"journal\" -> builder.journal(termText);\n+                case \"year\" -> builder.singleYear(Integer.valueOf(termText));\n+                case \"year-range\" -> builder.fromYearAndToYear(Integer.valueOf(termText.split(\"-\")[0]), Integer.valueOf(termText.split(\"-\")[1]));", "originalCommit": "467cbfc0171a789f8fff20506077948707eff8ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "542d3a7c521f81c99fc156bb9d23166154a4e9f9", "url": "https://github.com/JabRef/jabref/commit/542d3a7c521f81c99fc156bb9d23166154a4e9f9", "message": "Apply suggestions from code review\n\nCo-authored-by: Oliver Kopp <kopp.dev@gmail.com>", "committedDate": "2020-08-31T11:11:26Z", "type": "commit"}, {"oid": "4b2ab98fce9cdbbbd04ffeb06cff909273fe54f3", "url": "https://github.com/JabRef/jabref/commit/4b2ab98fce9cdbbbd04ffeb06cff909273fe54f3", "message": "Handle year-range parsing in a more robust way\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-08-31T11:27:14Z", "type": "commit"}, {"oid": "8b3b7cdd08f7926e7d758dccef5c71897132287d", "url": "https://github.com/JabRef/jabref/commit/8b3b7cdd08f7926e7d758dccef5c71897132287d", "message": "Move extracted method into builder\n\nSigned-off-by: Dominik Voigt <dominik.ingo.voigt@gmail.com>", "committedDate": "2020-08-31T11:29:43Z", "type": "commit"}, {"oid": "ec60734090200890601ca4853fc977db127c86d3", "url": "https://github.com/JabRef/jabref/commit/ec60734090200890601ca4853fc977db127c86d3", "message": "Merge branch 'feature/enable-lucene-query-parsing' of https://github.com/DominikVoigt/jabref into feature/enable-lucene-query-parsing", "committedDate": "2020-08-31T11:31:54Z", "type": "commit"}]}