{"pr_number": 2852, "pr_title": "Seed based feature search (Fixes #2312)", "pr_createdAt": "2020-01-13T15:37:01Z", "pr_url": "https://github.com/PaperMC/Paper/pull/2852", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NTc1Ng==", "url": "https://github.com/PaperMC/Paper/pull/2852#discussion_r365965756", "bodyText": "Override should be moved to next line for effective use of the OPFHELPER.", "author": "Black-Hole", "createdAt": "2020-01-13T18:46:12Z", "path": "Spigot-Server-Patches/0424-Seed-based-feature-search.patch", "diffHunk": "@@ -0,0 +1,110 @@\n+From 55f062af7886e33bc8945d0b3c97ea7ebcf0f4cd Mon Sep 17 00:00:00 2001\n+From: Phoenix616 <mail@moep.tv>\n+Date: Mon, 13 Jan 2020 15:40:32 +0100\n+Subject: [PATCH] Seed based feature search\n+\n+This fixes the issue where the server will load surrounding chunks up to\n+a radius of 100 chunks in order to search for features e.g. when running\n+the /locate command or for treasure maps (issue #2312).\n+This is done by using the same seed checking functionality that is used\n+by the server when generating these features before actually attempting\n+to load the chunk to check if a feature is available in it.\n+\n+The only downside of this is that it breaks once the seed or generator\n+changes but this should usually not happen. A config option to disable\n+this improvement is added though in case that should ever be necessary.\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java\n+index b309fdaba..0b86502eb 100644\n+--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java\n++++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java\n+@@ -357,6 +357,12 @@ public class PaperWorldConfig {\n+         }\n+     }\n+ \n++    public boolean seedBasedFeatureSearch = true;\n++    private void seedBasedFeatureSearch() {\n++        seedBasedFeatureSearch = getBoolean(\"seed-based-feature-search\", seedBasedFeatureSearch);\n++        log(\"Feature search is based on seed: \" + seedBasedFeatureSearch);\n++    }\n++\n+     public int maxCollisionsPerEntity;\n+     private void maxEntityCollision() {\n+         maxCollisionsPerEntity = getInt( \"max-entity-collisions\", this.spigotConfig.getInt(\"max-entity-collisions\", 8) );\n+diff --git a/src/main/java/net/minecraft/server/BiomeManager.java b/src/main/java/net/minecraft/server/BiomeManager.java\n+index e96f544f1..68423645d 100644\n+--- a/src/main/java/net/minecraft/server/BiomeManager.java\n++++ b/src/main/java/net/minecraft/server/BiomeManager.java\n+@@ -12,10 +12,12 @@ public class BiomeManager {\n+         this.c = genlayerzoomer;\n+     }\n+ \n++    public BiomeManager withProvider(WorldChunkManager worldchunkmanager) { return a(worldchunkmanager); } // Paper - OBFHELPER\n+     public BiomeManager a(WorldChunkManager worldchunkmanager) {\n+         return new BiomeManager(worldchunkmanager, this.b, this.c);\n+     }\n+ \n++    public BiomeBase getBiome(BlockPosition blockposition) { return a(blockposition); } // Paper - OBFHELPER\n+     public BiomeBase a(BlockPosition blockposition) {\n+         return this.c.a(this.b, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this.a);\n+     }\n+diff --git a/src/main/java/net/minecraft/server/ChunkCoordIntPair.java b/src/main/java/net/minecraft/server/ChunkCoordIntPair.java\n+index f2a19acd8..09f1308b0 100644\n+--- a/src/main/java/net/minecraft/server/ChunkCoordIntPair.java\n++++ b/src/main/java/net/minecraft/server/ChunkCoordIntPair.java\n+@@ -64,10 +64,12 @@ public class ChunkCoordIntPair {\n+         }\n+     }\n+ \n++    public int getBlockX() { return d(); } // Paper - OBFHELPER\n+     public int d() {\n+         return this.x << 4;\n+     }\n+ \n++    public int getBlockZ() { return e(); } // Paper - OBFHELPER\n+     public int e() {\n+         return this.z << 4;\n+     }\n+diff --git a/src/main/java/net/minecraft/server/StructureGenerator.java b/src/main/java/net/minecraft/server/StructureGenerator.java\n+index e8ce2ecf2..acfe732af 100644\n+--- a/src/main/java/net/minecraft/server/StructureGenerator.java\n++++ b/src/main/java/net/minecraft/server/StructureGenerator.java\n+@@ -109,6 +109,15 @@ public abstract class StructureGenerator<C extends WorldGenFeatureConfiguration>\n+                             if (flag1 || flag2) {\n+                                 ChunkCoordIntPair chunkcoordintpair = this.a(chunkgenerator, seededrandom, j, k, i1, j1);\n+                                 if (!world.getWorldBorder().isChunkInBounds(chunkcoordintpair.x, chunkcoordintpair.z)) { continue; } // Paper\n++                                // Paper start - seed based feature search\n++                                if (world.paperConfig.seedBasedFeatureSearch) {\n++                                    BiomeManager biomeManager = world.getBiomeManager().withProvider(chunkgenerator.getWorldChunkManager());\n++                                    BiomeBase biomeBase = biomeManager.getBiome(new BlockPosition(chunkcoordintpair.getBlockX() + 9, 0, chunkcoordintpair.getBlockZ() + 9));\n++                                    if (!shouldGenerate(biomeManager, chunkgenerator, seededrandom, chunkcoordintpair.x, chunkcoordintpair.z, biomeBase)) {\n++                                        continue;\n++                                    }\n++                                }\n++                                // Paper end\n+                                 StructureStart structurestart = world.getChunkAt(chunkcoordintpair.x, chunkcoordintpair.z, ChunkStatus.STRUCTURE_STARTS).a(this.b());\n+ \n+                                 if (structurestart != null && structurestart.e()) {\n+@@ -165,6 +174,7 @@ public abstract class StructureGenerator<C extends WorldGenFeatureConfiguration>\n+         return new ChunkCoordIntPair(i + k, j + l);\n+     }\n+ \n++    public boolean shouldGenerate(BiomeManager biomemanager, ChunkGenerator<?> chunkgenerator, Random random, int chunkX, int chunkZ, BiomeBase biomebase) { return a(biomemanager, chunkgenerator, random, chunkX, chunkZ, biomebase); } // Paper - OBFHELPER\n+     public abstract boolean a(BiomeManager biomemanager, ChunkGenerator<?> chunkgenerator, Random random, int i, int j, BiomeBase biomebase);\n+ \n+     public abstract StructureGenerator.a a();\n+diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java\n+index 5460ace8f..999338cfc 100644\n+--- a/src/main/java/net/minecraft/server/World.java\n++++ b/src/main/java/net/minecraft/server/World.java\n+@@ -1584,6 +1584,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {\n+         return this.methodProfiler;\n+     }\n+ \n++    public BiomeManager getBiomeManager() { return d(); } // Paper - OBFHELPER\n+     @Override", "originalCommit": "4d6c1935fd43820cf987ff308432f7ed2fa27a0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk3MDczMQ==", "url": "https://github.com/PaperMC/Paper/pull/2852#discussion_r365970731", "bodyText": "I'm unsure what you mean by that, the @Override is for the d() method which overrides the one in the IWorldReader interface. I guess you mean that the OBFHELPER should be in the interface via a default method or something like that?", "author": "Phoenix616", "createdAt": "2020-01-13T18:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2NTc1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMjg1NQ==", "url": "https://github.com/PaperMC/Paper/pull/2852#discussion_r370332855", "bodyText": "We need to synchronize on the StructureGenerator if we're generating a Stronghold due to some concurrency concerns here, but otherwise, this looks fine following the existing server logic here", "author": "electronicboy", "createdAt": "2020-01-23T20:16:29Z", "path": "Spigot-Server-Patches/0424-Seed-based-feature-search.patch", "diffHunk": "@@ -0,0 +1,113 @@\n+From 53a8c63edaf854bf9daad63d9d3426541e6069d8 Mon Sep 17 00:00:00 2001\n+From: Phoenix616 <mail@moep.tv>\n+Date: Mon, 13 Jan 2020 15:40:32 +0100\n+Subject: [PATCH] Seed based feature search\n+\n+This fixes the issue where the server will load surrounding chunks up to\n+a radius of 100 chunks in order to search for features e.g. when running\n+the /locate command or for treasure maps (issue #2312).\n+This is done by using the same seed checking functionality that is used\n+by the server when generating these features before actually attempting\n+to load the chunk to check if a feature is available in it.\n+\n+The only downside of this is that it breaks once the seed or generator\n+changes but this should usually not happen. A config option to disable\n+this improvement is added though in case that should ever be necessary.\n+\n+diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java\n+index b309fdaba..0b86502eb 100644\n+--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java\n++++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java\n+@@ -357,6 +357,12 @@ public class PaperWorldConfig {\n+         }\n+     }\n+ \n++    public boolean seedBasedFeatureSearch = true;\n++    private void seedBasedFeatureSearch() {\n++        seedBasedFeatureSearch = getBoolean(\"seed-based-feature-search\", seedBasedFeatureSearch);\n++        log(\"Feature search is based on seed: \" + seedBasedFeatureSearch);\n++    }\n++\n+     public int maxCollisionsPerEntity;\n+     private void maxEntityCollision() {\n+         maxCollisionsPerEntity = getInt( \"max-entity-collisions\", this.spigotConfig.getInt(\"max-entity-collisions\", 8) );\n+diff --git a/src/main/java/net/minecraft/server/BiomeManager.java b/src/main/java/net/minecraft/server/BiomeManager.java\n+index e96f544f1..68423645d 100644\n+--- a/src/main/java/net/minecraft/server/BiomeManager.java\n++++ b/src/main/java/net/minecraft/server/BiomeManager.java\n+@@ -12,10 +12,12 @@ public class BiomeManager {\n+         this.c = genlayerzoomer;\n+     }\n+ \n++    public BiomeManager withProvider(WorldChunkManager worldchunkmanager) { return a(worldchunkmanager); } // Paper - OBFHELPER\n+     public BiomeManager a(WorldChunkManager worldchunkmanager) {\n+         return new BiomeManager(worldchunkmanager, this.b, this.c);\n+     }\n+ \n++    public BiomeBase getBiome(BlockPosition blockposition) { return a(blockposition); } // Paper - OBFHELPER\n+     public BiomeBase a(BlockPosition blockposition) {\n+         return this.c.a(this.b, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this.a);\n+     }\n+diff --git a/src/main/java/net/minecraft/server/ChunkCoordIntPair.java b/src/main/java/net/minecraft/server/ChunkCoordIntPair.java\n+index f2a19acd8..09f1308b0 100644\n+--- a/src/main/java/net/minecraft/server/ChunkCoordIntPair.java\n++++ b/src/main/java/net/minecraft/server/ChunkCoordIntPair.java\n+@@ -64,10 +64,12 @@ public class ChunkCoordIntPair {\n+         }\n+     }\n+ \n++    public int getBlockX() { return d(); } // Paper - OBFHELPER\n+     public int d() {\n+         return this.x << 4;\n+     }\n+ \n++    public int getBlockZ() { return e(); } // Paper - OBFHELPER\n+     public int e() {\n+         return this.z << 4;\n+     }\n+diff --git a/src/main/java/net/minecraft/server/StructureGenerator.java b/src/main/java/net/minecraft/server/StructureGenerator.java\n+index e8ce2ecf2..acfe732af 100644\n+--- a/src/main/java/net/minecraft/server/StructureGenerator.java\n++++ b/src/main/java/net/minecraft/server/StructureGenerator.java\n+@@ -109,6 +109,15 @@ public abstract class StructureGenerator<C extends WorldGenFeatureConfiguration>\n+                             if (flag1 || flag2) {\n+                                 ChunkCoordIntPair chunkcoordintpair = this.a(chunkgenerator, seededrandom, j, k, i1, j1);\n+                                 if (!world.getWorldBorder().isChunkInBounds(chunkcoordintpair.x, chunkcoordintpair.z)) { continue; } // Paper\n++                                // Paper start - seed based feature search\n++                                if (world.paperConfig.seedBasedFeatureSearch) {\n++                                    BiomeManager biomeManager = world.getBiomeManager().withProvider(chunkgenerator.getWorldChunkManager());\n++                                    BiomeBase biomeBase = biomeManager.getBiome(new BlockPosition(chunkcoordintpair.getBlockX() + 9, 0, chunkcoordintpair.getBlockZ() + 9));\n++                                    if (!shouldGenerate(biomeManager, chunkgenerator, seededrandom, chunkcoordintpair.x, chunkcoordintpair.z, biomeBase)) {", "originalCommit": "8de564672c0f2960d2e3f8fecc63d002cb908e37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM1MDU5OA==", "url": "https://github.com/PaperMC/Paper/pull/2852#discussion_r370350598", "bodyText": "Aren't Strongholds handled separately (afaik it overrides the getNearestGeneratedFeature method due to it reading directly from the stronghold data file instead of searching chunks) or do you mean because of that?", "author": "Phoenix616", "createdAt": "2020-01-23T20:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMjg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM1MjY4OQ==", "url": "https://github.com/PaperMC/Paper/pull/2852#discussion_r370352689", "bodyText": "the shouldGenerate method ends up iterating the list of stronghold structures, actually looking at it, we already actually syncronize closer to the data modification itself, so shouldn't actually be needed", "author": "electronicboy", "createdAt": "2020-01-23T21:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMjg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQwMTY5Nw==", "url": "https://github.com/PaperMC/Paper/pull/2852#discussion_r370401697", "bodyText": "Well it wouldn't ever be a problem in the first place as WorldGenStronghold's shouldGenerate method isn't called by the general getNearestGeneratedFeature method ever as the getNearestGeneratedFeature is overriden by WorldGenStronghold with a different logic that isn't modified by my patch at all.", "author": "Phoenix616", "createdAt": "2020-01-23T23:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzMjg1NQ=="}], "type": "inlineReview"}, {"oid": "b6313ef0202a70aaeae1135346a1fd5bd5a825ff", "url": "https://github.com/PaperMC/Paper/commit/b6313ef0202a70aaeae1135346a1fd5bd5a825ff", "message": "Seed based feature search (Fixes #2312)", "committedDate": "2020-01-24T15:16:52Z", "type": "commit"}, {"oid": "df453c5f5aa10d3cc80328629cc7e30615538ed1", "url": "https://github.com/PaperMC/Paper/commit/df453c5f5aa10d3cc80328629cc7e30615538ed1", "message": "Improve obfuscation helper to produce conflict when obfuscation changes", "committedDate": "2020-01-24T15:16:52Z", "type": "commit"}, {"oid": "9cd904acb5a781c2635086fdfc22442eb69728ef", "url": "https://github.com/PaperMC/Paper/commit/9cd904acb5a781c2635086fdfc22442eb69728ef", "message": "Rebuild", "committedDate": "2020-01-24T15:38:35Z", "type": "commit"}, {"oid": "9cd904acb5a781c2635086fdfc22442eb69728ef", "url": "https://github.com/PaperMC/Paper/commit/9cd904acb5a781c2635086fdfc22442eb69728ef", "message": "Rebuild", "committedDate": "2020-01-24T15:38:35Z", "type": "forcePushed"}]}