{"pr_number": 4213, "pr_title": "Add additional open container api to HumanEntity", "pr_createdAt": "2020-08-26T06:32:48Z", "pr_url": "https://github.com/PaperMC/Paper/pull/4213", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjEzMQ==", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477092131", "bodyText": "You check iflocation is null below, but not here - is this intentional? If so, why?", "author": "kashike", "createdAt": "2020-08-26T07:30:40Z", "path": "Spigot-Server-Patches/0565-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,127 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:12:31 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+index 98768b5df93fd1bf94858149e15a8c9a16439695..02d52c2a9c95ca60f08720a44b825c75e0ba8513 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+@@ -450,6 +450,116 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {\n+         return this.getHandle().activeContainer.getBukkitView();\n+     }\n+ \n++    // Paper start - Add additional containers\n++    @Override\n++    public InventoryView openAnvil(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();", "originalCommit": "c8bc7b60f57016350873d6b4084d52ed0e84b213", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxNTM0NQ==", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477615345", "bodyText": "I used code from the existing openEnchant method as a reference. I didn't notice this and it appears that this is a regression in the craftbukkit implementation.\nWill fix this in these new methods", "author": "JRoy", "createdAt": "2020-08-26T22:04:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjI1MQ==", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477092251", "bodyText": "You check iflocation is null below, but not here - is this intentional? If so, why?", "author": "kashike", "createdAt": "2020-08-26T07:30:56Z", "path": "Spigot-Server-Patches/0565-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,127 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:12:31 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+index 98768b5df93fd1bf94858149e15a8c9a16439695..02d52c2a9c95ca60f08720a44b825c75e0ba8513 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+@@ -450,6 +450,116 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {\n+         return this.getHandle().activeContainer.getBukkitView();\n+     }\n+ \n++    // Paper start - Add additional containers\n++    @Override\n++    public InventoryView openAnvil(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.ANVIL) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockAnvil) Blocks.ANVIL).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openCartographyTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();", "originalCommit": "c8bc7b60f57016350873d6b4084d52ed0e84b213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjMxMw==", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477092313", "bodyText": "You check iflocation is null below, but not here - is this intentional? If so, why?", "author": "kashike", "createdAt": "2020-08-26T07:31:01Z", "path": "Spigot-Server-Patches/0565-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,127 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:12:31 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+index 98768b5df93fd1bf94858149e15a8c9a16439695..02d52c2a9c95ca60f08720a44b825c75e0ba8513 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+@@ -450,6 +450,116 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {\n+         return this.getHandle().activeContainer.getBukkitView();\n+     }\n+ \n++    // Paper start - Add additional containers\n++    @Override\n++    public InventoryView openAnvil(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.ANVIL) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockAnvil) Blocks.ANVIL).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openCartographyTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.CARTOGRAPHY_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockCartographyTable) Blocks.CARTOGRAPHY_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openGrindstone(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();", "originalCommit": "c8bc7b60f57016350873d6b4084d52ed0e84b213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjQwMQ==", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477092401", "bodyText": "You check iflocation is null below, but not here - is this intentional? If so, why?", "author": "kashike", "createdAt": "2020-08-26T07:31:08Z", "path": "Spigot-Server-Patches/0565-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,127 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:12:31 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+index 98768b5df93fd1bf94858149e15a8c9a16439695..02d52c2a9c95ca60f08720a44b825c75e0ba8513 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+@@ -450,6 +450,116 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {\n+         return this.getHandle().activeContainer.getBukkitView();\n+     }\n+ \n++    // Paper start - Add additional containers\n++    @Override\n++    public InventoryView openAnvil(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.ANVIL) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockAnvil) Blocks.ANVIL).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openCartographyTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.CARTOGRAPHY_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockCartographyTable) Blocks.CARTOGRAPHY_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openGrindstone(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.GRINDSTONE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockGrindstone) Blocks.GRINDSTONE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openLoom(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.LOOM) {", "originalCommit": "c8bc7b60f57016350873d6b4084d52ed0e84b213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjUwNA==", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477092504", "bodyText": "You check iflocation is null below, but not here - is this intentional? If so, why?", "author": "kashike", "createdAt": "2020-08-26T07:31:19Z", "path": "Spigot-Server-Patches/0565-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,127 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:12:31 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+index 98768b5df93fd1bf94858149e15a8c9a16439695..02d52c2a9c95ca60f08720a44b825c75e0ba8513 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+@@ -450,6 +450,116 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {\n+         return this.getHandle().activeContainer.getBukkitView();\n+     }\n+ \n++    // Paper start - Add additional containers\n++    @Override\n++    public InventoryView openAnvil(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.ANVIL) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockAnvil) Blocks.ANVIL).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openCartographyTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.CARTOGRAPHY_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockCartographyTable) Blocks.CARTOGRAPHY_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openGrindstone(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.GRINDSTONE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockGrindstone) Blocks.GRINDSTONE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openLoom(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.LOOM) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockLoom) Blocks.LOOM).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openSmithingTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();", "originalCommit": "c8bc7b60f57016350873d6b4084d52ed0e84b213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MjU0NQ==", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477092545", "bodyText": "You check iflocation is null below, but not here - is this intentional? If so, why?", "author": "kashike", "createdAt": "2020-08-26T07:31:25Z", "path": "Spigot-Server-Patches/0565-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,127 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:12:31 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+index 98768b5df93fd1bf94858149e15a8c9a16439695..02d52c2a9c95ca60f08720a44b825c75e0ba8513 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+@@ -450,6 +450,116 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {\n+         return this.getHandle().activeContainer.getBukkitView();\n+     }\n+ \n++    // Paper start - Add additional containers\n++    @Override\n++    public InventoryView openAnvil(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.ANVIL) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockAnvil) Blocks.ANVIL).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openCartographyTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.CARTOGRAPHY_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockCartographyTable) Blocks.CARTOGRAPHY_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openGrindstone(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.GRINDSTONE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockGrindstone) Blocks.GRINDSTONE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openLoom(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.LOOM) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockLoom) Blocks.LOOM).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openSmithingTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.SMITHING_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockSmithingTable) Blocks.SMITHING_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openStonecutter(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();", "originalCommit": "c8bc7b60f57016350873d6b4084d52ed0e84b213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5ODQ1OQ==", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477098459", "bodyText": "Wouldn't it be easier for users to just specify inventory type?", "author": "Proximyst", "createdAt": "2020-08-26T07:42:18Z", "path": "Spigot-API-Patches/0221-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,103 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:11:58 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/entity/HumanEntity.java b/src/main/java/org/bukkit/entity/HumanEntity.java\n+index b09d12390d5f77330ac84452e0fee63a169bd01f..77bff8fb6bfdf739e413084e13677a83e723c71e 100644\n+--- a/src/main/java/org/bukkit/entity/HumanEntity.java\n++++ b/src/main/java/org/bukkit/entity/HumanEntity.java\n+@@ -148,6 +148,92 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder\n+     @Nullable\n+     public InventoryView openMerchant(@NotNull Merchant merchant, boolean force);\n+ \n++    // Paper start - Add additional containers\n++    /**\n++     * Opens an empty anvil inventory window with the player's inventory\n++     * on the bottom.\n++     *\n++     * @param location The location to attach it to. If null, the player's\n++     *     location is used.\n++     * @param force If false, and there is no anvil block at the location,\n++     *     no inventory will be opened and null will be returned.\n++     * @return The newly opened inventory view, or null if it could not be\n++     *     opened.\n++     */\n++    @Nullable\n++    public InventoryView openAnvil(@Nullable Location location, boolean force);\n++\n++    /**\n++     * Opens an empty cartography table inventory window with the player's inventory\n++     * on the bottom.\n++     *\n++     * @param location The location to attach it to. If null, the player's\n++     *     location is used.\n++     * @param force If false, and there is no cartography table block at the location,\n++     *     no inventory will be opened and null will be returned.\n++     * @return The newly opened inventory view, or null if it could not be\n++     *     opened.\n++     */\n++    @Nullable\n++    public InventoryView openCartographyTable(@Nullable Location location, boolean force);", "originalCommit": "c8bc7b60f57016350873d6b4084d52ed0e84b213", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzYxNDU5NA==", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477614594", "bodyText": "Existing API to do this doesn't work correctly for these use cases (UnsupportedOperationExceptions + improper reachability checks). Due to the way containers are written, speific casting is required in order to properly so one general purpose method would end up being as long as indivial methods.", "author": "JRoy", "createdAt": "2020-08-26T22:02:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5ODQ1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5ODczMQ==", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477098731", "bodyText": "Just set to !force", "author": "Proximyst", "createdAt": "2020-08-26T07:42:48Z", "path": "Spigot-Server-Patches/0565-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,127 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:12:31 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+index 98768b5df93fd1bf94858149e15a8c9a16439695..02d52c2a9c95ca60f08720a44b825c75e0ba8513 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+@@ -450,6 +450,116 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {\n+         return this.getHandle().activeContainer.getBukkitView();\n+     }\n+ \n++    // Paper start - Add additional containers\n++    @Override\n++    public InventoryView openAnvil(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.ANVIL) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockAnvil) Blocks.ANVIL).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openCartographyTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.CARTOGRAPHY_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockCartographyTable) Blocks.CARTOGRAPHY_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openGrindstone(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.GRINDSTONE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockGrindstone) Blocks.GRINDSTONE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openLoom(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.LOOM) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockLoom) Blocks.LOOM).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openSmithingTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.SMITHING_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockSmithingTable) Blocks.SMITHING_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openStonecutter(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.STONECUTTER) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockStonecutter) Blocks.STONECUTTER).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;", "originalCommit": "c8bc7b60f57016350873d6b4084d52ed0e84b213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5OTE0OQ==", "url": "https://github.com/PaperMC/Paper/pull/4213#discussion_r477099149", "bodyText": "Async catcher; this modifies state.", "author": "Proximyst", "createdAt": "2020-08-26T07:43:36Z", "path": "Spigot-Server-Patches/0565-Add-additional-open-container-api-to-HumanEntity.patch", "diffHunk": "@@ -0,0 +1,127 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: JRoy <joshroy126@gmail.com>\n+Date: Wed, 26 Aug 2020 02:12:31 -0400\n+Subject: [PATCH] Add additional open container api to HumanEntity\n+\n+\n+diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+index 98768b5df93fd1bf94858149e15a8c9a16439695..02d52c2a9c95ca60f08720a44b825c75e0ba8513 100644\n+--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n++++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java\n+@@ -450,6 +450,116 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {\n+         return this.getHandle().activeContainer.getBukkitView();\n+     }\n+ \n++    // Paper start - Add additional containers\n++    @Override\n++    public InventoryView openAnvil(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.ANVIL) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockAnvil) Blocks.ANVIL).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openCartographyTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.CARTOGRAPHY_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockCartographyTable) Blocks.CARTOGRAPHY_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openGrindstone(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.GRINDSTONE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockGrindstone) Blocks.GRINDSTONE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openLoom(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.LOOM) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockLoom) Blocks.LOOM).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openSmithingTable(Location location, boolean force) {\n++        if (!force) {\n++            Block block = location.getBlock();\n++            if (block.getType() != Material.SMITHING_TABLE) {\n++                return null;\n++            }\n++        }\n++        if (location == null) {\n++            location = getLocation();\n++        }\n++        getHandle().openContainer(((net.minecraft.server.BlockSmithingTable) Blocks.SMITHING_TABLE).getInventory(null, getHandle().world, new BlockPosition(location.getBlockX(), location.getBlockY(), location.getBlockZ())));\n++        if (force) {\n++            getHandle().activeContainer.checkReachable = false;\n++        }\n++        return getHandle().activeContainer.getBukkitView();\n++    }\n++\n++    @Override\n++    public InventoryView openStonecutter(Location location, boolean force) {", "originalCommit": "c8bc7b60f57016350873d6b4084d52ed0e84b213", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "da96f583f0142ed34a9efb37af9d7eb45a1b595e", "url": "https://github.com/PaperMC/Paper/commit/da96f583f0142ed34a9efb37af9d7eb45a1b595e", "message": "Add additional open container api to HumanEntity", "committedDate": "2020-08-27T00:48:21Z", "type": "forcePushed"}, {"oid": "9448da5a1357c5abcaad32eb5743c7c60aadb16f", "url": "https://github.com/PaperMC/Paper/commit/9448da5a1357c5abcaad32eb5743c7c60aadb16f", "message": "Add additional open container api to HumanEntity", "committedDate": "2020-08-27T03:24:38Z", "type": "forcePushed"}, {"oid": "bc706933adca9364c2d3f9a33383a081a47d6f26", "url": "https://github.com/PaperMC/Paper/commit/bc706933adca9364c2d3f9a33383a081a47d6f26", "message": "Add additional open container api to HumanEntity", "committedDate": "2020-08-27T04:17:11Z", "type": "forcePushed"}, {"oid": "a1e1c74ad79601baa35ac35c0cb3f815cb99ef95", "url": "https://github.com/PaperMC/Paper/commit/a1e1c74ad79601baa35ac35c0cb3f815cb99ef95", "message": "Add additional open container api to HumanEntity", "committedDate": "2020-09-10T18:19:42Z", "type": "forcePushed"}, {"oid": "94ec29189df1a05cb6020c1c2044193c5d630b40", "url": "https://github.com/PaperMC/Paper/commit/94ec29189df1a05cb6020c1c2044193c5d630b40", "message": "Add additional open container api to HumanEntity", "committedDate": "2020-09-10T18:26:31Z", "type": "commit"}, {"oid": "94ec29189df1a05cb6020c1c2044193c5d630b40", "url": "https://github.com/PaperMC/Paper/commit/94ec29189df1a05cb6020c1c2044193c5d630b40", "message": "Add additional open container api to HumanEntity", "committedDate": "2020-09-10T18:26:31Z", "type": "forcePushed"}]}