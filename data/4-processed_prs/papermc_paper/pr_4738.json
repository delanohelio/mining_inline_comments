{"pr_number": 4738, "pr_title": "Significantly improve performance of the end generation", "pr_createdAt": "2020-11-06T04:30:31Z", "pr_url": "https://github.com/PaperMC/Paper/pull/4738", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzMTc1MA==", "url": "https://github.com/PaperMC/Paper/pull/4738#discussion_r518531750", "bodyText": "how often is it <= 4096? If this happens often, we should skip cache logic for this\nlike\nif (<= 4096)  f1 = minvalue\nelse if (incache)\nso that the cache isn't getting clobbered by static values", "author": "aikar", "createdAt": "2020-11-06T05:31:09Z", "path": "Spigot-Server-Patches/0594-Significantly-improve-performance-of-the-end-generat.patch", "diffHunk": "@@ -0,0 +1,58 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: SuperCoder7979 <k.pranav@gmail.com>\n+Date: Tue, 3 Nov 2020 23:48:05 -0600\n+Subject: [PATCH] Significantly improve performance of the end generation\n+\n+This patch implements a noise cache for the end which significantly reduces the computation time of generation. This results in about a 3x improvement.\n+\n+Original code by SuperCoder7979 and Gegy in Lithium, licensed under LGPL-3.0 <Source: https://github.com/jellysquid3/lithium-fabric>\n+\n+Co-authored-by: Gegy <gegy1000@gmail.com>\n+Co-authored-by: Dylan Xaldin <Puremin0rez515@gmail.com>\n+Co-authored-by: pop4959 <pop4959@gmail.com>\n+\n+diff --git a/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java b/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java\n+index 9c15cd303ccc2928be4e3e7080e74e8314d7e0f2..eb370c226d401ad0d1b29f054b34e6cfb5d192c1 100644\n+--- a/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java\n++++ b/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java\n+@@ -3,6 +3,7 @@ package net.minecraft.server;\n+ import com.google.common.collect.ImmutableList;\n+ import com.mojang.serialization.Codec;\n+ import com.mojang.serialization.codecs.RecordCodecBuilder;\n++import it.unimi.dsi.fastutil.HashCommon; // Paper\n+ import java.util.List;\n+ \n+ public class WorldChunkManagerTheEnd extends WorldChunkManager {\n+@@ -22,6 +23,8 @@ public class WorldChunkManagerTheEnd extends WorldChunkManager {\n+     private final BiomeBase k;\n+     private final BiomeBase l;\n+     private final BiomeBase m;\n++    private static final long[] keys = new long[8192]; // Paper\n++    private static final float[] values = new float[8192]; // Paper\n+ \n+     public WorldChunkManagerTheEnd(IRegistry<BiomeBase> iregistry, long i) {\n+         this(iregistry, i, (BiomeBase) iregistry.d(Biomes.THE_END), (BiomeBase) iregistry.d(Biomes.END_HIGHLANDS), (BiomeBase) iregistry.d(Biomes.END_MIDLANDS), (BiomeBase) iregistry.d(Biomes.SMALL_END_ISLANDS), (BiomeBase) iregistry.d(Biomes.END_BARRENS));\n+@@ -81,8 +84,21 @@ public class WorldChunkManagerTheEnd extends WorldChunkManager {\n+                 long i2 = (long) (k + k1);\n+                 long j2 = (long) (l + l1);\n+ \n+-                if (i2 * i2 + j2 * j2 > 4096L && noisegenerator3handler.a((double) i2, (double) j2) < -0.8999999761581421D) {\n+-                    float f1 = (MathHelper.e((float) i2) * 3439.0F + MathHelper.e((float) j2) * 147.0F) % 13.0F + 9.0F;\n++                // Paper start - Significantly improve end generation performance by using a noise cache\n++                long key = ChunkCoordIntPair.pair((int) i2, (int) j2);\n++                int index = (int) HashCommon.mix(key) & 8191;\n++                float f1 = Long.MIN_VALUE;\n++                if (keys[index] == key) {\n++                    f1 = values[index];\n++                } else {\n++                    if (i2 * i2 + j2 * j2 > 4096L && noisegenerator3handler.a((double) i2, (double) j2) < -0.8999999761581421D) {", "originalCommit": "1f868a4d85f10f645db874fef70ea84052ee70bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyOTI0Ng==", "url": "https://github.com/PaperMC/Paper/pull/4738#discussion_r518729246", "bodyText": "It should only be <= 4096 when generating the main end island and the surrounding ~1000 blocks of void \ud83d\ude05", "author": "SuperCoder7979", "createdAt": "2020-11-06T12:46:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUzMTc1MA=="}], "type": "inlineReview"}, {"oid": "031a3f564ac79ddfa8dbf26a749c9a6a9a787fd2", "url": "https://github.com/PaperMC/Paper/commit/031a3f564ac79ddfa8dbf26a749c9a6a9a787fd2", "message": "Significantly improve performance of the end generation\n\nThis patch implements a noise cache for the end which significantly reduces the computation time of generation. This results in about a 3x improvement.\n\nOriginal code by SuperCoder7979 and Gegy in Lithium, licensed under LGPL-3.0 <Source: https://github.com/jellysquid3/lithium-fabric>\n\nCo-authored-by: Gegy <gegy1000@gmail.com>\nCo-authored-by: Dylan Xaldin <Puremin0rez515@gmail.com>\nCo-authored-by: pop4959 <pop4959@gmail.com>", "committedDate": "2020-11-07T00:51:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTEzODQzNg==", "url": "https://github.com/PaperMC/Paper/pull/4738#discussion_r519138436", "bodyText": "This should probably be stored per-generator-instance. Even then there\u2019s still a concern of handling threaded generation since this cache does not work concurrently- is it possible for concurrent generation of chunks on the same generator instance with Paper?", "author": "Gegy", "createdAt": "2020-11-07T06:48:31Z", "path": "Spigot-Server-Patches/0594-Significantly-improve-performance-of-the-end-generat.patch", "diffHunk": "@@ -0,0 +1,58 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: SuperCoder7979 <25208576+SuperCoder7979@users.noreply.github.com>\n+Date: Tue, 3 Nov 2020 23:48:05 -0600\n+Subject: [PATCH] Significantly improve performance of the end generation\n+\n+This patch implements a noise cache for the end which significantly reduces the computation time of generation. This results in about a 3x improvement.\n+\n+Original code by SuperCoder7979 and Gegy in Lithium, licensed under LGPL-3.0 <Source: https://github.com/jellysquid3/lithium-fabric>\n+\n+Co-authored-by: Gegy <gegy1000@gmail.com>\n+Co-authored-by: Dylan Xaldin <Puremin0rez515@gmail.com>\n+Co-authored-by: pop4959 <pop4959@gmail.com>\n+\n+diff --git a/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java b/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java\n+index 9c15cd303ccc2928be4e3e7080e74e8314d7e0f2..eb370c226d401ad0d1b29f054b34e6cfb5d192c1 100644\n+--- a/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java\n++++ b/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java\n+@@ -3,6 +3,7 @@ package net.minecraft.server;\n+ import com.google.common.collect.ImmutableList;\n+ import com.mojang.serialization.Codec;\n+ import com.mojang.serialization.codecs.RecordCodecBuilder;\n++import it.unimi.dsi.fastutil.HashCommon; // Paper\n+ import java.util.List;\n+ \n+ public class WorldChunkManagerTheEnd extends WorldChunkManager {\n+@@ -22,6 +23,8 @@ public class WorldChunkManagerTheEnd extends WorldChunkManager {\n+     private final BiomeBase k;\n+     private final BiomeBase l;\n+     private final BiomeBase m;\n++    private static final long[] keys = new long[8192]; // Paper", "originalCommit": "031a3f564ac79ddfa8dbf26a749c9a6a9a787fd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ad3682e8751e6044caac6afa1e400a1617924af0", "url": "https://github.com/PaperMC/Paper/commit/ad3682e8751e6044caac6afa1e400a1617924af0", "message": "Significantly improve performance of the end generation\n\nThis patch implements a noise cache for the end which significantly reduces the computation time of generation. This results in about a 3x improvement.\n\nOriginal code by SuperCoder7979 and Gegy in Lithium, licensed under LGPL-3.0 <Source: https://github.com/jellysquid3/lithium-fabric>\n\nCo-authored-by: Gegy <gegy1000@gmail.com>\nCo-authored-by: Dylan Xaldin <Puremin0rez515@gmail.com>\nCo-authored-by: pop4959 <pop4959@gmail.com>", "committedDate": "2020-11-12T00:57:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwNTM2Mg==", "url": "https://github.com/PaperMC/Paper/pull/4738#discussion_r521905362", "bodyText": "Might be beneficial to avoid the double map-lookup by storing a separate object that contains the keys and values?", "author": "Gegy", "createdAt": "2020-11-12T08:03:15Z", "path": "Spigot-Server-Patches/0594-Significantly-improve-performance-of-the-end-generat.patch", "diffHunk": "@@ -0,0 +1,79 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: SuperCoder7979 <25208576+SuperCoder7979@users.noreply.github.com>\n+Date: Tue, 3 Nov 2020 23:48:05 -0600\n+Subject: [PATCH] Significantly improve performance of the end generation\n+\n+This patch implements a noise cache for the end which significantly reduces the computation time of generation. This results in about a 3x improvement.\n+\n+Original code by SuperCoder7979 and Gegy in Lithium, licensed under LGPL-3.0 <Source: https://github.com/jellysquid3/lithium-fabric>\n+\n+Co-authored-by: Gegy <gegy1000@gmail.com>\n+Co-authored-by: Dylan Xaldin <Puremin0rez515@gmail.com>\n+Co-authored-by: pop4959 <pop4959@gmail.com>\n+\n+diff --git a/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java b/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java\n+index 9c15cd303ccc2928be4e3e7080e74e8314d7e0f2..195a9b53062f7d3896d17210989d6785ea4baee3 100644\n+--- a/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java\n++++ b/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java\n+@@ -3,6 +3,9 @@ package net.minecraft.server;\n+ import com.google.common.collect.ImmutableList;\n+ import com.mojang.serialization.Codec;\n+ import com.mojang.serialization.codecs.RecordCodecBuilder;\n++import it.unimi.dsi.fastutil.HashCommon; // Paper\n++import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap; // Paper\n++import it.unimi.dsi.fastutil.objects.Object2ObjectMap; // Paper\n+ import java.util.List;\n+ \n+ public class WorldChunkManagerTheEnd extends WorldChunkManager {\n+@@ -22,6 +25,13 @@ public class WorldChunkManagerTheEnd extends WorldChunkManager {\n+     private final BiomeBase k;\n+     private final BiomeBase l;\n+     private final BiomeBase m;\n++    // Paper start\n++    private static final class NoiseCache {\n++        public Object2ObjectMap<NoiseGenerator3Handler, long[]> keys = new Object2ObjectLinkedOpenHashMap<>();\n++        public Object2ObjectMap<NoiseGenerator3Handler, float[]> values = new Object2ObjectLinkedOpenHashMap<>();\n++    }\n++    private static final ThreadLocal<NoiseCache> noiseCache = ThreadLocal.withInitial(NoiseCache::new);\n++    // Paper end\n+ \n+     public WorldChunkManagerTheEnd(IRegistry<BiomeBase> iregistry, long i) {\n+         this(iregistry, i, (BiomeBase) iregistry.d(Biomes.THE_END), (BiomeBase) iregistry.d(Biomes.END_HIGHLANDS), (BiomeBase) iregistry.d(Biomes.END_MIDLANDS), (BiomeBase) iregistry.d(Biomes.SMALL_END_ISLANDS), (BiomeBase) iregistry.d(Biomes.END_BARRENS));\n+@@ -76,13 +86,35 @@ public class WorldChunkManagerTheEnd extends WorldChunkManager {\n+ \n+         f = MathHelper.a(f, -100.0F, 80.0F);\n+ \n++        // Paper start\n++        NoiseCache cache = noiseCache.get();\n++        long[] keys = cache.keys.computeIfAbsent(noisegenerator3handler, m -> {", "originalCommit": "ad3682e8751e6044caac6afa1e400a1617924af0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkwNTY1NA==", "url": "https://github.com/PaperMC/Paper/pull/4738#discussion_r521905654", "bodyText": "This probably shouldn't need to use a linked map. Possibly even can use a Reference2ObjectMap, which can give better performance if reference equality is valid here?", "author": "Gegy", "createdAt": "2020-11-12T08:03:54Z", "path": "Spigot-Server-Patches/0594-Significantly-improve-performance-of-the-end-generat.patch", "diffHunk": "@@ -0,0 +1,79 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: SuperCoder7979 <25208576+SuperCoder7979@users.noreply.github.com>\n+Date: Tue, 3 Nov 2020 23:48:05 -0600\n+Subject: [PATCH] Significantly improve performance of the end generation\n+\n+This patch implements a noise cache for the end which significantly reduces the computation time of generation. This results in about a 3x improvement.\n+\n+Original code by SuperCoder7979 and Gegy in Lithium, licensed under LGPL-3.0 <Source: https://github.com/jellysquid3/lithium-fabric>\n+\n+Co-authored-by: Gegy <gegy1000@gmail.com>\n+Co-authored-by: Dylan Xaldin <Puremin0rez515@gmail.com>\n+Co-authored-by: pop4959 <pop4959@gmail.com>\n+\n+diff --git a/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java b/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java\n+index 9c15cd303ccc2928be4e3e7080e74e8314d7e0f2..195a9b53062f7d3896d17210989d6785ea4baee3 100644\n+--- a/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java\n++++ b/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java\n+@@ -3,6 +3,9 @@ package net.minecraft.server;\n+ import com.google.common.collect.ImmutableList;\n+ import com.mojang.serialization.Codec;\n+ import com.mojang.serialization.codecs.RecordCodecBuilder;\n++import it.unimi.dsi.fastutil.HashCommon; // Paper\n++import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap; // Paper\n++import it.unimi.dsi.fastutil.objects.Object2ObjectMap; // Paper\n+ import java.util.List;\n+ \n+ public class WorldChunkManagerTheEnd extends WorldChunkManager {\n+@@ -22,6 +25,13 @@ public class WorldChunkManagerTheEnd extends WorldChunkManager {\n+     private final BiomeBase k;\n+     private final BiomeBase l;\n+     private final BiomeBase m;\n++    // Paper start\n++    private static final class NoiseCache {\n++        public Object2ObjectMap<NoiseGenerator3Handler, long[]> keys = new Object2ObjectLinkedOpenHashMap<>();", "originalCommit": "ad3682e8751e6044caac6afa1e400a1617924af0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "27d560e37d293cfdc7241a5d4863fcdfbf59f583", "url": "https://github.com/PaperMC/Paper/commit/27d560e37d293cfdc7241a5d4863fcdfbf59f583", "message": "Significantly improve performance of the end generation\n\nThis patch implements a noise cache for the end which significantly reduces the computation time of generation. This results in about a 3x improvement.\n\nOriginal code by SuperCoder7979 and Gegy in Lithium, licensed under LGPL-3.0 <Source: https://github.com/jellysquid3/lithium-fabric>\n\nCo-authored-by: Gegy <gegy1000@gmail.com>\nCo-authored-by: Dylan Xaldin <Puremin0rez515@gmail.com>\nCo-authored-by: pop4959 <pop4959@gmail.com>", "committedDate": "2020-11-13T06:55:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ1MTIxNA==", "url": "https://github.com/PaperMC/Paper/pull/4738#discussion_r523451214", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Original code by SuperCoder7979 and Gegy in Lithium, licensed under LGPL-3.0 <Source: https://github.com/jellysquid3/lithium-fabric>\n          \n          \n            \n            Original code by SuperCoder7979 and Gegy in Lithium, licensed under LGPL-3.0 (Source: <https://github.com/jellysquid3/lithium-fabric>)", "author": "Proximyst", "createdAt": "2020-11-14T18:59:28Z", "path": "Spigot-Server-Patches/0594-Significantly-improve-performance-of-the-end-generat.patch", "diffHunk": "@@ -0,0 +1,74 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: SuperCoder7979 <25208576+SuperCoder7979@users.noreply.github.com>\n+Date: Tue, 3 Nov 2020 23:48:05 -0600\n+Subject: [PATCH] Significantly improve performance of the end generation\n+\n+This patch implements a noise cache for the end which significantly reduces the computation time of generation. This results in about a 3x improvement.\n+\n+Original code by SuperCoder7979 and Gegy in Lithium, licensed under LGPL-3.0 <Source: https://github.com/jellysquid3/lithium-fabric>", "originalCommit": "27d560e37d293cfdc7241a5d4863fcdfbf59f583", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ3MDUxMw==", "url": "https://github.com/PaperMC/Paper/pull/4738#discussion_r523470513", "bodyText": "Resolved", "author": "Puremin0rez", "createdAt": "2020-11-14T22:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ1MTIxNA=="}], "type": "inlineReview"}, {"oid": "0f37e31cb86a3f150aff0cf37072ef80682ef5b0", "url": "https://github.com/PaperMC/Paper/commit/0f37e31cb86a3f150aff0cf37072ef80682ef5b0", "message": "Significantly improve performance of the end generation\n\nThis patch implements a noise cache for the end which significantly reduces the computation time of generation. This results in about a 3x improvement.\n\nOriginal code by SuperCoder7979 and Gegy in Lithium, licensed under LGPL-3.0 (Source: https://github.com/jellysquid3/lithium-fabric)\n\nCo-authored-by: Gegy <gegy1000@gmail.com>\nCo-authored-by: Dylan Xaldin <Puremin0rez515@gmail.com>\nCo-authored-by: pop4959 <pop4959@gmail.com>", "committedDate": "2020-11-14T22:15:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ3MzI3OQ==", "url": "https://github.com/PaperMC/Paper/pull/4738#discussion_r523473279", "bodyText": "Not really sure that a ThreadLocal is the best idea, especially if you have worlds loading/unloading, any reason why this is preferred over just using a standard map/array?\nThere's no real garauntees over how threads will be handled, e.g. if we get parallel, will it be using multiple threads which are killed afterwards, etc\nCould just store it in a singular array per manager, that way you can \"guarantee\" enough safety there", "author": "electronicboy", "createdAt": "2020-11-14T22:56:00Z", "path": "Spigot-Server-Patches/0594-Significantly-improve-performance-of-the-end-generat.patch", "diffHunk": "@@ -0,0 +1,74 @@\n+From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001\n+From: SuperCoder7979 <25208576+SuperCoder7979@users.noreply.github.com>\n+Date: Tue, 3 Nov 2020 23:48:05 -0600\n+Subject: [PATCH] Significantly improve performance of the end generation\n+\n+This patch implements a noise cache for the end which significantly reduces the computation time of generation. This results in about a 3x improvement.\n+\n+Original code by SuperCoder7979 and Gegy in Lithium, licensed under LGPL-3.0 (Source: https://github.com/jellysquid3/lithium-fabric)\n+\n+Co-authored-by: Gegy <gegy1000@gmail.com>\n+Co-authored-by: Dylan Xaldin <Puremin0rez515@gmail.com>\n+Co-authored-by: pop4959 <pop4959@gmail.com>\n+\n+diff --git a/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java b/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java\n+index 9c15cd303ccc2928be4e3e7080e74e8314d7e0f2..3604f815ab3df190e0582f279d3164af8b6f6880 100644\n+--- a/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java\n++++ b/src/main/java/net/minecraft/server/WorldChunkManagerTheEnd.java\n+@@ -3,6 +3,9 @@ package net.minecraft.server;\n+ import com.google.common.collect.ImmutableList;\n+ import com.mojang.serialization.Codec;\n+ import com.mojang.serialization.codecs.RecordCodecBuilder;\n++import it.unimi.dsi.fastutil.HashCommon; // Paper\n++import it.unimi.dsi.fastutil.objects.Reference2ObjectMap; // Paper\n++import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap; // Paper\n+ import java.util.List;\n+ \n+ public class WorldChunkManagerTheEnd extends WorldChunkManager {\n+@@ -22,6 +25,16 @@ public class WorldChunkManagerTheEnd extends WorldChunkManager {\n+     private final BiomeBase k;\n+     private final BiomeBase l;\n+     private final BiomeBase m;\n++    // Paper start\n++    private static final class NoiseCache {\n++        public long[] keys = new long[8192];\n++        public float[] values = new float[8192];\n++        public NoiseCache() {\n++            java.util.Arrays.fill(keys, Long.MIN_VALUE);\n++        }\n++    }\n++    private static final ThreadLocal<Reference2ObjectMap<NoiseGenerator3Handler, NoiseCache>> noiseCache = ThreadLocal.withInitial(Reference2ObjectOpenHashMap::new);", "originalCommit": "0f37e31cb86a3f150aff0cf37072ef80682ef5b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMyMjgzMw==", "url": "https://github.com/PaperMC/Paper/pull/4738#discussion_r524322833", "bodyText": "If we have an instance of WorldChunkManagerTheEnd per world, that should unload memory as a world unloads.\nThough thread safety SHOULD be provided by the world gen system under CURRENT design as a single world is only being generated by a single thread at a time.\nThe only case I can see this mattering is if this noise cache is shared across multiple worlds.", "author": "aikar", "createdAt": "2020-11-16T14:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ3MzI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3Mzk3NQ==", "url": "https://github.com/PaperMC/Paper/pull/4738#discussion_r524373975", "bodyText": "Our code used ThreadLocal as the backing lossy cache isn't thread safe. Even though the generation isn't done concurrently, we wanted to be extra sure we wouldn't mess anything up. While it's not the best solution, it gets the job done \ud83d\ude05", "author": "SuperCoder7979", "createdAt": "2020-11-16T15:54:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ3MzI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NTMzMg==", "url": "https://github.com/PaperMC/Paper/pull/4738#discussion_r524385332", "bodyText": "It doesn't hurt to be future proof. I was more responding to Cats concern over world loading.\nAs long as my understanding is correct that we have an instance per world and its not shared between worlds, there should be no concerns over memory leak and I think this current impl is good to go.", "author": "aikar", "createdAt": "2020-11-16T16:09:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ3MzI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM4NzM0Mw==", "url": "https://github.com/PaperMC/Paper/pull/4738#discussion_r524387343", "bodyText": "Yea, I didn't realize that the locals where stored on the Thread, so should be cleaned up when the thread is dead, so that's a non-issue, at this point, lgtm", "author": "electronicboy", "createdAt": "2020-11-16T16:12:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ3MzI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxNTQ3Nw==", "url": "https://github.com/PaperMC/Paper/pull/4738#discussion_r526515477", "bodyText": "I do think ThreadLocal is the best choice here to be as absolutely safe as possible while remaining performant.\nI was able to confirm after doing heap analysis that a memory leak does exist when unloading and loading an end dimension as the worker threads never die. I was able to easily resolve this issue by swapping the Reference2ObjectMap with a WeakHashMap so that the GC will cleanup no longer in use noise generator keys. Thankfully, it remains just as performant as the original PR description results.", "author": "Puremin0rez", "createdAt": "2020-11-19T00:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQ3MzI3OQ=="}], "type": "inlineReview"}, {"oid": "38ea285eed325a18e2344b15d1b543639e16a56f", "url": "https://github.com/PaperMC/Paper/commit/38ea285eed325a18e2344b15d1b543639e16a56f", "message": "Significantly improve performance of the end generation\n\nThis patch implements a noise cache for the end which significantly reduces the computation time of generation. This results in about a 3x improvement.\n\nOriginal code by SuperCoder7979 and Gegy in Lithium, licensed under LGPL-3.0 (Source: https://github.com/jellysquid3/lithium-fabric)\n\nCo-authored-by: Gegy <gegy1000@gmail.com>\nCo-authored-by: Dylan Xaldin <Puremin0rez515@gmail.com>\nCo-authored-by: pop4959 <pop4959@gmail.com>", "committedDate": "2020-11-18T22:23:10Z", "type": "forcePushed"}, {"oid": "87280857f75c87f7a3e0888b61bd790fccc09c11", "url": "https://github.com/PaperMC/Paper/commit/87280857f75c87f7a3e0888b61bd790fccc09c11", "message": "Significantly improve performance of the end generation\n\nThis patch implements a noise cache for the end which significantly reduces the computation time of generation. This results in about a 3x improvement.\n\nOriginal code by SuperCoder7979 and Gegy in Lithium, licensed under LGPL-3.0 (Source: https://github.com/jellysquid3/lithium-fabric)\n\nCo-authored-by: Gegy <gegy1000@gmail.com>\nCo-authored-by: Dylan Xaldin <Puremin0rez515@gmail.com>\nCo-authored-by: pop4959 <pop4959@gmail.com>", "committedDate": "2020-11-19T19:51:08Z", "type": "commit"}, {"oid": "87280857f75c87f7a3e0888b61bd790fccc09c11", "url": "https://github.com/PaperMC/Paper/commit/87280857f75c87f7a3e0888b61bd790fccc09c11", "message": "Significantly improve performance of the end generation\n\nThis patch implements a noise cache for the end which significantly reduces the computation time of generation. This results in about a 3x improvement.\n\nOriginal code by SuperCoder7979 and Gegy in Lithium, licensed under LGPL-3.0 (Source: https://github.com/jellysquid3/lithium-fabric)\n\nCo-authored-by: Gegy <gegy1000@gmail.com>\nCo-authored-by: Dylan Xaldin <Puremin0rez515@gmail.com>\nCo-authored-by: pop4959 <pop4959@gmail.com>", "committedDate": "2020-11-19T19:51:08Z", "type": "forcePushed"}]}