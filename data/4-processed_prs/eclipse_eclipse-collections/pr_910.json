{"pr_number": 910, "pr_title": "Closes #747 aggregateBy for MapIterable should have a variant to aggr\u2026", "pr_createdAt": "2020-06-08T19:49:30Z", "pr_url": "https://github.com/eclipse/eclipse-collections/pull/910", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3NDg1NA==", "url": "https://github.com/eclipse/eclipse-collections/pull/910#discussion_r447374854", "bodyText": "Missing a since tag", "author": "nikhilnanivadekar", "createdAt": "2020-06-30T02:44:05Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MapIterable.java", "diffHunk": "@@ -284,4 +285,23 @@\n     {\n         return Spliterators.spliterator(this.iterator(), (long) this.size(), 0);\n     }\n+\n+    /**\n+     * Applies an aggregate function over the map grouping results into a map based on the specific key and value groupBy functions.\n+     * Aggregate results are allowed to be immutable as they will be replaced in place in the map. A second function\n+     * specifies the initial \"zero\" aggregate value to work with (i.e. Integer.valueOf(0)).\n+     *\n+     */\n+    default <K1, V1, V2> MapIterable<K1, V2> aggregateBy(", "originalCommit": "3c12533426ca834f785e8bb5bd68ca7f821b7656", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3NTA0Ng==", "url": "https://github.com/eclipse/eclipse-collections/pull/910#discussion_r447375046", "bodyText": "In the Javadoc it would be good to show an example.", "author": "nikhilnanivadekar", "createdAt": "2020-06-30T02:44:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3NDg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3NTU0NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/910#discussion_r447375545", "bodyText": "this needs to be a default method, else you break API", "author": "nikhilnanivadekar", "createdAt": "2020-06-30T02:46:34Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/ImmutableOrderedMap.java", "diffHunk": "@@ -168,4 +168,11 @@\n \n     @Override\n     <KK, VV> ImmutableOrderedMap<KK, VV> aggregateBy(Function<? super V, ? extends KK> groupBy, Function0<? extends VV> zeroValueFactory, Function2<? super VV, ? super V, ? extends VV> nonMutatingAggregator);\n+\n+    @Override\n+    <K1, V1, V2> ImmutableOrderedMap<K1, V2> aggregateBy(", "originalCommit": "3c12533426ca834f785e8bb5bd68ca7f821b7656", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMzY3MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/910#discussion_r460233670", "bodyText": "you dont need (i.e. Integer.valueOf(0)) it is a bit confusing.", "author": "nikhilnanivadekar", "createdAt": "2020-07-24T18:58:31Z", "path": "eclipse-collections-api/src/main/java/org/eclipse/collections/api/map/MapIterable.java", "diffHunk": "@@ -284,4 +285,42 @@\n     {\n         return Spliterators.spliterator(this.iterator(), (long) this.size(), 0);\n     }\n+\n+    /**\n+     *\n+     * Applies an aggregate function over the map grouping results into a map based on the specific key and value groupBy functions.\n+     * Aggregate results are allowed to be immutable as they will be replaced in place in the map. A second function\n+     * specifies the initial \"zero\" aggregate value to work with (i.e. Integer.valueOf(0)).", "originalCommit": "0d027b36390cafae8e5dc37256a28117d6ada1da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1b6d327dffbd7d3a93950d01ef2d2e8cfce5bb43", "url": "https://github.com/eclipse/eclipse-collections/commit/1b6d327dffbd7d3a93950d01ef2d2e8cfce5bb43", "message": "Closes #747 aggregateBy for MapIterable should have a variant to aggregate on key and value\n\nSigned-off-by: Alxander Goldberg <alexander.goldberg@bnymellon.com>", "committedDate": "2020-07-24T19:16:43Z", "type": "commit"}]}