{"pr_number": 1017, "pr_title": "Implement intersect operation on primitive sets. Partially addresses issues #310. ", "pr_createdAt": "2020-10-21T03:36:12Z", "pr_url": "https://github.com/eclipse/eclipse-collections/pull/1017", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0NDAzMA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r509544030", "bodyText": "The retainAll implementation makes too many copies, which can be elided here. Inline this bit instead:\n        <name>Set retained = mutableSet.select(set::contains);", "author": "mohrezaei", "createdAt": "2020-10-21T18:17:14Z", "path": "eclipse-collections-code-generator/src/main/resources/api/set/mutablePrimitiveSet.stg", "diffHunk": "@@ -88,6 +88,29 @@ public interface Mutable<name>Set extends Mutable<name>Collection, <name>Set\n             return set.toSet().withAll(this);\n         }\n     }\n+\n+    /**\n+     * Returns the set of all objects that are members of both {@code this} and {@code set}. The intersection of\n+     * [1, 2, 3] and [2, 3, 4] is the set [2, 3].\n+     *\n+     * @since 11.0.\n+     */\n+    @Override\n+    default Mutable<name>Set intersect(<name>Set set)\n+    {\n+        if (this.size() \\< set.size())\n+        {\n+            Mutable<name>Set mutableSet = this.toSet();\n+            mutableSet.retainAll(set);", "originalCommit": "47fef08d83e92fda749c08516e8c9f1b6f57feb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzNzUxMg==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r509837512", "bodyText": "Updated this to use select instead of retainAll. Thank you for the suggestion!", "author": "prathasirisha", "createdAt": "2020-10-22T02:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0NDAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0NDE1Mw==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r509544153", "bodyText": "we're already a mutable set, no?", "author": "mohrezaei", "createdAt": "2020-10-21T18:17:29Z", "path": "eclipse-collections-code-generator/src/main/resources/api/set/mutablePrimitiveSet.stg", "diffHunk": "@@ -88,6 +88,29 @@ public interface Mutable<name>Set extends Mutable<name>Collection, <name>Set\n             return set.toSet().withAll(this);\n         }\n     }\n+\n+    /**\n+     * Returns the set of all objects that are members of both {@code this} and {@code set}. The intersection of\n+     * [1, 2, 3] and [2, 3, 4] is the set [2, 3].\n+     *\n+     * @since 11.0.\n+     */\n+    @Override\n+    default Mutable<name>Set intersect(<name>Set set)\n+    {\n+        if (this.size() \\< set.size())\n+        {\n+            Mutable<name>Set mutableSet = this.toSet();", "originalCommit": "47fef08d83e92fda749c08516e8c9f1b6f57feb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzNzcyMQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r509837721", "bodyText": "This is now simplified based on your suggestion to use to select.", "author": "prathasirisha", "createdAt": "2020-10-22T02:11:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0NDE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0NDUyOQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r509544529", "bodyText": "You won't need toSet() if you use select", "author": "mohrezaei", "createdAt": "2020-10-21T18:17:56Z", "path": "eclipse-collections-code-generator/src/main/resources/api/set/mutablePrimitiveSet.stg", "diffHunk": "@@ -88,6 +88,29 @@ public interface Mutable<name>Set extends Mutable<name>Collection, <name>Set\n             return set.toSet().withAll(this);\n         }\n     }\n+\n+    /**\n+     * Returns the set of all objects that are members of both {@code this} and {@code set}. The intersection of\n+     * [1, 2, 3] and [2, 3, 4] is the set [2, 3].\n+     *\n+     * @since 11.0.\n+     */\n+    @Override\n+    default Mutable<name>Set intersect(<name>Set set)\n+    {\n+        if (this.size() \\< set.size())\n+        {\n+            Mutable<name>Set mutableSet = this.toSet();\n+            mutableSet.retainAll(set);\n+            return mutableSet;\n+        }\n+        else\n+        {\n+            Mutable<name>Set mutableSet = set.toSet();", "originalCommit": "47fef08d83e92fda749c08516e8c9f1b6f57feb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzNzc4MQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r509837781", "bodyText": "Done.", "author": "prathasirisha", "createdAt": "2020-10-22T02:11:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0NDUyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0NTI2MQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r509545261", "bodyText": "use intersect instead of retainAll (and below)", "author": "mohrezaei", "createdAt": "2020-10-21T18:18:47Z", "path": "eclipse-collections-code-generator/src/main/resources/api/set/immutablePrimitiveSet.stg", "diffHunk": "@@ -59,6 +59,29 @@ public interface Immutable<name>Set extends Immutable<name>Collection, <name>Set\n         }\n     }\n \n+    /**\n+     * Returns the set of all objects that are members of both {@code this} and {@code set}. The intersection of\n+     * [1, 2, 3] and [2, 3, 4] is the set [2, 3].\n+     *\n+     * @since 11.0.\n+     */\n+    @Override\n+    default Immutable<name>Set intersect(<name>Set set)\n+    {\n+        if (this.size() \\< set.size())\n+        {\n+            Mutable<name>Set mutableSet = this.toSet();\n+            mutableSet.retainAll(set);", "originalCommit": "47fef08d83e92fda749c08516e8c9f1b6f57feb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU4Mzk5NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r509583995", "bodyText": "Won't this create two copies of the set then?\nActually, I think we can use the same approach as above... use select directly which will return an ImmutableSet.", "author": "donraab", "createdAt": "2020-10-21T18:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0NTI2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzNzg2MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r509837860", "bodyText": "Used select here as well.", "author": "prathasirisha", "createdAt": "2020-10-22T02:11:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU0NTI2MQ=="}], "type": "inlineReview"}, {"oid": "73ac285ab80f9b6cee06e12bb1a009df0c509ad4", "url": "https://github.com/eclipse/eclipse-collections/commit/73ac285ab80f9b6cee06e12bb1a009df0c509ad4", "message": "Implement intersect operation on primitive sets. Partially addresses issue #310.\n\nSigned-off-by: Sirisha Pratha <sirisha.pratha@bnymellon.com>", "committedDate": "2020-10-22T01:37:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzODg1OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r509838858", "bodyText": "why asLazy()? You should avoid toSet() by using the two argument select with a new set.", "author": "mohrezaei", "createdAt": "2020-10-22T02:16:06Z", "path": "eclipse-collections-code-generator/src/main/resources/api/set/mutablePrimitiveSet.stg", "diffHunk": "@@ -88,6 +88,25 @@ public interface Mutable<name>Set extends Mutable<name>Collection, <name>Set\n             return set.toSet().withAll(this);\n         }\n     }\n+\n+    /**\n+     * Returns the set of all objects that are members of both {@code this} and {@code set}. The intersection of\n+     * [1, 2, 3] and [2, 3, 4] is the set [2, 3].\n+     *\n+     * @since 11.0.\n+     */\n+    @Override\n+    default Mutable<name>Set intersect(<name>Set set)\n+    {\n+        if (this.size() \\< set.size())\n+        {\n+            return this.select(set::contains);\n+        }\n+        else\n+        {\n+            return set.asLazy().select(this::contains).toSet();", "originalCommit": "73ac285ab80f9b6cee06e12bb1a009df0c509ad4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0NzUyMw==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r509847523", "bodyText": "Started out with the two argument approach like so -\nreturn set.select(this::contains, this.newEmpty());\nSince the same won't work on the immutable side, I leaned towards symmetry. I will update the implementation on the mutable side to use select with a target empty collection and leave the lazy implementation on the immutable side. Let me know if that is good.", "author": "prathasirisha", "createdAt": "2020-10-22T02:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzODg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg0OTU5MA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r509849590", "bodyText": "why doesn't it work for the immutable?\n set.select(this::contains, new <name>HashSet()).toImmutable()", "author": "mohrezaei", "createdAt": "2020-10-22T02:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzODg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg1MDE2NA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r509850164", "bodyText": "It's in a default method in the interface, so can't reference the <name>HashSet. This would have to be implemented in the concrete class. We haven't ported the factory classes to the API side for primitive collections as @motlin did for the object side. So we can't yet write:\nset.select(this::contains, <name>Sets.mutable.empty()).toImmutable()", "author": "donraab", "createdAt": "2020-10-22T02:57:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzODg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg1NTc3Mg==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r509855772", "bodyText": "It\u2019s a major version change, we can add it on implementations. I would rather do that as select() and toSet() on Immutable sides is doubly expensive.", "author": "nikhilnanivadekar", "createdAt": "2020-10-22T03:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzODg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg1NjQzOQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r509856439", "bodyText": "Why is it doubly expensive? It's using lazy. It has an extra object creation for the primitive SelectIterable but we're creating a new primitive set anyway.", "author": "donraab", "createdAt": "2020-10-22T03:21:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzODg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM0Mzg5NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r510343895", "bodyText": "The sequence this.asLazy().select(that::contains).toSet().toImmutable() on an immutable set first constructs some lazy stuff (cheap), then does the following:\n\ncall count on this with the predicate being that. That's one loop through the whole thing.\nallocate an array of that size\nconstruct a IfIntProcedure object using select and that::contains as the predicate\ncall this.each(ifIntProc). This loops through the whole thing again.\nfinally, the filled array is passed to the set constructor, where the result is allocated then filled by looping through the array.\nthe contents of this is now copied to a second array.\nthe second array is used to construct another set.\nthis final set is wrapped as an immutable set.\n\nso we compute the intersection twice and construct 3 temporary and 1 final place to put them (all the while recomputing hashes or copying stuff around).\nIt would take quite some effort to optimize that. Roughly, this would entail:\n\nstop using arrays -- use lists\ntoSet and toImmutable should become lazy. this probably breaks everything, so the only realistic solution might be to have a toImmutableSet\n\nPSA: don't use asLazy especially with immutables if memory, performance or sanity have any relevance to the code.", "author": "mohrezaei", "createdAt": "2020-10-22T17:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzODg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ3OTk1MQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r510479951", "bodyText": "Wow, this is a great bit of research and discovery @mohrezaei! Thank you. It looks like @nikhilnanivadekar you were correct this is doubly expensive. It's clear we should just override intersect in the concrete classes for immutable for now.\nWe have a bunch of positive work we can do here as a result in separate PRs. I have been toying with the idea of adding toImmutableSet and friends. I might explore this to see some of the possibilities.", "author": "donraab", "createdAt": "2020-10-22T21:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzODg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUyNzQ0Mw==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r510527443", "bodyText": "Thank you @mohrezaei for the detailed explanation, will bear in my mind some of the points you highlighted with asLazy usages.\n@mohrezaei, @nikhilnanivadekar , @donraab    -\nUpon revisiting the solution, noticed that toImmutable() is available for me to use in combination with select on the immutable side Like so -\n    `return set.select(this::contains).toImmutable();`\n\nHoping this is closest to what we want to achieve in terms of implementation without compromising on optimization. Please let me know if this works!\nThank you for reviewing the code so far.", "author": "prathasirisha", "createdAt": "2020-10-23T00:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzODg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUyNzc4OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r510527788", "bodyText": "This looks good to me. The call toImmutable() will be a no-op if the resulting set is already an Immutable<name>Set.", "author": "donraab", "createdAt": "2020-10-23T00:11:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzODg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzNDY0Mw==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r510534643", "bodyText": "@donraab It's not already immutable. I think we should really fix toImmutable() on primitive sets.\n        IntHashSet mutableSet = IntHashSet.newSetWith(this.toArray());\nthat line is the worst offender.  If we properly use the copyOnWrite flag in the set, we can even avoid all copying, which will make this code as efficient as possible:\n    @Override\n    public ImmutableIntSet toImmutable()\n    {\n        if (this.size() == 0)\n        {\n            return IntSets.immutable.with();\n        }\n        if (this.size() == 1)\n        {\n            return IntSets.immutable.with(this.intIterator().next());\n        }\n        IntHashSet mutableSet;\n        if (this.table.length == smallestPowerOfTwoGreaterThan(this.size() << 1)) // table is not too big\n        {\n            mutableSet = this;\n            this.copyOnWrite = true;\n        }\n        else\n        {\n            mutableSet = new IntHashSet(this.size()) ;\n            mutableSet.addAll(this);\n        }\n        return new ImmutableIntHashSet(mutableSet.table, mutableSet.occupiedWithData, mutableSet.zeroToThirtyOne, mutableSet.zeroToThirtyOneOccupied);\n    }", "author": "mohrezaei", "createdAt": "2020-10-23T00:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgzODg1OA=="}], "type": "inlineReview"}, {"oid": "b3a2d11a34688cff864e72579a5b363dd2ea7d25", "url": "https://github.com/eclipse/eclipse-collections/commit/b3a2d11a34688cff864e72579a5b363dd2ea7d25", "message": "Implement intersect operation on primitive sets. Partially addresses issue #310.\n\nSigned-off-by: Sirisha Pratha <sirisha.pratha@bnymellon.com>", "committedDate": "2020-10-22T03:22:17Z", "type": "forcePushed"}, {"oid": "6bcce1a4b2c48a116f74b2da3dbcfe049076d634", "url": "https://github.com/eclipse/eclipse-collections/commit/6bcce1a4b2c48a116f74b2da3dbcfe049076d634", "message": "Implement intersect operation on primitive sets. Partially addresses issue #310.\n\nSigned-off-by: Sirisha Pratha <sirisha.pratha@bnymellon.com>", "committedDate": "2020-10-23T02:01:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NDEzMQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r510554131", "bodyText": "should this have an override in immutableSet.stg for the return type?", "author": "mohrezaei", "createdAt": "2020-10-23T02:04:45Z", "path": "eclipse-collections-code-generator/src/main/resources/api/set/primitiveSet.stg", "diffHunk": "@@ -44,6 +44,14 @@ public interface <name>Set extends <name>Iterable\n      */\n     <name>Set union(<name>Set set);\n \n+    /**\n+     * Returns the set of all objects that are members of both {@code this} and {@code set}. The intersection of\n+     * [1, 2, 3] and [2, 3, 4] is the set [2, 3].\n+     *\n+     * @since 11.0.\n+     */\n+    <name>Set intersect(<name>Set set);", "originalCommit": "6bcce1a4b2c48a116f74b2da3dbcfe049076d634", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU2MDI1Mg==", "url": "https://github.com/eclipse/eclipse-collections/pull/1017#discussion_r510560252", "bodyText": "Do you mean immutablePrimitiveSet.stg? If yes, it is overridden there.", "author": "prathasirisha", "createdAt": "2020-10-23T02:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NDEzMQ=="}], "type": "inlineReview"}, {"oid": "c2c6c7f50b13d5bc2792d9fee736bea988d46d81", "url": "https://github.com/eclipse/eclipse-collections/commit/c2c6c7f50b13d5bc2792d9fee736bea988d46d81", "message": "Implement intersect operation on primitive sets. Partially addresses issue #310.\n\nSigned-off-by: Sirisha Pratha <sirisha.pratha@bnymellon.com>", "committedDate": "2020-10-23T02:40:07Z", "type": "forcePushed"}, {"oid": "c45c67eb921176dbbc904ae8a6d81fb90886c90a", "url": "https://github.com/eclipse/eclipse-collections/commit/c45c67eb921176dbbc904ae8a6d81fb90886c90a", "message": "Implement intersect operation on primitive sets. Partially addresses issue #310.\n\nSigned-off-by: Sirisha Pratha <sirisha.pratha@bnymellon.com>", "committedDate": "2020-10-23T02:42:55Z", "type": "commit"}, {"oid": "c45c67eb921176dbbc904ae8a6d81fb90886c90a", "url": "https://github.com/eclipse/eclipse-collections/commit/c45c67eb921176dbbc904ae8a6d81fb90886c90a", "message": "Implement intersect operation on primitive sets. Partially addresses issue #310.\n\nSigned-off-by: Sirisha Pratha <sirisha.pratha@bnymellon.com>", "committedDate": "2020-10-23T02:42:55Z", "type": "forcePushed"}]}