{"pr_number": 997, "pr_title": "Documentation on serializing EC with jackson", "pr_createdAt": "2020-09-09T21:18:08Z", "pr_url": "https://github.com/eclipse/eclipse-collections/pull/997", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzMDk5NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/997#discussion_r485930995", "bodyText": "Just drop the first paragraph.", "author": "donraab", "createdAt": "2020-09-09T21:25:35Z", "path": "docs/jackson.md", "diffHunk": "@@ -0,0 +1,190 @@\n+# Serializing Eclipse Collections with Jackson\n+\n+[Eclipse Collections](https://www.eclipse.org/collections/) is a framework that aims to complement the collection library we all know in `java.util`. It offers immutable collections, primitive collections and a handy API to make actually using these types a pleasure.", "originalCommit": "8a9e4b122eb195a5b763ea02101d373d77c7c08f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzMTI5NQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/997#discussion_r485931295", "bodyText": "Include a Copyright Header similar the ref guide.", "author": "donraab", "createdAt": "2020-09-09T21:26:18Z", "path": "docs/jackson.md", "diffHunk": "@@ -0,0 +1,190 @@\n+# Serializing Eclipse Collections with Jackson", "originalCommit": "8a9e4b122eb195a5b763ea02101d373d77c7c08f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzMTg4Nw==", "url": "https://github.com/eclipse/eclipse-collections/pull/997#discussion_r485931887", "bodyText": "Update version to 10.4.0", "author": "donraab", "createdAt": "2020-09-09T21:27:42Z", "path": "docs/jackson.md", "diffHunk": "@@ -0,0 +1,190 @@\n+# Serializing Eclipse Collections with Jackson\n+\n+[Eclipse Collections](https://www.eclipse.org/collections/) is a framework that aims to complement the collection library we all know in `java.util`. It offers immutable collections, primitive collections and a handy API to make actually using these types a pleasure.\n+\n+Unfortunately, with new collection types comes incompatibility with normal serialization frameworks. [Jackson](https://github.com/FasterXML/jackson), arguably the most popular JSON serialization framework for Java, is unable to deserialize Eclipse Collections types out-of-the-box. For this purpose, there is now a [Jackson module](https://github.com/FasterXML/jackson-datatypes-collections/) supporting most Eclipse Collections types directly (including primitive collections).\n+\n+In this article we will cover the basics of Eclipse Collections, Jackson and that module.\n+\n+## Eclipse Collections\n+\n+As explained above, Eclipse Collections replaces many of the familiar container types from the standard library with new and improved versions. For this article, we will look at three variants of the `List` type:\n+\n+```java\n+import org.eclipse.collections.api.list.ImmutableList;\n+import org.eclipse.collections.api.list.MutableList;\n+import org.eclipse.collections.api.list.primitive.IntList;\n+import org.eclipse.collections.impl.factory.Lists;\n+import org.eclipse.collections.impl.factory.primitive.IntLists;\n+\n+MutableList<String> mutable = Lists.mutable.of(\"foo\", \"bar\");\n+ImmutableList<String> immutable = Lists.immutable.of(\"foo\", \"bar\");\n+IntList intList = IntLists.immutable.of(1, 2, 3);\n+```\n+\n+`MutableList` behaves a lot like `java.util.List`, but offers additional stream-like API we will not go into detail about here. Every `MutableList` also implements `java.util.List`, so you can pass any `MutableList` to APIs that still use the standard Java collections.\n+\n+`ImmutableList` does not extend `java.util.List` and - as its name suggests - does not offer any methods for mutation such as `add` or `remove`. Instead you can create copies of these collections with elements added or removed. If you wish to use these collections with traditional `java.util.List` APIs you can use the `castToList()` method on `ImmutableList`, which will return an instance of `java.util.List` that will throw exceptions on mutation operations like `remove`.\n+\n+`IntList` is a special type of list that offers lightweight APIs for working with primitives. Similar collection types exist for all other primitives. The problem with \"normal\" collections and primitives is that using a `List<Integer>` or similar type will always carry additional overhead both in terms of more memory use and more CPU time due to indirection and additional garbage collection load. Because of this, for performance-critical operations, a dedicated `IntList` type is superior.\n+\n+Eclipse Collections is hardly the first library to provide primitive collections but combined with its handy API it makes for arguably the best library of its kind. Using Eclipse primitive collections you can have the performance of primitive arrays with the ease-of-use of the Eclipse Collections API.\n+\n+For all the primitive collection types there also exist mutable and immutable versions (`MutableIntList`, `ImmutableIntList`). They behave much the same as their object-based counterparts so we will not cover them here.\n+\n+Eclipse Collections is split into two parts: The API and the implementation of that API. Since the implementation depends on the API, we will only have to add that as a dependency to our Maven project:\n+\n+```xml\n+<dependency>\n+    <groupId>org.eclipse.collections</groupId>\n+    <artifactId>eclipse-collections</artifactId>\n+    <version>9.2.0</version>", "originalCommit": "8a9e4b122eb195a5b763ea02101d373d77c7c08f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzMTk3Mg==", "url": "https://github.com/eclipse/eclipse-collections/pull/997#discussion_r485931972", "bodyText": "Update version to 10.4.0", "author": "donraab", "createdAt": "2020-09-09T21:27:49Z", "path": "docs/jackson.md", "diffHunk": "@@ -0,0 +1,190 @@\n+# Serializing Eclipse Collections with Jackson\n+\n+[Eclipse Collections](https://www.eclipse.org/collections/) is a framework that aims to complement the collection library we all know in `java.util`. It offers immutable collections, primitive collections and a handy API to make actually using these types a pleasure.\n+\n+Unfortunately, with new collection types comes incompatibility with normal serialization frameworks. [Jackson](https://github.com/FasterXML/jackson), arguably the most popular JSON serialization framework for Java, is unable to deserialize Eclipse Collections types out-of-the-box. For this purpose, there is now a [Jackson module](https://github.com/FasterXML/jackson-datatypes-collections/) supporting most Eclipse Collections types directly (including primitive collections).\n+\n+In this article we will cover the basics of Eclipse Collections, Jackson and that module.\n+\n+## Eclipse Collections\n+\n+As explained above, Eclipse Collections replaces many of the familiar container types from the standard library with new and improved versions. For this article, we will look at three variants of the `List` type:\n+\n+```java\n+import org.eclipse.collections.api.list.ImmutableList;\n+import org.eclipse.collections.api.list.MutableList;\n+import org.eclipse.collections.api.list.primitive.IntList;\n+import org.eclipse.collections.impl.factory.Lists;\n+import org.eclipse.collections.impl.factory.primitive.IntLists;\n+\n+MutableList<String> mutable = Lists.mutable.of(\"foo\", \"bar\");\n+ImmutableList<String> immutable = Lists.immutable.of(\"foo\", \"bar\");\n+IntList intList = IntLists.immutable.of(1, 2, 3);\n+```\n+\n+`MutableList` behaves a lot like `java.util.List`, but offers additional stream-like API we will not go into detail about here. Every `MutableList` also implements `java.util.List`, so you can pass any `MutableList` to APIs that still use the standard Java collections.\n+\n+`ImmutableList` does not extend `java.util.List` and - as its name suggests - does not offer any methods for mutation such as `add` or `remove`. Instead you can create copies of these collections with elements added or removed. If you wish to use these collections with traditional `java.util.List` APIs you can use the `castToList()` method on `ImmutableList`, which will return an instance of `java.util.List` that will throw exceptions on mutation operations like `remove`.\n+\n+`IntList` is a special type of list that offers lightweight APIs for working with primitives. Similar collection types exist for all other primitives. The problem with \"normal\" collections and primitives is that using a `List<Integer>` or similar type will always carry additional overhead both in terms of more memory use and more CPU time due to indirection and additional garbage collection load. Because of this, for performance-critical operations, a dedicated `IntList` type is superior.\n+\n+Eclipse Collections is hardly the first library to provide primitive collections but combined with its handy API it makes for arguably the best library of its kind. Using Eclipse primitive collections you can have the performance of primitive arrays with the ease-of-use of the Eclipse Collections API.\n+\n+For all the primitive collection types there also exist mutable and immutable versions (`MutableIntList`, `ImmutableIntList`). They behave much the same as their object-based counterparts so we will not cover them here.\n+\n+Eclipse Collections is split into two parts: The API and the implementation of that API. Since the implementation depends on the API, we will only have to add that as a dependency to our Maven project:\n+\n+```xml\n+<dependency>\n+    <groupId>org.eclipse.collections</groupId>\n+    <artifactId>eclipse-collections</artifactId>\n+    <version>9.2.0</version>\n+</dependency>\n+```\n+\n+Or with Gradle:\n+\n+```\n+compile 'org.eclipse.collections:eclipse-collections:9.2.0'", "originalCommit": "8a9e4b122eb195a5b763ea02101d373d77c7c08f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzMjM3NA==", "url": "https://github.com/eclipse/eclipse-collections/pull/997#discussion_r485932374", "bodyText": "I think you can just remove this paragraph.", "author": "donraab", "createdAt": "2020-09-09T21:28:47Z", "path": "docs/jackson.md", "diffHunk": "@@ -0,0 +1,190 @@\n+# Serializing Eclipse Collections with Jackson\n+\n+[Eclipse Collections](https://www.eclipse.org/collections/) is a framework that aims to complement the collection library we all know in `java.util`. It offers immutable collections, primitive collections and a handy API to make actually using these types a pleasure.\n+\n+Unfortunately, with new collection types comes incompatibility with normal serialization frameworks. [Jackson](https://github.com/FasterXML/jackson), arguably the most popular JSON serialization framework for Java, is unable to deserialize Eclipse Collections types out-of-the-box. For this purpose, there is now a [Jackson module](https://github.com/FasterXML/jackson-datatypes-collections/) supporting most Eclipse Collections types directly (including primitive collections).\n+\n+In this article we will cover the basics of Eclipse Collections, Jackson and that module.\n+\n+## Eclipse Collections\n+\n+As explained above, Eclipse Collections replaces many of the familiar container types from the standard library with new and improved versions. For this article, we will look at three variants of the `List` type:\n+\n+```java\n+import org.eclipse.collections.api.list.ImmutableList;\n+import org.eclipse.collections.api.list.MutableList;\n+import org.eclipse.collections.api.list.primitive.IntList;\n+import org.eclipse.collections.impl.factory.Lists;\n+import org.eclipse.collections.impl.factory.primitive.IntLists;\n+\n+MutableList<String> mutable = Lists.mutable.of(\"foo\", \"bar\");\n+ImmutableList<String> immutable = Lists.immutable.of(\"foo\", \"bar\");\n+IntList intList = IntLists.immutable.of(1, 2, 3);\n+```\n+\n+`MutableList` behaves a lot like `java.util.List`, but offers additional stream-like API we will not go into detail about here. Every `MutableList` also implements `java.util.List`, so you can pass any `MutableList` to APIs that still use the standard Java collections.\n+\n+`ImmutableList` does not extend `java.util.List` and - as its name suggests - does not offer any methods for mutation such as `add` or `remove`. Instead you can create copies of these collections with elements added or removed. If you wish to use these collections with traditional `java.util.List` APIs you can use the `castToList()` method on `ImmutableList`, which will return an instance of `java.util.List` that will throw exceptions on mutation operations like `remove`.\n+\n+`IntList` is a special type of list that offers lightweight APIs for working with primitives. Similar collection types exist for all other primitives. The problem with \"normal\" collections and primitives is that using a `List<Integer>` or similar type will always carry additional overhead both in terms of more memory use and more CPU time due to indirection and additional garbage collection load. Because of this, for performance-critical operations, a dedicated `IntList` type is superior.\n+\n+Eclipse Collections is hardly the first library to provide primitive collections but combined with its handy API it makes for arguably the best library of its kind. Using Eclipse primitive collections you can have the performance of primitive arrays with the ease-of-use of the Eclipse Collections API.\n+\n+For all the primitive collection types there also exist mutable and immutable versions (`MutableIntList`, `ImmutableIntList`). They behave much the same as their object-based counterparts so we will not cover them here.\n+\n+Eclipse Collections is split into two parts: The API and the implementation of that API. Since the implementation depends on the API, we will only have to add that as a dependency to our Maven project:\n+\n+```xml\n+<dependency>\n+    <groupId>org.eclipse.collections</groupId>\n+    <artifactId>eclipse-collections</artifactId>\n+    <version>9.2.0</version>\n+</dependency>\n+```\n+\n+Or with Gradle:\n+\n+```\n+compile 'org.eclipse.collections:eclipse-collections:9.2.0'\n+```\n+\n+9.2.0 is the current Eclipse Collections version at time of writing. Check out [the maven repo](https://search.maven.org/search?q=g:org.eclipse.collections%20AND%20a:eclipse-collections&core=gav) for newer versions.", "originalCommit": "8a9e4b122eb195a5b763ea02101d373d77c7c08f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzMjU4OA==", "url": "https://github.com/eclipse/eclipse-collections/pull/997#discussion_r485932588", "bodyText": "Update to current version.", "author": "donraab", "createdAt": "2020-09-09T21:29:16Z", "path": "docs/jackson.md", "diffHunk": "@@ -0,0 +1,190 @@\n+# Serializing Eclipse Collections with Jackson\n+\n+[Eclipse Collections](https://www.eclipse.org/collections/) is a framework that aims to complement the collection library we all know in `java.util`. It offers immutable collections, primitive collections and a handy API to make actually using these types a pleasure.\n+\n+Unfortunately, with new collection types comes incompatibility with normal serialization frameworks. [Jackson](https://github.com/FasterXML/jackson), arguably the most popular JSON serialization framework for Java, is unable to deserialize Eclipse Collections types out-of-the-box. For this purpose, there is now a [Jackson module](https://github.com/FasterXML/jackson-datatypes-collections/) supporting most Eclipse Collections types directly (including primitive collections).\n+\n+In this article we will cover the basics of Eclipse Collections, Jackson and that module.\n+\n+## Eclipse Collections\n+\n+As explained above, Eclipse Collections replaces many of the familiar container types from the standard library with new and improved versions. For this article, we will look at three variants of the `List` type:\n+\n+```java\n+import org.eclipse.collections.api.list.ImmutableList;\n+import org.eclipse.collections.api.list.MutableList;\n+import org.eclipse.collections.api.list.primitive.IntList;\n+import org.eclipse.collections.impl.factory.Lists;\n+import org.eclipse.collections.impl.factory.primitive.IntLists;\n+\n+MutableList<String> mutable = Lists.mutable.of(\"foo\", \"bar\");\n+ImmutableList<String> immutable = Lists.immutable.of(\"foo\", \"bar\");\n+IntList intList = IntLists.immutable.of(1, 2, 3);\n+```\n+\n+`MutableList` behaves a lot like `java.util.List`, but offers additional stream-like API we will not go into detail about here. Every `MutableList` also implements `java.util.List`, so you can pass any `MutableList` to APIs that still use the standard Java collections.\n+\n+`ImmutableList` does not extend `java.util.List` and - as its name suggests - does not offer any methods for mutation such as `add` or `remove`. Instead you can create copies of these collections with elements added or removed. If you wish to use these collections with traditional `java.util.List` APIs you can use the `castToList()` method on `ImmutableList`, which will return an instance of `java.util.List` that will throw exceptions on mutation operations like `remove`.\n+\n+`IntList` is a special type of list that offers lightweight APIs for working with primitives. Similar collection types exist for all other primitives. The problem with \"normal\" collections and primitives is that using a `List<Integer>` or similar type will always carry additional overhead both in terms of more memory use and more CPU time due to indirection and additional garbage collection load. Because of this, for performance-critical operations, a dedicated `IntList` type is superior.\n+\n+Eclipse Collections is hardly the first library to provide primitive collections but combined with its handy API it makes for arguably the best library of its kind. Using Eclipse primitive collections you can have the performance of primitive arrays with the ease-of-use of the Eclipse Collections API.\n+\n+For all the primitive collection types there also exist mutable and immutable versions (`MutableIntList`, `ImmutableIntList`). They behave much the same as their object-based counterparts so we will not cover them here.\n+\n+Eclipse Collections is split into two parts: The API and the implementation of that API. Since the implementation depends on the API, we will only have to add that as a dependency to our Maven project:\n+\n+```xml\n+<dependency>\n+    <groupId>org.eclipse.collections</groupId>\n+    <artifactId>eclipse-collections</artifactId>\n+    <version>9.2.0</version>\n+</dependency>\n+```\n+\n+Or with Gradle:\n+\n+```\n+compile 'org.eclipse.collections:eclipse-collections:9.2.0'\n+```\n+\n+9.2.0 is the current Eclipse Collections version at time of writing. Check out [the maven repo](https://search.maven.org/search?q=g:org.eclipse.collections%20AND%20a:eclipse-collections&core=gav) for newer versions.\n+\n+## Jackson\n+\n+Jackson is a library for transforming your data structures from and to JSON and other serialized forms. According to [mvnrepository.com](https://mvnrepository.com/popular) it is the most popular framework for this purpose.\n+\n+Jackson's architecture consists of three parts: A *core* that is responsible for writing streams of data (typically JSON), *databind* which is responsible for the basic object serialization API, and various Jackson modules that each handle serialization of some special types. Adding Jackson to our project is simple:\n+\n+```xml\n+<dependency>\n+  <groupId>com.fasterxml.jackson.core</groupId>\n+  <artifactId>jackson-databind</artifactId>\n+  <version>2.9.8</version>", "originalCommit": "8a9e4b122eb195a5b763ea02101d373d77c7c08f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzMjYyNA==", "url": "https://github.com/eclipse/eclipse-collections/pull/997#discussion_r485932624", "bodyText": "Update to current version.", "author": "donraab", "createdAt": "2020-09-09T21:29:20Z", "path": "docs/jackson.md", "diffHunk": "@@ -0,0 +1,190 @@\n+# Serializing Eclipse Collections with Jackson\n+\n+[Eclipse Collections](https://www.eclipse.org/collections/) is a framework that aims to complement the collection library we all know in `java.util`. It offers immutable collections, primitive collections and a handy API to make actually using these types a pleasure.\n+\n+Unfortunately, with new collection types comes incompatibility with normal serialization frameworks. [Jackson](https://github.com/FasterXML/jackson), arguably the most popular JSON serialization framework for Java, is unable to deserialize Eclipse Collections types out-of-the-box. For this purpose, there is now a [Jackson module](https://github.com/FasterXML/jackson-datatypes-collections/) supporting most Eclipse Collections types directly (including primitive collections).\n+\n+In this article we will cover the basics of Eclipse Collections, Jackson and that module.\n+\n+## Eclipse Collections\n+\n+As explained above, Eclipse Collections replaces many of the familiar container types from the standard library with new and improved versions. For this article, we will look at three variants of the `List` type:\n+\n+```java\n+import org.eclipse.collections.api.list.ImmutableList;\n+import org.eclipse.collections.api.list.MutableList;\n+import org.eclipse.collections.api.list.primitive.IntList;\n+import org.eclipse.collections.impl.factory.Lists;\n+import org.eclipse.collections.impl.factory.primitive.IntLists;\n+\n+MutableList<String> mutable = Lists.mutable.of(\"foo\", \"bar\");\n+ImmutableList<String> immutable = Lists.immutable.of(\"foo\", \"bar\");\n+IntList intList = IntLists.immutable.of(1, 2, 3);\n+```\n+\n+`MutableList` behaves a lot like `java.util.List`, but offers additional stream-like API we will not go into detail about here. Every `MutableList` also implements `java.util.List`, so you can pass any `MutableList` to APIs that still use the standard Java collections.\n+\n+`ImmutableList` does not extend `java.util.List` and - as its name suggests - does not offer any methods for mutation such as `add` or `remove`. Instead you can create copies of these collections with elements added or removed. If you wish to use these collections with traditional `java.util.List` APIs you can use the `castToList()` method on `ImmutableList`, which will return an instance of `java.util.List` that will throw exceptions on mutation operations like `remove`.\n+\n+`IntList` is a special type of list that offers lightweight APIs for working with primitives. Similar collection types exist for all other primitives. The problem with \"normal\" collections and primitives is that using a `List<Integer>` or similar type will always carry additional overhead both in terms of more memory use and more CPU time due to indirection and additional garbage collection load. Because of this, for performance-critical operations, a dedicated `IntList` type is superior.\n+\n+Eclipse Collections is hardly the first library to provide primitive collections but combined with its handy API it makes for arguably the best library of its kind. Using Eclipse primitive collections you can have the performance of primitive arrays with the ease-of-use of the Eclipse Collections API.\n+\n+For all the primitive collection types there also exist mutable and immutable versions (`MutableIntList`, `ImmutableIntList`). They behave much the same as their object-based counterparts so we will not cover them here.\n+\n+Eclipse Collections is split into two parts: The API and the implementation of that API. Since the implementation depends on the API, we will only have to add that as a dependency to our Maven project:\n+\n+```xml\n+<dependency>\n+    <groupId>org.eclipse.collections</groupId>\n+    <artifactId>eclipse-collections</artifactId>\n+    <version>9.2.0</version>\n+</dependency>\n+```\n+\n+Or with Gradle:\n+\n+```\n+compile 'org.eclipse.collections:eclipse-collections:9.2.0'\n+```\n+\n+9.2.0 is the current Eclipse Collections version at time of writing. Check out [the maven repo](https://search.maven.org/search?q=g:org.eclipse.collections%20AND%20a:eclipse-collections&core=gav) for newer versions.\n+\n+## Jackson\n+\n+Jackson is a library for transforming your data structures from and to JSON and other serialized forms. According to [mvnrepository.com](https://mvnrepository.com/popular) it is the most popular framework for this purpose.\n+\n+Jackson's architecture consists of three parts: A *core* that is responsible for writing streams of data (typically JSON), *databind* which is responsible for the basic object serialization API, and various Jackson modules that each handle serialization of some special types. Adding Jackson to our project is simple:\n+\n+```xml\n+<dependency>\n+  <groupId>com.fasterxml.jackson.core</groupId>\n+  <artifactId>jackson-databind</artifactId>\n+  <version>2.9.8</version>\n+</dependency>\n+<dependency>\n+  <groupId>com.fasterxml.jackson.datatype</groupId>\n+  <artifactId>jackson-datatype-eclipse-collections</artifactId>\n+  <version>2.9.8</version>", "originalCommit": "8a9e4b122eb195a5b763ea02101d373d77c7c08f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzMjcxMQ==", "url": "https://github.com/eclipse/eclipse-collections/pull/997#discussion_r485932711", "bodyText": "Update to current versions.", "author": "donraab", "createdAt": "2020-09-09T21:29:33Z", "path": "docs/jackson.md", "diffHunk": "@@ -0,0 +1,190 @@\n+# Serializing Eclipse Collections with Jackson\n+\n+[Eclipse Collections](https://www.eclipse.org/collections/) is a framework that aims to complement the collection library we all know in `java.util`. It offers immutable collections, primitive collections and a handy API to make actually using these types a pleasure.\n+\n+Unfortunately, with new collection types comes incompatibility with normal serialization frameworks. [Jackson](https://github.com/FasterXML/jackson), arguably the most popular JSON serialization framework for Java, is unable to deserialize Eclipse Collections types out-of-the-box. For this purpose, there is now a [Jackson module](https://github.com/FasterXML/jackson-datatypes-collections/) supporting most Eclipse Collections types directly (including primitive collections).\n+\n+In this article we will cover the basics of Eclipse Collections, Jackson and that module.\n+\n+## Eclipse Collections\n+\n+As explained above, Eclipse Collections replaces many of the familiar container types from the standard library with new and improved versions. For this article, we will look at three variants of the `List` type:\n+\n+```java\n+import org.eclipse.collections.api.list.ImmutableList;\n+import org.eclipse.collections.api.list.MutableList;\n+import org.eclipse.collections.api.list.primitive.IntList;\n+import org.eclipse.collections.impl.factory.Lists;\n+import org.eclipse.collections.impl.factory.primitive.IntLists;\n+\n+MutableList<String> mutable = Lists.mutable.of(\"foo\", \"bar\");\n+ImmutableList<String> immutable = Lists.immutable.of(\"foo\", \"bar\");\n+IntList intList = IntLists.immutable.of(1, 2, 3);\n+```\n+\n+`MutableList` behaves a lot like `java.util.List`, but offers additional stream-like API we will not go into detail about here. Every `MutableList` also implements `java.util.List`, so you can pass any `MutableList` to APIs that still use the standard Java collections.\n+\n+`ImmutableList` does not extend `java.util.List` and - as its name suggests - does not offer any methods for mutation such as `add` or `remove`. Instead you can create copies of these collections with elements added or removed. If you wish to use these collections with traditional `java.util.List` APIs you can use the `castToList()` method on `ImmutableList`, which will return an instance of `java.util.List` that will throw exceptions on mutation operations like `remove`.\n+\n+`IntList` is a special type of list that offers lightweight APIs for working with primitives. Similar collection types exist for all other primitives. The problem with \"normal\" collections and primitives is that using a `List<Integer>` or similar type will always carry additional overhead both in terms of more memory use and more CPU time due to indirection and additional garbage collection load. Because of this, for performance-critical operations, a dedicated `IntList` type is superior.\n+\n+Eclipse Collections is hardly the first library to provide primitive collections but combined with its handy API it makes for arguably the best library of its kind. Using Eclipse primitive collections you can have the performance of primitive arrays with the ease-of-use of the Eclipse Collections API.\n+\n+For all the primitive collection types there also exist mutable and immutable versions (`MutableIntList`, `ImmutableIntList`). They behave much the same as their object-based counterparts so we will not cover them here.\n+\n+Eclipse Collections is split into two parts: The API and the implementation of that API. Since the implementation depends on the API, we will only have to add that as a dependency to our Maven project:\n+\n+```xml\n+<dependency>\n+    <groupId>org.eclipse.collections</groupId>\n+    <artifactId>eclipse-collections</artifactId>\n+    <version>9.2.0</version>\n+</dependency>\n+```\n+\n+Or with Gradle:\n+\n+```\n+compile 'org.eclipse.collections:eclipse-collections:9.2.0'\n+```\n+\n+9.2.0 is the current Eclipse Collections version at time of writing. Check out [the maven repo](https://search.maven.org/search?q=g:org.eclipse.collections%20AND%20a:eclipse-collections&core=gav) for newer versions.\n+\n+## Jackson\n+\n+Jackson is a library for transforming your data structures from and to JSON and other serialized forms. According to [mvnrepository.com](https://mvnrepository.com/popular) it is the most popular framework for this purpose.\n+\n+Jackson's architecture consists of three parts: A *core* that is responsible for writing streams of data (typically JSON), *databind* which is responsible for the basic object serialization API, and various Jackson modules that each handle serialization of some special types. Adding Jackson to our project is simple:\n+\n+```xml\n+<dependency>\n+  <groupId>com.fasterxml.jackson.core</groupId>\n+  <artifactId>jackson-databind</artifactId>\n+  <version>2.9.8</version>\n+</dependency>\n+<dependency>\n+  <groupId>com.fasterxml.jackson.datatype</groupId>\n+  <artifactId>jackson-datatype-eclipse-collections</artifactId>\n+  <version>2.9.8</version>\n+</dependency>\n+```\n+\n+Or with Gradle:\n+\n+```\n+compile 'com.fasterxml.jackson.core:jackson-databind:2.9.8'\n+compile 'com.fasterxml.jackson.datatype:jackson-datatype-eclipse-collections:2.9.8'\n+```", "originalCommit": "8a9e4b122eb195a5b763ea02101d373d77c7c08f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "87c3bc7cada768ef493292db03674414538e9b2f", "url": "https://github.com/eclipse/eclipse-collections/commit/87c3bc7cada768ef493292db03674414538e9b2f", "message": "Documentation on serializing EC with jackson\n\nSigned-off-by: Jonas Konrad <me@yawk.at>", "committedDate": "2020-09-11T09:21:08Z", "type": "forcePushed"}, {"oid": "068a94f18eeca6c83dc47caa27c94bf331ea38b1", "url": "https://github.com/eclipse/eclipse-collections/commit/068a94f18eeca6c83dc47caa27c94bf331ea38b1", "message": "Documentation on serializing EC with jackson\n\nSigned-off-by: Jonas Konrad <me@yawk.at>", "committedDate": "2020-09-13T16:19:27Z", "type": "commit"}, {"oid": "068a94f18eeca6c83dc47caa27c94bf331ea38b1", "url": "https://github.com/eclipse/eclipse-collections/commit/068a94f18eeca6c83dc47caa27c94bf331ea38b1", "message": "Documentation on serializing EC with jackson\n\nSigned-off-by: Jonas Konrad <me@yawk.at>", "committedDate": "2020-09-13T16:19:27Z", "type": "forcePushed"}]}