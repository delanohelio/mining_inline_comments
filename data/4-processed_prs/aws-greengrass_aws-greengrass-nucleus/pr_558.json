{"pr_number": 558, "pr_title": "Compress Tlog when too large. Fix Topic.addValidator ", "pr_createdAt": "2020-10-22T16:42:22Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA2OTg3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r511069877", "bodyText": "What's the unit of this size? Is it bytes?", "author": "hui-yang", "createdAt": "2020-10-23T18:34:48Z", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -3,56 +3,70 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    public static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private Writer out;\n+    private final Path outPath;\n     private final Configuration conf;\n     @SuppressFBWarnings(value = \"IS2_INCONSISTENT_SYNC\", justification = \"No need for flush immediately to be sync\")\n     private boolean flushImmediately;\n     private final AtomicBoolean closed = new AtomicBoolean();\n \n+    private boolean autoTruncate = false;\n+    private long count;       // bytes written so far\n+    private long maxCount;    // max size of log file before truncation\n+    @Setter\n+    private Context context;\n+\n     private static final Logger logger = LogManager.getLogger(ConfigurationWriter.class);\n+    private static final long DEFAULT_MAX_TLOG_SIZE = 10_000_000L;", "originalCommit": "4e72e8df35fa7c0197717ff3c16f05054326cefd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEyMTIxMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r511121213", "bodyText": "Should be bytes. We're counting the number of characters written and compare against this. For ascii text file it seems it's safe to assume 1 character = 1 byte.", "author": "tilo-chen", "createdAt": "2020-10-23T19:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA2OTg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA3MjAwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r511072007", "bodyText": "Looks good. Do we delete the old files at some point?", "author": "hui-yang", "createdAt": "2020-10-23T18:36:59Z", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -120,17 +161,65 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n         }\n \n         try {\n-            Coerce.appendParseableString(tlogline, out);\n+            count += Coerce.appendParseableString(tlogline, out);\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        if (autoTruncate && count > maxCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { //TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     * Old tlog will be renamed to tlog.old\n+     * No need to synchronize because only calling from synchronized childChanged\n+     */\n+    private synchronized void truncateTlog() {\n+        logger.atInfo(TRUNCATE_TLOG_EVENT).log(\"started\");\n+        // TODO: handle errors\n+        Throwable error = context.runOnPublishQueueAndWait(() -> {\n+            // close existing writer\n+            flush(out);\n+            if (out instanceof Commitable) {\n+                ((Commitable) out).commit();\n+            }\n+            Utils.close(out);\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"existing tlog writer closed\");\n+            // move old tlog\n+            Path oldTlogPath = outPath.resolveSibling(outPath.getFileName() + \".old\");\n+            Files.move(outPath, oldTlogPath, StandardCopyOption.REPLACE_EXISTING);\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"existing tlog renamed to \" + oldTlogPath);\n+            // write current state to new tlog\n+            context.get(Kernel.class).writeEffectiveConfigAsTransactionLog(outPath);\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"current effective config written to \" + outPath);", "originalCommit": "4e72e8df35fa7c0197717ff3c16f05054326cefd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEyMTI1OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r511121259", "bodyText": "Will add deletion. Needed the old tlog to make sure this works.", "author": "tilo-chen", "createdAt": "2020-10-23T19:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA3MjAwNw=="}], "type": "inlineReview"}, {"oid": "ed3815c96587d7c135b3c3aa9e79acf1998dbfb6", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ed3815c96587d7c135b3c3aa9e79acf1998dbfb6", "message": "add deletion. improve test", "committedDate": "2020-10-23T22:42:28Z", "type": "forcePushed"}, {"oid": "d1cd21e3f8dd7bd9f07ac9a6464186148f8d8e5c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d1cd21e3f8dd7bd9f07ac9a6464186148f8d8e5c", "message": "fix synchronization", "committedDate": "2020-10-26T16:16:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwMzMxNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513003314", "bodyText": "this needs to be in an aftereach, otherwise it won't be shutdown if the test fails.", "author": "MikeDombo", "createdAt": "2020-10-27T20:18:06Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/KernelTest.java", "diffHunk": "@@ -326,6 +336,46 @@ void GIVEN_expected_state_transitions_WHEN_services_error_out_THEN_all_expectati\n         }\n     }\n \n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    @Test\n+    void GIVEN_kernel_running_WHEN_truncate_tlog_THEN_current_config_saved_and_using_new_tlog()\n+            throws InterruptedException, IOException {\n+        kernel = new Kernel().parseArgs().launch();\n+        Context context = kernel.getContext();\n+        Configuration config = context.get(Configuration.class);\n+        Path configPath = kernel.getNucleusPaths().configPath();\n+        KernelLifecycle kernelLifecycle = context.get(KernelLifecycle.class);\n+\n+        // create a tlog that's not interrupted by truncation workflow. goal is to be consistent with this one\n+        context.runOnPublishQueueAndWait(() -> {\n+            kernel.writeEffectiveConfigAsTransactionLog(configPath.resolve(\"full.tlog\"));\n+            ConfigurationWriter.logTransactionsTo(config, configPath.resolve(\"full.tlog\")).flushImmediately(true);\n+        });\n+\n+        // create some test topics\n+        Topic testTopic1 = config.lookup(\"testTopic1\").withValue(\"initial\");\n+        context.runOnPublishQueueAndWait(() -> {\n+            // make truncate run by setting a small size\n+            kernelLifecycle.getTlog().withMaxFileSize(1);\n+            testTopic1.withNewerValue(System.currentTimeMillis(), \"triggering truncate\");\n+            // immediately queue a task to increase max size to prevent repeated truncation\n+            context.runOnPublishQueue(() -> kernelLifecycle.getTlog().withMaxFileSize(100_000));\n+        });\n+        // wait for things to finish\n+        Thread.sleep(1000);\n+        testTopic1.withNewerValue(System.currentTimeMillis(),\"should be in new log\");\n+\n+        // block and check equivalence\n+        context.runOnPublishQueueAndWait(() -> {\n+            Configuration fullConfig = ConfigurationReader.createFromTLog(new Context(), configPath.resolve(\"full.tlog\"));\n+            Configuration newConfig = ConfigurationReader.createFromTLog(new Context(), configPath.resolve(\"config.tlog\"));\n+            Map<String, Object> fullConfigMap = fullConfig.toPOJO();\n+            Map<String, Object> newConfigMap = newConfig.toPOJO();\n+            assertThat(newConfigMap, is(fullConfigMap));\n+        });\n+        kernel.shutdown();", "originalCommit": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NjQxMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513056411", "bodyText": "Turns out we already had aftereach shutdown. Removed this one", "author": "tilo-chen", "createdAt": "2020-10-27T21:55:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwMzMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwMzUwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513003508", "bodyText": "do not create new Contexts, this creates a new thread which you're going to lose track of", "author": "MikeDombo", "createdAt": "2020-10-27T20:18:25Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/KernelTest.java", "diffHunk": "@@ -326,6 +336,46 @@ void GIVEN_expected_state_transitions_WHEN_services_error_out_THEN_all_expectati\n         }\n     }\n \n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    @Test\n+    void GIVEN_kernel_running_WHEN_truncate_tlog_THEN_current_config_saved_and_using_new_tlog()\n+            throws InterruptedException, IOException {\n+        kernel = new Kernel().parseArgs().launch();\n+        Context context = kernel.getContext();\n+        Configuration config = context.get(Configuration.class);\n+        Path configPath = kernel.getNucleusPaths().configPath();\n+        KernelLifecycle kernelLifecycle = context.get(KernelLifecycle.class);\n+\n+        // create a tlog that's not interrupted by truncation workflow. goal is to be consistent with this one\n+        context.runOnPublishQueueAndWait(() -> {\n+            kernel.writeEffectiveConfigAsTransactionLog(configPath.resolve(\"full.tlog\"));\n+            ConfigurationWriter.logTransactionsTo(config, configPath.resolve(\"full.tlog\")).flushImmediately(true);\n+        });\n+\n+        // create some test topics\n+        Topic testTopic1 = config.lookup(\"testTopic1\").withValue(\"initial\");\n+        context.runOnPublishQueueAndWait(() -> {\n+            // make truncate run by setting a small size\n+            kernelLifecycle.getTlog().withMaxFileSize(1);\n+            testTopic1.withNewerValue(System.currentTimeMillis(), \"triggering truncate\");\n+            // immediately queue a task to increase max size to prevent repeated truncation\n+            context.runOnPublishQueue(() -> kernelLifecycle.getTlog().withMaxFileSize(100_000));\n+        });\n+        // wait for things to finish\n+        Thread.sleep(1000);\n+        testTopic1.withNewerValue(System.currentTimeMillis(),\"should be in new log\");\n+\n+        // block and check equivalence\n+        context.runOnPublishQueueAndWait(() -> {\n+            Configuration fullConfig = ConfigurationReader.createFromTLog(new Context(), configPath.resolve(\"full.tlog\"));\n+            Configuration newConfig = ConfigurationReader.createFromTLog(new Context(), configPath.resolve(\"config.tlog\"));", "originalCommit": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NjYzMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513056631", "bodyText": "\ud83d\udc4d", "author": "tilo-chen", "createdAt": "2020-10-27T21:55:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwMzUwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwMzkxNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513003915", "bodyText": "this needs to be an AtomicLong", "author": "MikeDombo", "createdAt": "2020-10-27T20:19:05Z", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -5,56 +5,73 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    public static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private static final long DEFAULT_MAX_TLOG_SIZE_BYTES = 10_000_000L;\n+\n+    private Writer out;\n+    private final Path outPath;\n     private final Configuration conf;\n+    private final AtomicBoolean closed = new AtomicBoolean();\n     @SuppressFBWarnings(value = \"IS2_INCONSISTENT_SYNC\", justification = \"No need for flush immediately to be sync\")\n     private boolean flushImmediately;\n-    private final AtomicBoolean closed = new AtomicBoolean();\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")  // same situation as flushImmediately\n+    private boolean autoTruncate = false;\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+    private long count = 0;  // bytes written so far", "originalCommit": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NzkzOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513057939", "bodyText": "\ud83d\udc4d", "author": "tilo-chen", "createdAt": "2020-10-27T21:58:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwMzkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwNDE0Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513004147", "bodyText": "what is outpath?", "author": "MikeDombo", "createdAt": "2020-10-27T20:19:28Z", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -5,56 +5,73 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    public static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private static final long DEFAULT_MAX_TLOG_SIZE_BYTES = 10_000_000L;\n+\n+    private Writer out;\n+    private final Path outPath;\n     private final Configuration conf;\n+    private final AtomicBoolean closed = new AtomicBoolean();\n     @SuppressFBWarnings(value = \"IS2_INCONSISTENT_SYNC\", justification = \"No need for flush immediately to be sync\")\n     private boolean flushImmediately;\n-    private final AtomicBoolean closed = new AtomicBoolean();\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")  // same situation as flushImmediately\n+    private boolean autoTruncate = false;\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+    private long count = 0;  // bytes written so far\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+    private long maxCount = DEFAULT_MAX_TLOG_SIZE_BYTES;  // max before truncation\n+    @Setter\n+    private Context context;\n \n     private static final Logger logger = LogManager.getLogger(ConfigurationWriter.class);\n \n     @SuppressWarnings(\"LeakingThisInConstructor\")\n-    ConfigurationWriter(Configuration c, Writer o) {\n+    ConfigurationWriter(Configuration c, Writer o, Path op) {\n         out = o;\n+        outPath = op;", "originalCommit": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1Nzg0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513057849", "bodyText": "Changed to sensible names.", "author": "tilo-chen", "createdAt": "2020-10-27T21:58:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwNDE0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwNTU3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513005570", "bodyText": "just synchronize it, it can't hurt", "author": "MikeDombo", "createdAt": "2020-10-27T20:22:09Z", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -122,17 +165,71 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n         }\n \n         try {\n-            Coerce.appendParseableString(tlogline, out);\n+            count += Coerce.appendParseableString(tlogline, out);\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        if (autoTruncate && count > maxCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { //TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     * Old tlog will be renamed to tlog.old\n+     * No need to synchronize because only calling from synchronized childChanged\n+     */\n+    private void truncateTlog() {", "originalCommit": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1ODIxNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513058216", "bodyText": "\ud83d\udc4d", "author": "tilo-chen", "createdAt": "2020-10-27T21:59:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwNTU3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwNzk5Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513007997", "bodyText": "use long", "author": "MikeDombo", "createdAt": "2020-10-27T20:26:29Z", "path": "src/main/java/com/aws/greengrass/util/Coerce.java", "diffHunk": "@@ -248,14 +248,17 @@ public static String toString(Object o) {\n      *\n      * @param o object to convert.\n      * @param out appendable to write to.\n+     * @return number of characters written\n      * @throws IOException if the append fails.\n      */\n-    public static void appendParseableString(Object o, Appendable out) throws IOException {\n+    public static int appendParseableString(Object o, Appendable out) throws IOException {", "originalCommit": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1ODMzMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513058333", "bodyText": "\ud83d\udc4d", "author": "tilo-chen", "createdAt": "2020-10-27T21:59:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwNzk5Nw=="}], "type": "inlineReview"}, {"oid": "3a3c31b1609ba5bb548f258bae2c2443f802b276", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3a3c31b1609ba5bb548f258bae2c2443f802b276", "message": "address comments", "committedDate": "2020-10-27T23:59:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyMjgxNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513622817", "bodyText": "it isn't too likely, but what if we just had 1 very large thing in the config? Maybe this shouldn't go by bytes but by number of events?", "author": "MikeDombo", "createdAt": "2020-10-28T17:16:18Z", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -5,56 +5,73 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    private static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private static final long DEFAULT_MAX_TLOG_SIZE_BYTES = 10_000_000L;", "originalCommit": "b0258caef94e7097f8baba6705669552c5662bde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQwOTI4MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r514409281", "bodyText": "Pretty unlikely... but using line count does make more sense in context of log lines. Switched to max 15k lines as default. Enough? Maybe too much?", "author": "tilo-chen", "createdAt": "2020-10-29T16:45:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyMjgxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyMzEyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513623121", "bodyText": "this log doesn't seem helpful, I'd just remove it.", "author": "MikeDombo", "createdAt": "2020-10-28T17:16:47Z", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -5,56 +5,73 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    private static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private static final long DEFAULT_MAX_TLOG_SIZE_BYTES = 10_000_000L;\n+\n+    private Writer out;\n+    private final Path tlogOutputPath;\n     private final Configuration conf;\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+    private final AtomicLong count = new AtomicLong(0);  // bytes written so far\n     @SuppressFBWarnings(value = \"IS2_INCONSISTENT_SYNC\", justification = \"No need for flush immediately to be sync\")\n     private boolean flushImmediately;\n-    private final AtomicBoolean closed = new AtomicBoolean();\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")  // same situation as flushImmediately\n+    private boolean autoTruncate = false;\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+    private long maxCount = DEFAULT_MAX_TLOG_SIZE_BYTES;  // max before truncation\n+    @Setter\n+    private Context context;\n \n     private static final Logger logger = LogManager.getLogger(ConfigurationWriter.class);\n \n     @SuppressWarnings(\"LeakingThisInConstructor\")\n-    ConfigurationWriter(Configuration c, Writer o) {\n+    ConfigurationWriter(Configuration c, Writer o, Path p) {\n         out = o;\n+        tlogOutputPath = p;\n         conf = c;\n         conf.getRoot().addWatcher(this);\n     }\n \n     ConfigurationWriter(Configuration c, Path p) throws IOException {\n-        this(c, CommitableWriter.abandonOnClose(p));\n+        this(c, CommitableWriter.abandonOnClose(p), p);\n     }\n \n     /**\n      * Dump the configuration into a file given by the path.\n      *\n-     * @param c    configuration to write out\n-     * @param file path to write to\n+     * @param c configuration to write out\n+     * @param p path to write to\n      */\n-    public static void dump(Configuration c, Path file) {\n-        try (ConfigurationWriter cs = new ConfigurationWriter(c, CommitableWriter.abandonOnClose(file))) {\n+    public static void dump(Configuration c, Path p) {\n+        try (ConfigurationWriter cs = new ConfigurationWriter(c, p)) {\n             cs.writeAll();\n-            logger.atInfo().setEventType(\"config-dump\").addKeyValue(\"path\", file).log();\n+            logger.atInfo().setEventType(\"config-dump\").addKeyValue(\"path\", p).log();", "originalCommit": "b0258caef94e7097f8baba6705669552c5662bde", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNDE3MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513624171", "bodyText": "probably not a helpful log", "author": "MikeDombo", "createdAt": "2020-10-28T17:18:20Z", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -124,17 +167,69 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n         }\n \n         try {\n-            Coerce.appendParseableString(tlogline, out);\n+            count.addAndGet(Coerce.appendParseableString(tlogline, out));\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        if (autoTruncate && count.get() > maxCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { // GG_NEEDS_REVIEW: TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     */\n+    private synchronized void truncateTlog() {\n+        logger.atInfo(TRUNCATE_TLOG_EVENT).log(\"started\");", "originalCommit": "b0258caef94e7097f8baba6705669552c5662bde", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNDMxNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513624317", "bodyText": "definitely need this now, cannot merge without it.", "author": "MikeDombo", "createdAt": "2020-10-28T17:18:32Z", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -124,17 +167,69 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n         }\n \n         try {\n-            Coerce.appendParseableString(tlogline, out);\n+            count.addAndGet(Coerce.appendParseableString(tlogline, out));\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        if (autoTruncate && count.get() > maxCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { // GG_NEEDS_REVIEW: TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     */\n+    private synchronized void truncateTlog() {\n+        logger.atInfo(TRUNCATE_TLOG_EVENT).log(\"started\");\n+        // TODO: handle errors and recover", "originalCommit": "b0258caef94e7097f8baba6705669552c5662bde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQwNzM2Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r514407362", "bodyText": "Added some recovery logic", "author": "tilo-chen", "createdAt": "2020-10-29T16:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNDMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNzY0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513627640", "bodyText": "Truncation is running in the publish queue isn't it? Do we need to wait here or can you just block on the publish queue using runOnPublishQueueAndWait?", "author": "MikeDombo", "createdAt": "2020-10-28T17:22:51Z", "path": "src/test/java/com/aws/greengrass/config/ConfigurationWriterTest.java", "diffHunk": "@@ -98,4 +103,29 @@ void GIVEN_config_with_configuration_writer_WHEN_config_remove_made_THEN_written\n             assertNull(readConfig.find(\"a\", \"containerToBeRemoved\"));\n         }\n     }\n+\n+    @Test\n+    void GIVEN_config_with_configuration_writer_WHEN_max_size_reached_THEN_auto_truncate()\n+            throws IOException, InterruptedException {\n+        Path tlog = tempDir.resolve(\"test_truncate.tlog\");\n+        Configuration config = new Configuration(context);\n+        Kernel mockKernel = mock(Kernel.class);\n+        doNothing().when(mockKernel).writeEffectiveConfigAsTransactionLog(any());\n+        context.put(Kernel.class, mockKernel);\n+\n+        ConfigurationWriter.logTransactionsTo(config, tlog)\n+                .flushImmediately(true).withAutoTruncate(context).withMaxFileSize(120);\n+\n+        Topic test1 = config.lookup(\"test1\").withValue(\"1\");\n+        test1.withNewerValue(System.currentTimeMillis(), \"a longer string to exceed limit\");\n+        // wait for truncation to complete\n+        Thread.sleep(500);", "originalCommit": "b0258caef94e7097f8baba6705669552c5662bde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQwNzA1Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r514407056", "bodyText": "That indeed was a hack... managed to get rid of the sleep by placing runOnPublishQueueAndWait after each topic update.", "author": "tilo-chen", "createdAt": "2020-10-29T16:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNzY0MA=="}], "type": "inlineReview"}, {"oid": "ada8cee3031a058db00f82603a26e531a504b6d7", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ada8cee3031a058db00f82603a26e531a504b6d7", "message": "using line counts. try to recover from errors", "committedDate": "2020-10-29T16:38:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNzM2Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r514627366", "bodyText": "rename bytes to lines", "author": "MikeDombo", "createdAt": "2020-10-29T23:37:32Z", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -82,6 +97,34 @@ public synchronized void close() {\n         Utils.close(out);\n     }\n \n+    /**\n+     * Set to enable auto truncate with default max tlog size.\n+     * @param context a Context to provide access to kernel\n+     * @return this\n+     * @throws IOException I/O error querying current log file size\n+     */\n+    public ConfigurationWriter withAutoTruncate(Context context) throws IOException {\n+        autoTruncate = true;\n+        setContext(context);\n+        if (Files.exists(tlogOutputPath)) {\n+            count.set(Files.lines(tlogOutputPath).count());\n+        } else {\n+            count.set(0);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Set max lines of tlog before truncation.\n+     *\n+     * @param bytes max number of lines\n+     * @return this\n+     */\n+    public ConfigurationWriter withMaxLines(long bytes) {", "originalCommit": "ada8cee3031a058db00f82603a26e531a504b6d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIwNzIxNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r515207217", "bodyText": "ops", "author": "tilo-chen", "createdAt": "2020-10-30T16:02:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNzM2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNzczMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r514627730", "bodyText": "I wouldn't actually do this, otherwise we'll have the same problem that I was talking about before. I'd just reset the count to 0, and then say once we hit 15,000 new events, to truncate. That seems reasonable.", "author": "MikeDombo", "createdAt": "2020-10-29T23:38:50Z", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -125,16 +168,92 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n \n         try {\n             Coerce.appendParseableString(tlogline, out);\n+            count.incrementAndGet();\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        long currCount = count.get();\n+        if (autoTruncate && currCount > maxCount && currCount > retryCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { // GG_NEEDS_REVIEW: TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     */\n+    private synchronized void truncateTlog() {\n+        Path oldTlogPath = tlogOutputPath.resolveSibling(tlogOutputPath.getFileName() + \".old\");\n+        Throwable error = context.runOnPublishQueueAndWait(() -> {\n+            // close existing writer\n+            flush(out);\n+            if (out instanceof Commitable) {\n+                ((Commitable) out).commit();\n+            }\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"existing tlog writer closed\");\n+            // move old tlog\n+            try {\n+                Files.move(tlogOutputPath, oldTlogPath, StandardCopyOption.REPLACE_EXISTING);\n+            } catch (IOException e) {\n+                logger.atError(TRUNCATE_TLOG_EVENT, e).log(\"failed to rename existing tlog\");\n+                // recover: reopen writer to old tlog\n+                out = newTlogWriter(tlogOutputPath);\n+                setTruncateRetryCount();\n+                logger.atWarn(TRUNCATE_TLOG_EVENT, e).log(\"recovered and will retry later\");\n+                return;\n+            }\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"existing tlog renamed to \" + oldTlogPath);\n+            // write current state to new tlog\n+            try {\n+                context.get(Kernel.class).writeEffectiveConfigAsTransactionLog(tlogOutputPath);\n+            } catch (IOException e) {\n+                logger.atError(TRUNCATE_TLOG_EVENT, e).log(\"failed to persist kernel config\");\n+                // recover: undo renaming and keep using old tlog\n+                Files.move(oldTlogPath, tlogOutputPath, StandardCopyOption.REPLACE_EXISTING);\n+                out = newTlogWriter(tlogOutputPath);\n+                setTruncateRetryCount();\n+                logger.atWarn(TRUNCATE_TLOG_EVENT, e).log(\"recovered and will retry later\");\n+                return;\n+            }\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"current effective config written to \" + tlogOutputPath);\n+            // open writer to new tlog\n+            out = newTlogWriter(tlogOutputPath);\n+            count.set(Files.lines(tlogOutputPath).count());", "originalCommit": "ada8cee3031a058db00f82603a26e531a504b6d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIwNzI0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r515207240", "bodyText": "oh nice that's a simple solution...", "author": "tilo-chen", "createdAt": "2020-10-30T16:02:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNzczMA=="}], "type": "inlineReview"}, {"oid": "e2af41d2816e4ee9b31458e321b973a882a85201", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e2af41d2816e4ee9b31458e321b973a882a85201", "message": "reset count zero if success", "committedDate": "2020-10-30T17:47:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3NTM5Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r515375397", "bodyText": "Just add the justification here instead of in comment, so it's easier to maintain. Same for maxCount", "author": "hui-yang", "createdAt": "2020-10-30T20:46:38Z", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -5,56 +5,73 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    private static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private static final long DEFAULT_MAX_TLOG_LINES = 15_000;\n+\n+    private Writer out;\n+    private final Path tlogOutputPath;\n     private final Configuration conf;\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+    private final AtomicLong count = new AtomicLong(0);  // lines written so far\n     @SuppressFBWarnings(value = \"IS2_INCONSISTENT_SYNC\", justification = \"No need for flush immediately to be sync\")\n     private boolean flushImmediately;\n-    private final AtomicBoolean closed = new AtomicBoolean();\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")  // same situation as flushImmediately", "originalCommit": "71d6d51b44538cdec90c7f0f11279f4e92bf3e40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NTIzMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r515385232", "bodyText": "\ud83d\udc4d", "author": "tilo-chen", "createdAt": "2020-10-30T21:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3NTM5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3NzcxMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r515377711", "bodyText": "Can we add some testing for different error handling scenarios as well?", "author": "hui-yang", "createdAt": "2020-10-30T20:52:29Z", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -125,16 +168,92 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n \n         try {\n             Coerce.appendParseableString(tlogline, out);\n+            count.incrementAndGet();\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        long currCount = count.get();\n+        if (autoTruncate && currCount > maxCount && currCount > retryCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { // GG_NEEDS_REVIEW: TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     */\n+    private synchronized void truncateTlog() {", "originalCommit": "71d6d51b44538cdec90c7f0f11279f4e92bf3e40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NTQ0NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r515385444", "bodyText": "Yeah let me add a few test cases.", "author": "tilo-chen", "createdAt": "2020-10-30T21:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3NzcxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwODk0NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r515408944", "bodyText": "don't run this inside of the publish queue, otherwise it will not cause the test to fail", "author": "MikeDombo", "createdAt": "2020-10-30T22:27:27Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/KernelTest.java", "diffHunk": "@@ -316,6 +325,45 @@ void GIVEN_expected_state_transitions_WHEN_services_error_out_THEN_all_expectati\n         }\n     }\n \n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    @Test\n+    void GIVEN_kernel_running_WHEN_truncate_tlog_THEN_current_config_saved_and_using_new_tlog()\n+            throws InterruptedException {\n+        kernel = new Kernel().parseArgs().launch();\n+        Context context = kernel.getContext();\n+        Configuration config = context.get(Configuration.class);\n+        Path configPath = kernel.getNucleusPaths().configPath();\n+        KernelLifecycle kernelLifecycle = context.get(KernelLifecycle.class);\n+\n+        // create a tlog that's not interrupted by truncation workflow. goal is to be consistent with this one\n+        context.runOnPublishQueueAndWait(() -> {\n+            kernel.writeEffectiveConfigAsTransactionLog(configPath.resolve(\"full.tlog\"));\n+            ConfigurationWriter.logTransactionsTo(config, configPath.resolve(\"full.tlog\")).flushImmediately(true);\n+        });\n+\n+        // create some test topics\n+        Topic testTopic1 = config.lookup(\"testTopic1\").withValue(\"initial\");\n+        context.runOnPublishQueueAndWait(() -> {\n+            // make truncate run by setting a small size\n+            kernelLifecycle.getTlog().withMaxEntries(1);\n+            testTopic1.withNewerValue(System.currentTimeMillis(), \"triggering truncate\");\n+            // immediately queue a task to increase max size to prevent repeated truncation\n+            context.runOnPublishQueue(() -> kernelLifecycle.getTlog().withMaxEntries(100_000));\n+        });\n+        // wait for things to finish\n+        Thread.sleep(1000);\n+        testTopic1.withNewerValue(System.currentTimeMillis(),\"should be in new log\");\n+\n+        // block and check equivalence\n+        context.runOnPublishQueueAndWait(() -> {\n+            Configuration fullConfig = ConfigurationReader.createFromTLog(context, configPath.resolve(\"full.tlog\"));\n+            Configuration newConfig = ConfigurationReader.createFromTLog(context, configPath.resolve(\"config.tlog\"));\n+            Map<String, Object> fullConfigMap = fullConfig.toPOJO();\n+            Map<String, Object> newConfigMap = newConfig.toPOJO();\n+            assertThat(newConfigMap, is(fullConfigMap));", "originalCommit": "61be71c752fd7c2a72c001e36ead669cbe0ff9f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cb7468ac093a0d96a620d9d070f23639c8577c67", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cb7468ac093a0d96a620d9d070f23639c8577c67", "message": "add compress tlog workflow and test", "committedDate": "2020-11-01T22:29:27Z", "type": "commit"}, {"oid": "d773cdde9cd64e3729a4df1020abd7e877fe3f06", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d773cdde9cd64e3729a4df1020abd7e877fe3f06", "message": "add detection and trigger compress tlog", "committedDate": "2020-11-01T22:29:27Z", "type": "commit"}, {"oid": "ed7b9845c1ab725a6285afc3878dec67d92f1d69", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ed7b9845c1ab725a6285afc3878dec67d92f1d69", "message": "add deletion. improve test", "committedDate": "2020-11-01T22:29:27Z", "type": "commit"}, {"oid": "cf9ac2b9aa29e281201acb0f16b0ecb968e4e89a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cf9ac2b9aa29e281201acb0f16b0ecb968e4e89a", "message": "fix synchronization", "committedDate": "2020-11-01T22:29:27Z", "type": "commit"}, {"oid": "4e74773139e41a645b362c1d1d138e733f75e14a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4e74773139e41a645b362c1d1d138e733f75e14a", "message": "address comments", "committedDate": "2020-11-01T22:29:27Z", "type": "commit"}, {"oid": "9a023e8ac6a48c87c86b672ffb8fd7e0b0fec6e9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9a023e8ac6a48c87c86b672ffb8fd7e0b0fec6e9", "message": "not creating new context in test", "committedDate": "2020-11-01T22:29:28Z", "type": "commit"}, {"oid": "f9da89b6f8ab4048fcf1ba3b2a65178bc52a69bd", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f9da89b6f8ab4048fcf1ba3b2a65178bc52a69bd", "message": "using line counts. try to recover from errors", "committedDate": "2020-11-01T22:29:28Z", "type": "commit"}, {"oid": "91095116d8c70ddda0cfdf848cdfff9028fb1750", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/91095116d8c70ddda0cfdf848cdfff9028fb1750", "message": "reset count zero if success", "committedDate": "2020-11-01T22:29:28Z", "type": "commit"}, {"oid": "b22298a4e2560c7890f602d7713efa54ac45fc12", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b22298a4e2560c7890f602d7713efa54ac45fc12", "message": "Update ConfigurationWriter.java", "committedDate": "2020-11-01T22:29:28Z", "type": "commit"}, {"oid": "69503cd5ba721686099e50cb24bacac6f06abbe8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/69503cd5ba721686099e50cb24bacac6f06abbe8", "message": "improvements", "committedDate": "2020-11-01T22:29:28Z", "type": "commit"}, {"oid": "60835ac82a5c06a9e5b6cbb8c15e220deabcbf38", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/60835ac82a5c06a9e5b6cbb8c15e220deabcbf38", "message": "test truncate twice", "committedDate": "2020-11-01T22:29:28Z", "type": "commit"}, {"oid": "eaf1757b2217843a2c9e08252b455a8464689978", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eaf1757b2217843a2c9e08252b455a8464689978", "message": "kernel test", "committedDate": "2020-11-01T22:29:28Z", "type": "commit"}, {"oid": "e20cad62dc5f3db964b83e4438c41dfecfa9b138", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e20cad62dc5f3db964b83e4438c41dfecfa9b138", "message": "kernel test and topic addValidator bug", "committedDate": "2020-11-01T22:29:28Z", "type": "commit"}, {"oid": "e20cad62dc5f3db964b83e4438c41dfecfa9b138", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e20cad62dc5f3db964b83e4438c41dfecfa9b138", "message": "kernel test and topic addValidator bug", "committedDate": "2020-11-01T22:29:28Z", "type": "forcePushed"}, {"oid": "fbaa462a9e0e43e02061275bbedfa0ee49d3623a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fbaa462a9e0e43e02061275bbedfa0ee49d3623a", "message": "add a test", "committedDate": "2020-11-02T02:39:19Z", "type": "commit"}, {"oid": "0be3808b5f0eb73883f8e5a45f1c939c6387dc84", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0be3808b5f0eb73883f8e5a45f1c939c6387dc84", "message": "kernel test", "committedDate": "2020-11-02T17:33:12Z", "type": "commit"}, {"oid": "989bc41b931fbc632f9ad8459f1326e34bb5eac9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/989bc41b931fbc632f9ad8459f1326e34bb5eac9", "message": "Merge branch 'master' into compress-tlog", "committedDate": "2020-11-02T17:33:29Z", "type": "commit"}, {"oid": "d2ae9d8dd17f6b1802296077eacc01e553a30d1b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d2ae9d8dd17f6b1802296077eacc01e553a30d1b", "message": "Merge branch 'master' into compress-tlog", "committedDate": "2020-11-02T17:40:45Z", "type": "commit"}]}