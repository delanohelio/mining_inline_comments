{"pr_number": 328, "pr_title": "Implement \"bootstrap\" for GenericExternalService and EGService", "pr_createdAt": "2020-07-24T02:03:01Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328", "timeline": [{"oid": "ee004f7d230694f899ef6123605471ca0927792b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ee004f7d230694f899ef6123605471ca0927792b", "message": "implemented without timeout", "committedDate": "2020-07-24T00:43:18Z", "type": "commit"}, {"oid": "afb6f9a6b55af7590fa43a9506f7941308e19717", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/afb6f9a6b55af7590fa43a9506f7941308e19717", "message": "Implemented with timeout", "committedDate": "2020-07-24T01:41:47Z", "type": "commit"}, {"oid": "6e65b3e92084db326444f13ec268e34d0c63439f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6e65b3e92084db326444f13ec268e34d0c63439f", "message": "more changes", "committedDate": "2020-07-24T01:51:02Z", "type": "commit"}, {"oid": "295fe18c9663d4bb4f7f3171066f69a38cc776ad", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/295fe18c9663d4bb4f7f3171066f69a38cc776ad", "message": "Merge branch 'master' into ku03", "committedDate": "2020-07-24T02:03:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyMDc5Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r459820797", "bodyText": "Use findOrDefault. Are our timeouts all specified in seconds?", "author": "MikeDombo", "createdAt": "2020-07-24T02:08:40Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -90,11 +96,71 @@ public static String exit2String(int exitCode) {\n                 : \"exit(\" + ((exitCode << 24) >> 24) + \")\";\n     }\n \n+    /**\n+     * Runs the command under 'bootstrap' and returns the exit code. The timeout can be configured with 'timeout' field\n+     * in seconds. If not configured, by default, it times out after 2 minutes.\n+     *\n+     * @return exit code of process; null if no bootstrap command found.\n+     * @throws InterruptedException when the command execution is interrupted.\n+     */\n+    public synchronized Integer bootstrap() throws InterruptedException, TimeoutException {\n+        // this is redundant because all lifecycle processes should have been before calling this method.\n+        // stopping here again to be safer\n+        stopAllLifecycleProcesses();\n+\n+        CountDownLatch timeoutLatch = new CountDownLatch(1);\n+\n+        AtomicInteger atomicExitCode = new AtomicInteger();\n+\n+        // run the command at background thread so that the main thread can handle it when it times out\n+        // note that this could be a foreground process but it requires run() methods, ShellerRunner, and Exec's method\n+        // signature changes to deal with timeout, so we decided to go with background thread.\n+        Exec exec = run(LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, exitCode -> {\n+            atomicExitCode.set(exitCode);\n+            timeoutLatch.countDown();\n+        }, lifecycleProcesses).getRight();\n+\n+        if (exec == null) {\n+            // no bootstrap command found\n+            return null;\n+        }\n+\n+        // timeout handling\n+        Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC, LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC,", "originalCommit": "295fe18c9663d4bb4f7f3171066f69a38cc776ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzOTU4Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r460239583", "bodyText": "Changed - the name is a bit confusing though.\nfind finds a topic but findOrDefault returns the value... Not sure if we want to rename the findOrDefault. may be getValueOrDefault?", "author": "leaf94", "createdAt": "2020-07-24T19:11:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyMDc5Nw=="}], "type": "inlineReview"}, {"oid": "3751d4b13f648b8bbd6399d65c456a7ff0054267", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3751d4b13f648b8bbd6399d65c456a7ff0054267", "message": "Add to EG service; Update README", "committedDate": "2020-07-24T17:40:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxMzI0Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r460213247", "bodyText": "Should we close exec if timeout?", "author": "hui-yang", "createdAt": "2020-07-24T18:14:49Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -90,11 +96,71 @@ public static String exit2String(int exitCode) {\n                 : \"exit(\" + ((exitCode << 24) >> 24) + \")\";\n     }\n \n+    /**\n+     * Runs the command under 'bootstrap' and returns the exit code. The timeout can be configured with 'timeout' field\n+     * in seconds. If not configured, by default, it times out after 2 minutes.\n+     *\n+     * @return exit code of process; null if no bootstrap command found.\n+     * @throws InterruptedException when the command execution is interrupted.\n+     */\n+    public synchronized Integer bootstrap() throws InterruptedException, TimeoutException {\n+        // this is redundant because all lifecycle processes should have been before calling this method.\n+        // stopping here again to be safer\n+        stopAllLifecycleProcesses();\n+\n+        CountDownLatch timeoutLatch = new CountDownLatch(1);\n+\n+        AtomicInteger atomicExitCode = new AtomicInteger();\n+\n+        // run the command at background thread so that the main thread can handle it when it times out\n+        // note that this could be a foreground process but it requires run() methods, ShellerRunner, and Exec's method\n+        // signature changes to deal with timeout, so we decided to go with background thread.\n+        Exec exec = run(LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, exitCode -> {\n+            atomicExitCode.set(exitCode);\n+            timeoutLatch.countDown();\n+        }, lifecycleProcesses).getRight();\n+\n+        if (exec == null) {\n+            // no bootstrap command found\n+            return null;\n+        }\n+\n+        // timeout handling\n+        Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC, LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC,\n+                TIMEOUT_NAMESPACE_TOPIC);\n+\n+        int timeoutInSec = timeoutTopic == null ? DEFAULT_BOOTSTRAP_TIMEOUT_SEC : Coerce.toInt(timeoutTopic);\n+\n+        try {\n+            boolean completedInTime = timeoutLatch.await(timeoutInSec, TimeUnit.SECONDS);\n+\n+            if (!completedInTime) {\n+                throw new TimeoutException(\"Bootstrap timed out\");", "originalCommit": "295fe18c9663d4bb4f7f3171066f69a38cc776ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzOTc1Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r460239756", "bodyText": "Yes. I changed to use try-with-resource", "author": "leaf94", "createdAt": "2020-07-24T19:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxMzI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxMzg1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r460213858", "bodyText": "Are all default timeouts 2 min?\nMaybe vaguely mention \"default timeout\"?", "author": "hui-yang", "createdAt": "2020-07-24T18:16:03Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -305,8 +371,9 @@ public void handleError() throws InterruptedException {\n     /**\n      * Run one of the commands defined in the config on the command line.\n      *\n-     * @param name         name of the command to run (\"run\", \"install\", \"start\").\n-     * @param background   IntConsumer to receive the exit code. If null, the command will timeout after 2 minutes.\n+     * @param name         name of the command to run (\"run\", \"install\", \"startup\", \"bootstrap\").\n+     * @param background   IntConsumer to receive the exit code. If null, the command will run as a foreground process\n+     *                     and timeout after 2 minutes.", "originalCommit": "295fe18c9663d4bb4f7f3171066f69a38cc776ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzOTk1Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r460239956", "bodyText": "Yes. but the original comment here is actually run - the timeout is not controlled here. I updated the comment.", "author": "leaf94", "createdAt": "2020-07-24T19:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxMzg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxNDA3OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r460214079", "bodyText": "Is this used anywhere?", "author": "hui-yang", "createdAt": "2020-07-24T18:16:28Z", "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "diffHunk": "@@ -21,6 +21,7 @@\n import java.util.Arrays;\n import java.util.concurrent.ConcurrentLinkedDeque;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;", "originalCommit": "295fe18c9663d4bb4f7f3171066f69a38cc776ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0MDA5Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r460240096", "bodyText": "not anymore... good catch. removed", "author": "leaf94", "createdAt": "2020-07-24T19:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxNDA3OQ=="}], "type": "inlineReview"}, {"oid": "c579c00085b062c98feb3ae8f905a8ab15937bec", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c579c00085b062c98feb3ae8f905a8ab15937bec", "message": "Address some PR comments", "committedDate": "2020-07-24T19:09:48Z", "type": "commit"}, {"oid": "75cea3dff430308c9c7b42e719f1ec2f734744f3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/75cea3dff430308c9c7b42e719f1ec2f734744f3", "message": "typo", "committedDate": "2020-07-24T19:17:29Z", "type": "commit"}, {"oid": "b9fa6672dbf02e526b60fb65a6b5d2303cc9059c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b9fa6672dbf02e526b60fb65a6b5d2303cc9059c", "message": "Merge branch 'master' into ku03", "committedDate": "2020-07-24T19:19:03Z", "type": "commit"}, {"oid": "eec5e1ed1454a1203b4d4213cb4aad77340620f8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eec5e1ed1454a1203b4d4213cb4aad77340620f8", "message": "Merge branch 'master' into ku03", "committedDate": "2020-07-24T23:20:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyODE5Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r460328193", "bodyText": "101 for rebooting device. Also you can use the defined constants for 0, 100, and 101 in deployments/bootstrap.\nIs this func intended to be protected?", "author": "hui-yang", "createdAt": "2020-07-24T23:25:16Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -230,6 +231,20 @@ public boolean isErrored() {\n         return !(getState().isHappy() && error == null);\n     }\n \n+    /**\n+     * Bootstrap and notify if a kernel/device restart is needed. Called when a component newly added to kernel, or the\n+     * version changes. Returns 0 for no-op, 100 for restarting kernel, 200 for restarting device, other code for\n+     * errors, and null if not configured.\n+     *\n+     * @return exit code; 0 for no-op, 100 for restarting kernel, 200 for restarting device, other code for errors.", "originalCommit": "eec5e1ed1454a1203b4d4213cb4aad77340620f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2NjA4NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r461166085", "bodyText": "NIT extra line", "author": "ShirleyZheng92", "createdAt": "2020-07-27T20:58:56Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -90,11 +96,60 @@ public static String exit2String(int exitCode) {\n                 : \"exit(\" + ((exitCode << 24) >> 24) + \")\";\n     }\n \n+    /**\n+     * Run the command under 'bootstrap' and returns the exit code. The timeout can be configured with 'timeout' field\n+     * in seconds. If not configured, by default, it times out after 2 minutes.\n+     *\n+     * @return exit code of process; null if no bootstrap command found.\n+     * @throws InterruptedException when the command execution is interrupted.\n+     * @throws TimeoutException     when the command execution times out.\n+     */\n+    @Override\n+    public synchronized Integer bootstrap() throws InterruptedException, TimeoutException {\n+        // this is redundant because all lifecycle processes should have been before calling this method.\n+        // stopping here again to be safer\n+        stopAllLifecycleProcesses();\n+\n+        CountDownLatch timeoutLatch = new CountDownLatch(1);\n+\n+        AtomicInteger atomicExitCode = new AtomicInteger();\n+\n+        // run the command at background thread so that the main thread can handle it when it times out\n+        // note that this could be a foreground process but it requires run() methods, ShellerRunner, and Exec's method\n+        // signature changes to deal with timeout, so we decided to go with background thread.\n+\n+        try (Exec exec = run(LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, exitCode -> {\n+            atomicExitCode.set(exitCode);\n+            timeoutLatch.countDown();\n+        }, lifecycleProcesses).getRight()) {\n+\n+", "originalCommit": "eec5e1ed1454a1203b4d4213cb4aad77340620f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2NzMyNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r461167325", "bodyText": "NIT: Add timeout value in exception message", "author": "ShirleyZheng92", "createdAt": "2020-07-27T21:01:14Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -90,11 +96,60 @@ public static String exit2String(int exitCode) {\n                 : \"exit(\" + ((exitCode << 24) >> 24) + \")\";\n     }\n \n+    /**\n+     * Run the command under 'bootstrap' and returns the exit code. The timeout can be configured with 'timeout' field\n+     * in seconds. If not configured, by default, it times out after 2 minutes.\n+     *\n+     * @return exit code of process; null if no bootstrap command found.\n+     * @throws InterruptedException when the command execution is interrupted.\n+     * @throws TimeoutException     when the command execution times out.\n+     */\n+    @Override\n+    public synchronized Integer bootstrap() throws InterruptedException, TimeoutException {\n+        // this is redundant because all lifecycle processes should have been before calling this method.\n+        // stopping here again to be safer\n+        stopAllLifecycleProcesses();\n+\n+        CountDownLatch timeoutLatch = new CountDownLatch(1);\n+\n+        AtomicInteger atomicExitCode = new AtomicInteger();\n+\n+        // run the command at background thread so that the main thread can handle it when it times out\n+        // note that this could be a foreground process but it requires run() methods, ShellerRunner, and Exec's method\n+        // signature changes to deal with timeout, so we decided to go with background thread.\n+\n+        try (Exec exec = run(LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, exitCode -> {\n+            atomicExitCode.set(exitCode);\n+            timeoutLatch.countDown();\n+        }, lifecycleProcesses).getRight()) {\n+\n+\n+            if (exec == null) {\n+                // no bootstrap command found\n+                return null;\n+            }\n+\n+            // timeout handling\n+            int timeoutInSec = (int) config\n+                    .findOrDefault(DEFAULT_BOOTSTRAP_TIMEOUT_SEC, SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                            LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            boolean completedInTime = timeoutLatch.await(timeoutInSec, TimeUnit.SECONDS);\n+            if (!completedInTime) {\n+                throw new TimeoutException(\"Bootstrap step timed out\");", "originalCommit": "eec5e1ed1454a1203b4d4213cb4aad77340620f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2NzU1Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r461167557", "bodyText": "What's the exit value in this case?", "author": "ShirleyZheng92", "createdAt": "2020-07-27T21:01:41Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -90,11 +96,60 @@ public static String exit2String(int exitCode) {\n                 : \"exit(\" + ((exitCode << 24) >> 24) + \")\";\n     }\n \n+    /**\n+     * Run the command under 'bootstrap' and returns the exit code. The timeout can be configured with 'timeout' field\n+     * in seconds. If not configured, by default, it times out after 2 minutes.\n+     *\n+     * @return exit code of process; null if no bootstrap command found.\n+     * @throws InterruptedException when the command execution is interrupted.\n+     * @throws TimeoutException     when the command execution times out.\n+     */\n+    @Override\n+    public synchronized Integer bootstrap() throws InterruptedException, TimeoutException {\n+        // this is redundant because all lifecycle processes should have been before calling this method.\n+        // stopping here again to be safer\n+        stopAllLifecycleProcesses();\n+\n+        CountDownLatch timeoutLatch = new CountDownLatch(1);\n+\n+        AtomicInteger atomicExitCode = new AtomicInteger();\n+\n+        // run the command at background thread so that the main thread can handle it when it times out\n+        // note that this could be a foreground process but it requires run() methods, ShellerRunner, and Exec's method\n+        // signature changes to deal with timeout, so we decided to go with background thread.\n+\n+        try (Exec exec = run(LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, exitCode -> {\n+            atomicExitCode.set(exitCode);\n+            timeoutLatch.countDown();\n+        }, lifecycleProcesses).getRight()) {\n+\n+\n+            if (exec == null) {\n+                // no bootstrap command found\n+                return null;\n+            }\n+\n+            // timeout handling\n+            int timeoutInSec = (int) config\n+                    .findOrDefault(DEFAULT_BOOTSTRAP_TIMEOUT_SEC, SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                            LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            boolean completedInTime = timeoutLatch.await(timeoutInSec, TimeUnit.SECONDS);\n+            if (!completedInTime) {\n+                throw new TimeoutException(\"Bootstrap step timed out\");\n+            }\n+\n+        } catch (IOException e) {\n+            logger.atError(\"bootstrap-process-close-error\").setCause(e).log(\"Error closing process at bootstrap step.\");", "originalCommit": "eec5e1ed1454a1203b4d4213cb4aad77340620f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2OTM1MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r461169350", "bodyText": "Nice!! I believe this also applies skipif", "author": "ShirleyZheng92", "createdAt": "2020-07-27T21:05:06Z", "path": "README_CONFIG_SCHEMA.md", "diffHunk": "@@ -65,6 +65,11 @@ Root keys have to be recognized keys.\n services: \n <serviceName>:\n   lifecycle:\n+    bootstrap:\n+      script:\n+      timeout: # optional. timeout in number of seconds. Default to 120 sec.\n+      setenv: # key-value environment variables. optional, can override the parent 'setenv'\n+", "originalCommit": "eec5e1ed1454a1203b4d4213cb4aad77340620f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MDAxNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r461170015", "bodyText": "NIT extra new lines", "author": "ShirleyZheng92", "createdAt": "2020-07-27T21:06:20Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/GenericExternalServiceTest.java", "diffHunk": "@@ -248,4 +248,32 @@ void GIVEN_running_service_WHEN_setenv_config_changes_THEN_service_restarts() th\n \n         assertTrue(serviceRestarted.await(5, TimeUnit.SECONDS));\n     }\n+\n+    @Test\n+    void GIVEN_bootstrap_command_WHEN_bootstrap_THEN_command_runs_and_returns_exit_code() throws Exception {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"service_with_just_bootstrap.yaml\").toString());\n+\n+        GenericExternalService serviceWithJustBootstrap =\n+                (GenericExternalService) kernel.locate(\"service_with_just_bootstrap\");\n+\n+        assertEquals(147, serviceWithJustBootstrap.bootstrap());\n+\n+        GenericExternalService serviceWithJustBootstrapAndConfiguredTimeout =\n+                (GenericExternalService) kernel.locate(\"service_with_just_bootstrap_and_configured_timeout\");\n+        assertEquals(147, serviceWithJustBootstrapAndConfiguredTimeout.bootstrap());\n+    }\n+\n+    @Test\n+    void GIVEN_bootstrap_command_WHEN_runs_longer_than_120_sec_THEN_timeout_exception_is_thrown() throws Exception {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"service_with_just_bootstrap.yaml\").toString());\n+\n+", "originalCommit": "eec5e1ed1454a1203b4d4213cb4aad77340620f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c47954f14ae0a9f900990d05167cbce4bba9adec", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c47954f14ae0a9f900990d05167cbce4bba9adec", "message": "Merge branch 'master' into ku03", "committedDate": "2020-07-27T22:56:24Z", "type": "commit"}, {"oid": "16bae349c5060906db8aa3774f21bc1e16bd722b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/16bae349c5060906db8aa3774f21bc1e16bd722b", "message": "PR comments", "committedDate": "2020-07-28T00:26:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0Njk4Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r461246983", "bodyText": "Recommendation generated by Amazon CodeGuru Reviewer. Leave feedback on this recommendation by replying to the comment or by reacting to the comment using emoji.\nThis code uses '%s' to format int: timeoutInSec (declared at line 133). This is a potential locale-sensitive handling issue. It might cause errors in the handling and processing of the statement at line: 138. Consider formatting this data with '%d' instead.", "author": "MikeDombo", "createdAt": "2020-07-28T00:29:39Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -94,11 +100,58 @@ public static String exit2String(int exitCode) {\n                 : \"exit(\" + ((exitCode << 24) >> 24) + \")\";\n     }\n \n+    /**\n+     * Run the command under 'bootstrap' and returns the exit code. The timeout can be configured with 'timeout' field\n+     * in seconds. If not configured, by default, it times out after 2 minutes.\n+     *\n+     * @return exit code of process; null if no bootstrap command found.\n+     * @throws InterruptedException when the command execution is interrupted.\n+     * @throws TimeoutException     when the command execution times out.\n+     */\n+    @Override\n+    public synchronized Integer bootstrap() throws InterruptedException, TimeoutException {\n+        // this is redundant because all lifecycle processes should have been before calling this method.\n+        // stopping here again to be safer\n+        stopAllLifecycleProcesses();\n+\n+        CountDownLatch timeoutLatch = new CountDownLatch(1);\n+        AtomicInteger atomicExitCode = new AtomicInteger();\n+\n+        // run the command at background thread so that the main thread can handle it when it times out\n+        // note that this could be a foreground process but it requires run() methods, ShellerRunner, and Exec's method\n+        // signature changes to deal with timeout, so we decided to go with background thread.\n+        try (Exec exec = run(LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, exitCode -> {\n+            atomicExitCode.set(exitCode);\n+            timeoutLatch.countDown();\n+        }, lifecycleProcesses).getRight()) {\n+            if (exec == null) {\n+                // no bootstrap command found\n+                return null;\n+            }\n+\n+            // timeout handling\n+            int timeoutInSec = (int) config\n+                    .findOrDefault(DEFAULT_BOOTSTRAP_TIMEOUT_SEC, SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                            LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            boolean completedInTime = timeoutLatch.await(timeoutInSec, TimeUnit.SECONDS);\n+            if (!completedInTime) {\n+                String msg = String.format(\"Bootstrap step timed out after '%s' seconds.\", timeoutInSec);", "originalCommit": "16bae349c5060906db8aa3774f21bc1e16bd722b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "df8e5b9e8e4b22adbee17b937fc8e70f4ce50ce8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/df8e5b9e8e4b22adbee17b937fc8e70f4ce50ce8", "message": "PR comments", "committedDate": "2020-07-28T00:59:17Z", "type": "commit"}, {"oid": "b9a0d6f3881e8ac3701129085cdcaa211a735686", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b9a0d6f3881e8ac3701129085cdcaa211a735686", "message": "PR comment", "committedDate": "2020-07-28T17:31:48Z", "type": "commit"}, {"oid": "30dfeaaf4e279f499ffabb384c4bab1a6832d00f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/30dfeaaf4e279f499ffabb384c4bab1a6832d00f", "message": "Merge branch 'master' into ku03", "committedDate": "2020-07-28T21:25:24Z", "type": "commit"}]}