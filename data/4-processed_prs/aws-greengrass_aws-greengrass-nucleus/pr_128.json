{"pr_number": 128, "pr_title": "Add performance benchmarking on dependency resolution component", "pr_createdAt": "2020-03-20T02:50:50Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyOTEzMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r395429130", "bodyText": "nit\nNeed a space at the end when appending the class name.", "author": "MikeDombo", "createdAt": "2020-03-20T03:53:14Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -220,15 +216,10 @@ public static EvergreenService locate(Context context, String name) throws Servi\n                     staticLogger.atInfo().setEventType(\"evergreen-service-loaded\")\n                             .addKeyValue(\"serviceName\", ret.getName()).log();\n                 } catch (Throwable ex) {\n-                    staticLogger.atError().setEventType(\"evergreen-service-load-error\")\n-                            .addKeyValue(\"className\", clazz.getName())\n-                            .log(\"Can't create Evergreen Service instance\");\n-                    throw new ServiceLoadException(\"Can't create code-backed service from \" + clazz.getSimpleName(),\n+                    throw new ServiceLoadException(\"Can't create Evergreen Service instance\" + clazz.getSimpleName(),", "originalCommit": "9747f237e807910b478096f751309428565c5b75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyOTIwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r395429205", "bodyText": "nit\nNeed a space at the end for the name.", "author": "MikeDombo", "createdAt": "2020-03-20T03:53:37Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -237,10 +228,7 @@ public static EvergreenService locate(Context context, String name) throws Servi\n                     staticLogger.atInfo().setEventType(\"generic-service-loaded\")\n                             .addKeyValue(\"serviceName\", ret.getName()).log();\n                 } catch (Throwable ex) {\n-                    staticLogger.atError().setEventType(\"generic-service-load-error\")\n-                            .addKeyValue(\"serviceName\", name)\n-                            .log(\"Can't create generic instance\");\n-                    throw new ServiceLoadException(\"Can't create generic service\", ex);\n+                    throw new ServiceLoadException(\"Can't create generic service instance\" + name, ex);", "originalCommit": "9747f237e807910b478096f751309428565c5b75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyOTMxMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r395429312", "bodyText": "We don't care about the exception? If we don't care about the exception, why log anything here at all?", "author": "MikeDombo", "createdAt": "2020-03-20T03:54:20Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -295,7 +295,8 @@ protected String mergeSemverRequirements(final Collection<String> packageVersion\n         try {\n             service = EvergreenService.locate(kernel.context, packageName);\n         } catch (ServiceLoadException e) {\n-            logger.atWarn().setCause(e).addKeyValue(\"packageName\", packageName).log(\"Fail to load package\");\n+            logger.atWarn().addKeyValue(\"packageName\", packageName).log(", "originalCommit": "9747f237e807910b478096f751309428565c5b75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5NjM0Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r395796342", "bodyText": "The exception is ok sometimes if the package does not exist. I feel the error message stands out too much but provides little value. I'm considering to drop it to debug and add the exception back.", "author": "hui-yang", "createdAt": "2020-03-20T17:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyOTMxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyOTkwNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r395429904", "bodyText": "If possible, I think you'd want to set this to run with 10 or 20 iterations. Also check what happens when you run the whole benchmark suite like this: https://github.com/aws/aws-greengrass-kernel/blob/dr-perf/.github/workflows/benchmark.yaml#L31 since that is what GitHub will run. If that doesn't do what we want, we may need to add more steps to the workflow to run these microbenchmarks separately. Feel free to Chime with me if you want to talk about it.", "author": "MikeDombo", "createdAt": "2020-03-20T03:57:57Z", "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverBenchmark.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.infra.BenchmarkParams;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+@BenchmarkMode(value ={Mode.Throughput, Mode.AverageTime})\n+@Fork(1)\n+@State(Scope.Benchmark)\n+public class DependencyResolverBenchmark {", "originalCommit": "9747f237e807910b478096f751309428565c5b75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc5NTQzMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r395795431", "bodyText": "Agree. I'll try it out and let you know.", "author": "hui-yang", "createdAt": "2020-03-20T17:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyOTkwNA=="}], "type": "inlineReview"}, {"oid": "d197ff3594ad2b2d9bb590dfc3ac480941ce8710", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d197ff3594ad2b2d9bb590dfc3ac480941ce8710", "message": "Add performance benchmarking on dependency resolution component", "committedDate": "2020-03-20T22:30:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyNzk3MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r395927971", "bodyText": "Although params are nice they won't work with the upload script for cloudwatch since it wants unique benchmark names. So can you either consider changing how it parses the result file, or what I think may be not just easier but better would be to have each dependency scenario as a different benchmark. Even if they are calling the same code with a parameter, as long as they are unique benchmarks it should all work nicely.", "author": "MikeDombo", "createdAt": "2020-03-20T23:13:42Z", "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverBenchmark.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.BenchmarkParams;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@Fork(1)\n+@Measurement(iterations = 20)\n+@Warmup(iterations = 5)\n+@State(Scope.Benchmark)\n+public class DependencyResolverBenchmark {\n+\n+    /**\n+     * The 2 config files are used to test 2 different scenarios:\n+     * #1: GIVEN main without any existing packages,\n+     *     WHEN resolve 2 top-level packages,\n+     *     THEN 13 new packages are resolved and added.\n+     * #2: GIVEN 7 packages exist on the device (Using <service>.version keyword in config),\n+     *     WHEN resolve 2 top-level packages,\n+     *     THEN 6 packages remain the same, 1 updated, and 6 new packages added.\n+     */\n+    @Param({\"DRBNewConfig.yaml\", \"DRBStatefulConfig.yaml\"})", "originalCommit": "d197ff3594ad2b2d9bb590dfc3ac480941ce8710", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7dbe239972c6659f3abba28bfdce6ad9a52b3e08", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7dbe239972c6659f3abba28bfdce6ad9a52b3e08", "message": "Add performance benchmarking on dependency resolution component", "committedDate": "2020-03-21T01:40:30Z", "type": "forcePushed"}, {"oid": "fc277a6584f0e5b2ba50b9a9fcc3bfb2dea65487", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fc277a6584f0e5b2ba50b9a9fcc3bfb2dea65487", "message": "Add performance benchmarking on dependency resolution component", "committedDate": "2020-03-23T22:19:27Z", "type": "forcePushed"}, {"oid": "26bbe34d0d12489cbc04cb6d10b973f832f38feb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/26bbe34d0d12489cbc04cb6d10b973f832f38feb", "message": "Add performance benchmarking on dependency resolution component", "committedDate": "2020-03-23T22:21:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2NDQzMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r396864432", "bodyText": "This path is wrong for running from the github action. It needs to be relative to the kernel package root.", "author": "MikeDombo", "createdAt": "2020-03-24T02:11:10Z", "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverIntegration.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+public class DependencyResolverIntegration {\n+\n+    @BenchmarkMode(Mode.Throughput)\n+    @Fork(1)\n+    @Measurement(iterations = 20)\n+    @Warmup(iterations = 5)\n+    @State(Scope.Benchmark)\n+    public static abstract class DependencyResolutionBenchmark {\n+        private DeploymentDocument jobDoc = new DeploymentDocument(\"mockJob1\",Arrays.asList(\"boto3\", \"awscli\"), Arrays.asList(\n+                new DeploymentPackageConfiguration(\"boto3\", \"1.9.128\", \"\", new HashSet<>(), new ArrayList<>()),\n+                new DeploymentPackageConfiguration(\"awscli\", \"1.16.144\", \"\", new HashSet<>(), new ArrayList<>())\n+        ), \"mockGroup1\", 1L);\n+\n+        private DependencyResolver resolver;\n+\n+        @Setup\n+        public void setup() {\n+            Kernel kernel = new Kernel();\n+            kernel.parseArgs(\"-i\", DependencyResolverIntegration.class.getResource(getConfigFile()).toString());\n+            // We don't need to launch kernel here. Only configuration parsing and main service loading are\n+            // required for this benchmarking.\n+\n+            // TODO: figure out how to read resource directory in local package store\n+            // For now, hardcode to be the resource directory outside of the JAR file\n+            Path packagePath = Paths.get(System.getProperty(\"user.dir\"))\n+                    .resolve(\"src/main/resources/com/aws/iot/evergreen/jmh/packagemanager/mock_artifact_source\");", "originalCommit": "26bbe34d0d12489cbc04cb6d10b973f832f38feb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4Njg4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397386887", "bodyText": "Good catch! updated.", "author": "hui-yang", "createdAt": "2020-03-24T18:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2NDQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2NDU4NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r396864584", "bodyText": "You need to save the result like I had in my example, or else all the memory will be freed.", "author": "MikeDombo", "createdAt": "2020-03-24T02:11:52Z", "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverIntegration.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+public class DependencyResolverIntegration {\n+\n+    @BenchmarkMode(Mode.Throughput)\n+    @Fork(1)\n+    @Measurement(iterations = 20)\n+    @Warmup(iterations = 5)\n+    @State(Scope.Benchmark)\n+    public static abstract class DependencyResolutionBenchmark {\n+        private DeploymentDocument jobDoc = new DeploymentDocument(\"mockJob1\",Arrays.asList(\"boto3\", \"awscli\"), Arrays.asList(\n+                new DeploymentPackageConfiguration(\"boto3\", \"1.9.128\", \"\", new HashSet<>(), new ArrayList<>()),\n+                new DeploymentPackageConfiguration(\"awscli\", \"1.16.144\", \"\", new HashSet<>(), new ArrayList<>())\n+        ), \"mockGroup1\", 1L);\n+\n+        private DependencyResolver resolver;\n+\n+        @Setup\n+        public void setup() {\n+            Kernel kernel = new Kernel();\n+            kernel.parseArgs(\"-i\", DependencyResolverIntegration.class.getResource(getConfigFile()).toString());\n+            // We don't need to launch kernel here. Only configuration parsing and main service loading are\n+            // required for this benchmarking.\n+\n+            // TODO: figure out how to read resource directory in local package store\n+            // For now, hardcode to be the resource directory outside of the JAR file\n+            Path packagePath = Paths.get(System.getProperty(\"user.dir\"))\n+                    .resolve(\"src/main/resources/com/aws/iot/evergreen/jmh/packagemanager/mock_artifact_source\");\n+            resolver = new DependencyResolver(new LocalPackageStore(packagePath), kernel);\n+        }\n+\n+        @TearDown(Level.Invocation)\n+        public void doTeardown() {\n+            ForcedGcMemoryProfiler.recordUsedMemory();\n+        }\n+\n+        @Benchmark\n+        public List<PackageIdentifier> measure() throws Exception {\n+            return resolver.resolveDependencies(jobDoc);", "originalCommit": "26bbe34d0d12489cbc04cb6d10b973f832f38feb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzOTMyOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397339328", "bodyText": "got it. Will do", "author": "hui-yang", "createdAt": "2020-03-24T17:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2NDU4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2NTA4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r396865087", "bodyText": "This technically breaks the benchmark dashboard because it will interpret the primary metric as s/op instead of ops/s which this mode gives us. Either change this mode, or else change the python script to read the primary metric type/mode and handle it appropriately as ops/s instead of the execution time.", "author": "MikeDombo", "createdAt": "2020-03-24T02:13:57Z", "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverIntegration.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+public class DependencyResolverIntegration {\n+\n+    @BenchmarkMode(Mode.Throughput)", "originalCommit": "26bbe34d0d12489cbc04cb6d10b973f832f38feb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4NzM0Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397387346", "bodyText": "Changed the mode to AverageTime", "author": "hui-yang", "createdAt": "2020-03-24T18:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2NTA4Nw=="}], "type": "inlineReview"}, {"oid": "a00e9abcd8826a54e91b6834ca534b7aca68f00b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a00e9abcd8826a54e91b6834ca534b7aca68f00b", "message": "Add performance benchmarking on dependency resolution component", "committedDate": "2020-03-24T18:51:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5Mzk0OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397393948", "bodyText": "Would this be more accurate - Failed to get active package version in Kernel.", "author": "abanthiy", "createdAt": "2020-03-24T19:04:02Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -295,7 +295,8 @@ protected String mergeSemverRequirements(final Collection<String> packageVersion\n         try {\n             service = EvergreenService.locate(kernel.context, packageName);\n         } catch (ServiceLoadException e) {\n-            logger.atWarn().setCause(e).addKeyValue(\"packageName\", packageName).log(\"Fail to load package\");\n+            logger.atDebug().setCause(e).addKeyValue(\"packageName\", packageName).log(\n+                    \"Fail to load package or package does not exist\");", "originalCommit": "a00e9abcd8826a54e91b6834ca534b7aca68f00b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwNDgxNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397404816", "bodyText": "May be change it to EvergreenBenchmarkTest", "author": "abanthiy", "createdAt": "2020-03-24T19:23:23Z", "path": "src/test/evergreen-kernel-benchmark/mock_artifact_source/PyYAML/3.10.0/recipe.yaml", "diffHunk": "@@ -0,0 +1,6 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: PyYAML\n+Description: Test recipe for Evergreen packages\n+Publisher: Me", "originalCommit": "a00e9abcd8826a54e91b6834ca534b7aca68f00b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwNTMwMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397405303", "bodyText": "Is this as per the recipe format? Quip document shows no Camel case in recipe files.", "author": "abanthiy", "createdAt": "2020-03-24T19:24:21Z", "path": "src/test/evergreen-kernel-benchmark/mock_artifact_source/awscli/1.16.144/recipe.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: awscli\n+Description: Test recipe for Evergreen packages\n+Publisher: Me\n+Version: '1.16.144'\n+Dependencies:", "originalCommit": "a00e9abcd8826a54e91b6834ca534b7aca68f00b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1MTM4MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397451381", "bodyText": "I'm using the current Package pojo https://github.com/aws/aws-greengrass-kernel/blob/master/src/main/java/com/aws/iot/evergreen/packagemanager/models/Package.java#L74-L81 Maybe we should make the keyword case insensitive if possible", "author": "hui-yang", "createdAt": "2020-03-24T20:48:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwNTMwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4MTY1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397481658", "bodyText": "No we just need to be in sync with cloud service which will allow creation of recipes. The format understood by both should be same. For now we can continue with this. When we integrate with cloud this will be addressed.", "author": "abanthiy", "createdAt": "2020-03-24T21:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwNTMwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwNjg0NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397406844", "bodyText": "I would rename this to DependencyResolverBenchmark.", "author": "abanthiy", "createdAt": "2020-03-24T19:27:14Z", "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverIntegration.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+public class DependencyResolverIntegration {", "originalCommit": "a00e9abcd8826a54e91b6834ca534b7aca68f00b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMTI1OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397421259", "bodyText": "Also add a TODO to change the package store to actual store over a network, when it is available? That will also contribute to the dependency resolution performance.", "author": "abanthiy", "createdAt": "2020-03-24T19:53:21Z", "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverIntegration.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+public class DependencyResolverIntegration {\n+\n+    @BenchmarkMode(Mode.AverageTime)\n+    @Fork(1)\n+    @Measurement(iterations = 20)\n+    @Warmup(iterations = 5)\n+    @State(Scope.Benchmark)\n+    public static abstract class DependencyResolutionBenchmark {\n+        private DeploymentDocument jobDoc = new DeploymentDocument(\"mockJob1\",Arrays.asList(\"boto3\", \"awscli\"), Arrays.asList(\n+                new DeploymentPackageConfiguration(\"boto3\", \"1.9.128\", \"\", new HashSet<>(), new ArrayList<>()),\n+                new DeploymentPackageConfiguration(\"awscli\", \"1.16.144\", \"\", new HashSet<>(), new ArrayList<>())\n+        ), \"mockGroup1\", 1L);\n+\n+        private DependencyResolver resolver;\n+\n+        @Setup\n+        public void setup() {\n+            Kernel kernel = new Kernel();\n+            kernel.parseArgs(\"-i\", DependencyResolverIntegration.class.getResource(getConfigFile()).toString());\n+            // We don't need to launch kernel here. Only configuration parsing and main service loading are\n+            // required for this benchmarking.\n+\n+            // TODO: figure out if there's a better way to load resource directory in local package store\n+            // For now, hardcode to be under root of kernel package\n+            Path packagePath = Paths.get(System.getProperty(\"user.dir\"))\n+                    .resolve(\"src/test/evergreen-kernel-benchmark/mock_artifact_source\");\n+            resolver = new DependencyResolver(new LocalPackageStore(packagePath), kernel);", "originalCommit": "a00e9abcd8826a54e91b6834ca534b7aca68f00b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0OTUwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397449508", "bodyText": "My understanding is DR will only interact with the local package store, which will fetch information from remote if needed. But you're right that this definitely need to be updated accordingly when the new package store is available. I'll add a TODO.", "author": "hui-yang", "createdAt": "2020-03-24T20:45:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMTI1OQ=="}], "type": "inlineReview"}, {"oid": "5c773acbfc9b53c99272b9f8f66eac7d5670a1d7", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5c773acbfc9b53c99272b9f8f66eac7d5670a1d7", "message": "Add performance benchmarking on dependency resolution component", "committedDate": "2020-03-24T21:22:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4NjE1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397486151", "bodyText": "This needs to be saved outside of this method, otherwise the reference goes away and the memory will be freed.", "author": "MikeDombo", "createdAt": "2020-03-24T21:56:55Z", "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverBenchmark.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+public class DependencyResolverBenchmark {\n+\n+    @BenchmarkMode(Mode.AverageTime)\n+    @Fork(1)\n+    @Measurement(iterations = 20)\n+    @Warmup(iterations = 5)\n+    @State(Scope.Benchmark)\n+    public static abstract class DRIntegration {\n+        private DeploymentDocument jobDoc = new DeploymentDocument(\"mockJob1\",Arrays.asList(\"boto3\", \"awscli\"), Arrays.asList(\n+                new DeploymentPackageConfiguration(\"boto3\", \"1.9.128\", \"\", new HashSet<>(), new ArrayList<>()),\n+                new DeploymentPackageConfiguration(\"awscli\", \"1.16.144\", \"\", new HashSet<>(), new ArrayList<>())\n+        ), \"mockGroup1\", 1L);\n+\n+        private DependencyResolver resolver;\n+\n+        @Setup\n+        public void setup() {\n+            Kernel kernel = new Kernel();\n+            kernel.parseArgs(\"-i\", DependencyResolverBenchmark.class.getResource(getConfigFile()).toString());\n+            // We don't need to launch kernel here. Only configuration parsing and main service loading are\n+            // required for this benchmarking.\n+\n+            // TODO: Update local package store accordingly when the new implementation is ready\n+            // TODO: Figure out if there's a better way to load resource directory in local package store\n+            // For now, hardcode to be under root of kernel package\n+            Path packagePath = Paths.get(System.getProperty(\"user.dir\"))\n+                    .resolve(\"src/test/evergreen-kernel-benchmark/mock_artifact_source\");\n+            resolver = new DependencyResolver(new LocalPackageStore(packagePath), kernel);\n+        }\n+\n+        @TearDown(Level.Invocation)\n+        public void doTeardown() {\n+            ForcedGcMemoryProfiler.recordUsedMemory();\n+        }\n+\n+        @Benchmark\n+        public List<PackageIdentifier> measure() throws Exception {\n+            List<PackageIdentifier> result = resolver.resolveDependencies(jobDoc);", "originalCommit": "5c773acbfc9b53c99272b9f8f66eac7d5670a1d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f3ec8a484fde73a9fe7353f9047514c1be55ed69", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f3ec8a484fde73a9fe7353f9047514c1be55ed69", "message": "Add performance benchmarking on dependency resolution component", "committedDate": "2020-03-24T22:09:42Z", "type": "commit"}, {"oid": "f3ec8a484fde73a9fe7353f9047514c1be55ed69", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f3ec8a484fde73a9fe7353f9047514c1be55ed69", "message": "Add performance benchmarking on dependency resolution component", "committedDate": "2020-03-24T22:09:42Z", "type": "forcePushed"}]}