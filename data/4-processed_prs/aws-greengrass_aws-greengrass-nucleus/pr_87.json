{"pr_number": 87, "pr_title": "Plug in parameter values from deployments into loaded packages", "pr_createdAt": "2020-02-28T00:00:43Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0MTE3OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87#discussion_r385441178", "bodyText": "Add for the other 3 as well please (artifacts, dependencies, requires)", "author": "chaurah", "createdAt": "2020-02-28T00:05:54Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/Package.java", "diffHunk": "@@ -84,8 +85,8 @@ public Package(@JsonProperty(\"RecipeTemplateVersion\") RecipeTemplateVersion reci\n         this.version = new Semver(version.toString(), Semver.SemverType.NPM);\n         this.description = description;\n         this.publisher = publisher;\n-        this.packageParameters = packageParameters;\n-        this.lifecycle = lifecycle;\n+        this.packageParameters = packageParameters != null ? packageParameters : Collections.emptySet();\n+        this.lifecycle = lifecycle != null ? lifecycle : Collections.emptyMap();\n         this.artifacts = artifacts;", "originalCommit": "9e097ffde65466c839418545518847766e63d6da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0MjQyNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87#discussion_r385442424", "bodyText": "sure", "author": "shaguptashaikh", "createdAt": "2020-02-28T00:10:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0MTE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0MjE0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87#discussion_r385442140", "bodyText": "This should throw an exception I think. packageMetadata or pkg should never be null at this point", "author": "chaurah", "createdAt": "2020-02-28T00:09:01Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -240,8 +239,37 @@ Package loadPackage(String name, Map<String, PackageRegistryEntry> activePackage\n         packageCache.put(packageEntry, pkg);\n \n         for (PackageRegistryEntry.Reference dependOn : packageEntry.getDependsOn().values()) {\n-            pkg.getDependencyPackages().add(loadPackage(dependOn.getName(), activePackages, packageCache));\n+            pkg.getDependencyPackages().add(loadPackage(dependOn.getName(),\n+                    getDependencyPackageMetadata(dependOn.getName(), packageMetadata), activePackages, packageCache));\n         }\n         return pkg;\n     }\n+\n+    private void pluginParameterValues(Package pkg, PackageMetadata packageMetadata) {\n+        if (packageMetadata != null) {", "originalCommit": "9e097ffde65466c839418545518847766e63d6da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0MzQ3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87#discussion_r385443470", "bodyText": "This is part of what I was talking about in the discussion, it can be null if a resolved package different from the proposed package, and so the whole subtree of proposed packages get pruned, and it can be null. This is a big reason I was reluctant, for this demo since there will be no difference this won't happen, but the way the code is organized it can technically happen", "author": "shaguptashaikh", "createdAt": "2020-02-28T00:13:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0MjE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0NzM4Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87#discussion_r385447383", "bodyText": "Would putAll work here?", "author": "MikeDombo", "createdAt": "2020-02-28T00:26:56Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -240,8 +239,37 @@ Package loadPackage(String name, Map<String, PackageRegistryEntry> activePackage\n         packageCache.put(packageEntry, pkg);\n \n         for (PackageRegistryEntry.Reference dependOn : packageEntry.getDependsOn().values()) {\n-            pkg.getDependencyPackages().add(loadPackage(dependOn.getName(), activePackages, packageCache));\n+            pkg.getDependencyPackages().add(loadPackage(dependOn.getName(),\n+                    getDependencyPackageMetadata(dependOn.getName(), packageMetadata), activePackages, packageCache));\n         }\n         return pkg;\n     }\n+\n+    private void pluginParameterValues(Package pkg, PackageMetadata packageMetadata) {\n+        if (packageMetadata != null) {\n+            packageMetadata.getParameters().forEach(parameterFromDeployment -> {", "originalCommit": "9e097ffde65466c839418545518847766e63d6da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1Njc1Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87#discussion_r385456757", "bodyText": "No, this is a set so it has addAll, if the list of parameters for the version in proposed package version has other different parameters than the one resolved, then that will be noisy, so addAll is not the best idea", "author": "shaguptashaikh", "createdAt": "2020-02-28T01:01:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0NzM4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0NzY3OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87#discussion_r385447678", "bodyText": "[nit]\nNeeds reformatting, spacing looks off.", "author": "MikeDombo", "createdAt": "2020-02-28T00:28:03Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageMetadata.java", "diffHunk": "@@ -42,6 +45,8 @@ public PackageMetadata(String name, String version, String versionConstraint, Se\n         this.version = new Semver(version, Semver.SemverType.NPM);\n         this.versionConstraint = versionConstraint;\n         this.dependsOn = dependsOn == null ? Collections.emptySet() : Collections.unmodifiableSet(dependsOn);\n+        this.parameters = parameters == Utils.nullEmpty(parameters)? Collections.emptySet() :", "originalCommit": "9e097ffde65466c839418545518847766e63d6da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NzMyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87#discussion_r385457327", "bodyText": "Fixed", "author": "shaguptashaikh", "createdAt": "2020-02-28T01:03:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0NzY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0NzkwNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87#discussion_r385447906", "bodyText": "[nit]\nParameter not paramater.\nTypo: deployment_set_parameters...", "author": "MikeDombo", "createdAt": "2020-02-28T00:28:54Z", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageManagerTest.java", "diffHunk": "@@ -205,7 +206,79 @@ void GIVEN_packages_not_registered_WHEN_load_package_THEN_fail_to_proceed() {\n         PackageRegistryEntry entryA = new PackageRegistryEntry(\"A\", new Semver(\"1.0.0\"), Collections.emptyMap());\n \n         assertThrows(PackageLoadingException.class,\n-                () -> packageManager.loadPackage(\"B\", Collections.singletonMap(\"A\", entryA), new HashMap<>()),\n+                () -> packageManager.loadPackage(\"B\", null, Collections.singletonMap(\"A\", entryA), new HashMap<>()),\n                 \"package B not found in registry\");\n     }\n+\n+    @Test\n+    void GIVEN_deployment_sets_paramaters_WHEN_load_package_invoked_THEN_plug_in_new_parameter_values()", "originalCommit": "9e097ffde65466c839418545518847766e63d6da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NzMwMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87#discussion_r385457301", "bodyText": "fixed", "author": "shaguptashaikh", "createdAt": "2020-02-28T01:03:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0NzkwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0ODM5NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87#discussion_r385448394", "bodyText": "hamcrest has a contains that would make the error message more readable if you used it.", "author": "MikeDombo", "createdAt": "2020-02-28T00:30:52Z", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageManagerTest.java", "diffHunk": "@@ -205,7 +206,79 @@ void GIVEN_packages_not_registered_WHEN_load_package_THEN_fail_to_proceed() {\n         PackageRegistryEntry entryA = new PackageRegistryEntry(\"A\", new Semver(\"1.0.0\"), Collections.emptyMap());\n \n         assertThrows(PackageLoadingException.class,\n-                () -> packageManager.loadPackage(\"B\", Collections.singletonMap(\"A\", entryA), new HashMap<>()),\n+                () -> packageManager.loadPackage(\"B\", null, Collections.singletonMap(\"A\", entryA), new HashMap<>()),\n                 \"package B not found in registry\");\n     }\n+\n+    @Test\n+    void GIVEN_deployment_sets_paramaters_WHEN_load_package_invoked_THEN_plug_in_new_parameter_values()\n+            throws Exception {\n+        // GIVEN\n+        PackageRegistryEntry entryA = new PackageRegistryEntry(\"A\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryB = new PackageRegistryEntry(\"B\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryC = new PackageRegistryEntry(\"C\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+\n+        entryA.getDependsOn().put(\"B\", new PackageRegistryEntry.Reference(\"B\", new Semver(\"1.0.0\"), \"1.0.0\"));\n+        entryA.getDependsOn().put(\"C\", new PackageRegistryEntry.Reference(\"C\", new Semver(\"1.0.0\"), \"1.0.0\"));\n+        List<PackageRegistryEntry> activePackages = Arrays.asList(entryA, entryB, entryC);\n+        when(packageRegistry.findActivePackages()).thenReturn(activePackages);\n+\n+\n+        Set<PackageParameter> packageAParams = new HashSet<>(\n+                Arrays.asList(new PackageParameter(\"PackageA_param1\", \"PackageA_param1_default\", \"String\"),\n+                        new PackageParameter(\"PackageA_param2\", \"PackageA_param2_default\", \"String\")));\n+        Set<PackageParameter> packageBParams = new HashSet<>(\n+                Arrays.asList(new PackageParameter(\"PackageB_param1\", \"PackageB_param1_default\", \"String\"),\n+                        new PackageParameter(\"PackageB_param2\", \"PackageB_param2_default\", \"String\")));\n+        Set<PackageParameter> packageCParams = new HashSet<>(\n+                Arrays.asList(new PackageParameter(\"PackageC_param1\", \"PackageC_param1_default\", \"String\"),\n+                        new PackageParameter(\"PackageC_param2\", \"PackageC_param2_default\", \"String\")));\n+\n+        Package pkgA = new Package(null, \"A\", new Semver(\"1.0.0\"), null, null, packageAParams, null, null, null, null);\n+        when(packageStore.getPackage(\"A\", new Semver(\"1.0.0\"))).thenReturn(Optional.of(pkgA));\n+        Package pkgB = new Package(null, \"B\", new Semver(\"1.0.0\"), null, null, packageBParams, null, null, null, null);\n+        when(packageStore.getPackage(\"B\", new Semver(\"1.0.0\"))).thenReturn(Optional.of(pkgB));\n+        Package pkgC = new Package(null, \"C\", new Semver(\"1.0.0\"), null, null, packageCParams, null, null, null, null);\n+        when(packageStore.getPackage(\"C\", new Semver(\"1.0.0\"))).thenReturn(Optional.of(pkgC));\n+\n+        PackageMetadata pkgMetadatsB = new PackageMetadata(\"B\", \"1.0.0\", \"1.0.0\", Collections.emptySet(),\n+                Collections.singleton(new PackageParameter(\"PackageB_param1\", \"PackageB_param1_value\", \"String\")));\n+        PackageMetadata pkgMetadatsC =\n+                new PackageMetadata(\"C\", \"1.0.0\", \"1.0.0\", Collections.emptySet(), Collections.emptySet());\n+        PackageMetadata pkgMetadatsA =\n+                new PackageMetadata(\"A\", \"1.0.0\", \"1.0.0\", new HashSet<>(Arrays.asList(pkgMetadatsB, pkgMetadatsC)),\n+                        new HashSet<>(Arrays.asList(\n+                                new PackageParameter(\"PackageA_param1\", \"PackageA_param1_value\", \"String\"),\n+                                new PackageParameter(\"PackageA_param2\", \"PackageA_param2_value\", \"String\"))));\n+\n+        // WHEN\n+        Set<Package> resolvedPackages = packageManager.resolvePackages(Collections.singleton(pkgMetadatsA)).get();\n+        Package resultPackageA = findPackageInSet(resolvedPackages, \"A\");\n+        Package resultPackageB = findPackageInSet(resultPackageA.getDependencyPackages(), \"B\");\n+        Package resultPackageC = findPackageInSet(resultPackageA.getDependencyPackages(), \"C\");\n+\n+        // THEN\n+        assertThat(\"If all param values were overridden, all should be loaded into package\",", "originalCommit": "9e097ffde65466c839418545518847766e63d6da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NzI4OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87#discussion_r385457288", "bodyText": "Will do that in follow ups", "author": "shaguptashaikh", "createdAt": "2020-02-28T01:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0ODM5NA=="}], "type": "inlineReview"}, {"oid": "0e182b77cc0c9fe43bb06386979ba792d6ac586a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0e182b77cc0c9fe43bb06386979ba792d6ac586a", "message": "Plug in parameter values from deployments into loaded packages", "committedDate": "2020-02-28T00:55:27Z", "type": "forcePushed"}, {"oid": "ca4f98275952a155bd598857fd63527851ff2994", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ca4f98275952a155bd598857fd63527851ff2994", "message": "Plug in parameter values from deployments into loaded packages", "committedDate": "2020-02-28T01:01:43Z", "type": "commit"}, {"oid": "ca4f98275952a155bd598857fd63527851ff2994", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ca4f98275952a155bd598857fd63527851ff2994", "message": "Plug in parameter values from deployments into loaded packages", "committedDate": "2020-02-28T01:01:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MDcwMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87#discussion_r385460700", "bodyText": "[nit]\nSeems like name can be removed since we have the metadata which contains the name.", "author": "MikeDombo", "createdAt": "2020-02-28T01:15:48Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -208,17 +207,17 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n         return downloadedPackages;\n     }\n \n-    private Set<Package> loadPackages(Set<String> packageNames, Map<String, PackageRegistryEntry> activePackages)\n-            throws PackageLoadingException {\n+    private Set<Package> loadPackages(Set<PackageMetadata> proposedPackages,\n+                                      Map<String, PackageRegistryEntry> activePackages) throws PackageLoadingException {\n         Set<Package> packages = new HashSet<>();\n         Map<PackageRegistryEntry, Package> packageCache = new HashMap<>();\n-        for (String packageName : packageNames) {\n-            packages.add(loadPackage(packageName, activePackages, packageCache));\n+        for (PackageMetadata proposedPackage : proposedPackages) {\n+            packages.add(loadPackage(proposedPackage.getName(), proposedPackage, activePackages, packageCache));\n         }\n         return packages;\n     }\n \n-    Package loadPackage(String name, Map<String, PackageRegistryEntry> activePackages,\n+    Package loadPackage(String name, PackageMetadata packageMetadata, Map<String, PackageRegistryEntry> activePackages,", "originalCommit": "ca4f98275952a155bd598857fd63527851ff2994", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MTAzNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87#discussion_r385471037", "bodyText": "It can't be, because the recursive call is made using the resolved package name on line 243, it won't work in cases where - Proposed packages are Pa   1.0.2 > 1.0.0 ->   no dependency\nand resolved packages are Pa   1.0.1 > 1.0.0   -> depends on ->   Pb 1.0.3 > 1.0.0   -> depends on  -> more packages\nIn this case since deployment doesn't have Pb, then packageMetadata for Pb will be null so if the name is not passed Pb will never be processed\nAnother reason this is really sketchy and easy to lose track of", "author": "shaguptashaikh", "createdAt": "2020-02-28T01:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MDcwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MTM4NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87#discussion_r385471384", "bodyText": "Yikes, ok. Definitely needs refactoring, but that's for later.", "author": "MikeDombo", "createdAt": "2020-02-28T01:57:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MDcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2MDk0NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/87#discussion_r385460944", "bodyText": "Why are we adding and removing the same thing?", "author": "MikeDombo", "createdAt": "2020-02-28T01:16:46Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -237,11 +236,42 @@ Package loadPackage(String name, Map<String, PackageRegistryEntry> activePackage\n \n         Package pkg = packageOptional\n                 .orElseThrow(() -> new PackageLoadingException(String.format(\"package %s not found\", name)));\n+        pluginParameterValues(pkg, packageMetadata);\n         packageCache.put(packageEntry, pkg);\n \n         for (PackageRegistryEntry.Reference dependOn : packageEntry.getDependsOn().values()) {\n-            pkg.getDependencyPackages().add(loadPackage(dependOn.getName(), activePackages, packageCache));\n+            pkg.getDependencyPackages().add(loadPackage(dependOn.getName(),\n+                    getDependencyPackageMetadata(dependOn.getName(), packageMetadata), activePackages, packageCache));\n         }\n         return pkg;\n     }\n+\n+    private void pluginParameterValues(Package pkg, PackageMetadata packageMetadata) {\n+        if (packageMetadata != null) {\n+            packageMetadata.getParameters().forEach(parameterFromDeployment -> {\n+                if (pkg.getPackageParameters().contains(parameterFromDeployment)) {\n+                    pkg.getPackageParameters().remove(parameterFromDeployment);\n+                    pkg.getPackageParameters().add(parameterFromDeployment);", "originalCommit": "ca4f98275952a155bd598857fd63527851ff2994", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5c65d28840fc2934859f62ff38a69fee5eea03ee", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5c65d28840fc2934859f62ff38a69fee5eea03ee", "message": "Merge branch 'master' into plug-in-parameters", "committedDate": "2020-02-28T01:19:08Z", "type": "commit"}]}