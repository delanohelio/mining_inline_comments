{"pr_number": 34, "pr_title": "Server-side framework implementation for Service Discovery", "pr_createdAt": "2020-01-16T00:14:43Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/34", "timeline": [{"oid": "a2d900f095a3cfb5505530cc4a6b216bf0e492f1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a2d900f095a3cfb5505530cc4a6b216bf0e492f1", "message": "Server-side framework implementation for Service Discovery", "committedDate": "2020-01-16T02:18:01Z", "type": "commit"}, {"oid": "a2d900f095a3cfb5505530cc4a6b216bf0e492f1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a2d900f095a3cfb5505530cc4a6b216bf0e492f1", "message": "Server-side framework implementation for Service Discovery", "committedDate": "2020-01-16T02:18:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI1NTI2MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/34#discussion_r367255261", "bodyText": "ABC? other wise looks good", "author": "fahadmohammed01", "createdAt": "2020-01-16T06:49:12Z", "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/ServiceDiscoveryService.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package com.aws.iot.evergreen.ipc.modules;\n+\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.ipc.common.FrameReader.Message;\n+import com.aws.iot.evergreen.ipc.exceptions.IPCException;\n+import com.aws.iot.evergreen.ipc.handler.MessageDispatcher;\n+import com.aws.iot.evergreen.ipc.services.ServiceDiscovery.LookupResourceRequest;\n+import com.aws.iot.evergreen.ipc.services.ServiceDiscovery.RegisterResourceRequest;\n+import com.aws.iot.evergreen.ipc.services.ServiceDiscovery.RemoveResourceRequest;\n+import com.aws.iot.evergreen.ipc.services.ServiceDiscovery.Resource;\n+import com.aws.iot.evergreen.ipc.services.ServiceDiscovery.ServiceDiscoveryResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.ServiceDiscovery.ServiceDiscoveryRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.ServiceDiscovery.UpdateResourceRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.SendAndReceiveIPCUtil;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.util.Log;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.cbor.databind.CBORMapper;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+\n+import static com.aws.iot.evergreen.ipc.services.ServiceDiscovery.ServiceDiscovery.SERVICE_DISCOVERY_NAME;\n+import static com.aws.iot.evergreen.util.Log.Level;\n+\n+\n+//TODO: see if this needs to be a GGService\n+@ImplementsService(name = \"servicediscovery\", autostart = true)\n+public class ServiceDiscoveryService extends EvergreenService {\n+    private ObjectMapper mapper = new CBORMapper();\n+\n+    //TODO: figure out how to inject the interface than the impl\n+    @Inject\n+    private MessageDispatcher messageDispatcher;\n+\n+    @Inject\n+    Log log;\n+\n+    public ServiceDiscoveryService(Topics c) {\n+        super(c);\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        try {\n+            messageDispatcher.registerServiceCallback(SERVICE_DISCOVERY_NAME, this::handleMessage);\n+        } catch (IPCException e) {\n+            log.log(Level.Error,\"Error registering callback for service \"+ SERVICE_DISCOVERY_NAME);\n+        }\n+    }\n+\n+    public Message handleMessage(Message request) {\n+        // TODO: Input validation\n+\n+        try {\n+            GeneralRequest<Object, ServiceDiscoveryRequestTypes> obj = SendAndReceiveIPCUtil.decode(request, new TypeReference<GeneralRequest<Object, ServiceDiscoveryRequestTypes>>() {});\n+\n+            GeneralResponse<Object, ServiceDiscoveryResponseStatus> genResp = new GeneralResponse<>();\n+            switch (obj.type) {\n+                case lookup:\n+                    LookupResourceRequest lookup = mapper.convertValue(obj.request, LookupResourceRequest.class);\n+                    // Do lookup\n+                    genResp.error = ServiceDiscoveryResponseStatus.Success;\n+                    genResp.response = new ArrayList<Resource>();\n+                    break;\n+                case remove:\n+                    RemoveResourceRequest remove = mapper.convertValue(obj.request, RemoveResourceRequest.class);\n+                    // Do remove\n+                    genResp.error = ServiceDiscoveryResponseStatus.Success;\n+                    break;\n+                case update:\n+                    UpdateResourceRequest update = mapper.convertValue(obj.request, UpdateResourceRequest.class);\n+                    // Do update\n+                    genResp.error = ServiceDiscoveryResponseStatus.Success;\n+                    break;\n+                case register:\n+                    RegisterResourceRequest register = mapper.convertValue(obj.request, RegisterResourceRequest.class);\n+                    // Do register\n+                    genResp.error = ServiceDiscoveryResponseStatus.Success;\n+                    Resource resource = new Resource();\n+                    resource.name = \"ABC\";", "originalCommit": "a2d900f095a3cfb5505530cc4a6b216bf0e492f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI2NjA5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/34#discussion_r367266091", "bodyText": "Yeah, obviously this needs the real code in it. Your backend implementation goes there, or rather a call to the backend.", "author": "MikeDombo", "createdAt": "2020-01-16T07:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI1NTI2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI3MTk2Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/34#discussion_r367271967", "bodyText": "The review is in draft so there is not approve button. I don't see that you changed any tests but the build is failing.  Is it because of the corresponding changes in SDK", "author": "fahadmohammed01", "createdAt": "2020-01-16T07:49:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI1NTI2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUwOTcwMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/34#discussion_r367509702", "bodyText": "I'll check once I get in. I need to log into the AWS account.", "author": "MikeDombo", "createdAt": "2020-01-16T16:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI1NTI2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzNjkzNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/34#discussion_r367536936", "bodyText": "Yes, it is because the IPC SDK hasn't merged yet.", "author": "MikeDombo", "createdAt": "2020-01-16T16:57:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI1NTI2MQ=="}], "type": "inlineReview"}, {"oid": "2b2d6e6428c4abbc7ecc6213a97a97d99f195795", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2b2d6e6428c4abbc7ecc6213a97a97d99f195795", "message": "Merge branch 'master' into service_discovery", "committedDate": "2020-01-16T18:40:58Z", "type": "commit"}]}