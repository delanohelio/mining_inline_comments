{"pr_number": 139, "pr_title": "Add PMD checks and clean up code", "pr_createdAt": "2020-03-26T16:46:45Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139", "timeline": [{"oid": "8499ee8717f3ffa58165a6f734dc0c99f08d6ad3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8499ee8717f3ffa58165a6f734dc0c99f08d6ad3", "message": "Add PMD checks and clean up code", "committedDate": "2020-03-26T17:10:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2OTk3NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r398769975", "bodyText": "Where is this ruleset copied from? Curious how we decide which to exclude.", "author": "fengwang666", "createdAt": "2020-03-26T17:46:28Z", "path": "codestyle/pmd-eg-ruleset.xml", "diffHunk": "@@ -0,0 +1,78 @@\n+<?xml version=\"1.0\"?>\n+\n+<!--\n+  ~ Copyright Amazon.com Inc. or its affiliates.\n+  ~ SPDX-License-Identifier: Apache-2.0\n+  -->\n+\n+<ruleset name=\"Custom Rules\"", "originalCommit": "8499ee8717f3ffa58165a6f734dc0c99f08d6ad3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3MTQ5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r398771491", "bodyText": "I took all of their rules and then just manually excluded rules which I felt were not needed.", "author": "MikeDombo", "createdAt": "2020-03-26T17:48:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2OTk3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3MjEzMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r398772131", "bodyText": "Is logger initalized at this point?", "author": "ShirleyZheng92", "createdAt": "2020-03-26T17:49:38Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -216,7 +213,7 @@ private void initPaths(String rootAbsolutePath) {\n      * Startup the Kernel and all services.\n      */\n     public Kernel launch() {\n-        System.out.println(\"root path = \" + rootPath + \"\\n\\t\" + configPath);\n+        logger.atInfo().log(\"root path = {}. config path = {}\", rootPath, configPath);", "originalCommit": "8499ee8717f3ffa58165a6f734dc0c99f08d6ad3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3MzAxNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r398773017", "bodyText": "Since it uses system properties, yes it is usable at this point.", "author": "MikeDombo", "createdAt": "2020-03-26T17:50:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3MjEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3NTMyMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r398775320", "bodyText": "nice!", "author": "ShirleyZheng92", "createdAt": "2020-03-26T17:54:15Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -890,31 +891,27 @@ public void postInject() {\n                 }\n             }\n             if (x == null) {\n-                throw new Exception(startWhen + \" does not match any EvergreenService state name\");\n+                throw new InputValidationException(startWhen + \" does not match any EvergreenService state name\");\n             }\n         }\n \n         EvergreenService d = locate(context, name);\n-        if (d != null) {\n-            return new Pair<>(d, x == null ? State.RUNNING : x);\n-        } else {\n-            throw new Exception(\"Could not locate service \" + name);\n-        }\n+        return new Pair<>(d, x == null ? State.RUNNING : x);", "originalCommit": "8499ee8717f3ffa58165a6f734dc0c99f08d6ad3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3NzEyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r398777127", "bodyText": "Is this also enforced by the checkstyle rule? Will it be too strict?", "author": "ShirleyZheng92", "createdAt": "2020-03-26T17:56:41Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -90,7 +92,7 @@ public void startup() {\n             synchronized (pendingActions) {\n                 if (pendingActions.isEmpty()) {\n                     try {\n-                        pendingActions.wait(10000);\n+                        pendingActions.wait(10_000);", "originalCommit": "8499ee8717f3ffa58165a6f734dc0c99f08d6ad3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5MjM0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r398792340", "bodyText": "Not enforce by checkstyle (otherwise we would have been failing). This is not too strict, it is an easy fix to add the _ as a separator. If we want, we can always disable it.", "author": "MikeDombo", "createdAt": "2020-03-26T18:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3NzEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3OTYwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r398779605", "bodyText": "I think rules like TooManyFields and TooManyMethods can be useful for readability as we write more new code, but we can discuss within the team first", "author": "shaguptashaikh", "createdAt": "2020-03-26T18:00:20Z", "path": "codestyle/pmd-eg-ruleset.xml", "diffHunk": "@@ -0,0 +1,78 @@\n+<?xml version=\"1.0\"?>\n+\n+<!--\n+  ~ Copyright Amazon.com Inc. or its affiliates.\n+  ~ SPDX-License-Identifier: Apache-2.0\n+  -->\n+\n+<ruleset name=\"Custom Rules\"\n+         xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd\">\n+    <description>\n+        Evergreen Custom Rules\n+    </description>\n+\n+    <rule ref=\"category/java/bestpractices.xml\">\n+        <exclude name=\"AvoidReassigningParameters\"/>\n+        <exclude name=\"AvoidReassigningLoopVariables\"/>\n+        <exclude name=\"ArrayIsStoredDirectly\"/>\n+        <exclude name=\"GuardLogStatement\"/>\n+        <exclude name=\"AccessorMethodGeneration\"/>\n+    </rule>\n+    <rule ref=\"category/java/codestyle.xml\">\n+        <exclude name=\"LocalVariableCouldBeFinal\"/>\n+        <exclude name=\"MethodArgumentCouldBeFinal\"/>\n+        <exclude name=\"ShortVariable\"/>\n+        <exclude name=\"OnlyOneReturn\"/>\n+        <exclude name=\"FieldNamingConventions\"/>\n+        <exclude name=\"ClassNamingConventions\"/>\n+        <exclude name=\"ShortClassName\"/>\n+        <exclude name=\"CommentDefaultAccessModifier\"/>\n+        <exclude name=\"DefaultPackage\"/>\n+        <exclude name=\"ShortMethodName\"/>\n+        <exclude name=\"LongVariable\"/>\n+        <exclude name=\"AtLeastOneConstructor\"/>\n+    </rule>\n+    <rule ref=\"category/java/design.xml\">\n+        <exclude name=\"LoosePackageCoupling\"/>\n+        <exclude name=\"LawOfDemeter\"/>\n+        <exclude name=\"CyclomaticComplexity\"/>\n+        <exclude name=\"NcssCount\"/>\n+        <exclude name=\"TooManyMethods\"/>\n+        <exclude name=\"GodClass\"/>\n+        <exclude name=\"NPathComplexity\"/>\n+        <exclude name=\"AvoidThrowingRawExceptionTypes\"/>\n+        <exclude name=\"SingularField\"/>\n+        <exclude name=\"ExcessiveMethodLength\"/>\n+        <exclude name=\"ExcessiveImports\"/>\n+        <exclude name=\"TooManyFields\"/>", "originalCommit": "8499ee8717f3ffa58165a6f734dc0c99f08d6ad3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "254c2e6e61afae14dd4026d8eef9357b02e487f9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/254c2e6e61afae14dd4026d8eef9357b02e487f9", "message": "Apply PMD to tests. Add rule for Future.get()", "committedDate": "2020-03-26T18:50:32Z", "type": "forcePushed"}, {"oid": "b2aa0c5af24d743b054b22ae62471befa865f01e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b2aa0c5af24d743b054b22ae62471befa865f01e", "message": "Apply PMD to tests. Add rule for Future.get()", "committedDate": "2020-03-26T19:17:14Z", "type": "forcePushed"}, {"oid": "07965b5b3d792dd3cf30e79d69497b0409426e40", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/07965b5b3d792dd3cf30e79d69497b0409426e40", "message": "Apply PMD to tests. Add rule for Future.get()", "committedDate": "2020-03-26T21:48:04Z", "type": "forcePushed"}, {"oid": "d01185f2eb6ed4a6693385cb60f24342d7850c60", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d01185f2eb6ed4a6693385cb60f24342d7850c60", "message": "Apply PMD to tests. Add rule for Future.get()", "committedDate": "2020-03-26T21:57:06Z", "type": "forcePushed"}, {"oid": "43bb9a608d7e243cb8b7dbb339d0bccae0ca58f4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/43bb9a608d7e243cb8b7dbb339d0bccae0ca58f4", "message": "Add PMD checks and clean up code", "committedDate": "2020-03-27T01:18:07Z", "type": "commit"}, {"oid": "a82c536b6e2ff3b271b02cd2a08f3dc063241891", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a82c536b6e2ff3b271b02cd2a08f3dc063241891", "message": "Apply PMD to tests. Add rule for Future.get()", "committedDate": "2020-03-27T01:20:49Z", "type": "commit"}, {"oid": "a82c536b6e2ff3b271b02cd2a08f3dc063241891", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a82c536b6e2ff3b271b02cd2a08f3dc063241891", "message": "Apply PMD to tests. Add rule for Future.get()", "committedDate": "2020-03-27T01:20:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NjUzNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r399056536", "bodyText": "NIce! I like this rule", "author": "fahadmohammed01", "createdAt": "2020-03-27T06:21:53Z", "path": "codestyle/pmd-eg-tests-ruleset.xml", "diffHunk": "@@ -0,0 +1,109 @@\n+<?xml version=\"1.0\"?>\n+\n+<!--\n+  ~ Copyright Amazon.com Inc. or its affiliates.\n+  ~ SPDX-License-Identifier: Apache-2.0\n+  -->\n+\n+<ruleset name=\"Custom Test Class Rules\"\n+         xmlns=\"http://pmd.sourceforge.net/ruleset/2.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd\">\n+    <description>\n+        Evergreen Custom Rules\n+    </description>\n+\n+    <exclude-pattern>.*</exclude-pattern>\n+    <include-pattern>.*Test.*</include-pattern>\n+\n+    <rule ref=\"category/java/bestpractices.xml\">\n+        <exclude name=\"AvoidReassigningParameters\"/>\n+        <exclude name=\"AvoidReassigningLoopVariables\"/>\n+        <exclude name=\"ArrayIsStoredDirectly\"/>\n+        <exclude name=\"GuardLogStatement\"/>\n+        <exclude name=\"AccessorMethodGeneration\"/>\n+        <exclude name=\"JUnitAssertionsShouldIncludeMessage\"/>\n+        <exclude name=\"JUnitTestContainsTooManyAsserts\"/>\n+        <exclude name=\"JUnitTestsShouldIncludeAssert\"/>\n+        <exclude name=\"SystemPrintln\"/>\n+        <exclude name=\"DoubleBraceInitialization\"/>\n+    </rule>\n+    <rule ref=\"category/java/codestyle.xml\">\n+        <exclude name=\"LocalVariableCouldBeFinal\"/>\n+        <exclude name=\"MethodArgumentCouldBeFinal\"/>\n+        <exclude name=\"ShortVariable\"/>\n+        <exclude name=\"OnlyOneReturn\"/>\n+        <exclude name=\"FieldNamingConventions\"/>\n+        <exclude name=\"ClassNamingConventions\"/>\n+        <exclude name=\"ShortClassName\"/>\n+        <exclude name=\"CommentDefaultAccessModifier\"/>\n+        <exclude name=\"DefaultPackage\"/>\n+        <exclude name=\"ShortMethodName\"/>\n+        <exclude name=\"LongVariable\"/>\n+        <exclude name=\"AtLeastOneConstructor\"/>\n+        <exclude name=\"TooManyStaticImports\"/>\n+        <exclude name=\"MethodNamingConventions\"/>\n+        <exclude name=\"UseUnderscoresInNumericLiterals\"/>\n+        <exclude name=\"LocalVariableNamingConventions\"/>\n+    </rule>\n+    <rule ref=\"category/java/design.xml\">\n+        <exclude name=\"LoosePackageCoupling\"/>\n+        <exclude name=\"LawOfDemeter\"/>\n+        <exclude name=\"CyclomaticComplexity\"/>\n+        <exclude name=\"NcssCount\"/>\n+        <exclude name=\"TooManyMethods\"/>\n+        <exclude name=\"GodClass\"/>\n+        <exclude name=\"NPathComplexity\"/>\n+        <exclude name=\"AvoidThrowingRawExceptionTypes\"/>\n+        <exclude name=\"SingularField\"/>\n+        <exclude name=\"ExcessiveMethodLength\"/>\n+        <exclude name=\"ExcessiveImports\"/>\n+        <exclude name=\"TooManyFields\"/>\n+        <exclude name=\"SignatureDeclareThrowsException\"/>\n+        <exclude name=\"CollapsibleIfStatements\"/>\n+    </rule>\n+    <rule ref=\"category/java/errorprone.xml\">\n+        <exclude name=\"DataflowAnomalyAnalysis\"/>\n+        <exclude name=\"UseLocaleWithCaseConversions\"/>\n+        <exclude name=\"AvoidLiteralsInIfCondition\"/>\n+        <exclude name=\"BeanMembersShouldSerialize\"/>\n+        <exclude name=\"EmptyCatchBlock\"/> <!-- Checkstyle already finds this issue -->\n+        <exclude name=\"AvoidFieldNameMatchingMethodName\"/>\n+        <exclude name=\"UseProperClassLoader\"/>\n+        <exclude name=\"AvoidDuplicateLiterals\"/>\n+        <exclude name=\"JUnitSpelling\"/>\n+    </rule>\n+    <rule ref=\"category/java/multithreading.xml\">\n+        <exclude name=\"DoNotUseThreads\"/>\n+        <exclude name=\"AvoidSynchronizedAtMethodLevel\"/>\n+        <exclude name=\"UseConcurrentHashMap\"/> <!-- Not every map is accessed from multiple threads -->\n+        <exclude name=\"AvoidUsingVolatile\"/>", "originalCommit": "a82c536b6e2ff3b271b02cd2a08f3dc063241891", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA2MjAxOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r399062018", "bodyText": "Did the PMD catch this?", "author": "fahadmohammed01", "createdAt": "2020-03-27T06:40:45Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCServicesTest.java", "diffHunk": "@@ -109,7 +109,7 @@ void registerResourceTest() throws Exception {\n         // we're looking it up based on service type only\n         LookupResourceRequest fuzzyLookup =\n                 LookupResourceRequest.builder().resource(resource.toBuilder().name(null).build()).build();\n-        lookupResults = c.lookupResources(lookup);\n+        lookupResults = c.lookupResources(fuzzyLookup);", "originalCommit": "a82c536b6e2ff3b271b02cd2a08f3dc063241891", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4NzE2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r399287165", "bodyText": "Yes because it was an unused var.", "author": "MikeDombo", "createdAt": "2020-03-27T14:03:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA2MjAxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3NDEyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r399074121", "bodyText": "Why remove private?", "author": "fahadmohammed01", "createdAt": "2020-03-27T07:18:19Z", "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "diffHunk": "@@ -91,16 +92,16 @@\n     private String[] environment = defaultEnvironment;\n     private String[] cmds;\n     private File dir = userdir;\n-    private Process process;\n+    Process process;", "originalCommit": "a82c536b6e2ff3b271b02cd2a08f3dc063241891", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4Nzg3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/139#discussion_r399287870", "bodyText": "Because we access it from an inner class, Java generates an accessor since it is private which they have as a performance issue.", "author": "MikeDombo", "createdAt": "2020-03-27T14:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA3NDEyMQ=="}], "type": "inlineReview"}]}