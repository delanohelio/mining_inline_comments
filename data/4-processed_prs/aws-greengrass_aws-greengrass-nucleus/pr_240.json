{"pr_number": 240, "pr_title": "First draft for token exchange service", "pr_createdAt": "2020-05-13T19:22:01Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240", "timeline": [{"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "message": "First draft for token exchange service", "committedDate": "2020-05-13T19:08:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NzUxNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424677514", "bodyText": "nit: capitalize", "author": "MikeDombo", "createdAt": "2020-05-13T19:24:28Z", "path": "src/main/java/com/aws/iot/evergreen/tes/HttpServerImpl.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class HttpServerImpl implements Server {\n+    public static final String URL = \"/2016-11-01/credentialprovider/\";\n+    private static final int timeToWaitBeforeShutdownInSeconds = 1;", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5ODk2Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424698963", "bodyText": "ok", "author": "prateek-y", "createdAt": "2020-05-13T20:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NzUxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3ODA1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424678051", "bodyText": "Is this listening to all interfaces or just the localhost? IMO it should just listen to localhost because off-box stuff shouldn't have any access to it.", "author": "MikeDombo", "createdAt": "2020-05-13T19:25:29Z", "path": "src/main/java/com/aws/iot/evergreen/tes/HttpServerImpl.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class HttpServerImpl implements Server {\n+    public static final String URL = \"/2016-11-01/credentialprovider/\";\n+    private static final int timeToWaitBeforeShutdownInSeconds = 1;\n+    private final HttpServer httpImpl;\n+\n+    @Inject\n+    private HttpHandler credentialRequestHandler;\n+\n+    /**\n+     * Constructor.\n+     * @param port Http server port\n+     * @throws IOException When server creation fails\n+     */\n+    HttpServerImpl(int port) throws IOException {\n+        // TODO: validate port\n+        httpImpl = HttpServer.create(new InetSocketAddress(port), 0);", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxNDU3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424714574", "bodyText": "Yes. Thats right. will change", "author": "prateek-y", "createdAt": "2020-05-13T20:33:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3ODA1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3ODkyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424678921", "bodyText": "Looks like you don't actually use DI for this, so just remove the @Inject and @Singleton.", "author": "MikeDombo", "createdAt": "2020-05-13T19:27:02Z", "path": "src/main/java/com/aws/iot/evergreen/tes/HttpServerImpl.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class HttpServerImpl implements Server {\n+    public static final String URL = \"/2016-11-01/credentialprovider/\";\n+    private static final int timeToWaitBeforeShutdownInSeconds = 1;\n+    private final HttpServer httpImpl;\n+\n+    @Inject", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5OTAyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424699021", "bodyText": "ok", "author": "prateek-y", "createdAt": "2020-05-13T20:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3ODkyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3OTIzNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424679235", "bodyText": "Why no executor? Can you add a comment explaining why we don't want one.", "author": "MikeDombo", "createdAt": "2020-05-13T19:27:36Z", "path": "src/main/java/com/aws/iot/evergreen/tes/HttpServerImpl.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class HttpServerImpl implements Server {\n+    public static final String URL = \"/2016-11-01/credentialprovider/\";\n+    private static final int timeToWaitBeforeShutdownInSeconds = 1;\n+    private final HttpServer httpImpl;\n+\n+    @Inject\n+    private HttpHandler credentialRequestHandler;\n+\n+    /**\n+     * Constructor.\n+     * @param port Http server port\n+     * @throws IOException When server creation fails\n+     */\n+    HttpServerImpl(int port) throws IOException {\n+        // TODO: validate port\n+        httpImpl = HttpServer.create(new InetSocketAddress(port), 0);\n+    }\n+\n+    /**\n+     * Constructor for Unit testing.\n+     * @param port Http server port\n+     * @param credentialRequestHandler request handler for server requests\n+     * @throws IOException When server creation fails\n+     */\n+    HttpServerImpl(int port, HttpHandler credentialRequestHandler) throws IOException {\n+        httpImpl = HttpServer.create(new InetSocketAddress(port), 0);\n+        this.credentialRequestHandler = credentialRequestHandler;\n+    }\n+\n+    @Override\n+    public void start() {\n+        httpImpl.createContext(URL, credentialRequestHandler);\n+        httpImpl.setExecutor(null);", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5OTc5NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424699794", "bodyText": "I will add a comment, need to think about sharing executor pools with kernel. Also, I dont want TES to consume more than 1 thread as there is no performance requirements, unless load tests indicate otherwise.", "author": "prateek-y", "createdAt": "2020-05-13T20:05:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3OTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1ODA4Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425458082", "bodyText": "Does it mean this httpImpl can only handle one request at a time?", "author": "fufranci", "createdAt": "2020-05-14T22:07:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3OTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMTU5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425501591", "bodyText": "yes. Thats the intent. Since mostly we would serve from cache it should be ok. We could think about executor later on.", "author": "prateek-y", "createdAt": "2020-05-15T00:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3OTIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MDc1Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424680752", "bodyText": "Look at the preview of this file, because the formatting doesn't really make sense due to this line being split on 2 lines.", "author": "MikeDombo", "createdAt": "2020-05-13T19:30:24Z", "path": "src/main/java/com/aws/iot/evergreen/tes/README.md", "diffHunk": "@@ -0,0 +1,10 @@\n+# TokenExchangeService is responsible for vending AWS credentials for device certificates, so that components running", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5OTkwMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424699900", "bodyText": "ok", "author": "prateek-y", "createdAt": "2020-05-13T20:06:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MDc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTE5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424681192", "bodyText": "don't create your own logger. Use the logger from the EvergreenService.", "author": "MikeDombo", "createdAt": "2020-05-13T19:31:13Z", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.DeviceConfigurationHelper;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.deployment.model.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@ImplementsService(name = \"TokenExchangeService\", autostart = false)\n+@Singleton\n+public class TokenExchangeService extends EvergreenService {\n+    private static final Logger LOGGER = LogManager.getLogger(TokenExchangeService.class);", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMzE3NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424733175", "bodyText": "What do we do for other classes? Changed this.", "author": "prateek-y", "createdAt": "2020-05-13T21:10:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTE5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNDY5OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424734698", "bodyText": "Other classes can use their own logger, but services should use the service logger.", "author": "MikeDombo", "createdAt": "2020-05-13T21:13:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTE5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTY2Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424681666", "bodyText": "setting the port isn't sufficient right? You need to restart the http server I'd assume.", "author": "MikeDombo", "createdAt": "2020-05-13T19:32:14Z", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.DeviceConfigurationHelper;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.deployment.model.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@ImplementsService(name = \"TokenExchangeService\", autostart = false)\n+@Singleton\n+public class TokenExchangeService extends EvergreenService {\n+    private static final Logger LOGGER = LogManager.getLogger(TokenExchangeService.class);\n+    private int port;\n+    private String iotEndpoint;\n+    private HttpServerImpl server;\n+    @Inject\n+    private DeviceConfigurationHelper deviceConfigurationHelper;\n+\n+    @Inject\n+    private IotConnectionManagerFactory iotConnectionManagerFactory;\n+\n+    /**\n+     * Constructor.\n+     * @param topics the configuration coming from kernel\n+     */\n+    public TokenExchangeService(Topics topics) {\n+        super(topics);\n+        // TODO: Add support for other params like role Aliases\n+        topics.lookup(\"port\")\n+                .dflt(6666)\n+                .subscribe((why, newv) ->\n+                        port = Coerce.toInt(newv));", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMjQwMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424732402", "bodyText": "yeah. will add TODO.", "author": "prateek-y", "createdAt": "2020-05-13T21:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MjA3MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424682071", "bodyText": "What endpoint is this? We already have a mqtt endpoint configuration topic. If you can use that, then do. If it is a different endpoint, then that may be fine.", "author": "MikeDombo", "createdAt": "2020-05-13T19:32:59Z", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.DeviceConfigurationHelper;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.deployment.model.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@ImplementsService(name = \"TokenExchangeService\", autostart = false)\n+@Singleton\n+public class TokenExchangeService extends EvergreenService {\n+    private static final Logger LOGGER = LogManager.getLogger(TokenExchangeService.class);\n+    private int port;\n+    private String iotEndpoint;\n+    private HttpServerImpl server;\n+    @Inject\n+    private DeviceConfigurationHelper deviceConfigurationHelper;\n+\n+    @Inject\n+    private IotConnectionManagerFactory iotConnectionManagerFactory;\n+\n+    /**\n+     * Constructor.\n+     * @param topics the configuration coming from kernel\n+     */\n+    public TokenExchangeService(Topics topics) {\n+        super(topics);\n+        // TODO: Add support for other params like role Aliases\n+        topics.lookup(\"port\")\n+                .dflt(6666)\n+                .subscribe((why, newv) ->\n+                        port = Coerce.toInt(newv));\n+\n+        topics.lookup(\"iotEndpoint\")", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgxMDY3Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424810676", "bodyText": "Its a different one. IOT generates a different endpoint for interacting with tes.", "author": "prateek-y", "createdAt": "2020-05-14T00:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MjA3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MjY5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424682690", "bodyText": "return here, otherwise you'll report both errored and running.", "author": "MikeDombo", "createdAt": "2020-05-13T19:34:10Z", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.DeviceConfigurationHelper;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.deployment.model.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@ImplementsService(name = \"TokenExchangeService\", autostart = false)\n+@Singleton\n+public class TokenExchangeService extends EvergreenService {\n+    private static final Logger LOGGER = LogManager.getLogger(TokenExchangeService.class);\n+    private int port;\n+    private String iotEndpoint;\n+    private HttpServerImpl server;\n+    @Inject\n+    private DeviceConfigurationHelper deviceConfigurationHelper;\n+\n+    @Inject\n+    private IotConnectionManagerFactory iotConnectionManagerFactory;\n+\n+    /**\n+     * Constructor.\n+     * @param topics the configuration coming from kernel\n+     */\n+    public TokenExchangeService(Topics topics) {\n+        super(topics);\n+        // TODO: Add support for other params like role Aliases\n+        topics.lookup(\"port\")\n+                .dflt(6666)\n+                .subscribe((why, newv) ->\n+                        port = Coerce.toInt(newv));\n+\n+        topics.lookup(\"iotEndpoint\")\n+                .subscribe((why, newv) ->\n+                        iotEndpoint = Coerce.toString(newv));\n+    }\n+\n+    /**\n+     * Contructor for unit testing.\n+     * @param topics the configuration coming from kernel\n+     * @param deviceConfigurationHelper {@link DeviceConfigurationHelper}\n+     * @param iotConnectionManagerFactory {@link IotConnectionManagerFactory}\n+     */\n+    public TokenExchangeService(Topics topics,\n+                                DeviceConfigurationHelper deviceConfigurationHelper,\n+                                IotConnectionManagerFactory iotConnectionManagerFactory) {\n+        super(topics);\n+        this.deviceConfigurationHelper = deviceConfigurationHelper;\n+        this.iotConnectionManagerFactory = iotConnectionManagerFactory;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void startup() {\n+        LOGGER.atInfo().addKeyValue(\"port\", port).log(\"Starting Token Server at port {}\", port);\n+        try {\n+            IotConnectionManager connManager = iotConnectionManagerFactory.getIotConnectionManager(iotEndpoint,\n+                    deviceConfigurationHelper.getDeviceConfiguration());\n+            IotCloudHelper cloudHelper = new IotCloudHelper();\n+            server = new HttpServerImpl(port, new CredentialRequestHandler(cloudHelper, connManager));\n+            server.start();\n+        } catch (IOException | DeviceConfigurationException e) {\n+            LOGGER.error(\"Caught exception...\", e);\n+            reportState(State.ERRORED);", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMjUwMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424732500", "bodyText": "oops. fixed", "author": "prateek-y", "createdAt": "2020-05-13T21:09:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MjY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4Mjk0MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424682941", "bodyText": "How necessary is this?", "author": "MikeDombo", "createdAt": "2020-05-13T19:34:35Z", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.DeviceConfigurationHelper;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.deployment.model.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@ImplementsService(name = \"TokenExchangeService\", autostart = false)\n+@Singleton\n+public class TokenExchangeService extends EvergreenService {\n+    private static final Logger LOGGER = LogManager.getLogger(TokenExchangeService.class);\n+    private int port;\n+    private String iotEndpoint;\n+    private HttpServerImpl server;\n+    @Inject\n+    private DeviceConfigurationHelper deviceConfigurationHelper;\n+\n+    @Inject\n+    private IotConnectionManagerFactory iotConnectionManagerFactory;\n+\n+    /**\n+     * Constructor.\n+     * @param topics the configuration coming from kernel\n+     */\n+    public TokenExchangeService(Topics topics) {\n+        super(topics);\n+        // TODO: Add support for other params like role Aliases\n+        topics.lookup(\"port\")\n+                .dflt(6666)\n+                .subscribe((why, newv) ->\n+                        port = Coerce.toInt(newv));\n+\n+        topics.lookup(\"iotEndpoint\")\n+                .subscribe((why, newv) ->\n+                        iotEndpoint = Coerce.toString(newv));\n+    }\n+\n+    /**\n+     * Contructor for unit testing.\n+     * @param topics the configuration coming from kernel\n+     * @param deviceConfigurationHelper {@link DeviceConfigurationHelper}\n+     * @param iotConnectionManagerFactory {@link IotConnectionManagerFactory}\n+     */\n+    public TokenExchangeService(Topics topics,\n+                                DeviceConfigurationHelper deviceConfigurationHelper,\n+                                IotConnectionManagerFactory iotConnectionManagerFactory) {\n+        super(topics);\n+        this.deviceConfigurationHelper = deviceConfigurationHelper;\n+        this.iotConnectionManagerFactory = iotConnectionManagerFactory;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void startup() {\n+        LOGGER.atInfo().addKeyValue(\"port\", port).log(\"Starting Token Server at port {}\", port);\n+        try {\n+            IotConnectionManager connManager = iotConnectionManagerFactory.getIotConnectionManager(iotEndpoint,\n+                    deviceConfigurationHelper.getDeviceConfiguration());\n+            IotCloudHelper cloudHelper = new IotCloudHelper();\n+            server = new HttpServerImpl(port, new CredentialRequestHandler(cloudHelper, connManager));\n+            server.start();\n+        } catch (IOException | DeviceConfigurationException e) {\n+            LOGGER.error(\"Caught exception...\", e);\n+            reportState(State.ERRORED);\n+        }\n+        reportState(State.RUNNING);\n+    }\n+\n+    @Override\n+    public void shutdown() {\n+        LOGGER.atInfo().log(\"TokenExchangeService is shutting down!\");\n+        if (server != null) {\n+            server.stop();\n+        }\n+        LOGGER.atInfo().log(\"Stopped Server at port {}\", port);\n+    }\n+\n+    public static class IotConnectionManagerFactory {", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMjcxMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424732711", "bodyText": "Not required I think. will remove.", "author": "prateek-y", "createdAt": "2020-05-13T21:10:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4Mjk0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MzI2Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424683266", "bodyText": "Also extend with EGExtension", "author": "MikeDombo", "createdAt": "2020-05-13T19:35:12Z", "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.io.OutputStream;\n+\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+\n+@ExtendWith(MockitoExtension.class)", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMzMxNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424733316", "bodyText": "ok", "author": "prateek-y", "createdAt": "2020-05-13T21:11:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MzI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MzQ2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424683465", "bodyText": "Also extend with EGExtension", "author": "MikeDombo", "createdAt": "2020-05-13T19:35:38Z", "path": "src/test/java/com/aws/iot/evergreen/tes/HttpServerImplTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.URL;\n+import java.net.HttpURLConnection;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.any;\n+\n+@ExtendWith(MockitoExtension.class)", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgxMDgyNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424810824", "bodyText": "done", "author": "prateek-y", "createdAt": "2020-05-14T00:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MzQ2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MzkxNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424683916", "bodyText": "Also extend with EGExtension", "author": "MikeDombo", "createdAt": "2020-05-13T19:36:23Z", "path": "src/test/java/com/aws/iot/evergreen/tes/IotCloudHelperTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import software.amazon.awssdk.crt.http.HttpClientConnection;\n+import software.amazon.awssdk.crt.http.HttpStream;\n+import software.amazon.awssdk.crt.http.HttpStreamResponseHandler;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwMDA4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424700087", "bodyText": "ok", "author": "prateek-y", "createdAt": "2020-05-13T20:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MzkxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NDU2Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424684563", "bodyText": "Doesn't look like these files are used anywhere. If not, remove them. If they are used; we need to discuss because we should not be committing any creds.", "author": "MikeDombo", "createdAt": "2020-05-13T19:37:31Z", "path": "src/test/resources/com/aws/iot/evergreen/tes/root.ca", "diffHunk": "@@ -0,0 +1,20 @@\n+-----BEGIN CERTIFICATE-----", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwMDI2Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424700267", "bodyText": "Yeah. I had them to test  a real connection to IOT. will remove now.", "author": "prateek-y", "createdAt": "2020-05-13T20:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NDU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NTgwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424685805", "bodyText": "This is a bit scary to me. Is there no normal AWS SDK client that does this?", "author": "MikeDombo", "createdAt": "2020-05-13T19:39:54Z", "path": "src/main/java/com/aws/iot/evergreen/tes/IotConnectionManager.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.deployment.model.DeviceConfiguration;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import software.amazon.awssdk.crt.http.HttpClientConnection;\n+import software.amazon.awssdk.crt.http.HttpClientConnectionManager;\n+import software.amazon.awssdk.crt.http.HttpClientConnectionManagerOptions;\n+import software.amazon.awssdk.crt.io.ClientBootstrap;\n+import software.amazon.awssdk.crt.io.EventLoopGroup;\n+import software.amazon.awssdk.crt.io.HostResolver;\n+import software.amazon.awssdk.crt.io.SocketOptions;\n+import software.amazon.awssdk.crt.io.TlsContext;\n+import software.amazon.awssdk.crt.io.TlsContextOptions;\n+\n+import java.io.Closeable;\n+import java.net.URI;\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class IotConnectionManager implements Closeable {\n+    // TODO: Move Iot related classes to a central location\n+    private static final Logger LOGGER = LogManager.getLogger(IotConnectionManager.class);\n+    // TODO: ALPN support\n+    private static final int IOT_PORT = 8443;\n+    // Max wait time for device to establish mTLS connection with IOT core\n+    private static final long TIMEOUT_FOR_CONNECTION_SETUP_SECONDS = (long) Duration.ofMinutes(1).getSeconds();\n+    private final String iotEndpoint;\n+    private final HttpClientConnectionManager connManager;\n+\n+    /**\n+     * Constructor.\n+     * @param iotEndpoint Iot cloud credentials endpoint for managing connections to.\n+     * @param deviceConfiguration Device configuration for getting cert and keys for mTLS\n+     * @throws DeviceConfigurationException When unable to initialize this manager.\n+     */\n+    IotConnectionManager(final String iotEndpoint, final DeviceConfiguration deviceConfiguration)\n+        throws DeviceConfigurationException {\n+        this.iotEndpoint = iotEndpoint;\n+        this.connManager = initConnectionManager(deviceConfiguration);\n+    }\n+\n+    private HttpClientConnectionManager initConnectionManager(DeviceConfiguration deviceConfiguration)\n+            throws DeviceConfigurationException {\n+        final String certPath = deviceConfiguration.getCertificateFilePath();\n+        final String keyPath = deviceConfiguration.getPrivateKeyFilePath();\n+        final String caPath = deviceConfiguration.getRootCAFilePath();\n+        try (EventLoopGroup eventLoopGroup = new EventLoopGroup(1);", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwMTk1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424701958", "bodyText": "I couldnt find a normal sdk client which has abstraction for accepting a device certificate for HTTP. This is also similar to how MQTT client does TLS in iot device sdk.", "author": "prateek-y", "createdAt": "2020-05-13T20:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NTgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQxMTA1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425411058", "bodyText": "Does this really require a threadpool? Seems like a regular HTTP request shouldn't need extra threads, it can just use the main thread. In subsequent PRs let's move to Apache HTTP client and use a Java keystore.", "author": "MikeDombo", "createdAt": "2020-05-14T20:28:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NTgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyMTE1MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425421150", "bodyText": "Yes. Ideally we should not be using extra threads here, dont see a need. Lets have more discussion around this.", "author": "prateek-y", "createdAt": "2020-05-14T20:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NTgwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NjI1OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424686258", "bodyText": "dont put the {} here. The exception will be used and not interpolated into the string.", "author": "MikeDombo", "createdAt": "2020-05-13T19:40:41Z", "path": "src/main/java/com/aws/iot/evergreen/tes/IotCloudHelper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import lombok.NoArgsConstructor;\n+import software.amazon.awssdk.crt.http.HttpClientConnection;\n+import software.amazon.awssdk.crt.http.HttpHeader;\n+import software.amazon.awssdk.crt.http.HttpRequest;\n+import software.amazon.awssdk.crt.http.HttpStream;\n+import software.amazon.awssdk.crt.http.HttpStreamResponseHandler;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Singleton;\n+\n+\n+@Singleton\n+@NoArgsConstructor\n+public class IotCloudHelper {\n+    private static final Logger LOGGER = LogManager.getLogger(IotCloudHelper.class);\n+    private static final String HTTP_HEADER_REQUEST_ID = \"x-amzn-RequestId\";\n+    private static final String HTTP_HEADER_ERROR_TYPE = \"x-amzn-ErrorType\";\n+    // TODO: revisit all timeout values\n+    // Max wait time for device to receive HTTP response from IOT CLOUD\n+    private static final long TIMEOUT_FOR_RESPONSE_FROM_IOT_CLOUD_SECONDS = (long) Duration.ofMinutes(5).getSeconds();\n+\n+    /**\n+     * Sends Http request to Iot Cloud.\n+     * @param connManager underlying connection manager to use for sending requests\n+     * @param path Http url to query\n+     * @param verb Http verb for the request\n+     * @return Http response corresponding to http request for path\n+     * @throws AWSIotException when unable to send the request successfully\n+     */\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public String sendHttpRequest(final IotConnectionManager connManager,\n+                                  final String path,\n+                                  final String verb) throws AWSIotException {\n+        final HttpHeader[] headers = {\n+                new HttpHeader(\"host\", connManager.getHost())\n+        };\n+        final HttpRequest request = new HttpRequest(verb, path, headers, null);\n+        final HttpClientConnection conn = connManager.getConnection();\n+        // TODO: Make it exponential backoff, create backoff util for common use.\n+        String response = \"\";\n+        int numAttempts = 0;\n+        do {\n+            numAttempts++;\n+            response = getHttpResponse(conn, request);\n+        } while (numAttempts < 1);\n+        conn.close();\n+        return response;\n+    }\n+\n+    private HttpStreamResponseHandler createResponseHandler(CompletableFuture<Integer> reqCompleted,\n+                                                            Map<String, String> responseHeaders,\n+                                                            StringBuilder responseBody) {\n+        return new HttpStreamResponseHandler() {\n+            @Override\n+            public void onResponseHeaders(HttpStream httpStream, int i, int i1, HttpHeader[] httpHeaders) {\n+                Arrays.stream(httpHeaders).forEach(header -> {\n+                    responseHeaders.put(header.getName(), header.getValue());\n+                });\n+            }\n+\n+            @Override\n+            public int onResponseBody(HttpStream stream, byte[] bodyBytes) {\n+                responseBody.append(new String(bodyBytes, StandardCharsets.UTF_8));\n+                return bodyBytes.length;\n+            }\n+\n+            @Override\n+            public void onResponseComplete(HttpStream httpStream, int errorCode) {\n+                reqCompleted.complete(errorCode);\n+                httpStream.close();\n+            }\n+        };\n+    }\n+\n+    private String getHttpResponse(HttpClientConnection conn, HttpRequest request) throws AWSIotException {\n+        final CompletableFuture<Integer> reqCompleted = new CompletableFuture<>();\n+        final Map<String, String> responseHeaders = new HashMap<>();\n+        final StringBuilder responseBody = new StringBuilder();\n+        conn.makeRequest(request, createResponseHandler(reqCompleted, responseHeaders, responseBody));\n+        // Give the request up to N seconds to complete, otherwise throw a TimeoutException\n+        // TODO: handle 4xx,5xx, timeouts and connection issues\n+        try {\n+            int error = reqCompleted.get(TIMEOUT_FOR_RESPONSE_FROM_IOT_CLOUD_SECONDS, TimeUnit.SECONDS);\n+            if (error != 0) {\n+                throw new AWSIotException(String.format(\"Error %s(%d); RequestId: %s\",\n+                        HTTP_HEADER_ERROR_TYPE, error, HTTP_HEADER_REQUEST_ID));\n+            }\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            LOGGER.error(\"Http request failed with error {}\", e);", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwMjAzNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424702035", "bodyText": "Ok", "author": "prateek-y", "createdAt": "2020-05-13T20:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NjI1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NzU0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424687543", "bodyText": "Yikes. If this really needs to be this low level, I'm quite concerned.", "author": "MikeDombo", "createdAt": "2020-05-13T19:43:11Z", "path": "src/main/java/com/aws/iot/evergreen/tes/IotCloudHelper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import lombok.NoArgsConstructor;\n+import software.amazon.awssdk.crt.http.HttpClientConnection;\n+import software.amazon.awssdk.crt.http.HttpHeader;\n+import software.amazon.awssdk.crt.http.HttpRequest;\n+import software.amazon.awssdk.crt.http.HttpStream;\n+import software.amazon.awssdk.crt.http.HttpStreamResponseHandler;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Singleton;\n+\n+\n+@Singleton\n+@NoArgsConstructor\n+public class IotCloudHelper {\n+    private static final Logger LOGGER = LogManager.getLogger(IotCloudHelper.class);\n+    private static final String HTTP_HEADER_REQUEST_ID = \"x-amzn-RequestId\";\n+    private static final String HTTP_HEADER_ERROR_TYPE = \"x-amzn-ErrorType\";\n+    // TODO: revisit all timeout values\n+    // Max wait time for device to receive HTTP response from IOT CLOUD\n+    private static final long TIMEOUT_FOR_RESPONSE_FROM_IOT_CLOUD_SECONDS = (long) Duration.ofMinutes(5).getSeconds();\n+\n+    /**\n+     * Sends Http request to Iot Cloud.\n+     * @param connManager underlying connection manager to use for sending requests\n+     * @param path Http url to query\n+     * @param verb Http verb for the request\n+     * @return Http response corresponding to http request for path\n+     * @throws AWSIotException when unable to send the request successfully\n+     */\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public String sendHttpRequest(final IotConnectionManager connManager,", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwMjM4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424702380", "bodyText": "Yup. Will try to confirm, but could not find anything more abstract.", "author": "prateek-y", "createdAt": "2020-05-13T20:10:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NzU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI3ODc5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425278791", "bodyText": "Instead of writing our own, have you tried to use Apache HTTP client? Would that be simpler?", "author": "fengwang666", "createdAt": "2020-05-14T16:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NzU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4MzY3NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425283675", "bodyText": "Or use Apache HTTP Core? https://hc.apache.org/httpcomponents-core-ga/index.html", "author": "fengwang666", "createdAt": "2020-05-14T16:46:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NzU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMxNTEwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425315105", "bodyText": "Problem is that all(yet to see an exception) java libraries rely on SSLContext to specify client certificates. For instance Apache Http client uses the same: https://svn.apache.org/viewvc/httpcomponents/oac.hc3x/trunk/src/contrib/org/apache/commons/httpclient/contrib/ssl/AuthSSLProtocolSocketFactory.java?view=markup\nSSLContext relies on Java key store interface for specifying keys/certs. Trying custom auth implementation would be more tricky(mucking with security?), like letting SSLContext depend on our custom file based key or cert. I can dig in more to see if there are more options. Other thing was trying to avoid dependencies additionally, we are already using the IOT device sdk for MQTT connection to cloud, so this does not bring anything additional.", "author": "prateek-y", "createdAt": "2020-05-14T17:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NzU0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4ODcwMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424688702", "bodyText": "Also, once running, you need to set the environment variables appropriately so that services know how to contact you.", "author": "MikeDombo", "createdAt": "2020-05-13T19:45:28Z", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.DeviceConfigurationHelper;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.deployment.model.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@ImplementsService(name = \"TokenExchangeService\", autostart = false)\n+@Singleton\n+public class TokenExchangeService extends EvergreenService {\n+    private static final Logger LOGGER = LogManager.getLogger(TokenExchangeService.class);\n+    private int port;\n+    private String iotEndpoint;\n+    private HttpServerImpl server;\n+    @Inject\n+    private DeviceConfigurationHelper deviceConfigurationHelper;\n+\n+    @Inject\n+    private IotConnectionManagerFactory iotConnectionManagerFactory;\n+\n+    /**\n+     * Constructor.\n+     * @param topics the configuration coming from kernel\n+     */\n+    public TokenExchangeService(Topics topics) {\n+        super(topics);\n+        // TODO: Add support for other params like role Aliases\n+        topics.lookup(\"port\")\n+                .dflt(6666)\n+                .subscribe((why, newv) ->\n+                        port = Coerce.toInt(newv));\n+\n+        topics.lookup(\"iotEndpoint\")\n+                .subscribe((why, newv) ->\n+                        iotEndpoint = Coerce.toString(newv));\n+    }\n+\n+    /**\n+     * Contructor for unit testing.\n+     * @param topics the configuration coming from kernel\n+     * @param deviceConfigurationHelper {@link DeviceConfigurationHelper}\n+     * @param iotConnectionManagerFactory {@link IotConnectionManagerFactory}\n+     */\n+    public TokenExchangeService(Topics topics,\n+                                DeviceConfigurationHelper deviceConfigurationHelper,\n+                                IotConnectionManagerFactory iotConnectionManagerFactory) {\n+        super(topics);\n+        this.deviceConfigurationHelper = deviceConfigurationHelper;\n+        this.iotConnectionManagerFactory = iotConnectionManagerFactory;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void startup() {\n+        LOGGER.atInfo().addKeyValue(\"port\", port).log(\"Starting Token Server at port {}\", port);\n+        try {\n+            IotConnectionManager connManager = iotConnectionManagerFactory.getIotConnectionManager(iotEndpoint,\n+                    deviceConfigurationHelper.getDeviceConfiguration());\n+            IotCloudHelper cloudHelper = new IotCloudHelper();\n+            server = new HttpServerImpl(port, new CredentialRequestHandler(cloudHelper, connManager));\n+            server.start();\n+        } catch (IOException | DeviceConfigurationException e) {\n+            LOGGER.error(\"Caught exception...\", e);\n+            reportState(State.ERRORED);\n+        }\n+        reportState(State.RUNNING);", "originalCommit": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxNTgwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424715809", "bodyText": "I was under the impression that kernel has to do it. This is really nice.", "author": "prateek-y", "createdAt": "2020-05-13T20:36:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4ODcwMg=="}], "type": "inlineReview"}, {"oid": "3033a6fc4e83f37a1a77e577a2e3ebb33ef973f4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3033a6fc4e83f37a1a77e577a2e3ebb33ef973f4", "message": "Apply feedback comments", "committedDate": "2020-05-13T21:08:23Z", "type": "commit"}, {"oid": "2bcd9bcdb54f3d145f60aec807a5b828b89eb4b2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2bcd9bcdb54f3d145f60aec807a5b828b89eb4b2", "message": "Add EGExtension to tests", "committedDate": "2020-05-13T21:14:16Z", "type": "commit"}, {"oid": "7feef3939979c77aeb1b93eba77528b68abc45fa", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7feef3939979c77aeb1b93eba77528b68abc45fa", "message": "Fix PMD violations", "committedDate": "2020-05-14T01:05:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQxMDIzMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425410230", "bodyText": "definitely seems too long", "author": "MikeDombo", "createdAt": "2020-05-14T20:27:20Z", "path": "src/main/java/com/aws/iot/evergreen/tes/IotCloudHelper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import lombok.NoArgsConstructor;\n+import software.amazon.awssdk.crt.http.HttpClientConnection;\n+import software.amazon.awssdk.crt.http.HttpHeader;\n+import software.amazon.awssdk.crt.http.HttpRequest;\n+import software.amazon.awssdk.crt.http.HttpStream;\n+import software.amazon.awssdk.crt.http.HttpStreamResponseHandler;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Singleton;\n+\n+\n+@Singleton\n+@NoArgsConstructor\n+public class IotCloudHelper {\n+    private static final Logger LOGGER = LogManager.getLogger(IotCloudHelper.class);\n+    private static final String HTTP_HEADER_REQUEST_ID = \"x-amzn-RequestId\";\n+    private static final String HTTP_HEADER_ERROR_TYPE = \"x-amzn-ErrorType\";\n+    // TODO: revisit all timeout values\n+    // Max wait time for device to receive HTTP response from IOT CLOUD\n+    private static final long TIMEOUT_FOR_RESPONSE_FROM_IOT_CLOUD_SECONDS = (long) Duration.ofMinutes(5).getSeconds();", "originalCommit": "7feef3939979c77aeb1b93eba77528b68abc45fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQxOTAwNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425419006", "bodyText": "For using apache client. I think we should minimize northbound connections to cloud. The higher abstractions you choose the more difficult it would be to optimize those cases. I will leave this open for discussion for now, but ideally greengrass should minimize connections for all HTTP traffic northbound unless specified by the customer. On the same lines TES should make sure that only one connection is made northbound, and all in flight requests wait. With multiple threads you risk opening connections as many concurrent requests you get. TES would not be performance constrained as anyway clients would also cache credentials especially if they are using SDK. Lets discuss more on this later.", "author": "prateek-y", "createdAt": "2020-05-14T20:44:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQxMDIzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0ODY3Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425448676", "bodyText": "I don't know how true it is. But I went through a security review before and was told not to use String to store creds in memory. Use Byte[] instead. I remember the reason was due to String objects stay in memory longer.", "author": "fufranci", "createdAt": "2020-05-14T21:44:35Z", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+\n+public class CredentialRequestHandler implements HttpHandler {\n+\n+    public static final String IOT_CREDENTIALS_PATH = \"/greengrass/assumeRoleForGroup\";\n+    public static final String IOT_CREDENTIALS_HTTP_VERB = \"GET\";\n+\n+    private final IotCloudHelper iotCloudHelper;\n+\n+    private final IotConnectionManager iotConnectionManager;\n+\n+    /**\n+     * Constructor.\n+     * @param cloudHelper {@link IotCloudHelper} for making http requests to cloud.\n+     * @param connectionManager {@link IotConnectionManager} underlying connection manager for cloud.\n+     */\n+    public CredentialRequestHandler(final IotCloudHelper cloudHelper, final IotConnectionManager connectionManager) {\n+        this.iotCloudHelper = cloudHelper;\n+        this.iotConnectionManager = connectionManager;\n+    }\n+\n+    @Override\n+    public void handle(final HttpExchange exchange) throws IOException {\n+        final String credentials = getCredentials();\n+        exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, credentials.length());\n+        exchange.getResponseBody().write(credentials.getBytes(StandardCharsets.UTF_8));\n+        exchange.close();\n+    }\n+\n+    /**\n+     * API for kernel to directly fetch credentials from TES instead of using HTTP server.\n+     * @return AWS credentials from cloud.\n+     */\n+    public String getCredentials() {", "originalCommit": "7feef3939979c77aeb1b93eba77528b68abc45fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1NzIyNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425457226", "bodyText": "Good catch: :) This will anyway change, as we will need to parse the creds and package again to look at expire time before before caching. I will add TODO", "author": "prateek-y", "createdAt": "2020-05-14T22:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0ODY3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0OTAzNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425449035", "bodyText": "What is the purpose of initializing this to alive?", "author": "fufranci", "createdAt": "2020-05-14T21:45:23Z", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+\n+public class CredentialRequestHandler implements HttpHandler {\n+\n+    public static final String IOT_CREDENTIALS_PATH = \"/greengrass/assumeRoleForGroup\";\n+    public static final String IOT_CREDENTIALS_HTTP_VERB = \"GET\";\n+\n+    private final IotCloudHelper iotCloudHelper;\n+\n+    private final IotConnectionManager iotConnectionManager;\n+\n+    /**\n+     * Constructor.\n+     * @param cloudHelper {@link IotCloudHelper} for making http requests to cloud.\n+     * @param connectionManager {@link IotConnectionManager} underlying connection manager for cloud.\n+     */\n+    public CredentialRequestHandler(final IotCloudHelper cloudHelper, final IotConnectionManager connectionManager) {\n+        this.iotCloudHelper = cloudHelper;\n+        this.iotConnectionManager = connectionManager;\n+    }\n+\n+    @Override\n+    public void handle(final HttpExchange exchange) throws IOException {\n+        final String credentials = getCredentials();\n+        exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, credentials.length());\n+        exchange.getResponseBody().write(credentials.getBytes(StandardCharsets.UTF_8));\n+        exchange.close();\n+    }\n+\n+    /**\n+     * API for kernel to directly fetch credentials from TES instead of using HTTP server.\n+     * @return AWS credentials from cloud.\n+     */\n+    public String getCredentials() {\n+        String credentials = \"--alive--\";", "originalCommit": "7feef3939979c77aeb1b93eba77528b68abc45fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1NzM5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425457392", "bodyText": "This will change. Just for testing.", "author": "prateek-y", "createdAt": "2020-05-14T22:05:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0OTAzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0OTY2Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425449667", "bodyText": "What is the purpose of this interface?", "author": "fufranci", "createdAt": "2020-05-14T21:46:51Z", "path": "src/main/java/com/aws/iot/evergreen/tes/Server.java", "diffHunk": "@@ -0,0 +1,13 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import java.io.IOException;\n+\n+public interface Server {", "originalCommit": "7feef3939979c77aeb1b93eba77528b68abc45fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1NzgxNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425457816", "bodyText": "So that we can swap out http/ipc/tcp implementations later without worrying about other changes.", "author": "prateek-y", "createdAt": "2020-05-14T22:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0OTY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1NjkwNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425456906", "bodyText": "It looks like this constructor is not used. Remove?", "author": "fufranci", "createdAt": "2020-05-14T22:04:26Z", "path": "src/main/java/com/aws/iot/evergreen/tes/HttpServerImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import javax.inject.Inject;\n+\n+public class HttpServerImpl implements Server {\n+    public static final String URL = \"/2016-11-01/credentialprovider/\";\n+    private static final int TIME_TO_WAIT_BEFORE_SHUTDOWN_IN_SECONDS = 1;\n+    private final HttpServer httpImpl;\n+\n+    @Inject\n+    private HttpHandler credentialRequestHandler;\n+\n+    /**\n+     * Constructor.\n+     * @param port Http server port\n+     * @throws IOException When server creation fails\n+     */\n+    HttpServerImpl(int port) throws IOException {", "originalCommit": "7feef3939979c77aeb1b93eba77528b68abc45fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1OTgxMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425459810", "bodyText": "Hmm. ok.", "author": "prateek-y", "createdAt": "2020-05-14T22:11:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1NjkwNg=="}], "type": "inlineReview"}, {"oid": "3ffeadf1516028b877d309a06b0c51b142a17c85", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3ffeadf1516028b877d309a06b0c51b142a17c85", "message": "Apply more feedback", "committedDate": "2020-05-15T00:25:44Z", "type": "commit"}, {"oid": "a140061ac16bc2ba4a75c3ab279efcbb0c65f32e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a140061ac16bc2ba4a75c3ab279efcbb0c65f32e", "message": "Merge branch 'master' into tes", "committedDate": "2020-05-15T03:24:48Z", "type": "commit"}]}