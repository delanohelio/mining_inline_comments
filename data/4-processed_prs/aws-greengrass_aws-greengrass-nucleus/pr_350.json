{"pr_number": 350, "pr_title": "Add loader script, kernel recipe for kernel launch and update", "pr_createdAt": "2020-08-04T23:52:42Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5OTAxMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r465899011", "bodyText": "I remember we don't want to handle the case where kernel root changes.\nIs it going to be removed after {{kernel.root}} is supported?", "author": "hui-yang", "createdAt": "2020-08-05T17:47:48Z", "path": "EvergreenKernel-1.0.0.yaml", "diffHunk": "@@ -0,0 +1,31 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+ComponentName: EvergreenKernel\n+Description: Evergreen kernel\n+Publisher: Me\n+Version: '1.0.0'\n+Parameters:\n+- name: jvmOptions\n+  value: -Xms512m -Xmx512m\n+  type: STRING\n+- name: kernelRoot\n+  value: \"/\"\n+  type: STRING", "originalCommit": "e784a2ae9021175fdd38eb072c6c1fae05a236f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNDg2NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r466634865", "bodyText": "yes this will be removed. This is just for local testing", "author": "ShirleyZheng92", "createdAt": "2020-08-06T19:23:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5OTAxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5OTM5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r465899392", "bodyText": "The supported jvm options may be a subset but I'm fine with this now", "author": "hui-yang", "createdAt": "2020-08-05T17:48:29Z", "path": "EvergreenKernel-1.0.0.yaml", "diffHunk": "@@ -0,0 +1,31 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+ComponentName: EvergreenKernel\n+Description: Evergreen kernel\n+Publisher: Me\n+Version: '1.0.0'\n+Parameters:\n+- name: jvmOptions\n+  value: -Xms512m -Xmx512m", "originalCommit": "e784a2ae9021175fdd38eb072c6c1fae05a236f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNTQzOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r466635438", "bodyText": "If we have nested parameter structure supported, then we can have something like:\njvmOptions:\n  Xms: 512m (default)\n  Xmx: 512m (default)\n  # some other options added by customer", "author": "ShirleyZheng92", "createdAt": "2020-08-06T19:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5OTM5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwMTA2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r465901068", "bodyText": "These 2 steps are done in kernel before bootstrap stage.\nHere we just need to override current.", "author": "hui-yang", "createdAt": "2020-08-05T17:51:29Z", "path": "EvergreenKernel-1.0.0.yaml", "diffHunk": "@@ -0,0 +1,31 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+ComponentName: EvergreenKernel\n+Description: Evergreen kernel\n+Publisher: Me\n+Version: '1.0.0'\n+Parameters:\n+- name: jvmOptions\n+  value: -Xms512m -Xmx512m\n+  type: STRING\n+- name: kernelRoot\n+  value: \"/\"\n+  type: STRING\n+Artifacts:\n+  # TODO: add artifacts\n+Lifecycle:\n+  bootstrap:\n+    posix:\n+      script: |-\n+        set -euo pipefail\n+        # TODO: Until {{kernel.root}} is available\n+        # KERNEL_ROOT=\"{{artifacts:path}}/../../../..\"\n+        KERNEL_ROOT={{params:kernelRoot.value}}\n+        unzip \"{{artifacts:path}}/EvergreenKernel-1.0.0.zip\" -d \"$KERNEL_ROOT/lib/\"\n+        mv -f $KERNEL_ROOT/alts/current $KERNEL_ROOT/alts/old\n+        mkdir $KERNEL_ROOT/alts/current", "originalCommit": "e784a2ae9021175fdd38eb072c6c1fae05a236f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwMjMxNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r465902317", "bodyText": "nit: I prefer to call it loader, which can also be a binary in other platforms.", "author": "hui-yang", "createdAt": "2020-08-05T17:53:26Z", "path": "assembly.xml", "diffHunk": "@@ -0,0 +1,25 @@\n+<assembly xmlns=\"http://maven.apache.org/ASSEMBLY/2.1.0\"\n+          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+          xsi:schemaLocation=\"http://maven.apache.org/ASSEMBLY/2.1.0 http://maven.apache.org/xsd/assembly-2.1.0.xsd\">\n+    <id>appserverA</id>\n+    <formats>\n+        <format>zip</format>\n+    </formats>\n+    <fileSets>\n+        <fileSet>\n+            <!--<directory>${basedir}/target</directory>-->\n+            <directory>${basedir}/target</directory>\n+            <outputDirectory>/lib</outputDirectory>\n+            <includes>\n+                <include>Evergreen.jar</include>\n+            </includes>\n+        </fileSet>\n+        <fileSet>\n+            <directory>${basedir}/scripts</directory>\n+            <outputDirectory>/bin</outputDirectory>\n+            <includes>\n+                <include>loader.sh</include>", "originalCommit": "e784a2ae9021175fdd38eb072c6c1fae05a236f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNTcyOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r466635728", "bodyText": "sure", "author": "ShirleyZheng92", "createdAt": "2020-08-06T19:25:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwMjMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwMzQyNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r465903426", "bodyText": "Thanks. I'll update in my PR", "author": "hui-yang", "createdAt": "2020-08-05T17:55:23Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelAlternatives.java", "diffHunk": "@@ -97,6 +97,7 @@ public void activationSucceeds() throws IOException {\n      */\n     public void prepareRollback() throws IOException {\n         if (newDir.toFile().exists()) {\n+            // TODO: newDir is not needed.", "originalCommit": "e784a2ae9021175fdd38eb072c6c1fae05a236f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwMzY2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r465903668", "bodyText": "Does this mean in the first-time provision, customers will launch kernel from the JAR instead of loader?\nJust want to clarify the provision experience", "author": "hui-yang", "createdAt": "2020-08-05T17:55:51Z", "path": "scripts/loader.sh", "diffHunk": "@@ -0,0 +1,95 @@\n+#!/bin/sh\n+\n+set -euo pipefail\n+\n+PWD=$(dirname \"$0\")\n+\n+# Assuming loader.sh is launched from \"$GG_ROOT/alts/current/distro/bin/loader.sh\"\n+GG_ROOT=$(cd $PWD/../../../..; pwd)", "originalCommit": "e784a2ae9021175fdd38eb072c6c1fae05a236f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNjMwNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r466636306", "bodyText": "This path is assuming loader is launched from \"$GG_ROOT/alts/current/distro/bin/loader\" . Is it a safe assumption?", "author": "ShirleyZheng92", "createdAt": "2020-08-06T19:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwMzY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwNTY0OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r465905648", "bodyText": "nit: you can add this\n  if [ ! -z ${CONFIG_FILE+x} ]; then\n    # If CONFIG_FILE is not specified, Kernel will load from default location $GG_ROOT/config/\n    OPTIONS=\"$OPTIONS --config $CONFIG_FILE\"\n  fi", "author": "hui-yang", "createdAt": "2020-08-05T17:59:11Z", "path": "scripts/loader.sh", "diffHunk": "@@ -0,0 +1,95 @@\n+#!/bin/sh\n+\n+set -euo pipefail\n+\n+PWD=$(dirname \"$0\")\n+\n+# Assuming loader.sh is launched from \"$GG_ROOT/alts/current/distro/bin/loader.sh\"\n+GG_ROOT=$(cd $PWD/../../../..; pwd)\n+\n+echo \"Greengrass root: \"${GG_ROOT}\n+\n+LAUNCH_DIR=\"$GG_ROOT/alts/current\"\n+\n+launch_kernel() {\n+  if [[ ! -d ${LAUNCH_DIR} ]] ; then\n+    echo FATAL: No Kernel found!\n+    exit 1\n+  fi\n+\n+  JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n+  # TODO: add $CONFIG_FILE\n+  OPTIONS=\"--root $GG_ROOT\"", "originalCommit": "e784a2ae9021175fdd38eb072c6c1fae05a236f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwNjg5OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r465906898", "bodyText": "\ud83d\udc4d  Is this to fix the corner case where device crashed after current flipped to broken and before old flipped to current?", "author": "hui-yang", "createdAt": "2020-08-05T18:01:23Z", "path": "scripts/loader.sh", "diffHunk": "@@ -0,0 +1,95 @@\n+#!/bin/sh\n+\n+set -euo pipefail\n+\n+PWD=$(dirname \"$0\")\n+\n+# Assuming loader.sh is launched from \"$GG_ROOT/alts/current/distro/bin/loader.sh\"\n+GG_ROOT=$(cd $PWD/../../../..; pwd)\n+\n+echo \"Greengrass root: \"${GG_ROOT}\n+\n+LAUNCH_DIR=\"$GG_ROOT/alts/current\"\n+\n+launch_kernel() {\n+  if [[ ! -d ${LAUNCH_DIR} ]] ; then\n+    echo FATAL: No Kernel found!\n+    exit 1\n+  fi\n+\n+  JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n+  # TODO: add $CONFIG_FILE\n+  OPTIONS=\"--root $GG_ROOT\"\n+  echo \"jvm options: \"${JVM_OPTIONS}\n+  java ${JVM_OPTIONS} -cp \"$LAUNCH_DIR/distro/lib/*\" com.aws.iot.evergreen.kernel.KernelCommandLine ${OPTIONS}\n+  kernel_exit_code=$?\n+  echo \"kernel exit at code: \"${kernel_exit_code}\n+}\n+\n+atomic_move() {\n+  mv -f $1 $2\n+}\n+\n+### Launch Kernel\n+if [[ -d ${GG_ROOT}/alts/old ]]; then\n+  # During deployment. Try to proceed with new kernel.\n+  # TODO: set correct config file\n+  CONFIG_FILE=\"$GG_ROOT/bin/ongoingDeployment/target.tlog\"\n+  # In this runtime, Kernel starts with DEPLOYMENT_ACTIVATION state,\n+  # and may transition into DEFAULT if success or restart into DEPLOYMENT_ROLLBACK\n+\n+elif [[ -d ${GG_ROOT}/alts/broken ]]; then\n+  # During deployment rollback.\n+  if [[ ! -d ${LAUNCH_DIR} ]] && [[ -d ${GG_ROOT}/alts/old ]]; then\n+    atomic_move ${GG_ROOT}/alts/old ${LAUNCH_DIR}\n+  fi", "originalCommit": "e784a2ae9021175fdd38eb072c6c1fae05a236f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNjUxOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r466636519", "bodyText": "Yes.", "author": "ShirleyZheng92", "createdAt": "2020-08-06T19:26:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwNjg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwNzU2MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r465907560", "bodyText": "I think we don't need to set config file in this case. Kernel should pick up from root/config", "author": "hui-yang", "createdAt": "2020-08-05T18:02:38Z", "path": "scripts/loader.sh", "diffHunk": "@@ -0,0 +1,95 @@\n+#!/bin/sh\n+\n+set -euo pipefail\n+\n+PWD=$(dirname \"$0\")\n+\n+# Assuming loader.sh is launched from \"$GG_ROOT/alts/current/distro/bin/loader.sh\"\n+GG_ROOT=$(cd $PWD/../../../..; pwd)\n+\n+echo \"Greengrass root: \"${GG_ROOT}\n+\n+LAUNCH_DIR=\"$GG_ROOT/alts/current\"\n+\n+launch_kernel() {\n+  if [[ ! -d ${LAUNCH_DIR} ]] ; then\n+    echo FATAL: No Kernel found!\n+    exit 1\n+  fi\n+\n+  JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n+  # TODO: add $CONFIG_FILE\n+  OPTIONS=\"--root $GG_ROOT\"\n+  echo \"jvm options: \"${JVM_OPTIONS}\n+  java ${JVM_OPTIONS} -cp \"$LAUNCH_DIR/distro/lib/*\" com.aws.iot.evergreen.kernel.KernelCommandLine ${OPTIONS}\n+  kernel_exit_code=$?\n+  echo \"kernel exit at code: \"${kernel_exit_code}\n+}\n+\n+atomic_move() {\n+  mv -f $1 $2\n+}\n+\n+### Launch Kernel\n+if [[ -d ${GG_ROOT}/alts/old ]]; then\n+  # During deployment. Try to proceed with new kernel.\n+  # TODO: set correct config file\n+  CONFIG_FILE=\"$GG_ROOT/bin/ongoingDeployment/target.tlog\"\n+  # In this runtime, Kernel starts with DEPLOYMENT_ACTIVATION state,\n+  # and may transition into DEFAULT if success or restart into DEPLOYMENT_ROLLBACK\n+\n+elif [[ -d ${GG_ROOT}/alts/broken ]]; then\n+  # During deployment rollback.\n+  if [[ ! -d ${LAUNCH_DIR} ]] && [[ -d ${GG_ROOT}/alts/old ]]; then\n+    atomic_move ${GG_ROOT}/alts/old ${LAUNCH_DIR}\n+  fi\n+\n+  # TODO: set correct config file\n+  CONFIG_FILE=\"$GG_ROOT/bin/ongoingDeployment/rollback.tlog\"\n+  # In this runtime, Kernel starts with DEPLOYMENT_ROLLBACK state,\n+  # and WILL transition into DEFAULT\n+\n+else\n+  echo \"TODO: set correct config file\"\n+  # TODO: set correct config file", "originalCommit": "e784a2ae9021175fdd38eb072c6c1fae05a236f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwODMxNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r465908314", "bodyText": "In systemd, service can be set to \"always restart\" or \"restart on error\". We may leverage that", "author": "hui-yang", "createdAt": "2020-08-05T18:04:08Z", "path": "scripts/loader.sh", "diffHunk": "@@ -0,0 +1,95 @@\n+#!/bin/sh\n+\n+set -euo pipefail\n+\n+PWD=$(dirname \"$0\")\n+\n+# Assuming loader.sh is launched from \"$GG_ROOT/alts/current/distro/bin/loader.sh\"\n+GG_ROOT=$(cd $PWD/../../../..; pwd)\n+\n+echo \"Greengrass root: \"${GG_ROOT}\n+\n+LAUNCH_DIR=\"$GG_ROOT/alts/current\"\n+\n+launch_kernel() {\n+  if [[ ! -d ${LAUNCH_DIR} ]] ; then\n+    echo FATAL: No Kernel found!\n+    exit 1\n+  fi\n+\n+  JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n+  # TODO: add $CONFIG_FILE\n+  OPTIONS=\"--root $GG_ROOT\"\n+  echo \"jvm options: \"${JVM_OPTIONS}\n+  java ${JVM_OPTIONS} -cp \"$LAUNCH_DIR/distro/lib/*\" com.aws.iot.evergreen.kernel.KernelCommandLine ${OPTIONS}\n+  kernel_exit_code=$?\n+  echo \"kernel exit at code: \"${kernel_exit_code}\n+}\n+\n+atomic_move() {\n+  mv -f $1 $2\n+}\n+\n+### Launch Kernel\n+if [[ -d ${GG_ROOT}/alts/old ]]; then\n+  # During deployment. Try to proceed with new kernel.\n+  # TODO: set correct config file\n+  CONFIG_FILE=\"$GG_ROOT/bin/ongoingDeployment/target.tlog\"\n+  # In this runtime, Kernel starts with DEPLOYMENT_ACTIVATION state,\n+  # and may transition into DEFAULT if success or restart into DEPLOYMENT_ROLLBACK\n+\n+elif [[ -d ${GG_ROOT}/alts/broken ]]; then\n+  # During deployment rollback.\n+  if [[ ! -d ${LAUNCH_DIR} ]] && [[ -d ${GG_ROOT}/alts/old ]]; then\n+    atomic_move ${GG_ROOT}/alts/old ${LAUNCH_DIR}\n+  fi\n+\n+  # TODO: set correct config file\n+  CONFIG_FILE=\"$GG_ROOT/bin/ongoingDeployment/rollback.tlog\"\n+  # In this runtime, Kernel starts with DEPLOYMENT_ROLLBACK state,\n+  # and WILL transition into DEFAULT\n+\n+else\n+  echo \"TODO: set correct config file\"\n+  # TODO: set correct config file\n+fi\n+\n+\n+j=1\n+while [[ $j -le 3 ]]; do\n+  launch_kernel\n+  case ${kernel_exit_code} in\n+  100)\n+    # Restart Kernel by restarting loader. Assume symlinks have been flipped.\n+    echo \"Restarting kernel\"\n+    exit 0 # or exec\n+    ;;\n+  101)\n+    # Reboot device. Assume symlinks have been flipped.\n+    echo \"Rebooting host\"\n+    sudo reboot\n+    ;;\n+  0)\n+    # TODO: disable loader when kernel exit normally?", "originalCommit": "e784a2ae9021175fdd38eb072c6c1fae05a236f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkwOTI1Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r465909257", "bodyText": "Seems difficult to recover from these 2 scenarios. We can discuss separately", "author": "hui-yang", "createdAt": "2020-08-05T18:06:01Z", "path": "scripts/loader.sh", "diffHunk": "@@ -0,0 +1,95 @@\n+#!/bin/sh\n+\n+set -euo pipefail\n+\n+PWD=$(dirname \"$0\")\n+\n+# Assuming loader.sh is launched from \"$GG_ROOT/alts/current/distro/bin/loader.sh\"\n+GG_ROOT=$(cd $PWD/../../../..; pwd)\n+\n+echo \"Greengrass root: \"${GG_ROOT}\n+\n+LAUNCH_DIR=\"$GG_ROOT/alts/current\"\n+\n+launch_kernel() {\n+  if [[ ! -d ${LAUNCH_DIR} ]] ; then\n+    echo FATAL: No Kernel found!\n+    exit 1\n+  fi\n+\n+  JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n+  # TODO: add $CONFIG_FILE\n+  OPTIONS=\"--root $GG_ROOT\"\n+  echo \"jvm options: \"${JVM_OPTIONS}\n+  java ${JVM_OPTIONS} -cp \"$LAUNCH_DIR/distro/lib/*\" com.aws.iot.evergreen.kernel.KernelCommandLine ${OPTIONS}\n+  kernel_exit_code=$?\n+  echo \"kernel exit at code: \"${kernel_exit_code}\n+}\n+\n+atomic_move() {\n+  mv -f $1 $2\n+}\n+\n+### Launch Kernel\n+if [[ -d ${GG_ROOT}/alts/old ]]; then\n+  # During deployment. Try to proceed with new kernel.\n+  # TODO: set correct config file\n+  CONFIG_FILE=\"$GG_ROOT/bin/ongoingDeployment/target.tlog\"\n+  # In this runtime, Kernel starts with DEPLOYMENT_ACTIVATION state,\n+  # and may transition into DEFAULT if success or restart into DEPLOYMENT_ROLLBACK\n+\n+elif [[ -d ${GG_ROOT}/alts/broken ]]; then\n+  # During deployment rollback.\n+  if [[ ! -d ${LAUNCH_DIR} ]] && [[ -d ${GG_ROOT}/alts/old ]]; then\n+    atomic_move ${GG_ROOT}/alts/old ${LAUNCH_DIR}\n+  fi\n+\n+  # TODO: set correct config file\n+  CONFIG_FILE=\"$GG_ROOT/bin/ongoingDeployment/rollback.tlog\"\n+  # In this runtime, Kernel starts with DEPLOYMENT_ROLLBACK state,\n+  # and WILL transition into DEFAULT\n+\n+else\n+  echo \"TODO: set correct config file\"\n+  # TODO: set correct config file\n+fi\n+\n+\n+j=1\n+while [[ $j -le 3 ]]; do\n+  launch_kernel\n+  case ${kernel_exit_code} in\n+  100)\n+    # Restart Kernel by restarting loader. Assume symlinks have been flipped.\n+    echo \"Restarting kernel\"\n+    exit 0 # or exec\n+    ;;\n+  101)\n+    # Reboot device. Assume symlinks have been flipped.\n+    echo \"Rebooting host\"\n+    sudo reboot\n+    ;;\n+  0)\n+    # TODO: disable loader when kernel exit normally?\n+    exit 0\n+    ;;\n+  *)\n+    echo \"Kernel exit ${kernel_exit_code}. Retrying $j times\"\n+    ;;\n+  esac\n+  j=$(( j + 1 ))\n+done\n+\n+# when reaching here, kernel has restarted 3 times and fails. Keep the current status and flip symlink.\n+# 1. If old+current: Kernel update failed. flip current to broken, old to current\n+if [[ -d ${GG_ROOT}/alts/old ]] || [[ -d ${GG_ROOT}/alts/current ]]; then\n+  atomic_move ${GG_ROOT}/alts/current ${GG_ROOT}/alts/broken\n+  atomic_move ${GG_ROOT}/alts/old ${GG_ROOT}/alts/current\n+fi\n+\n+# 2. If current+broken: rollback failed and kernel crashed. What to do? start with empty config?\n+\n+# 3. If current: no rollback option. What to do??? Restart Kernel?? Keep track of broken Kernel??", "originalCommit": "e784a2ae9021175fdd38eb072c6c1fae05a236f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxMDM5OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r465910399", "bodyText": "Just a note here. I'm going to move System.exit to shutdown in a later PR", "author": "hui-yang", "createdAt": "2020-08-05T18:08:18Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/activator/KernelUpdateActivator.java", "diffHunk": "@@ -66,15 +69,14 @@ public void activate(Map<Object, Object> newConfig, DeploymentDocument deploymen\n         try {\n             int exitCode = bootstrapManager.executeAllBootstrapTasksSequentially();\n             if (!bootstrapManager.hasNext()) {\n-                // TODO: flip symlinks, new to current\n                 logger.atInfo().log(\"Completed all bootstrap tasks. Continue to activate deployment changes\");\n             }\n             // If exitCode is 0, which happens when all bootstrap tasks are completed, restart in new launch\n             // directories and verify handover is complete. As a result, exit code 0 is treated as 100 here.\n             logger.atInfo().log((exitCode == 101 ? \"device reboot\" : \"kernel restart\")\n                     + \" requested to complete bootstrap task\");\n-            // TODO: Kernel shutdown supports exit code\n-            // System.exit(exitCode == 101 ? 101 : 100);\n+            // TODO: Kernel shutdown properly with exit code. Will be implemented in separate PR\n+            System.exit(exitCode == 101 ? 101 : 100);", "originalCommit": "e784a2ae9021175fdd38eb072c6c1fae05a236f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNjk4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r466636987", "bodyText": "ok", "author": "ShirleyZheng92", "createdAt": "2020-08-06T19:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxMDM5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxMDk0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r465910943", "bodyText": "Do you want to clean up some of the comments?", "author": "hui-yang", "createdAt": "2020-08-05T18:09:21Z", "path": "scripts/loader.sh", "diffHunk": "@@ -0,0 +1,95 @@\n+#!/bin/sh\n+\n+set -euo pipefail\n+\n+PWD=$(dirname \"$0\")\n+\n+# Assuming loader.sh is launched from \"$GG_ROOT/alts/current/distro/bin/loader.sh\"\n+GG_ROOT=$(cd $PWD/../../../..; pwd)\n+\n+echo \"Greengrass root: \"${GG_ROOT}\n+\n+LAUNCH_DIR=\"$GG_ROOT/alts/current\"\n+\n+launch_kernel() {\n+  if [[ ! -d ${LAUNCH_DIR} ]] ; then\n+    echo FATAL: No Kernel found!\n+    exit 1\n+  fi\n+\n+  JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n+  # TODO: add $CONFIG_FILE\n+  OPTIONS=\"--root $GG_ROOT\"\n+  echo \"jvm options: \"${JVM_OPTIONS}\n+  java ${JVM_OPTIONS} -cp \"$LAUNCH_DIR/distro/lib/*\" com.aws.iot.evergreen.kernel.KernelCommandLine ${OPTIONS}\n+  kernel_exit_code=$?\n+  echo \"kernel exit at code: \"${kernel_exit_code}\n+}\n+\n+atomic_move() {\n+  mv -f $1 $2\n+}\n+\n+### Launch Kernel\n+if [[ -d ${GG_ROOT}/alts/old ]]; then\n+  # During deployment. Try to proceed with new kernel.\n+  # TODO: set correct config file\n+  CONFIG_FILE=\"$GG_ROOT/bin/ongoingDeployment/target.tlog\"\n+  # In this runtime, Kernel starts with DEPLOYMENT_ACTIVATION state,\n+  # and may transition into DEFAULT if success or restart into DEPLOYMENT_ROLLBACK\n+\n+elif [[ -d ${GG_ROOT}/alts/broken ]]; then\n+  # During deployment rollback.\n+  if [[ ! -d ${LAUNCH_DIR} ]] && [[ -d ${GG_ROOT}/alts/old ]]; then\n+    atomic_move ${GG_ROOT}/alts/old ${LAUNCH_DIR}\n+  fi\n+\n+  # TODO: set correct config file\n+  CONFIG_FILE=\"$GG_ROOT/bin/ongoingDeployment/rollback.tlog\"\n+  # In this runtime, Kernel starts with DEPLOYMENT_ROLLBACK state,\n+  # and WILL transition into DEFAULT\n+\n+else\n+  echo \"TODO: set correct config file\"\n+  # TODO: set correct config file\n+fi\n+\n+\n+j=1\n+while [[ $j -le 3 ]]; do\n+  launch_kernel\n+  case ${kernel_exit_code} in\n+  100)\n+    # Restart Kernel by restarting loader. Assume symlinks have been flipped.\n+    echo \"Restarting kernel\"\n+    exit 0 # or exec", "originalCommit": "e784a2ae9021175fdd38eb072c6c1fae05a236f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxMTkwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r465911909", "bodyText": "Just a note here. atomic_move will not apply after I change current/old/broken to symlinks to directories", "author": "hui-yang", "createdAt": "2020-08-05T18:11:13Z", "path": "scripts/loader.sh", "diffHunk": "@@ -0,0 +1,95 @@\n+#!/bin/sh\n+\n+set -euo pipefail\n+\n+PWD=$(dirname \"$0\")\n+\n+# Assuming loader.sh is launched from \"$GG_ROOT/alts/current/distro/bin/loader.sh\"\n+GG_ROOT=$(cd $PWD/../../../..; pwd)\n+\n+echo \"Greengrass root: \"${GG_ROOT}\n+\n+LAUNCH_DIR=\"$GG_ROOT/alts/current\"\n+\n+launch_kernel() {\n+  if [[ ! -d ${LAUNCH_DIR} ]] ; then\n+    echo FATAL: No Kernel found!\n+    exit 1\n+  fi\n+\n+  JVM_OPTIONS=$(cat \"$LAUNCH_DIR/launch.params\")\n+  # TODO: add $CONFIG_FILE\n+  OPTIONS=\"--root $GG_ROOT\"\n+  echo \"jvm options: \"${JVM_OPTIONS}\n+  java ${JVM_OPTIONS} -cp \"$LAUNCH_DIR/distro/lib/*\" com.aws.iot.evergreen.kernel.KernelCommandLine ${OPTIONS}\n+  kernel_exit_code=$?\n+  echo \"kernel exit at code: \"${kernel_exit_code}\n+}\n+\n+atomic_move() {\n+  mv -f $1 $2\n+}\n+\n+### Launch Kernel\n+if [[ -d ${GG_ROOT}/alts/old ]]; then\n+  # During deployment. Try to proceed with new kernel.\n+  # TODO: set correct config file\n+  CONFIG_FILE=\"$GG_ROOT/bin/ongoingDeployment/target.tlog\"\n+  # In this runtime, Kernel starts with DEPLOYMENT_ACTIVATION state,\n+  # and may transition into DEFAULT if success or restart into DEPLOYMENT_ROLLBACK\n+\n+elif [[ -d ${GG_ROOT}/alts/broken ]]; then\n+  # During deployment rollback.\n+  if [[ ! -d ${LAUNCH_DIR} ]] && [[ -d ${GG_ROOT}/alts/old ]]; then\n+    atomic_move ${GG_ROOT}/alts/old ${LAUNCH_DIR}\n+  fi\n+\n+  # TODO: set correct config file\n+  CONFIG_FILE=\"$GG_ROOT/bin/ongoingDeployment/rollback.tlog\"\n+  # In this runtime, Kernel starts with DEPLOYMENT_ROLLBACK state,\n+  # and WILL transition into DEFAULT\n+\n+else\n+  echo \"TODO: set correct config file\"\n+  # TODO: set correct config file\n+fi\n+\n+\n+j=1\n+while [[ $j -le 3 ]]; do\n+  launch_kernel\n+  case ${kernel_exit_code} in\n+  100)\n+    # Restart Kernel by restarting loader. Assume symlinks have been flipped.\n+    echo \"Restarting kernel\"\n+    exit 0 # or exec\n+    ;;\n+  101)\n+    # Reboot device. Assume symlinks have been flipped.\n+    echo \"Rebooting host\"\n+    sudo reboot\n+    ;;\n+  0)\n+    # TODO: disable loader when kernel exit normally?\n+    exit 0\n+    ;;\n+  *)\n+    echo \"Kernel exit ${kernel_exit_code}. Retrying $j times\"\n+    ;;\n+  esac\n+  j=$(( j + 1 ))\n+done\n+\n+# when reaching here, kernel has restarted 3 times and fails. Keep the current status and flip symlink.\n+# 1. If old+current: Kernel update failed. flip current to broken, old to current\n+if [[ -d ${GG_ROOT}/alts/old ]] || [[ -d ${GG_ROOT}/alts/current ]]; then\n+  atomic_move ${GG_ROOT}/alts/current ${GG_ROOT}/alts/broken\n+  atomic_move ${GG_ROOT}/alts/old ${GG_ROOT}/alts/current", "originalCommit": "e784a2ae9021175fdd38eb072c6c1fae05a236f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxMjMwMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r465912303", "bodyText": "Not sure if we should call it GreengrassCore :)", "author": "hui-yang", "createdAt": "2020-08-05T18:11:47Z", "path": "EvergreenKernel-1.0.0.yaml", "diffHunk": "@@ -0,0 +1,31 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+ComponentName: EvergreenKernel\n+Description: Evergreen kernel", "originalCommit": "e784a2ae9021175fdd38eb072c6c1fae05a236f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNTU5NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r466635595", "bodyText": "Hmm we haven't decided on name yet. I can change it", "author": "ShirleyZheng92", "createdAt": "2020-08-06T19:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxMjMwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkxMjQwMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r465912403", "bodyText": "maybe 2.0.0?", "author": "hui-yang", "createdAt": "2020-08-05T18:12:00Z", "path": "EvergreenKernel-1.0.0.yaml", "diffHunk": "@@ -0,0 +1,31 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+ComponentName: EvergreenKernel\n+Description: Evergreen kernel\n+Publisher: Me\n+Version: '1.0.0'", "originalCommit": "e784a2ae9021175fdd38eb072c6c1fae05a236f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8e1bf29d425a05163419a97c25d09d3ceec64a2d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8e1bf29d425a05163419a97c25d09d3ceec64a2d", "message": "Add loader script, kernel recipe for kernel launch and update\n\nInit commit for loader script and kernel recipe.\nAdd maven package step to package EvergreenKernel zip", "committedDate": "2020-08-07T17:44:05Z", "type": "commit"}, {"oid": "83809cf754ed8503858020b1f92353a7c9ce6754", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/83809cf754ed8503858020b1f92353a7c9ce6754", "message": "Address comments", "committedDate": "2020-08-07T22:11:28Z", "type": "commit"}, {"oid": "83809cf754ed8503858020b1f92353a7c9ce6754", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/83809cf754ed8503858020b1f92353a7c9ce6754", "message": "Address comments", "committedDate": "2020-08-07T22:11:28Z", "type": "forcePushed"}, {"oid": "6ac9a606fb969f8a215e458f4f90f5226c48f101", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6ac9a606fb969f8a215e458f4f90f5226c48f101", "message": "Merge branch 'master' into loaderScript", "committedDate": "2020-08-10T17:21:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjc3OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/350#discussion_r468202778", "bodyText": "unzip isn't always installed. Checkout my PR: #359", "author": "MikeDombo", "createdAt": "2020-08-10T21:43:17Z", "path": "GreengrassCore-2.0.0.yaml", "diffHunk": "@@ -0,0 +1,31 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+ComponentName: GreengrassCore\n+Description: GreengrassCore\n+Publisher: Me\n+Version: '2.0.0'\n+Parameters:\n+- name: jvmOptions\n+  # TODO: consider change to nested structure\n+  value: -Xms512m -Xmx512m\n+  type: STRING\n+Artifacts:\n+  # TODO: add artifacts\n+Lifecycle:\n+  bootstrap:\n+    posix:\n+      script: |-\n+        set -euo pipefail\n+        KERNEL_ROOT={{kernel:rootPath}}\n+        UNPACK_DIR={{artifacts:decompressedPath}}\n+\n+        unzip \"{{artifacts:path}}/GreengrassCore-2.0.0.zip\" -d \"$UNPACK_DIR\"", "originalCommit": "6ac9a606fb969f8a215e458f4f90f5226c48f101", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "16a60ab902a6a0ecb360d7c770fd9f55a509935f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/16a60ab902a6a0ecb360d7c770fd9f55a509935f", "message": "Address comments", "committedDate": "2020-08-10T22:24:44Z", "type": "commit"}, {"oid": "120b5f28147a4a23c7392147ac0876e81b8f3a52", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/120b5f28147a4a23c7392147ac0876e81b8f3a52", "message": "Merge branch 'master' into loaderScript", "committedDate": "2020-08-11T02:18:17Z", "type": "commit"}, {"oid": "b835d2faf0727dc472741b8e75b1bb6b12b726e8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b835d2faf0727dc472741b8e75b1bb6b12b726e8", "message": "Merge branch 'master' into loaderScript", "committedDate": "2020-08-11T16:43:38Z", "type": "commit"}, {"oid": "098c371629838c035c489e8be186f8a1dbd65eef", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/098c371629838c035c489e8be186f8a1dbd65eef", "message": "change test coverage limit to make windows build pass", "committedDate": "2020-08-11T17:17:25Z", "type": "commit"}, {"oid": "498c936e3b87950573eeb497e12195e2be6a99a3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/498c936e3b87950573eeb497e12195e2be6a99a3", "message": "Merge branch 'master' into loaderScript", "committedDate": "2020-08-11T18:36:44Z", "type": "commit"}]}