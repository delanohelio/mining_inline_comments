{"pr_number": 508, "pr_title": "Add group-based CLI auth", "pr_createdAt": "2020-10-08T04:33:35Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508", "timeline": [{"oid": "85d7ba6505df78f49ac2e8493ab92bb22485cc1f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/85d7ba6505df78f49ac2e8493ab92bb22485cc1f", "message": "Add group-based CLI auth", "committedDate": "2020-10-08T18:16:16Z", "type": "forcePushed"}, {"oid": "a8f6abd28d96f4927fb46feabb3d62a05649a777", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a8f6abd28d96f4927fb46feabb3d62a05649a777", "message": "Add group-based CLI auth", "committedDate": "2020-10-08T22:03:17Z", "type": "forcePushed"}, {"oid": "cf57dfd7a893e50c9d51ececdca95a0b40338482", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cf57dfd7a893e50c9d51ececdca95a0b40338482", "message": "Add group-based CLI auth", "committedDate": "2020-10-08T22:48:05Z", "type": "forcePushed"}, {"oid": "668963d2816abc104033bac4aaef757a00dad16a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/668963d2816abc104033bac4aaef757a00dad16a", "message": "Add group-based CLI auth", "committedDate": "2020-10-08T23:37:55Z", "type": "forcePushed"}, {"oid": "fb807991abdc5f456848686d80adb2353f5a358e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fb807991abdc5f456848686d80adb2353f5a358e", "message": "Add group-based CLI auth", "committedDate": "2020-10-09T00:12:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1MzExNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r502153117", "bodyText": "reuse code with registerAuthenticationTokenForExternalClient ?", "author": "prateek-y", "createdAt": "2020-10-09T02:44:27Z", "path": "src/main/java/com/aws/greengrass/ipc/AuthenticationHandler.java", "diffHunk": "@@ -103,6 +103,40 @@ private String generateAuthenticationToken(String clientIdentifier) {\n         }\n     }\n \n+    /**\n+     * Revoke an auth token for an external client which is not part of Greengrass. Only authenticated EG service can\n+     * revoke such a token.\n+     * @param requestingAuthToken Auth token of the requesting service\n+     * @param authTokenToRevoke The auth token to revoke\n+     * @return true if authTokenToRevoke existed and is now removed, false if authTokenToRevoke does not exist.\n+     * @throws UnauthenticatedException thrown when the requestAuthToken is invalid\n+     */\n+    public boolean revokeAuthenticationTokenForExternalClient(String requestingAuthToken, String authTokenToRevoke)\n+            throws UnauthenticatedException {\n+        String authenticatedService = doAuthentication(requestingAuthToken);", "originalCommit": "fb807991abdc5f456848686d80adb2353f5a358e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1NTUzMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r502155532", "bodyText": "not sure if you should return 0? 0 could be root.", "author": "prateek-y", "createdAt": "2020-10-09T02:48:49Z", "path": "src/main/java/com/aws/greengrass/util/platforms/WindowsPlatform.java", "diffHunk": "@@ -42,4 +42,16 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     public int exitCodeWhenCommandDoesNotExist() {\n         return 1;\n     }\n+\n+    @Override\n+    public Group getGroup(String posixGroup) {\n+        // TODO: support windows platform\n+        return new Group(\"0\", 0);\n+    }\n+\n+    @Override\n+    public int getEffectiveUID() {\n+        // TODO: support windows platform\n+        return 0;", "originalCommit": "fb807991abdc5f456848686d80adb2353f5a358e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1NjY2Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r502556666", "bodyText": "I don't have enough information for Windows. Right now focusing the implementation on linux", "author": "hui-yang", "createdAt": "2020-10-09T16:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1NTUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0NTg5Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r503445897", "bodyText": "Thats fair, I meant that may be return a bad value like -1. 0 might be a valid value and you do not want to give access to UID 0 on windows by default?", "author": "prateek-y", "createdAt": "2020-10-12T17:49:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1NTUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyODI3OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r505128279", "bodyText": "Windows must run as Admin otherwise deployments fail because only admin is allowed to create symlinks on windows for whatever reason", "author": "MikeDombo", "createdAt": "2020-10-15T02:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1NTUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgwNDA4NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509804084", "bodyText": "Its going to be a string on Windows - they use guids for identifiers", "author": "rbattle", "createdAt": "2020-10-22T00:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1NTUzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1Njk0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r502156940", "bodyText": "I am not sure if this is the right way to do for all unix platforms. May be some one with better device knowledge can advice?", "author": "prateek-y", "createdAt": "2020-10-09T02:54:41Z", "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -30,6 +33,7 @@\n     protected static final int SIGINT = 2;\n     protected static final int SIGKILL = 9;\n     public static final Pattern PS_PID_PATTERN = Pattern.compile(\"(\\\\d+)\\\\s+(\\\\d+)\");\n+    private static final String POSIX_GROUP_FILE = \"/etc/group\";", "originalCommit": "fb807991abdc5f456848686d80adb2353f5a358e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1NzI3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r502557277", "bodyText": "Last time I checked, these are the linux flavors we will support ubuntu/raspbian/fedora. We can iterate on this if more unix platforms are required", "author": "hui-yang", "createdAt": "2020-10-09T16:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1Njk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1NzUyMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r502157522", "bodyText": "Can you fail creating paths here? What happens then.", "author": "prateek-y", "createdAt": "2020-10-09T02:57:13Z", "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -127,50 +146,155 @@ public void postInject() {\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n+\n+        config.lookup(PARAMETERS_CONFIG_KEY, posixGroups).subscribe((why, newv) -> {\n+            requestRestart();\n+        });\n     }\n \n     @Override\n     protected void startup() {\n+        reportState(State.STARTING);\n+\n         try {\n             generateCliIpcInfo();\n             reportState(State.RUNNING);\n         } catch (IOException | UnauthenticatedException e) {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n \n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+        Utils.createPaths(authTokenDir);", "originalCommit": "fb807991abdc5f456848686d80adb2353f5a358e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1Nzk0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r502557943", "bodyText": "It will throw IOException, fail service startup and mark service as ERRORED", "author": "hui-yang", "createdAt": "2020-10-09T16:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1NzUyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1NzYyNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r502157625", "bodyText": "Can revoke fail in a way that old tokens are also valid but you go ahead an create more tokens?", "author": "prateek-y", "createdAt": "2020-10-09T02:57:41Z", "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -127,50 +146,155 @@ public void postInject() {\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n+\n+        config.lookup(PARAMETERS_CONFIG_KEY, posixGroups).subscribe((why, newv) -> {\n+            requestRestart();\n+        });\n     }\n \n     @Override\n     protected void startup() {\n+        reportState(State.STARTING);\n+\n         try {\n             generateCliIpcInfo();\n             reportState(State.RUNNING);\n         } catch (IOException | UnauthenticatedException e) {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n \n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);", "originalCommit": "fb807991abdc5f456848686d80adb2353f5a358e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1OTYwOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r502559609", "bodyText": "If revokeOutdatedAuthTokens failed to clean up the configuration in memory, it should throw UnauthenticatedException, fail service startup and mark service as ERRORED. And it will not proceed to create new tokens.\nIf config cleanup finishes, but files are not deleted, it should be ok. Next time service starts or config changes, the directory will be cleaned up anyway", "author": "hui-yang", "createdAt": "2020-10-09T16:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1NzYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzODA3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r503638070", "bodyText": "Can at any point of time GGC load stale configuration with old tokens (in case of restart?). When does GGC make copy of configuration? This is a critical operation, upon which we need to ensure the persisted configuration is updated.", "author": "abanthiy", "createdAt": "2020-10-13T02:56:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1NzYyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzNjU4Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r503636582", "bodyText": "This check should happen before Line 130? and if its null, should this method return true instead, because the token is not permitted.", "author": "abanthiy", "createdAt": "2020-10-13T02:50:32Z", "path": "src/main/java/com/aws/greengrass/ipc/AuthenticationHandler.java", "diffHunk": "@@ -103,6 +103,40 @@ private String generateAuthenticationToken(String clientIdentifier) {\n         }\n     }\n \n+    /**\n+     * Revoke an auth token for an external client which is not part of Greengrass. Only authenticated EG service can\n+     * revoke such a token.\n+     * @param requestingAuthToken Auth token of the requesting service\n+     * @param authTokenToRevoke The auth token to revoke\n+     * @return true if authTokenToRevoke existed and is now removed, false if authTokenToRevoke does not exist.\n+     * @throws UnauthenticatedException thrown when the requestAuthToken is invalid\n+     */\n+    public boolean revokeAuthenticationTokenForExternalClient(String requestingAuthToken, String authTokenToRevoke)\n+            throws UnauthenticatedException {\n+        String authenticatedService = doAuthentication(requestingAuthToken);\n+        // Making it available only for CLIService right now. If it needs to be extended, requesting service can be\n+        // taken as a parameter\n+        if (!authenticatedService.equals(CLIService.CLI_SERVICE)) {\n+            logger.atError().kv(\"Requesting service name\", CLIService.CLI_SERVICE)\n+                    .log(\"Invalid requesting auth token for service to revoke external client token\");\n+            throw new UnauthenticatedException(\"Invalid requesting auth token for service\");\n+        }\n+        return revokeAuthenticationToken(authTokenToRevoke);\n+    }\n+\n+    private boolean revokeAuthenticationToken(String authTokenToRevoke) {\n+        Topic tokenTopic = config.lookup(GreengrassService.SERVICES_NAMESPACE_TOPIC,\n+                AUTHENTICATION_TOKEN_LOOKUP_KEY, authTokenToRevoke);\n+        tokenTopic.withParentNeedsToKnow(false);\n+\n+        if (tokenTopic == null) {\n+            return false;\n+        }", "originalCommit": "fb807991abdc5f456848686d80adb2353f5a358e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NDM2Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r507984363", "bodyText": "Moved the check up.\nAbout the return value, I tried to follow the convention of removing a item from a collection https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#remove-java.lang.Object- false means no change is done.\nAnother option is to return void instead of boolean", "author": "hui-yang", "createdAt": "2020-10-19T18:46:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzNjU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzNzE3NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r503637175", "bodyText": "This will need to be replace with the new IPC domain socket path. Add a TODO for now.", "author": "abanthiy", "createdAt": "2020-10-13T02:52:47Z", "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -127,50 +146,155 @@ public void postInject() {\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n+\n+        config.lookup(PARAMETERS_CONFIG_KEY, posixGroups).subscribe((why, newv) -> {\n+            requestRestart();\n+        });\n     }\n \n     @Override\n     protected void startup() {\n+        reportState(State.STARTING);\n+\n         try {\n             generateCliIpcInfo();\n             reportState(State.RUNNING);\n         } catch (IOException | UnauthenticatedException e) {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n \n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {", "originalCommit": "fb807991abdc5f456848686d80adb2353f5a358e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY5ODI3OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r503698279", "bodyText": "Might make this whole format as constant", "author": "abanthiy", "createdAt": "2020-10-13T06:34:42Z", "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -127,50 +146,155 @@ public void postInject() {\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n+\n+        config.lookup(PARAMETERS_CONFIG_KEY, posixGroups).subscribe((why, newv) -> {\n+            requestRestart();\n+        });\n     }\n \n     @Override\n     protected void startup() {\n+        reportState(State.STARTING);\n+\n         try {\n             generateCliIpcInfo();\n             reportState(State.RUNNING);\n         } catch (IOException | UnauthenticatedException e) {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n \n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+        Utils.createPaths(authTokenDir);\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        List<String> posixGroups = Coerce.toStringList(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.isEmpty()) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        ipcInfoFile.setReadable(false, false);\n+        ipcInfoFile.setReadable(true, true);\n+        ipcInfoFile.setWritable(true, true);\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForGroup(Group group, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        File ipcInfoFile = generateCliIpcInfoForClient(getClientIdForGroup(group.getId()), directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows file permissions\n+            ipcInfoFile.setReadable(false, false);\n+            ipcInfoFile.setReadable(true, true);\n+            ipcInfoFile.setWritable(true, true);\n+            return;\n+        }\n+        // This only supports POSIX compliant file permission right now. We will need to\n+        // change this when trying to support Greengrass in Non-POSIX OS.\n+        try {\n+            GroupPrincipal groupPrincipal = FileSystems.getDefault().getUserPrincipalLookupService()\n+                    .lookupPrincipalByGroupName(group.getName());\n+            PosixFileAttributeView posixFile = Files.getFileAttributeView(ipcInfoFile.toPath(),\n+                    PosixFileAttributeView.class, LinkOption.NOFOLLOW_LINKS);\n+            posixFile.setPermissions(PosixFilePermissions.fromString(GROUP_BASED_POSIX_FILE_PERMISSION));\n+            posixFile.setGroup(groupPrincipal);\n+        } catch (IOException e) {\n+            logger.atError().kv(\"file\", ipcInfoFile.toPath()).kv(\"permission\", GROUP_BASED_POSIX_FILE_PERMISSION)\n+                    .kv(\"groupOwner\", group.getName()).log(\"Failed to set up posix file permissions and group owner. \"\n+                    + \"Admin may have to manually update the file permission so that CLI authentication\"\n+                    + \"works as intended\", e);\n+        }\n+    }\n+\n+    private synchronized File generateCliIpcInfoForClient(String clientId, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        if (clientIdToAuthToken.containsKey(clientId)) {\n+            // Duplicate user input. No need to override auth token.\n+            return null;\n+        }\n+\n         String cliAuthToken = authenticationHandler.registerAuthenticationTokenForExternalClient(\n                 Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)),\n-                GREENGRASS_CLI);\n+                GREENGRASS_CLI + \"-\" + clientId);", "originalCommit": "fb807991abdc5f456848686d80adb2353f5a358e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY5ODkzNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r503698937", "bodyText": "you mean for group?", "author": "abanthiy", "createdAt": "2020-10-13T06:36:15Z", "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -127,50 +146,155 @@ public void postInject() {\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n+\n+        config.lookup(PARAMETERS_CONFIG_KEY, posixGroups).subscribe((why, newv) -> {\n+            requestRestart();\n+        });\n     }\n \n     @Override\n     protected void startup() {\n+        reportState(State.STARTING);\n+\n         try {\n             generateCliIpcInfo();\n             reportState(State.RUNNING);\n         } catch (IOException | UnauthenticatedException e) {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n \n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+        Utils.createPaths(authTokenDir);\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        List<String> posixGroups = Coerce.toStringList(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.isEmpty()) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        ipcInfoFile.setReadable(false, false);\n+        ipcInfoFile.setReadable(true, true);\n+        ipcInfoFile.setWritable(true, true);\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForGroup(Group group, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        File ipcInfoFile = generateCliIpcInfoForClient(getClientIdForGroup(group.getId()), directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows file permissions", "originalCommit": "fb807991abdc5f456848686d80adb2353f5a358e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyNzkxOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r505127919", "bodyText": "wrong path?", "author": "MikeDombo", "createdAt": "2020-10-15T02:31:51Z", "path": "src/main/java/com/aws/greengrass/util/NucleusPaths.java", "diffHunk": "@@ -22,15 +22,27 @@\n     private Path configPath;\n     private Path deploymentPath;\n     private Path kernelAltsPath;\n+    private Path cliIpcInfoPath;\n \n     public void initPaths(Path root, Path workPath, Path componentStorePath, Path configPath, Path kernelAlts,\n-                          Path deployment) throws IOException {\n+                          Path deployment, Path cliIpcInfo) throws IOException {\n         setRootPath(root);\n         setConfigPath(configPath);\n         setDeploymentPath(deployment);\n         setKernelAltsPath(kernelAlts);\n         setWorkPath(workPath);\n         setComponentStorePath(componentStorePath);\n+        setCliIpcInfoPath(cliIpcInfo);\n+    }\n+\n+    public void setCliIpcInfoPath(Path cliIpcInfoPath) throws IOException {\n+        this.cliIpcInfoPath = cliIpcInfoPath;\n+        Utils.createPaths(cliIpcInfoPath());\n+        Permissions.setCliIpcInfoPermission(kernelAltsPath());", "originalCommit": "fb807991abdc5f456848686d80adb2353f5a358e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyNzk3NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r505127975", "bodyText": "add the proper permission now", "author": "MikeDombo", "createdAt": "2020-10-15T02:32:05Z", "path": "src/main/java/com/aws/greengrass/util/Permissions.java", "diffHunk": "@@ -40,4 +40,7 @@ public static void setConfigPermission(Path p) {\n \n     public static void setPluginPermission(Path p) {\n     }\n+\n+    public static void setCliIpcInfoPermission(Path p) {\n+    }", "originalCommit": "fb807991abdc5f456848686d80adb2353f5a358e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d2db862aa41576c442b425c952b5e975377536cd", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d2db862aa41576c442b425c952b5e975377536cd", "message": "Add group-based CLI auth", "committedDate": "2020-10-15T16:49:11Z", "type": "forcePushed"}, {"oid": "e4938d0604f41bbecbf7609644c305f47705efe9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e4938d0604f41bbecbf7609644c305f47705efe9", "message": "Add group-based CLI auth", "committedDate": "2020-10-19T19:43:18Z", "type": "forcePushed"}, {"oid": "b2528b691f99fe3402fc29d64b5a1d3f70c6c37b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b2528b691f99fe3402fc29d64b5a1d3f70c6c37b", "message": "Add group-based CLI auth", "committedDate": "2020-10-19T20:56:53Z", "type": "forcePushed"}, {"oid": "3e2317a7ff8c5076b2184edc9658f62da1fb7ce8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3e2317a7ff8c5076b2184edc9658f62da1fb7ce8", "message": "Add group-based CLI auth", "committedDate": "2020-10-19T21:24:47Z", "type": "forcePushed"}, {"oid": "f8678849032967313278ea228d71c79948f11b34", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f8678849032967313278ea228d71c79948f11b34", "message": "Add group-based CLI auth", "committedDate": "2020-10-19T21:48:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2MzAwNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509463006", "bodyText": "use the permissions setting ability of Platform instead", "author": "MikeDombo", "createdAt": "2020-10-21T17:15:20Z", "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +158,145 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n+\n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n \n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.length() == 0) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups.split(\",\")) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForPosixGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        ipcInfoFile.setReadable(false, false);\n+        ipcInfoFile.setReadable(true, true);\n+        ipcInfoFile.setWritable(true, true);", "originalCommit": "73a14520ee994e2d7806eafc1c20482a751e11bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2MzcyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509463721", "bodyText": "don't do this yourself. Use Platform", "author": "MikeDombo", "createdAt": "2020-10-21T17:16:06Z", "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +158,145 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n+\n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n \n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.length() == 0) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups.split(\",\")) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForPosixGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        ipcInfoFile.setReadable(false, false);\n+        ipcInfoFile.setReadable(true, true);\n+        ipcInfoFile.setWritable(true, true);\n+    }\n+\n+    private synchronized void generateCliIpcInfoForPosixGroup(Group group, Path directory)", "originalCommit": "73a14520ee994e2d7806eafc1c20482a751e11bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fc20d7785c4064c1c58945f805aef09c2713964c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fc20d7785c4064c1c58945f805aef09c2713964c", "message": "Add group-based CLI auth", "committedDate": "2020-10-21T18:27:30Z", "type": "commit"}, {"oid": "fe65bb53a6fde4d7e30d029607df05841b58943f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fe65bb53a6fde4d7e30d029607df05841b58943f", "message": "Handle file permissions in Platform utils", "committedDate": "2020-10-21T18:27:30Z", "type": "forcePushed"}, {"oid": "471b264367920873eaa80ddef30da287e03c1b12", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/471b264367920873eaa80ddef30da287e03c1b12", "message": "Handle file permissions in Platform utils", "committedDate": "2020-10-21T20:12:48Z", "type": "commit"}, {"oid": "471b264367920873eaa80ddef30da287e03c1b12", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/471b264367920873eaa80ddef30da287e03c1b12", "message": "Handle file permissions in Platform utils", "committedDate": "2020-10-21T20:12:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMjkyMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509702920", "bodyText": "requestingServiceName for k-v", "author": "MikeDombo", "createdAt": "2020-10-21T21:14:25Z", "path": "src/main/java/com/aws/greengrass/ipc/AuthenticationHandler.java", "diffHunk": "@@ -103,6 +96,41 @@ private String generateAuthenticationToken(String clientIdentifier) {\n         }\n     }\n \n+    private void authenticateRequestsForExternalClient(String requestingAuthToken) throws UnauthenticatedException {\n+        String authenticatedService = doAuthentication(requestingAuthToken);\n+        // Making it available only for CLIService right now. If it needs to be extended, requesting service can be\n+        // taken as a parameter\n+        if (!authenticatedService.equals(CLIService.CLI_SERVICE)) {\n+            logger.atError().kv(\"Requesting service name\", CLIService.CLI_SERVICE)", "originalCommit": "471b264367920873eaa80ddef30da287e03c1b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMzU0Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509703547", "bodyText": "don't set withParentsNeedsToKnow, just remove it.", "author": "MikeDombo", "createdAt": "2020-10-21T21:15:08Z", "path": "src/main/java/com/aws/greengrass/ipc/AuthenticationHandler.java", "diffHunk": "@@ -103,6 +96,41 @@ private String generateAuthenticationToken(String clientIdentifier) {\n         }\n     }\n \n+    private void authenticateRequestsForExternalClient(String requestingAuthToken) throws UnauthenticatedException {\n+        String authenticatedService = doAuthentication(requestingAuthToken);\n+        // Making it available only for CLIService right now. If it needs to be extended, requesting service can be\n+        // taken as a parameter\n+        if (!authenticatedService.equals(CLIService.CLI_SERVICE)) {\n+            logger.atError().kv(\"Requesting service name\", CLIService.CLI_SERVICE)\n+                    .log(\"Invalid requesting auth token for service to register/revoke external client token\");\n+            throw new UnauthenticatedException(\"Invalid requesting auth token for service\");\n+        }\n+    }\n+\n+    /**\n+     * Revoke an auth token for an external client which is not part of Greengrass. Only authenticated EG service can\n+     * revoke such a token.\n+     * @param requestingAuthToken Auth token of the requesting service\n+     * @param authTokenToRevoke The auth token to revoke\n+     * @return true if authTokenToRevoke existed and is now removed, false if authTokenToRevoke does not exist.\n+     * @throws UnauthenticatedException thrown when the requestAuthToken is invalid\n+     */\n+    public boolean revokeAuthenticationTokenForExternalClient(String requestingAuthToken, String authTokenToRevoke)\n+            throws UnauthenticatedException {\n+        authenticateRequestsForExternalClient(requestingAuthToken);\n+        return revokeAuthenticationToken(authTokenToRevoke);\n+    }\n+\n+    private boolean revokeAuthenticationToken(String authTokenToRevoke) {\n+        Topic tokenTopic = config.lookup(GreengrassService.SERVICES_NAMESPACE_TOPIC,\n+                AUTHENTICATION_TOKEN_LOOKUP_KEY, authTokenToRevoke);\n+        if (tokenTopic == null) {\n+            return false;\n+        }\n+        tokenTopic.withParentNeedsToKnow(false).remove();", "originalCommit": "471b264367920873eaa80ddef30da287e03c1b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNDQzMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509704430", "bodyText": "do not do this. Just let it throw", "author": "MikeDombo", "createdAt": "2020-10-21T21:16:05Z", "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +155,138 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();", "originalCommit": "471b264367920873eaa80ddef30da287e03c1b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNTA4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509705080", "bodyText": "no getOnce when using coerce", "author": "MikeDombo", "createdAt": "2020-10-21T21:16:51Z", "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +155,138 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n \n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());", "originalCommit": "471b264367920873eaa80ddef30da287e03c1b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNTM5OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509705399", "bodyText": "can or should any of this stuff be moved into platform support?", "author": "MikeDombo", "createdAt": "2020-10-21T21:17:15Z", "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +155,138 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n \n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.length() == 0) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups.split(\",\")) {", "originalCommit": "471b264367920873eaa80ddef30da287e03c1b12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTczODUyOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509738529", "bodyText": "I don't think so. What's left here is just parsing component parameters and writing to file. The parameter name itself is platform-specific for now", "author": "hui-yang", "createdAt": "2020-10-21T22:00:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNTM5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNTc4Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509705783", "bodyText": "space before works or after authentication.", "author": "MikeDombo", "createdAt": "2020-10-21T21:17:44Z", "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +155,138 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n \n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.length() == 0) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups.split(\",\")) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForPosixGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        Platform.getInstance().setPermissions(DEFAULT_FILE_PERMISSION, ipcInfoFile.toPath());\n+    }\n+\n+    private synchronized void generateCliIpcInfoForPosixGroup(Group group, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        File ipcInfoFile = generateCliIpcInfoForClient(getClientIdForGroup(group.getId()), directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+\n+        FileSystemPermission filePermission = new FileSystemPermission(null, group.getName(), true, true, false,\n+                true, false, false, false, false, false);\n+        try {\n+            Platform.getInstance().setPermissions(filePermission, ipcInfoFile.toPath());\n+        } catch (IOException e) {\n+            logger.atError().kv(\"file\", ipcInfoFile.toPath()).kv(\"permission\", filePermission)\n+                    .kv(\"groupOwner\", group.getName()).log(\"Failed to set up posix file permissions and group owner. \"\n+                    + \"Admin may have to manually update the file permission so that CLI authentication\"\n+                    + \"works as intended\", e);", "originalCommit": "471b264367920873eaa80ddef30da287e03c1b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNjM4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509706380", "bodyText": "I'm not sure if filePermission has a reasonable toString, you may want to add @ToString to it.", "author": "MikeDombo", "createdAt": "2020-10-21T21:18:27Z", "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +155,138 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n \n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.length() == 0) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups.split(\",\")) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForPosixGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        Platform.getInstance().setPermissions(DEFAULT_FILE_PERMISSION, ipcInfoFile.toPath());\n+    }\n+\n+    private synchronized void generateCliIpcInfoForPosixGroup(Group group, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        File ipcInfoFile = generateCliIpcInfoForClient(getClientIdForGroup(group.getId()), directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+\n+        FileSystemPermission filePermission = new FileSystemPermission(null, group.getName(), true, true, false,\n+                true, false, false, false, false, false);\n+        try {\n+            Platform.getInstance().setPermissions(filePermission, ipcInfoFile.toPath());\n+        } catch (IOException e) {\n+            logger.atError().kv(\"file\", ipcInfoFile.toPath()).kv(\"permission\", filePermission)", "originalCommit": "471b264367920873eaa80ddef30da287e03c1b12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTczOTcxMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509739711", "bodyText": "@value should generate toString https://projectlombok.org/features/Value", "author": "hui-yang", "createdAt": "2020-10-21T22:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNjM4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNjcwMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509706703", "bodyText": "use filePath.toFile()", "author": "MikeDombo", "createdAt": "2020-10-21T21:18:51Z", "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +155,138 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n \n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.length() == 0) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups.split(\",\")) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForPosixGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        Platform.getInstance().setPermissions(DEFAULT_FILE_PERMISSION, ipcInfoFile.toPath());\n+    }\n+\n+    private synchronized void generateCliIpcInfoForPosixGroup(Group group, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        File ipcInfoFile = generateCliIpcInfoForClient(getClientIdForGroup(group.getId()), directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+\n+        FileSystemPermission filePermission = new FileSystemPermission(null, group.getName(), true, true, false,\n+                true, false, false, false, false, false);\n+        try {\n+            Platform.getInstance().setPermissions(filePermission, ipcInfoFile.toPath());\n+        } catch (IOException e) {\n+            logger.atError().kv(\"file\", ipcInfoFile.toPath()).kv(\"permission\", filePermission)\n+                    .kv(\"groupOwner\", group.getName()).log(\"Failed to set up posix file permissions and group owner. \"\n+                    + \"Admin may have to manually update the file permission so that CLI authentication\"\n+                    + \"works as intended\", e);\n+        }\n+    }\n+\n+    private synchronized File generateCliIpcInfoForClient(String clientId, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        if (clientIdToAuthToken.containsKey(clientId)) {\n+            // Duplicate user input. No need to override auth token.\n+            return null;\n+        }\n+\n         String cliAuthToken = authenticationHandler.registerAuthenticationTokenForExternalClient(\n-                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)),\n-                GREENGRASS_CLI);\n+                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)), getAuthClientIdentifier(clientId));\n+\n+        clientIdToAuthToken.put(clientId, cliAuthToken);\n+\n         Map<String, String> ipcInfo = new HashMap<>();\n         ipcInfo.put(CLI_AUTH_TOKEN, cliAuthToken);\n-\n         //TODO: Change the URL as per the new IPC\n         ipcInfo.put(SOCKET_URL, Coerce.toString(\n                 config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME)));\n \n-        Path filePath = kernel.getNucleusPaths().rootPath().resolve(CLI_IPC_INFO_FILENAME);\n+        Path filePath = directory.resolve(clientId);\n         Files.write(filePath, OBJECT_MAPPER.writeValueAsString(ipcInfo)\n                 .getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n-        // TODO: Add the users in configuration to a group and add group permissions for file on linux, windows and\n-        //  other platforms.\n-        File ipcInfoFile = new File(filePath.toString());\n         ipcInfo.clear();\n-        ipcInfoFile.setReadable(false, false);\n-        ipcInfoFile.setReadable(true, true);\n-        ipcInfoFile.setWritable(true, true);\n+        return new File(filePath.toString());", "originalCommit": "471b264367920873eaa80ddef30da287e03c1b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNzIxNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509707216", "bodyText": "use Files.delete which can give proper exceptions", "author": "MikeDombo", "createdAt": "2020-10-21T21:19:33Z", "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +155,138 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n \n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.length() == 0) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups.split(\",\")) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForPosixGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        Platform.getInstance().setPermissions(DEFAULT_FILE_PERMISSION, ipcInfoFile.toPath());\n+    }\n+\n+    private synchronized void generateCliIpcInfoForPosixGroup(Group group, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        File ipcInfoFile = generateCliIpcInfoForClient(getClientIdForGroup(group.getId()), directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+\n+        FileSystemPermission filePermission = new FileSystemPermission(null, group.getName(), true, true, false,\n+                true, false, false, false, false, false);\n+        try {\n+            Platform.getInstance().setPermissions(filePermission, ipcInfoFile.toPath());\n+        } catch (IOException e) {\n+            logger.atError().kv(\"file\", ipcInfoFile.toPath()).kv(\"permission\", filePermission)\n+                    .kv(\"groupOwner\", group.getName()).log(\"Failed to set up posix file permissions and group owner. \"\n+                    + \"Admin may have to manually update the file permission so that CLI authentication\"\n+                    + \"works as intended\", e);\n+        }\n+    }\n+\n+    private synchronized File generateCliIpcInfoForClient(String clientId, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        if (clientIdToAuthToken.containsKey(clientId)) {\n+            // Duplicate user input. No need to override auth token.\n+            return null;\n+        }\n+\n         String cliAuthToken = authenticationHandler.registerAuthenticationTokenForExternalClient(\n-                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)),\n-                GREENGRASS_CLI);\n+                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)), getAuthClientIdentifier(clientId));\n+\n+        clientIdToAuthToken.put(clientId, cliAuthToken);\n+\n         Map<String, String> ipcInfo = new HashMap<>();\n         ipcInfo.put(CLI_AUTH_TOKEN, cliAuthToken);\n-\n         //TODO: Change the URL as per the new IPC\n         ipcInfo.put(SOCKET_URL, Coerce.toString(\n                 config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME)));\n \n-        Path filePath = kernel.getNucleusPaths().rootPath().resolve(CLI_IPC_INFO_FILENAME);\n+        Path filePath = directory.resolve(clientId);\n         Files.write(filePath, OBJECT_MAPPER.writeValueAsString(ipcInfo)\n                 .getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n-        // TODO: Add the users in configuration to a group and add group permissions for file on linux, windows and\n-        //  other platforms.\n-        File ipcInfoFile = new File(filePath.toString());\n         ipcInfo.clear();\n-        ipcInfoFile.setReadable(false, false);\n-        ipcInfoFile.setReadable(true, true);\n-        ipcInfoFile.setWritable(true, true);\n+        return new File(filePath.toString());\n+    }\n+\n+    private String getAuthClientIdentifier(String clientId) {\n+        return String.format(GREENGRASS_CLI_CLIENT_ID_FMT, clientId);\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\"},\n+            justification = \"File to be deleted should exist\")\n+    private synchronized void revokeOutdatedAuthTokens(Path authTokenDir) throws UnauthenticatedException {\n+        for (Map.Entry<String, String> entry : clientIdToAuthToken.entrySet()) {\n+            authenticationHandler.revokeAuthenticationTokenForExternalClient(\n+                    Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)), entry.getValue());\n+        }\n+        clientIdToAuthToken.clear();\n+        File[] allContents = authTokenDir.toFile().listFiles();\n+        if (allContents != null) {\n+            for (File file : allContents) {", "originalCommit": "471b264367920873eaa80ddef30da287e03c1b12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNzYzNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509707634", "bodyText": "why not just use Utils.deleteFileRecursively", "author": "MikeDombo", "createdAt": "2020-10-21T21:20:03Z", "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +155,138 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n \n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.length() == 0) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups.split(\",\")) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForPosixGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        Platform.getInstance().setPermissions(DEFAULT_FILE_PERMISSION, ipcInfoFile.toPath());\n+    }\n+\n+    private synchronized void generateCliIpcInfoForPosixGroup(Group group, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        File ipcInfoFile = generateCliIpcInfoForClient(getClientIdForGroup(group.getId()), directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+\n+        FileSystemPermission filePermission = new FileSystemPermission(null, group.getName(), true, true, false,\n+                true, false, false, false, false, false);\n+        try {\n+            Platform.getInstance().setPermissions(filePermission, ipcInfoFile.toPath());\n+        } catch (IOException e) {\n+            logger.atError().kv(\"file\", ipcInfoFile.toPath()).kv(\"permission\", filePermission)\n+                    .kv(\"groupOwner\", group.getName()).log(\"Failed to set up posix file permissions and group owner. \"\n+                    + \"Admin may have to manually update the file permission so that CLI authentication\"\n+                    + \"works as intended\", e);\n+        }\n+    }\n+\n+    private synchronized File generateCliIpcInfoForClient(String clientId, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        if (clientIdToAuthToken.containsKey(clientId)) {\n+            // Duplicate user input. No need to override auth token.\n+            return null;\n+        }\n+\n         String cliAuthToken = authenticationHandler.registerAuthenticationTokenForExternalClient(\n-                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)),\n-                GREENGRASS_CLI);\n+                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)), getAuthClientIdentifier(clientId));\n+\n+        clientIdToAuthToken.put(clientId, cliAuthToken);\n+\n         Map<String, String> ipcInfo = new HashMap<>();\n         ipcInfo.put(CLI_AUTH_TOKEN, cliAuthToken);\n-\n         //TODO: Change the URL as per the new IPC\n         ipcInfo.put(SOCKET_URL, Coerce.toString(\n                 config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME)));\n \n-        Path filePath = kernel.getNucleusPaths().rootPath().resolve(CLI_IPC_INFO_FILENAME);\n+        Path filePath = directory.resolve(clientId);\n         Files.write(filePath, OBJECT_MAPPER.writeValueAsString(ipcInfo)\n                 .getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n-        // TODO: Add the users in configuration to a group and add group permissions for file on linux, windows and\n-        //  other platforms.\n-        File ipcInfoFile = new File(filePath.toString());\n         ipcInfo.clear();\n-        ipcInfoFile.setReadable(false, false);\n-        ipcInfoFile.setReadable(true, true);\n-        ipcInfoFile.setWritable(true, true);\n+        return new File(filePath.toString());\n+    }\n+\n+    private String getAuthClientIdentifier(String clientId) {\n+        return String.format(GREENGRASS_CLI_CLIENT_ID_FMT, clientId);\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\"},\n+            justification = \"File to be deleted should exist\")\n+    private synchronized void revokeOutdatedAuthTokens(Path authTokenDir) throws UnauthenticatedException {\n+        for (Map.Entry<String, String> entry : clientIdToAuthToken.entrySet()) {\n+            authenticationHandler.revokeAuthenticationTokenForExternalClient(\n+                    Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)), entry.getValue());\n+        }\n+        clientIdToAuthToken.clear();\n+        File[] allContents = authTokenDir.toFile().listFiles();", "originalCommit": "471b264367920873eaa80ddef30da287e03c1b12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTczNjQyNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509736425", "bodyText": "I initially used that, but it means the auth directory will be deleted and then recreated here in CLI service startup", "author": "hui-yang", "createdAt": "2020-10-21T21:58:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNzYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTczNzk5OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509737998", "bodyText": "OK", "author": "MikeDombo", "createdAt": "2020-10-21T22:00:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNzYzNA=="}], "type": "inlineReview"}, {"oid": "2e94e8e544a67ee151a2f9d3ab915fb3bd13e1ad", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2e94e8e544a67ee151a2f9d3ab915fb3bd13e1ad", "message": "Address comments", "committedDate": "2020-10-21T22:05:36Z", "type": "commit"}, {"oid": "6512a19756d3b2c705be236391e7a5c40f0f423e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6512a19756d3b2c705be236391e7a5c40f0f423e", "message": "fix build", "committedDate": "2020-10-21T22:24:59Z", "type": "commit"}]}