{"pr_number": 159, "pr_title": "Store package parameters in kernel config for use in future deployments", "pr_createdAt": "2020-04-06T20:11:56Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MTQzNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r404361437", "bodyText": "Not sure this method is needed, but in any case you should remove the this as that will cause a PMD violation.", "author": "MikeDombo", "createdAt": "2020-04-06T20:17:20Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -866,6 +790,10 @@ public String getName() {\n         return config == null ? getClass().getSimpleName() : config.getName();\n     }\n \n+    public Node getServiceChildConfig(String configKey) {\n+        return this.config.getChild(configKey);", "originalCommit": "8c411f0f2188fedf3a2cb30eb4cd1e58408428e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2MDcxNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r404460717", "bodyText": "Done", "author": "shaguptashaikh", "createdAt": "2020-04-07T00:06:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MTQzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MjAxMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r404362010", "bodyText": "I know this was there before, but I don't think we have any empty catches anymore, so let's get rid of this.", "author": "MikeDombo", "createdAt": "2020-04-06T20:18:21Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -664,4 +667,82 @@ private void removeServices(List<String> serviceToRemove) throws InterruptedExce\n                 .collect(Collectors.toList());\n \n     }\n+\n+\n+    /**\n+     * Locate an EvergreenService by name in the kernel context.\n+     *\n+     * @param name    name of the service to find\n+     * @return found service or null\n+     * @throws ServiceLoadException if service cannot load\n+     */\n+    @SuppressWarnings({\"checkstyle:emptycatchblock\"})", "originalCommit": "8c411f0f2188fedf3a2cb30eb4cd1e58408428e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2MDY5OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r404460699", "bodyText": "Done", "author": "shaguptashaikh", "createdAt": "2020-04-07T00:06:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MjAxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MzkzMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r404363930", "bodyText": "I do wonder if this should be a separate top-level key like \"services\" we can have \"parameters\", instead of being under each package. Because I think we will want a global param store for things like secrets and directory paths which are not unique to a package, but can be substituted in many locations.", "author": "MikeDombo", "createdAt": "2020-04-06T20:21:53Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -185,4 +194,21 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n         }\n         return Collections.emptySet();\n     }\n+\n+    /*\n+     * Get parameter values for a package stored in config that were set by customer in previous deployment.\n+     */\n+    private Set<PackageParameter> getParametersStoredInConfig(String packageName) {\n+        try {\n+            EvergreenService service = kernel.locate(packageName);\n+            Node parametersConfig = service.getServiceChildConfig(PARAMETERS_CONFIG_KEY);", "originalCommit": "8c411f0f2188fedf3a2cb30eb4cd1e58408428e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2MDY2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r404460668", "bodyText": "That can be done, although the secrets and directory paths will be controlled by the kernel or package manager and will not need to be updated on each deployment and based on changes to individual services. For package parameters IMO, they need to be added/updated when their respective services are and should also be removed when the services are removed, so in practice it's much cleaner to do that at the service level. Imagine you have a service being removed that was a dependency of some other service, our current deployment workflow will automatically remove that config(i.e. the kernel handles it), but if parameters are stored separately, it will need to be aware of the service being removed and remove the parameters based on that, it's probably the complexity we don't necessarily need right now", "author": "shaguptashaikh", "createdAt": "2020-04-07T00:06:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MzkzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NDI1MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r404364250", "bodyText": "Use your public static const for \"parameters\"?", "author": "MikeDombo", "createdAt": "2020-04-06T20:22:30Z", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -131,9 +143,12 @@ public void GIVEN_deployment_for_existing_package_WHEN_config_resolution_request\n \n         when(packageStore.getRecipe(rootPackageIdentifier)).thenReturn(rootPackage);\n         when(kernel.getMain()).thenReturn(mainService);\n+        when(kernel.locate(TEST_INPUT_PACKAGE_A)).thenReturn(alreadyRunningService);\n         when(mainService.getName()).thenReturn(\"main\");\n         when(mainService.getDependencies()).thenReturn(Collections.singletonMap(alreadyRunningService, State.RUNNING));\n         when(alreadyRunningService.getName()).thenReturn(TEST_INPUT_PACKAGE_A);\n+        when(alreadyRunningService.getServiceChildConfig(\"parameters\")).thenReturn(alreadyRunningServiceParametersConfig);", "originalCommit": "8c411f0f2188fedf3a2cb30eb4cd1e58408428e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1OTA5Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r404459093", "bodyText": "Done", "author": "shaguptashaikh", "createdAt": "2020-04-07T00:01:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NDI1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NDk3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r404364970", "bodyText": "Use IsEqual http://hamcrest.org/JavaHamcrest/javadoc/1.3/org/hamcrest/core/IsEqual.html.\nInstead of .equals() which won't give you a very good error.", "author": "MikeDombo", "createdAt": "2020-04-06T20:23:43Z", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -190,7 +206,59 @@ public void GIVEN_deployment_with_parameters_set_WHEN_config_resolution_requeste\n                 (Map<String, String>) getServiceInstallCommand(TEST_INPUT_PACKAGE_A, servicesConfig);\n \n         assertThat(\"If parameter value was set in deployment, it should be used\",\n-                   serviceInstallCommand.get(LIFECYCLE_SCRIPT_KEY)\n+                serviceInstallCommand.get(LIFECYCLE_SCRIPT_KEY)\n+                        .equals(\"echo installing service in Package PackageA with param PackageA_Param_1_value\"));\n+\n+        assertThat(\"If not parameter value was set in deployment, the default value should be used\",\n+                getServiceRunCommand(TEST_INPUT_PACKAGE_A, servicesConfig)\n+                        .equals(\"echo running service in Package PackageA with param PackageA_Param_2_default_value\"));\n+\n+    }\n+\n+    @Test\n+    public void GIVEN_deployment_with_params_not_set_WHEN_previous_deployment_had_params_THEN_use_params_from_previous_deployment()\n+            throws Exception {\n+        // GIVEN\n+        PackageIdentifier rootPackageIdentifier =\n+                new PackageIdentifier(TEST_INPUT_PACKAGE_A, new Semver(\"1.2\", Semver.SemverType.NPM));\n+        List<PackageIdentifier> packagesToDeploy = Arrays.asList(rootPackageIdentifier);\n+\n+        Package rootPackage = getPackage(TEST_INPUT_PACKAGE_A, \"1.2\", Collections.emptyMap(),\n+                getSimpleParameterMap(TEST_INPUT_PACKAGE_A));\n+\n+        DeploymentPackageConfiguration rootPackageDeploymentConfig =\n+                new DeploymentPackageConfiguration(TEST_INPUT_PACKAGE_A, \"1.2\", \">1.0\", Collections.emptySet(),\n+                        Collections.emptyList());\n+        DeploymentDocument document = DeploymentDocument.builder().rootPackages(Arrays.asList(TEST_INPUT_PACKAGE_A))\n+                .deploymentPackageConfigurationList(Arrays.asList(rootPackageDeploymentConfig)).build();\n+\n+        when(packageStore.getRecipe(rootPackageIdentifier)).thenReturn(rootPackage);\n+        when(kernel.getMain()).thenReturn(mainService);\n+        when(kernel.locate(TEST_INPUT_PACKAGE_A)).thenReturn(alreadyRunningService);\n+        when(mainService.getName()).thenReturn(\"main\");\n+        when(mainService.getDependencies()).thenReturn(Collections.singletonMap(alreadyRunningService, State.RUNNING));\n+        when(alreadyRunningService.getName()).thenReturn(TEST_INPUT_PACKAGE_A);\n+        when(alreadyRunningService.getServiceChildConfig(\"parameters\")).thenReturn(alreadyRunningServiceParametersConfig);\n+        when(alreadyRunningServiceParametersConfig.getOnce()).thenReturn(new HashSet<>(\n+                Arrays.asList(new PackageParameter(\"PackageA_Param_1\", \"PackageA_Param_1_value\", \"STRING\"))));\n+\n+        // WHEN\n+        KernelConfigResolver kernelConfigResolver = new KernelConfigResolver(packageStore, kernel);\n+        Map<Object, Object> resolvedConfig =\n+                kernelConfigResolver.resolve(packagesToDeploy, document, Arrays.asList(TEST_INPUT_PACKAGE_A));\n+\n+        // THEN\n+        // service config\n+        Map<Object, Object> servicesConfig = (Map<Object, Object>) resolvedConfig.get(\"services\");\n+        assertThat(\"Must contain main service\", servicesConfig.containsKey(\"main\"));\n+        assertThat(\"Must contain top level package service\", servicesConfig.containsKey(TEST_INPUT_PACKAGE_A));\n+\n+        // parameter interpolation\n+        Map<String, String> serviceInstallCommand =\n+                (Map<String, String>) getServiceInstallCommand(TEST_INPUT_PACKAGE_A, servicesConfig);\n+\n+        assertThat(\"If parameter value was set in deployment, it should be used\",", "originalCommit": "8c411f0f2188fedf3a2cb30eb4cd1e58408428e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1OTA3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r404459073", "bodyText": "Done", "author": "shaguptashaikh", "createdAt": "2020-04-07T00:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NDk3MA=="}], "type": "inlineReview"}, {"oid": "fc7aa8027648d552985375532cf829bea3e46b71", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fc7aa8027648d552985375532cf829bea3e46b71", "message": "Store package parameters in kernel config for use in future deployments", "committedDate": "2020-04-07T00:00:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MzA0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r404943045", "bodyText": "expose config via a getter and use functions in topics to search for sub keys? I have added find/findtopics/lookup and loouptopics to Topics class in my PR", "author": "fahadmohammed01", "createdAt": "2020-04-07T16:24:23Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -866,6 +790,10 @@ public String getName() {\n         return config == null ? getClass().getSimpleName() : config.getName();\n     }\n \n+    public Node getServiceChildConfig(String configKey) {", "originalCommit": "fc7aa8027648d552985375532cf829bea3e46b71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MDM5Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405150396", "bodyText": "As discussed offline, I've made this change and I'm using the existing getChild method that works for this code, let me know if you have any concerns", "author": "shaguptashaikh", "createdAt": "2020-04-07T22:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0MzA0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4NjI3NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r404986275", "bodyText": "So how does a package parameter get removed then? is it safe to assume that a missing parameter is not because it got deleted?", "author": "fahadmohammed01", "createdAt": "2020-04-07T17:28:39Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -169,7 +175,10 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n         // If values for parameters were set in deployment they should be used\n         Set<PackageParameter> resolvedParams = new HashSet<>(getParametersFromDeployment(document, pkg));\n \n-        // Use defaults for parameters for which no values were set in deployment\n+        // If not set in deployment, use values from previous deployments that were stored in config\n+        resolvedParams.addAll(getParametersStoredInConfig(pkg.getPackageName()));", "originalCommit": "fc7aa8027648d552985375532cf829bea3e46b71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5MDU0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r404990549", "bodyText": "Oops, I seem to have missed that, although, when parameters get removed, even if they stay in Kernel config they will not affect the service because they will not be interpolated anywhere, but even with that, if something gets removed from recipe it should be removed from the config too, I'll address that", "author": "shaguptashaikh", "createdAt": "2020-04-07T17:35:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4NjI3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5NTAzNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r404995035", "bodyText": "Done", "author": "shaguptashaikh", "createdAt": "2020-04-07T17:42:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4NjI3NQ=="}], "type": "inlineReview"}, {"oid": "54546ec980a11420cdbae92c6c38d5a9b0c8093b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/54546ec980a11420cdbae92c6c38d5a9b0c8093b", "message": "Store package parameters in kernel config for use in future deployments", "committedDate": "2020-04-07T17:30:54Z", "type": "forcePushed"}, {"oid": "cf7cb0c17f7cba0fa633776ce568d2698d01970a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cf7cb0c17f7cba0fa633776ce568d2698d01970a", "message": "Store package parameters in kernel config for use in future deployments", "committedDate": "2020-04-07T17:42:10Z", "type": "forcePushed"}, {"oid": "e0d3b76e2778cd3a84fb0a7622408166011acd26", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e0d3b76e2778cd3a84fb0a7622408166011acd26", "message": "Store package parameters in kernel config for use in future deployments", "committedDate": "2020-04-07T17:52:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzMzAxNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405033014", "bodyText": "Should we perhaps be storing them as key-value pairs so that they are translated into Topics which we can subscribe to? That way we can lookup specific parameters using find and lookup, as well as subscribe to their change.", "author": "MikeDombo", "createdAt": "2020-04-07T18:44:12Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -185,4 +198,18 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n         }\n         return Collections.emptySet();\n     }\n+\n+    /*\n+     * Get parameter values for a package stored in config that were set by customer in previous deployment.\n+     */\n+    private Set<PackageParameter> getParametersStoredInConfig(String packageName) {\n+        try {\n+            EvergreenService service = kernel.locate(packageName);\n+            Topic parametersConfig = service.getServiceConfig().lookup(PARAMETERS_CONFIG_KEY);\n+            return (Set<PackageParameter>) parametersConfig.getOnce();", "originalCommit": "e0d3b76e2778cd3a84fb0a7622408166011acd26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0OTg1NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405149855", "bodyText": "I personally like that idea very much and wanted to do that since the beginning, but we need to finalize the package parameters+custom kernel config our package recipe model to get it right. currently both are agnostic of eacc other. Also the kernel config syntax expects these key value pairs under a new parent key called 'custom' anyway https://quip-amazon.com/35xMAtuSgvha/Evergreen-Kernel-Configuration-Schema which is no different than storing package parameters under the parameters config key. I believe we should still be able to subscribe to updates to the overall parameters config? I would like to have the above things clarified first before storing them as plain key-value pairs, I can do that as a follow up, does that work?", "author": "shaguptashaikh", "createdAt": "2020-04-07T22:26:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzMzAxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNDUzMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405704530", "bodyText": "I made a change to store parameters as plain config key value pairs", "author": "shaguptashaikh", "createdAt": "2020-04-08T17:48:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzMzAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzNDI5MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405034290", "bodyText": "Use hamcrest: http://hamcrest.org/JavaHamcrest/javadoc/1.3/org/hamcrest/collection/IsMapContaining.html#hasKey(K)", "author": "MikeDombo", "createdAt": "2020-04-07T18:46:32Z", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -190,12 +208,66 @@ public void GIVEN_deployment_with_parameters_set_WHEN_config_resolution_requeste\n                 (Map<String, String>) getServiceInstallCommand(TEST_INPUT_PACKAGE_A, servicesConfig);\n \n         assertThat(\"If parameter value was set in deployment, it should be used\",\n-                   serviceInstallCommand.get(LIFECYCLE_SCRIPT_KEY)\n-                        .equals(\"echo installing service in Package PackageA with param PackageA_Param_1_value\"));\n+                serviceInstallCommand.get(LIFECYCLE_SCRIPT_KEY),\n+                equalTo(\"echo installing service in Package PackageA \" + \"with param PackageA_Param_1_value\"));\n+\n+        assertThat(\"If not parameter value was set in deployment, the default value should be used\",\n+                getServiceRunCommand(TEST_INPUT_PACKAGE_A, servicesConfig),\n+                equalTo(\"echo running service in Package \" + \"PackageA with param PackageA_Param_2_default_value\"));\n+\n+    }\n+\n+    @Test\n+    public void GIVEN_deployment_with_params_not_set_WHEN_previous_deployment_had_params_THEN_use_params_from_previous_deployment()\n+            throws Exception {\n+        // GIVEN\n+        PackageIdentifier rootPackageIdentifier =\n+                new PackageIdentifier(TEST_INPUT_PACKAGE_A, new Semver(\"1.2\", Semver.SemverType.NPM));\n+        List<PackageIdentifier> packagesToDeploy = Arrays.asList(rootPackageIdentifier);\n+\n+        Package rootPackage = getPackage(TEST_INPUT_PACKAGE_A, \"1.2\", Collections.emptyMap(),\n+                getSimpleParameterMap(TEST_INPUT_PACKAGE_A));\n+\n+        DeploymentPackageConfiguration rootPackageDeploymentConfig =\n+                new DeploymentPackageConfiguration(TEST_INPUT_PACKAGE_A, \"1.2\", \">1.0\", Collections.emptySet(),\n+                        Collections.emptyList());\n+        DeploymentDocument document = DeploymentDocument.builder().rootPackages(Arrays.asList(TEST_INPUT_PACKAGE_A))\n+                .deploymentPackageConfigurationList(Arrays.asList(rootPackageDeploymentConfig)).build();\n+\n+        when(packageStore.getRecipe(rootPackageIdentifier)).thenReturn(rootPackage);\n+        when(kernel.getMain()).thenReturn(mainService);\n+        when(kernel.locate(TEST_INPUT_PACKAGE_A)).thenReturn(alreadyRunningService);\n+        when(mainService.getName()).thenReturn(\"main\");\n+        when(mainService.getDependencies()).thenReturn(Collections.singletonMap(alreadyRunningService, State.RUNNING));\n+        when(alreadyRunningService.getName()).thenReturn(TEST_INPUT_PACKAGE_A);\n+        when(alreadyRunningService.getServiceConfig()).thenReturn(alreadyRunningServiceConfig);\n+        when(alreadyRunningServiceConfig.lookup(KernelConfigResolver.PARAMETERS_CONFIG_KEY))\n+                .thenReturn(alreadyRunningServiceParametersConfig);\n+        when(alreadyRunningServiceParametersConfig.getOnce()).thenReturn(new HashSet<>(\n+                Arrays.asList(new PackageParameter(\"PackageA_Param_1\", \"PackageA_Param_1_value\", \"STRING\"))));\n+\n+        // WHEN\n+        KernelConfigResolver kernelConfigResolver = new KernelConfigResolver(packageStore, kernel);\n+        Map<Object, Object> resolvedConfig =\n+                kernelConfigResolver.resolve(packagesToDeploy, document, Arrays.asList(TEST_INPUT_PACKAGE_A));\n+\n+        // THEN\n+        // service config\n+        Map<Object, Object> servicesConfig = (Map<Object, Object>) resolvedConfig.get(\"services\");\n+        assertThat(\"Must contain main service\", servicesConfig.containsKey(\"main\"));\n+        assertThat(\"Must contain top level package service\", servicesConfig.containsKey(TEST_INPUT_PACKAGE_A));", "originalCommit": "e0d3b76e2778cd3a84fb0a7622408166011acd26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MDcxMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405150711", "bodyText": "Done", "author": "shaguptashaikh", "createdAt": "2020-04-07T22:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzNDI5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NjA3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405696077", "bodyText": "Can this be null?", "author": "hui-yang", "createdAt": "2020-04-08T17:34:05Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -331,11 +330,8 @@ private void mergeActiveRootPackages(Set<String> rootPackagesToResolve,\n \n \n     protected Optional<String> getServiceVersion(final EvergreenService service) {\n-        Node versionNode = service.config.getChild(KernelConfigResolver.VERSION_CONFIG_KEY);\n-        if (versionNode instanceof Topic) {\n-            return Optional.of(((Topic) versionNode).getOnce().toString());\n-        }\n-        return Optional.empty();\n+        Topic version = service.getServiceConfig().lookup(KernelConfigResolver.VERSION_CONFIG_KEY);", "originalCommit": "c5d7eb1e5031ef4acb90b9d131c0087577d9c49d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNDE4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405704186", "bodyText": "It can be null in case of internal Evergreen services like ipc, deployment service etc but this code will never try to access a version for those, although I have added the null check just in case", "author": "shaguptashaikh", "createdAt": "2020-04-08T17:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NjA3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NzUwNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405697504", "bodyText": "Does this only apply to new package params which are introduced the this pkg version?", "author": "hui-yang", "createdAt": "2020-04-08T17:36:41Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -163,13 +168,21 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n \n     /*\n      * Resolve values to be used for all package parameters combining those coming from\n-     * deployment document and defaults for the rest.\n+     * deployment document, if not, those stored in the kernel config for previous\n+     * deployments and defaults for the rest.\n      */\n     private Set<PackageParameter> resolveParameterValuesToUse(DeploymentDocument document, Package pkg) {\n         // If values for parameters were set in deployment they should be used\n         Set<PackageParameter> resolvedParams = new HashSet<>(getParametersFromDeployment(document, pkg));\n \n-        // Use defaults for parameters for which no values were set in deployment\n+        // If not set in deployment, use values from previous deployments that were stored in config\n+        // Retain only those parameters which are still valid for the current version of the package\n+        Set<PackageParameter> parametersFromPreviousDeployments =\n+                getParametersStoredInConfig(pkg.getPackageName()).stream()\n+                        .filter(param -> pkg.getPackageParameters().contains(param)).collect(Collectors.toSet());\n+        resolvedParams.addAll(parametersFromPreviousDeployments);\n+\n+        // Use defaults for parameters for which no values were set in current or previous deployment\n         resolvedParams.addAll(pkg.getPackageParameters());", "originalCommit": "c5d7eb1e5031ef4acb90b9d131c0087577d9c49d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMjkyOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405702928", "bodyText": "If there are new ones and param values are set, they will be used as done at line 175, if not set then at line 181, their defaults will be used. So it applies to any params old or new for which no value was ever set by the customer", "author": "shaguptashaikh", "createdAt": "2020-04-08T17:45:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NzUwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5ODI0NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405698244", "bodyText": "Do we need to handle the case when parametersConfig is null?", "author": "hui-yang", "createdAt": "2020-04-08T17:37:52Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -185,4 +198,18 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n         }\n         return Collections.emptySet();\n     }\n+\n+    /*\n+     * Get parameter values for a package stored in config that were set by customer in previous deployment.\n+     */\n+    private Set<PackageParameter> getParametersStoredInConfig(String packageName) {\n+        try {\n+            EvergreenService service = kernel.locate(packageName);\n+            Topic parametersConfig = service.getServiceConfig().lookup(PARAMETERS_CONFIG_KEY);", "originalCommit": "c5d7eb1e5031ef4acb90b9d131c0087577d9c49d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMzQwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405703408", "bodyText": "Yeah, I just made a few changes which handle that case", "author": "shaguptashaikh", "createdAt": "2020-04-08T17:46:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5ODI0NA=="}], "type": "inlineReview"}, {"oid": "fc36730b1b6faadc63f28f790107f6e448a3b48d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fc36730b1b6faadc63f28f790107f6e448a3b48d", "message": "To be squashed, store parameters as direct config key value children of service config so that updates to them can be subscribed to", "committedDate": "2020-04-08T17:38:18Z", "type": "forcePushed"}, {"oid": "206656ba1e5cbc97232f3dd87891d4d3834c1c03", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/206656ba1e5cbc97232f3dd87891d4d3834c1c03", "message": "To be squashed, store parameters as direct config key value children of service config so that updates to them can be subscribed to", "committedDate": "2020-04-08T17:43:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMzY4Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405703682", "bodyText": "We already have this in the aftereach.", "author": "MikeDombo", "createdAt": "2020-04-08T17:47:19Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -116,7 +115,8 @@ void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_\n         Utils.waitForJobToComplete(jobId, Duration.ofMinutes(2));\n         // Ensure that main is finished, which is its terminal state, so this means that all updates ought to be done\n         assertEquals(State.FINISHED, kernel.getMain().getState());\n-        assertEquals(State.FINISHED, EvergreenService.locate(kernel.context, \"CustomerApp\").getState());\n+        assertEquals(State.FINISHED, kernel.locate(\"CustomerApp\").getState());\n+        kernel.shutdown();", "originalCommit": "206656ba1e5cbc97232f3dd87891d4d3834c1c03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNzYzNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405707635", "bodyText": "Yeah, that was a result of a rebase conflict, fixed it", "author": "shaguptashaikh", "createdAt": "2020-04-08T17:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMzY4Mg=="}], "type": "inlineReview"}, {"oid": "eea42044d007df0a76812511a4cdc28422ec8c7d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eea42044d007df0a76812511a4cdc28422ec8c7d", "message": "To be squashed, store parameters as direct config key value children of service config so that updates to them can be subscribed to", "committedDate": "2020-04-08T17:53:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNjYyNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405706624", "bodyText": "typo: too many s. parameters", "author": "MikeDombo", "createdAt": "2020-04-08T17:52:21Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -185,4 +193,37 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n         }\n         return Collections.emptySet();\n     }\n+\n+    /*\n+     * Get parameter values for a package stored in config that were set by customer in previous deployment.\n+     */\n+    private Set<PackageParameter> getParametersStoredInConfig(Package pkg) {\n+        try {\n+            EvergreenService service = kernel.locate(pkg.getPackageName());\n+            Set<PackageParameter> parameterssStoredInConfig = new HashSet<>();", "originalCommit": "206656ba1e5cbc97232f3dd87891d4d3834c1c03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyNDE0MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405724140", "bodyText": "Fixed", "author": "shaguptashaikh", "createdAt": "2020-04-08T18:22:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNjYyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNzE2Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405707162", "bodyText": "nit:\njust use @getter?\nAlso, the name is a bit confusing since it seemed to me that this was getting the parameter value. But this is actually the parameter's type.", "author": "MikeDombo", "createdAt": "2020-04-08T17:53:16Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageParameter.java", "diffHunk": "@@ -46,5 +46,9 @@ public PackageParameter(@JsonProperty(\"name\") String name, @JsonProperty(\"value\"\n         ParameterType(final String val) {\n             this.parameterType = val;\n         }\n+\n+        public String getValue() {\n+            return parameterType;", "originalCommit": "206656ba1e5cbc97232f3dd87891d4d3834c1c03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyNTAwNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405725004", "bodyText": "Using getter, yeah value in this context was the enum value, it was replaced with a getter now, although now when I use it, it becomes getType().getParameterType() which is also not nice to read, but I've left it that way now", "author": "shaguptashaikh", "createdAt": "2020-04-08T18:23:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNzE2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyNzc5Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405727793", "bodyText": "Where is it used? Why do you want the stringy value of the type instead of the enum itself?", "author": "MikeDombo", "createdAt": "2020-04-08T18:28:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNzE2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2Mzk0Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405763943", "bodyText": "Because the old one with string is used for deployment doc deserialization directly using string values, I'm not sure if I can change it to use enum, I can give it s shot", "author": "shaguptashaikh", "createdAt": "2020-04-08T19:32:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNzE2Mg=="}], "type": "inlineReview"}, {"oid": "fca8eae1ee81fa210d06993f8967d81b45879cd5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fca8eae1ee81fa210d06993f8967d81b45879cd5", "message": "To be squashed, store parameters as direct config key value children of service config so that updates to them can be subscribed to", "committedDate": "2020-04-08T17:58:37Z", "type": "forcePushed"}, {"oid": "8dd2ece855efb1fb58b83c47b96d7e829e74554a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8dd2ece855efb1fb58b83c47b96d7e829e74554a", "message": "To be squashed, store parameters as direct config key value children of service config so that updates to them can be subscribed to", "committedDate": "2020-04-08T18:14:35Z", "type": "forcePushed"}, {"oid": "601312ea3ed3c0c01c730b1d1a269cfffcee25b7", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/601312ea3ed3c0c01c730b1d1a269cfffcee25b7", "message": "To be squashed, store parameters as direct config key value children of service config so that updates to them can be subscribed to", "committedDate": "2020-04-08T18:20:10Z", "type": "forcePushed"}, {"oid": "92564bbc52974f7b06a9e9f17f39498be3da0305", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/92564bbc52974f7b06a9e9f17f39498be3da0305", "message": "To be squashed, store parameters as direct config key value children of service config so that updates to them can be subscribed to", "committedDate": "2020-04-08T18:21:44Z", "type": "forcePushed"}, {"oid": "66822f871bcc27fcdd9fb4a3756414ec3b033d2d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/66822f871bcc27fcdd9fb4a3756414ec3b033d2d", "message": "To be squashed, store parameters as direct config key value children of service config so that updates to them can be subscribed to", "committedDate": "2020-04-08T18:27:46Z", "type": "forcePushed"}, {"oid": "4ae51d0c8bfb918127bd038d02dc5761e69e7781", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4ae51d0c8bfb918127bd038d02dc5761e69e7781", "message": "To be squashed, store parameters as direct config key value children of service config so that updates to them can be subscribed to", "committedDate": "2020-04-08T18:38:18Z", "type": "forcePushed"}, {"oid": "fbe6ea3241b87caba227c1bd140834ab0c372506", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fbe6ea3241b87caba227c1bd140834ab0c372506", "message": "To be squashed, store parameters as direct config key value children of service config so that updates to them can be subscribed to", "committedDate": "2020-04-08T18:40:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NDA1MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405754051", "bodyText": "Why not create a new constructor for PackageParameter. I'm assuming that the existing constructor is just going to convert from string to ParameterType, which is pointless since we already have the type.", "author": "MikeDombo", "createdAt": "2020-04-08T19:13:42Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -185,4 +190,37 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n         }\n         return Collections.emptySet();\n     }\n+\n+    /*\n+     * Get parameter values for a package stored in config that were set by customer in previous deployment.\n+     */\n+    private Set<PackageParameter> getParametersStoredInConfig(Package pkg) {\n+        try {\n+            EvergreenService service = kernel.locate(pkg.getPackageName());\n+            Set<PackageParameter> parametersStoredInConfig = new HashSet<>();\n+\n+            // Get only those parameters which are still valid for the current version of the package\n+            pkg.getPackageParameters().forEach(parameterFromRecipe -> {\n+                Optional<String> parameterValueStoredInConfig =\n+                        getParameterValueFromServiceConfig(service, parameterFromRecipe.getName());\n+                if (parameterValueStoredInConfig.isPresent()) {\n+                    parametersStoredInConfig\n+                            .add(new PackageParameter(parameterFromRecipe.getName(), parameterValueStoredInConfig.get(),", "originalCommit": "fbe6ea3241b87caba227c1bd140834ab0c372506", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc3NDUwMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405774501", "bodyText": "Because the old one with string is used for deployment doc deserialization directly using string values, I'm not sure if I can change it to use enum, I can give it s shot", "author": "shaguptashaikh", "createdAt": "2020-04-08T19:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NDA1MQ=="}], "type": "inlineReview"}, {"oid": "9db99bb815fb96a40e3827b9580b34063414d1be", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9db99bb815fb96a40e3827b9580b34063414d1be", "message": "To be squashed, store parameters as direct config key value children of service config so that updates to them can be subscribed to", "committedDate": "2020-04-08T20:02:58Z", "type": "forcePushed"}, {"oid": "3f2a6b304b8fc5b0b250950d727a4493e9313229", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3f2a6b304b8fc5b0b250950d727a4493e9313229", "message": "To be squashed, store parameters as direct config key value children of service config so that updates to them can be subscribed to", "committedDate": "2020-04-08T20:06:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxNzg5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405817891", "bodyText": "do we need to add the resolved params under a different root to avoid name clashes", "author": "fahadmohammed01", "createdAt": "2020-04-08T21:12:18Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -92,12 +92,13 @@\n         // then change the following code accordingly\n \n         // Generate dependencies\n-        // TODO : Only platform specific dependencies should be added once deployment document and\n-        // package recipe format supports platform wise dependency specification\n-\n         List<String> dependencyServiceNames = new ArrayList<>(pkg.getDependencies().keySet());\n         resolvedServiceConfig.put(SERVICE_DEPENDENCIES_CONFIG_KEY, dependencyServiceNames);\n+\n+        // State information for deployments\n         resolvedServiceConfig.put(VERSION_CONFIG_KEY, pkg.getVersion());\n+        resolvedParams.forEach(param -> resolvedServiceConfig.putIfAbsent(param.getName(), param.getValue()));", "originalCommit": "3f2a6b304b8fc5b0b250950d727a4493e9313229", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyMDQ3OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405820479", "bodyText": "That's what we had done earlier but later decided to add them directly as service config. There can be naming clashes only if there is other config keys with those names, which is part of the custom config that we are not doing in 2020 like Michael pointed out earlier in his comment, so we shouldn't face name conflicts. Once we start supporting custom config and this becomes a problem we can reorganize this", "author": "shaguptashaikh", "createdAt": "2020-04-08T21:17:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxNzg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyODQxMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405828412", "bodyText": "Sorry I had misunderstood the comment, the parameters are stored under the parameters key like you said, please take a quick look at the new revision", "author": "shaguptashaikh", "createdAt": "2020-04-08T21:33:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxNzg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyMTYyOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405821629", "bodyText": "shouldn't his be kernel.locate(\"services\", \"packagename\") assuming package name = service name", "author": "fahadmohammed01", "createdAt": "2020-04-08T21:19:35Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -185,4 +190,37 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n         }\n         return Collections.emptySet();\n     }\n+\n+    /*\n+     * Get parameter values for a package stored in config that were set by customer in previous deployment.\n+     */\n+    private Set<PackageParameter> getParametersStoredInConfig(Package pkg) {\n+        try {\n+            EvergreenService service = kernel.locate(pkg.getPackageName());", "originalCommit": "3f2a6b304b8fc5b0b250950d727a4493e9313229", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyMzE4OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405823188", "bodyText": "No, the locate method automatically looks under the 'services' namespace, and yes package name is the same as the service name", "author": "shaguptashaikh", "createdAt": "2020-04-08T21:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyMTYyOQ=="}], "type": "inlineReview"}, {"oid": "b5fd3d3f041400a4f6320a9a85a60bd3dedc5552", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b5fd3d3f041400a4f6320a9a85a60bd3dedc5552", "message": "To be squashed, store parameters as direct config key value children of service config so that updates to them can be subscribed to", "committedDate": "2020-04-08T21:32:06Z", "type": "forcePushed"}, {"oid": "5d701914b2384cdec41682448404731ef72f0ec9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5d701914b2384cdec41682448404731ef72f0ec9", "message": "Store package parameters in kernel config for use in future deployments", "committedDate": "2020-04-08T22:04:44Z", "type": "forcePushed"}, {"oid": "43f82c786a6ec82587b2567d90483710cd1f73ff", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/43f82c786a6ec82587b2567d90483710cd1f73ff", "message": "Store package parameters in kernel config for use in future deployments", "committedDate": "2020-04-08T22:06:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0NDU5OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405844598", "bodyText": "Please don't add this ignore. It needs to be thought through better.", "author": "MikeDombo", "createdAt": "2020-04-08T22:11:09Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -750,7 +669,7 @@ protected void shutdown() throws InterruptedException {\n      *\n      * @return future completes when the lifecycle thread shuts down.\n      */\n-    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidGettingFutureWithoutTimeout\"})", "originalCommit": "43f82c786a6ec82587b2567d90483710cd1f73ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0NjU0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405846545", "bodyText": "Removed", "author": "shaguptashaikh", "createdAt": "2020-04-08T22:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0NDU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0NDcxMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405844710", "bodyText": "Same here.", "author": "MikeDombo", "createdAt": "2020-04-08T22:11:25Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -658,11 +661,12 @@ protected void waitForServicesToStart(Set<EvergreenService> servicesToTrack,\n         }\n     }\n \n+    @SuppressWarnings(\"PMD.AvoidGettingFutureWithoutTimeout\")", "originalCommit": "43f82c786a6ec82587b2567d90483710cd1f73ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0NjU2MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/159#discussion_r405846561", "bodyText": "Removed", "author": "shaguptashaikh", "createdAt": "2020-04-08T22:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0NDcxMA=="}], "type": "inlineReview"}, {"oid": "033736bdee3216128b4d43947666c8c69e6d4dba", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/033736bdee3216128b4d43947666c8c69e6d4dba", "message": "Store package parameters in kernel config for use in future deployments", "committedDate": "2020-04-08T22:15:12Z", "type": "commit"}, {"oid": "033736bdee3216128b4d43947666c8c69e6d4dba", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/033736bdee3216128b4d43947666c8c69e6d4dba", "message": "Store package parameters in kernel config for use in future deployments", "committedDate": "2020-04-08T22:15:12Z", "type": "forcePushed"}]}