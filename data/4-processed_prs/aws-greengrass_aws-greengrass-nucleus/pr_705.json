{"pr_number": 705, "pr_title": "Move telemetry config to system settings.", "pr_createdAt": "2020-11-19T05:32:09Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705", "timeline": [{"oid": "8f98836185f814127067f7624397552f10129be8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8f98836185f814127067f7624397552f10129be8", "message": "Move telemetry config to system settings.", "committedDate": "2020-11-19T05:52:04Z", "type": "forcePushed"}, {"oid": "1559bc201d797bcd3c35bac41a938956c7b06ede", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1559bc201d797bcd3c35bac41a938956c7b06ede", "message": "Move telemetry config to system settings.", "committedDate": "2020-11-19T17:28:05Z", "type": "forcePushed"}, {"oid": "095f1fc41e7613f9598bf087b96e66784303453a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/095f1fc41e7613f9598bf087b96e66784303453a", "message": "Move telemetry config to system settings.", "committedDate": "2020-11-19T18:00:23Z", "type": "commit"}, {"oid": "095f1fc41e7613f9598bf087b96e66784303453a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/095f1fc41e7613f9598bf087b96e66784303453a", "message": "Move telemetry config to system settings.", "committedDate": "2020-11-19T18:00:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5MzkxNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r527093915", "bodyText": "Let's get in the habit of JavaDoc'ing what this property is", "author": "JamieHunter", "createdAt": "2020-11-19T18:07:46Z", "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -80,6 +71,9 @@ public void onConnectionResumed(boolean sessionPresent) {\n         }\n     };\n     private String thingName;\n+    @Setter // Needed for integration tests.", "originalCommit": "095f1fc41e7613f9598bf087b96e66784303453a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NDM5NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r527094394", "bodyText": "One of the reasons why I don't like justified text like this is because a parameter can cause a large block change :(", "author": "JamieHunter", "createdAt": "2020-11-19T18:08:37Z", "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -103,15 +97,16 @@ public TelemetryAgent(Topics topics, MqttClient mqttClient, DeviceConfiguration\n     /**\n      * Constructor for the class.\n      *\n-     * @param topics                                root configuration topic for this service\n-     * @param mqttClient                            {@link MqttClient}\n-     * @param deviceConfiguration                   {@link DeviceConfiguration}\n-     * @param ma                                    {@link MetricsAggregator}\n-     * @param sme                                   {@link SystemMetricsEmitter}\n-     * @param kme                                   {@link KernelMetricsEmitter}\n-     * @param ses                                   {@link ScheduledExecutorService}\n-     * @param periodicPublishMetricsIntervalSec     interval for cadence based telemetry publish.\n-     * @param periodicAggregateMetricsIntervalSec   interval for cadence based telemetry metrics aggregation.*/\n+     * @param topics                              root configuration topic for this service", "originalCommit": "095f1fc41e7613f9598bf087b96e66784303453a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NDkwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r527094907", "bodyText": "There are too many inputs into this, you need a builder class (c/o Lombok) In particular, it is easy to mix parameters up and have a valid constructor.", "author": "JamieHunter", "createdAt": "2020-11-19T18:09:23Z", "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -103,15 +97,16 @@ public TelemetryAgent(Topics topics, MqttClient mqttClient, DeviceConfiguration\n     /**\n      * Constructor for the class.\n      *\n-     * @param topics                                root configuration topic for this service\n-     * @param mqttClient                            {@link MqttClient}\n-     * @param deviceConfiguration                   {@link DeviceConfiguration}\n-     * @param ma                                    {@link MetricsAggregator}\n-     * @param sme                                   {@link SystemMetricsEmitter}\n-     * @param kme                                   {@link KernelMetricsEmitter}\n-     * @param ses                                   {@link ScheduledExecutorService}\n-     * @param periodicPublishMetricsIntervalSec     interval for cadence based telemetry publish.\n-     * @param periodicAggregateMetricsIntervalSec   interval for cadence based telemetry metrics aggregation.*/\n+     * @param topics                              root configuration topic for this service\n+     * @param mqttClient                          {@link MqttClient}\n+     * @param deviceConfiguration                 {@link DeviceConfiguration}\n+     * @param ma                                  {@link MetricsAggregator}\n+     * @param sme                                 {@link SystemMetricsEmitter}\n+     * @param kme                                 {@link KernelMetricsEmitter}\n+     * @param ses                                 {@link ScheduledExecutorService}\n+     * @param periodicPublishMetricsIntervalSec   interval for cadence based telemetry publish.\n+     * @param periodicAggregateMetricsIntervalSec interval for cadence based telemetry metrics aggregation.\n+     */\n     public TelemetryAgent(Topics topics, MqttClient mqttClient, DeviceConfiguration deviceConfiguration,", "originalCommit": "095f1fc41e7613f9598bf087b96e66784303453a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE0NTE4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r527145186", "bodyText": "This constructor is only used in the unit tests. Should be fine to make it just package-private right?", "author": "nikkhilmuthye", "createdAt": "2020-11-19T19:31:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5NDkwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5ODc2MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r527098760", "bodyText": "builder().build() pattern generally makes sense for an immutable object. It seems this is mutable. Given this is mutable, I have concerns with thread safety. You have synchronized sections below, but it is not maintainable because it is easy for someone to get wrong. Making this structure immutable, and make this property an AtomicReference to make it maintainable thread safe.\nAlso note when you get the parameters, get the structure first, use config = currentConfiguration.get(); then act on config, don't do currentConfiguration.get().fieldAccess();", "author": "JamieHunter", "createdAt": "2020-11-19T18:15:15Z", "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -80,6 +71,9 @@ public void onConnectionResumed(boolean sessionPresent) {\n         }\n     };\n     private String thingName;\n+    @Setter // Needed for integration tests.\n+    @Getter(AccessLevel.PACKAGE) // Needed for unit tests.\n+    private final TelemetryConfiguration currentConfiguration = TelemetryConfiguration.builder().build();", "originalCommit": "095f1fc41e7613f9598bf087b96e66784303453a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5OTI3Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r527099272", "bodyText": "Aside, how do you succeed having a setter on a final field?", "author": "JamieHunter", "createdAt": "2020-11-19T18:16:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5ODc2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwMzQxMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r527103413", "bodyText": "For example here, in general, synchronized() should be avoided in favor of better atomic abstractions, but sometimes necessary. It's easy for future developers to forget they need this.", "author": "JamieHunter", "createdAt": "2020-11-19T18:22:37Z", "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -186,11 +191,16 @@ void schedulePeriodicPublishMetrics(boolean isReconfigured) {\n         if (isReconfigured) {\n             synchronized (periodicPublishMetricsInProgressLock) {\n                 Instant lastPeriodicPubTime = Instant.ofEpochMilli(Coerce.toLong(getPeriodicPublishTimeTopic()));\n-                if (lastPeriodicPubTime.plusSeconds(periodicPublishMetricsIntervalSec).isBefore(Instant.now())) {\n+                if (lastPeriodicPubTime.plusSeconds(currentConfiguration.getPeriodicPublishMetricsIntervalSec())\n+                        .isBefore(Instant.now())) {\n                     publishPeriodicMetrics();\n                 }\n             }\n         }\n+        int periodicPublishMetricsIntervalSec;\n+        synchronized (currentConfiguration) {", "originalCommit": "095f1fc41e7613f9598bf087b96e66784303453a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNDAwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r527104008", "bodyText": "Is it ok to not do this check? is it sufficient to re-schedule on field change?", "author": "JamieHunter", "createdAt": "2020-11-19T18:23:41Z", "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -254,56 +264,69 @@ private void cancelJob(ScheduledFuture<?> future, Object lock, boolean immediate\n     }\n \n     @Override\n-    public void startup() throws InterruptedException {\n-        config.lookup(PARAMETERS_CONFIG_KEY, TELEMETRY_PERIODIC_AGGREGATE_INTERVAL_SEC)\n-                .dflt(DEFAULT_PERIODIC_AGGREGATE_INTERVAL_SEC)\n-                .subscribe((why, newv) -> {\n-                    int newPeriodicAggregateMetricsIntervalSec = Coerce.toInt(newv);\n-                    // Do not update the scheduled interval if it is less than the default.\n-                    if (newPeriodicAggregateMetricsIntervalSec < DEFAULT_PERIODIC_AGGREGATE_INTERVAL_SEC) {\n-                        return;\n-                    }\n-                    setPeriodicAggregateMetricsIntervalAndSchedule(newPeriodicAggregateMetricsIntervalSec);\n-                });\n-        config.lookup(PARAMETERS_CONFIG_KEY, TELEMETRY_PERIODIC_PUBLISH_INTERVAL_SEC)\n-                .dflt(DEFAULT_PERIODIC_PUBLISH_INTERVAL_SEC)\n-                .subscribe((why, newv) -> {\n-                    int newPeriodicPublishMetricsIntervalSec = Coerce.toInt(newv);\n-                    // Do not update the scheduled interval if it is less than the default.\n-                    if (newPeriodicPublishMetricsIntervalSec < DEFAULT_PERIODIC_PUBLISH_INTERVAL_SEC) {\n-                        return;\n-                    }\n-                    setPeriodicPublishMetricsIntervalAndScheduleTask(newPeriodicPublishMetricsIntervalSec);\n-                });\n+    public void postInject() {\n+        Topics configurationTopics = deviceConfiguration.getTelemetryConfigurationTopics();\n+        configurationTopics.subscribe((why, newv) -> {\n+            TelemetryConfiguration newTelemetryConfiguration =\n+                    TelemetryConfiguration.fromPojo(configurationTopics.toPOJO());\n+            if (newTelemetryConfiguration.isEnabled()) {\n+                // If the current aggregation interval is different from the new interval, then reschedule\n+                // the periodic aggregation task\n+                if (currentConfiguration == null || currentConfiguration.getPeriodicAggregateMetricsIntervalSec()", "originalCommit": "095f1fc41e7613f9598bf087b96e66784303453a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNzIwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r527107208", "bodyText": "This seems to be duplicative with the fromPojo() how do you make this simpler?", "author": "JamieHunter", "createdAt": "2020-11-19T18:28:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNDAwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNDM3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r527104373", "bodyText": "These need to be combined together, difficult to maintain and follow for correctness.", "author": "JamieHunter", "createdAt": "2020-11-19T18:24:22Z", "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -254,56 +264,69 @@ private void cancelJob(ScheduledFuture<?> future, Object lock, boolean immediate\n     }\n \n     @Override\n-    public void startup() throws InterruptedException {\n-        config.lookup(PARAMETERS_CONFIG_KEY, TELEMETRY_PERIODIC_AGGREGATE_INTERVAL_SEC)\n-                .dflt(DEFAULT_PERIODIC_AGGREGATE_INTERVAL_SEC)\n-                .subscribe((why, newv) -> {\n-                    int newPeriodicAggregateMetricsIntervalSec = Coerce.toInt(newv);\n-                    // Do not update the scheduled interval if it is less than the default.\n-                    if (newPeriodicAggregateMetricsIntervalSec < DEFAULT_PERIODIC_AGGREGATE_INTERVAL_SEC) {\n-                        return;\n-                    }\n-                    setPeriodicAggregateMetricsIntervalAndSchedule(newPeriodicAggregateMetricsIntervalSec);\n-                });\n-        config.lookup(PARAMETERS_CONFIG_KEY, TELEMETRY_PERIODIC_PUBLISH_INTERVAL_SEC)\n-                .dflt(DEFAULT_PERIODIC_PUBLISH_INTERVAL_SEC)\n-                .subscribe((why, newv) -> {\n-                    int newPeriodicPublishMetricsIntervalSec = Coerce.toInt(newv);\n-                    // Do not update the scheduled interval if it is less than the default.\n-                    if (newPeriodicPublishMetricsIntervalSec < DEFAULT_PERIODIC_PUBLISH_INTERVAL_SEC) {\n-                        return;\n-                    }\n-                    setPeriodicPublishMetricsIntervalAndScheduleTask(newPeriodicPublishMetricsIntervalSec);\n-                });\n+    public void postInject() {\n+        Topics configurationTopics = deviceConfiguration.getTelemetryConfigurationTopics();\n+        configurationTopics.subscribe((why, newv) -> {\n+            TelemetryConfiguration newTelemetryConfiguration =\n+                    TelemetryConfiguration.fromPojo(configurationTopics.toPOJO());\n+            if (newTelemetryConfiguration.isEnabled()) {\n+                // If the current aggregation interval is different from the new interval, then reschedule\n+                // the periodic aggregation task\n+                if (currentConfiguration == null || currentConfiguration.getPeriodicAggregateMetricsIntervalSec()\n+                        != newTelemetryConfiguration.getPeriodicAggregateMetricsIntervalSec()) {\n+                    setPeriodicAggregateMetricsIntervalAndSchedule(newTelemetryConfiguration\n+                            .getPeriodicAggregateMetricsIntervalSec());\n+                }\n+                // If the current publish interval is different from the new interval, then reschedule\n+                // the publish aggregation task\n+                if (currentConfiguration == null || currentConfiguration.getPeriodicPublishMetricsIntervalSec()", "originalCommit": "095f1fc41e7613f9598bf087b96e66784303453a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNDg5Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r527104896", "bodyText": "What happens if disabled, but jobs don't exist, does right thing happen?", "author": "JamieHunter", "createdAt": "2020-11-19T18:25:09Z", "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -254,56 +264,69 @@ private void cancelJob(ScheduledFuture<?> future, Object lock, boolean immediate\n     }\n \n     @Override\n-    public void startup() throws InterruptedException {\n-        config.lookup(PARAMETERS_CONFIG_KEY, TELEMETRY_PERIODIC_AGGREGATE_INTERVAL_SEC)\n-                .dflt(DEFAULT_PERIODIC_AGGREGATE_INTERVAL_SEC)\n-                .subscribe((why, newv) -> {\n-                    int newPeriodicAggregateMetricsIntervalSec = Coerce.toInt(newv);\n-                    // Do not update the scheduled interval if it is less than the default.\n-                    if (newPeriodicAggregateMetricsIntervalSec < DEFAULT_PERIODIC_AGGREGATE_INTERVAL_SEC) {\n-                        return;\n-                    }\n-                    setPeriodicAggregateMetricsIntervalAndSchedule(newPeriodicAggregateMetricsIntervalSec);\n-                });\n-        config.lookup(PARAMETERS_CONFIG_KEY, TELEMETRY_PERIODIC_PUBLISH_INTERVAL_SEC)\n-                .dflt(DEFAULT_PERIODIC_PUBLISH_INTERVAL_SEC)\n-                .subscribe((why, newv) -> {\n-                    int newPeriodicPublishMetricsIntervalSec = Coerce.toInt(newv);\n-                    // Do not update the scheduled interval if it is less than the default.\n-                    if (newPeriodicPublishMetricsIntervalSec < DEFAULT_PERIODIC_PUBLISH_INTERVAL_SEC) {\n-                        return;\n-                    }\n-                    setPeriodicPublishMetricsIntervalAndScheduleTask(newPeriodicPublishMetricsIntervalSec);\n-                });\n+    public void postInject() {\n+        Topics configurationTopics = deviceConfiguration.getTelemetryConfigurationTopics();\n+        configurationTopics.subscribe((why, newv) -> {\n+            TelemetryConfiguration newTelemetryConfiguration =\n+                    TelemetryConfiguration.fromPojo(configurationTopics.toPOJO());\n+            if (newTelemetryConfiguration.isEnabled()) {\n+                // If the current aggregation interval is different from the new interval, then reschedule\n+                // the periodic aggregation task\n+                if (currentConfiguration == null || currentConfiguration.getPeriodicAggregateMetricsIntervalSec()\n+                        != newTelemetryConfiguration.getPeriodicAggregateMetricsIntervalSec()) {\n+                    setPeriodicAggregateMetricsIntervalAndSchedule(newTelemetryConfiguration\n+                            .getPeriodicAggregateMetricsIntervalSec());\n+                }\n+                // If the current publish interval is different from the new interval, then reschedule\n+                // the publish aggregation task\n+                if (currentConfiguration == null || currentConfiguration.getPeriodicPublishMetricsIntervalSec()\n+                        != newTelemetryConfiguration.getPeriodicPublishMetricsIntervalSec()) {\n+                    setPeriodicPublishMetricsIntervalAndScheduleTask(newTelemetryConfiguration\n+                            .getPeriodicPublishMetricsIntervalSec());\n+                }\n+            } else {\n+                // If telemetry is not enabled, then cancel the futures.\n+                for (PeriodicMetricsEmitter emitter : periodicMetricsEmitters) {\n+                    cancelJob(emitter.future, periodicAggregateMetricsInProgressLock, true);", "originalCommit": "095f1fc41e7613f9598bf087b96e66784303453a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNTYwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r527105605", "bodyText": "This code is repetitive with shutdown() merge into common code (DRY)", "author": "JamieHunter", "createdAt": "2020-11-19T18:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNDg5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1NDAwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r527154007", "bodyText": "The jobs will always exist. Either they will be running or cancelled. Cancelling a canceled task is fine.", "author": "nikkhilmuthye", "createdAt": "2020-11-19T19:46:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNDg5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNjIyMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r527106223", "bodyText": "Make @value and treat this as one immutable structure to make thread safety easier.", "author": "JamieHunter", "createdAt": "2020-11-19T18:27:16Z", "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryConfiguration.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.telemetry;\n+\n+import com.aws.greengrass.testing.TestFeatureParameters;\n+import com.aws.greengrass.util.Coerce;\n+import lombok.Builder;\n+import lombok.Data;\n+\n+import java.util.Map;\n+\n+import static com.aws.greengrass.telemetry.TelemetryAgent.DEFAULT_PERIODIC_AGGREGATE_INTERVAL_SEC;\n+import static com.aws.greengrass.telemetry.TelemetryAgent.DEFAULT_PERIODIC_PUBLISH_INTERVAL_SEC;\n+import static com.aws.greengrass.telemetry.TelemetryAgent.TELEMETRY_TEST_PERIODIC_AGGREGATE_INTERVAL_SEC;\n+import static com.aws.greengrass.telemetry.TelemetryAgent.TELEMETRY_TEST_PERIODIC_PUBLISH_INTERVAL_SEC;\n+\n+@Data", "originalCommit": "095f1fc41e7613f9598bf087b96e66784303453a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNjYyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r527106621", "bodyText": "Create a (static) method that takes configuration and products a structure from that configuration to make this easier to maintain.", "author": "JamieHunter", "createdAt": "2020-11-19T18:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwNjIyMw=="}], "type": "inlineReview"}, {"oid": "9e67852e75c16247172958fbb86d102a8fe73cc9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9e67852e75c16247172958fbb86d102a8fe73cc9", "message": "Address PR comments.", "committedDate": "2020-11-19T23:37:00Z", "type": "commit"}, {"oid": "9e67852e75c16247172958fbb86d102a8fe73cc9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9e67852e75c16247172958fbb86d102a8fe73cc9", "message": "Address PR comments.", "committedDate": "2020-11-19T23:37:00Z", "type": "forcePushed"}, {"oid": "c727b7e5dd286c0da1acc2fa67363190fab0e6fa", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c727b7e5dd286c0da1acc2fa67363190fab0e6fa", "message": "Merge branch 'master' into telemetryConfigInSysSettings", "committedDate": "2020-11-20T00:40:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyMTUzNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r529721534", "bodyText": "Something I struggle with here is why do we not just rely on postInject()? are you doing this to engineer around unit testing? If so, this feels counter productive. I think there's some room for simplification here, but let's schedule that for post re:Invent.", "author": "JamieHunter", "createdAt": "2020-11-24T16:43:30Z", "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -103,34 +100,42 @@ public TelemetryAgent(Topics topics, MqttClient mqttClient, DeviceConfiguration\n     /**\n      * Constructor for the class.\n      *\n-     * @param topics                                root configuration topic for this service\n-     * @param mqttClient                            {@link MqttClient}\n-     * @param deviceConfiguration                   {@link DeviceConfiguration}\n-     * @param ma                                    {@link MetricsAggregator}\n-     * @param sme                                   {@link SystemMetricsEmitter}\n-     * @param kme                                   {@link KernelMetricsEmitter}\n-     * @param ses                                   {@link ScheduledExecutorService}\n-     * @param periodicPublishMetricsIntervalSec     interval for cadence based telemetry publish.\n-     * @param periodicAggregateMetricsIntervalSec   interval for cadence based telemetry metrics aggregation.*/\n-    public TelemetryAgent(Topics topics, MqttClient mqttClient, DeviceConfiguration deviceConfiguration,\n-                          MetricsAggregator ma, SystemMetricsEmitter sme, KernelMetricsEmitter kme,\n-                          ScheduledExecutorService ses, int periodicPublishMetricsIntervalSec,\n-                          int periodicAggregateMetricsIntervalSec) {\n+     * @param topics                              root configuration topic for this service\n+     * @param mqttClient                          {@link MqttClient}\n+     * @param deviceConfiguration                 {@link DeviceConfiguration}\n+     * @param ma                                  {@link MetricsAggregator}\n+     * @param sme                                 {@link SystemMetricsEmitter}\n+     * @param kme                                 {@link KernelMetricsEmitter}\n+     * @param ses                                 {@link ScheduledExecutorService}\n+     * @param periodicPublishMetricsIntervalSec   interval for cadence based telemetry publish.\n+     * @param periodicAggregateMetricsIntervalSec interval for cadence based telemetry metrics aggregation.\n+     */\n+    TelemetryAgent(Topics topics, MqttClient mqttClient, DeviceConfiguration deviceConfiguration,\n+                   MetricsAggregator ma, SystemMetricsEmitter sme, KernelMetricsEmitter kme,\n+                   ScheduledExecutorService ses, int periodicPublishMetricsIntervalSec,\n+                   int periodicAggregateMetricsIntervalSec) {\n         super(topics);\n         this.mqttClient = mqttClient;\n         this.publisher = new MqttChunkedPayloadPublisher<>(this.mqttClient);\n         this.publisher.setMaxPayloadLengthBytes(MAX_PAYLOAD_LENGTH_BYTES);\n         this.ses = ses;\n         this.metricsAggregator = ma;\n+        this.deviceConfiguration = deviceConfiguration;\n         this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n-        this.periodicAggregateMetricsIntervalSec = TestFeatureParameters.retrieveWithDefault(Double.class,\n+        int finalPeriodicAggregateMetricsIntervalSec = TestFeatureParameters.retrieveWithDefault(Double.class,\n                 TELEMETRY_TEST_PERIODIC_AGGREGATE_INTERVAL_SEC, periodicAggregateMetricsIntervalSec).intValue();\n-        this.periodicPublishMetricsIntervalSec = TestFeatureParameters.retrieveWithDefault(Double.class,\n+        int finalPeriodicPublishMetricsIntervalSec = TestFeatureParameters.retrieveWithDefault(Double.class,\n                 TELEMETRY_TEST_PERIODIC_PUBLISH_INTERVAL_SEC, periodicPublishMetricsIntervalSec).intValue();\n+        currentConfiguration.set(TelemetryConfiguration.builder()\n+                .periodicAggregateMetricsIntervalSec(finalPeriodicAggregateMetricsIntervalSec)\n+                .periodicPublishMetricsIntervalSec(finalPeriodicPublishMetricsIntervalSec)\n+                .build());\n         periodicMetricsEmitters.add(sme);\n         periodicMetricsEmitters.add(kme);\n         getPeriodicAggregateTimeTopic();\n         getPeriodicPublishTimeTopic();\n+        schedulePeriodicAggregateMetrics(false);", "originalCommit": "c727b7e5dd286c0da1acc2fa67363190fab0e6fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9393713e88c2fdcc0470b0034ec4efe94d11748e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9393713e88c2fdcc0470b0034ec4efe94d11748e", "message": "Merge branch 'master' into telemetryConfigInSysSettings", "committedDate": "2020-11-24T17:43:44Z", "type": "commit"}, {"oid": "fd53e90e4f3fd76406be920ddc0e236a2b7a425f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fd53e90e4f3fd76406be920ddc0e236a2b7a425f", "message": "Remove unused import", "committedDate": "2020-11-24T17:56:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODYxNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r529798615", "bodyText": "I'd prefer just enabled", "author": "MikeDombo", "createdAt": "2020-11-24T18:41:15Z", "path": "README_CONFIG_SCHEMA.md", "diffHunk": "@@ -175,6 +175,10 @@ services:\n         format: TEXT\n         outputDirectory: /path/to/logs/directory\n         outputType: FILE\n+      telemetry:\n+        isEnabled: true", "originalCommit": "fd53e90e4f3fd76406be920ddc0e236a2b7a425f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODgxOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r529798819", "bodyText": "use the full word Seconds", "author": "MikeDombo", "createdAt": "2020-11-24T18:41:32Z", "path": "README_CONFIG_SCHEMA.md", "diffHunk": "@@ -175,6 +175,10 @@ services:\n         format: TEXT\n         outputDirectory: /path/to/logs/directory\n         outputType: FILE\n+      telemetry:\n+        isEnabled: true\n+        periodicAggregateMetricsIntervalSec: 3600", "originalCommit": "fd53e90e4f3fd76406be920ddc0e236a2b7a425f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwMDAwMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r529800002", "bodyText": "Don't do all of this in postInject do it in the startup instead so that it doesn't block.", "author": "MikeDombo", "createdAt": "2020-11-24T18:43:32Z", "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -254,56 +266,73 @@ private void cancelJob(ScheduledFuture<?> future, Object lock, boolean immediate\n     }\n \n     @Override\n-    public void startup() throws InterruptedException {\n-        config.lookup(CONFIGURATION_CONFIG_KEY, TELEMETRY_PERIODIC_AGGREGATE_INTERVAL_SEC)\n-                .dflt(DEFAULT_PERIODIC_AGGREGATE_INTERVAL_SEC)\n-                .subscribe((why, newv) -> {\n-                    int newPeriodicAggregateMetricsIntervalSec = Coerce.toInt(newv);\n-                    // Do not update the scheduled interval if it is less than the default.\n-                    if (newPeriodicAggregateMetricsIntervalSec < DEFAULT_PERIODIC_AGGREGATE_INTERVAL_SEC) {\n-                        return;\n-                    }\n-                    setPeriodicAggregateMetricsIntervalAndSchedule(newPeriodicAggregateMetricsIntervalSec);\n-                });\n-        config.lookup(CONFIGURATION_CONFIG_KEY, TELEMETRY_PERIODIC_PUBLISH_INTERVAL_SEC)\n-                .dflt(DEFAULT_PERIODIC_PUBLISH_INTERVAL_SEC)\n-                .subscribe((why, newv) -> {\n-                    int newPeriodicPublishMetricsIntervalSec = Coerce.toInt(newv);\n-                    // Do not update the scheduled interval if it is less than the default.\n-                    if (newPeriodicPublishMetricsIntervalSec < DEFAULT_PERIODIC_PUBLISH_INTERVAL_SEC) {\n-                        return;\n-                    }\n-                    setPeriodicPublishMetricsIntervalAndScheduleTask(newPeriodicPublishMetricsIntervalSec);\n-                });\n+    public void postInject() {\n+        Topics configurationTopics = deviceConfiguration.getTelemetryConfigurationTopics();\n+        configurationTopics.subscribe((why, newv) -> {\n+            TelemetryConfiguration newTelemetryConfiguration =\n+                    TelemetryConfiguration.fromPojo(configurationTopics.toPOJO());\n+            TelemetryConfiguration configuration = currentConfiguration.get();\n+            boolean aggregateMetricsIntervalSecChanged = false;\n+            boolean publishMetricsIntervalSecChanged = false;\n+            if (newTelemetryConfiguration.isEnabled()) {\n+                // If the current aggregation interval is different from the new interval, then reschedule\n+                // the periodic aggregation task\n+                aggregateMetricsIntervalSecChanged = configuration.getPeriodicAggregateMetricsIntervalSec()\n+                        != newTelemetryConfiguration.getPeriodicAggregateMetricsIntervalSec();\n+                // If the current publish interval is different from the new interval, then reschedule\n+                // the publish aggregation task\n+                publishMetricsIntervalSecChanged = configuration.getPeriodicPublishMetricsIntervalSec()\n+                        != newTelemetryConfiguration.getPeriodicPublishMetricsIntervalSec();\n+            } else {\n+                // If telemetry is not enabled, then cancel the futures.\n+                cancelAllJobs();\n+            }\n+            currentConfiguration.set(newTelemetryConfiguration);\n+            if (aggregateMetricsIntervalSecChanged) {\n+                schedulePeriodicAggregateMetrics(true);\n+            }\n+            if (publishMetricsIntervalSecChanged) {\n+                schedulePeriodicPublishMetrics(true);\n+            }\n+        });\n         updateThingNameAndPublishTopic(thingName);", "originalCommit": "fd53e90e4f3fd76406be920ddc0e236a2b7a425f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ec95b71fc29b2ec258b5273d4782cb4d8b9a6e24", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ec95b71fc29b2ec258b5273d4782cb4d8b9a6e24", "message": "Address PR comments.", "committedDate": "2020-11-24T19:37:35Z", "type": "commit"}, {"oid": "9519656ef2bd1f9960109249286c41331cdd7dfe", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9519656ef2bd1f9960109249286c41331cdd7dfe", "message": "Merge branch 'master' into telemetryConfigInSysSettings", "committedDate": "2020-11-24T20:05:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0ODE5Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r529848192", "bodyText": "why are you scheduling this? Just submit or execute it.", "author": "MikeDombo", "createdAt": "2020-11-24T20:09:28Z", "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -254,56 +266,78 @@ private void cancelJob(ScheduledFuture<?> future, Object lock, boolean immediate\n     }\n \n     @Override\n-    public void startup() throws InterruptedException {\n-        config.lookup(CONFIGURATION_CONFIG_KEY, TELEMETRY_PERIODIC_AGGREGATE_INTERVAL_SEC)\n-                .dflt(DEFAULT_PERIODIC_AGGREGATE_INTERVAL_SEC)\n-                .subscribe((why, newv) -> {\n-                    int newPeriodicAggregateMetricsIntervalSec = Coerce.toInt(newv);\n-                    // Do not update the scheduled interval if it is less than the default.\n-                    if (newPeriodicAggregateMetricsIntervalSec < DEFAULT_PERIODIC_AGGREGATE_INTERVAL_SEC) {\n-                        return;\n-                    }\n-                    setPeriodicAggregateMetricsIntervalAndSchedule(newPeriodicAggregateMetricsIntervalSec);\n-                });\n-        config.lookup(CONFIGURATION_CONFIG_KEY, TELEMETRY_PERIODIC_PUBLISH_INTERVAL_SEC)\n-                .dflt(DEFAULT_PERIODIC_PUBLISH_INTERVAL_SEC)\n-                .subscribe((why, newv) -> {\n-                    int newPeriodicPublishMetricsIntervalSec = Coerce.toInt(newv);\n-                    // Do not update the scheduled interval if it is less than the default.\n-                    if (newPeriodicPublishMetricsIntervalSec < DEFAULT_PERIODIC_PUBLISH_INTERVAL_SEC) {\n-                        return;\n-                    }\n-                    setPeriodicPublishMetricsIntervalAndScheduleTask(newPeriodicPublishMetricsIntervalSec);\n-                });\n-        updateThingNameAndPublishTopic(thingName);\n-        schedulePeriodicAggregateMetrics(false);\n-        schedulePeriodicPublishMetrics(false);\n-        mqttClient.addToCallbackEvents(callbacks);\n-        TestFeatureParameters.registerHandlerCallback(this.getName(), this::handleTestFeatureParametersHandlerChange);\n-        super.startup();\n+    public void postInject() {\n+        ses.schedule(() -> {", "originalCommit": "9519656ef2bd1f9960109249286c41331cdd7dfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0ODUzNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/705#discussion_r529848537", "bodyText": "Also, do not use the scheduled executor as it has a limited number of threads.", "author": "MikeDombo", "createdAt": "2020-11-24T20:10:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0ODE5Mg=="}], "type": "inlineReview"}, {"oid": "70029002d63896a7c7f47a94f496e57049801b39", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/70029002d63896a7c7f47a94f496e57049801b39", "message": "PR comments.", "committedDate": "2020-11-25T00:06:08Z", "type": "commit"}, {"oid": "70029002d63896a7c7f47a94f496e57049801b39", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/70029002d63896a7c7f47a94f496e57049801b39", "message": "PR comments.", "committedDate": "2020-11-25T00:06:08Z", "type": "forcePushed"}, {"oid": "4f5a912d79097528bbb30f49da758e711ea1c54c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4f5a912d79097528bbb30f49da758e711ea1c54c", "message": "Merge branch 'master' into telemetryConfigInSysSettings", "committedDate": "2020-11-25T00:06:21Z", "type": "commit"}, {"oid": "e323616fd6498c68aa4e1eba1140cd7b8594ed4e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e323616fd6498c68aa4e1eba1140cd7b8594ed4e", "message": "Merge branch 'master' into telemetryConfigInSysSettings", "committedDate": "2020-11-25T16:46:41Z", "type": "commit"}, {"oid": "ad3bc3ff1ceeefaca8fd19129948b82481419e0f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ad3bc3ff1ceeefaca8fd19129948b82481419e0f", "message": "Merge branch 'master' into telemetryConfigInSysSettings", "committedDate": "2020-11-25T22:20:42Z", "type": "commit"}]}