{"pr_number": 92, "pr_title": "GitHub action to push metrics to CloudWatch and comment on our PRs", "pr_createdAt": "2020-03-03T19:30:32Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92", "timeline": [{"oid": "c4ee776abdf11a19582897ecde41848c092e43fb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c4ee776abdf11a19582897ecde41848c092e43fb", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-03T19:30:03Z", "type": "forcePushed"}, {"oid": "fdf07dd87a4f9da1f42a4364ac50c77526ef51d5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fdf07dd87a4f9da1f42a4364ac50c77526ef51d5", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-03T19:31:13Z", "type": "forcePushed"}, {"oid": "0ef2274a5d7ea082baf7346e2b49b6d1dc1f4a90", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0ef2274a5d7ea082baf7346e2b49b6d1dc1f4a90", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-03T19:54:42Z", "type": "forcePushed"}, {"oid": "91c8da768a533b7808071fac378ad7dcc0cf9d0a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/91c8da768a533b7808071fac378ad7dcc0cf9d0a", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-03T19:57:56Z", "type": "forcePushed"}, {"oid": "c525c0235b43573183c0afdaf4f16f491cbefae5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c525c0235b43573183c0afdaf4f16f491cbefae5", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-03T19:58:55Z", "type": "forcePushed"}, {"oid": "3ec4b0a62e7e7eff2e139cfc7d907f79f7c0a7f0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3ec4b0a62e7e7eff2e139cfc7d907f79f7c0a7f0", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-03T20:00:21Z", "type": "forcePushed"}, {"oid": "daa422b437d96c0966dbaa2e68c3eb3f8e4eb575", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/daa422b437d96c0966dbaa2e68c3eb3f8e4eb575", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-03T20:02:08Z", "type": "forcePushed"}, {"oid": "1d8f78b1838ed35cfaf086b5887ac16999b9d168", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1d8f78b1838ed35cfaf086b5887ac16999b9d168", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-03T20:05:16Z", "type": "forcePushed"}, {"oid": "4edcba4c683cd95ceb2848edcfe054823e763b83", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4edcba4c683cd95ceb2848edcfe054823e763b83", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-03T20:18:52Z", "type": "forcePushed"}, {"oid": "7414b43919b7b3f5488ee1ed72ac3b1bf515f670", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7414b43919b7b3f5488ee1ed72ac3b1bf515f670", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-03T20:23:17Z", "type": "forcePushed"}, {"oid": "896d87bc5b2e62d7a8171d8e5a7e8d0e3ec3d6c7", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/896d87bc5b2e62d7a8171d8e5a7e8d0e3ec3d6c7", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-03T20:25:33Z", "type": "forcePushed"}, {"oid": "5870d69b392fbfe475cb86cb632e040dd3acee7a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5870d69b392fbfe475cb86cb632e040dd3acee7a", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-03T21:47:37Z", "type": "forcePushed"}, {"oid": "8f713d964fc40b75936a6f19fd71f7ac3f2cc285", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8f713d964fc40b75936a6f19fd71f7ac3f2cc285", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-03T21:50:38Z", "type": "forcePushed"}, {"oid": "35c081c624937a8b0d033d5c4f9f300531ff07f9", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/35c081c624937a8b0d033d5c4f9f300531ff07f9", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-03T21:57:40Z", "type": "forcePushed"}, {"oid": "1e74c75cb8edf5051486f4623160e69e2613168e", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1e74c75cb8edf5051486f4623160e69e2613168e", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-03T23:13:25Z", "type": "forcePushed"}, {"oid": "358756fcab63dd42a91c4ee42903d61295f3079a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/358756fcab63dd42a91c4ee42903d61295f3079a", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-03T23:25:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2NTk0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387365945", "bodyText": "if this gets throttled or returns an error - will that return an empty map?", "author": "rbattle", "createdAt": "2020-03-03T23:57:01Z", "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,99 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from github import Github\n+\n+\n+def main():\n+    with open(\"target/surefire-reports/junitReport.json\", \"r\") as f:\n+        report = json.load(f)\n+    with open(os.getenv(\"GITHUB_EVENT_PATH\"), \"r\") as f:\n+        github_event = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")\n+    datapoints = []\n+    current_metrics = defaultdict(dict)\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+\n+    # For each test in the report\n+    for test_run in report:\n+        # For each metric key and value (excluding name and classname since they aren't metrics)\n+        for k, v in test_run.items():\n+            if k != \"name\" and k != \"classname\":\n+                test_path = test_run[\"classname\"] + \".\" + test_run[\"name\"]\n+                current_metrics[test_path + \" \" + k] = v\n+                datapoints.append({\n+                    \"MetricName\": k,\n+                    \"Value\": v,\n+                    \"Dimensions\": [\n+                        {\n+                            \"Name\": \"Test Path\",\n+                            \"Value\": test_path\n+                        },\n+                        {\n+                            \"Name\": \"GitHub Event\",\n+                            \"Value\": event_type\n+                        }\n+                    ]\n+                })\n+\n+    cw.put_metric_data(\n+        Namespace=\"Evergreen/Testing\",\n+        MetricData=datapoints\n+    )\n+\n+    # Continue running only for pull requests\n+    if event_type == \"push\":\n+        return\n+\n+    # Get metrics from the last push to master to compare the current metrics to\n+    prev_metrics = cw.get_metric_data(MetricDataQueries=[", "originalCommit": "358756fcab63dd42a91c4ee42903d61295f3079a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2ODUxOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387368519", "bodyText": "It might be good to check for error and print it out", "author": "rbattle", "createdAt": "2020-03-04T00:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2NTk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2OTU5Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387369593", "bodyText": "No, it won't be an empty map, it will fail with a bad message. I will definitely add error handling around this stuff.", "author": "MikeDombo", "createdAt": "2020-03-04T00:09:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2NTk0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM3MTYzNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387371634", "bodyText": "Also around the put_metric too I suppose - I'm not sure what the limits are, but you could have multiple pushes hitting that api at once", "author": "rbattle", "createdAt": "2020-03-04T00:15:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2NTk0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2NzcyNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387367725", "bodyText": "bold is hard to see in the table. Is it possible to add an emoji like  \u2757\ufe0f or \ud83d\udca5  as well?", "author": "rbattle", "createdAt": "2020-03-04T00:02:45Z", "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,99 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from github import Github\n+\n+\n+def main():\n+    with open(\"target/surefire-reports/junitReport.json\", \"r\") as f:\n+        report = json.load(f)\n+    with open(os.getenv(\"GITHUB_EVENT_PATH\"), \"r\") as f:\n+        github_event = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")\n+    datapoints = []\n+    current_metrics = defaultdict(dict)\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+\n+    # For each test in the report\n+    for test_run in report:\n+        # For each metric key and value (excluding name and classname since they aren't metrics)\n+        for k, v in test_run.items():\n+            if k != \"name\" and k != \"classname\":\n+                test_path = test_run[\"classname\"] + \".\" + test_run[\"name\"]\n+                current_metrics[test_path + \" \" + k] = v\n+                datapoints.append({\n+                    \"MetricName\": k,\n+                    \"Value\": v,\n+                    \"Dimensions\": [\n+                        {\n+                            \"Name\": \"Test Path\",\n+                            \"Value\": test_path\n+                        },\n+                        {\n+                            \"Name\": \"GitHub Event\",\n+                            \"Value\": event_type\n+                        }\n+                    ]\n+                })\n+\n+    cw.put_metric_data(\n+        Namespace=\"Evergreen/Testing\",\n+        MetricData=datapoints\n+    )\n+\n+    # Continue running only for pull requests\n+    if event_type == \"push\":\n+        return\n+\n+    # Get metrics from the last push to master to compare the current metrics to\n+    prev_metrics = cw.get_metric_data(MetricDataQueries=[\n+        {\n+            \"Id\": \"last_push\",\n+            \"Expression\": f\"SEARCH('{{Evergreen/Testing,\\\"GitHub Event\\\",\\\"Test Path\\\"}} \\\"GitHub \"\n+                          f\"Event\\\"=\\\"push\\\"', 'Maximum', 60)\",\n+        }\n+    ],\n+        StartTime=datetime.now() - timedelta(days=7),\n+        EndTime=datetime.now(),\n+        ScanBy=\"TimestampDescending\")[\"MetricDataResults\"]\n+\n+    prev_metric_map = {}\n+    for old_metric in reversed(prev_metrics):\n+        if old_metric[\"Label\"] in current_metrics:\n+            old_value = max(old_metric[\"Values\"])\n+            prev_metric_map[old_metric[\"Label\"]] = old_value\n+\n+    table = \"| Test | Measurement | Value | Change |\\n| - | - | - | - |\\n\"\n+    for test_path, v in current_metrics.items():\n+        change_str = \"N/A\"\n+        if test_path in prev_metric_map:\n+            change = v - prev_metric_map[test_path]\n+            change_str = str(change)\n+            if change > 0:\n+                change_str = f\"+{change}\"\n+            # Bold changes over 10%\n+            if abs(change / v) > .1:\n+                change_str = f\"**{change_str}**\"", "originalCommit": "358756fcab63dd42a91c4ee42903d61295f3079a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2OTM2Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387369367", "bodyText": "Sure, I can do that, thanks for the idea.", "author": "MikeDombo", "createdAt": "2020-03-04T00:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2NzcyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4Mjk0Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387382947", "bodyText": "NIT: Can we put the test names at the end? I know it is weird, but some test names are very long and the horizontal scroll doesn't help when you want to see the test name and the values in the same view. For this particular purpose, I think having the measurement, value and change show up first should be more useful.", "author": "chaurah", "createdAt": "2020-03-04T00:52:31Z", "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,99 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from github import Github\n+\n+\n+def main():\n+    with open(\"target/surefire-reports/junitReport.json\", \"r\") as f:\n+        report = json.load(f)\n+    with open(os.getenv(\"GITHUB_EVENT_PATH\"), \"r\") as f:\n+        github_event = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")\n+    datapoints = []\n+    current_metrics = defaultdict(dict)\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+\n+    # For each test in the report\n+    for test_run in report:\n+        # For each metric key and value (excluding name and classname since they aren't metrics)\n+        for k, v in test_run.items():\n+            if k != \"name\" and k != \"classname\":\n+                test_path = test_run[\"classname\"] + \".\" + test_run[\"name\"]\n+                current_metrics[test_path + \" \" + k] = v\n+                datapoints.append({\n+                    \"MetricName\": k,\n+                    \"Value\": v,\n+                    \"Dimensions\": [\n+                        {\n+                            \"Name\": \"Test Path\",\n+                            \"Value\": test_path\n+                        },\n+                        {\n+                            \"Name\": \"GitHub Event\",\n+                            \"Value\": event_type\n+                        }\n+                    ]\n+                })\n+\n+    cw.put_metric_data(\n+        Namespace=\"Evergreen/Testing\",\n+        MetricData=datapoints\n+    )\n+\n+    # Continue running only for pull requests\n+    if event_type == \"push\":\n+        return\n+\n+    # Get metrics from the last push to master to compare the current metrics to\n+    prev_metrics = cw.get_metric_data(MetricDataQueries=[\n+        {\n+            \"Id\": \"last_push\",\n+            \"Expression\": f\"SEARCH('{{Evergreen/Testing,\\\"GitHub Event\\\",\\\"Test Path\\\"}} \\\"GitHub \"\n+                          f\"Event\\\"=\\\"push\\\"', 'Maximum', 60)\",\n+        }\n+    ],\n+        StartTime=datetime.now() - timedelta(days=7),\n+        EndTime=datetime.now(),\n+        ScanBy=\"TimestampDescending\")[\"MetricDataResults\"]\n+\n+    prev_metric_map = {}\n+    for old_metric in reversed(prev_metrics):\n+        if old_metric[\"Label\"] in current_metrics:\n+            old_value = max(old_metric[\"Values\"])\n+            prev_metric_map[old_metric[\"Label\"]] = old_value\n+\n+    table = \"| Test | Measurement | Value | Change |\\n| - | - | - | - |\\n\"", "originalCommit": "358756fcab63dd42a91c4ee42903d61295f3079a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMTgyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387401821", "bodyText": "Good call on that, it is much nicer now: #92 (comment)", "author": "MikeDombo", "createdAt": "2020-03-04T01:33:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4Mjk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzcyOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387383728", "bodyText": "NIT: Can we document which account/role credentials are being used here in a quip-doc/wiki somewhere?", "author": "chaurah", "createdAt": "2020-03-04T00:55:09Z", "path": ".github/workflows/maven.yml", "diffHunk": "@@ -20,6 +20,12 @@ jobs:\n       uses: actions/setup-java@v1\n       with:\n         java-version: 1.8\n+    - name: Configure AWS credentials", "originalCommit": "358756fcab63dd42a91c4ee42903d61295f3079a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4MTI1Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387981253", "bodyText": "Is there any mechanism to rotate these automatically", "author": "fahadmohammed01", "createdAt": "2020-03-04T22:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzcyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4MjQ1NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387982454", "bodyText": "No, since we're in GitHub and using secrets the answer is no unless we write something to run in our AWS account and rewrite the GitHub secrets, which may be possible.", "author": "MikeDombo", "createdAt": "2020-03-04T22:51:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzcyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4MjYwNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387982606", "bodyText": "But we need these credentials on the GitHub account anyway (not brought in by this change) because they are used to publish to S3.", "author": "MikeDombo", "createdAt": "2020-03-04T22:52:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzI0MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387383241", "bodyText": "Should we only publish metrics in \"push\" event? The trend from different PRs is not very useful.", "author": "hui-yang", "createdAt": "2020-03-04T00:53:28Z", "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,99 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from github import Github\n+\n+\n+def main():\n+    with open(\"target/surefire-reports/junitReport.json\", \"r\") as f:\n+        report = json.load(f)\n+    with open(os.getenv(\"GITHUB_EVENT_PATH\"), \"r\") as f:\n+        github_event = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")\n+    datapoints = []\n+    current_metrics = defaultdict(dict)\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+\n+    # For each test in the report\n+    for test_run in report:\n+        # For each metric key and value (excluding name and classname since they aren't metrics)\n+        for k, v in test_run.items():\n+            if k != \"name\" and k != \"classname\":\n+                test_path = test_run[\"classname\"] + \".\" + test_run[\"name\"]\n+                current_metrics[test_path + \" \" + k] = v\n+                datapoints.append({\n+                    \"MetricName\": k,\n+                    \"Value\": v,\n+                    \"Dimensions\": [\n+                        {\n+                            \"Name\": \"Test Path\",\n+                            \"Value\": test_path\n+                        },\n+                        {\n+                            \"Name\": \"GitHub Event\",\n+                            \"Value\": event_type\n+                        }\n+                    ]\n+                })\n+\n+    cw.put_metric_data(", "originalCommit": "358756fcab63dd42a91c4ee42903d61295f3079a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4NDM2Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387384366", "bodyText": "Also there can not be more than 20 metrics per call. https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricData.html", "author": "hui-yang", "createdAt": "2020-03-04T00:57:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzI0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5MTU3NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387391574", "bodyText": "I wasn't too sure about pushing non-pushes, but you're right. I'll remove it for now, but allow us to enable it easily if we want.", "author": "MikeDombo", "createdAt": "2020-03-04T01:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4NzY1NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387387654", "bodyText": "Wondering if these constants can be shared between the Java classes and this script?\nAlso, check for key errors here?", "author": "abanthiy", "createdAt": "2020-03-04T01:04:37Z", "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,99 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from github import Github\n+\n+\n+def main():\n+    with open(\"target/surefire-reports/junitReport.json\", \"r\") as f:\n+        report = json.load(f)\n+    with open(os.getenv(\"GITHUB_EVENT_PATH\"), \"r\") as f:\n+        github_event = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")\n+    datapoints = []\n+    current_metrics = defaultdict(dict)\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+\n+    # For each test in the report\n+    for test_run in report:\n+        # For each metric key and value (excluding name and classname since they aren't metrics)\n+        for k, v in test_run.items():\n+            if k != \"name\" and k != \"classname\":\n+                test_path = test_run[\"classname\"] + \".\" + test_run[\"name\"]", "originalCommit": "358756fcab63dd42a91c4ee42903d61295f3079a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5NTIyNg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387395226", "bodyText": "Not easily since these are separate languages. And anyway, both the producer and consumer of junitReport.json are completely under our control.", "author": "MikeDombo", "createdAt": "2020-03-04T01:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4NzY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5NTc0Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387395746", "bodyText": "Just failing on the KeyError is fine with me, since if the json is malformed that's a problem that we can't fix in this script, and will require human intervention anyway. Not much point in failing gracefully.", "author": "MikeDombo", "createdAt": "2020-03-04T01:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4NzY1NA=="}], "type": "inlineReview"}, {"oid": "c07d3f839266cec5350b2e66b41ccbeaa35f89e1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c07d3f839266cec5350b2e66b41ccbeaa35f89e1", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-04T01:25:04Z", "type": "commit"}, {"oid": "c07d3f839266cec5350b2e66b41ccbeaa35f89e1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c07d3f839266cec5350b2e66b41ccbeaa35f89e1", "message": "Add GitHub action to upload metrics to cloudwatch", "committedDate": "2020-03-04T01:25:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNTE0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387835149", "bodyText": "Right now the metrics appear in an order which is less readable for me. It would be good to have the avg and max of measurements in consecutive rows in table.\nThis would require changing the extension code which generates the json.", "author": "abanthiy", "createdAt": "2020-03-04T17:56:19Z", "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,124 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from retryable import retry\n+from github import Github\n+\n+\n+def batch(iterable, batch_size=1):\n+    length = len(iterable)\n+    for index in range(0, length, batch_size):\n+        yield iterable[index:min(index + batch_size, length)]\n+\n+\n+@retry()\n+def put_metrics_retryable(cw, datapoints):\n+    # Returns None, will throw if an error occurs\n+    cw.put_metric_data(\n+        Namespace=\"Evergreen/Testing\",\n+        MetricData=datapoints\n+    )\n+\n+\n+@retry(count=10, delay=10)\n+def comment_on_pr(comment, pr_number):\n+    gh = Github(sys.argv[1])\n+    repo = gh.get_repo(os.getenv(\"GITHUB_REPOSITORY\"))\n+    pr = repo.get_pull(pr_number)\n+    pr.create_issue_comment(comment)\n+\n+\n+def main():\n+    with open(\"target/surefire-reports/junitReport.json\", \"r\") as f:\n+        report = json.load(f)\n+    with open(os.getenv(\"GITHUB_EVENT_PATH\"), \"r\") as f:\n+        github_event = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")\n+    datapoints = []\n+    current_metrics = defaultdict(dict)\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+\n+    # For each test in the report\n+    for test_run in report:\n+        # For each metric key and value (excluding name and classname since they aren't metrics)\n+        for k, v in test_run.items():\n+            if k != \"name\" and k != \"classname\":\n+                test_path = test_run[\"classname\"] + \".\" + test_run[\"name\"]\n+                current_metrics[test_path + \" \" + k] = v\n+                datapoints.append({\n+                    \"MetricName\": k,\n+                    \"Value\": v,\n+                    \"Dimensions\": [\n+                        {\n+                            \"Name\": \"Test Path\",\n+                            \"Value\": test_path\n+                        },\n+                        {\n+                            \"Name\": \"GitHub Event\",\n+                            \"Value\": event_type\n+                        }\n+                    ]\n+                })\n+\n+    if event_type == \"push\":\n+        # Put metrics up to cloudwatch in batches of 20 (their max limit)\n+        for b in batch(datapoints, 20):\n+            put_metrics_retryable(cw, b)\n+        # Only continue to run for pull requests\n+        return\n+\n+    # Get metrics from the last push to master to compare the current metrics to\n+    old_metrics_result = cw.get_metric_data(MetricDataQueries=[\n+        {\n+            \"Id\": \"last_push\",\n+            \"Expression\": f\"SEARCH('{{Evergreen/Testing,\\\"GitHub Event\\\",\\\"Test Path\\\"}} \\\"GitHub \"\n+                          f\"Event\\\"=\\\"push\\\"', 'Maximum', 60)\",\n+        }\n+    ],\n+        # Look up to 7 days in the past for the last push to master to compare against\n+        StartTime=datetime.utcnow() - timedelta(days=7),\n+        EndTime=datetime.utcnow(),\n+        ScanBy=\"TimestampDescending\")\n+\n+    # If there are any error messages, print them out so that we can do something about it\n+    if old_metrics_result[\"Messages\"]:\n+        print(old_metrics_result[\"Messages\"])\n+    prev_metrics = old_metrics_result[\"MetricDataResults\"]\n+\n+    prev_metric_map = {}\n+    for old_metric in reversed(prev_metrics):\n+        if old_metric[\"Label\"] in current_metrics:\n+            old_value = max(old_metric[\"Values\"])\n+            prev_metric_map[old_metric[\"Label\"]] = old_value\n+\n+    table = \"| Measurement | Value | Change | Test |\\n| - | - | - | - |\\n\"", "originalCommit": "c07d3f839266cec5350b2e66b41ccbeaa35f89e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1Nzc4Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387857787", "bodyText": "I can definitely change the extension to put the aggregations next to each other, that's easy enough to fix.", "author": "MikeDombo", "createdAt": "2020-03-04T18:38:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNTE0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5ODEwMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387898103", "bodyText": "The latest github comment doesn't seem to exactly follow avg and max for each measurement.", "author": "hui-yang", "createdAt": "2020-03-04T19:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNTE0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMzc4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387913786", "bodyText": "Trying to fix again, it is difficult to force maps to be kept in a particular order since most JSON libraries don't bother with ordering.", "author": "MikeDombo", "createdAt": "2020-03-04T20:23:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNTE0OQ=="}], "type": "inlineReview"}, {"oid": "38618e2de88988154b02533925c8f6c71336f2d1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/38618e2de88988154b02533925c8f6c71336f2d1", "message": "Switch measurement order to be average, then max, then next measurement", "committedDate": "2020-03-04T19:59:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwODIzMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387908233", "bodyText": "This defaults to infinite retries with no delay right? why not have a max count/delay like you do for comment on pr?\nIt should be ok if this fails right? And we don't want to get into throttling situations by multiple prs spamming put_metric", "author": "rbattle", "createdAt": "2020-03-04T20:11:55Z", "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,124 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict, OrderedDict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from retryable import retry\n+from github import Github\n+\n+\n+def batch(iterable, batch_size=1):\n+    length = len(iterable)\n+    for index in range(0, length, batch_size):\n+        yield iterable[index:min(index + batch_size, length)]\n+\n+\n+@retry()", "originalCommit": "38618e2de88988154b02533925c8f6c71336f2d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMTkyMQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387911921", "bodyText": "Default is 3 retires.", "author": "MikeDombo", "createdAt": "2020-03-04T20:19:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwODIzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxNzQ4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387917486", "bodyText": "Cool - I was looking at a different retry library by mistake - it would be useful to comment here, or just throw it in so it is obvious", "author": "rbattle", "createdAt": "2020-03-04T20:31:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwODIzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMTAwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387911007", "bodyText": "I don't think you addressed the potential error from cw here as discussed in prev version", "author": "rbattle", "createdAt": "2020-03-04T20:17:54Z", "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,124 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict, OrderedDict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from retryable import retry\n+from github import Github\n+\n+\n+def batch(iterable, batch_size=1):\n+    length = len(iterable)\n+    for index in range(0, length, batch_size):\n+        yield iterable[index:min(index + batch_size, length)]\n+\n+\n+@retry()\n+def put_metrics_retryable(cw, datapoints):\n+    # Returns None, will throw if an error occurs\n+    cw.put_metric_data(\n+        Namespace=\"Evergreen/Testing\",\n+        MetricData=datapoints\n+    )\n+\n+\n+@retry(count=10, delay=10)\n+def comment_on_pr(comment, pr_number):\n+    gh = Github(sys.argv[1])\n+    repo = gh.get_repo(os.getenv(\"GITHUB_REPOSITORY\"))\n+    pr = repo.get_pull(pr_number)\n+    pr.create_issue_comment(comment)\n+\n+\n+def main():\n+    with open(\"target/surefire-reports/junitReport.json\", \"r\") as f:\n+        report = json.load(f, object_pairs_hook=OrderedDict)\n+    with open(os.getenv(\"GITHUB_EVENT_PATH\"), \"r\") as f:\n+        github_event = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")\n+    datapoints = []\n+    current_metrics = defaultdict(dict)\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+\n+    # For each test in the report\n+    for test_run in report:\n+        # For each metric key and value (excluding name and classname since they aren't metrics)\n+        for k, v in test_run.items():\n+            if k != \"name\" and k != \"classname\":\n+                test_path = test_run[\"classname\"] + \".\" + test_run[\"name\"]\n+                current_metrics[test_path + \" \" + k] = v\n+                datapoints.append({\n+                    \"MetricName\": k,\n+                    \"Value\": v,\n+                    \"Dimensions\": [\n+                        {\n+                            \"Name\": \"Test Path\",\n+                            \"Value\": test_path\n+                        },\n+                        {\n+                            \"Name\": \"GitHub Event\",\n+                            \"Value\": event_type\n+                        }\n+                    ]\n+                })\n+\n+    if event_type == \"push\":\n+        # Put metrics up to cloudwatch in batches of 20 (their max limit)\n+        for b in batch(datapoints, 20):\n+            put_metrics_retryable(cw, b)\n+        # Only continue to run for pull requests\n+        return\n+\n+    # Get metrics from the last push to master to compare the current metrics to\n+    old_metrics_result = cw.get_metric_data(MetricDataQueries=[", "originalCommit": "38618e2de88988154b02533925c8f6c71336f2d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMjM5Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387912397", "bodyText": "There can be an error, and now it will be printed nicely, but there's still nothing we can do to handle it. The human-in-the-loop will need to address the issue at this point.", "author": "MikeDombo", "createdAt": "2020-03-04T20:20:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMTAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxNDE3Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387914172", "bodyText": "What sort of handling would you want to see here? Because, short of failing, I don't know what else we could do.", "author": "MikeDombo", "createdAt": "2020-03-04T20:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMTAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxNTEyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387915127", "bodyText": "I must have missed where that is getting printed", "author": "rbattle", "createdAt": "2020-03-04T20:26:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMTAwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxNjY0NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387916645", "bodyText": "Ah, never mind - I see that it comes in old_metrics_result[\"Messages\"]", "author": "rbattle", "createdAt": "2020-03-04T20:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMTAwNw=="}], "type": "inlineReview"}, {"oid": "669bd53ddee4aaddc26474c5bb2cee38914e034a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/669bd53ddee4aaddc26474c5bb2cee38914e034a", "message": "Switch measurement order to be average, then max, then next measurement", "committedDate": "2020-03-04T20:21:45Z", "type": "commit"}, {"oid": "669bd53ddee4aaddc26474c5bb2cee38914e034a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/669bd53ddee4aaddc26474c5bb2cee38914e034a", "message": "Switch measurement order to be average, then max, then next measurement", "committedDate": "2020-03-04T20:21:45Z", "type": "forcePushed"}, {"oid": "d463ea191b15aa6f4da1b54239948b0f37b7265b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d463ea191b15aa6f4da1b54239948b0f37b7265b", "message": "Merge branch 'master' into extension", "committedDate": "2020-03-04T22:54:47Z", "type": "commit"}, {"oid": "cc2c0b129a6f66484f62ab59775164eba9946ceb", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cc2c0b129a6f66484f62ab59775164eba9946ceb", "message": "Merge branch 'master' into extension", "committedDate": "2020-03-04T23:00:18Z", "type": "commit"}]}