{"pr_number": 225, "pr_title": "Add more tests for Exec class", "pr_createdAt": "2020-05-06T17:39:29Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3NDkwNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r420974905", "bodyText": "can you rename this as GIVEN_WHEN_THEN like we did for Stream Manager?", "author": "MikeDombo", "createdAt": "2020-05-06T17:43:29Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/util/ExecTest.java", "diffHunk": "@@ -4,58 +4,144 @@\n package com.aws.iot.evergreen.integrationtests.util;\n \n import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.Utils;\n import org.junit.jupiter.api.Test;\n \n+import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class ExecTest {\n     @Test\n-    void test() throws InterruptedException, IOException {\n+    void testExecStaticCommands() throws InterruptedException, IOException {", "originalCommit": "3bf6949136c9c0817beddc8722691032133d429e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4NTIxNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r420985214", "bodyText": "Let me do that. Do we follow that convention for all tests?", "author": "prateek-y", "createdAt": "2020-05-06T17:59:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3NDkwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4ODEyMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r420988122", "bodyText": "Yes all of our new tests are supposed to be following that.", "author": "MikeDombo", "createdAt": "2020-05-06T18:03:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3NDkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3NTc0Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r420975742", "bodyText": "These look a bit separate, maybe should be in a different test which tests the working directory.", "author": "MikeDombo", "createdAt": "2020-05-06T17:44:41Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/util/ExecTest.java", "diffHunk": "@@ -4,58 +4,144 @@\n package com.aws.iot.evergreen.integrationtests.util;\n \n import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.Utils;\n import org.junit.jupiter.api.Test;\n \n+import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class ExecTest {\n     @Test\n-    void test() throws InterruptedException, IOException {\n+    void testExecStaticCommands() throws InterruptedException, IOException {\n         if (Exec.isWindows) {\n             return;\n         }\n-        String s = Exec.cmd(\"pwd\");\n-        //        System.out.println(\"pwd: \"+s);\n+        final String command = \"pwd\";\n+        String s = Exec.cmd(command);\n         assertFalse(s.contains(\"\\n\"));\n         assertTrue(s.startsWith(\"/\"));\n-        assertEquals(s, Exec.sh(\"pwd\"));\n+        assertEquals(s, Exec.sh(command));\n         String s2 = Exec.sh(\"ifconfig -a;echo Hello\");\n-        //        System.out.println(s2);\n         assertTrue(s2.contains(\"Hello\"));\n+        String expectedDir = System.getProperty(\"user.home\");\n+        assertEquals(expectedDir, Exec.sh(new File(expectedDir), command));\n+        assertEquals(expectedDir, Exec.sh(Paths.get(expectedDir), command));", "originalCommit": "3bf6949136c9c0817beddc8722691032133d429e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4NDU4OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r420984588", "bodyText": "I have organized tests based on the public methods in the class, I was trying to test all sh methods here. Since all of them call the same method, I did not put them in separate methods.", "author": "prateek-y", "createdAt": "2020-05-06T17:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3NTc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3NjUwMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r420976500", "bodyText": "this isn't really testing anything JDK related, but testing that successful returns true or false based on the exit code (from what I can tell based on this test).", "author": "MikeDombo", "createdAt": "2020-05-06T17:45:57Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/util/ExecTest.java", "diffHunk": "@@ -4,58 +4,144 @@\n package com.aws.iot.evergreen.integrationtests.util;\n \n import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.Utils;\n import org.junit.jupiter.api.Test;\n \n+import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class ExecTest {\n     @Test\n-    void test() throws InterruptedException, IOException {\n+    void testExecStaticCommands() throws InterruptedException, IOException {\n         if (Exec.isWindows) {\n             return;\n         }\n-        String s = Exec.cmd(\"pwd\");\n-        //        System.out.println(\"pwd: \"+s);\n+        final String command = \"pwd\";\n+        String s = Exec.cmd(command);\n         assertFalse(s.contains(\"\\n\"));\n         assertTrue(s.startsWith(\"/\"));\n-        assertEquals(s, Exec.sh(\"pwd\"));\n+        assertEquals(s, Exec.sh(command));\n         String s2 = Exec.sh(\"ifconfig -a;echo Hello\");\n-        //        System.out.println(s2);\n         assertTrue(s2.contains(\"Hello\"));\n+        String expectedDir = System.getProperty(\"user.home\");\n+        assertEquals(expectedDir, Exec.sh(new File(expectedDir), command));\n+        assertEquals(expectedDir, Exec.sh(Paths.get(expectedDir), command));\n+        assertTrue(Exec.successful(false, command));\n     }\n \n     @Test\n-    void test2() throws InterruptedException, IOException {\n-        //        System.out.println(Exec.sh(\"printenv;java --version\"));\n-        //        assertFalse(Exec.successful(\"java --version|egrep -i -q '(jdk|jre) *17\\\\.'\"));\n-        //        assertTrue(Exec.successful(\"java --version|egrep -i -q '(jdk|jre) *11\\\\.'\"));\n+    void testGetOpenJDK() throws InterruptedException, IOException {", "originalCommit": "3bf6949136c9c0817beddc8722691032133d429e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MDQ4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r420980486", "bodyText": "Yeah, will rename or remove this, carried over from previous tests.", "author": "prateek-y", "createdAt": "2020-05-06T17:52:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3NjUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3Nzc5NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r420977794", "bodyText": "is there anything to be tested with this? Verify that it is no-op or verify that the Process is no longer running?", "author": "MikeDombo", "createdAt": "2020-05-06T17:47:53Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/util/ExecTest.java", "diffHunk": "@@ -4,58 +4,144 @@\n package com.aws.iot.evergreen.integrationtests.util;\n \n import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.Utils;\n import org.junit.jupiter.api.Test;\n \n+import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class ExecTest {\n     @Test\n-    void test() throws InterruptedException, IOException {\n+    void testExecStaticCommands() throws InterruptedException, IOException {\n         if (Exec.isWindows) {\n             return;\n         }\n-        String s = Exec.cmd(\"pwd\");\n-        //        System.out.println(\"pwd: \"+s);\n+        final String command = \"pwd\";\n+        String s = Exec.cmd(command);\n         assertFalse(s.contains(\"\\n\"));\n         assertTrue(s.startsWith(\"/\"));\n-        assertEquals(s, Exec.sh(\"pwd\"));\n+        assertEquals(s, Exec.sh(command));\n         String s2 = Exec.sh(\"ifconfig -a;echo Hello\");\n-        //        System.out.println(s2);\n         assertTrue(s2.contains(\"Hello\"));\n+        String expectedDir = System.getProperty(\"user.home\");\n+        assertEquals(expectedDir, Exec.sh(new File(expectedDir), command));\n+        assertEquals(expectedDir, Exec.sh(Paths.get(expectedDir), command));\n+        assertTrue(Exec.successful(false, command));\n     }\n \n     @Test\n-    void test2() throws InterruptedException, IOException {\n-        //        System.out.println(Exec.sh(\"printenv;java --version\"));\n-        //        assertFalse(Exec.successful(\"java --version|egrep -i -q '(jdk|jre) *17\\\\.'\"));\n-        //        assertTrue(Exec.successful(\"java --version|egrep -i -q '(jdk|jre) *11\\\\.'\"));\n+    void testGetOpenJDK() throws InterruptedException, IOException {\n         assertFalse(Exec.successful(false, \"echo openjdk 11.0|egrep -i -q '(jdk|jre) *18\\\\.'\"));\n         assertTrue(new Exec().withShell(\"echo openjdk 11.0|egrep -i -q '(jdk|jre) *11\\\\.'\").withDumpOut()\n                 .successful(false));\n     }\n \n     @Test\n-    void test3() throws Exception {\n+    void testExecCommandInBackground() throws Exception {\n         CountDownLatch done = new CountDownLatch(1);\n-        List<String> o = new ArrayList<>();\n-        List<String> e = new ArrayList<>();\n+        List<String> stdoutMessages = new ArrayList<>();\n+        List<String> stderrMessages = new ArrayList<>();\n \n-        new Exec().withShell(\"pwd\").withOut(str -> o.add(str.toString())).withErr(str -> e.add(str.toString()))\n+        new Exec().withShell(\"pwd\")\n+                .withOut(str -> stdoutMessages.add(str.toString()))\n+                .withErr(str -> stderrMessages.add(str.toString()))\n                 .background(exc -> done.countDown());\n-        assertTrue(done.await(10, TimeUnit.SECONDS));\n-        //        System.out.println(\"O: \"+deepToString(o));\n-        //        System.out.println(\"E: \"+deepToString(e));\n-        assertEquals(0, e.size());\n-        assertEquals(1, o.size());\n-        assertTrue(o.get(0).startsWith(\"/\"));\n+        // Wait for 1 second for command to finish\n+        assertTrue(done.await(1, TimeUnit.SECONDS));\n+        assertEquals(0, stderrMessages.size());\n+        assertEquals(1, stdoutMessages.size());\n+        assertTrue(stdoutMessages.get(0).startsWith(\"/\"));\n+    }\n+\n+    @Test\n+    void testClosingProcess() throws IOException, InterruptedException {\n+        String command = \"Sleep 10\";\n+        CountDownLatch done = new CountDownLatch(1);\n+        Exec exec = new Exec();\n+        exec.withShell(command).background(exc -> done.countDown());\n+        assertTrue(exec.isRunning());\n+        // close waits for atmost 7 seconds before close\n+        exec.close();\n+        assertFalse(exec.isRunning());\n+        //closing again should be no op\n+        exec.close();", "originalCommit": "3bf6949136c9c0817beddc8722691032133d429e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MjE4OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r420982189", "bodyText": "It should not throw, thats what I had in mind, looking at the close() behavior.", "author": "prateek-y", "createdAt": "2020-05-06T17:54:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3Nzc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4MzcwOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r420983708", "bodyText": "Got it. Please also check that the underlying Process is no longer alive as stopping processes is really important for our correctness.", "author": "MikeDombo", "createdAt": "2020-05-06T17:56:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3Nzc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk4NjA4Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r420986083", "bodyText": "Makes sense.", "author": "prateek-y", "createdAt": "2020-05-06T18:00:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk3Nzc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMjQwNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r421022404", "bodyText": "I think it is not necessary to generate a random string here. Just use something like \"this_wont_exist_ever\"", "author": "fufranci", "createdAt": "2020-05-06T19:00:21Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/util/ExecTest.java", "diffHunk": "@@ -4,58 +4,144 @@\n package com.aws.iot.evergreen.integrationtests.util;\n \n import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.Utils;\n import org.junit.jupiter.api.Test;\n \n+import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class ExecTest {\n     @Test\n-    void test() throws InterruptedException, IOException {\n+    void testExecStaticCommands() throws InterruptedException, IOException {\n         if (Exec.isWindows) {\n             return;\n         }\n-        String s = Exec.cmd(\"pwd\");\n-        //        System.out.println(\"pwd: \"+s);\n+        final String command = \"pwd\";\n+        String s = Exec.cmd(command);\n         assertFalse(s.contains(\"\\n\"));\n         assertTrue(s.startsWith(\"/\"));\n-        assertEquals(s, Exec.sh(\"pwd\"));\n+        assertEquals(s, Exec.sh(command));\n         String s2 = Exec.sh(\"ifconfig -a;echo Hello\");\n-        //        System.out.println(s2);\n         assertTrue(s2.contains(\"Hello\"));\n+        String expectedDir = System.getProperty(\"user.home\");\n+        assertEquals(expectedDir, Exec.sh(new File(expectedDir), command));\n+        assertEquals(expectedDir, Exec.sh(Paths.get(expectedDir), command));\n+        assertTrue(Exec.successful(false, command));\n     }\n \n     @Test\n-    void test2() throws InterruptedException, IOException {\n-        //        System.out.println(Exec.sh(\"printenv;java --version\"));\n-        //        assertFalse(Exec.successful(\"java --version|egrep -i -q '(jdk|jre) *17\\\\.'\"));\n-        //        assertTrue(Exec.successful(\"java --version|egrep -i -q '(jdk|jre) *11\\\\.'\"));\n+    void testGetOpenJDK() throws InterruptedException, IOException {\n         assertFalse(Exec.successful(false, \"echo openjdk 11.0|egrep -i -q '(jdk|jre) *18\\\\.'\"));\n         assertTrue(new Exec().withShell(\"echo openjdk 11.0|egrep -i -q '(jdk|jre) *11\\\\.'\").withDumpOut()\n                 .successful(false));\n     }\n \n     @Test\n-    void test3() throws Exception {\n+    void testExecCommandInBackground() throws Exception {\n         CountDownLatch done = new CountDownLatch(1);\n-        List<String> o = new ArrayList<>();\n-        List<String> e = new ArrayList<>();\n+        List<String> stdoutMessages = new ArrayList<>();\n+        List<String> stderrMessages = new ArrayList<>();\n \n-        new Exec().withShell(\"pwd\").withOut(str -> o.add(str.toString())).withErr(str -> e.add(str.toString()))\n+        new Exec().withShell(\"pwd\")\n+                .withOut(str -> stdoutMessages.add(str.toString()))\n+                .withErr(str -> stderrMessages.add(str.toString()))\n                 .background(exc -> done.countDown());\n-        assertTrue(done.await(10, TimeUnit.SECONDS));\n-        //        System.out.println(\"O: \"+deepToString(o));\n-        //        System.out.println(\"E: \"+deepToString(e));\n-        assertEquals(0, e.size());\n-        assertEquals(1, o.size());\n-        assertTrue(o.get(0).startsWith(\"/\"));\n+        // Wait for 1 second for command to finish\n+        assertTrue(done.await(1, TimeUnit.SECONDS));\n+        assertEquals(0, stderrMessages.size());\n+        assertEquals(1, stdoutMessages.size());\n+        assertTrue(stdoutMessages.get(0).startsWith(\"/\"));\n+    }\n+\n+    @Test\n+    void testClosingProcess() throws IOException, InterruptedException {\n+        String command = \"Sleep 10\";\n+        CountDownLatch done = new CountDownLatch(1);\n+        Exec exec = new Exec();\n+        exec.withShell(command).background(exc -> done.countDown());\n+        assertTrue(exec.isRunning());\n+        // close waits for atmost 7 seconds before close\n+        exec.close();\n+        assertFalse(exec.isRunning());\n+        //closing again should be no op\n+        exec.close();\n+    }\n+\n+    @Test\n+    void testExecForStdOutputStdError() throws InterruptedException, IOException {\n+        Exec exec = new Exec();\n+        String expectedOutput = \"HELLO\";\n+        String command = \"echo \" + expectedOutput;\n+        StringBuilder stdout = new StringBuilder();\n+        StringBuilder stderr = new StringBuilder();\n+        Consumer<CharSequence> stdoutConsumer = c -> stdout.append(c);\n+        Consumer<CharSequence> stderrConsumer = c -> stderr.append(c);\n+        exec = exec.withShell(command).withOut(stdoutConsumer).withErr(stderrConsumer);\n+        assertTrue(exec.successful(false));\n+        // new line for shell\n+        assertEquals(expectedOutput.length() + 1, stdout.toString().length());\n+        assertEquals(0, stderr.toString().length());\n+\n+        // reinit consumers\n+        stdout.setLength(0);\n+        stderr.setLength(0);\n+\n+        command = command + \" 1>&2\";\n+        exec = exec.withShell(command);\n+        assertFalse(exec.successful(false));\n+        assertEquals(0, stdout.toString().length());\n+        // new line for shell\n+        assertEquals(expectedOutput.length() + 1, stderr.toString().length());\n+    }\n+\n+    @Test\n+    void testCD() throws InterruptedException, IOException {\n+        Exec exec = new Exec();\n+        final String getWorkingDirCmd = \"pwd\";\n+        // By default Exec uses home current directory for exec\n+        String expectedDir = System.getProperty(\"user.dir\");\n+        String defaultDir = exec.withExec(getWorkingDirCmd).execAndGetStringOutput();\n+        assertEquals(expectedDir, defaultDir);\n+\n+        // Now change it to some other directory\n+        // TODO: Change this to a proper root to work on all platforms\n+        expectedDir = \"/\";\n+        String changedDir = exec.cd(new File(expectedDir)).withExec(getWorkingDirCmd).execAndGetStringOutput();\n+        assertEquals(expectedDir, changedDir);\n+\n+        // Now use the file argument to change into another directory again\n+        // File argument would use the current directory (\"/\") as base\n+        expectedDir = System.getProperty(\"user.home\");\n+        changedDir = exec.cd(expectedDir).withExec(getWorkingDirCmd).execAndGetStringOutput();\n+        assertEquals(expectedDir, changedDir);\n+\n+        // Now change it to root again\n+        expectedDir = \"/\";\n+        changedDir = exec.cd(new File(expectedDir)).withExec(getWorkingDirCmd).execAndGetStringOutput();\n+        assertEquals(expectedDir, changedDir);\n+\n+        // by default cd change to home directory\n+        expectedDir = System.getProperty(\"user.home\");\n+        changedDir = exec.cd().withExec(getWorkingDirCmd).execAndGetStringOutput();\n+        assertEquals(expectedDir, changedDir);\n+    }\n+\n+    @Test\n+    void testToString() {\n+        // TODO: length of 90 as per the class does not seem to work\n+        int maxStringLength = 50;\n+        String fakeCommand = Utils.generateRandomString(maxStringLength);", "originalCommit": "3bf6949136c9c0817beddc8722691032133d429e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0NTY5Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r421045696", "bodyText": "You are correct, I intended to have variable lengths string first, but ended up using just one. I will change this.", "author": "prateek-y", "createdAt": "2020-05-06T19:41:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMjQwNA=="}], "type": "inlineReview"}, {"oid": "c8f08086c881a9d34b4ebfdefa207318071daad8", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c8f08086c881a9d34b4ebfdefa207318071daad8", "message": "Add more tests for Exec class", "committedDate": "2020-05-06T21:23:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzOTM1Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r421139353", "bodyText": "Interesting. I didn't know there is a capital Sleep command!", "author": "fufranci", "createdAt": "2020-05-06T22:56:26Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/util/ExecTest.java", "diffHunk": "@@ -6,56 +6,139 @@\n import com.aws.iot.evergreen.util.Exec;\n import org.junit.jupiter.api.Test;\n \n+import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class ExecTest {\n     @Test\n-    void test() throws InterruptedException, IOException {\n+    void Given_exec_WHEN_commands_executed_using_static_methods_THEN_success() throws InterruptedException, IOException {\n         if (Exec.isWindows) {\n             return;\n         }\n-        String s = Exec.cmd(\"pwd\");\n-        //        System.out.println(\"pwd: \"+s);\n+        final String command = \"pwd\";\n+        String s = Exec.cmd(command);\n         assertFalse(s.contains(\"\\n\"));\n         assertTrue(s.startsWith(\"/\"));\n-        assertEquals(s, Exec.sh(\"pwd\"));\n+        assertEquals(s, Exec.sh(command));\n         String s2 = Exec.sh(\"ifconfig -a;echo Hello\");\n-        //        System.out.println(s2);\n         assertTrue(s2.contains(\"Hello\"));\n+        String expectedDir = System.getProperty(\"user.home\");\n+        assertEquals(expectedDir, Exec.sh(new File(expectedDir), command));\n+        assertEquals(expectedDir, Exec.sh(Paths.get(expectedDir), command));\n+        assertTrue(Exec.successful(false, command));\n     }\n \n     @Test\n-    void test2() throws InterruptedException, IOException {\n-        //        System.out.println(Exec.sh(\"printenv;java --version\"));\n-        //        assertFalse(Exec.successful(\"java --version|egrep -i -q '(jdk|jre) *17\\\\.'\"));\n-        //        assertTrue(Exec.successful(\"java --version|egrep -i -q '(jdk|jre) *11\\\\.'\"));\n-        assertFalse(Exec.successful(false, \"echo openjdk 11.0|egrep -i -q '(jdk|jre) *18\\\\.'\"));\n-        assertTrue(new Exec().withShell(\"echo openjdk 11.0|egrep -i -q '(jdk|jre) *11\\\\.'\").withDumpOut()\n-                .successful(false));\n+    void GIVEN_exec_WHEN_command_executed_in_background_THEN_success() throws Exception {\n+        CountDownLatch done = new CountDownLatch(1);\n+        List<String> stdoutMessages = new ArrayList<>();\n+        List<String> stderrMessages = new ArrayList<>();\n+\n+        new Exec().withShell(\"pwd\")\n+                .withOut(str -> stdoutMessages.add(str.toString()))\n+                .withErr(str -> stderrMessages.add(str.toString()))\n+                .background(exc -> done.countDown());\n+        // Wait for 1 second for command to finish\n+        assertTrue(done.await(1, TimeUnit.SECONDS));\n+        assertEquals(0, stderrMessages.size());\n+        assertEquals(1, stdoutMessages.size());\n+        assertTrue(stdoutMessages.get(0).startsWith(\"/\"));\n     }\n \n     @Test\n-    void test3() throws Exception {\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    void GIVEN_exec_WHEN_running_command_closed_THEN_success() throws IOException, InterruptedException {\n+        // close waits for atmost 7 seconds before close\n+        String command = \"Sleep 10\";", "originalCommit": "c8f08086c881a9d34b4ebfdefa207318071daad8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MDQ3MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r421140470", "bodyText": "Oh I just tried on a Linux. There is no capital Sleep on Linux. It is only available on Mac.", "author": "fufranci", "createdAt": "2020-05-06T22:59:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzOTM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0NDQ4NQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r421144485", "bodyText": "yeah. It was unintentional. mac has both apparently. :) change it to lower caps now.", "author": "prateek-y", "createdAt": "2020-05-06T23:10:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzOTM1Mw=="}], "type": "inlineReview"}, {"oid": "002b71d3be0c2658cace5a757145a286e3ebca29", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/002b71d3be0c2658cace5a757145a286e3ebca29", "message": "Add more tests for Exec class", "committedDate": "2020-05-06T23:06:39Z", "type": "commit"}, {"oid": "002b71d3be0c2658cace5a757145a286e3ebca29", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/002b71d3be0c2658cace5a757145a286e3ebca29", "message": "Add more tests for Exec class", "committedDate": "2020-05-06T23:06:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0Njc2OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/225#discussion_r421146768", "bodyText": "nit: capitalize the GIVEN.", "author": "MikeDombo", "createdAt": "2020-05-06T23:17:40Z", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/util/ExecTest.java", "diffHunk": "@@ -6,56 +6,139 @@\n import com.aws.iot.evergreen.util.Exec;\n import org.junit.jupiter.api.Test;\n \n+import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class ExecTest {\n     @Test\n-    void test() throws InterruptedException, IOException {\n+    void Given_exec_WHEN_commands_executed_using_static_methods_THEN_success() throws InterruptedException, IOException {", "originalCommit": "002b71d3be0c2658cace5a757145a286e3ebca29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bcc2cb5ea37c0ce6f2e1289f59a337ef6941437d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/bcc2cb5ea37c0ce6f2e1289f59a337ef6941437d", "message": "Merge branch 'master' into ExecTest", "committedDate": "2020-05-06T23:46:45Z", "type": "commit"}]}