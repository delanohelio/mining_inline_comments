{"pr_number": 79, "pr_title": "Deployment service initial implementation", "pr_createdAt": "2020-02-27T03:12:52Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/79", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5NzU5Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/79#discussion_r384897597", "bodyText": "You'll need to reset this in startup, otherwise it won't work if DA gets restarted.", "author": "MikeDombo", "createdAt": "2020-02-27T03:38:13Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.amazonaws.services.iot.client.AWSIotException;\n+import com.amazonaws.services.iot.client.AWSIotMessage;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.model.AwsIotJobsMqttMessage;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionResponse;\n+import software.amazon.awssdk.iot.iotjobs.model.JobExecutionData;\n+import software.amazon.awssdk.iot.iotjobs.model.JobStatus;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import javax.inject.Inject;\n+\n+@ImplementsService(name = \"DeploymentService\", autostart = true)\n+public class DeploymentService extends EvergreenService {\n+\n+    private static Long DEPLOYMENT_POLLING_FREQUENCY = Duration.ofSeconds(30).toMillis();\n+    private static String NOTIFY_TOPIC = \"$aws/things/{thingName}/jobs/notify\";\n+\n+    private static Logger logger = LogManager.getLogger(DeploymentService.class);\n+\n+    @Inject\n+    private IotJobsHelper iotJobsHelper;\n+    private MqttHelper mqttHelper;\n+    private AtomicBoolean receivedShutdown = new AtomicBoolean(false);\n+    private boolean errored;\n+\n+    private Consumer<AWSIotMessage> awsIotNotifyMessageHandler = new Consumer<AWSIotMessage>() {\n+        @Override\n+        public void accept(AWSIotMessage awsIotMessage) {\n+            logger.info(\"Received mqtt notify message\");\n+            logger.info(\"Payload: \" + awsIotMessage.getStringPayload());\n+            ObjectMapper objectMapper = new ObjectMapper();\n+            objectMapper.configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false);\n+            objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+            AwsIotJobsMqttMessage jobsMqttMessage;\n+            try {\n+                jobsMqttMessage = objectMapper.readValue(awsIotMessage.getStringPayload(), AwsIotJobsMqttMessage.class);\n+            } catch (JsonProcessingException ex) {\n+                logger.error(\"Incorrectly formatted message received from AWS Iot\", ex);\n+                return;\n+            }\n+\n+            try {\n+                if (!jobsMqttMessage.getJobs().getQueued().isEmpty()) {\n+                    iotJobsHelper.getNextPendingJob();\n+                }\n+            } catch (ExecutionException | InterruptedException ex) {\n+                //TODO: DA should continue listening for other messages if error in one message\n+                logger.error(\"Caught exception while handling Mqtt message \", ex);\n+                errored = true;\n+                reportState(State.ERRORED);\n+            }\n+        }\n+    };\n+\n+    private Consumer<DescribeJobExecutionResponse> describeJobExecutionResponseConsumer =\n+            new Consumer<DescribeJobExecutionResponse>() {\n+                @Override\n+                public void accept(DescribeJobExecutionResponse response) {\n+                    {\n+                        if (response.execution == null) {\n+                            return;\n+                        }\n+                        logger.info(\"Describe Job: \" + response.execution.jobId + \" version: \"\n+                                + response.execution.versionNumber);\n+                        JobExecutionData jobExecutionData = response.execution;\n+                        String jobId = jobExecutionData.jobId;\n+                        Map<String, Object> jobDocument = jobExecutionData.jobDocument;\n+                        HashMap<String, String> statusDetails = new HashMap<String, String>();\n+                        try {\n+                            if (jobDocument == null) {\n+                                statusDetails.put(\"JobDocument\", \"Empty\");\n+                                iotJobsHelper.updateJobStatus(jobId, JobStatus.FAILED, statusDetails);\n+                                return;\n+                            }\n+                            jobDocument.forEach((key, value) -> {\n+                                logger.info(key, \":\", value);\n+                            });\n+                            logger.info(\"Job status is \" + jobExecutionData.status);\n+                            if (jobExecutionData.status == JobStatus.QUEUED) {\n+                                iotJobsHelper.updateJobStatus(jobId, JobStatus.IN_PROGRESS, null);\n+                                logger.debug(\"Updated the status of JobsId \" + jobId + \"to in progress\");\n+                                //TODO: Trigger deployment process\n+                            }\n+                            //TODO:Check that if job Id is in progress and take appropriate action.\n+                            // We expect only one JobId to be in progress at a time\n+\n+                            iotJobsHelper.updateJobStatus(jobId, JobStatus.SUCCEEDED, null);\n+                            logger.debug(\"Updated the status of JobId\" + jobId + \"to in completed\");\n+                        } catch (ExecutionException | InterruptedException ex) {\n+                            //TODO: If error in one job then DA should continue listening for other jobs\n+                            logger.error(\"Caught exception while doing a deployment\", ex);\n+                            errored = true;\n+                            reportState(State.ERRORED);\n+                        }\n+                    }\n+                }\n+            };\n+\n+    public DeploymentService(Topics topics) {\n+        super(topics);\n+    }\n+\n+    @Override\n+    public void startup() {\n+        logger.info(\"Starting up the Deployment Service\");\n+        String thingName = getStringParameterFromConfig(\"thingName\");\n+        if (thingName.isEmpty()) {\n+            logger.info(\"There is no thingName assigned to this device. Cannot communicate with cloud.\"\n+                    + \" Finishing deployment service\");\n+            reportState(State.FINISHED);\n+            return;\n+        }\n+        String envHome = System.getenv(\"HOME\");\n+        String privateKeyPath = envHome + getStringParameterFromConfig(\"privateKeyPath\");\n+        String certificateFilePath = envHome + getStringParameterFromConfig(\"certificateFilePath\");\n+        String rootCAPath = envHome + getStringParameterFromConfig(\"rootCaPath\");\n+        String clientEndpoint = getStringParameterFromConfig(\"mqttClientEndpoint\");\n+\n+        try {\n+            mqttHelper = new MqttHelper(clientEndpoint, UUID.randomUUID().toString(),\n+                    certificateFilePath, privateKeyPath);\n+            iotJobsHelper = new IotJobsHelper(thingName, clientEndpoint,\n+                    certificateFilePath, privateKeyPath, rootCAPath,\n+                    UUID.randomUUID().toString());\n+            reportState(State.RUNNING);\n+\n+\n+            // TODO: Move to one SDK.\n+            // Subscribe to change event does not work well with jobs sdk, so using iot sdk to subscribe to notify topic\n+            // The Jobs SDK is flaky with its Future reponses. When SubscribeToJobExecutionsChangedEvents\n+            // call is used in Jobs SDK, then PublishDescribeJobExecution is not able to publish the message.\n+            // Tried using different client connections for different subscriptions\n+            String topic = NOTIFY_TOPIC.replace(\"{thingName}\", thingName);\n+            mqttHelper.subscribe(topic, awsIotNotifyMessageHandler);\n+\n+            iotJobsHelper.subscribeToGetNextJobDecription(describeJobExecutionResponseConsumer, rejectedError -> {\n+                logger.error(\"Job subscription got rejected\", rejectedError);\n+            });\n+        } catch (ExecutionException | InterruptedException | AWSIotException ex) {\n+            logger.error(\"Caught exception in subscribing to topics\", ex);\n+            errored = true;\n+            reportState(State.ERRORED);\n+        }\n+        logger.info(\"Running deployment service\");\n+        while (!receivedShutdown.get() && !errored) {\n+            try {\n+                Thread.sleep(DEPLOYMENT_POLLING_FREQUENCY);\n+            } catch (InterruptedException ex) {\n+                logger.error(\"Exception encountered: \", ex);\n+                errored = true;\n+                reportState(State.ERRORED);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void shutdown() {\n+        receivedShutdown.set(true);", "originalCommit": "ab1fc10f35ca7e1db3e73aec22530309cd1541e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5Nzk4MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/79#discussion_r384897981", "bodyText": "I believe you should have access to the logger from the super class. It may be better to use that one instead of making your own.", "author": "MikeDombo", "createdAt": "2020-02-27T03:40:22Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.amazonaws.services.iot.client.AWSIotException;\n+import com.amazonaws.services.iot.client.AWSIotMessage;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.model.AwsIotJobsMqttMessage;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionResponse;\n+import software.amazon.awssdk.iot.iotjobs.model.JobExecutionData;\n+import software.amazon.awssdk.iot.iotjobs.model.JobStatus;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import javax.inject.Inject;\n+\n+@ImplementsService(name = \"DeploymentService\", autostart = true)\n+public class DeploymentService extends EvergreenService {\n+\n+    private static Long DEPLOYMENT_POLLING_FREQUENCY = Duration.ofSeconds(30).toMillis();\n+    private static String NOTIFY_TOPIC = \"$aws/things/{thingName}/jobs/notify\";\n+\n+    private static Logger logger = LogManager.getLogger(DeploymentService.class);", "originalCommit": "ab1fc10f35ca7e1db3e73aec22530309cd1541e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5ODE3Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/79#discussion_r384898177", "bodyText": "Make these loggers final too.", "author": "MikeDombo", "createdAt": "2020-02-27T03:41:11Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/MqttHelper.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.amazonaws.services.iot.client.AWSIotException;\n+import com.amazonaws.services.iot.client.AWSIotMessage;\n+import com.amazonaws.services.iot.client.AWSIotMqttClient;\n+import com.amazonaws.services.iot.client.AWSIotQos;\n+import com.amazonaws.services.iot.client.AWSIotTopic;\n+import com.aws.iot.evergreen.deployment.utils.SampleUtil;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+\n+import java.util.function.Consumer;\n+\n+/**\n+ * Helper class to publish/subscribe to AWS Iot mqtt topics.\n+ */\n+public class MqttHelper {\n+\n+    private static Logger logger = LogManager.getLogger(MqttHelper.class);", "originalCommit": "ab1fc10f35ca7e1db3e73aec22530309cd1541e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5ODU5Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/79#discussion_r384898597", "bodyText": "Just copying comment from previous pr that this object mapper should be moved into a static final class member.", "author": "MikeDombo", "createdAt": "2020-02-27T03:43:20Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.amazonaws.services.iot.client.AWSIotException;\n+import com.amazonaws.services.iot.client.AWSIotMessage;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.model.AwsIotJobsMqttMessage;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionResponse;\n+import software.amazon.awssdk.iot.iotjobs.model.JobExecutionData;\n+import software.amazon.awssdk.iot.iotjobs.model.JobStatus;\n+\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import javax.inject.Inject;\n+\n+@ImplementsService(name = \"DeploymentService\", autostart = true)\n+public class DeploymentService extends EvergreenService {\n+\n+    private static Long DEPLOYMENT_POLLING_FREQUENCY = Duration.ofSeconds(30).toMillis();\n+    private static String NOTIFY_TOPIC = \"$aws/things/{thingName}/jobs/notify\";\n+\n+    private static Logger logger = LogManager.getLogger(DeploymentService.class);\n+\n+    @Inject\n+    private IotJobsHelper iotJobsHelper;\n+    private MqttHelper mqttHelper;\n+    private AtomicBoolean receivedShutdown = new AtomicBoolean(false);\n+    private boolean errored;\n+\n+    private Consumer<AWSIotMessage> awsIotNotifyMessageHandler = new Consumer<AWSIotMessage>() {\n+        @Override\n+        public void accept(AWSIotMessage awsIotMessage) {\n+            logger.info(\"Received mqtt notify message\");\n+            logger.info(\"Payload: \" + awsIotMessage.getStringPayload());\n+            ObjectMapper objectMapper = new ObjectMapper();", "originalCommit": "ab1fc10f35ca7e1db3e73aec22530309cd1541e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a20287865686a3823f8eb7d047efded5adb84f31", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a20287865686a3823f8eb7d047efded5adb84f31", "message": "Remove step to upgrade apt, which is slow and not needed", "committedDate": "2020-02-27T17:01:43Z", "type": "forcePushed"}, {"oid": "33478ba2adaa249fc72c22747ab613b93a3ddd98", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/33478ba2adaa249fc72c22747ab613b93a3ddd98", "message": "Deployment service initial implementation", "committedDate": "2020-02-27T19:07:47Z", "type": "forcePushed"}, {"oid": "a0f4da4c0a4681a985b54f01438604b78a6e6a3f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a0f4da4c0a4681a985b54f01438604b78a6e6a3f", "message": "Deployment service initial implementation", "committedDate": "2020-02-27T19:25:19Z", "type": "commit"}, {"oid": "a0f4da4c0a4681a985b54f01438604b78a6e6a3f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a0f4da4c0a4681a985b54f01438604b78a6e6a3f", "message": "Deployment service initial implementation", "committedDate": "2020-02-27T19:25:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNDUzMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/79#discussion_r385334532", "bodyText": "Add set -e so that it fails if any command fails.", "author": "MikeDombo", "createdAt": "2020-02-27T19:48:52Z", "path": ".github/scripts/decrypt_iot_thing_private_key_and_cert.sh", "diffHunk": "@@ -0,0 +1,15 @@\n+#!/bin/sh\n+", "originalCommit": "a0f4da4c0a4681a985b54f01438604b78a6e6a3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNDgwNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/79#discussion_r385334807", "bodyText": "Remove this as it really slows things down and is not necessary. I know that it isn't needed because I created your same pull request with it removed and it built just fine.", "author": "MikeDombo", "createdAt": "2020-02-27T19:49:24Z", "path": ".github/workflows/maven.yml", "diffHunk": "@@ -12,6 +12,12 @@ jobs:\n     runs-on: ubuntu-latest\n     steps:\n     - uses: actions/checkout@v2\n+    - name: Install gpg\n+      run: sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get install gnupg", "originalCommit": "a0f4da4c0a4681a985b54f01438604b78a6e6a3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}