{"pr_number": 522, "pr_title": "Auth IPC integration", "pr_createdAt": "2020-10-13T21:22:16Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxOTc2OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522#discussion_r504319769", "bodyText": "I think we should reuse previous doAuthentication method, and wrap exceptions here. Is there a reason for you to create a new one?", "author": "prateek-y", "createdAt": "2020-10-13T23:44:09Z", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationIPCAgent.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.authorization;\n+\n+import com.aws.greengrass.ipc.AuthenticationHandler;\n+import com.aws.greengrass.logging.api.Logger;\n+import com.aws.greengrass.logging.impl.LogManager;\n+import generated.software.amazon.awssdk.iot.greengrass.GeneratedAbstractValidateAuthorizationTokenOperationHandler;\n+import generated.software.amazon.awssdk.iot.greengrass.model.InvalidTokenError;\n+import generated.software.amazon.awssdk.iot.greengrass.model.ServiceError;\n+import generated.software.amazon.awssdk.iot.greengrass.model.UnauthorizedError;\n+import generated.software.amazon.awssdk.iot.greengrass.model.ValidateAuthorizationTokenRequest;\n+import generated.software.amazon.awssdk.iot.greengrass.model.ValidateAuthorizationTokenResponse;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import software.amazon.eventstream.iot.EventStreamableJsonMessage;\n+import software.amazon.eventstream.iot.server.OperationContinuationHandlerContext;\n+\n+import javax.inject.Inject;\n+\n+/**\n+ * Class to handle business logic for authorization.\n+ */\n+public class AuthorizationIPCAgent {\n+\n+    private static final Logger logger = LogManager.getLogger(AuthorizationIPCAgent.class);\n+\n+    @Inject\n+    @Setter(AccessLevel.PACKAGE)\n+    private AuthenticationHandler authenticationHandler;\n+\n+    public ValidateAuthorizationTokenOperationHandler getValidateAuthorizationTokenOperationHandler(\n+            OperationContinuationHandlerContext context) {\n+        return new ValidateAuthorizationTokenOperationHandler(context);\n+    }\n+\n+    class ValidateAuthorizationTokenOperationHandler\n+            extends GeneratedAbstractValidateAuthorizationTokenOperationHandler {\n+\n+        protected ValidateAuthorizationTokenOperationHandler(OperationContinuationHandlerContext context) {\n+            super(context);\n+        }\n+\n+        @Override\n+        protected void onStreamClosed() {\n+\n+        }\n+\n+        @Override\n+        public ValidateAuthorizationTokenResponse handleRequest(ValidateAuthorizationTokenRequest request) {\n+            ValidateAuthorizationTokenResponse response = new ValidateAuthorizationTokenResponse();\n+            try {\n+                authenticationHandler.doAuthentication(request);", "originalCommit": "15defe7ef9d9c5e0d994fdc244f9d7ff70251c89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyOTc1Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522#discussion_r504329753", "bodyText": "the previous method combines the two exception types. i can use that original method and check the error message here to throw for different cases", "author": "youtuyy", "createdAt": "2020-10-14T00:19:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxOTc2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgzMzcyNw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522#discussion_r504833727", "bodyText": "Lets change the method signature to throw a different exception when input is invalid, like illegalArgument, and then catch it here. Relying on message string makes it easily breakable in future.", "author": "prateek-y", "createdAt": "2020-10-14T17:00:23Z", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationIPCAgent.java", "diffHunk": "@@ -53,12 +56,17 @@ protected void onStreamClosed() {\n         public ValidateAuthorizationTokenResponse handleRequest(ValidateAuthorizationTokenRequest request) {\n             ValidateAuthorizationTokenResponse response = new ValidateAuthorizationTokenResponse();\n             try {\n-                authenticationHandler.doAuthentication(request);\n+                authenticationHandler.doAuthentication(request.getToken());\n                 response.setIsValid(true);\n                 return response;\n-            } catch (InvalidTokenError | UnauthorizedError e) {\n-                logger.atError(\"authorization-error\").log(\"Unable to authorize request\");\n-                throw e;\n+            } catch (UnauthenticatedException e) {\n+                if (\"Invalid authentication token\".equals(e.getMessage())){", "originalCommit": "a8d8d5aaf86153fe6d1b00172f6811e03741e712", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2MjM3Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522#discussion_r504862376", "bodyText": "sure. should not rely on error message.\nI added this when I was unclear between InvalidToken and Unauthorized errors. now I wonder if all the UnauthenticatedException should throw InvalidTokenError, including it being invalid and unassociated with the service. while UnauthorizedError is used for checking if component is authorized to request the API (for now only Stream Manager)", "author": "youtuyy", "createdAt": "2020-10-14T17:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgzMzcyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg3Mjc5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522#discussion_r504872791", "bodyText": "Yeah. Authentication is misleading here. API is for components to see if a token is valid or not. Internally we are calling authentication to determine that but, for customer they only care if the token is valid or not. I think we can safely return invalidToken for all cases except for Unauthorized case as you mentioned.", "author": "prateek-y", "createdAt": "2020-10-14T18:06:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgzMzcyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkyNjQ4OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522#discussion_r504926489", "bodyText": "remove?", "author": "prateek-y", "createdAt": "2020-10-14T19:39:50Z", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationIPCAgent.java", "diffHunk": "@@ -49,32 +50,28 @@ protected ValidateAuthorizationTokenOperationHandler(OperationContinuationHandle\n \n         @Override\n         protected void onStreamClosed() {\n-\n+            // NA\n         }\n \n         @Override\n         public ValidateAuthorizationTokenResponse handleRequest(ValidateAuthorizationTokenRequest request) {\n+            if (!AUTHORIZED_COMPONENTS.contains(serviceName)) {\n+                throw new UnauthorizedError(\n+                        String.format(\"%s is not authorized to perform %s\", serviceName, getOperationName()));\n+            }\n             ValidateAuthorizationTokenResponse response = new ValidateAuthorizationTokenResponse();\n             try {\n                 authenticationHandler.doAuthentication(request.getToken());\n                 response.setIsValid(true);\n                 return response;\n             } catch (UnauthenticatedException e) {\n-                if (\"Invalid authentication token\".equals(e.getMessage())){\n-                    throw new InvalidTokenError(e.getMessage());\n-                } else if (\"Authentication token not found\".equals(e.getMessage())){\n-                    throw new UnauthorizedError(e.getMessage());\n-                } else {\n-                    throw new ServiceError(e.getMessage());\n-                }\n-            } catch (Exception e) {\n-                throw new ServiceError(e.getMessage());\n+                throw new InvalidTokenError(e.getMessage());\n             }\n         }\n \n         @Override\n         public void handleStreamEvent(EventStreamableJsonMessage streamRequestEvent) {\n-\n+            // NA", "originalCommit": "e9b60dfe739bdffa01eef1f61f0d91e52f12059d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkyNjU2NA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522#discussion_r504926564", "bodyText": "remove ?", "author": "prateek-y", "createdAt": "2020-10-14T19:39:57Z", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationIPCAgent.java", "diffHunk": "@@ -49,32 +50,28 @@ protected ValidateAuthorizationTokenOperationHandler(OperationContinuationHandle\n \n         @Override\n         protected void onStreamClosed() {\n-\n+            // NA", "originalCommit": "e9b60dfe739bdffa01eef1f61f0d91e52f12059d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4MDcxMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522#discussion_r504980712", "bodyText": "unused?", "author": "prateek-y", "createdAt": "2020-10-14T21:24:30Z", "path": "src/test/java/com/aws/greengrass/authorization/AuthorizationIPCAgentTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.authorization;\n+\n+import com.aws.greengrass.ipc.AuthenticationHandler;\n+import com.aws.greengrass.ipc.exceptions.UnauthenticatedException;\n+import com.aws.greengrass.testcommons.testutilities.GGExtension;\n+import generated.software.amazon.awssdk.iot.greengrass.model.InvalidTokenError;\n+import generated.software.amazon.awssdk.iot.greengrass.model.UnauthorizedError;\n+import generated.software.amazon.awssdk.iot.greengrass.model.ValidateAuthorizationTokenRequest;\n+import generated.software.amazon.awssdk.iot.greengrass.model.ValidateAuthorizationTokenResponse;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import software.amazon.awssdk.crt.eventstream.ServerConnectionContinuation;\n+import software.amazon.eventstream.iot.server.AuthenticationData;\n+import software.amazon.eventstream.iot.server.OperationContinuationHandlerContext;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith({MockitoExtension.class, GGExtension.class})\n+public class AuthorizationIPCAgentTest {\n+    private static final String TEST_TOKEN = \"token\";\n+    private static final String STREAM_MANAGER = \"aws.greengrass.StreamManager\";\n+    @Mock\n+    OperationContinuationHandlerContext mockContext;\n+\n+    @Mock\n+    AuthenticationHandler authenticationHandler;\n+\n+    @Mock\n+    AuthenticationData mockAuthenticationData;\n+\n+    private AuthorizationIPCAgent authorizationIPCAgent;\n+\n+    @BeforeEach\n+    void setup() {\n+        when(mockContext.getContinuation()).thenReturn(mock(ServerConnectionContinuation.class));\n+        when(mockContext.getAuthenticationData()).thenReturn(mockAuthenticationData);\n+        authorizationIPCAgent = new AuthorizationIPCAgent();\n+        authorizationIPCAgent.setAuthenticationHandler(authenticationHandler);\n+    }\n+\n+    @Test\n+    void GIVEN_authentication_handler_WHEN_handle_request_valid_token_THEN_response() throws UnauthenticatedException {\n+        when(mockAuthenticationData.getIdentityLabel()).thenReturn(STREAM_MANAGER);\n+        ValidateAuthorizationTokenRequest request = new ValidateAuthorizationTokenRequest();\n+        request.setToken(TEST_TOKEN);\n+        ValidateAuthorizationTokenResponse response = new ValidateAuthorizationTokenResponse();", "originalCommit": "6f8cdb151a575a5a427e1dafe1d412d65b2e1b74", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4Mjc4Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522#discussion_r504982782", "bodyText": "thanks", "author": "youtuyy", "createdAt": "2020-10-14T21:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4MDcxMg=="}], "type": "inlineReview"}, {"oid": "45582e5c396126fec5ad55b6ce9f403596264b4b", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/45582e5c396126fec5ad55b6ce9f403596264b4b", "message": "Update for sdk", "committedDate": "2020-10-20T00:29:01Z", "type": "forcePushed"}, {"oid": "daaf2e85156833650d6b52e6ec0ef14ee8b6edfa", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/daaf2e85156833650d6b52e6ec0ef14ee8b6edfa", "message": "Auth IPC integration", "committedDate": "2020-10-20T00:47:13Z", "type": "forcePushed"}, {"oid": "dc4b34d3d0a64581c2c01c3018ba472ab4a8abc2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/dc4b34d3d0a64581c2c01c3018ba472ab4a8abc2", "message": "Auth IPC integration", "committedDate": "2020-10-20T18:18:09Z", "type": "forcePushed"}, {"oid": "02a64d0d892ad3b9525b4450bacf50a9014fa709", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/02a64d0d892ad3b9525b4450bacf50a9014fa709", "message": "Auth IPC integration", "committedDate": "2020-10-21T03:56:31Z", "type": "forcePushed"}, {"oid": "f43f13beb1f12102422e34fa0d7944ba817b42fa", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f43f13beb1f12102422e34fa0d7944ba817b42fa", "message": "fix test", "committedDate": "2020-10-21T09:45:07Z", "type": "forcePushed"}, {"oid": "762cc1e7d8a3d8d8ff78bfbc12a065872c51cff3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/762cc1e7d8a3d8d8ff78bfbc12a065872c51cff3", "message": "fix test", "committedDate": "2020-10-21T10:19:31Z", "type": "forcePushed"}, {"oid": "1e982e3df8779d693e304a887af182bec9bbd7d2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1e982e3df8779d693e304a887af182bec9bbd7d2", "message": "fix test", "committedDate": "2020-10-21T10:26:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzNTQ3Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522#discussion_r509435476", "bodyText": "create a public const for the stream manager name. We would want to use it in lambda as well (we already have a const in lambda, but we can switch to yours if you make it public)", "author": "MikeDombo", "createdAt": "2020-10-21T16:36:40Z", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationIPCAgent.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.authorization;\n+\n+import com.aws.greengrass.ipc.AuthenticationHandler;\n+import com.aws.greengrass.ipc.exceptions.UnauthenticatedException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import software.amazon.awssdk.aws.greengrass.GeneratedAbstractValidateAuthorizationTokenOperationHandler;\n+import software.amazon.awssdk.aws.greengrass.model.InvalidTokenError;\n+import software.amazon.awssdk.aws.greengrass.model.UnauthorizedError;\n+import software.amazon.awssdk.aws.greengrass.model.ValidateAuthorizationTokenRequest;\n+import software.amazon.awssdk.aws.greengrass.model.ValidateAuthorizationTokenResponse;\n+import software.amazon.awssdk.eventstreamrpc.OperationContinuationHandlerContext;\n+import software.amazon.awssdk.eventstreamrpc.model.EventStreamJsonMessage;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import javax.inject.Inject;\n+\n+/**\n+ * Class to handle business logic for authorization.\n+ */\n+public class AuthorizationIPCAgent {\n+\n+    // This API can be used only by stream manager now\n+    private static final List<String> AUTHORIZED_COMPONENTS = Collections.singletonList(\"aws.greengrass.StreamManager\");", "originalCommit": "1e982e3df8779d693e304a887af182bec9bbd7d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2NDIwMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522#discussion_r509464203", "bodyText": "thanks, added the public const it here", "author": "youtuyy", "createdAt": "2020-10-21T17:16:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzNTQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzNzcxNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522#discussion_r509437714", "bodyText": "just don't put any lifecycle", "author": "MikeDombo", "createdAt": "2020-10-21T16:40:08Z", "path": "src/integrationtests/resources/com/aws/greengrass/integrationtests/ipc/ipc.yaml", "diffHunk": "@@ -3,12 +3,21 @@ services:\n   main:\n     dependencies:\n       - mqtt\n+      - aws.greengrass.StreamManager\n       - ServiceName\n       - ServiceToBeRestarted\n       - ServiceToBeStopped\n   mqtt:\n     lifecycle:\n     version: 1.0.0\n+  aws.greengrass.StreamManager:\n+    lifecycle:\n+      run:\n+        windows:\n+          powershell -command sleep 100\n+        posix:\n+          sleep 100", "originalCommit": "1e982e3df8779d693e304a887af182bec9bbd7d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3NTA1Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522#discussion_r510375057", "bodyText": "put lifecycle: {}", "author": "MikeDombo", "createdAt": "2020-10-22T18:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzNzcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNTc4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522#discussion_r510405786", "bodyText": "thank you. updated", "author": "youtuyy", "createdAt": "2020-10-22T19:30:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzNzcxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzNzg2MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522#discussion_r509437861", "bodyText": "use a public const", "author": "MikeDombo", "createdAt": "2020-10-21T16:40:19Z", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCAuthorizationTest.java", "diffHunk": "@@ -42,14 +53,24 @@\n     private static Kernel kernel;\n     private IPCClient client;\n     private AuthorizationClient authorizationClient;\n+    private static EventStreamRPCConnection clientConnection;\n+    private static SocketOptions socketOptions;\n+    private static final String STREAM_MANAGER_SERVICE_NAME = \"aws.greengrass.StreamManager\";", "originalCommit": "1e982e3df8779d693e304a887af182bec9bbd7d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzODE4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/522#discussion_r509438180", "bodyText": "use const", "author": "MikeDombo", "createdAt": "2020-10-21T16:40:44Z", "path": "src/test/java/com/aws/greengrass/authorization/AuthorizationIPCAgentTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.authorization;\n+\n+import com.aws.greengrass.ipc.AuthenticationHandler;\n+import com.aws.greengrass.ipc.exceptions.UnauthenticatedException;\n+import com.aws.greengrass.testcommons.testutilities.GGExtension;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import software.amazon.awssdk.aws.greengrass.model.InvalidTokenError;\n+import software.amazon.awssdk.aws.greengrass.model.UnauthorizedError;\n+import software.amazon.awssdk.aws.greengrass.model.ValidateAuthorizationTokenRequest;\n+import software.amazon.awssdk.eventstreamrpc.AuthenticationData;\n+import software.amazon.awssdk.eventstreamrpc.OperationContinuationHandlerContext;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith({MockitoExtension.class, GGExtension.class})\n+public class AuthorizationIPCAgentTest {\n+    private static final String TEST_TOKEN = \"token\";\n+    private static final String STREAM_MANAGER_SERVICE_NAME = \"aws.greengrass.StreamManager\";", "originalCommit": "1e982e3df8779d693e304a887af182bec9bbd7d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7765cff010128984d0bb1d238a57221a98c65e70", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7765cff010128984d0bb1d238a57221a98c65e70", "message": "Auth IPC integration", "committedDate": "2020-10-22T05:51:08Z", "type": "forcePushed"}, {"oid": "a198afd64c1549693862c07d6af3225a73f5f165", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a198afd64c1549693862c07d6af3225a73f5f165", "message": "Auth IPC integration", "committedDate": "2020-10-22T05:53:08Z", "type": "forcePushed"}, {"oid": "f2d743d7b17f183a4f4cc08913901d7ec2bf7f0a", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f2d743d7b17f183a4f4cc08913901d7ec2bf7f0a", "message": "Auth IPC integration", "committedDate": "2020-10-22T18:44:18Z", "type": "commit"}, {"oid": "e08c20476c6dd2ed256f1ee67f7538202b3f0400", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e08c20476c6dd2ed256f1ee67f7538202b3f0400", "message": "fix recipe", "committedDate": "2020-10-22T18:47:04Z", "type": "commit"}, {"oid": "e08c20476c6dd2ed256f1ee67f7538202b3f0400", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e08c20476c6dd2ed256f1ee67f7538202b3f0400", "message": "fix recipe", "committedDate": "2020-10-22T18:47:04Z", "type": "forcePushed"}, {"oid": "cca432a45aee92086fe9ca7cdd6c77440e3ea6de", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cca432a45aee92086fe9ca7cdd6c77440e3ea6de", "message": "fix test", "committedDate": "2020-10-22T19:09:38Z", "type": "commit"}]}