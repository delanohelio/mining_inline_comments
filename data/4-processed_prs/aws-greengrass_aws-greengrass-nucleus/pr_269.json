{"pr_number": 269, "pr_title": "Add version to builtin services", "pr_createdAt": "2020-06-03T20:50:12Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/269", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMDgyOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/269#discussion_r435420828", "bodyText": "Will the auto start services all use the kernel version? or they will have individual versions?", "author": "ShirleyZheng92", "createdAt": "2020-06-04T17:18:30Z", "path": "src/main/java/com/aws/iot/evergreen/dependency/ImplementsService.java", "diffHunk": "@@ -20,4 +20,9 @@\n      * True if the service should start immediately when Kernel starts.\n      */\n     boolean autostart() default false;\n+\n+    /**\n+     * Version of the service. By default it is 0.0.0. Must be in the form of a.b.c.\n+     */\n+    @Nonnull String version() default \"0.0.0\";", "originalCommit": "c046246f513eb9aac4087e2a04ede4612ce62763", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzNTQ4MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/269#discussion_r435435481", "bodyText": "Maybe but not necessarily; they can still be separately versioned if we think that makes sense, since we won't always make changes to all the components.", "author": "MikeDombo", "createdAt": "2020-06-04T17:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMDgyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMTQ0OQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/269#discussion_r435421449", "bodyText": "Will this cause unintentional removal of evergreen services like IPCService?", "author": "ShirleyZheng92", "createdAt": "2020-06-04T17:19:32Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -297,7 +299,6 @@ private boolean isAutoRollbackRequested(FailureHandlingPolicy failureHandlingPol\n          */\n         public AggregateServicesChangeManager(Kernel kernel, Map<String, Object> newServiceConfig) {\n             Set<String> runningUserServices = kernel.orderedDependencies().stream()\n-                    .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n                     .map(EvergreenService::getName).collect(Collectors.toSet());", "originalCommit": "c046246f513eb9aac4087e2a04ede4612ce62763", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzNTkzNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/269#discussion_r435435935", "bodyText": "Yes, it would. But I fixed it in the remove step so that it doesn't remove autostart services.", "author": "MikeDombo", "createdAt": "2020-06-04T17:43:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMTQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMjYzNA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/269#discussion_r435422634", "bodyText": "I'm wondering if we want to expose the 'autostart' concept, maybe it's just easier to start all 'autostart' services before kernel start main, in this case we don't need to change 'main' topics .", "author": "ShirleyZheng92", "createdAt": "2020-06-04T17:21:33Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -361,16 +362,26 @@ public void reinstallBrokenServices() throws ServiceLoadException {\n          */\n         public void removeObsoleteServices() throws InterruptedException, ExecutionException {\n             Set<Future<Void>> serviceClosedFutures = new HashSet<>();\n-            servicesToRemove.forEach(serviceName -> {\n+            servicesToRemove = servicesToRemove.stream().filter(serviceName -> {\n                 try {\n                     EvergreenService eg = kernel.locate(serviceName);\n+\n+                    // If the service is an autostart service, then do not close it and do not\n+                    // remove it from the config\n+                    ImplementsService serviceAnnotation = eg.getClass().getAnnotation(ImplementsService.class);\n+                    if (serviceAnnotation != null && serviceAnnotation.autostart()) {\n+                        return false;\n+                    }", "originalCommit": "c046246f513eb9aac4087e2a04ede4612ce62763", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzNzI3Mw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/269#discussion_r435437273", "bodyText": "Not sure I follow you. Are you suggesting that they should not be modeled as dependencies of main? Because this is the reason why we need to do this stuff. I would not want to do that so quickly because we have spent a lot of effort to get the whole dependency ordering and reactions correct.", "author": "MikeDombo", "createdAt": "2020-06-04T17:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMjYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU0OTg5OA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/269#discussion_r435549898", "bodyText": "yes I suggested not model them as dependency of main, since they need to be started before any customer services. eg: IPCService need to start before a customer's service, even it's not defined in dependency. Currently we are already halfway doing that by calling requestStart on all autoStart services first.", "author": "ShirleyZheng92", "createdAt": "2020-06-04T21:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMjYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU1MTY2MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/269#discussion_r435551660", "bodyText": "I definitely don't want to change that right now for this PR, but we can certainly try/think about that next.", "author": "MikeDombo", "createdAt": "2020-06-04T21:11:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMjYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU1MTkzNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/269#discussion_r435551935", "bodyText": "Also for people who doesn't have context, it's confusing to them that we treat auto start service separately in merge config. Currently we have two ways to have a service 'auto start', one is defining as a dependency of main, another is to mark it as 'autostart' . I feel it might be cleaner to rename to 'system components' and start them as part of kernel  initialization", "author": "ShirleyZheng92", "createdAt": "2020-06-04T21:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMjYzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2NjI0Nw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/269#discussion_r435466247", "bodyText": "nit: return false if service does not exist.", "author": "hui-yang", "createdAt": "2020-06-04T18:31:45Z", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -361,16 +362,26 @@ public void reinstallBrokenServices() throws ServiceLoadException {\n          */\n         public void removeObsoleteServices() throws InterruptedException, ExecutionException {\n             Set<Future<Void>> serviceClosedFutures = new HashSet<>();\n-            servicesToRemove.forEach(serviceName -> {\n+            servicesToRemove = servicesToRemove.stream().filter(serviceName -> {\n                 try {\n                     EvergreenService eg = kernel.locate(serviceName);\n+\n+                    // If the service is an autostart service, then do not close it and do not\n+                    // remove it from the config\n+                    ImplementsService serviceAnnotation = eg.getClass().getAnnotation(ImplementsService.class);\n+                    if (serviceAnnotation != null && serviceAnnotation.autostart()) {\n+                        return false;\n+                    }\n+\n                     serviceClosedFutures.add(eg.close());\n                 } catch (ServiceLoadException e) {\n                     logger.atError().setCause(e).addKeyValue(\"serviceName\", serviceName)\n                             .log(\"Could not locate EvergreenService to close service\");\n                     // No need to handle the error when trying to stop a non-existing service.", "originalCommit": "c046246f513eb9aac4087e2a04ede4612ce62763", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3NTU4MA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/269#discussion_r435475580", "bodyText": "Why do we check evergreenService.getServiceConfig().find(\"autostart\") here but not in removeObsoleteServices?", "author": "hui-yang", "createdAt": "2020-06-04T18:44:14Z", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -186,11 +186,13 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n      * Compute the config for main service\n      */\n     private Map<Object, Object> getMainConfig(List<String> rootPackages) {\n-\n         Map<Object, Object> mainServiceConfig = new HashMap<>();\n         ArrayList<String> mainDependencies = new ArrayList<>(rootPackages);\n         kernel.getMain().getDependencies().forEach((evergreenService, dependencyType) -> {\n-            if (!(evergreenService instanceof GenericExternalService)) {\n+            // Add all autostart dependencies\n+            ImplementsService serviceAnnotation = evergreenService.getClass().getAnnotation(ImplementsService.class);\n+            if (serviceAnnotation != null && serviceAnnotation.autostart()\n+                    || evergreenService.getServiceConfig().find(\"autostart\") != null) {", "originalCommit": "c046246f513eb9aac4087e2a04ede4612ce62763", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3NzIyMA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/269#discussion_r435477220", "bodyText": "This was a hack to make the unit tests work because it isn't possible to mock an annotation, so in this case I read from the config which is mockable", "author": "MikeDombo", "createdAt": "2020-06-04T18:46:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3NTU4MA=="}], "type": "inlineReview"}, {"oid": "e0c5c61c52ec44aae61e73ac0842700ed0e35679", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e0c5c61c52ec44aae61e73ac0842700ed0e35679", "message": "Add version to builtin services", "committedDate": "2020-06-04T18:46:56Z", "type": "commit"}, {"oid": "1b0295de1c3fc4c32ef0447cf6ef5a66d3086fe0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1b0295de1c3fc4c32ef0447cf6ef5a66d3086fe0", "message": "Address PR comments", "committedDate": "2020-06-04T18:58:42Z", "type": "commit"}, {"oid": "1b0295de1c3fc4c32ef0447cf6ef5a66d3086fe0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1b0295de1c3fc4c32ef0447cf6ef5a66d3086fe0", "message": "Address PR comments", "committedDate": "2020-06-04T18:58:42Z", "type": "forcePushed"}]}