{"pr_number": 186, "pr_title": "Add tests for KernelCommandLine", "pr_createdAt": "2020-04-15T23:12:16Z", "pr_url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186", "timeline": [{"oid": "b84d7070f06d98b44164c66698779f7edaa2404c", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b84d7070f06d98b44164c66698779f7edaa2404c", "message": "Add tests for KernelCommandLine", "committedDate": "2020-04-16T17:04:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyMjA5MQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409722091", "bodyText": "Thanks for converting the public fields to getters... I wanted to change these for a while...", "author": "leaf94", "createdAt": "2020-04-16T17:19:43Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -42,14 +45,26 @@\n  */\n public class Kernel {\n     private static final Logger logger = LogManager.getLogger(Kernel.class);\n-    public final Context context;\n-    public final Configuration config;\n+    @Getter\n+    private final Context context;\n+    @Getter\n+    private final Configuration config;", "originalCommit": "b84d7070f06d98b44164c66698779f7edaa2404c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyOTIyMg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409729222", "bodyText": "Separate question - what does \"i\" stand for as \"config\"?", "author": "leaf94", "createdAt": "2020-04-16T17:30:52Z", "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelCommandLineTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.util.Utils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.io.FileMatchers.anExistingFile;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class KernelCommandLineTest {\n+    public static final String TMP_NEW_ROOT = \"/tmp/new_root\";\n+    @TempDir\n+    protected Path tempRootDir;\n+\n+    @BeforeEach\n+    void setRootDir() {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+    }\n+\n+    @Test\n+    void GIVEN_missing_parameter_to_argument_WHEN_parseArgs_THEN_throw_RuntimeException() {\n+        KernelCommandLine kcl = new KernelCommandLine(mock(Kernel.class));\n+        RuntimeException ex = assertThrows(RuntimeException.class, () -> kcl.parseArgs(\"-i\"));\n+        assertThat(ex.getMessage(), is(\"-i or -config requires an argument\"));", "originalCommit": "b84d7070f06d98b44164c66698779f7edaa2404c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0MDQ5Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409740496", "bodyText": "No idea, but I don't want to change it just now as it is used everywhere.", "author": "MikeDombo", "createdAt": "2020-04-16T17:49:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyOTIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwNzc4Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409807786", "bodyText": "Didn't want to change either. Just curious.", "author": "leaf94", "createdAt": "2020-04-16T19:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyOTIyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNTMzOA==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409735338", "bodyText": "[Optional] This confused me a little. Why does installCliTool installed the config.yaml - maybe switching to actually install evergreen-launch would be better.\nAlso maybe now we don't even need the installCliTool to take the resource path as param... Constant should be fine.", "author": "leaf94", "createdAt": "2020-04-16T17:41:05Z", "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelCommandLineTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.util.Utils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.io.FileMatchers.anExistingFile;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class KernelCommandLineTest {\n+    public static final String TMP_NEW_ROOT = \"/tmp/new_root\";\n+    @TempDir\n+    protected Path tempRootDir;\n+\n+    @BeforeEach\n+    void setRootDir() {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+    }\n+\n+    @Test\n+    void GIVEN_missing_parameter_to_argument_WHEN_parseArgs_THEN_throw_RuntimeException() {\n+        KernelCommandLine kcl = new KernelCommandLine(mock(Kernel.class));\n+        RuntimeException ex = assertThrows(RuntimeException.class, () -> kcl.parseArgs(\"-i\"));\n+        assertThat(ex.getMessage(), is(\"-i or -config requires an argument\"));\n+    }\n+\n+    @Test\n+    void GIVEN_invalid_command_line_argument_WHEN_parseArgs_THEN_throw_RuntimeException() {\n+        KernelCommandLine kernel = new KernelCommandLine(mock(Kernel.class));\n+        RuntimeException thrown = assertThrows(RuntimeException.class,\n+                () -> kernel.parseArgs(\"-xyznonsense\", \"nonsense\"));\n+        assertTrue(thrown.getMessage().contains(\"Undefined command line argument\"));\n+    }\n+\n+    @Test\n+    void GIVEN_create_path_fail_WHEN_parseArgs_THEN_throw_RuntimeException() throws Exception {\n+        // Make the root path not writeable so the create path method will fail\n+        Files.setPosixFilePermissions(tempRootDir, PosixFilePermissions.fromString(\"r-x------\"));\n+\n+        Kernel kernel = new Kernel();\n+        RuntimeException thrown = assertThrows(RuntimeException.class, kernel::parseArgs);\n+        assertTrue(thrown.getMessage().contains(\"Cannot create all required directories\"));\n+    }\n+\n+    @Test\n+    void GIVEN_unable_to_read_config_WHEN_parseArgs_THEN_throw_RuntimeException() throws IOException {\n+        Kernel mockKernel = mock(Kernel.class);\n+        Configuration mockConfig = mock(Configuration.class);\n+        when(mockKernel.getConfig()).thenReturn(mockConfig);\n+        when(mockConfig.read(anyString())).thenThrow(IOException.class);\n+\n+        KernelCommandLine kcl = new KernelCommandLine(mockKernel);\n+        RuntimeException ex = assertThrows(RuntimeException.class, () -> kcl.parseArgs(\"-i\", \"test.yaml\"));\n+        assertThat(ex.getMessage(), is(\"Can't read the config file test.yaml\"));\n+    }\n+\n+    @Test\n+    void GIVEN_root_argument_THEN_default_root_is_overridden() {\n+        Kernel kernel = new Kernel();\n+\n+        Path newDir = tempRootDir.resolve(\"new/under/dir\");\n+        kernel.parseArgs(\"-r\", newDir.toString());\n+        assertEquals(newDir.toString(), kernel.getConfig().find(\"system\", \"rootpath\").getOnce());\n+    }\n+\n+    @Test\n+    void GIVEN_kernel_WHEN_deTilde_THEN_proper_path_is_returned() {\n+        Kernel mockKernel = mock(Kernel.class);\n+        when(mockKernel.getClitoolPath()).thenReturn(tempRootDir.resolve(\"bin\"));\n+        when(mockKernel.getConfigPath()).thenReturn(tempRootDir.resolve(\"config\"));\n+        when(mockKernel.getPackageStorePath()).thenReturn(tempRootDir.resolve(\"packages\"));\n+        when(mockKernel.getRootPath()).thenReturn(tempRootDir.resolve(\"root\"));\n+\n+        KernelCommandLine kcl = new KernelCommandLine(mockKernel);\n+\n+        assertThat(kcl.deTilde(\"~/test\"), containsString(System.getProperty(\"user.name\")+ \"/test\"));\n+        assertThat(kcl.deTilde(\"~bin/test\"), is(tempRootDir.toString()+ \"/bin/test\"));\n+        assertThat(kcl.deTilde(\"~config/test\"), is(tempRootDir.toString()+ \"/config/test\"));\n+        assertThat(kcl.deTilde(\"~packages/test\"), is(tempRootDir.toString()+ \"/packages/test\"));\n+        assertThat(kcl.deTilde(\"~root/test\"), is(tempRootDir.toString()+ \"/root/test\"));\n+    }\n+\n+    @Test\n+    void GIVEN_resource_to_install_WHEN_installCliTool_THEN_resource_is_copied_to_bin() throws IOException {\n+        Kernel mockKernel = mock(Kernel.class);\n+        when(mockKernel.getClitoolPath()).thenReturn(tempRootDir.resolve(\"bin\"));\n+\n+        KernelCommandLine kcl = new KernelCommandLine(mockKernel);\n+        Utils.createPaths(tempRootDir.resolve(\"bin\"));\n+        File f = tempRootDir.resolve(\"bin/config.yaml\").toFile();\n+        assertThat(f, not(anExistingFile()));\n+\n+        kcl.installCliTool(getClass().getResource(\"config.yaml\"));", "originalCommit": "b84d7070f06d98b44164c66698779f7edaa2404c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0MjA2Ng==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409742066", "bodyText": "The point isn't what it installs, just that it is able to perform an \"install\" by copying.\nI removed evergreen-launch, so that's not an option.\nConstant for what? The resource returns a URL, which is what installCliTool uses.", "author": "MikeDombo", "createdAt": "2020-04-16T17:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNTMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwODYxOQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409808619", "bodyText": "I was confused just because the name is installCliTool, instead of installFromPath, and config.yaml is not a cli tool.\nI mean the constant for resource URL if we don't need to installCLITool from multiple places. But I'm fine leaving it for now.", "author": "leaf94", "createdAt": "2020-04-16T19:49:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNTMzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNTYyNQ==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409735625", "bodyText": "Didn't know this. Really like this way of asserting files!!!", "author": "leaf94", "createdAt": "2020-04-16T17:41:31Z", "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelCommandLineTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.util.Utils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.io.FileMatchers.anExistingFile;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class KernelCommandLineTest {\n+    public static final String TMP_NEW_ROOT = \"/tmp/new_root\";\n+    @TempDir\n+    protected Path tempRootDir;\n+\n+    @BeforeEach\n+    void setRootDir() {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+    }\n+\n+    @Test\n+    void GIVEN_missing_parameter_to_argument_WHEN_parseArgs_THEN_throw_RuntimeException() {\n+        KernelCommandLine kcl = new KernelCommandLine(mock(Kernel.class));\n+        RuntimeException ex = assertThrows(RuntimeException.class, () -> kcl.parseArgs(\"-i\"));\n+        assertThat(ex.getMessage(), is(\"-i or -config requires an argument\"));\n+    }\n+\n+    @Test\n+    void GIVEN_invalid_command_line_argument_WHEN_parseArgs_THEN_throw_RuntimeException() {\n+        KernelCommandLine kernel = new KernelCommandLine(mock(Kernel.class));\n+        RuntimeException thrown = assertThrows(RuntimeException.class,\n+                () -> kernel.parseArgs(\"-xyznonsense\", \"nonsense\"));\n+        assertTrue(thrown.getMessage().contains(\"Undefined command line argument\"));\n+    }\n+\n+    @Test\n+    void GIVEN_create_path_fail_WHEN_parseArgs_THEN_throw_RuntimeException() throws Exception {\n+        // Make the root path not writeable so the create path method will fail\n+        Files.setPosixFilePermissions(tempRootDir, PosixFilePermissions.fromString(\"r-x------\"));\n+\n+        Kernel kernel = new Kernel();\n+        RuntimeException thrown = assertThrows(RuntimeException.class, kernel::parseArgs);\n+        assertTrue(thrown.getMessage().contains(\"Cannot create all required directories\"));\n+    }\n+\n+    @Test\n+    void GIVEN_unable_to_read_config_WHEN_parseArgs_THEN_throw_RuntimeException() throws IOException {\n+        Kernel mockKernel = mock(Kernel.class);\n+        Configuration mockConfig = mock(Configuration.class);\n+        when(mockKernel.getConfig()).thenReturn(mockConfig);\n+        when(mockConfig.read(anyString())).thenThrow(IOException.class);\n+\n+        KernelCommandLine kcl = new KernelCommandLine(mockKernel);\n+        RuntimeException ex = assertThrows(RuntimeException.class, () -> kcl.parseArgs(\"-i\", \"test.yaml\"));\n+        assertThat(ex.getMessage(), is(\"Can't read the config file test.yaml\"));\n+    }\n+\n+    @Test\n+    void GIVEN_root_argument_THEN_default_root_is_overridden() {\n+        Kernel kernel = new Kernel();\n+\n+        Path newDir = tempRootDir.resolve(\"new/under/dir\");\n+        kernel.parseArgs(\"-r\", newDir.toString());\n+        assertEquals(newDir.toString(), kernel.getConfig().find(\"system\", \"rootpath\").getOnce());\n+    }\n+\n+    @Test\n+    void GIVEN_kernel_WHEN_deTilde_THEN_proper_path_is_returned() {\n+        Kernel mockKernel = mock(Kernel.class);\n+        when(mockKernel.getClitoolPath()).thenReturn(tempRootDir.resolve(\"bin\"));\n+        when(mockKernel.getConfigPath()).thenReturn(tempRootDir.resolve(\"config\"));\n+        when(mockKernel.getPackageStorePath()).thenReturn(tempRootDir.resolve(\"packages\"));\n+        when(mockKernel.getRootPath()).thenReturn(tempRootDir.resolve(\"root\"));\n+\n+        KernelCommandLine kcl = new KernelCommandLine(mockKernel);\n+\n+        assertThat(kcl.deTilde(\"~/test\"), containsString(System.getProperty(\"user.name\")+ \"/test\"));\n+        assertThat(kcl.deTilde(\"~bin/test\"), is(tempRootDir.toString()+ \"/bin/test\"));\n+        assertThat(kcl.deTilde(\"~config/test\"), is(tempRootDir.toString()+ \"/config/test\"));\n+        assertThat(kcl.deTilde(\"~packages/test\"), is(tempRootDir.toString()+ \"/packages/test\"));\n+        assertThat(kcl.deTilde(\"~root/test\"), is(tempRootDir.toString()+ \"/root/test\"));\n+    }\n+\n+    @Test\n+    void GIVEN_resource_to_install_WHEN_installCliTool_THEN_resource_is_copied_to_bin() throws IOException {\n+        Kernel mockKernel = mock(Kernel.class);\n+        when(mockKernel.getClitoolPath()).thenReturn(tempRootDir.resolve(\"bin\"));\n+\n+        KernelCommandLine kcl = new KernelCommandLine(mockKernel);\n+        Utils.createPaths(tempRootDir.resolve(\"bin\"));\n+        File f = tempRootDir.resolve(\"bin/config.yaml\").toFile();\n+        assertThat(f, not(anExistingFile()));\n+\n+        kcl.installCliTool(getClass().getResource(\"config.yaml\"));\n+        assertThat(f, anExistingFile());", "originalCommit": "b84d7070f06d98b44164c66698779f7edaa2404c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczODk0Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409738942", "bodyText": "I like this test a lot. Reading through test cases give me a good understanding for what the source code is trying to achieve. Tests themselves are very easy to read.", "author": "leaf94", "createdAt": "2020-04-16T17:47:01Z", "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelCommandLineTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.util.Utils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.io.FileMatchers.anExistingFile;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class KernelCommandLineTest {", "originalCommit": "b84d7070f06d98b44164c66698779f7edaa2404c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0MzMzMw==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409743333", "bodyText": "maybe not use magical number?", "author": "fengwang666", "createdAt": "2020-04-16T17:53:52Z", "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "diffHunk": "@@ -144,19 +152,23 @@ public String deTilde(String s) {\n         if (s.startsWith(\"~/\")) {\n             s = HOME_PATH.resolve(s.substring(2)).toString();\n         }\n-        if (kernel.rootPath != null && s.startsWith(\"~root/\")) {\n-            s = kernel.rootPath.resolve(s.substring(6)).toString();\n+        if (kernel.getRootPath() != null && s.startsWith(\"~root/\")) {\n+            s = kernel.getRootPath().resolve(s.substring(6)).toString();\n+        }\n+        if (kernel.getConfigPath() != null && s.startsWith(\"~config/\")) {\n+            s = kernel.getConfigPath().resolve(s.substring(8)).toString();\n         }\n-        if (kernel.configPath != null && s.startsWith(\"~config/\")) {\n-            s = kernel.configPath.resolve(s.substring(8)).toString();\n+        if (kernel.getClitoolPath() != null && s.startsWith(\"~bin/\")) {\n+            s = kernel.getClitoolPath().resolve(s.substring(5)).toString();", "originalCommit": "b84d7070f06d98b44164c66698779f7edaa2404c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0OTc2Mg==", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409749762", "bodyText": "Done.", "author": "MikeDombo", "createdAt": "2020-04-16T18:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0MzMzMw=="}], "type": "inlineReview"}, {"oid": "f4671b5dca3df2b027d606a42282f9eee38a5314", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f4671b5dca3df2b027d606a42282f9eee38a5314", "message": "Add tests for KernelCommandLine", "committedDate": "2020-04-16T18:04:10Z", "type": "commit"}, {"oid": "f4671b5dca3df2b027d606a42282f9eee38a5314", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f4671b5dca3df2b027d606a42282f9eee38a5314", "message": "Add tests for KernelCommandLine", "committedDate": "2020-04-16T18:04:10Z", "type": "forcePushed"}]}