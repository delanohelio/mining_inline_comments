{"pr_number": 4307, "pr_title": "[VMware] vSphere advanced capabilities and Full OVF properties support", "pr_createdAt": "2020-09-07T18:03:12Z", "pr_url": "https://github.com/apache/cloudstack/pull/4307", "timeline": [{"oid": "bb4ce2118ddac69fda923208431a754ae5168dca", "url": "https://github.com/apache/cloudstack/commit/bb4ce2118ddac69fda923208431a754ae5168dca", "message": "Add new template and vm deploy as is details table and refactor", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "f73830acbbd5760dbea2acb43da357b2e8e6e2ab", "url": "https://github.com/apache/cloudstack/commit/f73830acbbd5760dbea2acb43da357b2e8e6e2ab", "message": "Refactor deploy as is constants", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "44bae9866428539b388578487364f3893f0951c1", "url": "https://github.com/apache/cloudstack/commit/44bae9866428539b388578487364f3893f0951c1", "message": "Fix daos issue", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "818981d8a7ef703125bc56d81c36b92653ba80a8", "url": "https://github.com/apache/cloudstack/commit/818981d8a7ef703125bc56d81c36b92653ba80a8", "message": "Fix typo", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "6ebfdc68545f66539010905b59973a3ed18c7b65", "url": "https://github.com/apache/cloudstack/commit/6ebfdc68545f66539010905b59973a3ed18c7b65", "message": "Dettached datadisk migration failed between NFS storages.\nFixed the issue of worker VM name being null", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "44dc0c607288cee1e2db4194ac106c3399ded064", "url": "https://github.com/apache/cloudstack/commit/44dc0c607288cee1e2db4194ac106c3399ded064", "message": "Fixed rat failure on new class DeployAsIsHelper.java\nAlso removed some unused imports during rebase", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "33ae2afc8979b0d9f6b749c5ab8ceb731050f7b1", "url": "https://github.com/apache/cloudstack/commit/33ae2afc8979b0d9f6b749c5ab8ceb731050f7b1", "message": "Removed few duplicate imports during rebase with master", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "745dd00c9aaaeeb9dc30eeb3959e29c997aea204", "url": "https://github.com/apache/cloudstack/commit/745dd00c9aaaeeb9dc30eeb3959e29c997aea204", "message": "Remove duplicate schema changes", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "9c162c6de9d79cdd6f4aa50f95dfa0298bc57a65", "url": "https://github.com/apache/cloudstack/commit/9c162c6de9d79cdd6f4aa50f95dfa0298bc57a65", "message": "Fix ISO upload on Deploy OVF task", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "61e7625d49e484ba6af855ca7b19c9f0fc5521ac", "url": "https://github.com/apache/cloudstack/commit/61e7625d49e484ba6af855ca7b19c9f0fc5521ac", "message": "Do not set user-configurable details for deploy-as-is VMs", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "a43d0a6085fe9bbcb84fdae92484355910060da0", "url": "https://github.com/apache/cloudstack/commit/a43d0a6085fe9bbcb84fdae92484355910060da0", "message": "Fix VM power sync NPE on system VMs", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "edfbed34adb978e3798e2b84163d2a5b9b5e959e", "url": "https://github.com/apache/cloudstack/commit/edfbed34adb978e3798e2b84163d2a5b9b5e959e", "message": "Use network adapter from OVF on deploy-as-is", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "acf872cdabca544bf13e4d9bd7d0a447d52413f8", "url": "https://github.com/apache/cloudstack/commit/acf872cdabca544bf13e4d9bd7d0a447d52413f8", "message": "Relocate deploy-as-is cloned VM if does not end on the host receiving the start command and restore deployment logs", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "c6c4bfe30ca3026ea1ca7cc32916460d912c0623", "url": "https://github.com/apache/cloudstack/commit/c6c4bfe30ca3026ea1ca7cc32916460d912c0623", "message": "Fix deploy as is with datadisks", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "89aa25d023608cc84aefb9dd229cb101f7e042a0", "url": "https://github.com/apache/cloudstack/commit/89aa25d023608cc84aefb9dd229cb101f7e042a0", "message": "VM deployment from ISO not working on VSAN65, fixed by adding a backup to create disk using old way", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "41354227e27c8b2bf3aaa3f05deaa7e18446620c", "url": "https://github.com/apache/cloudstack/commit/41354227e27c8b2bf3aaa3f05deaa7e18446620c", "message": "Handle guest OS read from deploy-as-is OVF descriptor", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "7a8dd46b326199db649f2abb54090556970cb0c7", "url": "https://github.com/apache/cloudstack/commit/7a8dd46b326199db649f2abb54090556970cb0c7", "message": "Fix deploy as-is disks cleanup", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "bb90ce5bd783687925c0b419582e94ad11957a9a", "url": "https://github.com/apache/cloudstack/commit/bb90ce5bd783687925c0b419582e94ad11957a9a", "message": "Fix for dettached disk migrations from vVols to other datastores", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "81b184877bc7287d32cd85dc2059e06f3df94e97", "url": "https://github.com/apache/cloudstack/commit/81b184877bc7287d32cd85dc2059e06f3df94e97", "message": "Added SesParse support which is an improved version of VMFSsparse virtual disk format", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "32d85b0fa23e36374e3a221f44420f6b3cb78c92", "url": "https://github.com/apache/cloudstack/commit/32d85b0fa23e36374e3a221f44420f6b3cb78c92", "message": "Display storage on logging when not deploy-as-is and guest OS small refactor", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "667cb53772104387576012c783435dc06865a0b6", "url": "https://github.com/apache/cloudstack/commit/667cb53772104387576012c783435dc06865a0b6", "message": "Fix mismatch from OVF nic adapter type and expected adapter type string", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "78aa3df440e6899724be4f805ddc2c65a46d506c", "url": "https://github.com/apache/cloudstack/commit/78aa3df440e6899724be4f805ddc2c65a46d506c", "message": "Fix reboot deploy-as-is VMs", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "b0d3168e0b78085036c05245c638b3a0d7eb7750", "url": "https://github.com/apache/cloudstack/commit/b0d3168e0b78085036c05245c638b3a0d7eb7750", "message": "Fail template registration when guest OS not found", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "6e81efa2c97c37834368600fd62407c3d6677e67", "url": "https://github.com/apache/cloudstack/commit/6e81efa2c97c37834368600fd62407c3d6677e67", "message": "Start addressing review comments", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "9543fd6e6abd976fd1cc2d49b913daf5431fa7b2", "url": "https://github.com/apache/cloudstack/commit/9543fd6e6abd976fd1cc2d49b913daf5431fa7b2", "message": "Fix startcommand on Datastore cluster when the volume datastore in CloudStack mismatches with vCenter datastore. Volume could have migrated with in datastore cluster which caused the mismatch\n\nFix dettach volume when volume is not on CloudStack intended datastore", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "2f0387772368cd4ca06d38658e696aaf90c1cb2e", "url": "https://github.com/apache/cloudstack/commit/2f0387772368cd4ca06d38658e696aaf90c1cb2e", "message": "Search in possible folders for volume while dettaching the volume", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "9b51a706db75eb2fa5f463c44018b0af6f3ebb08", "url": "https://github.com/apache/cloudstack/commit/9b51a706db75eb2fa5f463c44018b0af6f3ebb08", "message": "Set deploy-as-is to default on VMware", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "46d412d998ee3331633242e2d2271995527a75a3", "url": "https://github.com/apache/cloudstack/commit/46d412d998ee3331633242e2d2271995527a75a3", "message": "Fix for system VMs", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "94bebe8792ca061ddda7794f9cb28d029d1e77d2", "url": "https://github.com/apache/cloudstack/commit/94bebe8792ca061ddda7794f9cb28d029d1e77d2", "message": "Revert back deploy as is column on templates but keep it as default for new templates", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "897cc4bdba3d9d8d79a877c0389ff7a41746b8b0", "url": "https://github.com/apache/cloudstack/commit/897cc4bdba3d9d8d79a877c0389ff7a41746b8b0", "message": "Fix nested virt marvin test", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "588b7a1c90b7d7921dfcdc0a346f45ebc854f1d8", "url": "https://github.com/apache/cloudstack/commit/588b7a1c90b7d7921dfcdc0a346f45ebc854f1d8", "message": "Cleanup volume wrapper VM(ROOT-xxx) while deploying VM in case of any failure. since the same name will be used on retries and that will eventually fails saying volume wrapper VM already exists.", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "9b923ba9dc0a63fa53ace11cc89b4c4c37c2c6b0", "url": "https://github.com/apache/cloudstack/commit/9b923ba9dc0a63fa53ace11cc89b4c4c37c2c6b0", "message": "Handle detach volume of datastore cluster if the volume name has changed at vCenter level and reconsile the chaininfo", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "388a9c2c6daf40a581658e091ed6f01a9120a619", "url": "https://github.com/apache/cloudstack/commit/388a9c2c6daf40a581658e091ed6f01a9120a619", "message": "Reconcile chaininfo after attaching volume", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "9dd1d60db978806b84f021e841a09edb8cfbdf80", "url": "https://github.com/apache/cloudstack/commit/9dd1d60db978806b84f021e841a09edb8cfbdf80", "message": "Fix multidisk VM deployment on vVol datastore", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "db46a7ab210010a16f6b8d6f5e46a5e960e086c3", "url": "https://github.com/apache/cloudstack/commit/db46a7ab210010a16f6b8d6f5e46a5e960e086c3", "message": "Fix migrate root volume issue caused by regression from one of the commits", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "d69283a01337caf6b67a9409e9a673c7c17ba5b8", "url": "https://github.com/apache/cloudstack/commit/d69283a01337caf6b67a9409e9a673c7c17ba5b8", "message": "Fix reset/restore VM", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "3063b6cae5664581604849b247b75551bef2272d", "url": "https://github.com/apache/cloudstack/commit/3063b6cae5664581604849b247b75551bef2272d", "message": "Fixed import VM for NFS storage which added as presetup.\nPrevious code assumes the NFS storage is always added by CloudStack, but NFS can also be added as presetup storagepool.", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "dc4f913afaa3def370511bc47cb8eeab2002e20f", "url": "https://github.com/apache/cloudstack/commit/dc4f913afaa3def370511bc47cb8eeab2002e20f", "message": "Fix restrictions on attach and restore VMs", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "cee71c67ea3673f1994f6db0cb3153a9d9b5369c", "url": "https://github.com/apache/cloudstack/commit/cee71c67ea3673f1994f6db0cb3153a9d9b5369c", "message": "Remove deploy as is option from the old UI", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "a54436b790b758800f8afe4d1c29fe278894e48b", "url": "https://github.com/apache/cloudstack/commit/a54436b790b758800f8afe4d1c29fe278894e48b", "message": "service offering response: added vsphere storage policy to response if exists", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "1e4e5cf4c03ece9e02097654d414563c7c91e499", "url": "https://github.com/apache/cloudstack/commit/1e4e5cf4c03ece9e02097654d414563c7c91e499", "message": "Disk offering response: added vsphere storage policy to response if exists", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "46b5322d9bb6631e3136f18f005624419c21a8c0", "url": "https://github.com/apache/cloudstack/commit/46b5322d9bb6631e3136f18f005624419c21a8c0", "message": "Adding vSphere storage policy to disk on start command and attach volume command", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "5fdabc1cb00d40f3277147599e4a894cf68d59f9", "url": "https://github.com/apache/cloudstack/commit/5fdabc1cb00d40f3277147599e4a894cf68d59f9", "message": "Added storage policy details to disk while creating disk and restricted migration of volumes to storage pools which are not storage policy compliance", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "048e8c8744bf82daf852dbdac42f1bb8bd64e58d", "url": "https://github.com/apache/cloudstack/commit/048e8c8744bf82daf852dbdac42f1bb8bd64e58d", "message": "Fixed the issue of VM deletion not cleaning the VM folder on vVols datastore. Fixed it by deleting the VM as complete entity including the extra root disks.", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "88c02efd2720047fee32788de64d1259e29767f0", "url": "https://github.com/apache/cloudstack/commit/88c02efd2720047fee32788de64d1259e29767f0", "message": "Fix deploy-as-is templates GC", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "3600b3c7bc5a03b1abf8ae6dde7c06b6faf2ec04", "url": "https://github.com/apache/cloudstack/commit/3600b3c7bc5a03b1abf8ae6dde7c06b6faf2ec04", "message": "Reconcile root disk controller fix", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "d81f05091837e161972dd687ac5b91387d2b0878", "url": "https://github.com/apache/cloudstack/commit/d81f05091837e161972dd687ac5b91387d2b0878", "message": "Check storage policy of disk offering if it suitable for storage pool while using migratevirtualmachinewithvolume API", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "950292dcb059f9c76ec196ffb5ce035ec5485277", "url": "https://github.com/apache/cloudstack/commit/950292dcb059f9c76ec196ffb5ce035ec5485277", "message": "Ensure deploy as is disks get allocated to the same storage pool", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "ee5b8763a6b7cafee7310304dcaad30bfbd8f453", "url": "https://github.com/apache/cloudstack/commit/ee5b8763a6b7cafee7310304dcaad30bfbd8f453", "message": "Fix remove VM and its volumes for deploy-as-is if have previously failed - restore cpu flags in nested virtualization test", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "38e119a09998a62fb40ae78fc56bec34f8af77bc", "url": "https://github.com/apache/cloudstack/commit/38e119a09998a62fb40ae78fc56bec34f8af77bc", "message": "Throwing error if ostypeid, nicAdapter, rootDiskController is passed for VMWare templates", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "6b715ecb532f22a67337d803408e48df68c0dc23", "url": "https://github.com/apache/cloudstack/commit/6b715ecb532f22a67337d803408e48df68c0dc23", "message": "Throwing error if boot type or boot mode specified while deploying VMs on VMware", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "b8a79aba9222f3b9bce865fb8fd4fca475b1bb63", "url": "https://github.com/apache/cloudstack/commit/b8a79aba9222f3b9bce865fb8fd4fca475b1bb63", "message": "Elaborating error", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "6e6d6d60b7946f5c4217b46aaf22442449936d5c", "url": "https://github.com/apache/cloudstack/commit/6e6d6d60b7946f5c4217b46aaf22442449936d5c", "message": "Fix template registration", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "50ab1b2fbe84aa60d8d7adc12919bebc83b5e003", "url": "https://github.com/apache/cloudstack/commit/50ab1b2fbe84aa60d8d7adc12919bebc83b5e003", "message": "Add missing guest OS entries for VMware", "committedDate": "2020-10-19T09:35:58Z", "type": "commit"}, {"oid": "50ab1b2fbe84aa60d8d7adc12919bebc83b5e003", "url": "https://github.com/apache/cloudstack/commit/50ab1b2fbe84aa60d8d7adc12919bebc83b5e003", "message": "Add missing guest OS entries for VMware", "committedDate": "2020-10-19T09:35:58Z", "type": "forcePushed"}, {"oid": "67794aba232c592e685c56b4089e5f7bd893f43c", "url": "https://github.com/apache/cloudstack/commit/67794aba232c592e685c56b4089e5f7bd893f43c", "message": "Fix reinstall VM bug", "committedDate": "2020-10-20T06:00:21Z", "type": "commit"}, {"oid": "5797cf5e170c9b42e5d265c76126768c28b416dc", "url": "https://github.com/apache/cloudstack/commit/5797cf5e170c9b42e5d265c76126768c28b416dc", "message": "guest-os-GC (#67)", "committedDate": "2020-10-20T13:40:03Z", "type": "commit"}, {"oid": "ce236e94ea71f3f0795fd0a2b8de8ba9000cb435", "url": "https://github.com/apache/cloudstack/commit/ce236e94ea71f3f0795fd0a2b8de8ba9000cb435", "message": "Smoke test for VMWare storage policies.", "committedDate": "2020-10-20T15:37:56Z", "type": "commit"}, {"oid": "f1f490b1514aaebc2c3cd008c4e757e7c41934fc", "url": "https://github.com/apache/cloudstack/commit/f1f490b1514aaebc2c3cd008c4e757e7c41934fc", "message": "Fix restore VM workflow - clone and replace existing VM instead of cloning and moving disks", "committedDate": "2020-10-20T22:47:27Z", "type": "commit"}, {"oid": "17783cb22f0d438a836cf80c01a97e518994783b", "url": "https://github.com/apache/cloudstack/commit/17783cb22f0d438a836cf80c01a97e518994783b", "message": "Merge branch 'ovfprops-and-vsphere-adv-together' of github.com:shapeblue/cloudstack into ovfprops-and-vsphere-adv-together", "committedDate": "2020-10-20T22:47:58Z", "type": "commit"}, {"oid": "68d51cb333eeb303e9fa02a8448e34628812867f", "url": "https://github.com/apache/cloudstack/commit/68d51cb333eeb303e9fa02a8448e34628812867f", "message": "Remove unused code", "committedDate": "2020-10-20T22:57:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyMzk1NQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r509023955", "bodyText": "this will not be cleaned, needs to be something like below\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    cls.cleanup = [cls.network_offering]\n          \n          \n            \n                    cls._cleanup.append(cls.network_offering)", "author": "DaanHoogland", "createdAt": "2020-10-21T06:39:38Z", "path": "test/integration/smoke/test_storage_policy.py", "diffHunk": "@@ -0,0 +1,263 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\"\"\" Test for VMWare storage policies\n+\"\"\"\n+# Import Local Modules\n+from nose.plugins.attrib import attr\n+from marvin.cloudstackTestCase import cloudstackTestCase\n+from marvin.lib.utils import cleanup_resources\n+from marvin.lib.base import (Account,\n+                             VirtualMachine,\n+                             ServiceOffering,\n+                             NetworkOffering,\n+                             Network,\n+                             Volume,\n+                             DiskOffering)\n+from marvin.lib.common import (get_zone,\n+                               get_domain,\n+                               get_test_template)\n+from marvin.codes import PASS\n+from marvin.cloudstackAPI import (importVsphereStoragePolicies)\n+from marvin.cloudstackAPI import (listVsphereStoragePolicies)\n+\n+\n+class TestVMWareStoragePolicies(cloudstackTestCase):\n+\n+    @classmethod\n+    def setUpClass(cls):\n+\n+        cls.testClient = super(TestVMWareStoragePolicies, cls).getClsTestClient()\n+        cls.apiclient = cls.testClient.getApiClient()\n+\n+        cls.testdata = cls.testClient.getParsedTestDataConfig()\n+        # Get Zone, Domain and templates\n+        cls.domain = get_domain(cls.apiclient)\n+        cls.zone = get_zone(cls.apiclient, cls.testClient.getZoneForTests())\n+        cls._cleanup = []\n+        cls.hypervisor = cls.testClient.getHypervisorInfo()\n+        cls.network_offering = NetworkOffering.create(\n+            cls.apiclient,\n+            cls.testdata[\"l2-network_offering\"],\n+        )\n+        cls.network_offering.update(cls.apiclient, state='Enabled')\n+        cls.template = get_test_template(\n+            cls.apiclient,\n+            cls.zone.id,\n+            cls.hypervisor,\n+        )\n+        cls.cleanup = [cls.network_offering]", "originalCommit": "ce236e94ea71f3f0795fd0a2b8de8ba9000cb435", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNDQ5OA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r509024498", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        cleanup_resources(cls.apiclient, cls.cleanup)\n          \n          \n            \n                        cleanup_resources(cls.apiclient, reverved(cls._cleanup))", "author": "DaanHoogland", "createdAt": "2020-10-21T06:40:37Z", "path": "test/integration/smoke/test_storage_policy.py", "diffHunk": "@@ -0,0 +1,263 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\"\"\" Test for VMWare storage policies\n+\"\"\"\n+# Import Local Modules\n+from nose.plugins.attrib import attr\n+from marvin.cloudstackTestCase import cloudstackTestCase\n+from marvin.lib.utils import cleanup_resources\n+from marvin.lib.base import (Account,\n+                             VirtualMachine,\n+                             ServiceOffering,\n+                             NetworkOffering,\n+                             Network,\n+                             Volume,\n+                             DiskOffering)\n+from marvin.lib.common import (get_zone,\n+                               get_domain,\n+                               get_test_template)\n+from marvin.codes import PASS\n+from marvin.cloudstackAPI import (importVsphereStoragePolicies)\n+from marvin.cloudstackAPI import (listVsphereStoragePolicies)\n+\n+\n+class TestVMWareStoragePolicies(cloudstackTestCase):\n+\n+    @classmethod\n+    def setUpClass(cls):\n+\n+        cls.testClient = super(TestVMWareStoragePolicies, cls).getClsTestClient()\n+        cls.apiclient = cls.testClient.getApiClient()\n+\n+        cls.testdata = cls.testClient.getParsedTestDataConfig()\n+        # Get Zone, Domain and templates\n+        cls.domain = get_domain(cls.apiclient)\n+        cls.zone = get_zone(cls.apiclient, cls.testClient.getZoneForTests())\n+        cls._cleanup = []\n+        cls.hypervisor = cls.testClient.getHypervisorInfo()\n+        cls.network_offering = NetworkOffering.create(\n+            cls.apiclient,\n+            cls.testdata[\"l2-network_offering\"],\n+        )\n+        cls.network_offering.update(cls.apiclient, state='Enabled')\n+        cls.template = get_test_template(\n+            cls.apiclient,\n+            cls.zone.id,\n+            cls.hypervisor,\n+        )\n+        cls.cleanup = [cls.network_offering]\n+        return\n+\n+    @classmethod\n+    def tearDownClass(cls):\n+        try:\n+            cleanup_resources(cls.apiclient, cls.cleanup)", "originalCommit": "ce236e94ea71f3f0795fd0a2b8de8ba9000cb435", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNDk4NQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r509024985", "bodyText": "would be a good habbit to use\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    self.cleanup = [self.account]\n          \n          \n            \n                    self.cleanup = []\n          \n          \n            \n                    self.cleanup.append(self.account)", "author": "DaanHoogland", "createdAt": "2020-10-21T06:41:36Z", "path": "test/integration/smoke/test_storage_policy.py", "diffHunk": "@@ -0,0 +1,263 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\"\"\" Test for VMWare storage policies\n+\"\"\"\n+# Import Local Modules\n+from nose.plugins.attrib import attr\n+from marvin.cloudstackTestCase import cloudstackTestCase\n+from marvin.lib.utils import cleanup_resources\n+from marvin.lib.base import (Account,\n+                             VirtualMachine,\n+                             ServiceOffering,\n+                             NetworkOffering,\n+                             Network,\n+                             Volume,\n+                             DiskOffering)\n+from marvin.lib.common import (get_zone,\n+                               get_domain,\n+                               get_test_template)\n+from marvin.codes import PASS\n+from marvin.cloudstackAPI import (importVsphereStoragePolicies)\n+from marvin.cloudstackAPI import (listVsphereStoragePolicies)\n+\n+\n+class TestVMWareStoragePolicies(cloudstackTestCase):\n+\n+    @classmethod\n+    def setUpClass(cls):\n+\n+        cls.testClient = super(TestVMWareStoragePolicies, cls).getClsTestClient()\n+        cls.apiclient = cls.testClient.getApiClient()\n+\n+        cls.testdata = cls.testClient.getParsedTestDataConfig()\n+        # Get Zone, Domain and templates\n+        cls.domain = get_domain(cls.apiclient)\n+        cls.zone = get_zone(cls.apiclient, cls.testClient.getZoneForTests())\n+        cls._cleanup = []\n+        cls.hypervisor = cls.testClient.getHypervisorInfo()\n+        cls.network_offering = NetworkOffering.create(\n+            cls.apiclient,\n+            cls.testdata[\"l2-network_offering\"],\n+        )\n+        cls.network_offering.update(cls.apiclient, state='Enabled')\n+        cls.template = get_test_template(\n+            cls.apiclient,\n+            cls.zone.id,\n+            cls.hypervisor,\n+        )\n+        cls.cleanup = [cls.network_offering]\n+        return\n+\n+    @classmethod\n+    def tearDownClass(cls):\n+        try:\n+            cleanup_resources(cls.apiclient, cls.cleanup)\n+        except Exception as e:\n+            raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n+\n+    def setUp(self):\n+\n+        self.dbclient = self.testClient.getDbConnection()\n+        self.hypervisor = self.testClient.getHypervisorInfo()\n+        self.testdata[\"virtual_machine\"][\"zoneid\"] = self.zone.id\n+        self.testdata[\"virtual_machine\"][\"template\"] = self.template.id\n+        self.account = Account.create(\n+            self.apiclient,\n+            self.testdata[\"account\"],\n+            domainid=self.domain.id\n+        )\n+        self.cleanup = [self.account]", "originalCommit": "ce236e94ea71f3f0795fd0a2b8de8ba9000cb435", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNTQ1Ng==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r509025456", "bodyText": "also a good habit;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        cleanup_resources(self.apiclient, self.cleanup)\n          \n          \n            \n                        cleanup_resources(self.apiclient, reversed(self.cleanup))", "author": "DaanHoogland", "createdAt": "2020-10-21T06:42:33Z", "path": "test/integration/smoke/test_storage_policy.py", "diffHunk": "@@ -0,0 +1,263 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\"\"\" Test for VMWare storage policies\n+\"\"\"\n+# Import Local Modules\n+from nose.plugins.attrib import attr\n+from marvin.cloudstackTestCase import cloudstackTestCase\n+from marvin.lib.utils import cleanup_resources\n+from marvin.lib.base import (Account,\n+                             VirtualMachine,\n+                             ServiceOffering,\n+                             NetworkOffering,\n+                             Network,\n+                             Volume,\n+                             DiskOffering)\n+from marvin.lib.common import (get_zone,\n+                               get_domain,\n+                               get_test_template)\n+from marvin.codes import PASS\n+from marvin.cloudstackAPI import (importVsphereStoragePolicies)\n+from marvin.cloudstackAPI import (listVsphereStoragePolicies)\n+\n+\n+class TestVMWareStoragePolicies(cloudstackTestCase):\n+\n+    @classmethod\n+    def setUpClass(cls):\n+\n+        cls.testClient = super(TestVMWareStoragePolicies, cls).getClsTestClient()\n+        cls.apiclient = cls.testClient.getApiClient()\n+\n+        cls.testdata = cls.testClient.getParsedTestDataConfig()\n+        # Get Zone, Domain and templates\n+        cls.domain = get_domain(cls.apiclient)\n+        cls.zone = get_zone(cls.apiclient, cls.testClient.getZoneForTests())\n+        cls._cleanup = []\n+        cls.hypervisor = cls.testClient.getHypervisorInfo()\n+        cls.network_offering = NetworkOffering.create(\n+            cls.apiclient,\n+            cls.testdata[\"l2-network_offering\"],\n+        )\n+        cls.network_offering.update(cls.apiclient, state='Enabled')\n+        cls.template = get_test_template(\n+            cls.apiclient,\n+            cls.zone.id,\n+            cls.hypervisor,\n+        )\n+        cls.cleanup = [cls.network_offering]\n+        return\n+\n+    @classmethod\n+    def tearDownClass(cls):\n+        try:\n+            cleanup_resources(cls.apiclient, cls.cleanup)\n+        except Exception as e:\n+            raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n+\n+    def setUp(self):\n+\n+        self.dbclient = self.testClient.getDbConnection()\n+        self.hypervisor = self.testClient.getHypervisorInfo()\n+        self.testdata[\"virtual_machine\"][\"zoneid\"] = self.zone.id\n+        self.testdata[\"virtual_machine\"][\"template\"] = self.template.id\n+        self.account = Account.create(\n+            self.apiclient,\n+            self.testdata[\"account\"],\n+            domainid=self.domain.id\n+        )\n+        self.cleanup = [self.account]\n+        return\n+\n+    def tearDown(self):\n+        try:\n+            self.debug(\"Cleaning up the resources\")\n+            cleanup_resources(self.apiclient, self.cleanup)", "originalCommit": "ce236e94ea71f3f0795fd0a2b8de8ba9000cb435", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNTgyNg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r509025826", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    cmd = create\n          \n          \n            \n                    cmd = create", "author": "DaanHoogland", "createdAt": "2020-10-21T06:43:22Z", "path": "test/integration/smoke/test_storage_policy.py", "diffHunk": "@@ -0,0 +1,263 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\"\"\" Test for VMWare storage policies\n+\"\"\"\n+# Import Local Modules\n+from nose.plugins.attrib import attr\n+from marvin.cloudstackTestCase import cloudstackTestCase\n+from marvin.lib.utils import cleanup_resources\n+from marvin.lib.base import (Account,\n+                             VirtualMachine,\n+                             ServiceOffering,\n+                             NetworkOffering,\n+                             Network,\n+                             Volume,\n+                             DiskOffering)\n+from marvin.lib.common import (get_zone,\n+                               get_domain,\n+                               get_test_template)\n+from marvin.codes import PASS\n+from marvin.cloudstackAPI import (importVsphereStoragePolicies)\n+from marvin.cloudstackAPI import (listVsphereStoragePolicies)\n+\n+\n+class TestVMWareStoragePolicies(cloudstackTestCase):\n+\n+    @classmethod\n+    def setUpClass(cls):\n+\n+        cls.testClient = super(TestVMWareStoragePolicies, cls).getClsTestClient()\n+        cls.apiclient = cls.testClient.getApiClient()\n+\n+        cls.testdata = cls.testClient.getParsedTestDataConfig()\n+        # Get Zone, Domain and templates\n+        cls.domain = get_domain(cls.apiclient)\n+        cls.zone = get_zone(cls.apiclient, cls.testClient.getZoneForTests())\n+        cls._cleanup = []\n+        cls.hypervisor = cls.testClient.getHypervisorInfo()\n+        cls.network_offering = NetworkOffering.create(\n+            cls.apiclient,\n+            cls.testdata[\"l2-network_offering\"],\n+        )\n+        cls.network_offering.update(cls.apiclient, state='Enabled')\n+        cls.template = get_test_template(\n+            cls.apiclient,\n+            cls.zone.id,\n+            cls.hypervisor,\n+        )\n+        cls.cleanup = [cls.network_offering]\n+        return\n+\n+    @classmethod\n+    def tearDownClass(cls):\n+        try:\n+            cleanup_resources(cls.apiclient, cls.cleanup)\n+        except Exception as e:\n+            raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n+\n+    def setUp(self):\n+\n+        self.dbclient = self.testClient.getDbConnection()\n+        self.hypervisor = self.testClient.getHypervisorInfo()\n+        self.testdata[\"virtual_machine\"][\"zoneid\"] = self.zone.id\n+        self.testdata[\"virtual_machine\"][\"template\"] = self.template.id\n+        self.account = Account.create(\n+            self.apiclient,\n+            self.testdata[\"account\"],\n+            domainid=self.domain.id\n+        )\n+        self.cleanup = [self.account]\n+        return\n+\n+    def tearDown(self):\n+        try:\n+            self.debug(\"Cleaning up the resources\")\n+            cleanup_resources(self.apiclient, self.cleanup)\n+            self.debug(\"Cleanup complete!\")\n+        except Exception as e:\n+            self.debug(\"Warning! Exception in tearDown: %s\" % e)\n+\n+    def import_vmware_storage_policies(self, apiclient):\n+        cmd = importVsphereStoragePolicies.importVsphereStoragePoliciesCmd()\n+        cmd.zoneid = self.zone.id\n+        return apiclient.importVsphereStoragePolicies(cmd)\n+\n+    def list_storage_policies(self, apiclient):\n+        cmd = listVsphereStoragePolicies.listVsphereStoragePoliciesCmd()\n+        cmd.zoneid = self.zone.id\n+        return apiclient.listVsphereStoragePolicies(cmd)\n+\n+    def create_volume(self, apiclient):\n+        cmd = create", "originalCommit": "ce236e94ea71f3f0795fd0a2b8de8ba9000cb435", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNjA2NA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r509026064", "bodyText": "isn't a tag for vmware in order?", "author": "DaanHoogland", "createdAt": "2020-10-21T06:43:58Z", "path": "test/integration/smoke/test_storage_policy.py", "diffHunk": "@@ -0,0 +1,263 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\"\"\" Test for VMWare storage policies\n+\"\"\"\n+# Import Local Modules\n+from nose.plugins.attrib import attr\n+from marvin.cloudstackTestCase import cloudstackTestCase\n+from marvin.lib.utils import cleanup_resources\n+from marvin.lib.base import (Account,\n+                             VirtualMachine,\n+                             ServiceOffering,\n+                             NetworkOffering,\n+                             Network,\n+                             Volume,\n+                             DiskOffering)\n+from marvin.lib.common import (get_zone,\n+                               get_domain,\n+                               get_test_template)\n+from marvin.codes import PASS\n+from marvin.cloudstackAPI import (importVsphereStoragePolicies)\n+from marvin.cloudstackAPI import (listVsphereStoragePolicies)\n+\n+\n+class TestVMWareStoragePolicies(cloudstackTestCase):\n+\n+    @classmethod\n+    def setUpClass(cls):\n+\n+        cls.testClient = super(TestVMWareStoragePolicies, cls).getClsTestClient()\n+        cls.apiclient = cls.testClient.getApiClient()\n+\n+        cls.testdata = cls.testClient.getParsedTestDataConfig()\n+        # Get Zone, Domain and templates\n+        cls.domain = get_domain(cls.apiclient)\n+        cls.zone = get_zone(cls.apiclient, cls.testClient.getZoneForTests())\n+        cls._cleanup = []\n+        cls.hypervisor = cls.testClient.getHypervisorInfo()\n+        cls.network_offering = NetworkOffering.create(\n+            cls.apiclient,\n+            cls.testdata[\"l2-network_offering\"],\n+        )\n+        cls.network_offering.update(cls.apiclient, state='Enabled')\n+        cls.template = get_test_template(\n+            cls.apiclient,\n+            cls.zone.id,\n+            cls.hypervisor,\n+        )\n+        cls.cleanup = [cls.network_offering]\n+        return\n+\n+    @classmethod\n+    def tearDownClass(cls):\n+        try:\n+            cleanup_resources(cls.apiclient, cls.cleanup)\n+        except Exception as e:\n+            raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n+\n+    def setUp(self):\n+\n+        self.dbclient = self.testClient.getDbConnection()\n+        self.hypervisor = self.testClient.getHypervisorInfo()\n+        self.testdata[\"virtual_machine\"][\"zoneid\"] = self.zone.id\n+        self.testdata[\"virtual_machine\"][\"template\"] = self.template.id\n+        self.account = Account.create(\n+            self.apiclient,\n+            self.testdata[\"account\"],\n+            domainid=self.domain.id\n+        )\n+        self.cleanup = [self.account]\n+        return\n+\n+    def tearDown(self):\n+        try:\n+            self.debug(\"Cleaning up the resources\")\n+            cleanup_resources(self.apiclient, self.cleanup)\n+            self.debug(\"Cleanup complete!\")\n+        except Exception as e:\n+            self.debug(\"Warning! Exception in tearDown: %s\" % e)\n+\n+    def import_vmware_storage_policies(self, apiclient):\n+        cmd = importVsphereStoragePolicies.importVsphereStoragePoliciesCmd()\n+        cmd.zoneid = self.zone.id\n+        return apiclient.importVsphereStoragePolicies(cmd)\n+\n+    def list_storage_policies(self, apiclient):\n+        cmd = listVsphereStoragePolicies.listVsphereStoragePoliciesCmd()\n+        cmd.zoneid = self.zone.id\n+        return apiclient.listVsphereStoragePolicies(cmd)\n+\n+    def create_volume(self, apiclient):\n+        cmd = create\n+    @attr(\n+        tags=[", "originalCommit": "ce236e94ea71f3f0795fd0a2b8de8ba9000cb435", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNjk5Mg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r509026992", "bodyText": "sensible comments, but I would like to see this be partitioned into methods of which the names reflect these comments. this method is long and thus rather hard to understand. also it is hard to check if it does what it says on the tin, certainly after a few rounds of maintenance.", "author": "DaanHoogland", "createdAt": "2020-10-21T06:45:59Z", "path": "test/integration/smoke/test_storage_policy.py", "diffHunk": "@@ -0,0 +1,263 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+\"\"\" Test for VMWare storage policies\n+\"\"\"\n+# Import Local Modules\n+from nose.plugins.attrib import attr\n+from marvin.cloudstackTestCase import cloudstackTestCase\n+from marvin.lib.utils import cleanup_resources\n+from marvin.lib.base import (Account,\n+                             VirtualMachine,\n+                             ServiceOffering,\n+                             NetworkOffering,\n+                             Network,\n+                             Volume,\n+                             DiskOffering)\n+from marvin.lib.common import (get_zone,\n+                               get_domain,\n+                               get_test_template)\n+from marvin.codes import PASS\n+from marvin.cloudstackAPI import (importVsphereStoragePolicies)\n+from marvin.cloudstackAPI import (listVsphereStoragePolicies)\n+\n+\n+class TestVMWareStoragePolicies(cloudstackTestCase):\n+\n+    @classmethod\n+    def setUpClass(cls):\n+\n+        cls.testClient = super(TestVMWareStoragePolicies, cls).getClsTestClient()\n+        cls.apiclient = cls.testClient.getApiClient()\n+\n+        cls.testdata = cls.testClient.getParsedTestDataConfig()\n+        # Get Zone, Domain and templates\n+        cls.domain = get_domain(cls.apiclient)\n+        cls.zone = get_zone(cls.apiclient, cls.testClient.getZoneForTests())\n+        cls._cleanup = []\n+        cls.hypervisor = cls.testClient.getHypervisorInfo()\n+        cls.network_offering = NetworkOffering.create(\n+            cls.apiclient,\n+            cls.testdata[\"l2-network_offering\"],\n+        )\n+        cls.network_offering.update(cls.apiclient, state='Enabled')\n+        cls.template = get_test_template(\n+            cls.apiclient,\n+            cls.zone.id,\n+            cls.hypervisor,\n+        )\n+        cls.cleanup = [cls.network_offering]\n+        return\n+\n+    @classmethod\n+    def tearDownClass(cls):\n+        try:\n+            cleanup_resources(cls.apiclient, cls.cleanup)\n+        except Exception as e:\n+            raise Exception(\"Warning: Exception during cleanup : %s\" % e)\n+\n+    def setUp(self):\n+\n+        self.dbclient = self.testClient.getDbConnection()\n+        self.hypervisor = self.testClient.getHypervisorInfo()\n+        self.testdata[\"virtual_machine\"][\"zoneid\"] = self.zone.id\n+        self.testdata[\"virtual_machine\"][\"template\"] = self.template.id\n+        self.account = Account.create(\n+            self.apiclient,\n+            self.testdata[\"account\"],\n+            domainid=self.domain.id\n+        )\n+        self.cleanup = [self.account]\n+        return\n+\n+    def tearDown(self):\n+        try:\n+            self.debug(\"Cleaning up the resources\")\n+            cleanup_resources(self.apiclient, self.cleanup)\n+            self.debug(\"Cleanup complete!\")\n+        except Exception as e:\n+            self.debug(\"Warning! Exception in tearDown: %s\" % e)\n+\n+    def import_vmware_storage_policies(self, apiclient):\n+        cmd = importVsphereStoragePolicies.importVsphereStoragePoliciesCmd()\n+        cmd.zoneid = self.zone.id\n+        return apiclient.importVsphereStoragePolicies(cmd)\n+\n+    def list_storage_policies(self, apiclient):\n+        cmd = listVsphereStoragePolicies.listVsphereStoragePoliciesCmd()\n+        cmd.zoneid = self.zone.id\n+        return apiclient.listVsphereStoragePolicies(cmd)\n+\n+    def create_volume(self, apiclient):\n+        cmd = create\n+    @attr(\n+        tags=[\n+            \"advanced\",\n+            \"eip\",\n+            \"advancedns\",\n+            \"basic\",\n+            \"sg\"],\n+        required_hardware=\"true\")\n+    def test_01_import_storage_policies(self):\n+        \"\"\"Test VMWare storage policies\n+        \"\"\"\n+\n+        # Validate the following:\n+        # 1. Import VMWare storage policies - the command should return non-zero result\n+        # 2. List current VMWare storage policies - the command should return non-zero result\n+        # 3. Create service offering with first of the imported policies\n+        # 4. Create disk offering with first of the imported policies\n+        # 5. Create VM using the already created service offering\n+        # 6. Create volume using the already created disk offering\n+        # 7. Attach this volume to our VM\n+        # 8. Detach the volume from our VM", "originalCommit": "ce236e94ea71f3f0795fd0a2b8de8ba9000cb435", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "01013302133ea99f8576299faabb5240f6ac0525", "url": "https://github.com/apache/cloudstack/commit/01013302133ea99f8576299faabb5240f6ac0525", "message": "class object cleanup and append", "committedDate": "2020-10-21T07:26:30Z", "type": "commit"}, {"oid": "95816499d8be83b2436fbe8a9e41b2c3d0189b78", "url": "https://github.com/apache/cloudstack/commit/95816499d8be83b2436fbe8a9e41b2c3d0189b78", "message": "cleanup the right object list in the right order", "committedDate": "2020-10-21T07:27:43Z", "type": "commit"}, {"oid": "6db6660a0c9bb69a3297a83c1c402ac17a4fc0cb", "url": "https://github.com/apache/cloudstack/commit/6db6660a0c9bb69a3297a83c1c402ac17a4fc0cb", "message": "object creation seperated from filling it", "committedDate": "2020-10-21T07:29:07Z", "type": "commit"}, {"oid": "6cde21048a0fdca87890f248b50d302be755d0c2", "url": "https://github.com/apache/cloudstack/commit/6cde21048a0fdca87890f248b50d302be755d0c2", "message": "make sure dependencies get cleaned up after their depenedants", "committedDate": "2020-10-21T07:30:26Z", "type": "commit"}, {"oid": "ff197b2b56ff8280730e5079f4c7272e5bf78b78", "url": "https://github.com/apache/cloudstack/commit/ff197b2b56ff8280730e5079f4c7272e5bf78b78", "message": "readability/formatting", "committedDate": "2020-10-21T07:31:29Z", "type": "commit"}, {"oid": "8c68843142863735a9e868de8496f9c63ea66db7", "url": "https://github.com/apache/cloudstack/commit/8c68843142863735a9e868de8496f9c63ea66db7", "message": "Fix boot into hardware", "committedDate": "2020-10-21T14:47:15Z", "type": "commit"}, {"oid": "5d24e735f5d2ab699ed679cd1a9a9b317c5bb7ac", "url": "https://github.com/apache/cloudstack/commit/5d24e735f5d2ab699ed679cd1a9a9b317c5bb7ac", "message": "Fix smoke tests passing osTypeId parameter on VMware templates registration", "committedDate": "2020-10-22T04:26:54Z", "type": "commit"}, {"oid": "187813a20904fa363519374cef66ebb7c8ce3c61", "url": "https://github.com/apache/cloudstack/commit/187813a20904fa363519374cef66ebb7c8ce3c61", "message": "Fixes after smoke tests results on VMware", "committedDate": "2020-10-22T20:14:26Z", "type": "commit"}, {"oid": "0c6900e3bd47be005108c5b494de0518b93e978b", "url": "https://github.com/apache/cloudstack/commit/0c6900e3bd47be005108c5b494de0518b93e978b", "message": "Do not fail if osTypeId parameter or rootdiskcontroller/nicadapter details are set on template registration", "committedDate": "2020-10-23T13:39:21Z", "type": "commit"}, {"oid": "0d7c582e22d12e2bcca637967d5de201211248e4", "url": "https://github.com/apache/cloudstack/commit/0d7c582e22d12e2bcca637967d5de201211248e4", "message": "Fix macchinina checksums for VMware", "committedDate": "2020-10-24T15:59:59Z", "type": "commit"}, {"oid": "d119a5d19f3ea416482c53fe0570d2979e15c98d", "url": "https://github.com/apache/cloudstack/commit/d119a5d19f3ea416482c53fe0570d2979e15c98d", "message": "Merge branch 'master' into ovfprops-and-vsphere-adv-together", "committedDate": "2020-10-24T16:02:31Z", "type": "commit"}, {"oid": "a831ad125276208119379673f0ace7fbe3287d3c", "url": "https://github.com/apache/cloudstack/commit/a831ad125276208119379673f0ace7fbe3287d3c", "message": "Fix detach volume on stopped Vms", "committedDate": "2020-10-25T03:33:46Z", "type": "commit"}, {"oid": "c405e5dc31242e64fee2fd70b1df7f3f7209405a", "url": "https://github.com/apache/cloudstack/commit/c405e5dc31242e64fee2fd70b1df7f3f7209405a", "message": "Add new API to check storage policy compatible pools and fix marvin test for storage policies", "committedDate": "2020-10-25T05:19:22Z", "type": "commit"}, {"oid": "85f5512ec3bdde91792faa92e4210035bc71cbc1", "url": "https://github.com/apache/cloudstack/commit/85f5512ec3bdde91792faa92e4210035bc71cbc1", "message": "Fix unit test failure", "committedDate": "2020-10-25T05:53:43Z", "type": "commit"}, {"oid": "795dc01212afb8b3f3334f54af91883f40edaab7", "url": "https://github.com/apache/cloudstack/commit/795dc01212afb8b3f3334f54af91883f40edaab7", "message": "Fix for none type response error handling", "committedDate": "2020-10-25T18:14:04Z", "type": "commit"}, {"oid": "7d7e7f794125dafbfa483766b73e1a82edfad62a", "url": "https://github.com/apache/cloudstack/commit/7d7e7f794125dafbfa483766b73e1a82edfad62a", "message": "Check there is at least a host to verify pool compatibility for a storage policy", "committedDate": "2020-10-26T12:07:23Z", "type": "commit"}, {"oid": "75019442f6b484ec331622ec579de361257d083d", "url": "https://github.com/apache/cloudstack/commit/75019442f6b484ec331622ec579de361257d083d", "message": "Fix storage policy smoke test", "committedDate": "2020-10-26T12:45:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwOTA0Ng==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r529209046", "bodyText": "these changes are reverted in the PR #4493 , as the data disks (which are not to be deleted) are being detached on destroy VM, which is breaking the existing behavior.", "author": "sureshanaparti", "createdAt": "2020-11-24T05:19:11Z", "path": "server/src/main/java/com/cloud/vm/UserVmManagerImpl.java", "diffHunk": "@@ -2899,14 +2899,20 @@ public UserVm destroyVm(DestroyVMCmd cmd) throws ResourceUnavailableException, C\n         }\n         s_logger.debug(\"Found no ongoing snapshots on volume of type ROOT, for the vm with id \" + vmId);\n \n-        List<VolumeVO> volumes = getVolumesFromIds(cmd);\n+        List<VolumeVO> volumesToBeDeleted = getVolumesFromIds(cmd);\n \n-        checkForUnattachedVolumes(vmId, volumes);\n-        validateVolumes(volumes);\n+        checkForUnattachedVolumes(vmId, volumesToBeDeleted);\n+        validateVolumes(volumesToBeDeleted);\n \n         stopVirtualMachine(vmId, VmDestroyForcestop.value());\n \n-        detachVolumesFromVm(volumes);\n+        if (vm.getHypervisorType() == HypervisorType.VMware) {\n+            List<VolumeVO> allVolumes = _volsDao.findByInstance(vm.getId());\n+            allVolumes.removeIf(vol -> vol.getVolumeType() == Volume.Type.ROOT);\n+            detachVolumesFromVm(allVolumes);\n+        } else {\n+            detachVolumesFromVm(volumesToBeDeleted);\n+        }", "originalCommit": "75019442f6b484ec331622ec579de361257d083d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "33346abdc20829b34cd8b71a0f22539124de639f", "url": "https://github.com/apache/cloudstack/commit/33346abdc20829b34cd8b71a0f22539124de639f", "message": "Fixed rat failure on new class DeployAsIsHelper.java\nAlso removed some unused imports during rebase", "committedDate": "2020-09-17T06:24:37Z", "type": "forcePushed"}, {"oid": "2cebfb784a40787abdc2a5509a8a517baffc0526", "url": "https://github.com/apache/cloudstack/commit/2cebfb784a40787abdc2a5509a8a517baffc0526", "message": "Removed few duplicate imports during rebase with master", "committedDate": "2020-09-17T08:19:31Z", "type": "forcePushed"}, {"oid": "e1d73adc137be2ea5853545224ccd6b1455be15b", "url": "https://github.com/apache/cloudstack/commit/e1d73adc137be2ea5853545224ccd6b1455be15b", "message": "Relocate deploy-as-is cloned VM if does not end on the host receiving the start command and restore deployment logs", "committedDate": "2020-09-22T06:48:06Z", "type": "forcePushed"}, {"oid": "5619879db62025324ae1ffa4002ca47a71a880b0", "url": "https://github.com/apache/cloudstack/commit/5619879db62025324ae1ffa4002ca47a71a880b0", "message": "Fix deploy as is with datadisks", "committedDate": "2020-09-24T10:09:42Z", "type": "forcePushed"}, {"oid": "2e5f6f58f80b90fd1edb3485afcfec7bc3530daa", "url": "https://github.com/apache/cloudstack/commit/2e5f6f58f80b90fd1edb3485afcfec7bc3530daa", "message": "Fix deploy as-is disks cleanup", "committedDate": "2020-09-25T06:42:39Z", "type": "forcePushed"}, {"oid": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "url": "https://github.com/apache/cloudstack/commit/0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "message": "Get allocated size for datastoreCluster from its child datastores to show the accumalated value for Datastore cluster", "committedDate": "2020-09-29T10:31:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcwNDEwNg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496704106", "bodyText": "add a since = \"4.15\"", "author": "DaanHoogland", "createdAt": "2020-09-29T13:11:51Z", "path": "api/src/main/java/org/apache/cloudstack/api/command/user/template/ListTemplatesCmd.java", "diffHunk": "@@ -82,10 +86,35 @@\n     @Parameter(name = ApiConstants.PARENT_TEMPLATE_ID, type = CommandType.UUID, entityType = TemplateResponse.class, description = \"list datadisk templates by parent template id\", since = \"4.4\")\n     private Long parentTemplateId;\n \n+    @Parameter(name = ApiConstants.DETAILS,", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxMTk1MQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496711951", "bodyText": "add since = \"4.15\"", "author": "DaanHoogland", "createdAt": "2020-09-29T13:22:57Z", "path": "api/src/main/java/org/apache/cloudstack/api/response/TemplateResponse.java", "diffHunk": "@@ -194,12 +195,22 @@\n     @Param(description = \"KVM Only: true if template is directly downloaded to Primary Storage bypassing Secondary Storage\")\n     private Boolean directDownload;\n \n+    @SerializedName(ApiConstants.DEPLOY_AS_IS)\n+    @Param(description = \"VMware only: true if template is deployed without orchestrating disks and networks but \\\"as-is\\\" defined in the template.\")", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxMjA1MQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496712051", "bodyText": "add since = \"4.15\"", "author": "DaanHoogland", "createdAt": "2020-09-29T13:23:06Z", "path": "api/src/main/java/org/apache/cloudstack/api/response/TemplateResponse.java", "diffHunk": "@@ -194,12 +195,22 @@\n     @Param(description = \"KVM Only: true if template is directly downloaded to Primary Storage bypassing Secondary Storage\")\n     private Boolean directDownload;\n \n+    @SerializedName(ApiConstants.DEPLOY_AS_IS)\n+    @Param(description = \"VMware only: true if template is deployed without orchestrating disks and networks but \\\"as-is\\\" defined in the template.\")\n+    private Boolean deployAsIs;\n+\n+    @SerializedName(ApiConstants.DEPLOY_AS_IS_DETAILS)\n+    @Param(description = \"VMware only: additional key/value details tied with deploy-as-is template\")", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxNjA2OQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496716069", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:28:23Z", "path": "core/src/main/java/com/cloud/agent/api/ValidateVcenterDetailsCommand.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package com.cloud.agent.api;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxNjMzMg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496716332", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:28:44Z", "path": "api/src/main/java/com/cloud/agent/api/to/DeployAsIsInfoTO.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.agent.api.to;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxNjc4OQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496716789", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:29:18Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFEulaSectionTO.java", "diffHunk": "@@ -0,0 +1,49 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to.deployasis;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxNjkwNA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496716904", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:29:28Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFConfigurationTO.java", "diffHunk": "@@ -0,0 +1,61 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to.deployasis;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxNzE1NA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496717154", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:29:44Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFNetworkTO.java", "diffHunk": "@@ -0,0 +1,124 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.agent.api.to.deployasis;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxODQzNw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496718437", "bodyText": "small javadoc ?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OVFConfigurationTO implements TemplateDeployAsIsInformationTO {\n          \n          \n            \n            /**\n          \n          \n            \n             * contains lists of configurations items, parsed from the OVF\n          \n          \n            \n             */\n          \n          \n            \n            public class OVFConfigurationTO implements TemplateDeployAsIsInformationTO {", "author": "DaanHoogland", "createdAt": "2020-09-29T13:31:23Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFConfigurationTO.java", "diffHunk": "@@ -0,0 +1,61 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to.deployasis;\n+\n+import java.util.List;\n+\n+public class OVFConfigurationTO implements TemplateDeployAsIsInformationTO {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxOTExNA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496719114", "bodyText": "\ud83d\udc4d \ud83c\udf89", "author": "DaanHoogland", "createdAt": "2020-09-29T13:32:22Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFEulaSectionTO.java", "diffHunk": "@@ -0,0 +1,49 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to.deployasis;\n+\n+import com.cloud.agent.api.LogLevel;\n+\n+/**", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxOTMwOQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496719309", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:32:38Z", "path": "api/src/main/java/com/cloud/agent/api/to/OVFInformationTO.java", "diffHunk": "@@ -0,0 +1,95 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcxOTQ5NQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496719495", "bodyText": "small javadoc?", "author": "DaanHoogland", "createdAt": "2020-09-29T13:32:54Z", "path": "api/src/main/java/com/cloud/agent/api/to/OVFInformationTO.java", "diffHunk": "@@ -0,0 +1,95 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to;\n+\n+import com.cloud.agent.api.LogLevel;\n+import com.cloud.agent.api.to.deployasis.OVFEulaSectionTO;\n+import com.cloud.agent.api.to.deployasis.OVFNetworkTO;\n+import com.cloud.agent.api.to.deployasis.OVFPropertyTO;\n+import com.cloud.agent.api.to.deployasis.OVFVirtualHardwareSectionTO;\n+import com.cloud.utils.Pair;\n+\n+import java.util.List;\n+\n+public class OVFInformationTO {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMDE1OQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496720159", "bodyText": "javadoc, what on earth is an DeployAsIsInfoTO?", "author": "DaanHoogland", "createdAt": "2020-09-29T13:33:44Z", "path": "api/src/main/java/com/cloud/agent/api/to/DeployAsIsInfoTO.java", "diffHunk": "@@ -0,0 +1,58 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.agent.api.to;\n+\n+import com.cloud.agent.api.LogLevel;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class DeployAsIsInfoTO {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMTAzNw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496721037", "bodyText": "please change to javadoc, adding two or three words? nothing special", "author": "DaanHoogland", "createdAt": "2020-09-29T13:34:53Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareItemTO.java", "diffHunk": "@@ -0,0 +1,365 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.agent.api.to.deployasis;\n+\n+// From: https://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData.xsd", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMTQ5Nw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496721497", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:35:28Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareItemTO.java", "diffHunk": "@@ -0,0 +1,365 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.agent.api.to.deployasis;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMTc2OQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496721769", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:35:49Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/TemplateDeployAsIsInformationTO.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to.deployasis;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjAxMA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496722010", "bodyText": "what is this needed for?", "author": "DaanHoogland", "createdAt": "2020-09-29T13:36:07Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/TemplateDeployAsIsInformationTO.java", "diffHunk": "@@ -0,0 +1,24 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to.deployasis;\n+\n+import java.io.Serializable;\n+\n+public interface TemplateDeployAsIsInformationTO extends Serializable {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjIwNw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496722207", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:36:21Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareSectionTO.java", "diffHunk": "@@ -0,0 +1,50 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to.deployasis;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjU5OA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496722598", "bodyText": "good name ==> no javadoc needed", "author": "DaanHoogland", "createdAt": "2020-09-29T13:36:50Z", "path": "api/src/main/java/com/cloud/agent/api/to/deployasis/OVFVirtualHardwareSectionTO.java", "diffHunk": "@@ -0,0 +1,50 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.agent.api.to.deployasis;\n+\n+import java.util.List;\n+\n+public class OVFVirtualHardwareSectionTO implements TemplateDeployAsIsInformationTO {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMzE5NQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496723195", "bodyText": "though it has contents that might need explanation to the new...", "author": "DaanHoogland", "createdAt": "2020-09-29T13:37:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyMjU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjcyNDUwMA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496724500", "bodyText": "what is it for?", "author": "DaanHoogland", "createdAt": "2020-09-29T13:39:17Z", "path": "core/src/main/java/com/cloud/agent/api/ValidateVcenterDetailsCommand.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package com.cloud.agent.api;\n+\n+public class ValidateVcenterDetailsCommand extends Command {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMTQ5Nw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496731497", "bodyText": "short javadoc with descrition of this command-answer pattern? at least what is returned under what condition? just by the name it might be a boolean or a List<StoragePolicy> that is expected.", "author": "DaanHoogland", "createdAt": "2020-09-29T13:47:55Z", "path": "core/src/main/java/org/apache/cloudstack/storage/command/CheckDataStoreStoragePolicyComplainceCommand.java", "diffHunk": "@@ -0,0 +1,61 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+\n+package org.apache.cloudstack.storage.command;\n+\n+import com.cloud.agent.api.to.StorageFilerTO;\n+\n+public class CheckDataStoreStoragePolicyComplainceCommand extends StorageSubSystemCommand {\n+\n+    String storagePolicyId;\n+    private StorageFilerTO storagePool;\n+\n+    public CheckDataStoreStoragePolicyComplainceCommand(String storagePolicyId, StorageFilerTO storagePool) {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMjMxMA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496732310", "bodyText": "new class should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T13:48:49Z", "path": "core/src/test/java/com/cloud/agent/api/storage/DownloadAnswerTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.agent.api.storage;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjczMzg1NA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496733854", "bodyText": "\ud83d\udc4d", "author": "DaanHoogland", "createdAt": "2020-09-29T13:50:49Z", "path": "engine/api/src/main/java/org/apache/cloudstack/engine/orchestration/service/VolumeOrchestrationService.java", "diffHunk": "@@ -117,8 +120,11 @@ DiskProfile allocateRawVolume(Type type, String name, DiskOffering offering, Lon\n \n     boolean canVmRestartOnAnotherServer(long vmId);\n \n-    DiskProfile allocateTemplatedVolume(Type type, String name, DiskOffering offering, Long rootDisksize, Long minIops, Long maxIops, VirtualMachineTemplate template, VirtualMachine vm,\n-        Account owner);\n+    /**", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0MDMwMw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496740303", "bodyText": "i would like a javadoc about what this string entails", "author": "DaanHoogland", "createdAt": "2020-09-29T13:58:42Z", "path": "engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/TemplateDataFactory.java", "diffHunk": "@@ -27,7 +27,7 @@\n \n     TemplateInfo getReadyTemplateOnImageStore(long templateId, Long zoneId);\n \n-    TemplateInfo getTemplate(DataObject obj, DataStore store);\n+    TemplateInfo getTemplate(DataObject obj, DataStore store, String configuration);", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0MjAwNw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496742007", "bodyText": "here the string is configurationId instead of configuration. would be nice to javadoc the difference", "author": "DaanHoogland", "createdAt": "2020-09-29T14:00:46Z", "path": "engine/api/src/main/java/org/apache/cloudstack/engine/subsystem/api/storage/TemplateService.java", "diffHunk": "@@ -72,4 +75,6 @@ public TemplateInfo getTemplate() {\n     void associateCrosszoneTemplatesToZone(long dcId);\n \n     AsyncCallFuture<TemplateApiResult> createDatadiskTemplateAsync(TemplateInfo parentTemplate, TemplateInfo dataDiskTemplate, String path, String diskId, long fileSize, boolean bootable);\n+\n+    List<DatadiskTO> getTemplateDatadisksOnImageStore(TemplateInfo templateInfo, String configurationId);", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc0NjE5MQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496746191", "bodyText": "this comment could be the method-name of a member being called here.\nlong templateId should be scope protected to avoid confusion in this 114! line method.", "author": "DaanHoogland", "createdAt": "2020-09-29T14:06:10Z", "path": "engine/orchestration/src/main/java/com/cloud/vm/VirtualMachineManagerImpl.java", "diffHunk": "@@ -592,6 +597,13 @@ protected void advanceExpunge(VMInstanceVO vm) throws ResourceUnavailableExcepti\n         //remove the overcommit details from the uservm details\n         userVmDetailsDao.removeDetails(vm.getId());\n \n+        // Remove details if VM deploy as-is", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1MDQwNA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496750404", "bodyText": "fromat request\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final Map<String, Map<Integer, String>> extraDhcpOptions) throws InsufficientCapacityException,\n          \n          \n            \n                public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final Map<String, Map<Integer, String>> extraDhcpOptions)\n          \n          \n            \n                    throws InsufficientCapacityException, ConcurrentOperationException {\n          \n      \n    \n    \n  \n\nbut of course delete the next line (github sugestions are almost smart enough for this.", "author": "DaanHoogland", "createdAt": "2020-09-29T14:11:37Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -747,87 +751,168 @@ public void doInTransactionWithoutResult(final TransactionStatus status) {\n     @Override\n     @DB\n     public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final Map<String, Map<Integer, String>> extraDhcpOptions) throws InsufficientCapacityException,", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1MjE4NA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496752184", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ConcurrentOperationException {\n          \n      \n    \n    \n  \n\nbut only in combination with above", "author": "DaanHoogland", "createdAt": "2020-09-29T14:13:50Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -747,87 +751,168 @@ public void doInTransactionWithoutResult(final TransactionStatus status) {\n     @Override\n     @DB\n     public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final Map<String, Map<Integer, String>> extraDhcpOptions) throws InsufficientCapacityException,\n-    ConcurrentOperationException {\n+            ConcurrentOperationException {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NDgyNA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496754824", "bodyText": "method name?", "author": "DaanHoogland", "createdAt": "2020-09-29T14:16:58Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -747,87 +751,168 @@ public void doInTransactionWithoutResult(final TransactionStatus status) {\n     @Override\n     @DB\n     public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final Map<String, Map<Integer, String>> extraDhcpOptions) throws InsufficientCapacityException,\n-    ConcurrentOperationException {\n+            ConcurrentOperationException {\n \n         Transaction.execute(new TransactionCallbackWithExceptionNoReturn<InsufficientCapacityException>() {\n             @Override\n             public void doInTransactionWithoutResult(final TransactionStatus status) throws InsufficientCapacityException {\n-                int deviceId = 0;\n-                int size = 0;\n-                for (final Network ntwk : networks.keySet()) {\n-                    final List<? extends NicProfile> profiles = networks.get(ntwk);\n-                    if (profiles != null && !profiles.isEmpty()) {\n-                        size = size + profiles.size();\n-                    } else {\n-                        size = size + 1;\n-                    }\n+                if (s_logger.isTraceEnabled()) {\n+                    s_logger.trace(String.format(\"allocating networks for %s(template %s); %d networks\",vm.getInstanceName(), vm.getTemplate().getUuid(), networks.size()));\n                 }\n+                int deviceId = 0;\n+                int size;\n+                size = determineNumberOfNicsRequired();\n \n                 final boolean[] deviceIds = new boolean[size];\n                 Arrays.fill(deviceIds, false);\n \n+                List<Pair<Network, NicProfile>> profilesList = getOrderedNetworkNicProfileMapping(networks);\n                 final List<NicProfile> nics = new ArrayList<NicProfile>(size);\n                 NicProfile defaultNic = null;\n+                Network nextNetwork = null;\n+                for (Pair <Network, NicProfile> networkNicPair : profilesList) {\n+                    nextNetwork = networkNicPair.first();\n+                    Pair<NicProfile, Integer> newDeviceInfo = addRequestedNicToNicListWithDeviceNumberAndRetrieveDefaultDevice(networkNicPair.second(), deviceIds, deviceId, nextNetwork, nics, defaultNic);\n+                    defaultNic = newDeviceInfo.first();\n+                    deviceId = newDeviceInfo.second();\n+                }\n+                createExtraNics(size, nics, nextNetwork);\n+\n+                if (nics.size() == 1) {\n+                    nics.get(0).setDefaultNic(true);\n+                }\n+            }\n+\n+            /**\n+             * private transaction method to check and add devices to the nic list and update the info\n+             */\n+            Pair<NicProfile,Integer> addRequestedNicToNicListWithDeviceNumberAndRetrieveDefaultDevice(NicProfile requested, boolean[] deviceIds, int deviceId, Network nextNetwork, List<NicProfile> nics, NicProfile defaultNic)\n+                    throws InsufficientAddressCapacityException, InsufficientVirtualNetworkCapacityException {\n+                Pair<NicProfile, Integer> rc = new Pair<>(null,null);\n+                Boolean isDefaultNic = false;\n+                if (vm != null && requested != null && requested.isDefaultNic()) {\n+                    isDefaultNic = true;\n+                }\n+\n+                while (deviceIds[deviceId] && deviceId < deviceIds.length) {\n+                    deviceId++;\n+                }\n+\n+                final Pair<NicProfile, Integer> vmNicPair = allocateNic(requested, nextNetwork, isDefaultNic, deviceId, vm);\n+                NicProfile vmNic = null;\n+                if (vmNicPair != null) {\n+                    vmNic = vmNicPair.first();\n+                    if (vmNic == null) {\n+                        return rc;\n+                    }\n+                    deviceId = vmNicPair.second();\n+                }\n+\n+                final int devId = vmNic.getDeviceId();\n+                if (devId >= deviceIds.length) {\n+                    throw new IllegalArgumentException(\"Device id for nic is too large: \" + vmNic);\n+                }\n+                if (deviceIds[devId]) {\n+                    throw new IllegalArgumentException(\"Conflicting device id for two different nics: \" + vmNic);\n+                }\n+\n+                deviceIds[devId] = true;\n \n+                if (vmNic.isDefaultNic()) {\n+                    if (defaultNic != null) {\n+                        throw new IllegalArgumentException(\"You cannot specify two nics as default nics: nic 1 = \" + defaultNic + \"; nic 2 = \" + vmNic);\n+                    }\n+                    defaultNic = vmNic;\n+                }\n+\n+                nics.add(vmNic);\n+                vm.addNic(vmNic);\n+                saveExtraDhcpOptions(nextNetwork.getUuid(), vmNic.getId(), extraDhcpOptions);\n+                rc.first(defaultNic);\n+                rc.second(deviceId);\n+                return rc;\n+            }\n+\n+            /**\n+             * private transaction method to get oredered list of Network and NicProfile pair\n+             * @return ordered list of Network and NicProfile pair\n+             * @param networks the map od networks to nic profiles list\n+             */\n+            private List<Pair<Network, NicProfile>> getOrderedNetworkNicProfileMapping(final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks) {\n+                List<Pair<Network, NicProfile>> profilesList = new ArrayList<>();\n                 for (final Map.Entry<? extends Network, List<? extends NicProfile>> network : networks.entrySet()) {\n-                    final Network config = network.getKey();\n                     List<? extends NicProfile> requestedProfiles = network.getValue();\n                     if (requestedProfiles == null) {\n                         requestedProfiles = new ArrayList<NicProfile>();\n                     }\n                     if (requestedProfiles.isEmpty()) {\n                         requestedProfiles.add(null);\n                     }\n-\n                     for (final NicProfile requested : requestedProfiles) {\n-                        Boolean isDefaultNic = false;\n-                        if (vm != null && requested != null && requested.isDefaultNic()) {\n-                            isDefaultNic = true;\n-                        }\n-\n-                        while (deviceIds[deviceId] && deviceId < deviceIds.length) {\n-                            deviceId++;\n-                        }\n-\n-                        final Pair<NicProfile, Integer> vmNicPair = allocateNic(requested, config, isDefaultNic, deviceId, vm);\n-                        NicProfile vmNic = null;\n-                        if (vmNicPair != null) {\n-                            vmNic = vmNicPair.first();\n-                            if (vmNic == null) {\n-                                continue;\n-                            }\n-                            deviceId = vmNicPair.second();\n-                        }\n-\n-                        final int devId = vmNic.getDeviceId();\n-                        if (devId >= deviceIds.length) {\n-                            throw new IllegalArgumentException(\"Device id for nic is too large: \" + vmNic);\n-                        }\n-                        if (deviceIds[devId]) {\n-                            throw new IllegalArgumentException(\"Conflicting device id for two different nics: \" + vmNic);\n+                        profilesList.add(new Pair<Network, NicProfile>(network.getKey(), requested));\n+                    }\n+                }\n+                profilesList.sort(new Comparator<Pair<Network, NicProfile>>() {\n+                    @Override\n+                    public int compare(Pair<Network, NicProfile> pair1, Pair<Network, NicProfile> pair2) {\n+                        int profile1Order = Integer.MAX_VALUE;\n+                        int profile2Order = Integer.MAX_VALUE;\n+                        if (pair1 != null && pair1.second() != null && pair1.second().getOrderIndex() != null) {\n+                            profile1Order = pair1.second().getOrderIndex();\n                         }\n-\n-                        deviceIds[devId] = true;\n-\n-                        if (vmNic.isDefaultNic()) {\n-                            if (defaultNic != null) {\n-                                throw new IllegalArgumentException(\"You cannot specify two nics as default nics: nic 1 = \" + defaultNic + \"; nic 2 = \" + vmNic);\n-                            }\n-                            defaultNic = vmNic;\n+                        if (pair2 != null && pair2.second() != null && pair2.second().getOrderIndex() != null) {\n+                            profile2Order = pair2.second().getOrderIndex();\n                         }\n+                        return profile1Order - profile2Order;\n+                    }\n+                });\n+                return profilesList;\n+            }\n \n-                        nics.add(vmNic);\n-                        vm.addNic(vmNic);\n-                        saveExtraDhcpOptions(config.getUuid(), vmNic.getId(), extraDhcpOptions);\n+            /**\n+             * private transaction method to run over the objects and determine nic requirements\n+             * @return the total numer of nics required\n+             */\n+            private int determineNumberOfNicsRequired() {\n+                int size = 0;\n+                for (final Network ntwk : networks.keySet()) {\n+                    final List<? extends NicProfile> profiles = networks.get(ntwk);\n+                    if (profiles != null && !profiles.isEmpty()) {\n+                        size = size + profiles.size();\n+                    } else {\n+                        size = size + 1;\n                     }\n                 }\n+\n+                List<OVFNetworkTO> netprereqs = templateDeployAsIsDetailsDao.listNetworkRequirementsByTemplateId(vm.getTemplate().getId());\n+                if (size < netprereqs.size()) {\n+                    size = netprereqs.size();\n+                }\n+                return size;\n+            }\n+\n+            /**\n+             * private transaction method to add nics as required\n+             * @param size the number needed\n+             * @param nics the list of nics present\n+             * @param finalNetwork the network to add the nics to\n+             * @throws InsufficientVirtualNetworkCapacityException great\n+             * @throws InsufficientAddressCapacityException also magnificent, as the name sugests\n+             */\n+            private void createExtraNics(int size, List<NicProfile> nics, Network finalNetwork) throws InsufficientVirtualNetworkCapacityException, InsufficientAddressCapacityException {\n                 if (nics.size() != size) {\n                     s_logger.warn(\"Number of nics \" + nics.size() + \" doesn't match number of requested nics \" + size);\n-                    throw new CloudRuntimeException(\"Number of nics \" + nics.size() + \" doesn't match number of requested networks \" + size);\n-                }\n-\n-                if (nics.size() == 1) {\n-                    nics.get(0).setDefaultNic(true);\n+                    if (nics.size() > size) {\n+                        throw new CloudRuntimeException(\"Number of nics \" + nics.size() + \" doesn't match number of requested networks \" + size);\n+                    } else {\n+                        if (finalNetwork == null) {\n+                            throw new CloudRuntimeException(String.format(\"can not assign network to %d remaining required NICs\", size - nics.size()));\n+                        }\n+                        // create extra", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1Njk4MA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496756980", "bodyText": "\ud83d\udc4d this is the kind of formatting i'd  like to see for all methods (i.e. throws on a new line if the signature is (too) long", "author": "DaanHoogland", "createdAt": "2020-09-29T14:19:34Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -747,87 +751,168 @@ public void doInTransactionWithoutResult(final TransactionStatus status) {\n     @Override\n     @DB\n     public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks, final Map<String, Map<Integer, String>> extraDhcpOptions) throws InsufficientCapacityException,\n-    ConcurrentOperationException {\n+            ConcurrentOperationException {\n \n         Transaction.execute(new TransactionCallbackWithExceptionNoReturn<InsufficientCapacityException>() {\n             @Override\n             public void doInTransactionWithoutResult(final TransactionStatus status) throws InsufficientCapacityException {\n-                int deviceId = 0;\n-                int size = 0;\n-                for (final Network ntwk : networks.keySet()) {\n-                    final List<? extends NicProfile> profiles = networks.get(ntwk);\n-                    if (profiles != null && !profiles.isEmpty()) {\n-                        size = size + profiles.size();\n-                    } else {\n-                        size = size + 1;\n-                    }\n+                if (s_logger.isTraceEnabled()) {\n+                    s_logger.trace(String.format(\"allocating networks for %s(template %s); %d networks\",vm.getInstanceName(), vm.getTemplate().getUuid(), networks.size()));\n                 }\n+                int deviceId = 0;\n+                int size;\n+                size = determineNumberOfNicsRequired();\n \n                 final boolean[] deviceIds = new boolean[size];\n                 Arrays.fill(deviceIds, false);\n \n+                List<Pair<Network, NicProfile>> profilesList = getOrderedNetworkNicProfileMapping(networks);\n                 final List<NicProfile> nics = new ArrayList<NicProfile>(size);\n                 NicProfile defaultNic = null;\n+                Network nextNetwork = null;\n+                for (Pair <Network, NicProfile> networkNicPair : profilesList) {\n+                    nextNetwork = networkNicPair.first();\n+                    Pair<NicProfile, Integer> newDeviceInfo = addRequestedNicToNicListWithDeviceNumberAndRetrieveDefaultDevice(networkNicPair.second(), deviceIds, deviceId, nextNetwork, nics, defaultNic);\n+                    defaultNic = newDeviceInfo.first();\n+                    deviceId = newDeviceInfo.second();\n+                }\n+                createExtraNics(size, nics, nextNetwork);\n+\n+                if (nics.size() == 1) {\n+                    nics.get(0).setDefaultNic(true);\n+                }\n+            }\n+\n+            /**\n+             * private transaction method to check and add devices to the nic list and update the info\n+             */\n+            Pair<NicProfile,Integer> addRequestedNicToNicListWithDeviceNumberAndRetrieveDefaultDevice(NicProfile requested, boolean[] deviceIds, int deviceId, Network nextNetwork, List<NicProfile> nics, NicProfile defaultNic)\n+                    throws InsufficientAddressCapacityException, InsufficientVirtualNetworkCapacityException {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NzczNg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496757736", "bodyText": "with throws?", "author": "DaanHoogland", "createdAt": "2020-09-29T14:20:30Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1085,7 +1170,7 @@ boolean isNetworkImplemented(final NetworkVO network) {\n     }\n \n     Pair<NetworkGuru, NetworkVO> implementNetwork(final long networkId, final DeployDestination dest, final ReservationContext context, final boolean isRouter) throws ConcurrentOperationException,\n-    ResourceUnavailableException, InsufficientCapacityException {\n+            ResourceUnavailableException, InsufficientCapacityException {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1NzkwNQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496757905", "bodyText": "with throws?", "author": "DaanHoogland", "createdAt": "2020-09-29T14:20:42Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1105,7 +1190,7 @@ boolean isNetworkImplemented(final NetworkVO network) {\n     @Override\n     @DB\n     public Pair<NetworkGuru, NetworkVO> implementNetwork(final long networkId, final DeployDestination dest, final ReservationContext context) throws ConcurrentOperationException,\n-    ResourceUnavailableException, InsufficientCapacityException {\n+            ResourceUnavailableException, InsufficientCapacityException {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc1OTY2NQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496759665", "bodyText": "with throws?", "author": "DaanHoogland", "createdAt": "2020-09-29T14:22:52Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -1661,7 +1746,7 @@ public void doInTransactionWithoutResult(final TransactionStatus status) {\n \n     @Override\n     public void prepare(final VirtualMachineProfile vmProfile, final DeployDestination dest, final ReservationContext context) throws InsufficientCapacityException, ConcurrentOperationException,\n-    ResourceUnavailableException {\n+            ResourceUnavailableException {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MTQ4OQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496761489", "bodyText": "throws", "author": "DaanHoogland", "createdAt": "2020-09-29T14:25:08Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -3033,7 +3118,7 @@ public void reallyRun() {\n \n     @Override\n     public boolean startNetwork(final long networkId, final DeployDestination dest, final ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException,\n-    InsufficientCapacityException {\n+            InsufficientCapacityException {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2MjI4Nw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496762287", "bodyText": "and this one (with throws)", "author": "DaanHoogland", "createdAt": "2020-09-29T14:26:00Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java", "diffHunk": "@@ -3056,7 +3141,7 @@ public boolean startNetwork(final long networkId, final DeployDestination dest,\n \n     @Override\n     public boolean restartNetwork(final Long networkId, final Account callerAccount, final User callerUser, final boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException,\n-    InsufficientCapacityException {\n+            InsufficientCapacityException {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwMjEwOQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496802109", "bodyText": "newline:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                }", "author": "DaanHoogland", "createdAt": "2020-09-29T15:15:33Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java", "diffHunk": "@@ -296,6 +315,34 @@ public StoragePool findStoragePool(DiskProfile dskCh, DataCenter dc, Pod pod, Lo\n         return null;\n     }\n \n+    @Override\n+    public StoragePool findChildDataStoreInDataStoreCluster(DataCenter dc, Pod pod, Long clusterId, Long hostId, VirtualMachine vm, Long datastoreClusterId) {\n+        Long podId = null;\n+        if (pod != null) {\n+            podId = pod.getId();\n+        } else if (clusterId != null) {\n+            Cluster cluster = _entityMgr.findById(Cluster.class, clusterId);\n+            if (cluster != null) {\n+                podId = cluster.getPodId();\n+            }\n+        }\n+        List<StoragePoolVO> childDatastores = _storagePoolDao.listChildStoragePoolsInDatastoreCluster(datastoreClusterId);\n+        List<StoragePool> suitablePools = new ArrayList<StoragePool>();\n+\n+        for (StoragePoolVO childDatastore: childDatastores)\n+            suitablePools.add((StoragePool)dataStoreMgr.getDataStore(childDatastore.getId(), DataStoreRole.Primary));\n+\n+        VirtualMachineProfile profile = new VirtualMachineProfileImpl(vm);\n+        for (StoragePoolAllocator allocator : _storagePoolAllocators) {\n+            DataCenterDeployment plan = new DataCenterDeployment(dc.getId(), podId, clusterId, hostId, null, null);\n+            final List<StoragePool> poolList = allocator.reorderPools(suitablePools, profile, plan);\n+\n+            if (poolList != null && !poolList.isEmpty()) {\n+                return (StoragePool)dataStoreMgr.getDataStore(poolList.get(0).getId(), DataStoreRole.Primary);\n+            }\n+        }\n+        return null;\n+    }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwNTMwNw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496805307", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "DaanHoogland", "createdAt": "2020-09-29T15:19:46Z", "path": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/VolumeOrchestrator.java", "diffHunk": "@@ -1704,4 +1801,4 @@ public void doInTransactionWithoutResult(TransactionStatus status) {\n             }\n         });\n     }\n-}\n+}", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwNjMxMA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496806310", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:20:43Z", "path": "engine/schema/src/main/java/com/cloud/dc/VsphereStoragePolicyVO.java", "diffHunk": "@@ -0,0 +1,126 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.dc;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwNzAyMw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496807023", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:21:23Z", "path": "engine/schema/src/main/java/com/cloud/dc/dao/VsphereStoragePolicyDao.java", "diffHunk": "@@ -14,18 +14,17 @@\n // KIND, either express or implied.  See the License for the\n // specific language governing permissions and limitations\n // under the License.\n+package com.cloud.dc.dao;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwNzU2Ng==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496807566", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:21:55Z", "path": "engine/schema/src/main/java/com/cloud/dc/dao/VsphereStoragePolicyDaoImpl.java", "diffHunk": "@@ -0,0 +1,64 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.dc.dao;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwODU4MA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496808580", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:22:57Z", "path": "engine/schema/src/main/java/com/cloud/deployasis/TemplateDeployAsIsDetailVO.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.deployasis;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwOTA1Nw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496809057", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:23:23Z", "path": "engine/schema/src/main/java/com/cloud/deployasis/UserVmDeployAsIsDetailVO.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.deployasis;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwOTM5MA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496809390", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:23:40Z", "path": "engine/schema/src/main/java/com/cloud/deployasis/dao/TemplateDeployAsIsDetailsDao.java", "diffHunk": "@@ -0,0 +1,32 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.deployasis.dao;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwOTYxMA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496809610", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:23:54Z", "path": "engine/schema/src/main/java/com/cloud/deployasis/dao/TemplateDeployAsIsDetailsDaoImpl.java", "diffHunk": "@@ -0,0 +1,83 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.deployasis.dao;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgxMDAzOQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496810039", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:24:17Z", "path": "engine/schema/src/main/java/com/cloud/deployasis/dao/UserVmDeployAsIsDetailsDao.java", "diffHunk": "@@ -0,0 +1,24 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.deployasis.dao;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgxMDMwMQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496810301", "bodyText": "new classes should be in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:24:33Z", "path": "engine/schema/src/main/java/com/cloud/deployasis/dao/UserVmDeployAsIsDetailsDaoImpl.java", "diffHunk": "@@ -0,0 +1,30 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.deployasis.dao;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgxMjcyNA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496812724", "bodyText": "why this difference in name? what do either mean?", "author": "DaanHoogland", "createdAt": "2020-09-29T15:26:48Z", "path": "engine/schema/src/main/java/com/cloud/storage/VMTemplateStoragePoolVO.java", "diffHunk": "@@ -168,17 +171,18 @@ public Status getDownloadState() {\n         return downloadState;\n     }\n \n-    public VMTemplateStoragePoolVO(long poolId, long templateId) {\n+    public VMTemplateStoragePoolVO(long poolId, long templateId, String configuration) {\n         super();\n         this.poolId = poolId;\n         this.templateId = templateId;\n         this.downloadState = Status.NOT_DOWNLOADED;\n         this.state = ObjectInDataStoreStateMachine.State.Allocated;\n         this.markedForGC = false;\n+        this.deploymentOption = configuration;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgxNTgyOQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496815829", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "DaanHoogland", "createdAt": "2020-09-29T15:29:43Z", "path": "engine/schema/src/main/java/com/cloud/storage/dao/VMTemplateDetailsDaoImpl.java", "diffHunk": "@@ -30,4 +30,4 @@\n     public void addDetail(long resourceId, String key, String value, boolean display) {\n         super.addDetail(new VMTemplateDetailVO(resourceId, key, value, display));\n     }\n-}\n+}", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgyMDY4OA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496820688", "bodyText": "why are these part of this PR?", "author": "DaanHoogland", "createdAt": "2020-09-29T15:34:12Z", "path": "engine/schema/src/main/resources/META-INF/db/schema-41400to41500.sql", "diffHunk": "@@ -220,3 +516,22 @@ ALTER VIEW `cloud`.`image_store_view` AS\n         `cloud`.`data_center` ON image_store.data_center_id = data_center.id\n             left join\n         `cloud`.`image_store_details` ON image_store_details.store_id = image_store.id;\n+\n+-- OVF configured OS while registering deploy-as-is templates Linux 3.x Kernel OS\n+INSERT IGNORE INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (305, UUID(), 11, 'OVF Configured OS', now());\n+INSERT IGNORE INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (306, UUID(), 2, 'Linux 3.x Kernel (64 bit)', now());\n+INSERT IGNORE INTO `cloud`.`guest_os` (id, uuid, category_id, display_name, created) VALUES (307, UUID(), 2, 'Linux 3.x Kernel (32 bit)', now());\n+\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid, hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(), 'VMware', '6.0', 'other3xLinux64Guest', 306, now(), 0);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid, hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(), 'VMware', '6.5', 'other3xLinux64Guest', 306, now(), 0);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid, hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(), 'VMware', '6.7', 'other3xLinux64Guest', 306, now(), 0);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid, hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(), 'VMware', '6.7.1', 'other3xLinux64Guest', 306, now(), 0);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid, hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(), 'VMware', '6.7.2', 'other3xLinux64Guest', 306, now(), 0);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid, hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(), 'VMware', '6.7.3', 'other3xLinux64Guest', 306, now(), 0);\n+\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid, hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(), 'VMware', '6.0', 'other3xLinuxGuest', 307, now(), 0);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid, hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(), 'VMware', '6.5', 'other3xLinuxGuest', 307, now(), 0);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid, hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(), 'VMware', '6.7', 'other3xLinuxGuest', 307, now(), 0);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid, hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(), 'VMware', '6.7.1', 'other3xLinuxGuest', 307, now(), 0);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid, hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(), 'VMware', '6.7.2', 'other3xLinuxGuest', 307, now(), 0);\n+INSERT IGNORE INTO `cloud`.`guest_os_hypervisor` (uuid, hypervisor_type, hypervisor_version, guest_os_name, guest_os_id, created, is_user_defined) VALUES (UUID(), 'VMware', '6.7.3', 'other3xLinuxGuest', 307, now(), 0);", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgyNDE4OQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496824189", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "DaanHoogland", "createdAt": "2020-09-29T15:37:24Z", "path": "engine/storage/image/src/main/java/org/apache/cloudstack/storage/image/TemplateServiceImpl.java", "diffHunk": "@@ -1280,4 +1290,4 @@ protected Void createDatadiskTemplateCallback(AsyncCallbackDispatcher<TemplateSe\n         future.complete(dataDiskTemplateResult);\n         return null;\n     }\n-}\n+}", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgzNzc0MQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496837741", "bodyText": "kind of surprising that the BaseImageStoreDriverImpl would be able to copy anything anymore in a PR that is Vmware specific... Why is this?", "author": "DaanHoogland", "createdAt": "2020-09-29T15:50:01Z", "path": "engine/storage/src/main/java/org/apache/cloudstack/storage/image/BaseImageStoreDriverImpl.java", "diffHunk": "@@ -413,25 +383,16 @@ private Answer sendToLeastBusyEndpoint(List<EndPoint> eps, CopyCommand cmd) {\n             return answer;\n         }  catch (AgentUnavailableException e) {\n             errMsg = e.toString();\n-            s_logger.debug(\"Failed to send command, due to Agent:\" + endPoint.getId() + \", \" + e.toString());\n+            LOGGER.debug(\"Failed to send command, due to Agent:\" + endPoint.getId() + \", \" + e.toString());\n         } catch (OperationTimedoutException e) {\n             errMsg = e.toString();\n-            s_logger.debug(\"Failed to send command, due to Agent:\" + endPoint.getId() + \", \" + e.toString());\n+            LOGGER.debug(\"Failed to send command, due to Agent:\" + endPoint.getId() + \", \" + e.toString());\n         }\n         throw new CloudRuntimeException(\"Failed to send command, due to Agent:\" + endPoint.getId() + \", \" + errMsg);\n     }\n \n     @Override\n     public boolean canCopy(DataObject srcData, DataObject destData) {\n-        DataStore srcStore = srcData.getDataStore();\n-        DataStore destStore = destData.getDataStore();\n-        if ((srcData.getDataStore().getTO() instanceof NfsTO && destData.getDataStore().getTO() instanceof NfsTO) &&\n-                (srcStore.getRole() == DataStoreRole.Image && destStore.getRole() == DataStoreRole.Image) &&\n-                ((srcData.getType() == DataObjectType.TEMPLATE && destData.getType() == DataObjectType.TEMPLATE) ||\n-                (srcData.getType() == DataObjectType.SNAPSHOT && destData.getType() == DataObjectType.SNAPSHOT) ||\n-                (srcData.getType() == DataObjectType.VOLUME && destData.getType() == DataObjectType.VOLUME))) {\n-            return true;\n-        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg0MDkyOQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496840929", "bodyText": "can we have some javadoc here? these are helper functions for use in... (storage drivers/network orchestrators/Virtualmachien orchestrators) ?", "author": "DaanHoogland", "createdAt": "2020-09-29T15:53:06Z", "path": "engine/storage/src/main/java/org/apache/cloudstack/storage/image/deployasis/DeployAsIsHelper.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.apache.cloudstack.storage.image.deployasis;\n+\n+import com.cloud.agent.api.storage.DownloadAnswer;\n+import com.cloud.agent.api.to.NicTO;\n+import com.cloud.vm.VirtualMachineProfile;\n+\n+import java.util.Map;\n+\n+public interface DeployAsIsHelper {\n+\n+    void persistTemplateDeployAsIsDetails(long templateId, DownloadAnswer answer);\n+    Map<String, String> getVirtualMachineDeployAsIsProperties(VirtualMachineProfile vmId);\n+\n+    String getAllocatedVirtualMachineTemplatePath(VirtualMachineProfile vm, String configuration, String destStoragePool);\n+    String getAllocatedVirtualMachineDestinationStoragePool(VirtualMachineProfile vm);\n+\n+    Map<Integer, String> getAllocatedVirtualMachineNicsAdapterMapping(VirtualMachineProfile vm, NicTO[] nics);\n+}", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg0NzIwMg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496847202", "bodyText": "new classes should go in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T15:58:56Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/util/VcenterSessionHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.vmware.util;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5MTgzMA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496891830", "bodyText": "new method doSomeChildClusterStuff(ScopeType scopeType, ...)", "author": "DaanHoogland", "createdAt": "2020-09-29T16:50:49Z", "path": "engine/storage/src/main/java/org/apache/cloudstack/storage/volume/datastore/PrimaryDataStoreHelper.java", "diffHunk": "@@ -161,6 +161,13 @@ public DataStore attachCluster(DataStore store) {\n         pool.setScope(ScopeType.CLUSTER);\n         pool.setStatus(StoragePoolStatus.Up);\n         this.dataStoreDao.update(pool.getId(), pool);\n+        if(pool.getPoolType() == StoragePoolType.DatastoreCluster && pool.getParent() == 0) {\n+            List<StoragePoolVO> childDatastores = dataStoreDao.listChildStoragePoolsInDatastoreCluster(pool.getId());\n+            for (StoragePoolVO child : childDatastores) {\n+                child.setScope(ScopeType.CLUSTER);\n+                this.dataStoreDao.update(child.getId(), child);\n+            }\n+        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5MzI3Mg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496893272", "bodyText": "call of doSomeChildClusterStuff(ScopeType.ZONE, ...)", "author": "DaanHoogland", "createdAt": "2020-09-29T16:53:01Z", "path": "engine/storage/src/main/java/org/apache/cloudstack/storage/volume/datastore/PrimaryDataStoreHelper.java", "diffHunk": "@@ -178,6 +185,13 @@ public DataStore attachZone(DataStore store, HypervisorType hypervisor) {\n         pool.setHypervisor(hypervisor);\n         pool.setStatus(StoragePoolStatus.Up);\n         this.dataStoreDao.update(pool.getId(), pool);\n+        if(pool.getPoolType() == StoragePoolType.DatastoreCluster && pool.getParent() == 0) {\n+            List<StoragePoolVO> childDatastores = dataStoreDao.listChildStoragePoolsInDatastoreCluster(pool.getId());\n+            for (StoragePoolVO child : childDatastores) {\n+                child.setScope(ScopeType.ZONE);\n+                this.dataStoreDao.update(child.getId(), child);\n+            }\n+        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5NjYwNA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496896604", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "DaanHoogland", "createdAt": "2020-09-29T16:58:21Z", "path": "engine/storage/volume/src/main/java/org/apache/cloudstack/storage/volume/VolumeServiceImpl.java", "diffHunk": "@@ -2125,4 +2132,4 @@ public void unmanageVolume(long volumeId) {\n             volDao.remove(vol.getId());\n         }\n     }\n-}\n+}", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5ODkyOA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496898928", "bodyText": "new classes should go in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T17:02:08Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/VirtualStorageObjectManagerMO.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.vmware.mo;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwMDY0NA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496900644", "bodyText": "new classes should go in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T17:05:07Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/StoragepodMO.java", "diffHunk": "@@ -0,0 +1,48 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package com.cloud.hypervisor.vmware.mo;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwMTEwNg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496901106", "bodyText": "new classes should go in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T17:05:53Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/PbmProfileManagerMO.java", "diffHunk": "@@ -0,0 +1,94 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.vmware.mo;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwMTU2Ng==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496901566", "bodyText": "new classes should go in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T17:06:42Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/PbmPlacementSolverMO.java", "diffHunk": "@@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package com.cloud.hypervisor.vmware.mo;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwMjM3NA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496902374", "bodyText": "\ud83d\udc4d", "author": "DaanHoogland", "createdAt": "2020-09-29T17:08:02Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1704,6 +1736,11 @@ public static String resolveHostNameInUrl(DatacenterMO dcMo, String url) {\n         return url;\n     }\n \n+    /**", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwMjYxMA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496902610", "bodyText": "\ud83d\udc4d", "author": "DaanHoogland", "createdAt": "2020-09-29T17:08:26Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1738,33 +1775,47 @@ public static String removeOVFNetwork(final String ovfString)  {\n         return ovfString;\n     }\n \n+    /**", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwMjc1MA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496902750", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws Exception shoud be a VmwareResourceException\n          \n          \n            \n                 * @throws CloudRuntimeException should be a VmwareResourceException\n          \n          \n            \n                 * @throws IOException if ovfFilePath not valid?", "author": "DaanHoogland", "createdAt": "2020-09-29T17:08:40Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1738,33 +1775,47 @@ public static String removeOVFNetwork(final String ovfString)  {\n         return ovfString;\n     }\n \n+    /**\n+     * deploys a new VM from a ovf spec. It ignores network, defaults locale to 'US'\n+     * @throws Exception shoud be a VmwareResourceException", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNTMyOQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496905329", "bodyText": "factorred out in new method?", "author": "DaanHoogland", "createdAt": "2020-09-29T17:12:57Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1738,33 +1775,47 @@ public static String removeOVFNetwork(final String ovfString)  {\n         return ovfString;\n     }\n \n+    /**\n+     * deploys a new VM from a ovf spec. It ignores network, defaults locale to 'US'\n+     * @throws Exception shoud be a VmwareResourceException\n+     */\n     public static void importVmFromOVF(VmwareHypervisorHost host, String ovfFilePath, String vmName, DatastoreMO dsMo, String diskOption, ManagedObjectReference morRp,\n-            ManagedObjectReference morHost) throws Exception {\n+                                       ManagedObjectReference morHost, String configurationId) throws CloudRuntimeException, IOException {\n \n         assert (morRp != null);\n \n         OvfCreateImportSpecParams importSpecParams = new OvfCreateImportSpecParams();\n         importSpecParams.setHostSystem(morHost);\n         importSpecParams.setLocale(\"US\");\n         importSpecParams.setEntityName(vmName);\n-        importSpecParams.setDeploymentOption(\"\");\n+        String deploymentOption = StringUtils.isNotBlank(configurationId) ? configurationId : \"\";\n+        importSpecParams.setDeploymentOption(deploymentOption);\n         importSpecParams.setDiskProvisioning(diskOption); // diskOption: thin, thick, etc\n \n         String ovfDescriptor = removeOVFNetwork(HttpNfcLeaseMO.readOvfContent(ovfFilePath));\n         VmwareContext context = host.getContext();\n-        OvfCreateImportSpecResult ovfImportResult =\n-                context.getService().createImportSpec(context.getServiceContent().getOvfManager(), ovfDescriptor, morRp, dsMo.getMor(), importSpecParams);\n-\n+        OvfCreateImportSpecResult ovfImportResult = null;\n+        try {\n+            ovfImportResult = context.getService().createImportSpec(context.getServiceContent().getOvfManager(), ovfDescriptor, morRp, dsMo.getMor(), importSpecParams);\n+        } catch (ConcurrentAccessFaultMsg\n+                | FileFaultFaultMsg\n+                | InvalidDatastoreFaultMsg\n+                | InvalidStateFaultMsg\n+                | RuntimeFaultFaultMsg\n+                | TaskInProgressFaultMsg\n+                | VmConfigFaultFaultMsg error) {\n+            throw new CloudRuntimeException(\"ImportSpec creation failed\", error);\n+        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNTc1Mw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496905753", "bodyText": "factor in new method", "author": "DaanHoogland", "createdAt": "2020-09-29T17:13:41Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1773,22 +1824,55 @@ public static void importVmFromOVF(VmwareHypervisorHost host, String ovfFilePath\n             }\n         }\n \n-        DatacenterMO dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n-        ManagedObjectReference morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), dcMo.getVmFolder(), morHost);\n+        DatacenterMO dcMo = null;\n+        try {\n+            dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(String.format(\"no datacenter for host '%s' available in context\", context.getServerAddress()), e);\n+        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNTkwMg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496905902", "bodyText": "factor in new method", "author": "DaanHoogland", "createdAt": "2020-09-29T17:13:58Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1773,22 +1824,55 @@ public static void importVmFromOVF(VmwareHypervisorHost host, String ovfFilePath\n             }\n         }\n \n-        DatacenterMO dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n-        ManagedObjectReference morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), dcMo.getVmFolder(), morHost);\n+        DatacenterMO dcMo = null;\n+        try {\n+            dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(String.format(\"no datacenter for host '%s' available in context\", context.getServerAddress()), e);\n+        }\n+        ManagedObjectReference folderMO = null;\n+        try {\n+            folderMO = dcMo.getVmFolder();\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(\"no management handle for VmFolder\", e);\n+        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNjA0Ng==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496906046", "bodyText": "new method", "author": "DaanHoogland", "createdAt": "2020-09-29T17:14:12Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1773,22 +1824,55 @@ public static void importVmFromOVF(VmwareHypervisorHost host, String ovfFilePath\n             }\n         }\n \n-        DatacenterMO dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n-        ManagedObjectReference morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), dcMo.getVmFolder(), morHost);\n+        DatacenterMO dcMo = null;\n+        try {\n+            dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(String.format(\"no datacenter for host '%s' available in context\", context.getServerAddress()), e);\n+        }\n+        ManagedObjectReference folderMO = null;\n+        try {\n+            folderMO = dcMo.getVmFolder();\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(\"no management handle for VmFolder\", e);\n+        }\n+        ManagedObjectReference morLease = null;\n+        try {\n+            morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), folderMO, morHost);\n+        } catch (DuplicateNameFaultMsg\n+                | FileFaultFaultMsg\n+                | InsufficientResourcesFaultFaultMsg\n+                | InvalidDatastoreFaultMsg\n+                | InvalidNameFaultMsg\n+                | OutOfBoundsFaultMsg\n+                | RuntimeFaultFaultMsg\n+                | VmConfigFaultFaultMsg fault) {\n+            throw new CloudRuntimeException(\"import vApp failed\",fault);\n+        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNjIyNw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496906227", "bodyText": "new method", "author": "DaanHoogland", "createdAt": "2020-09-29T17:14:27Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1773,22 +1824,55 @@ public static void importVmFromOVF(VmwareHypervisorHost host, String ovfFilePath\n             }\n         }\n \n-        DatacenterMO dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n-        ManagedObjectReference morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), dcMo.getVmFolder(), morHost);\n+        DatacenterMO dcMo = null;\n+        try {\n+            dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(String.format(\"no datacenter for host '%s' available in context\", context.getServerAddress()), e);\n+        }\n+        ManagedObjectReference folderMO = null;\n+        try {\n+            folderMO = dcMo.getVmFolder();\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(\"no management handle for VmFolder\", e);\n+        }\n+        ManagedObjectReference morLease = null;\n+        try {\n+            morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), folderMO, morHost);\n+        } catch (DuplicateNameFaultMsg\n+                | FileFaultFaultMsg\n+                | InsufficientResourcesFaultFaultMsg\n+                | InvalidDatastoreFaultMsg\n+                | InvalidNameFaultMsg\n+                | OutOfBoundsFaultMsg\n+                | RuntimeFaultFaultMsg\n+                | VmConfigFaultFaultMsg fault) {\n+            throw new CloudRuntimeException(\"import vApp failed\",fault);\n+        }\n         if (morLease == null) {\n             String msg = \"importVApp() failed. ovfFilePath: \" + ovfFilePath + \", vmName: \" + vmName + \", diskOption: \" + diskOption;\n             s_logger.error(msg);\n-            throw new Exception(msg);\n+            throw new CloudRuntimeException(msg);\n         }\n         boolean importSuccess = true;\n         final HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(context, morLease);\n-        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n+        HttpNfcLeaseState state = null;\n+        try {\n+            state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(\"exception while waiting for leaseMO\", e);\n+        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNjQxMA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496906410", "bodyText": "new method", "author": "DaanHoogland", "createdAt": "2020-09-29T17:14:43Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1773,22 +1824,55 @@ public static void importVmFromOVF(VmwareHypervisorHost host, String ovfFilePath\n             }\n         }\n \n-        DatacenterMO dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n-        ManagedObjectReference morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), dcMo.getVmFolder(), morHost);\n+        DatacenterMO dcMo = null;\n+        try {\n+            dcMo = new DatacenterMO(context, host.getHyperHostDatacenter());\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(String.format(\"no datacenter for host '%s' available in context\", context.getServerAddress()), e);\n+        }\n+        ManagedObjectReference folderMO = null;\n+        try {\n+            folderMO = dcMo.getVmFolder();\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(\"no management handle for VmFolder\", e);\n+        }\n+        ManagedObjectReference morLease = null;\n+        try {\n+            morLease = context.getService().importVApp(morRp, ovfImportResult.getImportSpec(), folderMO, morHost);\n+        } catch (DuplicateNameFaultMsg\n+                | FileFaultFaultMsg\n+                | InsufficientResourcesFaultFaultMsg\n+                | InvalidDatastoreFaultMsg\n+                | InvalidNameFaultMsg\n+                | OutOfBoundsFaultMsg\n+                | RuntimeFaultFaultMsg\n+                | VmConfigFaultFaultMsg fault) {\n+            throw new CloudRuntimeException(\"import vApp failed\",fault);\n+        }\n         if (morLease == null) {\n             String msg = \"importVApp() failed. ovfFilePath: \" + ovfFilePath + \", vmName: \" + vmName + \", diskOption: \" + diskOption;\n             s_logger.error(msg);\n-            throw new Exception(msg);\n+            throw new CloudRuntimeException(msg);\n         }\n         boolean importSuccess = true;\n         final HttpNfcLeaseMO leaseMo = new HttpNfcLeaseMO(context, morLease);\n-        HttpNfcLeaseState state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n+        HttpNfcLeaseState state = null;\n+        try {\n+            state = leaseMo.waitState(new HttpNfcLeaseState[] {HttpNfcLeaseState.READY, HttpNfcLeaseState.ERROR});\n+        } catch (Exception e) {\n+            throw new CloudRuntimeException(\"exception while waiting for leaseMO\", e);\n+        }\n         try {\n             if (state == HttpNfcLeaseState.READY) {\n                 final long totalBytes = HttpNfcLeaseMO.calcTotalBytes(ovfImportResult);\n                 File ovfFile = new File(ovfFilePath);\n \n-                HttpNfcLeaseInfo httpNfcLeaseInfo = leaseMo.getLeaseInfo();\n+                HttpNfcLeaseInfo httpNfcLeaseInfo = null;\n+                try {\n+                    httpNfcLeaseInfo = leaseMo.getLeaseInfo();\n+                } catch (Exception e) {\n+                    throw new CloudRuntimeException(\"error waiting for lease info\", e);\n+                }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkwNzAxOA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496907018", "bodyText": "cleanup/finalize method", "author": "DaanHoogland", "createdAt": "2020-09-29T17:15:46Z", "path": "vmware-base/src/main/java/com/cloud/hypervisor/vmware/mo/HypervisorHostHelper.java", "diffHunk": "@@ -1818,31 +1903,44 @@ public void action(Long param) {\n                     String erroMsg = \"File upload task failed to complete due to: \" + e.getMessage();\n                     s_logger.error(erroMsg);\n                     importSuccess = false; // Set flag to cleanup the stale template left due to failed import operation, if any\n-                    throw new Exception(erroMsg, e);\n+                    throw new CloudRuntimeException(erroMsg, e);\n                 } catch (Throwable th) {\n                     String errorMsg = \"throwable caught during file upload task: \" + th.getMessage();\n                     s_logger.error(errorMsg);\n                     importSuccess = false; // Set flag to cleanup the stale template left due to failed import operation, if any\n-                    throw new Exception(errorMsg, th);\n+                    throw new CloudRuntimeException(errorMsg, th);\n                 } finally {\n                     progressReporter.close();\n                 }\n                 if (bytesAlreadyWritten == totalBytes) {\n-                    leaseMo.updateLeaseProgress(100);\n+                    try {\n+                        leaseMo.updateLeaseProgress(100);\n+                    } catch (Exception e) {\n+                        throw new CloudRuntimeException(\"error while waiting for lease update\", e);\n+                    }\n                 }\n             } else if (state == HttpNfcLeaseState.ERROR) {\n-                LocalizedMethodFault error = leaseMo.getLeaseError();\n+                LocalizedMethodFault error = null;\n+                try {\n+                    error = leaseMo.getLeaseError();\n+                } catch (Exception e) {\n+                    throw new CloudRuntimeException(\"error getting lease error\", e);\n+                }\n                 MethodFault fault = error.getFault();\n                 String erroMsg = \"Object creation on vCenter failed due to: Exception: \" + fault.getClass().getName() + \", message: \" + error.getLocalizedMessage();\n                 s_logger.error(erroMsg);\n-                throw new Exception(erroMsg);\n+                throw new CloudRuntimeException(erroMsg);\n             }\n         } finally {\n-            if (!importSuccess) {\n-                s_logger.error(\"Aborting the lease on \" + vmName + \" after import operation failed.\");\n-                leaseMo.abortLease();\n-            } else {\n-                leaseMo.completeLease();\n+            try {\n+                if (!importSuccess) {\n+                    s_logger.error(\"Aborting the lease on \" + vmName + \" after import operation failed.\");\n+                    leaseMo.abortLease();\n+                } else {\n+                    leaseMo.completeLease();\n+                }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMDU4Ng==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496910586", "bodyText": "internal project code in open source version. please remove/reformulate this comment.", "author": "DaanHoogland", "createdAt": "2020-09-29T17:21:51Z", "path": "plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java", "diffHunk": "@@ -745,20 +752,38 @@ private Answer execute(ResizeVolumeCommand cmd) {\n             } else if (newSize == oldSize) {\n                 return new ResizeVolumeAnswer(cmd, true, \"success\", newSize * ResourceType.bytesToKiB);\n             }\n+            /*\n+            // FR41 this is yet to fix", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxMDc5MQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496910791", "bodyText": "code in comment please remove", "author": "DaanHoogland", "createdAt": "2020-09-29T17:22:13Z", "path": "plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/resource/VmwareResource.java", "diffHunk": "@@ -745,20 +752,38 @@ private Answer execute(ResizeVolumeCommand cmd) {\n             } else if (newSize == oldSize) {\n                 return new ResizeVolumeAnswer(cmd, true, \"success\", newSize * ResourceType.bytesToKiB);\n             }\n+            /*\n+            // FR41 this is yet to fix\n+            ManagedObjectReference morDS1 = HypervisorHostHelper.findDatastoreWithBackwardsCompatibility(hyperHost, cmd.getPoolUuid());\n+            DatastoreMO dsMo1 = new DatastoreMO(hyperHost.getContext(), morDS1);\n+            vmdkDataStorePath = VmwareStorageLayoutHelper.getLegacyDatastorePathFromVmdkFileName(dsMo1, path + VMDK_EXTENSION);\n+            DatastoreFile dsFile1 = new DatastoreFile(vmdkDataStorePath);\n+\n+            s_logger.debug(\"vDiskid does not exist for volume \" + vmdkDataStorePath + \" registering the disk now\");\n+            VirtualStorageObjectManagerMO vStorageObjectManagerMO = new VirtualStorageObjectManagerMO(getServiceContext());\n+            try {\n+                VStorageObject vStorageObject = vStorageObjectManagerMO.registerVirtualDisk(dsFile1, null, dsMo1.getOwnerDatacenter().second());\n+                VStorageObjectConfigInfo diskConfigInfo = vStorageObject.getConfig();\n+                ID vdiskId = diskConfigInfo.getId();\n+            } catch (Throwable e) {\n+                if (e instanceof AlreadyExistsFaultMsg) {\n+\n+                }\n+            }*/", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxNjE5Mw==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496916193", "bodyText": "long method, can you split it?", "author": "DaanHoogland", "createdAt": "2020-09-29T17:30:23Z", "path": "plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java", "diffHunk": "@@ -891,6 +886,92 @@ public Answer cloneVolumeFromBaseTemplate(CopyCommand cmd) {\n         }\n     }\n \n+    private String cloneVMwithVMname(VmwareContext context, VmwareHypervisorHost hyperHost, TemplateObjectTO template,\n+                                     VirtualMachineMO vmTemplate, VolumeObjectTO volume, DatacenterMO dcMo, DatastoreMO dsMo) throws Exception {\n+        ManagedObjectReference morDatastore = dsMo.getMor();\n+        ManagedObjectReference morPool = hyperHost.getHyperHostOwnerResourcePool();\n+        ManagedObjectReference morCluster = hyperHost.getHyperHostCluster();\n+        if (template.getSize() != null) {\n+            _fullCloneFlag = volume.getSize() > template.getSize() ? true : _fullCloneFlag;\n+        }\n+        if (!_fullCloneFlag) {\n+            createVMLinkedClone(vmTemplate, dcMo, volume.getVmName(), morDatastore, morPool);\n+        } else {\n+            createVMFullClone(vmTemplate, dcMo, dsMo, volume.getVmName(), morDatastore, morPool);\n+        }\n+\n+        VirtualMachineMO vmMo = new ClusterMO(context, morCluster).findVmOnHyperHost(volume.getVmName());\n+        assert (vmMo != null);\n+\n+        return vmMo.getVmdkFileBaseNames().get(0);\n+    }\n+\n+    private String createVMFolderWithVMName(VmwareContext context, VmwareHypervisorHost hyperHost, TemplateObjectTO template,", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxNjg0OQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496916849", "bodyText": "internal project code in open source version, please remove.", "author": "DaanHoogland", "createdAt": "2020-09-29T17:31:22Z", "path": "plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java", "diffHunk": "@@ -1124,6 +1203,12 @@ private void postCreatePrivateTemplate(String installFullPath, long templateId,\n                 throw new Exception(msg);\n             }\n \n+            DatacenterMO dcMo = new DatacenterMO(context, hyperHost.getHyperHostDatacenter());\n+            ManagedObjectReference morPool = hyperHost.getHyperHostOwnerResourcePool();\n+            vmMo.createFullCloneWithSpecificDisk(templateUniqueName, dcMo.getVmFolder(), morPool, VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()), volumeDeviceInfo);\n+            clonedVm = dcMo.findVm(templateUniqueName);\n+\n+            /* FR41 THIS IS OLD way of creating template using snapshot", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxNzE1Mg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496917152", "bodyText": "code in comment, please remove.", "author": "DaanHoogland", "createdAt": "2020-09-29T17:31:53Z", "path": "plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java", "diffHunk": "@@ -1134,7 +1219,7 @@ private void postCreatePrivateTemplate(String installFullPath, long templateId,\n             Pair<VirtualMachineMO, String[]> cloneResult =\n                     vmMo.cloneFromCurrentSnapshot(workerVmName, 0, 4, volumeDeviceInfo.second(), VmwareHelper.getDiskDeviceDatastore(volumeDeviceInfo.first()));\n             clonedVm = cloneResult.first();\n-\n+            * */", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxNzgyOQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496917829", "bodyText": "is this comment still valid? not by hte looks of the code below.", "author": "DaanHoogland", "createdAt": "2020-09-29T17:33:02Z", "path": "plugins/hypervisors/vmware/src/main/java/com/cloud/storage/resource/VmwareStorageProcessor.java", "diffHunk": "@@ -1720,13 +1801,19 @@ public Answer createTemplateFromSnapshot(CopyCommand cmd) {\n             String disks[] = vmMo.getCurrentSnapshotDiskChainDatastorePaths(diskDevice);\n             if (clonedWorkerVMNeeded) {\n                 // 4 MB is the minimum requirement for VM memory in VMware", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkyNDExOA==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496924118", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @APICommand(name = ImportVsphereStoragePoliciesCmd.APINAME, description = \"Import vSphere storage policies\",\n          \n          \n            \n                    responseObject = VsphereStoragePoliciesResponse.class,\n          \n          \n            \n                    requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n          \n          \n            \n                    authorized = {RoleType.Admin})\n          \n          \n            \n            @APICommand(name = ImportVsphereStoragePoliciesCmd.APINAME, description = \"Import vSphere storage policies\",\n          \n          \n            \n                    responseObject = VsphereStoragePoliciesResponse.class,\n          \n          \n            \n                    requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n          \n          \n            \n                    since = \"4.15\", authorized = {RoleType.Admin})", "author": "DaanHoogland", "createdAt": "2020-09-29T17:43:26Z", "path": "plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/api/command/admin/zone/ImportVsphereStoragePoliciesCmd.java", "diffHunk": "@@ -0,0 +1,111 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.api.command.admin.zone;\n+\n+import com.cloud.dc.DataCenter;\n+import com.cloud.dc.VsphereStoragePolicy;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.NetworkRuleConflictException;\n+import com.cloud.exception.ResourceAllocationException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.hypervisor.vmware.VmwareDatacenterService;\n+\n+import org.apache.cloudstack.acl.RoleType;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.VsphereStoragePoliciesResponse;\n+import org.apache.cloudstack.api.response.ListResponse;\n+import org.apache.cloudstack.api.response.ZoneResponse;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.log4j.Logger;\n+\n+import javax.inject.Inject;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@APICommand(name = ImportVsphereStoragePoliciesCmd.APINAME, description = \"Import vSphere storage policies\",\n+        responseObject = VsphereStoragePoliciesResponse.class,\n+        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n+        authorized = {RoleType.Admin})", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkyNTE2OQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496925169", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @APICommand(name = ListVsphereStoragePoliciesCmd.APINAME, description = \"List vSphere storage policies\",\n          \n          \n            \n                    responseObject = VsphereStoragePoliciesResponse.class,\n          \n          \n            \n                    requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n          \n          \n            \n                    authorized = {RoleType.Admin})\n          \n          \n            \n            public class ListVsphereStoragePoliciesCmd extends BaseCmd {\n          \n          \n            \n            @APICommand(name = ListVsphereStoragePoliciesCmd.APINAME, description = \"List vSphere storage policies\",\n          \n          \n            \n                    responseObject = VsphereStoragePoliciesResponse.class,\n          \n          \n            \n                    requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n          \n          \n            \n                    since = \"4.15\", authorized = {RoleType.Admin})\n          \n          \n            \n            public class ListVsphereStoragePoliciesCmd extends BaseCmd {", "author": "DaanHoogland", "createdAt": "2020-09-29T17:45:06Z", "path": "plugins/hypervisors/vmware/src/main/java/org/apache/cloudstack/api/command/admin/zone/ListVsphereStoragePoliciesCmd.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.api.command.admin.zone;\n+\n+import com.cloud.dc.DataCenter;\n+import com.cloud.dc.VsphereStoragePolicy;\n+import com.cloud.exception.ConcurrentOperationException;\n+import com.cloud.exception.InsufficientCapacityException;\n+import com.cloud.exception.NetworkRuleConflictException;\n+import com.cloud.exception.ResourceAllocationException;\n+import com.cloud.exception.ResourceUnavailableException;\n+import com.cloud.hypervisor.vmware.VmwareDatacenterService;\n+import org.apache.cloudstack.acl.RoleType;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.ListResponse;\n+import org.apache.cloudstack.api.response.VsphereStoragePoliciesResponse;\n+import org.apache.cloudstack.api.response.ZoneResponse;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.log4j.Logger;\n+\n+import javax.inject.Inject;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@APICommand(name = ListVsphereStoragePoliciesCmd.APINAME, description = \"List vSphere storage policies\",\n+        responseObject = VsphereStoragePoliciesResponse.class,\n+        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n+        authorized = {RoleType.Admin})\n+public class ListVsphereStoragePoliciesCmd extends BaseCmd {", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NjU0Mg==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496956542", "bodyText": "new classes should go in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T18:38:34Z", "path": "utils/src/test/java/com/cloud/utils/compression/CompressionUtilTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.utils.compression;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NzQ3MQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496957471", "bodyText": "new classes should go in org.apache.cloudstack", "author": "DaanHoogland", "createdAt": "2020-09-29T18:40:11Z", "path": "utils/src/main/java/com/cloud/utils/compression/CompressionUtil.java", "diffHunk": "@@ -0,0 +1,58 @@\n+//\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+//\n+package com.cloud.utils.compression;", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2NzYwOQ==", "url": "https://github.com/apache/cloudstack/pull/4307#discussion_r496967609", "bodyText": "separate method", "author": "DaanHoogland", "createdAt": "2020-09-29T18:58:05Z", "path": "server/src/main/java/com/cloud/storage/StorageManagerImpl.java", "diffHunk": "@@ -1498,6 +1610,16 @@ public PrimaryDataStoreInfo cancelPrimaryStorageForMaintenance(CancelPrimaryStor\n         DataStoreProvider provider = _dataStoreProviderMgr.getDataStoreProvider(primaryStorage.getStorageProviderName());\n         DataStoreLifeCycle lifeCycle = provider.getDataStoreLifeCycle();\n         DataStore store = _dataStoreMgr.getDataStore(primaryStorage.getId(), DataStoreRole.Primary);\n+        if (primaryStorage.getPoolType() == StoragePoolType.DatastoreCluster) {\n+            primaryStorage.setStatus(StoragePoolStatus.Up);\n+            _storagePoolDao.update(primaryStorage.getId(), primaryStorage);\n+            //FR41 need to handle when one of the primary stores is unable to cancel the maintenance mode\n+            List<StoragePoolVO> childDatastores = _storagePoolDao.listChildStoragePoolsInDatastoreCluster(primaryStorageId);\n+            for (StoragePoolVO childDatastore : childDatastores) {\n+                DataStore childStore = _dataStoreMgr.getDataStore(childDatastore.getId(), DataStoreRole.Primary);\n+                lifeCycle.cancelMaintain(childStore);\n+            }\n+        }", "originalCommit": "0a2823b80cb5cd1838a7e6ec3cd690619c2c17e8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9b08369067dc6167e561d54073dccace44844202", "url": "https://github.com/apache/cloudstack/commit/9b08369067dc6167e561d54073dccace44844202", "message": "Added storage policy details to disk while creating disk and restricted migration of volumes to storage pools which are not storage policy compliance", "committedDate": "2020-10-12T05:12:23Z", "type": "forcePushed"}, {"oid": "09ae6cbce44c884d8f77a293391cd5f685415db0", "url": "https://github.com/apache/cloudstack/commit/09ae6cbce44c884d8f77a293391cd5f685415db0", "message": "Reconcile root disk controller fix", "committedDate": "2020-10-14T10:41:40Z", "type": "forcePushed"}, {"oid": "a359f3d6101239fcfa647db923e6c1b8e4251937", "url": "https://github.com/apache/cloudstack/commit/a359f3d6101239fcfa647db923e6c1b8e4251937", "message": "Fix remove VM and its volumes for deploy-as-is if have previously failed - restore cpu flags in nested virtualization test", "committedDate": "2020-10-16T09:31:42Z", "type": "forcePushed"}, {"oid": "0701dc9d9cfeaafbb957b46994826ef975c677e9", "url": "https://github.com/apache/cloudstack/commit/0701dc9d9cfeaafbb957b46994826ef975c677e9", "message": "Initial commit adding few required managed object classes and added pbm sdk", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "f05b567d4c1335a16bfc8786eb9046a7815937f1", "url": "https://github.com/apache/cloudstack/commit/f05b567d4c1335a16bfc8786eb9046a7815937f1", "message": "Added PBM service connect", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "a72782f2e507d6d5c652ba2563aa7cda59fa257b", "url": "https://github.com/apache/cloudstack/commit/a72782f2e507d6d5c652ba2563aa7cda59fa257b", "message": "Fix root folder issue on datastore", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "b8b4f0f9adaec90c8032067fbc0fb6f428a6cd4b", "url": "https://github.com/apache/cloudstack/commit/b8b4f0f9adaec90c8032067fbc0fb6f428a6cd4b", "message": "Added importVsphereStoragePolicies API and scheme changes", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "037fcfd03221ef87a1bcb817fea01929bf3a8a04", "url": "https://github.com/apache/cloudstack/commit/037fcfd03221ef87a1bcb817fea01929bf3a8a04", "message": "Fixed bean creation errors on VsphereStoragePolicyDaoImpl", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "a4ec86a652dac8ca5d91cd7aa8b364123acd9627", "url": "https://github.com/apache/cloudstack/commit/a4ec86a652dac8ca5d91cd7aa8b364123acd9627", "message": "Added Storage policy id to VO", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "8b23ea90b8566b0f9e5ae7b6a17b0bf2f58728b5", "url": "https://github.com/apache/cloudstack/commit/8b23ea90b8566b0f9e5ae7b6a17b0bf2f58728b5", "message": "Moved Dao and VO files to different packages", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "2ff4989feb6d48ffaa4ed74b00425bff8ecd9cae", "url": "https://github.com/apache/cloudstack/commit/2ff4989feb6d48ffaa4ed74b00425bff8ecd9cae", "message": "Added gen_toc.py changes for API importvpsherestoragepolicies", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "a951e5f57fb2c8a867c8ace264d59d85e9011a5e", "url": "https://github.com/apache/cloudstack/commit/a951e5f57fb2c8a867c8ace264d59d85e9011a5e", "message": "Fixed unit test failure", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "27e5dfa633e2ddde2e89fa4cc2186332e1a4777e", "url": "https://github.com/apache/cloudstack/commit/27e5dfa633e2ddde2e89fa4cc2186332e1a4777e", "message": "Updated code to handle sync of storage policies when importVsphereStoragePolicies API is called multiple times", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "fb0a96e7fb04d012355c2efad972fb802e5c874d", "url": "https://github.com/apache/cloudstack/commit/fb0a96e7fb04d012355c2efad972fb802e5c874d", "message": "Check if datastore is complaince with the storagepolicy provided in the disk offering.\nAdded corresponding manager objects from PBM sdk to do the job.\nMade dao layer changes to read the storage policy in diskoffering", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "487bb03c4d6d23faa7142c5c8636d2b0839880cc", "url": "https://github.com/apache/cloudstack/commit/487bb03c4d6d23faa7142c5c8636d2b0839880cc", "message": "Added Storagepolicy while creating diskoffering. CreateDiskOffering API now takes storagepolicy as a parameter with UUID value", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "851b562e042575b5b39a2fdfe820bf3aea43d45f", "url": "https://github.com/apache/cloudstack/commit/851b562e042575b5b39a2fdfe820bf3aea43d45f", "message": "Unit test fix", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "6c314492e756b945c928b8f89104ef564a4b7a3e", "url": "https://github.com/apache/cloudstack/commit/6c314492e756b945c928b8f89104ef564a4b7a3e", "message": "Fix NPE in case of preparing secondarystorage on Host", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "aa07959f2adc77a471582a995af2aeb242d10dc0", "url": "https://github.com/apache/cloudstack/commit/aa07959f2adc77a471582a995af2aeb242d10dc0", "message": "Use VStorageObjectManager for disk operations.\n\nCreated disks using VStorageObjectManager\nRemoved redundant code around attach volume and create volumes", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "bef00b1cfb4df88c0778bbc3841650613e3ee025", "url": "https://github.com/apache/cloudstack/commit/bef00b1cfb4df88c0778bbc3841650613e3ee025", "message": "Added PBM jar dependency for vsphere 6.7 version", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "3d9edeeb9d2ecaba06573980dc48225cc126d628", "url": "https://github.com/apache/cloudstack/commit/3d9edeeb9d2ecaba06573980dc48225cc126d628", "message": "Bug fixing on default base folder", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "4bbb747b2300d8fa60e04ba3ab210020637be80f", "url": "https://github.com/apache/cloudstack/commit/4bbb747b2300d8fa60e04ba3ab210020637be80f", "message": "VMFS to presetup change", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "6df819028e472dd9801873857fe20133381ca0fe", "url": "https://github.com/apache/cloudstack/commit/6df819028e472dd9801873857fe20133381ca0fe", "message": "UI changes and accept any type of datastore as presetup in vmware", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "18340e96b101f84f702dbf9cb8921504666770ff", "url": "https://github.com/apache/cloudstack/commit/18340e96b101f84f702dbf9cb8921504666770ff", "message": "importVsphereStoragePolices improvements", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "778148ba167e1ee0fe64440e3ca4e54e811c2ee4", "url": "https://github.com/apache/cloudstack/commit/778148ba167e1ee0fe64440e3ca4e54e811c2ee4", "message": "Fix importstorage policies to update deleted policies on vcenter", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "233e665b34b8017e4fba2ca189a506a47644d0aa", "url": "https://github.com/apache/cloudstack/commit/233e665b34b8017e4fba2ca189a506a47644d0aa", "message": "Fix response list on importVsphereStoragePoliciescmd", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "586fa7eeaff92966c81b0963fd0f038f972e77a9", "url": "https://github.com/apache/cloudstack/commit/586fa7eeaff92966c81b0963fd0f038f972e77a9", "message": "Added listVsphereStoragePoliciesCmd", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "c45b83a158c48972a24c456b888d15cc9841c7d1", "url": "https://github.com/apache/cloudstack/commit/c45b83a158c48972a24c456b888d15cc9841c7d1", "message": "Logging variable name change", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "48786b2d312550e7b724783b9ac2f3ca5c58e186", "url": "https://github.com/apache/cloudstack/commit/48786b2d312550e7b724783b9ac2f3ca5c58e186", "message": "DataStore Clusters addition as a storage pool", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "bea31b85eed21f20beff31469f0f5bcbad9041d8", "url": "https://github.com/apache/cloudstack/commit/bea31b85eed21f20beff31469f0f5bcbad9041d8", "message": "Assetion fix in StorageTest.java", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "f858387b3c518af5a939416bfbdd833fbf76158f", "url": "https://github.com/apache/cloudstack/commit/f858387b3c518af5a939416bfbdd833fbf76158f", "message": "Import storagepolicies when vmware datacenter is added or updated", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "41b3fc19d69eddd8a70b3d14d0668c805572c2ae", "url": "https://github.com/apache/cloudstack/commit/41b3fc19d69eddd8a70b3d14d0668c805572c2ae", "message": "Add Datastore cluster and the child entities which are datastores in the cluster into CloudStack\n\nSetting scope is still pending.", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "53fa3beecf042c0ad6c7444e007d327f0c454fff", "url": "https://github.com/apache/cloudstack/commit/53fa3beecf042c0ad6c7444e007d327f0c454fff", "message": "Register Disk to first class disk whereever possible", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "b4a23ea5f6255af7e217c890bf6edbc7cb63cf0c", "url": "https://github.com/apache/cloudstack/commit/b4a23ea5f6255af7e217c890bf6edbc7cb63cf0c", "message": "Allocation logic to skip datastore cluster and consider only storagepools inside the datastore cluster", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "c9c38c0f37be784efd341374ceed05d167dc9995", "url": "https://github.com/apache/cloudstack/commit/c9c38c0f37be784efd341374ceed05d167dc9995", "message": "Handle datastore clusters in list storage pools to list only parent not the children in the Datastore cluster", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "75fb1d91eee6e18b2247d39ea4a3cfda04101c07", "url": "https://github.com/apache/cloudstack/commit/75fb1d91eee6e18b2247d39ea4a3cfda04101c07", "message": "Fix adding Datastore clusters and listing", "committedDate": "2020-10-19T09:27:15Z", "type": "commit"}, {"oid": "873f9dd9ac629bd350068401470169d177aa3328", "url": "https://github.com/apache/cloudstack/commit/873f9dd9ac629bd350068401470169d177aa3328", "message": "Datastore Clusters operations on putting into maintenance mode, update storage pool with tags, cancelling mantenance mode and deleting storage pool", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "0335713738af0d9522b0c6645c404b0301821166", "url": "https://github.com/apache/cloudstack/commit/0335713738af0d9522b0c6645c404b0301821166", "message": "Fix NPE on one of the register disk usecases", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "fef39264693cedd4e7d50bc6938bb7c6ec2825eb", "url": "https://github.com/apache/cloudstack/commit/fef39264693cedd4e7d50bc6938bb7c6ec2825eb", "message": "Datastore cluster: update tag to the child storagepools also", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "ed7efdf4d214982c1f571707fbdbf9ea5064e232", "url": "https://github.com/apache/cloudstack/commit/ed7efdf4d214982c1f571707fbdbf9ea5064e232", "message": "Generalise linked clone formats which are different for each datastore type", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "5aac6c3f0fb2521142353cb65378ced0ee6b43ad", "url": "https://github.com/apache/cloudstack/commit/5aac6c3f0fb2521142353cb65378ced0ee6b43ad", "message": "Fix immutable list to add another entry to list", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "4178a7cd9057d76c0a3d763b7240a358e45ad550", "url": "https://github.com/apache/cloudstack/commit/4178a7cd9057d76c0a3d763b7240a358e45ad550", "message": "inter-cluster migration support", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "c8a28f34ee39bb2985c5ace6f96f36bda51ee1f8", "url": "https://github.com/apache/cloudstack/commit/c8a28f34ee39bb2985c5ace6f96f36bda51ee1f8", "message": "Use clonevm task while creating template from volume\n\nOld way is by taking snapshot of entire VM and then clone from that snapshot with the required disk", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "4b10c6116763bed6f853a2bfdfbfbb4c60c81696", "url": "https://github.com/apache/cloudstack/commit/4b10c6116763bed6f853a2bfdfbfbb4c60c81696", "message": "Datastore cluster maintenance failure case handling.", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "7932f63390f7b4eef953bea0c6c878e3bc8b3034", "url": "https://github.com/apache/cloudstack/commit/7932f63390f7b4eef953bea0c6c878e3bc8b3034", "message": "Add checks before actual deletion of datastore cluster", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "812d42ebaaa62ce98efd27207c03ae73ac275fbc", "url": "https://github.com/apache/cloudstack/commit/812d42ebaaa62ce98efd27207c03ae73ac275fbc", "message": "Fix updateconfiguration API to add settings to child datastores in case of datastore clusters", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "e700ad72e7ac81ceaf1d8005a4fc7c30f398d9fb", "url": "https://github.com/apache/cloudstack/commit/e700ad72e7ac81ceaf1d8005a4fc7c30f398d9fb", "message": "Fix prepare template API incase of Datastore cluster", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "fc05d3168f14584431a1a6b3c1f88cf04999cfaa", "url": "https://github.com/apache/cloudstack/commit/fc05d3168f14584431a1a6b3c1f88cf04999cfaa", "message": "Fix ListVMsCmd with storageid as datastore cluster", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "61dd85876b259be856568177cb7edb54f22a41fb", "url": "https://github.com/apache/cloudstack/commit/61dd85876b259be856568177cb7edb54f22a41fb", "message": "Fix migrate vm and volume APIs in case if datastore cluster", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "1244fca367a6249bdb75b2f19c49196db2ca91cb", "url": "https://github.com/apache/cloudstack/commit/1244fca367a6249bdb75b2f19c49196db2ca91cb", "message": "Handle listsystemvms cmd in case of datastore clusters", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "48dd0dae0795f8800508051857fb794a508a3b4a", "url": "https://github.com/apache/cloudstack/commit/48dd0dae0795f8800508051857fb794a508a3b4a", "message": "Adding Storagepolicies to the service offering for root disks", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "36d65905b1c732f20266de142ead6ae38736775a", "url": "https://github.com/apache/cloudstack/commit/36d65905b1c732f20266de142ead6ae38736775a", "message": "Base folder creation on datstores restrict only to primary storages, for secondary storage datastore it is not required", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "1b18554794d1891539844ecc72e8c14aa47bdd93", "url": "https://github.com/apache/cloudstack/commit/1b18554794d1891539844ecc72e8c14aa47bdd93", "message": "Fix test cases", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "e211b92324686a56c88b4cd3e02c7f50b502558b", "url": "https://github.com/apache/cloudstack/commit/e211b92324686a56c88b4cd3e02c7f50b502558b", "message": "Changed workflow for storing volumes in sec storage", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "70e19b28e6b2d5d5fb0e66da85e46b81b3939071", "url": "https://github.com/apache/cloudstack/commit/70e19b28e6b2d5d5fb0e66da85e46b81b3939071", "message": "fix some more test cases", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "a5531a9e8612d9511bca5b551811dc274f16a1f9", "url": "https://github.com/apache/cloudstack/commit/a5531a9e8612d9511bca5b551811dc274f16a1f9", "message": "Changed artifact id from pbm for vmware-pbm for policy based management", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "0483e299e60aa503cd581be992cb53c63ef49b3e", "url": "https://github.com/apache/cloudstack/commit/0483e299e60aa503cd581be992cb53c63ef49b3e", "message": "Deleted temporary files", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "295ea5028214de1cbcaa9320b985a14450492e60", "url": "https://github.com/apache/cloudstack/commit/295ea5028214de1cbcaa9320b985a14450492e60", "message": "Fixed unexpected token Exception", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "2dd6e184d5e23ca1f55129030dd3200d10b7c6ee", "url": "https://github.com/apache/cloudstack/commit/2dd6e184d5e23ca1f55129030dd3200d10b7c6ee", "message": "Fix simulator code for SimulatorStorageProcessor.java", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "ab171adfdd02c31ebff79199903bb54dd907bfd0", "url": "https://github.com/apache/cloudstack/commit/ab171adfdd02c31ebff79199903bb54dd907bfd0", "message": "Handle failure case of putting datastore cluster on maintenance mode", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "201ebe88681a30837d3a19cb3212649d5a54630d", "url": "https://github.com/apache/cloudstack/commit/201ebe88681a30837d3a19cb3212649d5a54630d", "message": "Simulator failures fixing", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "b88df5ee5b6c5aafdfaa581268be64300fa3e39c", "url": "https://github.com/apache/cloudstack/commit/b88df5ee5b6c5aafdfaa581268be64300fa3e39c", "message": "Fixed a smoke test while taking snapshot", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "f320cf3c597a3c88a231c7c249557899e08e5a60", "url": "https://github.com/apache/cloudstack/commit/f320cf3c597a3c88a231c7c249557899e08e5a60", "message": "Remove registering virtual disk code", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "af84743fd956b1dc63192d37196b35cc1e3ae95a", "url": "https://github.com/apache/cloudstack/commit/af84743fd956b1dc63192d37196b35cc1e3ae95a", "message": "Fix addition of datastore clusters not to configure it as non NFS storage", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "d4d372a9a4910a3afb527634963aed1c1a6d1e6d", "url": "https://github.com/apache/cloudstack/commit/d4d372a9a4910a3afb527634963aed1c1a6d1e6d", "message": "Fix addition of datastores with invalid vCenter server details", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "d48cab75ab44f34eecb1dcffda82e5570bb41288", "url": "https://github.com/apache/cloudstack/commit/d48cab75ab44f34eecb1dcffda82e5570bb41288", "message": "Fix findstoragepoolsformigration cmd not to list the parent datastore cluster as suitable storagepool", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "0a412ac6dad2541fde53dfb68208678e480d07ca", "url": "https://github.com/apache/cloudstack/commit/0a412ac6dad2541fde53dfb68208678e480d07ca", "message": "Handle volume copy from secondary to primary in case of vSAN", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "85d440d9738cd133230243558a7859e8306a926d", "url": "https://github.com/apache/cloudstack/commit/85d440d9738cd133230243558a7859e8306a926d", "message": "Fix list volume response to list datastore cluster name and id instead of child datastore", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "97ae846c1e10aba28db25a4eff8556f13b767f60", "url": "https://github.com/apache/cloudstack/commit/97ae846c1e10aba28db25a4eff8556f13b767f60", "message": "Removed unused imports caused due to some merge conflicts", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "570f3214b83c6210edc4ba01a6306c4757138f92", "url": "https://github.com/apache/cloudstack/commit/570f3214b83c6210edc4ba01a6306c4757138f92", "message": "Handle VMFS6 sesparse format disk files", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "ebe0e2bb24f02d5b3e547a6759a667965adbf5b9", "url": "https://github.com/apache/cloudstack/commit/ebe0e2bb24f02d5b3e547a6759a667965adbf5b9", "message": "Keep retry logic for make directory method which is returning false positive yet times", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "d2d9b3c72f625f1efcbe6f20032e6002da3004ae", "url": "https://github.com/apache/cloudstack/commit/d2d9b3c72f625f1efcbe6f20032e6002da3004ae", "message": "Fix proper error message on revert volume snapshot operation in case of any hypervisor other than KVM", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "c16b40e33712777ebcc2e32050ec4090956fe979", "url": "https://github.com/apache/cloudstack/commit/c16b40e33712777ebcc2e32050ec4090956fe979", "message": "Fix list volumes cmd and update volume cmd to accept datastore cluster as storgeid", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "38b9618e4b9b6484bfbd01ac6714a64ce33eecfe", "url": "https://github.com/apache/cloudstack/commit/38b9618e4b9b6484bfbd01ac6714a64ce33eecfe", "message": "Fix destination hostname for stopped VMs in case of reset ssh keys", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "19745ea0497e3f078151e0ba553c8fd9a83d069e", "url": "https://github.com/apache/cloudstack/commit/19745ea0497e3f078151e0ba553c8fd9a83d069e", "message": "Fix enable primary datastore maintenance command seriliaztion on it", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "40934ba9ff1b84e5dde559deabb4bc8e56193ce0", "url": "https://github.com/apache/cloudstack/commit/40934ba9ff1b84e5dde559deabb4bc8e56193ce0", "message": "Fix travis failures by removing dependency of vmware from storage.\nAdded a new command class to verify the vCenter details provided while adding primary storage", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "c11dc337be774af429a1eff0f02d94e4867f28f0", "url": "https://github.com/apache/cloudstack/commit/c11dc337be774af429a1eff0f02d94e4867f28f0", "message": "Set back the datastore cluster state to UP upon on failure in prepare maintenance", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "04d400f0553c502a56863b976d316753abfb5f8d", "url": "https://github.com/apache/cloudstack/commit/04d400f0553c502a56863b976d316753abfb5f8d", "message": "Handle import unmanaged VM into CloudStack to support any type of datastore", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "8ee17e19a02438d6d0cb977c31aee8f6acb005f2", "url": "https://github.com/apache/cloudstack/commit/8ee17e19a02438d6d0cb977c31aee8f6acb005f2", "message": "Fix fcd from being deleted when empty", "committedDate": "2020-10-19T09:27:16Z", "type": "commit"}, {"oid": "d864e9dc39b69e590e3df898a03a874a8173fcc6", "url": "https://github.com/apache/cloudstack/commit/d864e9dc39b69e590e3df898a03a874a8173fcc6", "message": "[VMware] Full OVF properties support", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "cf2bb717920b56eb6e864e5b33b5cddbaf512623", "url": "https://github.com/apache/cloudstack/commit/cf2bb717920b56eb6e864e5b33b5cddbaf512623", "message": "Remove extra line after merging", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "5652097ef009dd19a1f6e97ce54bf2689616a308", "url": "https://github.com/apache/cloudstack/commit/5652097ef009dd19a1f6e97ce54bf2689616a308", "message": "Added backup on fail over scenrio in case of new create disk method", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "700ab1a5ef5716861b9721cf4e7a7e0a5e7f51a4", "url": "https://github.com/apache/cloudstack/commit/700ab1a5ef5716861b9721cf4e7a7e0a5e7f51a4", "message": "vVols datastore support added", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "f825a94dc459e49f43a5dfc30fec8da563281269", "url": "https://github.com/apache/cloudstack/commit/f825a94dc459e49f43a5dfc30fec8da563281269", "message": "Fixed volume migrations to and fro vVols datastorewq", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "f53f11b0103cce567c3aace5d9ee2d8e33b1337f", "url": "https://github.com/apache/cloudstack/commit/f53f11b0103cce567c3aace5d9ee2d8e33b1337f", "message": "Fix seeding template issue after PR merging", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "bc8ad6843458aae30f7af2b59cc8547444994ec1", "url": "https://github.com/apache/cloudstack/commit/bc8ad6843458aae30f7af2b59cc8547444994ec1", "message": "prepare for maintenance of storage pool of type datastore cluster should not try to cancel the maintenance upon failure, rather keep it in error in maintenance state", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "f74262b12a287db863c85a3b05d84824f0c7e82c", "url": "https://github.com/apache/cloudstack/commit/f74262b12a287db863c85a3b05d84824f0c7e82c", "message": "Snapshot on dettached volume considering wrong path, corrected it", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "fab6b41c9044d3a5dc3da59cea2ead02bfbdb71f", "url": "https://github.com/apache/cloudstack/commit/fab6b41c9044d3a5dc3da59cea2ead02bfbdb71f", "message": "Delete VM fix which does not move detached disks to fcd folder\nvVols attach disk fix", "committedDate": "2020-10-19T09:35:56Z", "type": "commit"}, {"oid": "bb4ce2118ddac69fda923208431a754ae5168dca", "url": "https://github.com/apache/cloudstack/commit/bb4ce2118ddac69fda923208431a754ae5168dca", "message": "Add new template and vm deploy as is details table and refactor", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "f73830acbbd5760dbea2acb43da357b2e8e6e2ab", "url": "https://github.com/apache/cloudstack/commit/f73830acbbd5760dbea2acb43da357b2e8e6e2ab", "message": "Refactor deploy as is constants", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "44bae9866428539b388578487364f3893f0951c1", "url": "https://github.com/apache/cloudstack/commit/44bae9866428539b388578487364f3893f0951c1", "message": "Fix daos issue", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "818981d8a7ef703125bc56d81c36b92653ba80a8", "url": "https://github.com/apache/cloudstack/commit/818981d8a7ef703125bc56d81c36b92653ba80a8", "message": "Fix typo", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "6ebfdc68545f66539010905b59973a3ed18c7b65", "url": "https://github.com/apache/cloudstack/commit/6ebfdc68545f66539010905b59973a3ed18c7b65", "message": "Dettached datadisk migration failed between NFS storages.\nFixed the issue of worker VM name being null", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}, {"oid": "19c83fef641954d0f8d4bd982444fc8d222fe9c9", "url": "https://github.com/apache/cloudstack/commit/19c83fef641954d0f8d4bd982444fc8d222fe9c9", "message": "Fix zone to zone scope volume migrations NPE", "committedDate": "2020-10-19T09:35:57Z", "type": "commit"}]}