{"pr_number": 4220, "pr_title": "Fix cpuallocated value in findHostsForMIgration api", "pr_createdAt": "2020-07-22T10:04:21Z", "pr_url": "https://github.com/apache/cloudstack/pull/4220", "timeline": [{"oid": "9500dfa627be8efea0ab96bf6691801c8a56b2e4", "url": "https://github.com/apache/cloudstack/commit/9500dfa627be8efea0ab96bf6691801c8a56b2e4", "message": "Fix cpuallocated value in findHostsForMIgration api\n\nThe findHostsForMigration api displays 0% always for\ncpuallocated field which is wrong", "committedDate": "2020-07-22T09:59:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjU3MQ==", "url": "https://github.com/apache/cloudstack/pull/4220#discussion_r458826571", "bodyText": "I see 100f a couple of times on the code, there is also 100.0f.\nWhat do you think of extracting these magic 100f/100.0f into a constant?\nAnother approach that would be even nicer would be to have these pieces extracted to a method like calculateResourceAllocatedPercentage, and add a few unit test case methods.\npublic String calculateResourceAllocatedPercentage(float resource, float resourceWithOverprovisioning) {\n\t    return decimalFormat.format(((float)resource / resourceWithOverprovisioning * 100f)) + **\"%\"**\n}", "author": "GabrielBrascher", "createdAt": "2020-07-22T14:17:21Z", "path": "server/src/main/java/com/cloud/api/query/dao/HostJoinDaoImpl.java", "diffHunk": "@@ -330,10 +330,10 @@ public HostForMigrationResponse newHostForMigrationResponse(HostJoinVO host, Enu\n \n                 hostResponse.setHypervisorVersion(host.getHypervisorVersion());\n \n-                Float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n-                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)).toString() + \"%\";\n+                float cpuWithOverprovisioning = new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor(host.getClusterId()));\n+                String cpuAlloc = decimalFormat.format(((float)cpu / cpuWithOverprovisioning * 100f)) + \"%\";", "originalCommit": "9500dfa627be8efea0ab96bf6691801c8a56b2e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI4NzIzNg==", "url": "https://github.com/apache/cloudstack/pull/4220#discussion_r459287236", "bodyText": "@GabrielBrascher I made the changes. Also can you look into the issue #4221 ?", "author": "ravening", "createdAt": "2020-07-23T08:21:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzODQ3Mg==", "url": "https://github.com/apache/cloudstack/pull/4220#discussion_r459838472", "bodyText": "@ravening thanks +1 :)\nCan you please take a look at line 314, I think that it could also benefit from the created method calculateResourceAllocatedPercentage.", "author": "GabrielBrascher", "createdAt": "2020-07-24T03:43:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MzkwOA==", "url": "https://github.com/apache/cloudstack/pull/4220#discussion_r459883908", "bodyText": "@GabrielBrascher I didn't make changes in line 314 because it has different behavior compared to line 165.\nI have mentioned the same in issue #4221 also. list hosts api returns absolute value where as findhostsformigration returns percentage. If we decided what to return then I can make changes in these two places also", "author": "ravening", "createdAt": "2020-07-24T07:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI2MzM0OA==", "url": "https://github.com/apache/cloudstack/pull/4220#discussion_r465263348", "bodyText": "@ravening sorry for the delay. I think that I was not clear about my point.\n\n\nthe method that you extract L464:\ndecimalFormat.format(((float)resource / resourceWithOverProvision * 100.0f)) + \"%\"\n\n\nline 314 that I mentioned:\ndecimalFormat.format((float) mem / memWithOverprovisioning * 100.0f) +\"%\"\n\n\nThat is why I thought that it could also benefit from calculateResourceAllocatedPercentage.", "author": "GabrielBrascher", "createdAt": "2020-08-04T18:59:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNjU3MQ=="}], "type": "inlineReview"}, {"oid": "7febf17aa8c8ba6403deeb160a4af5f6dda5111c", "url": "https://github.com/apache/cloudstack/commit/7febf17aa8c8ba6403deeb160a4af5f6dda5111c", "message": "Extract to function", "committedDate": "2020-07-23T08:19:31Z", "type": "commit"}]}