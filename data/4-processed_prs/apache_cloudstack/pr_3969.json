{"pr_number": 3969, "pr_title": "Snapshot deletion issues", "pr_createdAt": "2020-03-16T13:22:14Z", "pr_url": "https://github.com/apache/cloudstack/pull/3969", "timeline": [{"oid": "afd060b54f48744caf4836e4a6334dc1711b2b17", "url": "https://github.com/apache/cloudstack/commit/afd060b54f48744caf4836e4a6334dc1711b2b17", "message": "Fixes snapshot deletion", "committedDate": "2020-03-16T12:44:35Z", "type": "commit"}, {"oid": "8191b4da4815af8a3a13adcdd9f4692faf24d284", "url": "https://github.com/apache/cloudstack/commit/8191b4da4815af8a3a13adcdd9f4692faf24d284", "message": "Remove legacy '@Component', it is not necessary in this bean/class.", "committedDate": "2020-03-16T12:44:35Z", "type": "commit"}, {"oid": "bc9387fb91918e02cc1296a3c82f563795bf89ea", "url": "https://github.com/apache/cloudstack/commit/bc9387fb91918e02cc1296a3c82f563795bf89ea", "message": "Fix log message missing %d and remove snapshot on DB", "committedDate": "2020-03-16T12:44:35Z", "type": "commit"}, {"oid": "e109949e3a9e386b810c28132de6de420f5d6a03", "url": "https://github.com/apache/cloudstack/commit/e109949e3a9e386b810c28132de6de420f5d6a03", "message": "Remove \"dummy\" boolean return statement", "committedDate": "2020-03-16T12:44:35Z", "type": "commit"}, {"oid": "d31ecb8cfccf13096f8d6013e804b598cbfe0b38", "url": "https://github.com/apache/cloudstack/commit/d31ecb8cfccf13096f8d6013e804b598cbfe0b38", "message": "Manage snapshot deletion for KVM + NFS (primary storage)", "committedDate": "2020-03-16T12:44:35Z", "type": "commit"}, {"oid": "814af6a1829b5835e240cc2b50aa9bde20ce2637", "url": "https://github.com/apache/cloudstack/commit/814af6a1829b5835e240cc2b50aa9bde20ce2637", "message": "checkstyle trailing spaces", "committedDate": "2020-03-16T12:44:35Z", "type": "commit"}, {"oid": "a0bc85ba97549bc72bf9faf843238b7e4ac5a40d", "url": "https://github.com/apache/cloudstack/commit/a0bc85ba97549bc72bf9faf843238b7e4ac5a40d", "message": "rename options strings to *_OPTION", "committedDate": "2020-03-16T14:38:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI5NzA4Nw==", "url": "https://github.com/apache/cloudstack/pull/3969#discussion_r393297087", "bodyText": "going to fix the \"secundary\" typo", "author": "GabrielBrascher", "createdAt": "2020-03-16T20:40:35Z", "path": "engine/storage/snapshot/src/main/java/org/apache/cloudstack/storage/snapshot/DefaultSnapshotStrategy.java", "diffHunk": "@@ -269,63 +262,87 @@ public boolean deleteSnapshot(Long snapshotId) {\n             throw new InvalidParameterValueException(\"Can't delete snapshotshot \" + snapshotId + \" due to it is in \" + snapshotVO.getState() + \" Status\");\n         }\n \n-        // first mark the snapshot as destroyed, so that ui can't see it, but we\n-        // may not destroy the snapshot on the storage, as other snapshots may\n-        // depend on it.\n         SnapshotInfo snapshotOnImage = snapshotDataFactory.getSnapshot(snapshotId, DataStoreRole.Image);\n-        if (snapshotOnImage == null) {\n-            s_logger.debug(\"Can't find snapshot on backup storage, delete it in db\");\n-            snapshotDao.remove(snapshotId);\n-            return true;\n-        }\n-\n-        SnapshotObject obj = (SnapshotObject)snapshotOnImage;\n-        try {\n-            obj.processEvent(Snapshot.Event.DestroyRequested);\n-            List<VolumeDetailVO> volumesFromSnapshot;\n-            volumesFromSnapshot = _volumeDetailsDaoImpl.findDetails(\"SNAPSHOT_ID\", String.valueOf(snapshotId), null);\n \n-            if (volumesFromSnapshot.size() > 0) {\n-                try {\n-                    obj.processEvent(Snapshot.Event.OperationFailed);\n-                } catch (NoTransitionException e1) {\n-                    s_logger.debug(\"Failed to change snapshot state: \" + e1.toString());\n+        boolean deletedOnSecondary = false;\n+        if (snapshotOnImage == null) {\n+            s_logger.debug(String.format(\"Can't find snapshot [snapshot id: %d] on backup storage\", snapshotId));\n+        } else {\n+            SnapshotObject obj = (SnapshotObject)snapshotOnImage;\n+            try {\n+                deletedOnSecondary = deleteSnapshotOnSecundaryStorage(snapshotId, snapshotOnImage, obj);", "originalCommit": "a0bc85ba97549bc72bf9faf843238b7e4ac5a40d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7121967892d5b0bb3ae9a68b41ad4505eadd49c2", "url": "https://github.com/apache/cloudstack/commit/7121967892d5b0bb3ae9a68b41ad4505eadd49c2", "message": "Fix typo on deleteSnapshotOnSecondaryStorage and enhance log message", "committedDate": "2020-03-17T13:43:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4NzczNg==", "url": "https://github.com/apache/cloudstack/pull/3969#discussion_r400787736", "bodyText": "Perhaps this is leading to the record having a removed date on the snapshots table which later on causes issues during GC ?", "author": "davidjumani", "createdAt": "2020-03-31T09:57:37Z", "path": "engine/storage/snapshot/src/main/java/org/apache/cloudstack/storage/snapshot/DefaultSnapshotStrategy.java", "diffHunk": "@@ -269,63 +262,87 @@ public boolean deleteSnapshot(Long snapshotId) {\n             throw new InvalidParameterValueException(\"Can't delete snapshotshot \" + snapshotId + \" due to it is in \" + snapshotVO.getState() + \" Status\");\n         }\n \n-        // first mark the snapshot as destroyed, so that ui can't see it, but we\n-        // may not destroy the snapshot on the storage, as other snapshots may\n-        // depend on it.\n         SnapshotInfo snapshotOnImage = snapshotDataFactory.getSnapshot(snapshotId, DataStoreRole.Image);\n-        if (snapshotOnImage == null) {\n-            s_logger.debug(\"Can't find snapshot on backup storage, delete it in db\");\n-            snapshotDao.remove(snapshotId);\n-            return true;\n-        }\n-\n-        SnapshotObject obj = (SnapshotObject)snapshotOnImage;\n-        try {\n-            obj.processEvent(Snapshot.Event.DestroyRequested);\n-            List<VolumeDetailVO> volumesFromSnapshot;\n-            volumesFromSnapshot = _volumeDetailsDaoImpl.findDetails(\"SNAPSHOT_ID\", String.valueOf(snapshotId), null);\n \n-            if (volumesFromSnapshot.size() > 0) {\n-                try {\n-                    obj.processEvent(Snapshot.Event.OperationFailed);\n-                } catch (NoTransitionException e1) {\n-                    s_logger.debug(\"Failed to change snapshot state: \" + e1.toString());\n+        boolean deletedOnSecondary = false;\n+        if (snapshotOnImage == null) {\n+            s_logger.debug(String.format(\"Can't find snapshot [snapshot id: %d] on backup storage\", snapshotId));\n+        } else {\n+            SnapshotObject obj = (SnapshotObject)snapshotOnImage;\n+            try {\n+                deletedOnSecondary = deleteSnapshotOnSecondaryStorage(snapshotId, snapshotOnImage, obj);\n+                if (!deletedOnSecondary) {\n+                    s_logger.debug(\n+                            String.format(\"Failed to find/delete snapshot (id: %d) on secondary storage. Still necessary to check and delete snapshot on primary storage.\",\n+                                    snapshotId));\n+                } else {\n+                    s_logger.debug(String.format(\"Snapshot (id: %d) has been deleted on secondary storage.\", snapshotId));\n                 }\n-                throw new InvalidParameterValueException(\"Unable to perform delete operation, Snapshot with id: \" + snapshotId + \" is in use  \");\n+            } catch (NoTransitionException e) {\n+                s_logger.debug(\"Failed to set the state to destroying: \", e);\n+                return false;\n             }\n-        } catch (NoTransitionException e) {\n-            s_logger.debug(\"Failed to set the state to destroying: \", e);\n-            return false;\n         }\n \n-        try {\n-            boolean result = deleteSnapshotChain(snapshotOnImage);\n-            obj.processEvent(Snapshot.Event.OperationSucceeded);\n-            if (result) {\n-                //snapshot is deleted on backup storage, need to delete it on primary storage\n-                SnapshotDataStoreVO snapshotOnPrimary = snapshotStoreDao.findBySnapshot(snapshotId, DataStoreRole.Primary);\n-                if (snapshotOnPrimary != null) {\n-                    SnapshotInfo snapshotOnPrimaryInfo = snapshotDataFactory.getSnapshot(snapshotId, DataStoreRole.Primary);\n-                    long volumeId = snapshotOnPrimary.getVolumeId();\n-                    VolumeVO volumeVO = volumeDao.findById(volumeId);\n-                    if (((PrimaryDataStoreImpl)snapshotOnPrimaryInfo.getDataStore()).getPoolType() == StoragePoolType.RBD && volumeVO != null) {\n-                        snapshotSvr.deleteSnapshot(snapshotOnPrimaryInfo);\n-                    }\n-                    snapshotOnPrimary.setState(State.Destroyed);\n-                    snapshotStoreDao.update(snapshotOnPrimary.getId(), snapshotOnPrimary);\n-                }\n-            }\n-        } catch (Exception e) {\n-            s_logger.debug(\"Failed to delete snapshot: \", e);\n+        boolean deletedOnPrimary = deleteSnapshotOnPrimary(snapshotId);\n+        if (deletedOnPrimary) {\n+            s_logger.debug(String.format(\"Successfully deleted snapshot (id: %d) on primary storage.\", snapshotId));\n+        } else if (deletedOnSecondary) {\n+            s_logger.debug(String.format(\"The snapshot was deleted on secondary storage. Could not find/delete snapshot (id: %d) on primary storage.\", snapshotId));\n+        }\n+        return deletedOnSecondary || deletedOnPrimary;\n+    }\n+\n+    /**\n+     * Deletes the snapshot on secondary storage.\n+     * It can return false when the snapshot was stored on primary storage and not backed up on secondary; therefore, the snapshot should also be deleted on primary storage even when this method returns false.\n+     */\n+    private boolean deleteSnapshotOnSecondaryStorage(Long snapshotId, SnapshotInfo snapshotOnImage, SnapshotObject obj) throws NoTransitionException {\n+        obj.processEvent(Snapshot.Event.DestroyRequested);\n+        List<VolumeDetailVO> volumesFromSnapshot;\n+        volumesFromSnapshot = _volumeDetailsDaoImpl.findDetails(\"SNAPSHOT_ID\", String.valueOf(snapshotId), null);\n+\n+        if (volumesFromSnapshot.size() > 0) {\n             try {\n                 obj.processEvent(Snapshot.Event.OperationFailed);\n             } catch (NoTransitionException e1) {\n-                s_logger.debug(\"Failed to change snapshot state: \" + e.toString());\n+                s_logger.debug(\"Failed to change snapshot state: \" + e1.toString());\n             }\n-            return false;\n+            throw new InvalidParameterValueException(\"Unable to perform delete operation, Snapshot with id: \" + snapshotId + \" is in use  \");\n         }\n \n-        return true;\n+        boolean result = deleteSnapshotChain(snapshotOnImage);\n+        obj.processEvent(Snapshot.Event.OperationSucceeded);\n+        return result;\n+    }\n+\n+    /**\n+     * Deletes the snapshot on primary storage. It can return false when the snapshot was not stored on primary storage; however this does not means that it failed to delete the snapshot. </br>\n+     * In case of failure, it will throw one of the following exceptions: CloudRuntimeException, InterruptedException, or ExecutionException. </br>\n+     */\n+    private boolean deleteSnapshotOnPrimary(Long snapshotId) {\n+        SnapshotDataStoreVO snapshotOnPrimary = snapshotStoreDao.findBySnapshot(snapshotId, DataStoreRole.Primary);\n+        SnapshotInfo snapshotOnPrimaryInfo = snapshotDataFactory.getSnapshot(snapshotId, DataStoreRole.Primary);\n+        if (isSnapshotOnPrimaryStorage(snapshotId) && snapshotSvr.deleteSnapshot(snapshotOnPrimaryInfo)) {\n+            snapshotOnPrimary.setState(State.Destroyed);\n+            snapshotStoreDao.update(snapshotOnPrimary.getId(), snapshotOnPrimary);\n+            snapshotDao.remove(snapshotId);", "originalCommit": "7121967892d5b0bb3ae9a68b41ad4505eadd49c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NTA3Mg==", "url": "https://github.com/apache/cloudstack/pull/3969#discussion_r401695072", "bodyText": "That looks like the issue indeed, I will take a second look at this.", "author": "GabrielBrascher", "createdAt": "2020-04-01T15:15:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4NzczNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MzcwNg==", "url": "https://github.com/apache/cloudstack/pull/3969#discussion_r400883706", "bodyText": "Can remove the snapshot entry here instead ?", "author": "davidjumani", "createdAt": "2020-03-31T12:46:17Z", "path": "engine/storage/snapshot/src/main/java/org/apache/cloudstack/storage/snapshot/DefaultSnapshotStrategy.java", "diffHunk": "@@ -269,63 +262,87 @@ public boolean deleteSnapshot(Long snapshotId) {\n             throw new InvalidParameterValueException(\"Can't delete snapshotshot \" + snapshotId + \" due to it is in \" + snapshotVO.getState() + \" Status\");\n         }\n \n-        // first mark the snapshot as destroyed, so that ui can't see it, but we\n-        // may not destroy the snapshot on the storage, as other snapshots may\n-        // depend on it.\n         SnapshotInfo snapshotOnImage = snapshotDataFactory.getSnapshot(snapshotId, DataStoreRole.Image);\n-        if (snapshotOnImage == null) {\n-            s_logger.debug(\"Can't find snapshot on backup storage, delete it in db\");\n-            snapshotDao.remove(snapshotId);\n-            return true;\n-        }\n-\n-        SnapshotObject obj = (SnapshotObject)snapshotOnImage;\n-        try {\n-            obj.processEvent(Snapshot.Event.DestroyRequested);\n-            List<VolumeDetailVO> volumesFromSnapshot;\n-            volumesFromSnapshot = _volumeDetailsDaoImpl.findDetails(\"SNAPSHOT_ID\", String.valueOf(snapshotId), null);\n \n-            if (volumesFromSnapshot.size() > 0) {\n-                try {\n-                    obj.processEvent(Snapshot.Event.OperationFailed);\n-                } catch (NoTransitionException e1) {\n-                    s_logger.debug(\"Failed to change snapshot state: \" + e1.toString());\n+        boolean deletedOnSecondary = false;\n+        if (snapshotOnImage == null) {\n+            s_logger.debug(String.format(\"Can't find snapshot [snapshot id: %d] on backup storage\", snapshotId));", "originalCommit": "7121967892d5b0bb3ae9a68b41ad4505eadd49c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NjU5Nw==", "url": "https://github.com/apache/cloudstack/pull/3969#discussion_r400886597", "bodyText": "Yes David, snapshotDao.remove(snapshotId) needs to be moved here.\ncc @GabrielBrascher", "author": "harikrishna-patnala", "createdAt": "2020-03-31T12:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MzcwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4MDk5Ng==", "url": "https://github.com/apache/cloudstack/pull/3969#discussion_r401680996", "bodyText": "@davidjumani @harikrishna-patnala it might work placing snapshotDao.remove(snapshotId) here, indeed.\nHowever, I see a potential problem in the case thre is no snapshot backed up on secondary and deletion fails at the primary storage. In such a case it would remove the snapshot entry before removing the snapshot on primary storage. Not sure if this could lead to a snapshot garbage issue on primary storage (instead of on secondary).\nWhat do you think? Does this observation make sense?", "author": "GabrielBrascher", "createdAt": "2020-04-01T14:57:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MzcwNg=="}], "type": "inlineReview"}, {"oid": "3eafab4221543496dd905de643bab67494b248e9", "url": "https://github.com/apache/cloudstack/commit/3eafab4221543496dd905de643bab67494b248e9", "message": "Move the snapshotDao.remove(snapshotId); (#4006)", "committedDate": "2020-04-01T12:27:27Z", "type": "commit"}, {"oid": "9847b841049154ee9124dbbed5354eadcaca301d", "url": "https://github.com/apache/cloudstack/commit/9847b841049154ee9124dbbed5354eadcaca301d", "message": "Fix deletesnapshot worflow to handle both snapshots created in primary storage and snapshots backed up to secondary storage", "committedDate": "2020-04-04T14:21:57Z", "type": "commit"}, {"oid": "e4bef7b6434cd35b52ec0fb12a8729397465054a", "url": "https://github.com/apache/cloudstack/commit/e4bef7b6434cd35b52ec0fb12a8729397465054a", "message": "Fix extra space", "committedDate": "2020-04-04T14:38:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkxNTcyMA==", "url": "https://github.com/apache/cloudstack/pull/3969#discussion_r403915720", "bodyText": "@harikrishna-patnala can you factor this bit out, please?", "author": "DaanHoogland", "createdAt": "2020-04-06T08:31:16Z", "path": "engine/storage/snapshot/src/main/java/org/apache/cloudstack/storage/snapshot/DefaultSnapshotStrategy.java", "diffHunk": "@@ -285,7 +284,27 @@ public boolean deleteSnapshot(Long snapshotId) {\n             }\n         }\n \n-        boolean deletedOnPrimary = deleteSnapshotOnPrimary(snapshotId);\n+        boolean deletedOnPrimary = false;\n+        snapshotVO = snapshotDao.findById(snapshotId);\n+        SnapshotInfo snapshotOnPrimaryInfo = snapshotDataFactory.getSnapshot(snapshotId, DataStoreRole.Primary);\n+        if (snapshotVO != null && snapshotVO.getState() == Snapshot.State.Destroyed) {\n+            deletedOnPrimary = deleteSnapshotOnPrimary(snapshotId, snapshotOnPrimaryInfo);\n+        } else {\n+            // This is to handle snapshots which are created only on primary when snapshot.backup.to.secondary is set to false. \n+            SnapshotObject obj = (SnapshotObject) snapshotOnPrimaryInfo;\n+            try {\n+                obj.processEvent(Snapshot.Event.DestroyRequested);\n+                deletedOnPrimary = deleteSnapshotOnPrimary(snapshotId, snapshotOnPrimaryInfo);\n+                if (!deletedOnPrimary) {\n+                    obj.processEvent(Snapshot.Event.OperationFailed);\n+                } else {\n+                    obj.processEvent(Snapshot.Event.OperationSucceeded);\n+                }\n+            } catch (NoTransitionException e) {\n+            s_logger.debug(\"Failed to set the state to destroying: \", e);\n+            return false;\n+            }\n+        }", "originalCommit": "9847b841049154ee9124dbbed5354eadcaca301d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkxNTc2NA==", "url": "https://github.com/apache/cloudstack/pull/3969#discussion_r403915764", "bodyText": "and than factor this bit out again?", "author": "DaanHoogland", "createdAt": "2020-04-06T08:31:22Z", "path": "engine/storage/snapshot/src/main/java/org/apache/cloudstack/storage/snapshot/DefaultSnapshotStrategy.java", "diffHunk": "@@ -285,7 +284,27 @@ public boolean deleteSnapshot(Long snapshotId) {\n             }\n         }\n \n-        boolean deletedOnPrimary = deleteSnapshotOnPrimary(snapshotId);\n+        boolean deletedOnPrimary = false;\n+        snapshotVO = snapshotDao.findById(snapshotId);\n+        SnapshotInfo snapshotOnPrimaryInfo = snapshotDataFactory.getSnapshot(snapshotId, DataStoreRole.Primary);\n+        if (snapshotVO != null && snapshotVO.getState() == Snapshot.State.Destroyed) {\n+            deletedOnPrimary = deleteSnapshotOnPrimary(snapshotId, snapshotOnPrimaryInfo);\n+        } else {\n+            // This is to handle snapshots which are created only on primary when snapshot.backup.to.secondary is set to false. \n+            SnapshotObject obj = (SnapshotObject) snapshotOnPrimaryInfo;\n+            try {\n+                obj.processEvent(Snapshot.Event.DestroyRequested);\n+                deletedOnPrimary = deleteSnapshotOnPrimary(snapshotId, snapshotOnPrimaryInfo);\n+                if (!deletedOnPrimary) {\n+                    obj.processEvent(Snapshot.Event.OperationFailed);\n+                } else {\n+                    obj.processEvent(Snapshot.Event.OperationSucceeded);\n+                }\n+            } catch (NoTransitionException e) {\n+            s_logger.debug(\"Failed to set the state to destroying: \", e);\n+            return false;\n+            }", "originalCommit": "9847b841049154ee9124dbbed5354eadcaca301d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkxNzU4NQ==", "url": "https://github.com/apache/cloudstack/pull/3969#discussion_r403917585", "bodyText": "this comment does not seem to be in alignment with the code. How do we conclude that we are at this point in code because of the global setting 'snapshot.backup.to.secondary'?", "author": "DaanHoogland", "createdAt": "2020-04-06T08:34:22Z", "path": "engine/storage/snapshot/src/main/java/org/apache/cloudstack/storage/snapshot/DefaultSnapshotStrategy.java", "diffHunk": "@@ -285,7 +284,27 @@ public boolean deleteSnapshot(Long snapshotId) {\n             }\n         }\n \n-        boolean deletedOnPrimary = deleteSnapshotOnPrimary(snapshotId);\n+        boolean deletedOnPrimary = false;\n+        snapshotVO = snapshotDao.findById(snapshotId);\n+        SnapshotInfo snapshotOnPrimaryInfo = snapshotDataFactory.getSnapshot(snapshotId, DataStoreRole.Primary);\n+        if (snapshotVO != null && snapshotVO.getState() == Snapshot.State.Destroyed) {\n+            deletedOnPrimary = deleteSnapshotOnPrimary(snapshotId, snapshotOnPrimaryInfo);\n+        } else {\n+            // This is to handle snapshots which are created only on primary when snapshot.backup.to.secondary is set to false. ", "originalCommit": "9847b841049154ee9124dbbed5354eadcaca301d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzNzIzNw==", "url": "https://github.com/apache/cloudstack/pull/3969#discussion_r403937237", "bodyText": "There will be only 'Primary' store entry in snapshot_store_ref table for a snapshot created when snapshot.backup.to.secondary is set to false. so deletion of snapshot on secondary store will fail and it won't mark snapshot as destroyed and then goes to 'else' case. In other case (snapshot.backup.to.secondary is set to true) 'Image' and 'Primary' entries will be there in which it goes to 'if' case.", "author": "harikrishna-patnala", "createdAt": "2020-04-06T09:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkxNzU4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkxODAzNA==", "url": "https://github.com/apache/cloudstack/pull/3969#discussion_r403918034", "bodyText": "indent?", "author": "DaanHoogland", "createdAt": "2020-04-06T08:35:08Z", "path": "engine/storage/snapshot/src/main/java/org/apache/cloudstack/storage/snapshot/DefaultSnapshotStrategy.java", "diffHunk": "@@ -285,7 +284,27 @@ public boolean deleteSnapshot(Long snapshotId) {\n             }\n         }\n \n-        boolean deletedOnPrimary = deleteSnapshotOnPrimary(snapshotId);\n+        boolean deletedOnPrimary = false;\n+        snapshotVO = snapshotDao.findById(snapshotId);\n+        SnapshotInfo snapshotOnPrimaryInfo = snapshotDataFactory.getSnapshot(snapshotId, DataStoreRole.Primary);\n+        if (snapshotVO != null && snapshotVO.getState() == Snapshot.State.Destroyed) {\n+            deletedOnPrimary = deleteSnapshotOnPrimary(snapshotId, snapshotOnPrimaryInfo);\n+        } else {\n+            // This is to handle snapshots which are created only on primary when snapshot.backup.to.secondary is set to false. \n+            SnapshotObject obj = (SnapshotObject) snapshotOnPrimaryInfo;\n+            try {\n+                obj.processEvent(Snapshot.Event.DestroyRequested);\n+                deletedOnPrimary = deleteSnapshotOnPrimary(snapshotId, snapshotOnPrimaryInfo);\n+                if (!deletedOnPrimary) {\n+                    obj.processEvent(Snapshot.Event.OperationFailed);\n+                } else {\n+                    obj.processEvent(Snapshot.Event.OperationSucceeded);\n+                }\n+            } catch (NoTransitionException e) {\n+            s_logger.debug(\"Failed to set the state to destroying: \", e);\n+            return false;", "originalCommit": "9847b841049154ee9124dbbed5354eadcaca301d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ad26c8fa3bda01d906dda1ce331cfd82eb506995", "url": "https://github.com/apache/cloudstack/commit/ad26c8fa3bda01d906dda1ce331cfd82eb506995", "message": "refactor out separate handling methods for secondary and primary (reducing returns)", "committedDate": "2020-04-06T10:50:14Z", "type": "commit"}, {"oid": "1be6b999f2339a0b5665f4ff1dfc14265a156c30", "url": "https://github.com/apache/cloudstack/commit/1be6b999f2339a0b5665f4ff1dfc14265a156c30", "message": "return false on unexpected error or log when expected", "committedDate": "2020-04-06T18:29:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxOTA4Mg==", "url": "https://github.com/apache/cloudstack/pull/3969#discussion_r404319082", "bodyText": "I guess that instead of null == deletedOnSecondary && deletedOnSecondary the it should be null == deletedOnPrimary && deletedOnSecondary, right? Or deletedOnSecondary != null && deletedOnSecondary.", "author": "GabrielBrascher", "createdAt": "2020-04-06T18:59:40Z", "path": "engine/storage/snapshot/src/main/java/org/apache/cloudstack/storage/snapshot/DefaultSnapshotStrategy.java", "diffHunk": "@@ -257,21 +257,23 @@ public boolean deleteSnapshot(Long snapshotId) {\n             return true;\n         }\n \n-        if (!Snapshot.State.BackedUp.equals(snapshotVO.getState()) && !Snapshot.State.Error.equals(snapshotVO.getState()) &&\n+        if (!Snapshot.State.BackedUp.equals(snapshotVO.getState()) &&\n                 !Snapshot.State.Destroying.equals(snapshotVO.getState())) {\n             throw new InvalidParameterValueException(\"Can't delete snapshotshot \" + snapshotId + \" due to it is in \" + snapshotVO.getState() + \" Status\");\n         }\n \n-        boolean deletedOnSecondary = deleteOnSecondaryIfNeeded(snapshotId);\n+        Boolean deletedOnSecondary = deleteOnSecondaryIfNeeded(snapshotId);\n         boolean deletedOnPrimary = deleteOnPrimaryIfNeeded(snapshotId);\n \n         if (deletedOnPrimary) {\n             s_logger.debug(String.format(\"Successfully deleted snapshot (id: %d) on primary storage.\", snapshotId));\n-        } else if (deletedOnSecondary) {\n-            s_logger.debug(String.format(\"The snapshot was deleted on secondary storage. Could not find/delete snapshot (id: %d) on primary storage.\", snapshotId));\n+        } else {\n+            s_logger.debug(String.format(\"The snapshot (id: %d) could not be found/deleted on primary storage.\", snapshotId));\n         }\n-\n-        return deletedOnSecondary || deletedOnPrimary;\n+        if (null == deletedOnSecondary && deletedOnSecondary) {", "originalCommit": "1be6b999f2339a0b5665f4ff1dfc14265a156c30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0NDg3Mg==", "url": "https://github.com/apache/cloudstack/pull/3969#discussion_r404344872", "bodyText": "yes should be !=, tnx (it's late)", "author": "DaanHoogland", "createdAt": "2020-04-06T19:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxOTA4Mg=="}], "type": "inlineReview"}, {"oid": "20cb0b23b2b818a7b7e6117fdb538f3a40b26a35", "url": "https://github.com/apache/cloudstack/commit/20cb0b23b2b818a7b7e6117fdb538f3a40b26a35", "message": "!= instead of ==", "committedDate": "2020-04-06T19:44:57Z", "type": "commit"}, {"oid": "0aa1190990d851deb15b9863d38d3d35f7fb8c6b", "url": "https://github.com/apache/cloudstack/commit/0aa1190990d851deb15b9863d38d3d35f7fb8c6b", "message": "secondary instead of backup storage", "committedDate": "2020-04-06T20:28:03Z", "type": "commit"}, {"oid": "ae1dad5a1f66e3ee8bc42cbd67713fafadfd37ff", "url": "https://github.com/apache/cloudstack/commit/ae1dad5a1f66e3ee8bc42cbd67713fafadfd37ff", "message": "init to null", "committedDate": "2020-04-07T07:23:40Z", "type": "commit"}, {"oid": "d62b54b7cafd7e2c399843a4245bff475a00504b", "url": "https://github.com/apache/cloudstack/commit/d62b54b7cafd7e2c399843a4245bff475a00504b", "message": "Handle snapshot deletion on primary storage. When primary store ref not found for snapshot do not fail the operation.", "committedDate": "2020-04-09T08:23:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1NDEwOQ==", "url": "https://github.com/apache/cloudstack/pull/3969#discussion_r406054109", "bodyText": "no extra return please; this means deletedOnPrimary = true and we fall through?", "author": "DaanHoogland", "createdAt": "2020-04-09T08:51:13Z", "path": "engine/storage/snapshot/src/main/java/org/apache/cloudstack/storage/snapshot/DefaultSnapshotStrategy.java", "diffHunk": "@@ -287,18 +287,25 @@ private boolean deleteOnPrimaryIfNeeded(Long snapshotId) {\n             // Here we handle snapshots which are to be deleted but are not marked as destroyed yet.\n             // This may occur for instance when they are created only on primary because\n             // snapshot.backup.to.secondary was set to false.\n-            SnapshotObject obj = (SnapshotObject) snapshotOnPrimaryInfo;\n-            try {\n-                obj.processEvent(Snapshot.Event.DestroyRequested);\n-                deletedOnPrimary = deleteSnapshotOnPrimary(snapshotId, snapshotOnPrimaryInfo);\n-                if (!deletedOnPrimary) {\n-                    obj.processEvent(Snapshot.Event.OperationFailed);\n-                } else {\n-                    obj.processEvent(Snapshot.Event.OperationSucceeded);\n+            if (snapshotOnPrimaryInfo == null) {\n+                s_logger.debug(\"Snapshot id:\" + snapshotId + \" not found on primary storage, skipping snapshot deletion on primary and marking it destroyed\");\n+                snapshotVO.setState(Snapshot.State.Destroyed);\n+                snapshotDao.update(snapshotId, snapshotVO);\n+                return true;", "originalCommit": "d62b54b7cafd7e2c399843a4245bff475a00504b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1NjY3Mw==", "url": "https://github.com/apache/cloudstack/pull/3969#discussion_r406056673", "bodyText": "can you surround debug statements that include string manupulation in teh paramater list with if (LOG.isDebugEnables()) {} please", "author": "DaanHoogland", "createdAt": "2020-04-09T08:55:36Z", "path": "engine/storage/snapshot/src/main/java/org/apache/cloudstack/storage/snapshot/DefaultSnapshotStrategy.java", "diffHunk": "@@ -352,14 +359,21 @@ private boolean deleteSnapshotOnSecondaryStorage(Long snapshotId, SnapshotInfo s\n     }\n \n     /**\n-     * Deletes the snapshot on primary storage. It can return false when the snapshot was not stored on primary storage; however this does not means that it failed to delete the snapshot. </br>\n-     * In case of failure, it will throw one of the following exceptions: CloudRuntimeException, InterruptedException, or ExecutionException. </br>\n+     * Deletes the snapshot on primary storage. It returns true when the snapshot was not found on primary storage; </br>\n+     * In case of failure while deleting the snapshot, it will throw one of the following exceptions: CloudRuntimeException, InterruptedException, or ExecutionException. </br>\n      */\n     private boolean deleteSnapshotOnPrimary(Long snapshotId, SnapshotInfo snapshotOnPrimaryInfo) {\n         SnapshotDataStoreVO snapshotOnPrimary = snapshotStoreDao.findBySnapshot(snapshotId, DataStoreRole.Primary);\n-        if (isSnapshotOnPrimaryStorage(snapshotId) && snapshotSvr.deleteSnapshot(snapshotOnPrimaryInfo)) {\n-            snapshotOnPrimary.setState(State.Destroyed);\n-            snapshotStoreDao.update(snapshotOnPrimary.getId(), snapshotOnPrimary);\n+        if (isSnapshotOnPrimaryStorage(snapshotId)) {\n+            s_logger.debug(\"Snapshot reference is found on primary storage for snapshot id:\" + snapshotId + \", performing snapshot deletion on primary\");", "originalCommit": "d62b54b7cafd7e2c399843a4245bff475a00504b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ca94242a91276decda0ccb1f81dd621288d9c385", "url": "https://github.com/apache/cloudstack/commit/ca94242a91276decda0ccb1f81dd621288d9c385", "message": "Fix debug levels on log messages", "committedDate": "2020-04-09T09:17:22Z", "type": "commit"}]}