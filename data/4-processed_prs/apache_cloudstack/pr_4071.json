{"pr_number": 4071, "pr_title": "Dynamic roles improvements", "pr_createdAt": "2020-05-11T10:50:25Z", "pr_url": "https://github.com/apache/cloudstack/pull/4071", "timeline": [{"oid": "f6c039147273a307175aec30583ec22fc6acc940", "url": "https://github.com/apache/cloudstack/commit/f6c039147273a307175aec30583ec22fc6acc940", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table.", "committedDate": "2020-05-13T15:48:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNTMxNA==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426535314", "bodyText": "nit - Make description more verbose, something like 'Imports a role based on provided map of rule permissions...'", "author": "rhtyd", "createdAt": "2020-05-18T10:45:38Z", "path": "api/src/main/java/org/apache/cloudstack/api/command/admin/acl/ImportRoleCmd.java", "diffHunk": "@@ -0,0 +1,139 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.api.command.admin.acl;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.cloudstack.acl.Role;\n+import org.apache.cloudstack.acl.RoleType;\n+import org.apache.cloudstack.acl.Rule;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiArgValidator;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.RoleResponse;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.commons.collections.MapUtils;\n+\n+import com.cloud.user.Account;\n+import com.google.common.base.Strings;\n+\n+@APICommand(name = ImportRoleCmd.APINAME, description = \"Imports a role\", responseObject = RoleResponse.class,", "originalCommit": "f6c039147273a307175aec30583ec22fc6acc940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNTI3NQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r433405275", "bodyText": "nit - Make description more verbose, something like 'Imports a role based on provided map of rule permissions...'\n\nUpdated", "author": "sureshanaparti", "createdAt": "2020-06-01T18:16:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNTMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNjEzNQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426536135", "bodyText": "nit - fix description to say what happens in case of a role name matches (i.e. explain for the users that it will override/replace the previosly created role with the provided parameters).", "author": "rhtyd", "createdAt": "2020-05-18T10:47:09Z", "path": "api/src/main/java/org/apache/cloudstack/api/command/admin/acl/ImportRoleCmd.java", "diffHunk": "@@ -0,0 +1,139 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.api.command.admin.acl;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.cloudstack.acl.Role;\n+import org.apache.cloudstack.acl.RoleType;\n+import org.apache.cloudstack.acl.Rule;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiArgValidator;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.RoleResponse;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.commons.collections.MapUtils;\n+\n+import com.cloud.user.Account;\n+import com.google.common.base.Strings;\n+\n+@APICommand(name = ImportRoleCmd.APINAME, description = \"Imports a role\", responseObject = RoleResponse.class,\n+        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n+        since = \"4.15.0\",\n+        authorized = {RoleType.Admin})\n+public class ImportRoleCmd extends RoleCmd {\n+    public static final String APINAME = \"importRole\";\n+\n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Parameter(name = ApiConstants.NAME, type = CommandType.STRING, required = true,\n+            description = \"Creates a role with this unique name\", validations = {ApiArgValidator.NotNullOrEmpty})\n+    private String roleName;\n+\n+    @Parameter(name = ApiConstants.RULES, type = CommandType.MAP, required = true,\n+            description = \"Rules param list, rule and permission is must. Example: rules[0].rule=create*&rules[0].permission=allow&rules[0].description=create%20rule&rules[1].rule=list*&rules[1].permission=allow&rules[1].description=listing\")\n+    private Map rules;\n+\n+    @Parameter(name = ApiConstants.FORCED, type = CommandType.BOOLEAN,\n+            description = \"Force create a role\")", "originalCommit": "f6c039147273a307175aec30583ec22fc6acc940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNTQwNA==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r433405404", "bodyText": "nit - fix description to say what happens in case of a role name matches (i.e. explain for the users that it will override/replace the previosly created role with the provided parameters).\n\nUpdated", "author": "sureshanaparti", "createdAt": "2020-06-01T18:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNjEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNzE1Nw==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426537157", "bodyText": "I get the reuse with the createRole API, but do we want these parameters for the updateRole API?", "author": "rhtyd", "createdAt": "2020-05-18T10:49:01Z", "path": "api/src/main/java/org/apache/cloudstack/api/command/admin/acl/RoleCmd.java", "diffHunk": "@@ -18,11 +18,41 @@\n package org.apache.cloudstack.api.command.admin.acl;\n \n import org.apache.cloudstack.acl.Role;\n+import org.apache.cloudstack.acl.RoleType;\n+import org.apache.cloudstack.api.ApiConstants;\n import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n import org.apache.cloudstack.api.response.RoleResponse;\n \n+import com.google.common.base.Strings;\n+\n public abstract class RoleCmd extends BaseCmd {\n \n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Parameter(name = ApiConstants.TYPE, type = CommandType.STRING, description = \"The type of the role, valid options are: Admin, ResourceAdmin, DomainAdmin, User\")\n+    private String roleType;", "originalCommit": "f6c039147273a307175aec30583ec22fc6acc940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5ODM0OA==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r433398348", "bodyText": "I get the reuse with the createRole API, but do we want these parameters for the updateRole API?\n\nyep, UpdateRoleCmd also inherits the same RoleCmd.", "author": "sureshanaparti", "createdAt": "2020-06-01T18:02:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNzE1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNzQ5MQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426537491", "bodyText": "nit - can you also explain what it means for a role to be default (default could be misleading, perhaps what you mean is if the role is built-in).", "author": "rhtyd", "createdAt": "2020-05-18T10:49:43Z", "path": "api/src/main/java/org/apache/cloudstack/api/response/RoleResponse.java", "diffHunk": "@@ -43,6 +43,10 @@\n     @Param(description = \"the description of the role\")\n     private String roleDescription;\n \n+    @SerializedName(ApiConstants.IS_DEFAULT)\n+    @Param(description = \"true if role is default, false otherwise\")", "originalCommit": "f6c039147273a307175aec30583ec22fc6acc940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwMDUzNQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r433400535", "bodyText": "default meaning this role(s) comes by default with cloudstack installation / upgrade. \"default\" used, in sync with similar usage at the offerings, accounts in CS.", "author": "sureshanaparti", "createdAt": "2020-06-01T18:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNzQ5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzODA1MQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426538051", "bodyText": "We want the DB changes in the 4.14 -> 4.15 upgrade path.", "author": "rhtyd", "createdAt": "2020-05-18T10:50:50Z", "path": "engine/schema/src/main/resources/META-INF/db/schema-41310to41400-cleanup.sql", "diffHunk": "@@ -26,3 +26,6 @@ UPDATE `cloud`.`storage_pool` SET path=\"/var/lib/libvirt/images\" WHERE path=\"/va\n \n -- remove (one of) duplicate unique indexes from Region table\n ALTER TABLE `region` DROP INDEX `id_3`;\n+\n+-- remove the old NetApp storage APIs (unsupported since 4.12) from role_permissions\n+DELETE from `cloud`.`role_permissions` WHERE rule IN ('createPool', 'modifyPool', 'deletePool', 'listPools', 'associateLun', 'dissociateLun', 'createLunOnFiler', 'destroyLunOnFiler', 'listLunsOnFiler', 'createVolumeOnFiler', 'destroyVolumeOnFiler', 'listVolumesOnFiler');", "originalCommit": "f6c039147273a307175aec30583ec22fc6acc940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNjAwNg==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r433406006", "bodyText": "We want the DB changes in the 4.14 -> 4.15 upgrade path.\n\nMoved to 4.15 upgrade path", "author": "sureshanaparti", "createdAt": "2020-06-01T18:17:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzODA1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzODEwNA==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426538104", "bodyText": "We want the DB changes in the 4.14 -> 4.15 upgrade path.", "author": "rhtyd", "createdAt": "2020-05-18T10:50:56Z", "path": "engine/schema/src/main/resources/META-INF/db/schema-41310to41400.sql", "diffHunk": "@@ -379,3 +379,81 @@ CREATE TABLE IF NOT EXISTS `cloud`.`kubernetes_cluster_details` (\n     PRIMARY KEY(`id`),\n     CONSTRAINT `fk_kubernetes_cluster_details__cluster_id` FOREIGN KEY `fk_kubernetes_cluster_details__cluster_id`(`cluster_id`) REFERENCES `kubernetes_cluster`(`id`) ON DELETE CASCADE\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+", "originalCommit": "f6c039147273a307175aec30583ec22fc6acc940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNzMyOA==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r433407328", "bodyText": "We want the DB changes in the 4.14 -> 4.15 upgrade path.\n\nMoved to 4.15 upgrade path", "author": "sureshanaparti", "createdAt": "2020-06-01T18:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzODEwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzODM5NQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426538395", "bodyText": "Please check in code if there exists any restriction on ID for default/built-in roles.", "author": "rhtyd", "createdAt": "2020-05-18T10:51:29Z", "path": "engine/schema/src/main/resources/META-INF/db/schema-41310to41400.sql", "diffHunk": "@@ -379,3 +379,81 @@ CREATE TABLE IF NOT EXISTS `cloud`.`kubernetes_cluster_details` (\n     PRIMARY KEY(`id`),\n     CONSTRAINT `fk_kubernetes_cluster_details__cluster_id` FOREIGN KEY `fk_kubernetes_cluster_details__cluster_id`(`cluster_id`) REFERENCES `kubernetes_cluster`(`id`) ON DELETE CASCADE\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+\n+ALTER TABLE `cloud`.`roles` ADD COLUMN `is_default` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'is this a default role';\n+UPDATE `cloud`.`roles` SET `is_default` = 1 WHERE id IN (1, 2, 3, 4);", "originalCommit": "f6c039147273a307175aec30583ec22fc6acc940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwODk2Mw==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r433408963", "bodyText": "Please check in code if there exists any restriction on ID for default/built-in roles.\n\nThe role ids (1,2,3,4) are hard-coded when upgraded to dynamic roles access checker. The same roles are now marked as default roles in cloudstack.", "author": "sureshanaparti", "createdAt": "2020-06-01T18:23:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzODM5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzODk0OA==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426538948", "bodyText": "Why not change the name to reflect these are default or built-in roles, should we be renaming any existing roles matching this? It could lead to side-effects, I would've preferred failing an upgrade instead of silent override.", "author": "rhtyd", "createdAt": "2020-05-18T10:52:36Z", "path": "engine/schema/src/main/resources/META-INF/db/schema-41310to41400.sql", "diffHunk": "@@ -379,3 +379,81 @@ CREATE TABLE IF NOT EXISTS `cloud`.`kubernetes_cluster_details` (\n     PRIMARY KEY(`id`),\n     CONSTRAINT `fk_kubernetes_cluster_details__cluster_id` FOREIGN KEY `fk_kubernetes_cluster_details__cluster_id`(`cluster_id`) REFERENCES `kubernetes_cluster`(`id`) ON DELETE CASCADE\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+\n+ALTER TABLE `cloud`.`roles` ADD COLUMN `is_default` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'is this a default role';\n+UPDATE `cloud`.`roles` SET `is_default` = 1 WHERE id IN (1, 2, 3, 4);\n+\n+-- Updated Default CloudStack roles with read-only and support admin and user roles\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only Admin', 'Admin', 'Default read-only admin role', 1) ON DUPLICATE KEY UPDATE name=name;", "originalCommit": "f6c039147273a307175aec30583ec22fc6acc940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMTE4OQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r433411189", "bodyText": "this is in sync with existing default roles with id (1,2,3,4). Shall I prepend all these role names with \"Default\" ?", "author": "sureshanaparti", "createdAt": "2020-06-01T18:27:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzODk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzOTYxNw==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426539617", "bodyText": "Should the rule here be list* or get* etc.? Or was rule declared somewhere I missed ?", "author": "rhtyd", "createdAt": "2020-05-18T10:53:48Z", "path": "engine/schema/src/main/resources/META-INF/db/schema-41310to41400.sql", "diffHunk": "@@ -379,3 +379,81 @@ CREATE TABLE IF NOT EXISTS `cloud`.`kubernetes_cluster_details` (\n     PRIMARY KEY(`id`),\n     CONSTRAINT `fk_kubernetes_cluster_details__cluster_id` FOREIGN KEY `fk_kubernetes_cluster_details__cluster_id`(`cluster_id`) REFERENCES `kubernetes_cluster`(`id`) ON DELETE CASCADE\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+\n+ALTER TABLE `cloud`.`roles` ADD COLUMN `is_default` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'is this a default role';\n+UPDATE `cloud`.`roles` SET `is_default` = 1 WHERE id IN (1, 2, 3, 4);\n+\n+-- Updated Default CloudStack roles with read-only and support admin and user roles\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only Admin', 'Admin', 'Default read-only admin role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only User', 'User', 'Default read-only user role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Admin-Support', 'Admin', 'Default admin support role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'User-Support', 'User', 'Default user support role', 1) ON DUPLICATE KEY UPDATE name=name;\n+\n+-- Role permissions for Read-Only Admin\n+SELECT id INTO @ReadOnlyAdminRoleId FROM `cloud`.`roles` WHERE name = 'Read-Only Admin' AND is_default = 1;\n+SELECT @ReadOnlyAdminSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'list*', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'getUploadParamsFor*', 'DENY', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'get*', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'cloudianIsEnabled', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaIsEnabled', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaTariffList', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaSummary', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, '*', 'DENY', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+\n+-- Role permissions for Read-Only User\n+SELECT id INTO @ReadOnlyUserRoleId FROM `cloud`.`roles` WHERE name = 'Read-Only User' AND is_default = 1;\n+SELECT @ReadOnlyUserSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) SELECT UUID(), @ReadOnlyUserRoleId, rule, 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1 FROM `cloud`.`role_permissions` WHERE role_id = 4 AND permission = 'ALLOW' AND rule LIKE 'list%';", "originalCommit": "f6c039147273a307175aec30583ec22fc6acc940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNzAyMQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r433407021", "bodyText": "Should the rule here be list* or get* etc.? Or was rule declared somewhere I missed ?\n\nthe 'list*' and 'get*' rules for the User role are added for read-only user", "author": "sureshanaparti", "createdAt": "2020-06-01T18:19:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzOTYxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzOTk1NA==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426539954", "bodyText": "Same as above about the rule use?", "author": "rhtyd", "createdAt": "2020-05-18T10:54:21Z", "path": "engine/schema/src/main/resources/META-INF/db/schema-41310to41400.sql", "diffHunk": "@@ -379,3 +379,81 @@ CREATE TABLE IF NOT EXISTS `cloud`.`kubernetes_cluster_details` (\n     PRIMARY KEY(`id`),\n     CONSTRAINT `fk_kubernetes_cluster_details__cluster_id` FOREIGN KEY `fk_kubernetes_cluster_details__cluster_id`(`cluster_id`) REFERENCES `kubernetes_cluster`(`id`) ON DELETE CASCADE\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+\n+ALTER TABLE `cloud`.`roles` ADD COLUMN `is_default` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'is this a default role';\n+UPDATE `cloud`.`roles` SET `is_default` = 1 WHERE id IN (1, 2, 3, 4);\n+\n+-- Updated Default CloudStack roles with read-only and support admin and user roles\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only Admin', 'Admin', 'Default read-only admin role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only User', 'User', 'Default read-only user role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Admin-Support', 'Admin', 'Default admin support role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'User-Support', 'User', 'Default user support role', 1) ON DUPLICATE KEY UPDATE name=name;\n+\n+-- Role permissions for Read-Only Admin\n+SELECT id INTO @ReadOnlyAdminRoleId FROM `cloud`.`roles` WHERE name = 'Read-Only Admin' AND is_default = 1;\n+SELECT @ReadOnlyAdminSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'list*', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'getUploadParamsFor*', 'DENY', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'get*', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'cloudianIsEnabled', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaIsEnabled', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaTariffList', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaSummary', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, '*', 'DENY', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+\n+-- Role permissions for Read-Only User\n+SELECT id INTO @ReadOnlyUserRoleId FROM `cloud`.`roles` WHERE name = 'Read-Only User' AND is_default = 1;\n+SELECT @ReadOnlyUserSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) SELECT UUID(), @ReadOnlyUserRoleId, rule, 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1 FROM `cloud`.`role_permissions` WHERE role_id = 4 AND permission = 'ALLOW' AND rule LIKE 'list%';\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) SELECT UUID(), @ReadOnlyUserRoleId, rule, 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1 FROM `cloud`.`role_permissions` WHERE role_id = 4 AND permission = 'ALLOW' AND rule LIKE 'get%' AND rule NOT LIKE 'getUploadParamsFor%';\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, 'cloudianIsEnabled', 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, 'quotaIsEnabled', 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, 'quotaTariffList', 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, 'quotaSummary', 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, '*', 'DENY', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+\n+-- Role permissions for Admin-Support\n+SELECT id INTO @AdminSupportRoleId FROM `cloud`.`roles` WHERE name = 'Admin-Support' AND is_default = 1;\n+SELECT @AdminSupportSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) SELECT UUID(), @AdminSupportRoleId, rule, 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1 FROM `cloud`.`role_permissions` WHERE role_id = @ReadOnlyAdminRoleId AND permission = 'ALLOW';", "originalCommit": "f6c039147273a307175aec30583ec22fc6acc940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMjE3NQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r433412175", "bodyText": "Same as above about the rule use?\n\nrules for the Admin support role are added from read-only admin with additional api rules", "author": "sureshanaparti", "createdAt": "2020-06-01T18:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzOTk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0MDA0OA==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426540048", "bodyText": "Same as above about the rule use?", "author": "rhtyd", "createdAt": "2020-05-18T10:54:30Z", "path": "engine/schema/src/main/resources/META-INF/db/schema-41310to41400.sql", "diffHunk": "@@ -379,3 +379,81 @@ CREATE TABLE IF NOT EXISTS `cloud`.`kubernetes_cluster_details` (\n     PRIMARY KEY(`id`),\n     CONSTRAINT `fk_kubernetes_cluster_details__cluster_id` FOREIGN KEY `fk_kubernetes_cluster_details__cluster_id`(`cluster_id`) REFERENCES `kubernetes_cluster`(`id`) ON DELETE CASCADE\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n+\n+ALTER TABLE `cloud`.`roles` ADD COLUMN `is_default` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'is this a default role';\n+UPDATE `cloud`.`roles` SET `is_default` = 1 WHERE id IN (1, 2, 3, 4);\n+\n+-- Updated Default CloudStack roles with read-only and support admin and user roles\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only Admin', 'Admin', 'Default read-only admin role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only User', 'User', 'Default read-only user role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Admin-Support', 'Admin', 'Default admin support role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'User-Support', 'User', 'Default user support role', 1) ON DUPLICATE KEY UPDATE name=name;\n+\n+-- Role permissions for Read-Only Admin\n+SELECT id INTO @ReadOnlyAdminRoleId FROM `cloud`.`roles` WHERE name = 'Read-Only Admin' AND is_default = 1;\n+SELECT @ReadOnlyAdminSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'list*', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'getUploadParamsFor*', 'DENY', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'get*', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'cloudianIsEnabled', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaIsEnabled', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaTariffList', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, 'quotaSummary', 'ALLOW', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyAdminRoleId, '*', 'DENY', @ReadOnlyAdminSortOrder:=@ReadOnlyAdminSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+\n+-- Role permissions for Read-Only User\n+SELECT id INTO @ReadOnlyUserRoleId FROM `cloud`.`roles` WHERE name = 'Read-Only User' AND is_default = 1;\n+SELECT @ReadOnlyUserSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) SELECT UUID(), @ReadOnlyUserRoleId, rule, 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1 FROM `cloud`.`role_permissions` WHERE role_id = 4 AND permission = 'ALLOW' AND rule LIKE 'list%';\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) SELECT UUID(), @ReadOnlyUserRoleId, rule, 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1 FROM `cloud`.`role_permissions` WHERE role_id = 4 AND permission = 'ALLOW' AND rule LIKE 'get%' AND rule NOT LIKE 'getUploadParamsFor%';\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, 'cloudianIsEnabled', 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, 'quotaIsEnabled', 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, 'quotaTariffList', 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, 'quotaSummary', 'ALLOW', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @ReadOnlyUserRoleId, '*', 'DENY', @ReadOnlyUserSortOrder:=@ReadOnlyUserSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+\n+-- Role permissions for Admin-Support\n+SELECT id INTO @AdminSupportRoleId FROM `cloud`.`roles` WHERE name = 'Admin-Support' AND is_default = 1;\n+SELECT @AdminSupportSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) SELECT UUID(), @AdminSupportRoleId, rule, 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1 FROM `cloud`.`role_permissions` WHERE role_id = @ReadOnlyAdminRoleId AND permission = 'ALLOW';\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'prepareHostForMaintenance', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'cancelHostMaintenance', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'enableStorageMaintenance', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'cancelStorageMaintenance', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'createServiceOffering', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'createDiskOffering', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'createNetworkOffering', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'createVPCOffering', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'startVirtualMachine', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'stopVirtualMachine', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'rebootVirtualMachine', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'startKubernetesCluster', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'stopKubernetesCluster', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'attachVolume', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'detachVolume', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'uploadVolume', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'attachIso', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'detachIso', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'registerTemplate', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'registerIso', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, 'getUploadParamsFor*', 'ALLOW', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), @AdminSupportRoleId, '*', 'DENY', @AdminSupportSortOrder:=@AdminSupportSortOrder+1) ON DUPLICATE KEY UPDATE rule=rule;\n+\n+-- Role permissions for User-Support\n+SELECT id INTO @UserSupportRoleId FROM `cloud`.`roles` WHERE name = 'User-Support' AND is_default = 1;\n+SELECT @UserSupportSortOrder:=-1;\n+INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) SELECT UUID(), @UserSupportRoleId, rule, 'ALLOW', @UserSupportSortOrder:=@UserSupportSortOrder+1 FROM `cloud`.`role_permissions` WHERE role_id = @ReadOnlyUserRoleId AND permission = 'ALLOW';", "originalCommit": "f6c039147273a307175aec30583ec22fc6acc940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMjQyNw==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r433412427", "bodyText": "Same as above about the rule use?\n\nrules for the User support role are added from read-only user with additional api rules", "author": "sureshanaparti", "createdAt": "2020-06-01T18:30:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0MDA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0MDQ4NQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426540485", "bodyText": "nit - Can you improve the exception message?", "author": "rhtyd", "createdAt": "2020-05-18T10:55:18Z", "path": "server/src/main/java/org/apache/cloudstack/acl/RoleManagerImpl.java", "diffHunk": "@@ -146,10 +150,89 @@ public RoleVO doInTransaction(TransactionStatus status) {\n         });\n     }\n \n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_ROLE_CREATE, eventDescription = \"creating Role\")\n+    public Role createRole(String name, Role role, String description) {\n+        checkCallerAccess();\n+        return Transaction.execute(new TransactionCallback<RoleVO>() {\n+            @Override\n+            public RoleVO doInTransaction(TransactionStatus status) {\n+                RoleVO newRoleVO = roleDao.persist(new RoleVO(name, role.getRoleType(), description));\n+                if (newRoleVO == null) {\n+                    throw new CloudRuntimeException(\"Unable to add role into DB, is DB full?\");", "originalCommit": "f6c039147273a307175aec30583ec22fc6acc940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMjUzMQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r433412531", "bodyText": "nit - Can you improve the exception message?\n\nUpdated", "author": "sureshanaparti", "createdAt": "2020-06-01T18:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0MDQ4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0MTQ2NQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r426541465", "bodyText": "Here was a check which determined that the role was built-in, i.e. the first 4 roles treated as built-in and no changes to these 4 roles were allowed by using enum idx without requiring a db column for that.", "author": "rhtyd", "createdAt": "2020-05-18T10:57:09Z", "path": "server/src/main/java/org/apache/cloudstack/acl/RoleManagerImpl.java", "diffHunk": "@@ -159,9 +242,6 @@ public Role updateRole(final Role role, final String name, final RoleType roleTy\n             roleVO.setName(name);\n         }\n         if (roleType != null) {\n-            if (role.getId() <= RoleType.User.getId()) {", "originalCommit": "f6c039147273a307175aec30583ec22fc6acc940", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNDc4Nw==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r433404787", "bodyText": "@rhtyd agree that the role ids are compared against the role type enum earlier. now these roles, with ids (1,2,3,4) are marked as default roles, which is considered while updating or deleting the role. The role is already populated with db details.", "author": "sureshanaparti", "createdAt": "2020-06-01T18:15:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0MTQ2NQ=="}], "type": "inlineReview"}, {"oid": "7bb7f956fa4af56777fef3889cabd2d5cbd75f2e", "url": "https://github.com/apache/cloudstack/commit/7bb7f956fa4af56777fef3889cabd2d5cbd75f2e", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table.", "committedDate": "2020-06-01T17:59:17Z", "type": "forcePushed"}, {"oid": "80aaeaca55ae1638dbc7b39c255f5c26753248e4", "url": "https://github.com/apache/cloudstack/commit/80aaeaca55ae1638dbc7b39c255f5c26753248e4", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table.", "committedDate": "2020-06-01T18:31:17Z", "type": "forcePushed"}, {"oid": "51b45949a42e12f8e420ca1d96c8249e536b2c23", "url": "https://github.com/apache/cloudstack/commit/51b45949a42e12f8e420ca1d96c8249e536b2c23", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table.", "committedDate": "2020-06-09T07:01:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwMzg4MQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r437203881", "bodyText": "With a debugger I found that execution fails for mvn deploydb with:\n========> Processing upgrade: com.cloud.upgrade.DatabaseUpgradeChecker\n[WARNING] \njava.lang.reflect.InvocationTargetException\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)\n    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke (Method.java:566)\n    at org.codehaus.mojo.exec.ExecJavaMojo$1.run (ExecJavaMojo.java:297)\n    at java.lang.Thread.run (Thread.java:834)\nCaused by: com.cloud.utils.exception.CloudRuntimeException: Unable to upgrade the database\n    at com.cloud.upgrade.DatabaseUpgradeChecker.upgrade (DatabaseUpgradeChecker.java:271)\n    at com.cloud.upgrade.DatabaseUpgradeChecker.check (DatabaseUpgradeChecker.java:342)\n    at com.cloud.upgrade.DatabaseCreator.main (DatabaseCreator.java:217)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)\n    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke (Method.java:566)\n    at org.codehaus.mojo.exec.ExecJavaMojo$1.run (ExecJavaMojo.java:297)\n    at java.lang.Thread.run (Thread.java:834)\nCaused by: com.cloud.utils.exception.CloudRuntimeException: Unable to execute upgrade script\n    at com.cloud.upgrade.DatabaseUpgradeChecker.runScript (DatabaseUpgradeChecker.java:209)\n    at com.cloud.upgrade.DatabaseUpgradeChecker.upgrade (DatabaseUpgradeChecker.java:258)\n    at com.cloud.upgrade.DatabaseUpgradeChecker.check (DatabaseUpgradeChecker.java:342)\n    at com.cloud.upgrade.DatabaseCreator.main (DatabaseCreator.java:217)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)\n    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke (Method.java:566)\n    at org.codehaus.mojo.exec.ExecJavaMojo$1.run (ExecJavaMojo.java:297)\n    at java.lang.Thread.run (Thread.java:834)\nCaused by: java.sql.SQLException: Column index out of range.\n    at com.cloud.utils.db.ScriptRunner.runScript (ScriptRunner.java:185)\n    at com.cloud.utils.db.ScriptRunner.runScript (ScriptRunner.java:87)\n    at com.cloud.upgrade.DatabaseUpgradeChecker.runScript (DatabaseUpgradeChecker.java:203)\n    at com.cloud.upgrade.DatabaseUpgradeChecker.upgrade (DatabaseUpgradeChecker.java:258)\n    at com.cloud.upgrade.DatabaseUpgradeChecker.check (DatabaseUpgradeChecker.java:342)\n    at com.cloud.upgrade.DatabaseCreator.main (DatabaseCreator.java:217)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)\n    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke (Method.java:566)\n    at org.codehaus.mojo.exec.ExecJavaMojo$1.run (ExecJavaMojo.java:297)\n    at java.lang.Thread.run (Thread.java:834)", "author": "rhtyd", "createdAt": "2020-06-09T07:47:56Z", "path": "engine/schema/src/main/resources/META-INF/db/schema-41400to41500.sql", "diffHunk": "@@ -18,3 +18,81 @@\n --;\n -- Schema upgrade from 4.14.0.0 to 4.15.0.0\n --;\n+\n+ALTER TABLE `cloud`.`roles` ADD COLUMN `is_default` tinyint(1) NOT NULL DEFAULT '0' COMMENT 'is this a default role';\n+UPDATE `cloud`.`roles` SET `is_default` = 1 WHERE id IN (1, 2, 3, 4);\n+\n+-- Updated Default CloudStack roles with read-only and support admin and user roles\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only Admin', 'Admin', 'Default read-only admin role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Read-Only User', 'User', 'Default read-only user role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'Admin-Support', 'Admin', 'Default admin support role', 1) ON DUPLICATE KEY UPDATE name=name;\n+INSERT INTO `cloud`.`roles` (`uuid`, `name`, `role_type`, `description`, `is_default`) VALUES (UUID(), 'User-Support', 'User', 'Default user support role', 1) ON DUPLICATE KEY UPDATE name=name;\n+\n+-- Role permissions for Read-Only Admin\n+SELECT id INTO @ReadOnlyAdminRoleId FROM `cloud`.`roles` WHERE name = 'Read-Only Admin' AND is_default = 1;\n+SELECT @ReadOnlyAdminSortOrder:=-1;", "originalCommit": "51b45949a42e12f8e420ca1d96c8249e536b2c23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE5MTkxNg==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r439191916", "bodyText": "@rhtyd Moved permissions update to the Upgrade* class. Please check.", "author": "sureshanaparti", "createdAt": "2020-06-12T03:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwMzg4MQ=="}], "type": "inlineReview"}, {"oid": "794c215503d1b55b97119c91d072c2d3b1760c17", "url": "https://github.com/apache/cloudstack/commit/794c215503d1b55b97119c91d072c2d3b1760c17", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table.", "committedDate": "2020-06-11T07:03:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4NTIwNQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r439285205", "bodyText": "Minor nit - can we call the role 'SupportAdmin' and 'SupportUser'?", "author": "rhtyd", "createdAt": "2020-06-12T08:35:54Z", "path": "engine/schema/src/main/java/com/cloud/upgrade/dao/Upgrade41400to41500.java", "diffHunk": "@@ -235,6 +238,267 @@ private void updateSystemVmTemplates(final Connection conn) {\n         LOG.debug(\"Updating System Vm Template IDs Complete\");\n     }\n \n+    private void addRolePermissionsForNewReadOnlyAndSupportRoles(final Connection conn) {\n+        addRolePermissionsForReadOnlyAdmin(conn);\n+        addRolePermissionsForReadOnlyUser(conn);\n+        addRolePermissionsForAdminSupport(conn);\n+        addRolePermissionsForUserSupport(conn);", "originalCommit": "794c215503d1b55b97119c91d072c2d3b1760c17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkyNjY3NA==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r439926674", "bodyText": "Minor nit - can we call the role 'SupportAdmin' and 'SupportUser'?\n\nUpdated", "author": "sureshanaparti", "createdAt": "2020-06-15T04:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4NTIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4NTcwMA==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r439285700", "bodyText": "nit - Could be made less verbose by doing a loop on the API strings and add the string to the collection/list. Same for other parts of code.", "author": "rhtyd", "createdAt": "2020-06-12T08:36:55Z", "path": "engine/schema/src/main/java/com/cloud/upgrade/dao/Upgrade41400to41500.java", "diffHunk": "@@ -235,6 +238,267 @@ private void updateSystemVmTemplates(final Connection conn) {\n         LOG.debug(\"Updating System Vm Template IDs Complete\");\n     }\n \n+    private void addRolePermissionsForNewReadOnlyAndSupportRoles(final Connection conn) {\n+        addRolePermissionsForReadOnlyAdmin(conn);\n+        addRolePermissionsForReadOnlyUser(conn);\n+        addRolePermissionsForAdminSupport(conn);\n+        addRolePermissionsForUserSupport(conn);\n+    }\n+\n+    private void addRolePermissionsForReadOnlyAdmin(final Connection conn) {\n+        LOG.debug(\"Adding role permissions for new read-only admin role\");\n+        try {\n+            PreparedStatement pstmt = conn.prepareStatement(\"SELECT id FROM `cloud`.`roles` WHERE name = 'Read-Only Admin (Default)' AND is_default = 1\");\n+            ResultSet rs = pstmt.executeQuery();\n+            if (rs.next()) {\n+                long readOnlyAdminRoleId = rs.getLong(1);\n+                int readOnlyAdminSortOrder = 0;\n+                List<String> insertSqlForReadOnlyAdminRolePermissions = new ArrayList<String>();\n+                insertSqlForReadOnlyAdminRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'list*', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyAdminRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'getUploadParamsFor*', 'DENY', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyAdminRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'get*', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyAdminRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'cloudianIsEnabled', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyAdminRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'quotaIsEnabled', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyAdminRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'quotaTariffList', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyAdminRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'quotaSummary', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyAdminRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, '*', 'DENY', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+\n+                for(String insertSqlForReadOnlyAdmin : insertSqlForReadOnlyAdminRolePermissions) {\n+                    pstmt = conn.prepareStatement(insertSqlForReadOnlyAdmin);\n+                    pstmt.setLong(1, readOnlyAdminRoleId);\n+                    pstmt.setLong(2, readOnlyAdminSortOrder++);\n+                    pstmt.executeUpdate();\n+                }\n+            }\n+\n+            if (rs != null && !rs.isClosed())  {\n+                rs.close();\n+            }\n+            if (pstmt != null && !pstmt.isClosed())  {\n+                pstmt.close();\n+            }\n+            LOG.debug(\"Successfully added role permissions for new read-only admin role\");\n+        } catch (final SQLException e) {\n+            LOG.error(\"Exception while adding role permissions for read-only admin role: \" + e.getMessage());\n+            throw new CloudRuntimeException(\"Exception while adding role permissions for read-only admin role: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private void addRolePermissionsForReadOnlyUser(final Connection conn) {\n+        LOG.debug(\"Adding role permissions for new read-only user role\");\n+        try {\n+            PreparedStatement pstmt = conn.prepareStatement(\"SELECT id FROM `cloud`.`roles` WHERE name = 'Read-Only User (Default)' AND is_default = 1\");\n+            ResultSet rs = pstmt.executeQuery();\n+            if (rs.next()) {\n+                long readOnlyUserRoleId = rs.getLong(1);\n+                int readOnlyUserSortOrder = 0;\n+\n+                pstmt = conn.prepareStatement(\"SELECT rule FROM `cloud`.`role_permissions` WHERE role_id = 4 AND permission = 'ALLOW' AND rule LIKE 'list%' ORDER BY sort_order\");\n+                ResultSet rsRolePermissions = pstmt.executeQuery();\n+\n+                while (rsRolePermissions.next()) {\n+                    String rule = rsRolePermissions.getString(1);\n+                    pstmt = conn.prepareStatement(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, ?, 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                    pstmt.setLong(1, readOnlyUserRoleId);\n+                    pstmt.setString(2, rule);\n+                    pstmt.setLong(3, readOnlyUserSortOrder++);\n+                    pstmt.executeUpdate();\n+                }\n+\n+                pstmt = conn.prepareStatement(\"SELECT rule FROM `cloud`.`role_permissions` WHERE role_id = 4 AND permission = 'ALLOW' AND rule LIKE 'get%' AND rule NOT LIKE 'getUploadParamsFor%' ORDER BY sort_order\");\n+                rsRolePermissions = pstmt.executeQuery();\n+\n+                while (rsRolePermissions.next()) {\n+                    String rule = rsRolePermissions.getString(1);\n+                    pstmt = conn.prepareStatement(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, ?, 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                    pstmt.setLong(1, readOnlyUserRoleId);\n+                    pstmt.setString(2, rule);\n+                    pstmt.setLong(3, readOnlyUserSortOrder++);\n+                    pstmt.executeUpdate();\n+                }\n+\n+                List<String> insertSqlForReadOnlyUserRolePermissions = new ArrayList<String>();\n+                insertSqlForReadOnlyUserRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'cloudianIsEnabled', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyUserRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'quotaIsEnabled', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyUserRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'quotaTariffList', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyUserRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'quotaSummary', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                insertSqlForReadOnlyUserRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, '*', 'DENY', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+\n+                for(String insertSqlForReadOnlyUser : insertSqlForReadOnlyUserRolePermissions) {\n+                    pstmt = conn.prepareStatement(insertSqlForReadOnlyUser);\n+                    pstmt.setLong(1, readOnlyUserRoleId);\n+                    pstmt.setLong(2, readOnlyUserSortOrder++);\n+                    pstmt.executeUpdate();\n+                }\n+\n+                if (rsRolePermissions != null && !rsRolePermissions.isClosed())  {\n+                    rsRolePermissions.close();\n+                }\n+            }\n+\n+            if (rs != null && !rs.isClosed())  {\n+                rs.close();\n+            }\n+            if (pstmt != null && !pstmt.isClosed())  {\n+                pstmt.close();\n+            }\n+            LOG.debug(\"Successfully added role permissions for new read-only user role\");\n+        } catch (final SQLException e) {\n+            LOG.error(\"Exception while adding role permissions for read-only user role: \" + e.getMessage());\n+            throw new CloudRuntimeException(\"Exception while adding role permissions for read-only user role: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    private void addRolePermissionsForAdminSupport(final Connection conn) {\n+        LOG.debug(\"Adding role permissions for new admin support role\");\n+        try {\n+            PreparedStatement pstmt = conn.prepareStatement(\"SELECT id FROM `cloud`.`roles` WHERE name = 'Admin-Support (Default)' AND is_default = 1\");\n+            ResultSet rs = pstmt.executeQuery();\n+            if (rs.next()) {\n+                long adminSupportRoleId = rs.getLong(1);\n+                int adminSupportSortOrder = 0;\n+\n+                pstmt = conn.prepareStatement(\"SELECT id FROM `cloud`.`roles` WHERE name = 'Read-Only Admin (Default)' AND is_default = 1\");\n+                ResultSet rsReadOnlyAdmin = pstmt.executeQuery();\n+                if (rsReadOnlyAdmin.next()) {\n+                    long readOnlyAdminRoleId = rsReadOnlyAdmin.getLong(1);\n+                    pstmt = conn.prepareStatement(\"SELECT rule FROM `cloud`.`role_permissions` WHERE role_id = ? AND permission = 'ALLOW' ORDER BY sort_order\");\n+                    pstmt.setLong(1, readOnlyAdminRoleId);\n+                    ResultSet rsRolePermissions = pstmt.executeQuery();\n+\n+                    while (rsRolePermissions.next()) {\n+                        String rule = rsRolePermissions.getString(1);\n+                        pstmt = conn.prepareStatement(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, ?, 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");\n+                        pstmt.setLong(1, adminSupportRoleId);\n+                        pstmt.setString(2, rule);\n+                        pstmt.setLong(3, adminSupportSortOrder++);\n+                        pstmt.executeUpdate();\n+                    }\n+\n+                    List<String> insertSqlForAdminSupportRolePermissions = new ArrayList<String>();\n+                    insertSqlForAdminSupportRolePermissions.add(\"INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`, `sort_order`) VALUES (UUID(), ?, 'prepareHostForMaintenance', 'ALLOW', ?) ON DUPLICATE KEY UPDATE rule=rule\");", "originalCommit": "794c215503d1b55b97119c91d072c2d3b1760c17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkyNjc4NQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r439926785", "bodyText": "nit - Could be made less verbose by doing a loop on the API strings and add the string to the collection/list. Same for other parts of code.\n\nUpdated with API rules", "author": "sureshanaparti", "createdAt": "2020-06-15T04:39:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4NTcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4NjM2MQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r439286361", "bodyText": "Should the description say we're creating a role by cloning another role ?", "author": "rhtyd", "createdAt": "2020-06-12T08:38:04Z", "path": "server/src/main/java/org/apache/cloudstack/acl/RoleManagerImpl.java", "diffHunk": "@@ -146,10 +150,89 @@ public RoleVO doInTransaction(TransactionStatus status) {\n         });\n     }\n \n+    @Override\n+    @ActionEvent(eventType = EventTypes.EVENT_ROLE_CREATE, eventDescription = \"creating Role\")", "originalCommit": "794c215503d1b55b97119c91d072c2d3b1760c17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkyNjg1Mg==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r439926852", "bodyText": "Should the description say we're creating a role by cloning another role ?\n\nUpdated event description", "author": "sureshanaparti", "createdAt": "2020-06-15T04:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4NjM2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4ODY0OA==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r439288648", "bodyText": "@sureshanaparti why not process rules and convert into a list of TOs/VOs, or something simpler that service layer can easily consume? Can you make the iteration logic simpler? Thanks.", "author": "rhtyd", "createdAt": "2020-06-12T08:42:42Z", "path": "api/src/main/java/org/apache/cloudstack/api/command/admin/acl/ImportRoleCmd.java", "diffHunk": "@@ -0,0 +1,139 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.apache.cloudstack.api.command.admin.acl;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.cloudstack.acl.Role;\n+import org.apache.cloudstack.acl.RoleType;\n+import org.apache.cloudstack.acl.Rule;\n+import org.apache.cloudstack.api.APICommand;\n+import org.apache.cloudstack.api.ApiArgValidator;\n+import org.apache.cloudstack.api.ApiConstants;\n+import org.apache.cloudstack.api.ApiErrorCode;\n+import org.apache.cloudstack.api.BaseCmd;\n+import org.apache.cloudstack.api.Parameter;\n+import org.apache.cloudstack.api.ServerApiException;\n+import org.apache.cloudstack.api.response.RoleResponse;\n+import org.apache.cloudstack.context.CallContext;\n+import org.apache.commons.collections.MapUtils;\n+\n+import com.cloud.user.Account;\n+import com.google.common.base.Strings;\n+\n+@APICommand(name = ImportRoleCmd.APINAME, description = \"Imports a role based on provided map of rule permissions\", responseObject = RoleResponse.class,\n+        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false,\n+        since = \"4.15.0\",\n+        authorized = {RoleType.Admin})\n+public class ImportRoleCmd extends RoleCmd {\n+    public static final String APINAME = \"importRole\";\n+\n+    /////////////////////////////////////////////////////\n+    //////////////// API parameters /////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    @Parameter(name = ApiConstants.NAME, type = CommandType.STRING, required = true,\n+            description = \"Creates a role with this unique name\", validations = {ApiArgValidator.NotNullOrEmpty})\n+    private String roleName;\n+\n+    @Parameter(name = ApiConstants.RULES, type = CommandType.MAP, required = true,\n+            description = \"Rules param list, rule and permission is must. Example: rules[0].rule=create*&rules[0].permission=allow&rules[0].description=create%20rule&rules[1].rule=list*&rules[1].permission=allow&rules[1].description=listing\")\n+    private Map rules;\n+\n+    @Parameter(name = ApiConstants.FORCED, type = CommandType.BOOLEAN,\n+            description = \"Force create a role with the same name. This overrides the role type, description and rule permissions for the existing role. Default is false.\")\n+    private Boolean forced;\n+\n+    /////////////////////////////////////////////////////\n+    /////////////////// Accessors ///////////////////////\n+    /////////////////////////////////////////////////////\n+\n+    public String getRoleName() {\n+        return roleName;\n+    }\n+\n+    public List<Map<String, Object>> getRules() {\n+        if (MapUtils.isEmpty(rules)) {\n+            return null;\n+        }\n+", "originalCommit": "794c215503d1b55b97119c91d072c2d3b1760c17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkyNzc5MQ==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r439927791", "bodyText": "@sureshanaparti why not process rules and convert into a list of TOs/VOs, or something simpler that service layer can easily consume? Can you make the iteration logic simpler? Thanks.\n\nThe Map here corresponds to a rule, with the permission details maintained in the keys: rule, permission & description, after validating them. The cmd object hold list of such maps, which are the role permissions for the role being imported.", "author": "sureshanaparti", "createdAt": "2020-06-15T04:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4ODY0OA=="}], "type": "inlineReview"}, {"oid": "ab3274680e864c71d48f2f3bac0142b1a1661660", "url": "https://github.com/apache/cloudstack/commit/ab3274680e864c71d48f2f3bac0142b1a1661660", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table.", "committedDate": "2020-06-15T04:37:01Z", "type": "forcePushed"}, {"oid": "547d48ec8a1ebe415a65d15b66d96e19bf25a4ec", "url": "https://github.com/apache/cloudstack/commit/547d48ec8a1ebe415a65d15b66d96e19bf25a4ec", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table.", "committedDate": "2020-06-30T10:54:45Z", "type": "forcePushed"}, {"oid": "2749808bd2c54e1cdb90cd8774d1888e0ec7e716", "url": "https://github.com/apache/cloudstack/commit/2749808bd2c54e1cdb90cd8774d1888e0ec7e716", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table.", "committedDate": "2020-06-30T23:38:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExMjM3Mg==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r448112372", "bodyText": "Since roleType and roleDescription have been moved to RoleCmd class, can we not remove getRoleDescription() from this class?", "author": "Pearl1594", "createdAt": "2020-07-01T04:45:18Z", "path": "api/src/main/java/org/apache/cloudstack/api/command/admin/acl/UpdateRoleCmd.java", "diffHunk": "@@ -67,13 +63,6 @@ public String getRoleName() {\n         return roleName;\n     }\n \n-    public RoleType getRoleType() {\n-        if (!Strings.isNullOrEmpty(roleType)) {\n-            return RoleType.fromString(roleType);\n-        }\n-        return null;\n-    }\n-\n     public String getRoleDescription() {", "originalCommit": "2749808bd2c54e1cdb90cd8774d1888e0ec7e716", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg0NTYwMw==", "url": "https://github.com/apache/cloudstack/pull/4071#discussion_r448845603", "bodyText": "Since roleType and roleDescription have been moved to RoleCmd class, can we not remove getRoleDescription() from this class?\n\nthanks @Pearl1594, missed this one. updated.", "author": "sureshanaparti", "createdAt": "2020-07-02T08:44:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExMjM3Mg=="}], "type": "inlineReview"}, {"oid": "d719c81efb732296eab4c641c2c33866efd47bb7", "url": "https://github.com/apache/cloudstack/commit/d719c81efb732296eab4c641c2c33866efd47bb7", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table.", "committedDate": "2020-07-02T08:39:32Z", "type": "commit"}, {"oid": "d719c81efb732296eab4c641c2c33866efd47bb7", "url": "https://github.com/apache/cloudstack/commit/d719c81efb732296eab4c641c2c33866efd47bb7", "message": "Dynamic roles improvements. Add-on functionality below.\n\n- Create a role from any of the existing role, using new parameter roleid in createRole API\n- Import a role with its rules, using a new importRole API\n- New default roles for Read-Only and Support Admin & User\n- No modifications allowed for Default roles\n\n- Cleaned up old NetApp APIs from role_permissions table.", "committedDate": "2020-07-02T08:39:32Z", "type": "forcePushed"}]}