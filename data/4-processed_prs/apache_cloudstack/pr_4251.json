{"pr_number": 4251, "pr_title": "Handle with VM snapshot events", "pr_createdAt": "2020-08-07T19:35:56Z", "pr_url": "https://github.com/apache/cloudstack/pull/4251", "timeline": [{"oid": "97f02cd5bca8271e25047384b8cab09fb9370563", "url": "https://github.com/apache/cloudstack/commit/97f02cd5bca8271e25047384b8cab09fb9370563", "message": "Handle with VM snapshot events\n\nCreate methods to handle with VM snapshot create and delete events\nAdd unit tests to cover new code", "committedDate": "2020-08-05T19:53:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk0MDA2Mw==", "url": "https://github.com/apache/cloudstack/pull/4251#discussion_r503940063", "bodyText": "This if statement got nested inside the isEmpty check - needs to be outside", "author": "nvazquez", "createdAt": "2020-10-13T13:14:54Z", "path": "usage/src/main/java/com/cloud/usage/UsageManagerImpl.java", "diffHunk": "@@ -1889,29 +1889,93 @@ private void createSecurityGroupEvent(UsageEventVO event) {\n         }\n     }\n \n-    private void createVMSnapshotEvent(UsageEventVO event) {\n-        Long vmId = event.getResourceId();\n-        Long volumeId = event.getTemplateId();\n+    /**\n+     * Handles Vm Snapshot create and delete events:\n+     * <ul>\n+     *     <li>EventTypes#EVENT_VM_SNAPSHOT_CREATE</li>\n+     *     <li>EventTypes#EVENT_VM_SNAPSHOT_DELETE</li>\n+     * </ul>\n+     * if the event received by this method is neither add nor remove, we ignore it.\n+     */\n+    protected void handleVMSnapshotEvent(UsageEventVO event) {\n+        switch (event.getType()) {\n+            case EventTypes.EVENT_VM_SNAPSHOT_CREATE:\n+                createUsageVMSnapshot(event);\n+                break;\n+            case EventTypes.EVENT_VM_SNAPSHOT_DELETE:\n+                deleteUsageVMSnapshot(event);\n+                break;\n+            default:\n+                s_logger.debug(String.format(\"The event [type=%s, zoneId=%s, accountId=%s, resourceName=%s, diskOfferingId=%s, createDate=%s] is neither of type [%s] nor [%s]\",\n+                        event.getType(), event.getZoneId(), event.getAccountId(), event.getResourceName(), event.getOfferingId(), event.getCreateDate(), EventTypes.EVENT_VM_SNAPSHOT_CREATE, EventTypes.EVENT_VM_SNAPSHOT_DELETE));\n+        }\n+    }\n+\n+    /**\n+     * Creates an entry for the Usage VM Snapshot.\n+     */\n+    protected void createUsageVMSnapshot(UsageEventVO event) {\n+        long accountId = event.getAccountId();\n+        Account acct = _accountDao.findByIdIncludingRemoved(event.getAccountId());\n+        long domainId = acct.getDomainId();\n         Long offeringId = event.getOfferingId();\n-        Long zoneId = event.getZoneId();\n-        Long accountId = event.getAccountId();\n-        //Size could be null for VM snapshot delete events\n-        long size = (event.getSize() == null) ? 0 : event.getSize();\n+        long vmId = event.getResourceId();\n+        long volumeId = event.getTemplateId();\n+        long zoneId = event.getZoneId();\n         Date created = event.getCreateDate();\n-        Account acct = _accountDao.findByIdIncludingRemoved(event.getAccountId());\n-        Long domainId = acct.getDomainId();\n+        long size = (event.getSize() == null) ? 0 : event.getSize();\n \n         UsageEventDetailsVO detailVO = _usageEventDetailsDao.findDetail(event.getId(), UsageEventVO.DynamicParameters.vmSnapshotId.name());\n         Long vmSnapshotId = null;\n         if (detailVO != null) {\n             String snapId = detailVO.getValue();\n-             vmSnapshotId = Long.valueOf(snapId);\n+            vmSnapshotId = Long.valueOf(snapId);\n         }\n+        s_logger.debug(String.format(\"Creating usage VM Snapshot for VM id [%s] assigned to account [%s] domain [%s], zone [%s], and created at [%s]\", vmId, accountId, domainId, zoneId,\n+                event.getCreateDate()));\n         UsageVMSnapshotVO vsVO = new UsageVMSnapshotVO(volumeId, zoneId, accountId, domainId, vmId, offeringId, size, created, null);\n         vsVO.setVmSnapshotId(vmSnapshotId);\n         _usageVMSnapshotDao.persist(vsVO);\n     }\n \n+    /**\n+     * Find and delete, if exists, usage VM Snapshots entries\n+     */\n+    protected void deleteUsageVMSnapshot(UsageEventVO event) {\n+        long accountId = event.getAccountId();\n+        Account acct = _accountDao.findByIdIncludingRemoved(event.getAccountId());\n+        Long domainId = acct.getDomainId();\n+        Long diskOfferingId = event.getOfferingId();\n+        long vmId = event.getResourceId();\n+        long zoneId = event.getZoneId();\n+        List<UsageVMSnapshotVO> usageVMSnapshots = findUsageVMSnapshots(accountId, zoneId, domainId, vmId, diskOfferingId);\n+        if (CollectionUtils.isEmpty(usageVMSnapshots)){\n+            s_logger.warn(String.format(\"No usage entry for VM snapshot for VM id [%s] assigned to account [%s] domain [%s] and zone [%s] was found.\",\n+                    vmId, accountId, domainId, zoneId));\n+            if (usageVMSnapshots.size() > 1) {", "originalCommit": "97f02cd5bca8271e25047384b8cab09fb9370563", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "724cd510dde43746f40ef42691810d9d4cedf0ac", "url": "https://github.com/apache/cloudstack/commit/724cd510dde43746f40ef42691810d9d4cedf0ac", "message": "move if statement to be outside", "committedDate": "2020-10-14T19:04:30Z", "type": "commit"}]}