{"pr_number": 717, "pr_title": "Added test cases to un-/marshall Categories from/to JSON", "pr_createdAt": "2020-07-30T15:14:04Z", "pr_url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717", "timeline": [{"oid": "5fc350e7046ef51ccd1eb675daff71fb524aec76", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/5fc350e7046ef51ccd1eb675daff71fb524aec76", "message": "Implemented first test for bean marshaling - (Task #607)\n\n- Added simple test for marshaling BeanProeprtyString from and to Json\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-06-11T13:01:41Z", "type": "commit"}, {"oid": "797fbca847fec40a87f4f1307e9f8a68c6e116d5", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/797fbca847fec40a87f4f1307e9f8a68c6e116d5", "message": "Implemented an Example for Marshalling CA - (Task #607)\n\n- Started Marshalling a simple CA\n- Placed JAXB Annotations into bean model.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-06-12T08:23:16Z", "type": "commit"}, {"oid": "c2338b31161daf1f4a20e88483b76b2d37e0962c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/c2338b31161daf1f4a20e88483b76b2d37e0962c", "message": "Write a Heading here - (Task #607)\n\nPut your Message here.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-06-12T13:46:17Z", "type": "commit"}, {"oid": "31aeadcb4f63a169f410a863cb68e68f08171a28", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/31aeadcb4f63a169f410a863cb68e68f08171a28", "message": "Simple unmarshalling implementation - (Task #607)\n\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-06-12T17:13:47Z", "type": "commit"}, {"oid": "7bfe291f31585b7960ac5bb726843a11b189ad51", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/7bfe291f31585b7960ac5bb726843a11b189ad51", "message": "Merge branch 'development' of https://github.com/virtualsatellite/VirtualSatellite4-Core.git into feature/task_607-Evaluate_transforming", "committedDate": "2020-06-15T06:24:10Z", "type": "commit"}, {"oid": "51f4172117360b73b1a667de4083a0870306267d", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/51f4172117360b73b1a667de4083a0870306267d", "message": "Merge branch 'feature/task_607-Evaluate_transforming' of https://github.com/virtualsatellite/VirtualSatellite4-Core.git into feature/task_607-Evaluate_transforming", "committedDate": "2020-06-15T06:25:14Z", "type": "commit"}, {"oid": "876039c354e91b36846da1d21a333bec3ea84082", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/876039c354e91b36846da1d21a333bec3ea84082", "message": "Add JAXBUtility class - (Task #607)\n\nPut your Message here.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-06-29T09:53:35Z", "type": "commit"}, {"oid": "ffe5116f1fa4180107c03d973674e9b6e5492964", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ffe5116f1fa4180107c03d973674e9b6e5492964", "message": "Add json marshalling test: TestCategoryAllPropertyTest - (Task #607)\n\nTest the correct marshalling against a test resource. The generated\nclass ATestCategoryAllProperty was manually modified for test purposes.\nIt should be generated again before merging.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-06-30T08:56:05Z", "type": "commit"}, {"oid": "78054d18235f025966e4a784f9cae72630694d78", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/78054d18235f025966e4a784f9cae72630694d78", "message": "Start test array marshaling - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-06-30T13:31:49Z", "type": "commit"}, {"oid": "a148596841c6be32297c07c79f121e2e00417810", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/a148596841c6be32297c07c79f121e2e00417810", "message": "Further testing array marshalling - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-03T07:24:40Z", "type": "commit"}, {"oid": "492db296d8c244593cdc1e406c6fb7fe67f3e578", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/492db296d8c244593cdc1e406c6fb7fe67f3e578", "message": "Add test case to unmarshal TestCategoryAllProperty - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-08T09:27:10Z", "type": "commit"}, {"oid": "d3f56c8dc1fc734c51ee539e0fc98a51d1d164dd", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d3f56c8dc1fc734c51ee539e0fc98a51d1d164dd", "message": "Add UriAdapter to parse URI in BeanPropertyResource - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-08T09:57:36Z", "type": "commit"}, {"oid": "f922f23df481f76f24278daa5e3a2ba5b9c4cfe6", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f922f23df481f76f24278daa5e3a2ba5b9c4cfe6", "message": "Add (un)marshaling test cases with default values - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-08T10:50:39Z", "type": "commit"}, {"oid": "0031ca701e1678a184bf55f8a28dc86a12357a6a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/0031ca701e1678a184bf55f8a28dc86a12357a6a", "message": "Fix marshaling dynamic arrays - (Task #607)\n\nRevealed unhandled exception in TypeInstanceAdapter that is now thrown\ncorrectly.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-08T11:44:56Z", "type": "commit"}, {"oid": "4a8d331223d9943e4fa50374298c90a36d295862", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/4a8d331223d9943e4fa50374298c90a36d295862", "message": "Working on unmarshaling static bean list - (Task #607)\n\n[skip ci]\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-13T07:28:02Z", "type": "commit"}, {"oid": "cead98f4bbf6d2454f9da29008235afb25d1e1d2", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/cead98f4bbf6d2454f9da29008235afb25d1e1d2", "message": "Fix TestCategoryAllPropertyTest unmarshal default props - (Task #607)\n\nAdd a Double Adapter because Double.NaN could not be unmarshalled.\nAdd test cases to test suite.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-13T10:53:10Z", "type": "commit"}, {"oid": "e78a31dbd9539dedc052f78c7929f431e54bb7b2", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e78a31dbd9539dedc052f78c7929f431e54bb7b2", "message": "Fix static array unmarshalling - (Task #607)\n\n[skip ci]\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-13T13:28:11Z", "type": "commit"}, {"oid": "6b8555cf9fd2d8b410878e60c8e41a8298e72617", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/6b8555cf9fd2d8b410878e60c8e41a8298e72617", "message": "Fix handling of null values in un-/marshalling - (Task #607)\n\n- Add annotation for null values to beans\n- Edit test case and test resources\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-14T09:36:01Z", "type": "commit"}, {"oid": "62b75a6d61dbf94fa966e6cf56a9a47c7a715b56", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/62b75a6d61dbf94fa966e6cf56a9a47c7a715b56", "message": "Working on bean list un-/marshalling - (Task #607)\n\nTry to also use the adapter for dynamic lists. Discovered a new problem\nwith the dynamic lists: their elements don't get parsed right e.g. a\nBeanPropertyString is parsed as ABeanObject somehow. But it's parsed\nright in the static lists.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-14T12:01:54Z", "type": "commit"}, {"oid": "12157dc3d3389158684268258ebce1cc43df732b", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/12157dc3d3389158684268258ebce1cc43df732b", "message": "Try to also use the adapter for the dynamic bean list - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-15T11:03:48Z", "type": "commit"}, {"oid": "2820420bf28b85e1944e824e1aa48051b32e2ee2", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/2820420bf28b85e1944e824e1aa48051b32e2ee2", "message": "Merge branch 'development' into feature/task_607-Evaluate_transforming\n\nConflicts:\n\tde.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/test/AllTests.java\n\tde.dlr.sc.virsat.model.extension.tests/src-gen/de/dlr/sc/virsat/model/extension/tests/model/ATestCategoryIntrinsicArray.java", "committedDate": "2020-07-21T12:06:36Z", "type": "commit"}, {"oid": "f60aac5fd723c099834cb2c49fa4215839c9cdc3", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f60aac5fd723c099834cb2c49fa4215839c9cdc3", "message": "Fix Nullpointer in UriAdapter - (Task #607)\n\n[skip ci]\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-22T12:28:38Z", "type": "commit"}, {"oid": "5db37db427d5f8fadbfe87c0ed3db0d170765091", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/5db37db427d5f8fadbfe87c0ed3db0d170765091", "message": "Add test case for BeanPropertyReference - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-22T15:17:05Z", "type": "commit"}, {"oid": "d177a921ff9368ba994f91e3191952e2145b299b", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d177a921ff9368ba994f91e3191952e2145b299b", "message": "Test Category reference in TestCategoryReferenceTest - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-23T10:53:28Z", "type": "commit"}, {"oid": "ffc48270eb936eebb544fd531824caf25561c27e", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ffc48270eb936eebb544fd531824caf25561c27e", "message": "Add TestCategoryComposition marshalling test - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-23T11:31:45Z", "type": "commit"}, {"oid": "ab4a172dcf0093f24eca90ab56957cb3079a2ab2", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ab4a172dcf0093f24eca90ab56957cb3079a2ab2", "message": "Merge branch 'feature/task_705-Improve_handling_of_s' into feature/task_607-Evaluate_transforming", "committedDate": "2020-07-23T12:30:13Z", "type": "commit"}, {"oid": "d00242117fa6ba01d28692bf56652557161b7a97", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d00242117fa6ba01d28692bf56652557161b7a97", "message": "Fix TestCategoryIntrinsicArrayTest - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-23T12:37:46Z", "type": "commit"}, {"oid": "03d451a6b5e46a48ab8f16d5938cf6d5d373ec15", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/03d451a6b5e46a48ab8f16d5938cf6d5d373ec15", "message": "Add test cases for reference and composition arrays - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-23T14:10:15Z", "type": "commit"}, {"oid": "b6cc3f35a21f7793524ca076eaa3c5dda638ef8f", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b6cc3f35a21f7793524ca076eaa3c5dda638ef8f", "message": "Add JsonTestHelper - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-24T13:57:20Z", "type": "commit"}, {"oid": "ba092443392765cb50e11e006542f8b1281f251c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ba092443392765cb50e11e006542f8b1281f251c", "message": "Update reference marshalling - (Task #607)\n\nNow only include the uuid in the JSON to not have duplicates.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-27T13:29:41Z", "type": "commit"}, {"oid": "333a9da6f2b34b3236723c577f53bb68fce0da44", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/333a9da6f2b34b3236723c577f53bb68fce0da44", "message": "Fix reference array marshalling - (Task #607)\n\nNow also only marshalls the uuids.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-27T13:41:44Z", "type": "commit"}, {"oid": "59849a0e22e2cc455160478a4e163110882cd36b", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/59849a0e22e2cc455160478a4e163110882cd36b", "message": "Update composition array marshalling test case - (Task #607)\n\nChanged many JSONs because of changes to the JsonTestHelper.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-28T12:53:21Z", "type": "commit"}, {"oid": "1cc6c0fc81187bfc16429263f4f8cb7ce8e495ae", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/1cc6c0fc81187bfc16429263f4f8cb7ce8e495ae", "message": "Clean up XML annotation - (Task #607)\n\nUse the same annotations everywhere.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-28T13:49:25Z", "type": "commit"}, {"oid": "3944b0275979594e6a104bec52be8161161deb77", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3944b0275979594e6a104bec52be8161161deb77", "message": "Remove deprecated classes - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-28T13:53:33Z", "type": "commit"}, {"oid": "d7e07083a4fae6c748fabe150c232bb165709598", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d7e07083a4fae6c748fabe150c232bb165709598", "message": "Cleanup classes for un-/marshalling - (Task #607)\n\nResolve warnings and add comments.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-28T14:29:08Z", "type": "commit"}, {"oid": "b51c589fc845c22842dff35a4871085392e8c32b", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b51c589fc845c22842dff35a4871085392e8c32b", "message": "Update Reference and Composition arrays - (Task #607)\n\nUse the bean because we can't change the referenced / composed object on\nthe other lists.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-29T13:25:27Z", "type": "commit"}, {"oid": "f81e88b49db24fad7b07e54f5d5f1c79adfd7b0b", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f81e88b49db24fad7b07e54f5d5f1c79adfd7b0b", "message": "Resolve TODOs - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-29T14:10:09Z", "type": "commit"}, {"oid": "3b9382e76be344ae3a36e77ceea58e48022409a9", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3b9382e76be344ae3a36e77ceea58e48022409a9", "message": "Add XML annotations to code generator - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-30T11:52:12Z", "type": "commit"}, {"oid": "46b5d188b3b65974bf0c99e273faae51eb176e17", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/46b5d188b3b65974bf0c99e273faae51eb176e17", "message": "Resolve build error and minor change in generator- (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-30T13:57:01Z", "type": "commit"}, {"oid": "322883f6779bc779ba050a922a69f4728559af01", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/322883f6779bc779ba050a922a69f4728559af01", "message": "Add generated files - (Task #607)\n\nNow contain xml annotations.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-30T13:59:19Z", "type": "commit"}, {"oid": "f0ac4eb91b88fd84d6914f7d5a5f99d780821c1c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f0ac4eb91b88fd84d6914f7d5a5f99d780821c1c", "message": "Update generated test resources - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-30T14:10:44Z", "type": "commit"}, {"oid": "f90572d65117929862f51cffa40181e74dee9058", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f90572d65117929862f51cffa40181e74dee9058", "message": "Clean up test cases - (Task #607)\n\n- Add assert messages to test cases\n- Removed unneeded import from manifest\n- Reverted changes of api docs\n- Added missing Javadocs\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-30T14:56:51Z", "type": "commit"}, {"oid": "4871073cc571840d43d688015a3a6a3ab0f8034d", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/4871073cc571840d43d688015a3a6a3ab0f8034d", "message": "Add BeanTypeInstanceFac - (Task #607)\n\nThat uses the BeanPropertyFactory and the BeanCategoryAssignmentFactory.\nThis removes duplicate code.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-07-31T12:12:04Z", "type": "commit"}, {"oid": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729", "message": "Merge branch 'development' into feature/task_607-Evaluate_transforming", "committedDate": "2020-08-07T09:12:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMjU2OA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466922568", "bodyText": "I know Im the one who added this :D but the way I understand it now we only neet to annotate the set or the get.\nI see in the other methods you annotate the get, so to stay consistent, I think here too we should only annotate the getter.", "author": "SaMuellerDLR", "createdAt": "2020-08-07T09:15:31Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/ABeanObject.java", "diffHunk": "@@ -39,11 +49,17 @@ public ABeanObject() {\n \t}\r\n \t\r\n \t@SuppressWarnings(\"unchecked\")\r\n+\t@XmlID\r\n+\t@XmlElement(name = \"uuid\")\r\n+\t@XmlJavaTypeAdapter(TypeInstanceAdapter.class)\r", "originalCommit": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NTI4NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466975285", "bodyText": "Sure and I also found some other beans where I did the same", "author": "JAmmermann-DLR", "createdAt": "2020-08-07T11:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMjU2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMzA0OA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466923048", "bodyText": "Do we still need this? I think this is just a fragment that stuck around from when phillip and me were playing around tih the annotations on category assignemnt level.", "author": "SaMuellerDLR", "createdAt": "2020-08-07T09:16:31Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/category/ABeanCategoryAssignment.java", "diffHunk": "@@ -53,6 +55,11 @@ public void setATypeInstance(ATypeInstance ti) {\n \t\thelper.setCategoryAssignment(this.ti);\r\n \t}\r\n \t\r\n+\t@Override\r", "originalCommit": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NDk3MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466974971", "bodyText": "You are right, removed", "author": "JAmmermann-DLR", "createdAt": "2020-08-07T11:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMzA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMzI2Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466923267", "bodyText": "ATypeInstnace -> ATypeInstance", "author": "SaMuellerDLR", "createdAt": "2020-08-07T09:16:56Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/factory/BeanTypeInstanceFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.concept.types.factory;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.Status;\n+\n+import de.dlr.sc.virsat.model.concept.types.IBeanObject;\n+import de.dlr.sc.virsat.model.dvlm.categories.ATypeInstance;\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.APropertyInstance;\n+import de.dlr.sc.virsat.model.dvlm.provider.DVLMEditPlugin;\n+\n+/**\n+ * A factory class for TypeInstanceBeans which can create the correct bean\n+ * for a given ATypeInstnace depending on the registration of Beans", "originalCommit": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNDczOA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466924738", "bodyText": "This class probably needs some more description as to why we need it.\nIf I recall correctly it involved something with generics right?", "author": "SaMuellerDLR", "createdAt": "2020-08-07T09:19:56Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/json/AnyTypeAdapter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.dvlm.json;\n+\n+import javax.xml.bind.annotation.adapters.XmlAdapter;\n+\n+/**\n+ * This XmlAdapter can be used to marshal any generic Java Object. \n+ * This will result in a \"type\" attribute (XML) or key value pair (JSON)\n+ * added to the marshalled object, which is needed for unmarshalling.", "originalCommit": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NjcyMQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466976721", "bodyText": "Yes I improved the comment, please look into it to check if it is clear now.", "author": "JAmmermann-DLR", "createdAt": "2020-08-07T11:15:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNDczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNDk4OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466924989", "bodyText": "I dont think we need to explicitly declare this constructor.", "author": "SaMuellerDLR", "createdAt": "2020-08-07T09:20:24Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/dvlm/json/AnyTypeAdapter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.dvlm.json;\n+\n+import javax.xml.bind.annotation.adapters.XmlAdapter;\n+\n+/**\n+ * This XmlAdapter can be used to marshal any generic Java Object. \n+ * This will result in a \"type\" attribute (XML) or key value pair (JSON)\n+ * added to the marshalled object, which is needed for unmarshalling.\n+ */\n+public class AnyTypeAdapter extends XmlAdapter<Object, Object> {\n+\tpublic AnyTypeAdapter() {", "originalCommit": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyNzYwNg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466927606", "bodyText": "URL url = new URL(\"platform:/plugin/\" + FRAGMENT_ID + resourcePath);", "author": "SaMuellerDLR", "createdAt": "2020-08-07T09:25:25Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/test/TestActivator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.test;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.net.URL;\r\n+\r\n+import org.junit.Assert;\r\n+\r\n+public class TestActivator {\r\n+\r\n+\t\r\n+\t/**\r\n+\t * Hidden construcotr of activator class\r\n+\t */\r\n+\tprivate TestActivator() {\r\n+\t}\r\n+\t\r\n+\tpublic static final String FRAGMENT_ID = \"de.dlr.sc.virsat.model.extension.tests.test\";\r\n+\r\n+\t/**\r\n+\t * Method to access the fragments contents from the resource folder and to ahnd it back as string\r\n+\t * @param resourcePath the path to the resource starting with \"resource/\"\r\n+\t * @return the content of the resource as string\r\n+\t * @throws IOException throws\r\n+\t */\r\n+\tpublic static String getResourceContentAsString(String resourcePath) throws IOException {\r\n+\t\tURL url;\r\n+\r\n+\t\turl = new URL(\"platform:/plugin/\" + FRAGMENT_ID + resourcePath);\r", "originalCommit": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMDkyMg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466930922", "bodyText": "Any reason we cant just to + i in the setUuid call? Java should convert the int to a string for you.", "author": "SaMuellerDLR", "createdAt": "2020-08-07T09:31:59Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryCompositionArrayTest extends AConceptTestCase {\n+\t\n+\tprivate TestCategoryCompositionArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryCompositionArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_CHANGE_ELEMENT = \"/resources/json/TestCategoryCompositionArray_Marshaling_ChangeElement.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\t// Because a composed bean is generic we need an adapter\n+\t\t// And because of the adapter we have to manually add the composed\n+\t\t// classes to the marshaller.\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryCompositionArray.class, TestCategoryAllProperty.class});\n+\t\t\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryCompositionArray(concept);\n+\t\t\n+\t\ttestArray.getATypeInstance().setUuid(new VirSatUuid(\"f5d016ac-65fa-4b9d-ae94-582d4f73138a\"));\n+\t\tIBeanList<BeanPropertyComposed<TestCategoryAllProperty>> staticArray = testArray.getTestCompositionArrayStaticBean();\n+\t\tfor (int i = 0; i < staticArray.size(); i++) {\n+\t\t\tString lastChar = Integer.toString(i);", "originalCommit": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMTA4NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466931085", "bodyText": "We should probably clean up the system out statements.", "author": "SaMuellerDLR", "createdAt": "2020-08-07T09:32:20Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryCompositionArrayTest extends AConceptTestCase {\n+\t\n+\tprivate TestCategoryCompositionArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryCompositionArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_CHANGE_ELEMENT = \"/resources/json/TestCategoryCompositionArray_Marshaling_ChangeElement.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\t// Because a composed bean is generic we need an adapter\n+\t\t// And because of the adapter we have to manually add the composed\n+\t\t// classes to the marshaller.\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryCompositionArray.class, TestCategoryAllProperty.class});\n+\t\t\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryCompositionArray(concept);\n+\t\t\n+\t\ttestArray.getATypeInstance().setUuid(new VirSatUuid(\"f5d016ac-65fa-4b9d-ae94-582d4f73138a\"));\n+\t\tIBeanList<BeanPropertyComposed<TestCategoryAllProperty>> staticArray = testArray.getTestCompositionArrayStaticBean();\n+\t\tfor (int i = 0; i < staticArray.size(); i++) {\n+\t\t\tString lastChar = Integer.toString(i);\n+\t\t\t\n+\t\t\tBeanPropertyComposed<TestCategoryAllProperty> bean = staticArray.get(i);\n+\t\t\tbean.getATypeInstance().setUuid(new VirSatUuid(\"45e18c9d-ef85-4ab8-ba2a-c5916697a0b\" + lastChar));\n+\t\t\t\n+\t\t\tTestCategoryAllProperty tcAllProperty = bean.getValue();\n+\t\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty, lastChar);\n+\t\t}\n+\t\t\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\n+\t\ttestArray.getTestCompositionArrayStatic().get(0).getTestStringBean().setValue(JsonTestHelper.TEST_STRING);\n+\t\t\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\n+\t\t\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjsonMarshaller.marshal(testArray, sw);\n+\t\t\n+\t\tSystem.out.println(sw.toString());", "originalCommit": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMTM0OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466931349", "bodyText": "assertNull instead of assertEquals with null", "author": "SaMuellerDLR", "createdAt": "2020-08-07T09:32:50Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryCompositionArrayTest extends AConceptTestCase {\n+\t\n+\tprivate TestCategoryCompositionArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryCompositionArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_CHANGE_ELEMENT = \"/resources/json/TestCategoryCompositionArray_Marshaling_ChangeElement.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\t// Because a composed bean is generic we need an adapter\n+\t\t// And because of the adapter we have to manually add the composed\n+\t\t// classes to the marshaller.\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryCompositionArray.class, TestCategoryAllProperty.class});\n+\t\t\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryCompositionArray(concept);\n+\t\t\n+\t\ttestArray.getATypeInstance().setUuid(new VirSatUuid(\"f5d016ac-65fa-4b9d-ae94-582d4f73138a\"));\n+\t\tIBeanList<BeanPropertyComposed<TestCategoryAllProperty>> staticArray = testArray.getTestCompositionArrayStaticBean();\n+\t\tfor (int i = 0; i < staticArray.size(); i++) {\n+\t\t\tString lastChar = Integer.toString(i);\n+\t\t\t\n+\t\t\tBeanPropertyComposed<TestCategoryAllProperty> bean = staticArray.get(i);\n+\t\t\tbean.getATypeInstance().setUuid(new VirSatUuid(\"45e18c9d-ef85-4ab8-ba2a-c5916697a0b\" + lastChar));\n+\t\t\t\n+\t\t\tTestCategoryAllProperty tcAllProperty = bean.getValue();\n+\t\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty, lastChar);\n+\t\t}\n+\t\t\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\n+\t\ttestArray.getTestCompositionArrayStatic().get(0).getTestStringBean().setValue(JsonTestHelper.TEST_STRING);\n+\t\t\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\n+\t\t\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjsonMarshaller.marshal(testArray, sw);\n+\t\t\n+\t\tSystem.out.println(sw.toString());\n+\t\t\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(RESOURCE);\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\n+\t\t// Quick mock setup to embed the model into a resource set\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\n+\t\tResource resourceImpl = new ResourceImpl();\n+\t\tresourceSet.getResources().add(resourceImpl);\n+\t\tresourceImpl.getContents().add(testArray.getATypeInstance());\n+\t\t\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\n+\t\t\n+\t\tString inputJson = TestActivator.getResourceContentAsString(RESOURCE);\n+\t\tSystem.out.println(inputJson);\n+\t\tStringReader sr = new StringReader(inputJson);\n+\n+\t\tassertEquals(null, testArray.getTestCompositionArrayStatic().get(0).getTestStringBean().getValue());", "originalCommit": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjA1NA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466932054", "bodyText": "assertNull", "author": "SaMuellerDLR", "createdAt": "2020-08-07T09:34:17Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryComposition;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryCompositionTest extends AConceptTestCase {\n+\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate TestCategoryComposition tcComposition;\n+\tprivate TestCategoryAllProperty tcAllProperty;\n+\tprivate Concept concept;\n+\t\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryComposition_Marshaling.json\";\n+\t\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryComposition.class});\n+\t\t\n+\t\tconcept = loadConceptFromPlugin();\n+\t\t\n+\t\ttcComposition = new TestCategoryComposition(concept);\n+\t\ttcComposition.getATypeInstance().setUuid(new VirSatUuid(\"028a6e1b-e7c4-4937-886b-d65452426bfd\"));\n+\t\ttcComposition.getTestSubCategoryBean().getATypeInstance().setUuid(new VirSatUuid(\"128a6e1b-e7c4-4937-886b-d65452426bfd\"));\n+\t\t\n+\t\ttcAllProperty = tcComposition.getTestSubCategory();\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\n+\t\ttcAllProperty.setTestString(JsonTestHelper.TEST_STRING);\n+\t\t\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\n+\t\t\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjsonMarshaller.marshal(tcComposition, sw);\n+\t\t\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(RESOURCE);\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\n+\t\t// Quick mock setup to embed the model into a resource set\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\n+\t\tResource resourceImpl = new ResourceImpl();\n+\t\tresourceSet.getResources().add(resourceImpl);\n+\t\tresourceImpl.getContents().add(tcComposition.getATypeInstance());\n+\t\tresourceImpl.getContents().add(tcAllProperty.getATypeInstance());\n+\t\t\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\n+\t\t\n+\t\tString inputJson = TestActivator.getResourceContentAsString(RESOURCE);\n+\t\tStringReader sr = new StringReader(inputJson);\n+\n+\t\tassertEquals(null, tcAllProperty.getTestString());", "originalCommit": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjQxNg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466932416", "bodyText": "Expected and is value seem to be flipped here.\nAlso assertNull.", "author": "SaMuellerDLR", "createdAt": "2020-08-07T09:34:59Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryIntrinsicArrayTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.categories.propertyinstances.ArrayInstance;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.ATestCategoryIntrinsicArrayTest;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryIntrinsicArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryIntrinsicArrayTest extends ATestCategoryIntrinsicArrayTest {\n+\t\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate BeanPropertyString bpString;\n+\tprivate TestCategoryIntrinsicArray testArray;\n+\t\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryIntrinsicArray_Marshaling.json\";\n+\t\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\tsuper.setUp();\n+\t\t\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryIntrinsicArray.class});\n+\t\t\n+\t\tbpString = JsonTestHelper.createTestStringBean(concept);\n+\n+\t\ttestArray = new TestCategoryIntrinsicArray(concept);\n+\t\ttestArray.getTypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\n+\t\ttestArray.getTestStringArrayDynamicBean().getArrayInstance().setUuid(new VirSatUuid(\"ee6e1025-4a77-4b32-9c62-cb459ed76ce8\"));\t\t\n+\t\tIBeanList<BeanPropertyString> list = testArray.getTestStringArrayStaticBean();\n+\t\tJsonTestHelper.setStaticIBeanListUuids(list);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\n+\t\tbpString.setValue(JsonTestHelper.TEST_STRING);\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\n+\t\t\n+\t\ttestArray.getTestStringArrayStaticBean().get(0).setValue(JsonTestHelper.TEST_STRING);\n+\t\ttestArray.getTestStringArrayDynamicBean().add(bpString);\n+\t\t\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjsonMarshaller.marshal(testArray, sw);\n+\t\t\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(RESOURCE);\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\n+\t\tArrayInstance originalArrayInstance = testArray.getTestStringArrayStaticBean().getArrayInstance();\n+\t\t\n+\t\t// Quick mock setup to embed the model into a resource set\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\n+\t\tResource resourceImpl = new ResourceImpl();\n+\t\tresourceSet.getResources().add(resourceImpl);\n+\t\tresourceImpl.getContents().add(testArray.getATypeInstance());\n+\t\tresourceImpl.getContents().add(originalArrayInstance);\n+\t\tresourceImpl.getContents().add(bpString.getATypeInstance());\n+\t\t\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\n+\t\t\n+\t\tassertEquals(testArray.getTestStringArrayStaticBean().get(0).getValue(), null);", "originalCommit": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjg2Mg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r466932862", "bodyText": "Just + i should be enough.", "author": "SaMuellerDLR", "createdAt": "2020-08-07T09:35:59Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryReferenceArrayTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReferenceArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryReferenceArrayTest extends AConceptTestCase {\n+\n+\tprivate TestCategoryReferenceArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate BeanPropertyString bpString;\n+\tprivate TestCategoryAllProperty tcAllProperty;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryReferenceArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_CHANGED_REFERENCE = \"/resources/json/TestCategoryReferenceArray_Marshaling_ChangeReference.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryReferenceArray.class});\n+\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryReferenceArray(concept);\n+\t\t\n+\t\ttcAllProperty = new TestCategoryAllProperty(concept);\n+\t\t\n+\t\t// Set uuids to match the test resource\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\n+\t\t\n+\t\tbpString = JsonTestHelper.createTestStringBean(concept);\n+\t\t\n+\t\ttestArray.getTypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\n+\t\t\n+\t\tIBeanList<BeanPropertyReference<TestCategoryAllProperty>> staticCategoryArray = testArray.getTestCategoryReferenceArrayStaticBean();\n+\t\tfor (int i = 0; i < staticCategoryArray.size(); i++) {\n+\t\t\tBeanPropertyReference<TestCategoryAllProperty> bean = staticCategoryArray.get(i);\n+\t\t\tbean.getATypeInstance().setUuid(new VirSatUuid(\"8872b433-968c-4f48-b9a3-d734c6e239a\" + Integer.toString(i)));", "originalCommit": "4b2d4b0506f9ea992f2ed19c892a0c59f6bd1729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0MTk3Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480241977", "bodyText": "Agree, let's change to +i, how is it resolved?", "author": "andriikovalov-dlr", "createdAt": "2020-08-31T16:23:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5MjE5NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488592195", "bodyText": "I think I changed it in another place. No it should be resolved in all places.", "author": "JAmmermann-DLR", "createdAt": "2020-09-15T11:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjg2Mg=="}], "type": "inlineReview"}, {"oid": "b3dfa74fb9f4bc9ae6132cdceb2a90318df66c3d", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b3dfa74fb9f4bc9ae6132cdceb2a90318df66c3d", "message": "Changes due to review - (Task #607)\n\n- Remove unneeded annotations in the beans\n- In AnyTypeAdapter improve comment and remove empty constructor\n- Remove explicit int to string conversion in JsonTestHelper and test\ncases\n- Replace assertEquals(null, ...) with asserNull\n- Remove system out statements\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-08-07T11:18:02Z", "type": "commit"}, {"oid": "17b94d32c4069603de1e83a77cc497ceadd670ab", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/17b94d32c4069603de1e83a77cc497ceadd670ab", "message": "Rename ReferenceAdapter to ABeanObjectAdapter - (Task #607)\n\nThe adapter simply un-/marshalls ABeanObject and could have other use\ncases than reference propertys in the future. So to be consistent with\nthe naming it is renamed to ABeanObjectAdapter\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-08-07T13:40:16Z", "type": "commit"}, {"oid": "448953721d5cdfdeabf8eef5a9a83fa1e5c4dc97", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/448953721d5cdfdeabf8eef5a9a83fa1e5c4dc97", "message": "Add missing test cases for adapters and JAXBUtility - (Task #607)\n\nAlso minor improvements in the tested classes.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-08-07T13:42:39Z", "type": "commit"}, {"oid": "8e0eb0eec0cd9501131a2fef8a80a63187e4f34a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/8e0eb0eec0cd9501131a2fef8a80a63187e4f34a", "message": "Change generator to use ABeanObjectAdapter - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-08-07T13:57:20Z", "type": "commit"}, {"oid": "32e1f744d1cce4b89f50184046d77c4c425db286", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/32e1f744d1cce4b89f50184046d77c4c425db286", "message": "Generate files and update generator test case - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-08-07T14:24:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNDc1MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r467014751", "bodyText": "I think we can remove the entire function this its defined in the parent class.", "author": "SaMuellerDLR", "createdAt": "2020-08-07T12:40:56Z", "path": "de.dlr.sc.virsat.model.edit/src/de/dlr/sc/virsat/model/concept/types/category/ABeanCategoryAssignment.java", "diffHunk": "@@ -55,7 +55,6 @@ public void setATypeInstance(ATypeInstance ti) {\n \t\thelper.setCategoryAssignment(this.ti);\r\n \t}\r\n \t\r\n-\t@Override\r\n \tpublic ATypeInstance getATypeInstance() {\r", "originalCommit": "b3dfa74fb9f4bc9ae6132cdceb2a90318df66c3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e056f97b0a3fa480eb5c8254f6b80f68d43daf8d", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e056f97b0a3fa480eb5c8254f6b80f68d43daf8d", "message": "Changes due to review - (Task #607)\n\nRemove unneeded function in ABeanCategoryAssignment.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-08-18T13:27:05Z", "type": "commit"}, {"oid": "e588e57eefa0f1121ebbc0a2fe48ad62519948e9", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e588e57eefa0f1121ebbc0a2fe48ad62519948e9", "message": "Add missing nillable attribute in GenerateCategoryBeans - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-08-20T10:03:24Z", "type": "commit"}, {"oid": "b104505e6f61bce4b6b8283b53005491dc55a407", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b104505e6f61bce4b6b8283b53005491dc55a407", "message": "Add nillable to reference property in generator - (Task #607)\n\nAlso add new expected output file\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-08-20T10:36:53Z", "type": "commit"}, {"oid": "9bc55a3bf6b9650306b42851a3ba91c820900362", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/9bc55a3bf6b9650306b42851a3ba91c820900362", "message": "Update generated files - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-08-20T11:27:11Z", "type": "commit"}, {"oid": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3c17cc3a34b0f5cbe536f8afce461d4a74364bed", "message": "Add null tests for composition and reference marshalling - (Task #607)\n\n- Add test cases for composition and reference beans and lists of\ncomposition and reference beans\n- Add test resources\n- Minor change in ABeanObjectAdapter and BeanPropertyReference to handle\nnull\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-08-20T12:33:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4NzM3MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r477287371", "bodyText": "Looks like it should be after \"Import Statements\" comment", "author": "andriikovalov-dlr", "createdAt": "2020-08-26T13:10:29Z", "path": "de.dlr.sc.virsat.model.extension.tests/src/de/dlr/sc/virsat/model/extension/tests/model/TestCategoryBeanA.java", "diffHunk": "@@ -9,11 +9,11 @@\n  *******************************************************************************/\r\n package de.dlr.sc.virsat.model.extension.tests.model;\r\n \r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r", "originalCommit": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NzY0NA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488577644", "bodyText": "Yes, I reverted it.", "author": "JAmmermann-DLR", "createdAt": "2020-09-15T11:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4NzM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwODk2MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480208961", "bodyText": "Method name doesn't correspond to contents - it's not asserting anything, but unmarschalling", "author": "andriikovalov-dlr", "createdAt": "2020-08-31T15:31:41Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryAllPropertyTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\r\n+\r\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.StringReader;\r\n+import java.io.StringWriter;\r\n+\r\n+import javax.xml.bind.JAXBException;\r\n+import javax.xml.bind.Marshaller;\r\n+import javax.xml.bind.Unmarshaller;\r\n+import javax.xml.transform.stream.StreamSource;\r\n+\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.resource.ResourceSet;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\r\n+public class TestCategoryAllPropertyTest extends AConceptTestCase {\r\n+\r\n+\tprivate TestCategoryAllProperty tcAllProperty;\r\n+\tprivate JAXBUtility jaxbUtility;\r\n+\tprivate Concept concept;\r\n+\t\r\n+\tprivate static final String RESOURCE_WITH_DEFAULTS = \"/resources/json/TestCategoryAllProperty_Marshaling_Defaults.json\";\r\n+\tprivate static final String RESOURCE_WITH_VALUES = \"/resources/json/TestCategoryAllProperty_Marshaling.json\";\r\n+\t\r\n+\tprivate static final boolean TEST_BOOL = true;\r\n+\tprivate static final int TEST_INT = 1;\r\n+\tprivate static final double TEST_FLOAT = 0.0;\r\n+\tprivate static final String TEST_STRING = \"this is a test\";\r\n+\tprivate static final String TEST_ENUM = \"HIGH\";\r\n+\tprivate static final String TEST_RESOURCE = \"resources/file[1].xls\";\r\n+\tprivate static final String TEST_RESOURCE_STRING = \"/\" + TEST_RESOURCE;\r\n+\t\r\n+\tprivate static final double EPSILON = 0.000001;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setup() throws JAXBException {\r\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryAllProperty.class});\r\n+\t\t\r\n+\t\tprepareEditingDomain();\r\n+\t\tconcept = loadConceptFromPlugin();\r\n+\t\t\r\n+\t\ttcAllProperty  = new TestCategoryAllProperty(concept);\r\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\r\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Set the new values\r\n+\t */\r\n+\tpublic void initProperties() {\r\n+\t\ttcAllProperty.setTestInt(TEST_INT);\r\n+\t\ttcAllProperty.setTestFloat(TEST_FLOAT);\r\n+\t\ttcAllProperty.setTestEnum(TEST_ENUM);\r\n+\t\ttcAllProperty.setTestResource(URI.createPlatformPluginURI(TEST_RESOURCE, false));\r\n+\t\ttcAllProperty.setTestString(TEST_STRING);\r\n+\t\ttcAllProperty.setTestBool(TEST_BOOL);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Marshall the TestCategoryAllProperty and assert that it equals the resource\r\n+\t * @param resource containing the expected JSON\r\n+\t * @throws JAXBException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void assertMarshalWithResource(String resource) throws JAXBException, IOException {\r\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\r\n+\t\t\r\n+\t\tStringWriter sw = new StringWriter();\r\n+\t\tjsonMarshaller.marshal(tcAllProperty, sw);\r\n+\r\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(resource);\r\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\r\n+\t\tinitProperties();\r\n+\t\t\r\n+\t\tassertMarshalWithResource(RESOURCE_WITH_VALUES);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshallingWithDefaultValues() throws JAXBException, IOException {\r\n+\t\tassertMarshalWithResource(RESOURCE_WITH_DEFAULTS);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Unmarshall the resource\r\n+\t * @param resource containing the input JSON\r\n+\t * @throws JAXBException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void assertUnmarshalWithResource(String resource) throws JAXBException, IOException {\r", "originalCommit": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3ODU4MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488578581", "bodyText": "You are right, I renamed it", "author": "JAmmermann-DLR", "createdAt": "2020-09-15T11:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwODk2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwOTkyNA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480209924", "bodyText": "This change looks wrong - all imports should be after the import comment", "author": "andriikovalov-dlr", "createdAt": "2020-08-31T15:33:19Z", "path": "de.dlr.sc.virsat.model.extension.tests/src/de/dlr/sc/virsat/model/extension/tests/model/TestCategoryCompositionArray.java", "diffHunk": "@@ -9,11 +9,11 @@\n  *******************************************************************************/\r\n package de.dlr.sc.virsat.model.extension.tests.model;\r\n \r\n+import de.dlr.sc.virsat.model.dvlm.categories.CategoryAssignment;\r", "originalCommit": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3NzczOQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488577739", "bodyText": "Yes, I reverted it.", "author": "JAmmermann-DLR", "createdAt": "2020-09-15T11:03:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwOTkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxMTYxNQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480211615", "bodyText": "I think there is a getter for the int property bean, and you do a null check on it", "author": "andriikovalov-dlr", "createdAt": "2020-08-31T15:36:04Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryAllPropertyTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\r\n+\r\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.StringReader;\r\n+import java.io.StringWriter;\r\n+\r\n+import javax.xml.bind.JAXBException;\r\n+import javax.xml.bind.Marshaller;\r\n+import javax.xml.bind.Unmarshaller;\r\n+import javax.xml.transform.stream.StreamSource;\r\n+\r\n+import org.eclipse.emf.common.util.URI;\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.resource.ResourceSet;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\r\n+public class TestCategoryAllPropertyTest extends AConceptTestCase {\r\n+\r\n+\tprivate TestCategoryAllProperty tcAllProperty;\r\n+\tprivate JAXBUtility jaxbUtility;\r\n+\tprivate Concept concept;\r\n+\t\r\n+\tprivate static final String RESOURCE_WITH_DEFAULTS = \"/resources/json/TestCategoryAllProperty_Marshaling_Defaults.json\";\r\n+\tprivate static final String RESOURCE_WITH_VALUES = \"/resources/json/TestCategoryAllProperty_Marshaling.json\";\r\n+\t\r\n+\tprivate static final boolean TEST_BOOL = true;\r\n+\tprivate static final int TEST_INT = 1;\r\n+\tprivate static final double TEST_FLOAT = 0.0;\r\n+\tprivate static final String TEST_STRING = \"this is a test\";\r\n+\tprivate static final String TEST_ENUM = \"HIGH\";\r\n+\tprivate static final String TEST_RESOURCE = \"resources/file[1].xls\";\r\n+\tprivate static final String TEST_RESOURCE_STRING = \"/\" + TEST_RESOURCE;\r\n+\t\r\n+\tprivate static final double EPSILON = 0.000001;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setup() throws JAXBException {\r\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryAllProperty.class});\r\n+\t\t\r\n+\t\tprepareEditingDomain();\r\n+\t\tconcept = loadConceptFromPlugin();\r\n+\t\t\r\n+\t\ttcAllProperty  = new TestCategoryAllProperty(concept);\r\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\r\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Set the new values\r\n+\t */\r\n+\tpublic void initProperties() {\r\n+\t\ttcAllProperty.setTestInt(TEST_INT);\r\n+\t\ttcAllProperty.setTestFloat(TEST_FLOAT);\r\n+\t\ttcAllProperty.setTestEnum(TEST_ENUM);\r\n+\t\ttcAllProperty.setTestResource(URI.createPlatformPluginURI(TEST_RESOURCE, false));\r\n+\t\ttcAllProperty.setTestString(TEST_STRING);\r\n+\t\ttcAllProperty.setTestBool(TEST_BOOL);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Marshall the TestCategoryAllProperty and assert that it equals the resource\r\n+\t * @param resource containing the expected JSON\r\n+\t * @throws JAXBException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void assertMarshalWithResource(String resource) throws JAXBException, IOException {\r\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\r\n+\t\t\r\n+\t\tStringWriter sw = new StringWriter();\r\n+\t\tjsonMarshaller.marshal(tcAllProperty, sw);\r\n+\r\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(resource);\r\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\r\n+\t\tinitProperties();\r\n+\t\t\r\n+\t\tassertMarshalWithResource(RESOURCE_WITH_VALUES);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshallingWithDefaultValues() throws JAXBException, IOException {\r\n+\t\tassertMarshalWithResource(RESOURCE_WITH_DEFAULTS);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Unmarshall the resource\r\n+\t * @param resource containing the input JSON\r\n+\t * @throws JAXBException\r\n+\t * @throws IOException\r\n+\t */\r\n+\tpublic void assertUnmarshalWithResource(String resource) throws JAXBException, IOException {\r\n+\t\t// Quick mock setup to embed the model into a resource set\r\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\r\n+\t\tResource resourceImpl = new ResourceImpl();\r\n+\t\tresourceSet.getResources().add(resourceImpl);\r\n+\t\tresourceImpl.getContents().add(tcAllProperty.getATypeInstance());\r\n+\t\t\r\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\r\n+\t\t\r\n+\t\tString inputJson = TestActivator.getResourceContentAsString(resource);\r\n+\t\tStringReader sr = new StringReader(inputJson);\r\n+\t\t\r\n+\t\tjsonUnmarshaller.unmarshal(new StreamSource(sr), TestCategoryAllProperty.class);\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\r\n+\t\t// Initial default values are set\r\n+\t\tassertEqualsDefaultValues();\r\n+\t\t\r\n+\t\t// Unmarshall the resource containing the new values\r\n+\t\tassertUnmarshalWithResource(RESOURCE_WITH_VALUES);\r\n+\t\t\r\n+\t\t// The values are correctly overwritten\r\n+\t\tassertEqualsTestValues();\r\n+\t}\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonUnmarshallingWithDefaultValues() throws JAXBException, IOException {\r\n+\t\t// Set to the new values\r\n+\t\tinitProperties();\r\n+\t\tassertEqualsTestValues();\r\n+\t\t\r\n+\t\t// Unmarshall the resource containing the default values\r\n+\t\tassertUnmarshalWithResource(RESOURCE_WITH_DEFAULTS);\r\n+\t\t\r\n+\t\t// The values are correctly overwritten\r\n+\t\tassertEqualsDefaultValues();\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Assert that the new values are set correctly\r\n+\t */\r\n+\tprivate void assertEqualsTestValues() {\r\n+\t\tassertEquals(TEST_INT, tcAllProperty.getTestInt());\r\n+\t\tassertEquals(TEST_STRING, tcAllProperty.getTestString());\r\n+\t\tassertEquals(TEST_RESOURCE_STRING, tcAllProperty.getTestResource().toPlatformString(false));\r\n+\t\tassertEquals(TEST_ENUM, tcAllProperty.getTestEnum());\r\n+\t\tassertEquals(TEST_BOOL, tcAllProperty.getTestBool());\r\n+\t\tassertEquals(TEST_FLOAT, tcAllProperty.getTestFloat(), EPSILON);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Assert that the default values are set correctly\r\n+\t */\r\n+\tprivate void assertEqualsDefaultValues() {\r\n+\t\t// int default is Long in the bean and can be null, but is a long in the TestCategoryAllProperty\r", "originalCommit": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3OTEzOA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488579138", "bodyText": "I added a null check via the TypeInstance of the bean.", "author": "JAmmermann-DLR", "createdAt": "2020-09-15T11:06:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxMTYxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxMzI4OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480213289", "bodyText": "Better move the UUID into a constant to avoid duplication", "author": "andriikovalov-dlr", "createdAt": "2020-08-31T15:38:53Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryBeanATest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\r\n+\r\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.StringReader;\r\n+import java.io.StringWriter;\r\n+\r\n+import javax.xml.bind.JAXBElement;\r\n+import javax.xml.bind.JAXBException;\r\n+import javax.xml.bind.Marshaller;\r\n+import javax.xml.bind.Unmarshaller;\r\n+import javax.xml.transform.stream.StreamSource;\r\n+\r\n+import org.eclipse.emf.ecore.resource.Resource;\r\n+import org.eclipse.emf.ecore.resource.ResourceSet;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\r\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\r\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\r\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\r\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryBeanA;\r\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\r\n+\r\n+public class TestCategoryBeanATest extends AConceptTestCase {\r\n+\r\n+\tprivate JAXBUtility jaxbUtility;\r\n+\tprivate Concept concept;\r\n+\t\r\n+\t@Before\r\n+\tpublic void setUp() throws Exception {\r\n+\t\tconcept = loadConceptFromPlugin();\r\n+\t\t\r\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryBeanA.class});\r\n+\t}\r\n+\r\n+\t\r\n+\t@Test\r\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\r\n+\t\t\r\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\r\n+\t\t\r\n+\t\tTestCategoryBeanA testCategoryBean = new TestCategoryBeanA(concept);\r\n+\t\ttestCategoryBean.getTypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\r", "originalCommit": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU3OTQyOQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488579429", "bodyText": "Done", "author": "JAmmermann-DLR", "createdAt": "2020-09-15T11:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxMzI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzMzUyNw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480233527", "bodyText": "We have exactly the same functionality in de.dlr.sc.virsat.model.concept.test.util.GeneratorJunitAssert. I don't know, maybe there is some clever way to reuse it?", "author": "andriikovalov-dlr", "createdAt": "2020-08-31T16:08:32Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/test/TestActivator.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.model.extension.tests.test;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.net.URL;\r\n+\r\n+import org.junit.Assert;\r\n+\r\n+public class TestActivator {\r", "originalCommit": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5MDI2NA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488590264", "bodyText": "I checked the files an the code is not a complete duplicate: in the TestActivator a custom message can be provided and in the GeneratorJunitAssert we have additional logic to flush the files. But maybe we should also provide the flushing for the JSON files? If yes, can we just use the GeneratorJunitAssert via composition in the TestActivator?", "author": "JAmmermann-DLR", "createdAt": "2020-09-15T11:26:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzMzUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyNzk0NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r489327945", "bodyText": "Yes, this flushing means overwriting of expected files with actual resources, and there is a separate launch configuration that does it. We might need it too if we change the marschalling. Anyways, I think it's out of scope for this ticket, let's leave it for now.", "author": "andriikovalov-dlr", "createdAt": "2020-09-16T10:19:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzMzUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzODg3OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480238879", "bodyText": "This method repeats in several classes, maybe we can extract it to a base class or to a utility class?", "author": "andriikovalov-dlr", "createdAt": "2020-08-31T16:18:00Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryCompositionArrayTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.list.IBeanList;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyComposed;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryCompositionArray;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryCompositionArrayTest extends AConceptTestCase {\n+\t\n+\tprivate TestCategoryCompositionArray testArray;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryCompositionArray_Marshaling.json\";\n+\tprivate static final String RESOURCE_NULL_COMPOSITION = \"/resources/json/TestCategoryCompositionArray_Marshaling_NullComposition.json\";\n+\tprivate static final String RESOURCE_CHANGE_ELEMENT = \"/resources/json/TestCategoryCompositionArray_Marshaling_ChangeElement.json\";\n+\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\t// Because a composed bean is generic we need an adapter\n+\t\t// And because of the adapter we have to manually add the composed\n+\t\t// classes to the marshaller.\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryCompositionArray.class, TestCategoryAllProperty.class});\n+\t\t\n+\t\t// Load the concept to create the test object\n+\t\tprepareEditingDomain();\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttestArray = new TestCategoryCompositionArray(concept);\n+\t\t\n+\t\ttestArray.getATypeInstance().setUuid(new VirSatUuid(\"f5d016ac-65fa-4b9d-ae94-582d4f73138a\"));\n+\t\tIBeanList<BeanPropertyComposed<TestCategoryAllProperty>> staticArray = testArray.getTestCompositionArrayStaticBean();\n+\t\tfor (int i = 0; i < staticArray.size(); i++) {\n+\t\t\tBeanPropertyComposed<TestCategoryAllProperty> bean = staticArray.get(i);\n+\t\t\tbean.getATypeInstance().setUuid(new VirSatUuid(\"45e18c9d-ef85-4ab8-ba2a-c5916697a0b\" + i));\n+\t\t\t\n+\t\t\tTestCategoryAllProperty tcAllProperty = bean.getValue();\n+\t\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty, i);\n+\t\t}\n+\t\t\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\t\n+\t}\n+\t\n+\t/**\n+\t * Marshalls the test object and asserts that the result equals the test resource\n+\t * @param resource the test resource\n+\t * @throws JAXBException\n+\t * @throws IOException\n+\t */\n+\tprivate void assertMarshall(String resource) throws JAXBException, IOException {", "originalCommit": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4MDM4Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488580387", "bodyText": "I extracted it into the JsonTestHelper", "author": "JAmmermann-DLR", "createdAt": "2020-09-15T11:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzODg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0NDc3Ng==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r480244776", "bodyText": "A lot of repetitive code in the unmarshalling tests, maybe we can extract some of it into a helper method or something?", "author": "andriikovalov-dlr", "createdAt": "2020-08-31T16:28:03Z", "path": "de.dlr.sc.virsat.model.extension.tests.test/src/de/dlr/sc/virsat/model/extension/tests/model/json/TestCategoryReferenceTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package de.dlr.sc.virsat.model.extension.tests.model.json;\n+\n+import static de.dlr.sc.virsat.model.extension.tests.test.TestActivator.assertEqualsNoWs;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.Unmarshaller;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.resource.impl.ResourceImpl;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyReference;\n+import de.dlr.sc.virsat.model.concept.types.property.BeanPropertyString;\n+import de.dlr.sc.virsat.model.dvlm.concepts.Concept;\n+import de.dlr.sc.virsat.model.dvlm.json.JAXBUtility;\n+import de.dlr.sc.virsat.model.dvlm.types.impl.VirSatUuid;\n+import de.dlr.sc.virsat.model.extension.tests.model.AConceptTestCase;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryAllProperty;\n+import de.dlr.sc.virsat.model.extension.tests.model.TestCategoryReference;\n+import de.dlr.sc.virsat.model.extension.tests.test.TestActivator;\n+\n+public class TestCategoryReferenceTest extends AConceptTestCase {\n+\n+\tprivate TestCategoryReference tcReference;\n+\tprivate JAXBUtility jaxbUtility;\n+\tprivate Concept concept;\n+\tprivate BeanPropertyString bpString;\n+\tprivate BeanPropertyReference<TestCategoryAllProperty> refCatBean;\n+\tprivate TestCategoryAllProperty tcAllProperty;\n+\tprivate BeanPropertyReference<BeanPropertyString> refPropBean;\n+\t\n+\tprivate static final String RESOURCE = \"/resources/json/TestCategoryReference_Marshaling.json\";\n+\tprivate static final String RESOURCE_NULL_REFERENCE = \"/resources/json/TestCategoryReference_Marshaling_NullReference.json\";\n+\tprivate static final String RESOURCE_CHANGED_REFERENCE = \"/resources/json/TestCategoryReference_Marshaling_ChangeReference.json\";\n+\t\n+\t@Before\n+\tpublic void setup() throws JAXBException {\n+\t\tjaxbUtility = new JAXBUtility(new Class[] {TestCategoryReference.class});\n+\t\t\n+\t\tconcept = loadConceptFromPlugin();\n+\t\ttcReference = new TestCategoryReference(concept);\n+\t\ttcReference.getATypeInstance().setUuid(new VirSatUuid(\"0370d14d-e6a1-4660-83f1-5bb98fa840ac\"));\n+\t\t\n+\t\tbpString = JsonTestHelper.createTestStringBean(concept);\n+\t\ttcReference.setTestRefProperty(bpString);\n+\t\t\n+\t\trefPropBean = tcReference.getTestRefPropertyBean();\n+\t\trefPropBean.getATypeInstance().setUuid(new VirSatUuid(\"0dee3e78-fbcd-4294-8dba-5fa3d4760249\"));\n+\t\t\n+\t\trefCatBean = tcReference.getTestRefCategoryBean();\n+\t\trefCatBean.getATypeInstance().setUuid(new VirSatUuid(\"f34d30b0-80f5-4c96-864f-29ab4d3ae9f2\"));\n+\t\ttcAllProperty = new TestCategoryAllProperty(concept);\n+\t\tJsonTestHelper.setTestCategoryAllPropertyUuids(tcAllProperty);\n+\t\tJsonTestHelper.createRepositoryWithUnitManagement(concept);\n+\t\t\n+\t\tbpString.setValue(JsonTestHelper.TEST_STRING);\n+\t\ttcReference.setTestRefCategory(tcAllProperty);\n+\t}\n+\t\n+\t/**\n+\t * Marshalls the test object and asserts that the result equals the test resource\n+\t * @param resource the test resource\n+\t * @throws JAXBException\n+\t * @throws IOException\n+\t */\n+\tprivate void assertMarshall(String resource) throws JAXBException, IOException {\n+\t\tMarshaller jsonMarshaller = jaxbUtility.getJsonMarshaller();\n+\t\t\n+\t\tStringWriter sw = new StringWriter();\n+\t\tjsonMarshaller.marshal(tcReference, sw);\n+\t\t\n+\t\tString expectedJson = TestActivator.getResourceContentAsString(resource);\n+\t\tassertEqualsNoWs(\"Json is as expected\", expectedJson, sw.toString());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshalling() throws JAXBException, IOException {\n+\t\t\n+\t\tassertMarshall(RESOURCE);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshalling() throws JAXBException, IOException {\n+\t\tBeanPropertyString bpString2 = new TestCategoryAllProperty(concept).getTestStringBean();\n+\t\tbpString2.getATypeInstance().setUuid(new VirSatUuid(\"1256e7a2-9a1f-443c-85f8-7b766eac3f50\"));\n+\t\t\n+\t\t// Quick mock setup to embed the model into a resource set\n+\t\tResourceSet resourceSet = new ResourceSetImpl();\n+\t\tResource resourceImpl = new ResourceImpl();\n+\t\tresourceSet.getResources().add(resourceImpl);\n+\t\tresourceImpl.getContents().add(tcReference.getATypeInstance());\n+\t\tresourceImpl.getContents().add(bpString.getATypeInstance());\n+\t\tresourceImpl.getContents().add(bpString2.getATypeInstance());\n+\t\tresourceImpl.getContents().add(refCatBean.getATypeInstance());\n+\t\tresourceImpl.getContents().add(tcAllProperty.getATypeInstance());\n+\t\t\n+\t\tUnmarshaller jsonUnmarshaller = jaxbUtility.getJsonUnmarshaller(resourceSet);\n+\t\t\n+\t\tString inputJson = TestActivator.getResourceContentAsString(RESOURCE_CHANGED_REFERENCE);\n+\t\tStringReader sr = new StringReader(inputJson);\n+\n+\t\tassertEquals(bpString.getUuid(), tcReference.getTestRefProperty().getUuid());\n+\t\t\n+\t\tjsonUnmarshaller.unmarshal(new StreamSource(sr), TestCategoryReference.class);\n+\t\t\n+\t\tassertEquals(\"Referenced bean changed successfully\", bpString2.getUuid(), tcReference.getTestRefProperty().getUuid());\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonMarshallingNull() throws JAXBException, IOException {\n+\t\t\n+\t\ttcReference.setTestRefProperty(null);\n+\t\ttcReference.setTestRefCategory(null);\n+\t\t\n+\t\tassertMarshall(RESOURCE_NULL_REFERENCE);\n+\t}\n+\t\n+\t@Test\n+\tpublic void testJsonUnmarshallingNull() throws JAXBException, IOException {\n+\t\t\n+\t\t// Quick mock setup to embed the model into a resource set", "originalCommit": "3c17cc3a34b0f5cbe536f8afce461d4a74364bed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4MDc4OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/717#discussion_r488580789", "bodyText": "I added two methods to the JsonTestHelper, to reduce repetitive code", "author": "JAmmermann-DLR", "createdAt": "2020-09-15T11:09:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI0NDc3Ng=="}], "type": "inlineReview"}, {"oid": "df9e1f2e1a394ef5ed778b58208b015cc09787dd", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/df9e1f2e1a394ef5ed778b58208b015cc09787dd", "message": "Changes due to review - (Task #607)\n\n- In TestCategoryAllProperty rename method and update asserts\n- Extract uuid into static field in TestCategoryBeanATest\n- In TestCategoryReferenceArrayTest remove unnecessary cast to String\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-09-15T08:13:24Z", "type": "commit"}, {"oid": "9d8676bb6280cfd7b593688b9620233c76b7263d", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/9d8676bb6280cfd7b593688b9620233c76b7263d", "message": "Extract assertMarshall function into JsonTestHelper - (Task #607)\n\nAlso renamed some fields.\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-09-15T09:24:06Z", "type": "commit"}, {"oid": "0881232b41080bbe4773554dfd5fd6757e829d24", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/0881232b41080bbe4773554dfd5fd6757e829d24", "message": "Fix import statements - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-09-15T09:47:10Z", "type": "commit"}, {"oid": "6a40c0ab9ad314851154106feca2b5d938dc239b", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/6a40c0ab9ad314851154106feca2b5d938dc239b", "message": "Extract repetitive unmarshalling code into JsonTestHelper - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-09-15T10:29:33Z", "type": "commit"}, {"oid": "fce374e242f27c189ecbfdb78d4e1e11bdca3b3b", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/fce374e242f27c189ecbfdb78d4e1e11bdca3b3b", "message": "Remove unnecessary cast to int - (Task #607)\n\n---\nTask #607: Evaluate transforming Beans from/to JSONs with Jersey", "committedDate": "2020-09-15T11:17:40Z", "type": "commit"}]}