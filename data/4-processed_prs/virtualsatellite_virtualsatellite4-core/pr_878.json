{"pr_number": 878, "pr_title": "Features/task 850 create a concept chapter for state machines", "pr_createdAt": "2020-12-02T15:52:52Z", "pr_url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/878", "timeline": [{"oid": "99b769507d21b034188af652f5b946246cd2d8ad", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/99b769507d21b034188af652f5b946246cd2d8ad", "message": "Prepared first State Machines Quickstart in Manual - (Task #850)\n\n\n---\nTask #850: Create a Concept Chapter for State Machines in the User\nManual", "committedDate": "2020-12-02T14:59:21Z", "type": "commit"}, {"oid": "421725772a5231f4b72b06f380e2be7ed6bc9ef6", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/421725772a5231f4b72b06f380e2be7ed6bc9ef6", "message": "Merge branch 'development' into features/task_850-Create_a_Concept_Chap", "committedDate": "2020-12-02T15:26:31Z", "type": "commit"}, {"oid": "67b4a22cdd5c054ec87001452a1a059c6cae1352", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/67b4a22cdd5c054ec87001452a1a059c6cae1352", "message": "Merge remote-tracking branch 'origin/feature/task_876-Add_George_to_known_a' into features/task_850-Create_a_Concept_Chap", "committedDate": "2020-12-02T15:54:34Z", "type": "commit"}, {"oid": "f62f4bc44bc534e1f6bf91961f7e688ab11260a1", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f62f4bc44bc534e1f6bf91961f7e688ab11260a1", "message": "# WARNING: head commit changed in the meantime\n\nUpdating the chapter for State Machine Concept - (Task #850)\n\n\n---\nTask #850: Create a Concept Chapter for State Machines in the User\nManual", "committedDate": "2020-12-03T08:43:53Z", "type": "commit"}, {"oid": "0b2df0b85f5fd37f2b41e0917b61f2b41d318a20", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/0b2df0b85f5fd37f2b41e0917b61f2b41d318a20", "message": "Merge branch 'development' into feature/task_850-Create_a_Concept_Chapter_StateMachine", "committedDate": "2020-12-03T10:05:13Z", "type": "commit"}, {"oid": "69ca0459999a520629eb52b60bf4b292ad351af9", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/69ca0459999a520629eb52b60bf4b292ad351af9", "message": "Editorial improvements - (Task #850)\n\n---\nTask #850: Create a Concept Chapter for State Machines in the User\nManual", "committedDate": "2020-12-03T11:03:45Z", "type": "commit"}, {"oid": "ec76da06b04299d2f1e91fad912b955a7fc4417b", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ec76da06b04299d2f1e91fad912b955a7fc4417b", "message": "Added missing whitespace", "committedDate": "2020-12-03T12:21:06Z", "type": "commit"}, {"oid": "e1152fb98309f0d1def6587a5b938e432ed40e30", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e1152fb98309f0d1def6587a5b938e432ed40e30", "message": "Updated George author name", "committedDate": "2020-12-03T12:24:27Z", "type": "commit"}, {"oid": "edde19448f0e1fb67785adc5e8f41c88fdcca231", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/edde19448f0e1fb67785adc5e8f41c88fdcca231", "message": "Reverting name to george author name", "committedDate": "2020-12-03T12:26:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1ODgxMg==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/878#discussion_r535358812", "bodyText": "\"we will create a mass budget\" -> \"we will create a state machine\" ?", "author": "SaMuellerDLR", "createdAt": "2020-12-03T15:54:55Z", "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_User_Manual.adoc", "diffHunk": "@@ -1232,6 +1232,112 @@ image:chapterModeling/MaturityOverview.png[Maturity overview]\n \r\n Elements can be collapsed or expanded and the values can be exported to Excel. \r\n \r\n+\r\n+==== State machine concept\r\n+\r\n+Virtual Satellite provides means to add state machines to your system but also of its single components. State machines describe the behavior of the system. It consists of a finite number of states and is therefore also called finite-state machine (FSM). Based on the current state and a given input the machine performs state transitions and produces outputs. \r\n+\r\n+The basic building blocks of a state machine are:\r\n+\r\n+* `State:` \r\n+is a situation of a system depending on previous inputs and causes a reaction on following inputs. One state is marked as the initial state; this is where the execution of the machine starts.\r\n+* `Transition:` defines for which input a state is changed from one to another. Depending on the state machine type, states and/or transitions produce outputs.\r\n+* `AllowsConstraint:` should specify the states that are allowed to be activated while the parent state is active.\r\n+* `ForbidsConstraint:` should specify the states that are forbidden while the parent state is active.\r\n+\r\n+In the following we will create a mass budget. Create a project - in the following called `MySatellite` - and activate the following concepts\r", "originalCommit": "edde19448f0e1fb67785adc5e8f41c88fdcca231", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwNjY2NA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/878#discussion_r536006664", "bodyText": "changed", "author": "GeorgeNasrDLR", "createdAt": "2020-12-04T10:44:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1ODgxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1OTczMw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/878#discussion_r535359733", "bodyText": "\"This shown in the following image\" -> This is shown in the following image\"", "author": "SaMuellerDLR", "createdAt": "2020-12-03T15:55:57Z", "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_User_Manual.adoc", "diffHunk": "@@ -1232,6 +1232,112 @@ image:chapterModeling/MaturityOverview.png[Maturity overview]\n \r\n Elements can be collapsed or expanded and the values can be exported to Excel. \r\n \r\n+\r\n+==== State machine concept\r\n+\r\n+Virtual Satellite provides means to add state machines to your system but also of its single components. State machines describe the behavior of the system. It consists of a finite number of states and is therefore also called finite-state machine (FSM). Based on the current state and a given input the machine performs state transitions and produces outputs. \r\n+\r\n+The basic building blocks of a state machine are:\r\n+\r\n+* `State:` \r\n+is a situation of a system depending on previous inputs and causes a reaction on following inputs. One state is marked as the initial state; this is where the execution of the machine starts.\r\n+* `Transition:` defines for which input a state is changed from one to another. Depending on the state machine type, states and/or transitions produce outputs.\r\n+* `AllowsConstraint:` should specify the states that are allowed to be activated while the parent state is active.\r\n+* `ForbidsConstraint:` should specify the states that are forbidden while the parent state is active.\r\n+\r\n+In the following we will create a mass budget. Create a project - in the following called `MySatellite` - and activate the following concepts\r\n+\r\n+* `de.dlr.sc.virsat.model.extension.statemachines`\r\n+* `de.dlr.sc.virsat.model.extension.ps`\r\n+\r\n+according to <<Activating a Concept>>.\r\n+\r\n+:step1: 0\r\n+[%header,cols=\">8,62a,40a\"] \r\n+|===\r\n+\r\n+|Step\r\n+|Task\r\n+|Image\r\n+\r\n+|{counter:step1}.\r\n+|First of all, the concepts _State Machines_ and _Product Structure_ need to be activated in the _Repository_.\r\n+|image:chapterStateMachines/1.png[AddStateMachineConcept]\r\n+\r\n+|{counter:step1}.\r\n+|For the system, create a _ConfigurationTree_ with a _ElementConfiguration_, and give it the name `AOCS` (Attitude and Orbit Control System). This shall serve only as an example.\r\n+|image:chapterStateMachines/2.png[CreatingAOCSElementConfiguration]\r\n+\r\n+|{counter:step1}.\r\n+|Now the `AOCS` shall for example contain components like a Camera as payload, as well as the Thrusters and Reaction Wheels for attitude control purposes. \r\n+\r\n+For this, add three _ElementConfiguration_ elements and give them the following names: `CAM`, `THR`, `RW`.\r\n+|image:chapterStateMachines/3.png[CreateSubcomponentsOfSystem]\r\n+\r\n+|{counter:step1}.\r\n+|Now create a _State Machine_ element for any of the system components. In the following a _State Machine_ is created for the Camera that shall be used in the science phase of the mission for collecting images data. \r\n+\r\n+Now you can add a state machine to the component `CAM` in the _Navigator_ with `Context` \u203a `State Machines` \u203a `Add StateMachine`.\r\n+\r\n+|image:chapterStateMachines/4.png[OpenDiagramEditor]\r\n+\r\n+|{counter:step1}.\r\n+|Having created a _State Machine_ for the camera, now open the _State Machine Diagram Editor_ in the _Navigator_ with `Context` \u203a `Open Diagram Editor`.\r\n+|image:chapterStateMachines/5.png[AddStateMachine]\r\n+\r\n+|{counter:step1}.\r\n+|The _Diagram Editor_ shall look as shown in the image. \r\n+|image:chapterStateMachines/DiagramEditor.png[DiagramEditor]\r\n+\r\n+|{counter:step1}.\r\n+|Now to add a _State_ (same for other objects in the _Diagram Palette_, i.e. `State`, `Transition`, `ForbidsConstraint`, ...), left click on the object in the Palette once and then left click again on the position in the diagram where you want to add it.\r\n+\r\n+The state machine diagram for the `CAM` object shall look as shown in the image.\r\n+|image:chapterStateMachines/AddState.png[AddState] \r\n+\r\n+|{counter:step1}.\r\n+|After creating a transition connection in the Diagram Editor, you want to create a _TransitionTriggerEvent_ and assign it to the previously created transition. \r\n+\r\n+Go in the _Editor_ using _SM_ instance in the _Navigator_: `Context` \u203a `Open Editor` or simply by double clicking on the _SM_ instance in the _Navigator_.\r\n+\r\n+In the _Editor_ if you press [Add TransitionTriggerEvent] button, a new trigger event is created. \r\n+\r\n+Name it under the column `Name`, and give it a description under the `detail`.\r\n+\r\n+|image:chapterStateMachines/Open Editor.png[Open Editor] image:chapterStateMachines/AddTransitionTriggerEvent.png[AddTransitionTriggerEvent]\r\n+\r\n+|{counter:step1}.\r\n+|Now assign the created trigger event to the `Transition` you created in the diagram. Under `trigger` column in the `transitions` section, you can choose a trigger action from the list as shown in the image.\r\n+\r\n+NOTE: Transitions can be created or removed in the _Diagram Editor_, but also manually in the normal _Editor_.\r\n+\r\n+|image:chapterStateMachines/AssigningTriggers.png[AssigningTriggers] image:chapterStateMachines/OpenedWizardForTriggerActions.png[OpenedWizardForTriggerActions]\r\n+\r\n+|{counter:step1}.\r\n+|After assigning, go back to the _Diagram Editor_ and update the state machine diagram using the yellow button up right the _State Machine_ block, then you will be able to see the new transition.\r\n+|image:chapterStateMachines/UpdateStateMachine.png[UpdateStateMachine]\r\n+\r\n+|{counter:step1}.\r\n+|Now having created the various components of the system and described their behavior using state machines, the _State Machine_ for the `AOCS` system can be created in a newly created _ElementConfiguration_ namely `CONOPS` (standing for concept operations). This state machine shall describe the behavior of the whole system.\r\n+\r\n+See Task No.4 \u201cCreating a State Machine\u201d\r\n+\r\n+|image:chapterStateMachines/AddingSystemStateMachine.png[AddingSystemStateMachine]\r\n+\r\n+|{counter:step1}.\r\n+|Open the _Diagram Editor_ and add the following _States_ and _Transitions_ as shown in the image. This shall serve as an example to represent the behavior of the `AOCS` system.\r\n+\r\n+NOTE: The green and red arrows shown in the state machine shall represent the _AllowsConstraints_ and _ForbidsConstraints_ respectively.  For instance, the thrusters are on when the safe mode of the satellite is active to perform coarse pointing control.\r\n+\r\n+TIP: To use the _State Machine_ of other system components, e.g. the Camera, Reaction Wheels in Main system _State Machine_, one can just drag and drop them from the _Navigator_. \r\n+\r\n+|image:chapterStateMachines/AOCSSystemStateMachine.png[AOCSSystemStateMachine] image:chapterStateMachines/AOCSTransitionsAndTriggerEvents.png[AOCSTransitionsAndTriggerEvents]\r\n+\r\n+|{counter:step1}.\r\n+|For each section in _State Machine_ concept found in the Editor an excel table with the section instances can be created. This shown in the following image.\r", "originalCommit": "edde19448f0e1fb67785adc5e8f41c88fdcca231", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwNjQ3Mw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/878#discussion_r536006473", "bodyText": "changed", "author": "GeorgeNasrDLR", "createdAt": "2020-12-04T10:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1OTczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM2MDA0Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/878#discussion_r535360047", "bodyText": "We should try to do 1 sentence per line. Asciidoc will handle the layouting.", "author": "SaMuellerDLR", "createdAt": "2020-12-03T15:56:22Z", "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_User_Manual.adoc", "diffHunk": "@@ -1232,6 +1232,112 @@ image:chapterModeling/MaturityOverview.png[Maturity overview]\n \r\n Elements can be collapsed or expanded and the values can be exported to Excel. \r\n \r\n+\r\n+==== State machine concept\r\n+\r\n+Virtual Satellite provides means to add state machines to your system but also of its single components. State machines describe the behavior of the system. It consists of a finite number of states and is therefore also called finite-state machine (FSM). Based on the current state and a given input the machine performs state transitions and produces outputs. \r\n+\r\n+The basic building blocks of a state machine are:\r\n+\r\n+* `State:` \r\n+is a situation of a system depending on previous inputs and causes a reaction on following inputs. One state is marked as the initial state; this is where the execution of the machine starts.\r\n+* `Transition:` defines for which input a state is changed from one to another. Depending on the state machine type, states and/or transitions produce outputs.\r\n+* `AllowsConstraint:` should specify the states that are allowed to be activated while the parent state is active.\r\n+* `ForbidsConstraint:` should specify the states that are forbidden while the parent state is active.\r\n+\r\n+In the following we will create a mass budget. Create a project - in the following called `MySatellite` - and activate the following concepts\r\n+\r\n+* `de.dlr.sc.virsat.model.extension.statemachines`\r\n+* `de.dlr.sc.virsat.model.extension.ps`\r\n+\r\n+according to <<Activating a Concept>>.\r\n+\r\n+:step1: 0\r\n+[%header,cols=\">8,62a,40a\"] \r\n+|===\r\n+\r\n+|Step\r\n+|Task\r\n+|Image\r\n+\r\n+|{counter:step1}.\r\n+|First of all, the concepts _State Machines_ and _Product Structure_ need to be activated in the _Repository_.\r\n+|image:chapterStateMachines/1.png[AddStateMachineConcept]\r\n+\r\n+|{counter:step1}.\r\n+|For the system, create a _ConfigurationTree_ with a _ElementConfiguration_, and give it the name `AOCS` (Attitude and Orbit Control System). This shall serve only as an example.\r\n+|image:chapterStateMachines/2.png[CreatingAOCSElementConfiguration]\r\n+\r\n+|{counter:step1}.\r\n+|Now the `AOCS` shall for example contain components like a Camera as payload, as well as the Thrusters and Reaction Wheels for attitude control purposes. \r\n+\r\n+For this, add three _ElementConfiguration_ elements and give them the following names: `CAM`, `THR`, `RW`.\r\n+|image:chapterStateMachines/3.png[CreateSubcomponentsOfSystem]\r\n+\r\n+|{counter:step1}.\r\n+|Now create a _State Machine_ element for any of the system components. In the following a _State Machine_ is created for the Camera that shall be used in the science phase of the mission for collecting images data. \r\n+\r\n+Now you can add a state machine to the component `CAM` in the _Navigator_ with `Context` \u203a `State Machines` \u203a `Add StateMachine`.\r\n+\r\n+|image:chapterStateMachines/4.png[OpenDiagramEditor]\r\n+\r\n+|{counter:step1}.\r\n+|Having created a _State Machine_ for the camera, now open the _State Machine Diagram Editor_ in the _Navigator_ with `Context` \u203a `Open Diagram Editor`.\r\n+|image:chapterStateMachines/5.png[AddStateMachine]\r\n+\r\n+|{counter:step1}.\r\n+|The _Diagram Editor_ shall look as shown in the image. \r\n+|image:chapterStateMachines/DiagramEditor.png[DiagramEditor]\r\n+\r\n+|{counter:step1}.\r\n+|Now to add a _State_ (same for other objects in the _Diagram Palette_, i.e. `State`, `Transition`, `ForbidsConstraint`, ...), left click on the object in the Palette once and then left click again on the position in the diagram where you want to add it.\r\n+\r\n+The state machine diagram for the `CAM` object shall look as shown in the image.\r\n+|image:chapterStateMachines/AddState.png[AddState] \r\n+\r\n+|{counter:step1}.\r\n+|After creating a transition connection in the Diagram Editor, you want to create a _TransitionTriggerEvent_ and assign it to the previously created transition. \r\n+\r\n+Go in the _Editor_ using _SM_ instance in the _Navigator_: `Context` \u203a `Open Editor` or simply by double clicking on the _SM_ instance in the _Navigator_.\r\n+\r\n+In the _Editor_ if you press [Add TransitionTriggerEvent] button, a new trigger event is created. \r\n+\r\n+Name it under the column `Name`, and give it a description under the `detail`.\r\n+\r\n+|image:chapterStateMachines/Open Editor.png[Open Editor] image:chapterStateMachines/AddTransitionTriggerEvent.png[AddTransitionTriggerEvent]\r\n+\r\n+|{counter:step1}.\r\n+|Now assign the created trigger event to the `Transition` you created in the diagram. Under `trigger` column in the `transitions` section, you can choose a trigger action from the list as shown in the image.\r\n+\r\n+NOTE: Transitions can be created or removed in the _Diagram Editor_, but also manually in the normal _Editor_.\r\n+\r\n+|image:chapterStateMachines/AssigningTriggers.png[AssigningTriggers] image:chapterStateMachines/OpenedWizardForTriggerActions.png[OpenedWizardForTriggerActions]\r\n+\r\n+|{counter:step1}.\r\n+|After assigning, go back to the _Diagram Editor_ and update the state machine diagram using the yellow button up right the _State Machine_ block, then you will be able to see the new transition.\r\n+|image:chapterStateMachines/UpdateStateMachine.png[UpdateStateMachine]\r\n+\r\n+|{counter:step1}.\r\n+|Now having created the various components of the system and described their behavior using state machines, the _State Machine_ for the `AOCS` system can be created in a newly created _ElementConfiguration_ namely `CONOPS` (standing for concept operations). This state machine shall describe the behavior of the whole system.\r\n+\r\n+See Task No.4 \u201cCreating a State Machine\u201d\r\n+\r\n+|image:chapterStateMachines/AddingSystemStateMachine.png[AddingSystemStateMachine]\r\n+\r\n+|{counter:step1}.\r\n+|Open the _Diagram Editor_ and add the following _States_ and _Transitions_ as shown in the image. This shall serve as an example to represent the behavior of the `AOCS` system.\r\n+\r\n+NOTE: The green and red arrows shown in the state machine shall represent the _AllowsConstraints_ and _ForbidsConstraints_ respectively.  For instance, the thrusters are on when the safe mode of the satellite is active to perform coarse pointing control.\r", "originalCommit": "edde19448f0e1fb67785adc5e8f41c88fdcca231", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwNjUzNA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/878#discussion_r536006534", "bodyText": "changed", "author": "GeorgeNasrDLR", "createdAt": "2020-12-04T10:44:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM2MDA0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM2MTQxMw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/878#discussion_r535361413", "bodyText": "We shouldnt use \"CONOPS\" in the example. Try to find a different name here. The reason is that CONOPS is a critical term for export control and might cause issues.", "author": "SaMuellerDLR", "createdAt": "2020-12-03T15:57:53Z", "path": "de.dlr.sc.virsat.docs.feature/src/docs/VirSat_Core_User_Manual.adoc", "diffHunk": "@@ -1232,6 +1232,112 @@ image:chapterModeling/MaturityOverview.png[Maturity overview]\n \r\n Elements can be collapsed or expanded and the values can be exported to Excel. \r\n \r\n+\r\n+==== State machine concept\r\n+\r\n+Virtual Satellite provides means to add state machines to your system but also of its single components. State machines describe the behavior of the system. It consists of a finite number of states and is therefore also called finite-state machine (FSM). Based on the current state and a given input the machine performs state transitions and produces outputs. \r\n+\r\n+The basic building blocks of a state machine are:\r\n+\r\n+* `State:` \r\n+is a situation of a system depending on previous inputs and causes a reaction on following inputs. One state is marked as the initial state; this is where the execution of the machine starts.\r\n+* `Transition:` defines for which input a state is changed from one to another. Depending on the state machine type, states and/or transitions produce outputs.\r\n+* `AllowsConstraint:` should specify the states that are allowed to be activated while the parent state is active.\r\n+* `ForbidsConstraint:` should specify the states that are forbidden while the parent state is active.\r\n+\r\n+In the following we will create a mass budget. Create a project - in the following called `MySatellite` - and activate the following concepts\r\n+\r\n+* `de.dlr.sc.virsat.model.extension.statemachines`\r\n+* `de.dlr.sc.virsat.model.extension.ps`\r\n+\r\n+according to <<Activating a Concept>>.\r\n+\r\n+:step1: 0\r\n+[%header,cols=\">8,62a,40a\"] \r\n+|===\r\n+\r\n+|Step\r\n+|Task\r\n+|Image\r\n+\r\n+|{counter:step1}.\r\n+|First of all, the concepts _State Machines_ and _Product Structure_ need to be activated in the _Repository_.\r\n+|image:chapterStateMachines/1.png[AddStateMachineConcept]\r\n+\r\n+|{counter:step1}.\r\n+|For the system, create a _ConfigurationTree_ with a _ElementConfiguration_, and give it the name `AOCS` (Attitude and Orbit Control System). This shall serve only as an example.\r\n+|image:chapterStateMachines/2.png[CreatingAOCSElementConfiguration]\r\n+\r\n+|{counter:step1}.\r\n+|Now the `AOCS` shall for example contain components like a Camera as payload, as well as the Thrusters and Reaction Wheels for attitude control purposes. \r\n+\r\n+For this, add three _ElementConfiguration_ elements and give them the following names: `CAM`, `THR`, `RW`.\r\n+|image:chapterStateMachines/3.png[CreateSubcomponentsOfSystem]\r\n+\r\n+|{counter:step1}.\r\n+|Now create a _State Machine_ element for any of the system components. In the following a _State Machine_ is created for the Camera that shall be used in the science phase of the mission for collecting images data. \r\n+\r\n+Now you can add a state machine to the component `CAM` in the _Navigator_ with `Context` \u203a `State Machines` \u203a `Add StateMachine`.\r\n+\r\n+|image:chapterStateMachines/4.png[OpenDiagramEditor]\r\n+\r\n+|{counter:step1}.\r\n+|Having created a _State Machine_ for the camera, now open the _State Machine Diagram Editor_ in the _Navigator_ with `Context` \u203a `Open Diagram Editor`.\r\n+|image:chapterStateMachines/5.png[AddStateMachine]\r\n+\r\n+|{counter:step1}.\r\n+|The _Diagram Editor_ shall look as shown in the image. \r\n+|image:chapterStateMachines/DiagramEditor.png[DiagramEditor]\r\n+\r\n+|{counter:step1}.\r\n+|Now to add a _State_ (same for other objects in the _Diagram Palette_, i.e. `State`, `Transition`, `ForbidsConstraint`, ...), left click on the object in the Palette once and then left click again on the position in the diagram where you want to add it.\r\n+\r\n+The state machine diagram for the `CAM` object shall look as shown in the image.\r\n+|image:chapterStateMachines/AddState.png[AddState] \r\n+\r\n+|{counter:step1}.\r\n+|After creating a transition connection in the Diagram Editor, you want to create a _TransitionTriggerEvent_ and assign it to the previously created transition. \r\n+\r\n+Go in the _Editor_ using _SM_ instance in the _Navigator_: `Context` \u203a `Open Editor` or simply by double clicking on the _SM_ instance in the _Navigator_.\r\n+\r\n+In the _Editor_ if you press [Add TransitionTriggerEvent] button, a new trigger event is created. \r\n+\r\n+Name it under the column `Name`, and give it a description under the `detail`.\r\n+\r\n+|image:chapterStateMachines/Open Editor.png[Open Editor] image:chapterStateMachines/AddTransitionTriggerEvent.png[AddTransitionTriggerEvent]\r\n+\r\n+|{counter:step1}.\r\n+|Now assign the created trigger event to the `Transition` you created in the diagram. Under `trigger` column in the `transitions` section, you can choose a trigger action from the list as shown in the image.\r\n+\r\n+NOTE: Transitions can be created or removed in the _Diagram Editor_, but also manually in the normal _Editor_.\r\n+\r\n+|image:chapterStateMachines/AssigningTriggers.png[AssigningTriggers] image:chapterStateMachines/OpenedWizardForTriggerActions.png[OpenedWizardForTriggerActions]\r\n+\r\n+|{counter:step1}.\r\n+|After assigning, go back to the _Diagram Editor_ and update the state machine diagram using the yellow button up right the _State Machine_ block, then you will be able to see the new transition.\r\n+|image:chapterStateMachines/UpdateStateMachine.png[UpdateStateMachine]\r\n+\r\n+|{counter:step1}.\r\n+|Now having created the various components of the system and described their behavior using state machines, the _State Machine_ for the `AOCS` system can be created in a newly created _ElementConfiguration_ namely `CONOPS` (standing for concept operations). This state machine shall describe the behavior of the whole system.\r", "originalCommit": "edde19448f0e1fb67785adc5e8f41c88fdcca231", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwNjU4NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/878#discussion_r536006585", "bodyText": "changed", "author": "GeorgeNasrDLR", "createdAt": "2020-12-04T10:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM2MTQxMw=="}], "type": "inlineReview"}, {"oid": "f4c916785be8b977245bf832ca2825a40feff2b5", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f4c916785be8b977245bf832ca2825a40feff2b5", "message": "Adding some changes to the chapter considering the reviews - (Task #876)\n\n---\nTask #876: Add George to known authors", "committedDate": "2020-12-04T10:20:13Z", "type": "commit"}, {"oid": "94fe593d1d96866bcdb512479b4c5979604d122d", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/94fe593d1d96866bcdb512479b4c5979604d122d", "message": "Merge branch 'features/task_850-Create_a_Concept_Chap' of https://github.com/virtualsatellite/VirtualSatellite4-Core.git into feature/task_850-Create_a_Concept_Chapter_StateMachine", "committedDate": "2020-12-04T10:32:42Z", "type": "commit"}, {"oid": "c87f5659a469d1ff14be1de3a293cd59f0ff4ca4", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/c87f5659a469d1ff14be1de3a293cd59f0ff4ca4", "message": "Merge remote-tracking branch 'origin/development' into feature/task_850-Create_a_Concept_Chapter_StateMachine", "committedDate": "2020-12-04T10:34:20Z", "type": "commit"}, {"oid": "742f3c40b2ba56966e588a7fbf46c6a22940dfbe", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/742f3c40b2ba56966e588a7fbf46c6a22940dfbe", "message": "Updating the image warnings - (Task #883)\n\n---\nTask #883: Adding George To State Machine Concept Chapter", "committedDate": "2020-12-04T15:42:46Z", "type": "commit"}, {"oid": "ab0ba0a38cd38f220dbd52fe7a5965fec5da8054", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ab0ba0a38cd38f220dbd52fe7a5965fec5da8054", "message": "Fixing the warnings with the images - (Task #883)\n\n---\nTask #883: Adding George To Chapter State Machines in the manual", "committedDate": "2020-12-05T08:37:44Z", "type": "commit"}, {"oid": "7d8ddaea975dd8b69868f7087df7172301b47daf", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/7d8ddaea975dd8b69868f7087df7172301b47daf", "message": "Updating Naming for some Images - (Task #883)\n\n---\nTask #883: Adding George To Chapter State Machine Concept", "committedDate": "2020-12-05T09:29:58Z", "type": "commit"}, {"oid": "d702f048118eec5215db0717ac7ffd6b5087576c", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/d702f048118eec5215db0717ac7ffd6b5087576c", "message": "Another Update !! - (Task #883)\n\n---\nTask #883: Adding George To Chapter Concept State Machines", "committedDate": "2020-12-05T10:33:12Z", "type": "commit"}, {"oid": "74fbb55e043556202cdae88d3fbcc93118a26d32", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/74fbb55e043556202cdae88d3fbcc93118a26d32", "message": "Another trial (problem of Surfire) - (Task #883)\n\n---\nTask #883: Adding George To Chapter Concept State Machine", "committedDate": "2020-12-05T19:28:49Z", "type": "commit"}]}