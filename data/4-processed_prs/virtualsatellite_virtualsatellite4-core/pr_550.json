{"pr_number": 550, "pr_title": "Feature/task 540 rest endpoint for repo management", "pr_createdAt": "2020-03-31T16:54:40Z", "pr_url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550", "timeline": [{"oid": "413c930b4635e30f095089bb9ecb09e0343957be", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/413c930b4635e30f095089bb9ecb09e0343957be", "message": "Add endpoint for managing repos - (Task #540)", "committedDate": "2020-03-26T11:57:23Z", "type": "commit"}, {"oid": "44d2cb417e37e0e9b3b075285d0e6685fd789ee4", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/44d2cb417e37e0e9b3b075285d0e6685fd789ee4", "message": "Merge remote-tracking branch 'origin/feature/task_537-Persistence-for-server-repositories' into feature/task_540-REST_Endpoint_for_Repo_Management", "committedDate": "2020-03-26T11:59:53Z", "type": "commit"}, {"oid": "e1f536ccebe5b2ce594376b2e07cc1deacc04bf9", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/e1f536ccebe5b2ce594376b2e07cc1deacc04bf9", "message": "Added REST method stub for getting all repositories (Task #540)", "committedDate": "2020-03-26T14:02:23Z", "type": "commit"}, {"oid": "f28302d59788d662adde5caea549c2142e55ce9e", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f28302d59788d662adde5caea549c2142e55ce9e", "message": "Rename endpoint class - (Task #540)", "committedDate": "2020-03-26T17:55:48Z", "type": "commit"}, {"oid": "8dd9880a1d4277b6026ac58b3207529333362ee4", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/8dd9880a1d4277b6026ac58b3207529333362ee4", "message": "Try using HTTP post methods with parameters - (Task #540)", "committedDate": "2020-03-26T17:57:12Z", "type": "commit"}, {"oid": "bb8934999510bf522d6c3b7575690b806372e382", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/bb8934999510bf522d6c3b7575690b806372e382", "message": "Fix wrong import - (Task #540)", "committedDate": "2020-03-26T17:59:26Z", "type": "commit"}, {"oid": "0fd47f1317f74959459180a142437815058b83fe", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/0fd47f1317f74959459180a142437815058b83fe", "message": "Merge remote-tracking branch 'origin/feature/task_537-Persistence-for-server-repositories' into feature/task_540-REST_Endpoint_for_Repo_Management", "committedDate": "2020-03-26T18:00:26Z", "type": "commit"}, {"oid": "daf033aa8a458cc1b1f2fcd7b6f5bf7b34b852ef", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/daf033aa8a458cc1b1f2fcd7b6f5bf7b34b852ef", "message": "Added test case for repo management controller - (Task #540)\n\n---\nTask #540: Add REST Endpoint for Management of Repositories", "committedDate": "2020-03-27T11:07:28Z", "type": "commit"}, {"oid": "0bb79b26ee8ab61e80fbb327e37c06d908588e09", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/0bb79b26ee8ab61e80fbb327e37c06d908588e09", "message": "Added a test case for project management rest API (Task #540)\n\nAlso clearing RepoRegistry in other tests.\n[skip ci]", "committedDate": "2020-03-27T11:20:23Z", "type": "commit"}, {"oid": "f43e671cbe40b5b2b382b089db797072b85894cf", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f43e671cbe40b5b2b382b089db797072b85894cf", "message": "Minor restructuring for project management rest API (Task #540)\n\n[skip ci]", "committedDate": "2020-03-27T12:17:30Z", "type": "commit"}, {"oid": "2ef679ddcc1eaa533f18113d93fea852c29aae59", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/2ef679ddcc1eaa533f18113d93fea852c29aae59", "message": "Added REST API test for project management (Task #540)\n\n- Changed getAllProjects to return a list of project names\n- Added equals method to RepositoryConfiguration", "committedDate": "2020-03-27T13:28:11Z", "type": "commit"}, {"oid": "5a6e89b47ab555261c7f526f600e2ca36dc0de59", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/5a6e89b47ab555261c7f526f600e2ca36dc0de59", "message": "Tests for REST API for project management (Task #540)\n\ncloses #540", "committedDate": "2020-03-27T14:19:49Z", "type": "commit"}, {"oid": "ec638f7bc73fab1fcb1dd119cbd2994d72d5f71a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ec638f7bc73fab1fcb1dd119cbd2994d72d5f71a", "message": "Merge remote-tracking branch\n'origin/feature/task_537-Persistence-for-server-repositories' into\nfeature/task_540-REST_Endpoint_for_Repo_Management\n\nConflicts:\n\tde.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/RepoRegistryTest.java", "committedDate": "2020-03-27T14:29:26Z", "type": "commit"}, {"oid": "61bfd223335dcf4018955401301c2464aaf015b2", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/61bfd223335dcf4018955401301c2464aaf015b2", "message": "Simplified some code for setting up repository configs - (Task #540)\n\n\n---\nTask #540: Add REST Endpoint for Management of Repositories", "committedDate": "2020-03-27T16:27:39Z", "type": "commit"}, {"oid": "3b8882573977b547a41b71306e54d20a64abf637", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/3b8882573977b547a41b71306e54d20a64abf637", "message": "Merge branch 'development' into\nfeature/task_540-REST_Endpoint_for_Repo_Management\n\nConflicts:\n\tde.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/configuration/RepositoryConfigurationTest.java\n\tde.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/RepoRegistryTest.java\n\tde.dlr.sc.virsat.server.test/src/de/dlr/sc/virsat/server/repository/ServerRepoHelperTest.java\n\tde.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/configuration/RepositoryConfiguration.java", "committedDate": "2020-03-31T14:17:22Z", "type": "commit"}, {"oid": "f502c2dfc0cc4653e024736178b0df443a655c82", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f502c2dfc0cc4653e024736178b0df443a655c82", "message": "Refactored RepoRegistryTest (Task #540)\n\n[skip ci]", "committedDate": "2020-03-31T14:47:52Z", "type": "commit"}, {"oid": "404837b536001654d06ff7868339761d6eed6a9d", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/404837b536001654d06ff7868339761d6eed6a9d", "message": "Fixed tests (Task #540)", "committedDate": "2020-03-31T16:19:04Z", "type": "commit"}, {"oid": "aeda8d062b62092b058e457102a8fda4c590f109", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/aeda8d062b62092b058e457102a8fda4c590f109", "message": "Fixed header warning (Task #540)", "committedDate": "2020-03-31T16:20:27Z", "type": "commit"}, {"oid": "42afeded685021500dae392a7b56d1a8d67dcac3", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/42afeded685021500dae392a7b56d1a8d67dcac3", "message": "Fixed typo in class name (Task #540)", "committedDate": "2020-03-31T16:22:41Z", "type": "commit"}, {"oid": "049cecb7cd2442bb0adc34072efacd2aaf391181", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/049cecb7cd2442bb0adc34072efacd2aaf391181", "message": "Removed unused constants (Task #540)", "committedDate": "2020-03-31T16:47:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxNTE3MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401415171", "bodyText": "Is it ok to access the RepoRegistry in the Resources or should we move this code into the Controller? E.g. have a function getAllProjects() in the Controller?", "author": "JAmmermann-DLR", "createdAt": "2020-04-01T07:41:48Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.Consumes;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.Produces;\r\n+import javax.ws.rs.core.MediaType;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.controller.RepoManagementController;\r\n+import de.dlr.sc.virsat.server.repository.RepoRegistry;\r\n+\r\n+@Path(ProjectManagementResource.PATH)\r\n+public class ProjectManagementResource {\r\n+\r\n+\tpublic static final String PATH = \"/project\";\r\n+\r\n+\tprivate RepoManagementController controller;\r\n+\r\n+\tpublic ProjectManagementResource() {\r\n+\t\tcontroller = new RepoManagementController();\r\n+\t}\r\n+\r\n+\t@GET\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getAllProjects() {\r\n+\t\tList<String> projects = new ArrayList<>(RepoRegistry.getInstance().getRepositories().keySet());\r", "originalCommit": "049cecb7cd2442bb0adc34072efacd2aaf391181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzgxNw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401523817", "bodyText": "Yes, makes sense to me. I'll change it.", "author": "andriikovalov-dlr", "createdAt": "2020-04-01T10:46:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxNTE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxNTYwOA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401415608", "bodyText": "Also move this RepoRegistry in the Controller?", "author": "JAmmermann-DLR", "createdAt": "2020-04-01T07:42:31Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.Consumes;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.Produces;\r\n+import javax.ws.rs.core.MediaType;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.controller.RepoManagementController;\r\n+import de.dlr.sc.virsat.server.repository.RepoRegistry;\r\n+\r\n+@Path(ProjectManagementResource.PATH)\r\n+public class ProjectManagementResource {\r\n+\r\n+\tpublic static final String PATH = \"/project\";\r\n+\r\n+\tprivate RepoManagementController controller;\r\n+\r\n+\tpublic ProjectManagementResource() {\r\n+\t\tcontroller = new RepoManagementController();\r\n+\t}\r\n+\r\n+\t@GET\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getAllProjects() {\r\n+\t\tList<String> projects = new ArrayList<>(RepoRegistry.getInstance().getRepositories().keySet());\r\n+\t\treturn Response.status(Response.Status.OK).entity(projects).build();\r\n+\t}\r\n+\r\n+\t\r\n+\t/**\r\n+\t * Gets the configuration for the given project name.\r\n+\t * If project does not exist returns status NOT_FOUND\r\n+\t */\r\n+\t@GET\r\n+\t@Path(\"/{projectName}\")\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getProject(@PathParam(\"projectName\") String projectName) {\r\n+\t\tif (controller.getRepository(projectName) != null) {\r\n+\t\t\tRepositoryConfiguration configuration = controller.getRepository(projectName).getRepositoryConfiguration();\r\n+\t\t\treturn Response.status(Response.Status.OK).entity(configuration).build();\r\n+\t\t} else {\r\n+\t\t\treturn Response.status(Response.Status.NOT_FOUND).build();\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@DELETE\r\n+\t@Path(\"/{projectName}\")\r\n+\tpublic Response deleteProject(@PathParam(\"projectName\") String repoName) {\r\n+\t\tcontroller.deleteRepository(repoName);\r\n+\t\treturn Response.status(Response.Status.OK).build();\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Creates or updates a project configuration on the project specified by the URL.\r\n+\t * URL project overrides project name in the passed configuration if they are different.\r\n+\t * @param configuration should contain URL and backend\r\n+\t */\r\n+\t@PUT\r\n+\t@Path(\"/{projectName}\")\r\n+\t@Consumes(MediaType.APPLICATION_JSON)\r\n+\tpublic Response createOrUpdateProject(@PathParam(\"projectName\") String projectName, RepositoryConfiguration configuration) {\r\n+\t\tconfiguration.setProjectName(projectName);\r\n+\t\tif (!validProjectConfiguration(configuration)) {\r\n+\t\t\treturn Response.status(Response.Status.BAD_REQUEST).build();\r\n+\t\t}\r\n+\t\tif (RepoRegistry.getInstance().getRepositories().containsKey(projectName)) {\r", "originalCommit": "049cecb7cd2442bb0adc34072efacd2aaf391181", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxODc1OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401418759", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (controller.getRepository(projectName) != null) {\n          \n          \n            \n            \t\t\tRepositoryConfiguration configuration = controller.getRepository(projectName).getRepositoryConfiguration();\n          \n          \n            \n            \t\tServerRepository repository = controller.getRepository(projectName)\n          \n          \n            \n            \t\tif (repository != null) {\n          \n          \n            \n            \t\t\tRepositoryConfiguration configuration = repository.getRepositoryConfiguration();", "author": "JAmmermann-DLR", "createdAt": "2020-04-01T07:48:25Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.Consumes;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.Produces;\r\n+import javax.ws.rs.core.MediaType;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.controller.RepoManagementController;\r\n+import de.dlr.sc.virsat.server.repository.RepoRegistry;\r\n+\r\n+@Path(ProjectManagementResource.PATH)\r\n+public class ProjectManagementResource {\r\n+\r\n+\tpublic static final String PATH = \"/project\";\r\n+\r\n+\tprivate RepoManagementController controller;\r\n+\r\n+\tpublic ProjectManagementResource() {\r\n+\t\tcontroller = new RepoManagementController();\r\n+\t}\r\n+\r\n+\t@GET\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getAllProjects() {\r\n+\t\tList<String> projects = new ArrayList<>(RepoRegistry.getInstance().getRepositories().keySet());\r\n+\t\treturn Response.status(Response.Status.OK).entity(projects).build();\r\n+\t}\r\n+\r\n+\t\r\n+\t/**\r\n+\t * Gets the configuration for the given project name.\r\n+\t * If project does not exist returns status NOT_FOUND\r\n+\t */\r\n+\t@GET\r\n+\t@Path(\"/{projectName}\")\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getProject(@PathParam(\"projectName\") String projectName) {\r\n+\t\tif (controller.getRepository(projectName) != null) {\r\n+\t\t\tRepositoryConfiguration configuration = controller.getRepository(projectName).getRepositoryConfiguration();\r", "originalCommit": "049cecb7cd2442bb0adc34072efacd2aaf391181", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NDgwMQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401464801", "bodyText": "This segment looks weird. What if properties is not null but other.properties is null?\nI think we can fix and simplify this via\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (properties == null) {\n          \n          \n            \n            \t\t\tif (other.properties != null) {\n          \n          \n            \n            \t\t\t\treturn false;\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t} else if (!properties.equals(other.properties)) {\n          \n          \n            \n            \t\t\treturn false;\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\treturn true;\n          \n          \n            \n            \t\treturn Objects.equals(properties, other.properties)", "author": "SaMuellerDLR", "createdAt": "2020-04-01T09:07:19Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/configuration/RepositoryConfiguration.java", "diffHunk": "@@ -139,4 +140,34 @@ public String getLocalPath() {\n \tpublic void setLocalPath(String localPath) {\r\n \t\tproperties.setProperty(LOCAL_PATH_KEY, localPath);\r\n \t}\r\n+\r\n+\t@Override\r\n+\tpublic int hashCode() {\r\n+\t\tfinal int prime = 31;\r\n+\t\tint result = 1;\r\n+\t\tresult = prime * result + ((properties == null) ? 0 : properties.hashCode());\r\n+\t\treturn result;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic boolean equals(Object obj) {\r\n+\t\tif (this == obj) {\r\n+\t\t\treturn true;\r\n+\t\t}\r\n+\t\tif (obj == null) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\tif (getClass() != obj.getClass()) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\tRepositoryConfiguration other = (RepositoryConfiguration) obj;\r\n+\t\tif (properties == null) {\r\n+\t\t\tif (other.properties != null) {\r\n+\t\t\t\treturn false;\r\n+\t\t\t}\r\n+\t\t} else if (!properties.equals(other.properties)) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+\t\treturn true;\r", "originalCommit": "049cecb7cd2442bb0adc34072efacd2aaf391181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0OTUwNQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401549505", "bodyText": "Then it will go to else and call properties.equals(null), so no problem there. But I agree, with Objects.equals it looks better.", "author": "andriikovalov-dlr", "createdAt": "2020-04-01T11:37:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NDgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2Nzg0Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401467847", "bodyText": "Codecoverage seems to be complaining about complete lack of coverage of hashCode() and also partially of equals()", "author": "SaMuellerDLR", "createdAt": "2020-04-01T09:12:23Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/configuration/RepositoryConfiguration.java", "diffHunk": "@@ -139,4 +140,34 @@ public String getLocalPath() {\n \tpublic void setLocalPath(String localPath) {\r\n \t\tproperties.setProperty(LOCAL_PATH_KEY, localPath);\r\n \t}\r\n+\r\n+\t@Override\r\n+\tpublic int hashCode() {\r\n+\t\tfinal int prime = 31;\r", "originalCommit": "049cecb7cd2442bb0adc34072efacd2aaf391181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MDQ3Nw==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401570477", "bodyText": "I would rather ignore it than put unnecessary code in tests to cover this auto-generated hashCode()", "author": "andriikovalov-dlr", "createdAt": "2020-04-01T12:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2Nzg0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4MjA5NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401682095", "bodyText": "Well if hashcode and equals is manually implemented, I think it should be tested.", "author": "PhilMFischer", "createdAt": "2020-04-01T14:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2Nzg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3MjE1OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401472159", "bodyText": "Is it ok that we catch the exception here but then return Response.Status.OK in the calling method?", "author": "SaMuellerDLR", "createdAt": "2020-04-01T09:19:32Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/controller/RepoManagementController.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.controller;\r\n+\r\n+import java.io.File;\r\n+import java.net.URISyntaxException;\r\n+\r\n+import org.eclipse.core.runtime.Status;\r\n+\r\n+import de.dlr.sc.virsat.server.Activator;\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.configuration.ServerConfiguration;\r\n+import de.dlr.sc.virsat.server.repository.RepoRegistry;\r\n+import de.dlr.sc.virsat.server.repository.ServerRepository;\r\n+\r\n+public class RepoManagementController {\r\n+\t\r\n+\tpublic RepoManagementController() {\r\n+\t}\r\n+\t\r\n+\tpublic ServerRepository getRepository(String repoName) {\r\n+\t\treturn RepoRegistry.getInstance().getRepository(repoName);\r\n+\t}\r\n+\t\r\n+\t/**\r\n+\t * Adds and registers a new project\r\n+\t * @param repoConfiguration project configuration\r\n+\t */\r\n+\tpublic void addNewRepository(RepositoryConfiguration repoConfiguration) {\r\n+\t\ttry {\r\n+\t\t\tServerRepository repository = new ServerRepository(new File(ServerConfiguration.getProjectRepositoriesDir()), repoConfiguration);\r\n+\t\t\tRepoRegistry.getInstance().addRepository(repoConfiguration.getProjectName(), repository);\r\n+\t\t} catch (URISyntaxException e) {\r\n+\t\t\tString errorMessage = \"Error adding repository configuration for project \" + repoConfiguration.getProjectName();\r", "originalCommit": "049cecb7cd2442bb0adc34072efacd2aaf391181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MjY1MQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r401552651", "bodyText": "No, this is definitely wrong :) thanks!", "author": "andriikovalov-dlr", "createdAt": "2020-04-01T11:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3MjE1OQ=="}], "type": "inlineReview"}, {"oid": "822e2974c4222c8010c88595f6e582d22d9a7308", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/822e2974c4222c8010c88595f6e582d22d9a7308", "message": "Update de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java\n\nCo-Authored-By: JAmmermann-DLR <56025440+JAmmermann-DLR@users.noreply.github.com>", "committedDate": "2020-04-01T10:50:51Z", "type": "commit"}, {"oid": "ccb930aa7c9c66f472cc4a44a01320d30b882fb5", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/ccb930aa7c9c66f472cc4a44a01320d30b882fb5", "message": "Fixed suggestion (Task #540)\n\n[skip ci]", "committedDate": "2020-04-01T10:53:32Z", "type": "commit"}, {"oid": "8d9758c4758854d396e3965c5d15dceb7f2e43f6", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/8d9758c4758854d396e3965c5d15dceb7f2e43f6", "message": "Moved RepoRegistry interaction from resource to controller (Task #540)", "committedDate": "2020-04-01T11:24:24Z", "type": "commit"}, {"oid": "84a141380c4aad135eb0ec0462f4c93009fa37f1", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/84a141380c4aad135eb0ec0462f4c93009fa37f1", "message": "Refactored equals in RepositoryConfiguration (Task #540)", "committedDate": "2020-04-01T11:41:43Z", "type": "commit"}, {"oid": "800f3770a5d3c67d8cce18404dc06fc82e74e00a", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/800f3770a5d3c67d8cce18404dc06fc82e74e00a", "message": "Return bad request on invalid URI (Task #540)", "committedDate": "2020-04-01T13:35:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEwNjYwOQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r402106609", "bodyText": "Would it make sense to move this into the RepositoryConfiguration class and make it public there since the data here purely operates on the configuration?", "author": "SaMuellerDLR", "createdAt": "2020-04-02T07:31:23Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.Consumes;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.Produces;\r\n+import javax.ws.rs.core.MediaType;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.controller.RepoManagementController;\r\n+import de.dlr.sc.virsat.server.repository.ServerRepository;\r\n+\r\n+@Path(ProjectManagementResource.PATH)\r\n+public class ProjectManagementResource {\r\n+\r\n+\tpublic static final String PATH = \"/project\";\r\n+\r\n+\tprivate RepoManagementController controller;\r\n+\r\n+\tpublic ProjectManagementResource() {\r\n+\t\tcontroller = new RepoManagementController();\r\n+\t}\r\n+\r\n+\t@GET\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getAllProjects() {\r\n+\t\tList<String> projects = new ArrayList<>(controller.getAllProjectNames());\r\n+\t\treturn Response.status(Response.Status.OK).entity(projects).build();\r\n+\t}\r\n+\r\n+\t\r\n+\t/**\r\n+\t * Gets the configuration for the given project name.\r\n+\t * If project does not exist returns status NOT_FOUND\r\n+\t */\r\n+\t@GET\r\n+\t@Path(\"/{projectName}\")\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getProject(@PathParam(\"projectName\") String projectName) {\r\n+\t\tServerRepository serverRepository = controller.getRepository(projectName);\r\n+\t\tif (serverRepository != null) {\r\n+\t\t\tRepositoryConfiguration configuration = serverRepository.getRepositoryConfiguration();\r\n+\t\t\treturn Response.status(Response.Status.OK).entity(configuration).build();\r\n+\t\t} else {\r\n+\t\t\treturn Response.status(Response.Status.NOT_FOUND).build();\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@DELETE\r\n+\t@Path(\"/{projectName}\")\r\n+\tpublic Response deleteProject(@PathParam(\"projectName\") String repoName) {\r\n+\t\tcontroller.deleteRepository(repoName);\r\n+\t\treturn Response.status(Response.Status.OK).build();\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Creates or updates a project configuration on the project specified by the URL.\r\n+\t * URL project overrides project name in the passed configuration if they are different.\r\n+\t * @param configuration should contain URL and backend\r\n+\t */\r\n+\t@PUT\r\n+\t@Path(\"/{projectName}\")\r\n+\t@Consumes(MediaType.APPLICATION_JSON)\r\n+\tpublic Response createOrUpdateProject(@PathParam(\"projectName\") String projectName, RepositoryConfiguration configuration) {\r\n+\t\tconfiguration.setProjectName(projectName);\r\n+\t\tif (!validProjectConfiguration(configuration)) {\r\n+\t\t\treturn Response.status(Response.Status.BAD_REQUEST).build();\r\n+\t\t}\r\n+\t\ttry {\r\n+\t\t\tif (controller.getAllProjectNames().contains(projectName)) {\r\n+\t\t\t\tcontroller.updateRepository(configuration);\r\n+\t\t\t} else {\r\n+\t\t\t\tcontroller.addNewRepository(configuration);\r\n+\t\t\t}\r\n+\t\t} catch (Exception e) {\r\n+\t\t\treturn Response.status(Response.Status.BAD_REQUEST).entity(e.getMessage()).build();\r\n+\t\t}\r\n+\t\treturn Response.status(Response.Status.OK).build();\r\n+\t}\r\n+\r\n+\tprivate boolean validProjectConfiguration(RepositoryConfiguration configuration) {\r\n+\t\treturn configuration.getProjectName() != null\r\n+\t\t\t\t&& !configuration.getProjectName().isEmpty()\r\n+\t\t\t\t&& configuration.getRemoteUri() != null\r\n+\t\t\t\t&& !configuration.getRemoteUri().isEmpty()\r\n+\t\t\t\t&& configuration.getBackend() != null;\r\n+\t}\r", "originalCommit": "800f3770a5d3c67d8cce18404dc06fc82e74e00a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEwNzI1NQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r402107255", "bodyText": "Maybe we can move this logic into the RepositoryController.\nThen we would have all the real decision logic inside the controller, and only the calls and error handling on the resource level.", "author": "SaMuellerDLR", "createdAt": "2020-04-02T07:32:36Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/resources/ProjectManagementResource.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0.\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *******************************************************************************/\r\n+package de.dlr.sc.virsat.server.resources;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.Consumes;\r\n+import javax.ws.rs.DELETE;\r\n+import javax.ws.rs.GET;\r\n+import javax.ws.rs.PUT;\r\n+import javax.ws.rs.Path;\r\n+import javax.ws.rs.PathParam;\r\n+import javax.ws.rs.Produces;\r\n+import javax.ws.rs.core.MediaType;\r\n+import javax.ws.rs.core.Response;\r\n+\r\n+import de.dlr.sc.virsat.server.configuration.RepositoryConfiguration;\r\n+import de.dlr.sc.virsat.server.controller.RepoManagementController;\r\n+import de.dlr.sc.virsat.server.repository.ServerRepository;\r\n+\r\n+@Path(ProjectManagementResource.PATH)\r\n+public class ProjectManagementResource {\r\n+\r\n+\tpublic static final String PATH = \"/project\";\r\n+\r\n+\tprivate RepoManagementController controller;\r\n+\r\n+\tpublic ProjectManagementResource() {\r\n+\t\tcontroller = new RepoManagementController();\r\n+\t}\r\n+\r\n+\t@GET\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getAllProjects() {\r\n+\t\tList<String> projects = new ArrayList<>(controller.getAllProjectNames());\r\n+\t\treturn Response.status(Response.Status.OK).entity(projects).build();\r\n+\t}\r\n+\r\n+\t\r\n+\t/**\r\n+\t * Gets the configuration for the given project name.\r\n+\t * If project does not exist returns status NOT_FOUND\r\n+\t */\r\n+\t@GET\r\n+\t@Path(\"/{projectName}\")\r\n+\t@Produces(MediaType.APPLICATION_JSON)\r\n+\tpublic Response getProject(@PathParam(\"projectName\") String projectName) {\r\n+\t\tServerRepository serverRepository = controller.getRepository(projectName);\r\n+\t\tif (serverRepository != null) {\r\n+\t\t\tRepositoryConfiguration configuration = serverRepository.getRepositoryConfiguration();\r\n+\t\t\treturn Response.status(Response.Status.OK).entity(configuration).build();\r\n+\t\t} else {\r\n+\t\t\treturn Response.status(Response.Status.NOT_FOUND).build();\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t@DELETE\r\n+\t@Path(\"/{projectName}\")\r\n+\tpublic Response deleteProject(@PathParam(\"projectName\") String repoName) {\r\n+\t\tcontroller.deleteRepository(repoName);\r\n+\t\treturn Response.status(Response.Status.OK).build();\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Creates or updates a project configuration on the project specified by the URL.\r\n+\t * URL project overrides project name in the passed configuration if they are different.\r\n+\t * @param configuration should contain URL and backend\r\n+\t */\r\n+\t@PUT\r\n+\t@Path(\"/{projectName}\")\r\n+\t@Consumes(MediaType.APPLICATION_JSON)\r\n+\tpublic Response createOrUpdateProject(@PathParam(\"projectName\") String projectName, RepositoryConfiguration configuration) {\r\n+\t\tconfiguration.setProjectName(projectName);\r\n+\t\tif (!validProjectConfiguration(configuration)) {\r\n+\t\t\treturn Response.status(Response.Status.BAD_REQUEST).build();\r\n+\t\t}\r\n+\t\ttry {\r\n+\t\t\tif (controller.getAllProjectNames().contains(projectName)) {\r\n+\t\t\t\tcontroller.updateRepository(configuration);\r\n+\t\t\t} else {\r\n+\t\t\t\tcontroller.addNewRepository(configuration);\r\n+\t\t\t}\r", "originalCommit": "800f3770a5d3c67d8cce18404dc06fc82e74e00a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExNzgxOA==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r402117818", "bodyText": "Sure, we can do it", "author": "andriikovalov-dlr", "createdAt": "2020-04-02T07:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEwNzI1NQ=="}], "type": "inlineReview"}, {"oid": "820c6892561e34a34806f0dd846d838bb124774f", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/820c6892561e34a34806f0dd846d838bb124774f", "message": "Created isValid in RepositoryConfiguration (Task #540)\n\nRefactored RepositoryConfigurationTest", "committedDate": "2020-04-02T08:59:28Z", "type": "commit"}, {"oid": "f107e9f764219b71e38d59db66e660ea7461b9b9", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/f107e9f764219b71e38d59db66e660ea7461b9b9", "message": "Moved addOrUpdate logic to RepoManagementController (Task #540)", "committedDate": "2020-04-02T09:22:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3NjkwNQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r402176905", "bodyText": "Any reason why we cant use the getAllProjectNames().contains(...) anymore instead of RepoRegistry.getInstance().getRepositories().containsKey(...) ?", "author": "SaMuellerDLR", "createdAt": "2020-04-02T09:29:58Z", "path": "de.dlr.sc.virsat.server/src/de/dlr/sc/virsat/server/controller/RepoManagementController.java", "diffHunk": "@@ -46,4 +46,15 @@ public void updateRepository(RepositoryConfiguration repoConfiguration) {\n \tpublic Set<String> getAllProjectNames() {\r\n \t\treturn RepoRegistry.getInstance().getRepositories().keySet();\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * If a project with the name from configuration exists, it is updated, otherwise it is created.\r\n+\t */\r\n+\tpublic void addOrUpdateRepository(RepositoryConfiguration repoConfiguration) throws URISyntaxException {\r\n+\t\tif (RepoRegistry.getInstance().getRepositories().containsKey(repoConfiguration.getProjectName())) {\r", "originalCommit": "f107e9f764219b71e38d59db66e660ea7461b9b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5NDM4OQ==", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/pull/550#discussion_r402194389", "bodyText": "sure, we can", "author": "andriikovalov-dlr", "createdAt": "2020-04-02T09:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3NjkwNQ=="}], "type": "inlineReview"}, {"oid": "b9722f3f175b33f18c65956646b967b6edd356d5", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/b9722f3f175b33f18c65956646b967b6edd356d5", "message": "Minor simplification (Task #540)", "committedDate": "2020-04-02T09:59:40Z", "type": "commit"}, {"oid": "76621963386c7c445832f6b687e5764fd7ec91d3", "url": "https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/76621963386c7c445832f6b687e5764fd7ec91d3", "message": "Merge remote-tracking branch 'origin/development' into feature/task_540-Add_REST_Endpoint_for", "committedDate": "2020-04-02T13:20:23Z", "type": "commit"}]}