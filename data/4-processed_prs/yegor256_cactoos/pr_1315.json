{"pr_number": 1315, "pr_title": "Remove some collection decorators", "pr_createdAt": "2020-02-29T16:49:01Z", "pr_url": "https://github.com/yegor256/cactoos/pull/1315", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjE5Ng==", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526196", "bodyText": "@victornoel Please extract these values into constants.", "author": "fanifieiev", "createdAt": "2020-03-02T17:07:13Z", "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")", "originalCommit": "54a31e3cdfa4ed380a40fd28b3778d79196c0140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjM3Mw==", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526373", "bodyText": "@victornoel Please extract these values into constants.", "author": "fanifieiev", "createdAt": "2020-03-02T17:07:32Z", "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",", "originalCommit": "54a31e3cdfa4ed380a40fd28b3778d79196c0140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjQzMQ==", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526431", "bodyText": "@victornoel Please extract these values into constants.", "author": "fanifieiev", "createdAt": "2020-03-02T17:07:39Z", "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipArray() {\n+        new Assertion<>(\n+            \"Must skip elements in array\",\n+            new Skipped<>(\n+                2,\n+                \"one\", \"two\", \"three\", \"four\"", "originalCommit": "54a31e3cdfa4ed380a40fd28b3778d79196c0140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjQ2Mg==", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526462", "bodyText": "@victornoel Please extract these values into constants.", "author": "fanifieiev", "createdAt": "2020-03-02T17:07:42Z", "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipArray() {\n+        new Assertion<>(\n+            \"Must skip elements in array\",\n+            new Skipped<>(\n+                2,\n+                \"one\", \"two\", \"three\", \"four\"\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }", "originalCommit": "54a31e3cdfa4ed380a40fd28b3778d79196c0140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjU1Mg==", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526552", "bodyText": "@victornoel Please extract these values into constants.", "author": "fanifieiev", "createdAt": "2020-03-02T17:07:51Z", "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipArray() {\n+        new Assertion<>(\n+            \"Must skip elements in array\",\n+            new Skipped<>(\n+                2,\n+                \"one\", \"two\", \"three\", \"four\"\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipCollection() {\n+        new Assertion<>(\n+            \"Must skip elements in collection\",\n+            new Skipped<>(\n+                2,\n+                new ListOf<>(\"one\", \"two\", \"three\", \"four\")", "originalCommit": "54a31e3cdfa4ed380a40fd28b3778d79196c0140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjU2MQ==", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526561", "bodyText": "@victornoel Please extract these values into constants.", "author": "fanifieiev", "createdAt": "2020-03-02T17:07:53Z", "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipArray() {\n+        new Assertion<>(\n+            \"Must skip elements in array\",\n+            new Skipped<>(\n+                2,\n+                \"one\", \"two\", \"three\", \"four\"\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipCollection() {\n+        new Assertion<>(\n+            \"Must skip elements in collection\",\n+            new Skipped<>(\n+                2,\n+                new ListOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",", "originalCommit": "54a31e3cdfa4ed380a40fd28b3778d79196c0140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjY0MQ==", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526641", "bodyText": "@victornoel Please extract these values into constants.", "author": "fanifieiev", "createdAt": "2020-03-02T17:08:02Z", "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipArray() {\n+        new Assertion<>(\n+            \"Must skip elements in array\",\n+            new Skipped<>(\n+                2,\n+                \"one\", \"two\", \"three\", \"four\"\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipCollection() {\n+        new Assertion<>(\n+            \"Must skip elements in collection\",\n+            new Skipped<>(\n+                2,\n+                new ListOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skippedAllElements() {\n+        new Assertion<>(\n+            \"Must skip all elements\",\n             new Skipped<>(\n                 2,\n+                \"one\", \"two\"", "originalCommit": "54a31e3cdfa4ed380a40fd28b3778d79196c0140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjcwMQ==", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526701", "bodyText": "@victornoel Please extract these values into constants.", "author": "fanifieiev", "createdAt": "2020-03-02T17:08:08Z", "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipArray() {\n+        new Assertion<>(\n+            \"Must skip elements in array\",\n+            new Skipped<>(\n+                2,\n+                \"one\", \"two\", \"three\", \"four\"\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipCollection() {\n+        new Assertion<>(\n+            \"Must skip elements in collection\",\n+            new Skipped<>(\n+                2,\n+                new ListOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skippedAllElements() {\n+        new Assertion<>(\n+            \"Must skip all elements\",\n             new Skipped<>(\n                 2,\n+                \"one\", \"two\"\n+            ),\n+            new IsEmptyIterable<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skippedMoreThanExists() {\n+        new Assertion<>(\n+            \"Can't skip more than exists\",\n+            new Skipped<>(\n+                Integer.MAX_VALUE,\n+                \"one\", \"two\"", "originalCommit": "54a31e3cdfa4ed380a40fd28b3778d79196c0140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjc4Mw==", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526783", "bodyText": "@victornoel Please extract these values into constants.", "author": "fanifieiev", "createdAt": "2020-03-02T17:08:17Z", "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipArray() {\n+        new Assertion<>(\n+            \"Must skip elements in array\",\n+            new Skipped<>(\n+                2,\n+                \"one\", \"two\", \"three\", \"four\"\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipCollection() {\n+        new Assertion<>(\n+            \"Must skip elements in collection\",\n+            new Skipped<>(\n+                2,\n+                new ListOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skippedAllElements() {\n+        new Assertion<>(\n+            \"Must skip all elements\",\n             new Skipped<>(\n                 2,\n+                \"one\", \"two\"\n+            ),\n+            new IsEmptyIterable<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skippedMoreThanExists() {\n+        new Assertion<>(\n+            \"Can't skip more than exists\",\n+            new Skipped<>(\n+                Integer.MAX_VALUE,\n+                \"one\", \"two\"\n+            ),\n+            new IsEmptyIterable<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+    public void skippedNegativeSize() {\n+        new Assertion<>(\n+            \"Must process negative skipped size\",\n+            new Skipped<>(\n+                -1,\n                 \"one\", \"two\", \"three\", \"four\"", "originalCommit": "54a31e3cdfa4ed380a40fd28b3778d79196c0140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNjgyNg==", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386526826", "bodyText": "@victornoel Please extract these values into constants.", "author": "fanifieiev", "createdAt": "2020-03-02T17:08:22Z", "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n public final class SkippedTest {\n \n     @Test\n-    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n     public void skipIterable() {\n-        MatcherAssert.assertThat(\n-            \"Can't skip elements in iterable\",\n+        new Assertion<>(\n+            \"Must skip elements in iterable\",\n+            new Skipped<>(\n+                2,\n+                new IterableOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipArray() {\n+        new Assertion<>(\n+            \"Must skip elements in array\",\n+            new Skipped<>(\n+                2,\n+                \"one\", \"two\", \"three\", \"four\"\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skipCollection() {\n+        new Assertion<>(\n+            \"Must skip elements in collection\",\n+            new Skipped<>(\n+                2,\n+                new ListOf<>(\"one\", \"two\", \"three\", \"four\")\n+            ),\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"three\",\n+                    \"four\"\n+                )\n+            )\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skippedAllElements() {\n+        new Assertion<>(\n+            \"Must skip all elements\",\n             new Skipped<>(\n                 2,\n+                \"one\", \"two\"\n+            ),\n+            new IsEmptyIterable<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    public void skippedMoreThanExists() {\n+        new Assertion<>(\n+            \"Can't skip more than exists\",\n+            new Skipped<>(\n+                Integer.MAX_VALUE,\n+                \"one\", \"two\"\n+            ),\n+            new IsEmptyIterable<>()\n+        ).affirm();\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+    public void skippedNegativeSize() {\n+        new Assertion<>(\n+            \"Must process negative skipped size\",\n+            new Skipped<>(\n+                -1,\n                 \"one\", \"two\", \"three\", \"four\"\n             ),\n-            Matchers.contains(\n-                \"three\",\n-                \"four\"\n+            new IsEqual<>(\n+                new IterableOf<>(\n+                    \"one\",", "originalCommit": "54a31e3cdfa4ed380a40fd28b3778d79196c0140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNzEzNA==", "url": "https://github.com/yegor256/cactoos/pull/1315#discussion_r386527134", "bodyText": "@victornoel Please remove this one after extracting values into constants", "author": "fanifieiev", "createdAt": "2020-03-02T17:08:54Z", "path": "src/test/java/org/cactoos/iterable/SkippedTest.java", "diffHunk": "@@ -23,31 +23,113 @@\n  */\n package org.cactoos.iterable;\n \n-import org.hamcrest.MatcherAssert;\n-import org.hamcrest.Matchers;\n+import org.cactoos.list.ListOf;\n+import org.hamcrest.collection.IsEmptyIterable;\n+import org.hamcrest.core.IsEqual;\n import org.junit.Test;\n+import org.llorllale.cactoos.matchers.Assertion;\n \n /**\n  * Test Case for {@link Skipped}.\n  *\n  * @since 0.34\n  * @checkstyle JavadocMethodCheck (500 lines)\n  */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")", "originalCommit": "54a31e3cdfa4ed380a40fd28b3778d79196c0140", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4d824991ee45db581107ba8a5e45656945015f96", "url": "https://github.com/yegor256/cactoos/commit/4d824991ee45db581107ba8a5e45656945015f96", "message": "(#1299) Removed collection's Filtered", "committedDate": "2020-03-15T10:03:23Z", "type": "commit"}, {"oid": "a5f70f4141826c48f741cc7b9b7c3d4c235d5af4", "url": "https://github.com/yegor256/cactoos/commit/a5f70f4141826c48f741cc7b9b7c3d4c235d5af4", "message": "(#1304) Removed collection's TailOf", "committedDate": "2020-03-15T10:03:23Z", "type": "commit"}, {"oid": "a9a10c3f299d5e09940680b190c88cc92198a793", "url": "https://github.com/yegor256/cactoos/commit/a9a10c3f299d5e09940680b190c88cc92198a793", "message": "(#1303) Added more tests to iterable's Skipped", "committedDate": "2020-03-15T10:03:23Z", "type": "forcePushed"}, {"oid": "41a409c98fee60e727052dfed7daf5edf4794d9a", "url": "https://github.com/yegor256/cactoos/commit/41a409c98fee60e727052dfed7daf5edf4794d9a", "message": "(#1303) Added more tests to iterable's Skipped", "committedDate": "2020-03-15T10:09:24Z", "type": "commit"}, {"oid": "41a409c98fee60e727052dfed7daf5edf4794d9a", "url": "https://github.com/yegor256/cactoos/commit/41a409c98fee60e727052dfed7daf5edf4794d9a", "message": "(#1303) Added more tests to iterable's Skipped", "committedDate": "2020-03-15T10:09:24Z", "type": "forcePushed"}]}