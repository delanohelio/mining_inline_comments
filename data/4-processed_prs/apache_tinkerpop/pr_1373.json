{"pr_number": 1373, "pr_title": "TINKERPOP-2451 Added JavascriptTranslator for Java", "pr_createdAt": "2020-12-18T18:33:06Z", "pr_url": "https://github.com/apache/tinkerpop/pull/1373", "timeline": [{"oid": "c843051524e6a769d19f94862c8a1eb89a41f41e", "url": "https://github.com/apache/tinkerpop/commit/c843051524e6a769d19f94862c8a1eb89a41f41e", "message": "TINKERPOP-2451 Added JavascriptTranslator for Java\n\nRe-factored cucumber tests to match the Python pattern, which uses the Translator to generate the code that is used by the GLV to execute the cucumber tests. In this way, we test the Translator and the GLV natively.", "committedDate": "2020-12-18T18:05:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwNjM2MA==", "url": "https://github.com/apache/tinkerpop/pull/1373#discussion_r546606360", "bodyText": "Nice coverage!", "author": "jorgebay", "createdAt": "2020-12-21T09:45:39Z", "path": "gremlin-core/src/test/java/org/apache/tinkerpop/gremlin/process/traversal/translator/JavascriptTranslatorTest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.apache.tinkerpop.gremlin.process.traversal.translator;\n+\n+import org.apache.tinkerpop.gremlin.process.traversal.Order;\n+import org.apache.tinkerpop.gremlin.process.traversal.Pop;\n+import org.apache.tinkerpop.gremlin.process.traversal.Scope;\n+import org.apache.tinkerpop.gremlin.process.traversal.Translator;\n+import org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalSource;\n+import org.apache.tinkerpop.gremlin.process.traversal.strategy.decoration.SubgraphStrategy;\n+import org.apache.tinkerpop.gremlin.process.traversal.strategy.verification.ReadOnlyStrategy;\n+import org.apache.tinkerpop.gremlin.structure.Column;\n+import org.apache.tinkerpop.gremlin.structure.Direction;\n+import org.apache.tinkerpop.gremlin.structure.Edge;\n+import org.apache.tinkerpop.gremlin.structure.Vertex;\n+import org.apache.tinkerpop.gremlin.structure.util.detached.DetachedEdge;\n+import org.apache.tinkerpop.gremlin.structure.util.detached.DetachedVertex;\n+import org.apache.tinkerpop.gremlin.structure.util.empty.EmptyGraph;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.LinkedHashMap;\n+import java.util.UUID;\n+\n+import static org.apache.tinkerpop.gremlin.process.traversal.AnonymousTraversalSource.traversal;\n+import static org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.__.hasLabel;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * @author Stephen Mallette (http://stephen.genoprime.com)\n+ */\n+public class JavascriptTranslatorTest {\n+    private static final GraphTraversalSource g = traversal().withEmbedded(EmptyGraph.instance());\n+    private static final Translator.ScriptTranslator translator = JavascriptTranslator.of(\"g\");\n+\n+    @Test\n+    public void shouldTranslateStrategies() throws Exception {\n+        assertEquals(\"g.withStrategies(new ReadOnlyStrategy(),\" +\n+                        \"new SubgraphStrategy(new Map([[\\\"checkAdjacentVertices\\\",false],[\\\"vertices\\\",__.hasLabel(\\\"person\\\")]]))).V().has(\\\"name\\\")\",\n+                translator.translate(g.withStrategies(ReadOnlyStrategy.instance(),\n+                        SubgraphStrategy.build().checkAdjacentVertices(false).vertices(hasLabel(\"person\")).create()).\n+                        V().has(\"name\").asAdmin().getBytecode()).getScript());\n+    }\n+\n+    @Test\n+    public void shouldTranslateMaps() {\n+        final String script = translator.translate(g.V().id().is(new LinkedHashMap<Object,Object>() {{\n+            put(3, \"32\");\n+            put(Arrays.asList(1, 2, 3.1d), 4);\n+        }}).asAdmin().getBytecode()).getScript();\n+        assertEquals(\"g.V().id().is(new Map([[3,\\\"32\\\"],[[1, 2, 3.1],4]]))\", script);\n+    }\n+\n+    @Test\n+    public void shouldTranslateDate() {\n+        final Calendar c = Calendar.getInstance();\n+        c.set(1975, Calendar.SEPTEMBER, 7);\n+        final Date d = c.getTime();\n+        assertTranslation(String.format(\"new Date(%s)\", d.getTime()), d);\n+    }\n+\n+    @Test\n+    public void shouldTranslateUuid() {\n+        final UUID uuid = UUID.fromString(\"ffffffff-fd49-1e4b-0000-00000d4b8a1d\");\n+        assertTranslation(String.format(\"'%s'\", uuid), uuid);\n+    }\n+\n+    @Test\n+    public void shouldTranslateColumn() {\n+        assertTranslation(\"Column.keys\", Column.keys);\n+    }\n+\n+    @Test\n+    public void shouldTranslateDirection() {\n+        assertTranslation(\"Direction.BOTH\", Direction.BOTH);\n+    }\n+\n+    @Test\n+    public void shouldTranslateOrder() {\n+        assertTranslation(\"Order.desc\", Order.desc);", "originalCommit": "c843051524e6a769d19f94862c8a1eb89a41f41e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}