{"pr_number": 1371, "pr_title": "TINKERPOP-2438 Introduce GremlinScriptChecker", "pr_createdAt": "2020-12-11T20:42:32Z", "pr_url": "https://github.com/apache/tinkerpop/pull/1371", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1MjkwNQ==", "url": "https://github.com/apache/tinkerpop/pull/1371#discussion_r542752905", "bodyText": "This should probably have a ; at the end?", "author": "divijvaidya", "createdAt": "2020-12-14T20:34:31Z", "path": "gremlin-groovy/src/test/java/org/apache/tinkerpop/gremlin/groovy/jsr223/GremlinScriptCheckerTest.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.groovy.jsr223;\n+\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+\n+import static org.apache.tinkerpop.gremlin.groovy.jsr223.GremlinScriptChecker.EMPTY_RESULT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+\n+public class GremlinScriptCheckerTest {\n+\n+    @Test\n+    public void shouldNotFindTimeout() {\n+        assertEquals(Optional.empty(), GremlinScriptChecker.parse(\"g.with(true).V().out('knows')\").getTimeout());\n+    }\n+\n+    @Test\n+    public void shouldReturnEmpty() {\n+        assertSame(EMPTY_RESULT, GremlinScriptChecker.parse(\"\"));\n+    }\n+\n+    @Test\n+    public void shouldNotFindTimeoutCozWeCommentedItOut() {\n+        assertEquals(Optional.empty(), GremlinScriptChecker.parse(\"g.\\n\" +\n+                \"                                                  // with('evaluationTimeout', 1000L).\\n\" +\n+                \"                                                  with(true).V().out('knows')\").getTimeout());\n+    }\n+\n+    @Test\n+    public void shouldIdentifyTimeoutAsStringKeySingleQuoted() {\n+        assertEquals(1000, GremlinScriptChecker.parse(\"g.with('evaluationTimeout', 1000L).with(true).V().out('knows')\").\n+                getTimeout().get().longValue());\n+        assertEquals(1000, GremlinScriptChecker.parse(\"g.with('scriptEvaluationTimeout', 1000L).with(true).V().out('knows')\").\n+                getTimeout().get().longValue());\n+    }\n+\n+    @Test\n+    public void shouldIdentifyTimeoutAsStringKeyDoubleQuoted() {\n+        assertEquals(1000, GremlinScriptChecker.parse(\"g.with(\\\"evaluationTimeout\\\", 1000L).with(true).V().out('knows')\").\n+                getTimeout().get().longValue());\n+        assertEquals(1000, GremlinScriptChecker.parse(\"g.with(\\\"scriptEvaluationTimeout\\\", 1000L).with(true).V().out('knows')\").\n+                getTimeout().get().longValue());\n+    }\n+\n+    @Test\n+    public void shouldIdentifyTimeoutAsTokenKey() {\n+        assertEquals(1000, GremlinScriptChecker.parse(\"g.with(Tokens.ARGS_EVAL_TIMEOUT, 1000L).with(true).V().out('knows')\").\n+                getTimeout().get().longValue());\n+        assertEquals(1000, GremlinScriptChecker.parse(\"g.with(Tokens.ARGS_SCRIPT_EVAL_TIMEOUT, 1000L).with(true).V().out('knows')\").\n+                getTimeout().get().longValue());\n+    }\n+\n+    @Test\n+    public void shouldIdentifyTimeoutAsTokenKeyWithoutClassName() {\n+        assertEquals(1000, GremlinScriptChecker.parse(\"g.with(ARGS_EVAL_TIMEOUT, 1000L).with(true).V().out('knows')\").\n+                getTimeout().get().longValue());\n+        assertEquals(1000, GremlinScriptChecker.parse(\"g.with(ARGS_SCRIPT_EVAL_TIMEOUT, 1000L).with(true).V().out('knows')\").\n+                getTimeout().get().longValue());\n+    }\n+\n+    @Test\n+    public void shouldIdentifyMultipleTimeouts() {\n+        assertEquals(6000, GremlinScriptChecker.parse(\"g.with('evaluationTimeout', 1000L).with(true).V().out('knows');\" +\n+                \"g.with('evaluationTimeout', 1000L).with(true).V().out('knows')\\n\" +\n+                \"                                                   //g.with('evaluationTimeout', 1000L).with(true).V().out('knows')\\n\" +\n+                \"                                                   /* g.with('evaluationTimeout', 1000L).with(true).V().out('knows')*/\\n\" +\n+                \"                                                   /* \\n\" +\n+                \"g.with('evaluationTimeout', 1000L).with(true).V().out('knows') \\n\" +\n+                \"*/ \\n\" +\n+                \"                                                   g.with('evaluationTimeout', 1000L).with(true).V().out('knows')\\n\" +", "originalCommit": "f5cb7ec208f1355046b2c56f21dcc9ebfc309c01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1NjM2MA==", "url": "https://github.com/apache/tinkerpop/pull/1371#discussion_r542756360", "bodyText": "Documentation on this regEx would be nice. Something like:\n//.$ --> match strings starting with // followed by zero or more chars till the end of line\n| --> OR\n\\(. --> match string ...\n...\nYou can choose to copy these comments from an online regex tester. They usually print out a detailed description of the regex.", "author": "divijvaidya", "createdAt": "2020-12-14T20:38:07Z", "path": "gremlin-groovy/src/main/java/org/apache/tinkerpop/gremlin/groovy/jsr223/GremlinScriptChecker.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.groovy.jsr223;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Processes Gremlin strings using regex so as to try to detect certain properties from the script without actual\n+ * having to execute a {@code eval()} on it.\n+ */\n+public class GremlinScriptChecker {\n+\n+    public static final Result EMPTY_RESULT = new Result(0);\n+    private static final List<String> tokens = Arrays.asList(\"evaluationTimeout\", \"scriptEvaluationTimeout\",\n+                                                             \"ARGS_EVAL_TIMEOUT\", \"ARGS_SCRIPT_EVAL_TIMEOUT\");\n+\n+    private static final Pattern patternClean = Pattern.compile(\"//.*$|/\\\\*(.|[\\\\r\\\\n])*?\\\\*/|\\\\s\", Pattern.MULTILINE);", "originalCommit": "f5cb7ec208f1355046b2c56f21dcc9ebfc309c01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE5ODUxMQ==", "url": "https://github.com/apache/tinkerpop/pull/1371#discussion_r543198511", "bodyText": "Interesting - the tool I've always used didn't produce that nice explain stuff. I didn't realize that such a thing existed. \ud83d\udc4d", "author": "spmallette", "createdAt": "2020-12-15T09:51:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1NjM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1Njg4NA==", "url": "https://github.com/apache/tinkerpop/pull/1371#discussion_r542756884", "bodyText": "Please add documentation about this regex so that reader understands what it is doing.", "author": "divijvaidya", "createdAt": "2020-12-14T20:38:37Z", "path": "gremlin-groovy/src/main/java/org/apache/tinkerpop/gremlin/groovy/jsr223/GremlinScriptChecker.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.groovy.jsr223;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Processes Gremlin strings using regex so as to try to detect certain properties from the script without actual\n+ * having to execute a {@code eval()} on it.\n+ */\n+public class GremlinScriptChecker {\n+\n+    public static final Result EMPTY_RESULT = new Result(0);\n+    private static final List<String> tokens = Arrays.asList(\"evaluationTimeout\", \"scriptEvaluationTimeout\",\n+                                                             \"ARGS_EVAL_TIMEOUT\", \"ARGS_SCRIPT_EVAL_TIMEOUT\");\n+\n+    private static final Pattern patternClean = Pattern.compile(\"//.*$|/\\\\*(.|[\\\\r\\\\n])*?\\\\*/|\\\\s\", Pattern.MULTILINE);\n+    private static final String timeoutTokens = \"[\\\"']evaluationTimeout[\\\"']|[\\\"']scriptEvaluationTimeout[\\\"']|(?:Tokens\\\\.)?ARGS_EVAL_TIMEOUT|(?:Tokens\\\\.)?ARGS_SCRIPT_EVAL_TIMEOUT\";\n+    private static final Pattern patternTimeout = Pattern.compile(\"\\\\.with\\\\((?:\" + timeoutTokens + \"),(\\\\d*)(:?L|l)?\\\\)\");", "originalCommit": "f5cb7ec208f1355046b2c56f21dcc9ebfc309c01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1OTE3NQ==", "url": "https://github.com/apache/tinkerpop/pull/1371#discussion_r542759175", "bodyText": "Please document the behaviour for multiple queries (that we add their timeouts). This should probably go in reference docs as well.", "author": "divijvaidya", "createdAt": "2020-12-14T20:40:51Z", "path": "gremlin-groovy/src/main/java/org/apache/tinkerpop/gremlin/groovy/jsr223/GremlinScriptChecker.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.tinkerpop.gremlin.groovy.jsr223;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**", "originalCommit": "f5cb7ec208f1355046b2c56f21dcc9ebfc309c01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE5OTk1Mg==", "url": "https://github.com/apache/tinkerpop/pull/1371#discussion_r543199952", "bodyText": "It is documented here: https://github.com/apache/tinkerpop/pull/1371/files#diff-0c5246d79c924132b94fc6af68af66b1f81faebac2410ca9e2af663388c31bb2R73-R79\nWill add something to the reference documentation.", "author": "spmallette", "createdAt": "2020-12-15T09:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjc1OTE3NQ=="}], "type": "inlineReview"}, {"oid": "b223b76ae3bd1fd032cb3c4ad3601be1d2de0a8b", "url": "https://github.com/apache/tinkerpop/commit/b223b76ae3bd1fd032cb3c4ad3601be1d2de0a8b", "message": "TINKERPOP-2438 Introduce GremlinScriptChecker\n\nEven though TINKERPOP-2438 is already done this is a bit of a follow on to that change. The GremlinScriptChecker performs the same exact task as the GremlinAstChecker but it does so with regex parsing which should be faster than processing a full AST. I've left the GremlinASTChecker where it is because I wonder if there isn't yet some usage for more rigorous sort of checks we might come up with in the future or perhaps have checks that only work well with AST processing. It can be removed in the future if we like.", "committedDate": "2020-12-15T10:07:14Z", "type": "commit"}, {"oid": "b223b76ae3bd1fd032cb3c4ad3601be1d2de0a8b", "url": "https://github.com/apache/tinkerpop/commit/b223b76ae3bd1fd032cb3c4ad3601be1d2de0a8b", "message": "TINKERPOP-2438 Introduce GremlinScriptChecker\n\nEven though TINKERPOP-2438 is already done this is a bit of a follow on to that change. The GremlinScriptChecker performs the same exact task as the GremlinAstChecker but it does so with regex parsing which should be faster than processing a full AST. I've left the GremlinASTChecker where it is because I wonder if there isn't yet some usage for more rigorous sort of checks we might come up with in the future or perhaps have checks that only work well with AST processing. It can be removed in the future if we like.", "committedDate": "2020-12-15T10:07:14Z", "type": "forcePushed"}]}