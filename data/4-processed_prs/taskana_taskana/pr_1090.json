{"pr_number": 1090, "pr_title": "Tsk1210: Replaced LoginModule with Embedded Spring LDAP", "pr_createdAt": "2020-05-28T09:48:17Z", "pr_url": "https://github.com/Taskana/taskana/pull/1090", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyODc5Mw==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r432428793", "bodyText": "why did you dlete the hasSize check?", "author": "gitgoodjhe", "createdAt": "2020-05-29T11:43:01Z", "path": "lib/taskana-core/src/test/java/acceptance/task/QueryTaskWithAttachmentAccTest.java", "diffHunk": "@@ -85,13 +85,13 @@ void should_ConfirmIfAttachmentSummariesAreCorrect_When_UsingTaskQueryAndGetTask\n             .collect(Collectors.toList());\n \n     assertThat(queryAttachmentSummaries)\n-        .hasSize(originalAttachments.size())", "originalCommit": "311c780ad5338cf26f137d7cb86c3a1773dc5765", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzMzY1Mw==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r432433653", "bodyText": "This test is unnecessary because it tests the same as the test \"should_ThrowException_When_TransferWithNoAppendAuthorization\". Althouh I think this is not intended. One test should probably test the failure in case of no append authorization and the other the failure in case of no transfer authorization ...but currently both theses tests fail at the  authorization check for append. please also use our new test-name pattern", "author": "gitgoodjhe", "createdAt": "2020-05-29T11:54:35Z", "path": "lib/taskana-core/src/test/java/acceptance/task/TransferTaskAccTest.java", "diffHunk": "@@ -154,7 +154,21 @@ void should_ThrowException_When_TaskToTransferDoesNotExist() {\n     assertThatThrownBy(call).isInstanceOf(TaskNotFoundException.class);\n   }\n \n-  @WithAccessId(user = \"teamlead_1\", groups = \"teamlead_1\")\n+  @WithAccessId(user = \"teamlead-1\", groups = \"teamlead-1\")", "originalCommit": "311c780ad5338cf26f137d7cb86c3a1773dc5765", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNjMzOA==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r432436338", "bodyText": "why public?", "author": "gitgoodjhe", "createdAt": "2020-05-29T12:00:45Z", "path": "lib/taskana-core/src/test/java/acceptance/workbasket/UpdateWorkbasketAccTest.java", "diffHunk": "@@ -60,11 +60,11 @@ void testUpdateWorkbasket()\n   }\n \n   @WithAccessId(\n-      user = \"teamlead_1\",\n+      user = \"teamlead-1\",\n       groups = {\"group_1\", \"businessadmin\"})\n   @Test\n-  void testUpdateWorkbasketWithConcurrentModificationShouldThrowException()\n-      throws NotAuthorizedException, WorkbasketNotFoundException, ConcurrencyException {\n+  public void testUpdateWorkbasketWithConcurrentModificationShouldThrowException()", "originalCommit": "311c780ad5338cf26f137d7cb86c3a1773dc5765", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNjQwNA==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r432436404", "bodyText": "why public?", "author": "gitgoodjhe", "createdAt": "2020-05-29T12:00:53Z", "path": "lib/taskana-core/src/test/java/acceptance/workbasket/UpdateWorkbasketAccTest.java", "diffHunk": "@@ -78,11 +78,11 @@ void testUpdateWorkbasketWithConcurrentModificationShouldThrowException()\n   }\n \n   @WithAccessId(\n-      user = \"teamlead_1\",\n+      user = \"teamlead-1\",\n       groups = {\"group_1\", \"businessadmin\"})\n   @Test\n-  void testUpdateWorkbasketOfNonExistingWorkbasketShouldThrowException()\n-      throws NotAuthorizedException, WorkbasketNotFoundException, ConcurrencyException {\n+  public void testUpdateWorkbasketOfNonExistingWorkbasketShouldThrowException()", "originalCommit": "311c780ad5338cf26f137d7cb86c3a1773dc5765", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNzAyMQ==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r432437021", "bodyText": "Can we delete this ?", "author": "gitgoodjhe", "createdAt": "2020-05-29T12:02:24Z", "path": "rest/taskana-rest-spring-example-boot/src/main/java/pro/taskana/rest/ExampleRestApplication.java", "diffHunk": "@@ -25,27 +21,20 @@\n @Import({\n   ExampleRestConfiguration.class,\n   TransactionalJobsConfiguration.class,\n-  LdapConfiguration.class,\n+  //  LdapConfiguration.class,", "originalCommit": "311c780ad5338cf26f137d7cb86c3a1773dc5765", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0MTQzNw==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r432441437", "bodyText": "why are we printing this?", "author": "gitgoodjhe", "createdAt": "2020-05-29T12:12:25Z", "path": "rest/taskana-rest-spring-example-common/src/test/java/pro/taskana/ldap/LdapTest.java", "diffHunk": "@@ -28,10 +28,8 @@\n \n   @Test\n   void testFindUsers() throws InvalidArgumentException {\n-    if (ldapClient.useLdap()) {\n-      List<AccessIdRepresentationModel> usersAndGroups = ldapClient.searchUsersAndGroups(\"ser0\");\n-      System.out.println(\"#### found \" + LoggerUtils.listToString(usersAndGroups));\n-      assertThat(usersAndGroups).hasSize(50);\n-    }\n+    List<AccessIdRepresentationModel> usersAndGroups = ldapClient.searchUsersAndGroups(\"lead\");\n+    System.out.println(\"#### found \" + LoggerUtils.listToString(usersAndGroups));", "originalCommit": "311c780ad5338cf26f137d7cb86c3a1773dc5765", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MDg5MA==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433850890", "bodyText": "Please remove it :)", "author": "mustaphazorgati", "createdAt": "2020-06-02T12:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0MTQzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MDE3Mw==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r432490173", "bodyText": "subject.getPrincipals().isEmpty(), what do you think?", "author": "gitgoodjhe", "createdAt": "2020-05-29T13:41:46Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/security/SpringSecurityToJaasFilter.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package pro.taskana.rest.security;\n+\n+\n+import java.io.IOException;\n+import java.security.AccessController;\n+import javax.security.auth.Subject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.web.filter.GenericFilterBean;\n+\n+import pro.taskana.common.internal.security.GroupPrincipal;\n+import pro.taskana.common.internal.security.UserPrincipal;\n+\n+/** Simple Filter to map all Spring Security Roles to JAAS-Principals. */\n+public class SpringSecurityToJaasFilter extends GenericFilterBean {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SpringSecurityToJaasFilter.class);\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    Authentication authentication = getCurrentAuthentication();\n+    if (authentication != null) {\n+      LOGGER.debug(\"Authentication found in Spring security context: {}\", authentication);\n+      Subject subject = obtainSubject(request);\n+      if (subject != null) {\n+        initializeUserPrincipalFromAuthentication(authentication, subject);\n+        initializeGroupPrincipalsFromAuthentication(authentication, subject);\n+      }\n+    } else {\n+      LOGGER.debug(\n+          \"No authentication found in Spring security context. Continuing unauthenticatic.\");\n+    }\n+\n+    chain.doFilter(request, response);\n+  }\n+\n+  private void initializeUserPrincipalFromAuthentication(\n+      Authentication authentication, Subject subject) {\n+    if (subject.getPrincipals().size() == 0) {", "originalCommit": "311c780ad5338cf26f137d7cb86c3a1773dc5765", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MTQ1OA==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r432491458", "bodyText": "Empty String with missing placeholder? I don't think this is logging anything", "author": "gitgoodjhe", "createdAt": "2020-05-29T13:43:51Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/security/SpringSecurityToJaasFilter.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package pro.taskana.rest.security;\n+\n+\n+import java.io.IOException;\n+import java.security.AccessController;\n+import javax.security.auth.Subject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.web.filter.GenericFilterBean;\n+\n+import pro.taskana.common.internal.security.GroupPrincipal;\n+import pro.taskana.common.internal.security.UserPrincipal;\n+\n+/** Simple Filter to map all Spring Security Roles to JAAS-Principals. */\n+public class SpringSecurityToJaasFilter extends GenericFilterBean {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SpringSecurityToJaasFilter.class);\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    Authentication authentication = getCurrentAuthentication();\n+    if (authentication != null) {\n+      LOGGER.debug(\"Authentication found in Spring security context: {}\", authentication);\n+      Subject subject = obtainSubject(request);\n+      if (subject != null) {\n+        initializeUserPrincipalFromAuthentication(authentication, subject);\n+        initializeGroupPrincipalsFromAuthentication(authentication, subject);\n+      }\n+    } else {\n+      LOGGER.debug(\n+          \"No authentication found in Spring security context. Continuing unauthenticatic.\");\n+    }\n+\n+    chain.doFilter(request, response);\n+  }\n+\n+  private void initializeUserPrincipalFromAuthentication(\n+      Authentication authentication, Subject subject) {\n+    if (subject.getPrincipals().size() == 0) {\n+      LOGGER.debug(\"Setting the principal of the subject with {}.\", authentication.getPrincipal());\n+      subject\n+          .getPrincipals()\n+          .add(new UserPrincipal(((UserDetails) authentication.getPrincipal()).getUsername()));\n+    } else {\n+      LOGGER.debug(\n+          \"Principal of the subject is already set to {}.\", subject.getPrincipals().toArray()[0]);\n+      throw new RuntimeException(\n+          \"Finding an existing principal is unexpected. Please investigate.\");\n+    }\n+  }\n+\n+  private void initializeGroupPrincipalsFromAuthentication(\n+      Authentication authentication, Subject subject) {\n+\n+    LOGGER.debug(\"Adding roles {} to subject.\", authentication.getAuthorities());\n+\n+    authentication\n+        .getAuthorities()\n+        .forEach(\n+            grantedAuthority ->\n+                subject.getPrincipals().add(new GroupPrincipal(grantedAuthority.getAuthority())));\n+\n+    LOGGER.debug(\"\", subject.getPublicCredentials(GroupPrincipal.class));", "originalCommit": "311c780ad5338cf26f137d7cb86c3a1773dc5765", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5Mzc5Nw==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r432493797", "bodyText": "can we remove the public?", "author": "gitgoodjhe", "createdAt": "2020-05-29T13:47:38Z", "path": "lib/taskana-core/src/test/java/acceptance/classification/UpdateClassificationAccTest.java", "diffHunk": "@@ -84,8 +84,7 @@ public void testUpdateClassification()\n   }\n \n   @Test\n-  public void testUpdateClassificationFails()\n-      throws ClassificationNotFoundException, ConcurrencyException, InvalidArgumentException {\n+  public void testUpdateClassificationFails() throws ClassificationNotFoundException {", "originalCommit": "311c780ad5338cf26f137d7cb86c3a1773dc5765", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5Mzg3Mw==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r432493873", "bodyText": "can we remove the public?", "author": "gitgoodjhe", "createdAt": "2020-05-29T13:47:44Z", "path": "lib/taskana-core/src/test/java/acceptance/classification/UpdateClassificationAccTest.java", "diffHunk": "@@ -190,9 +189,7 @@ public void testUpdateClassificationNotLatestAnymore()\n       user = \"teamlead_1\",\n       groups = {\"group_1\", \"businessadmin\"})\n   @Test\n-  public void testUpdateClassificationParentIdToInvalid()\n-      throws NotAuthorizedException, ClassificationNotFoundException, ConcurrencyException,\n-          InvalidArgumentException {\n+  public void testUpdateClassificationParentIdToInvalid() throws ClassificationNotFoundException {", "originalCommit": "311c780ad5338cf26f137d7cb86c3a1773dc5765", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MzkyNw==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r432493927", "bodyText": "can we remove the public?", "author": "gitgoodjhe", "createdAt": "2020-05-29T13:47:48Z", "path": "lib/taskana-core/src/test/java/acceptance/classification/UpdateClassificationAccTest.java", "diffHunk": "@@ -203,9 +200,7 @@ public void testUpdateClassificationParentIdToInvalid()\n       user = \"teamlead_1\",\n       groups = {\"group_1\", \"businessadmin\"})\n   @Test\n-  public void testUpdateClassificationParentKeyToInvalid()\n-      throws NotAuthorizedException, ClassificationNotFoundException, ConcurrencyException,\n-          InvalidArgumentException {\n+  public void testUpdateClassificationParentKeyToInvalid() throws ClassificationNotFoundException {", "originalCommit": "311c780ad5338cf26f137d7cb86c3a1773dc5765", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5OTg4MA==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r432499880", "bodyText": "Do we really want this enabled all the time?", "author": "gitgoodjhe", "createdAt": "2020-05-29T13:57:08Z", "path": "rest/taskana-rest-spring/src/test/resources/application.properties", "diffHunk": "@@ -1,42 +1,51 @@\n logging.level.pro.taskana=INFO\n-### logging.level.org.springframework=DEBUG\n+logging.level.org.springframework.security=INFO", "originalCommit": "311c780ad5338cf26f137d7cb86c3a1773dc5765", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1NTY5Mg==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r432555692", "bodyText": "Do we really need this class here? Can't we use the RestConfiguration from taskana-rest-spring module?", "author": "gitgoodjhe", "createdAt": "2020-05-29T15:16:15Z", "path": "rest/taskana-rest-spring-example-common/src/test/java/pro/taskana/RestConfiguration.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package pro.taskana;\n+\n+import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n+import java.sql.SQLException;\n+import javax.sql.DataSource;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.http.converter.json.SpringHandlerInstantiator;\n+import org.springframework.transaction.annotation.EnableTransactionManagement;\n+\n+import pro.taskana.classification.api.ClassificationService;\n+import pro.taskana.common.api.TaskanaEngine;\n+import pro.taskana.common.rest.ldap.LdapClient;\n+import pro.taskana.monitor.api.MonitorService;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.workbasket.api.WorkbasketService;\n+\n+/** Configuration for REST service. */\n+@Configuration\n+@ComponentScan\n+@EnableTransactionManagement\n+public class RestConfiguration {", "originalCommit": "311c780ad5338cf26f137d7cb86c3a1773dc5765", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0OTI0OA==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433849248", "bodyText": "Indeed. This file is duplicated", "author": "mustaphazorgati", "createdAt": "2020-06-02T12:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1NTY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0OTg4MA==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433849880", "bodyText": "This is something we talked about in today's cop. => Should be moved to taskana test dependency", "author": "mustaphazorgati", "createdAt": "2020-06-02T12:51:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1NTY5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0Mzg3OQ==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433843879", "bodyText": "where is the version tag? Does this dependency come with spring-boot?", "author": "mustaphazorgati", "createdAt": "2020-06-02T12:41:02Z", "path": "rest/taskana-rest-spring-example-common/pom.xml", "diffHunk": "@@ -72,6 +72,15 @@\n             <artifactId>spring-ldap-core</artifactId>\n             <version>${version.spring.ldap}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.springframework.security</groupId>\n+            <artifactId>spring-security-ldap</artifactId>\n+            <version>${version.spring.security}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.unboundid</groupId>\n+            <artifactId>unboundid-ldapsdk</artifactId>\n+        </dependency>", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NDI1Mg==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433844252", "bodyText": "Remove the version tag since the version can be extracted from spring-boot?", "author": "mustaphazorgati", "createdAt": "2020-06-02T12:41:41Z", "path": "rest/taskana-rest-spring-example-common/pom.xml", "diffHunk": "@@ -72,6 +72,15 @@\n             <artifactId>spring-ldap-core</artifactId>\n             <version>${version.spring.ldap}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.springframework.security</groupId>\n+            <artifactId>spring-security-ldap</artifactId>\n+            <version>${version.spring.security}</version>", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NDk4OQ==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433844989", "bodyText": "do we really need default values?", "author": "mustaphazorgati", "createdAt": "2020-06-02T12:42:57Z", "path": "rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/rest/security/WebSecurityConfig.java", "diffHunk": "@@ -27,22 +32,24 @@\n @EnableWebSecurity\n public class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n \n+  @Value(\"${taskana.ldap.serverUrl:ldap://localhost:10389}\")\n+  private String ldapServerUrl;\n+\n+  @Value(\"${taskana.ldap.baseDn:OU=Test,O=TASKANA}\")\n+  private String ldapBaseDn;\n+\n+  @Value(\"${taskana.ldap.groupSearchBase:cn=groups}\")\n+  private String ldapGroupSearchBase;\n+\n+  @Value(\"${taskana.ldap.userDnPatterns:uid={0},cn=users}\")\n+  private String ldapUserDnPatterns;\n+\n+  @Value(\"${taskana.ldap.groupSearchFilter:uniqueMember={0}}\")\n+  private String ldapGroupSearchFilter;", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NTczOQ==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433845739", "bodyText": "extract \"spring.security.ldap.dn\" to constant?", "author": "mustaphazorgati", "createdAt": "2020-06-02T12:44:14Z", "path": "rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/rest/security/WebSecurityConfig.java", "diffHunk": "@@ -94,6 +101,52 @@ protected void configure(HttpSecurity http) throws Exception {\n     }\n   }\n \n+  @Override\n+  public void configure(AuthenticationManagerBuilder auth) throws Exception {\n+    auth.ldapAuthentication()\n+        .userDnPatterns(ldapUserDnPatterns)\n+        .groupSearchBase(ldapGroupSearchBase)\n+        .ldapAuthoritiesPopulator(authoritiesPopulator())\n+        .authoritiesMapper(grantedAuthoritiesMapper())\n+        .contextSource()\n+        .url(ldapServerUrl + \"/\" + ldapBaseDn)\n+        .and()\n+        .passwordCompare()\n+        .passwordAttribute(\"userPassword\");\n+  }\n+\n+  @Bean\n+  public DefaultSpringSecurityContextSource defaultSpringSecurityContextSource() {\n+\n+    DefaultSpringSecurityContextSource contextSource =\n+        new DefaultSpringSecurityContextSource(ldapServerUrl + \"/\" + ldapBaseDn);\n+    return contextSource;\n+  }\n+\n+  @Bean\n+  public LdapAuthoritiesPopulator authoritiesPopulator() {\n+    Function<Map<String, List<String>>, GrantedAuthority> authorityMapper =\n+        record -> {\n+          String role = record.get(\"spring.security.ldap.dn\").get(0);", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NjEzMw==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433846133", "bodyText": "\"cn=groups\" =  ldapGroupSearchBase?", "author": "mustaphazorgati", "createdAt": "2020-06-02T12:44:55Z", "path": "rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/rest/security/WebSecurityConfig.java", "diffHunk": "@@ -94,6 +101,52 @@ protected void configure(HttpSecurity http) throws Exception {\n     }\n   }\n \n+  @Override\n+  public void configure(AuthenticationManagerBuilder auth) throws Exception {\n+    auth.ldapAuthentication()\n+        .userDnPatterns(ldapUserDnPatterns)\n+        .groupSearchBase(ldapGroupSearchBase)\n+        .ldapAuthoritiesPopulator(authoritiesPopulator())\n+        .authoritiesMapper(grantedAuthoritiesMapper())\n+        .contextSource()\n+        .url(ldapServerUrl + \"/\" + ldapBaseDn)\n+        .and()\n+        .passwordCompare()\n+        .passwordAttribute(\"userPassword\");\n+  }\n+\n+  @Bean\n+  public DefaultSpringSecurityContextSource defaultSpringSecurityContextSource() {\n+\n+    DefaultSpringSecurityContextSource contextSource =\n+        new DefaultSpringSecurityContextSource(ldapServerUrl + \"/\" + ldapBaseDn);\n+    return contextSource;\n+  }\n+\n+  @Bean\n+  public LdapAuthoritiesPopulator authoritiesPopulator() {\n+    Function<Map<String, List<String>>, GrantedAuthority> authorityMapper =\n+        record -> {\n+          String role = record.get(\"spring.security.ldap.dn\").get(0);\n+          return new SimpleGrantedAuthority(role);\n+        };\n+\n+    DefaultLdapAuthoritiesPopulator populator =\n+        new DefaultLdapAuthoritiesPopulator(defaultSpringSecurityContextSource(), \"cn=groups\");", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NjgzNw==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433846837", "bodyText": "\"uniqueMember={0}\" = ldapGroupSearchFilter", "author": "mustaphazorgati", "createdAt": "2020-06-02T12:46:00Z", "path": "rest/taskana-rest-spring-example-common/src/main/java/pro/taskana/rest/security/WebSecurityConfig.java", "diffHunk": "@@ -94,6 +101,52 @@ protected void configure(HttpSecurity http) throws Exception {\n     }\n   }\n \n+  @Override\n+  public void configure(AuthenticationManagerBuilder auth) throws Exception {\n+    auth.ldapAuthentication()\n+        .userDnPatterns(ldapUserDnPatterns)\n+        .groupSearchBase(ldapGroupSearchBase)\n+        .ldapAuthoritiesPopulator(authoritiesPopulator())\n+        .authoritiesMapper(grantedAuthoritiesMapper())\n+        .contextSource()\n+        .url(ldapServerUrl + \"/\" + ldapBaseDn)\n+        .and()\n+        .passwordCompare()\n+        .passwordAttribute(\"userPassword\");\n+  }\n+\n+  @Bean\n+  public DefaultSpringSecurityContextSource defaultSpringSecurityContextSource() {\n+\n+    DefaultSpringSecurityContextSource contextSource =\n+        new DefaultSpringSecurityContextSource(ldapServerUrl + \"/\" + ldapBaseDn);\n+    return contextSource;\n+  }\n+\n+  @Bean\n+  public LdapAuthoritiesPopulator authoritiesPopulator() {\n+    Function<Map<String, List<String>>, GrantedAuthority> authorityMapper =\n+        record -> {\n+          String role = record.get(\"spring.security.ldap.dn\").get(0);\n+          return new SimpleGrantedAuthority(role);\n+        };\n+\n+    DefaultLdapAuthoritiesPopulator populator =\n+        new DefaultLdapAuthoritiesPopulator(defaultSpringSecurityContextSource(), \"cn=groups\");\n+    populator.setGroupSearchFilter(\"uniqueMember={0}\");", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0ODYyNQ==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433848625", "bodyText": "Is there a reasonyou duplicated the ldif file? I think this is not an ideal solution", "author": "mustaphazorgati", "createdAt": "2020-06-02T12:48:58Z", "path": "rest/taskana-rest-spring-example-common/src/main/resources/taskana-example.ldif", "diffHunk": "@@ -0,0 +1,193 @@\n+######################", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MTU2OA==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433851568", "bodyText": "If the size is 3, can you please explicitly check with containsOnlyOnce ? :)", "author": "mustaphazorgati", "createdAt": "2020-06-02T12:53:46Z", "path": "rest/taskana-rest-spring-example-common/src/test/java/pro/taskana/ldap/LdapTest.java", "diffHunk": "@@ -28,10 +28,8 @@\n \n   @Test\n   void testFindUsers() throws InvalidArgumentException {\n-    if (ldapClient.useLdap()) {\n-      List<AccessIdRepresentationModel> usersAndGroups = ldapClient.searchUsersAndGroups(\"ser0\");\n-      System.out.println(\"#### found \" + LoggerUtils.listToString(usersAndGroups));\n-      assertThat(usersAndGroups).hasSize(50);\n-    }\n+    List<AccessIdRepresentationModel> usersAndGroups = ldapClient.searchUsersAndGroups(\"lead\");\n+    System.out.println(\"#### found \" + LoggerUtils.listToString(usersAndGroups));\n+    assertThat(usersAndGroups).hasSize(3);", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MjEyNw==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433852127", "bodyText": "And a third copy of the ldif file.. I don't like this", "author": "mustaphazorgati", "createdAt": "2020-06-02T12:54:44Z", "path": "rest/taskana-rest-spring-example-common/src/test/resources/taskana-test.ldif", "diffHunk": "@@ -0,0 +1,194 @@\n+######################", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MjY0MQ==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433852641", "bodyText": "remove the version and use the spring-boot one?", "author": "mustaphazorgati", "createdAt": "2020-06-02T12:55:32Z", "path": "rest/taskana-rest-spring/pom.xml", "diffHunk": "@@ -52,6 +52,11 @@\n             <artifactId>spring-ldap-core</artifactId>\r\n             <version>${version.spring.ldap}</version>\r\n         </dependency>\r\n+        <dependency>\r\n+            <groupId>org.springframework.security</groupId>\r\n+            <artifactId>spring-security-ldap</artifactId>\r\n+            <version>${version.spring.security}</version>\r", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NDE2Ng==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433854166", "bodyText": "do we need the default values?", "author": "mustaphazorgati", "createdAt": "2020-06-02T12:58:03Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/common/rest/ldap/LdapConfiguration.java", "diffHunk": "@@ -1,70 +1,47 @@\n package pro.taskana.common.rest.ldap;\n \n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Condition;\n-import org.springframework.context.annotation.ConditionContext;\n-import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.env.Environment;\n-import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.ldap.core.LdapTemplate;\n import org.springframework.ldap.core.support.LdapContextSource;\n \n-/**\n- * Configuration for Ldap access.\n- */\n+/** Configuration for Ldap access. */\n @Configuration\n public class LdapConfiguration {\n \n+  @Value(\"${taskana.ldap.serverUrl:ldap://localhost:10389}\")\n+  private String ldapServerUrl;\n+\n+  @Value(\"${taskana.ldap.baseDn:OU=Test,O=TASKANA}\")\n+  private String ldapBaseDn;\n+\n+  @Value(\"${taskana.ldap.bindDn:uid=admin}\")\n+  private String ldapBindDn;\n+\n+  @Value(\"${taskana.ldap.bindPassword:secret}\")\n+  private String ldapBindPassowrd;", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NTg4Mg==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433855882", "bodyText": "better: return Optional", "author": "mustaphazorgati", "createdAt": "2020-06-02T13:00:46Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/security/SpringSecurityToJaasFilter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package pro.taskana.rest.security;\n+\n+\n+import java.io.IOException;\n+import java.security.AccessController;\n+import javax.security.auth.Subject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.web.filter.GenericFilterBean;\n+\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.security.GroupPrincipal;\n+import pro.taskana.common.internal.security.UserPrincipal;\n+\n+/** Simple Filter to map all Spring Security Roles to JAAS-Principals. */\n+public class SpringSecurityToJaasFilter extends GenericFilterBean {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SpringSecurityToJaasFilter.class);\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    Authentication authentication = getCurrentAuthentication();\n+    if (authentication != null) {\n+      LOGGER.debug(\"Authentication found in Spring security context: {}\", authentication);\n+      Subject subject = obtainSubject(request);\n+      if (subject != null) {\n+        initializeUserPrincipalFromAuthentication(authentication, subject);\n+        initializeGroupPrincipalsFromAuthentication(authentication, subject);\n+      }\n+    } else {\n+      LOGGER.debug(\n+          \"No authentication found in Spring security context. Continuing unauthenticatic.\");\n+    }\n+\n+    chain.doFilter(request, response);\n+  }\n+\n+  private void initializeUserPrincipalFromAuthentication(\n+      Authentication authentication, Subject subject) {\n+    if (subject.getPrincipals().isEmpty()) {\n+      LOGGER.debug(\"Setting the principal of the subject with {}.\", authentication.getPrincipal());\n+      subject\n+          .getPrincipals()\n+          .add(new UserPrincipal(((UserDetails) authentication.getPrincipal()).getUsername()));\n+    } else {\n+      LOGGER.debug(\n+          \"Principal of the subject is already set to {}.\", subject.getPrincipals().toArray()[0]);\n+      throw new SystemException(\n+          \"Finding an existing principal is unexpected. Please investigate.\");\n+    }\n+  }\n+\n+  private void initializeGroupPrincipalsFromAuthentication(\n+      Authentication authentication, Subject subject) {\n+\n+    LOGGER.debug(\"Adding roles {} to subject.\", authentication.getAuthorities());\n+\n+    authentication\n+        .getAuthorities()\n+        .forEach(\n+            grantedAuthority ->\n+                subject.getPrincipals().add(new GroupPrincipal(grantedAuthority.getAuthority())));\n+\n+    LOGGER.debug(\"{}\", subject.getPublicCredentials(GroupPrincipal.class));\n+  }\n+\n+  /**\n+   * Obtains the <code>Subject</code> to run as or <code>null</code> if no <code>Subject</code> is\n+   * available.\n+   *\n+   * <p>The default implementation attempts to obtain the <code>Subject</code> from the <code>\n+   * SecurityContext</code>'s <code>Authentication</code>. If it is of type <code>\n+   * JaasAuthenticationToken</code> and is authenticated, the <code>Subject</code> is returned from\n+   * it. Otherwise, <code>null</code> is returned.\n+   *\n+   * @param request the current <code>ServletRequest</code>\n+   * @return the Subject to run as or <code>null</code> if no <code>Subject</code> is available.\n+   */\n+  protected Subject obtainSubject(ServletRequest request) {", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NTE1Ng==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434145156", "bodyText": "The parameter request is used", "author": "mustaphazorgati", "createdAt": "2020-06-02T20:05:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NTg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NjMyMw==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433856323", "bodyText": "I always use {@code ...} Does this work aswell like this?", "author": "mustaphazorgati", "createdAt": "2020-06-02T13:01:27Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/security/SpringSecurityToJaasFilter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package pro.taskana.rest.security;\n+\n+\n+import java.io.IOException;\n+import java.security.AccessController;\n+import javax.security.auth.Subject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.web.filter.GenericFilterBean;\n+\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.security.GroupPrincipal;\n+import pro.taskana.common.internal.security.UserPrincipal;\n+\n+/** Simple Filter to map all Spring Security Roles to JAAS-Principals. */\n+public class SpringSecurityToJaasFilter extends GenericFilterBean {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SpringSecurityToJaasFilter.class);\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    Authentication authentication = getCurrentAuthentication();\n+    if (authentication != null) {\n+      LOGGER.debug(\"Authentication found in Spring security context: {}\", authentication);\n+      Subject subject = obtainSubject(request);\n+      if (subject != null) {\n+        initializeUserPrincipalFromAuthentication(authentication, subject);\n+        initializeGroupPrincipalsFromAuthentication(authentication, subject);\n+      }\n+    } else {\n+      LOGGER.debug(\n+          \"No authentication found in Spring security context. Continuing unauthenticatic.\");\n+    }\n+\n+    chain.doFilter(request, response);\n+  }\n+\n+  private void initializeUserPrincipalFromAuthentication(\n+      Authentication authentication, Subject subject) {\n+    if (subject.getPrincipals().isEmpty()) {\n+      LOGGER.debug(\"Setting the principal of the subject with {}.\", authentication.getPrincipal());\n+      subject\n+          .getPrincipals()\n+          .add(new UserPrincipal(((UserDetails) authentication.getPrincipal()).getUsername()));\n+    } else {\n+      LOGGER.debug(\n+          \"Principal of the subject is already set to {}.\", subject.getPrincipals().toArray()[0]);\n+      throw new SystemException(\n+          \"Finding an existing principal is unexpected. Please investigate.\");\n+    }\n+  }\n+\n+  private void initializeGroupPrincipalsFromAuthentication(\n+      Authentication authentication, Subject subject) {\n+\n+    LOGGER.debug(\"Adding roles {} to subject.\", authentication.getAuthorities());\n+\n+    authentication\n+        .getAuthorities()\n+        .forEach(\n+            grantedAuthority ->\n+                subject.getPrincipals().add(new GroupPrincipal(grantedAuthority.getAuthority())));\n+\n+    LOGGER.debug(\"{}\", subject.getPublicCredentials(GroupPrincipal.class));\n+  }\n+\n+  /**\n+   * Obtains the <code>Subject</code> to run as or <code>null</code> if no <code>Subject</code> is\n+   * available.\n+   *\n+   * <p>The default implementation attempts to obtain the <code>Subject</code> from the <code>\n+   * SecurityContext</code>'s <code>Authentication</code>. If it is of type <code>\n+   * JaasAuthenticationToken</code> and is authenticated, the <code>Subject</code> is returned from\n+   * it. Otherwise, <code>null</code> is returned.\n+   *\n+   * @param request the current <code>ServletRequest</code>\n+   * @return the Subject to run as or <code>null</code> if no <code>Subject</code> is available.", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NzI5Ng==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r433857296", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Subject subject = obtainSubject(request);\n          \n          \n            \n                  if (subject != null) {\n          \n          \n            \n                    initializeUserPrincipalFromAuthentication(authentication, subject);\n          \n          \n            \n                    initializeGroupPrincipalsFromAuthentication(authentication, subject);\n          \n          \n            \n                  }\n          \n          \n            \n                  obtainSubject(request).ifPresent(subject -> {\n          \n          \n            \n                    initializeUserPrincipalFromAuthentication(authentication, subject);\n          \n          \n            \n                    initializeGroupPrincipalsFromAuthentication(authentication, subject);\n          \n          \n            \n                  }\n          \n      \n    \n    \n  \n\nIs a lot cleaner if you work with Optional", "author": "mustaphazorgati", "createdAt": "2020-06-02T13:03:01Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/security/SpringSecurityToJaasFilter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package pro.taskana.rest.security;\n+\n+\n+import java.io.IOException;\n+import java.security.AccessController;\n+import javax.security.auth.Subject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.web.filter.GenericFilterBean;\n+\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.security.GroupPrincipal;\n+import pro.taskana.common.internal.security.UserPrincipal;\n+\n+/** Simple Filter to map all Spring Security Roles to JAAS-Principals. */\n+public class SpringSecurityToJaasFilter extends GenericFilterBean {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SpringSecurityToJaasFilter.class);\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    Authentication authentication = getCurrentAuthentication();\n+    if (authentication != null) {\n+      LOGGER.debug(\"Authentication found in Spring security context: {}\", authentication);\n+      Subject subject = obtainSubject(request);\n+      if (subject != null) {\n+        initializeUserPrincipalFromAuthentication(authentication, subject);\n+        initializeGroupPrincipalsFromAuthentication(authentication, subject);\n+      }", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0MzMyMg==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434143322", "bodyText": "why toArray[0]? just print the principals", "author": "mustaphazorgati", "createdAt": "2020-06-02T20:02:10Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/security/SpringSecurityToJaasFilter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package pro.taskana.rest.security;\n+\n+\n+import java.io.IOException;\n+import java.security.AccessController;\n+import javax.security.auth.Subject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.web.filter.GenericFilterBean;\n+\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.security.GroupPrincipal;\n+import pro.taskana.common.internal.security.UserPrincipal;\n+\n+/** Simple Filter to map all Spring Security Roles to JAAS-Principals. */\n+public class SpringSecurityToJaasFilter extends GenericFilterBean {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SpringSecurityToJaasFilter.class);\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    Authentication authentication = getCurrentAuthentication();\n+    if (authentication != null) {\n+      LOGGER.debug(\"Authentication found in Spring security context: {}\", authentication);\n+      Subject subject = obtainSubject(request);\n+      if (subject != null) {\n+        initializeUserPrincipalFromAuthentication(authentication, subject);\n+        initializeGroupPrincipalsFromAuthentication(authentication, subject);\n+      }\n+    } else {\n+      LOGGER.debug(\n+          \"No authentication found in Spring security context. Continuing unauthenticatic.\");\n+    }\n+\n+    chain.doFilter(request, response);\n+  }\n+\n+  private void initializeUserPrincipalFromAuthentication(\n+      Authentication authentication, Subject subject) {\n+    if (subject.getPrincipals().isEmpty()) {\n+      LOGGER.debug(\"Setting the principal of the subject with {}.\", authentication.getPrincipal());\n+      subject\n+          .getPrincipals()\n+          .add(new UserPrincipal(((UserDetails) authentication.getPrincipal()).getUsername()));\n+    } else {\n+      LOGGER.debug(\n+          \"Principal of the subject is already set to {}.\", subject.getPrincipals().toArray()[0]);", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0Mzk1MQ==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434143951", "bodyText": "I don't like this unsafe cast. Can you please make this section type safe?", "author": "mustaphazorgati", "createdAt": "2020-06-02T20:03:26Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/security/SpringSecurityToJaasFilter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package pro.taskana.rest.security;\n+\n+\n+import java.io.IOException;\n+import java.security.AccessController;\n+import javax.security.auth.Subject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.web.filter.GenericFilterBean;\n+\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.security.GroupPrincipal;\n+import pro.taskana.common.internal.security.UserPrincipal;\n+\n+/** Simple Filter to map all Spring Security Roles to JAAS-Principals. */\n+public class SpringSecurityToJaasFilter extends GenericFilterBean {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SpringSecurityToJaasFilter.class);\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    Authentication authentication = getCurrentAuthentication();\n+    if (authentication != null) {\n+      LOGGER.debug(\"Authentication found in Spring security context: {}\", authentication);\n+      Subject subject = obtainSubject(request);\n+      if (subject != null) {\n+        initializeUserPrincipalFromAuthentication(authentication, subject);\n+        initializeGroupPrincipalsFromAuthentication(authentication, subject);\n+      }\n+    } else {\n+      LOGGER.debug(\n+          \"No authentication found in Spring security context. Continuing unauthenticatic.\");\n+    }\n+\n+    chain.doFilter(request, response);\n+  }\n+\n+  private void initializeUserPrincipalFromAuthentication(\n+      Authentication authentication, Subject subject) {\n+    if (subject.getPrincipals().isEmpty()) {\n+      LOGGER.debug(\"Setting the principal of the subject with {}.\", authentication.getPrincipal());\n+      subject\n+          .getPrincipals()\n+          .add(new UserPrincipal(((UserDetails) authentication.getPrincipal()).getUsername()));", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NDc1Mw==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434144753", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                authentication\n          \n          \n            \n                    .getAuthorities()\n          \n          \n            \n                    .forEach(\n          \n          \n            \n                        grantedAuthority ->\n          \n          \n            \n                            subject.getPrincipals().add(new GroupPrincipal(grantedAuthority.getAuthority())));\n          \n          \n            \n                Set<Principal> principals = subject.getPrincipals();\n          \n          \n            \n                authentication.getAuthorities().stream()\n          \n          \n            \n                    .map(GrantedAuthority::getAuthority)\n          \n          \n            \n                    .map(GroupPrincipal::new)\n          \n          \n            \n                    .forEach(principals::add);", "author": "mustaphazorgati", "createdAt": "2020-06-02T20:05:12Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/security/SpringSecurityToJaasFilter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package pro.taskana.rest.security;\n+\n+\n+import java.io.IOException;\n+import java.security.AccessController;\n+import javax.security.auth.Subject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.web.filter.GenericFilterBean;\n+\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.security.GroupPrincipal;\n+import pro.taskana.common.internal.security.UserPrincipal;\n+\n+/** Simple Filter to map all Spring Security Roles to JAAS-Principals. */\n+public class SpringSecurityToJaasFilter extends GenericFilterBean {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SpringSecurityToJaasFilter.class);\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    Authentication authentication = getCurrentAuthentication();\n+    if (authentication != null) {\n+      LOGGER.debug(\"Authentication found in Spring security context: {}\", authentication);\n+      Subject subject = obtainSubject(request);\n+      if (subject != null) {\n+        initializeUserPrincipalFromAuthentication(authentication, subject);\n+        initializeGroupPrincipalsFromAuthentication(authentication, subject);\n+      }\n+    } else {\n+      LOGGER.debug(\n+          \"No authentication found in Spring security context. Continuing unauthenticatic.\");\n+    }\n+\n+    chain.doFilter(request, response);\n+  }\n+\n+  private void initializeUserPrincipalFromAuthentication(\n+      Authentication authentication, Subject subject) {\n+    if (subject.getPrincipals().isEmpty()) {\n+      LOGGER.debug(\"Setting the principal of the subject with {}.\", authentication.getPrincipal());\n+      subject\n+          .getPrincipals()\n+          .add(new UserPrincipal(((UserDetails) authentication.getPrincipal()).getUsername()));\n+    } else {\n+      LOGGER.debug(\n+          \"Principal of the subject is already set to {}.\", subject.getPrincipals().toArray()[0]);\n+      throw new SystemException(\n+          \"Finding an existing principal is unexpected. Please investigate.\");\n+    }\n+  }\n+\n+  private void initializeGroupPrincipalsFromAuthentication(\n+      Authentication authentication, Subject subject) {\n+\n+    LOGGER.debug(\"Adding roles {} to subject.\", authentication.getAuthorities());\n+\n+    authentication\n+        .getAuthorities()\n+        .forEach(\n+            grantedAuthority ->\n+                subject.getPrincipals().add(new GroupPrincipal(grantedAuthority.getAuthority())));\n+", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NTY3Mw==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434145673", "bodyText": "Please simplify these two statements and thus reduce cognitive complexity", "author": "mustaphazorgati", "createdAt": "2020-06-02T20:06:57Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/security/SpringSecurityToJaasFilter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package pro.taskana.rest.security;\n+\n+\n+import java.io.IOException;\n+import java.security.AccessController;\n+import javax.security.auth.Subject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.web.filter.GenericFilterBean;\n+\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.security.GroupPrincipal;\n+import pro.taskana.common.internal.security.UserPrincipal;\n+\n+/** Simple Filter to map all Spring Security Roles to JAAS-Principals. */\n+public class SpringSecurityToJaasFilter extends GenericFilterBean {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SpringSecurityToJaasFilter.class);\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    Authentication authentication = getCurrentAuthentication();\n+    if (authentication != null) {\n+      LOGGER.debug(\"Authentication found in Spring security context: {}\", authentication);\n+      Subject subject = obtainSubject(request);\n+      if (subject != null) {\n+        initializeUserPrincipalFromAuthentication(authentication, subject);\n+        initializeGroupPrincipalsFromAuthentication(authentication, subject);\n+      }\n+    } else {\n+      LOGGER.debug(\n+          \"No authentication found in Spring security context. Continuing unauthenticatic.\");\n+    }\n+\n+    chain.doFilter(request, response);\n+  }\n+\n+  private void initializeUserPrincipalFromAuthentication(\n+      Authentication authentication, Subject subject) {\n+    if (subject.getPrincipals().isEmpty()) {\n+      LOGGER.debug(\"Setting the principal of the subject with {}.\", authentication.getPrincipal());\n+      subject\n+          .getPrincipals()\n+          .add(new UserPrincipal(((UserDetails) authentication.getPrincipal()).getUsername()));\n+    } else {\n+      LOGGER.debug(\n+          \"Principal of the subject is already set to {}.\", subject.getPrincipals().toArray()[0]);\n+      throw new SystemException(\n+          \"Finding an existing principal is unexpected. Please investigate.\");\n+    }\n+  }\n+\n+  private void initializeGroupPrincipalsFromAuthentication(\n+      Authentication authentication, Subject subject) {\n+\n+    LOGGER.debug(\"Adding roles {} to subject.\", authentication.getAuthorities());\n+\n+    authentication\n+        .getAuthorities()\n+        .forEach(\n+            grantedAuthority ->\n+                subject.getPrincipals().add(new GroupPrincipal(grantedAuthority.getAuthority())));\n+\n+    LOGGER.debug(\"{}\", subject.getPublicCredentials(GroupPrincipal.class));\n+  }\n+\n+  /**\n+   * Obtains the <code>Subject</code> to run as or <code>null</code> if no <code>Subject</code> is\n+   * available.\n+   *\n+   * <p>The default implementation attempts to obtain the <code>Subject</code> from the <code>\n+   * SecurityContext</code>'s <code>Authentication</code>. If it is of type <code>\n+   * JaasAuthenticationToken</code> and is authenticated, the <code>Subject</code> is returned from\n+   * it. Otherwise, <code>null</code> is returned.\n+   *\n+   * @param request the current <code>ServletRequest</code>\n+   * @return the Subject to run as or <code>null</code> if no <code>Subject</code> is available.\n+   */\n+  protected Subject obtainSubject(ServletRequest request) {\n+    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n+    if (logger.isDebugEnabled()) {\n+      logger.debug(\"Attempting to obtainSubject using authentication : \" + authentication);\n+    }\n+    if (authentication == null) {\n+      return null;\n+    }\n+    if (!authentication.isAuthenticated()) {\n+      return null;\n+    }", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NjIwMA==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434146200", "bodyText": "Again, I don't like null return type methods. Optional<Authentication> ? :)", "author": "mustaphazorgati", "createdAt": "2020-06-02T20:08:04Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/security/SpringSecurityToJaasFilter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package pro.taskana.rest.security;\n+\n+\n+import java.io.IOException;\n+import java.security.AccessController;\n+import javax.security.auth.Subject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.web.filter.GenericFilterBean;\n+\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.common.internal.security.GroupPrincipal;\n+import pro.taskana.common.internal.security.UserPrincipal;\n+\n+/** Simple Filter to map all Spring Security Roles to JAAS-Principals. */\n+public class SpringSecurityToJaasFilter extends GenericFilterBean {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SpringSecurityToJaasFilter.class);\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, ServletException {\n+    Authentication authentication = getCurrentAuthentication();\n+    if (authentication != null) {\n+      LOGGER.debug(\"Authentication found in Spring security context: {}\", authentication);\n+      Subject subject = obtainSubject(request);\n+      if (subject != null) {\n+        initializeUserPrincipalFromAuthentication(authentication, subject);\n+        initializeGroupPrincipalsFromAuthentication(authentication, subject);\n+      }\n+    } else {\n+      LOGGER.debug(\n+          \"No authentication found in Spring security context. Continuing unauthenticatic.\");\n+    }\n+\n+    chain.doFilter(request, response);\n+  }\n+\n+  private void initializeUserPrincipalFromAuthentication(\n+      Authentication authentication, Subject subject) {\n+    if (subject.getPrincipals().isEmpty()) {\n+      LOGGER.debug(\"Setting the principal of the subject with {}.\", authentication.getPrincipal());\n+      subject\n+          .getPrincipals()\n+          .add(new UserPrincipal(((UserDetails) authentication.getPrincipal()).getUsername()));\n+    } else {\n+      LOGGER.debug(\n+          \"Principal of the subject is already set to {}.\", subject.getPrincipals().toArray()[0]);\n+      throw new SystemException(\n+          \"Finding an existing principal is unexpected. Please investigate.\");\n+    }\n+  }\n+\n+  private void initializeGroupPrincipalsFromAuthentication(\n+      Authentication authentication, Subject subject) {\n+\n+    LOGGER.debug(\"Adding roles {} to subject.\", authentication.getAuthorities());\n+\n+    authentication\n+        .getAuthorities()\n+        .forEach(\n+            grantedAuthority ->\n+                subject.getPrincipals().add(new GroupPrincipal(grantedAuthority.getAuthority())));\n+\n+    LOGGER.debug(\"{}\", subject.getPublicCredentials(GroupPrincipal.class));\n+  }\n+\n+  /**\n+   * Obtains the <code>Subject</code> to run as or <code>null</code> if no <code>Subject</code> is\n+   * available.\n+   *\n+   * <p>The default implementation attempts to obtain the <code>Subject</code> from the <code>\n+   * SecurityContext</code>'s <code>Authentication</code>. If it is of type <code>\n+   * JaasAuthenticationToken</code> and is authenticated, the <code>Subject</code> is returned from\n+   * it. Otherwise, <code>null</code> is returned.\n+   *\n+   * @param request the current <code>ServletRequest</code>\n+   * @return the Subject to run as or <code>null</code> if no <code>Subject</code> is available.\n+   */\n+  protected Subject obtainSubject(ServletRequest request) {\n+    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n+    if (logger.isDebugEnabled()) {\n+      logger.debug(\"Attempting to obtainSubject using authentication : \" + authentication);\n+    }\n+    if (authentication == null) {\n+      return null;\n+    }\n+    if (!authentication.isAuthenticated()) {\n+      return null;\n+    }\n+\n+    return Subject.getSubject(AccessController.getContext());\n+  }\n+\n+  Authentication getCurrentAuthentication() {", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NjkwNg==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434146906", "bodyText": "Another ldif file?", "author": "mustaphazorgati", "createdAt": "2020-06-02T20:09:27Z", "path": "rest/taskana-rest-spring/src/test/resources/taskana-test.ldif", "diffHunk": "@@ -1,11 +1,6 @@\n ######################", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NzU0Mw==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434147543", "bodyText": "What is this property used for and why is it disabled?", "author": "mustaphazorgati", "createdAt": "2020-06-02T20:10:27Z", "path": "rest/taskana-rest-spring/src/test/resources/application.properties", "diffHunk": "@@ -1,37 +1,45 @@\n logging.level.pro.taskana=INFO\n-### logging.level.org.springframework=DEBUG\n+logging.level.org.springframework.security=INFO\n+\n ######## Taskana DB #######\n datasource.url=jdbc:h2:mem:taskana;IGNORECASE=TRUE;LOCK_MODE=0\n datasource.driverClassName=org.h2.Driver\n datasource.username=sa\n datasource.password=sa\n taskana.schemaName=TASKANA\n+\n ####### property that control rest api security deploy use true for no security.\n devMode=false\n \n ####### Property that informs about the Taskana's version. This version is shown the application web\n version=@project.version@\n \n-####### control LDAP usage\n-taskana.ldap.useLdap=false\n-####### properties to connect to LDAP\n+####### Properties for AccessIdController to connect to LDAP\n taskana.ldap.serverUrl=ldap://localhost:10389\n-taskana.ldap.bindDn=uid=admin,ou=system\n+taskana.ldap.bindDn=uid=admin\n taskana.ldap.bindPassword=secret\n-taskana.ldap.baseDn=o=TaskanaTest\n-####### properties that control search for users and groups\n-taskana.ldap.userSearchBase=ou=people\n+taskana.ldap.baseDn=ou=Test,O=TASKANA\n+taskana.ldap.userSearchBase=cn=users\n taskana.ldap.userSearchFilterName=objectclass\n taskana.ldap.userSearchFilterValue=person\n taskana.ldap.userFirstnameAttribute=givenName\n taskana.ldap.userLastnameAttribute=sn\n taskana.ldap.userIdAttribute=uid\n-taskana.ldap.groupSearchBase=ou=groups\n+taskana.ldap.groupSearchBase=cn=groups\n taskana.ldap.groupSearchFilterName=objectclass\n taskana.ldap.groupSearchFilterValue=groupOfUniqueNames\n taskana.ldap.groupNameAttribute=cn\n taskana.ldap.minSearchForLength=3\n taskana.ldap.maxNumberOfReturnedAccessIds=50\n+taskana.ldap.groupsOfUser=memberUid\n+# Embedded Spring LDAP server\n+spring.ldap.embedded.base-dn= OU=Test,O=TASKANA\n+spring.ldap.embedded.credential.username= uid=admin\n+spring.ldap.embedded.credential.password= secret\n+spring.ldap.embedded.ldif=classpath:taskana-test.ldif\n+spring.ldap.embedded.port= 10389\n+spring.ldap.embedded.validation.enabled=false", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0ODk1Mw==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434148953", "bodyText": "Can you get tehe headers from the RestHelper please?", "author": "mustaphazorgati", "createdAt": "2020-06-02T20:13:16Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java", "diffHunk": "@@ -338,11 +338,11 @@ void testGetAllTasksByWorkbasketIdWithInvalidDueParamsCombination() {\n   @Test\n   void testGetAllTasksByWorkbasketKeyAndDomain() {\n     HttpHeaders headers = new HttpHeaders();\n-    headers.add(\"Authorization\", \"Basic dXNlcl8xXzI6dXNlcl8xXzI=\"); // user_1_2\n+    headers.add(\"Authorization\", \"Basic dXNlci0xLTI6dXNlci0xLTI=\"); // user_1_2\n     HttpEntity<String> request = new HttpEntity<>(headers);", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0OTMxMg==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434149312", "bodyText": "Please get the Headers from the RestHelper", "author": "mustaphazorgati", "createdAt": "2020-06-02T20:14:03Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java", "diffHunk": "@@ -370,13 +370,13 @@ void testGetAllTasksByExternalId() {\n   void testExceptionIfKeyIsSetButDomainIsMissing() {\n \n     HttpHeaders headers = new HttpHeaders();\n-    headers.add(\"Authorization\", \"Basic dXNlcl8xXzI6dXNlcl8xXzI=\"); // user_1_2\n+    headers.add(\"Authorization\", \"Basic dXNlci0xLTI6dXNlci0xLTI=\"); // user-1-2\n     HttpEntity<String> request = new HttpEntity<>(headers);", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNzI0OA==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434307248", "bodyText": "Please get the Headers from the RestHelper", "author": "mustaphazorgati", "createdAt": "2020-06-03T04:55:11Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java", "diffHunk": "@@ -470,7 +470,7 @@ void testGetLastPageSortedByDueWithHiddenTasksRemovedFromResult() {\n     // tasks and this test depends on the tasks as they are in sampledata\n \n     HttpHeaders headers = new HttpHeaders();\n-    headers.add(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    headers.add(\"Authorization\", \"Basic dGVhbWxlYWQtMTp0ZWFtbGVhZC0x\");\n     HttpEntity<String> request = new HttpEntity<>(headers);", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwNzM1Ng==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434307356", "bodyText": "Please get the Headers from the RestHelper", "author": "mustaphazorgati", "createdAt": "2020-06-03T04:55:34Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/task/rest/TaskControllerIntTest.java", "diffHunk": "@@ -514,7 +514,7 @@ void testGetQueryByPorSecondPageSortedByType() {\n     // tasks and this test depends on the tasks as they are in sampledata\n \n     HttpHeaders headers = new HttpHeaders();\n-    headers.add(\"Authorization\", \"Basic dGVhbWxlYWRfMTp0ZWFtbGVhZF8x\");\n+    headers.add(\"Authorization\", \"Basic dGVhbWxlYWQtMTp0ZWFtbGVhZC0x\");\n     HttpEntity<String> request = new HttpEntity<>(headers);", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwOTE2Mg==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434309162", "bodyText": "We talked about this briefly. What was the reason you had to mark every test as dirty? Can you document this and also state that this is just temporary?", "author": "mustaphazorgati", "createdAt": "2020-06-03T05:02:51Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/common/rest/TaskanaSpringBootTest.java", "diffHunk": "@@ -15,6 +17,7 @@\n /** Use this annotation to test with a spring context and a standardized configuration. */\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n+@DirtiesContext(classMode = ClassMode.AFTER_CLASS)", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwOTQxNw==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434309417", "bodyText": "Do we really need the default values?", "author": "mustaphazorgati", "createdAt": "2020-06-03T05:03:59Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/common/rest/WebSecurityConfig.java", "diffHunk": "@@ -1,45 +1,51 @@\n package pro.taskana.common.rest;\n \n-import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.web.servlet.FilterRegistrationBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.io.ClassPathResource;\n-import org.springframework.security.authentication.jaas.AuthorityGranter;\n-import org.springframework.security.authentication.jaas.JaasAuthenticationCallbackHandler;\n-import org.springframework.security.authentication.jaas.JaasAuthenticationProvider;\n-import org.springframework.security.authentication.jaas.JaasNameCallbackHandler;\n-import org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper;\n+import org.springframework.security.core.authority.mapping.SimpleAuthorityMapper;\n+import org.springframework.security.ldap.DefaultSpringSecurityContextSource;\n+import org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator;\n+import org.springframework.security.ldap.userdetails.LdapAuthoritiesPopulator;\n import org.springframework.security.web.jaasapi.JaasApiIntegrationFilter;\n import org.springframework.web.cors.CorsConfiguration;\n import org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n import org.springframework.web.filter.CorsFilter;\n import org.springframework.web.servlet.config.annotation.CorsRegistry;\n import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n \n-/**\n- * Default basic configuration for taskana web example.\n- */\n+import pro.taskana.rest.security.SpringSecurityToJaasFilter;\n+\n+/** Default basic configuration for taskana web example. */\n @Configuration\n @EnableWebSecurity\n public class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n \n-  @Bean\n-  public JaasAuthenticationProvider jaasAuthProvider() {\n-    JaasAuthenticationProvider authenticationProvider = new JaasAuthenticationProvider();\n-    authenticationProvider.setAuthorityGranters(\n-        new AuthorityGranter[]{p -> Collections.singleton(p.getName())});\n-    authenticationProvider.setCallbackHandlers(\n-        new JaasAuthenticationCallbackHandler[]{\n-            new JaasNameCallbackHandler(), new JaasPasswordCallbackHandler()\n-        });\n-    authenticationProvider.setLoginContextName(\"taskana\");\n-    authenticationProvider.setLoginConfig(new ClassPathResource(\"pss_jaas.config\"));\n-    return authenticationProvider;\n-  }\n+  @Value(\"${taskana.ldap.serverUrl:ldap://localhost:10389}\")\n+  private String ldapServerUrl;\n+\n+  @Value(\"${taskana.ldap.baseDn:OU=Test,O=TASKANA}\")\n+  private String ldapBaseDn;\n+\n+  @Value(\"${taskana.ldap.groupSearchBase:cn=groups}\")\n+  private String ldapGroupSearchBase;\n+\n+  @Value(\"${taskana.ldap.userDnPatterns:uid={0},cn=users}\")\n+  private String ldapUserDnPatterns;\n+\n+  @Value(\"${taskana.ldap.groupSearchFilter:uniqueMember={0}}\")\n+  private String ldapGroupSearchFilter;", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwOTk4OQ==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434309989", "bodyText": "make the role a constant?", "author": "mustaphazorgati", "createdAt": "2020-06-03T05:06:18Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/common/rest/WebSecurityConfig.java", "diffHunk": "@@ -70,20 +76,71 @@ protected void configure(HttpSecurity http) throws Exception {\n         .disable()\n         .httpBasic()\n         .and()\n-        .authenticationProvider(jaasAuthProvider())\n-        .authorizeRequests()\n-        .and()\n-        .addFilter(new JaasApiIntegrationFilter())\n+        .addFilter(jaasApiIntegrationFilter())\n+        .addFilterAfter(new SpringSecurityToJaasFilter(), JaasApiIntegrationFilter.class)\n         .authorizeRequests()\n         .anyRequest()\n         .fullyAuthenticated();\n   }\n \n+  @Override\n+  public void configure(AuthenticationManagerBuilder auth) throws Exception {\n+    auth.ldapAuthentication()\n+        .userDnPatterns(ldapUserDnPatterns)\n+        .groupSearchBase(ldapGroupSearchBase)\n+        .ldapAuthoritiesPopulator(authoritiesPopulator())\n+        .authoritiesMapper(grantedAuthoritiesMapper())\n+        .contextSource()\n+        .url(ldapServerUrl + \"/\" + ldapBaseDn)\n+        .and()\n+        .passwordCompare()\n+        .passwordAttribute(\"userPassword\");\n+  }\n+\n+  @Bean\n+  public LdapAuthoritiesPopulator authoritiesPopulator() {\n+    Function<Map<String, List<String>>, GrantedAuthority> authorityMapper =\n+        record -> {\n+          String role = record.get(\"spring.security.ldap.dn\").get(0);", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMDE0NQ==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434310145", "bodyText": "What's the reason for this code duplication?", "author": "mustaphazorgati", "createdAt": "2020-06-03T05:07:03Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/common/rest/WebSecurityConfig.java", "diffHunk": "@@ -1,45 +1,51 @@\n package pro.taskana.common.rest;\n \n-import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.web.servlet.FilterRegistrationBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.core.io.ClassPathResource;\n-import org.springframework.security.authentication.jaas.AuthorityGranter;\n-import org.springframework.security.authentication.jaas.JaasAuthenticationCallbackHandler;\n-import org.springframework.security.authentication.jaas.JaasAuthenticationProvider;\n-import org.springframework.security.authentication.jaas.JaasNameCallbackHandler;\n-import org.springframework.security.authentication.jaas.JaasPasswordCallbackHandler;\n+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n+import org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper;\n+import org.springframework.security.core.authority.mapping.SimpleAuthorityMapper;\n+import org.springframework.security.ldap.DefaultSpringSecurityContextSource;\n+import org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator;\n+import org.springframework.security.ldap.userdetails.LdapAuthoritiesPopulator;\n import org.springframework.security.web.jaasapi.JaasApiIntegrationFilter;\n import org.springframework.web.cors.CorsConfiguration;\n import org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n import org.springframework.web.filter.CorsFilter;\n import org.springframework.web.servlet.config.annotation.CorsRegistry;\n import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n \n-/**\n- * Default basic configuration for taskana web example.\n- */\n+import pro.taskana.rest.security.SpringSecurityToJaasFilter;\n+\n+/** Default basic configuration for taskana web example. */\n @Configuration\n @EnableWebSecurity\n public class WebSecurityConfig extends WebSecurityConfigurerAdapter {", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMDU3NA==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434310574", "bodyText": "protected", "author": "mustaphazorgati", "createdAt": "2020-06-03T05:08:43Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/BaseRestDocumentation.java", "diffHunk": "@@ -24,6 +24,9 @@\n @Import(ResultHandlerConfiguration.class)\n public abstract class BaseRestDocumentation {\n \n+  static String ADMIN_CREDENTIALS = \"Basic YWRtaW46YWRtaW4=\";\n+  static String TEAMLEAD_1_CREDENTIALS = \"Basic dGVhbWxlYWQtMTp0ZWFtbGVhZC0x\";", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMTIyOQ==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434311229", "bodyText": "wrong package", "author": "mustaphazorgati", "createdAt": "2020-06-03T05:11:02Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskanaRestSpringBootApplication.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package pro.taskana.rest;", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMTI4Ng==", "url": "https://github.com/Taskana/taskana/pull/1090#discussion_r434311286", "bodyText": "Why do wee need this Application?", "author": "mustaphazorgati", "createdAt": "2020-06-03T05:11:15Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskanaRestSpringBootApplication.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package pro.taskana.rest;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class TaskanaRestSpringBootApplication {", "originalCommit": "bc58b6f7d79aaef20ac2a0848434d58b8f96228b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cd0d29f1b8fdde82404ceeee948949a293846902", "url": "https://github.com/Taskana/taskana/commit/cd0d29f1b8fdde82404ceeee948949a293846902", "message": "TSK-1210: Replaced LoginModule with Embedded Spring LDAP\n\nTSK-1210: set log level to DEBUG f\u00fcr SecurityVerifier message\n\nTSK-1210: review findings", "committedDate": "2020-06-05T14:54:31Z", "type": "commit"}]}