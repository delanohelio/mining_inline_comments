{"pr_number": 1218, "pr_title": "TSK-1349: Added unit test for access items management", "pr_createdAt": "2020-08-11T08:17:14Z", "pr_url": "https://github.com/Taskana/taskana/pull/1218", "timeline": [{"oid": "38526148a021fb8b440decaa919925cfeaa771e2", "url": "https://github.com/Taskana/taskana/commit/38526148a021fb8b440decaa919925cfeaa771e2", "message": "TSK-1349: added unit test for access items management", "committedDate": "2020-08-11T08:16:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1ODE1Mw==", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468558153", "bodyText": "In the Jest documentation, 'test' is used instead of 'it'. Why do you use 'it'?", "author": "sofie29", "createdAt": "2020-08-11T12:56:53Z", "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {", "originalCommit": "38526148a021fb8b440decaa919925cfeaa771e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyMTg0MQ==", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468621841", "bodyText": "https://github.com/facebook/jest/blob/master/examples/angular/app.component.spec.ts 'it' is still used for tests in this example test", "author": "cnguyen-de", "createdAt": "2020-08-11T14:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1ODE1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzMTMxOA==", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468631318", "bodyText": "test and it behave the same, they are aliases: https://jestjs.io/docs/en/api.html#testname-fn-timeout\ntest(name, fn, timeout)\nAlso under the alias: it(name, fn, timeout)", "author": "cnguyen-de", "createdAt": "2020-08-11T14:36:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1ODE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3NDgwMQ==", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468574801", "bodyText": "According to the variable name, did you intend to test whether the attribute 'groups' is available in the accessItemsManagement state?", "author": "sofie29", "createdAt": "2020-08-11T13:22:55Z", "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);\n+    const engineConfigs = store.selectSnapshot((state) => state.engineConfiguration);\n+    expect(engineConfigs).toBeTruthy();\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(groups).toBeTruthy();", "originalCommit": "38526148a021fb8b440decaa919925cfeaa771e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyMjk1OQ==", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468622959", "bodyText": "yes, before the component is init, there are no groups or engineConfigs attributes", "author": "cnguyen-de", "createdAt": "2020-08-11T14:25:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3NDgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3OTQ0Mg==", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468579442", "bodyText": "Do we need an 'async' or 'done' to treat asynchronous code here?", "author": "sofie29", "createdAt": "2020-08-11T13:29:39Z", "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);", "originalCommit": "38526148a021fb8b440decaa919925cfeaa771e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyMzkxOA==", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468623918", "bodyText": "when the code is promise-based, async should be used. When no promise is available, done() needs to be called, usually for subscription. So I'd use done() in this case.", "author": "cnguyen-de", "createdAt": "2020-08-11T14:26:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3OTQ0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg1MzkwMw==", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r469853903", "bodyText": "I thought you wanted to insert done(), didn't you?", "author": "sofie29", "createdAt": "2020-08-13T10:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3OTQ0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NzYyNw==", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468587627", "bodyText": "The method is called 'onSelectAccessId' instead of 'onSelectedAccessId'. I was confused because there were no results when searching for 'onSelectedAccessId'. It is okay but it would be great when you change the name to prevent confusions in the future \ud83d\ude05", "author": "sofie29", "createdAt": "2020-08-11T13:41:22Z", "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);\n+    const engineConfigs = store.selectSnapshot((state) => state.engineConfiguration);\n+    expect(engineConfigs).toBeTruthy();\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(groups).toBeTruthy();\n+  });\n+\n+  it('onSelectedAccessId is called correctly', () => {", "originalCommit": "38526148a021fb8b440decaa919925cfeaa771e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNDAyMQ==", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468624021", "bodyText": "will be changed", "author": "cnguyen-de", "createdAt": "2020-08-11T14:26:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NzYyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5ODU4OA==", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468598588", "bodyText": "After reading the documentation, I thought async / await and done() are alternatives. Is one of them not sufficient?", "author": "sofie29", "createdAt": "2020-08-11T13:56:03Z", "path": "web/src/app/administration/components/access-items-management/access-items-management.component.spec.ts", "diffHunk": "@@ -0,0 +1,126 @@\n+import { ComponentFixture, TestBed, async, inject } from '@angular/core/testing';\n+import { AccessItemsManagementComponent } from './access-items-management.component';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { CUSTOM_ELEMENTS_SCHEMA, DebugElement } from '@angular/core';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { AngularSvgIconModule } from 'angular-svg-icon';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { AccessItemsManagementState } from '../../../shared/store/access-items-management-store/access-items-management.state';\n+import { Observable } from 'rxjs';\n+import { GetAccessItems } from '../../../shared/store/access-items-management-store/access-items-management.actions';\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn\n+  })\n+);\n+\n+describe('AccessItemsManagementComponent', () => {\n+  let fixture: ComponentFixture<AccessItemsManagementComponent>;\n+  let debugElement: DebugElement;\n+  let app: AccessItemsManagementComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([EngineConfigurationState, AccessItemsManagementState]),\n+        FormsModule,\n+        ReactiveFormsModule,\n+        AngularSvgIconModule\n+      ],\n+      declarations: [AccessItemsManagementComponent],\n+      providers: [\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        RequestInProgressService,\n+        ClassificationCategoriesService\n+      ],\n+      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(AccessItemsManagementComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    app.accessId = { accessId: '', name: '' };\n+    app.groups = [];\n+  }));\n+\n+  it('should create the app', () => {\n+    expect(app).toBeTruthy();\n+  });\n+\n+  it('header should display access items management', () => {\n+    const panelHeader = () => debugElement.nativeElement.querySelector('h4.panel-header').textContent;\n+    expect(panelHeader()).toBe('Access items management');\n+  });\n+\n+  it('search type ahead is rendered', () => {\n+    const typeAhead = () => debugElement.nativeElement.querySelector('taskana-shared-type-ahead');\n+    expect(typeAhead()).toBeTruthy();\n+  });\n+\n+  it('result table should not display when search bar is empty', () => {\n+    const form = () => debugElement.nativeElement.querySelector('ng-form');\n+    expect(form()).toBeFalsy();\n+  });\n+\n+  it('app is initialized with ngxs store', () => {\n+    store.selectOnce((state) => state).subscribe((state) => expect(state).toBeTruthy);\n+    const engineConfigs = store.selectSnapshot((state) => state.engineConfiguration);\n+    expect(engineConfigs).toBeTruthy();\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(groups).toBeTruthy();\n+  });\n+\n+  it('onSelectedAccessId is called correctly', () => {\n+    const selectedAccessId = { accessId: '', name: '' };\n+    app.onSelectAccessId(selectedAccessId);\n+    const groups = store.selectSnapshot((state) => state.accessItemsManagement);\n+    expect(selectedAccessId).not.toBeNull();\n+    expect(groups).not.toBeNull();\n+    expect(app.accessItemsForm).not.toBeNull();\n+\n+    app.onSelectAccessId(null);\n+    expect(app.accessItemsForm).toBeNull();\n+  });\n+\n+  it('GetAccessItems action is called in searchForAccessItemsWorkbaskets', async((done) => {\n+    app.searchForAccessItemsWorkbaskets();\n+    actions$.pipe(ofActionDispatched(GetAccessItems)).subscribe(async (action) => {\n+      await expect(action).toBeTruthy();\n+      done();", "originalCommit": "38526148a021fb8b440decaa919925cfeaa771e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyNDQwNg==", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r468624406", "bodyText": "will look into it", "author": "cnguyen-de", "createdAt": "2020-08-11T14:27:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5ODU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTExMjQ0Ng==", "url": "https://github.com/Taskana/taskana/pull/1218#discussion_r469112446", "bodyText": "first async((done) is needed, then the 2nd async await isn't needed if done() is called already, code will be updated", "author": "cnguyen-de", "createdAt": "2020-08-12T09:00:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5ODU4OA=="}], "type": "inlineReview"}, {"oid": "b1bc76957561482694ac8dcf28640fe146407737", "url": "https://github.com/Taskana/taskana/commit/b1bc76957561482694ac8dcf28640fe146407737", "message": "TSK-1349: updated test", "committedDate": "2020-08-12T12:31:35Z", "type": "commit"}, {"oid": "ebd8136fd58f3b8c29e745a678f2cb1a6390773e", "url": "https://github.com/Taskana/taskana/commit/ebd8136fd58f3b8c29e745a678f2cb1a6390773e", "message": "TSK-1349: clean up test code", "committedDate": "2020-08-12T13:20:59Z", "type": "commit"}, {"oid": "e6da7da8bdf7374e6fd2c11e9608bf40fef2603d", "url": "https://github.com/Taskana/taskana/commit/e6da7da8bdf7374e6fd2c11e9608bf40fef2603d", "message": "TSK-1349: fixed fixture not working correctly in test", "committedDate": "2020-08-14T12:08:15Z", "type": "commit"}, {"oid": "5aa42f0c1ae626291761782c4ca15d911ffef5fa", "url": "https://github.com/Taskana/taskana/commit/5aa42f0c1ae626291761782c4ca15d911ffef5fa", "message": "TSK-1349: added shared sort stub", "committedDate": "2020-08-17T08:37:41Z", "type": "commit"}, {"oid": "c7af64056ab50691be37e70d0e4598908400ff99", "url": "https://github.com/Taskana/taskana/commit/c7af64056ab50691be37e70d0e4598908400ff99", "message": "TSK-1349: added new tests and fixed html attr", "committedDate": "2020-08-17T11:46:56Z", "type": "commit"}, {"oid": "ddd09237f57e978b067f01cfa3db03b59f4d4b1c", "url": "https://github.com/Taskana/taskana/commit/ddd09237f57e978b067f01cfa3db03b59f4d4b1c", "message": "TSK-1349: updated test desc and matcher", "committedDate": "2020-08-17T11:54:12Z", "type": "commit"}, {"oid": "ed0bba81aca505be938fbb69bbc495469dee5f00", "url": "https://github.com/Taskana/taskana/commit/ed0bba81aca505be938fbb69bbc495469dee5f00", "message": "TSK-1349: fixed stub not working correctly", "committedDate": "2020-08-17T14:50:55Z", "type": "commit"}]}