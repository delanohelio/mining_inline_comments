{"pr_number": 982, "pr_title": "TSK-1150: REST-API for task comments", "pr_createdAt": "2020-03-19T13:19:07Z", "pr_url": "https://github.com/Taskana/taskana/pull/982", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNjc0Mg==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r395026742", "bodyText": "stupid typ.. taskIid is wrong", "author": "mustaphazorgati", "createdAt": "2020-03-19T13:32:52Z", "path": "lib/taskana-core/src/main/java/pro/taskana/task/internal/TaskCommentServiceImpl.java", "diffHunk": "@@ -188,25 +189,28 @@ void deleteTaskComment(String taskCommentId)\n     }\n   }\n \n-  TaskComment getTaskComment(String taskCommentId)\n+  TaskComment getTaskComment(String taskId, String taskCommentId)\n       throws TaskCommentNotFoundException, NotAuthorizedException, TaskNotFoundException,\n           InvalidArgumentException {\n \n-    LOGGER.debug(\"entry to getTaskComment (taskCommentId = {})\", taskCommentId);\n+    LOGGER.debug(\"entry to getTaskComment (taskId= {}, taskCommentId = {})\", taskId, taskCommentId);\n \n-    TaskCommentImpl result = null;\n+    TaskCommentImpl result;\n \n     verifyTaskCommentIdIsNotNullOrEmpty(taskCommentId);\n \n     try {\n \n       taskanaEngine.openConnection();\n \n-      result = taskCommentMapper.findById(taskCommentId);\n+      result = taskCommentMapper.findById(taskId, taskCommentId);\n \n       if (result == null) {\n         throw new TaskCommentNotFoundException(\n-            taskCommentId, \"TaskComment for id \" + taskCommentId + \" was not found\");\n+            taskCommentId,\n+            String.format(\n+                \"TaskComment for taskIid '%s' and taskCommentId '%s' was not found\",", "originalCommit": "27771624a8077a9b375ae05eb276b2f891fbb7e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzMjgzOA==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r395032838", "bodyText": "fixed", "author": "gitgoodjhe", "createdAt": "2020-03-19T13:41:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNjc0Mg=="}], "type": "inlineReview"}, {"oid": "b91c0807c83d15a4479b4a7bd5644bf80d8740da", "url": "https://github.com/Taskana/taskana/commit/b91c0807c83d15a4479b4a7bd5644bf80d8740da", "message": "TSK-1150: Added REST-API for task comments", "committedDate": "2020-03-23T12:19:38Z", "type": "commit"}, {"oid": "66ad2dc6bedb1d59f8bb00d09d14b2353d200689", "url": "https://github.com/Taskana/taskana/commit/66ad2dc6bedb1d59f8bb00d09d14b2353d200689", "message": "TSK-1150: added taskId as pathvariable to getTaskComment and deleteTaskComment\n\nthis is necessary since the path variable {taskId} is not used otherwise. Furthermore this will require that the search for a comment must match a given taskId.", "committedDate": "2020-03-23T12:21:08Z", "type": "commit"}, {"oid": "3863f99c8fc9d6164dc7babffdad21c2fd933ca2", "url": "https://github.com/Taskana/taskana/commit/3863f99c8fc9d6164dc7babffdad21c2fd933ca2", "message": "TSK-1150: now returning 404 StatusCode for TaskCommentNotFoundException", "committedDate": "2020-03-23T12:21:09Z", "type": "commit"}, {"oid": "a9e5091ecbc12ce9e15582f5866a74e9c5a60086", "url": "https://github.com/Taskana/taskana/commit/a9e5091ecbc12ce9e15582f5866a74e9c5a60086", "message": "TSK-1150 - added taskId as pathvariable to updateTaskComment and createTaskComment\n\n-Added tests", "committedDate": "2020-03-23T12:21:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyOTg4MQ==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397629881", "bodyText": "Should we add 2 more test cases with a valid task id + invalid comment id & invalid / wrong taskid + valid comment id?", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:20:00Z", "path": "lib/taskana-core/src/test/java/acceptance/task/GetTaskCommentAccTest.java", "diffHunk": "@@ -89,8 +90,11 @@ void testGetNonExistingTaskCommentShouldFail() {\n \n     TaskService taskService = taskanaEngine.getTaskService();\n \n-    assertThatThrownBy(() -> taskService.getTaskComment(\"Definately Non Existing Task Comment Id\"))\n-        .isInstanceOf(TaskCommentNotFoundException.class);\n+    ThrowingCallable lambda =\n+        () ->\n+            taskService.getTaskComment(\n+                \"Invalid Task Id\", \"Definately Non Existing Task Comment Id\");\n+    assertThatThrownBy(lambda).isInstanceOf(TaskCommentNotFoundException.class);", "originalCommit": "a9e5091ecbc12ce9e15582f5866a74e9c5a60086", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyODEyMQ==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397728121", "bodyText": "I added a test for a valid taskId+invalid taskCommentId, good idea :). A test for wrong taskId + valid taskCommentId doesn't make much sense to me, since this combination basically can't exist. A task comment only exists, when a task also exists. How can there be a valid taskCommentId (and therefore a existing taskComment) when the task doesn't exist?", "author": "gitgoodjhe", "createdAt": "2020-03-25T09:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyOTg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzMTU1Ng==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397631556", "bodyText": "the second parameter should be a pathvariable taskId, right?", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:26:00Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/TaskCommentController.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package pro.taskana.rest;\n+\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.hateoas.config.EnableHypermediaSupport;\n+import org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import pro.taskana.common.api.exceptions.ConcurrencyException;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.rest.resource.TaskCommentListResource;\n+import pro.taskana.rest.resource.TaskCommentResource;\n+import pro.taskana.rest.resource.TaskCommentResourceAssembler;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+\n+/** Controller for all {@link TaskComment} related endpoints. */\n+@RestController\n+@EnableHypermediaSupport(type = HypermediaType.HAL)\n+public class TaskCommentController {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TaskCommentController.class);\n+\n+  private TaskService taskService;\n+  private TaskCommentResourceAssembler taskCommentResourceAssembler;\n+\n+  TaskCommentController(\n+      TaskService taskService, TaskCommentResourceAssembler taskCommentResourceAssembler) {\n+    this.taskService = taskService;\n+    this.taskCommentResourceAssembler = taskCommentResourceAssembler;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_TASK_COMMENT)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<TaskCommentResource> getTaskComment(\n+      @PathVariable String taskId, @PathVariable String taskCommentId)\n+      throws NotAuthorizedException, TaskNotFoundException, TaskCommentNotFoundException,\n+          InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to getTaskComment(taskId= {}, taskCommentId= {})\", taskId, taskCommentId);\n+    }\n+\n+    TaskComment taskComment = taskService.getTaskComment(taskId, taskCommentId);\n+\n+    TaskCommentResource taskCommentResource = taskCommentResourceAssembler.toResource(taskComment);\n+\n+    ResponseEntity<TaskCommentResource> response = ResponseEntity.ok(taskCommentResource);\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getTaskComment(), returning {}\", response);\n+    }\n+\n+    return response;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_TASK_COMMENTS)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<TaskCommentListResource> getTaskComments(@PathVariable String taskId)\n+      throws NotAuthorizedException, TaskNotFoundException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to getTaskComments(taskId= {})\", taskId);\n+    }\n+\n+    List<TaskComment> taskComments = taskService.getTaskComments(taskId);\n+\n+    TaskCommentListResource taskCommentListResource =\n+        taskCommentResourceAssembler.toListResource(taskComments);\n+\n+    ResponseEntity<TaskCommentListResource> response = ResponseEntity.ok(taskCommentListResource);\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getTaskComments(), returning {}\", response);\n+    }\n+\n+    return response;\n+  }\n+\n+  @DeleteMapping(path = Mapping.URL_TASK_COMMENT)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<TaskCommentResource> deleteTaskComment(\n+      @PathVariable String taskId, @PathVariable String taskCommentId)\n+      throws NotAuthorizedException, TaskNotFoundException, TaskCommentNotFoundException,\n+          InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\n+          \"Entry to deleteTaskComment(taskId= {}, taskCommentId= {})\", taskId, taskCommentId);\n+    }\n+\n+    taskService.deleteTaskComment(taskId, taskCommentId);\n+\n+    ResponseEntity<TaskCommentResource> result = ResponseEntity.noContent().build();\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from deleteTaskComment(), returning {}\", result);\n+    }\n+\n+    return result;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_TASK_COMMENT)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<TaskCommentResource> updateTaskComment(\n+      @PathVariable String taskId,\n+      @PathVariable String taskCommentId,\n+      @RequestBody TaskCommentResource taskCommentResource)\n+      throws NotAuthorizedException, TaskNotFoundException, TaskCommentNotFoundException,\n+          InvalidArgumentException, ConcurrencyException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\n+          \"Entry to updateTaskComment(taskId= {}, taskCommentId= {}, taskCommentResource= {})\",\n+          taskId,\n+          taskCommentId,\n+          taskCommentResource);\n+    }\n+\n+    ResponseEntity<TaskCommentResource> result;\n+\n+    if ((taskCommentId.equals(taskCommentResource.getTaskCommentId())\n+        && (taskId.equals(taskCommentResource.getTaskId())))) {\n+\n+      TaskComment taskComment = taskCommentResourceAssembler.toModel(taskCommentResource);\n+\n+      taskComment = taskService.updateTaskComment(taskComment);\n+      result = ResponseEntity.ok(taskCommentResourceAssembler.toResource(taskComment));\n+    } else {\n+      throw new InvalidArgumentException(\n+          String.format(\n+              \"TaskCommentId ('%s') or TaskId ('%s') are not identical with the ids\"\n+                  + \" of object in the payload which should be updated\",\n+              taskCommentId, taskCommentResource.getTaskId()));", "originalCommit": "a9e5091ecbc12ce9e15582f5866a74e9c5a60086", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY5MzYwNQ==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397693605", "bodyText": "Indeed", "author": "gitgoodjhe", "createdAt": "2020-03-25T08:56:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzMTU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzMTg3NA==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397631874", "bodyText": "taskId of the object", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:27:02Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/TaskCommentController.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package pro.taskana.rest;\n+\n+import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.hateoas.config.EnableHypermediaSupport;\n+import org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import pro.taskana.common.api.exceptions.ConcurrencyException;\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.rest.resource.TaskCommentListResource;\n+import pro.taskana.rest.resource.TaskCommentResource;\n+import pro.taskana.rest.resource.TaskCommentResourceAssembler;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+\n+/** Controller for all {@link TaskComment} related endpoints. */\n+@RestController\n+@EnableHypermediaSupport(type = HypermediaType.HAL)\n+public class TaskCommentController {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(TaskCommentController.class);\n+\n+  private TaskService taskService;\n+  private TaskCommentResourceAssembler taskCommentResourceAssembler;\n+\n+  TaskCommentController(\n+      TaskService taskService, TaskCommentResourceAssembler taskCommentResourceAssembler) {\n+    this.taskService = taskService;\n+    this.taskCommentResourceAssembler = taskCommentResourceAssembler;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_TASK_COMMENT)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<TaskCommentResource> getTaskComment(\n+      @PathVariable String taskId, @PathVariable String taskCommentId)\n+      throws NotAuthorizedException, TaskNotFoundException, TaskCommentNotFoundException,\n+          InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to getTaskComment(taskId= {}, taskCommentId= {})\", taskId, taskCommentId);\n+    }\n+\n+    TaskComment taskComment = taskService.getTaskComment(taskId, taskCommentId);\n+\n+    TaskCommentResource taskCommentResource = taskCommentResourceAssembler.toResource(taskComment);\n+\n+    ResponseEntity<TaskCommentResource> response = ResponseEntity.ok(taskCommentResource);\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getTaskComment(), returning {}\", response);\n+    }\n+\n+    return response;\n+  }\n+\n+  @GetMapping(path = Mapping.URL_TASK_COMMENTS)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<TaskCommentListResource> getTaskComments(@PathVariable String taskId)\n+      throws NotAuthorizedException, TaskNotFoundException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Entry to getTaskComments(taskId= {})\", taskId);\n+    }\n+\n+    List<TaskComment> taskComments = taskService.getTaskComments(taskId);\n+\n+    TaskCommentListResource taskCommentListResource =\n+        taskCommentResourceAssembler.toListResource(taskComments);\n+\n+    ResponseEntity<TaskCommentListResource> response = ResponseEntity.ok(taskCommentListResource);\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from getTaskComments(), returning {}\", response);\n+    }\n+\n+    return response;\n+  }\n+\n+  @DeleteMapping(path = Mapping.URL_TASK_COMMENT)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<TaskCommentResource> deleteTaskComment(\n+      @PathVariable String taskId, @PathVariable String taskCommentId)\n+      throws NotAuthorizedException, TaskNotFoundException, TaskCommentNotFoundException,\n+          InvalidArgumentException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\n+          \"Entry to deleteTaskComment(taskId= {}, taskCommentId= {})\", taskId, taskCommentId);\n+    }\n+\n+    taskService.deleteTaskComment(taskId, taskCommentId);\n+\n+    ResponseEntity<TaskCommentResource> result = ResponseEntity.noContent().build();\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from deleteTaskComment(), returning {}\", result);\n+    }\n+\n+    return result;\n+  }\n+\n+  @PutMapping(path = Mapping.URL_TASK_COMMENT)\n+  @Transactional(readOnly = true, rollbackFor = Exception.class)\n+  public ResponseEntity<TaskCommentResource> updateTaskComment(\n+      @PathVariable String taskId,\n+      @PathVariable String taskCommentId,\n+      @RequestBody TaskCommentResource taskCommentResource)\n+      throws NotAuthorizedException, TaskNotFoundException, TaskCommentNotFoundException,\n+          InvalidArgumentException, ConcurrencyException {\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\n+          \"Entry to updateTaskComment(taskId= {}, taskCommentId= {}, taskCommentResource= {})\",\n+          taskId,\n+          taskCommentId,\n+          taskCommentResource);\n+    }\n+\n+    ResponseEntity<TaskCommentResource> result;\n+\n+    if ((taskCommentId.equals(taskCommentResource.getTaskCommentId())\n+        && (taskId.equals(taskCommentResource.getTaskId())))) {\n+\n+      TaskComment taskComment = taskCommentResourceAssembler.toModel(taskCommentResource);\n+\n+      taskComment = taskService.updateTaskComment(taskComment);\n+      result = ResponseEntity.ok(taskCommentResourceAssembler.toResource(taskComment));\n+    } else {\n+      throw new InvalidArgumentException(\n+          String.format(\n+              \"TaskCommentId ('%s') or TaskId ('%s') are not identical with the ids\"\n+                  + \" of object in the payload which should be updated\",\n+              taskCommentId, taskCommentResource.getTaskId()));\n+    }\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\"Exit from updateTaskComment(), returning {}\", result);\n+    }\n+\n+    return result;\n+  }\n+\n+  @PostMapping(path = Mapping.URL_TASK_COMMENTS)\n+  @Transactional(rollbackFor = Exception.class)\n+  public ResponseEntity<TaskCommentResource> createTaskComment(\n+      @PathVariable String taskId, @RequestBody TaskCommentResource taskCommentResource)\n+      throws NotAuthorizedException, InvalidArgumentException, TaskNotFoundException {\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      LOGGER.debug(\n+          \"Entry to createTaskComment(taskId = {}, taskCommentResource= {})\",\n+          taskId,\n+          taskCommentResource);\n+    }\n+\n+    ResponseEntity<TaskCommentResource> result;\n+\n+    if (taskId.equals(taskCommentResource.getTaskId())) {\n+\n+      TaskComment taskCommentFromResource =\n+          taskCommentResourceAssembler.toModel(taskCommentResource);\n+      TaskComment createdTaskComment = taskService.createTaskComment(taskCommentFromResource);\n+\n+      result =\n+          ResponseEntity.status(HttpStatus.CREATED)\n+              .body(taskCommentResourceAssembler.toResource(createdTaskComment));\n+    } else {\n+      throw new InvalidArgumentException(\n+          String.format(\n+              \"TaskId ('%s') is not identical with the taskId of \"", "originalCommit": "a9e5091ecbc12ce9e15582f5866a74e9c5a60086", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzMjc1NQ==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397632755", "bodyText": "Please use PagedResource (See WorkbasketSummaryListResource)", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:30:05Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentListResource.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package pro.taskana.rest.resource;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.List;\n+import org.springframework.hateoas.ResourceSupport;\n+\n+/** Resource class for {@link TaskCommentResource} with Pagination. */\n+public class TaskCommentListResource extends ResourceSupport {", "originalCommit": "a9e5091ecbc12ce9e15582f5866a74e9c5a60086", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzMzMxMQ==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397633311", "bodyText": "Missing Assembler tests", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:31:56Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentResourceAssembler.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package pro.taskana.rest.resource;\n+\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.hateoas.mvc.ResourceAssemblerSupport;\n+import org.springframework.stereotype.Component;\n+\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.rest.Mapping;\n+import pro.taskana.rest.TaskCommentController;\n+import pro.taskana.rest.resource.links.PageLinks;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+/** Resource assembler for {@link TaskCommentResource}. */\n+@Component\n+public class TaskCommentResourceAssembler\n+    extends ResourceAssemblerSupport<TaskComment, TaskCommentResource> {\n+\n+  private final TaskService taskService;\n+\n+  @Autowired\n+  public TaskCommentResourceAssembler(TaskService taskService) {\n+    super(TaskCommentController.class, TaskCommentResource.class);\n+    this.taskService = taskService;\n+  }\n+\n+  @Override\n+  public TaskCommentResource toResource(TaskComment taskComment) {\n+\n+    TaskCommentResource taskCommentResource = new TaskCommentResource(taskComment);\n+    try {\n+      taskCommentResource.add(\n+          linkTo(\n+                  methodOn(TaskCommentController.class)\n+                      .getTaskComment(taskComment.getTaskId(), taskComment.getId()))\n+              .withSelfRel());\n+    } catch (TaskCommentNotFoundException\n+        | TaskNotFoundException\n+        | NotAuthorizedException\n+        | InvalidArgumentException e) {\n+      throw new SystemException(\"caught unexpected Exception.\", e.getCause());\n+    }\n+\n+    return taskCommentResource;\n+  }", "originalCommit": "a9e5091ecbc12ce9e15582f5866a74e9c5a60086", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzMzMzOA==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397633338", "bodyText": "I am missing assembler tests", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:32:06Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/resource/TaskCommentResourceAssembler.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package pro.taskana.rest.resource;\n+\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;\n+\n+import java.time.Instant;\n+import java.util.List;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.hateoas.mvc.ResourceAssemblerSupport;\n+import org.springframework.stereotype.Component;\n+\n+import pro.taskana.common.api.exceptions.InvalidArgumentException;\n+import pro.taskana.common.api.exceptions.NotAuthorizedException;\n+import pro.taskana.common.api.exceptions.SystemException;\n+import pro.taskana.rest.Mapping;\n+import pro.taskana.rest.TaskCommentController;\n+import pro.taskana.rest.resource.links.PageLinks;\n+import pro.taskana.task.api.TaskService;\n+import pro.taskana.task.api.exceptions.TaskCommentNotFoundException;\n+import pro.taskana.task.api.exceptions.TaskNotFoundException;\n+import pro.taskana.task.api.models.TaskComment;\n+import pro.taskana.task.internal.models.TaskCommentImpl;\n+\n+/** Resource assembler for {@link TaskCommentResource}. */\n+@Component\n+public class TaskCommentResourceAssembler\n+    extends ResourceAssemblerSupport<TaskComment, TaskCommentResource> {\n+\n+  private final TaskService taskService;\n+\n+  @Autowired\n+  public TaskCommentResourceAssembler(TaskService taskService) {\n+    super(TaskCommentController.class, TaskCommentResource.class);\n+    this.taskService = taskService;\n+  }\n+\n+  @Override\n+  public TaskCommentResource toResource(TaskComment taskComment) {\n+\n+    TaskCommentResource taskCommentResource = new TaskCommentResource(taskComment);\n+    try {\n+      taskCommentResource.add(\n+          linkTo(\n+                  methodOn(TaskCommentController.class)\n+                      .getTaskComment(taskComment.getTaskId(), taskComment.getId()))\n+              .withSelfRel());\n+    } catch (TaskCommentNotFoundException\n+        | TaskNotFoundException\n+        | NotAuthorizedException\n+        | InvalidArgumentException e) {\n+      throw new SystemException(\"caught unexpected Exception.\", e.getCause());\n+    }\n+\n+    return taskCommentResource;\n+  }\n+\n+  @PageLinks(Mapping.URL_TASK_COMMENTS)\n+  public TaskCommentListResource toListResource(List<TaskComment> taskComments) {\n+    return new TaskCommentListResource(toResources(taskComments));\n+  }\n+\n+  public TaskComment toModel(TaskCommentResource taskCommentResource) {\n+\n+    TaskCommentImpl taskComment =\n+        (TaskCommentImpl) taskService.newTaskComment(taskCommentResource.getTaskId());\n+    taskComment.setId(taskCommentResource.getTaskCommentId());\n+\n+    BeanUtils.copyProperties(taskCommentResource, taskComment);\n+\n+    if (taskCommentResource.getCreated() != null) {\n+      taskComment.setCreated(Instant.parse(taskCommentResource.getCreated()));\n+    }\n+    if (taskCommentResource.getModified() != null) {\n+      taskComment.setModified(Instant.parse(taskCommentResource.getModified()));\n+    }\n+\n+    return taskComment;\n+  }", "originalCommit": "a9e5091ecbc12ce9e15582f5866a74e9c5a60086", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNDA2MQ==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397634061", "bodyText": "can you please use org.springframework.hateoas.HAL_JSON", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:34:32Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java", "diffHunk": "@@ -0,0 +1,201 @@\n+package pro.taskana.doc.api;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.HashMap;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n+import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n+import org.springframework.restdocs.payload.FieldDescriptor;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import pro.taskana.rest.Mapping;\n+\n+public class TaskCommentControllerRestDocumentation extends BaseRestDocumentation {\n+\n+  private HashMap<String, String> taskCommentFieldDescriptionsMap = new HashMap<>();\n+\n+  private FieldDescriptor[] allTaskCommentsFieldDescriptors;\n+  private FieldDescriptor[] taskCommentFieldDescriptors;\n+  private FieldDescriptor[] createTaskCommentFieldDescriptors;\n+\n+  @BeforeEach\n+  void setUp() {\n+\n+    taskCommentFieldDescriptionsMap.put(\"taskCommentId\", \"Unique ID\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"taskId\", \"Task ID. Can identify the task to which the comment belongs\");\n+    taskCommentFieldDescriptionsMap.put(\"textField\", \"The content of the actual comment\");\n+    taskCommentFieldDescriptionsMap.put(\"creator\", \"The creator of the task comment\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"created\", \"The creation timestamp of the task comment in the system.\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"modified\", \"Timestamp of the last modification of the task comment\");\n+\n+    taskCommentFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskCommentId\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"taskCommentId\")),\n+          fieldWithPath(\"taskId\").description(taskCommentFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"textField\").description(taskCommentFieldDescriptionsMap.get(\"textField\")),\n+          fieldWithPath(\"creator\").description(taskCommentFieldDescriptionsMap.get(\"creator\")),\n+          fieldWithPath(\"created\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"modified\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"_links\").ignored(),\n+          fieldWithPath(\"_links.self\").ignored(),\n+          fieldWithPath(\"_links.self.href\").ignored()\n+        };\n+\n+    createTaskCommentFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskId\").description(taskCommentFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"textField\").description(taskCommentFieldDescriptionsMap.get(\"textField\")),\n+          fieldWithPath(\"creator\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"creator\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"created\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\")\n+              .optional(),\n+        };\n+\n+    allTaskCommentsFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"task comments\")\n+              .description(\"An Array of task comments\")\n+        };\n+  }\n+\n+  @Test\n+  void getAllTaskCommentsForSpecificTaskDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASK_COMMENTS, \"TKI:000000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")", "originalCommit": "a9e5091ecbc12ce9e15582f5866a74e9c5a60086", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNDIxMQ==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397634211", "bodyText": "can you please use org.springframework.hateoas.HAL_JSON", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:35:06Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java", "diffHunk": "@@ -0,0 +1,201 @@\n+package pro.taskana.doc.api;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.HashMap;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n+import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n+import org.springframework.restdocs.payload.FieldDescriptor;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import pro.taskana.rest.Mapping;\n+\n+public class TaskCommentControllerRestDocumentation extends BaseRestDocumentation {\n+\n+  private HashMap<String, String> taskCommentFieldDescriptionsMap = new HashMap<>();\n+\n+  private FieldDescriptor[] allTaskCommentsFieldDescriptors;\n+  private FieldDescriptor[] taskCommentFieldDescriptors;\n+  private FieldDescriptor[] createTaskCommentFieldDescriptors;\n+\n+  @BeforeEach\n+  void setUp() {\n+\n+    taskCommentFieldDescriptionsMap.put(\"taskCommentId\", \"Unique ID\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"taskId\", \"Task ID. Can identify the task to which the comment belongs\");\n+    taskCommentFieldDescriptionsMap.put(\"textField\", \"The content of the actual comment\");\n+    taskCommentFieldDescriptionsMap.put(\"creator\", \"The creator of the task comment\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"created\", \"The creation timestamp of the task comment in the system.\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"modified\", \"Timestamp of the last modification of the task comment\");\n+\n+    taskCommentFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskCommentId\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"taskCommentId\")),\n+          fieldWithPath(\"taskId\").description(taskCommentFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"textField\").description(taskCommentFieldDescriptionsMap.get(\"textField\")),\n+          fieldWithPath(\"creator\").description(taskCommentFieldDescriptionsMap.get(\"creator\")),\n+          fieldWithPath(\"created\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"modified\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"_links\").ignored(),\n+          fieldWithPath(\"_links.self\").ignored(),\n+          fieldWithPath(\"_links.self.href\").ignored()\n+        };\n+\n+    createTaskCommentFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskId\").description(taskCommentFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"textField\").description(taskCommentFieldDescriptionsMap.get(\"textField\")),\n+          fieldWithPath(\"creator\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"creator\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"created\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\")\n+              .optional(),\n+        };\n+\n+    allTaskCommentsFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"task comments\")\n+              .description(\"An Array of task comments\")\n+        };\n+  }\n+\n+  @Test\n+  void getAllTaskCommentsForSpecificTaskDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASK_COMMENTS, \"TKI:000000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllTaskCommentsForSpecificTaskDocTest\",\n+                responseFields(allTaskCommentsFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void getSpecificTaskCommentDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASK_COMMENT,\n+                        \"TKI:000000000000000000000000000000000000\",\n+                        \"TCI:000000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")", "originalCommit": "a9e5091ecbc12ce9e15582f5866a74e9c5a60086", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNDgyOQ==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397634829", "bodyText": "Is there a nicer way? This is not really readable :/", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:37:13Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java", "diffHunk": "@@ -0,0 +1,201 @@\n+package pro.taskana.doc.api;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.HashMap;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n+import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n+import org.springframework.restdocs.payload.FieldDescriptor;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import pro.taskana.rest.Mapping;\n+\n+public class TaskCommentControllerRestDocumentation extends BaseRestDocumentation {\n+\n+  private HashMap<String, String> taskCommentFieldDescriptionsMap = new HashMap<>();\n+\n+  private FieldDescriptor[] allTaskCommentsFieldDescriptors;\n+  private FieldDescriptor[] taskCommentFieldDescriptors;\n+  private FieldDescriptor[] createTaskCommentFieldDescriptors;\n+\n+  @BeforeEach\n+  void setUp() {\n+\n+    taskCommentFieldDescriptionsMap.put(\"taskCommentId\", \"Unique ID\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"taskId\", \"Task ID. Can identify the task to which the comment belongs\");\n+    taskCommentFieldDescriptionsMap.put(\"textField\", \"The content of the actual comment\");\n+    taskCommentFieldDescriptionsMap.put(\"creator\", \"The creator of the task comment\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"created\", \"The creation timestamp of the task comment in the system.\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"modified\", \"Timestamp of the last modification of the task comment\");\n+\n+    taskCommentFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskCommentId\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"taskCommentId\")),\n+          fieldWithPath(\"taskId\").description(taskCommentFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"textField\").description(taskCommentFieldDescriptionsMap.get(\"textField\")),\n+          fieldWithPath(\"creator\").description(taskCommentFieldDescriptionsMap.get(\"creator\")),\n+          fieldWithPath(\"created\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"modified\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"_links\").ignored(),\n+          fieldWithPath(\"_links.self\").ignored(),\n+          fieldWithPath(\"_links.self.href\").ignored()\n+        };\n+\n+    createTaskCommentFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskId\").description(taskCommentFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"textField\").description(taskCommentFieldDescriptionsMap.get(\"textField\")),\n+          fieldWithPath(\"creator\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"creator\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"created\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\")\n+              .optional(),\n+        };\n+\n+    allTaskCommentsFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"task comments\")\n+              .description(\"An Array of task comments\")\n+        };\n+  }\n+\n+  @Test\n+  void getAllTaskCommentsForSpecificTaskDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASK_COMMENTS, \"TKI:000000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllTaskCommentsForSpecificTaskDocTest\",\n+                responseFields(allTaskCommentsFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void getSpecificTaskCommentDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASK_COMMENT,\n+                        \"TKI:000000000000000000000000000000000000\",\n+                        \"TCI:000000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetSpecificTaskCommentDocTest\", responseFields(taskCommentFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void updateTaskCommentDocTest() throws Exception {\n+    URL url =\n+        new URL(\n+            restHelper.toUrl(\n+                Mapping.URL_TASK_COMMENT,\n+                \"TKI:000000000000000000000000000000000000\",\n+                \"TCI:000000000000000000000000000000000000\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\");\n+    assertEquals(200, con.getResponseCode());\n+\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n+    String inputLine;\n+    StringBuilder content = new StringBuilder();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n+    }\n+    in.close();\n+    con.disconnect();", "originalCommit": "a9e5091ecbc12ce9e15582f5866a74e9c5a60086", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNTA1Ng==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397635056", "bodyText": "can you please use org.springframework.hateoas.HAL_JSON", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:38:02Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java", "diffHunk": "@@ -0,0 +1,201 @@\n+package pro.taskana.doc.api;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.HashMap;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n+import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n+import org.springframework.restdocs.payload.FieldDescriptor;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import pro.taskana.rest.Mapping;\n+\n+public class TaskCommentControllerRestDocumentation extends BaseRestDocumentation {\n+\n+  private HashMap<String, String> taskCommentFieldDescriptionsMap = new HashMap<>();\n+\n+  private FieldDescriptor[] allTaskCommentsFieldDescriptors;\n+  private FieldDescriptor[] taskCommentFieldDescriptors;\n+  private FieldDescriptor[] createTaskCommentFieldDescriptors;\n+\n+  @BeforeEach\n+  void setUp() {\n+\n+    taskCommentFieldDescriptionsMap.put(\"taskCommentId\", \"Unique ID\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"taskId\", \"Task ID. Can identify the task to which the comment belongs\");\n+    taskCommentFieldDescriptionsMap.put(\"textField\", \"The content of the actual comment\");\n+    taskCommentFieldDescriptionsMap.put(\"creator\", \"The creator of the task comment\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"created\", \"The creation timestamp of the task comment in the system.\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"modified\", \"Timestamp of the last modification of the task comment\");\n+\n+    taskCommentFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskCommentId\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"taskCommentId\")),\n+          fieldWithPath(\"taskId\").description(taskCommentFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"textField\").description(taskCommentFieldDescriptionsMap.get(\"textField\")),\n+          fieldWithPath(\"creator\").description(taskCommentFieldDescriptionsMap.get(\"creator\")),\n+          fieldWithPath(\"created\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"modified\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"_links\").ignored(),\n+          fieldWithPath(\"_links.self\").ignored(),\n+          fieldWithPath(\"_links.self.href\").ignored()\n+        };\n+\n+    createTaskCommentFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskId\").description(taskCommentFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"textField\").description(taskCommentFieldDescriptionsMap.get(\"textField\")),\n+          fieldWithPath(\"creator\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"creator\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"created\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\")\n+              .optional(),\n+        };\n+\n+    allTaskCommentsFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"task comments\")\n+              .description(\"An Array of task comments\")\n+        };\n+  }\n+\n+  @Test\n+  void getAllTaskCommentsForSpecificTaskDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASK_COMMENTS, \"TKI:000000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllTaskCommentsForSpecificTaskDocTest\",\n+                responseFields(allTaskCommentsFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void getSpecificTaskCommentDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASK_COMMENT,\n+                        \"TKI:000000000000000000000000000000000000\",\n+                        \"TCI:000000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetSpecificTaskCommentDocTest\", responseFields(taskCommentFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void updateTaskCommentDocTest() throws Exception {\n+    URL url =\n+        new URL(\n+            restHelper.toUrl(\n+                Mapping.URL_TASK_COMMENT,\n+                \"TKI:000000000000000000000000000000000000\",\n+                \"TCI:000000000000000000000000000000000000\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\");\n+    assertEquals(200, con.getResponseCode());\n+\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n+    String inputLine;\n+    StringBuilder content = new StringBuilder();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n+    }\n+    in.close();\n+    con.disconnect();\n+    String originalTaskComment = content.toString();\n+    String modifiedTaskComment =\n+        originalTaskComment.replace(\"some text in textfield\", \"updated text in textfield\");\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.put(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASK_COMMENT,\n+                        \"TKI:000000000000000000000000000000000000\",\n+                        \"TCI:000000000000000000000000000000000000\"))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")\n+                .contentType(\"application/json\")", "originalCommit": "a9e5091ecbc12ce9e15582f5866a74e9c5a60086", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNTIxNQ==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397635215", "bodyText": "please extract the content into a variable for readability :)", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:38:33Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java", "diffHunk": "@@ -0,0 +1,201 @@\n+package pro.taskana.doc.api;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.HashMap;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n+import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n+import org.springframework.restdocs.payload.FieldDescriptor;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import pro.taskana.rest.Mapping;\n+\n+public class TaskCommentControllerRestDocumentation extends BaseRestDocumentation {\n+\n+  private HashMap<String, String> taskCommentFieldDescriptionsMap = new HashMap<>();\n+\n+  private FieldDescriptor[] allTaskCommentsFieldDescriptors;\n+  private FieldDescriptor[] taskCommentFieldDescriptors;\n+  private FieldDescriptor[] createTaskCommentFieldDescriptors;\n+\n+  @BeforeEach\n+  void setUp() {\n+\n+    taskCommentFieldDescriptionsMap.put(\"taskCommentId\", \"Unique ID\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"taskId\", \"Task ID. Can identify the task to which the comment belongs\");\n+    taskCommentFieldDescriptionsMap.put(\"textField\", \"The content of the actual comment\");\n+    taskCommentFieldDescriptionsMap.put(\"creator\", \"The creator of the task comment\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"created\", \"The creation timestamp of the task comment in the system.\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"modified\", \"Timestamp of the last modification of the task comment\");\n+\n+    taskCommentFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskCommentId\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"taskCommentId\")),\n+          fieldWithPath(\"taskId\").description(taskCommentFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"textField\").description(taskCommentFieldDescriptionsMap.get(\"textField\")),\n+          fieldWithPath(\"creator\").description(taskCommentFieldDescriptionsMap.get(\"creator\")),\n+          fieldWithPath(\"created\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"modified\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"_links\").ignored(),\n+          fieldWithPath(\"_links.self\").ignored(),\n+          fieldWithPath(\"_links.self.href\").ignored()\n+        };\n+\n+    createTaskCommentFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskId\").description(taskCommentFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"textField\").description(taskCommentFieldDescriptionsMap.get(\"textField\")),\n+          fieldWithPath(\"creator\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"creator\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"created\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\")\n+              .optional(),\n+        };\n+\n+    allTaskCommentsFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"task comments\")\n+              .description(\"An Array of task comments\")\n+        };\n+  }\n+\n+  @Test\n+  void getAllTaskCommentsForSpecificTaskDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASK_COMMENTS, \"TKI:000000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllTaskCommentsForSpecificTaskDocTest\",\n+                responseFields(allTaskCommentsFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void getSpecificTaskCommentDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASK_COMMENT,\n+                        \"TKI:000000000000000000000000000000000000\",\n+                        \"TCI:000000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetSpecificTaskCommentDocTest\", responseFields(taskCommentFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void updateTaskCommentDocTest() throws Exception {\n+    URL url =\n+        new URL(\n+            restHelper.toUrl(\n+                Mapping.URL_TASK_COMMENT,\n+                \"TKI:000000000000000000000000000000000000\",\n+                \"TCI:000000000000000000000000000000000000\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\");\n+    assertEquals(200, con.getResponseCode());\n+\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n+    String inputLine;\n+    StringBuilder content = new StringBuilder();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n+    }\n+    in.close();\n+    con.disconnect();\n+    String originalTaskComment = content.toString();\n+    String modifiedTaskComment =\n+        originalTaskComment.replace(\"some text in textfield\", \"updated text in textfield\");\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.put(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASK_COMMENT,\n+                        \"TKI:000000000000000000000000000000000000\",\n+                        \"TCI:000000000000000000000000000000000000\"))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")\n+                .contentType(\"application/json\")\n+                .content(modifiedTaskComment))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"UpdateTaskCommentDocTest\",\n+                requestFields(taskCommentFieldDescriptors),\n+                responseFields(taskCommentFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void createAndDeleteTaskCommentDocTest() throws Exception {\n+\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(\n+                        restHelper.toUrl(\n+                            Mapping.URL_TASK_COMMENTS, \"TKI:000000000000000000000000000000000000\"))\n+                    .contentType(\"application/hal+json\")\n+                    .content(\n+                        \"{ \\\"taskId\\\" : \\\"TKI:000000000000000000000000000000000000\\\",\\n\"", "originalCommit": "a9e5091ecbc12ce9e15582f5866a74e9c5a60086", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNTI2Ng==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397635266", "bodyText": "can you please use org.springframework.hateoas.HAL_JSON", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:38:43Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/doc/api/TaskCommentControllerRestDocumentation.java", "diffHunk": "@@ -0,0 +1,201 @@\n+package pro.taskana.doc.api;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n+import static org.springframework.restdocs.payload.PayloadDocumentation.subsectionWithPath;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.HashMap;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n+import org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders;\n+import org.springframework.restdocs.payload.FieldDescriptor;\n+import org.springframework.test.web.servlet.MvcResult;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import pro.taskana.rest.Mapping;\n+\n+public class TaskCommentControllerRestDocumentation extends BaseRestDocumentation {\n+\n+  private HashMap<String, String> taskCommentFieldDescriptionsMap = new HashMap<>();\n+\n+  private FieldDescriptor[] allTaskCommentsFieldDescriptors;\n+  private FieldDescriptor[] taskCommentFieldDescriptors;\n+  private FieldDescriptor[] createTaskCommentFieldDescriptors;\n+\n+  @BeforeEach\n+  void setUp() {\n+\n+    taskCommentFieldDescriptionsMap.put(\"taskCommentId\", \"Unique ID\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"taskId\", \"Task ID. Can identify the task to which the comment belongs\");\n+    taskCommentFieldDescriptionsMap.put(\"textField\", \"The content of the actual comment\");\n+    taskCommentFieldDescriptionsMap.put(\"creator\", \"The creator of the task comment\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"created\", \"The creation timestamp of the task comment in the system.\");\n+    taskCommentFieldDescriptionsMap.put(\n+        \"modified\", \"Timestamp of the last modification of the task comment\");\n+\n+    taskCommentFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskCommentId\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"taskCommentId\")),\n+          fieldWithPath(\"taskId\").description(taskCommentFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"textField\").description(taskCommentFieldDescriptionsMap.get(\"textField\")),\n+          fieldWithPath(\"creator\").description(taskCommentFieldDescriptionsMap.get(\"creator\")),\n+          fieldWithPath(\"created\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"modified\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\"),\n+          fieldWithPath(\"_links\").ignored(),\n+          fieldWithPath(\"_links.self\").ignored(),\n+          fieldWithPath(\"_links.self.href\").ignored()\n+        };\n+\n+    createTaskCommentFieldDescriptors =\n+        new FieldDescriptor[] {\n+          fieldWithPath(\"taskId\").description(taskCommentFieldDescriptionsMap.get(\"taskId\")),\n+          fieldWithPath(\"textField\").description(taskCommentFieldDescriptionsMap.get(\"textField\")),\n+          fieldWithPath(\"creator\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"creator\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"created\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"created\"))\n+              .type(\"String\")\n+              .optional(),\n+          fieldWithPath(\"modified\")\n+              .description(taskCommentFieldDescriptionsMap.get(\"modified\"))\n+              .type(\"String\")\n+              .optional(),\n+        };\n+\n+    allTaskCommentsFieldDescriptors =\n+        new FieldDescriptor[] {\n+          subsectionWithPath(\"task comments\")\n+              .description(\"An Array of task comments\")\n+        };\n+  }\n+\n+  @Test\n+  void getAllTaskCommentsForSpecificTaskDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASK_COMMENTS, \"TKI:000000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetAllTaskCommentsForSpecificTaskDocTest\",\n+                responseFields(allTaskCommentsFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void getSpecificTaskCommentDocTest() throws Exception {\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.get(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASK_COMMENT,\n+                        \"TKI:000000000000000000000000000000000000\",\n+                        \"TCI:000000000000000000000000000000000000\"))\n+                .accept(\"application/hal+json\")\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\"))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"GetSpecificTaskCommentDocTest\", responseFields(taskCommentFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void updateTaskCommentDocTest() throws Exception {\n+    URL url =\n+        new URL(\n+            restHelper.toUrl(\n+                Mapping.URL_TASK_COMMENT,\n+                \"TKI:000000000000000000000000000000000000\",\n+                \"TCI:000000000000000000000000000000000000\"));\n+    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+    con.setRequestMethod(\"GET\");\n+    con.setRequestProperty(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\");\n+    assertEquals(200, con.getResponseCode());\n+\n+    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), UTF_8));\n+    String inputLine;\n+    StringBuilder content = new StringBuilder();\n+    while ((inputLine = in.readLine()) != null) {\n+      content.append(inputLine);\n+    }\n+    in.close();\n+    con.disconnect();\n+    String originalTaskComment = content.toString();\n+    String modifiedTaskComment =\n+        originalTaskComment.replace(\"some text in textfield\", \"updated text in textfield\");\n+\n+    this.mockMvc\n+        .perform(\n+            RestDocumentationRequestBuilders.put(\n+                    restHelper.toUrl(\n+                        Mapping.URL_TASK_COMMENT,\n+                        \"TKI:000000000000000000000000000000000000\",\n+                        \"TCI:000000000000000000000000000000000000\"))\n+                .header(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\")\n+                .contentType(\"application/json\")\n+                .content(modifiedTaskComment))\n+        .andExpect(MockMvcResultMatchers.status().isOk())\n+        .andDo(\n+            MockMvcRestDocumentation.document(\n+                \"UpdateTaskCommentDocTest\",\n+                requestFields(taskCommentFieldDescriptors),\n+                responseFields(taskCommentFieldDescriptors)));\n+  }\n+\n+  @Test\n+  void createAndDeleteTaskCommentDocTest() throws Exception {\n+\n+    MvcResult result =\n+        this.mockMvc\n+            .perform(\n+                RestDocumentationRequestBuilders.post(\n+                        restHelper.toUrl(\n+                            Mapping.URL_TASK_COMMENTS, \"TKI:000000000000000000000000000000000000\"))\n+                    .contentType(\"application/hal+json\")", "originalCommit": "a9e5091ecbc12ce9e15582f5866a74e9c5a60086", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNjU2MA==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397636560", "bodyText": "Does it matter that this scenario is not 100% correct?\nThe \"true\" scenario is that someone else modified the comment and you tried to update an old comment. Not a newer one..\nSince we are comparing the modified timestamps as of now this should't matter, right?", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:43:07Z", "path": "rest/taskana-rest-spring/src/test/java/pro/taskana/rest/TaskCommentControllerIntTest.java", "diffHunk": "@@ -0,0 +1,429 @@\n+package pro.taskana.rest;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.time.Instant;\n+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.hateoas.Link;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.springframework.web.client.RestTemplate;\n+\n+import pro.taskana.RestHelper;\n+import pro.taskana.TaskanaSpringBootTest;\n+import pro.taskana.rest.resource.TaskCommentListResource;\n+import pro.taskana.rest.resource.TaskCommentResource;\n+\n+/** Test TaskCommentController. */\n+@TaskanaSpringBootTest\n+class TaskCommentControllerIntTest {\n+\n+  private static RestTemplate template;\n+\n+  @Value(\"${taskana.schemaName:TASKANA}\")\n+  public String schemaName;\n+\n+  @Autowired RestHelper restHelper;\n+\n+  @BeforeAll\n+  static void init() {\n+    template = RestHelper.TEMPLATE;\n+  }\n+\n+  @Test\n+  void testGetNonExistentCommentShouldFail() {\n+\n+    String urlToNonExistingTaskComment =\n+        restHelper.toUrl(\n+            Mapping.URL_TASK_COMMENT,\n+            \"TKI:000000000000000000000000000000000000\",\n+            \"Non existing task comment Id\");\n+\n+    ThrowingCallable httpCall =\n+        () -> {\n+          template.exchange(\n+              urlToNonExistingTaskComment,\n+              HttpMethod.GET,\n+              new HttpEntity<String>(restHelper.getHeadersAdmin()),\n+              ParameterizedTypeReference.forType(TaskCommentResource.class));\n+        };\n+    assertThatThrownBy(httpCall)\n+        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n+        .isEqualTo(HttpStatus.NOT_FOUND);\n+  }\n+\n+  @Test\n+  void testGetCommentsForNonExistingTaskShouldFail() {\n+\n+    String urlToNonExistingTask = restHelper.toUrl(Mapping.URL_TASK_COMMENTS, \"nonExistingTaskId\");\n+\n+    ThrowingCallable httpCall =\n+        () -> {\n+          template.exchange(\n+              urlToNonExistingTask,\n+              HttpMethod.GET,\n+              new HttpEntity<String>(restHelper.getHeadersAdmin()),\n+              ParameterizedTypeReference.forType(TaskCommentListResource.class));\n+        };\n+    assertThatThrownBy(httpCall)\n+        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n+        .isEqualTo(HttpStatus.NOT_FOUND);\n+  }\n+\n+  @Disabled(\"Disabled until Authorization check is up!\")\n+  @Test\n+  void testGetTaskCommentsOfNotVisibleTaskShouldFail() {\n+\n+    String urlToNotVisibleTask =\n+        restHelper.toUrl(Mapping.URL_TASK_COMMENTS, \"TKI:000000000000000000000000000000000004\");\n+\n+    ThrowingCallable httpCall =\n+        () -> {\n+          template.exchange(\n+              urlToNotVisibleTask,\n+              HttpMethod.GET,\n+              new HttpEntity<String>(restHelper.getHeadersUser_1_1()),\n+              ParameterizedTypeReference.forType(TaskCommentListResource.class));\n+        };\n+    assertThatThrownBy(httpCall)\n+        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n+        .isEqualTo(HttpStatus.FORBIDDEN);\n+  }\n+\n+  @Disabled(\"Disabled until Authorization check is up!\")\n+  @Test\n+  void testGetTaskCommentOfNotVisibleTaskShouldFail() {\n+\n+    String urlToNotVisibleTask =\n+        restHelper.toUrl(\n+            Mapping.URL_TASK_COMMENT,\n+            \"TKI:000000000000000000000000000000000004\",\n+            \"TCI:000000000000000000000000000000000013\");\n+\n+    ThrowingCallable httpCall =\n+        () -> {\n+          template.exchange(\n+              urlToNotVisibleTask,\n+              HttpMethod.GET,\n+              new HttpEntity<String>(restHelper.getHeadersUser_1_1()),\n+              ParameterizedTypeReference.forType(TaskCommentResource.class));\n+        };\n+    assertThatThrownBy(httpCall)\n+        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n+        .isEqualTo(HttpStatus.FORBIDDEN);\n+  }\n+\n+  @Disabled(\"Disabled until Authorization check is up!\")\n+  @Test\n+  void testCreateTaskCommentForNotVisibleTaskShouldFail() {\n+\n+    TaskCommentResource taskCommentResourceToCreate = new TaskCommentResource();\n+    taskCommentResourceToCreate.setTaskId(\"TKI:000000000000000000000000000000000004\");\n+    taskCommentResourceToCreate.setTextField(\"newly created task comment\");\n+\n+    ThrowingCallable httpCall =\n+        () -> {\n+          template.exchange(\n+              restHelper.toUrl(\n+                  Mapping.URL_TASK_COMMENTS, \"TKI:000000000000000000000000000000000004\"),\n+              HttpMethod.POST,\n+              new HttpEntity<>(taskCommentResourceToCreate, restHelper.getHeadersUser_1_1()),\n+              ParameterizedTypeReference.forType(TaskCommentResource.class));\n+        };\n+    assertThatThrownBy(httpCall)\n+        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n+        .isEqualTo(HttpStatus.FORBIDDEN);\n+  }\n+\n+  @Test\n+  void testCreateTaskCommentForNotExistingTaskShouldFail() {\n+\n+    TaskCommentResource taskCommentResourceToCreate = new TaskCommentResource();\n+    taskCommentResourceToCreate.setTaskId(\"DefinatelyNotExistingId\");\n+    taskCommentResourceToCreate.setTextField(\"newly created task comment\");\n+\n+    ThrowingCallable httpCall =\n+        () -> {\n+          template.exchange(\n+              restHelper.toUrl(Mapping.URL_TASK_COMMENTS, \"DefinatelyNotExistingId\"),\n+              HttpMethod.POST,\n+              new HttpEntity<>(taskCommentResourceToCreate, restHelper.getHeadersAdmin()),\n+              ParameterizedTypeReference.forType(TaskCommentResource.class));\n+        };\n+    assertThatThrownBy(httpCall)\n+        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n+        .isEqualTo(HttpStatus.NOT_FOUND);\n+  }\n+\n+  @Test\n+  void testCreateTaskCommentWithDifferentTaskIdInResourceShouldFail() {\n+\n+    TaskCommentResource taskCommentResourceToCreate = new TaskCommentResource();\n+    taskCommentResourceToCreate.setTaskId(\"TKI:000000000000000000000000000000000000\");\n+    taskCommentResourceToCreate.setTextField(\"newly created task comment\");\n+\n+    ThrowingCallable httpCall =\n+        () -> {\n+          template.exchange(\n+              restHelper.toUrl(Mapping.URL_TASK_COMMENTS, \"DifferentTaskId\"),\n+              HttpMethod.POST,\n+              new HttpEntity<>(taskCommentResourceToCreate, restHelper.getHeadersAdmin()),\n+              ParameterizedTypeReference.forType(TaskCommentResource.class));\n+        };\n+    assertThatThrownBy(httpCall)\n+        .extracting(ex -> ((HttpClientErrorException) ex).getStatusCode())\n+        .isEqualTo(HttpStatus.BAD_REQUEST);\n+  }\n+\n+  @Test\n+  void testUpdateTaskCommentWithConcurrentModificationShouldFail() {", "originalCommit": "a9e5091ecbc12ce9e15582f5866a74e9c5a60086", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY5MTMxMQ==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397691311", "bodyText": "Actually the test is doing exactely that. In the test there is an update of a task comment. (which then gets a more recent modified timestamp). Then there is an attempt to update that task comment again with a modified timestamp before the most recent update.\nSo someone else modified it before the second update attempt which is resulting in an expected concurrency exception.", "author": "gitgoodjhe", "createdAt": "2020-03-25T08:52:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNjU2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNzAwMQ==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r397637001", "bodyText": "I did not verify that the snippes actually exist. The build will do that for us :)", "author": "mustaphazorgati", "createdAt": "2020-03-25T06:44:21Z", "path": "rest/taskana-rest-spring/src/test/resources/asciidoc/rest-api.adoc", "diffHunk": "@@ -293,6 +293,97 @@ include::{snippets}/TransferTaskDocTest/http-response.adoc[]\n The response-body is essentially the same as for getting a single task. +\n Therefore for the response fields you can refer to the <<task, single task>>.\n \n+== TaskComment-Resource", "originalCommit": "a9e5091ecbc12ce9e15582f5866a74e9c5a60086", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fbdcd3c74090a972e595145554ca77d2e50e110d", "url": "https://github.com/Taskana/taskana/commit/fbdcd3c74090a972e595145554ca77d2e50e110d", "message": "Comments from Mustapha Zorgati", "committedDate": "2020-03-25T10:39:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY2NTAwOQ==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r400665009", "bodyText": "Should this path for create remain as /tasks/comments/{taskId}/{taskCommentId} or also be changed to /tasks/comments/{taskCommentId}? @holgerhagen", "author": "gitgoodjhe", "createdAt": "2020-03-31T06:11:39Z", "path": "rest/taskana-rest-spring/src/main/java/pro/taskana/rest/TaskCommentController.java", "diffHunk": "@@ -153,34 +146,22 @@\n   @PostMapping(path = Mapping.URL_TASK_COMMENTS)", "originalCommit": "0ea5fe10390aa88b83a831adbeff08bd1694edc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY4ODA5Mw==", "url": "https://github.com/Taskana/taskana/pull/982#discussion_r400688093", "bodyText": "I was expecting  POST \"/tasks/{taskId}/comments\"", "author": "holgerhagen", "createdAt": "2020-03-31T07:09:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY2NTAwOQ=="}], "type": "inlineReview"}, {"oid": "b3114ae33f793a8802ba862243a832e8a274a9d5", "url": "https://github.com/Taskana/taskana/commit/b3114ae33f793a8802ba862243a832e8a274a9d5", "message": "comments from Holger Hagen", "committedDate": "2020-03-31T09:33:12Z", "type": "commit"}]}