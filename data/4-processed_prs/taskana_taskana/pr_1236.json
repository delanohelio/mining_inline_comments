{"pr_number": 1236, "pr_title": "TSK-1349: Added unit test for Workbasket-Overview, -List and -ListToolbar", "pr_createdAt": "2020-08-17T12:25:38Z", "pr_url": "https://github.com/Taskana/taskana/pull/1236", "timeline": [{"oid": "0a32a373505a0a1d1323c2a869dbaf84ac939a07", "url": "https://github.com/Taskana/taskana/commit/0a32a373505a0a1d1323c2a869dbaf84ac939a07", "message": "TSK-1349: added test for workbasket overview", "committedDate": "2020-08-11T12:06:25Z", "type": "commit"}, {"oid": "345662abcfa1282fb03b06a62398ad5932037e81", "url": "https://github.com/Taskana/taskana/commit/345662abcfa1282fb03b06a62398ad5932037e81", "message": "TSK-1349: moved animations ts files to shared", "committedDate": "2020-08-11T12:51:41Z", "type": "commit"}, {"oid": "bfe10c06ddfc48b17287f377c020d421726d1aa8", "url": "https://github.com/Taskana/taskana/commit/bfe10c06ddfc48b17287f377c020d421726d1aa8", "message": "TSK-1349: added unit test for workbasket list toolbar", "committedDate": "2020-08-11T13:14:13Z", "type": "commit"}, {"oid": "28bf195470aaaf49f2fb7f199fcc4c78e1faff0b", "url": "https://github.com/Taskana/taskana/commit/28bf195470aaaf49f2fb7f199fcc4c78e1faff0b", "message": "TSK-1349: added unit tests for workbasket-list", "committedDate": "2020-08-11T14:09:42Z", "type": "commit"}, {"oid": "40f8c397d4780b7c4d1d9e956bbe194b36d92257", "url": "https://github.com/Taskana/taskana/commit/40f8c397d4780b7c4d1d9e956bbe194b36d92257", "message": "TSK-1349: improved tests for workbasket-overview", "committedDate": "2020-08-11T15:26:04Z", "type": "commit"}, {"oid": "e630fc4a1818136d0c532ea68920cc8491cb6258", "url": "https://github.com/Taskana/taskana/commit/e630fc4a1818136d0c532ea68920cc8491cb6258", "message": "TSK-1349: Updated test for workbasket list, workbasket-list-toolbar", "committedDate": "2020-08-12T14:28:59Z", "type": "commit"}, {"oid": "229a493824be12dddbdc31f10cf2b651f9e30c8a", "url": "https://github.com/Taskana/taskana/commit/229a493824be12dddbdc31f10cf2b651f9e30c8a", "message": "TSK-1349: added more test variants for workbasket overview", "committedDate": "2020-08-17T12:24:02Z", "type": "commit"}, {"oid": "66253b8e0cb192f44365de8b605ff1ad6efa246b", "url": "https://github.com/Taskana/taskana/commit/66253b8e0cb192f44365de8b605ff1ad6efa246b", "message": "TSK-1349: removed console log", "committedDate": "2020-08-17T12:29:53Z", "type": "commit"}, {"oid": "321df831c5b1922e5434af423a0daeacc520fbc6", "url": "https://github.com/Taskana/taskana/commit/321df831c5b1922e5434af423a0daeacc520fbc6", "message": "TSK-1349: removed CUSTOM_ELEMENTS_SCHEMA", "committedDate": "2020-08-17T13:18:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyNjI1NA==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472726254", "bodyText": "This is not our naming convention.", "author": "sofie29", "createdAt": "2020-08-19T05:46:36Z", "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "diffHunk": "@@ -0,0 +1,118 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListToolbarComponent } from './workbasket-list-toolbar.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable } from 'rxjs';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { CreateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { Filter } from '../../../shared/models/filter';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { ACTION } from '../../../shared/models/action';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+\n+const getDomainFn = jest.fn().mockReturnValue(true);\n+const domainServiceMock = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getDomains: getDomainFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-shared-sort', template: '' })\n+class SortStub {\n+  @Input() sortingFields: Map<string, string>;\n+  @Input() defaultSortBy = 'key';\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+}\n+\n+@Component({ selector: 'taskana-shared-filter', template: '' })\n+class FilterStub {\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+describe('WorkbasketListToolbarComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListToolbarComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListToolbarComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([WorkbasketState]),\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [WorkbasketListToolbarComponent, ImportExportStub, SortStub, FilterStub],\n+      providers: [{ provide: DomainService, useClass: domainServiceMock }, WorkbasketService]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListToolbarComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    component.action = ACTION.COPY;\n+  }));\n+\n+  it('should create the component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch CreateWorkbasket when addWorkbasket is called', async((done) => {\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should not do anything in addWorkbasket if action is create ', async((done) => {", "originalCommit": "321df831c5b1922e5434af423a0daeacc520fbc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1MzcxNw==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472853717", "bodyText": "changed to \"should not dispatch action in addWorkbasket when action is CREATE\"", "author": "cnguyen-de", "createdAt": "2020-08-19T08:26:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyNjI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyOTA1Ng==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472729056", "bodyText": "In case the action wouldn't be triggered, this line wouldn't be called and the test would be true although it had failed.", "author": "sofie29", "createdAt": "2020-08-19T05:50:50Z", "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "diffHunk": "@@ -0,0 +1,118 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListToolbarComponent } from './workbasket-list-toolbar.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable } from 'rxjs';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { CreateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { Filter } from '../../../shared/models/filter';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { ACTION } from '../../../shared/models/action';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+\n+const getDomainFn = jest.fn().mockReturnValue(true);\n+const domainServiceMock = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getDomains: getDomainFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-shared-sort', template: '' })\n+class SortStub {\n+  @Input() sortingFields: Map<string, string>;\n+  @Input() defaultSortBy = 'key';\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+}\n+\n+@Component({ selector: 'taskana-shared-filter', template: '' })\n+class FilterStub {\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+describe('WorkbasketListToolbarComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListToolbarComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListToolbarComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([WorkbasketState]),\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [WorkbasketListToolbarComponent, ImportExportStub, SortStub, FilterStub],\n+      providers: [{ provide: DomainService, useClass: domainServiceMock }, WorkbasketService]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListToolbarComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    component.action = ACTION.COPY;\n+  }));\n+\n+  it('should create the component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch CreateWorkbasket when addWorkbasket is called', async((done) => {\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);", "originalCommit": "321df831c5b1922e5434af423a0daeacc520fbc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1NDIyMQ==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472854221", "bodyText": "the case action isn't called is covered by the test under this", "author": "cnguyen-de", "createdAt": "2020-08-19T08:26:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyOTA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NTYwOA==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472875608", "bodyText": "You are setting actionDispatched to true right before you test whether actionDispatched is true. Therefore, the test will never fail.\nHowever, this test should fail when the action is not dispatched although the action is not CREATE. But the test won't fail.", "author": "sofie29", "createdAt": "2020-08-19T09:00:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyOTA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NjYyNA==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472876624", "bodyText": "I think the expect should be outside of the subscription.", "author": "sofie29", "createdAt": "2020-08-19T09:02:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyOTA1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyOTIzOQ==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472729239", "bodyText": "I think this test is never called since the action is not dispatched.", "author": "sofie29", "createdAt": "2020-08-19T05:51:07Z", "path": "web/src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.spec.ts", "diffHunk": "@@ -0,0 +1,118 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListToolbarComponent } from './workbasket-list-toolbar.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable } from 'rxjs';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { CreateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { Filter } from '../../../shared/models/filter';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { ACTION } from '../../../shared/models/action';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+\n+const getDomainFn = jest.fn().mockReturnValue(true);\n+const domainServiceMock = jest.fn().mockImplementation(\n+  (): Partial<DomainService> => ({\n+    getDomains: getDomainFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-import-export', template: '' })\n+class ImportExportStub {\n+  @Input() currentSelection: TaskanaType;\n+}\n+\n+@Component({ selector: 'taskana-shared-sort', template: '' })\n+class SortStub {\n+  @Input() sortingFields: Map<string, string>;\n+  @Input() defaultSortBy = 'key';\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+}\n+\n+@Component({ selector: 'taskana-shared-filter', template: '' })\n+class FilterStub {\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+describe('WorkbasketListToolbarComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListToolbarComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListToolbarComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpClientTestingModule,\n+        NgxsModule.forRoot([WorkbasketState]),\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [WorkbasketListToolbarComponent, ImportExportStub, SortStub, FilterStub],\n+      providers: [{ provide: DomainService, useClass: domainServiceMock }, WorkbasketService]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListToolbarComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    component.action = ACTION.COPY;\n+  }));\n+\n+  it('should create the component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch CreateWorkbasket when addWorkbasket is called', async((done) => {\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should not do anything in addWorkbasket if action is create ', async((done) => {\n+    component.action = ACTION.CREATE;\n+    fixture.detectChanges();\n+    component.addWorkbasket();\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(CreateWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(false);", "originalCommit": "321df831c5b1922e5434af423a0daeacc520fbc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1NDMxNA==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472854314", "bodyText": "moved expect out of subscription, this action shouldn't be dispatched so that actionDispatched should always be false. Expect false at the end of test case will still be checked", "author": "cnguyen-de", "createdAt": "2020-08-19T08:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjcyOTIzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NDExNg==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472744116", "bodyText": "see above", "author": "sofie29", "createdAt": "2020-08-19T06:12:38Z", "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);", "originalCommit": "321df831c5b1922e5434af423a0daeacc520fbc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NTc3Mg==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472875772", "bodyText": "fixed by calling the the subscription in a zip\n    zip(actions$.pipe(ofActionDispatched(SelectWorkbasket))).subscribe(() => (actionDispatched = true));       component.selectWorkbasket('1');\n    expect(actionDispatched).toBe(true);", "author": "cnguyen-de", "createdAt": "2020-08-19T09:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NDExNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NDIyNg==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472744226", "bodyText": "see above", "author": "sofie29", "createdAt": "2020-08-19T06:12:48Z", "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should dispatch DeselectWorkbasket when selecting a workbasket again', async((done) => {\n+    component.selectedId = '1';\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(DeselectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);", "originalCommit": "321df831c5b1922e5434af423a0daeacc520fbc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NjE3NA==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472876174", "bodyText": "\ud83d\ude00\ud83d\udc46\ud83c\udffb", "author": "cnguyen-de", "createdAt": "2020-08-19T09:01:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NDIyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NjE0OQ==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472746149", "bodyText": "This isn't our naming convention. I suggest 'should set sort value when performSorting is called'.", "author": "sofie29", "createdAt": "2020-08-19T06:15:33Z", "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should dispatch DeselectWorkbasket when selecting a workbasket again', async((done) => {\n+    component.selectedId = '1';\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(DeselectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('performSorting should set sort value', () => {", "originalCommit": "321df831c5b1922e5434af423a0daeacc520fbc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1OTg1OA==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472859858", "bodyText": "changed as suggestion", "author": "cnguyen-de", "createdAt": "2020-08-19T08:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NjE0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NjY5MA==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472746690", "bodyText": "naming convention: 'should set filter value when performFilter is called'", "author": "sofie29", "createdAt": "2020-08-19T06:16:18Z", "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should dispatch DeselectWorkbasket when selecting a workbasket again', async((done) => {\n+    component.selectedId = '1';\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(DeselectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('performSorting should set sort value', () => {\n+    const sort = { sortBy: '1', sortDirection: 'asc' };\n+    component.performSorting(sort);\n+    expect(component.sort).toMatchObject(sort);\n+  });\n+\n+  it('performFilter should set filter value', () => {", "originalCommit": "321df831c5b1922e5434af423a0daeacc520fbc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2MDE3NQ==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472860175", "bodyText": "changed as suggestion", "author": "cnguyen-de", "createdAt": "2020-08-19T08:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NjY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NzM1Mw==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472747353", "bodyText": "naming convention: 'should change page value when changePage function is called'", "author": "sofie29", "createdAt": "2020-08-19T06:17:13Z", "path": "web/src/app/administration/components/workbasket-list/workbasket-list.component.spec.ts", "diffHunk": "@@ -0,0 +1,151 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketListComponent } from './workbasket-list.component';\n+import { Component, DebugElement, EventEmitter, Input, Output } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { OrientationService } from '../../../shared/services/orientation/orientation.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { DeselectWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import { TaskanaQueryParameters } from '../../../shared/util/query-parameters';\n+import { WorkbasketSummary } from '../../../shared/models/workbasket-summary';\n+import { Sorting } from '../../../shared/models/sorting';\n+import { Filter } from '../../../shared/models/filter';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { Page } from '../../../shared/models/page';\n+\n+const workbasketSavedTriggeredFn = jest.fn().mockReturnValue(of(1));\n+const workbasketSummaryFn = jest.fn().mockReturnValue(of({}));\n+const getWorkbasketFn = jest.fn().mockReturnValue(of({ workbasketId: '1' }));\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    workbasketSavedTriggered: workbasketSavedTriggeredFn,\n+    getWorkBasketsSummary: workbasketSummaryFn,\n+    getWorkBasket: getWorkbasketFn\n+  })\n+);\n+\n+const getOrientationFn = jest.fn().mockReturnValue(of('landscape'));\n+const orientationServiceMock = jest.fn().mockImplementation(\n+  (): Partial<OrientationService> => ({\n+    getOrientation: getOrientationFn,\n+    calculateNumberItemsList: jest.fn().mockReturnValue(1920)\n+  })\n+);\n+\n+const getImportingFinishedFn = jest.fn().mockReturnValue(of(true));\n+const importExportServiceMock = jest.fn().mockImplementation(\n+  (): Partial<ImportExportService> => ({\n+    getImportingFinished: getImportingFinishedFn\n+  })\n+);\n+\n+@Component({ selector: 'taskana-administration-workbasket-list-toolbar', template: '' })\n+class WorkbasketListToolbarStub {\n+  @Input() workbaskets: Array<WorkbasketSummary>;\n+  @Input() workbasketDefaultSortBy: string;\n+  @Output() performSorting = new EventEmitter<Sorting>();\n+  @Output() performFilter = new EventEmitter<Filter>();\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() selected = false;\n+}\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-pagination', template: '' })\n+class PaginationStub {\n+  @Input() page: Page;\n+  @Input() type: String;\n+  @Output() changePage = new EventEmitter<number>();\n+  @Input() numberOfItems: number;\n+}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketListComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketListComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketListComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [NgxsModule.forRoot([WorkbasketState]), MatSnackBarModule, MatDialogModule],\n+      declarations: [\n+        WorkbasketListComponent,\n+        WorkbasketListToolbarStub,\n+        IconTypeStub,\n+        SpinnerStub,\n+        PaginationStub,\n+        SvgIconStub\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: OrientationService, useClass: orientationServiceMock },\n+        { provide: ImportExportService, useClass: importExportServiceMock }\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketListComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should dispatch SelectWorkbasket when selecting a workbasket', async((done) => {\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(SelectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('should dispatch DeselectWorkbasket when selecting a workbasket again', async((done) => {\n+    component.selectedId = '1';\n+    component.selectWorkbasket('1');\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(DeselectWorkbasket)).subscribe(() => {\n+      actionDispatched = true;\n+      expect(actionDispatched).toBe(true);\n+      done();\n+    });\n+  }));\n+\n+  it('performSorting should set sort value', () => {\n+    const sort = { sortBy: '1', sortDirection: 'asc' };\n+    component.performSorting(sort);\n+    expect(component.sort).toMatchObject(sort);\n+  });\n+\n+  it('performFilter should set filter value', () => {\n+    const filter = { filterParams: '123' };\n+    component.performFilter(filter);\n+    expect(component.filterBy).toMatchObject(filter);\n+  });\n+\n+  it('change page function should change page value', () => {", "originalCommit": "321df831c5b1922e5434af423a0daeacc520fbc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3Mzg4MQ==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472873881", "bodyText": "changed as suggestion", "author": "cnguyen-de", "createdAt": "2020-08-19T08:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0NzM1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1MDYxNg==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472750616", "bodyText": "Missing async / done", "author": "sofie29", "createdAt": "2020-08-19T06:21:40Z", "path": "web/src/app/administration/components/workbasket-overview/workbasket-overview.component.spec.ts", "diffHunk": "@@ -0,0 +1,176 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketOverviewComponent } from './workbasket-overview.component';\n+import { Component, DebugElement } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { SelectedRouteService } from '../../../shared/services/selected-route/selected-route';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { ActivatedRoute } from '@angular/router';\n+import { CreateWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const NotificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    triggerError: showDialogFn,\n+    showToast: showDialogFn\n+  })\n+);\n+\n+const mockActivatedRoute = {\n+  firstChild: {\n+    params: of({\n+      id: 'new-workbasket'\n+    })\n+  }\n+};\n+\n+const mockActivatedRouteAlternative = {\n+  firstChild: {\n+    params: of({\n+      id: '101'\n+    })\n+  }\n+};\n+\n+const mockActivatedRouteNoParams = {};\n+\n+@Component({ selector: 'taskana-administration-workbasket-list', template: '' })\n+class WorkbasketListStub {}\n+\n+@Component({ selector: 'taskana-administration-workbasket-details', template: '' })\n+class WorkbasketDetailsStub {}\n+\n+@Component({ selector: 'svg-icon', template: '' })\n+class SvgIconStub {}\n+\n+describe('WorkbasketOverviewComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketOverviewComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketOverviewComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [HttpClientTestingModule, RouterTestingModule.withRoutes([]), NgxsModule.forRoot([WorkbasketState])],\n+      declarations: [WorkbasketOverviewComponent, WorkbasketListStub, WorkbasketDetailsStub, SvgIconStub],\n+      providers: [\n+        WorkbasketService,\n+        { provide: NotificationService, useClass: NotificationServiceSpy },\n+        { provide: ActivatedRoute, useValue: mockActivatedRoute },\n+        DomainService,\n+        RequestInProgressService,\n+        SelectedRouteService\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketOverviewComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create the component', () => {\n+    let activatedRoute = TestBed.inject(ActivatedRoute);\n+    expect(component).toBeTruthy();\n+    activatedRoute.firstChild.params.subscribe((params) => {\n+      expect(component.routerParams).toMatchObject(params);", "originalCommit": "321df831c5b1922e5434af423a0daeacc520fbc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3Mzc3Ng==", "url": "https://github.com/Taskana/taskana/pull/1236#discussion_r472873776", "bodyText": "removed this expect, this was for debugging purpose", "author": "cnguyen-de", "createdAt": "2020-08-19T08:57:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1MDYxNg=="}], "type": "inlineReview"}, {"oid": "5ea9b0a0fbe229c629dcfb3c24bad4a497658c32", "url": "https://github.com/Taskana/taskana/commit/5ea9b0a0fbe229c629dcfb3c24bad4a497658c32", "message": "TSK-1349: improved tests", "committedDate": "2020-08-19T09:04:59Z", "type": "commit"}, {"oid": "dea482f78a228ae9e22894a87e2c8e0ab00b2f24", "url": "https://github.com/Taskana/taskana/commit/dea482f78a228ae9e22894a87e2c8e0ab00b2f24", "message": "TSK-1349: further optimized tests", "committedDate": "2020-08-19T09:28:34Z", "type": "commit"}, {"oid": "05ed3ab06547d979a55a34fbb1535a30c45bf7f8", "url": "https://github.com/Taskana/taskana/commit/05ed3ab06547d979a55a34fbb1535a30c45bf7f8", "message": "TSK-1349: added test for workbasket overview", "committedDate": "2020-08-19T09:28:51Z", "type": "commit"}, {"oid": "904704d103909a322158efe077483f4196b87a50", "url": "https://github.com/Taskana/taskana/commit/904704d103909a322158efe077483f4196b87a50", "message": "TSK-1349: moved animations ts files to shared", "committedDate": "2020-08-19T09:28:51Z", "type": "commit"}, {"oid": "936aef3f1fbc70e75f3c59aaf5551587aecd26a3", "url": "https://github.com/Taskana/taskana/commit/936aef3f1fbc70e75f3c59aaf5551587aecd26a3", "message": "TSK-1349: added unit test for workbasket list toolbar", "committedDate": "2020-08-19T09:28:51Z", "type": "commit"}, {"oid": "d3f58c8694ed96fe0c8c5e767ad6e0d715e88da3", "url": "https://github.com/Taskana/taskana/commit/d3f58c8694ed96fe0c8c5e767ad6e0d715e88da3", "message": "TSK-1349: added unit tests for workbasket-list", "committedDate": "2020-08-19T09:28:51Z", "type": "commit"}, {"oid": "4e21039da2fad1a08c247bb88285ee8d36a313ca", "url": "https://github.com/Taskana/taskana/commit/4e21039da2fad1a08c247bb88285ee8d36a313ca", "message": "TSK-1349: improved tests for workbasket-overview", "committedDate": "2020-08-19T09:28:51Z", "type": "commit"}, {"oid": "ea9430c4c0310a940eb713c505974367cb3286a0", "url": "https://github.com/Taskana/taskana/commit/ea9430c4c0310a940eb713c505974367cb3286a0", "message": "TSK-1349: Updated test for workbasket list, workbasket-list-toolbar", "committedDate": "2020-08-19T09:28:51Z", "type": "commit"}, {"oid": "49b23572b84d322d67eeea0410805a43a7e810a2", "url": "https://github.com/Taskana/taskana/commit/49b23572b84d322d67eeea0410805a43a7e810a2", "message": "TSK-1349: added more test variants for workbasket overview", "committedDate": "2020-08-19T09:28:51Z", "type": "commit"}, {"oid": "58e56175befe994ecec4228d6bbfa3bf6bc46ef8", "url": "https://github.com/Taskana/taskana/commit/58e56175befe994ecec4228d6bbfa3bf6bc46ef8", "message": "TSK-1349: removed console log", "committedDate": "2020-08-19T09:28:51Z", "type": "commit"}, {"oid": "d31870dc8e869b1d2d4e4c0367bf254111f5a095", "url": "https://github.com/Taskana/taskana/commit/d31870dc8e869b1d2d4e4c0367bf254111f5a095", "message": "TSK-1349: removed CUSTOM_ELEMENTS_SCHEMA", "committedDate": "2020-08-19T09:28:51Z", "type": "commit"}, {"oid": "d823faa00c9dea5c14e7060a82620737fe8f4393", "url": "https://github.com/Taskana/taskana/commit/d823faa00c9dea5c14e7060a82620737fe8f4393", "message": "TSK-1349: improved tests", "committedDate": "2020-08-19T09:28:51Z", "type": "commit"}, {"oid": "b3422f951666389b583504b090d92068547294ad", "url": "https://github.com/Taskana/taskana/commit/b3422f951666389b583504b090d92068547294ad", "message": "TSK-1349: further optimized tests", "committedDate": "2020-08-19T09:28:51Z", "type": "commit"}, {"oid": "94b5abe3dbe3d783b84576da2a2924d4d7755d77", "url": "https://github.com/Taskana/taskana/commit/94b5abe3dbe3d783b84576da2a2924d4d7755d77", "message": "Merge branch 'TSK-1349-Workbasket-unit-tests' of https://github.com/cnguyen-de/taskana into TSK-1349-Workbasket-unit-tests", "committedDate": "2020-08-19T09:29:42Z", "type": "commit"}, {"oid": "ae48c92d17c0213c79349feb380b4246eb39fe2c", "url": "https://github.com/Taskana/taskana/commit/ae48c92d17c0213c79349feb380b4246eb39fe2c", "message": "Merge branch 'TSK-1349-Workbasket-unit-tests' of https://github.com/cnguyen-de/taskana into TSK-1349-Workbasket-unit-tests", "committedDate": "2020-08-19T09:38:53Z", "type": "commit"}]}