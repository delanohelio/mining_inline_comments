{"pr_number": 1253, "pr_title": "TSK-1349: Added test for import-export", "pr_createdAt": "2020-09-07T09:48:45Z", "pr_url": "https://github.com/Taskana/taskana/pull/1253", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQwMDA0MA==", "url": "https://github.com/Taskana/taskana/pull/1253#discussion_r485400040", "bodyText": "this caused compile error", "author": "cnguyen-de", "createdAt": "2020-09-09T07:35:37Z", "path": "web/src/app/administration/components/import-export/import-export.component.ts", "diffHunk": "@@ -9,6 +9,11 @@ import { ImportExportService } from 'app/administration/services/import-export.s\n import { HttpErrorResponse } from '@angular/common/http';\n import { NOTIFICATION_TYPES } from '../../../shared/models/notifications';\n import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { JsonFormatter } from 'tslint/lib/formatters';\n+import { DefaultSerializer, Serializer } from 'v8';", "originalCommit": "d69e22dc7dd3cda76a61f6270165382f20e0f2f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwNTU0Mw==", "url": "https://github.com/Taskana/taskana/pull/1253#discussion_r487805543", "bodyText": "Must have missed them when reviewing my code, these imports should not be there", "author": "Tristan2357", "createdAt": "2020-09-14T10:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQwMDA0MA=="}], "type": "inlineReview"}, {"oid": "7012851b3008e7a74b3a3c5c35da74d452ecfbe3", "url": "https://github.com/Taskana/taskana/commit/7012851b3008e7a74b3a3c5c35da74d452ecfbe3", "message": "TSK-1349: Added test for import-export", "committedDate": "2020-09-14T10:18:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgxODgwMw==", "url": "https://github.com/Taskana/taskana/pull/1253#discussion_r487818803", "bodyText": "Is this on purpose or did you forget to delete this?", "author": "sofie29", "createdAt": "2020-09-14T10:45:04Z", "path": "web/src/app/administration/components/import-export/import-export.component.ts", "diffHunk": "@@ -40,68 +43,65 @@ export class ImportExportComponent implements OnInit {\n     });\n   }\n \n-  export(domain = '') {\n+  export(domain = ''): Observable<WorkbasketDefinition[] | Classification[]> {\n     if (this.currentSelection === TaskanaType.WORKBASKETS) {\n-      this.workbasketDefinitionService.exportWorkbaskets(domain);\n+      return this.workbasketDefinitionService.exportWorkbaskets(domain);\n     } else {\n-      this.classificationDefinitionService.exportClassifications(domain);\n+      return this.classificationDefinitionService.exportClassifications(domain);\n     }\n   }\n \n   uploadFile() {\n     const file = this.selectedFileInput.nativeElement.files[0];\n-    const formdata = new FormData();\n-    const ajax = new XMLHttpRequest();\n+    console.log(this.selectedFileInput);", "originalCommit": "7012851b3008e7a74b3a3c5c35da74d452ecfbe3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyMzIwNw==", "url": "https://github.com/Taskana/taskana/pull/1253#discussion_r487823207", "bodyText": "See above", "author": "sofie29", "createdAt": "2020-09-14T10:53:43Z", "path": "web/src/app/administration/components/import-export/import-export.component.ts", "diffHunk": "@@ -122,6 +122,7 @@ export class ImportExportComponent implements OnInit {\n   }\n \n   private errorHandler(key: NOTIFICATION_TYPES, passedError?: HttpErrorResponse) {\n+    console.log(key, passedError);", "originalCommit": "7012851b3008e7a74b3a3c5c35da74d452ecfbe3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNTAwMA==", "url": "https://github.com/Taskana/taskana/pull/1253#discussion_r487825000", "bodyText": "Why do we need to return the observable?", "author": "sofie29", "createdAt": "2020-09-14T10:57:22Z", "path": "web/src/app/administration/services/workbasket-definition.service.ts", "diffHunk": "@@ -12,11 +14,12 @@ export class WorkbasketDefinitionService {\n   constructor(private httpClient: HttpClient) {}\n \n   // GET\n-  async exportWorkbaskets(domain: string) {\n+  exportWorkbaskets(domain: string): Observable<WorkbasketDefinition[]> {\n     const domainRequest = domain === '' ? domain : `?domain=${domain}`;\n-    const workbasketDefinitions = await this.httpClient\n-      .get<WorkbasketDefinition[]>(this.url + domainRequest)\n-      .toPromise();\n-    BlobGenerator.saveFile(workbasketDefinitions, `Workbaskets_${TaskanaDate.getDate()}.json`);\n+    const workbasketDefObservable = this.httpClient.get<WorkbasketDefinition[]>(this.url + domainRequest).pipe(take(1));\n+    workbasketDefObservable.subscribe((workbasketDefinitions) =>\n+      BlobGenerator.saveFile(workbasketDefinitions, `Classifications_${TaskanaDate.getDate()}.json`)\n+    );\n+    return workbasketDefObservable;", "originalCommit": "7012851b3008e7a74b3a3c5c35da74d452ecfbe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY1NjY5Mg==", "url": "https://github.com/Taskana/taskana/pull/1253#discussion_r499656692", "bodyText": "Yes, to pass it, so that it can be used in tests", "author": "Tristan2357", "createdAt": "2020-10-05T14:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNTAwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyODI2NQ==", "url": "https://github.com/Taskana/taskana/pull/1253#discussion_r487828265", "bodyText": "I don't know what this means but if this is the same as file.name.endsWith(), then your new version is great \ud83d\ude04", "author": "sofie29", "createdAt": "2020-09-14T11:03:38Z", "path": "web/src/app/administration/components/import-export/import-export.component.ts", "diffHunk": "@@ -40,68 +43,65 @@ export class ImportExportComponent implements OnInit {\n     });\n   }\n \n-  export(domain = '') {\n+  export(domain = ''): Observable<WorkbasketDefinition[] | Classification[]> {\n     if (this.currentSelection === TaskanaType.WORKBASKETS) {\n-      this.workbasketDefinitionService.exportWorkbaskets(domain);\n+      return this.workbasketDefinitionService.exportWorkbaskets(domain);\n     } else {\n-      this.classificationDefinitionService.exportClassifications(domain);\n+      return this.classificationDefinitionService.exportClassifications(domain);\n     }\n   }\n \n   uploadFile() {\n     const file = this.selectedFileInput.nativeElement.files[0];\n-    const formdata = new FormData();\n-    const ajax = new XMLHttpRequest();\n+    console.log(this.selectedFileInput);\n+    const formData = new FormData();\n+    const xhr = new XMLHttpRequest();\n     if (this.checkFormatFile(file)) {\n-      formdata.append('file', file);\n-      ajax.upload.addEventListener('progress', this.progressHandler.bind(this), false);\n-      ajax.addEventListener('load', this.resetProgress.bind(this), false);\n-      ajax.addEventListener('error', this.onFailedResponse.bind(this, ajax), false);\n-      ajax.onreadystatechange = this.onReadyStateChangeHandler.bind(this, ajax);\n+      formData.append('file', file);\n+      xhr.upload.addEventListener('progress', this.progressHandler.bind(this), false);\n+      xhr.addEventListener('load', this.resetProgress.bind(this), false);\n+      xhr.addEventListener('error', this.onFailedResponse.bind(this, xhr), false);\n+      xhr.onreadystatechange = this.onReadyStateChangeHandler.bind(this, xhr);\n       if (this.currentSelection === TaskanaType.WORKBASKETS) {\n-        ajax.open('POST', `${environment.taskanaRestUrl}/v1/workbasket-definitions`);\n+        xhr.open('POST', `${environment.taskanaRestUrl}/v1/workbasket-definitions`);\n       } else {\n-        ajax.open('POST', `${environment.taskanaRestUrl}/v1/classification-definitions`);\n+        xhr.open('POST', `${environment.taskanaRestUrl}/v1/classification-definitions`);\n       }\n       if (!environment.production) {\n-        ajax.setRequestHeader('Authorization', 'Basic YWRtaW46YWRtaW4=');\n+        xhr.setRequestHeader('Authorization', 'Basic YWRtaW46YWRtaW4=');\n       }\n-      ajax.send(formdata);\n-      this.uploadservice.isInUse = true;\n-      this.uploadservice.setCurrentProgressValue(1);\n+      xhr.send(formData);\n+      this.uploadService.isInUse = true;\n+      this.uploadService.setCurrentProgressValue(1);\n     }\n   }\n \n   progressHandler(event) {\n     const percent = (event.loaded / event.total) * 100;\n-    this.uploadservice.setCurrentProgressValue(Math.round(percent));\n+    this.uploadService.setCurrentProgressValue(Math.round(percent));\n   }\n \n   private checkFormatFile(file): boolean {\n-    const ending = file.name.match(/\\.([^.]+)$/)[1];", "originalCommit": "7012851b3008e7a74b3a3c5c35da74d452ecfbe3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyOTk0Nw==", "url": "https://github.com/Taskana/taskana/pull/1253#discussion_r487829947", "bodyText": "All our test files start with the simple 'should create component'-test. Maybe you could add this test here, too.", "author": "sofie29", "createdAt": "2020-09-14T11:06:40Z", "path": "web/src/app/administration/components/import-export/import-export.component.spec.ts", "diffHunk": "@@ -0,0 +1,104 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { DebugElement } from '@angular/core';\n+import { ImportExportComponent } from './import-export.component';\n+import { StartupService } from '../../../shared/services/startup/startup.service';\n+import { TaskanaEngineService } from '../../../shared/services/taskana-engine/taskana-engine.service';\n+import { WindowRefService } from '../../../shared/services/window/window.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { WorkbasketDefinitionService } from '../../services/workbasket-definition.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { UploadService } from '../../../shared/services/upload/upload.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { HttpClient, HttpHandler } from '@angular/common/http';\n+import { Router } from '@angular/router';\n+import { of } from 'rxjs';\n+import { ClassificationDefinitionService } from '../../services/classification-definition.service';\n+import { take, timeout } from 'rxjs/operators';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+import { BlobGenerator } from '../../../shared/util/blob-generator';\n+jest.mock('../../../shared/util/blob-generator');\n+\n+describe('ImportExportComponent', () => {\n+  let fixture: ComponentFixture<ImportExportComponent>;\n+  let debugElement: DebugElement;\n+  let app: ImportExportComponent;\n+\n+  const domainServiceSpy = jest.fn().mockImplementation(\n+    (): Partial<DomainService> => ({\n+      getSelectedDomainValue: jest.fn().mockReturnValue(of()),\n+      getSelectedDomain: jest.fn().mockReturnValue(of()),\n+      getDomains: jest.fn().mockReturnValue(of())\n+    })\n+  );\n+\n+  const httpSpy = jest.fn().mockImplementation(\n+    (): Partial<HttpClient> => ({\n+      get: jest.fn().mockReturnValue(of([])),\n+      post: jest.fn().mockReturnValue(of([]))\n+    })\n+  );\n+\n+  const showDialogFn = jest.fn().mockReturnValue(true);\n+  const notificationServiceSpy = jest.fn().mockImplementation(\n+    (): Partial<NotificationService> => ({\n+      showDialog: showDialogFn,\n+      showToast: showDialogFn,\n+      triggerError: showDialogFn\n+    })\n+  );\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [],\n+      declarations: [ImportExportComponent],\n+      providers: [\n+        StartupService,\n+        TaskanaEngineService,\n+        WindowRefService,\n+        WorkbasketDefinitionService,\n+        ClassificationDefinitionService,\n+        UploadService,\n+        ImportExportService,\n+        { provide: DomainService, useClass: domainServiceSpy },\n+        { provide: NotificationService, useClass: notificationServiceSpy },\n+        { provide: HttpClient, useClass: httpSpy }\n+      ]\n+    }).compileComponents();\n+\n+    jest.clearAllMocks();\n+\n+    fixture = TestBed.createComponent(ImportExportComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    app.currentSelection = TaskanaType.WORKBASKETS;\n+    fixture.detectChanges();\n+  }));\n+", "originalCommit": "7012851b3008e7a74b3a3c5c35da74d452ecfbe3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgzNjA0MA==", "url": "https://github.com/Taskana/taskana/pull/1253#discussion_r487836040", "bodyText": "It seems like there if-statements which are not tested. For example in export(), the call of the two different services could be tested. If we decide that additional tests are useful, this could also be done is a separate PR.", "author": "sofie29", "createdAt": "2020-09-14T11:19:06Z", "path": "web/src/app/administration/components/import-export/import-export.component.spec.ts", "diffHunk": "@@ -0,0 +1,104 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { DebugElement } from '@angular/core';\n+import { ImportExportComponent } from './import-export.component';\n+import { StartupService } from '../../../shared/services/startup/startup.service';\n+import { TaskanaEngineService } from '../../../shared/services/taskana-engine/taskana-engine.service';\n+import { WindowRefService } from '../../../shared/services/window/window.service';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { WorkbasketDefinitionService } from '../../services/workbasket-definition.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { UploadService } from '../../../shared/services/upload/upload.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { HttpClient, HttpHandler } from '@angular/common/http';\n+import { Router } from '@angular/router';\n+import { of } from 'rxjs';\n+import { ClassificationDefinitionService } from '../../services/classification-definition.service';\n+import { take, timeout } from 'rxjs/operators';\n+import { TaskanaType } from '../../../shared/models/taskana-type';\n+import { BlobGenerator } from '../../../shared/util/blob-generator';\n+jest.mock('../../../shared/util/blob-generator');\n+\n+describe('ImportExportComponent', () => {\n+  let fixture: ComponentFixture<ImportExportComponent>;\n+  let debugElement: DebugElement;\n+  let app: ImportExportComponent;\n+\n+  const domainServiceSpy = jest.fn().mockImplementation(\n+    (): Partial<DomainService> => ({\n+      getSelectedDomainValue: jest.fn().mockReturnValue(of()),\n+      getSelectedDomain: jest.fn().mockReturnValue(of()),\n+      getDomains: jest.fn().mockReturnValue(of())\n+    })\n+  );\n+\n+  const httpSpy = jest.fn().mockImplementation(\n+    (): Partial<HttpClient> => ({\n+      get: jest.fn().mockReturnValue(of([])),\n+      post: jest.fn().mockReturnValue(of([]))\n+    })\n+  );\n+\n+  const showDialogFn = jest.fn().mockReturnValue(true);\n+  const notificationServiceSpy = jest.fn().mockImplementation(\n+    (): Partial<NotificationService> => ({\n+      showDialog: showDialogFn,\n+      showToast: showDialogFn,\n+      triggerError: showDialogFn\n+    })\n+  );\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [],\n+      declarations: [ImportExportComponent],\n+      providers: [\n+        StartupService,\n+        TaskanaEngineService,\n+        WindowRefService,\n+        WorkbasketDefinitionService,\n+        ClassificationDefinitionService,\n+        UploadService,\n+        ImportExportService,\n+        { provide: DomainService, useClass: domainServiceSpy },\n+        { provide: NotificationService, useClass: notificationServiceSpy },\n+        { provide: HttpClient, useClass: httpSpy }\n+      ]\n+    }).compileComponents();\n+\n+    jest.clearAllMocks();\n+\n+    fixture = TestBed.createComponent(ImportExportComponent);\n+    debugElement = fixture.debugElement;\n+    app = fixture.debugElement.componentInstance;\n+    app.currentSelection = TaskanaType.WORKBASKETS;\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should successfully upload a valid file', () => {\n+    app.selectedFileInput = {\n+      nativeElement: {\n+        files: [\n+          {\n+            lastModified: 1599117374674,\n+            name: 'Workbaskets_2020-09-03T09_16_14.1414Z.json',\n+            size: 59368,\n+            type: 'application/json',\n+            webkitRelativePath: ''\n+          }\n+        ]\n+      }\n+    };\n+    app.uploadFile();\n+    expect(app.uploadService.isInUse).toBeTruthy();\n+  });\n+\n+  it('should successfully export the classifications', async (done) => {\n+    app\n+      .export()\n+      .pipe(take(1))\n+      .subscribe(() => {\n+        expect(BlobGenerator.saveFile).toHaveBeenCalled();\n+        done();\n+      });\n+  });\n+});", "originalCommit": "7012851b3008e7a74b3a3c5c35da74d452ecfbe3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "637ae6983dfa66e6055b72a5d0ba0b60b8a3f63a", "url": "https://github.com/Taskana/taskana/commit/637ae6983dfa66e6055b72a5d0ba0b60b8a3f63a", "message": "TSK-1349: expanded tests for import-export and removed unnecessary console.log calls", "committedDate": "2020-10-05T16:36:40Z", "type": "commit"}]}