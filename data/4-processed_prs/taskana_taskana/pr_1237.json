{"pr_number": 1237, "pr_title": "TSK-1349: Unit tests for workbasket-details, -information", "pr_createdAt": "2020-08-19T13:12:50Z", "pr_url": "https://github.com/Taskana/taskana/pull/1237", "timeline": [{"oid": "db0cb8bcfebaa809ed1498a5d29a849373792cff", "url": "https://github.com/Taskana/taskana/commit/db0cb8bcfebaa809ed1498a5d29a849373792cff", "message": "TSK-1349: init test file for workbasket details", "committedDate": "2020-08-19T12:25:40Z", "type": "commit"}, {"oid": "b2fb2b694f6808a9e97d9a3648fc843b78aa8874", "url": "https://github.com/Taskana/taskana/commit/b2fb2b694f6808a9e97d9a3648fc843b78aa8874", "message": "TSK-1349: updated workbasket details test", "committedDate": "2020-08-19T12:25:40Z", "type": "commit"}, {"oid": "f2e0bcf67467400c777bb1397a8d1de0bf2fdfe4", "url": "https://github.com/Taskana/taskana/commit/f2e0bcf67467400c777bb1397a8d1de0bf2fdfe4", "message": "TSK-1349: extended tests for workbasket-details", "committedDate": "2020-08-19T12:25:40Z", "type": "commit"}, {"oid": "34565b1a8d3fe52e1c15f5b0e872a27042bcb15f", "url": "https://github.com/Taskana/taskana/commit/34565b1a8d3fe52e1c15f5b0e872a27042bcb15f", "message": "TSK-1349: init workbasket-information test", "committedDate": "2020-08-19T12:25:40Z", "type": "commit"}, {"oid": "0c0fa3b73a553c5b2ed9dfd1e05a6934632a6171", "url": "https://github.com/Taskana/taskana/commit/0c0fa3b73a553c5b2ed9dfd1e05a6934632a6171", "message": "TSK-1349: added test cases for workbasket information", "committedDate": "2020-08-19T12:25:40Z", "type": "commit"}, {"oid": "835a40484a3e5b41dd8dc8579d4273269ecba820", "url": "https://github.com/Taskana/taskana/commit/835a40484a3e5b41dd8dc8579d4273269ecba820", "message": "TSK-1349: added undo test", "committedDate": "2020-08-19T12:25:40Z", "type": "commit"}, {"oid": "096b2cd83764b66dbe945f4599f09f8636b65a1a", "url": "https://github.com/Taskana/taskana/commit/096b2cd83764b66dbe945f4599f09f8636b65a1a", "message": "TSK-1349: init test file for workbasket details", "committedDate": "2020-08-19T12:25:48Z", "type": "commit"}, {"oid": "781220c4d1ca0b90822f7829cd9f52ac588da20e", "url": "https://github.com/Taskana/taskana/commit/781220c4d1ca0b90822f7829cd9f52ac588da20e", "message": "TSK-1349: updated workbasket details test", "committedDate": "2020-08-19T12:25:50Z", "type": "commit"}, {"oid": "2aa4f2a430df7ae96a148899b97974bc0353e01f", "url": "https://github.com/Taskana/taskana/commit/2aa4f2a430df7ae96a148899b97974bc0353e01f", "message": "TSK-1349: extended tests for workbasket-details", "committedDate": "2020-08-19T12:25:50Z", "type": "commit"}, {"oid": "6f22ca1b11ea1ae77cf03daf9e0e71fcdc9adf00", "url": "https://github.com/Taskana/taskana/commit/6f22ca1b11ea1ae77cf03daf9e0e71fcdc9adf00", "message": "TSK-1349: init workbasket-information test", "committedDate": "2020-08-19T12:25:55Z", "type": "commit"}, {"oid": "a9fc48fd161a07ba1c5a46bb01704a1909bf0c34", "url": "https://github.com/Taskana/taskana/commit/a9fc48fd161a07ba1c5a46bb01704a1909bf0c34", "message": "TSK-1349: added test cases for workbasket information", "committedDate": "2020-08-19T12:25:56Z", "type": "commit"}, {"oid": "484fefbb225a5097ad5512fcbfb9265c0691a515", "url": "https://github.com/Taskana/taskana/commit/484fefbb225a5097ad5512fcbfb9265c0691a515", "message": "TSK-1349: added undo test", "committedDate": "2020-08-19T12:25:56Z", "type": "commit"}, {"oid": "5bb4812c92d56ac1c3bd18909393f8b4f25bc0f8", "url": "https://github.com/Taskana/taskana/commit/5bb4812c92d56ac1c3bd18909393f8b4f25bc0f8", "message": "TSK-1349: moved data to mock-store, extend workbasket information tests", "committedDate": "2020-08-19T13:04:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwNDE3MQ==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475504171", "bodyText": "What do you think about unifying the names for better understanding? I like engineConfigurationMock - maybe we can add 'mock' in the end of every mock? workbasketReadStateMock or something like that? (I mean renaming in the mock-store.ts file)", "author": "sofie29", "createdAt": "2020-08-24T10:30:02Z", "path": "web/src/app/administration/components/workbasket-information/workbasket-information.component.spec.ts", "diffHunk": "@@ -0,0 +1,213 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketInformationComponent } from './workbasket-information.component';\n+import { Component, DebugElement, Input } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { MapValuesPipe } from '../../../shared/pipes/map-values.pipe';\n+import { RemoveNoneTypePipe } from '../../../shared/pipes/remove-empty-type.pipe';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { SavingWorkbasketService } from '../../services/saving-workbaskets.service';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { SelectedRouteService } from '../../../shared/services/selected-route/selected-route';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { ACTION } from '../../../shared/models/action';\n+import { TypeaheadModule } from 'ngx-bootstrap';\n+import { TypeAheadComponent } from '../../../shared/components/type-ahead/type-ahead.component';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { MarkWorkbasketForDeletion, UpdateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import {\n+  selectedWorkbasket,\n+  engineConfigurationMock,\n+  workbasketReadState\n+} from '../../../shared/store/mock-data/mock-store';\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-field-error-display', template: '' })\n+class FieldErrorDisplayStub {\n+  @Input() displayError: boolean;\n+  @Input() errorMessage: string;\n+  @Input() validationTrigger: boolean;\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() text: string;\n+}\n+\n+const triggerWorkbasketSavedFn = jest.fn().mockReturnValue(true);\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    triggerWorkBasketSaved: triggerWorkbasketSavedFn,\n+    updateWorkbasket: jest.fn().mockReturnValue(of(true)),\n+    markWorkbasketForDeletion: jest.fn().mockReturnValue(of(true)),\n+    createWorkbasket: jest.fn().mockReturnValue(of({ ...selectedWorkbasket }))\n+  })\n+);\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const validateFormInformationFn = jest.fn().mockImplementation((): Promise<any> => Promise.resolve(true));\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn,\n+    validateInputOverflow: jest.fn(),\n+    validateFormInformation: validateFormInformationFn,\n+    get inputOverflowObservable(): Observable<Map<string, boolean>> {\n+      return of(new Map<string, boolean>());\n+    }\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const notificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn,\n+    showToast: showDialogFn,\n+    triggerError: showDialogFn\n+  })\n+);\n+\n+describe('WorkbasketInformationComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketInformationComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketInformationComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        FormsModule,\n+        HttpClientTestingModule,\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        NgxsModule.forRoot([EngineConfigurationState, WorkbasketState]),\n+        TypeaheadModule.forRoot(),\n+        ReactiveFormsModule,\n+        RouterTestingModule.withRoutes([]),\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [\n+        WorkbasketInformationComponent,\n+        SpinnerStub,\n+        FieldErrorDisplayStub,\n+        IconTypeStub,\n+        TypeAheadComponent,\n+        MapValuesPipe,\n+        RemoveNoneTypePipe\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: notificationServiceSpy },\n+        SavingWorkbasketService,\n+        RequestInProgressService,\n+        DomainService,\n+        SelectedRouteService,\n+        ClassificationCategoriesService\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketInformationComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    store.reset({\n+      ...store.snapshot(),\n+      engineConfiguration: engineConfigurationMock,\n+      workbasket: workbasketReadState", "originalCommit": "5bb4812c92d56ac1c3bd18909393f8b4f25bc0f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU1NjY2NA==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475556664", "bodyText": "yes", "author": "cnguyen-de", "createdAt": "2020-08-24T12:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwNDE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU1NjgwNw==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475556807", "bodyText": "I'll rename them", "author": "cnguyen-de", "createdAt": "2020-08-24T12:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwNDE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwOTc4Nw==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475509787", "bodyText": "I thought we don't want to test code which is executed every time. Was that by accident or did you have a reason? You don't have to change anything - I just want to understand.", "author": "sofie29", "createdAt": "2020-08-24T10:37:48Z", "path": "web/src/app/administration/components/workbasket-information/workbasket-information.component.spec.ts", "diffHunk": "@@ -0,0 +1,213 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketInformationComponent } from './workbasket-information.component';\n+import { Component, DebugElement, Input } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { MapValuesPipe } from '../../../shared/pipes/map-values.pipe';\n+import { RemoveNoneTypePipe } from '../../../shared/pipes/remove-empty-type.pipe';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { SavingWorkbasketService } from '../../services/saving-workbaskets.service';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { SelectedRouteService } from '../../../shared/services/selected-route/selected-route';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { ACTION } from '../../../shared/models/action';\n+import { TypeaheadModule } from 'ngx-bootstrap';\n+import { TypeAheadComponent } from '../../../shared/components/type-ahead/type-ahead.component';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { MarkWorkbasketForDeletion, UpdateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import {\n+  selectedWorkbasket,\n+  engineConfigurationMock,\n+  workbasketReadState\n+} from '../../../shared/store/mock-data/mock-store';\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-field-error-display', template: '' })\n+class FieldErrorDisplayStub {\n+  @Input() displayError: boolean;\n+  @Input() errorMessage: string;\n+  @Input() validationTrigger: boolean;\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() text: string;\n+}\n+\n+const triggerWorkbasketSavedFn = jest.fn().mockReturnValue(true);\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    triggerWorkBasketSaved: triggerWorkbasketSavedFn,\n+    updateWorkbasket: jest.fn().mockReturnValue(of(true)),\n+    markWorkbasketForDeletion: jest.fn().mockReturnValue(of(true)),\n+    createWorkbasket: jest.fn().mockReturnValue(of({ ...selectedWorkbasket }))\n+  })\n+);\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const validateFormInformationFn = jest.fn().mockImplementation((): Promise<any> => Promise.resolve(true));\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn,\n+    validateInputOverflow: jest.fn(),\n+    validateFormInformation: validateFormInformationFn,\n+    get inputOverflowObservable(): Observable<Map<string, boolean>> {\n+      return of(new Map<string, boolean>());\n+    }\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const notificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn,\n+    showToast: showDialogFn,\n+    triggerError: showDialogFn\n+  })\n+);\n+\n+describe('WorkbasketInformationComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketInformationComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketInformationComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        FormsModule,\n+        HttpClientTestingModule,\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        NgxsModule.forRoot([EngineConfigurationState, WorkbasketState]),\n+        TypeaheadModule.forRoot(),\n+        ReactiveFormsModule,\n+        RouterTestingModule.withRoutes([]),\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [\n+        WorkbasketInformationComponent,\n+        SpinnerStub,\n+        FieldErrorDisplayStub,\n+        IconTypeStub,\n+        TypeAheadComponent,\n+        MapValuesPipe,\n+        RemoveNoneTypePipe\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: notificationServiceSpy },\n+        SavingWorkbasketService,\n+        RequestInProgressService,\n+        DomainService,\n+        SelectedRouteService,\n+        ClassificationCategoriesService\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketInformationComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    store.reset({\n+      ...store.snapshot(),\n+      engineConfiguration: engineConfigurationMock,\n+      workbasket: workbasketReadState\n+    });\n+    component.workbasket = selectedWorkbasket;\n+\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should display custom fields correctly', () => {\n+    const customFields = debugElement.nativeElement.getElementsByClassName('custom-fields');\n+    expect(customFields.length).toBe(3); //mock data has custom1->4 but engineConfig disables custom3 -> [1,2,4]\n+  });\n+\n+  it('should create clone of workbasket when workbasket value changes', () => {\n+    component.action = ACTION.READ;\n+    component.ngOnChanges();\n+    expect(component.workbasketClone).toMatchObject(component.workbasket);\n+  });\n+\n+  it('should display create badge message when action is CREATE', () => {\n+    component.action = ACTION.CREATE;\n+    component.ngOnChanges();\n+    expect(component.badgeMessage).toMatch('Creating new workbasket');\n+  });\n+\n+  it('should display copy badge message when action is COPY', () => {\n+    component.action = ACTION.COPY;\n+    component.ngOnChanges();\n+    expect(component.badgeMessage).toContain(`Copying workbasket: ${component.workbasket.key}`);\n+  });\n+\n+  it('should set type variable in selectType', () => {\n+    const type = ICONTYPES.GROUP;\n+    component.selectType(type);\n+    expect(component.workbasket.type).toMatch(type);", "originalCommit": "5bb4812c92d56ac1c3bd18909393f8b4f25bc0f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU1NzExMQ==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475557111", "bodyText": "just want to have 100% in jest coverage although this test doesn't matter much", "author": "cnguyen-de", "createdAt": "2020-08-24T12:17:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwOTc4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxMDIwMA==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475510200", "bodyText": "This is not our naming convention.", "author": "sofie29", "createdAt": "2020-08-24T10:38:51Z", "path": "web/src/app/administration/components/workbasket-information/workbasket-information.component.spec.ts", "diffHunk": "@@ -0,0 +1,213 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketInformationComponent } from './workbasket-information.component';\n+import { Component, DebugElement, Input } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { MapValuesPipe } from '../../../shared/pipes/map-values.pipe';\n+import { RemoveNoneTypePipe } from '../../../shared/pipes/remove-empty-type.pipe';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { SavingWorkbasketService } from '../../services/saving-workbaskets.service';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { SelectedRouteService } from '../../../shared/services/selected-route/selected-route';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { ACTION } from '../../../shared/models/action';\n+import { TypeaheadModule } from 'ngx-bootstrap';\n+import { TypeAheadComponent } from '../../../shared/components/type-ahead/type-ahead.component';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { MarkWorkbasketForDeletion, UpdateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import {\n+  selectedWorkbasket,\n+  engineConfigurationMock,\n+  workbasketReadState\n+} from '../../../shared/store/mock-data/mock-store';\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-field-error-display', template: '' })\n+class FieldErrorDisplayStub {\n+  @Input() displayError: boolean;\n+  @Input() errorMessage: string;\n+  @Input() validationTrigger: boolean;\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() text: string;\n+}\n+\n+const triggerWorkbasketSavedFn = jest.fn().mockReturnValue(true);\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    triggerWorkBasketSaved: triggerWorkbasketSavedFn,\n+    updateWorkbasket: jest.fn().mockReturnValue(of(true)),\n+    markWorkbasketForDeletion: jest.fn().mockReturnValue(of(true)),\n+    createWorkbasket: jest.fn().mockReturnValue(of({ ...selectedWorkbasket }))\n+  })\n+);\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const validateFormInformationFn = jest.fn().mockImplementation((): Promise<any> => Promise.resolve(true));\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn,\n+    validateInputOverflow: jest.fn(),\n+    validateFormInformation: validateFormInformationFn,\n+    get inputOverflowObservable(): Observable<Map<string, boolean>> {\n+      return of(new Map<string, boolean>());\n+    }\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const notificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn,\n+    showToast: showDialogFn,\n+    triggerError: showDialogFn\n+  })\n+);\n+\n+describe('WorkbasketInformationComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketInformationComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketInformationComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        FormsModule,\n+        HttpClientTestingModule,\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        NgxsModule.forRoot([EngineConfigurationState, WorkbasketState]),\n+        TypeaheadModule.forRoot(),\n+        ReactiveFormsModule,\n+        RouterTestingModule.withRoutes([]),\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [\n+        WorkbasketInformationComponent,\n+        SpinnerStub,\n+        FieldErrorDisplayStub,\n+        IconTypeStub,\n+        TypeAheadComponent,\n+        MapValuesPipe,\n+        RemoveNoneTypePipe\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: notificationServiceSpy },\n+        SavingWorkbasketService,\n+        RequestInProgressService,\n+        DomainService,\n+        SelectedRouteService,\n+        ClassificationCategoriesService\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketInformationComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    store.reset({\n+      ...store.snapshot(),\n+      engineConfiguration: engineConfigurationMock,\n+      workbasket: workbasketReadState\n+    });\n+    component.workbasket = selectedWorkbasket;\n+\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should display custom fields correctly', () => {\n+    const customFields = debugElement.nativeElement.getElementsByClassName('custom-fields');\n+    expect(customFields.length).toBe(3); //mock data has custom1->4 but engineConfig disables custom3 -> [1,2,4]\n+  });\n+\n+  it('should create clone of workbasket when workbasket value changes', () => {\n+    component.action = ACTION.READ;\n+    component.ngOnChanges();\n+    expect(component.workbasketClone).toMatchObject(component.workbasket);\n+  });\n+\n+  it('should display create badge message when action is CREATE', () => {\n+    component.action = ACTION.CREATE;\n+    component.ngOnChanges();\n+    expect(component.badgeMessage).toMatch('Creating new workbasket');\n+  });\n+\n+  it('should display copy badge message when action is COPY', () => {\n+    component.action = ACTION.COPY;\n+    component.ngOnChanges();\n+    expect(component.badgeMessage).toContain(`Copying workbasket: ${component.workbasket.key}`);\n+  });\n+\n+  it('should set type variable in selectType', () => {\n+    const type = ICONTYPES.GROUP;\n+    component.selectType(type);\n+    expect(component.workbasket.type).toMatch(type);\n+  });\n+\n+  it('should submit if validatorService is true', () => {", "originalCommit": "5bb4812c92d56ac1c3bd18909393f8b4f25bc0f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyODgwNw==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475628807", "bodyText": "corrected", "author": "cnguyen-de", "createdAt": "2020-08-24T13:56:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxMDIwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxMTAxOA==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475511018", "bodyText": "not our naming convention", "author": "sofie29", "createdAt": "2020-08-24T10:40:33Z", "path": "web/src/app/administration/components/workbasket-information/workbasket-information.component.spec.ts", "diffHunk": "@@ -0,0 +1,213 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketInformationComponent } from './workbasket-information.component';\n+import { Component, DebugElement, Input } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { MapValuesPipe } from '../../../shared/pipes/map-values.pipe';\n+import { RemoveNoneTypePipe } from '../../../shared/pipes/remove-empty-type.pipe';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { SavingWorkbasketService } from '../../services/saving-workbaskets.service';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { SelectedRouteService } from '../../../shared/services/selected-route/selected-route';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { ACTION } from '../../../shared/models/action';\n+import { TypeaheadModule } from 'ngx-bootstrap';\n+import { TypeAheadComponent } from '../../../shared/components/type-ahead/type-ahead.component';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { MarkWorkbasketForDeletion, UpdateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import {\n+  selectedWorkbasket,\n+  engineConfigurationMock,\n+  workbasketReadState\n+} from '../../../shared/store/mock-data/mock-store';\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-field-error-display', template: '' })\n+class FieldErrorDisplayStub {\n+  @Input() displayError: boolean;\n+  @Input() errorMessage: string;\n+  @Input() validationTrigger: boolean;\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() text: string;\n+}\n+\n+const triggerWorkbasketSavedFn = jest.fn().mockReturnValue(true);\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    triggerWorkBasketSaved: triggerWorkbasketSavedFn,\n+    updateWorkbasket: jest.fn().mockReturnValue(of(true)),\n+    markWorkbasketForDeletion: jest.fn().mockReturnValue(of(true)),\n+    createWorkbasket: jest.fn().mockReturnValue(of({ ...selectedWorkbasket }))\n+  })\n+);\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const validateFormInformationFn = jest.fn().mockImplementation((): Promise<any> => Promise.resolve(true));\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn,\n+    validateInputOverflow: jest.fn(),\n+    validateFormInformation: validateFormInformationFn,\n+    get inputOverflowObservable(): Observable<Map<string, boolean>> {\n+      return of(new Map<string, boolean>());\n+    }\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const notificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn,\n+    showToast: showDialogFn,\n+    triggerError: showDialogFn\n+  })\n+);\n+\n+describe('WorkbasketInformationComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketInformationComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketInformationComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        FormsModule,\n+        HttpClientTestingModule,\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        NgxsModule.forRoot([EngineConfigurationState, WorkbasketState]),\n+        TypeaheadModule.forRoot(),\n+        ReactiveFormsModule,\n+        RouterTestingModule.withRoutes([]),\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [\n+        WorkbasketInformationComponent,\n+        SpinnerStub,\n+        FieldErrorDisplayStub,\n+        IconTypeStub,\n+        TypeAheadComponent,\n+        MapValuesPipe,\n+        RemoveNoneTypePipe\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: notificationServiceSpy },\n+        SavingWorkbasketService,\n+        RequestInProgressService,\n+        DomainService,\n+        SelectedRouteService,\n+        ClassificationCategoriesService\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketInformationComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    store.reset({\n+      ...store.snapshot(),\n+      engineConfiguration: engineConfigurationMock,\n+      workbasket: workbasketReadState\n+    });\n+    component.workbasket = selectedWorkbasket;\n+\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should display custom fields correctly', () => {\n+    const customFields = debugElement.nativeElement.getElementsByClassName('custom-fields');\n+    expect(customFields.length).toBe(3); //mock data has custom1->4 but engineConfig disables custom3 -> [1,2,4]\n+  });\n+\n+  it('should create clone of workbasket when workbasket value changes', () => {\n+    component.action = ACTION.READ;\n+    component.ngOnChanges();\n+    expect(component.workbasketClone).toMatchObject(component.workbasket);\n+  });\n+\n+  it('should display create badge message when action is CREATE', () => {\n+    component.action = ACTION.CREATE;\n+    component.ngOnChanges();\n+    expect(component.badgeMessage).toMatch('Creating new workbasket');\n+  });\n+\n+  it('should display copy badge message when action is COPY', () => {\n+    component.action = ACTION.COPY;\n+    component.ngOnChanges();\n+    expect(component.badgeMessage).toContain(`Copying workbasket: ${component.workbasket.key}`);\n+  });\n+\n+  it('should set type variable in selectType', () => {\n+    const type = ICONTYPES.GROUP;\n+    component.selectType(type);\n+    expect(component.workbasket.type).toMatch(type);\n+  });\n+\n+  it('should submit if validatorService is true', () => {\n+    const formsValidatorService = TestBed.inject(FormsValidatorService);\n+    component.onSubmit();\n+    expect(formsValidatorService.formSubmitAttempt).toBe(true);\n+  });\n+\n+  it('should reset workbasket information when onUndo is called', () => {\n+    component.workbasketClone = selectedWorkbasket;\n+    const notificationService = TestBed.inject(NotificationService);\n+    const toastSpy = jest.spyOn(notificationService, 'showToast');\n+    component.onUndo();\n+    expect(toastSpy).toHaveBeenCalled();\n+    expect(component.workbasket).toMatchObject(component.workbasketClone);\n+  });\n+\n+  it('should save workbasket if workbasketId there', () => {", "originalCommit": "5bb4812c92d56ac1c3bd18909393f8b4f25bc0f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyOTA3OQ==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475629079", "bodyText": "corrected", "author": "cnguyen-de", "createdAt": "2020-08-24T13:56:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxMTAxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxNDY0NQ==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475514645", "bodyText": "There is no async in the method declaration despite of the subscription.", "author": "sofie29", "createdAt": "2020-08-24T10:48:48Z", "path": "web/src/app/administration/components/workbasket-information/workbasket-information.component.spec.ts", "diffHunk": "@@ -0,0 +1,213 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketInformationComponent } from './workbasket-information.component';\n+import { Component, DebugElement, Input } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { MapValuesPipe } from '../../../shared/pipes/map-values.pipe';\n+import { RemoveNoneTypePipe } from '../../../shared/pipes/remove-empty-type.pipe';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { SavingWorkbasketService } from '../../services/saving-workbaskets.service';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { SelectedRouteService } from '../../../shared/services/selected-route/selected-route';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { ACTION } from '../../../shared/models/action';\n+import { TypeaheadModule } from 'ngx-bootstrap';\n+import { TypeAheadComponent } from '../../../shared/components/type-ahead/type-ahead.component';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { MarkWorkbasketForDeletion, UpdateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import {\n+  selectedWorkbasket,\n+  engineConfigurationMock,\n+  workbasketReadState\n+} from '../../../shared/store/mock-data/mock-store';\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-field-error-display', template: '' })\n+class FieldErrorDisplayStub {\n+  @Input() displayError: boolean;\n+  @Input() errorMessage: string;\n+  @Input() validationTrigger: boolean;\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() text: string;\n+}\n+\n+const triggerWorkbasketSavedFn = jest.fn().mockReturnValue(true);\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    triggerWorkBasketSaved: triggerWorkbasketSavedFn,\n+    updateWorkbasket: jest.fn().mockReturnValue(of(true)),\n+    markWorkbasketForDeletion: jest.fn().mockReturnValue(of(true)),\n+    createWorkbasket: jest.fn().mockReturnValue(of({ ...selectedWorkbasket }))\n+  })\n+);\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const validateFormInformationFn = jest.fn().mockImplementation((): Promise<any> => Promise.resolve(true));\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn,\n+    validateInputOverflow: jest.fn(),\n+    validateFormInformation: validateFormInformationFn,\n+    get inputOverflowObservable(): Observable<Map<string, boolean>> {\n+      return of(new Map<string, boolean>());\n+    }\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const notificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn,\n+    showToast: showDialogFn,\n+    triggerError: showDialogFn\n+  })\n+);\n+\n+describe('WorkbasketInformationComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketInformationComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketInformationComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        FormsModule,\n+        HttpClientTestingModule,\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        NgxsModule.forRoot([EngineConfigurationState, WorkbasketState]),\n+        TypeaheadModule.forRoot(),\n+        ReactiveFormsModule,\n+        RouterTestingModule.withRoutes([]),\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [\n+        WorkbasketInformationComponent,\n+        SpinnerStub,\n+        FieldErrorDisplayStub,\n+        IconTypeStub,\n+        TypeAheadComponent,\n+        MapValuesPipe,\n+        RemoveNoneTypePipe\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: notificationServiceSpy },\n+        SavingWorkbasketService,\n+        RequestInProgressService,\n+        DomainService,\n+        SelectedRouteService,\n+        ClassificationCategoriesService\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketInformationComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    store.reset({\n+      ...store.snapshot(),\n+      engineConfiguration: engineConfigurationMock,\n+      workbasket: workbasketReadState\n+    });\n+    component.workbasket = selectedWorkbasket;\n+\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should display custom fields correctly', () => {\n+    const customFields = debugElement.nativeElement.getElementsByClassName('custom-fields');\n+    expect(customFields.length).toBe(3); //mock data has custom1->4 but engineConfig disables custom3 -> [1,2,4]\n+  });\n+\n+  it('should create clone of workbasket when workbasket value changes', () => {\n+    component.action = ACTION.READ;\n+    component.ngOnChanges();\n+    expect(component.workbasketClone).toMatchObject(component.workbasket);\n+  });\n+\n+  it('should display create badge message when action is CREATE', () => {\n+    component.action = ACTION.CREATE;\n+    component.ngOnChanges();\n+    expect(component.badgeMessage).toMatch('Creating new workbasket');\n+  });\n+\n+  it('should display copy badge message when action is COPY', () => {\n+    component.action = ACTION.COPY;\n+    component.ngOnChanges();\n+    expect(component.badgeMessage).toContain(`Copying workbasket: ${component.workbasket.key}`);\n+  });\n+\n+  it('should set type variable in selectType', () => {\n+    const type = ICONTYPES.GROUP;\n+    component.selectType(type);\n+    expect(component.workbasket.type).toMatch(type);\n+  });\n+\n+  it('should submit if validatorService is true', () => {\n+    const formsValidatorService = TestBed.inject(FormsValidatorService);\n+    component.onSubmit();\n+    expect(formsValidatorService.formSubmitAttempt).toBe(true);\n+  });\n+\n+  it('should reset workbasket information when onUndo is called', () => {\n+    component.workbasketClone = selectedWorkbasket;\n+    const notificationService = TestBed.inject(NotificationService);\n+    const toastSpy = jest.spyOn(notificationService, 'showToast');\n+    component.onUndo();\n+    expect(toastSpy).toHaveBeenCalled();\n+    expect(component.workbasket).toMatchObject(component.workbasketClone);\n+  });\n+\n+  it('should save workbasket if workbasketId there', () => {\n+    component.workbasket = { ...selectedWorkbasket };\n+    component.workbasket.workbasketId = '1';\n+    component.action = ACTION.COPY;\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(UpdateWorkbasket)).subscribe(() => (actionDispatched = true));", "originalCommit": "5bb4812c92d56ac1c3bd18909393f8b4f25bc0f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMDA5Ng==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475630096", "bodyText": "corrected", "author": "cnguyen-de", "createdAt": "2020-08-24T13:57:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxNDY0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxNDg5NQ==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475514895", "bodyText": "There is no async in the method declaration despite of the subscription.", "author": "sofie29", "createdAt": "2020-08-24T10:49:21Z", "path": "web/src/app/administration/components/workbasket-information/workbasket-information.component.spec.ts", "diffHunk": "@@ -0,0 +1,213 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketInformationComponent } from './workbasket-information.component';\n+import { Component, DebugElement, Input } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { MapValuesPipe } from '../../../shared/pipes/map-values.pipe';\n+import { RemoveNoneTypePipe } from '../../../shared/pipes/remove-empty-type.pipe';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { SavingWorkbasketService } from '../../services/saving-workbaskets.service';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { SelectedRouteService } from '../../../shared/services/selected-route/selected-route';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { ACTION } from '../../../shared/models/action';\n+import { TypeaheadModule } from 'ngx-bootstrap';\n+import { TypeAheadComponent } from '../../../shared/components/type-ahead/type-ahead.component';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { MarkWorkbasketForDeletion, UpdateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import {\n+  selectedWorkbasket,\n+  engineConfigurationMock,\n+  workbasketReadState\n+} from '../../../shared/store/mock-data/mock-store';\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-field-error-display', template: '' })\n+class FieldErrorDisplayStub {\n+  @Input() displayError: boolean;\n+  @Input() errorMessage: string;\n+  @Input() validationTrigger: boolean;\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() text: string;\n+}\n+\n+const triggerWorkbasketSavedFn = jest.fn().mockReturnValue(true);\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    triggerWorkBasketSaved: triggerWorkbasketSavedFn,\n+    updateWorkbasket: jest.fn().mockReturnValue(of(true)),\n+    markWorkbasketForDeletion: jest.fn().mockReturnValue(of(true)),\n+    createWorkbasket: jest.fn().mockReturnValue(of({ ...selectedWorkbasket }))\n+  })\n+);\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const validateFormInformationFn = jest.fn().mockImplementation((): Promise<any> => Promise.resolve(true));\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn,\n+    validateInputOverflow: jest.fn(),\n+    validateFormInformation: validateFormInformationFn,\n+    get inputOverflowObservable(): Observable<Map<string, boolean>> {\n+      return of(new Map<string, boolean>());\n+    }\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const notificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn,\n+    showToast: showDialogFn,\n+    triggerError: showDialogFn\n+  })\n+);\n+\n+describe('WorkbasketInformationComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketInformationComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketInformationComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        FormsModule,\n+        HttpClientTestingModule,\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        NgxsModule.forRoot([EngineConfigurationState, WorkbasketState]),\n+        TypeaheadModule.forRoot(),\n+        ReactiveFormsModule,\n+        RouterTestingModule.withRoutes([]),\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [\n+        WorkbasketInformationComponent,\n+        SpinnerStub,\n+        FieldErrorDisplayStub,\n+        IconTypeStub,\n+        TypeAheadComponent,\n+        MapValuesPipe,\n+        RemoveNoneTypePipe\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: notificationServiceSpy },\n+        SavingWorkbasketService,\n+        RequestInProgressService,\n+        DomainService,\n+        SelectedRouteService,\n+        ClassificationCategoriesService\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketInformationComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    store.reset({\n+      ...store.snapshot(),\n+      engineConfiguration: engineConfigurationMock,\n+      workbasket: workbasketReadState\n+    });\n+    component.workbasket = selectedWorkbasket;\n+\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should display custom fields correctly', () => {\n+    const customFields = debugElement.nativeElement.getElementsByClassName('custom-fields');\n+    expect(customFields.length).toBe(3); //mock data has custom1->4 but engineConfig disables custom3 -> [1,2,4]\n+  });\n+\n+  it('should create clone of workbasket when workbasket value changes', () => {\n+    component.action = ACTION.READ;\n+    component.ngOnChanges();\n+    expect(component.workbasketClone).toMatchObject(component.workbasket);\n+  });\n+\n+  it('should display create badge message when action is CREATE', () => {\n+    component.action = ACTION.CREATE;\n+    component.ngOnChanges();\n+    expect(component.badgeMessage).toMatch('Creating new workbasket');\n+  });\n+\n+  it('should display copy badge message when action is COPY', () => {\n+    component.action = ACTION.COPY;\n+    component.ngOnChanges();\n+    expect(component.badgeMessage).toContain(`Copying workbasket: ${component.workbasket.key}`);\n+  });\n+\n+  it('should set type variable in selectType', () => {\n+    const type = ICONTYPES.GROUP;\n+    component.selectType(type);\n+    expect(component.workbasket.type).toMatch(type);\n+  });\n+\n+  it('should submit if validatorService is true', () => {\n+    const formsValidatorService = TestBed.inject(FormsValidatorService);\n+    component.onSubmit();\n+    expect(formsValidatorService.formSubmitAttempt).toBe(true);\n+  });\n+\n+  it('should reset workbasket information when onUndo is called', () => {\n+    component.workbasketClone = selectedWorkbasket;\n+    const notificationService = TestBed.inject(NotificationService);\n+    const toastSpy = jest.spyOn(notificationService, 'showToast');\n+    component.onUndo();\n+    expect(toastSpy).toHaveBeenCalled();\n+    expect(component.workbasket).toMatchObject(component.workbasketClone);\n+  });\n+\n+  it('should save workbasket if workbasketId there', () => {\n+    component.workbasket = { ...selectedWorkbasket };\n+    component.workbasket.workbasketId = '1';\n+    component.action = ACTION.COPY;\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(UpdateWorkbasket)).subscribe(() => (actionDispatched = true));\n+    component.onSave();\n+    expect(actionDispatched).toBe(true);\n+    expect(component.workbasketClone).toMatchObject(component.workbasket);\n+  });\n+\n+  it('should dispatch MarkWorkbasketforDeletion action when onRemoveConfirmed is called', () => {\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(MarkWorkbasketForDeletion)).subscribe(() => (actionDispatched = true));", "originalCommit": "5bb4812c92d56ac1c3bd18909393f8b4f25bc0f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxNTE4NQ==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475515185", "bodyText": "not our naming convention", "author": "sofie29", "createdAt": "2020-08-24T10:49:56Z", "path": "web/src/app/administration/components/workbasket-information/workbasket-information.component.spec.ts", "diffHunk": "@@ -0,0 +1,213 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketInformationComponent } from './workbasket-information.component';\n+import { Component, DebugElement, Input } from '@angular/core';\n+import { Actions, NgxsModule, ofActionDispatched, Store } from '@ngxs/store';\n+import { Observable, of } from 'rxjs';\n+import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n+import { ICONTYPES } from '../../../shared/models/icon-types';\n+import { MapValuesPipe } from '../../../shared/pipes/map-values.pipe';\n+import { RemoveNoneTypePipe } from '../../../shared/pipes/remove-empty-type.pipe';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { SavingWorkbasketService } from '../../services/saving-workbaskets.service';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { FormsValidatorService } from '../../../shared/services/forms-validator/forms-validator.service';\n+import { NotificationService } from '../../../shared/services/notifications/notification.service';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { EngineConfigurationState } from '../../../shared/store/engine-configuration-store/engine-configuration.state';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { SelectedRouteService } from '../../../shared/services/selected-route/selected-route';\n+import { ClassificationCategoriesService } from '../../../shared/services/classification-categories/classification-categories.service';\n+import { ACTION } from '../../../shared/models/action';\n+import { TypeaheadModule } from 'ngx-bootstrap';\n+import { TypeAheadComponent } from '../../../shared/components/type-ahead/type-ahead.component';\n+import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n+import { MarkWorkbasketForDeletion, UpdateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\n+import {\n+  selectedWorkbasket,\n+  engineConfigurationMock,\n+  workbasketReadState\n+} from '../../../shared/store/mock-data/mock-store';\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-shared-field-error-display', template: '' })\n+class FieldErrorDisplayStub {\n+  @Input() displayError: boolean;\n+  @Input() errorMessage: string;\n+  @Input() validationTrigger: boolean;\n+}\n+\n+@Component({ selector: 'taskana-administration-icon-type', template: '' })\n+class IconTypeStub {\n+  @Input() type: ICONTYPES = ICONTYPES.ALL;\n+  @Input() text: string;\n+}\n+\n+const triggerWorkbasketSavedFn = jest.fn().mockReturnValue(true);\n+const workbasketServiceMock = jest.fn().mockImplementation(\n+  (): Partial<WorkbasketService> => ({\n+    triggerWorkBasketSaved: triggerWorkbasketSavedFn,\n+    updateWorkbasket: jest.fn().mockReturnValue(of(true)),\n+    markWorkbasketForDeletion: jest.fn().mockReturnValue(of(true)),\n+    createWorkbasket: jest.fn().mockReturnValue(of({ ...selectedWorkbasket }))\n+  })\n+);\n+\n+const isFieldValidFn = jest.fn().mockReturnValue(true);\n+const validateFormInformationFn = jest.fn().mockImplementation((): Promise<any> => Promise.resolve(true));\n+const formValidatorServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<FormsValidatorService> => ({\n+    isFieldValid: isFieldValidFn,\n+    validateInputOverflow: jest.fn(),\n+    validateFormInformation: validateFormInformationFn,\n+    get inputOverflowObservable(): Observable<Map<string, boolean>> {\n+      return of(new Map<string, boolean>());\n+    }\n+  })\n+);\n+\n+const showDialogFn = jest.fn().mockReturnValue(true);\n+const notificationServiceSpy = jest.fn().mockImplementation(\n+  (): Partial<NotificationService> => ({\n+    showDialog: showDialogFn,\n+    showToast: showDialogFn,\n+    triggerError: showDialogFn\n+  })\n+);\n+\n+describe('WorkbasketInformationComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketInformationComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketInformationComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        FormsModule,\n+        HttpClientTestingModule,\n+        MatSnackBarModule,\n+        MatDialogModule,\n+        NgxsModule.forRoot([EngineConfigurationState, WorkbasketState]),\n+        TypeaheadModule.forRoot(),\n+        ReactiveFormsModule,\n+        RouterTestingModule.withRoutes([]),\n+        BrowserAnimationsModule\n+      ],\n+      declarations: [\n+        WorkbasketInformationComponent,\n+        SpinnerStub,\n+        FieldErrorDisplayStub,\n+        IconTypeStub,\n+        TypeAheadComponent,\n+        MapValuesPipe,\n+        RemoveNoneTypePipe\n+      ],\n+      providers: [\n+        { provide: WorkbasketService, useClass: workbasketServiceMock },\n+        { provide: FormsValidatorService, useClass: formValidatorServiceSpy },\n+        { provide: NotificationService, useClass: notificationServiceSpy },\n+        SavingWorkbasketService,\n+        RequestInProgressService,\n+        DomainService,\n+        SelectedRouteService,\n+        ClassificationCategoriesService\n+      ]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketInformationComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    store.reset({\n+      ...store.snapshot(),\n+      engineConfiguration: engineConfigurationMock,\n+      workbasket: workbasketReadState\n+    });\n+    component.workbasket = selectedWorkbasket;\n+\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should display custom fields correctly', () => {\n+    const customFields = debugElement.nativeElement.getElementsByClassName('custom-fields');\n+    expect(customFields.length).toBe(3); //mock data has custom1->4 but engineConfig disables custom3 -> [1,2,4]\n+  });\n+\n+  it('should create clone of workbasket when workbasket value changes', () => {\n+    component.action = ACTION.READ;\n+    component.ngOnChanges();\n+    expect(component.workbasketClone).toMatchObject(component.workbasket);\n+  });\n+\n+  it('should display create badge message when action is CREATE', () => {\n+    component.action = ACTION.CREATE;\n+    component.ngOnChanges();\n+    expect(component.badgeMessage).toMatch('Creating new workbasket');\n+  });\n+\n+  it('should display copy badge message when action is COPY', () => {\n+    component.action = ACTION.COPY;\n+    component.ngOnChanges();\n+    expect(component.badgeMessage).toContain(`Copying workbasket: ${component.workbasket.key}`);\n+  });\n+\n+  it('should set type variable in selectType', () => {\n+    const type = ICONTYPES.GROUP;\n+    component.selectType(type);\n+    expect(component.workbasket.type).toMatch(type);\n+  });\n+\n+  it('should submit if validatorService is true', () => {\n+    const formsValidatorService = TestBed.inject(FormsValidatorService);\n+    component.onSubmit();\n+    expect(formsValidatorService.formSubmitAttempt).toBe(true);\n+  });\n+\n+  it('should reset workbasket information when onUndo is called', () => {\n+    component.workbasketClone = selectedWorkbasket;\n+    const notificationService = TestBed.inject(NotificationService);\n+    const toastSpy = jest.spyOn(notificationService, 'showToast');\n+    component.onUndo();\n+    expect(toastSpy).toHaveBeenCalled();\n+    expect(component.workbasket).toMatchObject(component.workbasketClone);\n+  });\n+\n+  it('should save workbasket if workbasketId there', () => {\n+    component.workbasket = { ...selectedWorkbasket };\n+    component.workbasket.workbasketId = '1';\n+    component.action = ACTION.COPY;\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(UpdateWorkbasket)).subscribe(() => (actionDispatched = true));\n+    component.onSave();\n+    expect(actionDispatched).toBe(true);\n+    expect(component.workbasketClone).toMatchObject(component.workbasket);\n+  });\n+\n+  it('should dispatch MarkWorkbasketforDeletion action when onRemoveConfirmed is called', () => {\n+    let actionDispatched = false;\n+    actions$.pipe(ofActionDispatched(MarkWorkbasketForDeletion)).subscribe(() => (actionDispatched = true));\n+    component.onRemoveConfirmed();\n+    expect(actionDispatched).toBe(true);\n+  });\n+\n+  it('should create new workbasket if workbasketId is undefined', () => {", "originalCommit": "5bb4812c92d56ac1c3bd18909393f8b4f25bc0f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMDM2MQ==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475630361", "bodyText": "corrected", "author": "cnguyen-de", "createdAt": "2020-08-24T13:57:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxNTE4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxOTU1NQ==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475519555", "bodyText": "You could also delete the variable showDetail in the ts file as it is no longer used.", "author": "sofie29", "createdAt": "2020-08-24T10:58:55Z", "path": "web/src/app/administration/components/workbasket-details/workbasket-details.component.html", "diffHunk": "@@ -2,11 +2,6 @@\n     <taskana-shared-spinner [isRunning]=\"requestInProgress\"></taskana-shared-spinner>\n     <div id=\"workbasket-details\" *ngIf=\"workbasket && !requestInProgress\">\n         <ul class=\"nav nav-tabs\" role=\"tablist\">\n-            <li *ngIf=\"showDetail\" class=\"visible-xs visible-sm hidden\">", "originalCommit": "5bb4812c92d56ac1c3bd18909393f8b4f25bc0f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTIyNw==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475521227", "bodyText": "Why do we not need this anymore?", "author": "sofie29", "createdAt": "2020-08-24T11:02:32Z", "path": "web/src/app/administration/components/workbasket-details/workbasket-details.component.ts", "diffHunk": "@@ -108,12 +97,6 @@ export class WorkbasketDetailsComponent implements OnInit, OnDestroy {\n     if (!workbasketIdSelected && this.action === ACTION.CREATE) {\n       // CREATE\n       this.workbasket = {};\n-      this.domainService\n-        .getSelectedDomain()\n-        .pipe(takeUntil(this.destroy$))\n-        .subscribe((domain) => {\n-          this.workbasket.domain = domain;\n-        });", "originalCommit": "5bb4812c92d56ac1c3bd18909393f8b4f25bc0f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzNTc1NA==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475635754", "bodyText": "I'm gonna restore this part, will need to discuss together if we should remove it", "author": "cnguyen-de", "createdAt": "2020-08-24T14:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMjQ0MA==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475522440", "bodyText": "This is not our naming convention", "author": "sofie29", "createdAt": "2020-08-24T11:05:02Z", "path": "web/src/app/administration/components/workbasket-details/workbasket-details.component.spec.ts", "diffHunk": "@@ -0,0 +1,163 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketDetailsComponent } from './workbasket-details.component';\n+import { Component, DebugElement, Input } from '@angular/core';\n+import { Actions, NgxsModule, Store } from '@ngxs/store';\n+import { Observable } from 'rxjs';\n+import { Workbasket } from '../../../shared/models/workbasket';\n+import { ACTION } from '../../../shared/models/action';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { SelectedRouteService } from '../../../shared/services/selected-route/selected-route';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { selectedWorkbasket } from '../../../shared/store/mock-data/mock-store';\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-administration-workbasket-information', template: '<div>i</div>' })\n+class WorkbasketInformationStub {\n+  @Input() workbasket: Workbasket;\n+  @Input() action: ACTION;\n+}\n+\n+@Component({ selector: 'taskana-administration-workbasket-access-items', template: '' })\n+class WorkbasketAccessItemsStub {\n+  @Input() workbasket: Workbasket;\n+  @Input() action: ACTION;\n+  @Input() active: string;\n+}\n+\n+@Component({ selector: 'taskana-administration-workbasket-distribution-targets', template: '' })\n+class WorkbasketDistributionTargetsStub {\n+  @Input() workbasket: Workbasket;\n+  @Input() action: ACTION;\n+  @Input() active: string;\n+}\n+\n+export const workbasketCopyState = {\n+  selectedWorkbasket,\n+  action: ACTION.COPY\n+};\n+\n+export const workbasketCreateState = {\n+  selectedWorkbasket,\n+  action: ACTION.CREATE\n+};\n+\n+export const workbasketReadState = {\n+  selectedWorkbasket,\n+  action: ACTION.READ\n+};\n+describe('WorkbasketDetailsComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketDetailsComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketDetailsComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        NgxsModule.forRoot([WorkbasketState]),\n+        HttpClientTestingModule,\n+        RouterTestingModule.withRoutes([]),\n+        MatSnackBarModule,\n+        MatDialogModule\n+      ],\n+      declarations: [\n+        WorkbasketDetailsComponent,\n+        SpinnerStub,\n+        WorkbasketAccessItemsStub,\n+        WorkbasketDistributionTargetsStub,\n+        WorkbasketInformationStub\n+      ],\n+      providers: [DomainService, ImportExportService, WorkbasketService, RequestInProgressService, SelectedRouteService]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketDetailsComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should display loading spinner while content loads', () => {", "originalCommit": "5bb4812c92d56ac1c3bd18909393f8b4f25bc0f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMzAzMQ==", "url": "https://github.com/Taskana/taskana/pull/1237#discussion_r475523031", "bodyText": "I think you didn't mean 'copied workbasket' \ud83d\ude00", "author": "sofie29", "createdAt": "2020-08-24T11:06:15Z", "path": "web/src/app/administration/components/workbasket-details/workbasket-details.component.spec.ts", "diffHunk": "@@ -0,0 +1,163 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+import { WorkbasketDetailsComponent } from './workbasket-details.component';\n+import { Component, DebugElement, Input } from '@angular/core';\n+import { Actions, NgxsModule, Store } from '@ngxs/store';\n+import { Observable } from 'rxjs';\n+import { Workbasket } from '../../../shared/models/workbasket';\n+import { ACTION } from '../../../shared/models/action';\n+import { WorkbasketState } from '../../../shared/store/workbasket-store/workbasket.state';\n+import { DomainService } from '../../../shared/services/domain/domain.service';\n+import { ImportExportService } from '../../services/import-export.service';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\n+import { SelectedRouteService } from '../../../shared/services/selected-route/selected-route';\n+import { MatSnackBarModule } from '@angular/material/snack-bar';\n+import { MatDialogModule } from '@angular/material/dialog';\n+import { selectedWorkbasket } from '../../../shared/store/mock-data/mock-store';\n+\n+@Component({ selector: 'taskana-shared-spinner', template: '' })\n+class SpinnerStub {\n+  @Input() isRunning: boolean;\n+}\n+\n+@Component({ selector: 'taskana-administration-workbasket-information', template: '<div>i</div>' })\n+class WorkbasketInformationStub {\n+  @Input() workbasket: Workbasket;\n+  @Input() action: ACTION;\n+}\n+\n+@Component({ selector: 'taskana-administration-workbasket-access-items', template: '' })\n+class WorkbasketAccessItemsStub {\n+  @Input() workbasket: Workbasket;\n+  @Input() action: ACTION;\n+  @Input() active: string;\n+}\n+\n+@Component({ selector: 'taskana-administration-workbasket-distribution-targets', template: '' })\n+class WorkbasketDistributionTargetsStub {\n+  @Input() workbasket: Workbasket;\n+  @Input() action: ACTION;\n+  @Input() active: string;\n+}\n+\n+export const workbasketCopyState = {\n+  selectedWorkbasket,\n+  action: ACTION.COPY\n+};\n+\n+export const workbasketCreateState = {\n+  selectedWorkbasket,\n+  action: ACTION.CREATE\n+};\n+\n+export const workbasketReadState = {\n+  selectedWorkbasket,\n+  action: ACTION.READ\n+};\n+describe('WorkbasketDetailsComponent', () => {\n+  let fixture: ComponentFixture<WorkbasketDetailsComponent>;\n+  let debugElement: DebugElement;\n+  let component: WorkbasketDetailsComponent;\n+  let store: Store;\n+  let actions$: Observable<any>;\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        NgxsModule.forRoot([WorkbasketState]),\n+        HttpClientTestingModule,\n+        RouterTestingModule.withRoutes([]),\n+        MatSnackBarModule,\n+        MatDialogModule\n+      ],\n+      declarations: [\n+        WorkbasketDetailsComponent,\n+        SpinnerStub,\n+        WorkbasketAccessItemsStub,\n+        WorkbasketDistributionTargetsStub,\n+        WorkbasketInformationStub\n+      ],\n+      providers: [DomainService, ImportExportService, WorkbasketService, RequestInProgressService, SelectedRouteService]\n+    }).compileComponents();\n+\n+    fixture = TestBed.createComponent(WorkbasketDetailsComponent);\n+    debugElement = fixture.debugElement;\n+    component = fixture.debugElement.componentInstance;\n+    store = TestBed.inject(Store);\n+    actions$ = TestBed.inject(Actions);\n+    fixture.detectChanges();\n+  }));\n+\n+  it('should create component', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should display loading spinner while content loads', () => {\n+    component.requestInProgress = true;\n+    fixture.detectChanges();\n+    const spinner = debugElement.nativeElement.querySelector('taskana-shared-spinner');\n+    expect(spinner).toBeTruthy();\n+    expect(spinner.style.display).toContain('');\n+  });\n+\n+  it('should render workbasket-details when workbasket exists and request is not in progress', () => {\n+    component.workbasket = { workbasketId: '1' };\n+    component.requestInProgress = false;\n+    fixture.detectChanges();\n+    const workbasketDetails = debugElement.nativeElement.querySelector('#workbasket-details');\n+    expect(workbasketDetails).toBeTruthy();\n+  });\n+\n+  it('should render information, access items and distribution targets components', () => {\n+    component.workbasket = { workbasketId: '1' };\n+    component.requestInProgress = false;\n+    fixture.detectChanges();\n+    const information = debugElement.nativeElement.querySelector('taskana-administration-workbasket-information');\n+    const accessItems = debugElement.nativeElement.querySelector('taskana-administration-workbasket-access-items');\n+    const distributionTargets = debugElement.nativeElement.querySelector(\n+      'taskana-administration-workbasket-distribution-targets'\n+    );\n+    expect(information).toBeTruthy();\n+    expect(accessItems).toBeTruthy();\n+    expect(distributionTargets).toBeTruthy();\n+  });\n+\n+  it('should render new workbasket when action is CREATE', () => {\n+    store.reset({\n+      ...store.snapshot(),\n+      workbasket: workbasketCreateState\n+    });\n+    fixture.detectChanges();\n+    expect(component.tabSelected).toMatch('information');\n+    expect(component.selectedId).toBeUndefined();\n+  });\n+\n+  it('should render copied workbasket when action is COPY', () => {\n+    store.reset({\n+      ...store.snapshot(),\n+      workbasket: workbasketCopyState\n+    });\n+    component.ngOnInit();\n+    fixture.detectChanges();\n+    expect(component.workbasketCopy).toEqual(component.workbasket);\n+  });\n+\n+  it('should render copied workbasket when action is READ', () => {", "originalCommit": "5bb4812c92d56ac1c3bd18909393f8b4f25bc0f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "23ab51bd9950b23c695fd067470b3fad82f42904", "url": "https://github.com/Taskana/taskana/commit/23ab51bd9950b23c695fd067470b3fad82f42904", "message": "TSK-1349: Fixed typos, naming variables", "committedDate": "2020-08-24T14:04:41Z", "type": "commit"}]}