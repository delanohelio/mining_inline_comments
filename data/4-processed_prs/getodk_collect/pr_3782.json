{"pr_number": 3782, "pr_title": "Used Dialog Fragment to retain Exit Form Dialog on Orientation Change", "pr_createdAt": "2020-04-19T11:45:41Z", "pr_url": "https://github.com/getodk/collect/pull/3782", "timeline": [{"oid": "8d85fe2f5460a6e0423f62674af502ab8911ba3d", "url": "https://github.com/getodk/collect/commit/8d85fe2f5460a6e0423f62674af502ab8911ba3d", "message": "coded quit form dialog fragment", "committedDate": "2020-04-17T09:00:44Z", "type": "commit"}, {"oid": "b9940c2fa44942342298b6a433cf3a58826ff7dd", "url": "https://github.com/getodk/collect/commit/b9940c2fa44942342298b6a433cf3a58826ff7dd", "message": "added tests", "committedDate": "2020-04-20T13:55:16Z", "type": "commit"}, {"oid": "b9940c2fa44942342298b6a433cf3a58826ff7dd", "url": "https://github.com/getodk/collect/commit/b9940c2fa44942342298b6a433cf3a58826ff7dd", "message": "added tests", "committedDate": "2020-04-20T13:55:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyNTU2OQ==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r411525569", "bodyText": "Why did you have to make this change?", "author": "seadowg", "createdAt": "2020-04-20T16:37:57Z", "path": "collect_app/src/main/AndroidManifest.xml", "diffHunk": "@@ -79,7 +79,8 @@ the specific language governing permissions and limitations under the License.\n         android:largeHeap=\"true\"\n         android:supportsRtl=\"true\"\n         android:usesCleartextTraffic=\"true\"\n-        android:allowBackup=\"true\">\n+        android:allowBackup=\"true\"\n+        android:theme=\"@style/Theme.AppCompat.Light\">", "originalCommit": "b9940c2fa44942342298b6a433cf3a58826ff7dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk0MTE0OQ==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r411941149", "bodyText": "Hi @seadowg! Whenever I run the tests for the newly created fragment, it gives me the error java.lang.IllegalStateException: You need to use a Theme.AppCompat theme (or descendant) with this activity.", "author": "SaumiaSinghal", "createdAt": "2020-04-21T07:30:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyNTU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk1MDQwOQ==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r411950409", "bodyText": "Ah right. Yes this would fix it but it would also change the default theme for the whole app which could cause us some problems.\nWhat's happening is that a component in the DialogFragment relies on the AppCompat theme so we can make sure that the Activity being used in tests has that theme. You can call setTheme(R.style.Theme_AppCompat) on the Activity or use our RobolectricHelpers.createThemedActivity helper.", "author": "seadowg", "createdAt": "2020-04-21T07:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyNTU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3MDEzMA==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r412170130", "bodyText": "Yes @seadowg, I was also concerned for the default theme of the app. so I removed light, but using RobolectricHelpers.createThemedActivity helper would be a better option.", "author": "SaumiaSinghal", "createdAt": "2020-04-21T13:10:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyNTU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyNjYwOQ==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r411526609", "bodyText": "Definitely good to move this to a ViewModel \ud83d\udc4d", "author": "seadowg", "createdAt": "2020-04-20T16:39:22Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -80,6 +87,36 @@ public void saveForm(Uri instanceContentURI, boolean shouldFinalize, String upda\n         }\n     }\n \n+    // Cleanup when user exits a form without saving\n+    public void removeTempInstance() {", "originalCommit": "b9940c2fa44942342298b6a433cf3a58826ff7dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyNzI5MA==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r411527290", "bodyText": "We can probably remove this logging now as we should have a clearer picture whether the FormController is null or not here.", "author": "seadowg", "createdAt": "2020-04-20T16:40:22Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -80,6 +87,36 @@ public void saveForm(Uri instanceContentURI, boolean shouldFinalize, String upda\n         }\n     }\n \n+    // Cleanup when user exits a form without saving\n+    public void removeTempInstance() {\n+\n+        if (formController != null && formController.getInstanceFile() != null) {\n+            SaveFormToDisk.removeSavepointFiles(formController.getInstanceFile().getName());\n+\n+            // if it's not already saved, erase everything\n+            if (!InstancesDaoHelper.isInstanceAvailable(getAbsoluteInstancePath())) {\n+                // delete media first\n+                String instanceFolder = formController.getInstanceFile().getParent();\n+                Timber.i(\"Attempting to delete: %s\", instanceFolder);\n+                File file = formController.getInstanceFile().getParentFile();\n+                int images = MediaUtils.deleteImagesInFolderFromMediaProvider(file);\n+                int audio = MediaUtils.deleteAudioInFolderFromMediaProvider(file);\n+                int video = MediaUtils.deleteVideoInFolderFromMediaProvider(file);\n+\n+                Timber.i(\"Removed from content providers: %d image files, %d audio files and %d audio files.\",\n+                        images, audio, video);\n+                FileUtils.purgeMediaPath(instanceFolder);\n+            }\n+        } else {\n+            Timber.w(\"null returned by getFormController()\");", "originalCommit": "b9940c2fa44942342298b6a433cf3a58826ff7dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzMDUxOQ==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r411530519", "bodyText": "I think you can just do shadowOf(getMainLooper()).idle(); instead here which a more general way of running the looper.", "author": "seadowg", "createdAt": "2020-04-20T16:45:09Z", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.app.Dialog;\n+\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.Robolectric;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.LooperMode;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertFalse;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@LooperMode(LooperMode.Mode.PAUSED)\n+public class QuitFormDialogFragmentTest {\n+\n+    private FragmentManager fragmentManager;\n+    private QuitFormDialogFragment dialogFragment;\n+\n+    @Before\n+    public void setup() {\n+        FragmentActivity activity = Robolectric.setupActivity(FragmentActivity.class);\n+        fragmentManager = activity.getSupportFragmentManager();\n+        dialogFragment = new QuitFormDialogFragment();\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+\n+        fragmentManager.executePendingTransactions();", "originalCommit": "b9940c2fa44942342298b6a433cf3a58826ff7dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE2NTUzOQ==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r412165539", "bodyText": "I tried using shadowOf(getMainLooper()).idle(), but it doen't work. I stil get the error main looper has queued unexecuted runnables , unless I use fragmentManager.executePendingTransactions().", "author": "SaumiaSinghal", "createdAt": "2020-04-21T13:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzMDUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5MzU3OQ==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r412793579", "bodyText": "So you should be able to remove the @LooperMode(PAUSED) as well.\nYou'll see that you're getting that warning from Robolectric yes but the actual error is below that:\nCaused by: java.lang.UnsupportedOperationException: Failed to resolve attribute at index 5: TypedValue{t=0x2/d=0x7f040251 a=-1}\n\tat android.content.res.TypedArray.getColorStateList(TypedArray.java:546)\n\tat android.widget.TextView.readTextAppearance(TextView.java:3542)\n\tat android.widget.TextView.__constructor__(TextView.java:959)\n\tat android.widget.TextView.<init>(TextView.java)\n\tat android.view.LayoutInflater.createView(LayoutInflater.java:647)\n\tat com.android.internal.policy.PhoneLayoutInflater.onCreateView(PhoneLayoutInflater.java:58)\n\tat android.view.LayoutInflater.onCreateView(LayoutInflater.java:720)\n\tat android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:788)\n\tat android.view.LayoutInflater.createViewFromTag(LayoutInflater.java:730)\n\tat android.view.LayoutInflater.inflate(LayoutInflater.java:492)\n\tat android.view.LayoutInflater.inflate(LayoutInflater.java:423)\n\tat org.odk.collect.android.adapters.IconMenuListAdapter.createView(IconMenuListAdapter.java:69)\n\tat org.odk.collect.android.adapters.IconMenuListAdapter.getView(IconMenuListAdapter.java:62)\n\nThis probably means that a layout is trying to grab an attribute (like ?colorSecondary or ?attr/colorSecondary) that isn't defined in the theme that's being used. It might be that something is using an attribute from our own theme or the MaterialComponents theme.", "author": "seadowg", "createdAt": "2020-04-22T08:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzMDUxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkxMjkwOA==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r412912908", "bodyText": "Thanks @seadowg! I removed and got better results. I need not use fragmentManager.executePendingTransaction anymore.", "author": "SaumiaSinghal", "createdAt": "2020-04-22T11:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzMDUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzMDY1Mg==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r411530652", "bodyText": "Same as above!", "author": "seadowg", "createdAt": "2020-04-20T16:45:23Z", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.app.Dialog;\n+\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.Robolectric;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.LooperMode;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertFalse;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@LooperMode(LooperMode.Mode.PAUSED)\n+public class QuitFormDialogFragmentTest {\n+\n+    private FragmentManager fragmentManager;\n+    private QuitFormDialogFragment dialogFragment;\n+\n+    @Before\n+    public void setup() {\n+        FragmentActivity activity = Robolectric.setupActivity(FragmentActivity.class);\n+        fragmentManager = activity.getSupportFragmentManager();\n+        dialogFragment = new QuitFormDialogFragment();\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+\n+        fragmentManager.executePendingTransactions();\n+        assertThat(shadowOf(dialogFragment.getDialog()).isCancelable(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void dismiss_shouldDismissTheDialog() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+        fragmentManager.executePendingTransactions();", "originalCommit": "b9940c2fa44942342298b6a433cf3a58826ff7dd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzMTM4OA==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r411531388", "bodyText": "Do we need this test? I think there are a few things that we could add tests for here but dismiss working feels like it's the framework's responsibility. Maybe I'm missing something here?", "author": "seadowg", "createdAt": "2020-04-20T16:46:23Z", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.app.Dialog;\n+\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.Robolectric;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.LooperMode;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertFalse;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@LooperMode(LooperMode.Mode.PAUSED)\n+public class QuitFormDialogFragmentTest {\n+\n+    private FragmentManager fragmentManager;\n+    private QuitFormDialogFragment dialogFragment;\n+\n+    @Before\n+    public void setup() {\n+        FragmentActivity activity = Robolectric.setupActivity(FragmentActivity.class);\n+        fragmentManager = activity.getSupportFragmentManager();\n+        dialogFragment = new QuitFormDialogFragment();\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+\n+        fragmentManager.executePendingTransactions();\n+        assertThat(shadowOf(dialogFragment.getDialog()).isCancelable(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void dismiss_shouldDismissTheDialog() {", "originalCommit": "b9940c2fa44942342298b6a433cf3a58826ff7dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE4Njc4Ng==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r412186786", "bodyText": "Dismissing the dialog on dismissing the fragment is the framework responsibility. I can think of one case if I override the onDismiss method and do not call super.onDestroy, it retains the dialog even when I call dismiss.\nIt would be more interesting to add tests to check whether the dialog is retained during orientation change, when the fragment is recreated.", "author": "SaumiaSinghal", "createdAt": "2020-04-21T13:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzMTM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgwODgzNA==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r412808834", "bodyText": "That is good thinking! I think it's potentially overkill though. I think it's best to think about tests protecting from \"lazy\" programmers (as we're all pretty lazy really) - protect from things being deleted or changed but not added. The universe of things that someone could add are pretty big and so it's hard to test protectively against it. Does that make sense?", "author": "seadowg", "createdAt": "2020-04-22T09:08:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzMTM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkxMTY1MQ==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r412911651", "bodyText": "Yes @seadowg, I think it's better if I add the test to check whether the dialog is dismissed when the user clicks the positive button? And to check whether the view is populated correctly and all the options are working or not. I think that will verify the basic functionality of the dialog.", "author": "SaumiaSinghal", "createdAt": "2020-04-22T11:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzMTM4OA=="}], "type": "inlineReview"}, {"oid": "3633063cfc2538ad9834febb67887de985cb0949", "url": "https://github.com/getodk/collect/commit/3633063cfc2538ad9834febb67887de985cb0949", "message": "code refactor", "committedDate": "2020-04-21T08:15:39Z", "type": "commit"}, {"oid": "9959612b63b14dc8d19e3efc09805193a4b22e7f", "url": "https://github.com/getodk/collect/commit/9959612b63b14dc8d19e3efc09805193a4b22e7f", "message": "made changes", "committedDate": "2020-04-21T14:38:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NDQ1Nw==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r412794457", "bodyText": "All this view initialization can probably go in onCreateDialog instead of here so you don't need the title and listView fields.", "author": "seadowg", "createdAt": "2020-04-22T08:48:35Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/QuitFormDialogFragment.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.widget.ListView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.lifecycle.ViewModelProvider;\n+import androidx.lifecycle.ViewModelProviders;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.adapters.IconMenuListAdapter;\n+import org.odk.collect.android.adapters.model.IconMenuItem;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.dao.helpers.InstancesDaoHelper;\n+import org.odk.collect.android.external.ExternalDataManager;\n+import org.odk.collect.android.formentry.audit.AuditEvent;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.preferences.AdminKeys;\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+import org.odk.collect.android.utilities.DialogUtils;\n+import org.odk.collect.android.utilities.MediaManager;\n+\n+import java.util.List;\n+\n+import static android.app.Activity.RESULT_OK;\n+\n+public class QuitFormDialogFragment extends DialogFragment {\n+\n+    private FormSaveViewModel viewModel;\n+    private final ViewModelProvider.Factory viewModelFactory = new FormSaveViewModel.Factory();\n+\n+    private ListView listView;\n+    private String title;\n+\n+    @Override\n+    public void onAttach(@NonNull Context context) {\n+        super.onAttach(context);\n+        viewModel = ViewModelProviders.of(requireActivity(), viewModelFactory).get(FormSaveViewModel.class);\n+\n+        title = viewModel.getFormName();", "originalCommit": "3633063cfc2538ad9834febb67887de985cb0949", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NDg4Mw==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r412794883", "bodyText": "You shouldn't need this. Good to look at the docs and have a think about it but it's best to avoid.", "author": "seadowg", "createdAt": "2020-04-22T08:49:06Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/QuitFormDialogFragment.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.widget.ListView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.lifecycle.ViewModelProvider;\n+import androidx.lifecycle.ViewModelProviders;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.adapters.IconMenuListAdapter;\n+import org.odk.collect.android.adapters.model.IconMenuItem;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.dao.helpers.InstancesDaoHelper;\n+import org.odk.collect.android.external.ExternalDataManager;\n+import org.odk.collect.android.formentry.audit.AuditEvent;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.preferences.AdminKeys;\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+import org.odk.collect.android.utilities.DialogUtils;\n+import org.odk.collect.android.utilities.MediaManager;\n+\n+import java.util.List;\n+\n+import static android.app.Activity.RESULT_OK;\n+\n+public class QuitFormDialogFragment extends DialogFragment {\n+\n+    private FormSaveViewModel viewModel;\n+    private final ViewModelProvider.Factory viewModelFactory = new FormSaveViewModel.Factory();\n+\n+    private ListView listView;\n+    private String title;\n+\n+    @Override\n+    public void onAttach(@NonNull Context context) {\n+        super.onAttach(context);\n+        viewModel = ViewModelProviders.of(requireActivity(), viewModelFactory).get(FormSaveViewModel.class);\n+\n+        title = viewModel.getFormName();\n+        if (title == null) {\n+            title = context.getString(R.string.no_form_loaded);\n+        }\n+\n+        List<IconMenuItem> items;\n+        if ((boolean) AdminSharedPreferences.getInstance().get(AdminKeys.KEY_SAVE_MID)) {\n+            items = ImmutableList.of(new IconMenuItem(R.drawable.ic_save, R.string.keep_changes),\n+                    new IconMenuItem(R.drawable.ic_delete, R.string.do_not_save));\n+        } else {\n+            items = ImmutableList.of(new IconMenuItem(R.drawable.ic_delete, R.string.do_not_save));\n+        }\n+\n+        listView = DialogUtils.createActionListView(context);\n+\n+        final IconMenuListAdapter adapter = new IconMenuListAdapter(context, items);\n+        listView.setAdapter(adapter);\n+        listView.setOnItemClickListener((parent, view, position, id) -> {\n+            IconMenuItem item = (IconMenuItem) adapter.getItem(position);\n+\n+            if (item.getTextResId() == R.string.keep_changes) {\n+                viewModel.saveForm(getActivity().getIntent().getData(), InstancesDaoHelper.isInstanceComplete(false),\n+                        null, true);\n+\n+            } else {\n+                ExternalDataManager manager = Collect.getInstance().getExternalDataManager();\n+                if (manager != null) {\n+                    manager.close();\n+                }\n+\n+                if (viewModel.getAuditEventLogger() != null) {\n+                    viewModel.getAuditEventLogger().logEvent(AuditEvent.AuditEventType.FORM_EXIT, true, System.currentTimeMillis());\n+                }\n+\n+                viewModel.removeTempInstance();\n+                MediaManager.INSTANCE.revertChanges();\n+\n+                String action = getActivity().getIntent().getAction();\n+                if (Intent.ACTION_PICK.equals(action) || Intent.ACTION_EDIT.equals(action)) {\n+                    // caller is waiting on a picked form\n+                    Uri uri = InstancesDaoHelper.getLastInstanceUri(viewModel.getAbsoluteInstancePath());\n+                    if (uri != null) {\n+                        getActivity().setResult(RESULT_OK, new Intent().setData(uri));\n+                    }\n+                }\n+                getActivity().finish();\n+            }\n+\n+            if (getDialog() != null) {\n+                getDialog().dismiss();\n+            }\n+        });\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\n+        super.onCreateDialog(savedInstanceState);\n+        setRetainInstance(true);", "originalCommit": "3633063cfc2538ad9834febb67887de985cb0949", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkwMTE1MQ==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r412901151", "bodyText": "Thanks @seadowg for directing to the docs. I was thinking of using it and then dismissing the dialog in onDestroy, so as to confirm that the dialog is destroyed when the fragment is finally detached, and not on just orientation change. But I found that it is deprecated now, so I think it is better not to use it and rely more on ViewModel.", "author": "SaumiaSinghal", "createdAt": "2020-04-22T11:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NDg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NTEyNA==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r412795124", "bodyText": "What is this for?", "author": "seadowg", "createdAt": "2020-04-22T08:49:23Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/QuitFormDialogFragment.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.widget.ListView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.lifecycle.ViewModelProvider;\n+import androidx.lifecycle.ViewModelProviders;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.adapters.IconMenuListAdapter;\n+import org.odk.collect.android.adapters.model.IconMenuItem;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.dao.helpers.InstancesDaoHelper;\n+import org.odk.collect.android.external.ExternalDataManager;\n+import org.odk.collect.android.formentry.audit.AuditEvent;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.preferences.AdminKeys;\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+import org.odk.collect.android.utilities.DialogUtils;\n+import org.odk.collect.android.utilities.MediaManager;\n+\n+import java.util.List;\n+\n+import static android.app.Activity.RESULT_OK;\n+\n+public class QuitFormDialogFragment extends DialogFragment {\n+\n+    private FormSaveViewModel viewModel;\n+    private final ViewModelProvider.Factory viewModelFactory = new FormSaveViewModel.Factory();\n+\n+    private ListView listView;\n+    private String title;\n+\n+    @Override\n+    public void onAttach(@NonNull Context context) {\n+        super.onAttach(context);\n+        viewModel = ViewModelProviders.of(requireActivity(), viewModelFactory).get(FormSaveViewModel.class);\n+\n+        title = viewModel.getFormName();\n+        if (title == null) {\n+            title = context.getString(R.string.no_form_loaded);\n+        }\n+\n+        List<IconMenuItem> items;\n+        if ((boolean) AdminSharedPreferences.getInstance().get(AdminKeys.KEY_SAVE_MID)) {\n+            items = ImmutableList.of(new IconMenuItem(R.drawable.ic_save, R.string.keep_changes),\n+                    new IconMenuItem(R.drawable.ic_delete, R.string.do_not_save));\n+        } else {\n+            items = ImmutableList.of(new IconMenuItem(R.drawable.ic_delete, R.string.do_not_save));\n+        }\n+\n+        listView = DialogUtils.createActionListView(context);\n+\n+        final IconMenuListAdapter adapter = new IconMenuListAdapter(context, items);\n+        listView.setAdapter(adapter);\n+        listView.setOnItemClickListener((parent, view, position, id) -> {\n+            IconMenuItem item = (IconMenuItem) adapter.getItem(position);\n+\n+            if (item.getTextResId() == R.string.keep_changes) {\n+                viewModel.saveForm(getActivity().getIntent().getData(), InstancesDaoHelper.isInstanceComplete(false),\n+                        null, true);\n+\n+            } else {\n+                ExternalDataManager manager = Collect.getInstance().getExternalDataManager();\n+                if (manager != null) {\n+                    manager.close();\n+                }\n+\n+                if (viewModel.getAuditEventLogger() != null) {\n+                    viewModel.getAuditEventLogger().logEvent(AuditEvent.AuditEventType.FORM_EXIT, true, System.currentTimeMillis());\n+                }\n+\n+                viewModel.removeTempInstance();\n+                MediaManager.INSTANCE.revertChanges();\n+\n+                String action = getActivity().getIntent().getAction();\n+                if (Intent.ACTION_PICK.equals(action) || Intent.ACTION_EDIT.equals(action)) {\n+                    // caller is waiting on a picked form\n+                    Uri uri = InstancesDaoHelper.getLastInstanceUri(viewModel.getAbsoluteInstancePath());\n+                    if (uri != null) {\n+                        getActivity().setResult(RESULT_OK, new Intent().setData(uri));\n+                    }\n+                }\n+                getActivity().finish();\n+            }\n+\n+            if (getDialog() != null) {\n+                getDialog().dismiss();\n+            }\n+        });\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\n+        super.onCreateDialog(savedInstanceState);\n+        setRetainInstance(true);\n+        AlertDialog alertDialog = (AlertDialog) getDialog();\n+\n+        if (alertDialog == null) {\n+            alertDialog = new AlertDialog.Builder(getActivity())\n+                    .setTitle(\n+                            getActivity().getString(R.string.quit_application, title))\n+                    .setPositiveButton(getActivity().getString(R.string.do_not_exit), (dialog, id) -> {\n+                        dialog.cancel();\n+                        dismiss();\n+                    })\n+                    .setView(listView)\n+                    .create();\n+        }\n+\n+        return alertDialog;\n+    }\n+\n+    @Override\n+    public void onDestroyView() {\n+        AlertDialog dialog = (AlertDialog) getDialog();", "originalCommit": "3633063cfc2538ad9834febb67887de985cb0949", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "16b6665c6d980cb7b8a24f8dcd104908383ce4db", "url": "https://github.com/getodk/collect/commit/16b6665c6d980cb7b8a24f8dcd104908383ce4db", "message": "updated tests", "committedDate": "2020-04-23T04:14:29Z", "type": "commit"}, {"oid": "16b6665c6d980cb7b8a24f8dcd104908383ce4db", "url": "https://github.com/getodk/collect/commit/16b6665c6d980cb7b8a24f8dcd104908383ce4db", "message": "updated tests", "committedDate": "2020-04-23T04:14:29Z", "type": "forcePushed"}, {"oid": "c93391d33ebdf7560b31ab232f81c6956c322003", "url": "https://github.com/getodk/collect/commit/c93391d33ebdf7560b31ab232f81c6956c322003", "message": "resolved conflicts", "committedDate": "2020-04-23T04:49:58Z", "type": "commit"}, {"oid": "a46ee9346441b6212d858b1062c8c2225852f7c4", "url": "https://github.com/getodk/collect/commit/a46ee9346441b6212d858b1062c8c2225852f7c4", "message": "null check for dialog", "committedDate": "2020-04-23T05:58:34Z", "type": "commit"}, {"oid": "2688439e3ffee6c72ecaae2b82382d35cc70d067", "url": "https://github.com/getodk/collect/commit/2688439e3ffee6c72ecaae2b82382d35cc70d067", "message": "updatedTests", "committedDate": "2020-04-26T21:23:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNDA5MA==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r417314090", "bodyText": "Is this needed?", "author": "seadowg", "createdAt": "2020-04-29T13:29:18Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/QuitFormDialogFragment.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.widget.ListView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.adapters.IconMenuListAdapter;\n+import org.odk.collect.android.adapters.model.IconMenuItem;\n+import org.odk.collect.android.analytics.Analytics;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.dao.helpers.InstancesDaoHelper;\n+import org.odk.collect.android.external.ExternalDataManager;\n+import org.odk.collect.android.formentry.audit.AuditEvent;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.injection.DaggerUtils;\n+import org.odk.collect.android.preferences.AdminKeys;\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+import org.odk.collect.android.utilities.DialogUtils;\n+import org.odk.collect.android.utilities.MediaManager;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import static android.app.Activity.RESULT_OK;\n+\n+public class QuitFormDialogFragment extends DialogFragment {\n+\n+    @Inject\n+    Analytics analytics;\n+\n+    @VisibleForTesting private FormSaveViewModel viewModel;", "originalCommit": "2688439e3ffee6c72ecaae2b82382d35cc70d067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyMjE2MA==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r419122160", "bodyText": "Oh sorry I forgot that there. Previously I was thinking of some other approach to use viewModel in the tests.", "author": "SaumiaSinghal", "createdAt": "2020-05-03T15:53:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNDA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNDY4Nw==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r417314687", "bodyText": "I think this will always be true right?", "author": "seadowg", "createdAt": "2020-04-29T13:30:07Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/QuitFormDialogFragment.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.widget.ListView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.adapters.IconMenuListAdapter;\n+import org.odk.collect.android.adapters.model.IconMenuItem;\n+import org.odk.collect.android.analytics.Analytics;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.dao.helpers.InstancesDaoHelper;\n+import org.odk.collect.android.external.ExternalDataManager;\n+import org.odk.collect.android.formentry.audit.AuditEvent;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.injection.DaggerUtils;\n+import org.odk.collect.android.preferences.AdminKeys;\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+import org.odk.collect.android.utilities.DialogUtils;\n+import org.odk.collect.android.utilities.MediaManager;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import static android.app.Activity.RESULT_OK;\n+\n+public class QuitFormDialogFragment extends DialogFragment {\n+\n+    @Inject\n+    Analytics analytics;\n+\n+    @VisibleForTesting private FormSaveViewModel viewModel;\n+\n+    @Override\n+    public void onAttach(@NonNull Context context) {\n+        super.onAttach(context);\n+        DaggerUtils.getComponent(context).inject(this);\n+\n+        viewModel = new ViewModelProvider(requireActivity(), new FormSaveViewModel.Factory(analytics))\n+                .get(FormSaveViewModel.class);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\n+        super.onCreateDialog(savedInstanceState);\n+        AlertDialog alertDialog = (AlertDialog) getDialog();\n+\n+        if (alertDialog == null) {", "originalCommit": "2688439e3ffee6c72ecaae2b82382d35cc70d067", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNjgxMA==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r417316810", "bodyText": "I'm confused by your use of getTitle and setTitle here. Could you explain why you chose to create a public getTitle and setTitle?", "author": "seadowg", "createdAt": "2020-04-29T13:33:00Z", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.content.DialogInterface;\n+\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.odk.collect.android.support.RobolectricHelpers.mockViewModelProvider;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class QuitFormDialogFragmentTest {\n+\n+    private FragmentActivity activity;\n+    private FragmentManager fragmentManager;\n+    private QuitFormDialogFragment dialogFragment;\n+\n+    private FormSaveViewModel viewModel;\n+\n+    @Before\n+    public void setup() {\n+        activity = RobolectricHelpers.createThemedActivity(FragmentActivity.class);\n+        fragmentManager = activity.getSupportFragmentManager();\n+        dialogFragment = new QuitFormDialogFragment();\n+\n+        viewModel = mockViewModelProvider(activity, FormSaveViewModel.class).get(FormSaveViewModel.class);\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectView() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) dialogFragment.getDialog();\n+\n+        assertNotNull(dialog);\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getVisibility(), equalTo(GONE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getText(),\n+                equalTo(activity.getString(R.string.do_not_exit)));\n+\n+        String title = dialogFragment.getTitle(viewModel);", "originalCommit": "2688439e3ffee6c72ecaae2b82382d35cc70d067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyMjcxMg==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r419122712", "bodyText": "I created the public methods so that I can use them in the QuitFormDialogFragmentTest.", "author": "SaumiaSinghal", "createdAt": "2020-05-03T15:57:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNjgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4NDY1NQ==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r419284655", "bodyText": "Right. It's generally best for us to avoid creating methods just for tests. Our tests should act like \"real\" clients of whatever code they are testing and so shouldn't have access to methods or fields we wouldn't want them to have access to. Feeling like you need to make a method public for a test can be a nice hint that something is probably off about the design of the object you're testing or that you're testing the wrong thing!\nHere you shouldn't have to do anything but show the DialogFragment to have the title set right? And the test should be able to ascertain the title without asking the DialogFragment as it has control of the mock FormSaveViewModel so it can be set up to have a title you choose and then you can test that title is shown on the dialog.", "author": "seadowg", "createdAt": "2020-05-04T08:33:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNjgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyMDA4NA==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r417320084", "bodyText": "I don't think this test does what you think it does. On a rotation the Acitivity will be recreated (which should cause the DialogFragment to be recreated). The reason to write a test around recreation would be to check that state of the fragment is persisted (the title for example). The ProgressDialogFragmentTest has examples of this kind of test.", "author": "seadowg", "createdAt": "2020-04-29T13:37:25Z", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.content.DialogInterface;\n+\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.odk.collect.android.support.RobolectricHelpers.mockViewModelProvider;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class QuitFormDialogFragmentTest {\n+\n+    private FragmentActivity activity;\n+    private FragmentManager fragmentManager;\n+    private QuitFormDialogFragment dialogFragment;\n+\n+    private FormSaveViewModel viewModel;\n+\n+    @Before\n+    public void setup() {\n+        activity = RobolectricHelpers.createThemedActivity(FragmentActivity.class);\n+        fragmentManager = activity.getSupportFragmentManager();\n+        dialogFragment = new QuitFormDialogFragment();\n+\n+        viewModel = mockViewModelProvider(activity, FormSaveViewModel.class).get(FormSaveViewModel.class);\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectView() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) dialogFragment.getDialog();\n+\n+        assertNotNull(dialog);\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getVisibility(), equalTo(GONE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getText(),\n+                equalTo(activity.getString(R.string.do_not_exit)));\n+\n+        String title = dialogFragment.getTitle(viewModel);\n+        dialogFragment.setTitle();\n+        assertThat(shadowOf(dialogFragment.getDialog()).getTitle(), equalTo(title));\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+        assertThat(shadowOf(dialogFragment.getDialog()).isCancelable(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void clickingCancel_shouldDismissTheDialog() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+        assertTrue(dialog.isShowing());\n+\n+        dialog.getButton(DialogInterface.BUTTON_POSITIVE).performClick();\n+        assertFalse(dialog.isShowing());\n+        assertTrue(shadowOf(dialog).hasBeenDismissed());\n+    }\n+\n+    @Test\n+    public void shouldRetainDialogOnOrientationChange() {", "originalCommit": "2688439e3ffee6c72ecaae2b82382d35cc70d067", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyMjU3Nw==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r419122577", "bodyText": "Oh alright. I'll make changes", "author": "SaumiaSinghal", "createdAt": "2020-05-03T15:56:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyMDA4NA=="}], "type": "inlineReview"}, {"oid": "36949d8fadbac5c920bae5c7c5783e70152a2370", "url": "https://github.com/getodk/collect/commit/36949d8fadbac5c920bae5c7c5783e70152a2370", "message": "code refactor", "committedDate": "2020-05-03T16:08:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4Njg5MA==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r419286890", "bodyText": "Given that the only \"state\" in this fragment comes from the ViewModel does it make sense to have this test? There isn't any mutable state that needs to be carried from one instance of the fragment to the other as far as I can see.", "author": "seadowg", "createdAt": "2020-05-04T08:37:54Z", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.content.DialogInterface;\n+\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.odk.collect.android.support.RobolectricHelpers.mockViewModelProvider;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class QuitFormDialogFragmentTest {\n+\n+    private FragmentActivity activity;\n+    private FragmentManager fragmentManager;\n+    private QuitFormDialogFragment dialogFragment;\n+\n+    private FormSaveViewModel viewModel;\n+\n+    @Before\n+    public void setup() {\n+        activity = RobolectricHelpers.createThemedActivity(FragmentActivity.class);\n+        fragmentManager = activity.getSupportFragmentManager();\n+        dialogFragment = new QuitFormDialogFragment();\n+\n+        viewModel = mockViewModelProvider(activity, FormSaveViewModel.class).get(FormSaveViewModel.class);\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectView() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) dialogFragment.getDialog();\n+\n+        assertNotNull(dialog);\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getVisibility(), equalTo(GONE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getText(),\n+                equalTo(activity.getString(R.string.do_not_exit)));\n+\n+        String title = dialogFragment.getTitle(viewModel);\n+        dialogFragment.setTitle();\n+        assertThat(shadowOf(dialogFragment.getDialog()).getTitle(), equalTo(title));\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+        assertThat(shadowOf(dialogFragment.getDialog()).isCancelable(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void clickingCancel_shouldDismissTheDialog() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+        assertTrue(dialog.isShowing());\n+\n+        dialog.getButton(DialogInterface.BUTTON_POSITIVE).performClick();\n+        assertFalse(dialog.isShowing());\n+        assertTrue(shadowOf(dialog).hasBeenDismissed());\n+    }\n+\n+    @Test\n+    public void restoringFragment_retainsTitle() {", "originalCommit": "36949d8fadbac5c920bae5c7c5783e70152a2370", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzMjM4MA==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r419432380", "bodyText": "Yes, right @seadowg. Checking it just once would be fine.", "author": "SaumiaSinghal", "createdAt": "2020-05-04T13:24:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4Njg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0MTc3MQ==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r419441771", "bodyText": "Also I think the part that we are checking that whether the dialog fragment shows the correct title or not can be covered with the test of the ViewModel (whether it returns the correct form name)?", "author": "SaumiaSinghal", "createdAt": "2020-05-04T13:37:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4Njg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1NDk1OQ==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r419454959", "bodyText": "Yeah as above we just need that test I think!", "author": "seadowg", "createdAt": "2020-05-04T13:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4Njg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2OTc4OA==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r419469788", "bodyText": "Then, should we even remove the test to check the title of the dialog once, as it can be covered in the tests for the ViewModel?", "author": "SaumiaSinghal", "createdAt": "2020-05-04T14:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4Njg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyOTk1Nw==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r419529957", "bodyText": "Yeah I think that make sense", "author": "seadowg", "createdAt": "2020-05-04T15:38:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4Njg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwMzkyNw==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r420003927", "bodyText": "Ach I'm so sorry I misinterpreted your question! My bad for skimming.\nTry removing line 60 from QuitFormDialogFragment and then running the tests to see if you have coverage of the title being displayed in the dialog. I don't think you do now you've removed that test. The ViewModel tests check that the ViewModel.getFormLabel() does the right thing but here you're testing the dialog, not the ViewModel.", "author": "seadowg", "createdAt": "2020-05-05T10:17:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4Njg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NzA5Nw==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r420487097", "bodyText": "Yes sorry @seadowg! I was a little confused too.", "author": "SaumiaSinghal", "createdAt": "2020-05-06T00:37:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4Njg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4NzY1MQ==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r419287651", "bodyText": "Do you still feel we need this test? Happy to talk it over some more!", "author": "seadowg", "createdAt": "2020-05-04T08:39:19Z", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.content.DialogInterface;\n+\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.odk.collect.android.support.RobolectricHelpers.mockViewModelProvider;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class QuitFormDialogFragmentTest {\n+\n+    private FragmentActivity activity;\n+    private FragmentManager fragmentManager;\n+    private QuitFormDialogFragment dialogFragment;\n+\n+    private FormSaveViewModel viewModel;\n+\n+    @Before\n+    public void setup() {\n+        activity = RobolectricHelpers.createThemedActivity(FragmentActivity.class);\n+        fragmentManager = activity.getSupportFragmentManager();\n+        dialogFragment = new QuitFormDialogFragment();\n+\n+        viewModel = mockViewModelProvider(activity, FormSaveViewModel.class).get(FormSaveViewModel.class);\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectView() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) dialogFragment.getDialog();\n+\n+        assertNotNull(dialog);\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getVisibility(), equalTo(GONE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getText(),\n+                equalTo(activity.getString(R.string.do_not_exit)));\n+\n+        String title = dialogFragment.getTitle(viewModel);\n+        dialogFragment.setTitle();\n+        assertThat(shadowOf(dialogFragment.getDialog()).getTitle(), equalTo(title));\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+        assertThat(shadowOf(dialogFragment.getDialog()).isCancelable(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void clickingCancel_shouldDismissTheDialog() {", "originalCommit": "36949d8fadbac5c920bae5c7c5783e70152a2370", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ4ODM4OQ==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r419488389", "bodyText": "It is something related to the dialog interface. We have, here the positive button set to be the cancel button. So, to check whether the correct button is set as the cancel button and clicking it does as it says (to dismiss the dialog).", "author": "SaumiaSinghal", "createdAt": "2020-05-04T14:41:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4NzY1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUyOTA0Mw==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r419529043", "bodyText": "Ah of course sorry! My mistake. Good test \ud83d\udc4d. Let's maybe make it the NEGATIVE_BUTTON instead as that's usually the \"Cancel\" button.", "author": "seadowg", "createdAt": "2020-05-04T15:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4NzY1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1MDEzMg==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r419550132", "bodyText": "Yes, that seems more accurate.", "author": "SaumiaSinghal", "createdAt": "2020-05-04T16:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4NzY1MQ=="}], "type": "inlineReview"}, {"oid": "c4e53757a4bdd18b5c175181b4a29d289f5fa6f0", "url": "https://github.com/getodk/collect/commit/c4e53757a4bdd18b5c175181b4a29d289f5fa6f0", "message": "updated tests", "committedDate": "2020-05-04T16:25:29Z", "type": "commit"}, {"oid": "a835555a0f7f3fbbaa5e7d76ead58f854c08b2a9", "url": "https://github.com/getodk/collect/commit/a835555a0f7f3fbbaa5e7d76ead58f854c08b2a9", "message": "unit test refactoring", "committedDate": "2020-05-06T00:35:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYzNDAzNw==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r420634037", "bodyText": "The problem with this is that it's unclear what the test wants the title to be. For \"unit\" tests like this you want you test to be as in charge of the dependencies as possible. Given the ViewModel is a mock you can set the value that will be returned from getFormName like so:\nwhen(formSaveViewModel.getFormName()).thenReturn(\"blah\");\n\nThis means you could write a test for both the null and non null case. Here I I'd imagine you're only testin the null case as the mock will return null from getFormName().", "author": "seadowg", "createdAt": "2020-05-06T08:45:32Z", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.content.DialogInterface;\n+import android.widget.TextView;\n+\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.odk.collect.android.support.RobolectricHelpers.mockViewModelProvider;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class QuitFormDialogFragmentTest {\n+\n+    private FragmentActivity activity;\n+    private FragmentManager fragmentManager;\n+    private QuitFormDialogFragment dialogFragment;\n+    private FormSaveViewModel formSaveViewModel;\n+\n+    @Before\n+    public void setup() {\n+        activity = RobolectricHelpers.createThemedActivity(FragmentActivity.class);\n+        fragmentManager = activity.getSupportFragmentManager();\n+        dialogFragment = new QuitFormDialogFragment();\n+\n+        formSaveViewModel = mockViewModelProvider(activity, FormSaveViewModel.class).get(FormSaveViewModel.class);\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectButtons() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+\n+        assertNotNull(dialog);\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getVisibility(), equalTo(GONE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getText(),\n+                equalTo(activity.getString(R.string.do_not_exit)));\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectTitle() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+        String title =  formSaveViewModel.getFormName() == null ? activity.getString(R.string.no_form_loaded)", "originalCommit": "a835555a0f7f3fbbaa5e7d76ead58f854c08b2a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyMjQ4OA==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r420822488", "bodyText": "Oh alright yes. We should test both the cases", "author": "SaumiaSinghal", "createdAt": "2020-05-06T14:10:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYzNDAzNw=="}], "type": "inlineReview"}, {"oid": "26e40d4146e2bec8af39f33b8e437ca18b31d9ca", "url": "https://github.com/getodk/collect/commit/26e40d4146e2bec8af39f33b8e437ca18b31d9ca", "message": "added unit test to check correct dialog title", "committedDate": "2020-05-06T14:18:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMzNzMyMg==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r421337322", "bodyText": "Yeah I like these tests divided up like this a lot! \ud83d\udc4d", "author": "seadowg", "createdAt": "2020-05-07T08:40:43Z", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -66,6 +67,21 @@ public void shouldShowCorrectTitle() {\n         assertThat(dialogTitle.getText().toString(), equalTo(title));\n     }\n \n+\n+    @Test\n+    public void shouldShowCorrectTitle_whenFormIsLoaded() {", "originalCommit": "26e40d4146e2bec8af39f33b8e437ca18b31d9ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMzNzkwNA==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r421337904", "bodyText": "You don't need this logic in either test right? The test knows what value the form name will be.", "author": "seadowg", "createdAt": "2020-05-07T08:41:35Z", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -66,6 +67,21 @@ public void shouldShowCorrectTitle() {\n         assertThat(dialogTitle.getText().toString(), equalTo(title));\n     }\n \n+\n+    @Test\n+    public void shouldShowCorrectTitle_whenFormIsLoaded() {\n+        when(formSaveViewModel.getFormName()).thenReturn(\"blah\");\n+\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+\n+        String title =  formSaveViewModel.getFormName() == null ? activity.getString(R.string.no_form_loaded)", "originalCommit": "26e40d4146e2bec8af39f33b8e437ca18b31d9ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM3MTI4NA==", "url": "https://github.com/getodk/collect/pull/3782#discussion_r421371284", "bodyText": "Ah sorry! This piece of code is not required.", "author": "SaumiaSinghal", "createdAt": "2020-05-07T09:34:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMzNzkwNA=="}], "type": "inlineReview"}, {"oid": "878213889b56b0dbe4395bf2e70d8eb50fbd80fc", "url": "https://github.com/getodk/collect/commit/878213889b56b0dbe4395bf2e70d8eb50fbd80fc", "message": "unit tests refactor", "committedDate": "2020-05-07T09:36:47Z", "type": "commit"}]}