{"pr_number": 3933, "pr_title": "Fix imports from old QR codes", "pr_createdAt": "2020-06-22T11:50:33Z", "pr_url": "https://github.com/getodk/collect/pull/3933", "timeline": [{"oid": "fa0e23389da43184776d2bee57238a6f29c5e5b3", "url": "https://github.com/getodk/collect/commit/fa0e23389da43184776d2bee57238a6f29c5e5b3", "message": "Pull JavaRosa initialization out of Collect object", "committedDate": "2020-06-29T08:43:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3NzU3NQ==", "url": "https://github.com/getodk/collect/pull/3933#discussion_r447877575", "bodyText": "I believe that Collect implicitly required both general and admin previously so good to keep consistent. I think we should follow up and make it only required to have one, not necessarily both to avoid having an empty set of settings. If that sounds reasonable I can file a low-priority issue (and corresponding doc update).", "author": "lognaturel", "createdAt": "2020-06-30T18:00:09Z", "path": "collect_app/src/test/java/org/odk/collect/android/configure/StructureAndTypeSettingsValidatorTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.odk.collect.android.configure;\n+\n+import org.json.JSONObject;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@SuppressWarnings(\"PMD.DoubleBraceInitialization\")\n+public class StructureAndTypeSettingsValidatorTest {\n+\n+    private final Map<String, Object> generalDefaults = new HashMap<String, Object>() {{\n+        put(\"key1\", true);\n+    }};\n+\n+    private final Map<String, Object> adminDefaults = new HashMap<String, Object>() {{\n+        put(\"key1\", \"default\");\n+    }};\n+\n+    private final StructureAndTypeSettingsValidator validator = new StructureAndTypeSettingsValidator(generalDefaults, adminDefaults);\n+\n+    @Test\n+    public void forEmptySettings_returnsTrue() throws Exception {\n+        assertThat(validator.isValid(emptySettings()), is(true));\n+    }\n+\n+    @Test\n+    public void forNonJSON_returnsFalse() {\n+        assertThat(validator.isValid(\"blah\"), is(false));\n+    }\n+\n+    @Test\n+    public void withoutGeneralObject_returnsFalse() throws Exception {\n+        JSONObject json = emptySettingsObject();\n+        json.remove(\"general\"); // Remove mutates and returns removed item :(\n+\n+        assertThat(validator.isValid(json.toString()), is(false));", "originalCommit": "58d4ea286a74c38b9e271864b4709480a791f27e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MTk0NQ==", "url": "https://github.com/getodk/collect/pull/3933#discussion_r448191945", "bodyText": "Given they can just be empty it feels ok to require both? Requiring both does simplify logic on our side as well.", "author": "seadowg", "createdAt": "2020-07-01T08:10:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3NzU3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3ODg2NA==", "url": "https://github.com/getodk/collect/pull/3933#discussion_r448678864", "bodyText": "Fair enough!", "author": "lognaturel", "createdAt": "2020-07-02T00:11:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3NzU3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MDY3NQ==", "url": "https://github.com/getodk/collect/pull/3933#discussion_r447880675", "bodyText": "Shouldn't this logic be a responsibility of the PropertyManager? Then maybe you don't need this class but can implement the interface inline where needed.", "author": "lognaturel", "createdAt": "2020-06-30T18:05:28Z", "path": "collect_app/src/main/java/org/odk/collect/android/javarosawrapper/PropertyManagerJavaRosaInitializer.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.odk.collect.android.javarosawrapper;\n+\n+import android.app.Application;\n+\n+import org.odk.collect.android.logic.PropertyManager;\n+import org.odk.collect.android.preferences.GeneralSharedPreferences;\n+\n+import static org.odk.collect.android.logic.PropertyManager.PROPMGR_USERNAME;\n+import static org.odk.collect.android.logic.PropertyManager.SCHEME_USERNAME;\n+import static org.odk.collect.android.preferences.GeneralKeys.KEY_USERNAME;\n+\n+public class PropertyManagerJavaRosaInitializer implements JavaRosaInitializer {\n+\n+    private final Application application;\n+\n+    public PropertyManagerJavaRosaInitializer(Application application) {\n+        this.application = application;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        PropertyManager mgr = new PropertyManager(application);\n+\n+        // Use the server username by default if the metadata username is not defined", "originalCommit": "fa0e23389da43184776d2bee57238a6f29c5e5b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5NDQyMQ==", "url": "https://github.com/getodk/collect/pull/3933#discussion_r448194421", "bodyText": "Huh yeah I'll play with that.", "author": "seadowg", "createdAt": "2020-07-01T08:14:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MDY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NjUzMA==", "url": "https://github.com/getodk/collect/pull/3933#discussion_r448276530", "bodyText": "Ended up moving some stuff around so we can just call reload on PropertyManager and the actual JavaRosa initialization can happen in ApplicationInitializer.", "author": "seadowg", "createdAt": "2020-07-01T10:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MDY3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MTM2Mg==", "url": "https://github.com/getodk/collect/pull/3933#discussion_r447891362", "bodyText": "While here, would you consider changing all this to a try-with-resources so it's easier to read and there isn't the Timber.e call?", "author": "lognaturel", "createdAt": "2020-06-30T18:23:52Z", "path": "collect_app/src/main/java/org/odk/collect/android/configure/LegacySettingsFileReader.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.odk.collect.android.configure;\n+\n+import androidx.core.util.Pair;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Map;\n+\n+import timber.log.Timber;\n+\n+public class LegacySettingsFileReader {\n+\n+    private final StoragePathProvider storagePathProvider;\n+\n+    public LegacySettingsFileReader(StoragePathProvider storagePathProvider) {\n+        this.storagePathProvider = storagePathProvider;\n+    }\n+\n+    public String toJSON() throws CorruptSettingsFileException {\n+        File f = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings\");\n+        File j = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings.json\");\n+\n+        try {\n+            if (j.exists()) {\n+                String settings = readJSONFile(j);\n+                f.delete();\n+                return settings;\n+            } else if (f.exists()) {\n+                Pair<Map<String, Object>, Map<String, Object>> settings = readSettingsFile(f);\n+                j.delete();\n+\n+                return new JSONObject()\n+                        .put(\"general\", settings.first)\n+                        .put(\"admin\", settings.second)\n+                        .toString();\n+            } else {\n+                return null;\n+            }\n+        } catch (IOException | JSONException | ClassNotFoundException e) {\n+            throw new CorruptSettingsFileException();\n+        }\n+    }\n+\n+    private String readJSONFile(File src) throws IOException {\n+        BufferedReader br = null;\n+\n+        try {\n+            String line = null;\n+            StringBuilder builder = new StringBuilder();\n+            br = new BufferedReader(new FileReader(src));\n+\n+            while ((line = br.readLine()) != null) {\n+                builder.append(line);\n+            }\n+\n+            return builder.toString();\n+        } finally {\n+            try {\n+                if (br != null) {\n+                    br.close();\n+                }\n+            } catch (IOException ex) {\n+                Timber.e(ex, \"Exception thrown while closing an input stream due to: %s \", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private Pair<Map<String, Object>, Map<String, Object>> readSettingsFile(File src) throws IOException, ClassNotFoundException {\n+        // this should probably be in a thread if it ever gets big\n+        ObjectInputStream input = null;\n+        try {\n+            input = new ObjectInputStream(new FileInputStream(src));\n+\n+            // first object is preferences\n+            Map<String, Object> generalEntries = (Map<String, Object>) input.readObject();\n+            Map<String, Object> adminEntries = (Map<String, Object>) input.readObject();\n+\n+            return new Pair<>(generalEntries, adminEntries);\n+        } finally {\n+            try {\n+                if (input != null) {\n+                    input.close();\n+                }\n+            } catch (IOException ex) {\n+                Timber.e(ex, \"Exception thrown while closing an input stream due to: %s \", ex.getMessage());", "originalCommit": "ae71d6d5a6ef7f58db91bf2a054b48ada646d59b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MjA1NQ==", "url": "https://github.com/getodk/collect/pull/3933#discussion_r448192055", "bodyText": "With pleasure.", "author": "seadowg", "createdAt": "2020-07-01T08:10:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MTM2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3ODk3NA==", "url": "https://github.com/getodk/collect/pull/3933#discussion_r448678974", "bodyText": "\ud83e\udd1d", "author": "lognaturel", "createdAt": "2020-07-02T00:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MTM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MTQ0NQ==", "url": "https://github.com/getodk/collect/pull/3933#discussion_r447891445", "bodyText": "While here, would you consider changing all this to a try-with-resources so it's easier to read and there isn't the Timber.e call?", "author": "lognaturel", "createdAt": "2020-06-30T18:24:04Z", "path": "collect_app/src/main/java/org/odk/collect/android/configure/LegacySettingsFileReader.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.odk.collect.android.configure;\n+\n+import androidx.core.util.Pair;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Map;\n+\n+import timber.log.Timber;\n+\n+public class LegacySettingsFileReader {\n+\n+    private final StoragePathProvider storagePathProvider;\n+\n+    public LegacySettingsFileReader(StoragePathProvider storagePathProvider) {\n+        this.storagePathProvider = storagePathProvider;\n+    }\n+\n+    public String toJSON() throws CorruptSettingsFileException {\n+        File f = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings\");\n+        File j = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings.json\");\n+\n+        try {\n+            if (j.exists()) {\n+                String settings = readJSONFile(j);\n+                f.delete();\n+                return settings;\n+            } else if (f.exists()) {\n+                Pair<Map<String, Object>, Map<String, Object>> settings = readSettingsFile(f);\n+                j.delete();\n+\n+                return new JSONObject()\n+                        .put(\"general\", settings.first)\n+                        .put(\"admin\", settings.second)\n+                        .toString();\n+            } else {\n+                return null;\n+            }\n+        } catch (IOException | JSONException | ClassNotFoundException e) {\n+            throw new CorruptSettingsFileException();\n+        }\n+    }\n+\n+    private String readJSONFile(File src) throws IOException {\n+        BufferedReader br = null;\n+\n+        try {\n+            String line = null;\n+            StringBuilder builder = new StringBuilder();\n+            br = new BufferedReader(new FileReader(src));\n+\n+            while ((line = br.readLine()) != null) {\n+                builder.append(line);\n+            }\n+\n+            return builder.toString();\n+        } finally {\n+            try {\n+                if (br != null) {\n+                    br.close();\n+                }\n+            } catch (IOException ex) {\n+                Timber.e(ex, \"Exception thrown while closing an input stream due to: %s \", ex.getMessage());", "originalCommit": "ae71d6d5a6ef7f58db91bf2a054b48ada646d59b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MjExNw==", "url": "https://github.com/getodk/collect/pull/3933#discussion_r448192117", "bodyText": "As above.", "author": "seadowg", "createdAt": "2020-07-01T08:10:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MTQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMDE1NQ==", "url": "https://github.com/getodk/collect/pull/3933#discussion_r447910155", "bodyText": "Remove comment that doesn't add much.", "author": "lognaturel", "createdAt": "2020-06-30T18:55:46Z", "path": "collect_app/src/main/java/org/odk/collect/android/configure/LegacySettingsFileReader.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.odk.collect.android.configure;\n+\n+import androidx.core.util.Pair;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Map;\n+\n+import timber.log.Timber;\n+\n+public class LegacySettingsFileReader {\n+\n+    private final StoragePathProvider storagePathProvider;\n+\n+    public LegacySettingsFileReader(StoragePathProvider storagePathProvider) {\n+        this.storagePathProvider = storagePathProvider;\n+    }\n+\n+    public String toJSON() throws CorruptSettingsFileException {\n+        File f = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings\");\n+        File j = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings.json\");\n+\n+        try {\n+            if (j.exists()) {\n+                String settings = readJSONFile(j);\n+                f.delete();\n+                return settings;\n+            } else if (f.exists()) {\n+                Pair<Map<String, Object>, Map<String, Object>> settings = readSettingsFile(f);\n+                j.delete();\n+\n+                return new JSONObject()\n+                        .put(\"general\", settings.first)\n+                        .put(\"admin\", settings.second)\n+                        .toString();\n+            } else {\n+                return null;\n+            }\n+        } catch (IOException | JSONException | ClassNotFoundException e) {\n+            throw new CorruptSettingsFileException();\n+        }\n+    }\n+\n+    private String readJSONFile(File src) throws IOException {\n+        BufferedReader br = null;\n+\n+        try {\n+            String line = null;\n+            StringBuilder builder = new StringBuilder();\n+            br = new BufferedReader(new FileReader(src));\n+\n+            while ((line = br.readLine()) != null) {\n+                builder.append(line);\n+            }\n+\n+            return builder.toString();\n+        } finally {\n+            try {\n+                if (br != null) {\n+                    br.close();\n+                }\n+            } catch (IOException ex) {\n+                Timber.e(ex, \"Exception thrown while closing an input stream due to: %s \", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private Pair<Map<String, Object>, Map<String, Object>> readSettingsFile(File src) throws IOException, ClassNotFoundException {\n+        // this should probably be in a thread if it ever gets big\n+        ObjectInputStream input = null;\n+        try {\n+            input = new ObjectInputStream(new FileInputStream(src));\n+\n+            // first object is preferences", "originalCommit": "ae71d6d5a6ef7f58db91bf2a054b48ada646d59b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5c62ff5593208bc40e08332535e0a2f30bface1b", "url": "https://github.com/getodk/collect/commit/5c62ff5593208bc40e08332535e0a2f30bface1b", "message": "Remove JavaRosaInitializer", "committedDate": "2020-07-01T11:38:21Z", "type": "forcePushed"}, {"oid": "ee41b0da57d8d99b665aec87ee294861aedec70a", "url": "https://github.com/getodk/collect/commit/ee41b0da57d8d99b665aec87ee294861aedec70a", "message": "Remove JavaRosaInitializer", "committedDate": "2020-07-03T06:52:54Z", "type": "forcePushed"}, {"oid": "80060087cd5e2ccb696646e95b6f90fb2eb66c08", "url": "https://github.com/getodk/collect/commit/80060087cd5e2ccb696646e95b6f90fb2eb66c08", "message": "Remove JavaRosaInitializer", "committedDate": "2020-07-13T09:25:21Z", "type": "forcePushed"}, {"oid": "c5f567a18a8688cde3a7df892dce2cf08abc00ec", "url": "https://github.com/getodk/collect/commit/c5f567a18a8688cde3a7df892dce2cf08abc00ec", "message": "Convert legacy file to json before importing", "committedDate": "2020-07-15T09:12:39Z", "type": "commit"}, {"oid": "fea439fc04ddf7b49c7b00f0442d57295253c18f", "url": "https://github.com/getodk/collect/commit/fea439fc04ddf7b49c7b00f0442d57295253c18f", "message": "Make migrators specific to preferences", "committedDate": "2020-07-15T09:16:01Z", "type": "commit"}, {"oid": "b83eceefb58f44affe21e4fc4cefc646eff202ba", "url": "https://github.com/getodk/collect/commit/b83eceefb58f44affe21e4fc4cefc646eff202ba", "message": "Create CollectSettingsImporter for import happy path", "committedDate": "2020-07-15T09:18:03Z", "type": "commit"}, {"oid": "c8bd7aebedd8872ad873e19398d6628e355b0cf7", "url": "https://github.com/getodk/collect/commit/c8bd7aebedd8872ad873e19398d6628e355b0cf7", "message": "Make sure setting imports peforms migrations and loads defaults", "committedDate": "2020-07-15T09:19:47Z", "type": "commit"}, {"oid": "c22bbe998e59023f97c8be0e0dc4d3e8fa74b036", "url": "https://github.com/getodk/collect/commit/c22bbe998e59023f97c8be0e0dc4d3e8fa74b036", "message": "Validate settings json types", "committedDate": "2020-07-15T09:19:49Z", "type": "commit"}, {"oid": "c3c9ff21cfc9826150f2eb70f7f20d6f190ab309", "url": "https://github.com/getodk/collect/commit/c3c9ff21cfc9826150f2eb70f7f20d6f190ab309", "message": "Make sure importing settings clears old settings", "committedDate": "2020-07-15T09:19:49Z", "type": "commit"}, {"oid": "ceeb7d5d3efd0173b556c0146eba9571d5984e49", "url": "https://github.com/getodk/collect/commit/ceeb7d5d3efd0173b556c0146eba9571d5984e49", "message": "Initialize JavaRosa after importing settings", "committedDate": "2020-07-15T09:19:49Z", "type": "commit"}, {"oid": "6441c69f8eb79a4b61e224de270a20e1c57f3dde", "url": "https://github.com/getodk/collect/commit/6441c69f8eb79a4b61e224de270a20e1c57f3dde", "message": "Provide JavaRosaInitializer in Dagger", "committedDate": "2020-07-15T09:19:49Z", "type": "commit"}, {"oid": "9fe3b28f3b306b9fd57cf57a1b2c44ad4ecd5d13", "url": "https://github.com/getodk/collect/commit/9fe3b28f3b306b9fd57cf57a1b2c44ad4ecd5d13", "message": "Use injected JavaRosaInitializer rather than application singleton", "committedDate": "2020-07-15T09:20:34Z", "type": "commit"}, {"oid": "81e95ab9534434785cde75641d7172e02f895511", "url": "https://github.com/getodk/collect/commit/81e95ab9534434785cde75641d7172e02f895511", "message": "Pull JavaRosa initialization out of Collect object", "committedDate": "2020-07-15T09:20:37Z", "type": "commit"}, {"oid": "41885335122620cf183ec4101016e237a450f215", "url": "https://github.com/getodk/collect/commit/41885335122620cf183ec4101016e237a450f215", "message": "Rename SettingsImporter", "committedDate": "2020-07-15T09:23:51Z", "type": "commit"}, {"oid": "f1202dcf33701c2d37d23bf40bc62524fa134399", "url": "https://github.com/getodk/collect/commit/f1202dcf33701c2d37d23bf40bc62524fa134399", "message": "Use try with resources in LegacySettingsFileReader", "committedDate": "2020-07-15T09:23:54Z", "type": "commit"}, {"oid": "75e45f8531dc477c3ce5c4f7722d2987d505fd82", "url": "https://github.com/getodk/collect/commit/75e45f8531dc477c3ce5c4f7722d2987d505fd82", "message": "Move java rosa initialization out of FormController", "committedDate": "2020-07-15T09:23:54Z", "type": "commit"}, {"oid": "52b8f8f115df9b0abf2683a047758616f398fc52", "url": "https://github.com/getodk/collect/commit/52b8f8f115df9b0abf2683a047758616f398fc52", "message": "Move PropertyManager creation to Dagger", "committedDate": "2020-07-15T09:23:54Z", "type": "commit"}, {"oid": "1be464b5d035714412046a2a1114964765eee4ab", "url": "https://github.com/getodk/collect/commit/1be464b5d035714412046a2a1114964765eee4ab", "message": "Make PropertyManager a singleton", "committedDate": "2020-07-15T09:23:54Z", "type": "commit"}, {"oid": "8179b052be5e035b78e087e7343aa180b7303dfe", "url": "https://github.com/getodk/collect/commit/8179b052be5e035b78e087e7343aa180b7303dfe", "message": "Remove JavaRosaInitializer", "committedDate": "2020-07-15T09:23:54Z", "type": "commit"}, {"oid": "8179b052be5e035b78e087e7343aa180b7303dfe", "url": "https://github.com/getodk/collect/commit/8179b052be5e035b78e087e7343aa180b7303dfe", "message": "Remove JavaRosaInitializer", "committedDate": "2020-07-15T09:23:54Z", "type": "forcePushed"}, {"oid": "282bf7f9a4183e322a5d13750b7d6cdbdf4068c4", "url": "https://github.com/getodk/collect/commit/282bf7f9a4183e322a5d13750b7d6cdbdf4068c4", "message": "Fix imports from older versions with Carto setup", "committedDate": "2020-07-15T17:08:34Z", "type": "commit"}, {"oid": "5dc12ab0a32b58a34dd2846926d783fe429225c0", "url": "https://github.com/getodk/collect/commit/5dc12ab0a32b58a34dd2846926d783fe429225c0", "message": "Fix USGS imports from older versions", "committedDate": "2020-07-15T17:23:56Z", "type": "commit"}, {"oid": "bffe7218367965424d8fafb3868a5893ec9c7caa", "url": "https://github.com/getodk/collect/commit/bffe7218367965424d8fafb3868a5893ec9c7caa", "message": "Fix google maps and mapbox imports from older versions", "committedDate": "2020-07-15T17:55:22Z", "type": "commit"}, {"oid": "15e1896e865017cc196812fd625d6f8c74af4cba", "url": "https://github.com/getodk/collect/commit/15e1896e865017cc196812fd625d6f8c74af4cba", "message": "Fix legacy settings import", "committedDate": "2020-07-16T13:03:43Z", "type": "commit"}, {"oid": "0c8f028c33cfd1d85a1192268d7ce6824236bedd", "url": "https://github.com/getodk/collect/commit/0c8f028c33cfd1d85a1192268d7ce6824236bedd", "message": "Fix admin password imports", "committedDate": "2020-07-20T08:55:27Z", "type": "commit"}]}