{"pr_number": 4270, "pr_title": "Fix building select widgets", "pr_createdAt": "2020-12-04T14:01:35Z", "pr_url": "https://github.com/getodk/collect/pull/4270", "timeline": [{"oid": "e12beeb9180f55a789c7ca8da4c086b39235481c", "url": "https://github.com/getodk/collect/commit/e12beeb9180f55a789c7ca8da4c086b39235481c", "message": "Fixed building select widgets", "committedDate": "2020-12-04T11:51:38Z", "type": "commit"}, {"oid": "afbe45cd6e00c35d8e34a587858591d09f61d1d7", "url": "https://github.com/getodk/collect/commit/afbe45cd6e00c35d8e34a587858591d09f61d1d7", "message": "Added tests", "committedDate": "2020-12-04T14:01:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyNTQ4MQ==", "url": "https://github.com/getodk/collect/pull/4270#discussion_r536325481", "bodyText": "This comment should be removed. The documentation at https://xlsform.org/en/#dynamic-selects-from-pre-loaded-data also states that the search() appearance needs to come last and that can be updated.", "author": "lognaturel", "createdAt": "2020-12-04T19:19:40Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/WidgetFactory.java", "diffHunk": "@@ -205,13 +205,13 @@ public QuestionWidget createWidgetFromPrompt(FormEntryPrompt prompt) {\n                 // This means normal appearances should be put before search().", "originalCommit": "afbe45cd6e00c35d8e34a587858591d09f61d1d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3MzE5Mw==", "url": "https://github.com/getodk/collect/pull/4270#discussion_r556773193", "bodyText": "Done.", "author": "grzesiek2010", "createdAt": "2021-01-13T19:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyNTQ4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyNzQwNg==", "url": "https://github.com/getodk/collect/pull/4270#discussion_r536327406", "bodyText": "This is a pretty bad case with two data sources. External itemsets \"win\" because they're first? Since this test is not about the two data source weirdness, I would strongly suggest removing it and just having either an external select or a search() select.", "author": "lognaturel", "createdAt": "2020-12-04T19:23:31Z", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/WidgetFactoryTest.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.odk.collect.android.widgets;\n+\n+import android.app.Activity;\n+\n+import org.javarosa.core.model.Constants;\n+import org.javarosa.core.model.QuestionDef;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.support.MockFormEntryPromptBuilder;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.odk.collect.android.support.TestScreenContextActivity;\n+import org.odk.collect.android.utilities.ActivityAvailability;\n+import org.odk.collect.android.utilities.QuestionMediaManager;\n+import org.odk.collect.android.widgets.items.LabelWidget;\n+import org.odk.collect.android.widgets.items.LikertWidget;\n+import org.odk.collect.android.widgets.items.ListMultiWidget;\n+import org.odk.collect.android.widgets.items.ListWidget;\n+import org.odk.collect.android.widgets.items.SelectMultiImageMapWidget;\n+import org.odk.collect.android.widgets.items.SelectMultiMinimalWidget;\n+import org.odk.collect.android.widgets.items.SelectMultiWidget;\n+import org.odk.collect.android.widgets.items.SelectOneImageMapWidget;\n+import org.odk.collect.android.widgets.items.SelectOneMinimalWidget;\n+import org.odk.collect.android.widgets.items.SelectOneWidget;\n+import org.odk.collect.android.widgets.support.FakeQuestionMediaManager;\n+import org.odk.collect.android.widgets.support.FakeWaitingForDataRegistry;\n+import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class WidgetFactoryTest {\n+    private WidgetFactory widgetFactory;\n+\n+    @Before\n+    public void setup() {\n+        Activity activity = RobolectricHelpers.buildThemedActivity(TestScreenContextActivity.class).get();\n+        WaitingForDataRegistry waitingForDataRegistry = new FakeWaitingForDataRegistry();\n+        QuestionMediaManager questionMediaManager = new FakeQuestionMediaManager();\n+        ActivityAvailability activityAvailability = mock(ActivityAvailability.class);\n+\n+        widgetFactory = new WidgetFactory(activity,\n+                false,\n+                false,\n+                waitingForDataRegistry,\n+                questionMediaManager,\n+                null,\n+                null,\n+                activityAvailability,\n+                null);\n+    }\n+\n+    @Test\n+    public void testCreatingSelectOneMinimalWidgetWithFastExternalChoices() {", "originalCommit": "afbe45cd6e00c35d8e34a587858591d09f61d1d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3MzYzOQ==", "url": "https://github.com/getodk/collect/pull/4270#discussion_r556773639", "bodyText": "I removed this tests since it was redundant.", "author": "grzesiek2010", "createdAt": "2021-01-13T19:25:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyNzQwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyODAyNA==", "url": "https://github.com/getodk/collect/pull/4270#discussion_r536328024", "bodyText": "Same comment as above. Why use two external data features? If this is about verifying that appearances after search() are honored, no need to also have it be an external select.", "author": "lognaturel", "createdAt": "2020-12-04T19:24:34Z", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/WidgetFactoryTest.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.odk.collect.android.widgets;\n+\n+import android.app.Activity;\n+\n+import org.javarosa.core.model.Constants;\n+import org.javarosa.core.model.QuestionDef;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.support.MockFormEntryPromptBuilder;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.odk.collect.android.support.TestScreenContextActivity;\n+import org.odk.collect.android.utilities.ActivityAvailability;\n+import org.odk.collect.android.utilities.QuestionMediaManager;\n+import org.odk.collect.android.widgets.items.LabelWidget;\n+import org.odk.collect.android.widgets.items.LikertWidget;\n+import org.odk.collect.android.widgets.items.ListMultiWidget;\n+import org.odk.collect.android.widgets.items.ListWidget;\n+import org.odk.collect.android.widgets.items.SelectMultiImageMapWidget;\n+import org.odk.collect.android.widgets.items.SelectMultiMinimalWidget;\n+import org.odk.collect.android.widgets.items.SelectMultiWidget;\n+import org.odk.collect.android.widgets.items.SelectOneImageMapWidget;\n+import org.odk.collect.android.widgets.items.SelectOneMinimalWidget;\n+import org.odk.collect.android.widgets.items.SelectOneWidget;\n+import org.odk.collect.android.widgets.support.FakeQuestionMediaManager;\n+import org.odk.collect.android.widgets.support.FakeWaitingForDataRegistry;\n+import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class WidgetFactoryTest {\n+    private WidgetFactory widgetFactory;\n+\n+    @Before\n+    public void setup() {\n+        Activity activity = RobolectricHelpers.buildThemedActivity(TestScreenContextActivity.class).get();\n+        WaitingForDataRegistry waitingForDataRegistry = new FakeWaitingForDataRegistry();\n+        QuestionMediaManager questionMediaManager = new FakeQuestionMediaManager();\n+        ActivityAvailability activityAvailability = mock(ActivityAvailability.class);\n+\n+        widgetFactory = new WidgetFactory(activity,\n+                false,\n+                false,\n+                waitingForDataRegistry,\n+                questionMediaManager,\n+                null,\n+                null,\n+                activityAvailability,\n+                null);\n+    }\n+\n+    @Test\n+    public void testCreatingSelectOneMinimalWidgetWithFastExternalChoices() {\n+        QuestionDef questionDef = mock(QuestionDef.class);\n+        when(questionDef.getAdditionalAttribute(null, \"query\")).thenReturn(\"instance('counties')/root/item[state= /data/state ]\");\n+\n+        FormEntryPrompt prompt = new MockFormEntryPromptBuilder()\n+                .withControlType(Constants.CONTROL_INPUT)\n+                .withDataType(Constants.DATATYPE_TEXT)\n+                .withQuestion(questionDef)\n+                .withAppearance(\"search(\u2018items\u2019) LisT miNimal something\")\n+                .build();\n+\n+        QuestionWidget widget = widgetFactory.createWidgetFromPrompt(prompt);\n+        assertThat(widget, instanceOf(SelectOneMinimalWidget.class));\n+    }\n+\n+    @Test\n+    public void testCreatingLikertWidgetWithFastExternalChoices() {\n+        QuestionDef questionDef = mock(QuestionDef.class);\n+        when(questionDef.getAdditionalAttribute(null, \"query\")).thenReturn(\"instance('counties')/root/item[state= /data/state ]\");\n+\n+        FormEntryPrompt prompt = new MockFormEntryPromptBuilder()\n+                .withControlType(Constants.CONTROL_INPUT)\n+                .withDataType(Constants.DATATYPE_TEXT)\n+                .withQuestion(questionDef)\n+                .withAppearance(\"search(\u2018items\u2019) LisT lIkErt something\")", "originalCommit": "afbe45cd6e00c35d8e34a587858591d09f61d1d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3Mzg5Ng==", "url": "https://github.com/getodk/collect/pull/4270#discussion_r556773896", "bodyText": "Same here this test is removed.", "author": "grzesiek2010", "createdAt": "2021-01-13T19:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyODAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyODY1OA==", "url": "https://github.com/getodk/collect/pull/4270#discussion_r536328658", "bodyText": "These are really impractical appearance combinations. If you have a big enough dataset to user an external data file, why would you be building a grid?", "author": "lognaturel", "createdAt": "2020-12-04T19:25:46Z", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/WidgetFactoryTest.java", "diffHunk": "@@ -0,0 +1,345 @@\n+package org.odk.collect.android.widgets;\n+\n+import android.app.Activity;\n+\n+import org.javarosa.core.model.Constants;\n+import org.javarosa.core.model.QuestionDef;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.support.MockFormEntryPromptBuilder;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.odk.collect.android.support.TestScreenContextActivity;\n+import org.odk.collect.android.utilities.ActivityAvailability;\n+import org.odk.collect.android.utilities.QuestionMediaManager;\n+import org.odk.collect.android.widgets.items.LabelWidget;\n+import org.odk.collect.android.widgets.items.LikertWidget;\n+import org.odk.collect.android.widgets.items.ListMultiWidget;\n+import org.odk.collect.android.widgets.items.ListWidget;\n+import org.odk.collect.android.widgets.items.SelectMultiImageMapWidget;\n+import org.odk.collect.android.widgets.items.SelectMultiMinimalWidget;\n+import org.odk.collect.android.widgets.items.SelectMultiWidget;\n+import org.odk.collect.android.widgets.items.SelectOneImageMapWidget;\n+import org.odk.collect.android.widgets.items.SelectOneMinimalWidget;\n+import org.odk.collect.android.widgets.items.SelectOneWidget;\n+import org.odk.collect.android.widgets.support.FakeQuestionMediaManager;\n+import org.odk.collect.android.widgets.support.FakeWaitingForDataRegistry;\n+import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class WidgetFactoryTest {\n+    private WidgetFactory widgetFactory;\n+\n+    @Before\n+    public void setup() {\n+        Activity activity = RobolectricHelpers.buildThemedActivity(TestScreenContextActivity.class).get();\n+        WaitingForDataRegistry waitingForDataRegistry = new FakeWaitingForDataRegistry();\n+        QuestionMediaManager questionMediaManager = new FakeQuestionMediaManager();\n+        ActivityAvailability activityAvailability = mock(ActivityAvailability.class);\n+\n+        widgetFactory = new WidgetFactory(activity,\n+                false,\n+                false,\n+                waitingForDataRegistry,\n+                questionMediaManager,\n+                null,\n+                null,\n+                activityAvailability,\n+                null);\n+    }\n+\n+    @Test\n+    public void testCreatingSelectOneMinimalWidgetWithFastExternalChoices() {\n+        QuestionDef questionDef = mock(QuestionDef.class);\n+        when(questionDef.getAdditionalAttribute(null, \"query\")).thenReturn(\"instance('counties')/root/item[state= /data/state ]\");\n+\n+        FormEntryPrompt prompt = new MockFormEntryPromptBuilder()\n+                .withControlType(Constants.CONTROL_INPUT)\n+                .withDataType(Constants.DATATYPE_TEXT)\n+                .withQuestion(questionDef)\n+                .withAppearance(\"search(\u2018items\u2019) LisT miNimal something\")\n+                .build();\n+\n+        QuestionWidget widget = widgetFactory.createWidgetFromPrompt(prompt);\n+        assertThat(widget, instanceOf(SelectOneMinimalWidget.class));\n+    }\n+\n+    @Test\n+    public void testCreatingLikertWidgetWithFastExternalChoices() {\n+        QuestionDef questionDef = mock(QuestionDef.class);\n+        when(questionDef.getAdditionalAttribute(null, \"query\")).thenReturn(\"instance('counties')/root/item[state= /data/state ]\");\n+\n+        FormEntryPrompt prompt = new MockFormEntryPromptBuilder()\n+                .withControlType(Constants.CONTROL_INPUT)\n+                .withDataType(Constants.DATATYPE_TEXT)\n+                .withQuestion(questionDef)\n+                .withAppearance(\"search(\u2018items\u2019) LisT lIkErt something\")\n+                .build();\n+\n+        QuestionWidget widget = widgetFactory.createWidgetFromPrompt(prompt);\n+        assertThat(widget, instanceOf(LikertWidget.class));\n+    }\n+\n+    @Test\n+    public void testCreatingSelectOneListNoLabelWidgetWithFastExternalChoices() {\n+        QuestionDef questionDef = mock(QuestionDef.class);\n+        when(questionDef.getAdditionalAttribute(null, \"query\")).thenReturn(\"instance('counties')/root/item[state= /data/state ]\");\n+\n+        FormEntryPrompt prompt = new MockFormEntryPromptBuilder()\n+                .withControlType(Constants.CONTROL_INPUT)\n+                .withDataType(Constants.DATATYPE_TEXT)\n+                .withQuestion(questionDef)\n+                .withAppearance(\"search(\u2018items\u2019) LisT-nOLabeL something\")", "originalCommit": "afbe45cd6e00c35d8e34a587858591d09f61d1d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc3NDE3OA==", "url": "https://github.com/getodk/collect/pull/4270#discussion_r556774178", "bodyText": "Same here this test is removed.", "author": "grzesiek2010", "createdAt": "2021-01-13T19:26:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyODY1OA=="}], "type": "inlineReview"}, {"oid": "19e3633f70539531aa70db9f109f7018c60ed607", "url": "https://github.com/getodk/collect/commit/19e3633f70539531aa70db9f109f7018c60ed607", "message": "Removed redundant comments", "committedDate": "2021-01-13T16:36:40Z", "type": "commit"}, {"oid": "b88de30c6b8fbb532fba9d7cd00eae78dced610d", "url": "https://github.com/getodk/collect/commit/b88de30c6b8fbb532fba9d7cd00eae78dced610d", "message": "Added tests", "committedDate": "2021-01-13T19:18:03Z", "type": "commit"}, {"oid": "b88de30c6b8fbb532fba9d7cd00eae78dced610d", "url": "https://github.com/getodk/collect/commit/b88de30c6b8fbb532fba9d7cd00eae78dced610d", "message": "Added tests", "committedDate": "2021-01-13T19:18:03Z", "type": "forcePushed"}]}