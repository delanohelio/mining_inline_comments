{"pr_number": 3886, "pr_title": "Add tests for QR sharing and import", "pr_createdAt": "2020-06-01T12:20:39Z", "pr_url": "https://github.com/getodk/collect/pull/3886", "timeline": [{"oid": "047e97ae2d8d82776961e1b0240517b9f27b8eee", "url": "https://github.com/getodk/collect/commit/047e97ae2d8d82776961e1b0240517b9f27b8eee", "message": "Create CollectTestRuleChain for removing test boilerplate", "committedDate": "2020-06-04T13:37:09Z", "type": "forcePushed"}, {"oid": "d3cb5d0354f8fc0b0eb42c812687b9928779eb5e", "url": "https://github.com/getodk/collect/commit/d3cb5d0354f8fc0b0eb42c812687b9928779eb5e", "message": "Replace Handler with coroutine", "committedDate": "2020-06-04T12:57:19Z", "type": "forcePushed"}, {"oid": "12c5121cdb7286fe18ac6b358513ad7d73d24627", "url": "https://github.com/getodk/collect/commit/12c5121cdb7286fe18ac6b358513ad7d73d24627", "message": "Add idling resource setup for Scheduler", "committedDate": "2020-06-07T12:00:27Z", "type": "forcePushed"}, {"oid": "6da4ea5cbf1f058fbc56d8f2c66c76ac1d1b96a6", "url": "https://github.com/getodk/collect/commit/6da4ea5cbf1f058fbc56d8f2c66c76ac1d1b96a6", "message": "Add idling resource setup for Scheduler", "committedDate": "2020-06-08T11:30:27Z", "type": "forcePushed"}, {"oid": "c48d9fc102b7ad3b4d11f96948e728ff74e58abd", "url": "https://github.com/getodk/collect/commit/c48d9fc102b7ad3b4d11f96948e728ff74e58abd", "message": "Move async package to submodule", "committedDate": "2020-06-08T12:41:27Z", "type": "forcePushed"}, {"oid": "4e839a846ed9f6a02035cc88c1cf62df21a4f8fe", "url": "https://github.com/getodk/collect/commit/4e839a846ed9f6a02035cc88c1cf62df21a4f8fe", "message": "Add links to docs in Circle CI config", "committedDate": "2020-06-08T20:28:42Z", "type": "forcePushed"}, {"oid": "fc21e3d633d254dc5f4e1ec7523f6a0da47135d7", "url": "https://github.com/getodk/collect/commit/fc21e3d633d254dc5f4e1ec7523f6a0da47135d7", "message": "Make sure activity uses injected DAO", "committedDate": "2020-06-15T08:52:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyOTQzOQ==", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440529439", "bodyText": "Did you try assertThat(messageDigest, is(cachedMessageDigest))? I'm pretty sure that just works.", "author": "lognaturel", "createdAt": "2020-06-16T01:08:37Z", "path": "collect_app/src/test/java/org/odk/collect/android/utilities/CachingQRCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.odk.collect.android.utilities;\n+\n+import android.graphics.Bitmap;\n+\n+import com.google.zxing.ChecksumException;\n+import com.google.zxing.FormatException;\n+import com.google.zxing.NotFoundException;\n+import com.google.zxing.WriterException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.preferences.qr.CachingQRCodeGenerator;\n+import org.odk.collect.android.preferences.qr.QRCodeGenerator;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.zip.DataFormatException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class CachingQRCodeGeneratorTest {\n+\n+    private final QRCodeGenerator qrCodeGenerator = new CachingQRCodeGenerator();\n+\n+    private File savedQrCodeImage;\n+    private File md5File;\n+\n+    @Before\n+    public void setup() {\n+        StoragePathProvider storagePathProvider = new StoragePathProvider();\n+\n+        String savedQrCodeImagePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \"collect-settings.png\";\n+        savedQrCodeImage = new File(savedQrCodeImagePath);\n+\n+        String md5FilePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \".collect-settings-hash\";\n+        md5File = new File(md5FilePath);\n+\n+        savedQrCodeImage.delete();\n+        md5File.delete();\n+    }\n+\n+    @Test\n+    public void generateQRCodeIfNoCacheExists() throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException, NoSuchAlgorithmException {\n+        // verify that QRCode and md5 cache files don't exist\n+        assertFalse(savedQrCodeImage.exists());\n+        assertFalse(md5File.exists());\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert files are saved\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+        assertQRContains(generationResults.generatedBitmap.get(), expectedData);\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    @Test\n+    public void readQRCodeFromDiskIfCacheExists() throws NoSuchAlgorithmException, IOException, WriterException {\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+\n+        // stubbing cache and bitmap files\n+        new File(new StoragePathProvider().getDirPath(StorageSubdirectory.SETTINGS)).mkdirs();\n+        FileUtils.saveBitmapToFile(QRCodeUtils.encode(expectedData), savedQrCodeImage.getAbsolutePath());\n+        FileUtils.write(md5File, getDigest(expectedData.getBytes()));\n+\n+        // verify that QRCode and md5 cache files exist\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        final long lastModifiedQRCode = savedQrCodeImage.lastModified();\n+        final long lastModifiedCache = md5File.lastModified();\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert that files were not modified\n+        assertEquals(lastModifiedCache, md5File.lastModified());\n+        assertEquals(lastModifiedQRCode, savedQrCodeImage.lastModified());\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    public void generateQrCode(GenerationResults generationResults) {\n+        // subscribe to the QRCode generator in the same thread\n+        qrCodeGenerator.generateQRCode(new ArrayList<>())\n+                .subscribe(generationResults.generatedBitmap::set, generationResults.errorThrown::set, () -> generationResults.isFinished.set(true));\n+\n+        generationResults.assertGeneratedOk();\n+    }\n+\n+    /**\n+     * Verifies that the md5 data in the cached file is correct\n+     */\n+    private void verifyCachedMd5Data(String expectedData) throws NoSuchAlgorithmException {\n+        assertCachedFileIsCorrect(expectedData.getBytes(), md5File);\n+    }\n+\n+    @SuppressWarnings(\"PMD.UseAssertEqualsInsteadOfAssertTrue\")", "originalCommit": "9c5f1498edb61bb76d1b3e46f0f50d6c27338fe4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1ODg1Mg==", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440658852", "bodyText": "I think this must have come from old code as I don't remember adding this annotation. I'm pretty sure you're right so I'll fix this.", "author": "seadowg", "createdAt": "2020-06-16T07:58:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyOTQzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MDE0OQ==", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440660149", "bodyText": "Oooops. This actually isn't in the final changes.", "author": "seadowg", "createdAt": "2020-06-16T08:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyOTQzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyOTU4Ng==", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440529586", "bodyText": "Ah, you're not going all-in on Hamcrest these days?", "author": "lognaturel", "createdAt": "2020-06-16T01:09:08Z", "path": "collect_app/src/test/java/org/odk/collect/android/utilities/CachingQRCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.odk.collect.android.utilities;\n+\n+import android.graphics.Bitmap;\n+\n+import com.google.zxing.ChecksumException;\n+import com.google.zxing.FormatException;\n+import com.google.zxing.NotFoundException;\n+import com.google.zxing.WriterException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.preferences.qr.CachingQRCodeGenerator;\n+import org.odk.collect.android.preferences.qr.QRCodeGenerator;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.zip.DataFormatException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class CachingQRCodeGeneratorTest {\n+\n+    private final QRCodeGenerator qrCodeGenerator = new CachingQRCodeGenerator();\n+\n+    private File savedQrCodeImage;\n+    private File md5File;\n+\n+    @Before\n+    public void setup() {\n+        StoragePathProvider storagePathProvider = new StoragePathProvider();\n+\n+        String savedQrCodeImagePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \"collect-settings.png\";\n+        savedQrCodeImage = new File(savedQrCodeImagePath);\n+\n+        String md5FilePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \".collect-settings-hash\";\n+        md5File = new File(md5FilePath);\n+\n+        savedQrCodeImage.delete();\n+        md5File.delete();\n+    }\n+\n+    @Test\n+    public void generateQRCodeIfNoCacheExists() throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException, NoSuchAlgorithmException {\n+        // verify that QRCode and md5 cache files don't exist\n+        assertFalse(savedQrCodeImage.exists());\n+        assertFalse(md5File.exists());\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert files are saved\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+        assertQRContains(generationResults.generatedBitmap.get(), expectedData);\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    @Test\n+    public void readQRCodeFromDiskIfCacheExists() throws NoSuchAlgorithmException, IOException, WriterException {\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+\n+        // stubbing cache and bitmap files\n+        new File(new StoragePathProvider().getDirPath(StorageSubdirectory.SETTINGS)).mkdirs();\n+        FileUtils.saveBitmapToFile(QRCodeUtils.encode(expectedData), savedQrCodeImage.getAbsolutePath());\n+        FileUtils.write(md5File, getDigest(expectedData.getBytes()));\n+\n+        // verify that QRCode and md5 cache files exist\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        final long lastModifiedQRCode = savedQrCodeImage.lastModified();\n+        final long lastModifiedCache = md5File.lastModified();\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert that files were not modified\n+        assertEquals(lastModifiedCache, md5File.lastModified());\n+        assertEquals(lastModifiedQRCode, savedQrCodeImage.lastModified());\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    public void generateQrCode(GenerationResults generationResults) {\n+        // subscribe to the QRCode generator in the same thread\n+        qrCodeGenerator.generateQRCode(new ArrayList<>())\n+                .subscribe(generationResults.generatedBitmap::set, generationResults.errorThrown::set, () -> generationResults.isFinished.set(true));\n+\n+        generationResults.assertGeneratedOk();\n+    }\n+\n+    /**\n+     * Verifies that the md5 data in the cached file is correct\n+     */\n+    private void verifyCachedMd5Data(String expectedData) throws NoSuchAlgorithmException {\n+        assertCachedFileIsCorrect(expectedData.getBytes(), md5File);\n+    }\n+\n+    @SuppressWarnings(\"PMD.UseAssertEqualsInsteadOfAssertTrue\")\n+    private void assertCachedFileIsCorrect(byte[] data, File file) throws NoSuchAlgorithmException {\n+        byte[] messageDigest = getDigest(data);\n+        byte[] cachedMessageDigest = FileUtils.read(file);\n+        assertTrue(Arrays.equals(messageDigest, cachedMessageDigest));\n+    }\n+\n+    private byte[] getDigest(byte[] data) throws NoSuchAlgorithmException {\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+        md.update(data);\n+        return md.digest();\n+    }\n+\n+    private void assertQRContains(Bitmap bitmap, String data) throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException {\n+        assertNotNull(bitmap);\n+        String result = QRCodeUtils.decodeFromBitmap(bitmap);\n+        assertEquals(data, result);", "originalCommit": "9c5f1498edb61bb76d1b3e46f0f50d6c27338fe4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1OTI4OA==", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440659288", "bodyText": "Yeah again this is old code. Will update though.", "author": "seadowg", "createdAt": "2020-06-16T07:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyOTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MDM0Ng==", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440660346", "bodyText": "This also isn't in the final changes.", "author": "seadowg", "createdAt": "2020-06-16T08:01:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyOTU4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyMzcxMg==", "url": "https://github.com/getodk/collect/pull/3886#discussion_r441123712", "bodyText": "Ooops, sorry. I usually go back and check when I go commit by commit but didn't with these.", "author": "lognaturel", "createdAt": "2020-06-16T20:31:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyOTU4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3OTQwOA==", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440579408", "bodyText": "should be password", "author": "lognaturel", "createdAt": "2020-06-16T04:29:30Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/support/pages/MainMenuPage.java", "diffHunk": "@@ -69,6 +69,13 @@ public QRCodeTabsActivityPage clickConfigureQR() {\n         return new QRCodeTabsActivityPage(rule).assertOnPage();\n     }\n \n+    public QRCodeTabsActivityPage clickConfigureQRWithAdminPassword(String password) {\n+        clickOnString(R.string.configure_via_qr_code);\n+        inputText(\"blah\");", "originalCommit": "f090d100ece447c8ae9b53243e45a0ca16ac5d55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MDQ4Nw==", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440660487", "bodyText": "\ud83d\ude06", "author": "seadowg", "createdAt": "2020-06-16T08:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3OTQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MDI3NA==", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440580274", "bodyText": "Shouldn't this be qrcode_without_passwords?", "author": "lognaturel", "createdAt": "2020-06-16T04:33:18Z", "path": "collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRCodeViewModel.java", "diffHunk": "@@ -85,12 +85,18 @@ protected void onPostExecute(Pair<String, Bitmap> qrCode) {\n                 boolean serverPasswordSet = !generalSharedPreferences.getString(KEY_PASSWORD, \"\").isEmpty();\n                 boolean adminPasswordSet = adminSharedPreferences.contains(KEY_ADMIN_PW);\n \n-                if (serverPasswordSet && includedKeys.contains(KEY_PASSWORD)) {\n-                    warning.setValue(R.string.qrcode_with_server_password);\n-                } else if (adminPasswordSet && includedKeys.contains(KEY_ADMIN_PW)) {\n-                    warning.setValue(R.string.qrcode_with_admin_password);\n+                if (serverPasswordSet || adminPasswordSet) {\n+                    if (serverPasswordSet && includedKeys.contains(KEY_PASSWORD) && adminPasswordSet && includedKeys.contains(KEY_ADMIN_PW)) {\n+                        warning.setValue(R.string.qrcode_with_both_passwords);\n+                    } else if (serverPasswordSet && includedKeys.contains(KEY_PASSWORD)) {\n+                        warning.setValue(R.string.qrcode_with_server_password);\n+                    } else if (adminPasswordSet && includedKeys.contains(KEY_ADMIN_PW)) {\n+                        warning.setValue(R.string.qrcode_with_admin_password);\n+                    } else {\n+                        warning.setValue(R.string.qrcode_without_passwords);\n+                    }\n                 } else {\n-                    warning.setValue(R.string.qrcode_without_passwords);\n+                    warning.setValue(null);", "originalCommit": "1baf34345cf46579a9b4360d4e21a4543cbd942c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MTg2OA==", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440661868", "bodyText": "No we don't show a warning where there aren't any passwords available to show in the QR. qrcode_without_passwords is only shown when the user actively removes the admin and server password.", "author": "seadowg", "createdAt": "2020-06-16T08:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MDI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MDU4Ng==", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440580586", "bodyText": "postition typo", "author": "lognaturel", "createdAt": "2020-06-16T04:34:38Z", "path": "collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java", "diffHunk": "@@ -29,7 +30,7 @@\n     private final MutableLiveData<Exception> error = new MutableLiveData<>();\n     private final Map<String, MutableLiveData<Integer>> positions = new HashMap<>();\n \n-    private Boolean scheduledDurationUpdates = false;\n+    private Cancellable postitionUpdatesCancellable;", "originalCommit": "ec7ad716aee8e72390285b7dae1d3c60ad9873e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MjIyOA==", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440582228", "bodyText": "Removing -> Replacing", "author": "lognaturel", "createdAt": "2020-06-16T04:41:12Z", "path": "docs/STATE.md", "diffHunk": "@@ -44,5 +44,5 @@ and update this document as the code evolves.\n * Moving code to packages based on domain slices (`audio` or `formentry` for instance) to make it easier to work on isolated features and navigate code\n * Refactoring towards an OpenRosa abstraction (`OpenRosaAPIClient`) closer to its [documented API](https://docs.getodk.org/openrosa/) and takes care of all interactions with Aggregate, Central etc (currently some high level work interacts with `OpenRosaHttpInterface` directly)\n * `QuestionWiget` implementations are moving from defining their \"answer\" view programmatically to [implementing `onCreateAnswerView`](WIDGETS.md)\n-* Removing Rx and replacing with LiveData + AsyncTask. The `Scheduler` abstraction for async work to make it easier to switch in future (to Kotlin Coroutines for instance)\n+* Removing Rx (and other async work) with LiveData + Scheduler abstraction", "originalCommit": "e5f119ad6f177c84f4c4ba1492ddf8b8d6ae885e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MjMwMg==", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440662302", "bodyText": "Ach nice catch", "author": "seadowg", "createdAt": "2020-06-16T08:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MjIyOA=="}], "type": "inlineReview"}, {"oid": "a66ed9a90cd975d243f9f773369f01e209a3381b", "url": "https://github.com/getodk/collect/commit/a66ed9a90cd975d243f9f773369f01e209a3381b", "message": "Move import QR code to unit test", "committedDate": "2020-06-22T09:29:26Z", "type": "commit"}, {"oid": "a0f7c7c945087800cce1e98f6c1069db48a3e7d2", "url": "https://github.com/getodk/collect/commit/a0f7c7c945087800cce1e98f6c1069db48a3e7d2", "message": "Use menu delegate for QR share logic", "committedDate": "2020-06-22T09:40:53Z", "type": "commit"}, {"oid": "7acd5687b4c95fdc724021a0e310077ef1326ca8", "url": "https://github.com/getodk/collect/commit/7acd5687b4c95fdc724021a0e310077ef1326ca8", "message": "Remove getters from CachingQRCodeGenerator only needed for tests", "committedDate": "2020-06-22T09:40:55Z", "type": "commit"}, {"oid": "6867288b964fb11b97a3397b225390892cf49415", "url": "https://github.com/getodk/collect/commit/6867288b964fb11b97a3397b225390892cf49415", "message": "Pull out actual QR code bitmap generation", "committedDate": "2020-06-22T09:44:56Z", "type": "commit"}, {"oid": "d1d52344b9395f39c4d2da7ffd0e846560b73004", "url": "https://github.com/getodk/collect/commit/d1d52344b9395f39c4d2da7ffd0e846560b73004", "message": "Remove Rx from QR code generation", "committedDate": "2020-06-22T09:50:49Z", "type": "commit"}, {"oid": "7cf351ba8a9ee8983cacdf81ad966c937ee85f5f", "url": "https://github.com/getodk/collect/commit/7cf351ba8a9ee8983cacdf81ad966c937ee85f5f", "message": "Just return filepath from QRCodeGenerator", "committedDate": "2020-06-22T09:54:25Z", "type": "commit"}, {"oid": "b8cbd7fc353f904611e4a81149240778007229b6", "url": "https://github.com/getodk/collect/commit/b8cbd7fc353f904611e4a81149240778007229b6", "message": "Use viewmodel for QR code generation", "committedDate": "2020-06-22T09:54:27Z", "type": "commit"}, {"oid": "857f18c3298162af338dc651b66196828520f139", "url": "https://github.com/getodk/collect/commit/857f18c3298162af338dc651b66196828520f139", "message": "Add failing tests for configuring QR code passwords", "committedDate": "2020-06-22T09:54:27Z", "type": "commit"}, {"oid": "14dc8fb7c1e2f72c8ae52a8946b9d40fd69b3567", "url": "https://github.com/getodk/collect/commit/14dc8fb7c1e2f72c8ae52a8946b9d40fd69b3567", "message": "Show warnings when passwords are in QR", "committedDate": "2020-06-22T09:54:27Z", "type": "commit"}, {"oid": "8e5ab7dcee2853806b9de18edc3859c431e233d2", "url": "https://github.com/getodk/collect/commit/8e5ab7dcee2853806b9de18edc3859c431e233d2", "message": "Make sure warning not shown when passwords not in QR", "committedDate": "2020-06-22T09:54:28Z", "type": "commit"}, {"oid": "fbba632c0cc66de2be9c9c3482e4406eb37e4666", "url": "https://github.com/getodk/collect/commit/fbba632c0cc66de2be9c9c3482e4406eb37e4666", "message": "Update STATE.md", "committedDate": "2020-06-22T09:54:28Z", "type": "commit"}, {"oid": "3b78c683092e3523a2690157ccb935d4bf472574", "url": "https://github.com/getodk/collect/commit/3b78c683092e3523a2690157ccb935d4bf472574", "message": "Change scheduler cancellation to be on a task level", "committedDate": "2020-06-22T09:54:28Z", "type": "commit"}, {"oid": "92faf639095dc0afda6c872cf2d605877453a3b0", "url": "https://github.com/getodk/collect/commit/92faf639095dc0afda6c872cf2d605877453a3b0", "message": "Add background work to scheduler abstraction", "committedDate": "2020-06-22T09:54:28Z", "type": "commit"}, {"oid": "3a524a8f4e408b739d237296337db6bec3edea0a", "url": "https://github.com/getodk/collect/commit/3a524a8f4e408b739d237296337db6bec3edea0a", "message": "Add note about Scheduler to STATE.md", "committedDate": "2020-06-22T09:54:28Z", "type": "commit"}, {"oid": "9e47ea108a38e1d7f1f67b9e58d39422c6da2936", "url": "https://github.com/getodk/collect/commit/9e47ea108a38e1d7f1f67b9e58d39422c6da2936", "message": "Use Java 8 Supplier/Consumer", "committedDate": "2020-06-22T09:59:00Z", "type": "commit"}, {"oid": "241ca57e1fa312f1caadbd2aee307304565d3592", "url": "https://github.com/getodk/collect/commit/241ca57e1fa312f1caadbd2aee307304565d3592", "message": "Use Coroutines instead of AsyncTask for Scheduler", "committedDate": "2020-06-22T09:59:02Z", "type": "commit"}, {"oid": "8c8ed9f35f09bb93b1f94eb97098c34f60599e1b", "url": "https://github.com/getodk/collect/commit/8c8ed9f35f09bb93b1f94eb97098c34f60599e1b", "message": "Replace Handler with coroutine", "committedDate": "2020-06-22T09:59:02Z", "type": "commit"}, {"oid": "dcd54199da9d20e813a0c9b9a251498c64c2d752", "url": "https://github.com/getodk/collect/commit/dcd54199da9d20e813a0c9b9a251498c64c2d752", "message": "Create async package", "committedDate": "2020-06-22T09:59:02Z", "type": "commit"}, {"oid": "ecad15e3cb09a75919ac3f9b95fe171d2f1c05a1", "url": "https://github.com/getodk/collect/commit/ecad15e3cb09a75919ac3f9b95fe171d2f1c05a1", "message": "Add idling resource setup for Scheduler", "committedDate": "2020-06-22T09:59:02Z", "type": "commit"}, {"oid": "7e21dba81b8446f946a8ba7e50d17ee5c72168c3", "url": "https://github.com/getodk/collect/commit/7e21dba81b8446f946a8ba7e50d17ee5c72168c3", "message": "Fix test compilation", "committedDate": "2020-06-22T09:59:02Z", "type": "commit"}, {"oid": "4a17c4262a112b04debdce808679626dcf6f4660", "url": "https://github.com/getodk/collect/commit/4a17c4262a112b04debdce808679626dcf6f4660", "message": "Add note about Scheduler to STATE", "committedDate": "2020-06-22T09:59:02Z", "type": "commit"}, {"oid": "024da9e6f4dbfe3996a0fee2dd2659d3a4f1d0f5", "url": "https://github.com/getodk/collect/commit/024da9e6f4dbfe3996a0fee2dd2659d3a4f1d0f5", "message": "Move async package to submodule", "committedDate": "2020-06-22T09:59:03Z", "type": "commit"}, {"oid": "f3090161ff9e09e7c98a45239cfc8db99e400bca", "url": "https://github.com/getodk/collect/commit/f3090161ff9e09e7c98a45239cfc8db99e400bca", "message": "Rework CI config to lower chance of OOM errors\n\nBest tactic appeared to be to seperate out separate submodules into\ndifferent steps. Also made quality and test checks run at the same time\nfor faster feedback.", "committedDate": "2020-06-22T09:59:03Z", "type": "commit"}, {"oid": "444ac689d69f42a08d2807a12adf1efef337b07f", "url": "https://github.com/getodk/collect/commit/444ac689d69f42a08d2807a12adf1efef337b07f", "message": "Add links to docs in Circle CI config", "committedDate": "2020-06-22T09:59:03Z", "type": "commit"}, {"oid": "9a7da6dc0581133af5ea5fcb10504d0159f3595a", "url": "https://github.com/getodk/collect/commit/9a7da6dc0581133af5ea5fcb10504d0159f3595a", "message": "Make sure gradle builds locally", "committedDate": "2020-06-22T09:59:03Z", "type": "commit"}, {"oid": "f652d38a6fa7f5ed27101328bc352d7e0abdbdec", "url": "https://github.com/getodk/collect/commit/f652d38a6fa7f5ed27101328bc352d7e0abdbdec", "message": "Whoooops. Don't show warning background when there are no creds in QR code", "committedDate": "2020-06-22T09:59:03Z", "type": "commit"}, {"oid": "2de47e9624183821644712e831f2462cfd0904b9", "url": "https://github.com/getodk/collect/commit/2de47e9624183821644712e831f2462cfd0904b9", "message": "Make sure activity uses injected DAO", "committedDate": "2020-06-22T09:59:03Z", "type": "commit"}, {"oid": "3bb1d3c5515037c803979c7774559c35d08dabf2", "url": "https://github.com/getodk/collect/commit/3bb1d3c5515037c803979c7774559c35d08dabf2", "message": "Fix typos", "committedDate": "2020-06-22T09:59:03Z", "type": "commit"}, {"oid": "3bb1d3c5515037c803979c7774559c35d08dabf2", "url": "https://github.com/getodk/collect/commit/3bb1d3c5515037c803979c7774559c35d08dabf2", "message": "Fix typos", "committedDate": "2020-06-22T09:59:03Z", "type": "forcePushed"}, {"oid": "0553c38eb15d97429ac4a7b8a9893438db6fd994", "url": "https://github.com/getodk/collect/commit/0553c38eb15d97429ac4a7b8a9893438db6fd994", "message": "Make sure menu delegate is always created", "committedDate": "2020-06-24T17:46:01Z", "type": "commit"}]}