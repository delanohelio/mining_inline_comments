{"pr_number": 769, "pr_title": "PARQUET-1817: Crypto Properties Factory", "pr_createdAt": "2020-03-16T15:26:56Z", "pr_url": "https://github.com/apache/parquet-mr/pull/769", "timeline": [{"oid": "7185aba2407bd687f17c55c8d544a59a98b2ec6a", "url": "https://github.com/apache/parquet-mr/commit/7185aba2407bd687f17c55c8d544a59a98b2ec6a", "message": "PARQUET-1817: Crypto Properties Factory", "committedDate": "2020-03-16T15:59:46Z", "type": "commit"}, {"oid": "7185aba2407bd687f17c55c8d544a59a98b2ec6a", "url": "https://github.com/apache/parquet-mr/commit/7185aba2407bd687f17c55c8d544a59a98b2ec6a", "message": "PARQUET-1817: Crypto Properties Factory", "committedDate": "2020-03-16T15:59:46Z", "type": "forcePushed"}, {"oid": "85ae2031a016d918a0b6742837e7929d7fdd87c1", "url": "https://github.com/apache/parquet-mr/commit/85ae2031a016d918a0b6742837e7929d7fdd87c1", "message": "Fix build error: 'unapproved licenses'", "committedDate": "2020-03-18T13:12:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwMTczMA==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r396501730", "bodyText": "As this class does not have any implemented methods I would suggest having an interface instead of an abstract class.", "author": "gszadovszky", "createdAt": "2020-03-23T14:41:38Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.crypto;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.hadoop.BadConfigurationException;\n+import org.apache.parquet.hadoop.api.WriteSupport.WriteContext;\n+import org.apache.parquet.hadoop.util.ConfigurationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+\n+import static org.apache.parquet.Preconditions.checkNotNull;\n+\n+public abstract class CryptoPropertiesFactory {", "originalCommit": "85ae2031a016d918a0b6742837e7929d7fdd87c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2MzQ2MQ==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r396763461", "bodyText": "sure", "author": "shangxinli", "createdAt": "2020-03-23T21:19:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwMTczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwMzU4OQ==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r396503589", "bodyText": "Why do we need to handle the null case this way? Is it a normal scenario that conf is null?", "author": "gszadovszky", "createdAt": "2020-03-23T14:44:05Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.crypto;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.hadoop.BadConfigurationException;\n+import org.apache.parquet.hadoop.api.WriteSupport.WriteContext;\n+import org.apache.parquet.hadoop.util.ConfigurationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+\n+import static org.apache.parquet.Preconditions.checkNotNull;\n+\n+public abstract class CryptoPropertiesFactory {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(CryptoPropertiesFactory.class);\n+  public static final String CRYPTO_FACTORY_CLASS_PROPERTY_NAME = \"parquet.encryption.factory.class\";\n+\n+  public static CryptoPropertiesFactory loadFactory(Configuration conf) throws IOException {\n+    if (null == conf) {", "originalCommit": "85ae2031a016d918a0b6742837e7929d7fdd87c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NDAyMQ==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r396764021", "bodyText": "I will remove it.", "author": "shangxinli", "createdAt": "2020-03-23T21:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwMzU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxMTY1NQ==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r396511655", "bodyText": "Why do we need another Hadoop conf after we've had one at initialize?\nWhat is tempFilePath?\nCould you please document the arguments and their purpose?", "author": "gszadovszky", "createdAt": "2020-03-23T14:54:22Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.crypto;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.hadoop.BadConfigurationException;\n+import org.apache.parquet.hadoop.api.WriteSupport.WriteContext;\n+import org.apache.parquet.hadoop.util.ConfigurationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+\n+import static org.apache.parquet.Preconditions.checkNotNull;\n+\n+public abstract class CryptoPropertiesFactory {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(CryptoPropertiesFactory.class);\n+  public static final String CRYPTO_FACTORY_CLASS_PROPERTY_NAME = \"parquet.encryption.factory.class\";\n+\n+  public static CryptoPropertiesFactory loadFactory(Configuration conf) throws IOException {\n+    if (null == conf) {\n+      LOG.debug(\"CryptoPropertiesFactory is not configured - null hadoop config\");\n+      return null;\n+    }\n+\n+    final Class<?> cryptoPropertiesFactoryClass = ConfigurationUtil.getClassFromConfig(conf,\n+      CRYPTO_FACTORY_CLASS_PROPERTY_NAME, CryptoPropertiesFactory.class);\n+\n+    if (null == cryptoPropertiesFactoryClass) {\n+      LOG.debug(\"CryptoPropertiesFactory is not configured - name not found in hadoop config\");\n+      return null;\n+    }\n+\n+    try {\n+      CryptoPropertiesFactory cryptoFactory = (CryptoPropertiesFactory)cryptoPropertiesFactoryClass.newInstance();\n+      cryptoFactory.initialize(conf);\n+      return cryptoFactory;\n+    } catch (InstantiationException | IllegalAccessException e) {\n+      throw new BadConfigurationException(\"could not instantiate CryptoPropertiesFactory class: \"\n+        + cryptoPropertiesFactoryClass, e);\n+    }\n+  }\n+\n+  public abstract void initialize(Configuration hadoopConfig);\n+\n+  public abstract FileEncryptionProperties getFileEncryptionProperties(", "originalCommit": "85ae2031a016d918a0b6742837e7929d7fdd87c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NzMzNA==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r396767334", "bodyText": "We will remove initialize().\nYes, we will document the arguments and their purpose.\nI will let @gidon to explain the usage of it. From what I heard from him \"tempFileName is because we want to stress that the file name can change.\"", "author": "shangxinli", "createdAt": "2020-03-23T21:27:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxMTY1NQ=="}], "type": "inlineReview"}, {"oid": "86ac333338813b49d61d86ae125bdcc20bbccc18", "url": "https://github.com/apache/parquet-mr/commit/86ac333338813b49d61d86ae125bdcc20bbccc18", "message": "Address feedback", "committedDate": "2020-03-23T23:52:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyODE0MA==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r396828140", "bodyText": "@ggershinsky, can you make comments about what to be used by this field? Our implementation doesn't need it so far.", "author": "shangxinli", "createdAt": "2020-03-23T23:54:53Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java", "diffHunk": "@@ -51,20 +54,32 @@ public static CryptoPropertiesFactory loadFactory(Configuration conf) throws IOE\n \n     try {\n       CryptoPropertiesFactory cryptoFactory = (CryptoPropertiesFactory)cryptoPropertiesFactoryClass.newInstance();\n-      cryptoFactory.initialize(conf);\n       return cryptoFactory;\n     } catch (InstantiationException | IllegalAccessException e) {\n       throw new BadConfigurationException(\"could not instantiate CryptoPropertiesFactory class: \"\n         + cryptoPropertiesFactoryClass, e);\n     }\n   }\n \n-  public abstract void initialize(Configuration hadoopConfig);\n-\n-  public abstract FileEncryptionProperties getFileEncryptionProperties(\n-    Configuration fileHadoopConfig, Path tempFilePath,\n-    WriteContext fileWriteContext)  throws IOException;\n+  /**\n+   * Get FileEncryptionProperties object which is created by the implementation of this interface. Please see\n+   * the unit test (TBD) for example\n+   *\n+   * @param fileHadoopConfig Configuration that is used to pass the needed information, e.g. KMS uri\n+   * @param tempFilePath File path of the parquet file", "originalCommit": "86ac333338813b49d61d86ae125bdcc20bbccc18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3OTExNw==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397179117", "bodyText": "I'd suggest also to add a comment to the interface itself, to remind about its purpose (this helps to understand the method parameters), something like \"CryptoPropertiesFactory interface enables transparent activation of Parquet encryption. It's custom implementations produce encryption and decryption properties for each Parquet file, using the information available in Parquet file writers and readers: file path, file extended schema (in writers only) - and also Hadoop configuration properties that can pass custom parameters required by a crypto factory. A factory implementation can use or ignore any of these parameters.\"\nAs for the \"tempFilePath\" - \"File path of the parquet file being written. Can be used for AAD prefix creation, key material management, etc. Implementations must not presume the path is permanent, as the file can be moved or renamed later\"", "author": "ggershinsky", "createdAt": "2020-03-24T14:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyODE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNDAyMQ==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397204021", "bodyText": "Good point", "author": "shangxinli", "createdAt": "2020-03-24T14:39:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyODE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4MTY2NQ==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397181665", "bodyText": "this import is not needed", "author": "ggershinsky", "createdAt": "2020-03-24T14:10:58Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.crypto;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.hadoop.BadConfigurationException;\n+import org.apache.parquet.hadoop.api.WriteSupport.WriteContext;\n+import org.apache.parquet.hadoop.util.ConfigurationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+\n+import static org.apache.parquet.Preconditions.checkNotNull;", "originalCommit": "86ac333338813b49d61d86ae125bdcc20bbccc18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNDEwNA==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397204104", "bodyText": "removed.", "author": "shangxinli", "createdAt": "2020-03-24T14:40:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4MTY2NQ=="}], "type": "inlineReview"}, {"oid": "69b192015c818f2f967fa37fc3ddf459903f09a0", "url": "https://github.com/apache/parquet-mr/commit/69b192015c818f2f967fa37fc3ddf459903f09a0", "message": "Address feedback from Gidon", "committedDate": "2020-03-24T14:40:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwNDQ0Nw==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397704447", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * 2. Set configuration of \"parquet.encryption.factory.class\" with the full namespace of this class.\n          \n          \n            \n             * 2. Set configuration of \"parquet.encryption.factory.class\" with the fully qualified name of this class.", "author": "gszadovszky", "createdAt": "2020-03-25T09:15:18Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java", "diffHunk": "@@ -28,19 +28,39 @@\n \n import java.io.IOException;\n \n-import static org.apache.parquet.Preconditions.checkNotNull;\n-\n-public abstract class CryptoPropertiesFactory {\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(CryptoPropertiesFactory.class);\n-  public static final String CRYPTO_FACTORY_CLASS_PROPERTY_NAME = \"parquet.encryption.factory.class\";\n+/**\n+ * CryptoPropertiesFactory interface enables transparent activation of Parquet encryption.\n+ *\n+ * It's customized implementations produce encryption and decryption properties for each Parquet file, using the information\n+ * available in Parquet file writers and readers: file path, file extended schema (in writers only) - and also Hadoop\n+ * configuration properties that can pass custom parameters required by a crypto factory. A factory implementation can\n+ * use or ignore any of these parameters.\n+ *\n+ * The example could be as below.\n+ *\n+ * 1. Write a class to implement CryptoPropertiesFactory.\n+ * 2. Set configuration of \"parquet.encryption.factory.class\" with the full namespace of this class.", "originalCommit": "69b192015c818f2f967fa37fc3ddf459903f09a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcwNjkwNg==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397706906", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *    This class will be invoked when the static method loadFactory() is called.\n          \n          \n            \n             *    The implementation of this interface will be instantiated by {@link #loadFactory(Configuration)}.", "author": "gszadovszky", "createdAt": "2020-03-25T09:19:17Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java", "diffHunk": "@@ -28,19 +28,39 @@\n \n import java.io.IOException;\n \n-import static org.apache.parquet.Preconditions.checkNotNull;\n-\n-public abstract class CryptoPropertiesFactory {\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(CryptoPropertiesFactory.class);\n-  public static final String CRYPTO_FACTORY_CLASS_PROPERTY_NAME = \"parquet.encryption.factory.class\";\n+/**\n+ * CryptoPropertiesFactory interface enables transparent activation of Parquet encryption.\n+ *\n+ * It's customized implementations produce encryption and decryption properties for each Parquet file, using the information\n+ * available in Parquet file writers and readers: file path, file extended schema (in writers only) - and also Hadoop\n+ * configuration properties that can pass custom parameters required by a crypto factory. A factory implementation can\n+ * use or ignore any of these parameters.\n+ *\n+ * The example could be as below.\n+ *\n+ * 1. Write a class to implement CryptoPropertiesFactory.\n+ * 2. Set configuration of \"parquet.encryption.factory.class\" with the full namespace of this class.\n+ *    For example, we can set the configuration in SparkSession as below.\n+ *       SparkSession spark = SparkSession\n+ *                   .config(\"parquet.encryption.factory.class\",\n+ *                    \"xxx.xxx.CryptoPropertiesImpl\")\n+ *\n+ *    This class will be invoked when the static method loadFactory() is called.", "originalCommit": "69b192015c818f2f967fa37fc3ddf459903f09a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcxODkyMQ==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397718921", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return return object with class CryptoPropertiesFactory if user specified the class path and invoking of\n          \n          \n            \n               * the class succeeds, null if user doesn't specify the class path. RunTimeException with type BadConfigurationException\n          \n          \n            \n               * will be thrown if invoking the configured class fails\n          \n          \n            \n               * @return object with class CryptoPropertiesFactory if user specified the class path and invoking of\n          \n          \n            \n               * the class succeeds, null if user doesn't specify the class path\n          \n          \n            \n               * @throws BadConfigurationException if the instantiation of the configured class fails", "author": "gszadovszky", "createdAt": "2020-03-25T09:38:39Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java", "diffHunk": "@@ -28,19 +28,39 @@\n \n import java.io.IOException;\n \n-import static org.apache.parquet.Preconditions.checkNotNull;\n-\n-public abstract class CryptoPropertiesFactory {\n-\n-  private static final Logger LOG = LoggerFactory.getLogger(CryptoPropertiesFactory.class);\n-  public static final String CRYPTO_FACTORY_CLASS_PROPERTY_NAME = \"parquet.encryption.factory.class\";\n+/**\n+ * CryptoPropertiesFactory interface enables transparent activation of Parquet encryption.\n+ *\n+ * It's customized implementations produce encryption and decryption properties for each Parquet file, using the information\n+ * available in Parquet file writers and readers: file path, file extended schema (in writers only) - and also Hadoop\n+ * configuration properties that can pass custom parameters required by a crypto factory. A factory implementation can\n+ * use or ignore any of these parameters.\n+ *\n+ * The example could be as below.\n+ *\n+ * 1. Write a class to implement CryptoPropertiesFactory.\n+ * 2. Set configuration of \"parquet.encryption.factory.class\" with the full namespace of this class.\n+ *    For example, we can set the configuration in SparkSession as below.\n+ *       SparkSession spark = SparkSession\n+ *                   .config(\"parquet.encryption.factory.class\",\n+ *                    \"xxx.xxx.CryptoPropertiesImpl\")\n+ *\n+ *    This class will be invoked when the static method loadFactory() is called.\n+ */\n+public interface CryptoPropertiesFactory {\n \n-  public static CryptoPropertiesFactory loadFactory(Configuration conf) throws IOException {\n-    if (null == conf) {\n-      LOG.debug(\"CryptoPropertiesFactory is not configured - null hadoop config\");\n-      return null;\n-    }\n+  Logger LOG = LoggerFactory.getLogger(CryptoPropertiesFactory.class);\n+  String CRYPTO_FACTORY_CLASS_PROPERTY_NAME = \"parquet.encryption.factory.class\";\n \n+  /**\n+   * Load CryptoPropertiesFactory class specified by CRYPTO_FACTORY_CLASS_PROPERTY_NAME as the path in the configuration\n+   *\n+   * @param conf Configuration where user specifies the class path\n+   * @return return object with class CryptoPropertiesFactory if user specified the class path and invoking of\n+   * the class succeeds, null if user doesn't specify the class path. RunTimeException with type BadConfigurationException\n+   * will be thrown if invoking the configured class fails", "originalCommit": "69b192015c818f2f967fa37fc3ddf459903f09a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMjE4NA==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397722184", "bodyText": "javadoc generation does not like having these tags empty. Please write something to them as well.", "author": "gszadovszky", "createdAt": "2020-03-25T09:43:38Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java", "diffHunk": "@@ -51,20 +71,36 @@ public static CryptoPropertiesFactory loadFactory(Configuration conf) throws IOE\n \n     try {\n       CryptoPropertiesFactory cryptoFactory = (CryptoPropertiesFactory)cryptoPropertiesFactoryClass.newInstance();\n-      cryptoFactory.initialize(conf);\n       return cryptoFactory;\n     } catch (InstantiationException | IllegalAccessException e) {\n       throw new BadConfigurationException(\"could not instantiate CryptoPropertiesFactory class: \"\n         + cryptoPropertiesFactoryClass, e);\n     }\n   }\n \n-  public abstract void initialize(Configuration hadoopConfig);\n-\n-  public abstract FileEncryptionProperties getFileEncryptionProperties(\n-    Configuration fileHadoopConfig, Path tempFilePath,\n-    WriteContext fileWriteContext)  throws IOException;\n+  /**\n+   * Get FileEncryptionProperties object which is created by the implementation of this interface. Please see\n+   * the unit test (TBD) for example\n+   *\n+   * @param fileHadoopConfig Configuration that is used to pass the needed information, e.g. KMS uri\n+   * @param tempFilePath File path of the parquet file being written.\n+   *                     Can be used for AAD prefix creation, key material management, etc.\n+   *                     Implementations must not presume the path is permanent,\n+   *                     as the file can be moved or renamed later\n+   * @param fileWriteContext WriteContext to provide information like schema to build the FileEncryptionProperties\n+   * @return\n+   * @throws IOException", "originalCommit": "69b192015c818f2f967fa37fc3ddf459903f09a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwNzI2OQ==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397907269", "bodyText": "Sounds good", "author": "shangxinli", "createdAt": "2020-03-25T14:40:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMjE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMzM4Mg==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397723382", "bodyText": "Why do we think that an IOException might occur? Would a file read/write suppose to happen in an implementation?", "author": "gszadovszky", "createdAt": "2020-03-25T09:45:28Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java", "diffHunk": "@@ -51,20 +71,36 @@ public static CryptoPropertiesFactory loadFactory(Configuration conf) throws IOE\n \n     try {\n       CryptoPropertiesFactory cryptoFactory = (CryptoPropertiesFactory)cryptoPropertiesFactoryClass.newInstance();\n-      cryptoFactory.initialize(conf);\n       return cryptoFactory;\n     } catch (InstantiationException | IllegalAccessException e) {\n       throw new BadConfigurationException(\"could not instantiate CryptoPropertiesFactory class: \"\n         + cryptoPropertiesFactoryClass, e);\n     }\n   }\n \n-  public abstract void initialize(Configuration hadoopConfig);\n-\n-  public abstract FileEncryptionProperties getFileEncryptionProperties(\n-    Configuration fileHadoopConfig, Path tempFilePath,\n-    WriteContext fileWriteContext)  throws IOException;\n+  /**\n+   * Get FileEncryptionProperties object which is created by the implementation of this interface. Please see\n+   * the unit test (TBD) for example\n+   *\n+   * @param fileHadoopConfig Configuration that is used to pass the needed information, e.g. KMS uri\n+   * @param tempFilePath File path of the parquet file being written.\n+   *                     Can be used for AAD prefix creation, key material management, etc.\n+   *                     Implementations must not presume the path is permanent,\n+   *                     as the file can be moved or renamed later\n+   * @param fileWriteContext WriteContext to provide information like schema to build the FileEncryptionProperties\n+   * @return\n+   * @throws IOException\n+   */\n+  FileEncryptionProperties getFileEncryptionProperties(Configuration fileHadoopConfig, Path tempFilePath,\n+                                                       WriteContext fileWriteContext)  throws IOException;", "originalCommit": "69b192015c818f2f967fa37fc3ddf459903f09a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgxODI2OA==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397818268", "bodyText": "In our implementation, a number of different things can go wrong when creating encryption (decryption) properties, ranging from a failure to communicate with a KMS system, to having a wrong access control token, to missing the required hadoop properties (such as a list of encrypted columns), to failure to write/read separate files that keep the key material. Some of these problems belong to the IO domain, some don't - but my impression was that most of Parquet API exceptions are the IOException, because Parquet is an IO library (file writing/reading).", "author": "ggershinsky", "createdAt": "2020-03-25T12:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMzM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyODAzMg==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397828032", "bodyText": "There is always a question of what the application (that calls Parquet API) can do differently, in an automatic fashion, for different exception types. In this case, I can't see such automatic differentiated response. If the creation of encr/decr properties fails, the only thing to do is to see exception message, and either fix the KMS comms (restart, fix network, ), or provide a valid access token (often manual procedure), or to configure the required parameters, or to fix the filesystem problems, etc.", "author": "ggershinsky", "createdAt": "2020-03-25T12:50:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMzM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwNjM3NA==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397906374", "bodyText": "I see.\nWhat I don't like in IOException in this case is that it is a checked exception so when we call these methods we have to handle them or let them thrown out of the library. I don't think we can do anything useful at handling so we have to throw an exception. We can either let through the IOException in the call stack which can be very painful or even impossible if we don't want to break the existing API or we can wrap the IOException into a runtime exception.\nUsually, the latter is the preferred way in parquet-mr. So why would we expect an IOException from our internal API (even thought it is implemented by our clients) if we will wrap it into our own runtime exception anyway.\nI would suggest expecting a ParquetEncodingException or a ParquetDecodingException or even create specific ones for this case (by extending a ParquetRuntimeException).", "author": "gszadovszky", "createdAt": "2020-03-25T14:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMzM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxMjg3Ng==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397912876", "bodyText": "Sounds good. I'm fine with either option.", "author": "ggershinsky", "createdAt": "2020-03-25T14:47:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMzM4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkyOTI0Mw==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397929243", "bodyText": "I will create ParquetCryptoRuntimeException extends ParquetRuntimeException", "author": "shangxinli", "createdAt": "2020-03-25T15:07:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMzM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMzg5OA==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397723898", "bodyText": "Missing main description, empty return and throws tags.", "author": "gszadovszky", "createdAt": "2020-03-25T09:46:20Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java", "diffHunk": "@@ -51,20 +71,36 @@ public static CryptoPropertiesFactory loadFactory(Configuration conf) throws IOE\n \n     try {\n       CryptoPropertiesFactory cryptoFactory = (CryptoPropertiesFactory)cryptoPropertiesFactoryClass.newInstance();\n-      cryptoFactory.initialize(conf);\n       return cryptoFactory;\n     } catch (InstantiationException | IllegalAccessException e) {\n       throw new BadConfigurationException(\"could not instantiate CryptoPropertiesFactory class: \"\n         + cryptoPropertiesFactoryClass, e);\n     }\n   }\n \n-  public abstract void initialize(Configuration hadoopConfig);\n-\n-  public abstract FileEncryptionProperties getFileEncryptionProperties(\n-    Configuration fileHadoopConfig, Path tempFilePath,\n-    WriteContext fileWriteContext)  throws IOException;\n+  /**\n+   * Get FileEncryptionProperties object which is created by the implementation of this interface. Please see\n+   * the unit test (TBD) for example\n+   *\n+   * @param fileHadoopConfig Configuration that is used to pass the needed information, e.g. KMS uri\n+   * @param tempFilePath File path of the parquet file being written.\n+   *                     Can be used for AAD prefix creation, key material management, etc.\n+   *                     Implementations must not presume the path is permanent,\n+   *                     as the file can be moved or renamed later\n+   * @param fileWriteContext WriteContext to provide information like schema to build the FileEncryptionProperties\n+   * @return\n+   * @throws IOException\n+   */\n+  FileEncryptionProperties getFileEncryptionProperties(Configuration fileHadoopConfig, Path tempFilePath,\n+                                                       WriteContext fileWriteContext)  throws IOException;\n \n-  public abstract FileDecryptionProperties getFileDecryptionProperties(\n-    Configuration hadoopConfig, Path filePath)  throws IOException;\n+  /**\n+   *\n+   * @param hadoopConfig Configuration that is used to pass the needed information, e.g. KMS uri\n+   * @param filePath File path of the parquet file\n+   *                 Can be used for AAD prefix verification, part of key metadata etc\n+   * @return\n+   * @throws IOException\n+   */", "originalCommit": "69b192015c818f2f967fa37fc3ddf459903f09a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxMjQ1Mw==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397912453", "bodyText": "Fixed", "author": "shangxinli", "createdAt": "2020-03-25T14:46:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyMzg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNDM3MQ==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397724371", "bodyText": "See my concerns about IOException above.", "author": "gszadovszky", "createdAt": "2020-03-25T09:47:00Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java", "diffHunk": "@@ -51,20 +71,36 @@ public static CryptoPropertiesFactory loadFactory(Configuration conf) throws IOE\n \n     try {\n       CryptoPropertiesFactory cryptoFactory = (CryptoPropertiesFactory)cryptoPropertiesFactoryClass.newInstance();\n-      cryptoFactory.initialize(conf);\n       return cryptoFactory;\n     } catch (InstantiationException | IllegalAccessException e) {\n       throw new BadConfigurationException(\"could not instantiate CryptoPropertiesFactory class: \"\n         + cryptoPropertiesFactoryClass, e);\n     }\n   }\n \n-  public abstract void initialize(Configuration hadoopConfig);\n-\n-  public abstract FileEncryptionProperties getFileEncryptionProperties(\n-    Configuration fileHadoopConfig, Path tempFilePath,\n-    WriteContext fileWriteContext)  throws IOException;\n+  /**\n+   * Get FileEncryptionProperties object which is created by the implementation of this interface. Please see\n+   * the unit test (TBD) for example\n+   *\n+   * @param fileHadoopConfig Configuration that is used to pass the needed information, e.g. KMS uri\n+   * @param tempFilePath File path of the parquet file being written.\n+   *                     Can be used for AAD prefix creation, key material management, etc.\n+   *                     Implementations must not presume the path is permanent,\n+   *                     as the file can be moved or renamed later\n+   * @param fileWriteContext WriteContext to provide information like schema to build the FileEncryptionProperties\n+   * @return\n+   * @throws IOException\n+   */\n+  FileEncryptionProperties getFileEncryptionProperties(Configuration fileHadoopConfig, Path tempFilePath,\n+                                                       WriteContext fileWriteContext)  throws IOException;\n \n-  public abstract FileDecryptionProperties getFileDecryptionProperties(\n-    Configuration hadoopConfig, Path filePath)  throws IOException;\n+  /**\n+   *\n+   * @param hadoopConfig Configuration that is used to pass the needed information, e.g. KMS uri\n+   * @param filePath File path of the parquet file\n+   *                 Can be used for AAD prefix verification, part of key metadata etc\n+   * @return\n+   * @throws IOException\n+   */\n+  FileDecryptionProperties getFileDecryptionProperties(Configuration hadoopConfig, Path filePath)  throws IOException;", "originalCommit": "69b192015c818f2f967fa37fc3ddf459903f09a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxMjg2MA==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397912860", "bodyText": "fixed", "author": "shangxinli", "createdAt": "2020-03-25T14:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzcyNDM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg1NDE5OA==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397854198", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * It's customized implementations produce encryption and decryption properties for each Parquet file, using the information\n          \n          \n            \n             * It's customized implementations produce encryption and decryption properties for each Parquet file, using the input information", "author": "ggershinsky", "createdAt": "2020-03-25T13:31:13Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.crypto;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.hadoop.BadConfigurationException;\n+import org.apache.parquet.hadoop.api.WriteSupport.WriteContext;\n+import org.apache.parquet.hadoop.util.ConfigurationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+\n+/**\n+ * CryptoPropertiesFactory interface enables transparent activation of Parquet encryption.\n+ *\n+ * It's customized implementations produce encryption and decryption properties for each Parquet file, using the information", "originalCommit": "69b192015c818f2f967fa37fc3ddf459903f09a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg1NDYzMw==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r397854633", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * use or ignore any of these parameters.\n          \n          \n            \n             * use or ignore any of these inputs.\n          \n      \n    \n    \n  \n\nwas a bit misleading, my fault.", "author": "ggershinsky", "createdAt": "2020-03-25T13:31:50Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.crypto;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.hadoop.BadConfigurationException;\n+import org.apache.parquet.hadoop.api.WriteSupport.WriteContext;\n+import org.apache.parquet.hadoop.util.ConfigurationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+\n+/**\n+ * CryptoPropertiesFactory interface enables transparent activation of Parquet encryption.\n+ *\n+ * It's customized implementations produce encryption and decryption properties for each Parquet file, using the information\n+ * available in Parquet file writers and readers: file path, file extended schema (in writers only) - and also Hadoop\n+ * configuration properties that can pass custom parameters required by a crypto factory. A factory implementation can\n+ * use or ignore any of these parameters.", "originalCommit": "69b192015c818f2f967fa37fc3ddf459903f09a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "85d0326c71145fd464bd96d16a2962111fd4ff41", "url": "https://github.com/apache/parquet-mr/commit/85d0326c71145fd464bd96d16a2962111fd4ff41", "message": "Update parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java\n\nCo-Authored-By: Gabor Szadovszky <gabor@apache.org>", "committedDate": "2020-03-25T14:23:21Z", "type": "commit"}, {"oid": "57a995c2417110645140f30dc708a8b72b656307", "url": "https://github.com/apache/parquet-mr/commit/57a995c2417110645140f30dc708a8b72b656307", "message": "Update parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java\n\nCo-Authored-By: Gabor Szadovszky <gabor@apache.org>", "committedDate": "2020-03-25T14:24:08Z", "type": "commit"}, {"oid": "e21d35de5e85f003c8ff72b230bbf31b1c97dafd", "url": "https://github.com/apache/parquet-mr/commit/e21d35de5e85f003c8ff72b230bbf31b1c97dafd", "message": "Update parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java\n\nCo-Authored-By: Gabor Szadovszky <gabor@apache.org>", "committedDate": "2020-03-25T14:38:40Z", "type": "commit"}, {"oid": "fadcf54abae38c14175a8c8f9f7229ac49301520", "url": "https://github.com/apache/parquet-mr/commit/fadcf54abae38c14175a8c8f9f7229ac49301520", "message": "Address feedback round #3", "committedDate": "2020-03-25T14:57:30Z", "type": "commit"}, {"oid": "9bf021e11877cdd79a812ec093c5e63038b58bba", "url": "https://github.com/apache/parquet-mr/commit/9bf021e11877cdd79a812ec093c5e63038b58bba", "message": "Update parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java\n\nCo-Authored-By: ggershinsky <ggershinsky@users.noreply.github.com>", "committedDate": "2020-03-25T14:58:28Z", "type": "commit"}, {"oid": "fd1b10d491aef746b372b091572c90a8784230df", "url": "https://github.com/apache/parquet-mr/commit/fd1b10d491aef746b372b091572c90a8784230df", "message": "Update parquet-hadoop/src/main/java/org/apache/parquet/crypto/CryptoPropertiesFactory.java\n\nCo-Authored-By: ggershinsky <ggershinsky@users.noreply.github.com>", "committedDate": "2020-03-25T14:58:36Z", "type": "commit"}, {"oid": "f72c676c08f52b864e4a81c97767d4400d00c195", "url": "https://github.com/apache/parquet-mr/commit/f72c676c08f52b864e4a81c97767d4400d00c195", "message": "Address feedback round #4", "committedDate": "2020-03-25T15:12:06Z", "type": "commit"}, {"oid": "d72b2a1f0e9d4ca78348c09b28bed2b7fa4ddd14", "url": "https://github.com/apache/parquet-mr/commit/d72b2a1f0e9d4ca78348c09b28bed2b7fa4ddd14", "message": "Split encryption and decryption interface to follow parquet-mr practice and add unit tests", "committedDate": "2020-03-26T15:34:35Z", "type": "commit"}, {"oid": "d72b2a1f0e9d4ca78348c09b28bed2b7fa4ddd14", "url": "https://github.com/apache/parquet-mr/commit/d72b2a1f0e9d4ca78348c09b28bed2b7fa4ddd14", "message": "Split encryption and decryption interface to follow parquet-mr practice and add unit tests", "committedDate": "2020-03-26T15:34:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyMjAwMw==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r399122003", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *                     .config(\"parquet.encryption.factory.class\",\n          \n          \n            \n             *                     .config(\"parquet.crypto.factory.class\",", "author": "gszadovszky", "createdAt": "2020-03-27T09:06:08Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/DecryptionPropertiesFactory.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.crypto;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.hadoop.BadConfigurationException;\n+import org.apache.parquet.hadoop.util.ConfigurationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * DecryptionPropertiesFactory interface enables transparent activation of Parquet decryption.\n+ *\n+ * It's customized implementations produce decryption properties for each Parquet file, using the input information\n+ * available in Parquet file readers: file path and Hadoop configuration properties that can pass custom parameters\n+ * required by a crypto factory. A factory implementation can use or ignore any of these inputs.\n+ *\n+ * The example usage could be as below.\n+ *   1. Write a class to implement DecryptionPropertiesFactory.\n+ *   2. Set configuration of \"parquet.crypto.factory.class\" with the fully qualified name of this class.\n+ *      For example, we can set the configuration in SparkSession as below.\n+ *         SparkSession spark = SparkSession\n+ *                     .config(\"parquet.encryption.factory.class\",", "originalCommit": "d72b2a1f0e9d4ca78348c09b28bed2b7fa4ddd14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyMjE4OQ==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r399122189", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *                     .config(\"parquet.encryption.factory.class\",\n          \n          \n            \n             *                     .config(\"parquet.crypto.factory.class\",", "author": "gszadovszky", "createdAt": "2020-03-27T09:06:31Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/EncryptionPropertiesFactory.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.crypto;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.hadoop.BadConfigurationException;\n+import org.apache.parquet.hadoop.api.WriteSupport.WriteContext;\n+import org.apache.parquet.hadoop.util.ConfigurationUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * EncryptionPropertiesFactory interface enables transparent activation of Parquet encryption.\n+ *\n+ * It's customized implementations produce encryption properties for each Parquet file, using the input information\n+ * available in Parquet file writers: file path, file extended schema - and also Hadoop configuration properties that\n+ * can pass custom parameters required by a crypto factory. A factory implementation can use or ignore any of these\n+ * inputs.\n+ *\n+ * The example usage could be as below.\n+ *   1. Write a class to implement EncryptionPropertiesFactory.\n+ *   2. Set configuration of \"parquet.crypto.factory.class\" with the fully qualified name of this class.\n+ *      For example, we can set the configuration in SparkSession as below.\n+ *         SparkSession spark = SparkSession\n+ *                     .config(\"parquet.encryption.factory.class\",", "originalCommit": "d72b2a1f0e9d4ca78348c09b28bed2b7fa4ddd14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyMzUzMw==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r399123533", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * thrown when a encryption or decryption operation problem occured\n          \n          \n            \n             * Thrown when an encryption or decryption operation problem is occurred", "author": "gszadovszky", "createdAt": "2020-03-27T09:08:58Z", "path": "parquet-hadoop/src/main/java/org/apache/parquet/crypto/ParquetCryptoRuntimeException.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.parquet.crypto;\n+\n+import org.apache.parquet.ParquetRuntimeException;\n+\n+/**\n+ * thrown when a encryption or decryption operation problem occured", "originalCommit": "d72b2a1f0e9d4ca78348c09b28bed2b7fa4ddd14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEzMTM5Nw==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r399131397", "bodyText": "As per java code style the expected order should be public static final and the names should be upper case.", "author": "gszadovszky", "createdAt": "2020-03-27T09:22:49Z", "path": "parquet-hadoop/src/test/java/org/apache/parquet/crypto/SampleDecryptionPropertiesFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.crypto;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.hadoop.metadata.ColumnPath;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class SampleDecryptionPropertiesFactory implements DecryptionPropertiesFactory {\n+\n+  public final static byte[] footerKey = {0x01, 0x02, 0x03, 0x4, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,\n+    0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};\n+  public final static ColumnPath col1 = ColumnPath.fromDotString(\"col_1\");\n+  public final static byte[] col1Key = {0x02, 0x03, 0x4, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n+    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11};\n+  public final static ColumnDecryptionProperties col1DecrProperties = ColumnDecryptionProperties.builder(col1.toDotString())\n+    .withKey(col1Key).build();\n+  public final static ColumnPath col2 = ColumnPath.fromDotString(\"col_2\");\n+  public final static byte[] col2Key = {0x03, 0x4, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,\n+     0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12};\n+  public final static ColumnDecryptionProperties col2DecrProperties = ColumnDecryptionProperties.builder(col2.toDotString())\n+    .withKey(col2Key).build();", "originalCommit": "d72b2a1f0e9d4ca78348c09b28bed2b7fa4ddd14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxOTc4Ng==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r399819786", "bodyText": "Fixed", "author": "shangxinli", "createdAt": "2020-03-29T16:19:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEzMTM5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEzMTYwOA==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r399131608", "bodyText": "see above", "author": "gszadovszky", "createdAt": "2020-03-27T09:23:12Z", "path": "parquet-hadoop/src/test/java/org/apache/parquet/crypto/SampleEncryptionPropertiesFactory.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.parquet.crypto;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.parquet.hadoop.api.WriteSupport;\n+import org.apache.parquet.hadoop.metadata.ColumnPath;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class SampleEncryptionPropertiesFactory implements EncryptionPropertiesFactory {\n+\n+  public final static byte[] footerKey = {0x01, 0x02, 0x03, 0x4, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,\n+    0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10};\n+  public final static ColumnPath col1 = ColumnPath.fromDotString(\"col_1\");\n+  public final static byte[] col1Key = {0x02, 0x03, 0x4, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n+    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11};\n+  public final static ColumnEncryptionProperties col1EncrProperties = ColumnEncryptionProperties.builder(\n+    col1.toDotString()).withKey(col1Key).build();\n+  public final static ColumnPath col2 = ColumnPath.fromDotString(\"col_2\");\n+  public final static byte[] col2Key = {0x03, 0x4, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,\n+     0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12};\n+  public final static ColumnEncryptionProperties col2EncrProperties = ColumnEncryptionProperties.builder(\n+    col2.toDotString()).withKey(col2Key).build();", "originalCommit": "d72b2a1f0e9d4ca78348c09b28bed2b7fa4ddd14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxOTc5Mw==", "url": "https://github.com/apache/parquet-mr/pull/769#discussion_r399819793", "bodyText": "Fixed", "author": "shangxinli", "createdAt": "2020-03-29T16:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEzMTYwOA=="}], "type": "inlineReview"}, {"oid": "c2edf3ddddf51c9b918e7b155560b1d37f39dd4f", "url": "https://github.com/apache/parquet-mr/commit/c2edf3ddddf51c9b918e7b155560b1d37f39dd4f", "message": "Update parquet-hadoop/src/main/java/org/apache/parquet/crypto/DecryptionPropertiesFactory.java\n\nCo-Authored-By: Gabor Szadovszky <gabor@apache.org>", "committedDate": "2020-03-27T15:18:58Z", "type": "commit"}, {"oid": "b22352573b3534be71361226b8014b41a72d0991", "url": "https://github.com/apache/parquet-mr/commit/b22352573b3534be71361226b8014b41a72d0991", "message": "Update parquet-hadoop/src/main/java/org/apache/parquet/crypto/ParquetCryptoRuntimeException.java\n\nCo-Authored-By: Gabor Szadovszky <gabor@apache.org>", "committedDate": "2020-03-27T15:19:28Z", "type": "commit"}, {"oid": "60167c04026c6ddb115300d2301f507a08068f19", "url": "https://github.com/apache/parquet-mr/commit/60167c04026c6ddb115300d2301f507a08068f19", "message": "Update parquet-hadoop/src/main/java/org/apache/parquet/crypto/EncryptionPropertiesFactory.java\n\nCo-Authored-By: Gabor Szadovszky <gabor@apache.org>", "committedDate": "2020-03-27T15:20:12Z", "type": "commit"}, {"oid": "8bb18eb4995352c3d7b7dc7597cab23204d72ddf", "url": "https://github.com/apache/parquet-mr/commit/8bb18eb4995352c3d7b7dc7597cab23204d72ddf", "message": "Change varaible names in test to follow Java coding practice", "committedDate": "2020-03-28T19:42:41Z", "type": "commit"}, {"oid": "8bb18eb4995352c3d7b7dc7597cab23204d72ddf", "url": "https://github.com/apache/parquet-mr/commit/8bb18eb4995352c3d7b7dc7597cab23204d72ddf", "message": "Change varaible names in test to follow Java coding practice", "committedDate": "2020-03-28T19:42:41Z", "type": "forcePushed"}]}