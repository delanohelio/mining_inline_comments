{"pr_number": 3463, "pr_title": "[7.44.x] DROOLS-5707: [DMN Designer] Multiple DRDs support - Information requirements are duplicated into the DMN XML", "pr_createdAt": "2020-10-22T04:26:10Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3463", "timeline": [{"oid": "6aa65c532f7f69a571afbde047faa33cf80daeba", "url": "https://github.com/kiegroup/kie-wb-common/commit/6aa65c532f7f69a571afbde047faa33cf80daeba", "message": " - [7.44.x] DROOLS-5707: [DMN Designer] Multiple DRDs support - Information requirements are duplicated into the DMN XML\n\n - [7.44.x] DROOLS-5749: [DMN Designer] Multiple DRDs support - When users open a DMN with duplicated information requirements, the marshaller doesn't fix it", "committedDate": "2020-10-22T03:37:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA5MDc0Ng==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3463#discussion_r510090746", "bodyText": "Could we add here second argument and combine the lists like:\nprivate <T extends JSITDMNElement> List<T> distinct(final List<T> list, final List<T> secondList) {\n    List<T> toBeProcessed = new ArrayList(list);\n    toBeProcessed.addAll(secondList);\n    // the rest is the same, just process the combined list\n    final Map<String, T> map = new HashMap<>();\n    forEach(toBeProcessed, item -> {\n        map.putIfAbsent(item.getId(), Js.uncheckedCast(item));\n    });\n    return new ArrayList<>(map.values());\n}\n\nThe usage then wouldn't need to first to invoke addAllAuthorityRequirement and then retrospectively filtering and setting using setAuthorityRequirement.\nResulting in a single call for each requirement type\nexistingKnowledgeSource.setAuthorityRequirement(\n    distinct(\n        existingKnowledgeSource.getAuthorityRequirement(),\n        nodeKnowledgeSource.getAuthorityRequirement()\n    )\n);\n\nwhich is IMO nicer than\nexistingKnowledgeSource.addAllAuthorityRequirement(nodeKnowledgeSource.getAuthorityRequirement().toArray(new JSITAuthorityRequirement[0]));\nexistingKnowledgeSource.setAuthorityRequirement(distinct(existingKnowledgeSource.getAuthorityRequirement()));", "author": "jstastny-cz", "createdAt": "2020-10-22T11:38:17Z", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/marshaller/marshall/DMNMarshaller.java", "diffHunk": "@@ -355,33 +365,41 @@ private void mergeNodeRequirements(final JSITDRGElement node,\n             final JSITBusinessKnowledgeModel existingBkm = Js.uncheckedCast(existingDRGElement);\n             final JSITBusinessKnowledgeModel nodeBkm = Js.uncheckedCast(node);\n \n-            final List<JSITAuthorityRequirement> authorityRequirement = nodeBkm.getAuthorityRequirement();\n-            final List<JSITKnowledgeRequirement> knowledgeRequirement = nodeBkm.getKnowledgeRequirement();\n+            existingBkm.addAllAuthorityRequirement(nodeBkm.getAuthorityRequirement().toArray(new JSITAuthorityRequirement[0]));\n+            existingBkm.addAllKnowledgeRequirement(nodeBkm.getKnowledgeRequirement().toArray(new JSITKnowledgeRequirement[0]));\n \n-            existingBkm.addAllAuthorityRequirement(authorityRequirement.toArray(new JSITAuthorityRequirement[0]));\n-            existingBkm.addAllKnowledgeRequirement(knowledgeRequirement.toArray(new JSITKnowledgeRequirement[0]));\n+            existingBkm.setAuthorityRequirement(distinct(existingBkm.getAuthorityRequirement()));\n+            existingBkm.setKnowledgeRequirement(distinct(existingBkm.getKnowledgeRequirement()));\n         } else if (instanceOfDecision(node)) {\n \n             final JSITDecision existingDecision = Js.uncheckedCast(existingDRGElement);\n             final JSITDecision nodeDecision = Js.uncheckedCast(node);\n \n-            final List<JSITAuthorityRequirement> authorityRequirement = nodeDecision.getAuthorityRequirement();\n-            final List<JSITInformationRequirement> informationRequirement = nodeDecision.getInformationRequirement();\n-            final List<JSITKnowledgeRequirement> knowledgeRequirement = nodeDecision.getKnowledgeRequirement();\n+            existingDecision.addAllAuthorityRequirement(nodeDecision.getAuthorityRequirement().toArray(new JSITAuthorityRequirement[0]));\n+            existingDecision.addAllInformationRequirement(nodeDecision.getInformationRequirement().toArray(new JSITInformationRequirement[0]));\n+            existingDecision.addAllKnowledgeRequirement(nodeDecision.getKnowledgeRequirement().toArray(new JSITKnowledgeRequirement[0]));\n \n-            existingDecision.addAllAuthorityRequirement(authorityRequirement.toArray(new JSITAuthorityRequirement[0]));\n-            existingDecision.addAllInformationRequirement(informationRequirement.toArray(new JSITInformationRequirement[0]));\n-            existingDecision.addAllKnowledgeRequirement(knowledgeRequirement.toArray(new JSITKnowledgeRequirement[0]));\n+            existingDecision.setAuthorityRequirement(distinct(existingDecision.getAuthorityRequirement()));\n+            existingDecision.setInformationRequirement(distinct(existingDecision.getInformationRequirement()));\n+            existingDecision.setKnowledgeRequirement(distinct(existingDecision.getKnowledgeRequirement()));\n         } else if (instanceOfKnowledgeSource(node)) {\n \n             final JSITKnowledgeSource existingKnowledgeSource = Js.uncheckedCast(existingDRGElement);\n             final JSITKnowledgeSource nodeKnowledgeSource = Js.uncheckedCast(node);\n \n-            final List<JSITAuthorityRequirement> authorityRequirement = nodeKnowledgeSource.getAuthorityRequirement();\n-            existingKnowledgeSource.addAllAuthorityRequirement(authorityRequirement.toArray(new JSITAuthorityRequirement[0]));\n+            existingKnowledgeSource.addAllAuthorityRequirement(nodeKnowledgeSource.getAuthorityRequirement().toArray(new JSITAuthorityRequirement[0]));\n+            existingKnowledgeSource.setAuthorityRequirement(distinct(existingKnowledgeSource.getAuthorityRequirement()));\n         }\n     }\n \n+    private <T extends JSITDMNElement> List<T> distinct(final List<T> list) {", "originalCommit": "6aa65c532f7f69a571afbde047faa33cf80daeba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyNTUxMQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3463#discussion_r510125511", "bodyText": "Nice enhancement. Thanks, @jstastny-cz!", "author": "karreiro", "createdAt": "2020-10-22T12:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA5MDc0Ng=="}], "type": "inlineReview"}, {"oid": "e32b250a489a54c30de9e4614471c04644e04029", "url": "https://github.com/kiegroup/kie-wb-common/commit/e32b250a489a54c30de9e4614471c04644e04029", "message": " - Simplify 'mergeNodeRequirements' (reviewer: Jan)", "committedDate": "2020-10-22T12:38:46Z", "type": "commit"}, {"oid": "e32b250a489a54c30de9e4614471c04644e04029", "url": "https://github.com/kiegroup/kie-wb-common/commit/e32b250a489a54c30de9e4614471c04644e04029", "message": " - Simplify 'mergeNodeRequirements' (reviewer: Jan)", "committedDate": "2020-10-22T12:38:46Z", "type": "forcePushed"}]}