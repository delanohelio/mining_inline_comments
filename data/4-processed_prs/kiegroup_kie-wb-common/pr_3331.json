{"pr_number": 3331, "pr_title": "AF-2552 : [Data Modeler] Cannot save file if it was moved from other package", "pr_createdAt": "2020-06-16T11:37:26Z", "pr_url": "https://github.com/kiegroup/kie-wb-common/pull/3331", "timeline": [{"oid": "ec3be1856a06b818c07e44635504a2f1771c0658", "url": "https://github.com/kiegroup/kie-wb-common/commit/ec3be1856a06b818c07e44635504a2f1771c0658", "message": "AF-2552 : [Data Modeler] Cannot save file if it was moved from other package\n\n * Command to be execute on saveFile()\n\n * Updating VersionRecordManager and originalSourceHash after successful save operation", "committedDate": "2020-06-30T18:05:15Z", "type": "forcePushed"}, {"oid": "cd5a27f5e745320e0dc7901d40e48be12bd6772a", "url": "https://github.com/kiegroup/kie-wb-common/commit/cd5a27f5e745320e0dc7901d40e48be12bd6772a", "message": "AF-2552 : [Data Modeler] Cannot save file if it was moved from other package", "committedDate": "2020-07-15T07:33:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4NTA3MA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3331#discussion_r455985070", "bodyText": "I would put this if block at the beginning of the method because there is no need to execute getModule and getPackage if path does not exist.", "author": "caponetto", "createdAt": "2020-07-16T18:23:11Z", "path": "kie-wb-common-screens/kie-wb-common-data-modeller/kie-wb-common-data-modeller-backend/src/main/java/org/kie/workbench/common/screens/datamodeller/backend/server/indexing/JavaFileIndexer.java", "diffHunk": "@@ -102,6 +102,10 @@ public IndexBuilder fillIndexBuilder(final Path path) throws Exception {\n             return null;\n         }\n \n+        if (!ioService.exists(path)) {", "originalCommit": "cd5a27f5e745320e0dc7901d40e48be12bd6772a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyNzk3Nw==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3331#discussion_r456527977", "bodyText": "Hi @caponetto , thanks for the suggestion. it's done.", "author": "akumar074", "createdAt": "2020-07-17T15:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4NTA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4NTczNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3331#discussion_r455985736", "bodyText": "Consider adding a log message and creating a unit test that exercises this new condition.", "author": "caponetto", "createdAt": "2020-07-16T18:24:16Z", "path": "kie-wb-common-screens/kie-wb-common-data-modeller/kie-wb-common-data-modeller-backend/src/main/java/org/kie/workbench/common/screens/datamodeller/backend/server/indexing/JavaFileIndexer.java", "diffHunk": "@@ -102,6 +102,10 @@ public IndexBuilder fillIndexBuilder(final Path path) throws Exception {\n             return null;\n         }\n \n+        if (!ioService.exists(path)) {", "originalCommit": "cd5a27f5e745320e0dc7901d40e48be12bd6772a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyOTk2Mg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3331#discussion_r456529962", "bodyText": "Hey @caponetto , I have added the log here. I am looking into the unit tests, but not sure how indexer tests are done right now. I will update it here.", "author": "akumar074", "createdAt": "2020-07-17T15:55:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4NTczNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4ODYwOQ==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3331#discussion_r455988609", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                  () -> getSaveFileCommand(newTypeInfo).execute(),\n          \n          \n            \n                                                  getSaveFileCommand(newTypeInfo),\n          \n      \n    \n    \n  \n\nIt makes more sense to pass the function itself since it returns a Command.\nSame for the others below.", "author": "caponetto", "createdAt": "2020-07-16T18:29:03Z", "path": "kie-wb-common-screens/kie-wb-common-data-modeller/kie-wb-common-data-modeller-client/src/main/java/org/kie/workbench/common/screens/datamodeller/client/DataModelerScreenPresenter.java", "diffHunk": "@@ -545,20 +545,20 @@ private void saveFile(final JavaTypeInfo newTypeInfo) {\n         if (hasPackageNameChanged(newTypeInfo)) {\n             view.showYesNoCancelPopup(CommonConstants.INSTANCE.Information(),\n                                       Constants.INSTANCE.modelEditor_confirm_file_package_refactoring(newTypeInfo.getPackageName()),\n-                                      () -> getSaveFileCommand(newTypeInfo),\n+                                      () -> getSaveFileCommand(newTypeInfo).execute(),", "originalCommit": "cd5a27f5e745320e0dc7901d40e48be12bd6772a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyODMwMg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3331#discussion_r456528302", "bodyText": "Done.", "author": "akumar074", "createdAt": "2020-07-17T15:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4ODYwOQ=="}], "type": "inlineReview"}, {"oid": "bffd1e7320c26ada258a87cb06140a05084bdf20", "url": "https://github.com/kiegroup/kie-wb-common/commit/bffd1e7320c26ada258a87cb06140a05084bdf20", "message": "AF-2552 : [Data Modeler] Cannot save file if it was moved from other package", "committedDate": "2020-07-17T15:48:35Z", "type": "forcePushed"}, {"oid": "afa889d04e5db8410df473345e2d22e711bfaeab", "url": "https://github.com/kiegroup/kie-wb-common/commit/afa889d04e5db8410df473345e2d22e711bfaeab", "message": "AF-2552 : [Data Modeler] Cannot save file if it was moved from other package", "committedDate": "2020-07-18T12:41:00Z", "type": "forcePushed"}, {"oid": "03ccfb85d76143a354233aeb6463493e91afbf1a", "url": "https://github.com/kiegroup/kie-wb-common/commit/03ccfb85d76143a354233aeb6463493e91afbf1a", "message": "AF-2552 : [Data Modeler] Cannot save file if it was moved from other package", "committedDate": "2020-07-21T13:53:58Z", "type": "commit"}, {"oid": "e7a7ec4307ed3b9520c841af3737a1d8d2ab3cee", "url": "https://github.com/kiegroup/kie-wb-common/commit/e7a7ec4307ed3b9520c841af3737a1d8d2ab3cee", "message": "AF-2552 : [Data Modeler] Cannot save file if it was moved from other package", "committedDate": "2020-07-21T13:53:58Z", "type": "forcePushed"}, {"oid": "720ecbba9784069f86086128285423cdcee60838", "url": "https://github.com/kiegroup/kie-wb-common/commit/720ecbba9784069f86086128285423cdcee60838", "message": "AF-2552 : [Data Modeler] Cannot save file if it was moved from other package", "committedDate": "2020-07-21T13:59:06Z", "type": "commit"}, {"oid": "720ecbba9784069f86086128285423cdcee60838", "url": "https://github.com/kiegroup/kie-wb-common/commit/720ecbba9784069f86086128285423cdcee60838", "message": "AF-2552 : [Data Modeler] Cannot save file if it was moved from other package", "committedDate": "2020-07-21T13:59:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MjkyNg==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3331#discussion_r458142926", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.kie.workbench.common.screens.datamodeller.backend.server.indexing;\n          \n          \n            \n            \n          \n          \n            \n            import org.junit.Assert;\n          \n          \n            \n            import org.kie.workbench.common.services.refactoring.backend.server.indexing.IndexBuilder;\n          \n          \n            \n            import org.uberfire.java.nio.file.Path;\n          \n          \n            \n            \n          \n          \n            \n            import org.junit.Test;\n          \n          \n            \n            import org.mockito.Mockito;\n          \n          \n            \n            import org.uberfire.io.IOService;\n          \n          \n            \n            \n          \n          \n            \n            public class JavaFileIndexerTest {\n          \n          \n            \n            \n          \n          \n            \n                @Test\n          \n          \n            \n                public void testFillIndexBuilderWithUnavailablePath () throws Exception {\n          \n          \n            \n                    final IOService ioService = Mockito.mock(IOService.class);\n          \n          \n            \n                    final JavaFileIndexer indexer = Mockito.mock(JavaFileIndexer.class);\n          \n          \n            \n                    final Path mockPath = Mockito.mock(Path.class);\n          \n          \n            \n                    Mockito.when(ioService.exists(mockPath)).thenReturn(false);\n          \n          \n            \n                    final IndexBuilder builder = indexer.fillIndexBuilder(mockPath);\n          \n          \n            \n                    Assert.assertNull(builder);\n          \n          \n            \n                }\n          \n          \n            \n            }\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             *\n          \n          \n            \n             * Licensed under the Apache License, Version 2.0 (the \"License\");\n          \n          \n            \n             * you may not use this file except in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *     http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing, software\n          \n          \n            \n             * distributed under the License is distributed on an \"AS IS\" BASIS,\n          \n          \n            \n             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n          \n          \n            \n             * See the License for the specific language governing permissions and\n          \n          \n            \n             * limitations under the License.\n          \n          \n            \n             */\n          \n          \n            \n            \n          \n          \n            \n            package org.kie.workbench.common.screens.datamodeller.backend.server.indexing;\n          \n          \n            \n            \n          \n          \n            \n            import org.junit.Test;\n          \n          \n            \n            import org.junit.runner.RunWith;\n          \n          \n            \n            import org.mockito.InjectMocks;\n          \n          \n            \n            import org.mockito.Mock;\n          \n          \n            \n            import org.mockito.runners.MockitoJUnitRunner;\n          \n          \n            \n            import org.uberfire.io.IOService;\n          \n          \n            \n            import org.uberfire.java.nio.file.Path;\n          \n          \n            \n            \n          \n          \n            \n            import static org.junit.Assert.assertNull;\n          \n          \n            \n            import static org.mockito.Mockito.mock;\n          \n          \n            \n            import static org.mockito.Mockito.when;\n          \n          \n            \n            \n          \n          \n            \n            @RunWith(MockitoJUnitRunner.class)\n          \n          \n            \n            public class JavaFileIndexerTest {\n          \n          \n            \n            \n          \n          \n            \n                @Mock\n          \n          \n            \n                private IOService ioService;\n          \n          \n            \n            \n          \n          \n            \n                @InjectMocks\n          \n          \n            \n                private JavaFileIndexer indexer;\n          \n          \n            \n            \n          \n          \n            \n                @Test\n          \n          \n            \n                public void testFillIndexBuilderWithUnavailablePath() throws Exception {\n          \n          \n            \n                    final Path mockPath = mock(Path.class);\n          \n          \n            \n            \n          \n          \n            \n                    when(ioService.exists(mockPath)).thenReturn(false);\n          \n          \n            \n            \n          \n          \n            \n                    assertNull(indexer.fillIndexBuilder(mockPath));\n          \n          \n            \n                }\n          \n          \n            \n            }\n          \n      \n    \n    \n  \n\nConsider this code as a suggestion.\nI've simplified things a little bit and also added the copyright header.", "author": "caponetto", "createdAt": "2020-07-21T14:30:57Z", "path": "kie-wb-common-screens/kie-wb-common-data-modeller/kie-wb-common-data-modeller-backend/src/test/java/org/kie/workbench/common/screens/datamodeller/backend/server/indexing/JavaFileIndexerTest.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.kie.workbench.common.screens.datamodeller.backend.server.indexing;\n+\n+import org.junit.Assert;\n+import org.kie.workbench.common.services.refactoring.backend.server.indexing.IndexBuilder;\n+import org.uberfire.java.nio.file.Path;\n+\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.uberfire.io.IOService;\n+\n+public class JavaFileIndexerTest {\n+\n+    @Test\n+    public void testFillIndexBuilderWithUnavailablePath () throws Exception {\n+        final IOService ioService = Mockito.mock(IOService.class);\n+        final JavaFileIndexer indexer = Mockito.mock(JavaFileIndexer.class);\n+        final Path mockPath = Mockito.mock(Path.class);\n+        Mockito.when(ioService.exists(mockPath)).thenReturn(false);\n+        final IndexBuilder builder = indexer.fillIndexBuilder(mockPath);\n+        Assert.assertNull(builder);\n+    }\n+}", "originalCommit": "720ecbba9784069f86086128285423cdcee60838", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2NTczOA==", "url": "https://github.com/kiegroup/kie-wb-common/pull/3331#discussion_r458265738", "bodyText": "Thanks @caponetto , I have added the copyright and proposed chnages. :)", "author": "akumar074", "createdAt": "2020-07-21T17:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MjkyNg=="}], "type": "inlineReview"}, {"oid": "ed60b49d9a03ba081ccc2b725e7f979847f9d7e7", "url": "https://github.com/kiegroup/kie-wb-common/commit/ed60b49d9a03ba081ccc2b725e7f979847f9d7e7", "message": "AF-2552 : [Data Modeler] Cannot save file if it was moved from other package", "committedDate": "2020-07-21T17:20:40Z", "type": "commit"}, {"oid": "3b5c89c0c9d20dc231420dc94dce7281b35969b8", "url": "https://github.com/kiegroup/kie-wb-common/commit/3b5c89c0c9d20dc231420dc94dce7281b35969b8", "message": "AF-2552 : [Data Modeler] Cannot save file if it was moved from other package", "committedDate": "2020-07-21T18:55:13Z", "type": "commit"}]}