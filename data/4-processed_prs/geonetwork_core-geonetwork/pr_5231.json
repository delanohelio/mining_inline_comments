{"pr_number": 5231, "pr_title": "Updated validation api so that it supports working copy and fixed other validation bugs", "pr_createdAt": "2020-12-02T16:11:46Z", "pr_url": "https://github.com/geonetwork/core-geonetwork/pull/5231", "timeline": [{"oid": "7fd2ac6c7ebd312fd4d3a43f7fa183c81228e65e", "url": "https://github.com/geonetwork/core-geonetwork/commit/7fd2ac6c7ebd312fd4d3a43f7fa183c81228e65e", "message": "Updated validation api so that it supports passing the approved flag so that it is possible to validate approved records only when workflow is enabled and there is a working copy.\nAlso updated the report so that it indicates uuid of the record and if it is a draft or not.  This also help clarify the report so that we know what record is valid/invalid.\nAlso fixed bug where numberOfRecords was set to \"0\" in validate api", "committedDate": "2020-12-02T13:16:06Z", "type": "commit"}, {"oid": "f161024c3552edec5d1e142c5f450371f145646b", "url": "https://github.com/geonetwork/core-geonetwork/commit/f161024c3552edec5d1e142c5f450371f145646b", "message": "Fixed validation bug - it was only checking for the existence of the report instead of check if the report contained failedAssert or failedSchematronVerification errors.\nSo if the report only contained assert that passed, it was still returning that the record was invalid.", "committedDate": "2020-12-02T16:08:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4OTkxMQ==", "url": "https://github.com/geonetwork/core-geonetwork/pull/5231#discussion_r539989911", "bodyText": "This check is not correct, when created a new metadata the record is stored in the Metadata table, not in the MetadataDraft table.\nmetadataRepository.findAllByUuid(uuid) should return 1 record if the metadata is approved or is draft, but never published and 2 records if the metadata is published and also has a draft copy. Not really optimal, but maybe can be used these conditions for the checks.", "author": "josegar74", "createdAt": "2020-12-10T09:00:43Z", "path": "services/src/main/java/org/fao/geonet/api/processing/ValidateApi.java", "diffHunk": "@@ -183,27 +188,40 @@ public SimpleMetadataProcessingReport validateRecords(\n             ServiceContext serviceContext = ApiUtils.createServiceContext(request);\n \n             Set<String> records = ApiUtils.getUuidsParameterOrSelection(uuids, bucket, userSession);\n+            report.setTotalRecords(records.size());\n \n             for (String uuid : records) {\n-                if (!metadataRepository.existsMetadataUuid(uuid)) {\n-                    report.incrementNullRecords();\n-                }\n+                int loopConditionCount = 0;\n                 for (AbstractMetadata record : metadataRepository.findAllByUuid(uuid)) {\n-                    if (!accessMan.canEdit(serviceContext, String.valueOf(record.getId()))) {\n-                        report.addNotEditableMetadataId(record.getId());\n-                    } else {\n-                        boolean isValid = validator.doValidate(record, serviceContext.getLanguage());\n-                        if (isValid) {\n-                            report.addMetadataInfos(record.getId(), \"Is valid\");\n-                            new RecordValidationTriggeredEvent(record.getId(), ApiUtils.getUserSession(request.getSession()).getUserIdAsInt(), \"1\").publish(applicationContext);\n+                    if (approved == null ||\n+                        (approved == true && !(record instanceof MetadataDraft)) ||\n+                        (approved == false && record instanceof MetadataDraft)) {", "originalCommit": "f161024c3552edec5d1e142c5f450371f145646b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQxOTg3MA==", "url": "https://github.com/geonetwork/core-geonetwork/pull/5231#discussion_r540419870", "bodyText": "Thinking of it some more I think I was trying to merger draft and approved into one and I need to use them separately.\nI will modify the code so that approved=true only checks for approved records and approved=false checks for working copy.\nDraft will also be a different check - which I think means not approved and not published.\nI will add some checks to the metadatautil for checking is a metadata records isApproved, isPublished and isDraft.\nI will push some changes for this shortly.", "author": "ianwallen", "createdAt": "2020-12-10T18:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk4OTkxMQ=="}], "type": "inlineReview"}, {"oid": "57a9da624a054bfef911f3cfb3fdb51984226b7a", "url": "https://github.com/geonetwork/core-geonetwork/commit/57a9da624a054bfef911f3cfb3fdb51984226b7a", "message": "Fix bug with not detecting approved draft correctly.\n    Add new function to test if Published Approved or Draft\n    Added approved to the report.", "committedDate": "2020-12-10T21:39:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIyMDY0NA==", "url": "https://github.com/geonetwork/core-geonetwork/pull/5231#discussion_r544220644", "bodyText": "Update the message to approved instead of  draft", "author": "josegar74", "createdAt": "2020-12-16T11:24:56Z", "path": "services/src/main/java/org/fao/geonet/api/processing/report/MetadataProcessingReport.java", "diffHunk": "@@ -89,39 +94,88 @@ public MetadataProcessingReport() {\n         return metadataErrors;\n     }\n \n-    public synchronized void addMetadataError(int metadataId, Exception error) {\n+    public synchronized void addMetadataError(int metadataId, String metadataUUID, boolean draft, boolean approved,\n+                                              Exception error) {\n+        Report errorReport = new ErrorReport(error);\n+        errorReport.setUuid(metadataUUID);\n+        errorReport.setDraft(draft);\n+        errorReport.setApproved(approved);\n         if (this.metadataErrors.get(metadataId) == null) {\n             List<Report> errors = new ArrayList<>();\n-            errors.add(new ErrorReport(error));\n+            errors.add(errorReport);\n             this.metadataErrors.put(metadataId, errors);\n         } else {\n-            this.metadataErrors.get(metadataId).add(new ErrorReport(error));\n+            this.metadataErrors.get(metadataId).add(errorReport);\n         }\n     }\n \n-    public synchronized void addMetadataError(int metadataId, String error) {\n+    public void addMetadataError(AbstractMetadata metadata, Exception error) {\n+        addMetadataError(metadata.getId(), metadata.getUuid(), isMetadataDraft(metadata.getId()),\n+            isMetadataApproved(metadata.getId()), error);\n+    }\n+\n+    public synchronized void addMetadataError(int metadataId, String metadataUUID, boolean draft, boolean approved,\n+                                              String error) {\n+        Report errorReport = new ErrorReport(error);\n+        errorReport.setUuid(metadataUUID);\n+        errorReport.setDraft(draft);\n+        errorReport.setApproved(approved);\n         if (this.metadataErrors.get(metadataId) == null) {\n             List<Report> errors = new ArrayList<>();\n-            errors.add(new ErrorReport(error));\n+            errors.add(errorReport);\n             this.metadataErrors.put(metadataId, errors);\n         } else {\n-            this.metadataErrors.get(metadataId).add(new ErrorReport(error));\n+            this.metadataErrors.get(metadataId).add(errorReport);\n         }\n     }\n \n+    public void addMetadataError(AbstractMetadata metadata, String error) {\n+        addMetadataError(metadata.getId(), metadata.getUuid(), isMetadataDraft(metadata.getId()),\n+            isMetadataApproved(metadata.getId()), error);\n+    }\n+\n     @XmlElement(name = \"infos\")\n     public Map<Integer, List<InfoReport>> getMetadataInfos() {\n         return metadataInfos;\n     }\n \n-    public void addMetadataInfos(int metadataId, String message) {\n+    public void addMetadataInfos(int metadataId, String metadataUUID, boolean draft, boolean approved, String message) {\n+        InfoReport infoReport = new InfoReport(message);\n+        infoReport.setUuid(metadataUUID);\n+        infoReport.setDraft(draft);\n+        infoReport.setApproved(approved);\n         if (this.metadataInfos.get(metadataId) == null) {\n             List<InfoReport> infos = new ArrayList<>();\n-            infos.add(new InfoReport(message));\n+            infos.add(infoReport);\n             this.metadataInfos.put(metadataId, infos);\n         } else {\n-            this.metadataInfos.get(metadataId).add(new InfoReport(message));\n+            this.metadataInfos.get(metadataId).add(infoReport);\n+        }\n+    }\n+\n+    public void addMetadataInfos(AbstractMetadata metadata, String message) {\n+        addMetadataInfos(metadata.getId(), metadata.getUuid(), isMetadataDraft(metadata.getId()),\n+            isMetadataApproved(metadata.getId()), message);\n+    }\n+\n+    private boolean isMetadataDraft(int metadataId) {\n+        boolean metadataDraft = false;\n+        try {\n+            metadataDraft = ApplicationContextHolder.get().getBean(IMetadataUtils.class).isMetadataDraft(metadataId);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Error detecting if metadata is draft\");\n+        }\n+        return metadataDraft;\n+    }\n+\n+    private boolean isMetadataApproved(int metadataId) {\n+        boolean metadataApproved = false;\n+        try {\n+            metadataApproved = ApplicationContextHolder.get().getBean(IMetadataUtils.class).isMetadataApproved(metadataId);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Error detecting if metadata is draft\");", "originalCommit": "57a9da624a054bfef911f3cfb3fdb51984226b7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cdba862e8b5900bff0e4581ccff27efefbf56d82", "url": "https://github.com/geonetwork/core-geonetwork/commit/cdba862e8b5900bff0e4581ccff27efefbf56d82", "message": "Fixed exception message for checking if metadata is approved.", "committedDate": "2020-12-16T11:54:24Z", "type": "commit"}]}