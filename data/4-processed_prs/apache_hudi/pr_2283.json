{"pr_number": 2283, "pr_title": "[HUDI-1415] Read Hoodie Table As Spark DataSource Table", "pr_createdAt": "2020-11-26T07:51:11Z", "pr_url": "https://github.com/apache/hudi/pull/2283", "timeline": [{"oid": "2038dda8bfdd03c0e6e57f575a51773fe570c76b", "url": "https://github.com/apache/hudi/commit/2038dda8bfdd03c0e6e57f575a51773fe570c76b", "message": "[HUDI-1415] Incorrect query result for hudi hive table when using spark sql", "committedDate": "2020-11-30T15:26:42Z", "type": "forcePushed"}, {"oid": "63e88099492dae817e428cc973d0d8c452dcb039", "url": "https://github.com/apache/hudi/commit/63e88099492dae817e428cc973d0d8c452dcb039", "message": "[HUDI-1415] refactor same code", "committedDate": "2020-12-06T12:23:28Z", "type": "forcePushed"}, {"oid": "0ff1f77a5b6dde711f2c2dad03d70a581e2532c2", "url": "https://github.com/apache/hudi/commit/0ff1f77a5b6dde711f2c2dad03d70a581e2532c2", "message": "[HUDI-1415] Incorrect query result for hudi hive table when using spark sql\n\n[HUDI-1415] refactor same code", "committedDate": "2020-12-06T12:26:45Z", "type": "forcePushed"}, {"oid": "98e229343ed140f252d5058813855ce689030396", "url": "https://github.com/apache/hudi/commit/98e229343ed140f252d5058813855ce689030396", "message": "[HUDI-1415] Incorrect query result for hudi hive table when using spark sql\n\n[HUDI-1415] refactor same code\n\nfix test case", "committedDate": "2020-12-06T14:36:44Z", "type": "forcePushed"}, {"oid": "a5e896a04d6fb4227874067ffd47073d0e23ab71", "url": "https://github.com/apache/hudi/commit/a5e896a04d6fb4227874067ffd47073d0e23ab71", "message": "[HUDI-1415] Incorrect query result for hudi hive table when using spark sql\n\n[HUDI-1415] refactor same code\n\nfix test case\n\nfix read partitioned table exception", "committedDate": "2020-12-07T07:53:30Z", "type": "forcePushed"}, {"oid": "c826eb838a35d4ea1bb21823b33c50e1c4a9d893", "url": "https://github.com/apache/hudi/commit/c826eb838a35d4ea1bb21823b33c50e1c4a9d893", "message": "add log for test case", "committedDate": "2020-12-10T03:25:33Z", "type": "forcePushed"}, {"oid": "bc59a67f3d01dd17beb24592957ede089a5fa9a8", "url": "https://github.com/apache/hudi/commit/bc59a67f3d01dd17beb24592957ede089a5fa9a8", "message": "[HUDI-1415] Incorrect query result for hudi hive table when using spark sql\n\n[HUDI-1415] refactor same code\n\nfix test case\n\nfix read partitioned table exception", "committedDate": "2020-12-10T03:25:32Z", "type": "forcePushed"}, {"oid": "63cbf0148a033fe511d49b381691d126f78f8828", "url": "https://github.com/apache/hudi/commit/63cbf0148a033fe511d49b381691d126f78f8828", "message": "[HUDI-1415] Incorrect query result for hudi hive table when using spark sql\n\n[HUDI-1415] refactor same code\n\nfix test case\n\nfix read partitioned table exception", "committedDate": "2021-01-07T15:53:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0NDgyMQ==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r567244821", "bodyText": "I am new to these, hence might be wrong. but can you please clarify if this should be \"org.apache.hudi\" ?", "author": "nsivabalan", "createdAt": "2021-01-30T13:15:33Z", "path": "hudi-spark-datasource/hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -377,11 +388,71 @@ private[hudi] object HoodieSparkSqlWriter {\n     hiveSyncConfig.supportTimestamp = parameters.get(HIVE_SUPPORT_TIMESTAMP).exists(r => r.toBoolean)\n     hiveSyncConfig.decodePartition = parameters.getOrElse(URL_ENCODE_PARTITIONING_OPT_KEY,\n       DEFAULT_URL_ENCODE_PARTITIONING_OPT_VAL).toBoolean\n+    hiveSyncConfig.tableProperties = parameters.getOrElse(HIVE_TABLE_PROPERTIES, null)\n+    hiveSyncConfig.serdeProperties = createSqlTableSerdeProperties(parameters, basePath.toString,\n+      hiveSyncConfig.partitionFields.size())\n     hiveSyncConfig\n   }\n \n-  private def metaSync(parameters: Map[String, String],\n-                       basePath: Path,\n+  /**\n+    * Add Spark Sql related table properties to the HIVE_TABLE_PROPERTIES.\n+    * @param sqlConf\n+    * @param schema\n+    * @param parameters\n+    * @return A new parameters added the HIVE_TABLE_PROPERTIES property.\n+    */\n+  private def addSqlTableProperties(sqlConf: SQLConf, schema: StructType,\n+                                    parameters: Map[String, String]): Map[String, String] = {\n+    val partitionSet = parameters(HIVE_PARTITION_FIELDS_OPT_KEY)\n+      .split(\",\").map(_.trim).filter(!_.isEmpty).toSet\n+    val threshold = sqlConf.getConf(SCHEMA_STRING_LENGTH_THRESHOLD)\n+\n+    val (partCols, dataCols) = schema.partition(c => partitionSet.contains(c.name))\n+    val reOrdered = StructType(dataCols ++ partCols)\n+    val parts = reOrdered.json.grouped(threshold).toSeq\n+\n+    var properties = Map(\n+      \"spark.sql.sources.provider\" -> \"hudi\",", "originalCommit": "63cbf0148a033fe511d49b381691d126f78f8828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDMyNjg0MQ==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r570326841", "bodyText": "Hi @nsivabalan , we have already put the org.apache.hudi.DefaultSource to the META-INFO.services/org.apache.spark.sql.sources.DataSourceRegister, so it is all right to use the short name.", "author": "pengzhiwei2018", "createdAt": "2021-02-04T15:42:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0NDgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0NTM1OQ==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r567245359", "bodyText": "can we rename to something like schemaParts or schemaSlices", "author": "nsivabalan", "createdAt": "2021-01-30T13:20:05Z", "path": "hudi-spark-datasource/hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -377,11 +388,71 @@ private[hudi] object HoodieSparkSqlWriter {\n     hiveSyncConfig.supportTimestamp = parameters.get(HIVE_SUPPORT_TIMESTAMP).exists(r => r.toBoolean)\n     hiveSyncConfig.decodePartition = parameters.getOrElse(URL_ENCODE_PARTITIONING_OPT_KEY,\n       DEFAULT_URL_ENCODE_PARTITIONING_OPT_VAL).toBoolean\n+    hiveSyncConfig.tableProperties = parameters.getOrElse(HIVE_TABLE_PROPERTIES, null)\n+    hiveSyncConfig.serdeProperties = createSqlTableSerdeProperties(parameters, basePath.toString,\n+      hiveSyncConfig.partitionFields.size())\n     hiveSyncConfig\n   }\n \n-  private def metaSync(parameters: Map[String, String],\n-                       basePath: Path,\n+  /**\n+    * Add Spark Sql related table properties to the HIVE_TABLE_PROPERTIES.\n+    * @param sqlConf\n+    * @param schema\n+    * @param parameters\n+    * @return A new parameters added the HIVE_TABLE_PROPERTIES property.\n+    */\n+  private def addSqlTableProperties(sqlConf: SQLConf, schema: StructType,\n+                                    parameters: Map[String, String]): Map[String, String] = {\n+    val partitionSet = parameters(HIVE_PARTITION_FIELDS_OPT_KEY)\n+      .split(\",\").map(_.trim).filter(!_.isEmpty).toSet\n+    val threshold = sqlConf.getConf(SCHEMA_STRING_LENGTH_THRESHOLD)\n+\n+    val (partCols, dataCols) = schema.partition(c => partitionSet.contains(c.name))\n+    val reOrdered = StructType(dataCols ++ partCols)\n+    val parts = reOrdered.json.grouped(threshold).toSeq", "originalCommit": "63cbf0148a033fe511d49b381691d126f78f8828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDMyNzQxNA==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r570327414", "bodyText": "Good suggestions!", "author": "pengzhiwei2018", "createdAt": "2021-02-04T15:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0NTM1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0NTQ1Mg==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r567245452", "bodyText": "can you please add a comment on why we are doing this rather than setting it as just one param. Also, do link any references so that devs are aware of why we are doing and what all props we may need to set.", "author": "nsivabalan", "createdAt": "2021-01-30T13:20:48Z", "path": "hudi-spark-datasource/hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -377,11 +388,71 @@ private[hudi] object HoodieSparkSqlWriter {\n     hiveSyncConfig.supportTimestamp = parameters.get(HIVE_SUPPORT_TIMESTAMP).exists(r => r.toBoolean)\n     hiveSyncConfig.decodePartition = parameters.getOrElse(URL_ENCODE_PARTITIONING_OPT_KEY,\n       DEFAULT_URL_ENCODE_PARTITIONING_OPT_VAL).toBoolean\n+    hiveSyncConfig.tableProperties = parameters.getOrElse(HIVE_TABLE_PROPERTIES, null)\n+    hiveSyncConfig.serdeProperties = createSqlTableSerdeProperties(parameters, basePath.toString,\n+      hiveSyncConfig.partitionFields.size())\n     hiveSyncConfig\n   }\n \n-  private def metaSync(parameters: Map[String, String],\n-                       basePath: Path,\n+  /**\n+    * Add Spark Sql related table properties to the HIVE_TABLE_PROPERTIES.\n+    * @param sqlConf\n+    * @param schema\n+    * @param parameters\n+    * @return A new parameters added the HIVE_TABLE_PROPERTIES property.\n+    */\n+  private def addSqlTableProperties(sqlConf: SQLConf, schema: StructType,\n+                                    parameters: Map[String, String]): Map[String, String] = {\n+    val partitionSet = parameters(HIVE_PARTITION_FIELDS_OPT_KEY)\n+      .split(\",\").map(_.trim).filter(!_.isEmpty).toSet\n+    val threshold = sqlConf.getConf(SCHEMA_STRING_LENGTH_THRESHOLD)\n+\n+    val (partCols, dataCols) = schema.partition(c => partitionSet.contains(c.name))\n+    val reOrdered = StructType(dataCols ++ partCols)\n+    val parts = reOrdered.json.grouped(threshold).toSeq\n+\n+    var properties = Map(\n+      \"spark.sql.sources.provider\" -> \"hudi\",\n+      \"spark.sql.sources.schema.numParts\" -> parts.size.toString\n+    )\n+    parts.zipWithIndex.foreach { case (part, index) =>", "originalCommit": "63cbf0148a033fe511d49b381691d126f78f8828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDMzNjc5Ng==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r570336796", "bodyText": "Thanks for the advice, I will add the reference and add more comments.", "author": "pengzhiwei2018", "createdAt": "2021-02-04T15:54:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0NTQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0NjY4OA==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r567246688", "bodyText": "are we just overriding every time and finally setting pathProp to final value ?", "author": "nsivabalan", "createdAt": "2021-01-30T13:34:31Z", "path": "hudi-spark-datasource/hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -377,11 +388,71 @@ private[hudi] object HoodieSparkSqlWriter {\n     hiveSyncConfig.supportTimestamp = parameters.get(HIVE_SUPPORT_TIMESTAMP).exists(r => r.toBoolean)\n     hiveSyncConfig.decodePartition = parameters.getOrElse(URL_ENCODE_PARTITIONING_OPT_KEY,\n       DEFAULT_URL_ENCODE_PARTITIONING_OPT_VAL).toBoolean\n+    hiveSyncConfig.tableProperties = parameters.getOrElse(HIVE_TABLE_PROPERTIES, null)\n+    hiveSyncConfig.serdeProperties = createSqlTableSerdeProperties(parameters, basePath.toString,\n+      hiveSyncConfig.partitionFields.size())\n     hiveSyncConfig\n   }\n \n-  private def metaSync(parameters: Map[String, String],\n-                       basePath: Path,\n+  /**\n+    * Add Spark Sql related table properties to the HIVE_TABLE_PROPERTIES.\n+    * @param sqlConf\n+    * @param schema\n+    * @param parameters\n+    * @return A new parameters added the HIVE_TABLE_PROPERTIES property.\n+    */\n+  private def addSqlTableProperties(sqlConf: SQLConf, schema: StructType,\n+                                    parameters: Map[String, String]): Map[String, String] = {\n+    val partitionSet = parameters(HIVE_PARTITION_FIELDS_OPT_KEY)\n+      .split(\",\").map(_.trim).filter(!_.isEmpty).toSet\n+    val threshold = sqlConf.getConf(SCHEMA_STRING_LENGTH_THRESHOLD)\n+\n+    val (partCols, dataCols) = schema.partition(c => partitionSet.contains(c.name))\n+    val reOrdered = StructType(dataCols ++ partCols)\n+    val parts = reOrdered.json.grouped(threshold).toSeq\n+\n+    var properties = Map(\n+      \"spark.sql.sources.provider\" -> \"hudi\",\n+      \"spark.sql.sources.schema.numParts\" -> parts.size.toString\n+    )\n+    parts.zipWithIndex.foreach { case (part, index) =>\n+      properties += s\"spark.sql.sources.schema.part.$index\" -> part\n+    }\n+    // add partition columns\n+    if (partitionSet.nonEmpty) {\n+      properties += \"spark.sql.sources.schema.numPartCols\" -> partitionSet.size.toString\n+      partitionSet.zipWithIndex.foreach { case (partCol, index) =>\n+        properties += s\"spark.sql.sources.schema.partCol.$index\" -> partCol\n+      }\n+    }\n+    var sqlPropertyText = ConfigUtils.configToString(properties)\n+    sqlPropertyText = if (parameters.containsKey(HIVE_TABLE_PROPERTIES)) {\n+      sqlPropertyText + \"\\n\" + parameters(HIVE_TABLE_PROPERTIES)\n+    } else {\n+      sqlPropertyText\n+    }\n+    parameters + (HIVE_TABLE_PROPERTIES -> sqlPropertyText)\n+  }\n+\n+  private def createSqlTableSerdeProperties(parameters: Map[String, String],\n+                                            basePath: String, pathDepth: Int): String = {\n+    assert(pathDepth >= 0, \"Path Depth must great or equal to 0\")\n+    var pathProp = s\"path=$basePath\"\n+    if (pathProp.endsWith(\"/\")) {\n+      pathProp = pathProp.substring(0, pathProp.length - 1)\n+    }\n+    for (_ <- 0 until pathDepth + 1) {\n+      pathProp = s\"$pathProp/*\"", "originalCommit": "63cbf0148a033fe511d49b381691d126f78f8828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIxNTk1OA==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r580215958", "bodyText": "Yes, we append the \"star\" to  the pathProp and generate the final pathProp value.", "author": "pengzhiwei2018", "createdAt": "2021-02-22T12:35:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0NjY4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTU4ODUxNA==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r581588514", "bodyText": "Hi @nsivabalan @vinothchandar @n3nash\nCurrently I append \"stars\" to the path for spark because hudi need the \"stars\" when query hudi table. The number of \"stars\" is the same with the size of partition path fields.\nHowever, there are some problems when we save the path with \"stars\" to the meta store.\n1\u3001If we have not enable the encode for partition value (by URL_ENCODE_PARTITIONING_OPT_KEY), the size of partition fields may not equal to the actually generated partition directory level(e.g. pt = \"2021/02/03\", size of partition fields is 1, but the generated partition directory level is 3). In this case, we cannot know the number of \"stars\" to append to the path for spark in the compile time.\n2\u3001Problems for spark sql on hoodie.\nIf the we save the path contains \"stars\" to the meta store, we will have problems with the Insert and Refresh Table commands. Because Insert and Refresh Table cannot allow \"stars\" in the path.\nSo I think we need to support No Stars Query for hoodie table. After support no stars query, we does not need to append \"stars\" to the path. And all the problems above will be solved.\nI have file a issue to solve this: HUDI-1591", "author": "pengzhiwei2018", "createdAt": "2021-02-24T03:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0NjY4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0NzAwNw==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r567247007", "bodyText": "Ideally it would be nice to construct the expected output rather than hardcoding. Can we at least use structType to construct the schema parts in this expected output. would be good to avoid hardcoding it.", "author": "nsivabalan", "createdAt": "2021-01-30T13:37:13Z", "path": "hudi-spark-datasource/hudi-spark/src/test/scala/org/apache/hudi/functional/HoodieSparkSqlWriterSuite.scala", "diffHunk": "@@ -397,6 +401,46 @@ class HoodieSparkSqlWriterSuite extends FunSuite with Matchers {\n       }\n     })\n \n+  test(\"Test build sync config for spark sql\") {\n+    initSparkContext(\"test build sync config\")\n+    val addSqlTablePropertiesMethod =\n+        HoodieSparkSqlWriter.getClass.getDeclaredMethod(\"addSqlTableProperties\",\n+          classOf[SQLConf], classOf[StructType], classOf[Map[_,_]])\n+    addSqlTablePropertiesMethod.setAccessible(true)\n+\n+    val schema = DataSourceTestUtils.getStructTypeExampleSchema\n+    val structType = AvroConversionUtils.convertAvroSchemaToStructType(schema)\n+    val basePath = \"/tmp/hoodie_test\"\n+    val params = Map(\n+      \"path\" -> basePath,\n+      DataSourceWriteOptions.TABLE_NAME_OPT_KEY -> \"test_hoodie\",\n+      DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY -> \"partition\"\n+    )\n+    val parameters = HoodieWriterUtils.parametersWithWriteDefaults(params)\n+    val newParams = addSqlTablePropertiesMethod.invoke(HoodieSparkSqlWriter,\n+      spark.sessionState.conf, structType, parameters)\n+      .asInstanceOf[Map[String, String]]\n+\n+    val buildSyncConfigMethod =\n+      HoodieSparkSqlWriter.getClass.getDeclaredMethod(\"buildSyncConfig\", classOf[Path],\n+        classOf[Map[_,_]])\n+    buildSyncConfigMethod.setAccessible(true)\n+\n+    val hiveSyncConfig = buildSyncConfigMethod.invoke(HoodieSparkSqlWriter,\n+      new Path(basePath), newParams).asInstanceOf[HiveSyncConfig]\n+\n+    assertResult(\"spark.sql.sources.provider=hudi\\n\" +\n+      \"spark.sql.sources.schema.partCol.0=partition\\n\" +\n+      \"spark.sql.sources.schema.numParts=1\\n\" +\n+      \"spark.sql.sources.schema.numPartCols=1\\n\" +\n+      \"spark.sql.sources.schema.part.0=\" +\n+      \"{\\\"type\\\":\\\"struct\\\",\\\"fields\\\":[{\\\"name\\\":\\\"_row_key\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":false,\\\"metadata\\\":{}},\" +", "originalCommit": "63cbf0148a033fe511d49b381691d126f78f8828", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0NzAzMA==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r567247030", "bodyText": "same comment as above.", "author": "nsivabalan", "createdAt": "2021-01-30T13:37:27Z", "path": "hudi-spark-datasource/hudi-spark/src/test/scala/org/apache/hudi/functional/HoodieSparkSqlWriterSuite.scala", "diffHunk": "@@ -397,6 +401,46 @@ class HoodieSparkSqlWriterSuite extends FunSuite with Matchers {\n       }\n     })\n \n+  test(\"Test build sync config for spark sql\") {\n+    initSparkContext(\"test build sync config\")\n+    val addSqlTablePropertiesMethod =\n+        HoodieSparkSqlWriter.getClass.getDeclaredMethod(\"addSqlTableProperties\",\n+          classOf[SQLConf], classOf[StructType], classOf[Map[_,_]])\n+    addSqlTablePropertiesMethod.setAccessible(true)\n+\n+    val schema = DataSourceTestUtils.getStructTypeExampleSchema\n+    val structType = AvroConversionUtils.convertAvroSchemaToStructType(schema)\n+    val basePath = \"/tmp/hoodie_test\"\n+    val params = Map(\n+      \"path\" -> basePath,\n+      DataSourceWriteOptions.TABLE_NAME_OPT_KEY -> \"test_hoodie\",\n+      DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY -> \"partition\"\n+    )\n+    val parameters = HoodieWriterUtils.parametersWithWriteDefaults(params)\n+    val newParams = addSqlTablePropertiesMethod.invoke(HoodieSparkSqlWriter,\n+      spark.sessionState.conf, structType, parameters)\n+      .asInstanceOf[Map[String, String]]\n+\n+    val buildSyncConfigMethod =\n+      HoodieSparkSqlWriter.getClass.getDeclaredMethod(\"buildSyncConfig\", classOf[Path],\n+        classOf[Map[_,_]])\n+    buildSyncConfigMethod.setAccessible(true)\n+\n+    val hiveSyncConfig = buildSyncConfigMethod.invoke(HoodieSparkSqlWriter,\n+      new Path(basePath), newParams).asInstanceOf[HiveSyncConfig]\n+\n+    assertResult(\"spark.sql.sources.provider=hudi\\n\" +\n+      \"spark.sql.sources.schema.partCol.0=partition\\n\" +\n+      \"spark.sql.sources.schema.numParts=1\\n\" +\n+      \"spark.sql.sources.schema.numPartCols=1\\n\" +\n+      \"spark.sql.sources.schema.part.0=\" +\n+      \"{\\\"type\\\":\\\"struct\\\",\\\"fields\\\":[{\\\"name\\\":\\\"_row_key\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":false,\\\"metadata\\\":{}},\" +\n+      \"{\\\"name\\\":\\\"ts\\\",\\\"type\\\":\\\"long\\\",\\\"nullable\\\":true,\\\"metadata\\\":{}},\" +\n+      \"{\\\"name\\\":\\\"partition\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":false,\\\"metadata\\\":{}}]}\")(hiveSyncConfig.tableProperties)\n+\n+    assertResult(\"path=/tmp/hoodie_test/*/*\")(hiveSyncConfig.serdeProperties)", "originalCommit": "63cbf0148a033fe511d49b381691d126f78f8828", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0NzMyMQ==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r567247321", "bodyText": "do you think we need to assert HIVE_TABLE_PROPERTIES as well ?", "author": "nsivabalan", "createdAt": "2021-01-30T13:39:24Z", "path": "hudi-spark-datasource/hudi-spark/src/test/scala/org/apache/hudi/functional/HoodieSparkSqlWriterSuite.scala", "diffHunk": "@@ -397,6 +401,46 @@ class HoodieSparkSqlWriterSuite extends FunSuite with Matchers {\n       }\n     })\n \n+  test(\"Test build sync config for spark sql\") {\n+    initSparkContext(\"test build sync config\")\n+    val addSqlTablePropertiesMethod =\n+        HoodieSparkSqlWriter.getClass.getDeclaredMethod(\"addSqlTableProperties\",\n+          classOf[SQLConf], classOf[StructType], classOf[Map[_,_]])\n+    addSqlTablePropertiesMethod.setAccessible(true)\n+\n+    val schema = DataSourceTestUtils.getStructTypeExampleSchema\n+    val structType = AvroConversionUtils.convertAvroSchemaToStructType(schema)\n+    val basePath = \"/tmp/hoodie_test\"\n+    val params = Map(\n+      \"path\" -> basePath,\n+      DataSourceWriteOptions.TABLE_NAME_OPT_KEY -> \"test_hoodie\",\n+      DataSourceWriteOptions.HIVE_PARTITION_FIELDS_OPT_KEY -> \"partition\"\n+    )\n+    val parameters = HoodieWriterUtils.parametersWithWriteDefaults(params)\n+    val newParams = addSqlTablePropertiesMethod.invoke(HoodieSparkSqlWriter,\n+      spark.sessionState.conf, structType, parameters)\n+      .asInstanceOf[Map[String, String]]\n+\n+    val buildSyncConfigMethod =\n+      HoodieSparkSqlWriter.getClass.getDeclaredMethod(\"buildSyncConfig\", classOf[Path],\n+        classOf[Map[_,_]])\n+    buildSyncConfigMethod.setAccessible(true)\n+\n+    val hiveSyncConfig = buildSyncConfigMethod.invoke(HoodieSparkSqlWriter,\n+      new Path(basePath), newParams).asInstanceOf[HiveSyncConfig]\n+\n+    assertResult(\"spark.sql.sources.provider=hudi\\n\" +\n+      \"spark.sql.sources.schema.partCol.0=partition\\n\" +\n+      \"spark.sql.sources.schema.numParts=1\\n\" +\n+      \"spark.sql.sources.schema.numPartCols=1\\n\" +\n+      \"spark.sql.sources.schema.part.0=\" +\n+      \"{\\\"type\\\":\\\"struct\\\",\\\"fields\\\":[{\\\"name\\\":\\\"_row_key\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":false,\\\"metadata\\\":{}},\" +\n+      \"{\\\"name\\\":\\\"ts\\\",\\\"type\\\":\\\"long\\\",\\\"nullable\\\":true,\\\"metadata\\\":{}},\" +\n+      \"{\\\"name\\\":\\\"partition\\\",\\\"type\\\":\\\"string\\\",\\\"nullable\\\":false,\\\"metadata\\\":{}}]}\")(hiveSyncConfig.tableProperties)", "originalCommit": "63cbf0148a033fe511d49b381691d126f78f8828", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0NzU3MA==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r567247570", "bodyText": "since this is abstract class and not every implementation will have some concrete override, can we make this empty here so that HoodieDLAClient does not need to do a no op override.", "author": "nsivabalan", "createdAt": "2021-01-30T13:42:11Z", "path": "hudi-sync/hudi-sync-common/src/main/java/org/apache/hudi/sync/common/AbstractSyncHoodieClient.java", "diffHunk": "@@ -75,6 +76,8 @@ public abstract void createTable(String tableName, MessageType storageSchema,\n \n   public abstract void updatePartitionsToTable(String tableName, List<String> changedPartitions);\n \n+  public abstract void updateTableProperties(String tableName, Map<String, String> tableProperties);", "originalCommit": "63cbf0148a033fe511d49b381691d126f78f8828", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0NzY3NA==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r567247674", "bodyText": "I understand it's not part of this diff. But wondering if you can add some java docs to this class in general. I realized we don't have any one. (at line 41 ish) .", "author": "nsivabalan", "createdAt": "2021-01-30T13:43:29Z", "path": "hudi-sync/hudi-sync-common/src/main/java/org/apache/hudi/sync/common/AbstractSyncHoodieClient.java", "diffHunk": "@@ -63,7 +63,8 @@ public AbstractSyncHoodieClient(String basePath, boolean assumeDatePartitioning,\n   }\n \n   public abstract void createTable(String tableName, MessageType storageSchema,\n-                                   String inputFormatClass, String outputFormatClass, String serdeClass);\n+                                   String inputFormatClass, String outputFormatClass,", "originalCommit": "63cbf0148a033fe511d49b381691d126f78f8828", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0ODM1NA==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r567248354", "bodyText": "minor. \"Failed to update...\". remove extra \"get\"", "author": "nsivabalan", "createdAt": "2021-01-30T13:49:41Z", "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HoodieHiveClient.java", "diffHunk": "@@ -138,6 +138,27 @@ public void updatePartitionsToTable(String tableName, List<String> changedPartit\n     }\n   }\n \n+  /**\n+   * Update the table properties to the table.\n+   * @param tableProperties\n+   */\n+  @Override\n+  public void updateTableProperties(String tableName, Map<String, String> tableProperties) {\n+    if (tableProperties == null || tableProperties.size() == 0) {\n+      return;\n+    }\n+    try {\n+      Table table = client.getTable(syncConfig.databaseName, tableName);\n+      for (Map.Entry<String, String> entry: tableProperties.entrySet()) {\n+        table.putToParameters(entry.getKey(), entry.getValue());\n+      }\n+      client.alter_table(syncConfig.databaseName, tableName, table);\n+    } catch (Exception e) {\n+      throw new HoodieHiveSyncException(\"Failed to get update table properties for table: \"", "originalCommit": "63cbf0148a033fe511d49b381691d126f78f8828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM0NzM2Ng==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r570347366", "bodyText": "Thanks for your correct.", "author": "pengzhiwei2018", "createdAt": "2021-02-04T16:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0ODM1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0ODUyOA==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r567248528", "bodyText": "Would be nice if you write a test for the actual problem you faced as per the title/desc. And ensure that the test fails w/o this patch and succeeds with this patch.", "author": "nsivabalan", "createdAt": "2021-01-30T13:51:09Z", "path": "hudi-sync/hudi-hive-sync/src/test/java/org/apache/hudi/hive/TestHiveSyncTool.java", "diffHunk": "@@ -249,6 +255,54 @@ public void testBasicSync(boolean useJdbc, boolean useSchemaFromCommitMetadata)\n         \"The last commit that was sycned should be 100\");\n   }\n \n+  @ParameterizedTest\n+  @MethodSource({\"useJdbcAndSchemaFromCommitMetadata\"})\n+  public void testSyncWithProperties(boolean useJdbc, boolean useSchemaFromCommitMetadata) throws Exception {", "originalCommit": "63cbf0148a033fe511d49b381691d126f78f8828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI1MjQ0Ng==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r567252446", "bodyText": "Thanks @nsivabalan  for these nice suggestions, I will spend some time to process.", "author": "pengzhiwei2018", "createdAt": "2021-01-30T14:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI0ODUyOA=="}], "type": "inlineReview"}, {"oid": "4b568770a4559f3b3c46694e45a13cf2673277d9", "url": "https://github.com/apache/hudi/commit/4b568770a4559f3b3c46694e45a13cf2673277d9", "message": "[HUDI-1415] Incorrect query result for hudi hive table when using spark sql\n\n[HUDI-1415] refactor same code\n\nfix test case\n\nfix read partitioned table exception", "committedDate": "2021-01-30T14:37:53Z", "type": "forcePushed"}, {"oid": "618ac88270a3e1745fade239ff5d742cec7bfe66", "url": "https://github.com/apache/hudi/commit/618ac88270a3e1745fade239ff5d742cec7bfe66", "message": "fix some code review", "committedDate": "2021-02-19T02:46:32Z", "type": "forcePushed"}, {"oid": "c60a7b4b3d6457c73e88666bf7c9418b74c4c0f5", "url": "https://github.com/apache/hudi/commit/c60a7b4b3d6457c73e88666bf7c9418b74c4c0f5", "message": "[HUDI-1415] Incorrect query result for hudi hive table when using spark sql\n\n[HUDI-1415] refactor same code\n\nfix test case\n\nfix read partitioned table exception\n\nfix some code review", "committedDate": "2021-02-19T03:20:42Z", "type": "forcePushed"}, {"oid": "71363392e720bcc8d32c3c90c601b020f3d6366c", "url": "https://github.com/apache/hudi/commit/71363392e720bcc8d32c3c90c601b020f3d6366c", "message": "[HUDI-1415] Read Hoodie Table As Spark DataSource Table\n\n[HUDI-1415] refactor same code\n\nfix test case\n\nfix read partitioned table exception\n\nfix some code review", "committedDate": "2021-02-19T03:22:40Z", "type": "forcePushed"}, {"oid": "872519b8a0b0dfc883e09f25cf1c20d27c36caa7", "url": "https://github.com/apache/hudi/commit/872519b8a0b0dfc883e09f25cf1c20d27c36caa7", "message": "[HUDI-1415] Read Hoodie Table As Spark DataSource Table\n\n[HUDI-1415] refactor same code\n\nfix test case\n\nfix read partitioned table exception\n\nfix some code review\n\nfix test case\n\nadd more comments\n\nfix kafka test leak\n\nrelease after test finished", "committedDate": "2021-02-20T11:40:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTUyMDMyMA==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r589520320", "bodyText": "@pengzhiwei2018 hello, how spark sql judge to use datasource ? I see just set the table properties . But not the \"ROW FORMAT SERDE \"", "author": "lw309637554", "createdAt": "2021-03-08T15:40:46Z", "path": "hudi-spark-datasource/hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -378,11 +389,75 @@ private[hudi] object HoodieSparkSqlWriter {\n     hiveSyncConfig.autoCreateDatabase = parameters.get(HIVE_AUTO_CREATE_DATABASE_OPT_KEY).exists(r => r.toBoolean)\n     hiveSyncConfig.decodePartition = parameters.getOrElse(URL_ENCODE_PARTITIONING_OPT_KEY,\n       DEFAULT_URL_ENCODE_PARTITIONING_OPT_VAL).toBoolean\n+    hiveSyncConfig.tableProperties = parameters.getOrElse(HIVE_TABLE_PROPERTIES, null)\n+    hiveSyncConfig.serdeProperties = createSqlTableSerdeProperties(parameters, basePath.toString,\n+      hiveSyncConfig.partitionFields.size())\n     hiveSyncConfig\n   }\n \n-  private def metaSync(parameters: Map[String, String],\n-                       basePath: Path,\n+  /**\n+    * Add Spark Sql related table properties to the HIVE_TABLE_PROPERTIES.\n+    * @param sqlConf\n+    * @param schema\n+    * @param parameters\n+    * @return A new parameters added the HIVE_TABLE_PROPERTIES property.\n+    */\n+  private def addSqlTableProperties(sqlConf: SQLConf, schema: StructType,\n+                                    parameters: Map[String, String]): Map[String, String] = {\n+    // Convert the schema and partition info used by spark sql to hive table properties.\n+    // The following code refers to the spark code in\n+    // https://github.com/apache/spark/blob/master/sql/hive/src/main/scala/org/apache/spark/sql/hive/HiveExternalCatalog.scala\n+\n+    val partitionSet = parameters(HIVE_PARTITION_FIELDS_OPT_KEY)\n+      .split(\",\").map(_.trim).filter(!_.isEmpty).toSet\n+    val threshold = sqlConf.getConf(SCHEMA_STRING_LENGTH_THRESHOLD)\n+\n+    val (partitionCols, dataCols) = schema.partition(c => partitionSet.contains(c.name))\n+    val reOrderedType = StructType(dataCols ++ partitionCols)\n+    val schemaParts = reOrderedType.json.grouped(threshold).toSeq\n+\n+    var properties = Map(\n+      \"spark.sql.sources.provider\" -> \"hudi\",", "originalCommit": "872519b8a0b0dfc883e09f25cf1c20d27c36caa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTg4OTk2NQ==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r589889965", "bodyText": "Hi @lw309637554 , If the table properties contains the spark.sql.sources.provider and schema/partition properties, spark will trait it as a datasource table.\nThe PR has set the serde properties in createSqlTableSerdeProperties, that also will be used by spark datasource table.", "author": "pengzhiwei2018", "createdAt": "2021-03-09T02:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTUyMDMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTUyMDkxNw==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r589520917", "bodyText": "if we can persist this properties to metatable , not the hive table properties?", "author": "lw309637554", "createdAt": "2021-03-08T15:41:36Z", "path": "hudi-spark-datasource/hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -378,11 +389,75 @@ private[hudi] object HoodieSparkSqlWriter {\n     hiveSyncConfig.autoCreateDatabase = parameters.get(HIVE_AUTO_CREATE_DATABASE_OPT_KEY).exists(r => r.toBoolean)\n     hiveSyncConfig.decodePartition = parameters.getOrElse(URL_ENCODE_PARTITIONING_OPT_KEY,\n       DEFAULT_URL_ENCODE_PARTITIONING_OPT_VAL).toBoolean\n+    hiveSyncConfig.tableProperties = parameters.getOrElse(HIVE_TABLE_PROPERTIES, null)\n+    hiveSyncConfig.serdeProperties = createSqlTableSerdeProperties(parameters, basePath.toString,\n+      hiveSyncConfig.partitionFields.size())\n     hiveSyncConfig\n   }\n \n-  private def metaSync(parameters: Map[String, String],\n-                       basePath: Path,\n+  /**\n+    * Add Spark Sql related table properties to the HIVE_TABLE_PROPERTIES.\n+    * @param sqlConf\n+    * @param schema\n+    * @param parameters\n+    * @return A new parameters added the HIVE_TABLE_PROPERTIES property.\n+    */\n+  private def addSqlTableProperties(sqlConf: SQLConf, schema: StructType,\n+                                    parameters: Map[String, String]): Map[String, String] = {\n+    // Convert the schema and partition info used by spark sql to hive table properties.\n+    // The following code refers to the spark code in\n+    // https://github.com/apache/spark/blob/master/sql/hive/src/main/scala/org/apache/spark/sql/hive/HiveExternalCatalog.scala\n+\n+    val partitionSet = parameters(HIVE_PARTITION_FIELDS_OPT_KEY)\n+      .split(\",\").map(_.trim).filter(!_.isEmpty).toSet\n+    val threshold = sqlConf.getConf(SCHEMA_STRING_LENGTH_THRESHOLD)\n+\n+    val (partitionCols, dataCols) = schema.partition(c => partitionSet.contains(c.name))\n+    val reOrderedType = StructType(dataCols ++ partitionCols)\n+    val schemaParts = reOrderedType.json.grouped(threshold).toSeq\n+\n+    var properties = Map(\n+      \"spark.sql.sources.provider\" -> \"hudi\",\n+      \"spark.sql.sources.schema.numParts\" -> schemaParts.size.toString", "originalCommit": "872519b8a0b0dfc883e09f25cf1c20d27c36caa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTg5MDU2OQ==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r589890569", "bodyText": "Spark need this properties when load the meta data from the hive meta store.So we should store them there.", "author": "pengzhiwei2018", "createdAt": "2021-03-09T02:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTUyMDkxNw=="}], "type": "inlineReview"}, {"oid": "ba70819d3bfa1443c7c4b1f7b21ed89be76b76d6", "url": "https://github.com/apache/hudi/commit/ba70819d3bfa1443c7c4b1f7b21ed89be76b76d6", "message": "[HUDI-1415] Read Hoodie Table As Spark DataSource Table\n\n[HUDI-1415] refactor same code\n\nfix test case\n\nfix read partitioned table exception\n\nfix some code review\n\nfix test case\n\nadd more comments\n\nfix kafka test leak\n\nrelease after test finished", "committedDate": "2021-04-07T06:08:02Z", "type": "forcePushed"}, {"oid": "6343d09682dbcfb6e9716312889d876178d6349b", "url": "https://github.com/apache/hudi/commit/6343d09682dbcfb6e9716312889d876178d6349b", "message": "[HUDI-1415] Read Hoodie Table As Spark DataSource Table\n\n[HUDI-1415] refactor same code\n\nfix test case\n\nfix read partitioned table exception\n\nfix some code review\n\nfix test case\n\nadd more comments\n\nfix kafka test leak\n\nrelease after test finished", "committedDate": "2021-04-12T12:19:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDQzMTEwOA==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r614431108", "bodyText": "Can be moved to metaSync or syncHive method.", "author": "umehrot2", "createdAt": "2021-04-15T22:32:38Z", "path": "hudi-spark-datasource/hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -306,7 +311,10 @@ private[hudi] object HoodieSparkSqlWriter {\n     } finally {\n       writeClient.close()\n     }\n-    val metaSyncSuccess = metaSync(parameters, basePath, jsc.hadoopConfiguration)\n+    val newParameters =\n+      addSqlTableProperties(sqlContext.sparkSession.sessionState.conf, df.schema, parameters)", "originalCommit": "6343d09682dbcfb6e9716312889d876178d6349b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTUyMjkyOQ==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r615522929", "bodyText": "yeah, moving the addSqlTableProperties  to  metaSync can simplify the logical.", "author": "pengzhiwei2018", "createdAt": "2021-04-19T03:34:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDQzMTEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDQzMTk3NQ==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r614431975", "bodyText": "This modification seems unnecessary, as hadoopConf is not being used.", "author": "umehrot2", "createdAt": "2021-04-15T22:35:06Z", "path": "hudi-spark-datasource/hudi-spark/src/main/scala/org/apache/hudi/HoodieSparkSqlWriter.scala", "diffHunk": "@@ -388,7 +399,8 @@ private[hudi] object HoodieSparkSqlWriter {\n     }\n   }\n \n-  private def syncHive(basePath: Path, fs: FileSystem, parameters: Map[String, String]): Boolean = {\n+  private def syncHive(basePath: Path, fs: FileSystem, parameters: Map[String, String],\n+                       hadoopConf: Configuration): Boolean = {", "originalCommit": "6343d09682dbcfb6e9716312889d876178d6349b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTYyNjk1Nw==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r615626957", "bodyText": "Fixed!", "author": "pengzhiwei2018", "createdAt": "2021-04-19T08:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDQzMTk3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDQzNTI4NA==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r614435284", "bodyText": "Can you improve the javadoc ? It has missing properties and descriptions.", "author": "umehrot2", "createdAt": "2021-04-15T22:42:49Z", "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HoodieHiveClient.java", "diffHunk": "@@ -138,6 +138,27 @@ public void updatePartitionsToTable(String tableName, List<String> changedPartit\n     }\n   }\n \n+  /**\n+   * Update the table properties to the table.\n+   * @param tableProperties\n+   */", "originalCommit": "6343d09682dbcfb6e9716312889d876178d6349b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDQzNTg0Mw==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r614435843", "bodyText": "nit: tableProperties.isEmpty() ?", "author": "umehrot2", "createdAt": "2021-04-15T22:44:20Z", "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HoodieHiveClient.java", "diffHunk": "@@ -138,6 +138,27 @@ public void updatePartitionsToTable(String tableName, List<String> changedPartit\n     }\n   }\n \n+  /**\n+   * Update the table properties to the table.\n+   * @param tableProperties\n+   */\n+  @Override\n+  public void updateTableProperties(String tableName, Map<String, String> tableProperties) {\n+    if (tableProperties == null || tableProperties.size() == 0) {", "originalCommit": "6343d09682dbcfb6e9716312889d876178d6349b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDQ1NzUyNw==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r614457527", "bodyText": "Can't we sync this while creating the table itself, like you are doing for serde properties ?", "author": "umehrot2", "createdAt": "2021-04-15T23:20:55Z", "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HiveSyncTool.java", "diffHunk": "@@ -164,7 +165,13 @@ private void syncHoodieTable(String tableName, boolean useRealtimeInputFormat) {\n     LOG.info(\"Storage partitions scan complete. Found \" + writtenPartitionsSince.size());\n     // Sync the partitions if needed\n     syncPartitions(tableName, writtenPartitionsSince);\n-\n+    // Sync the table properties if need\n+    if (cfg.tableProperties != null) {\n+      Map<String, String> tableProperties = ConfigUtils.toMap(cfg.tableProperties);\n+      hoodieHiveClient.updateTableProperties(tableName, tableProperties);\n+      LOG.info(\"Sync table properties for \" + tableName + \", table properties is: \"\n+          + cfg.tableProperties);\n+    }", "originalCommit": "6343d09682dbcfb6e9716312889d876178d6349b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTUyNTg1Mg==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r615525852", "bodyText": "Well, the tableProperties may change if the schema has changed. So we need to update the table properties  by a separate interface.", "author": "pengzhiwei2018", "createdAt": "2021-04-19T03:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDQ1NzUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjI4ODQ1Nw==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r616288457", "bodyText": "@pengzhiwei2018 I understand that. In the syncSchema() there is a check for schema difference. Perhaps we should move this inside that to avoid this being run every time. And for the first time when table is created, we can do it as part of create table. Thoughts ?", "author": "umehrot2", "createdAt": "2021-04-20T01:55:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDQ1NzUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjI5NzczOQ==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r616297739", "bodyText": "Yeah, +1 for this.", "author": "pengzhiwei2018", "createdAt": "2021-04-20T02:25:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDQ1NzUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDQ2MTMxNQ==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r614461315", "bodyText": "Can you update the toString() in this class ?", "author": "umehrot2", "createdAt": "2021-04-15T23:31:26Z", "path": "hudi-sync/hudi-hive-sync/src/main/java/org/apache/hudi/hive/HiveSyncConfig.java", "diffHunk": "@@ -88,6 +88,12 @@\n   @Parameter(names = {\"--verify-metadata-file-listing\"}, description = \"Verify file listing from Hudi's metadata against file system\")\n   public Boolean verifyMetadataFileListing = HoodieMetadataConfig.DEFAULT_METADATA_VALIDATE;\n \n+  @Parameter(names = {\"--table-properties\"}, description = \"Table properties to hive table\")\n+  public String tableProperties;\n+\n+  @Parameter(names = {\"--serde-properties\"}, description = \"Serde properties to hive table\")\n+  public String serdeProperties;\n+", "originalCommit": "6343d09682dbcfb6e9716312889d876178d6349b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTUyNjAxMg==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r615526012", "bodyText": "Yes, thanks for remind me.", "author": "pengzhiwei2018", "createdAt": "2021-04-19T03:47:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDQ2MTMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDQ2MzA0Mw==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r614463043", "bodyText": "Lets introduce another additional boolean property hoodie.datasource.hive_sync.sync_as_datasource and put the feature behind it. We can use true by default, but atleast there would be a way to turn it off. This is going to change the way spark sql queries currently run with Hudi, and is a huge change.", "author": "umehrot2", "createdAt": "2021-04-15T23:36:59Z", "path": "hudi-spark-datasource/hudi-spark-common/src/main/scala/org/apache/hudi/DataSourceOptions.scala", "diffHunk": "@@ -353,6 +353,8 @@ object DataSourceWriteOptions {\n   val HIVE_IGNORE_EXCEPTIONS_OPT_KEY = \"hoodie.datasource.hive_sync.ignore_exceptions\"\n   val HIVE_SKIP_RO_SUFFIX = \"hoodie.datasource.hive_sync.skip_ro_suffix\"\n   val HIVE_SUPPORT_TIMESTAMP = \"hoodie.datasource.hive_sync.support_timestamp\"\n+  val HIVE_TABLE_PROPERTIES = \"hoodie.datasource.hive_sync.table_properties\"", "originalCommit": "6343d09682dbcfb6e9716312889d876178d6349b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTUyODgyMQ==", "url": "https://github.com/apache/hudi/pull/2283#discussion_r615528821", "bodyText": "Good suggestion! +1 for this!", "author": "pengzhiwei2018", "createdAt": "2021-04-19T03:58:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNDQ2MzA0Mw=="}], "type": "inlineReview"}, {"oid": "33acbd66ba6204c3bc47a150d82b64337c3c5bd3", "url": "https://github.com/apache/hudi/commit/33acbd66ba6204c3bc47a150d82b64337c3c5bd3", "message": "[HUDI-1415] Read Hoodie Table As Spark DataSource Table\n\n[HUDI-1415] refactor same code\n\nfix test case\n\nfix read partitioned table exception\n\nfix some code review\n\nfix test case\n\nadd more comments\n\nfix kafka test leak\n\nrelease after test finished", "committedDate": "2021-04-19T02:37:47Z", "type": "forcePushed"}, {"oid": "1a92d2961ec179d6f0cbd9cbdd454c7b207262c5", "url": "https://github.com/apache/hudi/commit/1a92d2961ec179d6f0cbd9cbdd454c7b207262c5", "message": "[HUDI-1415] Read Hoodie Table As Spark DataSource Table\n\n[HUDI-1415] refactor same code\n\nfix test case\n\nfix read partitioned table exception\n\nfix some code review\n\nfix test case\n\nadd more comments\n\nfix kafka test leak\n\nrelease after test finished", "committedDate": "2021-04-19T07:57:07Z", "type": "forcePushed"}, {"oid": "348cf1f629913dc193c17b3377b85351c2596ed9", "url": "https://github.com/apache/hudi/commit/348cf1f629913dc193c17b3377b85351c2596ed9", "message": "[HUDI-1415] Read Hoodie Table As Spark DataSource Table", "committedDate": "2021-04-19T07:58:00Z", "type": "forcePushed"}, {"oid": "8bc3097f3683a62429b5e2d2b54833c87773fc5e", "url": "https://github.com/apache/hudi/commit/8bc3097f3683a62429b5e2d2b54833c87773fc5e", "message": "[HUDI-1415] Read Hoodie Table As Spark DataSource Table", "committedDate": "2021-04-20T02:39:53Z", "type": "forcePushed"}, {"oid": "173d21ee455b8ec1bca690d6aecc5c3396bbf7aa", "url": "https://github.com/apache/hudi/commit/173d21ee455b8ec1bca690d6aecc5c3396bbf7aa", "message": "[HUDI-1415] Read Hoodie Table As Spark DataSource Table", "committedDate": "2021-04-20T02:45:16Z", "type": "forcePushed"}, {"oid": "657bf34ca752c67ad4ae902d4458471e6e72601d", "url": "https://github.com/apache/hudi/commit/657bf34ca752c67ad4ae902d4458471e6e72601d", "message": "[HUDI-1415] Read Hoodie Table As Spark DataSource Table", "committedDate": "2021-04-20T02:58:12Z", "type": "forcePushed"}, {"oid": "5b865ec35c296b1182b8a90ffbbbcd5a783aeacc", "url": "https://github.com/apache/hudi/commit/5b865ec35c296b1182b8a90ffbbbcd5a783aeacc", "message": "[HUDI-1415] Read Hoodie Table As Spark DataSource Table", "committedDate": "2021-04-20T03:30:46Z", "type": "forcePushed"}, {"oid": "fa6198382bfaf4a1823064aeea36ea2e74b2b5ed", "url": "https://github.com/apache/hudi/commit/fa6198382bfaf4a1823064aeea36ea2e74b2b5ed", "message": "[HUDI-1415] Read Hoodie Table As Spark DataSource Table", "committedDate": "2021-04-20T05:04:54Z", "type": "commit"}, {"oid": "fa6198382bfaf4a1823064aeea36ea2e74b2b5ed", "url": "https://github.com/apache/hudi/commit/fa6198382bfaf4a1823064aeea36ea2e74b2b5ed", "message": "[HUDI-1415] Read Hoodie Table As Spark DataSource Table", "committedDate": "2021-04-20T05:04:54Z", "type": "forcePushed"}]}