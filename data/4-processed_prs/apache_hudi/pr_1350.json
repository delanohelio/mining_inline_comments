{"pr_number": 1350, "pr_title": "[HUDI-629]: Replace Guava's Hashing with an equivalent in NumericUtils.java", "pr_createdAt": "2020-02-22T20:45:33Z", "pr_url": "https://github.com/apache/hudi/pull/1350", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NzI3Mw==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r382957273", "bodyText": "How about adding checkState to ValidationUtils?", "author": "leesf", "createdAt": "2020-02-23T02:12:34Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/minicluster/HdfsTestService.java", "diffHunk": "@@ -66,7 +66,7 @@ public Configuration getHadoopConf() {\n   }\n \n   public MiniDFSCluster start(boolean format) throws IOException {\n-    Preconditions.checkState(workDir != null, \"The work dir must be set before starting cluster.\");\n+    Objects.requireNonNull(workDir, \"The work dir must be set before starting cluster.\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1ODA3Ng==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r382958076", "bodyText": "For this null check, its unnecessary - there is a checkState in ValidationUtils to check other boolean conditions. But null check, its fine to use Objects.checkNotNull()", "author": "smarthi", "createdAt": "2020-02-23T02:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NzI3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NzMxMw==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r382957313", "bodyText": "ditto", "author": "leesf", "createdAt": "2020-02-23T02:13:33Z", "path": "hudi-hive/src/test/java/org/apache/hudi/hive/util/HiveTestService.java", "diffHunk": "@@ -87,7 +87,7 @@ public Configuration getHadoopConf() {\n   }\n \n   public HiveServer2 start() throws IOException {\n-    Preconditions.checkState(workDir != null, \"The work dir must be set before starting cluster.\");\n+    Objects.requireNonNull(workDir, \"The work dir must be set before starting cluster.\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1ODA4Mw==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r382958083", "bodyText": "ditto", "author": "smarthi", "createdAt": "2020-02-23T02:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NzMxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NzUwMw==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r382957503", "bodyText": "How about removing the LOGGER and throwing exception here? though Objects.requireNonNull(md) would also throw exception if md is null.", "author": "leesf", "createdAt": "2020-02-23T02:17:37Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/NumericUtils.java", "diffHunk": "@@ -31,4 +41,28 @@ public static String humanReadableByteCount(double bytes) {\n     String pre = \"KMGTPE\".charAt(exp - 1) + \"\";\n     return String.format(\"%.1f %sB\", bytes / Math.pow(1024, exp), pre);\n   }\n+\n+  public static long getMessageDigestHash(final String algorithmName, final String string) {\n+    MessageDigest md = null;\n+    try {\n+      md = MessageDigest.getInstance(algorithmName);\n+    } catch (NoSuchAlgorithmException e) {\n+      LOGGER.error(\"Invalid Algorithm Specified: {}\", algorithmName);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1Nzk5Nw==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r382957997", "bodyText": "ok will do", "author": "smarthi", "createdAt": "2020-02-23T02:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NzUwMw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NzAxMw==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r384297013", "bodyText": "Can we put this back the original place?", "author": "yanghua", "createdAt": "2020-02-26T06:33:57Z", "path": "hudi-client/src/main/java/org/apache/hudi/io/compact/HoodieMergeOnReadTableCompactor.java", "diffHunk": "@@ -18,6 +18,7 @@\n \n package org.apache.hudi.io.compact;\n \n+import com.google.common.collect.Sets;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMxMjA0OQ==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r384312049", "bodyText": "done", "author": "smarthi", "createdAt": "2020-02-26T07:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NzAxMw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0NzAwMw==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392047003", "bodyText": "can we move this try-catch block to a method for reuse?  Also let's have that throw a HoodieRuntimeException instead of logging the error.. we cannot really make reasonable progress otherwise..  ?\nShould we change from MD5 to something else? We are not doing anything secure here.. just want something that will give good uniform hashing", "author": "vinothchandar", "createdAt": "2020-03-13T06:15:10Z", "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/BucketizedBloomCheckPartitioner.java", "diffHunk": "@@ -144,7 +144,12 @@ public int numPartitions() {\n   @Override\n   public int getPartition(Object key) {\n     final Pair<String, String> parts = (Pair<String, String>) key;\n-    final long hashOfKey = Hashing.md5().hashString(parts.getRight(), StandardCharsets.UTF_8).asLong();\n+    long hashOfKey = 0L;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIxMTMxOQ==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392211319", "bodyText": "CI tests passed with SHA-256.", "author": "smarthi", "createdAt": "2020-03-13T12:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0NzAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2NzE1MQ==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392467151", "bodyText": "Reverting back to MD5", "author": "smarthi", "createdAt": "2020-03-13T20:49:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0NzAwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0NzA1NQ==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392047055", "bodyText": "same here.. new method?", "author": "vinothchandar", "createdAt": "2020-03-13T06:15:25Z", "path": "hudi-client/src/main/java/org/apache/hudi/table/HoodieCopyOnWriteTable.java", "diffHunk": "@@ -732,8 +732,12 @@ public int getPartition(Object key) {\n         // pick the target bucket to use based on the weights.\n         double totalWeight = 0.0;\n         final long totalInserts = Math.max(1, globalStat.getNumInserts());\n-        final long hashOfKey =\n-            Hashing.md5().hashString(keyLocation._1().getRecordKey(), StandardCharsets.UTF_8).asLong();\n+        long hashOfKey = 0L;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0Nzg1Ng==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392047856", "bodyText": "nit: remove extra newline?", "author": "vinothchandar", "createdAt": "2020-03-13T06:18:34Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/view/HoodieTableFileSystemView.java", "diffHunk": "@@ -142,7 +142,7 @@ protected void resetPendingCompactionOperations(Stream<Pair<String, CompactionOp\n   @Override\n   protected void addPendingCompactionOperations(Stream<Pair<String, CompactionOperation>> operations) {\n     operations.forEach(opInstantPair -> {\n-      Preconditions.checkArgument(!fgIdToPendingCompaction.containsKey(opInstantPair.getValue().getFileGroupId()),\n+      ValidationUtils.checkArgument(!fgIdToPendingCompaction.containsKey(opInstantPair.getValue().getFileGroupId()),", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE1NDg1Mg==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392154852", "bodyText": "where is it?", "author": "smarthi", "createdAt": "2020-03-13T10:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0Nzg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMyMDE3Ng==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392320176", "bodyText": "huh.. I bet I saw it.. :| nvm", "author": "vinothchandar", "createdAt": "2020-03-13T16:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA0Nzg1Ng=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "903224d0b3b2968905efba40309522f8cead8f6f", "url": "https://github.com/apache/hudi/commit/903224d0b3b2968905efba40309522f8cead8f6f", "message": "HUDI-", "committedDate": "2020-03-13T10:51:16Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMyMTA0OA==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392321048", "bodyText": "combine return and bytes assignment lines?", "author": "vinothchandar", "createdAt": "2020-03-13T16:02:27Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/NumericUtils.java", "diffHunk": "@@ -31,4 +38,28 @@ public static String humanReadableByteCount(double bytes) {\n     String pre = \"KMGTPE\".charAt(exp - 1) + \"\";\n     return String.format(\"%.1f %sB\", bytes / Math.pow(1024, exp), pre);\n   }\n+\n+  public static long getMessageDigestHash(final String algorithmName, final String string) {\n+    MessageDigest md;\n+    try {\n+      md = MessageDigest.getInstance(algorithmName);\n+    } catch (NoSuchAlgorithmException e) {\n+      throw new HoodieException(e);\n+    }\n+    byte[] bytes = Objects.requireNonNull(md).digest(string.getBytes(StandardCharsets.UTF_8));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMyMTg2Mg==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392321862", "bodyText": "if we assert that its larger than 8 bytes, do we have to pad?", "author": "vinothchandar", "createdAt": "2020-03-13T16:03:57Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/NumericUtils.java", "diffHunk": "@@ -31,4 +38,28 @@ public static String humanReadableByteCount(double bytes) {\n     String pre = \"KMGTPE\".charAt(exp - 1) + \"\";\n     return String.format(\"%.1f %sB\", bytes / Math.pow(1024, exp), pre);\n   }\n+\n+  public static long getMessageDigestHash(final String algorithmName, final String string) {\n+    MessageDigest md;\n+    try {\n+      md = MessageDigest.getInstance(algorithmName);\n+    } catch (NoSuchAlgorithmException e) {\n+      throw new HoodieException(e);\n+    }\n+    byte[] bytes = Objects.requireNonNull(md).digest(string.getBytes(StandardCharsets.UTF_8));\n+    return asLong(bytes);\n+  }\n+\n+  private static long asLong(byte[] bytes) {\n+    ValidationUtils.checkState(bytes.length >= 8, \"HashCode#asLong() requires >= 8 bytes (it only has %s bytes).\");\n+    return padToLong(bytes);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMyMjI3OQ==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392322279", "bodyText": "this should only be throwing HoodieException now?", "author": "vinothchandar", "createdAt": "2020-03-13T16:04:38Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/util/TestNumericUtils.java", "diffHunk": "@@ -37,6 +40,13 @@ public void testHumanReadableByteCount() {\n     assertEquals(\"27.0 GB\", NumericUtils.humanReadableByteCount(28991029248L));\n     assertEquals(\"1.7 TB\", NumericUtils.humanReadableByteCount(1855425871872L));\n     assertEquals(\"8.0 EB\", NumericUtils.humanReadableByteCount(9223372036854775807L));\n+  }\n \n+  @Test\n+  public void testGetMessageDigestHash() throws NoSuchAlgorithmException {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "ea4094e4136bac1207aafec0dc1df4a5fa414ad1", "url": "https://github.com/apache/hudi/commit/ea4094e4136bac1207aafec0dc1df4a5fa414ad1", "message": "[HUDI-629]: Replace Guava's Hashing with an equivalent in NumericUtils.java", "committedDate": "2020-03-13T23:58:34Z", "type": "commit"}, {"oid": "ea4094e4136bac1207aafec0dc1df4a5fa414ad1", "url": "https://github.com/apache/hudi/commit/ea4094e4136bac1207aafec0dc1df4a5fa414ad1", "message": "[HUDI-629]: Replace Guava's Hashing with an equivalent in NumericUtils.java", "committedDate": "2020-03-13T23:58:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MTk2OQ==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392641969", "bodyText": "do we need & 0xFF ?\nwould it work if we do\nlong retVal = bytes[0] ?", "author": "s-sanjay", "createdAt": "2020-03-15T05:03:50Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/NumericUtils.java", "diffHunk": "@@ -31,4 +38,27 @@ public static String humanReadableByteCount(double bytes) {\n     String pre = \"KMGTPE\".charAt(exp - 1) + \"\";\n     return String.format(\"%.1f %sB\", bytes / Math.pow(1024, exp), pre);\n   }\n+\n+  public static long getMessageDigestHash(final String algorithmName, final String string) {\n+    MessageDigest md;\n+    try {\n+      md = MessageDigest.getInstance(algorithmName);\n+    } catch (NoSuchAlgorithmException e) {\n+      throw new HoodieException(e);\n+    }\n+    return asLong(Objects.requireNonNull(md).digest(string.getBytes(StandardCharsets.UTF_8)));\n+  }\n+\n+  public static long asLong(byte[] bytes) {\n+    ValidationUtils.checkState(bytes.length >= 8, \"HashCode#asLong() requires >= 8 bytes.\");\n+    return padToLong(bytes);\n+  }\n+\n+  public static long padToLong(byte[] bytes) {\n+    long retVal = (bytes[0] & 0xFF);", "originalCommit": "ea4094e4136bac1207aafec0dc1df4a5fa414ad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwMjYzMw==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r393102633", "bodyText": "@s-sanjay do you see a specific problem? may be an example could help?", "author": "vinothchandar", "createdAt": "2020-03-16T15:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MTk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1OTIzNQ==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r394359235", "bodyText": "@vinothchandar this is a nitpick comment. there is nothing wrong in and with 0xFF but it is not really needed right ?\nI maybe wrong here but my understanding is\nlong retVal = bytes[0]\nand\nlong retVal = (bytes[0] & 0xFF) are the same", "author": "s-sanjay", "createdAt": "2020-03-18T13:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MTk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0OTcyNQ==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r396049725", "bodyText": "long retVal = (bytes[0] & 0xFF) are the same\nhmm yeah.. you are right..", "author": "vinothchandar", "createdAt": "2020-03-22T03:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MTk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MjA3Mw==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r392642073", "bodyText": "wondering instead of making this public, if we can make it private and then test the asLong method\nalso would it help in readability if we unroll the for loop like this ?\nbyte[] padded = Arrays.copyOf(bytes, 8);\nlong retVal =  padded[0]\nretVal |= (padded[1] << i * 8)\nretVal |= (padded[2] << i * 16)\nretVal |= (padded[3] << i * 24)\nretVal |= (padded[4] << i * 32)\nretVal |= (padded[5] << i * 40)\nretVal |= (padded[6] << i * 48)\nretVal |= (padded[7] << i * 56)", "author": "s-sanjay", "createdAt": "2020-03-15T05:06:34Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/util/NumericUtils.java", "diffHunk": "@@ -31,4 +38,27 @@ public static String humanReadableByteCount(double bytes) {\n     String pre = \"KMGTPE\".charAt(exp - 1) + \"\";\n     return String.format(\"%.1f %sB\", bytes / Math.pow(1024, exp), pre);\n   }\n+\n+  public static long getMessageDigestHash(final String algorithmName, final String string) {\n+    MessageDigest md;\n+    try {\n+      md = MessageDigest.getInstance(algorithmName);\n+    } catch (NoSuchAlgorithmException e) {\n+      throw new HoodieException(e);\n+    }\n+    return asLong(Objects.requireNonNull(md).digest(string.getBytes(StandardCharsets.UTF_8)));\n+  }\n+\n+  public static long asLong(byte[] bytes) {\n+    ValidationUtils.checkState(bytes.length >= 8, \"HashCode#asLong() requires >= 8 bytes.\");\n+    return padToLong(bytes);\n+  }\n+\n+  public static long padToLong(byte[] bytes) {\n+    long retVal = (bytes[0] & 0xFF);\n+    for (int i = 1; i < Math.min(bytes.length, 8); i++) {", "originalCommit": "ea4094e4136bac1207aafec0dc1df4a5fa414ad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA0OTcxNQ==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r396049715", "bodyText": "I think modern compiler will do the unrolling by itself?\n+1 on making this private.. and adding a test..\nwould you like to take it up :)", "author": "vinothchandar", "createdAt": "2020-03-22T03:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MjA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0MzUxOA==", "url": "https://github.com/apache/hudi/pull/1350#discussion_r396443518", "bodyText": "yes I can do it :D\nyeah modern JIT will unroll it, if all the time it is called with bytes.length > 8 I guess... this was more of a readability thing...", "author": "s-sanjay", "createdAt": "2020-03-23T13:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY0MjA3Mw=="}], "type": "inlineReview"}]}