{"pr_number": 2227, "pr_title": "[HUDI-1367] Make deltaStreamer transition from dfsSouce to kafkasouce", "pr_createdAt": "2020-11-02T14:51:07Z", "pr_url": "https://github.com/apache/hudi/pull/2227", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3NTk4Nw==", "url": "https://github.com/apache/hudi/pull/2227#discussion_r517075987", "bodyText": "I suggest check the string value of  auto.offset.reset and set default value to LATEST  if it is not set to LATEST or EARLIEST before we get the KafkaResetOffsetStrategies.\nBecause KafkaResetOffsetStrategies has only two values: LATEST and LATEST, if the user set it to other value this line will throw an exception.\nthe lines bellow is useless:\ndefault:\n            throw new HoodieNotSupportedException(\"Auto reset value must be one of 'earliest' or 'latest' \");", "author": "wangxianghu", "createdAt": "2020-11-04T03:18:43Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/helpers/KafkaOffsetGen.java", "diffHunk": "@@ -156,15 +160,18 @@ public static long totalNewMessages(OffsetRange[] ranges) {\n   private final HashMap<String, Object> kafkaParams;\n   private final TypedProperties props;\n   protected final String topicName;\n+  private final KafkaResetOffsetStrategies autoResetValue;\n \n   public KafkaOffsetGen(TypedProperties props) {\n     this.props = props;\n+\n     kafkaParams = new HashMap<>();\n     for (Object prop : props.keySet()) {\n       kafkaParams.put(prop.toString(), props.get(prop.toString()));\n     }\n     DataSourceUtils.checkRequiredProperties(props, Collections.singletonList(Config.KAFKA_TOPIC_NAME));\n     topicName = props.getString(Config.KAFKA_TOPIC_NAME);\n+    autoResetValue = KafkaResetOffsetStrategies.valueOf(props.getString(\"auto.offset.reset\", Config.DEFAULT_AUTO_RESET_OFFSET.toString()).toUpperCase());", "originalCommit": "07153c11e5650506c929d1875069b79696127b59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQyODc5NQ==", "url": "https://github.com/apache/hudi/pull/2227#discussion_r571428795", "bodyText": "@liujinhui1994 any response?", "author": "yanghua", "createdAt": "2021-02-06T12:18:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3NTk4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQyNzE4Ng==", "url": "https://github.com/apache/hudi/pull/2227#discussion_r571427186", "bodyText": "checkTopicCheckpoint  looks better\uff1f", "author": "yanghua", "createdAt": "2021-02-06T12:15:51Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/helpers/KafkaOffsetGen.java", "diffHunk": "@@ -257,6 +273,11 @@ public boolean checkTopicExists(KafkaConsumer consumer)  {\n     return result.containsKey(topicName);\n   }\n \n+  public boolean checkTopicCheckPoint(Option<String> lastCheckpointStr) {", "originalCommit": "d3fe5e042f31f5b76657eabbbb7bfc954b458843", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjAwMjI3Mg==", "url": "https://github.com/apache/hudi/pull/2227#discussion_r572002272", "bodyText": "may I know why this is public ?", "author": "nsivabalan", "createdAt": "2021-02-08T12:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQyNzE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzMDMwNA==", "url": "https://github.com/apache/hudi/pull/2227#discussion_r579630304", "bodyText": "thanks for pointing out", "author": "liujinhui1994", "createdAt": "2021-02-20T09:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQyNzE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQyODcxOA==", "url": "https://github.com/apache/hudi/pull/2227#discussion_r571428718", "bodyText": "Please add some comments to describe the pattern? i.e. an example checkpoint string?", "author": "yanghua", "createdAt": "2021-02-06T12:17:34Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/helpers/KafkaOffsetGen.java", "diffHunk": "@@ -49,6 +51,8 @@\n \n   private static final Logger LOG = LogManager.getLogger(KafkaOffsetGen.class);\n \n+  private final Pattern pattern = Pattern.compile(\".*,.*:.*\");", "originalCommit": "d3fe5e042f31f5b76657eabbbb7bfc954b458843", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjAwMjg3MA==", "url": "https://github.com/apache/hudi/pull/2227#discussion_r572002870", "bodyText": "is it intentional for NONE we will throw exception? also, may I know where is NONE(KafkaResetOffsetStrategies) used?", "author": "nsivabalan", "createdAt": "2021-02-08T12:19:39Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/helpers/KafkaOffsetGen.java", "diffHunk": "@@ -227,12 +232,23 @@ public KafkaOffsetGen(TypedProperties props) {\n   // else return earliest offsets\n   private Map<TopicPartition, Long> checkupValidOffsets(KafkaConsumer consumer,\n                                                         Option<String> lastCheckpointStr, Set<TopicPartition> topicPartitions) {\n-    Map<TopicPartition, Long> checkpointOffsets = CheckpointUtils.strToOffsets(lastCheckpointStr.get());\n     Map<TopicPartition, Long> earliestOffsets = consumer.beginningOffsets(topicPartitions);\n+    if (checkTopicCheckPoint(lastCheckpointStr)) {\n+      Map<TopicPartition, Long> checkpointOffsets = CheckpointUtils.strToOffsets(lastCheckpointStr.get());\n+      boolean checkpointOffsetReseter = checkpointOffsets.entrySet().stream()\n+              .anyMatch(offset -> offset.getValue() < earliestOffsets.get(offset.getKey()));\n+      return checkpointOffsetReseter ? earliestOffsets : checkpointOffsets;\n+    }\n+\n+    switch (autoResetValue) {\n+      case EARLIEST:\n+        return earliestOffsets;\n+      case LATEST:\n+        return consumer.endOffsets(topicPartitions);\n+      default:", "originalCommit": "d3fe5e042f31f5b76657eabbbb7bfc954b458843", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTYzMDE1OA==", "url": "https://github.com/apache/hudi/pull/2227#discussion_r579630158", "bodyText": "I also don\u2019t think it\u2019s necessary to add NONE", "author": "liujinhui1994", "createdAt": "2021-02-20T09:29:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MjAwMjg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTY4NDI4MA==", "url": "https://github.com/apache/hudi/pull/2227#discussion_r579684280", "bodyText": "lets add this to Config (in line 154 in this file)\nAlso, lets name this our usual way.\n\"hoodie.deltastreamer.source.kafka.auto.offset.reset\"", "author": "nsivabalan", "createdAt": "2021-02-20T17:29:25Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/helpers/KafkaOffsetGen.java", "diffHunk": "@@ -156,15 +163,18 @@ public static long totalNewMessages(OffsetRange[] ranges) {\n   private final HashMap<String, Object> kafkaParams;\n   private final TypedProperties props;\n   protected final String topicName;\n+  private final KafkaResetOffsetStrategies autoResetValue;\n \n   public KafkaOffsetGen(TypedProperties props) {\n     this.props = props;\n+\n     kafkaParams = new HashMap<>();\n     for (Object prop : props.keySet()) {\n       kafkaParams.put(prop.toString(), props.get(prop.toString()));\n     }\n     DataSourceUtils.checkRequiredProperties(props, Collections.singletonList(Config.KAFKA_TOPIC_NAME));\n     topicName = props.getString(Config.KAFKA_TOPIC_NAME);\n+    autoResetValue = KafkaResetOffsetStrategies.valueOf(props.getString(\"auto.offset.reset\", Config.DEFAULT_AUTO_RESET_OFFSET.toString()).toUpperCase());", "originalCommit": "43d4f7f639a19f389c4d7ca9725b963ada2c7e80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDg4MTI2Ng==", "url": "https://github.com/apache/hudi/pull/2227#discussion_r580881266", "bodyText": "ok", "author": "liujinhui1994", "createdAt": "2021-02-23T09:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTY4NDI4MA=="}], "type": "inlineReview"}, {"oid": "208e59e7c6125fb4b499ac8bbcf45ac690d2b6bf", "url": "https://github.com/apache/hudi/commit/208e59e7c6125fb4b499ac8bbcf45ac690d2b6bf", "message": "hudi-1367", "committedDate": "2021-02-24T12:34:58Z", "type": "commit"}, {"oid": "3a5fd9b91b20cfc245855d2e7d0c5902fada60e6", "url": "https://github.com/apache/hudi/commit/3a5fd9b91b20cfc245855d2e7d0c5902fada60e6", "message": "hudi-1367", "committedDate": "2021-02-24T12:34:59Z", "type": "commit"}, {"oid": "b998d8547208490753d0fdf0b15f12121a128636", "url": "https://github.com/apache/hudi/commit/b998d8547208490753d0fdf0b15f12121a128636", "message": "hudi-1367", "committedDate": "2021-02-24T12:35:00Z", "type": "commit"}, {"oid": "e2a0ce91bf7f784bfb294c9574e78115131cfb92", "url": "https://github.com/apache/hudi/commit/e2a0ce91bf7f784bfb294c9574e78115131cfb92", "message": "hudi-1367\nModify as suggested: Enum more KafkaResetOffsetStrategies", "committedDate": "2021-02-24T12:35:00Z", "type": "commit"}, {"oid": "33444fdb84f3f1b9de22ed90a7db6ebc8eeb0b2b", "url": "https://github.com/apache/hudi/commit/33444fdb84f3f1b9de22ed90a7db6ebc8eeb0b2b", "message": "Fix some defect", "committedDate": "2021-02-24T12:35:01Z", "type": "commit"}, {"oid": "d531fb1d2d97797fbe2ea9faf7e8a774498550a8", "url": "https://github.com/apache/hudi/commit/d531fb1d2d97797fbe2ea9faf7e8a774498550a8", "message": "Adding tests to delta streamer to test transition from parquet source to kafka source", "committedDate": "2021-02-24T12:35:01Z", "type": "commit"}, {"oid": "39adecbf70449aaa02b083146662f2507dec3355", "url": "https://github.com/apache/hudi/commit/39adecbf70449aaa02b083146662f2507dec3355", "message": "Fixing test failures", "committedDate": "2021-02-24T12:44:20Z", "type": "commit"}, {"oid": "f14edeb95d5079c4c168533b4409a0f911bdf260", "url": "https://github.com/apache/hudi/commit/f14edeb95d5079c4c168533b4409a0f911bdf260", "message": "Fixing fialing test", "committedDate": "2021-02-24T15:23:25Z", "type": "commit"}, {"oid": "3ea040e1ec261cac4a1f894bc5197c34774e717c", "url": "https://github.com/apache/hudi/commit/3ea040e1ec261cac4a1f894bc5197c34774e717c", "message": "Addressing feedback", "committedDate": "2021-02-25T03:13:20Z", "type": "commit"}]}