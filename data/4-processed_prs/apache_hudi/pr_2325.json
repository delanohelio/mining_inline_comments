{"pr_number": 2325, "pr_title": "[HUDI-699] Fix CompactionCommand and add unit test for CompactionCommand", "pr_createdAt": "2020-12-10T18:19:18Z", "pr_url": "https://github.com/apache/hudi/pull/2325", "timeline": [{"oid": "882269803c138392e7f7b9300cbc4184daf5c4a3", "url": "https://github.com/apache/hudi/commit/882269803c138392e7f7b9300cbc4184daf5c4a3", "message": "other", "committedDate": "2021-01-15T06:29:50Z", "type": "forcePushed"}, {"oid": "d7298cd5fe20eccc84eda5736000df37130815c9", "url": "https://github.com/apache/hudi/commit/d7298cd5fe20eccc84eda5736000df37130815c9", "message": "[HUDI-699]Fix CompactionCommand and add unit test for CompactionCommand", "committedDate": "2021-01-15T06:29:48Z", "type": "forcePushed"}, {"oid": "79b994abe1d9c80bffa16a475717a6053b57850e", "url": "https://github.com/apache/hudi/commit/79b994abe1d9c80bffa16a475717a6053b57850e", "message": "[HUDI-699]Fix CompactionCommand and add unit test for CompactionCommand", "committedDate": "2021-01-22T09:49:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzMjkxNw==", "url": "https://github.com/apache/hudi/pull/2325#discussion_r568532917", "bodyText": "Remove the empty white space?", "author": "yanghua", "createdAt": "2021-02-02T11:36:23Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -222,6 +224,8 @@ public String compact(\n           help = \"Parallelism for hoodie compaction\") final String parallelism,\n       @CliOption(key = \"schemaFilePath\", mandatory = true,\n           help = \"Path for Avro schema file\") final String schemaFilePath,\n+      @CliOption(key = \"sparkMaster\", unspecifiedDefaultValue = \"local\",\n+          help = \"Spark Master \") String master,", "originalCommit": "79b994abe1d9c80bffa16a475717a6053b57850e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNDU0OQ==", "url": "https://github.com/apache/hudi/pull/2325#discussion_r568534549", "bodyText": "Break the .add into a new line?", "author": "yanghua", "createdAt": "2021-02-02T11:39:08Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -444,9 +455,12 @@ public String validateCompaction(\n       });\n \n       Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n-      TableHeader header = new TableHeader().addTableHeaderField(\"File Id\").addTableHeaderField(\"Base Instant Time\")\n-          .addTableHeaderField(\"Base Data File\").addTableHeaderField(\"Num Delta Files\").addTableHeaderField(\"Valid\")\n-          .addTableHeaderField(\"Error\");\n+      TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_FILE_ID)", "originalCommit": "79b994abe1d9c80bffa16a475717a6053b57850e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNTAzNw==", "url": "https://github.com/apache/hudi/pull/2325#discussion_r568535037", "bodyText": "break the addxxx method into a new line?", "author": "yanghua", "createdAt": "2021-02-02T11:40:02Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -616,9 +631,12 @@ private String getRenamesToBePrinted(List<RenameOpResult> res, Integer limit, St\n       });\n \n       Map<String, Function<Object, String>> fieldNameToConverterMap = new HashMap<>();\n-      TableHeader header = new TableHeader().addTableHeaderField(\"File Id\").addTableHeaderField(\"Source File Path\")\n-          .addTableHeaderField(\"Destination File Path\").addTableHeaderField(\"Rename Executed?\")\n-          .addTableHeaderField(\"Rename Succeeded?\").addTableHeaderField(\"Error\");\n+      TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_FILE_ID)", "originalCommit": "79b994abe1d9c80bffa16a475717a6053b57850e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNjAyMA==", "url": "https://github.com/apache/hudi/pull/2325#discussion_r568536020", "bodyText": "Why do we need to change this?", "author": "yanghua", "createdAt": "2021-02-02T11:41:53Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCommitsCommand.java", "diffHunk": "@@ -194,7 +194,7 @@ public void testShowArchivedCommits() throws Exception {\n     // archived 101 and 102 instants, remove 103 and 104 instant\n     data.remove(\"103\");\n     data.remove(\"104\");\n-    String expected = generateExpectData(3, data);\n+    String expected = generateExpectData(1, data);", "originalCommit": "79b994abe1d9c80bffa16a475717a6053b57850e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA4MjI3OA==", "url": "https://github.com/apache/hudi/pull/2325#discussion_r570082278", "bodyText": "Why do we need to change this?\n\n\n  \n    \n      hudi/hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java\n    \n    \n         Line 133\n      in\n      647e9fa\n    \n    \n    \n    \n\n        \n          \n           return new HoodieInstant(false, action, instantTime); \n        \n    \n  \n\n\n\n  \n    \n      hudi/hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieInstant.java\n    \n    \n        Lines 103 to 108\n      in\n      647e9fa\n    \n    \n    \n    \n\n        \n          \n           public HoodieInstant(boolean isInflight, String action, String timestamp) { \n        \n\n        \n          \n             // TODO: vb - Preserving for avoiding cascading changes. This constructor will be updated in subsequent PR \n        \n\n        \n          \n             this.state = isInflight ? State.INFLIGHT : State.COMPLETED; \n        \n\n        \n          \n             this.action = action; \n        \n\n        \n          \n             this.timestamp = timestamp; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nnew HoodieInstant(false, action, instantTime) always return COMPLETED when State is not INFLIGHT, so there is 3 COMPLETED records for one instanct. Now, use the real state instead, and can get the correct number.", "author": "hddong", "createdAt": "2021-02-04T09:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNjAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA4Mjg2Mw==", "url": "https://github.com/apache/hudi/pull/2325#discussion_r570082863", "bodyText": "return new HoodieInstant(HoodieInstant.State.valueOf(record.get(ACTION_STATE).toString()), action, instantTime);", "author": "hddong", "createdAt": "2021-02-04T09:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNjAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNzI1NA==", "url": "https://github.com/apache/hudi/pull/2325#discussion_r568537254", "bodyText": "Can we follow this naming pattern: testXXXCommand ?", "author": "yanghua", "createdAt": "2021-02-02T11:44:03Z", "path": "hudi-cli/src/test/java/org/apache/hudi/cli/commands/TestCompactionCommand.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.cli.commands;\n+\n+import org.apache.hudi.avro.model.HoodieCompactionPlan;\n+import org.apache.hudi.cli.HoodieCLI;\n+import org.apache.hudi.cli.HoodiePrintHelper;\n+import org.apache.hudi.cli.TableHeader;\n+import org.apache.hudi.cli.testutils.AbstractShellIntegrationTest;\n+import org.apache.hudi.cli.testutils.HoodieTestCommitMetadataGenerator;\n+import org.apache.hudi.common.model.HoodieAvroPayload;\n+import org.apache.hudi.common.model.HoodieTableType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.timeline.HoodieActiveTimeline;\n+import org.apache.hudi.common.table.timeline.HoodieInstant;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.common.table.timeline.TimelineMetadataUtils;\n+import org.apache.hudi.common.table.timeline.versioning.TimelineLayoutVersion;\n+import org.apache.hudi.common.testutils.CompactionTestUtils;\n+import org.apache.hudi.common.util.Option;\n+import org.apache.hudi.config.HoodieCompactionConfig;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.exception.HoodieException;\n+import org.apache.hudi.table.HoodieSparkTable;\n+import org.apache.hudi.table.HoodieTimelineArchiveLog;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.shell.core.CommandResult;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.apache.hudi.common.table.timeline.HoodieTimeline.COMPACTION_ACTION;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+/**\n+ * Test Cases for {@link CompactionCommand}.\n+ */\n+public class TestCompactionCommand extends AbstractShellIntegrationTest {\n+\n+  private String tableName;\n+  private String tablePath;\n+\n+  @BeforeEach\n+  public void init() {\n+    tableName = \"test_table\";\n+    tablePath = basePath + tableName;\n+  }\n+\n+  @Test\n+  public void testVerifyTableType() throws IOException {\n+    // create COW table.\n+    new TableCommand().createTable(\n+        tablePath, tableName, HoodieTableType.COPY_ON_WRITE.name(),\n+        \"\", TimelineLayoutVersion.VERSION_1, HoodieAvroPayload.class.getName());\n+\n+    // expect HoodieException for COPY_ON_WRITE table.\n+    assertThrows(HoodieException.class,\n+        () -> new CompactionCommand().compactionsAll(false, -1, \"\", false, false));\n+  }\n+\n+  @Test\n+  public void testCompactionsAll() throws IOException {", "originalCommit": "79b994abe1d9c80bffa16a475717a6053b57850e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA4NzEyMg==", "url": "https://github.com/apache/hudi/pull/2325#discussion_r570087122", "bodyText": "Can we follow this naming pattern: testXXXCommand ?\n\nAdd java doc for them first as before. Will modify it if needed.", "author": "hddong", "createdAt": "2021-02-04T09:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUzNzI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTA5MjA2OQ==", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601092069", "bodyText": "\"actionState\" -> ACTION_STATE", "author": "wangxianghu", "createdAt": "2021-03-25T06:22:09Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -108,6 +120,14 @@ public void loadInstantDetailsInMemory(String startTs, String endTs) {\n     loadInstants(startTs, endTs);\n   }\n \n+  public void loadCompactionDetailsInMemory(String startTs, String endTs) {\n+    // load compactionPlan\n+    loadInstants(new TimeRangeFilter(startTs, endTs), true, record ->\n+        record.get(ACTION_TYPE_KEY).toString().equals(HoodieTimeline.COMPACTION_ACTION)\n+            && HoodieInstant.State.INFLIGHT.toString().equals(record.get(\"actionState\").toString())", "originalCommit": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTA5Mjk0MA==", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601092940", "bodyText": "This method seems not used anywhere?", "author": "wangxianghu", "createdAt": "2021-03-25T06:23:02Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -254,4 +288,19 @@ private int getArchivedFileSuffix(FileStatus f) {\n       return 0;\n     }\n   }\n+\n+  @Override\n+  public HoodieDefaultTimeline getCommitsAndCompactionTimeline() {\n+    // filter in-memory instants\n+    Set<String> validActions = CollectionUtils.createSet(COMMIT_ACTION, DELTA_COMMIT_ACTION, COMPACTION_ACTION, REPLACE_COMMIT_ACTION);\n+    return new HoodieDefaultTimeline(getInstants().filter(i ->\n+        readCommits.keySet().contains(i.getTimestamp()))\n+        .filter(s -> validActions.contains(s.getAction())), details);\n+  }\n+\n+  public HoodieArchivedTimeline filterArchivedCompactionInstant() {\n+    // filter INFLIGHT compaction instants\n+    return new HoodieArchivedTimeline(this.metaClient, getInstants().filter(i ->\n+        i.isInflight() && i.getAction().equals(HoodieTimeline.COMPACTION_ACTION)));\n+  }", "originalCommit": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTEwNDcxMw==", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601104713", "bodyText": "param Class<T> clazz seems redundant", "author": "wangxianghu", "createdAt": "2021-03-25T06:42:09Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/TimelineMetadataUtils.java", "diffHunk": "@@ -176,4 +179,13 @@ public static HoodieReplaceCommitMetadata deserializeHoodieReplaceMetadata(byte[\n     ValidationUtils.checkArgument(fileReader.hasNext(), \"Could not deserialize metadata of type \" + clazz);\n     return fileReader.next();\n   }\n+\n+  public static <T extends SpecificRecordBase> T deserializeAvroRecordMetadata(byte[] bytes, Schema schema, Class<T> clazz)\n+      throws IOException {\n+    return  deserializeAvroRecordMetadata(HoodieAvroUtils.bytesToAvro(bytes, schema), schema, clazz);\n+  }\n+\n+  public static <T extends SpecificRecordBase> T deserializeAvroRecordMetadata(Object object, Schema schema, Class<T> clazz) {", "originalCommit": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTExNjgxNw==", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601116817", "bodyText": "why remove this?", "author": "wangxianghu", "createdAt": "2021-03-25T06:56:32Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -175,25 +174,26 @@ public String compactionShowArchived(\n     HoodieArchivedTimeline archivedTimeline = client.getArchivedTimeline();\n     HoodieInstant instant = new HoodieInstant(HoodieInstant.State.COMPLETED,\n             HoodieTimeline.COMPACTION_ACTION, compactionInstantTime);\n-    String startTs = CommitUtil.addHours(compactionInstantTime, -1);\n-    String endTs = CommitUtil.addHours(compactionInstantTime, 1);", "originalCommit": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTEyMDg5MA==", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601120890", "bodyText": "if we want to load a ts equals compactionInstantTime, can we add a new method that takes only one instantTime as input param? WDYT", "author": "wangxianghu", "createdAt": "2021-03-25T07:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTExNjgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNjE2NjQ5MA==", "url": "https://github.com/apache/hudi/pull/2325#discussion_r606166490", "bodyText": "if we want to load a ts equals compactionInstantTime, can we add a new method that takes only one instantTime as input param? WDYT\n\nYes, had add it.", "author": "hddong", "createdAt": "2021-04-02T09:53:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTExNjgxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMTEyMTYzMw==", "url": "https://github.com/apache/hudi/pull/2325#discussion_r601121633", "bodyText": "same here", "author": "wangxianghu", "createdAt": "2021-03-25T07:02:13Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CompactionCommand.java", "diffHunk": "@@ -175,25 +174,26 @@ public String compactionShowArchived(\n     HoodieArchivedTimeline archivedTimeline = client.getArchivedTimeline();\n     HoodieInstant instant = new HoodieInstant(HoodieInstant.State.COMPLETED,\n             HoodieTimeline.COMPACTION_ACTION, compactionInstantTime);\n-    String startTs = CommitUtil.addHours(compactionInstantTime, -1);\n-    String endTs = CommitUtil.addHours(compactionInstantTime, 1);\n     try {\n-      archivedTimeline.loadInstantDetailsInMemory(startTs, endTs);\n-      HoodieCompactionPlan compactionPlan = TimelineMetadataUtils.deserializeCompactionPlan(\n-              archivedTimeline.getInstantDetails(instant).get());\n+      archivedTimeline.loadCompactionDetailsInMemory(compactionInstantTime, compactionInstantTime);\n+      HoodieCompactionPlan compactionPlan = TimelineMetadataUtils.deserializeAvroRecordMetadata(\n+              archivedTimeline.getInstantDetails(instant).get(), HoodieCompactionPlan.getClassSchema(),\n+              HoodieCompactionPlan.class);\n       return printCompaction(compactionPlan, sortByField, descending, limit, headerOnly);\n     } finally {\n-      archivedTimeline.clearInstantDetailsFromMemory(startTs, endTs);\n+      archivedTimeline.clearInstantDetailsFromMemory(compactionInstantTime, compactionInstantTime);", "originalCommit": "86b1dd4464da4ab24b2f5fb2e8d50f758d5804c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cf983eb2f805a0524b84656cb01bc04e4fd5f250", "url": "https://github.com/apache/hudi/commit/cf983eb2f805a0524b84656cb01bc04e4fd5f250", "message": "fix", "committedDate": "2021-03-31T03:09:59Z", "type": "forcePushed"}, {"oid": "9cb7bf6a1c0526fbf3974b8d3274cc1b10c94e10", "url": "https://github.com/apache/hudi/commit/9cb7bf6a1c0526fbf3974b8d3274cc1b10c94e10", "message": "fix", "committedDate": "2021-03-31T07:19:59Z", "type": "forcePushed"}, {"oid": "24790dcfd81bbb1e576d2daffaa0028b9d40e2e5", "url": "https://github.com/apache/hudi/commit/24790dcfd81bbb1e576d2daffaa0028b9d40e2e5", "message": "[HUDI-699]Fix CompactionCommand and add unit test for CompactionCommand", "committedDate": "2021-04-01T02:09:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODI2ODM0Ng==", "url": "https://github.com/apache/hudi/pull/2325#discussion_r608268346", "bodyText": "@hddong  This constructor is redundant.", "author": "wangxianghu", "createdAt": "2021-04-07T00:50:35Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/timeline/HoodieArchivedTimeline.java", "diffHunk": "@@ -84,6 +88,14 @@ public HoodieArchivedTimeline(HoodieTableMetaClient metaClient) {\n     this.details = (Function<HoodieInstant, Option<byte[]>> & Serializable) this::getInstantDetails;\n   }\n \n+  public HoodieArchivedTimeline(HoodieTableMetaClient metaClient, Stream<HoodieInstant> instants) {\n+    this.metaClient = metaClient;\n+    setInstants(instants.collect(Collectors.toList()));\n+    // multiple casts will make this lambda serializable -\n+    // http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.16\n+    this.details = (Function<HoodieInstant, Option<byte[]>> & Serializable) this::getInstantDetails;\n+  }\n+", "originalCommit": "483bf74186c0b317be886e4c5c3a1a1d3b3a08b8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d5facf45ff5e8fe2ef1d71d050da523e6f227b6a", "url": "https://github.com/apache/hudi/commit/d5facf45ff5e8fe2ef1d71d050da523e6f227b6a", "message": "[HUDI-699]Fix CompactionCommand and add unit test for CompactionCommand", "committedDate": "2021-04-07T01:45:03Z", "type": "commit"}, {"oid": "d5facf45ff5e8fe2ef1d71d050da523e6f227b6a", "url": "https://github.com/apache/hudi/commit/d5facf45ff5e8fe2ef1d71d050da523e6f227b6a", "message": "[HUDI-699]Fix CompactionCommand and add unit test for CompactionCommand", "committedDate": "2021-04-07T01:45:03Z", "type": "forcePushed"}]}