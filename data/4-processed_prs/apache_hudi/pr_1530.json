{"pr_number": 1530, "pr_title": "[HUDI-809] Migrate CommonTestHarness to JUnit 5", "pr_createdAt": "2020-04-18T23:25:22Z", "pr_url": "https://github.com/apache/hudi/pull/1530", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNzYwNA==", "url": "https://github.com/apache/hudi/pull/1530#discussion_r411907604", "bodyText": "redundant empty line?", "author": "yanghua", "createdAt": "2020-04-21T06:32:54Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java", "diffHunk": "@@ -59,9 +58,10 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM0NjY3Nw==", "url": "https://github.com/apache/hudi/pull/1530#discussion_r412346677", "bodyText": "removed", "author": "xushiyan", "createdAt": "2020-04-21T17:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkwNzYwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4ODIxMw==", "url": "https://github.com/apache/hudi/pull/1530#discussion_r411988213", "bodyText": "Can we use another name to distinguish each other?", "author": "yanghua", "createdAt": "2020-04-21T08:37:49Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieCommonTestHarness.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.testutils;\n+\n+import org.apache.hudi.common.model.HoodieTestUtils;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The JUnit 5 version of {@link org.apache.hudi.common.HoodieCommonTestHarness}.\n+ * <p>\n+ * To incrementally migrate test classes.\n+ */\n+public class HoodieCommonTestHarness extends org.apache.hudi.common.HoodieCommonTestHarness {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM1NzUxNg==", "url": "https://github.com/apache/hudi/pull/1530#discussion_r412357516", "bodyText": "Fixed. Just note that the name should be renamed back to HoodieCommonTestHarness  once migrations done.", "author": "xushiyan", "createdAt": "2020-04-21T17:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4ODIxMw=="}], "type": "inlineReview"}, {"oid": "4ab089e7b12867d4d55343821d6bee7702acbbd8", "url": "https://github.com/apache/hudi/commit/4ab089e7b12867d4d55343821d6bee7702acbbd8", "message": "[HUDI-809] Migrate CommonTestHarness to JUnit 5", "committedDate": "2020-04-21T17:22:25Z", "type": "commit"}, {"oid": "66ca2f8bf77a55f9e62e6695a798b862c249dd72", "url": "https://github.com/apache/hudi/commit/66ca2f8bf77a55f9e62e6695a798b862c249dd72", "message": "address comments", "committedDate": "2020-04-21T17:29:50Z", "type": "commit"}, {"oid": "66ca2f8bf77a55f9e62e6695a798b862c249dd72", "url": "https://github.com/apache/hudi/commit/66ca2f8bf77a55f9e62e6695a798b862c249dd72", "message": "address comments", "committedDate": "2020-04-21T17:29:50Z", "type": "forcePushed"}, {"oid": "62ebb73afb310bb6c33e5fda2e937a561790b9d6", "url": "https://github.com/apache/hudi/commit/62ebb73afb310bb6c33e5fda2e937a561790b9d6", "message": "migrate a new test class", "committedDate": "2020-04-21T18:53:49Z", "type": "commit"}, {"oid": "62ebb73afb310bb6c33e5fda2e937a561790b9d6", "url": "https://github.com/apache/hudi/commit/62ebb73afb310bb6c33e5fda2e937a561790b9d6", "message": "migrate a new test class", "committedDate": "2020-04-21T18:53:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5Mzk1Ng==", "url": "https://github.com/apache/hudi/pull/1530#discussion_r412693956", "bodyText": "here", "author": "yanghua", "createdAt": "2020-04-22T06:04:07Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/TestHoodieTableMetaClient.java", "diffHunk": "@@ -18,41 +18,41 @@\n \n package org.apache.hudi.common.table;\n \n-import org.apache.hudi.common.HoodieCommonTestHarness;\n import org.apache.hudi.common.model.HoodieTestUtils;\n import org.apache.hudi.common.table.timeline.HoodieActiveTimeline;\n import org.apache.hudi.common.table.timeline.HoodieInstant;\n import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+import org.apache.hudi.common.testutils.HoodieCommonTestHarnessJunit5;\n import org.apache.hudi.common.util.Option;\n \n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n \n import java.io.IOException;\n \n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n \n /**\n  * Tests hoodie table meta client {@link HoodieTableMetaClient}.\n  */\n-public class TestHoodieTableMetaClient extends HoodieCommonTestHarness {\n+public class TestHoodieTableMetaClient extends HoodieCommonTestHarnessJunit5 {\n \n-  @Before\n+  @BeforeEach\n   public void init() throws IOException {\n     initMetaClient();\n   }\n \n   @Test\n   public void checkMetadata() {\n-    assertEquals(\"Table name should be raw_trips\", HoodieTestUtils.RAW_TRIPS_TEST_NAME,\n-        metaClient.getTableConfig().getTableName());\n-    assertEquals(\"Basepath should be the one assigned\", basePath, metaClient.getBasePath());\n-    assertEquals(\"Metapath should be ${basepath}/.hoodie\", basePath + \"/.hoodie\", metaClient.getMetaPath());\n+    assertEquals(HoodieTestUtils.RAW_TRIPS_TEST_NAME, metaClient.getTableConfig().getTableName(), \"Table name should be raw_trips\");", "originalCommit": "62ebb73afb310bb6c33e5fda2e937a561790b9d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5NDA0NQ==", "url": "https://github.com/apache/hudi/pull/1530#discussion_r412694045", "bodyText": "here", "author": "yanghua", "createdAt": "2020-04-22T06:04:23Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/TestHoodieTableMetaClient.java", "diffHunk": "@@ -67,16 +67,15 @@ public void checkSerDe() {\n     commitTimeline.saveAsComplete(instant, Option.of(\"test-detail\".getBytes()));\n     commitTimeline = commitTimeline.reload();\n     HoodieInstant completedInstant = HoodieTimeline.getCompletedInstant(instant);\n-    assertEquals(\"Commit should be 1 and completed\", completedInstant, commitTimeline.getInstants().findFirst().get());\n-    assertArrayEquals(\"Commit value should be \\\"test-detail\\\"\", \"test-detail\".getBytes(),\n-        commitTimeline.getInstantDetails(completedInstant).get());\n+    assertEquals(completedInstant, commitTimeline.getInstants().findFirst().get(), \"Commit should be 1 and completed\");\n+    assertArrayEquals(\"test-detail\".getBytes(), commitTimeline.getInstantDetails(completedInstant).get(), \"Commit value should be \\\"test-detail\\\"\");", "originalCommit": "62ebb73afb310bb6c33e5fda2e937a561790b9d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5NDIxOA==", "url": "https://github.com/apache/hudi/pull/1530#discussion_r412694218", "bodyText": "here", "author": "yanghua", "createdAt": "2020-04-22T06:04:51Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/TestHoodieTableMetaClient.java", "diffHunk": "@@ -85,21 +84,20 @@ public void checkCommitTimeline() {\n     // Commit timeline should not auto-reload every time getActiveCommitTimeline(), it should be cached\n     activeTimeline = metaClient.getActiveTimeline();\n     activeCommitTimeline = activeTimeline.getCommitTimeline();\n-    assertTrue(\"Should be empty commit timeline\", activeCommitTimeline.empty());\n+    assertTrue(activeCommitTimeline.empty(), \"Should be empty commit timeline\");\n \n     HoodieInstant completedInstant = HoodieTimeline.getCompletedInstant(instant);\n     activeTimeline = activeTimeline.reload();\n     activeCommitTimeline = activeTimeline.getCommitTimeline();\n-    assertFalse(\"Should be the 1 commit we made\", activeCommitTimeline.empty());\n-    assertEquals(\"Commit should be 1\", completedInstant, activeCommitTimeline.getInstants().findFirst().get());\n-    assertArrayEquals(\"Commit value should be \\\"test-detail\\\"\", \"test-detail\".getBytes(),\n-        activeCommitTimeline.getInstantDetails(completedInstant).get());\n+    assertFalse(activeCommitTimeline.empty(), \"Should be the 1 commit we made\");\n+    assertEquals(completedInstant, activeCommitTimeline.getInstants().findFirst().get(), \"Commit should be 1\");\n+    assertArrayEquals(\"test-detail\".getBytes(), activeCommitTimeline.getInstantDetails(completedInstant).get(), \"Commit value should be \\\"test-detail\\\"\");", "originalCommit": "62ebb73afb310bb6c33e5fda2e937a561790b9d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}