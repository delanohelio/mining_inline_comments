{"pr_number": 1724, "pr_title": "[HUDI-696] Add unit test for CommitsCommand", "pr_createdAt": "2020-06-10T09:51:52Z", "pr_url": "https://github.com/apache/hudi/pull/1724", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyMTYwNw==", "url": "https://github.com/apache/hudi/pull/1724#discussion_r439721607", "bodyText": "would the sparkMaster and sparkMemory put into sparkProperties? and if so, what's the priority?", "author": "leesf", "createdAt": "2020-06-13T08:35:05Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CommitsCommand.java", "diffHunk": "@@ -214,15 +224,18 @@ public String showArchivedCommits(\n     }\n   }\n \n-  @CliCommand(value = \"commits refresh\", help = \"Refresh the commits\")\n-  public String refreshCommits() throws IOException {\n+  @CliCommand(value = {\"commits refresh\", \"refresh\"}, help = \"Refresh the commits\")\n+  public String refreshCommits() {\n     HoodieCLI.refreshTableMetadata();\n     return \"Metadata for table \" + HoodieCLI.getTableMetaClient().getTableConfig().getTableName() + \" refreshed.\";\n   }\n \n   @CliCommand(value = \"commit rollback\", help = \"Rollback a commit\")\n   public String rollbackCommit(@CliOption(key = {\"commit\"}, help = \"Commit to rollback\") final String instantTime,\n-      @CliOption(key = {\"sparkProperties\"}, help = \"Spark Properties File Path\") final String sparkPropertiesPath)\n+      @CliOption(key = {\"sparkProperties\"}, help = \"Spark Properties File Path\") final String sparkPropertiesPath,\n+      @CliOption(key = \"sparkMaster\", unspecifiedDefaultValue = \"\", help = \"Spark Master\") String master,\n+      @CliOption(key = \"sparkMemory\", unspecifiedDefaultValue = \"4G\",", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5MDQwMg==", "url": "https://github.com/apache/hudi/pull/1724#discussion_r439790402", "bodyText": "would the sparkMaster and sparkMemory put into sparkProperties? and if so, what's the priority?\n\nUsually put the parameters that are less changeable in sparkProperties, master and memory usually specified every time when run.", "author": "hddong", "createdAt": "2020-06-14T04:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyMTYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyMTY1MA==", "url": "https://github.com/apache/hudi/pull/1724#discussion_r439721650", "bodyText": "this is a bug?", "author": "leesf", "createdAt": "2020-06-13T08:35:49Z", "path": "hudi-cli/src/main/java/org/apache/hudi/cli/commands/CommitsCommand.java", "diffHunk": "@@ -334,27 +351,30 @@ public String showCommitFiles(\n       }\n     }\n \n-    TableHeader header = new TableHeader().addTableHeaderField(\"Partition Path\").addTableHeaderField(\"File ID\")\n-        .addTableHeaderField(\"Previous Commit\").addTableHeaderField(\"Total Records Updated\")\n-        .addTableHeaderField(\"Total Records Written\").addTableHeaderField(\"Total Bytes Written\")\n-        .addTableHeaderField(\"Total Errors\").addTableHeaderField(\"File Size\");\n+    TableHeader header = new TableHeader().addTableHeaderField(HoodieTableHeaderFields.HEADER_PARTITION_PATH)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_FILE_ID)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_PREVIOUS_COMMIT)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_RECORDS_UPDATED)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_RECORDS_WRITTEN)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_BYTES_WRITTEN)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_TOTAL_ERRORS)\n+        .addTableHeaderField(HoodieTableHeaderFields.HEADER_FILE_SIZE);\n \n     return HoodiePrintHelper.print(header, new HashMap<>(), sortByField, descending,\n         limit, headerOnly, rows, exportTableName);\n   }\n \n   @CliCommand(value = \"commits compare\", help = \"Compare commits with another Hoodie table\")\n-  public String compareCommits(@CliOption(key = {\"path\"}, help = \"Path of the table to compare to\") final String path)\n-      throws Exception {\n+  public String compareCommits(@CliOption(key = {\"path\"}, help = \"Path of the table to compare to\") final String path) {\n \n     HoodieTableMetaClient source = HoodieCLI.getTableMetaClient();\n     HoodieTableMetaClient target = new HoodieTableMetaClient(HoodieCLI.conf, path);\n     HoodieTimeline targetTimeline = target.getActiveTimeline().getCommitsTimeline().filterCompletedInstants();\n     HoodieTimeline sourceTimeline = source.getActiveTimeline().getCommitsTimeline().filterCompletedInstants();\n     String targetLatestCommit =\n-        targetTimeline.getInstants().iterator().hasNext() ? \"0\" : targetTimeline.lastInstant().get().getTimestamp();\n+        targetTimeline.getInstants().iterator().hasNext() ? targetTimeline.lastInstant().get().getTimestamp() : \"0\";", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5MDUxOQ==", "url": "https://github.com/apache/hudi/pull/1724#discussion_r439790519", "bodyText": "this is a bug?\n\nI think it is. When hasNext is true, we expect get the lastInstant, and when it's false (instants is null), expect 0.", "author": "hddong", "createdAt": "2020-06-14T04:30:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyMTY1MA=="}], "type": "inlineReview"}, {"oid": "0965239f8818a9f739f8bc385dc228eb259ca540", "url": "https://github.com/apache/hudi/commit/0965239f8818a9f739f8bc385dc228eb259ca540", "message": "[HUDI-696] Add unit test for CommitsCommand", "committedDate": "2020-06-14T14:36:27Z", "type": "commit"}, {"oid": "0965239f8818a9f739f8bc385dc228eb259ca540", "url": "https://github.com/apache/hudi/commit/0965239f8818a9f739f8bc385dc228eb259ca540", "message": "[HUDI-696] Add unit test for CommitsCommand", "committedDate": "2020-06-14T14:36:27Z", "type": "forcePushed"}]}