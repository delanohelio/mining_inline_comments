{"pr_number": 1871, "pr_title": "[HUDI-781] Introduce HoodieTestTable for test preparation", "pr_createdAt": "2020-07-24T06:05:00Z", "pr_url": "https://github.com/apache/hudi/pull/1871", "timeline": [{"oid": "5a2dd741b29810a6b7100649c1dbfde5541af56e", "url": "https://github.com/apache/hudi/commit/5a2dd741b29810a6b7100649c1dbfde5541af56e", "message": "[HUDI-781] Introduce HoodieDataPrep for test preparation", "committedDate": "2020-07-27T22:32:29Z", "type": "forcePushed"}, {"oid": "7e61dea97d6a68061a34c775c096d83b603037b2", "url": "https://github.com/apache/hudi/commit/7e61dea97d6a68061a34c775c096d83b603037b2", "message": "deprecate APIs in HoodieTestUtils", "committedDate": "2020-07-27T22:45:56Z", "type": "forcePushed"}, {"oid": "bd5aac8554a955208b91199132e40bd00544f68d", "url": "https://github.com/apache/hudi/commit/bd5aac8554a955208b91199132e40bd00544f68d", "message": "move IOType to hudi-common", "committedDate": "2020-07-28T01:29:19Z", "type": "forcePushed"}, {"oid": "ef4c4aaeffc339176eb8d20143f6212b1b24732e", "url": "https://github.com/apache/hudi/commit/ef4c4aaeffc339176eb8d20143f6212b1b24732e", "message": "[HUDI-781] Introduce HoodieDataPrep for test preparation", "committedDate": "2020-07-29T03:41:41Z", "type": "forcePushed"}, {"oid": "4ff643299f5289c8ef2cfa038c48902d28b8fb85", "url": "https://github.com/apache/hudi/commit/4ff643299f5289c8ef2cfa038c48902d28b8fb85", "message": "[HUDI-781] Introduce HoodieTestTable for test preparation", "committedDate": "2020-08-04T15:54:46Z", "type": "forcePushed"}, {"oid": "12a1ed2868a69ee165611687521050973a0260ae", "url": "https://github.com/apache/hudi/commit/12a1ed2868a69ee165611687521050973a0260ae", "message": "[HUDI-781] Introduce HoodieTestTable for test preparation", "committedDate": "2020-08-06T03:52:02Z", "type": "forcePushed"}, {"oid": "33e09d027dcc44a5c7c0a9878ef8d9bcf7fe1af0", "url": "https://github.com/apache/hudi/commit/33e09d027dcc44a5c7c0a9878ef8d9bcf7fe1af0", "message": "[HUDI-781] Introduce HoodieTestTable for test preparation", "committedDate": "2020-08-08T00:53:31Z", "type": "forcePushed"}, {"oid": "051175392fc24955007fa77e0381305ac9ac4d93", "url": "https://github.com/apache/hudi/commit/051175392fc24955007fa77e0381305ac9ac4d93", "message": "[HUDI-781] Introduce HoodieTestTable for test preparation", "committedDate": "2020-08-08T02:53:09Z", "type": "forcePushed"}, {"oid": "bfcdd491225ab05543b12a8672e3b356b03238f0", "url": "https://github.com/apache/hudi/commit/bfcdd491225ab05543b12a8672e3b356b03238f0", "message": "[HUDI-781] Introduce HoodieTestTable for test preparation", "committedDate": "2020-08-08T05:48:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2NzIxMg==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467367212", "bodyText": "deleted APIs that turn out be to useful moved to org.apache.hudi.common.testutils.FilesTestUtils", "author": "xushiyan", "createdAt": "2020-08-08T05:56:54Z", "path": "hudi-client/src/test/java/org/apache/hudi/testutils/HoodieClientTestUtils.java", "diffHunk": "@@ -74,57 +74,6 @@\n public class HoodieClientTestUtils {", "originalCommit": "bfcdd491225ab05543b12a8672e3b356b03238f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2NzQwMA==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467367400", "bodyText": "not used", "author": "xushiyan", "createdAt": "2020-08-08T05:59:33Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestUtils.java", "diffHunk": "@@ -99,7 +99,6 @@\n  */\n public class HoodieTestUtils {\n \n-  public static final String TEST_EXTENSION = \".test\";", "originalCommit": "bfcdd491225ab05543b12a8672e3b356b03238f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM2NzUwNg==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467367506", "bodyText": "mark private to prevent new usage. to be replaced with HoodieTestTable, too.", "author": "xushiyan", "createdAt": "2020-08-08T06:00:49Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestUtils.java", "diffHunk": "@@ -279,8 +268,8 @@ public static String createDataFile(String basePath, String partitionPath, Strin\n     return fileID;\n   }\n \n-  public static String createDataFileFixLength(String basePath, String partitionPath, String instantTime, String fileID,\n-      long length) throws IOException {\n+  private static String createDataFileFixLength(String basePath, String partitionPath, String instantTime, String fileID,", "originalCommit": "bfcdd491225ab05543b12a8672e3b356b03238f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "322aad91ca3d5eecc36ec3c4dbe6749f7d435172", "url": "https://github.com/apache/hudi/commit/322aad91ca3d5eecc36ec3c4dbe6749f7d435172", "message": "[HUDI-781] Introduce HoodieTestTable for test preparation", "committedDate": "2020-08-08T20:33:44Z", "type": "forcePushed"}, {"oid": "ddb560111ec9c752867c0e41752e83396a562664", "url": "https://github.com/apache/hudi/commit/ddb560111ec9c752867c0e41752e83396a562664", "message": "[HUDI-781] Introduce HoodieTestTable for test preparation", "committedDate": "2020-08-08T21:54:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUzMDY1OA==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467530658", "bodyText": "IMO, The name of this class may make readers confused? It seems to represent that it is a utility class about testing file function. WDYT about renaming it to FileMockUtils?", "author": "yanghua", "createdAt": "2020-08-09T03:29:07Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/FilesTestUtils.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.common.testutils;\n+\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.HoodieFileFormat;\n+import org.apache.hudi.common.model.IOType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+public class FilesTestUtils {", "originalCommit": "ddb560111ec9c752867c0e41752e83396a562664", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2NDMxOQ==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467664319", "bodyText": "ok i see your point. To follow the idea of create in another comment, how about FileCreateUtils ?", "author": "xushiyan", "createdAt": "2020-08-10T02:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUzMDY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4MjU5MQ==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467682591", "bodyText": "sounds good.", "author": "yanghua", "createdAt": "2020-08-10T04:27:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUzMDY1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUzMTk1Nw==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467531957", "bodyText": "IMO, mock is a better naming than fake. mock is a more generic term in test field. Just a thought.", "author": "yanghua", "createdAt": "2020-08-09T03:48:12Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/FilesTestUtils.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.common.testutils;\n+\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.HoodieFileFormat;\n+import org.apache.hudi.common.model.IOType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+public class FilesTestUtils {\n+\n+  private static void fakeMetaFile(String basePath, String instantTime, String suffix) throws IOException {\n+    String parentPath = basePath + \"/\" + HoodieTableMetaClient.METAFOLDER_NAME;\n+    new File(parentPath).mkdirs();\n+    new File(parentPath + \"/\" + instantTime + suffix).createNewFile();\n+  }\n+\n+  public static void fakeCommit(String basePath, String instantTime) throws IOException {", "originalCommit": "ddb560111ec9c752867c0e41752e83396a562664", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2MTc3NA==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467661774", "bodyText": "hmm i'm a bit hesitated about using mock as this is commonly used by Mockito. it could imply mock object is used here, while we're actually creating files..", "author": "xushiyan", "createdAt": "2020-08-10T02:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUzMTk1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2MjYxMQ==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467662611", "bodyText": "@yanghua how about create? since it is actually \"creating\" stuff. e.g., legit marker files are indeed \"created\" by these APIs. Plus the follow-up work is to write actual data to these files, which make them real..", "author": "xushiyan", "createdAt": "2020-08-10T02:22:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUzMTk1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4MjQyOQ==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467682429", "bodyText": "Ok, sg.", "author": "yanghua", "createdAt": "2020-08-10T04:26:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUzMTk1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU3NzEzOQ==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467577139", "bodyText": "Using Files.createFile(...) may be better?", "author": "yanghua", "createdAt": "2020-08-09T12:20:58Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/FilesTestUtils.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.common.testutils;\n+\n+import org.apache.hudi.common.fs.FSUtils;\n+import org.apache.hudi.common.model.HoodieFileFormat;\n+import org.apache.hudi.common.model.IOType;\n+import org.apache.hudi.common.table.HoodieTableMetaClient;\n+import org.apache.hudi.common.table.timeline.HoodieTimeline;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+public class FilesTestUtils {\n+\n+  private static void fakeMetaFile(String basePath, String instantTime, String suffix) throws IOException {\n+    String parentPath = basePath + \"/\" + HoodieTableMetaClient.METAFOLDER_NAME;\n+    new File(parentPath).mkdirs();\n+    new File(parentPath + \"/\" + instantTime + suffix).createNewFile();\n+  }\n+\n+  public static void fakeCommit(String basePath, String instantTime) throws IOException {\n+    fakeMetaFile(basePath, instantTime, HoodieTimeline.COMMIT_EXTENSION);\n+  }\n+\n+  public static void fakeRequestedCommit(String basePath, String instantTime) throws IOException {\n+    fakeMetaFile(basePath, instantTime, HoodieTimeline.REQUESTED_COMMIT_EXTENSION);\n+  }\n+\n+  public static void fakeInflightCommit(String basePath, String instantTime) throws IOException {\n+    fakeMetaFile(basePath, instantTime, HoodieTimeline.INFLIGHT_COMMIT_EXTENSION);\n+  }\n+\n+  public static void fakeDeltaCommit(String basePath, String instantTime) throws IOException {\n+    fakeMetaFile(basePath, instantTime, HoodieTimeline.DELTA_COMMIT_EXTENSION);\n+  }\n+\n+  public static void fakeRequestedDeltaCommit(String basePath, String instantTime) throws IOException {\n+    fakeMetaFile(basePath, instantTime, HoodieTimeline.REQUESTED_DELTA_COMMIT_EXTENSION);\n+  }\n+\n+  public static void fakeInflightDeltaCommit(String basePath, String instantTime) throws IOException {\n+    fakeMetaFile(basePath, instantTime, HoodieTimeline.INFLIGHT_DELTA_COMMIT_EXTENSION);\n+  }\n+\n+  public static void fakeDataFile(String basePath, String partitionPath, String instantTime, String fileId)\n+      throws Exception {\n+    fakeDataFile(basePath, partitionPath, instantTime, fileId, 0);\n+  }\n+\n+  public static void fakeDataFile(String basePath, String partitionPath, String instantTime, String fileId, long length)\n+      throws Exception {\n+    String parentPath = String.format(\"%s/%s\", basePath, partitionPath);\n+    new File(parentPath).mkdirs();", "originalCommit": "ddb560111ec9c752867c0e41752e83396a562664", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU3NzQ3MQ==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467577471", "bodyText": "Does this indentation style break the rule of the project?", "author": "yanghua", "createdAt": "2020-08-09T12:24:47Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestUtils.java", "diffHunk": "@@ -307,31 +299,26 @@ public static String createNewLogFile(FileSystem fs, String basePath, String par\n     return fileID;\n   }\n \n-  public static void createCompactionCommitFiles(FileSystem fs, String basePath, String... instantTimes)\n-      throws IOException {\n-    for (String instantTime : instantTimes) {\n-      boolean createFile = fs.createNewFile(new Path(basePath + \"/\" + HoodieTableMetaClient.METAFOLDER_NAME + \"/\"\n-          + HoodieTimeline.makeCommitFileName(instantTime)));\n-      if (!createFile) {\n-        throw new IOException(\"cannot create commit file for commit \" + instantTime);\n-      }\n-    }\n-  }\n-\n   public static void createCompactionRequest(HoodieTableMetaClient metaClient, String instant,\n-      List<Pair<String, FileSlice>> fileSliceList) throws IOException {\n+                                             List<Pair<String, FileSlice>> fileSliceList) throws IOException {", "originalCommit": "ddb560111ec9c752867c0e41752e83396a562664", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2MTEwNA==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467661104", "bodyText": "Checkstyle did not complain about (or cover) it. The intellij of the new version starts to format this way. Guess it is due to missing a checkstyle rule for this, causing IDE format in its own way. Right now I've seen this style exist too in the codebase.", "author": "xushiyan", "createdAt": "2020-08-10T02:11:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU3NzQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2OTI5MA==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467669290", "bodyText": "I see the issue is that we did not set forceStrictCondition to true, that's why intellij can align this and make the indentation longer than what the rule sets.\nhttps://checkstyle.sourceforge.io/config_misc.html#Indentation_Properties\n@yanghua Do you agree we should set it to true? This can be done in a separate PR.", "author": "xushiyan", "createdAt": "2020-08-10T03:03:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU3NzQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4MzU2Mg==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467683562", "bodyText": "Let @vinothchandar chime in. I knew that @vinothchandar 's major concern is that whether the rule of code style support automatically formatting or not.\nHere I will ignore these issues.", "author": "yanghua", "createdAt": "2020-08-10T04:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU3NzQ3MQ=="}], "type": "inlineReview"}, {"oid": "bf30a880892e2edb8f4f1f0740449ce3dd2aeb3f", "url": "https://github.com/apache/hudi/commit/bf30a880892e2edb8f4f1f0740449ce3dd2aeb3f", "message": "Use Files API", "committedDate": "2020-08-10T02:35:57Z", "type": "forcePushed"}, {"oid": "25e34cb49310a4cbab5640e9dac46080a189b760", "url": "https://github.com/apache/hudi/commit/25e34cb49310a4cbab5640e9dac46080a189b760", "message": "[HUDI-781] Introduce HoodieTestTable for test preparation", "committedDate": "2020-08-10T06:49:04Z", "type": "commit"}, {"oid": "9a1d1f3224b3aba14da1f8bec3092d6efe957640", "url": "https://github.com/apache/hudi/commit/9a1d1f3224b3aba14da1f8bec3092d6efe957640", "message": "rename FilesTestUtils to FileCreateUtils and rename APIs using `create`", "committedDate": "2020-08-10T06:49:05Z", "type": "forcePushed"}, {"oid": "ce7c979304cc169685d493be9cb4434328afd2f2", "url": "https://github.com/apache/hudi/commit/ce7c979304cc169685d493be9cb4434328afd2f2", "message": "Use Files API", "committedDate": "2020-08-10T07:56:13Z", "type": "commit"}, {"oid": "9abe1d29ef8d82c057bbd480bbc2b9f38e31cb7a", "url": "https://github.com/apache/hudi/commit/9abe1d29ef8d82c057bbd480bbc2b9f38e31cb7a", "message": "revert the indentation", "committedDate": "2020-08-10T07:56:13Z", "type": "commit"}, {"oid": "69e99fc9437e55248a8508f430088271616dd9d0", "url": "https://github.com/apache/hudi/commit/69e99fc9437e55248a8508f430088271616dd9d0", "message": "add TODO for newly added APIs", "committedDate": "2020-08-10T07:56:13Z", "type": "commit"}, {"oid": "0c841a398870142c5e153d924094dbd086d154e4", "url": "https://github.com/apache/hudi/commit/0c841a398870142c5e153d924094dbd086d154e4", "message": "rename FilesTestUtils to FileCreateUtils and rename APIs using `create`", "committedDate": "2020-08-10T07:56:13Z", "type": "commit"}, {"oid": "0c841a398870142c5e153d924094dbd086d154e4", "url": "https://github.com/apache/hudi/commit/0c841a398870142c5e153d924094dbd086d154e4", "message": "rename FilesTestUtils to FileCreateUtils and rename APIs using `create`", "committedDate": "2020-08-10T07:56:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyNzI2NA==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467827264", "bodyText": "Can we use Paths.get() to reduce link path parts via /?", "author": "yanghua", "createdAt": "2020-08-10T10:57:25Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestUtils.java", "diffHunk": "@@ -237,11 +229,12 @@ public static void createPendingCleanFiles(HoodieTableMetaClient metaClient, Str\n \n   public static void createCorruptedPendingCleanFiles(HoodieTableMetaClient metaClient, String commitTime) {\n     Arrays.asList(HoodieTimeline.makeRequestedCleanerFileName(commitTime),\n-        HoodieTimeline.makeInflightCleanerFileName(commitTime)).forEach(f -> {\n+        HoodieTimeline.makeInflightCleanerFileName(commitTime))\n+        .forEach(f -> {\n           FSDataOutputStream os = null;\n           try {\n             Path commitFile = new Path(\n-                    metaClient.getBasePath() + \"/\" + HoodieTableMetaClient.METAFOLDER_NAME + \"/\" + f);\n+                metaClient.getBasePath() + \"/\" + HoodieTableMetaClient.METAFOLDER_NAME + \"/\" + f);", "originalCommit": "0c841a398870142c5e153d924094dbd086d154e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAzMjEzMw==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r468032133", "bodyText": "sure, fixed 2 of this. Please note that, as this is from the original codebase, i didn't change all of this kind of usage in this file. I think it could be a good chance to change while moving the APIs to HoodieTestTable.", "author": "xushiyan", "createdAt": "2020-08-10T16:32:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyNzI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI3NjE5NA==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r468276194", "bodyText": "Ok, I noticed this because I saw the indent has been changed. Actually, I suggested that we can focus on the core work about the PR want to do. Do not touch something else e.g. indent and code style. Of cause, I should not ask you to change this.", "author": "yanghua", "createdAt": "2020-08-11T01:34:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyNzI2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI3OTA5Mg==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r468279092", "bodyText": "ok @yanghua ,  understood. I agree that the work should focus on the task. I didn't intend to change these; intellij did it for me. i should have disabled the auto-formatting. will keep this sort of diffs out from now on. thanks", "author": "xushiyan", "createdAt": "2020-08-11T01:45:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyNzI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyNzQ2Nw==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r467827467", "bodyText": "Why do we need to break the forEach?", "author": "yanghua", "createdAt": "2020-08-10T10:57:55Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/testutils/HoodieTestUtils.java", "diffHunk": "@@ -237,11 +229,12 @@ public static void createPendingCleanFiles(HoodieTableMetaClient metaClient, Str\n \n   public static void createCorruptedPendingCleanFiles(HoodieTableMetaClient metaClient, String commitTime) {\n     Arrays.asList(HoodieTimeline.makeRequestedCleanerFileName(commitTime),\n-        HoodieTimeline.makeInflightCleanerFileName(commitTime)).forEach(f -> {\n+        HoodieTimeline.makeInflightCleanerFileName(commitTime))\n+        .forEach(f -> {", "originalCommit": "0c841a398870142c5e153d924094dbd086d154e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAyMTYzMA==", "url": "https://github.com/apache/hudi/pull/1871#discussion_r468021630", "bodyText": "intellij will force some weird indentation that breaks checkstyle rule...this is the easiest way I can find to prevent that", "author": "xushiyan", "createdAt": "2020-08-10T16:15:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgyNzQ2Nw=="}], "type": "inlineReview"}, {"oid": "33b0d1073938ca8d1cfe95ca873792fcaf0522b5", "url": "https://github.com/apache/hudi/commit/33b0d1073938ca8d1cfe95ca873792fcaf0522b5", "message": "use Paths API", "committedDate": "2020-08-10T16:28:42Z", "type": "commit"}]}