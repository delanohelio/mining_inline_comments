{"pr_number": 1267, "pr_title": "[HUDI-403] Publish deployment guide for writing to Hudi using HoodieDeltaStreamer and Spark Data Source", "pr_createdAt": "2020-01-21T23:47:05Z", "pr_url": "https://github.com/apache/hudi/pull/1267", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0NjYzOQ==", "url": "https://github.com/apache/hudi/pull/1267#discussion_r369646639", "bodyText": "can you add a sentence above, first introducing the two aspects : sync vs async compaction, continuous-vs-non continuous writing, so it flows well ?", "author": "vinothchandar", "createdAt": "2020-01-22T15:57:31Z", "path": "docs/_docs/2_6_deployment.md", "diffHunk": "@@ -23,15 +23,25 @@ All in all, Hudi deploys with no long running servers or additional infrastructu\n using existing infrastructure and its heartening to see other systems adopting similar approaches as well. Hudi writing is done via Spark jobs (DeltaStreamer or custom Spark datasource jobs), deployed per standard Apache Spark [recommendations](https://spark.apache.org/docs/latest/cluster-overview.html).\n Querying Hudi tables happens via libraries installed into Apache Hive, Apache Spark or Presto and hence no additional infrastructure is necessary. \n \n+### DeltaStreamer", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5NjMzMQ==", "url": "https://github.com/apache/hudi/pull/1267#discussion_r370396331", "bodyText": "Done.", "author": "bvaradar", "createdAt": "2020-01-23T22:49:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0NjYzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0Njg0Ng==", "url": "https://github.com/apache/hudi/pull/1267#discussion_r369646846", "bodyText": "call out this is the default?", "author": "vinothchandar", "createdAt": "2020-01-22T15:57:49Z", "path": "docs/_docs/2_6_deployment.md", "diffHunk": "@@ -23,15 +23,25 @@ All in all, Hudi deploys with no long running servers or additional infrastructu\n using existing infrastructure and its heartening to see other systems adopting similar approaches as well. Hudi writing is done via Spark jobs (DeltaStreamer or custom Spark datasource jobs), deployed per standard Apache Spark [recommendations](https://spark.apache.org/docs/latest/cluster-overview.html).\n Querying Hudi tables happens via libraries installed into Apache Hive, Apache Spark or Presto and hence no additional infrastructure is necessary. \n \n+### DeltaStreamer\n \n+[DeltaStreamer](/docs/writing_data.html#deltastreamer) is the standalone utility to incrementally pull upstream changes from varied sources such as DFS, Kafka and DB Changelogs and ingest them to hudi tables. It runs as a spark application in 2 modes.\n+\n+ - **Run Once Mode** : In this mode, Deltastreamer performs one ingestion round which includes incrementally pulling events from upstream sources and ingesting them to hudi table. Background operations like cleaning old file versions and archiving hoodie timeline are automatically executed as part of the run. For Merge-On-Read tables, Compaction is also run inline as part of ingestion unless disabled by passing the flag \"--disable-compaction\". By default, Compaction is run inline for every ingestion run and this can be changed by setting the property \"hoodie.compact.inline.max.delta.commits\". You can either manually run this spark application or use any cron trigger or workflow orchestrator such as Apache Airflow to spawn this application.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0NzQwNA==", "url": "https://github.com/apache/hudi/pull/1267#discussion_r369647404", "bodyText": "You can either manually run this spark application or use any cron trigger or workflow orchestrator such as Apache Airflow to spawn this application.\n\nlink to running this spark application and some commands to do so?", "author": "vinothchandar", "createdAt": "2020-01-22T15:58:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0Njg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQxMzQ0Mw==", "url": "https://github.com/apache/hudi/pull/1267#discussion_r370413443", "bodyText": "Done.", "author": "bvaradar", "createdAt": "2020-01-23T23:45:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0Njg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0ODE5Ng==", "url": "https://github.com/apache/hudi/pull/1267#discussion_r369648196", "bodyText": "reminds me, that we should have async compaction working for spark streaming as well? may be file a JIRA if you agree?", "author": "vinothchandar", "createdAt": "2020-01-22T15:59:57Z", "path": "docs/_docs/2_6_deployment.md", "diffHunk": "@@ -23,15 +23,25 @@ All in all, Hudi deploys with no long running servers or additional infrastructu\n using existing infrastructure and its heartening to see other systems adopting similar approaches as well. Hudi writing is done via Spark jobs (DeltaStreamer or custom Spark datasource jobs), deployed per standard Apache Spark [recommendations](https://spark.apache.org/docs/latest/cluster-overview.html).\n Querying Hudi tables happens via libraries installed into Apache Hive, Apache Spark or Presto and hence no additional infrastructure is necessary. \n \n+### DeltaStreamer\n \n+[DeltaStreamer](/docs/writing_data.html#deltastreamer) is the standalone utility to incrementally pull upstream changes from varied sources such as DFS, Kafka and DB Changelogs and ingest them to hudi tables. It runs as a spark application in 2 modes.\n+\n+ - **Run Once Mode** : In this mode, Deltastreamer performs one ingestion round which includes incrementally pulling events from upstream sources and ingesting them to hudi table. Background operations like cleaning old file versions and archiving hoodie timeline are automatically executed as part of the run. For Merge-On-Read tables, Compaction is also run inline as part of ingestion unless disabled by passing the flag \"--disable-compaction\". By default, Compaction is run inline for every ingestion run and this can be changed by setting the property \"hoodie.compact.inline.max.delta.commits\". You can either manually run this spark application or use any cron trigger or workflow orchestrator such as Apache Airflow to spawn this application.\n+ - **Continuous Mode** :  Here, deltastreamer runs an infinite loop with each round performing one ingestion round as described in **Run Once Mode**. For Merge-On-Read tables, Compaction is run in asynchronous fashion concurrently with ingestion unless disabled by passing the flag \"--disable-compaction\". Every ingestion run triggers a compaction request asynchronously and this frequency can be changed by setting the property \"hoodie.compact.inline.max.delta.commits\". As both ingestion and compaction is running in the same spark context, you can use resource allocation configuration in DeltaStreamer CLI such as (\"--delta-sync-scheduling-weight\", \"--compact-scheduling-weight\", \"\"--delta-sync-scheduling-minshare\", and \"--compact-scheduling-minshare\") to control executor allocation between ingestion and compaction.\n+\n+### Spark Datasource Writer Jobs\n+\n+As described in [Writing Data](/docs/writing_data.html#datasource-writer), you can use spark datasource to ingest to hudi table. This mechanism allows you to ingest any spark dataframe in Hudi format. Hudi Spark DataSource also supports spark streaming to ingest a streaming source to Hudi table. For Merge On Read table types, inline compaction is turned on by default which runs after every ingestion run. The compaction frequency can be changed by setting the property \"hoodie.compact.inline.max.delta.commits\". ", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5NjEyOQ==", "url": "https://github.com/apache/hudi/pull/1267#discussion_r370396129", "bodyText": "Agree. https://jira.apache.org/jira/browse/HUDI-575", "author": "bvaradar", "createdAt": "2020-01-23T22:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0ODE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0OTIxMA==", "url": "https://github.com/apache/hudi/pull/1267#discussion_r369649210", "bodyText": "also worth noting here is the config for controlling the sync frequency.. --min-sync-interval-seconds", "author": "vinothchandar", "createdAt": "2020-01-22T16:01:38Z", "path": "docs/_docs/2_6_deployment.md", "diffHunk": "@@ -23,15 +23,25 @@ All in all, Hudi deploys with no long running servers or additional infrastructu\n using existing infrastructure and its heartening to see other systems adopting similar approaches as well. Hudi writing is done via Spark jobs (DeltaStreamer or custom Spark datasource jobs), deployed per standard Apache Spark [recommendations](https://spark.apache.org/docs/latest/cluster-overview.html).\n Querying Hudi tables happens via libraries installed into Apache Hive, Apache Spark or Presto and hence no additional infrastructure is necessary. \n \n+### DeltaStreamer\n \n+[DeltaStreamer](/docs/writing_data.html#deltastreamer) is the standalone utility to incrementally pull upstream changes from varied sources such as DFS, Kafka and DB Changelogs and ingest them to hudi tables. It runs as a spark application in 2 modes.\n+\n+ - **Run Once Mode** : In this mode, Deltastreamer performs one ingestion round which includes incrementally pulling events from upstream sources and ingesting them to hudi table. Background operations like cleaning old file versions and archiving hoodie timeline are automatically executed as part of the run. For Merge-On-Read tables, Compaction is also run inline as part of ingestion unless disabled by passing the flag \"--disable-compaction\". By default, Compaction is run inline for every ingestion run and this can be changed by setting the property \"hoodie.compact.inline.max.delta.commits\". You can either manually run this spark application or use any cron trigger or workflow orchestrator such as Apache Airflow to spawn this application.\n+ - **Continuous Mode** :  Here, deltastreamer runs an infinite loop with each round performing one ingestion round as described in **Run Once Mode**. For Merge-On-Read tables, Compaction is run in asynchronous fashion concurrently with ingestion unless disabled by passing the flag \"--disable-compaction\". Every ingestion run triggers a compaction request asynchronously and this frequency can be changed by setting the property \"hoodie.compact.inline.max.delta.commits\". As both ingestion and compaction is running in the same spark context, you can use resource allocation configuration in DeltaStreamer CLI such as (\"--delta-sync-scheduling-weight\", \"--compact-scheduling-weight\", \"\"--delta-sync-scheduling-minshare\", and \"--compact-scheduling-minshare\") to control executor allocation between ingestion and compaction.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5NzAxNQ==", "url": "https://github.com/apache/hudi/pull/1267#discussion_r370397015", "bodyText": "Done", "author": "bvaradar", "createdAt": "2020-01-23T22:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0OTIxMA=="}], "type": "inlineReview"}, {"oid": "1c5df3d77bc5d86a8df5b04c1f193686c0438581", "url": "https://github.com/apache/hudi/commit/1c5df3d77bc5d86a8df5b04c1f193686c0438581", "message": "[HUDI-403] Publish deployment guide for writing to Hudi using HoodieDeltaStreamer and Spark Data Source", "committedDate": "2020-01-23T23:44:43Z", "type": "commit"}, {"oid": "1c5df3d77bc5d86a8df5b04c1f193686c0438581", "url": "https://github.com/apache/hudi/commit/1c5df3d77bc5d86a8df5b04c1f193686c0438581", "message": "[HUDI-403] Publish deployment guide for writing to Hudi using HoodieDeltaStreamer and Spark Data Source", "committedDate": "2020-01-23T23:44:43Z", "type": "forcePushed"}]}