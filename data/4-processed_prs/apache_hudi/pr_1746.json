{"pr_number": 1746, "pr_title": "[HUDI-996] Add functional test suite for hudi-utilities", "pr_createdAt": "2020-06-18T02:19:01Z", "pr_url": "https://github.com/apache/hudi/pull/1746", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMDk2OQ==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r441930969", "bodyText": "unit test separated from its functional test class", "author": "xushiyan", "createdAt": "2020-06-18T02:20:04Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestHoodieSnapshotExporter.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.hudi.utilities.HoodieSnapshotExporter.OutputFormatValidator;\n+\n+import com.beust.jcommander.ParameterException;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.NullSource;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class TestHoodieSnapshotExporter {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMDgzMA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443130830", "bodyText": "meaning this is not bringing up any new resources to run the test...\nI assume this the principle we will be following?\nunit - testing basic functionality at the class level, potentially using mocks. Expected to finish quicker\nfunctional - brings up the services needed and runs test without mocking\nintegration - runs subset of functional tests, on a full fledged enviroment with dockerized services\nMight be good to add such a doc somewhere.. may be in travis.yml or in README even.. so developers understand what test is what.", "author": "vinothchandar", "createdAt": "2020-06-20T13:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMDk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2OTY0Nw==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443169647", "bodyText": "@vinothchandar yes exactly. created https://issues.apache.org/jira/browse/HUDI-1034 for this", "author": "xushiyan", "createdAt": "2020-06-21T00:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMDk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMTA5NA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r441931094", "bodyText": "This can be a unit test; getting rid of CommonTestHarness", "author": "xushiyan", "createdAt": "2020-06-18T02:20:39Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/checkpointing/TestKafkaConnectHdfsProvider.java", "diffHunk": "@@ -19,37 +19,39 @@\n package org.apache.hudi.utilities.checkpointing;\n \n import org.apache.hudi.common.config.TypedProperties;\n-import org.apache.hudi.common.testutils.HoodieCommonTestHarness;\n import org.apache.hudi.common.testutils.HoodieTestUtils;\n import org.apache.hudi.exception.HoodieException;\n \n import org.apache.hadoop.conf.Configuration;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n \n import java.io.File;\n+import java.nio.file.Files;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n-public class TestKafkaConnectHdfsProvider extends HoodieCommonTestHarness {\n+public class TestKafkaConnectHdfsProvider {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMTMzMw==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r441931333", "bodyText": "functional test separated from its unit test class", "author": "xushiyan", "createdAt": "2020-06-18T02:21:42Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestChainedTransformer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities.functional;\n+\n+import org.apache.hudi.utilities.testutils.SharedResources;\n+import org.apache.hudi.utilities.transform.ChainedTransformer;\n+import org.apache.hudi.utilities.transform.Transformer;\n+\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.types.DataTypes;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.apache.spark.sql.types.DataTypes.IntegerType;\n+import static org.apache.spark.sql.types.DataTypes.StringType;\n+import static org.apache.spark.sql.types.DataTypes.createStructField;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@Tag(\"suite\")\n+public class TestChainedTransformer extends SharedResources {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMTYyOA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r441931628", "bodyText": "@TempDir java.nio.file.Path tempDir will clean up itself automatically", "author": "xushiyan", "createdAt": "2020-06-18T02:22:51Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieSnapshotCopier.java", "diffHunk": "@@ -147,14 +142,4 @@ public void testSnapshotCopy() throws Exception {\n \n     assertTrue(fs.exists(new Path(outputPath + \"/_SUCCESS\")));\n   }\n-\n-  @AfterEach\n-  public void cleanup() {\n-    if (rootPath != null) {\n-      new File(rootPath).delete();\n-    }\n-    if (jsc != null) {\n-      jsc.stop();\n-    }\n-  }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMTk0OA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r441931948", "bodyText": "moved to unit test", "author": "xushiyan", "createdAt": "2020-06-18T02:24:07Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/TestHoodieSnapshotExporter.java", "diffHunk": "@@ -258,49 +253,21 @@ public void setUp() throws Exception {\n     public void testExportWithPartitionField() throws IOException {\n       // `driver` field is set in HoodieTestDataGenerator\n       cfg.outputPartitionField = \"driver\";\n-      new HoodieSnapshotExporter().export(jsc, cfg);\n+      new HoodieSnapshotExporter().export(jsc(), cfg);\n \n-      assertEquals(NUM_RECORDS, sqlContext.read().format(\"json\").load(targetPath).count());\n-      assertTrue(dfs.exists(new Path(targetPath + \"/_SUCCESS\")));\n-      assertTrue(dfs.listStatus(new Path(targetPath)).length > 1);\n+      assertEquals(NUM_RECORDS, sqlContext().read().format(\"json\").load(targetPath).count());\n+      assertTrue(dfs().exists(new Path(targetPath + \"/_SUCCESS\")));\n+      assertTrue(dfs().listStatus(new Path(targetPath)).length > 1);\n     }\n \n     @Test\n     public void testExportForUserDefinedPartitioner() throws IOException {\n       cfg.outputPartitioner = UserDefinedPartitioner.class.getName();\n-      new HoodieSnapshotExporter().export(jsc, cfg);\n-\n-      assertEquals(NUM_RECORDS, sqlContext.read().format(\"json\").load(targetPath).count());\n-      assertTrue(dfs.exists(new Path(targetPath + \"/_SUCCESS\")));\n-      assertTrue(dfs.exists(new Path(String.format(\"%s/%s=%s\", targetPath, UserDefinedPartitioner.PARTITION_NAME, PARTITION_PATH))));\n-    }\n-  }\n-\n-  @Nested\n-  public class TestHoodieSnapshotExporterInputValidation {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMjQ3Nw==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r441932477", "bodyText": "moved to functional", "author": "xushiyan", "createdAt": "2020-06-18T02:26:04Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/transform/TestChainedTransformer.java", "diffHunk": "@@ -19,67 +19,15 @@\n \n package org.apache.hudi.utilities.transform;\n \n-import org.apache.hudi.utilities.UtilHelpers;\n-\n-import org.apache.spark.api.java.JavaSparkContext;\n-import org.apache.spark.sql.Dataset;\n-import org.apache.spark.sql.Row;\n-import org.apache.spark.sql.RowFactory;\n-import org.apache.spark.sql.SparkSession;\n-import org.apache.spark.sql.types.DataTypes;\n-import org.apache.spark.sql.types.StructField;\n-import org.apache.spark.sql.types.StructType;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n import java.util.Arrays;\n import java.util.List;\n \n import static org.apache.spark.sql.types.DataTypes.IntegerType;\n-import static org.apache.spark.sql.types.DataTypes.StringType;\n-import static org.apache.spark.sql.types.DataTypes.createStructField;\n-import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n public class TestChainedTransformer {\n-\n-  private JavaSparkContext jsc;\n-  private SparkSession sparkSession;\n-\n-  @BeforeEach\n-  public void setUp() {\n-    jsc = UtilHelpers.buildSparkContext(this.getClass().getName() + \"-hoodie\", \"local[2]\");\n-    sparkSession = SparkSession.builder().config(jsc.getConf()).getOrCreate();\n-  }\n-\n-  @AfterEach\n-  public void tearDown() {\n-    jsc.stop();\n-  }\n-\n-  @Test\n-  public void testChainedTransformation() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMjcxNw==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r441932717", "bodyText": "to begin with utilities module; later expand to others", "author": "xushiyan", "createdAt": "2020-06-18T02:26:54Z", "path": "scripts/run_travis_tests.sh", "diffHunk": "@@ -20,12 +20,13 @@ mode=$1\n sparkVersion=2.4.4\n hadoopVersion=2.7\n \n-if [ \"$mode\" = \"unit\" ];\n-then\n+if [ \"$mode\" = \"unit\" ]; then\n   echo \"Running Unit Tests\"\n   mvn test -DskipITs=true -B\n-elif [ \"$mode\" = \"integration\" ];\n-then\n+elif [ \"$mode\" = \"functional\" ]; then\n+  echo \"Running Functional Test Suite\"\n+  mvn test -pl hudi-utilities -Pfunctional-test-suite -B", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMDM0Mw==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443130343", "bodyText": "let's make the PR title reflective of this scope?", "author": "vinothchandar", "createdAt": "2020-06-20T13:19:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkzMjcxNw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2ODUzMw==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r442568533", "bodyText": "Can we create the JavaSparkContext only once per JVM? This may have the benefit of making tests faster as there is some delay (on my laptop 1second+) for creating jsc each time.\npublic JavaSparkContext jsc() {\nif (jsc == null) {\n// create spark context\n}\nreturn jsc;\n}", "author": "prashantwason", "createdAt": "2020-06-19T00:23:43Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/testutils/SharedResources.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.testutils;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+public class SharedResources implements SparkProvider, DFSProvider {\n+\n+  private static transient SparkSession spark;\n+  private static transient SQLContext sqlContext;\n+  private static transient JavaSparkContext jsc;\n+\n+  private static transient HdfsTestService hdfsTestService;\n+  private static transient MiniDFSCluster dfsCluster;\n+  private static transient DistributedFileSystem dfs;\n+\n+  @TempDir\n+  protected static java.nio.file.Path sharedTempDir;\n+\n+  protected boolean initialized = false;\n+\n+  @Override\n+  public SparkSession spark() {\n+    return spark;\n+  }\n+\n+  @Override\n+  public SQLContext sqlContext() {\n+    return sqlContext;\n+  }\n+\n+  @Override\n+  public JavaSparkContext jsc() {\n+    return jsc;\n+  }\n+\n+  @Override\n+  public MiniDFSCluster dfsCluster() {\n+    return dfsCluster;\n+  }\n+\n+  @Override\n+  public DistributedFileSystem dfs() {\n+    return dfs;\n+  }\n+\n+  @Override\n+  public Path dfsBasePath() {\n+    return dfs.getWorkingDirectory();\n+  }\n+\n+  @BeforeEach\n+  public synchronized void runBeforeEach() throws Exception {\n+    initialized = spark != null && hdfsTestService != null;\n+    if (!initialized) {\n+      spark = SparkSession.builder()\n+          .config(HoodieWriteClient.registerClasses(conf()))\n+          .getOrCreate();\n+      sqlContext = spark.sqlContext();\n+      jsc = new JavaSparkContext(spark.sparkContext());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3MzEwOQ==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r442573109", "bodyText": "@prashantwason Thanks for checking. The instantiation is guarded by checking spark != null && hdfsTestService != null; which are static, so only the first subclass (a test class) will initialize spark, hdfsTestService, jsc, etc for 1 run of the same test suite, which encompass multiple test classes.", "author": "xushiyan", "createdAt": "2020-06-19T00:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2ODUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2ODg2OA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r442568868", "bodyText": "Same here. Can we create the test service on-demand and only once? Does not need to be done in @beforeeach as many tests may not even end up using the hdfsTestService.", "author": "prashantwason", "createdAt": "2020-06-19T00:24:55Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/testutils/SharedResources.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.testutils;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+public class SharedResources implements SparkProvider, DFSProvider {\n+\n+  private static transient SparkSession spark;\n+  private static transient SQLContext sqlContext;\n+  private static transient JavaSparkContext jsc;\n+\n+  private static transient HdfsTestService hdfsTestService;\n+  private static transient MiniDFSCluster dfsCluster;\n+  private static transient DistributedFileSystem dfs;\n+\n+  @TempDir\n+  protected static java.nio.file.Path sharedTempDir;\n+\n+  protected boolean initialized = false;\n+\n+  @Override\n+  public SparkSession spark() {\n+    return spark;\n+  }\n+\n+  @Override\n+  public SQLContext sqlContext() {\n+    return sqlContext;\n+  }\n+\n+  @Override\n+  public JavaSparkContext jsc() {\n+    return jsc;\n+  }\n+\n+  @Override\n+  public MiniDFSCluster dfsCluster() {\n+    return dfsCluster;\n+  }\n+\n+  @Override\n+  public DistributedFileSystem dfs() {\n+    return dfs;\n+  }\n+\n+  @Override\n+  public Path dfsBasePath() {\n+    return dfs.getWorkingDirectory();\n+  }\n+\n+  @BeforeEach\n+  public synchronized void runBeforeEach() throws Exception {\n+    initialized = spark != null && hdfsTestService != null;\n+    if (!initialized) {\n+      spark = SparkSession.builder()\n+          .config(HoodieWriteClient.registerClasses(conf()))\n+          .getOrCreate();\n+      sqlContext = spark.sqlContext();\n+      jsc = new JavaSparkContext(spark.sparkContext());\n+\n+      FileSystem.closeAll();\n+      hdfsTestService = new HdfsTestService(sharedTempDir);\n+      dfsCluster = hdfsTestService.start(true);\n+      dfs = dfsCluster.getFileSystem();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3NjI2MQ==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r442576261", "bodyText": "@prashantwason Please note that this @BeforeEach is guarded by null check on the static vars, and the test classes are run using FunctionalTestSuite. So for many test classes, regardless of using hdfsTestService or not, the shared resources are only init'ed once within the same test suite, which I'm thinking we can have 1 for each module.", "author": "xushiyan", "createdAt": "2020-06-19T00:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2ODg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3NjUyOA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r442576528", "bodyText": "Got it. Looks good.", "author": "prashantwason", "createdAt": "2020-06-19T00:57:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2ODg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3Nzc1NQ==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r442577755", "bodyText": "@prashantwason actually this makes me realized i made a mistake of cleaning up resources in runAfterAll() which runs for each test class. Let me fix that...", "author": "xushiyan", "createdAt": "2020-06-19T01:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU2ODg2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU5ODU2MA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r442598560", "bodyText": "The exclusion is moved to unit-tests profile.", "author": "xushiyan", "createdAt": "2020-06-19T02:30:36Z", "path": "pom.xml", "diffHunk": "@@ -253,10 +255,6 @@\n               ${surefire-log4j.file}\n             </log4j.configuration>\n           </systemPropertyVariables>\n-          <!-- Excludes integration tests when unit tests are run. -->\n-          <excludes>\n-            <exclude>**/IT*.java</exclude>\n-          </excludes>", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMTgxNA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443131814", "bodyText": "I wonder if we still need a HoodieTestHarness lite?  for things like basePath, conf etc.. it's probably easier than having every unit test do this?", "author": "vinothchandar", "createdAt": "2020-06-20T13:41:11Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/checkpointing/TestKafkaConnectHdfsProvider.java", "diffHunk": "@@ -19,37 +19,39 @@\n package org.apache.hudi.utilities.checkpointing;\n \n import org.apache.hudi.common.config.TypedProperties;\n-import org.apache.hudi.common.testutils.HoodieCommonTestHarness;\n import org.apache.hudi.common.testutils.HoodieTestUtils;\n import org.apache.hudi.exception.HoodieException;\n \n import org.apache.hadoop.conf.Configuration;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n \n import java.io.File;\n+import java.nio.file.Files;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n-public class TestKafkaConnectHdfsProvider extends HoodieCommonTestHarness {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2OTcwMQ==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443169701", "bodyText": "make sense.", "author": "xushiyan", "createdAt": "2020-06-21T00:23:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMTgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMTg3Mg==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443131872", "bodyText": "I wish java lmports had aliases like scala does :) ...again with a common base class, this can be avoided in every class?", "author": "vinothchandar", "createdAt": "2020-06-20T13:42:02Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/checkpointing/TestKafkaConnectHdfsProvider.java", "diffHunk": "@@ -19,37 +19,39 @@\n package org.apache.hudi.utilities.checkpointing;\n \n import org.apache.hudi.common.config.TypedProperties;\n-import org.apache.hudi.common.testutils.HoodieCommonTestHarness;\n import org.apache.hudi.common.testutils.HoodieTestUtils;\n import org.apache.hudi.exception.HoodieException;\n \n import org.apache.hadoop.conf.Configuration;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n \n import java.io.File;\n+import java.nio.file.Files;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n \n-public class TestKafkaConnectHdfsProvider extends HoodieCommonTestHarness {\n+public class TestKafkaConnectHdfsProvider {\n \n-  private String topicPath = null;\n-  private Configuration hadoopConf = null;\n+  @TempDir\n+  public java.nio.file.Path basePath;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMTkwNw==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443131907", "bodyText": "rename to UtilitiesFunctionalTestSuite ?", "author": "vinothchandar", "createdAt": "2020-06-20T13:42:41Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/FunctionalTestSuite.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities.functional;\n+\n+import org.junit.platform.runner.JUnitPlatform;\n+import org.junit.platform.suite.api.IncludeTags;\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(JUnitPlatform.class)\n+@SelectPackages(\"org.apache.hudi.utilities.functional\")\n+@IncludeTags(\"suite\")\n+public class FunctionalTestSuite {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjA5OA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443132098", "bodyText": "guess eventually, we will reuse this across hudi-client and hudi-common? (with necessary relocation?)", "author": "vinothchandar", "createdAt": "2020-06-20T13:45:36Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/testutils/DFSProvider.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities.testutils;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+\n+public interface DFSProvider {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2OTc0OQ==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443169749", "bodyText": "yup. it should be ok to move this in future PR where extend to more modules' functional tests", "author": "xushiyan", "createdAt": "2020-06-21T00:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjI3MA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443132270", "bodyText": "rename to SharedTestResources?\nAlso when I read Test extends SharedTestResources, the class relationship does not feel very natural.. Something to think about around naming as well and generally check ourselves against the more common pattern for this kind of stuff", "author": "vinothchandar", "createdAt": "2020-06-20T13:48:03Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/testutils/SharedResources.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.testutils;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+\n+import java.io.IOException;\n+\n+public class SharedResources implements SparkProvider, DFSProvider {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2OTgwNA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443169804", "bodyText": "How about FunctionalTestHarness?", "author": "xushiyan", "createdAt": "2020-06-21T00:25:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjI3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyMjU4NA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443222584", "bodyText": "yes.. that sounds great..", "author": "vinothchandar", "createdAt": "2020-06-21T14:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjI3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjUyNA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443132524", "bodyText": "No harm in doing this before spark is inited?  Spark threads may be creating some FileSystem objects, which may be killed here? with enough bad luck, we could see flakiness? (thinking out loud)", "author": "vinothchandar", "createdAt": "2020-06-20T13:52:00Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/testutils/SharedResources.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.testutils;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+\n+import java.io.IOException;\n+\n+public class SharedResources implements SparkProvider, DFSProvider {\n+\n+  private static transient SparkSession spark;\n+  private static transient SQLContext sqlContext;\n+  private static transient JavaSparkContext jsc;\n+\n+  private static transient HdfsTestService hdfsTestService;\n+  private static transient MiniDFSCluster dfsCluster;\n+  private static transient DistributedFileSystem dfs;\n+\n+  /**\n+   * An indicator of the initialization status.\n+   */\n+  protected boolean initialized = false;\n+\n+  @Override\n+  public SparkSession spark() {\n+    return spark;\n+  }\n+\n+  @Override\n+  public SQLContext sqlContext() {\n+    return sqlContext;\n+  }\n+\n+  @Override\n+  public JavaSparkContext jsc() {\n+    return jsc;\n+  }\n+\n+  @Override\n+  public MiniDFSCluster dfsCluster() {\n+    return dfsCluster;\n+  }\n+\n+  @Override\n+  public DistributedFileSystem dfs() {\n+    return dfs;\n+  }\n+\n+  @Override\n+  public Path dfsBasePath() {\n+    return dfs.getWorkingDirectory();\n+  }\n+\n+  @BeforeEach\n+  public synchronized void runBeforeEach() throws Exception {\n+    initialized = spark != null && hdfsTestService != null;\n+    if (!initialized) {\n+      spark = SparkSession.builder()\n+          .config(HoodieWriteClient.registerClasses(conf()))\n+          .getOrCreate();\n+      sqlContext = spark.sqlContext();\n+      jsc = new JavaSparkContext(spark.sparkContext());\n+\n+      FileSystem.closeAll();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2OTkyNw==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443169927", "bodyText": "Not quite sure about the harm.. but def. looks safer to move it to the beginning of the method", "author": "xushiyan", "createdAt": "2020-06-21T00:27:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjUyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjU3Ng==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443132576", "bodyText": "when are the miniCluster and spark really shutdown?", "author": "vinothchandar", "createdAt": "2020-06-20T13:52:51Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/testutils/SharedResources.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.testutils;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+\n+import java.io.IOException;\n+\n+public class SharedResources implements SparkProvider, DFSProvider {\n+\n+  private static transient SparkSession spark;\n+  private static transient SQLContext sqlContext;\n+  private static transient JavaSparkContext jsc;\n+\n+  private static transient HdfsTestService hdfsTestService;\n+  private static transient MiniDFSCluster dfsCluster;\n+  private static transient DistributedFileSystem dfs;\n+\n+  /**\n+   * An indicator of the initialization status.\n+   */\n+  protected boolean initialized = false;\n+\n+  @Override\n+  public SparkSession spark() {\n+    return spark;\n+  }\n+\n+  @Override\n+  public SQLContext sqlContext() {\n+    return sqlContext;\n+  }\n+\n+  @Override\n+  public JavaSparkContext jsc() {\n+    return jsc;\n+  }\n+\n+  @Override\n+  public MiniDFSCluster dfsCluster() {\n+    return dfsCluster;\n+  }\n+\n+  @Override\n+  public DistributedFileSystem dfs() {\n+    return dfs;\n+  }\n+\n+  @Override\n+  public Path dfsBasePath() {\n+    return dfs.getWorkingDirectory();\n+  }\n+\n+  @BeforeEach\n+  public synchronized void runBeforeEach() throws Exception {\n+    initialized = spark != null && hdfsTestService != null;\n+    if (!initialized) {\n+      spark = SparkSession.builder()\n+          .config(HoodieWriteClient.registerClasses(conf()))\n+          .getOrCreate();\n+      sqlContext = spark.sqlContext();\n+      jsc = new JavaSparkContext(spark.sparkContext());\n+\n+      FileSystem.closeAll();\n+      hdfsTestService = new HdfsTestService();\n+      dfsCluster = hdfsTestService.start(true);\n+      dfs = dfsCluster.getFileSystem();\n+      dfs.mkdirs(dfs.getWorkingDirectory());\n+    }\n+  }\n+\n+  @AfterAll\n+  public static synchronized void cleanUpAfterAll() throws IOException {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3MDY4NA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443170684", "bodyText": "Tried to close them all in org.apache.hudi.utilities.functional.FunctionalTestSuite#afterAll method hook but couldn't trigger the method...not sure why. As those services are only to shut down when all suite test classes finish, i could at least close them in a jvm shutdown hook.", "author": "xushiyan", "createdAt": "2020-06-21T00:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjU3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyMjY1MA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r443222650", "bodyText": "yes good idea to register a shutdown hook, incase some thread pools not shutting down holds up the jvm exit.?", "author": "vinothchandar", "createdAt": "2020-06-21T14:03:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjU3Ng=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "ff89f74c65de8d5bcf0e22e7f0755591c8cf34e7", "url": "https://github.com/apache/hudi/commit/ff89f74c65de8d5bcf0e22e7f0755591c8cf34e7", "message": "[HUDI-996] Add functional test suite in hudi-utilities\n\n- Share resources for functional tests\n- Add suite for functional test classes from hudi-utilities", "committedDate": "2020-06-28T18:25:50Z", "type": "commit"}, {"oid": "ff89f74c65de8d5bcf0e22e7f0755591c8cf34e7", "url": "https://github.com/apache/hudi/commit/ff89f74c65de8d5bcf0e22e7f0755591c8cf34e7", "message": "[HUDI-996] Add functional test suite in hudi-utilities\n\n- Share resources for functional tests\n- Add suite for functional test classes from hudi-utilities", "committedDate": "2020-06-28T18:25:50Z", "type": "forcePushed"}, {"oid": "87eb111b4f40dc0129790c3043683e2e1b593ca0", "url": "https://github.com/apache/hudi/commit/87eb111b4f40dc0129790c3043683e2e1b593ca0", "message": "Trigger", "committedDate": "2020-06-28T18:57:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTU3OA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r449719578", "bodyText": "Food for thought: if tests are run parallely, in the same jvm. (parallelism option in surefire)... this boolean may not be sufficient for synchronization.. i.e two tests can attempt to create these test resources in parallel.", "author": "vinothchandar", "createdAt": "2020-07-03T23:35:25Z", "path": "hudi-client/src/test/java/org/apache/hudi/testutils/FunctionalTestHarness.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.testutils;\n+\n+import org.apache.hudi.client.HoodieWriteClient;\n+import org.apache.hudi.common.testutils.minicluster.HdfsTestService;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hdfs.DistributedFileSystem;\n+import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.SQLContext;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+\n+public class FunctionalTestHarness implements SparkProvider, DFSProvider {\n+\n+  private static transient SparkSession spark;\n+  private static transient SQLContext sqlContext;\n+  private static transient JavaSparkContext jsc;\n+\n+  private static transient HdfsTestService hdfsTestService;\n+  private static transient MiniDFSCluster dfsCluster;\n+  private static transient DistributedFileSystem dfs;\n+\n+  /**\n+   * An indicator of the initialization status.\n+   */\n+  protected boolean initialized = false;", "originalCommit": "87eb111b4f40dc0129790c3043683e2e1b593ca0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTY2OA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r449719668", "bodyText": "also how come this boolean is not static? otherwise in every before each it will try to create resourceS?", "author": "vinothchandar", "createdAt": "2020-07-03T23:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgxNDgyNA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r449814824", "bodyText": "Food for thought: if tests are run parallely, in the same jvm. (parallelism option in surefire)... this boolean may not be sufficient for synchronization.. i.e two tests can attempt to create these test resources in parallel.\n\nYes, and this is taken care of in the functional-tests profile\n\n  \n    \n      hudi/pom.xml\n    \n    \n        Lines 1024 to 1025\n      in\n      574dcf9\n    \n    \n    \n    \n\n        \n          \n           <forkCount>1</forkCount> \n        \n\n        \n          \n           <reuseForks>true</reuseForks> \n        \n    \n  \n\n\nThese 2 settings make sure creating only one new JVM process to execute all tests in one Maven module. So here we make sure all functional tests in utilities are run sequentially.\n\nalso how come this boolean is not static? otherwise in every before each it will try to create resourceS?\n\nThe initialized is not used as lock, rather only an indicator. It is reset by checking spark and hdfsTestService\nhttps://github.com/apache/hudi/pull/1746/files/87eb111b4f40dc0129790c3043683e2e1b593ca0#diff-543bacddbb566cb15499906d64c783a5R87-R89\nThis can be used for debugging purpose where subclass of this class prints this info...I can see that this may be confusing, maybe removing it later if not commonly used.", "author": "xushiyan", "createdAt": "2020-07-04T23:51:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgxNTg4NQ==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r449815885", "bodyText": "To run functional tests for multiple modules, probably will need to ensure different process for each module and the sequential execution within a module...", "author": "xushiyan", "createdAt": "2020-07-05T00:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkzMTk1Ng==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r449931956", "bodyText": "okay initialized = spark != null && hdfsTestService != null; is what makes the spark and hdfsTestService singleton across a run..", "author": "vinothchandar", "createdAt": "2020-07-05T23:43:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkzMTk4OA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r449931988", "bodyText": "Its a little confusing.. but okay to be fixed later.", "author": "vinothchandar", "createdAt": "2020-07-05T23:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTU3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTgyMw==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r449719823", "bodyText": "should this be abstract?", "author": "vinothchandar", "createdAt": "2020-07-03T23:38:23Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/functional/UtilitiesFunctionalTestSuite.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities.functional;\n+\n+import org.junit.platform.runner.JUnitPlatform;\n+import org.junit.platform.suite.api.IncludeTags;\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(JUnitPlatform.class)\n+@SelectPackages(\"org.apache.hudi.utilities.functional\")\n+@IncludeTags(\"functional\")\n+public class UtilitiesFunctionalTestSuite {", "originalCommit": "87eb111b4f40dc0129790c3043683e2e1b593ca0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTkxMA==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r449719910", "bodyText": "btw where is this used actually.. may be missing something..", "author": "vinothchandar", "createdAt": "2020-07-03T23:39:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgxNTE3Ng==", "url": "https://github.com/apache/hudi/pull/1746#discussion_r449815176", "bodyText": "This class is to like an entry point to all functional test classes annotated with @Tag(\"functional\") in this module..so I would instead optionally make it final. It'll be run by surefire which looks for this pattern in each module.\n\n  \n    \n      hudi/pom.xml\n    \n    \n        Lines 1026 to 1028\n      in\n      574dcf9\n    \n    \n    \n    \n\n        \n          \n           <includes> \n        \n\n        \n          \n             <include>**/*FunctionalTestSuite.java</include> \n        \n\n        \n          \n           </includes> \n        \n    \n  \n\n\nThe relevant maven profile settings were merged by the codecov improvement PR..sorry it is hard to correlate here.", "author": "xushiyan", "createdAt": "2020-07-04T23:57:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcxOTgyMw=="}], "type": "inlineReview"}]}