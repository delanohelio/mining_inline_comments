{"pr_number": 1572, "pr_title": "[HUDI-836] Implement datadog metrics reporter", "pr_createdAt": "2020-04-29T19:55:10Z", "pr_url": "https://github.com/apache/hudi/pull/1572", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk3OTQ2MQ==", "url": "https://github.com/apache/hudi/pull/1572#discussion_r421979461", "bodyText": "remove this empty line?", "author": "yanghua", "createdAt": "2020-05-08T07:04:44Z", "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieMetricsConfig.java", "diffHunk": "@@ -48,6 +48,8 @@\n   public static final String GRAPHITE_SERVER_PORT = GRAPHITE_PREFIX + \".port\";\n   public static final int DEFAULT_GRAPHITE_SERVER_PORT = 4756;\n ", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4MjE0MQ==", "url": "https://github.com/apache/hudi/pull/1572#discussion_r421982141", "bodyText": "I have two opinions about these changes:\n\nDoes it break the compatibility?\nPackaging different config options of different reporters in one class is not a good choice, it would be better to refactor.", "author": "yanghua", "createdAt": "2020-05-08T07:11:09Z", "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieMetricsConfig.java", "diffHunk": "@@ -92,28 +103,63 @@ public Builder withReporterType(String reporterType) {\n       return this;\n     }\n \n-    public Builder toGraphiteHost(String host) {\n+    public Builder withGraphiteHost(String host) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUyNjY1NQ==", "url": "https://github.com/apache/hudi/pull/1572#discussion_r422526655", "bodyText": "These builder methods are not used by any logic. I think they are legacy code and only mentioned in config docs. I'm changing the names in #1603 too.\nYou're right that we should segregate the configs for different reporter types. It shouldn't give too much hassle to do refactoring.", "author": "xushiyan", "createdAt": "2020-05-09T18:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4MjE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4MzYyMw==", "url": "https://github.com/apache/hudi/pull/1572#discussion_r421983623", "bodyText": "Ditto, IMO, we should also refactor these change in the future.", "author": "yanghua", "createdAt": "2020-05-08T07:14:37Z", "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieWriteConfig.java", "diffHunk": "@@ -507,6 +512,37 @@ public String getJmxPort() {\n     return props.getProperty(HoodieMetricsConfig.JMX_PORT);\n   }\n \n+  public ApiSite getDatadogApiSite() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NDU4Mg==", "url": "https://github.com/apache/hudi/pull/1572#discussion_r421984582", "bodyText": "Can we make this field configurable?", "author": "yanghua", "createdAt": "2020-05-08T07:16:56Z", "path": "hudi-client/src/main/java/org/apache/hudi/metrics/datadog/DatadogHttpClient.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.metrics.datadog;\n+\n+import org.apache.hudi.common.util.StringUtils;\n+import org.apache.hudi.common.util.ValidationUtils;\n+\n+import org.apache.http.HttpHeaders;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpUriRequest;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+\n+/**\n+ * Datadog API HTTP client.\n+ * <p>\n+ * Responsible for API endpoint routing, validating API key, and sending requests with metrics payload.\n+ */\n+public class DatadogHttpClient implements Closeable {\n+\n+  private static final Logger LOG = LogManager.getLogger(DatadogHttpClient.class);\n+\n+  private static final String SERIES_URL_FORMAT = \"https://app.datadoghq.%s/api/v1/series\";\n+  private static final String VALIDATE_URL_FORMAT = \"https://app.datadoghq.%s/api/v1/validate\";\n+  private static final String HEADER_KEY_API_KEY = \"DD-API-KEY\";\n+  private static final int TIMEOUT_MILLIS = 3000;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NjYwOQ==", "url": "https://github.com/apache/hudi/pull/1572#discussion_r421986609", "bodyText": "Can this hard code be configurable?", "author": "yanghua", "createdAt": "2020-05-08T07:21:30Z", "path": "hudi-client/src/main/java/org/apache/hudi/metrics/datadog/DatadogMetricsReporter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.metrics.datadog;\n+\n+import org.apache.hudi.common.util.Option;\n+import org.apache.hudi.common.util.StringUtils;\n+import org.apache.hudi.common.util.ValidationUtils;\n+import org.apache.hudi.config.HoodieWriteConfig;\n+import org.apache.hudi.metrics.MetricsReporter;\n+import org.apache.hudi.metrics.datadog.DatadogHttpClient.ApiSite;\n+\n+import com.codahale.metrics.MetricFilter;\n+import com.codahale.metrics.MetricRegistry;\n+\n+import java.io.Closeable;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Hudi Datadog metrics reporter.\n+ * <p>\n+ * Responsible for reading Hoodie metrics configurations and hooking up with {@link org.apache.hudi.metrics.Metrics}.\n+ * <p>\n+ * Internally delegate reporting tasks to {@link DatadogReporter}.\n+ */\n+public class DatadogMetricsReporter extends MetricsReporter {\n+\n+  private final DatadogReporter reporter;\n+\n+  public DatadogMetricsReporter(HoodieWriteConfig config, MetricRegistry registry) {\n+    ApiSite apiSite = config.getDatadogApiSite();\n+    String apiKey = config.getDatadogApiKey();\n+    ValidationUtils.checkState(!StringUtils.isNullOrEmpty(apiKey),\n+        \"Datadog cannot be initialized: API key is null or empty.\");\n+    boolean skipValidation = config.getDatadogApiKeySkipValidation();\n+    String prefix = config.getDatadogMetricPrefix();\n+    ValidationUtils.checkState(!StringUtils.isNullOrEmpty(prefix),\n+        \"Datadog cannot be initialized: Metric prefix is null or empty.\");\n+    Option<String> host = Option.ofNullable(config.getDatadogMetricHost());\n+    List<String> tagList = config.getDatadogMetricTags();\n+    Option<List<String>> tags = tagList.isEmpty() ? Option.empty() : Option.of(tagList);\n+\n+    reporter = new DatadogReporter(\n+        registry,\n+        new DatadogHttpClient(apiSite, apiKey, skipValidation),\n+        prefix,\n+        host,\n+        tags,\n+        MetricFilter.ALL,\n+        TimeUnit.SECONDS,\n+        TimeUnit.SECONDS\n+    );\n+  }\n+\n+  @Override\n+  public void start() {\n+    reporter.start(30, TimeUnit.SECONDS);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUyNjk1Mg==", "url": "https://github.com/apache/hudi/pull/1572#discussion_r422526952", "bodyText": "I tried to gauge on a good number of configs for user to control over.. but i guess it won't harm if we go with all configurable with sane defaults. So yes i can make it configurable.", "author": "xushiyan", "createdAt": "2020-05-09T18:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4NjYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5MDk0OA==", "url": "https://github.com/apache/hudi/pull/1572#discussion_r421990948", "bodyText": "It may be my lack of knowledge. Are these patterns like xxx_xxx_xxx related to the parsing mechanism of the latest test framework? Otherwise, why not use hump nomenclature?", "author": "yanghua", "createdAt": "2020-05-08T07:31:18Z", "path": "hudi-client/src/test/java/org/apache/hudi/metrics/datadog/TestDatadogHttpClient.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.metrics.datadog;\n+\n+import org.apache.hudi.metrics.datadog.DatadogHttpClient.ApiSite;\n+\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.log4j.AppenderSkeleton;\n+import org.apache.log4j.Level;\n+import org.apache.log4j.Logger;\n+import org.apache.log4j.spi.LoggingEvent;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class TestDatadogHttpClient {\n+\n+  @Mock\n+  AppenderSkeleton appender;\n+\n+  @Captor\n+  ArgumentCaptor<LoggingEvent> logCaptor;\n+\n+  @Mock\n+  CloseableHttpClient httpClient;\n+\n+  @Mock\n+  CloseableHttpResponse httpResponse;\n+\n+  @Mock\n+  StatusLine statusLine;\n+\n+  private void mockResponse(int statusCode) {\n+    when(statusLine.getStatusCode()).thenReturn(statusCode);\n+    when(httpResponse.getStatusLine()).thenReturn(statusLine);\n+    try {\n+      when(httpClient.execute(any())).thenReturn(httpResponse);\n+    } catch (IOException e) {\n+      fail(e.getMessage(), e);\n+    }\n+  }\n+\n+  @Test\n+  public void validateApiKey_shouldThrowException_whenRequestFailed() throws IOException {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUyODEwNw==", "url": "https://github.com/apache/hudi/pull/1572#discussion_r422528107", "bodyText": "It is just one unit test naming convention I tried to adopt...it basically represents [theMethodUnderTest_expectedBehavior_condition] for being descriptive of the logic. See this for reference.\nThe _ is to break the long sentence for readability when using hump nomenclature. I don't mind changing it to hump nomenclature though.", "author": "xushiyan", "createdAt": "2020-05-09T18:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5MDk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1MDgwOA==", "url": "https://github.com/apache/hudi/pull/1572#discussion_r422750808", "bodyText": "I guess it may be a practice. I do not against this style, it looks good. But for now, it would be better to keep a unified style right?\nOf cause, you can start a DISCUSS  on dev ML.", "author": "yanghua", "createdAt": "2020-05-11T02:44:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5MDk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc2OTA0Mw==", "url": "https://github.com/apache/hudi/pull/1572#discussion_r422769043", "bodyText": "Yup changed to hump namings.", "author": "xushiyan", "createdAt": "2020-05-11T04:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5MDk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5MTgwMA==", "url": "https://github.com/apache/hudi/pull/1572#discussion_r421991800", "bodyText": "We must add this line in this PR?", "author": "yanghua", "createdAt": "2020-05-08T07:33:21Z", "path": "pom.xml", "diffHunk": "@@ -245,6 +245,7 @@\n         <version>${maven-surefire-plugin.version}</version>\n         <configuration>\n           <skip>${skipUTs}</skip>\n+          <argLine>-Xms256m -Xmx2g</argLine>", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUyNzExOQ==", "url": "https://github.com/apache/hudi/pull/1572#discussion_r422527119", "bodyText": "it was there when i got OOM in travis...maybe not needed now. let me try removing it", "author": "xushiyan", "createdAt": "2020-05-09T18:05:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5MTgwMA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzNTg2NQ==", "url": "https://github.com/apache/hudi/pull/1572#discussion_r426435865", "bodyText": "It would be better to extract these hard codes to be constants", "author": "yanghua", "createdAt": "2020-05-18T07:58:58Z", "path": "hudi-client/src/main/java/org/apache/hudi/metrics/datadog/DatadogReporter.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.metrics.datadog;\n+\n+import org.apache.hudi.common.util.Option;\n+import org.apache.hudi.common.util.ValidationUtils;\n+\n+import com.codahale.metrics.Clock;\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+import com.codahale.metrics.Histogram;\n+import com.codahale.metrics.Meter;\n+import com.codahale.metrics.MetricFilter;\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.ScheduledReporter;\n+import com.codahale.metrics.Timer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.apache.log4j.LogManager;\n+import org.apache.log4j.Logger;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.SortedMap;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A reporter which publishes metric values to Datadog API.\n+ * <p>\n+ * Responsible for collecting and composing metrics payload.\n+ * <p>\n+ * Internally use {@link DatadogHttpClient} to interact with Datadog APIs.\n+ */\n+public class DatadogReporter extends ScheduledReporter {\n+\n+  private static final Logger LOG = LogManager.getLogger(DatadogReporter.class);\n+\n+  private final DatadogHttpClient client;\n+  private final String prefix;\n+  private final Option<String> host;\n+  private final Option<List<String>> tags;\n+  private final Clock clock;\n+\n+  protected DatadogReporter(\n+      MetricRegistry registry,\n+      DatadogHttpClient client,\n+      String prefix,\n+      Option<String> host,\n+      Option<List<String>> tags,\n+      MetricFilter filter,\n+      TimeUnit rateUnit,\n+      TimeUnit durationUnit) {\n+    super(registry, \"hudi-datadog-reporter\", filter, rateUnit, durationUnit);\n+    this.client = client;\n+    this.prefix = prefix;\n+    this.host = host;\n+    this.tags = tags;\n+    this.clock = Clock.defaultClock();\n+  }\n+\n+  @Override\n+  public void report(\n+      SortedMap<String, Gauge> gauges,\n+      SortedMap<String, Counter> counters,\n+      SortedMap<String, Histogram> histograms,\n+      SortedMap<String, Meter> meters,\n+      SortedMap<String, Timer> timers) {\n+    final long now = clock.getTime() / 1000;\n+    final PayloadBuilder builder = new PayloadBuilder();\n+\n+    builder.withType(\"gauge\");\n+    gauges.forEach((metricName, metric) -> {\n+      builder.addGauge(prefix(metricName), now, (long) metric.getValue());\n+    });\n+\n+    host.ifPresent(builder::withHost);\n+    tags.ifPresent(builder::withTags);\n+\n+    client.send(builder.build());\n+  }\n+\n+  protected String prefix(String... components) {\n+    return MetricRegistry.name(prefix, components);\n+  }\n+\n+  @Override\n+  public void stop() {\n+    try {\n+      super.stop();\n+    } finally {\n+      try {\n+        client.close();\n+      } catch (IOException e) {\n+        LOG.warn(\"Error disconnecting from Datadog.\", e);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Build payload that contains metrics data.\n+   * <p>\n+   * Refer to Datadog API reference https://docs.datadoghq.com/api/?lang=bash#post-timeseries-points\n+   */\n+  static class PayloadBuilder {\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    private final ObjectNode payload;\n+    private final ArrayNode series;\n+    private String type;\n+\n+    PayloadBuilder() {\n+      payload = MAPPER.createObjectNode();\n+      series = payload.putArray(\"series\");\n+    }\n+\n+    PayloadBuilder withType(String type) {\n+      this.type = type;\n+      return this;\n+    }\n+\n+    PayloadBuilder addGauge(String metric, long timestamp, long gaugeValue) {\n+      ValidationUtils.checkState(Objects.equals(type, \"gauge\"));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYzNDIwMQ==", "url": "https://github.com/apache/hudi/pull/1572#discussion_r426634201", "bodyText": "@yanghua fixed.", "author": "xushiyan", "createdAt": "2020-05-18T13:41:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzNTg2NQ=="}], "type": "inlineReview"}, {"oid": "0a68241e81f6b97c83d9d9790c2bceacb2dffa5a", "url": "https://github.com/apache/hudi/commit/0a68241e81f6b97c83d9d9790c2bceacb2dffa5a", "message": "[HUDI-836] Implement Datadog metrics reporter", "committedDate": "2020-05-18T13:17:39Z", "type": "commit"}, {"oid": "de8c539cba37ca4ee68a20b288796893cc479e39", "url": "https://github.com/apache/hudi/commit/de8c539cba37ca4ee68a20b288796893cc479e39", "message": "address comments\n\n- segregate configs\n- use hump naming for tests\n- make api timeout and report period configurable", "committedDate": "2020-05-18T13:17:39Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "0ed952d65d54082e90c1c9186952557cfa5f095e", "url": "https://github.com/apache/hudi/commit/0ed952d65d54082e90c1c9186952557cfa5f095e", "message": "address comment: make metric type constant", "committedDate": "2020-05-18T15:23:10Z", "type": "commit"}, {"oid": "0ed952d65d54082e90c1c9186952557cfa5f095e", "url": "https://github.com/apache/hudi/commit/0ed952d65d54082e90c1c9186952557cfa5f095e", "message": "address comment: make metric type constant", "committedDate": "2020-05-18T15:23:10Z", "type": "forcePushed"}]}