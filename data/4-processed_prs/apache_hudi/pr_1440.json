{"pr_number": 1440, "pr_title": "[HUDI-731] Add ChainedTransformer", "pr_createdAt": "2020-03-24T01:00:58Z", "pr_url": "https://github.com/apache/hudi/pull/1440", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2OTU3MQ==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r396869571", "bodyText": "This class missed the Apache license header. And it's strange why the Travis is green? Does it not check this rule? cc @vinothchandar", "author": "yanghua", "createdAt": "2020-03-24T02:32:03Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/transform/ChainedTransformer.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.apache.hudi.utilities.transform;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MzQyNw==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r396873427", "bodyText": "@yanghua Fixing it.", "author": "xushiyan", "createdAt": "2020-03-24T02:47:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2OTU3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3OTA0OA==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r396879048", "bodyText": "We can add a new section in the write documentation page. The branch of documentation is asf-site. So it's OK to describe it in another PR.", "author": "yanghua", "createdAt": "2020-03-24T03:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2OTU3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2OTkzOQ==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r396869939", "bodyText": "It would be better to have a test case which extends ChainedTransformer  and mock some transformer to verify this function.", "author": "yanghua", "createdAt": "2020-03-24T02:33:32Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/transform/ChainedTransformer.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.apache.hudi.utilities.transform;\n+\n+import org.apache.hudi.common.util.TypedProperties;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SparkSession;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+/**\n+ * An abstract {@link Transformer} to chain other {@link Transformer}s and apply sequentially.\n+ * <p>\n+ * A subclass is to supply a {@link List} of {@link Transformer}s in desired sequence.\n+ */\n+public abstract class ChainedTransformer implements Transformer {\n+\n+  protected abstract Supplier<List<Transformer>> supplyTransformers();\n+\n+  @Override\n+  public Dataset<Row> apply(JavaSparkContext jsc, SparkSession sparkSession, Dataset<Row> rowDataset, TypedProperties properties) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MDIzNg==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r396870236", "bodyText": "It's a user-faced feature, we'd better to describe it in the documentation. WDYT?", "author": "yanghua", "createdAt": "2020-03-24T02:34:54Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/transform/ChainedTransformer.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.apache.hudi.utilities.transform;\n+\n+import org.apache.hudi.common.util.TypedProperties;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SparkSession;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+/**\n+ * An abstract {@link Transformer} to chain other {@link Transformer}s and apply sequentially.\n+ * <p>\n+ * A subclass is to supply a {@link List} of {@link Transformer}s in desired sequence.\n+ */\n+public abstract class ChainedTransformer implements Transformer {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MzM5MQ==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r396873391", "bodyText": "Sure @yanghua . Could you point me to where I can add this?", "author": "xushiyan", "createdAt": "2020-03-24T02:47:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MDIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5NDkyOQ==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r396894929", "bodyText": "will do the docs change once this approved. thanks.", "author": "xushiyan", "createdAt": "2020-03-24T04:21:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MDIzNg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc2ODk2MQ==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399768961", "bodyText": "Can we add a CLI test case for arg --transformer-class so that we can cover the change of this method?", "author": "yanghua", "createdAt": "2020-03-29T09:11:14Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "diffHunk": "@@ -102,11 +104,23 @@ public static SchemaProvider createSchemaProvider(String schemaProviderClass, Ty\n     }\n   }\n \n-  public static Transformer createTransformer(String transformerClass) throws IOException {\n+  public static Transformer createTransformer(String transformerClasses) throws IOException {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgyMDY4Mw==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399820683", "bodyText": "ok done.", "author": "xushiyan", "createdAt": "2020-03-29T16:27:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc2ODk2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc5MzE2Mg==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399793162", "bodyText": "Missing Apache Header.", "author": "leesf", "createdAt": "2020-03-29T12:48:30Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/transform/TestChainedTransformer.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.apache.hudi.utilities.transform;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxMTI0Nw==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399811247", "bodyText": "Good catch! @xushiyan , you can configure your IDE to add a file header template. For example, Intellij IDEA does support this feature. @leesf Can we let Travis check the license header?", "author": "yanghua", "createdAt": "2020-03-29T15:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc5MzE2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxODYxMg==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399818612", "bodyText": "Guess rat check only works for source files.. we should fix that right away..", "author": "vinothchandar", "createdAt": "2020-03-29T16:10:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc5MzE2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgyMDQ5Nw==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399820497", "bodyText": "Issue actually is the phase I think.. I locally tested that clean install /clean package will flag a file without header..\n <executions>\n            <execution>\n              <phase>package</phase>\n              <goals>\n                <goal>check</goal>\n              </goals>\n            </execution>\n          </executions>\n\nwe need to change this to verify probably..", "author": "vinothchandar", "createdAt": "2020-03-29T16:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc5MzE2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgyMzM1NQ==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399823355", "bodyText": "Raised #1464", "author": "vinothchandar", "createdAt": "2020-03-29T16:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc5MzE2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxODgwMQ==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399818801", "bodyText": "jcommander supports parsing a list of csvs into a List here already. could we switch to that", "author": "vinothchandar", "createdAt": "2020-03-29T16:12:18Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/deltastreamer/HoodieDeltaStreamer.java", "diffHunk": "@@ -195,11 +195,12 @@ public Operation convert(String value) throws ParameterException {\n     public String schemaProviderClassName = null;\n \n     @Parameter(names = {\"--transformer-class\"},\n-        description = \"subclass of org.apache.hudi.utilities.transform.Transformer\"\n+        description = \"A subclass or a list of subclasses of org.apache.hudi.utilities.transform.Transformer\"\n             + \". Allows transforming raw source Dataset to a target Dataset (conforming to target schema) before \"\n             + \"writing. Default : Not set. E:g - org.apache.hudi.utilities.transform.SqlQueryBasedTransformer (which \"\n-            + \"allows a SQL query templated to be passed as a transformation function)\")\n-    public String transformerClassName = null;\n+            + \"allows a SQL query templated to be passed as a transformation function). \"\n+            + \"Pass a comma-separated list of subclass names to chain the transformations.\")\n+    public String transformerClassNames = null;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgyMTMzMg==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399821332", "bodyText": "let me check that.", "author": "xushiyan", "createdAt": "2020-03-29T16:32:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxODgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgyMTgzNg==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399821836", "bodyText": "@vinothchandar jcommander converter feature seems to be the right fit. Guess we can change this variable to Transformer and get rid of UtilHelpers.createTransformer(). Sounds good? Actually for serializable config, let's just make it list of strings.", "author": "xushiyan", "createdAt": "2020-03-29T16:37:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxODgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgyMzQ2Mw==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399823463", "bodyText": "yes :) ..", "author": "vinothchandar", "createdAt": "2020-03-29T16:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxODgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgxODgzNw==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399818837", "bodyText": "this logic can be pushed to command line parsing?", "author": "vinothchandar", "createdAt": "2020-03-29T16:12:45Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "diffHunk": "@@ -102,11 +104,23 @@ public static SchemaProvider createSchemaProvider(String schemaProviderClass, Ty\n     }\n   }\n \n-  public static Transformer createTransformer(String transformerClass) throws IOException {\n+  public static Transformer createTransformer(String transformerClasses) throws IOException {\n     try {\n-      return transformerClass == null ? null : (Transformer) ReflectionUtils.loadClass(transformerClass);\n+      if (transformerClasses == null) {\n+        return null;\n+      }\n+\n+      String[] classNames = Arrays.stream(transformerClasses.split(\",\"))", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwNzg2NQ==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399907865", "bodyText": "It would be better to add java docs for the test class.", "author": "yanghua", "createdAt": "2020-03-30T03:23:30Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestUtilHelpers.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.utilities.transform.ChainedTransformer;\n+import org.apache.hudi.utilities.transform.Transformer;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.runners.Enclosed;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Enclosed.class)\n+public class TestUtilHelpers {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1NDE0Ng==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r400554146", "bodyText": "@yanghua I doubt the benefits of adding java doc to unit test classes. The package path and the class name have very well pinpointed the class under tests. Plus the test case method names are self-explanatory, we don't want to put redundant info in a comment block, do we? If you're concerned with the checkstyle warnings, maybe we should consider exclude this warning from test sources. WDYT?", "author": "xushiyan", "createdAt": "2020-03-30T23:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwNzg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY3NDY5Mw==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r400674693", "bodyText": "Yes, I am a bit worried about these issues you mentioned. Another concern is the issue of conventions. Most test classes currently include Java docs, even though it seems they can describe themselves. Of course, this is another subjective issue worth considering. OK, here I no longer require Java doc.", "author": "yanghua", "createdAt": "2020-03-31T06:38:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwNzg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwODE3NQ==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399908175", "bodyText": "IMO, it is not necessary to create this static class, all the test cases can be placed in the TestUtilHelpers.", "author": "yanghua", "createdAt": "2020-03-30T03:24:54Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/TestUtilHelpers.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities;\n+\n+import org.apache.hudi.common.config.TypedProperties;\n+import org.apache.hudi.utilities.transform.ChainedTransformer;\n+import org.apache.hudi.utilities.transform.Transformer;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.SparkSession;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.runners.Enclosed;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Enclosed.class)\n+public class TestUtilHelpers {\n+\n+  public static class TestCreateTransformer {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1ODE3MA==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r400558170", "bodyText": "@yanghua That's the intended usage of @RunWith(Enclosed.class), which is to run enclosed static classes separately. I think we should logically segregate tests for different utility methods in UtilHelpers, due to its versatility. E.g., only TestCreateTransformer should know about TransformerFoo.class and TransformerBar.class hence they are enclosed in this static class so that other test cases don't worry about them. Sounds reasonable?", "author": "xushiyan", "createdAt": "2020-03-30T23:39:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwODE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY3NTM1NQ==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r400675355", "bodyText": "Ok, reasonable.", "author": "yanghua", "createdAt": "2020-03-31T06:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwODE3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwODI0Mw==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r399908243", "bodyText": "Java doc", "author": "yanghua", "createdAt": "2020-03-30T03:25:16Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/transform/TestChainedTransformer.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.hudi.utilities.transform;\n+\n+import org.apache.hudi.utilities.UtilHelpers;\n+\n+import org.apache.spark.api.java.JavaSparkContext;\n+import org.apache.spark.sql.Dataset;\n+import org.apache.spark.sql.Row;\n+import org.apache.spark.sql.RowFactory;\n+import org.apache.spark.sql.SparkSession;\n+import org.apache.spark.sql.types.DataTypes;\n+import org.apache.spark.sql.types.StructField;\n+import org.apache.spark.sql.types.StructType;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.apache.spark.sql.types.DataTypes.IntegerType;\n+import static org.apache.spark.sql.types.DataTypes.StringType;\n+import static org.apache.spark.sql.types.DataTypes.createStructField;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestChainedTransformer {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fe51c3767ed9c4ea72549ca9f3f8dd20fbca1cd6", "url": "https://github.com/apache/hudi/commit/fe51c3767ed9c4ea72549ca9f3f8dd20fbca1cd6", "message": "[HUDI-731] Add ChainedTransformer", "committedDate": "2020-03-30T23:19:07Z", "type": "commit"}, {"oid": "fe51c3767ed9c4ea72549ca9f3f8dd20fbca1cd6", "url": "https://github.com/apache/hudi/commit/fe51c3767ed9c4ea72549ca9f3f8dd20fbca1cd6", "message": "[HUDI-731] Add ChainedTransformer", "committedDate": "2020-03-30T23:19:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk5MDgyMw==", "url": "https://github.com/apache/hudi/pull/1440#discussion_r400990823", "bodyText": "let's use Optional instead of null.. NPE are pesky :)", "author": "vinothchandar", "createdAt": "2020-03-31T15:09:02Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/UtilHelpers.java", "diffHunk": "@@ -102,11 +104,19 @@ public static SchemaProvider createSchemaProvider(String schemaProviderClass, Ty\n     }\n   }\n \n-  public static Transformer createTransformer(String transformerClass) throws IOException {\n+  public static Transformer createTransformer(List<String> classNames) throws IOException {\n     try {\n-      return transformerClass == null ? null : (Transformer) ReflectionUtils.loadClass(transformerClass);\n+      if (classNames == null) {", "originalCommit": "fe51c3767ed9c4ea72549ca9f3f8dd20fbca1cd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2510e16d068a915a850a025ee1caa8b0db041558", "url": "https://github.com/apache/hudi/commit/2510e16d068a915a850a025ee1caa8b0db041558", "message": "use Option<Transformer>", "committedDate": "2020-04-01T01:59:43Z", "type": "commit"}, {"oid": "2510e16d068a915a850a025ee1caa8b0db041558", "url": "https://github.com/apache/hudi/commit/2510e16d068a915a850a025ee1caa8b0db041558", "message": "use Option<Transformer>", "committedDate": "2020-04-01T01:59:43Z", "type": "forcePushed"}]}