{"pr_number": 1453, "pr_title": "HUDI-644 kafka connect checkpoint provider", "pr_createdAt": "2020-03-27T06:19:39Z", "pr_url": "https://github.com/apache/hudi/pull/1453", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwNjQ2OQ==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399206469", "bodyText": "How do you plan to integrate this class with DeltaStreamer?", "author": "pratyakshsharma", "createdAt": "2020-03-27T11:42:56Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/checkpoint/KafkaConnectHdfsProvider.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Generate checkpoint from Kafka-Connect-HDFS.\n+ */\n+public class KafkaConnectHdfsProvider implements CheckPointProvider {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNzg3Ng==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399427876", "bodyText": "few different options IMO:\n\npass the output of this tool as --checkpoint to delta streamer in the first run\nintegrate this tool with HoodieWriteClient or Spark writer or HdfsImporter as an option controlled by config, user can save the checkpoint when they are not using delta streamer. so next time they can switch seamlessly.", "author": "garyli1019", "createdAt": "2020-03-27T17:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwNjQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3OTM5OA==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399679398", "bodyText": "I am more inclined towards integrating this tool at proper places in our code base rather than specifying the checkpoint manually. You plan to do this integration in a separate PR?", "author": "pratyakshsharma", "createdAt": "2020-03-28T16:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwNjQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcwMzg1Ng==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399703856", "bodyText": "yes, prefer to keep the PR small enough for review. WDYT?", "author": "garyli1019", "createdAt": "2020-03-28T20:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwNjQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3OTIyMQ==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399779221", "bodyText": "Sounds good to me. @vinothchandar to take the final call. :)", "author": "pratyakshsharma", "createdAt": "2020-03-29T10:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwNjQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4NDg0Ng==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r400384846", "bodyText": "I think we can integrate this using a new --initial-checkpoint-provider flag that takes the name of the class that provides an initial checkpoint, if no commits/checkpoints are found on the hudi dataset itself.. The current behavior is probably to pass an Optional.empty to the Source class and let the sources decide (for e,g kafka will start from earliest/latest depending on what the user wants it to be)? We can encapsulate this behavior in a another InitialCheckpointProvider implementation, which will be the default value for --initial-checkpoint-provider flag", "author": "vinothchandar", "createdAt": "2020-03-30T17:56:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwNjQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwOTM1Mg==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r400409352", "bodyText": "Do we wanna integrate this with the delta streamer?\nMy idea was to use this tool when not using delta streamer and save a checkpoint into the commit. Then the user can switch to delta streamer in the next run.\nIf we integrate this with delta streamer, let's say the users are using kafka connect, they need to use Spark Datasource reader to do the initial bulk insert first, then the second run will be using delta streamer. But if we do the checkpoint scan in the second run, the checkpoint will not represent the data in the Hudi dataset, which means we need to do the checkpoint scan in the first run. It that makes sense? Or I am missing something", "author": "garyli1019", "createdAt": "2020-03-30T18:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwNjQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzMTAxNg==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r401331016", "bodyText": "renamed to InitialCheckPointProvider", "author": "garyli1019", "createdAt": "2020-04-01T03:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwNjQ2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxODMwNw==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399218307", "bodyText": "for partition 0, the offset should be 400?", "author": "pratyakshsharma", "createdAt": "2020-03-27T12:07:23Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/checkpoint/TestCheckPointProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import org.apache.hudi.common.HoodieCommonTestHarness;\n+import org.apache.hudi.common.model.HoodieTestUtils;\n+import org.apache.hudi.common.util.FSUtils;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestCheckPointProvider extends HoodieCommonTestHarness {\n+  private FileSystem fs = null;\n+  private String topicPath = null;\n+\n+  @Before\n+  public void init() {\n+    // Prepare directories\n+    initPath();\n+    topicPath = basePath + \"/topic1\";\n+    final Configuration hadoopConf = HoodieTestUtils.getDefaultHadoopConf();\n+    fs = FSUtils.getFs(basePath, hadoopConf);\n+    new File(topicPath).mkdirs();\n+  }\n+\n+  @Test\n+  public void testKafkaConnectHdfsProvider() throws Exception {\n+    // create regular kafka connect hdfs dirs\n+    new File(topicPath + \"/year=2016/month=05/day=01/\").mkdirs();\n+    new File(topicPath + \"/year=2016/month=05/day=02/\").mkdirs();\n+    // kafka connect tmp folder\n+    new File(topicPath + \"/TMP\").mkdirs();\n+    // tmp file that being written\n+    new File(topicPath + \"/TMP/\" + \"topic1+0+301+400.parquet\").createNewFile();\n+    // regular parquet files\n+    new File(topicPath + \"/year=2016/month=05/day=01/\"\n+        + \"topic1+0+100+200.parquet\").createNewFile();\n+    new File(topicPath + \"/year=2016/month=05/day=01/\"\n+        + \"topic1+1+100+200.parquet\").createNewFile();\n+    new File(topicPath + \"/year=2016/month=05/day=02/\"\n+        + \"topic1+0+201+300.parquet\").createNewFile();\n+    // noise parquet file\n+    new File(topicPath + \"/year=2016/month=05/day=01/\"\n+        + \"random_snappy_1.parquet\").createNewFile();\n+    new File(topicPath + \"/year=2016/month=05/day=02/\"\n+        + \"random_snappy_2.parquet\").createNewFile();\n+    CheckPointProvider c = new KafkaConnectHdfsProvider(new Path(topicPath), fs);\n+    assertEquals(c.getCheckpoint(), \"topic1,0:300,1:200\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyOTAzOA==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399429038", "bodyText": "kafka connect keep writing files into a tmp folder. Once reach the cut-off time, it moves the files from tmp to the desired partition. So we need to ignore the files under tmp.", "author": "garyli1019", "createdAt": "2020-03-27T17:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxODMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3OTE3Nw==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399679177", "bodyText": "I see.", "author": "pratyakshsharma", "createdAt": "2020-03-28T16:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxODMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyNDY5OA==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399224698", "bodyText": "Is this some standard format of these files maintained by kafka-connect? Like {topic}.{partition}.{lowerOffset}.{upperOffset}.parquet? Can you share some documentation of this, if it is so? Basically I would like to understand these files.", "author": "pratyakshsharma", "createdAt": "2020-03-27T12:20:09Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/checkpoint/TestCheckPointProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import org.apache.hudi.common.HoodieCommonTestHarness;\n+import org.apache.hudi.common.model.HoodieTestUtils;\n+import org.apache.hudi.common.util.FSUtils;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestCheckPointProvider extends HoodieCommonTestHarness {\n+  private FileSystem fs = null;\n+  private String topicPath = null;\n+\n+  @Before\n+  public void init() {\n+    // Prepare directories\n+    initPath();\n+    topicPath = basePath + \"/topic1\";\n+    final Configuration hadoopConf = HoodieTestUtils.getDefaultHadoopConf();\n+    fs = FSUtils.getFs(basePath, hadoopConf);\n+    new File(topicPath).mkdirs();\n+  }\n+\n+  @Test\n+  public void testKafkaConnectHdfsProvider() throws Exception {\n+    // create regular kafka connect hdfs dirs\n+    new File(topicPath + \"/year=2016/month=05/day=01/\").mkdirs();\n+    new File(topicPath + \"/year=2016/month=05/day=02/\").mkdirs();\n+    // kafka connect tmp folder\n+    new File(topicPath + \"/TMP\").mkdirs();\n+    // tmp file that being written\n+    new File(topicPath + \"/TMP/\" + \"topic1+0+301+400.parquet\").createNewFile();\n+    // regular parquet files\n+    new File(topicPath + \"/year=2016/month=05/day=01/\"\n+        + \"topic1+0+100+200.parquet\").createNewFile();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMTM4OA==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399431388", "bodyText": "yes, https://docs.confluent.io/current/connect/kafka-connect-hdfs/index.html\nI can add this URL to the comment. Not sure if this is a preferable way to document other modules.", "author": "garyli1019", "createdAt": "2020-03-27T17:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyNDY5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4NjE0NA==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r400386144", "bodyText": "in this case, documenting the url would help with maintaining the code", "author": "vinothchandar", "createdAt": "2020-03-30T17:58:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyNDY5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4MDMwMg==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399780302", "bodyText": "Let us add a test case to cover this scenario as well?", "author": "pratyakshsharma", "createdAt": "2020-03-29T10:56:24Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/checkpoint/KafkaConnectHdfsProvider.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.PathFilter;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Generate checkpoint from Kafka-Connect-HDFS.\n+ */\n+public class KafkaConnectHdfsProvider implements CheckPointProvider {\n+  private final Path path;\n+  private final FileSystem fs;\n+\n+  private static final String FILENAME_SEPARATOR = \"[\\\\+\\\\.]\";\n+\n+  public KafkaConnectHdfsProvider(final Path basePath, final FileSystem fileSystem) {\n+    this.path = basePath;\n+    this.fs = fileSystem;\n+  }\n+\n+  /**\n+   * PathFilter for Kafka-Connect-HDFS.\n+   * Directory format: /partition1=xxx/partition2=xxx\n+   * File format: topic+partition+lowerOffset+upperOffset.file\n+   */\n+  public static class KafkaConnectPathFilter implements PathFilter {\n+    private static final Pattern DIRECTORY_PATTERN = Pattern.compile(\".*=.*\");\n+    private static final Pattern PATTERN =\n+        Pattern.compile(\"[a-zA-Z0-9\\\\._\\\\-]+\\\\+\\\\d+\\\\+\\\\d+\\\\+\\\\d+(.\\\\w+)?\");\n+\n+    @Override\n+    public boolean accept(final Path path) {\n+      final String filename = path.getName();\n+      final Matcher matcher = PATTERN.matcher(filename);\n+      return matcher.matches();\n+    }\n+\n+    public boolean acceptDir(final Path path) {\n+      final String dirName = path.getName();\n+      final Matcher matcher = DIRECTORY_PATTERN.matcher(dirName);\n+      return matcher.matches();\n+    }\n+  }\n+\n+  /**\n+   * Convert map contains max offset of each partition to string.\n+   * @param topic Topic name\n+   * @param checkpoint Map with partition as key and max offset as value\n+   * @return Checkpoint string\n+   */\n+  private static String buildCheckpointStr(final String topic,\n+                                           final HashMap<Integer, Integer> checkpoint) {\n+    final StringBuilder checkpointStr = new StringBuilder();\n+    checkpointStr.append(topic);\n+    for (int i = 0; i < checkpoint.size(); ++i) {\n+      checkpointStr.append(\",\").append(i).append(\":\").append(checkpoint.get(i));\n+    }\n+    return checkpointStr.toString();\n+  }\n+\n+  /**\n+   * List file status recursively.\n+   * @param curPath Current Path\n+   * @param filter PathFilter\n+   * @return All file status match kafka connect naming convention\n+   * @throws IOException\n+   */\n+  private ArrayList<FileStatus> listAllFileStatus(Path curPath,\n+                                                  KafkaConnectPathFilter filter) throws IOException {\n+    ArrayList<FileStatus> allFileStatus = new ArrayList<>();\n+    FileStatus[] fileStatus = this.fs.listStatus(curPath);\n+    for (FileStatus status : fileStatus) {\n+      if (status.isDirectory() && filter.acceptDir(status.getPath())) {\n+        allFileStatus.addAll(listAllFileStatus(status.getPath(), filter));\n+      } else {\n+        if (filter.accept(status.getPath())) {\n+          allFileStatus.add(status);\n+        }\n+      }\n+    }\n+    return allFileStatus;\n+  }\n+\n+  @Override\n+  public String getCheckpoint() throws IOException {\n+    final KafkaConnectPathFilter filter = new KafkaConnectPathFilter();\n+    final ArrayList<FileStatus> fileStatus = listAllFileStatus(this.path, filter);\n+    if (fileStatus.size() == 0) {\n+      throw new IOException(\"No valid Kafka Connect Hdfs file found under:\" + this.path.getName());\n+    }\n+    final String topic = fileStatus.get(0).getPath().getName().split(FILENAME_SEPARATOR)[0];\n+    int maxPartition = -1;\n+    final HashMap<Integer, Integer> checkpointMap = new HashMap<>();\n+    for (final FileStatus status : fileStatus) {\n+      final String filename = status.getPath().getName();\n+      final String[] groups = filename.split(FILENAME_SEPARATOR);\n+      final int partition = Integer.parseInt(groups[1]);\n+      final int offsetUpper = Integer.parseInt(groups[3]);\n+      maxPartition = Math.max(maxPartition, partition);\n+      if (checkpointMap.containsKey(partition)) {\n+        checkpointMap.put(partition, Math.max(checkpointMap.get(partition), offsetUpper));\n+      } else {\n+        checkpointMap.put(partition, offsetUpper);\n+      }\n+    }\n+    if (checkpointMap.size() != maxPartition + 1) {\n+      throw new IOException(\"Missing partition from the file scan, \"", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyNTc4OA==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399925788", "bodyText": "sure", "author": "garyli1019", "createdAt": "2020-03-30T04:50:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4MDMwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4MDU2NQ==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399780565", "bodyText": "Let us clean this after executing the test?", "author": "pratyakshsharma", "createdAt": "2020-03-29T10:58:25Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/checkpoint/TestCheckPointProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import org.apache.hudi.common.HoodieCommonTestHarness;\n+import org.apache.hudi.common.model.HoodieTestUtils;\n+import org.apache.hudi.common.util.FSUtils;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestCheckPointProvider extends HoodieCommonTestHarness {\n+  private FileSystem fs = null;\n+  private String topicPath = null;\n+\n+  @Before\n+  public void init() {\n+    // Prepare directories\n+    initPath();\n+    topicPath = basePath + \"/topic1\";\n+    final Configuration hadoopConf = HoodieTestUtils.getDefaultHadoopConf();\n+    fs = FSUtils.getFs(basePath, hadoopConf);\n+    new File(topicPath).mkdirs();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyNjMxMw==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r399926313", "bodyText": "the folder was removed after the execution in my local. Probably already set up somewhere", "author": "garyli1019", "createdAt": "2020-03-30T04:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4MDU2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NjY2MQ==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r400376661", "bodyText": "let's make it clear that this is only used initially? may be the interface should be InitialCheckPointProvider ?", "author": "vinothchandar", "createdAt": "2020-03-30T17:43:37Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/checkpoint/CheckPointProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Provide checkpoint for delta streamer.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3Njk5Mg==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r400376992", "bodyText": "throw some HoodieException or our own exceptions?", "author": "vinothchandar", "createdAt": "2020-03-30T17:44:08Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/checkpoint/CheckPointProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Provide checkpoint for delta streamer.\n+ */\n+public interface CheckPointProvider {\n+  /**\n+   * Get checkpoint string recognizable for delta streamer.\n+   */\n+  String getCheckpoint() throws IOException;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzMDgwMA==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r401330800", "bodyText": "Used HoodieException", "author": "garyli1019", "createdAt": "2020-04-01T03:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3Njk5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3NzM1OA==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r400377358", "bodyText": "move package one level up?  org.apache.hudi.utiilities.checkpointing ?", "author": "vinothchandar", "createdAt": "2020-03-30T17:44:44Z", "path": "hudi-utilities/src/main/java/org/apache/hudi/utilities/sources/checkpoint/CheckPointProvider.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4NTg4NA==", "url": "https://github.com/apache/hudi/pull/1453#discussion_r400385884", "bodyText": "let's pull this into its own test class TestKafkaConnectHDFSCheckpointProvider. (Something that needs to be fixed in other places in our code.. but starting to catch new ones like this from now :))", "author": "vinothchandar", "createdAt": "2020-03-30T17:58:14Z", "path": "hudi-utilities/src/test/java/org/apache/hudi/utilities/sources/checkpoint/TestCheckPointProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.utilities.sources.checkpoint;\n+\n+import org.apache.hudi.common.HoodieCommonTestHarness;\n+import org.apache.hudi.common.model.HoodieTestUtils;\n+import org.apache.hudi.common.util.FSUtils;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class TestCheckPointProvider extends HoodieCommonTestHarness {\n+  private FileSystem fs = null;\n+  private String topicPath = null;\n+\n+  @Before\n+  public void init() {\n+    // Prepare directories\n+    initPath();\n+    topicPath = basePath + \"/topic1\";\n+    final Configuration hadoopConf = HoodieTestUtils.getDefaultHadoopConf();\n+    fs = FSUtils.getFs(basePath, hadoopConf);\n+    new File(topicPath).mkdirs();\n+  }\n+\n+  @Test\n+  public void testKafkaConnectHdfsProvider() throws Exception {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "d1a2dffe447633bef5bcc0766d1f4d6c764a3bad", "url": "https://github.com/apache/hudi/commit/d1a2dffe447633bef5bcc0766d1f4d6c764a3bad", "message": "HUDI-644 kafka connect checkpoint provider", "committedDate": "2020-04-01T17:56:02Z", "type": "commit"}, {"oid": "d1a2dffe447633bef5bcc0766d1f4d6c764a3bad", "url": "https://github.com/apache/hudi/commit/d1a2dffe447633bef5bcc0766d1f4d6c764a3bad", "message": "HUDI-644 kafka connect checkpoint provider", "committedDate": "2020-04-01T17:56:02Z", "type": "forcePushed"}]}