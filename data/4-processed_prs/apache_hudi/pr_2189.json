{"pr_number": 2189, "pr_title": "Some more updates to the rfc-15 implementation", "pr_createdAt": "2020-10-19T21:20:09Z", "pr_url": "https://github.com/apache/hudi/pull/2189", "timeline": [{"oid": "f4e695a995416667a33df41aa0e8fa2be1cf5e11", "url": "https://github.com/apache/hudi/commit/f4e695a995416667a33df41aa0e8fa2be1cf5e11", "message": "[RFC-15] Add metrics to track the time for each file system call.", "committedDate": "2020-10-19T21:08:27Z", "type": "commit"}, {"oid": "6e090eed4cc9eee32763653806298a0c04804227", "url": "https://github.com/apache/hudi/commit/6e090eed4cc9eee32763653806298a0c04804227", "message": "[RFC-15] Added a distributed metrics registry for spark which can be used to collect metrics from executors.\n\nThis helps create a stats dashboard which shows the metadata table improvements in real-time for production tables.", "committedDate": "2020-10-19T21:09:17Z", "type": "commit"}, {"oid": "755ba2e5e7b506f2bd4b06cc5c5d917c57b3c448", "url": "https://github.com/apache/hudi/commit/755ba2e5e7b506f2bd4b06cc5c5d917c57b3c448", "message": "[RFC-15] Using distributed metrics registry in metadata code.", "committedDate": "2020-10-19T21:09:32Z", "type": "commit"}, {"oid": "33dad2529c6bb673c021315a79c7cbd3400628ca", "url": "https://github.com/apache/hudi/commit/33dad2529c6bb673c021315a79c7cbd3400628ca", "message": "[MINOR] Reduced number of fs calls to check for table existence. Removed dead code.", "committedDate": "2020-10-19T21:09:43Z", "type": "commit"}, {"oid": "9dde762f77da2e86b2ff77ddcc08ad013128a214", "url": "https://github.com/apache/hudi/commit/9dde762f77da2e86b2ff77ddcc08ad013128a214", "message": "[HUDI-1346] Choose a new instant time when performing autoClean.", "committedDate": "2020-10-19T21:13:45Z", "type": "commit"}, {"oid": "fa3c73f9df8560b0fe2abf0148ff90812ef28c25", "url": "https://github.com/apache/hudi/commit/fa3c73f9df8560b0fe2abf0148ff90812ef28c25", "message": "[HUDI-1321] Created HoodieMetadataConfig to specify configuration for the metadata table.\n\nThis is safer than full-fledged properties for the metadata table (like HoodieWriteConfig) as it makes burdensome to tune the metadata. With limited configuration, we can control the performance of the metadata table closely.", "committedDate": "2020-10-20T08:47:49Z", "type": "commit"}, {"oid": "f0e5957eb930e9450bed2fda90218fc638257685", "url": "https://github.com/apache/hudi/commit/f0e5957eb930e9450bed2fda90218fc638257685", "message": "[HUDI-1317] Fix initialization when Async jobs are scheduled.\n\nLogic is explained in the JIRA ticket.", "committedDate": "2020-10-20T18:22:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAzOTIxNA==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r511039214", "bodyText": "interfaces don't need to make methods public. Same for static fields. lets remove the qualifier?", "author": "vinothchandar", "createdAt": "2020-10-23T17:40:56Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java", "diffHunk": "@@ -18,87 +18,98 @@\n \n package org.apache.hudi.common.metrics;\n \n+import java.io.Serializable;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n+import org.apache.hudi.common.util.ReflectionUtils;\n+\n \n /**\n- * Lightweight Metrics Registry to track Hudi events.\n+ * Interface which defines a lightweight Metrics Registry to track Hudi events.\n  */\n-public class Registry {\n-  ConcurrentHashMap<String, Counter> counters = new ConcurrentHashMap<>();\n-  final String name;\n-\n-  private static ConcurrentHashMap<String, Registry> registryMap = new ConcurrentHashMap<>();\n+public interface Registry extends Serializable {\n+  static ConcurrentHashMap<String, Registry> REGISTRYMAP = new ConcurrentHashMap<>();\n \n-  private Registry(String name) {\n-    this.name = name;\n+  /**\n+   * Get (or create) the registry for a provided name.\n+   *\n+   * This function creates a {@code LocalRegistry}.\n+   *\n+   * @param registryName Name of the registry\n+   */\n+  public static Registry getRegistry(String registryName) {", "originalCommit": "f0e5957eb930e9450bed2fda90218fc638257685", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAzOTg1NA==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r511039854", "bodyText": "same for abstract", "author": "vinothchandar", "createdAt": "2020-10-23T17:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAzOTIxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAzOTQ3MA==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r511039470", "bodyText": "rename: REGISTRY_NAME", "author": "vinothchandar", "createdAt": "2020-10-23T17:41:28Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/metrics/Registry.java", "diffHunk": "@@ -18,87 +18,98 @@\n \n package org.apache.hudi.common.metrics;\n \n+import java.io.Serializable;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n+import org.apache.hudi.common.util.ReflectionUtils;\n+\n \n /**\n- * Lightweight Metrics Registry to track Hudi events.\n+ * Interface which defines a lightweight Metrics Registry to track Hudi events.\n  */\n-public class Registry {\n-  ConcurrentHashMap<String, Counter> counters = new ConcurrentHashMap<>();\n-  final String name;\n-\n-  private static ConcurrentHashMap<String, Registry> registryMap = new ConcurrentHashMap<>();\n+public interface Registry extends Serializable {\n+  static ConcurrentHashMap<String, Registry> REGISTRYMAP = new ConcurrentHashMap<>();", "originalCommit": "f0e5957eb930e9450bed2fda90218fc638257685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA0NjA1Mw==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r511046053", "bodyText": "Configuring this class at this layer feels adhoc. Can we do this inside HoodieWrapperFileSystem class or as a static block there?", "author": "vinothchandar", "createdAt": "2020-10-23T17:52:10Z", "path": "hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieClient.java", "diffHunk": "@@ -122,6 +124,26 @@ public HoodieWriteConfig getConfig() {\n   }\n \n   protected HoodieTableMetaClient createMetaClient(boolean loadActiveTimelineOnLoad) {\n+    if (config.isMetricsOn()) {\n+      Registry registry;\n+      Registry registryMeta;\n+\n+      if (config.isExecutorMetricsEnabled()) {\n+        // Create a distributed registry for HoodieWrapperFileSystem\n+        registry = Registry.getRegistry(HoodieWrapperFileSystem.class.getSimpleName(),\n+            DistributedRegistry.class.getName());\n+        ((DistributedRegistry)registry).register(jsc);\n+        registryMeta = Registry.getRegistry(HoodieWrapperFileSystem.class.getSimpleName() + \"MetaFolder\",\n+            DistributedRegistry.class.getName());\n+        ((DistributedRegistry)registryMeta).register(jsc);\n+      } else {\n+        registry = Registry.getRegistry(HoodieWrapperFileSystem.class.getSimpleName());\n+        registryMeta = Registry.getRegistry(HoodieWrapperFileSystem.class.getSimpleName() + \"MetaFolder\");\n+      }\n+\n+      HoodieWrapperFileSystem.setMetricsRegistry(registry, registryMeta);", "originalCommit": "f0e5957eb930e9450bed2fda90218fc638257685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA0ODM5MQ==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r511048391", "bodyText": "this is creating a new table, not fetching an existing member. Any reason we can't just use HoodieTable.create factory. It took me quite a bit of time to clean up usages last time around . :)", "author": "vinothchandar", "createdAt": "2020-10-23T17:56:17Z", "path": "hudi-client/src/main/java/org/apache/hudi/client/AbstractHoodieWriteClient.java", "diffHunk": "@@ -232,6 +232,11 @@ private HoodieTable getTableAndInitCtx(HoodieTableMetaClient metaClient, WriteOp\n     return table;\n   }\n \n+  protected HoodieTable<T> getTable() {", "originalCommit": "f0e5957eb930e9450bed2fda90218fc638257685", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA0ODc2MQ==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r511048761", "bodyText": "lets avoid this method please", "author": "vinothchandar", "createdAt": "2020-10-23T17:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA0ODM5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1MDM1Ng==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r511050356", "bodyText": "please name properties using the (mostly followed) convention of ending the property name with _PROP.\nMETADATA_ENABLE -> METADATA_ENABLE_PROP", "author": "vinothchandar", "createdAt": "2020-10-23T18:00:00Z", "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieMetadataConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.config;\n+\n+import org.apache.hudi.common.config.DefaultHoodieConfig;\n+import org.apache.hudi.config.HoodieCompactionConfig.Builder;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+/**\n+ * Configurations used by the HUDI Metadata Table.\n+ */\n+@Immutable\n+public class HoodieMetadataConfig extends DefaultHoodieConfig {\n+\n+  public static final String METADATA_PREFIX = \"hoodie.metadata\";\n+\n+  // Enable the internal Metadata Table which saves file listings\n+  public static final String METADATA_ENABLE = METADATA_PREFIX + \".enable\";", "originalCommit": "f0e5957eb930e9450bed2fda90218fc638257685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA1MTA1MQ==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r511051051", "bodyText": "FWIW I still prefer honoring all table/write configs for metadata. This file can then contain different defaults for eg. Redefining every param here again, is going to be cumbersome.", "author": "vinothchandar", "createdAt": "2020-10-23T18:01:20Z", "path": "hudi-client/src/main/java/org/apache/hudi/config/HoodieMetadataConfig.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.config;\n+\n+import org.apache.hudi.common.config.DefaultHoodieConfig;\n+import org.apache.hudi.config.HoodieCompactionConfig.Builder;\n+\n+import javax.annotation.concurrent.Immutable;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+/**\n+ * Configurations used by the HUDI Metadata Table.\n+ */\n+@Immutable\n+public class HoodieMetadataConfig extends DefaultHoodieConfig {\n+\n+  public static final String METADATA_PREFIX = \"hoodie.metadata\";\n+\n+  // Enable the internal Metadata Table which saves file listings\n+  public static final String METADATA_ENABLE = METADATA_PREFIX + \".enable\";\n+  public static final boolean DEFAULT_METADATA_ENABLE = false;\n+\n+  // Validate contents of Metadata Table on each access against the actual filesystem\n+  public static final String METADATA_VALIDATE = METADATA_PREFIX + \".validate\";\n+  public static final boolean DEFAULT_METADATA_VALIDATE = false;\n+\n+  // Parallelism for inserts\n+  public static final String INSERT_PARALLELISM = METADATA_PREFIX + \".insert.parallelism\";\n+  public static final int DEFAULT_INSERT_PARALLELISM = 1;\n+\n+  // Async clean\n+  public static final String ASYNC_CLEAN = METADATA_PREFIX + \".clean.async\";\n+  public static final boolean DEFAULT_ASYNC_CLEAN = false;\n+\n+  // Maximum delta commits before compaction occurs\n+  public static final String COMPACT_NUM_DELTA_COMMITS = METADATA_PREFIX + \".compact.max.delta.commits\";\n+  public static final int DEFAULT_COMPACT_NUM_DELTA_COMMITS = 24;\n+\n+  // Archival settings\n+  public static final String MIN_COMMITS_TO_KEEP = METADATA_PREFIX + \".keep.min.commits\";\n+  public static final int DEFAULT_MIN_COMMITS_TO_KEEP = 20;\n+  public static final String MAX_COMMITS_TO_KEEP = METADATA_PREFIX + \".keep.max.commits\";\n+  public static final int DEFAULT_MAX_COMMITS_TO_KEEP = 30;\n+\n+  // Cleaner commits retained\n+  public static final String CLEANER_COMMITS_RETAINED = METADATA_PREFIX + \".cleaner.commits.retained\";\n+  public static final int DEFAULT_CLEANER_COMMITS_RETAINED = 3;\n+\n+  private HoodieMetadataConfig(Properties props) {\n+    super(props);\n+  }\n+\n+  public static HoodieMetadataConfig.Builder newBuilder() {\n+    return new Builder();\n+  }\n+\n+  public static class Builder {\n+\n+    private final Properties props = new Properties();\n+\n+    public Builder fromFile(File propertiesFile) throws IOException {\n+      try (FileReader reader = new FileReader(propertiesFile)) {\n+        this.props.load(reader);\n+        return this;\n+      }\n+    }\n+\n+    public Builder fromProperties(Properties props) {\n+      this.props.putAll(props);\n+      return this;\n+    }\n+\n+    public Builder enable(boolean enable) {\n+      props.setProperty(METADATA_ENABLE, String.valueOf(enable));\n+      return this;\n+    }\n+\n+    public Builder validate(boolean validate) {\n+      props.setProperty(METADATA_VALIDATE, String.valueOf(validate));\n+      return this;\n+    }\n+\n+    public Builder withInsertParallelism(int parallelism) {\n+      props.setProperty(INSERT_PARALLELISM, String.valueOf(parallelism));\n+      return this;\n+    }\n+\n+    public Builder withAsyncClean(boolean asyncClean) {\n+      props.setProperty(ASYNC_CLEAN, String.valueOf(asyncClean));\n+      return this;\n+    }\n+\n+    public Builder withMaxNumDeltaCommitsBeforeCompaction(int maxNumDeltaCommitsBeforeCompaction) {\n+      props.setProperty(COMPACT_NUM_DELTA_COMMITS, String.valueOf(maxNumDeltaCommitsBeforeCompaction));\n+      return this;\n+    }\n+\n+    public Builder archiveCommitsWith(int minToKeep, int maxToKeep) {\n+      props.setProperty(MIN_COMMITS_TO_KEEP, String.valueOf(minToKeep));\n+      props.setProperty(MAX_COMMITS_TO_KEEP, String.valueOf(maxToKeep));\n+      return this;\n+    }\n+\n+    public Builder retainCommits(int commitsRetained) {\n+      props.setProperty(CLEANER_COMMITS_RETAINED, String.valueOf(commitsRetained));\n+      return this;\n+    }\n+\n+    public HoodieMetadataConfig build() {", "originalCommit": "f0e5957eb930e9450bed2fda90218fc638257685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyNzE2MA==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r512327160", "bodyText": "rename: create() per standard factory pattern conventions?", "author": "vinothchandar", "createdAt": "2020-10-26T23:22:52Z", "path": "hudi-client/src/main/java/org/apache/hudi/metadata/HoodieMetadataWriter.java", "diffHunk": "@@ -95,25 +102,26 @@\n   private static Map<String, HoodieMetadataWriter> instances = new HashMap<>();\n \n   public static HoodieMetadataWriter instance(Configuration conf, HoodieWriteConfig writeConfig) {", "originalCommit": "f0e5957eb930e9450bed2fda90218fc638257685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyNzQ3NA==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r512327474", "bodyText": "I am still not a fan of this caching. specifically, coz it creates extra complexity like this.", "author": "vinothchandar", "createdAt": "2020-10-26T23:23:51Z", "path": "hudi-client/src/main/java/org/apache/hudi/metadata/HoodieMetadataWriter.java", "diffHunk": "@@ -95,25 +102,26 @@\n   private static Map<String, HoodieMetadataWriter> instances = new HashMap<>();\n \n   public static HoodieMetadataWriter instance(Configuration conf, HoodieWriteConfig writeConfig) {\n-    try {\n-      return new HoodieMetadataWriter(conf, writeConfig);\n-    } catch (IOException e) {\n-      throw new HoodieMetadataException(\"Could not initialize HoodieMetadataWriter\", e);\n+    String key = writeConfig.getBasePath();\n+    if (instances.containsKey(key)) {", "originalCommit": "f0e5957eb930e9450bed2fda90218fc638257685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyNzcxMw==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r512327713", "bodyText": "combine into one if statement?", "author": "vinothchandar", "createdAt": "2020-10-26T23:24:34Z", "path": "hudi-client/src/main/java/org/apache/hudi/metadata/HoodieMetadataWriter.java", "diffHunk": "@@ -126,6 +134,14 @@ public static HoodieMetadataWriter instance(Configuration conf, HoodieWriteConfi\n       // Metadata Table cannot have its metadata optimized\n       ValidationUtils.checkArgument(this.config.shouldAutoCommit(), \"Auto commit is required for Metadata Table\");\n       ValidationUtils.checkArgument(!this.config.useFileListingMetadata(), \"File listing cannot be used for Metadata Table\");\n+\n+      if (config.isMetricsOn()) {\n+        if (config.isExecutorMetricsEnabled()) {", "originalCommit": "f0e5957eb930e9450bed2fda90218fc638257685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyODU1Mg==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r512328552", "bodyText": "stream.forEach()?", "author": "vinothchandar", "createdAt": "2020-10-26T23:27:10Z", "path": "hudi-client/src/main/java/org/apache/hudi/metadata/HoodieMetadataWriter.java", "diffHunk": "@@ -278,7 +305,16 @@ private void initFromFilesystem(JavaSparkContext jsc, HoodieTableMetaClient data\n     ValidationUtils.checkState(enabled, \"Metadata table cannot be initialized as it is not enabled\");\n \n     // If there is no commit on the dataset yet, use the SOLO_COMMIT_TIMESTAMP as the instant time for initial commit\n-    Option<HoodieInstant> latestInstant = datasetMetaClient.getActiveTimeline().filterCompletedInstants().lastInstant();\n+    // Otherwise, we use the timestamp of the instant which does not have any non-completed instants before it.\n+    Option<HoodieInstant> latestInstant = Option.empty();\n+    boolean foundNonComplete = false;\n+    for (HoodieInstant instant : datasetMetaClient.getActiveTimeline().getInstants().collect(Collectors.toList())) {", "originalCommit": "f0e5957eb930e9450bed2fda90218fc638257685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMyOTAwOQ==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r512329009", "bodyText": "this kind of randomization makes test non-deterministic. Please make this parameterized .", "author": "vinothchandar", "createdAt": "2020-10-26T23:28:49Z", "path": "hudi-client/src/test/java/org/apache/hudi/metadata/TestHoodieMetadata.java", "diffHunk": "@@ -457,14 +479,14 @@ public void testArchivingAndCompaction() throws Exception {\n     init(HoodieTableType.COPY_ON_WRITE);\n \n     final int maxDeltaCommitsBeforeCompaction = 6;\n+    // Test autoClean and asyncClean based on this flag which is randomly chosen.\n+    boolean asyncClean = new Random().nextBoolean();", "originalCommit": "f0e5957eb930e9450bed2fda90218fc638257685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMzMDAwNA==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r512330004", "bodyText": "lets use the HoodieTimer class here?", "author": "vinothchandar", "createdAt": "2020-10-26T23:31:45Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/HoodieWrapperFileSystem.java", "diffHunk": "@@ -65,15 +66,54 @@\n \n   public static final String HOODIE_SCHEME_PREFIX = \"hoodie-\";\n \n-  private enum MetricName {\n-    create, rename, delete, listStatus, mkdirs, getFileStatus, globStatus, listFiles\n+  protected enum MetricName {\n+    create, rename, delete, listStatus, mkdirs, getFileStatus, globStatus, listFiles, read, write\n   }\n \n   private ConcurrentMap<String, SizeAwareFSDataOutputStream> openStreams = new ConcurrentHashMap<>();\n   private FileSystem fileSystem;\n   private URI uri;\n   private ConsistencyGuard consistencyGuard = new NoOpConsistencyGuard();\n-  private Registry metricsRegistry = Registry.getRegistry(this.getClass().getSimpleName());\n+  private static Registry metricsRegistry;\n+  private static Registry metricsRegistryMetaFolder;\n+\n+  @FunctionalInterface\n+  public interface CheckedFunction<R> {\n+    R get() throws IOException;\n+  }\n+\n+  private static Registry getMetricRegistryForPath(Path p) {\n+    return ((p != null) && (p.toString().contains(HoodieTableMetaClient.METAFOLDER_NAME)))\n+        ? metricsRegistryMetaFolder : metricsRegistry;\n+  }\n+\n+  protected static <R> R executeFuncWithTimeMetrics(String metricName, Path p, CheckedFunction<R> func) throws IOException {\n+    long t1 = System.currentTimeMillis();", "originalCommit": "f0e5957eb930e9450bed2fda90218fc638257685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMzMDcyMg==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r512330722", "bodyText": "rename: is", "author": "vinothchandar", "createdAt": "2020-10-26T23:34:09Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/HoodieWrapperFileSystem.java", "diffHunk": "@@ -164,79 +205,99 @@ private FSDataOutputStream wrapOutputStream(final Path path, FSDataOutputStream\n     return os;\n   }\n \n+  private FSDataInputStream wrapInputStream(final Path path, FSDataInputStream fsDataInputStream) throws IOException {\n+    if (fsDataInputStream instanceof SizeAwareFSDataInputStream) {\n+      return fsDataInputStream;\n+    }\n+\n+    SizeAwareFSDataInputStream os = new SizeAwareFSDataInputStream(path, fsDataInputStream);", "originalCommit": "f0e5957eb930e9450bed2fda90218fc638257685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMzMTc5OA==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r512331798", "bodyText": "this is an input stream. fix the docs?", "author": "vinothchandar", "createdAt": "2020-10-26T23:37:38Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/SizeAwareFSDataInputStream.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.fs;\n+\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.ReadOption;\n+import org.apache.hadoop.io.ByteBufferPool;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.EnumSet;\n+\n+/**\n+ * Wrapper over <code>FSDataInputStream</code> to keep track of the size of the written bytes.", "originalCommit": "f0e5957eb930e9450bed2fda90218fc638257685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMzMjEwMg==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r512332102", "bodyText": "Please name this something like TimedFSDataInputStream. This is not tracking size at all", "author": "vinothchandar", "createdAt": "2020-10-26T23:38:48Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/fs/SizeAwareFSDataInputStream.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.fs;\n+\n+import org.apache.hadoop.fs.FSDataInputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.fs.ReadOption;\n+import org.apache.hadoop.io.ByteBufferPool;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.EnumSet;\n+\n+/**\n+ * Wrapper over <code>FSDataInputStream</code> to keep track of the size of the written bytes.\n+ */\n+public class SizeAwareFSDataInputStream extends FSDataInputStream {", "originalCommit": "f0e5957eb930e9450bed2fda90218fc638257685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMzMjMzMA==", "url": "https://github.com/apache/hudi/pull/2189#discussion_r512332330", "bodyText": "fix docs", "author": "vinothchandar", "createdAt": "2020-10-26T23:39:31Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/metrics/LocalRegistry.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hudi.common.metrics;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Lightweight Metrics Registry to track Hudi events.", "originalCommit": "f0e5957eb930e9450bed2fda90218fc638257685", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "92daecc982e02d7e2b9d5a6c0248a378d7567b4a", "url": "https://github.com/apache/hudi/commit/92daecc982e02d7e2b9d5a6c0248a378d7567b4a", "message": "[RFC-15] Fixing checkstyle errors.", "committedDate": "2020-10-27T22:56:01Z", "type": "commit"}, {"oid": "9fa8806df88bab393c879a07f60f099aef79d677", "url": "https://github.com/apache/hudi/commit/9fa8806df88bab393c879a07f60f099aef79d677", "message": "[HUDI-1305] Added an API to shutdown and remove the metrics reporter. (#2132)\n\nThis helps in removing reporter once the test has complete. Prevents log pollution from un-necessary metric logs.\r\n\r\n- Added an API to shutdown the metrics reporter after tests.", "committedDate": "2020-10-28T04:47:19Z", "type": "commit"}, {"oid": "b2765b171f56c642bba0d356eda1fb8ea2e71c19", "url": "https://github.com/apache/hudi/commit/b2765b171f56c642bba0d356eda1fb8ea2e71c19", "message": "[RFC-15] Fixing metrics printing to console which generates a lot of text.\n\nChanged to using memory metrics.", "committedDate": "2020-10-28T05:53:26Z", "type": "commit"}, {"oid": "3ea1b4ca96637761ab1588a71902f47f0278b0e6", "url": "https://github.com/apache/hudi/commit/3ea1b4ca96637761ab1588a71902f47f0278b0e6", "message": "[RFC-15] Fixing checkstyle errors.", "committedDate": "2020-10-28T06:44:16Z", "type": "commit"}, {"oid": "632a285b86ca369fa90748a8e35dc140a8c0fe81", "url": "https://github.com/apache/hudi/commit/632a285b86ca369fa90748a8e35dc140a8c0fe81", "message": "[RFC-15] Reverting change to AbstractHoodieLogRecordScanner as they lead to hung tests.", "committedDate": "2020-10-28T08:44:38Z", "type": "commit"}, {"oid": "b1b2abeda71d455a0dd326a64ab5cce8bf8ab93f", "url": "https://github.com/apache/hudi/commit/b1b2abeda71d455a0dd326a64ab5cce8bf8ab93f", "message": "[RFC-15] Fixing getFileSystemView() which requires getCompletedCommitsTimeline().", "committedDate": "2020-10-28T09:34:38Z", "type": "commit"}, {"oid": "2f615dedea5d842002bf7259b73a6f55eb7b5940", "url": "https://github.com/apache/hudi/commit/2f615dedea5d842002bf7259b73a6f55eb7b5940", "message": "[RFC-15] Fixing code review comments", "committedDate": "2020-10-30T01:46:31Z", "type": "forcePushed"}, {"oid": "1144e9995a731be44cc865e72090b24e827cf0fe", "url": "https://github.com/apache/hudi/commit/1144e9995a731be44cc865e72090b24e827cf0fe", "message": "[RFC-15] Fixing code review comments", "committedDate": "2020-10-30T03:40:25Z", "type": "commit"}, {"oid": "1144e9995a731be44cc865e72090b24e827cf0fe", "url": "https://github.com/apache/hudi/commit/1144e9995a731be44cc865e72090b24e827cf0fe", "message": "[RFC-15] Fixing code review comments", "committedDate": "2020-10-30T03:40:25Z", "type": "forcePushed"}]}