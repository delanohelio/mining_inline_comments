{"pr_number": 2177, "pr_title": "[HUDI-307] add test to check data type write and read consistent", "pr_createdAt": "2020-10-14T17:16:44Z", "pr_url": "https://github.com/apache/hudi/pull/2177", "timeline": [{"oid": "154554865a280bab1b769159df629405e64e9b0b", "url": "https://github.com/apache/hudi/commit/154554865a280bab1b769159df629405e64e9b0b", "message": "[HUDI-307] add test to check timestamp date decimal type write and read consistent", "committedDate": "2020-10-14T17:17:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NjE0Nw==", "url": "https://github.com/apache/hudi/pull/2177#discussion_r506276147", "bodyText": "here (38, 18) is decided by spark?", "author": "leesf", "createdAt": "2020-10-16T10:36:43Z", "path": "hudi-spark/src/test/scala/org/apache/hudi/functional/TestCOWDataSource.scala", "diffHunk": "@@ -194,4 +199,31 @@ class TestCOWDataSource extends HoodieClientTestBase {\n       .load(basePath)\n     assertEquals(hoodieIncViewDF2.count(), insert2NewKeyCnt)\n   }\n+\n+  @Test def testComplexDataTypeWriteAndReadConsistency(): Unit = {\n+    val records = Seq(ComplexDataTypeRecord(\"11\", \"Andy\", Timestamp.valueOf(\"1970-01-01 13:31:24\"), Date.valueOf(\"1991-11-07\"), BigDecimal.valueOf(1.0), 11, 1),\n+      ComplexDataTypeRecord(\"22\", \"lisi\", Timestamp.valueOf(\"1970-01-02 13:31:24\"), Date.valueOf(\"1991-11-08\"), BigDecimal.valueOf(2.0), 11, 1),\n+      ComplexDataTypeRecord(\"33\", \"zhangsan\", Timestamp.valueOf(\"1970-01-03 13:31:24\"), Date.valueOf(\"1991-11-09\"), BigDecimal.valueOf(3.0), 11, 1))\n+\n+    val rdd = jsc.parallelize(records)\n+    val  recordsDF = spark.createDataFrame(rdd)\n+    recordsDF.write.format(\"org.apache.hudi\")\n+      .options(commonOpts)\n+      .mode(SaveMode.Append)\n+      .save(basePath)\n+\n+    val recordsReadDF = spark.read.format(\"org.apache.hudi\")\n+      .load(basePath + \"/*/*\")\n+    recordsReadDF.schema.foreach(f => {\n+      f.name match {\n+        case \"timeStampValue\" =>\n+          assertEquals(f.dataType, org.apache.spark.sql.types.TimestampType)\n+        case \"dateValue\" =>\n+          assertEquals(f.dataType, org.apache.spark.sql.types.DateType)\n+        case \"bigDecimalValue\" =>\n+          assertEquals(f.dataType, org.apache.spark.sql.types.DecimalType(38, 18))", "originalCommit": "154554865a280bab1b769159df629405e64e9b0b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4NzU4NQ==", "url": "https://github.com/apache/hudi/pull/2177#discussion_r506287585", "bodyText": "yes,  spark will transform java  bigdecimal to SYSTEM_DEFAULT  decimal(38,18)", "author": "lw309637554", "createdAt": "2020-10-16T10:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NjE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk1NDcyMQ==", "url": "https://github.com/apache/hudi/pull/2177#discussion_r506954721", "bodyText": "@leesf  has set the schema use DataTypes.createDecimalType(15, 10) clearly.  This will be more clear", "author": "lw309637554", "createdAt": "2020-10-17T15:36:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NjE0Nw=="}], "type": "inlineReview"}, {"oid": "fc8793b4a00789bd34a2b7d70a2b38a778ce323a", "url": "https://github.com/apache/hudi/commit/fc8793b4a00789bd34a2b7d70a2b38a778ce323a", "message": "[HUDI-307] add test to check timestamp date decimal type write and read consistent", "committedDate": "2020-10-16T15:02:14Z", "type": "commit"}, {"oid": "fc8793b4a00789bd34a2b7d70a2b38a778ce323a", "url": "https://github.com/apache/hudi/commit/fc8793b4a00789bd34a2b7d70a2b38a778ce323a", "message": "[HUDI-307] add test to check timestamp date decimal type write and read consistent", "committedDate": "2020-10-16T15:02:14Z", "type": "forcePushed"}]}