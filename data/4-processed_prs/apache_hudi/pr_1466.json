{"pr_number": 1466, "pr_title": "[HUDI-742] Fix Java Math Exception", "pr_createdAt": "2020-03-30T01:10:00Z", "pr_url": "https://github.com/apache/hudi/pull/1466", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMTk1NA==", "url": "https://github.com/apache/hudi/pull/1466#discussion_r399921954", "bodyText": "IMO, 94 is unstable, the value depends on different hash methods. I think we can check the partition range, for example. WDYT?\n@Test\npublic void testGetPartitions() {\n  Map<String, Long> comparisons1 = new HashMap<String, Long>() {\n    {\n      IntStream.range(0, 100000).forEach(f -> put(\"f\" + f, 100L));\n    }\n  };\n  BucketizedBloomCheckPartitioner p = new BucketizedBloomCheckPartitioner(1000, comparisons1, 10);\n\n  IntStream.range(0, 100000).forEach(f -> {\n    int partition = p.getPartition(Pair.of(\"f\" + f, \"value\"));\n    assertTrue(\"partition is out of range: \" + partition, 0 <= partition && partition <= 1000);\n  });\n\n}", "author": "lamberken", "createdAt": "2020-03-30T04:33:28Z", "path": "hudi-client/src/test/java/org/apache/hudi/index/bloom/TestBucketizedBloomCheckPartitioner.java", "diffHunk": "@@ -79,4 +79,17 @@ public void testNumPartitions() {\n     BucketizedBloomCheckPartitioner p = new BucketizedBloomCheckPartitioner(10000, comparisons1, 10);\n     assertEquals(\"num partitions must equal total buckets\", 100, p.numPartitions());\n   }\n+\n+  @Test\n+  public void testGetPartitions() {\n+    Map<String, Long> comparisons1 = new HashMap<String, Long>() {\n+      {\n+        IntStream.range(0, 10).forEach(f -> put(\"f\" + f, 100L));\n+      }\n+    };\n+    BucketizedBloomCheckPartitioner p = new BucketizedBloomCheckPartitioner(10000, comparisons1, 10);\n+    Object key = Pair.of(\"f0\", \"value0\");\n+    assertEquals(\"candidatePartitions must be a posive number: \", 94, p.getPartition(key));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE4ODk1OA==", "url": "https://github.com/apache/hudi/pull/1466#discussion_r400188958", "bodyText": "Make sense. Updated.  Thanks @lamber-ken", "author": "EdwinGuo", "createdAt": "2020-03-30T13:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyMTk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzODU3Mg==", "url": "https://github.com/apache/hudi/pull/1466#discussion_r400238572", "bodyText": "is the cast to (int) necessary still before assigning to idx", "author": "vinothchandar", "createdAt": "2020-03-30T14:31:19Z", "path": "hudi-client/src/main/java/org/apache/hudi/index/bloom/BucketizedBloomCheckPartitioner.java", "diffHunk": "@@ -145,7 +145,7 @@ public int getPartition(Object key) {\n     final Pair<String, String> parts = (Pair<String, String>) key;\n     final long hashOfKey = NumericUtils.getMessageDigestHash(\"MD5\", parts.getRight());\n     final List<Integer> candidatePartitions = fileGroupToPartitions.get(parts.getLeft());\n-    final int idx = (int) Math.floorMod(hashOfKey, candidatePartitions.size());\n+    final int idx = (int) Math.floorMod((int) hashOfKey, candidatePartitions.size());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2MDYyOQ==", "url": "https://github.com/apache/hudi/pull/1466#discussion_r400260629", "bodyText": "Hey @vinothchandar  If you take a look at the original discussion #1455, there are different interface in java8 and other versions of java. The consolidate that difference, cast both to int or long will make less room for runtime error.", "author": "EdwinGuo", "createdAt": "2020-03-30T14:59:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzODU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4NDk0Nw==", "url": "https://github.com/apache/hudi/pull/1466#discussion_r400584947", "bodyText": "nit: partition is within of range -> partition is out of range ?", "author": "leesf", "createdAt": "2020-03-31T01:10:48Z", "path": "hudi-client/src/test/java/org/apache/hudi/index/bloom/TestBucketizedBloomCheckPartitioner.java", "diffHunk": "@@ -79,4 +80,20 @@ public void testNumPartitions() {\n     BucketizedBloomCheckPartitioner p = new BucketizedBloomCheckPartitioner(10000, comparisons1, 10);\n     assertEquals(\"num partitions must equal total buckets\", 100, p.numPartitions());\n   }\n+\n+  @Test\n+  public void testGetPartitions() {\n+    Map<String, Long> comparisons1 = new HashMap<String, Long>() {\n+      {\n+        IntStream.range(0, 100000).forEach(f -> put(\"f\" + f, 100L));\n+      }\n+    };\n+    BucketizedBloomCheckPartitioner p = new BucketizedBloomCheckPartitioner(1000, comparisons1, 10);\n+\n+    IntStream.range(0, 100000).forEach(f -> {\n+      int partition = p.getPartition(Pair.of(\"f\" + f, \"value\"));\n+      assertTrue(\"partition is within of range: \" + partition, 0 <= partition && partition <= 1000);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5ODc5MQ==", "url": "https://github.com/apache/hudi/pull/1466#discussion_r400598791", "bodyText": "updated. Thanks", "author": "EdwinGuo", "createdAt": "2020-03-31T02:01:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4NDk0Nw=="}], "type": "inlineReview"}, {"oid": "d69cf84049359d67ad00c6726231c73990eaae41", "url": "https://github.com/apache/hudi/commit/d69cf84049359d67ad00c6726231c73990eaae41", "message": "[HUDI-742] Fix Java Math Exception\n\n[HUDI-742] Update comments.", "committedDate": "2020-03-31T01:54:35Z", "type": "commit"}]}