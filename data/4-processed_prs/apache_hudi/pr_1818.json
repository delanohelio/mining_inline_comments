{"pr_number": 1818, "pr_title": "[HUDI-994] Split TestHBaseIndex to unit tests ", "pr_createdAt": "2020-07-11T04:32:26Z", "pr_url": "https://github.com/apache/hudi/pull/1818", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1NDE3Nw==", "url": "https://github.com/apache/hudi/pull/1818#discussion_r453154177", "bodyText": "moved to a separate unit test class", "author": "xushiyan", "createdAt": "2020-07-11T04:33:23Z", "path": "hudi-client/src/test/java/org/apache/hudi/index/hbase/TestHBaseIndex.java", "diffHunk": "@@ -313,53 +303,17 @@ public void testTotalPutsBatching() throws Exception {\n     // Get all the files generated\n     int numberOfDataFileIds = (int) writeStatues.map(status -> status.getFileId()).distinct().count();\n \n-    index.updateLocation(writeStatues, jsc, hoodieTable);\n+    index.updateLocation(writeStatues, jsc(), hoodieTable);\n     // 3 batches should be executed given batchSize = 100 and <=numberOfDataFileIds getting updated,\n     // so each fileId ideally gets updates\n     verify(table, atMost(numberOfDataFileIds)).put((List<Put>) any());\n   }\n \n-  @Test\n-  public void testPutBatchSizeCalculation() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1NDIwMw==", "url": "https://github.com/apache/hudi/pull/1818#discussion_r453154203", "bodyText": "duplicate test case in org.apache.hudi.index.hbase.TestHBaseQPSResourceAllocator", "author": "xushiyan", "createdAt": "2020-07-11T04:33:50Z", "path": "hudi-client/src/test/java/org/apache/hudi/index/hbase/TestHBaseIndex.java", "diffHunk": "@@ -383,22 +337,12 @@ public void testsHBasePutAccessParallelismWithNoInserts() {\n     assertEquals(0, hbaseNumPuts);\n   }\n \n-  @Test\n-  public void testsHBaseIndexDefaultQPSResourceAllocator() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1NDIyMw==", "url": "https://github.com/apache/hudi/pull/1818#discussion_r453154223", "bodyText": "moved to a separate unit test class", "author": "xushiyan", "createdAt": "2020-07-11T04:34:08Z", "path": "hudi-client/src/test/java/org/apache/hudi/index/hbase/TestHBaseIndex.java", "diffHunk": "@@ -460,47 +404,34 @@ public void testDelete() throws Exception {\n       // Now tagLocation for these records, hbaseIndex should tag them correctly\n       metaClient = HoodieTableMetaClient.reload(metaClient);\n       hoodieTable = HoodieTable.create(metaClient, config, hadoopConf);\n-      javaRDD = index.tagLocation(writeRecords, jsc, hoodieTable);\n-      assertEquals(10, javaRDD.filter(record -> record.isCurrentLocationKnown()).collect().size());\n-      assertEquals(10, javaRDD.map(record -> record.getKey().getRecordKey()).distinct().count());\n-      assertEquals(10, javaRDD.filter(record -> (record.getCurrentLocation() != null\n+      List<HoodieRecord> records2 = index.tagLocation(writeRecords, jsc(), hoodieTable).collect();\n+      assertEquals(numRecords, records2.stream().filter(record -> record.isCurrentLocationKnown()).count());\n+      assertEquals(numRecords, records2.stream().map(record -> record.getKey().getRecordKey()).distinct().count());\n+      assertEquals(numRecords, records2.stream().filter(record -> (record.getCurrentLocation() != null\n           && record.getCurrentLocation().getInstantTime().equals(newCommitTime))).distinct().count());\n \n       // Delete all records. This has to be done directly as deleting index entries\n       // is not implemented via HoodieWriteClient\n-      Option recordMetadata = Option.empty();\n       JavaRDD<WriteStatus> deleteWriteStatues = writeStatues.map(w -> {\n         WriteStatus newWriteStatus = new WriteStatus(true, 1.0);\n-        w.getWrittenRecords().forEach(r -> newWriteStatus.markSuccess(new HoodieRecord(r.getKey(), null), recordMetadata));\n+        w.getWrittenRecords().forEach(r -> newWriteStatus.markSuccess(new HoodieRecord(r.getKey(), null), Option.empty()));\n         assertEquals(w.getTotalRecords(), newWriteStatus.getTotalRecords());\n         newWriteStatus.setStat(new HoodieWriteStat());\n         return newWriteStatus;\n       });\n-      JavaRDD<WriteStatus> deleteStatus = index.updateLocation(deleteWriteStatues, jsc, hoodieTable);\n+      JavaRDD<WriteStatus> deleteStatus = index.updateLocation(deleteWriteStatues, jsc(), hoodieTable);\n       assertEquals(deleteStatus.count(), deleteWriteStatues.count());\n       assertNoWriteErrors(deleteStatus.collect());\n \n       // Ensure no records can be tagged\n-      javaRDD = index.tagLocation(writeRecords, jsc, hoodieTable);\n-      assertEquals(0, javaRDD.filter(record -> record.isCurrentLocationKnown()).collect().size());\n-      assertEquals(10, javaRDD.map(record -> record.getKey().getRecordKey()).distinct().count());\n-      assertEquals(0, javaRDD.filter(record -> (record.getCurrentLocation() != null\n+      List<HoodieRecord> records3 = index.tagLocation(writeRecords, jsc(), hoodieTable).collect();\n+      assertEquals(0, records3.stream().filter(record -> record.isCurrentLocationKnown()).count());\n+      assertEquals(numRecords, records3.stream().map(record -> record.getKey().getRecordKey()).distinct().count());\n+      assertEquals(0, records3.stream().filter(record -> (record.getCurrentLocation() != null\n           && record.getCurrentLocation().getInstantTime().equals(newCommitTime))).distinct().count());\n     }\n   }\n \n-  @Test\n-  public void testFeatureSupport() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5MTE4Nw==", "url": "https://github.com/apache/hudi/pull/1818#discussion_r453391187", "bodyText": "its not very clear what a sub path stands for? rename to make it clearer?", "author": "vinothchandar", "createdAt": "2020-07-13T01:24:57Z", "path": "hudi-client/src/test/java/org/apache/hudi/testutils/providers/DFSProvider.java", "diffHunk": "@@ -31,4 +33,6 @@\n \n   Path dfsBasePath();\n \n+  Path dfsSubPath() throws IOException;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4MDcwNg==", "url": "https://github.com/apache/hudi/pull/1818#discussion_r453480706", "bodyText": "ok remove this api.. not used at the moment.", "author": "xushiyan", "createdAt": "2020-07-13T08:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5MTE4Nw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "6352eef7a8691e67e34635e204969dcdb82dbbba", "url": "https://github.com/apache/hudi/commit/6352eef7a8691e67e34635e204969dcdb82dbbba", "message": "[HUDI-994] Split TestHBaseIndex to unit tests\n\n- Refactor and improve TestHBaseIndex for performance\n- Move HBaseIndex unit tests to different test classes", "committedDate": "2020-07-13T23:52:09Z", "type": "commit"}, {"oid": "6352eef7a8691e67e34635e204969dcdb82dbbba", "url": "https://github.com/apache/hudi/commit/6352eef7a8691e67e34635e204969dcdb82dbbba", "message": "[HUDI-994] Split TestHBaseIndex to unit tests\n\n- Refactor and improve TestHBaseIndex for performance\n- Move HBaseIndex unit tests to different test classes", "committedDate": "2020-07-13T23:52:09Z", "type": "forcePushed"}, {"oid": "907ddc2014462b2bb3f1416c10266939a2a8c0d0", "url": "https://github.com/apache/hudi/commit/907ddc2014462b2bb3f1416c10266939a2a8c0d0", "message": "Trigger", "committedDate": "2020-07-14T02:02:37Z", "type": "commit"}]}