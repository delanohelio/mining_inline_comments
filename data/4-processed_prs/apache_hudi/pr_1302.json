{"pr_number": 1302, "pr_title": "[HUDI-595] code cleanup, refactoring code out of PR# 1159", "pr_createdAt": "2020-02-03T06:04:52Z", "pr_url": "https://github.com/apache/hudi/pull/1302", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyNjkxNA==", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374126914", "bodyText": "This line is too long, can we move something to the new line?", "author": "yanghua", "createdAt": "2020-02-03T14:19:42Z", "path": "hudi-client/src/test/java/org/apache/hudi/TestCleaner.java", "diffHunk": "@@ -1079,19 +1081,17 @@ private void testPendingCompactions(HoodieWriteConfig config, int expNumFilesDel\n     });\n \n     // Test for progress (Did we clean some files ?)\n-    long numFilesUnderCompactionDeleted = hoodieCleanStats.stream().flatMap(cleanStat -> {\n-      return convertPathToFileIdWithCommitTime(newMetaClient, cleanStat.getDeletePathPatterns())\n-          .map(fileIdWithCommitTime -> {\n-            if (expFileIdToPendingCompaction.containsKey(fileIdWithCommitTime.getKey())) {\n-              Assert.assertTrue(\"Deleted instant time must be less than pending compaction\",\n-                  HoodieTimeline.compareTimestamps(\n-                      fileIdToLatestInstantBeforeCompaction.get(fileIdWithCommitTime.getKey()),\n-                      fileIdWithCommitTime.getValue(), HoodieTimeline.GREATER));\n-              return true;\n-            }\n-            return false;\n-          });\n-    }).filter(x -> x).count();\n+    long numFilesUnderCompactionDeleted = hoodieCleanStats.stream().flatMap(cleanStat -> convertPathToFileIdWithCommitTime(newMetaClient, cleanStat.getDeletePathPatterns())", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMDM2NQ==", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374130365", "bodyText": "Shall we need to add Type here or just \"Unknown key\"?", "author": "yanghua", "createdAt": "2020-02-03T14:25:46Z", "path": "hudi-client/src/test/java/org/apache/hudi/index/bloom/TestHoodieGlobalBloomIndex.java", "diffHunk": "@@ -265,21 +265,29 @@ public void testTagLocation() throws Exception {\n     JavaRDD<HoodieRecord> taggedRecordRDD = index.tagLocation(recordRDD, jsc, table);\n \n     for (HoodieRecord record : taggedRecordRDD.collect()) {\n-      if (record.getRecordKey().equals(\"000\")) {\n-        assertTrue(record.getCurrentLocation().getFileId().equals(FSUtils.getFileId(filename0)));\n-        assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange1.getJsonData());\n-      } else if (record.getRecordKey().equals(\"001\")) {\n-        assertTrue(record.getCurrentLocation().getFileId().equals(FSUtils.getFileId(filename2)));\n-        assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange2.getJsonData());\n-      } else if (record.getRecordKey().equals(\"002\")) {\n-        assertTrue(!record.isCurrentLocationKnown());\n-        assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange3.getJsonData());\n-      } else if (record.getRecordKey().equals(\"003\")) {\n-        assertTrue(record.getCurrentLocation().getFileId().equals(FSUtils.getFileId(filename3)));\n-        assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange5.getJsonData());\n-      } else if (record.getRecordKey().equals(\"004\")) {\n-        assertTrue(record.getCurrentLocation().getFileId().equals(FSUtils.getFileId(filename3)));\n-        assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange4.getJsonData());\n+      switch (record.getRecordKey()) {\n+        case \"000\":\n+          assertEquals(record.getCurrentLocation().getFileId(), FSUtils.getFileId(filename0));\n+          assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange1.getJsonData());\n+          break;\n+        case \"001\":\n+          assertEquals(record.getCurrentLocation().getFileId(), FSUtils.getFileId(filename2));\n+          assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange2.getJsonData());\n+          break;\n+        case \"002\":\n+          assertFalse(record.isCurrentLocationKnown());\n+          assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange3.getJsonData());\n+          break;\n+        case \"003\":\n+          assertEquals(record.getCurrentLocation().getFileId(), FSUtils.getFileId(filename3));\n+          assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange5.getJsonData());\n+          break;\n+        case \"004\":\n+          assertEquals(record.getCurrentLocation().getFileId(), FSUtils.getFileId(filename3));\n+          assertEquals(((TestRawTripPayload) record.getData()).getJsonData(), rowChange4.getJsonData());\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Unknown Key Type :\" + record.getRecordKey());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMzU3MA==", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374133570", "bodyText": "Can we move @Override close to the method so that we do not need to change this /**. WDYT?", "author": "yanghua", "createdAt": "2020-02-03T14:31:26Z", "path": "hudi-common/src/main/java/org/apache/hudi/common/table/log/HoodieLogFileReader.java", "diffHunk": "@@ -279,7 +277,7 @@ public void close() throws IOException {\n   }\n \n   @Override\n-  /**", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI0MDYzMw==", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374240633", "bodyText": "done", "author": "smarthi", "createdAt": "2020-02-03T17:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzMzU3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNzQ2Nw==", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374137467", "bodyText": "If it's only a single-line comment, we can use //. WDYT?", "author": "yanghua", "createdAt": "2020-02-03T14:38:21Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java", "diffHunk": "@@ -322,7 +322,7 @@ protected void testViewForFileSlicesWithAsyncCompaction(boolean skipCreatingData\n       assertEquals(\"Expect only valid data-file\", dataFileName, dataFiles.get(0).getFileName());\n     }\n \n-    /** Merge API Tests **/\n+    /* Merge API Tests **/", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNzYwMQ==", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374137601", "bodyText": "ditto", "author": "yanghua", "createdAt": "2020-02-03T14:38:38Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java", "diffHunk": "@@ -355,7 +355,7 @@ protected void testViewForFileSlicesWithAsyncCompaction(boolean skipCreatingData\n     assertEquals(\"Log File Order check\", fileName4, logFiles.get(0).getFileName());\n     assertEquals(\"Log File Order check\", fileName3, logFiles.get(1).getFileName());\n \n-    /** Data Files API tests */\n+    /* Data Files API tests */", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzNzcyOA==", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374137728", "bodyText": "ditto", "author": "yanghua", "createdAt": "2020-02-03T14:38:50Z", "path": "hudi-common/src/test/java/org/apache/hudi/common/table/view/TestHoodieTableFileSystemView.java", "diffHunk": "@@ -507,7 +507,7 @@ protected void testViewForFileSlicesWithAsyncCompaction(boolean skipCreatingData\n     assertEquals(\"Log File Order check\", fileName4, logFiles.get(0).getFileName());\n     assertEquals(\"Log File Order check\", fileName3, logFiles.get(1).getFileName());\n \n-    /** Data Files API tests */\n+    /* Data Files API tests */", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzODU5Ng==", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374138596", "bodyText": "ditto", "author": "yanghua", "createdAt": "2020-02-03T14:40:25Z", "path": "hudi-hadoop-mr/src/main/java/org/apache/hudi/hadoop/hive/HoodieCombineHiveInputFormat.java", "diffHunk": "@@ -353,9 +352,9 @@ public int hashCode() {\n     init(job);\n     Map<Path, ArrayList<String>> pathToAliases = mrwork.getPathToAliases();\n     Map<String, Operator<? extends OperatorDesc>> aliasToWork = mrwork.getAliasToWork();\n-    /** MOD - Initialize a custom combine input format shim that will call listStatus on the custom inputFormat **/\n+    /* MOD - Initialize a custom combine input format shim that will call listStatus on the custom inputFormat **/", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "f6e60c853e5e3859af82076443e5c54a3b27e8d1", "url": "https://github.com/apache/hudi/commit/f6e60c853e5e3859af82076443e5c54a3b27e8d1", "message": "[HUDI-595] code cleanup, refactoring code out of PR# 1159", "committedDate": "2020-02-04T07:46:36Z", "type": "commit"}, {"oid": "f6e60c853e5e3859af82076443e5c54a3b27e8d1", "url": "https://github.com/apache/hudi/commit/f6e60c853e5e3859af82076443e5c54a3b27e8d1", "message": "[HUDI-595] code cleanup, refactoring code out of PR# 1159", "committedDate": "2020-02-04T07:46:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3NzA5MQ==", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374677091", "bodyText": "any reason to remove the assert?", "author": "leesf", "createdAt": "2020-02-04T13:45:10Z", "path": "hudi-hadoop-mr/src/test/java/org/apache/hudi/hadoop/realtime/TestHoodieRealtimeRecordReader.java", "diffHunk": "@@ -491,7 +491,6 @@ public void testSchemaEvolutionAndRollbackBlockInLastLogFile() throws Exception\n     writer = writeRollbackBlockToLogFile(partitionDir, schema, \"fileid0\", commitTime, newCommitTime, \"101\", 1);\n     logFilePaths.add(writer.getLogFile().getPath().toString());\n     writer.close();\n-    assertTrue(\"block - size should be > 0\", size > 0);", "originalCommit": "f6e60c853e5e3859af82076443e5c54a3b27e8d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3ODQyNQ==", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374678425", "bodyText": "Intellij IDEA shows that the size is always larger than 0, so the assertion is always true.", "author": "yanghua", "createdAt": "2020-02-04T13:47:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3NzA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY4MDA1Nw==", "url": "https://github.com/apache/hudi/pull/1302#discussion_r374680057", "bodyText": "okay, got it.", "author": "leesf", "createdAt": "2020-02-04T13:50:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3NzA5MQ=="}], "type": "inlineReview"}]}