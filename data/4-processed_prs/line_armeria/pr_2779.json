{"pr_number": 2779, "pr_title": "Provide type parameter information to `RequestConverterFunction`", "pr_createdAt": "2020-06-05T10:34:12Z", "pr_url": "https://github.com/line/armeria/pull/2779", "timeline": [{"oid": "eadc23a4fe67328643fa4448a36d7211f8e56884", "url": "https://github.com/line/armeria/commit/eadc23a4fe67328643fa4448a36d7211f8e56884", "message": "Provide type parameter information to `RequestConverterFunction`\n\nMotivation:\n\nSome generic converters such as `JacksonRequestConverterFunction` need\nto get the complete type parameter information from annotated service\nmethods, so that the type of elements of a container type is known.\n\nFor example, let's say a user posts a JSON array:\n\n    [1, 2, 3]\n\nto an annotated service method:\n\n    @Post(\"/post\")\n    public String post(List<Long> values) {\n        return Joiner.on(\", \").join(values);\n    }\n\nWithout proper type parameter information, `JacksonRequestConverterFunction`\ncannot convert the elements into `Long`.\n\nModifications:\n\n- (Breaking) Changed the signature of `RequestConverterFunction.convertRequest()`\n  so that a converter is given with `ParameterizedType`.\n- Made sure `ParameterizedType` is passed to the request converter when\n  necessary.\n- Micellaneous:\n  - A value can now be converted to `AsciiString`, `CharSequence` or `Object`.\n  - `JacksonRequestConverterFunction` now knows how to convert to\n    `TreeNode` and `JsonNode`.\n\nResult:\n\n- Closes #2769\n- `JacksonRequestConverterFunction` now considers type parameters during\n  conversion.\n- A user can write more complex request object converter.\n- Can inject `CharSequence`, `AsciiString` and `Object` now.", "committedDate": "2020-06-05T10:33:20Z", "type": "commit"}, {"oid": "a342304676b3f25154552e187ed84baaccb833f1", "url": "https://github.com/line/armeria/commit/a342304676b3f25154552e187ed84baaccb833f1", "message": "Javadoc", "committedDate": "2020-06-05T10:37:09Z", "type": "commit"}, {"oid": "f6d68db588d2f99a4926e8c537ac65098c44ae52", "url": "https://github.com/line/armeria/commit/f6d68db588d2f99a4926e8c537ac65098c44ae52", "message": "Checkstyle", "committedDate": "2020-06-05T10:38:39Z", "type": "commit"}, {"oid": "ea0295e7602fd03e85135e713d3fd7dd6807474a", "url": "https://github.com/line/armeria/commit/ea0295e7602fd03e85135e713d3fd7dd6807474a", "message": "Remove `supportOptional`, because `Optional` is now always supported", "committedDate": "2020-06-05T10:48:36Z", "type": "commit"}, {"oid": "296719ba8ccb08ca3587447dc43a1b668388aac5", "url": "https://github.com/line/armeria/commit/296719ba8ccb08ca3587447dc43a1b668388aac5", "message": "Fix a bug where an exception is raised when a converter returns null", "committedDate": "2020-06-05T11:01:51Z", "type": "commit"}, {"oid": "c60c19739849cf8e51d99c94690620648c7d7730", "url": "https://github.com/line/armeria/commit/c60c19739849cf8e51d99c94690620648c7d7730", "message": "Merge branch 'master' into fix_number_element_type", "committedDate": "2020-06-05T11:23:55Z", "type": "commit"}, {"oid": "c0fc076e1a33da3379a636f282aa8848213196e5", "url": "https://github.com/line/armeria/commit/c0fc076e1a33da3379a636f282aa8848213196e5", "message": "Merge branch 'master' into fix_number_element_type", "committedDate": "2020-06-05T11:53:20Z", "type": "commit"}, {"oid": "a8447677aac53c16d288531ee18df1d246f7f996", "url": "https://github.com/line/armeria/commit/a8447677aac53c16d288531ee18df1d246f7f996", "message": "Fixed a test failure", "committedDate": "2020-06-05T13:24:05Z", "type": "commit"}, {"oid": "4133f3a9b63eabd6f2e5cbb2b68d7862d275da04", "url": "https://github.com/line/armeria/commit/4133f3a9b63eabd6f2e5cbb2b68d7862d275da04", "message": "Checkstyle", "committedDate": "2020-06-05T14:09:01Z", "type": "commit"}, {"oid": "6010bb591f567e0d7d617ec9af8a73c462385d2d", "url": "https://github.com/line/armeria/commit/6010bb591f567e0d7d617ec9af8a73c462385d2d", "message": "Merge branch 'master' into fix_number_element_type", "committedDate": "2020-06-05T14:09:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0NzgyMA==", "url": "https://github.com/line/armeria/pull/2779#discussion_r436447820", "bodyText": "I'm wondering if we need to warn when @Nullable is specified as well.", "author": "minwoox", "createdAt": "2020-06-08T04:06:45Z", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1013,7 +966,7 @@ private AnnotatedValueResolver build() {\n             if (aDefault != null) {\n                 if (supportDefault) {\n                     // Warn unusual usage. e.g. @Param @Default(\"a\") Optional<String> param\n-                    if (shouldWrapValueAsOptional) {\n+                    if (isOptional) {", "originalCommit": "6010bb591f567e0d7d617ec9af8a73c462385d2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MDMyNQ==", "url": "https://github.com/line/armeria/pull/2779#discussion_r436450325", "bodyText": "Can we support Map, GenericArrayType and arrays as we do in the DocService? \ud83e\udd14\nSupporting Map is maybe too much because we have to use varagrs for expectedParameterizedResultType though. \ud83e\udd14", "author": "minwoox", "createdAt": "2020-06-08T04:20:55Z", "path": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java", "diffHunk": "@@ -1094,16 +1039,116 @@ private AnnotatedValueResolver build() {\n                 // - QueryParams (or HttpParameters)\n                 // - User classes which can be converted by request converter\n                 //\n-                // So the container type should be 'null'.\n-                //\n-                types = new SimpleImmutableEntry<>(null, (Class<?>) type);\n+                if (unwrappedParameterizedType instanceof Class) {\n+                    elementType = (Class<?>) unwrappedParameterizedType;\n+                    parameterizedElementType = null;\n+                } else if (unwrappedParameterizedType instanceof ParameterizedType) {\n+                    parameterizedElementType = (ParameterizedType) unwrappedParameterizedType;\n+                    elementType = (Class<?>) parameterizedElementType.getRawType();\n+                } else {\n+                    throw new IllegalArgumentException(\"Unsupported parameter type: \" +\n+                                                       unwrappedParameterizedType.getTypeName());\n+                }\n             }\n \n             return new AnnotatedValueResolver(annotationType, httpElementName, pathVariable, shouldExist,\n-                                              shouldWrapValueAsOptional, types.getKey(), types.getValue(),\n-                                              defaultValue, description, resolver,\n+                                              isOptional, containerType, elementType,\n+                                              parameterizedElementType, defaultValue, description, resolver,\n                                               beanFactoryId, aggregation);\n         }\n+\n+        @Nullable\n+        private Class<?> getContainerType(Type parameterizedType) {\n+            final Class<?> rawType = toRawType(parameterizedType);\n+            if (pathVariable) {\n+                if (Iterable.class.isAssignableFrom(rawType)) {\n+                    throw new IllegalArgumentException(\n+                            \"Container type is not supported for a path variable: \" + httpElementName +\n+                            \" (\" + parameterizedType + ')');\n+                }\n+            }\n+\n+            if (!supportContainer) {\n+                return null;\n+            }\n+\n+            if (rawType == Iterable.class ||\n+                rawType == List.class ||\n+                rawType == Collection.class) {\n+                return ArrayList.class;\n+            }\n+\n+            if (rawType == Set.class) {", "originalCommit": "6010bb591f567e0d7d617ec9af8a73c462385d2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ3MTg4Ng==", "url": "https://github.com/line/armeria/pull/2779#discussion_r436471886", "bodyText": "Not sure about Map, but I think it's a good idea to support arrays. Maybe later in another PR? \ud83d\ude01", "author": "trustin", "createdAt": "2020-06-08T06:00:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MDMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwMzIzNQ==", "url": "https://github.com/line/armeria/pull/2779#discussion_r437203235", "bodyText": "#2790", "author": "trustin", "createdAt": "2020-06-09T07:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MDMyNQ=="}], "type": "inlineReview"}, {"oid": "a722599f54419adfebf53d6b0b014f28396255c3", "url": "https://github.com/line/armeria/commit/a722599f54419adfebf53d6b0b014f28396255c3", "message": "Merge branch 'master' into fix_number_element_type", "committedDate": "2020-06-08T07:37:41Z", "type": "commit"}, {"oid": "c08aac908c8253364229e1153f4ec9d474feed53", "url": "https://github.com/line/armeria/commit/c08aac908c8253364229e1153f4ec9d474feed53", "message": "Clean up / add warning messages", "committedDate": "2020-06-08T08:47:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5MzIxNA==", "url": "https://github.com/line/armeria/pull/2779#discussion_r436593214", "bodyText": "Question: What is the expected behavior if String nullable is not annotated by @Nullable?\nnull value is injected into nullable.", "author": "ikhoon", "createdAt": "2020-06-08T10:16:24Z", "path": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceRequestConverterTest.java", "diffHunk": "@@ -100,14 +101,19 @@ public String convert2(RequestJsonObj1 obj1) {\n         }\n \n         @Post(\"/convert3\")\n-        public String convert3(@RequestConverter(TestRequestConverterOptional1.class)\n-                                       Optional<RequestJsonObj1> obj1,\n-                               @RequestConverter(TestRequestConverterOptional2.class)\n-                                       Optional<RequestJsonObj2> obj2) {\n+        public String convert3(@RequestConverter(TestRequestConverter1.class) Optional<RequestJsonObj1> obj1,\n+                               @RequestConverter(TestRequestConverter2.class) Optional<RequestJsonObj2> obj2) {\n             assertThat(obj1.isPresent()).isTrue();\n             assertThat(obj2.isPresent()).isTrue();\n             return obj2.get().strVal();\n         }\n+\n+        @Post(\"/convert4\")\n+        @RequestConverter(NullReturningConverter.class)\n+        public void convert4(Optional<String> optional, @Nullable String nullable) {", "originalCommit": "c08aac908c8253364229e1153f4ec9d474feed53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5NTM1Nw==", "url": "https://github.com/line/armeria/pull/2779#discussion_r436595357", "bodyText": "By the way, NullReturningConverter returns null. It looks like a correct test.", "author": "ikhoon", "createdAt": "2020-06-08T10:20:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5MzIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYwNjAyOA==", "url": "https://github.com/line/armeria/pull/2779#discussion_r440606028", "bodyText": "I added another method with non-null parameter which is expected to fail with a 400 Bad Request error.", "author": "trustin", "createdAt": "2020-06-16T06:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU5MzIxNA=="}], "type": "inlineReview"}, {"oid": "c2745532f01cf369305df22a2c6271fc9e1ac39a", "url": "https://github.com/line/armeria/commit/c2745532f01cf369305df22a2c6271fc9e1ac39a", "message": "Merge branch 'master' into fix_number_element_type", "committedDate": "2020-06-16T05:25:09Z", "type": "commit"}, {"oid": "82fc7da616f9e704a6ffe0b675feb20136950617", "url": "https://github.com/line/armeria/commit/82fc7da616f9e704a6ffe0b675feb20136950617", "message": "Fail with 400 when injecting null into a non-null target", "committedDate": "2020-06-16T05:52:04Z", "type": "commit"}]}