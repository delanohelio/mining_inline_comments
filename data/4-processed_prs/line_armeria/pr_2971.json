{"pr_number": 2971, "pr_title": "Add `GrpcMeterIdPrefixFunction`", "pr_createdAt": "2020-08-06T07:15:06Z", "pr_url": "https://github.com/line/armeria/pull/2971", "timeline": [{"oid": "4f9b4ee37cc05a22164aec89692c2569917e8f88", "url": "https://github.com/line/armeria/commit/4f9b4ee37cc05a22164aec89692c2569917e8f88", "message": "Add `GrpcMeterIdPrefixFunction`\nMotivation:\nIt'd be nice to have a dedicated `MeterIdPrefixFunction` implementation for gRPC,\nso that the tag for grpc-status is added automatically.\n\nModifications:\n- Add `GrpcMeterIdPrefixFunction`.\n- Insert `GrpcWebTrailersExtrator` before `HttpClientDelegate` when the gRPC-web client is created.\n- Remove `GrpcWebUtil.parseTrailers()` which was used to extract web trailers from RetringClient.\n  - Could use `GrpcWebUtil.trailers(ctx)` to get gRPC web trailers instead.\n- Add `DefaultMeterIdPrefixFunction` which `GrpcMeterIdPrefixFunction` and `RetrofitMeterIdPrefixFunction` extend.\n- Add `AbstractClientOptionsBuilder.clearDecorator()` to remove decorators set.\n- Add meter tags in the Alphabet order.\n- Add grpc-status header to the unframed grpc service response headers.\n\nResult:\n- Close #2762\n- You can now use `GrpcMeterIdPrefixFunction` to add `grpc.status` tag to the metric easily.\n\nTo-do:\n- The marking of successes and failures is not working well when\n  `MetricCollectingClient` is between `RetryingClient` and `HttpClientDelegate`.", "committedDate": "2020-08-06T07:13:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5NTgwNA==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466195804", "bodyText": "Haven't been following the changes to the default id prefixes - don't these have too much cardinality to add by default?", "author": "anuraaga", "createdAt": "2020-08-06T07:19:20Z", "path": "core/src/main/java/com/linecorp/armeria/common/metric/DefaultMeterIdPrefixFunction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.metric;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableList.Builder;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.logging.RequestLog;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.logging.RequestOnlyLog;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n+\n+/**\n+ * Default {@link MeterIdPrefixFunction} implementation.\n+ */\n+public class DefaultMeterIdPrefixFunction implements MeterIdPrefixFunction {\n+\n+    private final String name;\n+    private final int activeRequestPrefixSize;\n+    private final int completeRequestPrefixSize;\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    protected DefaultMeterIdPrefixFunction(String name) {\n+        this(name,\n+             3, /* hostname.pattern, method, service */\n+             4  /* hostname.pattern, http.status, method, service */);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    protected DefaultMeterIdPrefixFunction(String name, int activeRequestPrefixSize,\n+                                           int completeRequestPrefixSize) {\n+        this.name = requireNonNull(name, \"name\");\n+        checkArgument(activeRequestPrefixSize > 0, \"activeRequestPrefixSize: %s (expected: > 0)\",\n+                      activeRequestPrefixSize);\n+        checkArgument(completeRequestPrefixSize > 0, \"completeRequestPrefixSize: %s (expected: > 0)\",\n+                      completeRequestPrefixSize);\n+        this.activeRequestPrefixSize = activeRequestPrefixSize;\n+        this.completeRequestPrefixSize = completeRequestPrefixSize;\n+    }\n+\n+    @Override\n+    public MeterIdPrefix activeRequestPrefix(MeterRegistry registry, RequestOnlyLog log) {\n+        final Builder<Tag> tagListBuilder =\n+                ImmutableList.builderWithExpectedSize(activeRequestPrefixSize);\n+        addActiveRequestPrefixTags(tagListBuilder, log);\n+        return new MeterIdPrefix(name, tagListBuilder.build());\n+    }\n+\n+    @Override\n+    public MeterIdPrefix completeRequestPrefix(MeterRegistry registry, RequestLog log) {\n+        final Builder<Tag> tagListBuilder =\n+                ImmutableList.builderWithExpectedSize(completeRequestPrefixSize);\n+        addCompleteRequestPrefixTags(tagListBuilder, log);\n+        return new MeterIdPrefix(name, tagListBuilder.build());\n+    }\n+\n+    /**\n+     * Adds the active request tags in lexicographical order for better sort performance.\n+     */\n+    protected void addActiveRequestPrefixTags(\n+            Builder<Tag> tagListBuilder, RequestOnlyLog log) {\n+        addHostnamePattern(tagListBuilder, log);\n+        addMethodAndService(tagListBuilder, log);\n+    }\n+\n+    /**\n+     * Adds the complete request tags in lexicographical order for better sort performance.\n+     */\n+    protected void addCompleteRequestPrefixTags(Builder<Tag> tagListBuilder, RequestLog log) {\n+        addHostnamePattern(tagListBuilder, log);\n+        addHttpStatus(tagListBuilder, log);\n+        addMethodAndService(tagListBuilder, log);\n+    }\n+\n+    private static void addHostnamePattern(Builder<Tag> tagListBuilder, RequestOnlyLog log) {\n+        final RequestContext ctx = log.context();\n+        if (ctx instanceof ServiceRequestContext) {\n+            final ServiceRequestContext sCtx = (ServiceRequestContext) ctx;\n+            tagListBuilder.add(Tag.of(Flags.useLegacyMeterNames() ? \"hostnamePattern\"\n+                                                                  : \"hostname.pattern\",\n+                                      sCtx.config().virtualHost().hostnamePattern()));\n+        }\n+    }\n+\n+    private static void addMethodAndService(Builder<Tag> tagListBuilder, RequestOnlyLog log) {\n+        String methodName = log.name();\n+        if (methodName == null) {\n+            final RequestHeaders requestHeaders = log.requestHeaders();\n+            methodName = requestHeaders.method().name();\n+        }\n+        tagListBuilder.add(Tag.of(\"method\", methodName));\n+        final String serviceName = log.serviceName();\n+        if (serviceName != null) {\n+            tagListBuilder.add(Tag.of(\"service\", serviceName));\n+        }\n+    }\n+\n+    /**\n+     * Adds {@link HttpStatus} to {@link Tag}.\n+     */\n+    protected static void addHttpStatus(Builder<Tag> tagListBuilder, RequestLog log) {", "originalCommit": "4f9b4ee37cc05a22164aec89692c2569917e8f88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIwNTQ2MA==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466205460", "bodyText": "We were actually adding the HTTP status by default.\nhttps://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunction.java#L85\nAnd I found an issued that you created. #1981\n\ud83d\ude06", "author": "minwoox", "createdAt": "2020-08-06T07:38:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5NTgwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIwNTc3Ng==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466205776", "bodyText": "Perhaps we can add grpc.status only for gRPC metrics. \ud83e\udd14", "author": "minwoox", "createdAt": "2020-08-06T07:38:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5NTgwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyMTQwNQ==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466221405", "bodyText": "Perhaps we can add grpc.status only for gRPC metrics. \ud83e\udd14\n\nIf you meant 'no http.status for gRPC metrics, I guess not because they have meaning at different levels.", "author": "trustin", "createdAt": "2020-08-06T08:05:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5NTgwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxMDgwOA==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466410808", "bodyText": "Yeah I guess I thought a http status could sort of DOS because of too many statuses, even when health check has less variety. But most servers won't have much variety in normal http status too so it should be ok.", "author": "anuraaga", "createdAt": "2020-08-06T13:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5NTgwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIxOTM0Nw==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466219347", "bodyText": "clearDecorators ?", "author": "trustin", "createdAt": "2020-08-06T08:01:42Z", "path": "core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java", "diffHunk": "@@ -236,6 +236,15 @@ public AbstractClientOptionsBuilder decorator(DecoratingHttpClientFunction decor\n         return this;\n     }\n \n+    /**\n+     * Clears the HTTP-level decorators set so far. Please note that RPC-level decorators are not cleared\n+     * by this method. You should use {@link #clearRpcDecorator()}.\n+     */\n+    public AbstractClientOptionsBuilder clearDecorator() {", "originalCommit": "4f9b4ee37cc05a22164aec89692c2569917e8f88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIxOTY1NQ==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466219655", "bodyText": "clearRpcDecorator() -> clearRpcDecorators()\nShould we make clearDecorators() clear both RPC and non-RPC decorators? \ud83e\udd14", "author": "trustin", "createdAt": "2020-08-06T08:02:15Z", "path": "core/src/main/java/com/linecorp/armeria/client/AbstractClientOptionsBuilder.java", "diffHunk": "@@ -257,6 +266,14 @@ public AbstractClientOptionsBuilder rpcDecorator(DecoratingRpcClientFunction dec\n         return this;\n     }\n \n+    /**\n+     * Clears the RPC-level decorators set so far.\n+     */\n+    public AbstractClientOptionsBuilder clearRpcDecorator() {\n+        decoration.clearRpc();\n+        return this;\n+    }", "originalCommit": "4f9b4ee37cc05a22164aec89692c2569917e8f88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0ODA5MQ==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466448091", "bodyText": "Should we make clearDecorators() clear both RPC and non-RPC decorators?\n\nThat's a good suggestion. Applied. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-08-06T14:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIxOTY1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyMDQ3Nw==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466220477", "bodyText": "Ditto - probably less confusing by making clear() clear everything?", "author": "trustin", "createdAt": "2020-08-06T08:03:44Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientDecorationBuilder.java", "diffHunk": "@@ -82,6 +93,15 @@ public ClientDecorationBuilder addRpc(DecoratingRpcClientFunction decorator) {\n         return addRpc(delegate -> new FunctionalDecoratingRpcClient(delegate, decorator));\n     }\n \n+    /**\n+     * Clears the RPC-level decorators set using {@link #add(ClientDecoration)},\n+     * {@link #addRpc(DecoratingRpcClientFunction)} and {@link #addRpc(Function)}.\n+     */\n+    public ClientDecorationBuilder clearRpc() {\n+        rpcDecorators.clear();\n+        return this;\n+    }", "originalCommit": "4f9b4ee37cc05a22164aec89692c2569917e8f88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyMzUxOQ==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466223519", "bodyText": "I guess this will still be useful for those who want to access the trailers while implementing something at HTTP-level?", "author": "trustin", "createdAt": "2020-08-06T08:08:46Z", "path": "grpc/src/main/java/com/linecorp/armeria/common/grpc/GrpcWebUtil.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.grpc;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;\n+\n+import io.grpc.ClientInterceptor;\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Utilities for working with <a href=\"https://grpc.io/docs/languages/web/basics/\">gRPC-Web</a>.\n+ *\n+ * <p>Note that this class will be removed once a retry {@link ClientInterceptor} is added.\n+ * See: https://github.com/line/armeria/issues/2860", "originalCommit": "4f9b4ee37cc05a22164aec89692c2569917e8f88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0ODQ3Ng==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466448476", "bodyText": "Removed the comment. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-08-06T14:21:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyMzUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyNDI5Mw==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466224293", "bodyText": "newParams? \ud83e\udd14", "author": "trustin", "createdAt": "2020-08-06T08:10:07Z", "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcClientFactory.java", "diffHunk": "@@ -84,7 +87,9 @@ public Object newClient(ClientBuilderParams params) {\n             throw newUnknownClientTypeException(clientType);\n         }\n \n-        final HttpClient httpClient = newHttpClient(params);\n+        final ClientBuilderParams params0 =\n+                addTrailersExtractorIfGrpcWeb(params, options, serializationFormat);", "originalCommit": "4f9b4ee37cc05a22164aec89692c2569917e8f88", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyNzQ4MA==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466227480", "bodyText": "Could we hide this class from the public API and allow a user specify some functions when calling a static factory method in MeterIdPrefixFunction? GrpcMeterIdPrefixFunction could then become a simple shortcut to that method. (composition over inheritance)", "author": "trustin", "createdAt": "2020-08-06T08:15:47Z", "path": "core/src/main/java/com/linecorp/armeria/common/metric/DefaultMeterIdPrefixFunction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.metric;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableList.Builder;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.logging.RequestLog;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.logging.RequestOnlyLog;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n+\n+/**\n+ * Default {@link MeterIdPrefixFunction} implementation.\n+ */\n+public class DefaultMeterIdPrefixFunction implements MeterIdPrefixFunction {", "originalCommit": "4f9b4ee37cc05a22164aec89692c2569917e8f88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0ODMzMA==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466448330", "bodyText": "That's a good suggestion. fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-08-06T14:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyNzQ4MA=="}], "type": "inlineReview"}, {"oid": "8d18dfe42b307d4a08c849b39d4f518e581c9f20", "url": "https://github.com/line/armeria/commit/8d18dfe42b307d4a08c849b39d4f518e581c9f20", "message": "Address comments by @trustin", "committedDate": "2020-08-06T14:20:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNDA0OQ==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466504049", "bodyText": "\ud83d\ude47", "author": "trustin", "createdAt": "2020-08-06T15:39:17Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientBuilderParams.java", "diffHunk": "@@ -44,12 +44,12 @@ static ClientBuilderParams of(URI uri, Class<?> type, ClientOptions options) {\n      * Returns a newly created {@link ClientBuilderParams} from the specified properties.\n      */\n     static ClientBuilderParams of(Scheme scheme, EndpointGroup endpointGroup,\n-                                  @Nullable String path, Class<?> type, ClientOptions options) {\n+                                  @Nullable String absolutePathRef, Class<?> type, ClientOptions options) {", "originalCommit": "8d18dfe42b307d4a08c849b39d4f518e581c9f20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNDQ0MA==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466504440", "bodyText": "Could be private?", "author": "trustin", "createdAt": "2020-08-06T15:39:47Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/metric/DefaultMeterIdPrefixFunction.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common.metric;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableList.Builder;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.logging.RequestLog;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.logging.RequestOnlyLog;\n+import com.linecorp.armeria.common.metric.MeterIdPrefix;\n+import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n+\n+/**\n+ * Default {@link MeterIdPrefixFunction} implementation.\n+ */\n+public final class DefaultMeterIdPrefixFunction implements MeterIdPrefixFunction {\n+\n+    private final String name;\n+\n+    public static MeterIdPrefixFunction of(String name) {\n+        return new DefaultMeterIdPrefixFunction(name);\n+    }\n+\n+    DefaultMeterIdPrefixFunction(String name) {", "originalCommit": "8d18dfe42b307d4a08c849b39d4f518e581c9f20", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNjM1Ng==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466506356", "bodyText": "Why were these methods removed?", "author": "trustin", "createdAt": "2020-08-06T15:42:29Z", "path": "eureka/src/main/java/com/linecorp/armeria/client/eureka/EurekaEndpointGroupBuilder.java", "diffHunk": "@@ -311,14 +309,8 @@ public EurekaEndpointGroupBuilder decorator(DecoratingHttpClientFunction decorat\n     }\n \n     @Override\n-    public EurekaEndpointGroupBuilder rpcDecorator(\n-            Function<? super RpcClient, ? extends RpcClient> decorator) {\n-        return (EurekaEndpointGroupBuilder) super.rpcDecorator(decorator);\n-    }\n-\n-    @Override\n-    public EurekaEndpointGroupBuilder rpcDecorator(DecoratingRpcClientFunction decorator) {\n-        return (EurekaEndpointGroupBuilder) super.rpcDecorator(decorator);\n+    public EurekaEndpointGroupBuilder clearDecorators() {\n+        return (EurekaEndpointGroupBuilder) super.clearDecorators();\n     }", "originalCommit": "8d18dfe42b307d4a08c849b39d4f518e581c9f20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc4NTkxNQ==", "url": "https://github.com/line/armeria/pull/2971#discussion_r466785915", "bodyText": "It's because we don't need to expose these APIs to Javadoc reference?\nWe are overriding this to expose the APIs in the reference but these APIs throw UnsupportedOperationException by AbstractWebClientBuilder which is the super class.\nWebClientBuilder which is a subclass of the AbstractWebClientBuilder does not override this method as well. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-08-07T02:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNjM1Ng=="}], "type": "inlineReview"}, {"oid": "08da0de551b1277d3e4e6c063687f8cb81a0cb66", "url": "https://github.com/line/armeria/commit/08da0de551b1277d3e4e6c063687f8cb81a0cb66", "message": "Private constructors", "committedDate": "2020-08-07T02:29:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMjgyNw==", "url": "https://github.com/line/armeria/pull/2971#discussion_r467702827", "bodyText": "Time to merge master? \ud83d\ude06", "author": "ikhoon", "createdAt": "2020-08-10T06:09:45Z", "path": "core/src/main/java/com/linecorp/armeria/internal/common/metric/DefaultMeterIdPrefixFunction.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.internal.common.metric;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableList.Builder;\n+\n+import com.linecorp.armeria.common.Flags;\n+import com.linecorp.armeria.common.HttpStatus;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.RequestHeaders;\n+import com.linecorp.armeria.common.logging.RequestLog;\n+import com.linecorp.armeria.common.logging.RequestLogProperty;\n+import com.linecorp.armeria.common.logging.RequestOnlyLog;\n+import com.linecorp.armeria.common.metric.MeterIdPrefix;\n+import com.linecorp.armeria.common.metric.MeterIdPrefixFunction;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.Tag;\n+\n+/**\n+ * Default {@link MeterIdPrefixFunction} implementation.\n+ */\n+public final class DefaultMeterIdPrefixFunction implements MeterIdPrefixFunction {\n+\n+    private final String name;\n+\n+    public static MeterIdPrefixFunction of(String name) {\n+        return new DefaultMeterIdPrefixFunction(name);\n+    }\n+\n+    private DefaultMeterIdPrefixFunction(String name) {\n+        this.name = requireNonNull(name, \"name\");\n+    }\n+\n+    @Override\n+    public MeterIdPrefix activeRequestPrefix(MeterRegistry registry, RequestOnlyLog log) {\n+        /* hostname.pattern, method, service */\n+        final Builder<Tag> tagListBuilder = ImmutableList.builderWithExpectedSize(3);\n+        addActiveRequestPrefixTags(tagListBuilder, log);\n+        return new MeterIdPrefix(name, tagListBuilder.build());\n+    }\n+\n+    @Override\n+    public MeterIdPrefix completeRequestPrefix(MeterRegistry registry, RequestLog log) {\n+        /* hostname.pattern, http.status, method, service */\n+        final Builder<Tag> tagListBuilder = ImmutableList.builderWithExpectedSize(4);\n+        addCompleteRequestPrefixTags(tagListBuilder, log);\n+        return new MeterIdPrefix(name, tagListBuilder.build());\n+    }\n+\n+    /**\n+     * Adds the active request tags in lexicographical order for better sort performance.\n+     * This adds {@code hostname.pattern}, {@code method} and {@code service}, in order.\n+     */\n+    public static void addActiveRequestPrefixTags(Builder<Tag> tagListBuilder, RequestOnlyLog log) {\n+        requireNonNull(tagListBuilder, \"tagListBuilder\");\n+        requireNonNull(log, \"log\");\n+        addHostnamePattern(tagListBuilder, log);\n+        addMethodAndService(tagListBuilder, log);\n+    }\n+\n+    /**\n+     * Adds the complete request tags in lexicographical order for better sort performance.\n+     * This adds {@code hostname.pattern}, {@code http.status}, {@code method} and {@code service}, in order.\n+     */\n+    public static void addCompleteRequestPrefixTags(Builder<Tag> tagListBuilder, RequestLog log) {\n+        requireNonNull(tagListBuilder, \"tagListBuilder\");\n+        requireNonNull(log, \"log\");\n+        addHostnamePattern(tagListBuilder, log);\n+        addHttpStatus(tagListBuilder, log);\n+        addMethodAndService(tagListBuilder, log);\n+    }\n+\n+    /**\n+     * Adds {@code http.status} tag to the {@code tagListBuilder}.\n+     */\n+    public static void addHttpStatus(Builder<Tag> tagListBuilder, RequestLog log) {\n+        requireNonNull(tagListBuilder, \"tagListBuilder\");\n+        requireNonNull(log, \"log\");\n+        // Add the 'httpStatus' tag.\n+        final HttpStatus status;\n+        if (log.isAvailable(RequestLogProperty.RESPONSE_HEADERS)) {\n+            status = log.responseHeaders().status();\n+        } else {\n+            status = HttpStatus.UNKNOWN;\n+        }\n+        tagListBuilder.add(Tag.of(Flags.useLegacyMeterNames() ? \"httpStatus\" : \"http.status\",\n+                                  status.codeAsText()));\n+    }\n+\n+    private static void addHostnamePattern(Builder<Tag> tagListBuilder, RequestOnlyLog log) {\n+        final RequestContext ctx = log.context();\n+        if (ctx instanceof ServiceRequestContext) {\n+            final ServiceRequestContext sCtx = (ServiceRequestContext) ctx;\n+            tagListBuilder.add(Tag.of(Flags.useLegacyMeterNames() ? \"hostnamePattern\"\n+                                                                  : \"hostname.pattern\",\n+                                      sCtx.config().virtualHost().hostnamePattern()));\n+        }\n+    }\n+\n+    private static void addMethodAndService(Builder<Tag> tagListBuilder, RequestOnlyLog log) {\n+        String methodName = log.name();\n+        if (methodName == null) {\n+            final RequestHeaders requestHeaders = log.requestHeaders();\n+            methodName = requestHeaders.method().name();\n+        }\n+        tagListBuilder.add(Tag.of(\"method\", methodName));\n+        final String serviceName = log.serviceName();\n+        if (serviceName != null) {\n+            tagListBuilder.add(Tag.of(\"service\", serviceName));\n+        }", "originalCommit": "08da0de551b1277d3e4e6c063687f8cb81a0cb66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0ODQ4NQ==", "url": "https://github.com/line/armeria/pull/2971#discussion_r467748485", "bodyText": "\ud83d\ude06", "author": "minwoox", "createdAt": "2020-08-10T08:13:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMjgyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNDgwMA==", "url": "https://github.com/line/armeria/pull/2971#discussion_r467704800", "bodyText": "Not related to this PR, how about changing the fallback service name UNKNOWN to none?", "author": "ikhoon", "createdAt": "2020-08-10T06:17:04Z", "path": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/RetrofitMeterIdPrefixFunction.java", "diffHunk": "@@ -119,12 +128,6 @@ private static void buildTags(ImmutableList.Builder<Tag> tagListBuilder, Request\n             path = requestHeaders.path();\n         }\n \n-        buildTags(tagListBuilder, serviceName, methodName, httpMethod, path);\n-    }\n-\n-    private static void buildTags(Builder<Tag> tagListBuilder, String serviceName, String methodName,\n-                                  String httpMethod, String path) {\n-        tagListBuilder.add(Tag.of(\"http.method\", httpMethod));\n         tagListBuilder.add(Tag.of(\"method\", methodName));\n         tagListBuilder.add(Tag.of(\"path\", path));\n         tagListBuilder.add(Tag.of(\"service\", serviceName));", "originalCommit": "08da0de551b1277d3e4e6c063687f8cb81a0cb66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNTg4Ng==", "url": "https://github.com/line/armeria/pull/2971#discussion_r467705886", "bodyText": "\ud83d\udc4d", "author": "ikhoon", "createdAt": "2020-08-10T06:20:42Z", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java", "diffHunk": "@@ -244,15 +245,17 @@ private static void deframeAndRespond(\n                 message.append(\", \").append(grpcMessage);\n             }\n \n-            res.complete(HttpResponse.of(\n-                    httpStatus,\n-                    MediaType.PLAIN_TEXT_UTF_8,\n-                    message.toString()));\n+            final ResponseHeaders headers = ResponseHeaders.builder(httpStatus)\n+                                                           .contentType(MediaType.PLAIN_TEXT_UTF_8)\n+                                                           .add(GrpcHeaderNames.GRPC_STATUS, grpcStatusCode)", "originalCommit": "08da0de551b1277d3e4e6c063687f8cb81a0cb66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMjMyNg==", "url": "https://github.com/line/armeria/pull/2971#discussion_r467712326", "bodyText": "This function seems not to be closely related to trailers. How about renaming it to convertToBuf() or something similar.", "author": "ikhoon", "createdAt": "2020-08-10T06:41:45Z", "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/InternalGrpcWebUtil.java", "diffHunk": "@@ -16,21 +16,53 @@\n \n package com.linecorp.armeria.internal.client.grpc;\n \n+import java.io.IOException;\n+import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n \n import javax.annotation.Nullable;\n \n+import com.google.common.io.ByteStreams;\n+\n import com.linecorp.armeria.common.HttpHeaders;\n import com.linecorp.armeria.common.HttpHeadersBuilder;\n+import com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer.DeframedMessage;\n \n import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.ByteBufOutputStream;\n import io.netty.util.ByteProcessor;\n import io.netty.util.ByteProcessor.IndexOfProcessor;\n \n public final class InternalGrpcWebUtil {\n \n     private static final ByteProcessor FIND_COLON = new IndexOfProcessor((byte) ':');\n \n+    public static ByteBuf trailersBuf(DeframedMessage message, ByteBufAllocator alloc) throws IOException {", "originalCommit": "08da0de551b1277d3e4e6c063687f8cb81a0cb66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0ODkxMg==", "url": "https://github.com/line/armeria/pull/2971#discussion_r467748912", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-08-10T08:14:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMjMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMDg3NA==", "url": "https://github.com/line/armeria/pull/2971#discussion_r467730874", "bodyText": "Question: Is it possible to enable GrpcWebTrailersExtractor only if a RetryClientClient or MetricCollectingClient is configured?", "author": "ikhoon", "createdAt": "2020-08-10T07:33:16Z", "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcClientFactory.java", "diffHunk": "@@ -84,7 +87,9 @@ public Object newClient(ClientBuilderParams params) {\n             throw newUnknownClientTypeException(clientType);\n         }\n \n-        final HttpClient httpClient = newHttpClient(params);\n+        final ClientBuilderParams newParams =\n+                addTrailersExtractorIfGrpcWeb(params, options, serializationFormat);\n+        final HttpClient httpClient = newHttpClient(newParams);", "originalCommit": "08da0de551b1277d3e4e6c063687f8cb81a0cb66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMzQ1Mw==", "url": "https://github.com/line/armeria/pull/2971#discussion_r467733453", "bodyText": "That's a good suggestion. We can actually add the decorator only when RetryClientClient is applied. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-08-10T07:39:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMDg3NA=="}], "type": "inlineReview"}, {"oid": "3a4d683175d66d9999efb258dd8c88f481edc4eb", "url": "https://github.com/line/armeria/commit/3a4d683175d66d9999efb258dd8c88f481edc4eb", "message": "Merge branch 'master' into grpc_meter", "committedDate": "2020-08-10T08:15:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwMDI4Mw==", "url": "https://github.com/line/armeria/pull/2971#discussion_r469000283", "bodyText": "How about GrpcWebTrailers and get() and set()?", "author": "trustin", "createdAt": "2020-08-12T04:37:25Z", "path": "grpc/src/main/java/com/linecorp/armeria/common/grpc/GrpcWebUtil.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.grpc;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Utilities for working with <a href=\"https://grpc.io/docs/languages/web/basics/\">gRPC-Web</a>.\n+ */\n+@UnstableApi\n+public final class GrpcWebUtil {", "originalCommit": "3a4d683175d66d9999efb258dd8c88f481edc4eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY3NTA1Mw==", "url": "https://github.com/line/armeria/pull/2971#discussion_r469675053", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-08-13T03:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwMDI4Mw=="}], "type": "inlineReview"}, {"oid": "15c124c98c46b52e7d81503d32624d839d2bc589", "url": "https://github.com/line/armeria/commit/15c124c98c46b52e7d81503d32624d839d2bc589", "message": "Address the comment by @trustin", "committedDate": "2020-08-13T02:35:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY4OTc4NQ==", "url": "https://github.com/line/armeria/pull/2971#discussion_r469689785", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                        HttpHeaders trailers = GrpcWebUtil.get(ctx);\n          \n          \n            \n                 *                        HttpHeaders trailers = GrpcWebTrailers.get(ctx);", "author": "ikhoon", "createdAt": "2020-08-13T04:29:13Z", "path": "grpc/src/main/java/com/linecorp/armeria/common/grpc/GrpcWebTrailers.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.grpc;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpHeaders;\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.annotation.UnstableApi;\n+import com.linecorp.armeria.common.grpc.protocol.GrpcHeaderNames;\n+\n+import io.netty.util.AttributeKey;\n+\n+/**\n+ * Retrieves <a href=\"https://grpc.io/docs/languages/web/basics/\">gRPC-Web</a> trailers.\n+ */\n+@UnstableApi\n+public final class GrpcWebTrailers {\n+\n+    private static final AttributeKey<HttpHeaders> GRPC_WEB_TRAILERS = AttributeKey.valueOf(\n+            GrpcWebTrailers.class, \"GRPC_WEB_TRAILERS\");\n+\n+    /**\n+     * Returns the gRPC-Web trailers which was set to the specified {@link RequestContext} using\n+     * {@link #set(RequestContext, HttpHeaders)}.\n+     *\n+     * <p>A gRPC-Web response does not contain a separated trailers according to the\n+     * <a href=\"https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2\">\n+     * gRPC-Web spec</a>:\n+     * <ul>\n+     *   <li>Trailers must be the last message of the response.</li>\n+     *   <li>Trailers may be sent together with response headers, with no message in the body.</li>\n+     * </ul>\n+     * That means the response trailers should be pulled out from {@link AggregatedHttpResponse#headers()}}\n+     * or parsed from {@link AggregatedHttpResponse#content()}.\n+     *\n+     * <p>This method is useful when {@link RetryRuleWithContent} needs {@link GrpcHeaderNames#GRPC_STATUS}\n+     * to decide whether to retry. For example:\n+     * <pre>{@code\n+     * Clients.builder(grpcServerUri)\n+     *        .decorator(RetryingClient.newDecorator(\n+     *                RetryRuleWithContent.onResponse((ctx, response) -> {\n+     *                    // Note that we should aggregate the response to get the trailers.\n+     *                    return response.aggregate().thenApply(aggregated -> {\n+     *                        HttpHeaders trailers = GrpcWebUtil.get(ctx);", "originalCommit": "15c124c98c46b52e7d81503d32624d839d2bc589", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY5MTY3Mg==", "url": "https://github.com/line/armeria/pull/2971#discussion_r469691672", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-08-13T04:37:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY4OTc4NQ=="}], "type": "inlineReview"}, {"oid": "be4165a7dfa1d737b8368f4a84aff3dd274fdad8", "url": "https://github.com/line/armeria/commit/be4165a7dfa1d737b8368f4a84aff3dd274fdad8", "message": "Address the comment by @ikhoon", "committedDate": "2020-08-13T04:37:22Z", "type": "commit"}]}