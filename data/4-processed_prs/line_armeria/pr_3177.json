{"pr_number": 3177, "pr_title": "Add Accept-Language parsing and prioritizing", "pr_createdAt": "2020-11-16T07:20:11Z", "pr_url": "https://github.com/line/armeria/pull/3177", "timeline": [{"oid": "7e0ed58d01bc3ce960d71a778c75bf3ce8b9a185", "url": "https://github.com/line/armeria/commit/7e0ed58d01bc3ce960d71a778c75bf3ce8b9a185", "message": "Add Accept-Language parsing and prioritizing\n\nMotivation:\n\nAccept-Language is a client supplied header detailing what locales the\nclient user prefers and the weight of the preference. It's really\nmostly useful to detect the default language of the site.\n\nModifications:\n\nAdded method `acceptLanguages()` and `getLocale(supportedLocales)` to\n`RoutingContext` and all it's subclasses.\n\nAdd a lazy init property for `acceptLanguages()` to avoid parsing\nunless needed.", "committedDate": "2020-11-16T07:57:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyNTA2NQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r524025065", "bodyText": "How about selectLocale(Iterable<Locale>) ?", "author": "trustin", "createdAt": "2020-11-16T09:31:47Z", "path": "core/src/main/java/com/linecorp/armeria/server/DefaultRoutingContext.java", "diffHunk": "@@ -133,6 +144,17 @@ public MediaType contentType() {\n         return acceptTypes;\n     }\n \n+    @Override\n+    public List<LanguageRange> acceptLanguages() {\n+        return acceptLanguages.get();\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Locale getLocale(Collection<Locale> supportedLocales) {", "originalCommit": "7e0ed58d01bc3ce960d71a778c75bf3ce8b9a185", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3MTcyMA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r524071720", "bodyText": "Agreed, I actually thought about this, but forgot about. I mostly put it there, because of the closeness to the media type parser.\nIt might even be preferable to have the Accept in HttpRequest as well, and just let HttpRoutingContext use that method, but that's a large change imho.\nOn the selectLocale(Iterable), yes, much better name and signature.", "author": "tobias-", "createdAt": "2020-11-16T10:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyNTA2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3NDcyNg==", "url": "https://github.com/line/armeria/pull/3177#discussion_r524074726", "bodyText": "Alright, then let's move these methods to HttpRequest. Accept support would be even nicer, but it's up to you as always. It'd be nice if we could file an issue at least, so we can follow-up later.", "author": "trustin", "createdAt": "2020-11-16T10:15:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyNTA2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDExODU0MQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r524118541", "bodyText": "Sorry, but I don't have enough time to try to figure out routing internals right now. I'm putting it in HttpHeadersBase if that's ok, as that's where contentType() parsing is done, and adding a default method in HttpRequest (same as for contentType()). I tried putting the logic in HttpRequest, but unless I want to put a lot of logic into an interface, that will add a lot of duplicated logic as there are about 10 classes implementing that interface.\nBtw, no on the Iterable unfortunately. Locale.filter() needs a Collection.", "author": "tobias-", "createdAt": "2020-11-16T10:55:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyNTA2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MTMyMw==", "url": "https://github.com/line/armeria/pull/3177#discussion_r528681323", "bodyText": "Btw, no on the Iterable unfortunately. Locale.filter() needs a Collection.\n\nThen, how about copy the supportedLocales if it is not an instance Collection.\nFor example:\nLocale selectLocale(Iterable<Locale> supportedLocales) {\n    Collection<Locale> locales;\n\tif (!supportedLocales instanceof Collection) {\n\t\tlocales = supportedLocales;\n    } else {\n\t\tlocales = ImmutableList.copyOf(supportedLocales);\n    }\n}", "author": "ikhoon", "createdAt": "2020-11-23T12:52:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyNTA2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0NDU1MQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r530244551", "bodyText": "I somehow missed this comment. Going through all comments again.", "author": "tobias-", "createdAt": "2020-11-25T09:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyNTA2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAzMjIwOA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r524032208", "bodyText": "I'm curious if we should return Locale.ROOT instead of null. What do you think?", "author": "trustin", "createdAt": "2020-11-16T09:38:11Z", "path": "core/src/main/java/com/linecorp/armeria/server/RoutingContext.java", "diffHunk": "@@ -81,6 +84,23 @@\n      */\n     List<MediaType> acceptTypes();\n \n+    /**\n+     * Returns a list of {@link LanguageRange}s that are specified in {@link HttpHeaderNames#ACCEPT_LANGUAGE}\n+     * in the order of client-side preferences. If the client does not send the header, this will contain only a\n+     * wild card {@link LanguageRange}.\n+     */\n+    List<LanguageRange> acceptLanguages();\n+\n+    /**\n+     * This matches the {@link Locale}s supported by the server to\n+     * the @{link HttpHeaderNames#ACCEPT_LANGUAGE} and returning the best match\n+     * according to client preference.\n+     * @param supportedLocales a list of locales supported by the server.\n+     * @return The best matching locale or null if no locale matches.", "originalCommit": "7e0ed58d01bc3ce960d71a778c75bf3ce8b9a185", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3OTczOQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r524079739", "bodyText": "If the nullability is the issue, I'd prefer Optional<Locale>, because I don't really see what ROOT would represent, except that nothing was found. It can't really be used to select what texts to show to the user. My completely made up statistics says that in 99.9% of the cases when this fails, the one calling the method will fall back to a specific Locale that they support and hope that the user can read it anyway.\nI imagine the code looking something like\nselectLocale(supportedLanguages)\n    ?: Locale.US\nOptional.ofNullable(selectLocale(supportedLanguages))\n    .orElse(Locale.US)\nif the method returns Locale.ROOT, the check would be the (imho) less clear:\nOptional.of(selectLocale(supportedLanguages))\n    .filter((locale) -> !locale.equals(Locale.ROOT))\n    .orElse(Locale.US)", "author": "tobias-", "createdAt": "2020-11-16T10:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAzMjIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1MzAzNA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526653034", "bodyText": "I see. Returning null sounds better.", "author": "trustin", "createdAt": "2020-11-19T07:45:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAzMjIwOA=="}], "type": "inlineReview"}, {"oid": "dad86224ed2dc9df60c8b8dad91b151a728b30c7", "url": "https://github.com/line/armeria/commit/dad86224ed2dc9df60c8b8dad91b151a728b30c7", "message": "Add Accept-Language parsing and prioritizing\n\nMotivation:\n\nAccept-Language is a client supplied header detailing what locales the\nclient user prefers and the weight of the preference. It's really\nmostly useful to detect the default language of the site.\n\nModifications:\n\nAdded method `acceptLanguages()` and `getLocale(supportedLocales)` to\n`RoutingContext` and all it's subclasses.\n\nAdd a lazy init property for `acceptLanguages()` to avoid parsing\nunless needed.\n\nResult:\n\nCloses #3179", "committedDate": "2020-11-16T11:41:56Z", "type": "forcePushed"}, {"oid": "6b7e347b607f7e3711a919ee1d193a0f964682c9", "url": "https://github.com/line/armeria/commit/6b7e347b607f7e3711a919ee1d193a0f964682c9", "message": "Add Accept-Language parsing and prioritizing\n\nMotivation:\n\nAccept-Language is a client supplied header detailing what locales the\nclient user prefers and the weight of the preference. It's really\nmostly useful to detect the default language of the site.\n\nModifications:\n\nAdded method `acceptLanguages()` and `getLocale(supportedLocales)` to\n`RoutingContext` and all it's subclasses.\n\nAdd a lazy init property for `acceptLanguages()` to avoid parsing\nunless needed.\n\nResult:\n\nCloses #3179", "committedDate": "2020-11-16T14:27:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwMDU2MA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526600560", "bodyText": "Shouldn't we put this into DefaultRequestHeadersBuilder because it's a request header?", "author": "minwoox", "createdAt": "2020-11-19T05:19:24Z", "path": "core/src/main/java/com/linecorp/armeria/common/AbstractHttpHeadersBuilder.java", "diffHunk": "@@ -39,6 +44,18 @@ final HttpHeadersBase newSetters(HttpHeadersBase parent, boolean shallowCopy) {\n         return new HttpHeadersBase(parent, shallowCopy);\n     }\n \n+    @Nullable\n+    public final List<LanguageRange> acceptLanguages() {", "originalCommit": "6b7e347b607f7e3711a919ee1d193a0f964682c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNTYzMA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526725630", "bodyText": "Moved to HttpHeadersBase as per uri() and path() and made package", "author": "tobias-", "createdAt": "2020-11-19T09:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwMDU2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwMDc4Mg==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526600782", "bodyText": "ditto\nShouldn't we put this into RequestHeaderGetters?", "author": "minwoox", "createdAt": "2020-11-19T05:20:03Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpHeaderGetters.java", "diffHunk": "@@ -49,6 +52,27 @@\n     @Nullable\n     MediaType contentType();\n \n+    /**\n+     * Returns a list of {@link LanguageRange}s that are specified in {@link HttpHeaderNames#ACCEPT_LANGUAGE}\n+     * in the order of client-side preferences. If the client does not send the header, this will contain only a\n+     * wild card {@link LanguageRange}.\n+     */\n+    List<LanguageRange> acceptLanguages();", "originalCommit": "6b7e347b607f7e3711a919ee1d193a0f964682c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyMzA5OQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526723099", "bodyText": "Done", "author": "tobias-", "createdAt": "2020-11-19T09:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwMDc4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwMTIxNA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526601214", "bodyText": "Let's put:\nrequireNonNull(supportedLocales, \"supportedLocales\");", "author": "minwoox", "createdAt": "2020-11-19T05:21:25Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java", "diffHunk": "@@ -254,6 +263,33 @@ final void contentType(MediaType contentType) {\n         set(HttpHeaderNames.CONTENT_TYPE, contentType.toString());\n     }\n \n+    @Nullable\n+    @Override\n+    public Locale selectLocale(Collection<Locale> supportedLocales) {\n+        return acceptLanguages()", "originalCommit": "6b7e347b607f7e3711a919ee1d193a0f964682c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyMzc5NQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526723795", "bodyText": "Done", "author": "tobias-", "createdAt": "2020-11-19T09:45:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwMTIxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwMTI3NQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526601275", "bodyText": "nit: (it) -> it", "author": "minwoox", "createdAt": "2020-11-19T05:21:41Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java", "diffHunk": "@@ -254,6 +263,33 @@ final void contentType(MediaType contentType) {\n         set(HttpHeaderNames.CONTENT_TYPE, contentType.toString());\n     }\n \n+    @Nullable\n+    @Override\n+    public Locale selectLocale(Collection<Locale> supportedLocales) {\n+        return acceptLanguages()\n+                .stream()\n+                .flatMap((it) -> Locale.filter(ImmutableList.of(it), supportedLocales).stream())", "originalCommit": "6b7e347b607f7e3711a919ee1d193a0f964682c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyNDg3Nw==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526724877", "bodyText": "fixed. I'm starting to forget my Java :\\", "author": "tobias-", "createdAt": "2020-11-19T09:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwMTI3NQ=="}], "type": "inlineReview"}, {"oid": "814cda31debea9fcaaf6f3d03d2363e770f8a718", "url": "https://github.com/line/armeria/commit/814cda31debea9fcaaf6f3d03d2363e770f8a718", "message": "Add Accept-Language parsing and prioritizing\n\nMotivation:\n\nAccept-Language is a client supplied header detailing what locales the\nclient user prefers and the weight of the preference. It's really\nmostly useful to detect the default language of the site.\n\nModifications:\n\nAdded method `acceptLanguages()` and `getLocale(supportedLocales)` to\n`RoutingContext` and all it's subclasses.\n\nAdd a lazy init property for `acceptLanguages()` to avoid parsing\nunless needed.\n\nResult:\n\nCloses #3179", "committedDate": "2020-11-19T09:32:35Z", "type": "forcePushed"}, {"oid": "f55e0a26a43cd6bca80af67af4212cf3d548ba7b", "url": "https://github.com/line/armeria/commit/f55e0a26a43cd6bca80af67af4212cf3d548ba7b", "message": "Add Accept-Language parsing and prioritizing\n\nMotivation:\n\nAccept-Language is a client supplied header detailing what locales the\nclient user prefers and the weight of the preference. It's really\nmostly useful to detect the default language of the site.\n\nModifications:\n\nAdded method `acceptLanguages()` and `getLocale(supportedLocales)` to\n`RoutingContext` and all it's subclasses.\n\nAdd a lazy init property for `acceptLanguages()` to avoid parsing\nunless needed.\n\nResult:\n\nCloses #3179", "committedDate": "2020-11-19T09:45:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MDQ0OQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526780449", "bodyText": "Could do just:\nfinal HttpHeadersBase getters = getters();\nif (getters != null) {\n    return getters.selectLocale(supportedLocales);\n}\nreturn null;", "author": "minwoox", "createdAt": "2020-11-19T11:12:55Z", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultRequestHeadersBuilder.java", "diffHunk": "@@ -112,4 +118,35 @@ public RequestHeadersBuilder authority(String authority) {\n         setters().authority(authority);\n         return this;\n     }\n+\n+    @Override\n+    public List<LanguageRange> acceptLanguages() {\n+        final HttpHeadersBase getters = getters();\n+        if (getters != null) {\n+            return getters.acceptLanguages();\n+        }\n+        return DefaultRequestHeaders.ACCEPT_LANGUAGE_WILDCARD;\n+    }\n+\n+    public RequestHeadersBuilder acceptLanguages(List<LanguageRange> acceptLanguages) {\n+        requireNonNull(acceptLanguages, \"acceptLanguages\");\n+        final String acceptLanguagesValue = acceptLanguages\n+                .stream()\n+                .map(LanguageRange::toString)\n+                .collect(Collectors.joining(\", \"));\n+        set(\n+                HttpHeaderNames.ACCEPT_LANGUAGE,\n+                acceptLanguagesValue\n+        );\n+        return self();\n+    }\n+\n+    @Nullable\n+    public Locale selectLocale(Collection<Locale> supportedLocales) {\n+        final HttpHeadersBase getters = getters();\n+        if (getters instanceof RequestHeaderGetters) {", "originalCommit": "f55e0a26a43cd6bca80af67af4212cf3d548ba7b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MDg0MA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526780840", "bodyText": "Let's merge these into one line because this is Java. \ud83e\udd23\nset(HttpHeaderNames.ACCEPT_LANGUAGE, acceptLanguagesValue);", "author": "minwoox", "createdAt": "2020-11-19T11:13:36Z", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultRequestHeadersBuilder.java", "diffHunk": "@@ -112,4 +118,35 @@ public RequestHeadersBuilder authority(String authority) {\n         setters().authority(authority);\n         return this;\n     }\n+\n+    @Override\n+    public List<LanguageRange> acceptLanguages() {\n+        final HttpHeadersBase getters = getters();\n+        if (getters != null) {\n+            return getters.acceptLanguages();\n+        }\n+        return DefaultRequestHeaders.ACCEPT_LANGUAGE_WILDCARD;\n+    }\n+\n+    public RequestHeadersBuilder acceptLanguages(List<LanguageRange> acceptLanguages) {\n+        requireNonNull(acceptLanguages, \"acceptLanguages\");\n+        final String acceptLanguagesValue = acceptLanguages\n+                .stream()\n+                .map(LanguageRange::toString)\n+                .collect(Collectors.joining(\", \"));\n+        set(\n+                HttpHeaderNames.ACCEPT_LANGUAGE,\n+                acceptLanguagesValue\n+        );", "originalCommit": "f55e0a26a43cd6bca80af67af4212cf3d548ba7b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MDk1MA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526780950", "bodyText": "missing @Override", "author": "minwoox", "createdAt": "2020-11-19T11:13:46Z", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultRequestHeadersBuilder.java", "diffHunk": "@@ -112,4 +118,35 @@ public RequestHeadersBuilder authority(String authority) {\n         setters().authority(authority);\n         return this;\n     }\n+\n+    @Override\n+    public List<LanguageRange> acceptLanguages() {\n+        final HttpHeadersBase getters = getters();\n+        if (getters != null) {\n+            return getters.acceptLanguages();\n+        }\n+        return DefaultRequestHeaders.ACCEPT_LANGUAGE_WILDCARD;\n+    }\n+\n+    public RequestHeadersBuilder acceptLanguages(List<LanguageRange> acceptLanguages) {", "originalCommit": "f55e0a26a43cd6bca80af67af4212cf3d548ba7b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MTAxOQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526781019", "bodyText": "missing @Override", "author": "minwoox", "createdAt": "2020-11-19T11:13:51Z", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultRequestHeadersBuilder.java", "diffHunk": "@@ -112,4 +118,35 @@ public RequestHeadersBuilder authority(String authority) {\n         setters().authority(authority);\n         return this;\n     }\n+\n+    @Override\n+    public List<LanguageRange> acceptLanguages() {\n+        final HttpHeadersBase getters = getters();\n+        if (getters != null) {\n+            return getters.acceptLanguages();\n+        }\n+        return DefaultRequestHeaders.ACCEPT_LANGUAGE_WILDCARD;\n+    }\n+\n+    public RequestHeadersBuilder acceptLanguages(List<LanguageRange> acceptLanguages) {\n+        requireNonNull(acceptLanguages, \"acceptLanguages\");\n+        final String acceptLanguagesValue = acceptLanguages\n+                .stream()\n+                .map(LanguageRange::toString)\n+                .collect(Collectors.joining(\", \"));\n+        set(\n+                HttpHeaderNames.ACCEPT_LANGUAGE,\n+                acceptLanguagesValue\n+        );\n+        return self();\n+    }\n+\n+    @Nullable\n+    public Locale selectLocale(Collection<Locale> supportedLocales) {", "originalCommit": "f55e0a26a43cd6bca80af67af4212cf3d548ba7b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MTU5NQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526781595", "bodyText": "nit: HttpHeadersBase.ACCEPT_LANGUAGE_WILDCARD;", "author": "minwoox", "createdAt": "2020-11-19T11:14:47Z", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultRequestHeadersBuilder.java", "diffHunk": "@@ -112,4 +118,35 @@ public RequestHeadersBuilder authority(String authority) {\n         setters().authority(authority);\n         return this;\n     }\n+\n+    @Override\n+    public List<LanguageRange> acceptLanguages() {\n+        final HttpHeadersBase getters = getters();\n+        if (getters != null) {\n+            return getters.acceptLanguages();\n+        }\n+        return DefaultRequestHeaders.ACCEPT_LANGUAGE_WILDCARD;", "originalCommit": "f55e0a26a43cd6bca80af67af4212cf3d548ba7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU0Njc3OA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r527546778", "bodyText": "Removed DefaultRequestHeaders.ACCEPT_LANGUAGE_WILDCARD completely and returns null.", "author": "tobias-", "createdAt": "2020-11-20T09:07:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MTU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4Mzc0NQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526783745", "bodyText": "nit: {@link ...", "author": "minwoox", "createdAt": "2020-11-19T11:18:14Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequest.java", "diffHunk": "@@ -318,6 +321,31 @@ default MediaType contentType() {\n         return headers().contentType();\n     }\n \n+    /**\n+     * Returns a list of {@link LanguageRange}s that are specified in {@link HttpHeaderNames#ACCEPT_LANGUAGE}\n+     * in the order of client-side preferences. If the client does not send the header, this will contain only a\n+     * wild card {@link LanguageRange}.\n+     */\n+    default List<LanguageRange> acceptLanguages() {\n+        return headers().acceptLanguages();\n+    }\n+\n+    /**\n+     * This matches the {@link Locale}s supported by the server to\n+     * the @{link HttpHeaderNames#ACCEPT_LANGUAGE} and returning the best match", "originalCommit": "f55e0a26a43cd6bca80af67af4212cf3d548ba7b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4NTI2NQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526785265", "bodyText": "I think we can remove @see", "author": "minwoox", "createdAt": "2020-11-19T11:19:29Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequest.java", "diffHunk": "@@ -318,6 +321,31 @@ default MediaType contentType() {\n         return headers().contentType();\n     }\n \n+    /**\n+     * Returns a list of {@link LanguageRange}s that are specified in {@link HttpHeaderNames#ACCEPT_LANGUAGE}\n+     * in the order of client-side preferences. If the client does not send the header, this will contain only a\n+     * wild card {@link LanguageRange}.\n+     */\n+    default List<LanguageRange> acceptLanguages() {\n+        return headers().acceptLanguages();\n+    }\n+\n+    /**\n+     * This matches the {@link Locale}s supported by the server to\n+     * the @{link HttpHeaderNames#ACCEPT_LANGUAGE} and returning the best match\n+     * according to client preference. It does this via <s>Basic Filter</s>ing each\n+     * {@link LanguageRange} and picking the first match. This is the \"classic\"\n+     * algorithm described in @see", "originalCommit": "f55e0a26a43cd6bca80af67af4212cf3d548ba7b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzNjgyNQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526836825", "bodyText": "{@link", "author": "tobias-", "createdAt": "2020-11-19T12:29:47Z", "path": "core/src/main/java/com/linecorp/armeria/common/RequestHeaderGetters.java", "diffHunk": "@@ -62,4 +66,25 @@\n      */\n     @Nullable\n     String authority();\n+\n+    /**\n+     * Returns a list of {@link LanguageRange}s that are specified in {@link HttpHeaderNames#ACCEPT_LANGUAGE}\n+     * in the order of client-side preferences. If the client does not send the header, this will contain only a\n+     * wild card {@link LanguageRange}.\n+     */\n+    List<LanguageRange> acceptLanguages();\n+\n+    /**\n+     * This matches the {@link Locale}s supported by the server to\n+     * the @{link HttpHeaderNames#ACCEPT_LANGUAGE} and returning the best match", "originalCommit": "f55e0a26a43cd6bca80af67af4212cf3d548ba7b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzOTQwNg==", "url": "https://github.com/line/armeria/pull/3177#discussion_r526839406", "bodyText": "Should this be exposed somewhere?", "author": "tobias-", "createdAt": "2020-11-19T12:32:23Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java", "diffHunk": "@@ -55,6 +62,9 @@\n     private static final String[] PROHIBITED_VALUE_CHAR_NAMES;\n     private static final char LAST_PROHIBITED_VALUE_CHAR;\n \n+    static final List<LanguageRange> ACCEPT_LANGUAGE_WILDCARD =\n+            ImmutableList.copyOf(LanguageRange.parse(\"*\"));\n+", "originalCommit": "f55e0a26a43cd6bca80af67af4212cf3d548ba7b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1OTc3MA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r527259770", "bodyText": "That's a good question. If JDK doesn't provide this constant, how about adding armeria.common.util.LanguageRanges class that provides it, as well as other common ones?", "author": "trustin", "createdAt": "2020-11-19T22:56:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzOTQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NzcxNg==", "url": "https://github.com/line/armeria/pull/3177#discussion_r527497716", "bodyText": "I cannot find any LanguageRange with \"*\", and the sun.util.Locale.LocaleMatcher that contains e.g. the actual implementation of the LanguageRange.parse() does not use a constant.\nI can add that class, but it will be for just the single LanguageRange, as the problem is that a LanguageRange contains both the Locale and a weight. It might be that there are certain combinations of Locale and weight that are common, but I believe they would be very localized to certain countries. It may be that even USA and UK does not share any LanguageRanges at all.\nI have no opinion on where to put that constant, so what do you want? Btw, if  the acceptLanguages()-method is made to return null instead of accept all, I don't see a need for Armeria to define this constant.", "author": "tobias-", "createdAt": "2020-11-20T07:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzOTQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU0ODkxNQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r527548915", "bodyText": "I cannot find any LanguageRange with \"*\", and the sun.util.Locale.LocaleMatcher that contains e.g. the actual implementation of the LanguageRange.parse() does not use a constant.\nI can add that class, but it will be for just the single LanguageRange, as the problem is that a LanguageRange contains both the Locale and a weight. It might be that there are certain combinations of Locale and weight that are common, but I believe they would be very localized to certain countries. It may be that even USA and UK does not share any LanguageRanges at all.\nI have no opinion on where to put that constant, so what do you want? Btw, if the acceptLanguages()-method is made to return null instead of accept all, I don't see a need for Armeria to define this constant.\n\nRemoved the LanguageRange constant completely as I'm returning null from acceptLanguages() instead. After thinking about it again, that was the better solution imho.", "author": "tobias-", "createdAt": "2020-11-20T09:08:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzOTQwNg=="}], "type": "inlineReview"}, {"oid": "afdc7f95f09b874e043e77c26202d8ff06f9ea26", "url": "https://github.com/line/armeria/commit/afdc7f95f09b874e043e77c26202d8ff06f9ea26", "message": "Add Accept-Language parsing and prioritizing\n\nMotivation:\n\nAccept-Language is a client supplied header detailing what locales the\nclient user prefers and the weight of the preference. It's really\nmostly useful to detect the default language of the site.\n\nModifications:\n\nAdded method `acceptLanguages()` and `getLocale(supportedLocales)` to\n`RoutingContext` and all it's subclasses.\n\nAdd a lazy init property for `acceptLanguages()` to avoid parsing\nunless needed.\n\nResult:\n\nCloses #3179", "committedDate": "2020-11-19T12:34:43Z", "type": "forcePushed"}, {"oid": "6c7dba53e30c6a201815774cbc4851aa74ab0a43", "url": "https://github.com/line/armeria/commit/6c7dba53e30c6a201815774cbc4851aa74ab0a43", "message": "Add Accept-Language parsing and prioritizing\n\nMotivation:\n\nAccept-Language is a client supplied header detailing what locales the\nclient user prefers and the weight of the preference. It's really\nmostly useful to detect the default language of the site.\n\nModifications:\n\nAdded method `acceptLanguages()` and `getLocale(supportedLocales)` to\n`RoutingContext` and all it's subclasses.\n\nAdd a lazy init property for `acceptLanguages()` to avoid parsing\nunless needed.\n\nResult:\n\nCloses #3179", "committedDate": "2020-11-19T16:29:51Z", "type": "forcePushed"}, {"oid": "43f6190b175beeed88e29e90d2841bc703b16de7", "url": "https://github.com/line/armeria/commit/43f6190b175beeed88e29e90d2841bc703b16de7", "message": "Add Accept-Language parsing and prioritizing\n\nMotivation:\n\nAccept-Language is a client supplied header detailing what locales the\nclient user prefers and the weight of the preference. It's really\nmostly useful to detect the default language of the site.\n\nModifications:\n\nAdded method `acceptLanguages()` and `getLocale(supportedLocales)` to\n`RoutingContext` and all it's subclasses.\n\nAdd a lazy init property for `acceptLanguages()` to avoid parsing\nunless needed.\n\nResult:\n\nCloses #3179", "committedDate": "2020-11-19T16:45:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1NzkyNA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r527257924", "bodyText": "Could we use @Nullable like method and uri to reduce memory footprint?", "author": "trustin", "createdAt": "2020-11-19T22:52:46Z", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultRequestHeaders.java", "diffHunk": "@@ -16,16 +16,25 @@\n package com.linecorp.armeria.common;\n \n import java.net.URI;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Locale.LanguageRange;\n+import java.util.function.Supplier;\n \n import javax.annotation.Nullable;\n \n+import com.google.common.base.Suppliers;\n+\n @SuppressWarnings({ \"checkstyle:EqualsHashCode\", \"EqualsAndHashcode\" })\n final class DefaultRequestHeaders extends DefaultHttpHeaders implements RequestHeaders {\n \n     @Nullable\n     private HttpMethod method;\n     @Nullable\n     private URI uri;\n+    private final Supplier<List<LanguageRange>> acceptLanguage =\n+            Suppliers.memoize(super::acceptLanguages);", "originalCommit": "43f6190b175beeed88e29e90d2841bc703b16de7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzNzAyOQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r527537029", "bodyText": "Fixed", "author": "tobias-", "createdAt": "2020-11-20T08:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1NzkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1ODUzNA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r527258534", "bodyText": "Should we distinguish the lack of accept-language header from accept-language: *? \ud83e\udd14", "author": "trustin", "createdAt": "2020-11-19T22:54:14Z", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultRequestHeadersBuilder.java", "diffHunk": "@@ -112,4 +118,31 @@ public RequestHeadersBuilder authority(String authority) {\n         setters().authority(authority);\n         return this;\n     }\n+\n+    @Override\n+    public List<LanguageRange> acceptLanguages() {\n+        final HttpHeadersBase getters = getters();\n+        if (getters != null) {\n+            return getters.acceptLanguages();\n+        }\n+        return HttpHeadersBase.ACCEPT_LANGUAGE_WILDCARD;", "originalCommit": "43f6190b175beeed88e29e90d2841bc703b16de7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzNTI0OQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r527535249", "bodyText": "I changed it according to your suggestion/question to return null on parse error, so while not it's possible to differ from accept-language: * and lack of accept-language header, it's not impossible to differ between no valid header and no header at all. Tbh, I think that's ok, as I can't see any real value to the server side to differ between the two cases. If there is a case, it could be solved by checking for the existence of the header.", "author": "tobias-", "createdAt": "2020-11-20T08:55:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1ODUzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1OTA5Mg==", "url": "https://github.com/line/armeria/pull/3177#discussion_r527259092", "bodyText": "Could accept Iterable<LanguageRange>?", "author": "trustin", "createdAt": "2020-11-19T22:55:23Z", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultRequestHeadersBuilder.java", "diffHunk": "@@ -112,4 +118,31 @@ public RequestHeadersBuilder authority(String authority) {\n         setters().authority(authority);\n         return this;\n     }\n+\n+    @Override\n+    public List<LanguageRange> acceptLanguages() {\n+        final HttpHeadersBase getters = getters();\n+        if (getters != null) {\n+            return getters.acceptLanguages();\n+        }\n+        return HttpHeadersBase.ACCEPT_LANGUAGE_WILDCARD;\n+    }\n+\n+    @Override\n+    public RequestHeadersBuilder acceptLanguages(List<LanguageRange> acceptLanguages) {", "originalCommit": "43f6190b175beeed88e29e90d2841bc703b16de7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5MDYzNQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r527490635", "bodyText": "Fixed.", "author": "tobias-", "createdAt": "2020-11-20T07:33:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1OTA5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI2MDkwMA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r527260900", "bodyText": "This matches -> Matches", "author": "trustin", "createdAt": "2020-11-19T22:59:26Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequest.java", "diffHunk": "@@ -318,6 +321,31 @@ default MediaType contentType() {\n         return headers().contentType();\n     }\n \n+    /**\n+     * Returns a list of {@link LanguageRange}s that are specified in {@link HttpHeaderNames#ACCEPT_LANGUAGE}\n+     * in the order of client-side preferences. If the client does not send the header, this will contain only a\n+     * wild card {@link LanguageRange}.\n+     */\n+    default List<LanguageRange> acceptLanguages() {\n+        return headers().acceptLanguages();\n+    }\n+\n+    /**\n+     * This matches the {@link Locale}s supported by the server to", "originalCommit": "43f6190b175beeed88e29e90d2841bc703b16de7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI2MTc3NA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r527261774", "bodyText": "Iterable could be more useful.", "author": "trustin", "createdAt": "2020-11-19T23:00:53Z", "path": "core/src/main/java/com/linecorp/armeria/common/RequestHeadersBuilder.java", "diffHunk": "@@ -90,6 +92,13 @@ default RequestHeadersBuilder authority(Endpoint endpoint) {\n         return authority(endpoint.authority());\n     }\n \n+    /**\n+     * Sets the {@code \"accept-language\"} header.\n+     * @param acceptedLanguages the accepted languages.\n+     * @return {@code this}\n+     */\n+    RequestHeadersBuilder acceptLanguages(List<LanguageRange> acceptedLanguages);", "originalCommit": "43f6190b175beeed88e29e90d2841bc703b16de7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI2NDM2Ng==", "url": "https://github.com/line/armeria/pull/3177#discussion_r527264366", "bodyText": "What should we do when we see a bad header? Raise an exception or silently ignore? Other methods, such as contentType(), ignore bad values. When all header values are invalid, should we treat it as ACCEPT_LANGUAGE_WILDCARD?", "author": "trustin", "createdAt": "2020-11-19T23:07:03Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java", "diffHunk": "@@ -174,6 +184,32 @@ URI uri() {\n         }\n     }\n \n+    @Nullable\n+    Locale selectLocale(Collection<Locale> supportedLocales) {\n+        requireNonNull(supportedLocales, \"supportedLocales\");\n+        return acceptLanguages()\n+                .stream()\n+                .flatMap(it -> Locale.filter(ImmutableList.of(it), supportedLocales).stream())\n+                .findFirst()\n+                .orElse(null);\n+    }\n+\n+    List<LanguageRange> acceptLanguages() {\n+        final List<String> acceptHeaders = getAll(HttpHeaderNames.ACCEPT_LANGUAGE);\n+        if (acceptHeaders.isEmpty()) {\n+            // No 'Accept-Language' header means accepting everything.\n+            return ACCEPT_LANGUAGE_WILDCARD;\n+        }\n+\n+        final List<LanguageRange> acceptLanguages = new ArrayList<>(4);\n+        for (String acceptHeader : acceptHeaders) {\n+            acceptLanguages.addAll(LanguageRange.parse(acceptHeader));", "originalCommit": "43f6190b175beeed88e29e90d2841bc703b16de7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NjcyMg==", "url": "https://github.com/line/armeria/pull/3177#discussion_r527496722", "bodyText": "I have just let the exception fall through, mostly by accident. I know for an annoying fact that e.g. Jersey lets the exception even raises the exception itself. I think the behaviour should be the same as contentType(), ie swallow the exception.\nFixed.", "author": "tobias-", "createdAt": "2020-11-20T07:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI2NDM2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzNjczNw==", "url": "https://github.com/line/armeria/pull/3177#discussion_r527536737", "bodyText": "Added test as well.", "author": "tobias-", "createdAt": "2020-11-20T08:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI2NDM2Ng=="}], "type": "inlineReview"}, {"oid": "bc4d7297421583cac41a8779a7ea1abc39da4cbf", "url": "https://github.com/line/armeria/commit/bc4d7297421583cac41a8779a7ea1abc39da4cbf", "message": "Add Accept-Language parsing and prioritizing\n\nMotivation:\n\nAccept-Language is a client supplied header detailing what locales the\nclient user prefers and the weight of the preference. It's really\nmostly useful to detect the default language of the site.\n\nModifications:\n\nAdded method `acceptLanguages()` and `getLocale(supportedLocales)` to\n`RoutingContext` and all it's subclasses.\n\nAdd a lazy init property for `acceptLanguages()` to avoid parsing\nunless needed.\n\nResult:\n\nCloses #3179", "committedDate": "2020-11-20T08:18:13Z", "type": "forcePushed"}, {"oid": "0475efbb7d5b8e2f983aee2fa7c1cae85d8d21c6", "url": "https://github.com/line/armeria/commit/0475efbb7d5b8e2f983aee2fa7c1cae85d8d21c6", "message": "Add Accept-Language parsing and prioritizing\n\nMotivation:\n\nAccept-Language is a client supplied header detailing what locales the\nclient user prefers and the weight of the preference. It's really\nmostly useful to detect the default language of the site.\n\nModifications:\n\nAdded method `acceptLanguages()` and `getLocale(supportedLocales)` to\n`RoutingContext` and all it's subclasses.\n\nAdd a lazy init property for `acceptLanguages()` to avoid parsing\nunless needed.\n\nResult:\n\nCloses #3179", "committedDate": "2020-11-20T08:32:02Z", "type": "forcePushed"}, {"oid": "34b738ec4c9182305e5df22121662e133a20dc82", "url": "https://github.com/line/armeria/commit/34b738ec4c9182305e5df22121662e133a20dc82", "message": "Add Accept-Language parsing and prioritizing\n\nMotivation:\n\nAccept-Language is a client supplied header detailing what locales the\nclient user prefers and the weight of the preference. It's really\nmostly useful to detect the default language of the site.\n\nModifications:\n\nAdded method `acceptLanguages()` and `getLocale(supportedLocales)` to\n`RoutingContext` and all it's subclasses.\n\nAdd a lazy init property for `acceptLanguages()` to avoid parsing\nunless needed.\n\nResult:\n\nCloses #3179", "committedDate": "2020-11-20T08:57:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MjIzOA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r528682238", "bodyText": "Is it better to add varargs version? \ud83e\uddd0", "author": "ikhoon", "createdAt": "2020-11-23T12:54:20Z", "path": "core/src/main/java/com/linecorp/armeria/common/RequestHeadersBuilder.java", "diffHunk": "@@ -90,6 +91,13 @@ default RequestHeadersBuilder authority(Endpoint endpoint) {\n         return authority(endpoint.authority());\n     }\n \n+    /**\n+     * Sets the {@code \"accept-language\"} header.\n+     * @param acceptedLanguages the accepted languages.\n+     * @return {@code this}\n+     */\n+    RequestHeadersBuilder acceptLanguages(Iterable<LanguageRange> acceptedLanguages);", "originalCommit": "34b738ec4c9182305e5df22121662e133a20dc82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNjY0Nw==", "url": "https://github.com/line/armeria/pull/3177#discussion_r528706647", "bodyText": "I wouldn't want that, but YMMV. I have a list of languages that I support that I check against. I can ofc add another one, but imho that would be api bloat. It's not that hard to do Arrays.asList()/ImmutableList.of(), but unrolling a list is not as fun.", "author": "tobias-", "createdAt": "2020-11-23T13:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MjIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMDc4NA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r529220784", "bodyText": "Agreed. We can easily add varags later if users want.", "author": "ikhoon", "createdAt": "2020-11-24T05:58:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MjIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2MDE1NA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r530160154", "bodyText": "How about adding now for consistency? \ud83d\ude4f You can use ImmutableList.of().", "author": "trustin", "createdAt": "2020-11-25T07:36:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MjIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzNTIwNQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r530235205", "bodyText": "sigh github... When I see the comment in context it was clear.. I'll fix", "author": "tobias-", "createdAt": "2020-11-25T09:43:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MjIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MzEzMA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r528683130", "bodyText": "nit: Indent \ud83d\ude09\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     or if there is no header.\n          \n          \n            \n                 *         or if there is no header.", "author": "ikhoon", "createdAt": "2020-11-23T12:55:44Z", "path": "core/src/main/java/com/linecorp/armeria/common/RequestHeaderGetters.java", "diffHunk": "@@ -62,4 +66,29 @@\n      */\n     @Nullable\n     String authority();\n+\n+    /**\n+     * Returns a list of {@link LanguageRange}s that are specified in {@link HttpHeaderNames#ACCEPT_LANGUAGE}\n+     * in the order of client preferences.\n+     * @return All {@link LanguageRange}s of all matching headers or {@code null} if there is a parsing error\n+     *     or if there is no header.", "originalCommit": "34b738ec4c9182305e5df22121662e133a20dc82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNzkxMQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r528707911", "bodyText": "oh.. it's 8. I'll fix", "author": "tobias-", "createdAt": "2020-11-23T13:37:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MzEzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MzcwOA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r528683708", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return The best matching locale or null if no locale matches.\n          \n          \n            \n                 * @return the best matching {@link Locale} or {@code null} if no locale matches.", "author": "ikhoon", "createdAt": "2020-11-23T12:56:43Z", "path": "core/src/main/java/com/linecorp/armeria/common/RequestHeaderGetters.java", "diffHunk": "@@ -62,4 +66,29 @@\n      */\n     @Nullable\n     String authority();\n+\n+    /**\n+     * Returns a list of {@link LanguageRange}s that are specified in {@link HttpHeaderNames#ACCEPT_LANGUAGE}\n+     * in the order of client preferences.\n+     * @return All {@link LanguageRange}s of all matching headers or {@code null} if there is a parsing error\n+     *     or if there is no header.\n+     */\n+    @Nullable\n+    List<LanguageRange> acceptLanguages();\n+\n+    /**\n+     * Matches the {@link Locale}s supported by the server to\n+     * the {@link HttpHeaderNames#ACCEPT_LANGUAGE} and returns the best match\n+     * according to client preference. It does this via <s>Basic Filter</s>ing each\n+     * {@link LanguageRange} and picking the first match. This is the \"classic\"\n+     * algorithm described in\n+     * <a href=\"https://tools.ietf.org/html/rfc2616#section-14.4\">RFC2616 Accept-Language (obsoleted)</a>\n+     * and also referenced in <a href=\"https://tools.ietf.org/html/rfc7231#section-5.3.5\">RFC7231 Accept-Language</a>.\n+     * <p/>\n+     * See also {@link Locale#lookup} for another algorithm.\n+     * @param supportedLocales a {@link Collection} of locales supported by the server.\n+     * @return The best matching locale or null if no locale matches.", "originalCommit": "34b738ec4c9182305e5df22121662e133a20dc82", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4NDM2NQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r528684365", "bodyText": "Ditto", "author": "ikhoon", "createdAt": "2020-11-23T12:57:48Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequest.java", "diffHunk": "@@ -318,6 +321,31 @@ default MediaType contentType() {\n         return headers().contentType();\n     }\n \n+    /**\n+     * Returns a list of {@link LanguageRange}s that are specified in {@link HttpHeaderNames#ACCEPT_LANGUAGE}\n+     * in the order of client-side preferences. If the client does not send the header, this will contain only a\n+     * wild card {@link LanguageRange}.\n+     */\n+    default List<LanguageRange> acceptLanguages() {\n+        return headers().acceptLanguages();\n+    }\n+\n+    /**\n+     * Matches the {@link Locale}s supported by the server to\n+     * the {@link HttpHeaderNames#ACCEPT_LANGUAGE} and returning the best match\n+     * according to client preference. It does this via <s>Basic Filter</s>ing each\n+     * {@link LanguageRange} and picking the first match. This is the \"classic\"\n+     * algorithm described in\n+     * <a href=\"https://tools.ietf.org/html/rfc2616#section-14.4\">RFC2616 Accept-Language (obsoleted)</a>\n+     * and also referenced in <a href=\"https://tools.ietf.org/html/rfc7231#section-5.3.5\">RFC7231 Accept-Language</a>.\n+     * @param supportedLocales a {@link Collection} of locales supported by the server.\n+     * @return The best matching locale or null if no locale matches.", "originalCommit": "34b738ec4c9182305e5df22121662e133a20dc82", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5MDU3Ng==", "url": "https://github.com/line/armeria/pull/3177#discussion_r528690576", "bodyText": "nit: Revert?", "author": "ikhoon", "createdAt": "2020-11-23T13:08:46Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java", "diffHunk": "@@ -174,11 +181,46 @@ URI uri() {\n         }\n     }\n \n+    @Nullable\n+    Locale selectLocale(Collection<Locale> supportedLocales) {\n+        requireNonNull(supportedLocales, \"supportedLocales\");\n+        final List<LanguageRange> languageRanges = acceptLanguages();\n+        if (languageRanges == null) {\n+            return null;\n+        }\n+        return languageRanges\n+                .stream()\n+                .flatMap(it -> Locale.filter(ImmutableList.of(it), supportedLocales).stream())\n+                .findFirst()\n+                .orElse(null);\n+    }\n+\n+    @Nullable\n+    List<LanguageRange> acceptLanguages() {\n+        final List<String> acceptHeaders = getAll(HttpHeaderNames.ACCEPT_LANGUAGE);\n+        if (acceptHeaders.isEmpty()) {\n+            return null;\n+        }\n+\n+        try {\n+            final List<LanguageRange> acceptLanguages = new ArrayList<>(4);\n+            for (String acceptHeader : acceptHeaders) {\n+                acceptLanguages.addAll(LanguageRange.parse(acceptHeader));\n+            }\n+            acceptLanguages.sort(comparingDouble(LanguageRange::getWeight).reversed());\n+\n+            return ImmutableList.copyOf(acceptLanguages);\n+        } catch (IllegalArgumentException e) {\n+            // If any port of any of the headers is ill-formed\n+            return null;\n+        }\n+    }\n+\n     HttpMethod method() {\n         final String methodStr = get(HttpHeaderNames.METHOD);\n         checkState(methodStr != null, \":method header does not exist.\");\n         return HttpMethod.isSupported(methodStr) ? HttpMethod.valueOf(methodStr)\n-                                                 : HttpMethod.UNKNOWN;\n+                : HttpMethod.UNKNOWN;", "originalCommit": "34b738ec4c9182305e5df22121662e133a20dc82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcxMDE1Ng==", "url": "https://github.com/line/armeria/pull/3177#discussion_r528710156", "bodyText": "I haven't changed it in 34b738e!? (latest pushed) Something wrong with Github?", "author": "tobias-", "createdAt": "2020-11-23T13:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5MDU3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTkzMw==", "url": "https://github.com/line/armeria/pull/3177#discussion_r529221933", "bodyText": "Maybe your IDE automatically formats the part unexpectedly.\nI can see the diff here.\nLet me fix the indent. :-)", "author": "ikhoon", "createdAt": "2020-11-24T06:02:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5MDU3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5MjQ2NA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r528692464", "bodyText": "Global comment: Could you use assertThat of Assert4J? We prefer Assert4J when asserting in tests.\nhttps://armeria.dev/community/developer-guide#use-assert4j-instead-of-junits-assertion-api", "author": "ikhoon", "createdAt": "2020-11-23T13:11:55Z", "path": "core/src/test/java/com/linecorp/armeria/common/DefaultRequestHeadersBuilderTest.java", "diffHunk": "@@ -142,6 +148,120 @@ void schemeFromSessionProtocol() {\n                 .isInstanceOf(IllegalArgumentException.class);\n     }\n \n+    @Test\n+    void testAcceptLanguageMultiHeader() {\n+        final RequestHeaders headers = RequestHeaders\n+                .builder()\n+                .path(\"/\")\n+                .method(HttpMethod.GET)\n+                .add(HttpHeaderNames.ACCEPT_LANGUAGE,\n+                        \"de-us ;q=0.9, *;q=0.8\",\n+                        \"en;q=0.95, en-US;q=0.98\"\n+                )\n+                .build();\n+        final List<LanguageRange> acceptLanguages = headers.acceptLanguages();\n+        assertEquals(\n+                ImmutableList.of(\n+                        new LanguageRange(\"en-US\", 0.98),\n+                        new LanguageRange(\"en\", 0.95),\n+                        new LanguageRange(\"de-us\", 0.9),\n+                        new LanguageRange(\"*\", 0.8)\n+                ),\n+                acceptLanguages\n+        );", "originalCommit": "34b738ec4c9182305e5df22121662e133a20dc82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcyNDAwMA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r528724000", "bodyText": "Oops. Fixed.", "author": "tobias-", "createdAt": "2020-11-23T14:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5MjQ2NA=="}], "type": "inlineReview"}, {"oid": "2c1a676bcb222d34b80e417fbd3d62b832a55d48", "url": "https://github.com/line/armeria/commit/2c1a676bcb222d34b80e417fbd3d62b832a55d48", "message": "Add Accept-Language parsing and prioritizing\n\nMotivation:\n\nAccept-Language is a client supplied header detailing what locales the\nclient user prefers and the weight of the preference. It's really\nmostly useful to detect the default language of the site.\n\nModifications:\n\nAdded method `acceptLanguages()` and `getLocale(supportedLocales)` to\n`RoutingContext` and all it's subclasses.\n\nAdd a lazy init property for `acceptLanguages()` to avoid parsing\nunless needed.\n\nResult:\n\nCloses #3179", "committedDate": "2020-11-23T14:02:24Z", "type": "commit"}, {"oid": "2c1a676bcb222d34b80e417fbd3d62b832a55d48", "url": "https://github.com/line/armeria/commit/2c1a676bcb222d34b80e417fbd3d62b832a55d48", "message": "Add Accept-Language parsing and prioritizing\n\nMotivation:\n\nAccept-Language is a client supplied header detailing what locales the\nclient user prefers and the weight of the preference. It's really\nmostly useful to detect the default language of the site.\n\nModifications:\n\nAdded method `acceptLanguages()` and `getLocale(supportedLocales)` to\n`RoutingContext` and all it's subclasses.\n\nAdd a lazy init property for `acceptLanguages()` to avoid parsing\nunless needed.\n\nResult:\n\nCloses #3179", "committedDate": "2020-11-23T14:02:24Z", "type": "forcePushed"}, {"oid": "e4a280c3d70a39b57889a44493ed69758ac42877", "url": "https://github.com/line/armeria/commit/e4a280c3d70a39b57889a44493ed69758ac42877", "message": "Format", "committedDate": "2020-11-24T06:39:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1ODMzMg==", "url": "https://github.com/line/armeria/pull/3177#discussion_r530158332", "bodyText": "What would be the sensible behavior when acceptLanguages is empty? \ud83e\udd14", "author": "trustin", "createdAt": "2020-11-25T07:32:47Z", "path": "core/src/main/java/com/linecorp/armeria/common/DefaultRequestHeadersBuilder.java", "diffHunk": "@@ -112,4 +120,29 @@ public RequestHeadersBuilder authority(String authority) {\n         setters().authority(authority);\n         return this;\n     }\n+\n+    @Override\n+    @Nullable\n+    public List<LanguageRange> acceptLanguages() {\n+        final HttpHeadersBase getters = getters();\n+        return getters != null ? getters.acceptLanguages() : null;\n+    }\n+\n+    @Override\n+    public RequestHeadersBuilder acceptLanguages(Iterable<LanguageRange> acceptLanguages) {\n+        requireNonNull(acceptLanguages, \"acceptLanguages\");\n+        final String acceptLanguagesValue = Streams\n+                .stream(acceptLanguages)\n+                .map(it -> (it.getWeight() == 1.0d) ? it.getRange() : it.getRange() + \";q=\" + it.getWeight())\n+                .collect(Collectors.joining(\", \"));\n+        set(HttpHeaderNames.ACCEPT_LANGUAGE, acceptLanguagesValue);", "originalCommit": "e4a280c3d70a39b57889a44493ed69758ac42877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIxNjM1MQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r530216351", "bodyText": "No idea tbh.I'm inclined to say Preconditions.checkArgument(!acceptLanguages.isEmpty, \"acceptLanguages cannot be empty\"). How do you feel about that @trustin ?", "author": "tobias-", "createdAt": "2020-11-25T09:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1ODMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzMDM0NQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r530230345", "bodyText": "SGTM", "author": "trustin", "createdAt": "2020-11-25T09:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1ODMzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1OTA1OA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r530159058", "bodyText": "I still think we should accept Iterable<Locale> for users. We could convert it into a Collection when it's not.\n\nDitto for RequestHeaders\n\n\nWould you mind adding selectLocale(Locale...) as well? I know you don't really like it but all our methods provide a varargs version \ud83d\ude05 You can use ImmutableList.of().", "author": "trustin", "createdAt": "2020-11-25T07:34:26Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpRequest.java", "diffHunk": "@@ -318,6 +321,32 @@ default MediaType contentType() {\n         return headers().contentType();\n     }\n \n+    /**\n+     * Returns a list of {@link LanguageRange}s that are specified in {@link HttpHeaderNames#ACCEPT_LANGUAGE}\n+     * in the order of client-side preferences. If the client does not send the header, this will contain only a\n+     * wild card {@link LanguageRange}.\n+     */\n+    @Nullable\n+    default List<LanguageRange> acceptLanguages() {\n+        return headers().acceptLanguages();\n+    }\n+\n+    /**\n+     * Matches the {@link Locale}s supported by the server to\n+     * the {@link HttpHeaderNames#ACCEPT_LANGUAGE} and returning the best match\n+     * according to client preference. It does this via <s>Basic Filter</s>ing each\n+     * {@link LanguageRange} and picking the first match. This is the \"classic\"\n+     * algorithm described in\n+     * <a href=\"https://tools.ietf.org/html/rfc2616#section-14.4\">RFC2616 Accept-Language (obsoleted)</a>\n+     * and also referenced in <a href=\"https://tools.ietf.org/html/rfc7231#section-5.3.5\">RFC7231 Accept-Language</a>.\n+     * @param supportedLocales a {@link Collection} of locales supported by the server.\n+     * @return The best matching {@link Locale} or {@code null} if no {@link Locale} matches.\n+     */\n+    @Nullable\n+    default Locale selectLocale(Collection<Locale> supportedLocales) {", "originalCommit": "e4a280c3d70a39b57889a44493ed69758ac42877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzMTU3NQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r530231575", "bodyText": "Like I said, I misinterpreted that comment as a question not a very polite order \ud83d\ude04", "author": "tobias-", "createdAt": "2020-11-25T09:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1OTA1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2MDYzOQ==", "url": "https://github.com/line/armeria/pull/3177#discussion_r530160639", "bodyText": "How about checking supportedLocales is empty before calling acceptLanguages()? If it's empty we don't need to parse the header.", "author": "trustin", "createdAt": "2020-11-25T07:38:10Z", "path": "core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java", "diffHunk": "@@ -174,6 +181,41 @@ URI uri() {\n         }\n     }\n \n+    @Nullable\n+    List<LanguageRange> acceptLanguages() {\n+        final List<String> acceptHeaders = getAll(HttpHeaderNames.ACCEPT_LANGUAGE);\n+        if (acceptHeaders.isEmpty()) {\n+            return null;\n+        }\n+\n+        try {\n+            final List<LanguageRange> acceptLanguages = new ArrayList<>(4);\n+            for (String acceptHeader : acceptHeaders) {\n+                acceptLanguages.addAll(LanguageRange.parse(acceptHeader));\n+            }\n+            acceptLanguages.sort(comparingDouble(LanguageRange::getWeight).reversed());\n+\n+            return ImmutableList.copyOf(acceptLanguages);\n+        } catch (IllegalArgumentException e) {\n+            // If any port of any of the headers is ill-formed\n+            return null;\n+        }\n+    }\n+\n+    @Nullable\n+    Locale selectLocale(Collection<Locale> supportedLocales) {\n+        requireNonNull(supportedLocales, \"supportedLocales\");\n+        final List<LanguageRange> languageRanges = acceptLanguages();\n+        if (languageRanges == null || supportedLocales.isEmpty()) {", "originalCommit": "e4a280c3d70a39b57889a44493ed69758ac42877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwNDMzMg==", "url": "https://github.com/line/armeria/pull/3177#discussion_r530204332", "bodyText": "Will do", "author": "tobias-", "createdAt": "2020-11-25T08:57:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2MDYzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIxNTUxOA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r530215518", "bodyText": "I don't understand the following? If you mean I should add Locale.... If so, absolutely. It was just a cultural misunderstanding. I sincerely thought it was a question where @ikhoon wanted my opinion, not a light version of \"please do it this way\". \ud83d\ude06\n\nHow about adding now for consistency? \ud83d\ude4f You can use ImmutableList.of().", "author": "tobias-", "createdAt": "2020-11-25T09:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2MDYzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIxNjkxNA==", "url": "https://github.com/line/armeria/pull/3177#discussion_r530216914", "bodyText": "I'm not @ikhoon, so I'm not 100% sure, but I guess he thought he'll just add it later by himself since he is such a nice guy who doesn't want to waste your time doing a tedious job. \ud83d\ude09", "author": "trustin", "createdAt": "2020-11-25T09:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2MDYzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0ODY4Mg==", "url": "https://github.com/line/armeria/pull/3177#discussion_r530248682", "bodyText": "I also somehow missed his reply >_<. Sorry ikhoon.", "author": "tobias-", "createdAt": "2020-11-25T10:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2MDYzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3NTY1Mg==", "url": "https://github.com/line/armeria/pull/3177#discussion_r530375652", "bodyText": "I also somehow missed his reply >_<. Sorry ikhoon.\n\nNo problem. \ud83e\udd23\ud83e\udd23\ud83e\udd23", "author": "ikhoon", "createdAt": "2020-11-25T13:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2MDYzOQ=="}], "type": "inlineReview"}, {"oid": "2d197d43501d19a05d8830a4ba05dd8692a6d300", "url": "https://github.com/line/armeria/commit/2d197d43501d19a05d8830a4ba05dd8692a6d300", "message": "Fix comments by @trustin", "committedDate": "2020-11-25T09:32:47Z", "type": "commit"}, {"oid": "0936219f7d0dfead3cbd09e1c4a98d30e2a1b1b2", "url": "https://github.com/line/armeria/commit/0936219f7d0dfead3cbd09e1c4a98d30e2a1b1b2", "message": "Fix more of trustins comments", "committedDate": "2020-11-25T09:49:42Z", "type": "commit"}, {"oid": "82e8f9da79015c54c8b204f638d0b32c2dac044d", "url": "https://github.com/line/armeria/commit/82e8f9da79015c54c8b204f638d0b32c2dac044d", "message": "Try to only use the same object as much as possible", "committedDate": "2020-11-25T09:53:15Z", "type": "commit"}, {"oid": "64f7aa7c926017d6fba06c623883907ea5eff389", "url": "https://github.com/line/armeria/commit/64f7aa7c926017d6fba06c623883907ea5eff389", "message": "requireNonNull", "committedDate": "2020-11-26T04:19:40Z", "type": "commit"}, {"oid": "1c2bc813a100384ca257713fa3e02c2ae8edd663", "url": "https://github.com/line/armeria/commit/1c2bc813a100384ca257713fa3e02c2ae8edd663", "message": "requireNonNull", "committedDate": "2020-11-26T04:22:10Z", "type": "commit"}, {"oid": "733d94fc5b7d6781936c347391c07dc0bb5fd565", "url": "https://github.com/line/armeria/commit/733d94fc5b7d6781936c347391c07dc0bb5fd565", "message": "requireNonNull", "committedDate": "2020-11-26T04:23:44Z", "type": "commit"}, {"oid": "bd6a62eaec553e895f8871002111893cbd3813a2", "url": "https://github.com/line/armeria/commit/bd6a62eaec553e895f8871002111893cbd3813a2", "message": "Merge branch 'master' into accept_language_parsing", "committedDate": "2020-11-26T04:26:07Z", "type": "commit"}, {"oid": "aec81c9513cffa67ed62dbf16e53ad348de9bed2", "url": "https://github.com/line/armeria/commit/aec81c9513cffa67ed62dbf16e53ad348de9bed2", "message": "Checkstyle", "committedDate": "2020-11-26T04:55:26Z", "type": "commit"}]}