{"pr_number": 2823, "pr_title": "Add release notes for 0.99.7 / Do not lazy-load but redirect", "pr_createdAt": "2020-06-22T06:28:49Z", "pr_url": "https://github.com/line/armeria/pull/2823", "timeline": [{"oid": "112740f73e489e130cc54aeef0584eb546cd6632", "url": "https://github.com/line/armeria/commit/112740f73e489e130cc54aeef0584eb546cd6632", "message": "Add release notes for 0.99.7 / Do not lazy-load but redirect", "committedDate": "2020-06-22T06:27:44Z", "type": "commit"}, {"oid": "1acf6b8e2c51198fc4062515cf8e1cdd6541ebe4", "url": "https://github.com/line/armeria/commit/1acf6b8e2c51198fc4062515cf8e1cdd6541ebe4", "message": "eslint", "committedDate": "2020-06-22T06:30:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NDY2Nw==", "url": "https://github.com/line/armeria/pull/2823#discussion_r443344667", "bodyText": "Should mention the removal of some of the unsafe APIs in favor of the new one.", "author": "anuraaga", "createdAt": "2020-06-22T06:39:20Z", "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,243 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData>) in\n+  a relatively safer way. #2448\n+  - See <type://PooledHttpData>, <type://PooledWebClient>, <type://PooledHttpRequest> and\n+    <type://PooledHttpResponse> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Cleaned up minor issues reported by [errorprone](https://errorprone.info/). #2772\n+- Made some exception messages more user-friendly. #2751\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- It's now allowed to specify an absolute URL *only when* an <type://WebClient> was created *without* a base\n+  URL. #2757\n+  ```java\n+  WebClient clientWithoutBaseUrl = WebClient.of();\n+  WebClient clientWithBaseUrl = WebClient.of(\"https://example.com/\");\n+  // Good\n+  clientWithBaseUrl.get(\"/bar\");\n+  clientWithoutBaseUrl.get(\"https://foo.com/\");\n+  // Bad\n+  clientWithBaseUrl.get(\"https://foo.com/\");\n+  clientWithoutBaseUrl.get(\"/bar\");\n+  ```\n+- Boolean parameter conversion became more strict in annotated services. #2767 #2774\n+  - Only `true`, `false`, `1` and `0` are accepted. Other values will cause a `400 Bad Request` response.\n+- <type://DocService> web UI now shows the 'request body' field for `DELETE` and `PATCH` methods in the debug\n+  form. #2756 #2819\n+- <type://JacksonRequestConverterFunction> now handles the case where the target type has a type parameter,\n+  e.g. `List<Long>`. #2769 #2779\n+- Fixed a bug where the current <type://ServiceRequestContext> is not pushed when invoking\n+  <type://ResponseConverterFunction#convertResponse(ServiceRequestContext,ResponseHeaders,Object,HttpHeaders)>.\n+  #2789\n+- <type://RequestContextExportingAppender> now handles the `<exports />` tag correctly. #2781\n+- Fixed a bug where some Reactive Streams `Subscriber` implementations violate the specification. #2815\n+- You no longer get sporadic <type://WriteTimeoutException> from proxied connections. #2801 #2805\n+- You no longer get a <type://CancelledSubscriptionException> unnecessarily when using\n+  <type://PublisherBasedStreamMessage>. #2797\n+- You no longer get sporadic `EncoderException`s from HTTP/1 connections. #2765\n+- It's now disallowed to specify the following headers in gRPC `Metadata`. #2718\n+  - `:status`\n+  - `grpc-message`\n+  - `grpc-status`\n+  - `armeria.grpc.ThrowableProto-bin`\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- <type://AbstractUnwrappable#delegate()> has been deprecated in favor of <type://Unwrappable#unwrap()>.\n+\n+## \u2622\ufe0f Breaking changes", "originalCommit": "1acf6b8e2c51198fc4062515cf8e1cdd6541ebe4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM1MjYwMw==", "url": "https://github.com/line/armeria/pull/2823#discussion_r443352603", "bodyText": "Fixed. Let me know if we need to add more. \ud83d\ude47", "author": "trustin", "createdAt": "2020-06-22T06:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NDY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NTQ2Mg==", "url": "https://github.com/line/armeria/pull/2823#discussion_r443345462", "bodyText": "nit: an -> a", "author": "minwoox", "createdAt": "2020-06-22T06:41:40Z", "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,243 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData>) in\n+  a relatively safer way. #2448\n+  - See <type://PooledHttpData>, <type://PooledWebClient>, <type://PooledHttpRequest> and\n+    <type://PooledHttpResponse> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Cleaned up minor issues reported by [errorprone](https://errorprone.info/). #2772\n+- Made some exception messages more user-friendly. #2751\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- It's now allowed to specify an absolute URL *only when* an <type://WebClient> was created *without* a base", "originalCommit": "1acf6b8e2c51198fc4062515cf8e1cdd6541ebe4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NjkxOQ==", "url": "https://github.com/line/armeria/pull/2823#discussion_r443346919", "bodyText": "Should remove ` after >", "author": "minwoox", "createdAt": "2020-06-22T06:45:38Z", "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,243 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData>) in\n+  a relatively safer way. #2448\n+  - See <type://PooledHttpData>, <type://PooledWebClient>, <type://PooledHttpRequest> and\n+    <type://PooledHttpResponse> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Cleaned up minor issues reported by [errorprone](https://errorprone.info/). #2772\n+- Made some exception messages more user-friendly. #2751\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- It's now allowed to specify an absolute URL *only when* an <type://WebClient> was created *without* a base\n+  URL. #2757\n+  ```java\n+  WebClient clientWithoutBaseUrl = WebClient.of();\n+  WebClient clientWithBaseUrl = WebClient.of(\"https://example.com/\");\n+  // Good\n+  clientWithBaseUrl.get(\"/bar\");\n+  clientWithoutBaseUrl.get(\"https://foo.com/\");\n+  // Bad\n+  clientWithBaseUrl.get(\"https://foo.com/\");\n+  clientWithoutBaseUrl.get(\"/bar\");\n+  ```\n+- Boolean parameter conversion became more strict in annotated services. #2767 #2774\n+  - Only `true`, `false`, `1` and `0` are accepted. Other values will cause a `400 Bad Request` response.\n+- <type://DocService> web UI now shows the 'request body' field for `DELETE` and `PATCH` methods in the debug\n+  form. #2756 #2819\n+- <type://JacksonRequestConverterFunction> now handles the case where the target type has a type parameter,\n+  e.g. `List<Long>`. #2769 #2779\n+- Fixed a bug where the current <type://ServiceRequestContext> is not pushed when invoking\n+  <type://ResponseConverterFunction#convertResponse(ServiceRequestContext,ResponseHeaders,Object,HttpHeaders)>.\n+  #2789\n+- <type://RequestContextExportingAppender> now handles the `<exports />` tag correctly. #2781\n+- Fixed a bug where some Reactive Streams `Subscriber` implementations violate the specification. #2815\n+- You no longer get sporadic <type://WriteTimeoutException> from proxied connections. #2801 #2805\n+- You no longer get a <type://CancelledSubscriptionException> unnecessarily when using\n+  <type://PublisherBasedStreamMessage>. #2797\n+- You no longer get sporadic `EncoderException`s from HTTP/1 connections. #2765\n+- It's now disallowed to specify the following headers in gRPC `Metadata`. #2718\n+  - `:status`\n+  - `grpc-message`\n+  - `grpc-status`\n+  - `armeria.grpc.ThrowableProto-bin`\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- <type://AbstractUnwrappable#delegate()> has been deprecated in favor of <type://Unwrappable#unwrap()>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- You can specify an absolute URL *only when* a <type://WebClient> was created *without* a base URL.\n+  It was previously allowed to specify an absolute URL even when created with a base URL. #2757\n+- The method signature of\n+  <type://RequestConverterFunction#convertRequest(ServiceRequestContext,AggregatedHttpRequest,Class,ParameterizedType)>\n+  has been changed to support parameterized types. #2779\n+- The default <type://MeterIdPrefixFunction>` returned by <type://MeterIdPrefixFunction#ofDefault(String)>", "originalCommit": "1acf6b8e2c51198fc4062515cf8e1cdd6541ebe4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NzcwNQ==", "url": "https://github.com/line/armeria/pull/2823#discussion_r443347705", "bodyText": "We can remove this sentence because the classes aren't published in the previous version.", "author": "minwoox", "createdAt": "2020-06-22T06:47:31Z", "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,243 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData>) in\n+  a relatively safer way. #2448\n+  - See <type://PooledHttpData>, <type://PooledWebClient>, <type://PooledHttpRequest> and\n+    <type://PooledHttpResponse> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Cleaned up minor issues reported by [errorprone](https://errorprone.info/). #2772\n+- Made some exception messages more user-friendly. #2751\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- It's now allowed to specify an absolute URL *only when* an <type://WebClient> was created *without* a base\n+  URL. #2757\n+  ```java\n+  WebClient clientWithoutBaseUrl = WebClient.of();\n+  WebClient clientWithBaseUrl = WebClient.of(\"https://example.com/\");\n+  // Good\n+  clientWithBaseUrl.get(\"/bar\");\n+  clientWithoutBaseUrl.get(\"https://foo.com/\");\n+  // Bad\n+  clientWithBaseUrl.get(\"https://foo.com/\");\n+  clientWithoutBaseUrl.get(\"/bar\");\n+  ```\n+- Boolean parameter conversion became more strict in annotated services. #2767 #2774\n+  - Only `true`, `false`, `1` and `0` are accepted. Other values will cause a `400 Bad Request` response.\n+- <type://DocService> web UI now shows the 'request body' field for `DELETE` and `PATCH` methods in the debug\n+  form. #2756 #2819\n+- <type://JacksonRequestConverterFunction> now handles the case where the target type has a type parameter,\n+  e.g. `List<Long>`. #2769 #2779\n+- Fixed a bug where the current <type://ServiceRequestContext> is not pushed when invoking\n+  <type://ResponseConverterFunction#convertResponse(ServiceRequestContext,ResponseHeaders,Object,HttpHeaders)>.\n+  #2789\n+- <type://RequestContextExportingAppender> now handles the `<exports />` tag correctly. #2781\n+- Fixed a bug where some Reactive Streams `Subscriber` implementations violate the specification. #2815\n+- You no longer get sporadic <type://WriteTimeoutException> from proxied connections. #2801 #2805\n+- You no longer get a <type://CancelledSubscriptionException> unnecessarily when using\n+  <type://PublisherBasedStreamMessage>. #2797\n+- You no longer get sporadic `EncoderException`s from HTTP/1 connections. #2765\n+- It's now disallowed to specify the following headers in gRPC `Metadata`. #2718\n+  - `:status`\n+  - `grpc-message`\n+  - `grpc-status`\n+  - `armeria.grpc.ThrowableProto-bin`\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- <type://AbstractUnwrappable#delegate()> has been deprecated in favor of <type://Unwrappable#unwrap()>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- You can specify an absolute URL *only when* a <type://WebClient> was created *without* a base URL.\n+  It was previously allowed to specify an absolute URL even when created with a base URL. #2757\n+- The method signature of\n+  <type://RequestConverterFunction#convertRequest(ServiceRequestContext,AggregatedHttpRequest,Class,ParameterizedType)>\n+  has been changed to support parameterized types. #2779\n+- The default <type://MeterIdPrefixFunction>` returned by <type://MeterIdPrefixFunction#ofDefault(String)>\n+  now generates the meter IDs with different tags. #2780\n+  - The `route` tag has been replaced with the `service` tag.\n+- `RetrofitMeterIdPrefixFunctionBuilder` has been removed and superseded by\n+  <type://RequestOnlyLog#serviceName()>. #2780\n+- ZooKeeper-based service discovery: #2749 #2791\n+  - Renamed all classes to use `ZooKeeper` instead of `Zookeeper`.", "originalCommit": "1acf6b8e2c51198fc4062515cf8e1cdd6541ebe4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0ODU3OQ==", "url": "https://github.com/line/armeria/pull/2823#discussion_r443348579", "bodyText": "ZooKeeperEndpointGroup?", "author": "trustin", "createdAt": "2020-06-22T06:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NzcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0ODkyOA==", "url": "https://github.com/line/armeria/pull/2823#discussion_r443348928", "bodyText": "Ah, they are already named correctly.", "author": "trustin", "createdAt": "2020-06-22T06:50:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0NzcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM0ODI1Nw==", "url": "https://github.com/line/armeria/pull/2823#discussion_r443348257", "bodyText": "Should remove )", "author": "minwoox", "createdAt": "2020-06-22T06:48:58Z", "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,243 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData>) in", "originalCommit": "1acf6b8e2c51198fc4062515cf8e1cdd6541ebe4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3f7f95d7a8f4061cbb8ee82c3461c76c6c0991ba", "url": "https://github.com/line/armeria/commit/3f7f95d7a8f4061cbb8ee82c3461c76c6c0991ba", "message": "Address the comments from @anuraaga and @minwoox", "committedDate": "2020-06-22T06:55:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM1Mjk5Nw==", "url": "https://github.com/line/armeria/pull/2823#discussion_r443352997", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              //// Curator Service Discovery\n          \n          \n            \n              //// Curator Service Discovery:", "author": "ikhoon", "createdAt": "2020-06-22T07:00:38Z", "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,245 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery", "originalCommit": "3f7f95d7a8f4061cbb8ee82c3461c76c6c0991ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM1NDg3NA==", "url": "https://github.com/line/armeria/pull/2823#discussion_r443354874", "bodyText": "Add @joonhaeng to here? because he reported #2797 in the Slack channel", "author": "ikhoon", "createdAt": "2020-06-22T07:05:32Z", "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,245 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData> in\n+  a relatively safer way. #2448\n+  - See <type://PooledHttpData>, <type://PooledWebClient>, <type://PooledHttpRequest> and\n+    <type://PooledHttpResponse> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Cleaned up minor issues reported by [errorprone](https://errorprone.info/). #2772\n+- Made some exception messages more user-friendly. #2751\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- It's now allowed to specify an absolute URL *only when* a <type://WebClient> was created *without* a base\n+  URL. #2757\n+  ```java\n+  WebClient clientWithoutBaseUrl = WebClient.of();\n+  WebClient clientWithBaseUrl = WebClient.of(\"https://example.com/\");\n+  // Good\n+  clientWithBaseUrl.get(\"/bar\");\n+  clientWithoutBaseUrl.get(\"https://foo.com/\");\n+  // Bad\n+  clientWithBaseUrl.get(\"https://foo.com/\");\n+  clientWithoutBaseUrl.get(\"/bar\");\n+  ```\n+- Boolean parameter conversion became more strict in annotated services. #2767 #2774\n+  - Only `true`, `false`, `1` and `0` are accepted. Other values will cause a `400 Bad Request` response.\n+- <type://DocService> web UI now shows the 'request body' field for `DELETE` and `PATCH` methods in the debug\n+  form. #2756 #2819\n+- <type://JacksonRequestConverterFunction> now handles the case where the target type has a type parameter,\n+  e.g. `List<Long>`. #2769 #2779\n+- Fixed a bug where the current <type://ServiceRequestContext> is not pushed when invoking\n+  <type://ResponseConverterFunction#convertResponse(ServiceRequestContext,ResponseHeaders,Object,HttpHeaders)>.\n+  #2789\n+- <type://RequestContextExportingAppender> now handles the `<exports />` tag correctly. #2781\n+- Fixed a bug where some Reactive Streams `Subscriber` implementations violate the specification. #2815\n+- You no longer get sporadic <type://WriteTimeoutException> from proxied connections. #2801 #2805\n+- You no longer get a <type://CancelledSubscriptionException> unnecessarily when using\n+  <type://PublisherBasedStreamMessage>. #2797\n+- You no longer get sporadic `EncoderException`s from HTTP/1 connections. #2765\n+- It's now disallowed to specify the following headers in gRPC `Metadata`. #2718\n+  - `:status`\n+  - `grpc-message`\n+  - `grpc-status`\n+  - `armeria.grpc.ThrowableProto-bin`\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- <type://AbstractUnwrappable#delegate()> has been deprecated in favor of <type://Unwrappable#unwrap()>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- You can specify an absolute URL *only when* a <type://WebClient> was created *without* a base URL.\n+  It was previously allowed to specify an absolute URL even when created with a base URL. #2757\n+- The method signature of\n+  <type://RequestConverterFunction#convertRequest(ServiceRequestContext,AggregatedHttpRequest,Class,ParameterizedType)>\n+  has been changed to support parameterized types. #2779\n+- The default <type://MeterIdPrefixFunction> returned by <type://MeterIdPrefixFunction#ofDefault(String)>\n+  now generates the meter IDs with different tags. #2780\n+  - The `route` tag has been replaced with the `service` tag.\n+- `RetrofitMeterIdPrefixFunctionBuilder` has been removed and superseded by\n+  <type://RequestOnlyLog#serviceName()>. #2780\n+- ZooKeeper-based service discovery: #2749 #2791\n+  - You now must specify <type://ZooKeeperRegistrationSpec> or <type://ZooKeeperDiscoverySpec> when creating\n+    <type://ZooKeeperUpdatingListener> or <type://ZooKeeperEndpointGroup>.\n+  - `NodeValueCodec` has been removed.\n+  - `ZooKeeperEndpointGroupBuilder.codec()` and `ZooKeeperUpdatingListenerBuilder.codec()` have been removed.\n+- `ByteBufHttpData` has been replaced with <type://PooledHttpData>. #2448\n+- `SubscriptionOption.WITH_POOLED_OBJECTS` has been replaced with <type://PooledHttpRequest> and\n+  <type://PooledHttpResponse>. #2448\n+\n+## \u26d3 Dependencies\n+\n+- Bouncy Castle 1.65 \u2192 1.65.01\n+- Dropwizard 2.0.9 \u2192 2.0.10\n+- gRPC 1.29.0 \u2192 1.30.0\n+- Jetty 9.4.29 \u2192 9.4.30\n+- Reactor 3.3.5 \u2192 3.3.6\n+- Spring Boot 2.3.0 \u2192 2.3.1, 2.1.14 \u2192 2.1.15\n+- Tomcat 9.0.35 \u2192 9.0.36, 8.5.55 \u2192 8.5.56\n+- Example dependencies\n+  - Dagger 2.27 \u2192 2.28\n+  - grpc-kotlin-stub 0.1.2 \u2192 0.1.3\n+\n+## \ud83d\ude47 Thank you\n+\n+<ThankYou\n+  usernames={[\n+    'anuraaga',\n+    'cbornet',\n+    'eonezhang',\n+    'ghkim3221',\n+    'heowc',\n+    'huydx',\n+    'ikhoon',\n+    'jongmin92',", "originalCommit": "3f7f95d7a8f4061cbb8ee82c3461c76c6c0991ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "063ead00e57423dbb1bb9bcf5e178a550c416b99", "url": "https://github.com/line/armeria/commit/063ead00e57423dbb1bb9bcf5e178a550c416b99", "message": "Addressed the comments from @ikhoon", "committedDate": "2020-06-22T07:07:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2NTY2NA==", "url": "https://github.com/line/armeria/pull/2823#discussion_r443365664", "bodyText": "I guess aggregateWithPooledObjects is the most commonly used so might be worth mentioning it.", "author": "anuraaga", "createdAt": "2020-06-22T07:29:12Z", "path": "site/src/pages/release-notes/0.99.7.mdx", "diffHunk": "@@ -0,0 +1,246 @@\n+## \ud83c\udf1f New features\n+\n+- You can now specify the maximum lifespan of server-side connections using\n+  <type://ServerBuilder#maxConnectionAge(Duration)>. This is useful when you have to deal with a load balancer\n+  without HTTP/2 support. #2747 #2796\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .maxConnectionAge(Duration.ofMinutes(1))\n+            ...\n+            .build();\n+  ```\n+- You can now record the name of the service that handled a request into <type://RequestOnlyLog#serviceName()>.\n+  #2768 #2780 #2809 #2820\n+  - By using <type://ServiceBindingBuilder#defaultServiceName(String)>:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .route().path(\"/service\")\n+                      .defaultServiceName(\"my-service\")\n+                      .build(new MyService())\n+              .build();\n+    ```\n+  - By using <type://@ServiceName>:\n+    ```java\n+    @ServiceName(\"my-service\")\n+    public class MyAnnotatedService {\n+        @Get(\"/get\")\n+        public String get() { ... }\n+\n+        @Post(\"/set\")\n+        @ServiceName(\"my-post-service\")\n+        public String post(@Param String value) { ... }\n+    }\n+    ```\n+  - Programmatically:\n+    ```java\n+    Server server =\n+        Server.builder()\n+              .service(\"/service\", (ctx, req) -> {\n+                  ctx.logBuilder().serviceName(\"my-service\");\n+              })\n+              .build();\n+    ```\n+  - Armeria will use the FQCN of the service class if you did not specify a service name.\n+- You can now use `@Nullable` annotation to specify an optional parameter or request object in annotated\n+  services. Previously, only the parameters with <type://@Default> annotation or `Optional` type were accepted.\n+  #2773\n+  ```java\n+  public class MyAnnotatedService {\n+      // null will be injected into 'value' instead of returning\n+      // '400 Bad Request' when 'value' is missing.\n+      @Get(\"/get\")\n+      public String get(@Param @Nullable String value) { ... }\n+  }\n+  ```\n+- You can now use the classes in the `java.time` package in annotated services. #2760 #2783 #2792 #2799\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/sleep/{duration}\")\n+      public void sleep(@Param Duration duration) { ... }\n+  }\n+  ```\n+- You can now determine whether a request was successful or not from HTTP trailers in\n+  <type://CircuitBreakerClient> and <type://RetryingClient> using `onResponseTrailers()` method.\n+  This can be useful when you work with gRPC, whose status code is encoded in the `grpc-status` trailer. #2816\n+  ```java\n+  CircuitBreaker cb = CircuitBreaker.of(\"my-service\");\n+  CircuitBreakerRule cbr =\n+      CircuitBreakerRule.builder()\n+                        .onResponseTrailers(trailers -> {\n+                            return trailers.getInt(\"grpc-status\", -1) != 0;\n+                        })\n+                        .thenFailure()\n+                        .build();\n+\n+  MyServiceStub myService =\n+      Clients.builder(\"gproto+h2c://example.com/\")\n+             .decorator(CircuitBreakerClient.newDecorator(cb, cbr))\n+             .build(MyServiceStub.class);\n+  ```\n+- <type://RequestLog> sanitizers now accept <type://RequestContext> as an additional input, so that\n+  the sanitizers can behave differently depending on the current path, etc. #2803\n+  ```java\n+  Server server =\n+      Server.builder()\n+            .decorator(LoggingService.builder()\n+                                     .headersSanitizer((ctx, headers) -> {\n+                                         if (ctx.path().startsWith(\"/secret/\")) {\n+                                             return \"<secret>\";\n+                                         } else {\n+                                             return headers;\n+                                         }\n+                                     })\n+                                     .newDecorator())\n+            ...\n+            .build();\n+  ```\n+- Armeria now supports service discovery and registration for\n+  [Curator Service Discovery](https://curator.apache.org/curator-x-discovery/index.html) and\n+  [Finagle ServerSets](http://stevenskelton.ca/finagle-serverset-clusters-using-zookeeper/). #2673 #2749 #2791\n+  ```java\n+  CuratorFramework curator = ...;\n+  // Client side:\n+  //// Curator Service Discovery:\n+  EndpointGroup curatorEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/curator\",\n+                                ZooKeeperDiscoverySpec.curator(\"my-service\"));\n+  //// Finagle ServerSets:\n+  EndpointGroup serverSetsEndpointGroup =\n+      ZooKeeperEndpointGroup.of(curator, \"/discovery/serversets\"\n+                                ZooKeeperDiscoverySpec.serverSets());\n+\n+  // Server-side:\n+  Server server = ...;\n+  //// Curator Service Discovery:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/curator\",\n+      ZooKeeperRegistrationSpec.curator(\"my-service\")));\n+  //// Finagle ServerSets:\n+  server.addListener(ZooKeeperUpdatingListener.of(\n+      curator, \"/discovery/serversets\",\n+      ZooKeeperRegistrationSpec.serverSets()));\n+  ```\n+- You can now build <type://OAuth1aToken> more conveniently using the builder API. #2770\n+  ```java\n+  OAuth1aToken token =\n+      OAuth1aToken.builder()\n+                  .realm(\"...\")\n+                  .consumerKey(\"...\")\n+                  .token(\"...\")\n+                  ...\n+                  .build();\n+  ```\n+- The Spring Boot integration now hides all services under `/internal/` for non-management ports when\n+  `management.server.port` property is set. #2408 #2502\n+- The Spring Boot integration now supports\n+  [the new graceful shutdown properties](https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/html/spring-boot-features.html#boot-features-graceful-shutdown)\n+  introduced in Spring Boot 2.3. #2784 #2802\n+- Added a new API for handling reference counted or pooled objects such as <type://PooledHttpData> in\n+  a relatively safer way. #2448\n+  - See <type://PooledHttpData>, <type://PooledWebClient>, <type://PooledHttpRequest> and\n+    <type://PooledHttpResponse> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- Cleaned up minor issues reported by [errorprone](https://errorprone.info/). #2772\n+- Made some exception messages more user-friendly. #2751\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- It's now allowed to specify an absolute URL *only when* a <type://WebClient> was created *without* a base\n+  URL. #2757\n+  ```java\n+  WebClient clientWithoutBaseUrl = WebClient.of();\n+  WebClient clientWithBaseUrl = WebClient.of(\"https://example.com/\");\n+  // Good\n+  clientWithBaseUrl.get(\"/bar\");\n+  clientWithoutBaseUrl.get(\"https://foo.com/\");\n+  // Bad\n+  clientWithBaseUrl.get(\"https://foo.com/\");\n+  clientWithoutBaseUrl.get(\"/bar\");\n+  ```\n+- Boolean parameter conversion became more strict in annotated services. #2767 #2774\n+  - Only `true`, `false`, `1` and `0` are accepted. Other values will cause a `400 Bad Request` response.\n+- <type://DocService> web UI now shows the 'request body' field for `DELETE` and `PATCH` methods in the debug\n+  form. #2756 #2819\n+- <type://JacksonRequestConverterFunction> now handles the case where the target type has a type parameter,\n+  e.g. `List<Long>`. #2769 #2779\n+- Fixed a bug where the current <type://ServiceRequestContext> is not pushed when invoking\n+  <type://ResponseConverterFunction#convertResponse(ServiceRequestContext,ResponseHeaders,Object,HttpHeaders)>.\n+  #2789\n+- <type://RequestContextExportingAppender> now handles the `<exports />` tag correctly. #2781\n+- Fixed a bug where some Reactive Streams `Subscriber` implementations violate the specification. #2815\n+- You no longer get sporadic <type://WriteTimeoutException> from proxied connections. #2801 #2805\n+- You no longer get a <type://CancelledSubscriptionException> unnecessarily when using\n+  <type://PublisherBasedStreamMessage>. #2797\n+- You no longer get sporadic `EncoderException`s from HTTP/1 connections. #2765\n+- It's now disallowed to specify the following headers in gRPC `Metadata`. #2718\n+  - `:status`\n+  - `grpc-message`\n+  - `grpc-status`\n+  - `armeria.grpc.ThrowableProto-bin`\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- <type://AbstractUnwrappable#delegate()> has been deprecated in favor of <type://Unwrappable#unwrap()>.\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- You can specify an absolute URL *only when* a <type://WebClient> was created *without* a base URL.\n+  It was previously allowed to specify an absolute URL even when created with a base URL. #2757\n+- The method signature of\n+  <type://RequestConverterFunction#convertRequest(ServiceRequestContext,AggregatedHttpRequest,Class,ParameterizedType)>\n+  has been changed to support parameterized types. #2779\n+- The default <type://MeterIdPrefixFunction> returned by <type://MeterIdPrefixFunction#ofDefault(String)>\n+  now generates the meter IDs with different tags. #2780\n+  - The `route` tag has been replaced with the `service` tag.\n+- `RetrofitMeterIdPrefixFunctionBuilder` has been removed and superseded by\n+  <type://RequestOnlyLog#serviceName()>. #2780\n+- ZooKeeper-based service discovery: #2749 #2791\n+  - You now must specify <type://ZooKeeperRegistrationSpec> or <type://ZooKeeperDiscoverySpec> when creating\n+    <type://ZooKeeperUpdatingListener> or <type://ZooKeeperEndpointGroup>.\n+  - `NodeValueCodec` has been removed.\n+  - `ZooKeeperEndpointGroupBuilder.codec()` and `ZooKeeperUpdatingListenerBuilder.codec()` have been removed.\n+- `ByteBufHttpData` has been replaced with <type://PooledHttpData>. #2448\n+- `SubscriptionOption.WITH_POOLED_OBJECTS` has been replaced with <type://PooledHttpRequest> and", "originalCommit": "063ead00e57423dbb1bb9bcf5e178a550c416b99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2OTU4Mg==", "url": "https://github.com/line/armeria/pull/2823#discussion_r443369582", "bodyText": "Good point. Updated.", "author": "trustin", "createdAt": "2020-06-22T07:37:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM2NTY2NA=="}], "type": "inlineReview"}, {"oid": "e1606df92300236d6ee8784bd823da69f5c13b2f", "url": "https://github.com/line/armeria/commit/e1606df92300236d6ee8784bd823da69f5c13b2f", "message": "Address the comments from @anuraaga", "committedDate": "2020-06-22T07:37:08Z", "type": "commit"}, {"oid": "ea476a1967686103405be3c090219bcbfe67c801", "url": "https://github.com/line/armeria/commit/ea476a1967686103405be3c090219bcbfe67c801", "message": "gRPC 1.30.1", "committedDate": "2020-06-22T08:16:49Z", "type": "commit"}, {"oid": "9eb81aa43ab7d9c8a01a53a1d41c765843625055", "url": "https://github.com/line/armeria/commit/9eb81aa43ab7d9c8a01a53a1d41c765843625055", "message": "Grammar", "committedDate": "2020-06-22T08:20:32Z", "type": "commit"}]}