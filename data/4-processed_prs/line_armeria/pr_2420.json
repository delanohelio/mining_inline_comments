{"pr_number": 2420, "pr_title": "Use modern features of Gradle instead of custom scripts where possible.", "pr_createdAt": "2020-01-28T07:41:13Z", "pr_url": "https://github.com/line/armeria/pull/2420", "timeline": [{"oid": "6f43d7cb7ca3b110411156a7b6b82c3bbd76f71d", "url": "https://github.com/line/armeria/commit/6f43d7cb7ca3b110411156a7b6b82c3bbd76f71d", "message": "Use modern features of Gradle instead of custom scripts where possible.", "committedDate": "2020-01-28T07:31:16Z", "type": "commit"}, {"oid": "267abc8abdce5e11a7d27dd74bfaacb5254d98be", "url": "https://github.com/line/armeria/commit/267abc8abdce5e11a7d27dd74bfaacb5254d98be", "message": "Make sure platform is added to all resolvable configurations and add grpc-protocol dependency to benchmarks since it's not automatically exposed by grpc anymore.", "committedDate": "2020-01-29T06:28:57Z", "type": "commit"}, {"oid": "663c45da19234cf60d06f66c819375f8bce7e44d", "url": "https://github.com/line/armeria/commit/663c45da19234cf60d06f66c819375f8bce7e44d", "message": "checkstyle is like jacoco and doesn't like platforms", "committedDate": "2020-01-29T07:08:49Z", "type": "commit"}, {"oid": "1ac24f72bb58c9bb0420a01f915b6c289bfcea90", "url": "https://github.com/line/armeria/commit/1ac24f72bb58c9bb0420a01f915b6c289bfcea90", "message": "Set canBeConsumed for jmh and fix afterEvaluate location", "committedDate": "2020-01-29T07:16:19Z", "type": "commit"}, {"oid": "87c14ce91f4e7dd947ecb1ef5c650c94c9b301eb", "url": "https://github.com/line/armeria/commit/87c14ce91f4e7dd947ecb1ef5c650c94c9b301eb", "message": "Remove unnecessary configuration hack, earlier issue was due to afterEvaluate mistake.", "committedDate": "2020-01-29T07:26:52Z", "type": "commit"}, {"oid": "7d386404b435885078018e98cbc1e024aaefb7b9", "url": "https://github.com/line/armeria/commit/7d386404b435885078018e98cbc1e024aaefb7b9", "message": "Look at grpc-bom version in addition to grpc-core.", "committedDate": "2020-01-29T07:42:35Z", "type": "commit"}, {"oid": "d1c585efbcfb6d3c939a300a7758ddf7d7a36fb2", "url": "https://github.com/line/armeria/commit/d1c585efbcfb6d3c939a300a7758ddf7d7a36fb2", "message": "implementation -> api for saml impl dependencies which are in public API right now.", "committedDate": "2020-01-29T08:00:31Z", "type": "commit"}, {"oid": "43fd0357ac42b16ea60cf635433efa9f07111243", "url": "https://github.com/line/armeria/commit/43fd0357ac42b16ea60cf635433efa9f07111243", "message": "Fix shaded test classpath configuration issue and optimize it a bit.", "committedDate": "2020-01-29T09:16:00Z", "type": "commit"}, {"oid": "e85142dcd103ea88668ce222f3d89d8f6d2062bd", "url": "https://github.com/line/armeria/commit/e85142dcd103ea88668ce222f3d89d8f6d2062bd", "message": "Only evaluate runtime classpath when creating shaded test runtime classpath", "committedDate": "2020-01-29T09:55:56Z", "type": "commit"}, {"oid": "0660c2f65e71c34f936816f814831d1affaf0ecd", "url": "https://github.com/line/armeria/commit/0660c2f65e71c34f936816f814831d1affaf0ecd", "message": "jwt is actually in public API.", "committedDate": "2020-01-29T10:07:25Z", "type": "commit"}, {"oid": "0660c2f65e71c34f936816f814831d1affaf0ecd", "url": "https://github.com/line/armeria/commit/0660c2f65e71c34f936816f814831d1affaf0ecd", "message": "jwt is actually in public API.", "committedDate": "2020-01-29T10:07:25Z", "type": "forcePushed"}, {"oid": "7d23e2acacfd67e37aee0bb1b637bc7d2d60d619", "url": "https://github.com/line/armeria/commit/7d23e2acacfd67e37aee0bb1b637bc7d2d60d619", "message": "Remove unnecessary excludes", "committedDate": "2020-01-29T10:23:52Z", "type": "commit"}, {"oid": "c3a1fdca184967568aec5fa1e41071bd6ef08d76", "url": "https://github.com/line/armeria/commit/c3a1fdca184967568aec5fa1e41071bd6ef08d76", "message": "WIP", "committedDate": "2020-01-29T10:59:27Z", "type": "commit"}, {"oid": "a73455622837144aa9daa74a44db522273887336", "url": "https://github.com/line/armeria/commit/a73455622837144aa9daa74a44db522273887336", "message": "Restore accidentally deleted exclusion, remove unnecessary exclusions, update CI JDKs.", "committedDate": "2020-01-29T11:20:12Z", "type": "commit"}, {"oid": "23730108bd21a0a259bdef34c1f598a13898bced", "url": "https://github.com/line/armeria/commit/23730108bd21a0a259bdef34c1f598a13898bced", "message": "Build with JDK13 to fix javadoc bug.", "committedDate": "2020-01-29T11:34:14Z", "type": "commit"}, {"oid": "23730108bd21a0a259bdef34c1f598a13898bced", "url": "https://github.com/line/armeria/commit/23730108bd21a0a259bdef34c1f598a13898bced", "message": "Build with JDK13 to fix javadoc bug.", "committedDate": "2020-01-29T11:34:14Z", "type": "forcePushed"}, {"oid": "1460fd3551824903a41bf09924ade7ef7bc3a68f", "url": "https://github.com/line/armeria/commit/1460fd3551824903a41bf09924ade7ef7bc3a68f", "message": "Merge branch 'master' into modern-gradle", "committedDate": "2020-01-30T03:25:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NDg4Mg==", "url": "https://github.com/line/armeria/pull/2420#discussion_r372744882", "bodyText": "Shouldn't we call evaluationDependsOn(...) from the outside of afterEvaluate { .. }?", "author": "trustin", "createdAt": "2020-01-30T03:32:04Z", "path": "gradle/scripts/lib/common-dependencies.gradle", "diffHunk": "@@ -25,45 +25,96 @@ rootProject.ext {\n     }\n }\n \n-allprojects {\n-    apply plugin: 'io.spring.dependency-management'\n-\n-    dependencyManagement {\n-        generatedPomCustomization {\n-            enabled = false\n+def managedDependencyVersions = [:]\n+def managedDependencyExclusions = [:].withDefault { [] }\n+rootProject.ext.dependenciesYaml.forEach { String key, value ->\n+    if (key == 'boms') {\n+        value.each {\n+            def parsed = it.split(':')\n+            managedDependencyVersions[\"${parsed[0]}:${parsed[1]}\"] = parsed[2]\n         }\n-\n-        imports {\n-            if (rootProject.ext.dependenciesYaml.containsKey('boms')) {\n-                dependenciesYaml['boms'].each {\n-                    mavenBom \"${it}\"\n+    } else {\n+        def groupId = key\n+        def artifact = value as Map\n+        artifact.forEach { String artifactId, Map props ->\n+            if (props.containsKey('version')) {\n+                managedDependencyVersions[\"${groupId}:${artifactId}\"] = \"${props['version']}\"\n+            }\n+            if (props.containsKey('exclusions')) {\n+                props['exclusions'].each { String spec ->\n+                    def parsed = spec.split(':')\n+                    managedDependencyExclusions[\"${groupId}:${artifactId}\"].add([\n+                            group: parsed[0],\n+                            module: parsed[1],\n+                    ])\n                 }\n             }\n         }\n+    }\n+}\n+\n+configure(projectsWithFlags('dependencies')) {\n+    apply plugin: 'java-platform'\n+\n+    javaPlatform {\n+        allowDependencies()\n+    }\n+\n+    dependencies {\n+        if (rootProject.ext.dependenciesYaml.containsKey('boms')) {\n+            dependenciesYaml['boms'].each {\n+                api platform(\"${it}\")\n+            }\n+        }\n \n-        dependencies {\n+        constraints {\n             rootProject.ext.dependenciesYaml.forEach { String key, value ->\n                 if (key != 'boms') {\n                     def groupId = key\n                     def artifact = value as Map\n                     artifact.forEach { String artifactId, Map props ->\n                         if (props.containsKey('version')) {\n-                            dependency(\"${groupId}:${artifactId}:${props['version']}\") {\n-                                if (props.containsKey('exclusions')) {\n-                                    props['exclusions'].each { String spec ->\n-                                        exclude spec\n-                                    }\n-                                }\n-                            }\n+                            api \"${groupId}:${artifactId}:${props['version']}\"\n                         }\n                     }\n                 }\n             }\n         }\n     }\n+}\n \n+allprojects {\n     ext {\n-        managedVersions = dependencyManagement.managedVersions\n+        managedVersions = managedDependencyVersions\n+    }\n+}\n+\n+def dependencyProjects = projectsWithFlags('dependencies')\n+if (!dependencyProjects.isEmpty()) {\n+    def dependencyProject = dependencyProjects[0]\n+    configure(projectsWithFlags('java')) {\n+        // We need to use afterEvaluate because there is no way to guarantee configuration.canBeResolved and\n+        // canBeConsumed are set otherwise.\n+        afterEvaluate {\n+            evaluationDependsOn(dependencyProject.path)", "originalCommit": "1460fd3551824903a41bf09924ade7ef7bc3a68f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2NDc5Mw==", "url": "https://github.com/line/armeria/pull/2420#discussion_r372764793", "bodyText": "Doh yeah", "author": "anuraaga", "createdAt": "2020-01-30T05:26:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NDg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NTQwMA==", "url": "https://github.com/line/armeria/pull/2420#discussion_r372745400", "bodyText": "nit: space after { and before ->", "author": "trustin", "createdAt": "2020-01-30T03:34:36Z", "path": "gradle/scripts/lib/java-publish.gradle", "diffHunk": "@@ -2,168 +2,101 @@ configure(projectsWithFlags('publish', 'java')) {\n     publishing {\n         publications {\n             jar(MavenPublication) {\n-                def currentArtifactId = project.ext.artifactId\n-                artifactId currentArtifactId\n+                from components.java\n \n-                // Generate the POM.\n-                pom.withXml {\n-                    asNode().children().last() + {\n-                        resolveStrategy = Closure.DELEGATE_FIRST\n+                // We don't publish Gradle metadata yet so don't need to worry about these variants.\n+                suppressPomMetadataWarningsFor('optionalApiElements')\n+                suppressPomMetadataWarningsFor('optionalRuntimeElements')\n \n-                        // Write the elements required by OSSRH.\n-                        name \"${project.ext.projectName} (${currentArtifactId})\"\n-                        description \"${project.ext.projectDescription} (${currentArtifactId})\"\n-                        url \"${project.ext.projectUrl}\"\n-                        inceptionYear \"${project.ext.inceptionYear}\"\n-\n-                        licenses {\n-                            license {\n-                                name \"${project.ext.licenseName}\"\n-                                url \"${project.ext.licenseUrl}\"\n-                                distribution 'repo'\n-                            }\n-                        }\n+                // Publish resolved versions\n+                versionMapping {\n+                    allVariants {\n+                        fromResolutionResult()\n+                    }\n+                }\n \n-                        developers {\n-                            developer {\n-                                name \"${project.ext.authorName}\"\n-                                email \"${project.ext.authorEmail}\"\n-                                url \"${project.ext.authorUrl}\"\n-                            }\n-                        }\n+                // Replace published jar with shaded when available. We manually create shading tasks instead of\n+                // applying the shadow plugin itself so need to do it ourselves.\n+                def jarOverrideFile = null\n+                def jarOverrideTask = null\n+                if (tasks.findByName('trimShadedJar')) {\n+                    jarOverrideFile = tasks.trimShadedJar.outJarFiles.find() as File\n+                    jarOverrideTask = tasks.trimShadedJar\n+                } else if (tasks.findByName('shadedJar')) {\n+                    jarOverrideFile = tasks.shadedJar.archivePath\n+                    jarOverrideTask = tasks.shadedJar\n+                }\n+                if (jarOverrideFile != null) {\n+                    // For some reason this needs to be in afterEvaluate or dependencies are lost from the POM.\n+                    afterEvaluate {\n+                        def unshaded = artifacts.find { it.classifier == null && it.extension == 'jar' }\n+                        artifacts.remove(unshaded)\n+                        artifact(jarOverrideFile).builtBy(jarOverrideTask)\n+                    }\n+                }\n \n-                        scm {\n-                            url \"${project.ext.scmUrl}\"\n-                            connection \"${project.ext.scmConnection}\"\n-                            developerConnection \"${project.ext.scmDeveloperConnection}\"\n+                // Clean up the POM.\n+                pom {\n+                    withXml {\n+                        // We publish resolved versions so don't need to publish our dependencyManagement too.\n+                        def dependencyManagement = asNode().get('dependencyManagement')\n+                        if (dependencyManagement != null) {\n+                            asNode().remove(dependencyManagement)\n                         }\n-\n-                        dependencies {\n-                            def writeExclusionRules = { Set<ExcludeRule> excludeRules ->\n-                                if (!excludeRules.empty) {\n-                                    exclusions {\n-                                        excludeRules.each { rule ->\n-                                            exclusion {\n-                                                groupId rule.group\n-                                                artifactId rule.module\n-                                            }\n-                                        }\n-                                    }\n-                                }\n-                            }\n-\n-                            // Write compile-time project dependencies.\n-                            configurations.compile.dependencies.findAll {\n-                                it instanceof ProjectDependency\n-                            }.collect {\n-                                (ProjectDependency) it\n-                            }.toSorted({\n-                                \"${it.group}:${it.dependencyProject.ext.artifactId}\"\n-                            }).each { dep ->\n-                                dependency {\n-                                    groupId dep.group\n-                                    artifactId dep.dependencyProject.ext.artifactId\n-                                    version dep.version ?: dep.dependencyProject.version\n-                                    if (dep.hasProperty('optional') && dep.optional) {\n-                                        optional true\n-                                    }\n-                                    writeExclusionRules(dep.excludeRules)\n-                                }\n-                            }\n-\n-                            // Write runtime project dependencies.\n-                            configurations.runtime.dependencies.findAll {\n-                                it instanceof ProjectDependency &&\n-                                !configurations.compile.dependencies.contains(it)\n-                            }.collect {\n-                                (ProjectDependency) it\n-                            }.toSorted({\n-                                \"${it.group}:${it.dependencyProject.ext.artifactId}\"\n-                            }).each { dep ->\n-                                dependency {\n-                                    groupId dep.group\n-                                    artifactId dep.dependencyProject.ext.artifactId\n-                                    version dep.version ?: dep.dependencyProject.version\n-                                    scope 'runtime'\n-                                    if (dep.hasProperty('optional') && dep.optional) {\n-                                        optional true\n-                                    }\n-                                    writeExclusionRules(dep.excludeRules)\n-                                }\n-                            }\n-\n-                            // Write module dependencies.\n-                            Set<ResolvedDependency> compileDeps =\n-                                    configurations.compile.resolvedConfiguration.firstLevelModuleDependencies\n-                            Set<ResolvedDependency> runtimeDeps =\n-                                    configurations.runtime.resolvedConfiguration.firstLevelModuleDependencies\n-                            Set<Dependency> unresolvedDeps =\n-                                    configurations.runtime.dependencies + configurations.compile.dependencies\n-\n-                            runtimeDeps.toSorted({ \"${it.moduleGroup}:${it.moduleName}\" }).each { dep ->\n-                                def unresolvedDep = unresolvedDeps.find {\n-                                    it.group == dep.moduleGroup && it.name == dep.moduleName\n-                                }\n-\n-                                if (unresolvedDep instanceof ExternalModuleDependency) {\n-                                    if (project.hasFlags('relocate') && project.ext.relocations.find({\n-                                        it.name == \"${dep.moduleGroup}:${dep.moduleName}\"\n-                                    })) {\n-                                        // Shaded dependency\n-                                        return\n-                                    }\n-\n-                                    dependency {\n-                                        groupId dep.moduleGroup\n-                                        artifactId dep.moduleName\n-                                        version dep.moduleVersion\n-\n-                                        // Write classifier if exists.\n-                                        if (dep.moduleArtifacts.find()?.classifier) {\n-                                            classifier dep.moduleArtifacts.find().classifier\n-                                        }\n-\n-                                        if (!compileDeps.contains(dep)) {\n-                                            scope 'runtime'\n-                                        }\n-\n-                                        if (unresolvedDep.hasProperty('optional') && unresolvedDep.optional) {\n-                                            optional true\n-                                        }\n-\n-                                        writeExclusionRules(unresolvedDep.excludeRules)\n-                                    }\n-                                }\n+                        \n+                        // Strip out shaded dependencies. We manually create shading tasks instead of applying\n+                        // the shadow plugin itself so need to do it ourselves.\n+                        def dependencies = asNode().get('dependencies')[0]\n+                        def shaded = dependencies.findAll {\n+                            def groupId = it.get('groupId')[0]\n+                            def artifactId = it.get('artifactId')[0]\n+                            return project.ext.relocations.find {\n+                                it.name == \"${groupId.text()}:${artifactId.text()}\"\n                             }\n                         }\n+                        shaded.each { dependencies.remove(it) }\n                     }\n                 }\n+            }\n+        }\n+    }\n+}\n \n-                // Find the main JAR and the task that generates it.\n-                File mainJarFile\n-                Task mainJarTask\n-                if (tasks.findByName('trimShadedJar')) {\n-                    mainJarFile = tasks.trimShadedJar.outJarFiles.find() as File\n-                    mainJarTask = tasks.trimShadedJar\n-                } else if (tasks.findByName('shadedJar')) {\n-                    mainJarFile = tasks.shadedJar.archivePath\n-                    mainJarTask = tasks.shadedJar\n-                } else {\n-                    mainJarFile = tasks.jar.archivePath\n-                    mainJarTask = tasks.jar\n+configure(projectsWithFlags('publish')) {\n+    publishing {\n+        publications.each {publication->", "originalCommit": "1460fd3551824903a41bf09924ade7ef7bc3a68f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NTkxNQ==", "url": "https://github.com/line/armeria/pull/2420#discussion_r372745915", "bodyText": "Do we now always generate source/javadoc JARs?", "author": "trustin", "createdAt": "2020-01-30T03:37:42Z", "path": "gradle/scripts/lib/java.gradle", "diffHunk": "@@ -48,45 +59,12 @@ configure(projectsWithFlags('java')) {\n                     def useIncrementalCompilation = deps.size() == 0\n                     options.incremental = useIncrementalCompilation\n                     logger.info(\"${useIncrementalCompilation ? 'Enabling' : 'Disabling'} \" +\n-                                \"incremental compilation for '${task.path}'\")\n+                            \"incremental compilation for '${task.path}'\")\n                 }\n             }\n         }\n     }\n \n-    // Generate a source JAR.\n-    task sourceJar(type: Jar) {\n-        classifier = 'sources'\n-        from sourceSets.main.allSource\n-    }\n-\n-    // Generate a javadoc JAR.\n-    task javadocJar(type: Jar, dependsOn: tasks.javadoc) {\n-        classifier = 'javadoc'\n-        from javadoc.destinationDir\n-    }\n-\n-    // Generate source/javadoc JARs only when publishing.", "originalCommit": "1460fd3551824903a41bf09924ade7ef7bc3a68f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2MjgxMg==", "url": "https://github.com/line/armeria/pull/2420#discussion_r372762812", "bodyText": "It's always generated for assemble (and so build). I find this more idiomatic and not a huge problem - it only affects a curent target so e.g., :grpc:assemble only builds javadoc for grpc, not core. And IntelliJ Gradle Runner doesn't build javadoc. I was a bit surprised that our CI wasn't building javadoc, and I think it's good to verify javadoc builds in CI too.\nBut not hard to restore the skipping behavior if you still prefer that let me know.", "author": "anuraaga", "createdAt": "2020-01-30T05:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NTkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2ODUwMA==", "url": "https://github.com/line/armeria/pull/2420#discussion_r372868500", "bodyText": "OK as it is.", "author": "trustin", "createdAt": "2020-01-30T10:26:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NTkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NjAyMg==", "url": "https://github.com/line/armeria/pull/2420#discussion_r372746022", "bodyText": "Thanks! \ud83d\ude05", "author": "trustin", "createdAt": "2020-01-30T03:38:19Z", "path": "settings.gradle", "diffHunk": "@@ -40,11 +40,14 @@ includeWithFlags ':it:server',                'java', 'relocate'\n includeWithFlags ':it:spring:boot-tomcat',    'java', 'relocate'\n includeWithFlags ':it:spring:boot-tomcat8.5', 'java', 'relocate'\n includeWithFlags ':testing-internal',         'java', 'relocate'\n-includeWithFlags ':thrift0.11',               'java', 'relocate'\n+includeWithFlags ':thrift0.12',               'java', 'relocate'", "originalCommit": "1460fd3551824903a41bf09924ade7ef7bc3a68f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NjUxMg==", "url": "https://github.com/line/armeria/pull/2420#discussion_r372746512", "bodyText": "Perhaps we could make this done in settings-flags.gradle and use the name and flag that's less likely to clash with user modules, e.g. dependency-management?", "author": "trustin", "createdAt": "2020-01-30T03:41:10Z", "path": "settings.gradle", "diffHunk": "@@ -40,11 +40,14 @@ includeWithFlags ':it:server',                'java', 'relocate'\n includeWithFlags ':it:spring:boot-tomcat',    'java', 'relocate'\n includeWithFlags ':it:spring:boot-tomcat8.5', 'java', 'relocate'\n includeWithFlags ':testing-internal',         'java', 'relocate'\n-includeWithFlags ':thrift0.11',               'java', 'relocate'\n+includeWithFlags ':thrift0.12',               'java', 'relocate'\n \n // Unpublished non-Java projects\n includeWithFlags ':docs-client'\n \n+// Unpublished dependency management project to create a virtual platform.\n+includeWithFlags ':dependencies', 'dependencies'", "originalCommit": "1460fd3551824903a41bf09924ade7ef7bc3a68f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2NDYxNQ==", "url": "https://github.com/line/armeria/pull/2420#discussion_r372764615", "bodyText": "Good idea!", "author": "anuraaga", "createdAt": "2020-01-30T05:25:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0NjUxMg=="}], "type": "inlineReview"}, {"oid": "3fa8419cf2b3b0bb42eea67fbfc967d8b6ad87a9", "url": "https://github.com/line/armeria/commit/3fa8419cf2b3b0bb42eea67fbfc967d8b6ad87a9", "message": "Cleanups", "committedDate": "2020-01-30T05:31:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5Mjg4NQ==", "url": "https://github.com/line/armeria/pull/2420#discussion_r372292885", "bodyText": "I considered separating the netty modules we expose in our API and the ones we don't, but I found almost all actually do end up in the API, even netty-codec-http2 because of Http2Exception so just stuff them all into API", "author": "anuraaga", "createdAt": "2020-01-29T10:10:25Z", "path": "core/build.gradle", "diffHunk": "@@ -85,52 +85,49 @@ dependencies {\n         \"java${version}TestImplementation\" files(sourceSets.test.output.classesDirs) { builtBy compileTestJava }\n     }\n \n+    // Logging decorators expose slf4j in API\n+    api 'org.slf4j:slf4j-api'\n+\n     // cglib\n-    testCompile 'cglib:cglib'\n+    testImplementation 'cglib:cglib'\n \n     // Caffeine\n-    compile 'com.github.ben-manes.caffeine:caffeine'\n+    implementation 'com.github.ben-manes.caffeine:caffeine'\n \n     // Jackson\n     [ 'jackson-core', 'jackson-annotations', 'jackson-databind' ].each {\n-        compile \"com.fasterxml.jackson.core:$it\"\n+        api \"com.fasterxml.jackson.core:$it\"\n     }\n \n     // Micrometer and other metric-related stuff\n-    compile 'io.micrometer:micrometer-core'\n-    compile('io.micrometer:micrometer-registry-prometheus') {\n-        ext.optional = true\n-    }\n-    compile('io.dropwizard.metrics:metrics-core') {\n-        ext.optional = true\n-    }\n-    compile('io.prometheus:simpleclient_common') {\n-        ext.optional = true\n-    }\n+    api 'io.micrometer:micrometer-core'\n+    optionalApi 'io.micrometer:micrometer-registry-prometheus'\n+    optionalApi 'io.dropwizard.metrics:metrics-core'\n+    optionalApi 'io.prometheus:simpleclient_common'\n \n     // Netty\n     [ 'netty-transport', 'netty-codec-http2', 'netty-codec-haproxy', 'netty-resolver-dns' ].each {", "originalCommit": "0660c2f65e71c34f936816f814831d1affaf0ecd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2NTg3Mg==", "url": "https://github.com/line/armeria/pull/2420#discussion_r372765872", "bodyText": "But something to think about", "author": "anuraaga", "createdAt": "2020-01-30T05:32:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5Mjg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NjU5Mw==", "url": "https://github.com/line/armeria/pull/2420#discussion_r372296593", "bodyText": "FYI shadedTest classpath used to contain validation-api while test didn't because it is compileOnly. Now neither do.", "author": "anuraaga", "createdAt": "2020-01-29T10:17:29Z", "path": "spring/boot-autoconfigure/build.gradle", "diffHunk": "@@ -1,21 +1,19 @@\n dependencies {\n-    compile(project(':thrift')) {\n-        ext.optional = true // To let a user choose between thrift and thrift0.9.\n-    }\n-    compile project(':logback')\n+    // To let a user choose between thrift and thrift0.9.\n+    compileOnly project(':thrift')\n+    implementation project(':logback')\n \n-    compile('io.micrometer:micrometer-registry-prometheus') {\n-        ext.optional = true\n-    }\n-    compile('io.dropwizard.metrics:metrics-json') {\n-        ext.optional = true\n-    }\n-    compile 'javax.inject:javax.inject'\n+    // TODO(anuraaga): Consider removing these since this module does not have related functionality.\n+    optionalApi 'io.micrometer:micrometer-registry-prometheus'\n+    optionalApi 'io.dropwizard.metrics:metrics-json'\n+\n+    api 'javax.inject:javax.inject'\n     compileOnly 'javax.validation:validation-api'\n-    compile 'org.springframework.boot:spring-boot-starter'\n+    api 'org.springframework.boot:spring-boot-starter'\n     annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'\n \n-    testCompile project(':grpc')\n-    testCompile 'org.springframework.boot:spring-boot-starter-actuator'\n-    testCompile 'org.springframework.boot:spring-boot-starter-test'\n+    testImplementation project(':grpc')\n+    testImplementation project(':thrift')\n+    testImplementation 'org.springframework.boot:spring-boot-starter-actuator'\n+    testImplementation 'org.springframework.boot:spring-boot-starter-test'", "originalCommit": "0660c2f65e71c34f936816f814831d1affaf0ecd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NzE5Nw==", "url": "https://github.com/line/armeria/pull/2420#discussion_r372297197", "bodyText": "Found this \"bug\" while playing with removing extraneous netty from compile classpath (though didn't end up actually doing that)", "author": "anuraaga", "createdAt": "2020-01-29T10:18:42Z", "path": "testing-internal/src/main/java/com/linecorp/armeria/testing/internal/webapp/WebAppContainerTest.java", "diffHunk": "@@ -42,12 +42,11 @@\n import com.linecorp.armeria.client.ClientFactory;\n import com.linecorp.armeria.client.WebClient;\n import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.HttpHeaderNames;", "originalCommit": "0660c2f65e71c34f936816f814831d1affaf0ecd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg2ODAzMQ==", "url": "https://github.com/line/armeria/pull/2420#discussion_r372868031", "bodyText": "Thanks for fixing it. \ud83d\ude47\u200d\u2642\ufe0f", "author": "trustin", "createdAt": "2020-01-30T10:25:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NzE5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2MzQxOQ==", "url": "https://github.com/line/armeria/pull/2420#discussion_r372763419", "bodyText": "I was somewhat surprised to find this in our public API, but looking at it realized it is tedious if we wanted to separate. Something to think about.\nAlso, I use java-jwt too and it's probably a fine choice, but worth giving a look at other libraries too I guess, maybe https://github.com/google/tink/blob/master/docs/JAVA-HOWTO.md", "author": "anuraaga", "createdAt": "2020-01-30T05:18:34Z", "path": "saml/build.gradle", "diffHunk": "@@ -1,12 +1,12 @@\n dependencies {\n-    compile 'com.auth0:java-jwt'\n-    compile 'net.shibboleth.utilities:java-support'\n-    compile 'org.opensaml:opensaml-core'\n-    compile 'org.opensaml:opensaml-saml-api'\n-    compile 'org.opensaml:opensaml-saml-impl'\n-    compile 'org.opensaml:opensaml-messaging-api'\n-    compile 'org.opensaml:opensaml-messaging-impl'\n-    compile 'org.opensaml:opensaml-soap-api'\n-    compile 'org.opensaml:opensaml-soap-impl'\n-    testCompile 'org.jsoup:jsoup'\n+    api 'com.auth0:java-jwt'", "originalCommit": "1460fd3551824903a41bf09924ade7ef7bc3a68f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "34794a4571b4cd50a9d1aa4ea5802bc20edc29f3", "url": "https://github.com/line/armeria/commit/34794a4571b4cd50a9d1aa4ea5802bc20edc29f3", "message": "Fix exclusions", "committedDate": "2020-01-31T06:07:40Z", "type": "commit"}, {"oid": "3e23bc759a65a8e053228d5ba21a0b094a227417", "url": "https://github.com/line/armeria/commit/3e23bc759a65a8e053228d5ba21a0b094a227417", "message": "Update README.md", "committedDate": "2020-01-31T07:39:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2MDQ2MA==", "url": "https://github.com/line/armeria/pull/2420#discussion_r373460460", "bodyText": "This is nice. Good to know whenObjectAdded", "author": "trustin", "createdAt": "2020-01-31T12:41:08Z", "path": "gradle/scripts/lib/common-dependencies.gradle", "diffHunk": "@@ -95,6 +95,16 @@ configure(dependencyManagementProject) {\n configure(projectsWithFlags('java')) {\n     evaluationDependsOn(dependencyManagementProject.path)\n \n+    configurations.configureEach { configuration ->\n+        configuration.dependencies.whenObjectAdded { dep ->", "originalCommit": "34794a4571b4cd50a9d1aa4ea5802bc20edc29f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c84fcf056fe8b8667eb99e33058f65360083e15e", "url": "https://github.com/line/armeria/commit/c84fcf056fe8b8667eb99e33058f65360083e15e", "message": "Copy exclusions to reflections", "committedDate": "2020-02-01T06:25:50Z", "type": "commit"}, {"oid": "f2042526530b4e598895e6429d3b65d031a5fb94", "url": "https://github.com/line/armeria/commit/f2042526530b4e598895e6429d3b65d031a5fb94", "message": "Merge branch 'modern-gradle' of github.com:anuraaga/armeria into modern-gradle", "committedDate": "2020-02-01T06:26:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4MjM0OA==", "url": "https://github.com/line/armeria/pull/2420#discussion_r374482348", "bodyText": "I wonder why this is not testImplementation?", "author": "ikhoon", "createdAt": "2020-02-04T05:37:19Z", "path": "jetty/build.gradle", "diffHunk": "@@ -1,7 +1,7 @@\n dependencies {\n     // Jetty\n-    compile 'org.eclipse.jetty:jetty-server'\n+    api 'org.eclipse.jetty:jetty-server'\n     ['jetty-webapp', 'jetty-annotations', 'apache-jsp', 'apache-jstl'].each {\n-        testCompile \"org.eclipse.jetty:$it\"\n+        api \"org.eclipse.jetty:$it\"", "originalCommit": "f2042526530b4e598895e6429d3b65d031a5fb94", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NDQ0OQ==", "url": "https://github.com/line/armeria/pull/2420#discussion_r374494449", "bodyText": "Oops", "author": "anuraaga", "createdAt": "2020-02-04T06:32:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4MjM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NTYwMg==", "url": "https://github.com/line/armeria/pull/2420#discussion_r374495602", "bodyText": "Thanks :-)", "author": "ikhoon", "createdAt": "2020-02-04T06:37:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ4MjM0OA=="}], "type": "inlineReview"}, {"oid": "a3e5fd858ba88d64d4926902bbcf51ed4c613d61", "url": "https://github.com/line/armeria/commit/a3e5fd858ba88d64d4926902bbcf51ed4c613d61", "message": "Fix jetty test scope.", "committedDate": "2020-02-04T06:32:35Z", "type": "commit"}, {"oid": "6b5dd9cbee6b180efc4fbde58b36cba1b0b51ce3", "url": "https://github.com/line/armeria/commit/6b5dd9cbee6b180efc4fbde58b36cba1b0b51ce3", "message": "Merge branch 'master' of github.com:line/armeria into modern-gradle", "committedDate": "2020-02-04T08:21:55Z", "type": "commit"}]}