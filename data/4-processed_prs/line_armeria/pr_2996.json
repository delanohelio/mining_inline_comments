{"pr_number": 2996, "pr_title": "Another round of API clean-up", "pr_createdAt": "2020-08-13T14:30:48Z", "pr_url": "https://github.com/line/armeria/pull/2996", "timeline": [{"oid": "aa21f457b4ee1be38483c691b6682c9fe1aba9c0", "url": "https://github.com/line/armeria/commit/aa21f457b4ee1be38483c691b6682c9fe1aba9c0", "message": "Another round of API clean-up\n\n- Removed all deprecated classes, fields and methods from the public\n  API.\n- The `-Dcom.linecorp.armeria.useLegacyMeterNames` flag does not work\n  anymore.\n- Removed `HTTP_` or `Http` from various fields and methods.\n  - `ClientOptions`:\n    - `HTTP_HEADERS` -> `HEADERS`\n    - `httpHeaders()` -> `headers()`\n  - `Clients`:\n    - `withHttpHeader()` -> `withHeader()`\n    - `withHttpHeaders()` -> `withHeaders()`\n  - `AbstractClientOptionsBuilder` and all its subtypes\n    - `setHttpHeader()` -> `setHeader()`\n    - `setHttpHeaders()` -> `setHeaders()`\n    - `addHttpHeader()` -> `addHeader()`\n    - `addHttpHeaders()` -> `addHeaders()`\n- Removed redundant `add` prefix to some builder methods.\n  - `RequestContextExporterBuilder`\n    - `addBuiltIn()` -> `builtIn()`\n    - `addAttribute()` -> `attr()`\n    - `addRequestHeader()` -> `requestHeader()`\n    - `addResponseHeader()` -> `responseHeader()`\n    - `addKeyPattern()` -> `keyPattern()`\n  - `KeyStoreCredentialResolverBuilder`\n    - `addKeyPassword()` -> `keyPassword()\n    - `addKeyPasswords()` -> `keyPasswords()\n- `DocService`, `DocServiceBuilder`, and their related things\n  - `exampleHttpHeaders` -> `exampleHeaders`\n  - `exampleRequest()` -> `exampleRequests()`\n  - `exampleRequestForMethod()` -> `exampleRequests()`\n    - Removed `exampleRequests(Object...)` to avoid ambiguity.\n  - `injectedScript()` -> `injectedScripts()`\n  - Removed `http_` from all query parameters\n    - `http_headers` -> `headers`\n    - `http_headers_sticky` -> `headers_sticky`\n- `AbstractRequestContextBuilder` and all its subtypes\n  - `remoteAddress()` and `localAddress()` now accept `SocketAddress`\n    instead of `InetSocketAddress`, so that we have more options when we\n    add other transports such as Unix domain socket.\n- `ServerListenerBuilder`\n  - `addStartingCallback()` -> `whenStarting()`\n  - `addStartedCallback()` -> `whenStarted()`\n  - `addStopingCallback()` -> `whenStoping()`\n  - `addStopedCallback()` -> `whenStoped()`\n  - Removed all methods that accept `Runnable` in favor of those that\n    accept `Consumer`.\n  - Fixed the type parameters of `Iterable`s.\n- `EncodingServiceBuilder`\n  - `encodableContentTypePredicate()` -> `encodableContentTypes()`\n  - `encodableRequestHeadersPredicate()` -> `encodableRequestHeaders()`\n- `TokenBucketThrottlingStrategyBuilder` /cc @max904-github\n  - Removed the `with` from the builder methods.\n    - `withMinimumBackoff()` -> `minimumBackoff()`\n    - `withHeadersScheme()` -> `headersScheme()`\n- Miscellaneous:\n  - Precalculate the hash code of `DefaultRoute`.", "committedDate": "2020-08-13T14:29:48Z", "type": "commit"}, {"oid": "280b855f6e799576be15fe7320aec771461c0d66", "url": "https://github.com/line/armeria/commit/280b855f6e799576be15fe7320aec771461c0d66", "message": "Allow binding `ServiceWithRoutes` without specifying any routes.", "committedDate": "2020-08-13T15:16:29Z", "type": "commit"}, {"oid": "b9e3019d6b96e71cbc9dfc9aff59dd399c8659f6", "url": "https://github.com/line/armeria/commit/b9e3019d6b96e71cbc9dfc9aff59dd399c8659f6", "message": "headers_sticky -> sticky_headers", "committedDate": "2020-08-14T06:43:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxNTk2Mw==", "url": "https://github.com/line/armeria/pull/2996#discussion_r470515963", "bodyText": "nit: could merge these two lines?", "author": "minwoox", "createdAt": "2020-08-14T09:29:27Z", "path": "core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroup.java", "diffHunk": "@@ -231,8 +230,7 @@ protected void doCloseAsync(CompletableFuture<?> future) {\n      * {@link HealthCheckedEndpointGroup} with the default meter names.\n      */\n     public MeterBinder newMeterBinder(String groupName) {\n-        return newMeterBinder(new MeterIdPrefix(Flags.useLegacyMeterNames() ? \"armeria.client.endpointGroup\"\n-                                                                            : \"armeria.client.endpoint.group\",\n+        return newMeterBinder(new MeterIdPrefix(\"armeria.client.endpoint.group\",\n                                                 \"name\", groupName));", "originalCommit": "b9e3019d6b96e71cbc9dfc9aff59dd399c8659f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxOTQ0MA==", "url": "https://github.com/line/armeria/pull/2996#discussion_r470519440", "bodyText": "nit: need a space after ,", "author": "minwoox", "createdAt": "2020-08-14T09:36:07Z", "path": "core/src/main/java/com/linecorp/armeria/server/Server.java", "diffHunk": "@@ -486,9 +481,8 @@ private void setupServerMetrics() {\n             final GracefulShutdownSupport gracefulShutdownSupport = this.gracefulShutdownSupport;\n             assert gracefulShutdownSupport != null;\n \n-            meterRegistry.gauge(Flags.useLegacyMeterNames() ? \"armeria.server.pendingResponses\"\n-                                                            : \"armeria.server.pending.responses\",\n-                                gracefulShutdownSupport, GracefulShutdownSupport::pendingResponses);\n+            meterRegistry.gauge(\"armeria.server.pending.responses\",gracefulShutdownSupport,", "originalCommit": "b9e3019d6b96e71cbc9dfc9aff59dd399c8659f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyMDQ4NQ==", "url": "https://github.com/line/armeria/pull/2996#discussion_r470520485", "bodyText": "nit: Could merge into one line?", "author": "minwoox", "createdAt": "2020-08-14T09:38:19Z", "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocService.java", "diffHunk": "@@ -331,13 +331,13 @@ private ServiceInfo addServiceExamples(ServiceInfo service) {\n                         m.endpoints(),\n                         // Show the examples added via `DocServiceBuilder` before the examples\n                         // generated by the plugin.\n-                        concatAndDedup(exampleHttpHeaders.get(m.name()), m.exampleHttpHeaders()),\n+                        concatAndDedup(exampleHeaders.get(m.name()), m.exampleHeaders()),\n                         concatAndDedup(exampleRequests.get(m.name()), m.exampleRequests()),\n                         examplePaths.get(m.name()),\n                         exampleQueries.get(m.name()),\n                         m.httpMethod(), m.docString()))::iterator,\n-                Iterables.concat(service.exampleHttpHeaders(),\n-                                 exampleHttpHeaders.get(\"\")),\n+                Iterables.concat(service.exampleHeaders(),\n+                                 exampleHeaders.get(\"\")),", "originalCommit": "b9e3019d6b96e71cbc9dfc9aff59dd399c8659f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "79a698d2a2c129a9a26bb211d22ace11c8a08d49", "url": "https://github.com/line/armeria/commit/79a698d2a2c129a9a26bb211d22ace11c8a08d49", "message": "Address the comments from @minwoox", "committedDate": "2020-08-14T09:51:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyNjY5OA==", "url": "https://github.com/line/armeria/pull/2996#discussion_r470526698", "bodyText": "rejected.requests?", "author": "ikhoon", "createdAt": "2020-08-14T09:51:16Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerListener.java", "diffHunk": "@@ -31,15 +26,84 @@\n \n     /**\n      * Returns a new {@link CircuitBreakerListener} that collects metric with the specified\n-     * {@link MeterRegistry}.\n+     * {@link MeterRegistry}. The returned listener will generate the following metrics:\n+     * <table>\n+     * <caption>metrics that will be generated by this class</caption>\n+     * <tr>\n+     *   <th>metric name</th>\n+     *   <th>description</th>\n+     * </tr>\n+     * <tr>\n+     *   <td>\n+     *     {@code armeria.client.circuit.breaker.requests{name=\"<circuit breaker name>\",result=\"success\"}}\n+     *   </td>\n+     *   <td>The number of successful requests in the counter time window.</td></tr>\n+     * <tr>\n+     *   <td>\n+     *     {@code armeria.client.circuit.breaker.requests{name=\"<circuit breaker name>\",result=\"failure\"}}\n+     *   </td>\n+     *   <td>The number of failed requests in the counter time window.</td></tr>\n+     * <tr>\n+     *   <td>\n+     *     {@code armeria.client.circuit.breaker.transitions{name=\"<circuit breaker name>\",state=\"CLOSED\"}}\n+     *   </td>\n+     *   <td>The number of circuit breaker state transitions to {@link CircuitState#CLOSED}.</td></tr>\n+     * <tr>\n+     *   <td>\n+     *     {@code armeria.client.circuit.breaker.transitions{name=\"<circuit breaker name>\",state=\"OPEN\"}}\n+     *   </td>\n+     *   <td>The number of circuit breaker state transitions to {@link CircuitState#OPEN}.</td>\n+     * </tr>\n+     * <tr>\n+     *   <td>\n+     *     {@code armeria.client.circuit.breaker.transitions{name=\"<circuit breaker name>\",state=\"HALF_OPEN\"}}\n+     *   </td>\n+     *   <td>The number of circuit breaker state transitions to {@link CircuitState#HALF_OPEN}.</td>\n+     * </tr>\n+     * <tr>\n+     *   <td>{@code armeria.client.circuit.breaker.rejectedRequests{name=\"<circuit breaker name>\"}}</td>\n+     *   <td>The number of requests rejected by the circuit breaker.</td>\n+     * </tr>\n+     * </table>\n      */\n     static CircuitBreakerListener metricCollecting(MeterRegistry registry) {\n-        return metricCollecting(registry, Flags.useLegacyMeterNames() ? LEGACY_METER_NAME : DEFAULT_METER_NAME);\n+        return metricCollecting(registry, \"armeria.client.circuit.breaker\");\n     }\n \n     /**\n      * Returns a new {@link CircuitBreakerListener} that collects metric with the specified\n-     * {@link MeterRegistry} and {@link Meter} name.\n+     * {@link MeterRegistry} and {@link Meter} name. The returned listener will generate the following metrics:\n+     * <table>\n+     * <caption>metrics that will be generated by this class</caption>\n+     * <tr>\n+     *   <th>metric name</th>\n+     *   <th>description</th>\n+     * </tr>\n+     * <tr>\n+     *   <td>{@code <name>.requests{name=\"<circuit breaker name>\",result=\"success\"}}</td>\n+     *   <td>The number of successful requests in the counter time window.</td>\n+     * </tr>\n+     * <tr>\n+     *   <td>{@code <name>.requests{name=\"<circuit breaker name>\",result=\"failure\"}}</td>\n+     *   <td>The number of failed requests in the counter time window.</td>\n+     * </tr>\n+     * <tr>\n+     *   <td>{@code <name>.transitions{name=\"<circuit breaker name>\",state=\"CLOSED\"}}</td>\n+     *   <td>The number of circuit breaker state transitions to {@link CircuitState#CLOSED}.</td>\n+     * </tr>\n+     * <tr>\n+     *   <td>{@code <name>.transitions{name=\"<circuit breaker name>\",state=\"OPEN\"}}</td>\n+     *   <td>The number of circuit breaker state transitions to {@link CircuitState#OPEN}.</td>\n+     * </tr>\n+     * <tr>\n+     *   <td>{@code <name>.transitions{name=\"<circuit breaker name>\",state=\"HALF_OPEN\"}}</td>\n+     *   <td>The number of circuit breaker state transitions to {@link CircuitState#HALF_OPEN}.</td>\n+     * </tr>\n+     * <tr>\n+     *   <td>{@code <name>.rejectedRequests{name=\"<circuit breaker name>\"}}</td>", "originalCommit": "b9e3019d6b96e71cbc9dfc9aff59dd399c8659f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUzNjkyOA==", "url": "https://github.com/line/armeria/pull/2996#discussion_r470536928", "bodyText": "Ditto", "author": "ikhoon", "createdAt": "2020-08-14T10:11:52Z", "path": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerListener.java", "diffHunk": "@@ -31,15 +26,84 @@\n \n     /**\n      * Returns a new {@link CircuitBreakerListener} that collects metric with the specified\n-     * {@link MeterRegistry}.\n+     * {@link MeterRegistry}. The returned listener will generate the following metrics:\n+     * <table>\n+     * <caption>metrics that will be generated by this class</caption>\n+     * <tr>\n+     *   <th>metric name</th>\n+     *   <th>description</th>\n+     * </tr>\n+     * <tr>\n+     *   <td>\n+     *     {@code armeria.client.circuit.breaker.requests{name=\"<circuit breaker name>\",result=\"success\"}}\n+     *   </td>\n+     *   <td>The number of successful requests in the counter time window.</td></tr>\n+     * <tr>\n+     *   <td>\n+     *     {@code armeria.client.circuit.breaker.requests{name=\"<circuit breaker name>\",result=\"failure\"}}\n+     *   </td>\n+     *   <td>The number of failed requests in the counter time window.</td></tr>\n+     * <tr>\n+     *   <td>\n+     *     {@code armeria.client.circuit.breaker.transitions{name=\"<circuit breaker name>\",state=\"CLOSED\"}}\n+     *   </td>\n+     *   <td>The number of circuit breaker state transitions to {@link CircuitState#CLOSED}.</td></tr>\n+     * <tr>\n+     *   <td>\n+     *     {@code armeria.client.circuit.breaker.transitions{name=\"<circuit breaker name>\",state=\"OPEN\"}}\n+     *   </td>\n+     *   <td>The number of circuit breaker state transitions to {@link CircuitState#OPEN}.</td>\n+     * </tr>\n+     * <tr>\n+     *   <td>\n+     *     {@code armeria.client.circuit.breaker.transitions{name=\"<circuit breaker name>\",state=\"HALF_OPEN\"}}\n+     *   </td>\n+     *   <td>The number of circuit breaker state transitions to {@link CircuitState#HALF_OPEN}.</td>\n+     * </tr>\n+     * <tr>\n+     *   <td>{@code armeria.client.circuit.breaker.rejectedRequests{name=\"<circuit breaker name>\"}}</td>", "originalCommit": "79a698d2a2c129a9a26bb211d22ace11c8a08d49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3327c4030431aeaeaeb9b22e3834a40c53de2cc0", "url": "https://github.com/line/armeria/commit/3327c4030431aeaeaeb9b22e3834a40c53de2cc0", "message": "Fix incorrect meter names", "committedDate": "2020-08-14T13:57:41Z", "type": "commit"}]}