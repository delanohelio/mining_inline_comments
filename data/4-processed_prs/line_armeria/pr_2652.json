{"pr_number": 2652, "pr_title": "Add `RetryStrategy.onException()`", "pr_createdAt": "2020-04-06T02:57:22Z", "pr_url": "https://github.com/line/armeria/pull/2652", "timeline": [{"oid": "5cccc976c08869768c9fb7fb33f8ef846b69fe98", "url": "https://github.com/line/armeria/commit/5cccc976c08869768c9fb7fb33f8ef846b69fe98", "message": "Add `RetryStrategy.onException()`\n\nMotivation:\n\nA user sometimes needs to retry on any (or certain type of) exceptions.\n\nModifications:\n\n- Add `RetryStrategy.onException()`\n- Relax the type parameter of `onStatus()`\n- Clean up the JavaDoc\n\nResult:\n\nA user can retry on any (or certain type of) exceptions more conveniently.", "committedDate": "2020-04-06T02:54:56Z", "type": "commit"}, {"oid": "12d2add05b72c4346331e29cf3c3085dbec720e0", "url": "https://github.com/line/armeria/commit/12d2add05b72c4346331e29cf3c3085dbec720e0", "message": "Checkstyle", "committedDate": "2020-04-06T03:32:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgyNzY4OA==", "url": "https://github.com/line/armeria/pull/2652#discussion_r403827688", "bodyText": "now that we have onException wouldn't it make sense to only handle server status codes here?", "author": "mauhiz", "createdAt": "2020-04-06T04:47:58Z", "path": "core/src/main/java/com/linecorp/armeria/client/retry/RetryStrategy.java", "diffHunk": "@@ -39,45 +39,63 @@\n public interface RetryStrategy {\n \n     /**\n-     * A {@link RetryStrategy} that defines a retry should not be performed.\n+     * Returns a {@link RetryStrategy} that never retries.\n      */\n     static RetryStrategy never() {\n         return (ctx, cause) -> CompletableFuture.completedFuture(null);\n     }\n \n     /**\n-     * A {@link RetryStrategy} that retries only on {@link UnprocessedRequestException} with\n-     * the {@link Backoff#ofDefault()}.\n+     * Returns a {@link RetryStrategy} that retries with {@link Backoff#ofDefault()}\n+     * only on an {@link UnprocessedRequestException}.\n      */\n     static RetryStrategy onUnprocessed() {\n         return onUnprocessed(Backoff.ofDefault());\n     }\n \n     /**\n-     * A {@link RetryStrategy} that retries only on {@link UnprocessedRequestException} with the specified\n-     * {@link Backoff}.\n+     * Returns a {@link RetryStrategy} that retries with the specified {@link Backoff}\n+     * only on an {@link UnprocessedRequestException}.\n      */\n     static RetryStrategy onUnprocessed(Backoff backoff) {\n         requireNonNull(backoff, \"backoff\");\n+        return onException(cause -> cause instanceof UnprocessedRequestException ? backoff : null);\n+    }\n+\n+    /**\n+     * Returns a {@link RetryStrategy} that retries with {@link Backoff#ofDefault()} on any {@link Exception}.\n+     */\n+    static RetryStrategy onException() {\n+        return onException(cause -> Backoff.ofDefault());\n+    }\n+\n+    /**\n+     * Returns a {@link RetryStrategy} that decides to retry using the specified {@code backoffFunction}.\n+     *\n+     * @param backoffFunction A {@link Function} that returns the {@link Backoff} or {@code null} (no retry)\n+     *                        according to the given {@link Throwable}\n+     */\n+    static RetryStrategy onException(Function<? super Throwable, ? extends Backoff> backoffFunction) {\n+        requireNonNull(backoffFunction, \"backoffFunction\");\n         return onStatus((status, thrown) -> {\n-            if (thrown != null && Exceptions.peel(thrown) instanceof UnprocessedRequestException) {\n-                return backoff;\n+            if (thrown != null) {\n+                return backoffFunction.apply(Exceptions.peel(thrown));\n             }\n             return null;\n         });\n     }\n \n     /**\n-     * Returns the {@link RetryStrategy} that retries the request with the {@link Backoff#ofDefault()}\n-     * when the response status matches {@link HttpStatusClass#SERVER_ERROR} or an {@link Exception} is raised.\n+     * Returns a {@link RetryStrategy} that retries with the {@link Backoff#ofDefault()}\n+     * when the response status is 5xx (server error) or an {@link Exception} is raised.", "originalCommit": "12d2add05b72c4346331e29cf3c3085dbec720e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0MjIzMA==", "url": "https://github.com/line/armeria/pull/2652#discussion_r403842230", "bodyText": "I guess a user will be interested in exceptions if he/she is interested in response status, but yeah it highly depends on a user's intention. Let us handle this in #1634.", "author": "trustin", "createdAt": "2020-04-06T05:47:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgyNzY4OA=="}], "type": "inlineReview"}]}