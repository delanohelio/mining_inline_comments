{"pr_number": 2745, "pr_title": "Add the release notes for 0.99.6", "pr_createdAt": "2020-05-26T04:01:44Z", "pr_url": "https://github.com/line/armeria/pull/2745", "timeline": [{"oid": "8824670516f3412cf09d8812bcdb5b981422ee54", "url": "https://github.com/line/armeria/commit/8824670516f3412cf09d8812bcdb5b981422ee54", "message": "Add the release notes for 0.99.6", "committedDate": "2020-05-26T04:01:16Z", "type": "commit"}, {"oid": "c81723d1d2d91ba524377d850142a6e83829619c", "url": "https://github.com/line/armeria/commit/c81723d1d2d91ba524377d850142a6e83829619c", "message": "Update example", "committedDate": "2020-05-26T04:10:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NTIwMg==", "url": "https://github.com/line/armeria/pull/2745#discussion_r430145202", "bodyText": "lets -> let", "author": "trustin", "createdAt": "2020-05-26T04:07:03Z", "path": "site/src/pages/release-notes/0.99.6.mdx", "diffHunk": "@@ -0,0 +1,117 @@\n+## \ud83c\udf1f New features\n+\n+- New <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent> API lets you define a complex", "originalCommit": "8824670516f3412cf09d8812bcdb5b981422ee54", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NTYyNw==", "url": "https://github.com/line/armeria/pull/2745#discussion_r430145627", "bodyText": "Move the comment up so that the line is not too long? That being said, please check the release note page code snippets do not overflow horizontally.", "author": "trustin", "createdAt": "2020-05-26T04:09:18Z", "path": "site/src/pages/release-notes/0.99.6.mdx", "diffHunk": "@@ -0,0 +1,117 @@\n+## \ud83c\udf1f New features\n+\n+- New <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent> API lets you define a complex\n+  circuit breaking policy conveniently. #2726\n+  ```java\n+  CircuitBreakerRule myRule =\n+      CircuitBreakerRule.of(\n+          // A failure if an Exception is raised.\n+          CircuitBreakerRule.onException(),\n+          // Neither a success nor a failure because the request has not been handled by the server.\n+          CircuitBreakerRule.builder()\n+                            .onUnprocessed()\n+                            .thenIgnore(),\n+          // A failure if the response is 5xx.\n+          CircuitBreakerRule.onServerErrorStatus(),\n+          // A success if the response is 2xx.\n+          CircuitBreakerRule.builder()\n+                            .onStatusClass(HttpStatusClass.SUCCESS)\n+                            .thenSuccess(),\n+          // Neither a success nor a failure. Do not take this response into account.\n+          CircuitBreakerRule.builder().thenIgnore());\n+  ```\n+- You can now easily bind an MDC property to a <type://RequestContext> and log it using a logging framework.\n+  #2634 #2724 #2729\n+  ```java\n+  ServiceRequestContext sctx = ...;\n+  try (SafeCloseable ignored = sctx.push()) {\n+      RequestScopedMdc.put(sctx, \"transactionId\", \"1234\");\n+\n+      ClientRequestContext cctx = ...;\n+      try (SafeCloseable ignored2 = cctx.push()) {\n+          assert MDC.get(\"transactionId\").equals(\"1234\");\n+      }\n+  }\n+  ```\n+- You can now install a custom hook to <type://RequestContextStorage> in runtime, usually at startup time. #2723\n+  ```java\n+  RequestContextStorage.hook(delegate -> new RequestContextStorageWrapper(delegate) {\n+      @Nullable\n+      @Override\n+      public <T extends RequestContext> T push(RequestContext toPush) {\n+          MDC.put(\"foo\", toPush.attr(FOO)); // Usually, you can just use RequestScopedMdc for this purpose.", "originalCommit": "8824670516f3412cf09d8812bcdb5b981422ee54", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NTcyMA==", "url": "https://github.com/line/armeria/pull/2745#discussion_r430145720", "bodyText": "type://DocService", "author": "trustin", "createdAt": "2020-05-26T04:09:49Z", "path": "site/src/pages/release-notes/0.99.6.mdx", "diffHunk": "@@ -0,0 +1,117 @@\n+## \ud83c\udf1f New features\n+\n+- New <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent> API lets you define a complex\n+  circuit breaking policy conveniently. #2726\n+  ```java\n+  CircuitBreakerRule myRule =\n+      CircuitBreakerRule.of(\n+          // A failure if an Exception is raised.\n+          CircuitBreakerRule.onException(),\n+          // Neither a success nor a failure because the request has not been handled by the server.\n+          CircuitBreakerRule.builder()\n+                            .onUnprocessed()\n+                            .thenIgnore(),\n+          // A failure if the response is 5xx.\n+          CircuitBreakerRule.onServerErrorStatus(),\n+          // A success if the response is 2xx.\n+          CircuitBreakerRule.builder()\n+                            .onStatusClass(HttpStatusClass.SUCCESS)\n+                            .thenSuccess(),\n+          // Neither a success nor a failure. Do not take this response into account.\n+          CircuitBreakerRule.builder().thenIgnore());\n+  ```\n+- You can now easily bind an MDC property to a <type://RequestContext> and log it using a logging framework.\n+  #2634 #2724 #2729\n+  ```java\n+  ServiceRequestContext sctx = ...;\n+  try (SafeCloseable ignored = sctx.push()) {\n+      RequestScopedMdc.put(sctx, \"transactionId\", \"1234\");\n+\n+      ClientRequestContext cctx = ...;\n+      try (SafeCloseable ignored2 = cctx.push()) {\n+          assert MDC.get(\"transactionId\").equals(\"1234\");\n+      }\n+  }\n+  ```\n+- You can now install a custom hook to <type://RequestContextStorage> in runtime, usually at startup time. #2723\n+  ```java\n+  RequestContextStorage.hook(delegate -> new RequestContextStorageWrapper(delegate) {\n+      @Nullable\n+      @Override\n+      public <T extends RequestContext> T push(RequestContext toPush) {\n+          MDC.put(\"foo\", toPush.attr(FOO)); // Usually, you can just use RequestScopedMdc for this purpose.\n+          return super.push(toPush);\n+      }\n+\n+      @Override\n+      public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+          MDC.remove(\"foo\");\n+          super.pop(current, toRestore);\n+      }\n+\n+      ...\n+  }\n+  ```\n+- You can now set method and parameter descriptions for annotated services in doc service using Javadoc. #2697", "originalCommit": "8824670516f3412cf09d8812bcdb5b981422ee54", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NjA1MA==", "url": "https://github.com/line/armeria/pull/2745#discussion_r430146050", "bodyText": "recommend -> recommended\nIt is recommended to use ..., though.", "author": "trustin", "createdAt": "2020-05-26T04:11:31Z", "path": "site/src/pages/release-notes/0.99.6.mdx", "diffHunk": "@@ -0,0 +1,117 @@\n+## \ud83c\udf1f New features\n+\n+- New <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent> API lets you define a complex\n+  circuit breaking policy conveniently. #2726\n+  ```java\n+  CircuitBreakerRule myRule =\n+      CircuitBreakerRule.of(\n+          // A failure if an Exception is raised.\n+          CircuitBreakerRule.onException(),\n+          // Neither a success nor a failure because the request has not been handled by the server.\n+          CircuitBreakerRule.builder()\n+                            .onUnprocessed()\n+                            .thenIgnore(),\n+          // A failure if the response is 5xx.\n+          CircuitBreakerRule.onServerErrorStatus(),\n+          // A success if the response is 2xx.\n+          CircuitBreakerRule.builder()\n+                            .onStatusClass(HttpStatusClass.SUCCESS)\n+                            .thenSuccess(),\n+          // Neither a success nor a failure. Do not take this response into account.\n+          CircuitBreakerRule.builder().thenIgnore());\n+  ```\n+- You can now easily bind an MDC property to a <type://RequestContext> and log it using a logging framework.\n+  #2634 #2724 #2729\n+  ```java\n+  ServiceRequestContext sctx = ...;\n+  try (SafeCloseable ignored = sctx.push()) {\n+      RequestScopedMdc.put(sctx, \"transactionId\", \"1234\");\n+\n+      ClientRequestContext cctx = ...;\n+      try (SafeCloseable ignored2 = cctx.push()) {\n+          assert MDC.get(\"transactionId\").equals(\"1234\");\n+      }\n+  }\n+  ```\n+- You can now install a custom hook to <type://RequestContextStorage> in runtime, usually at startup time. #2723\n+  ```java\n+  RequestContextStorage.hook(delegate -> new RequestContextStorageWrapper(delegate) {\n+      @Nullable\n+      @Override\n+      public <T extends RequestContext> T push(RequestContext toPush) {\n+          MDC.put(\"foo\", toPush.attr(FOO)); // Usually, you can just use RequestScopedMdc for this purpose.\n+          return super.push(toPush);\n+      }\n+\n+      @Override\n+      public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+          MDC.remove(\"foo\");\n+          super.pop(current, toRestore);\n+      }\n+\n+      ...\n+  }\n+  ```\n+- You can now set method and parameter descriptions for annotated services in doc service using Javadoc. #2697\n+- You can now easily sanitize headers and content using <type://RegexBasedSanitizer>. #1810 #2721\n+\n+## \ud83d\udcc8 Improvements\n+\n+- You can now easily call `ownAttr()` from <type://RequestContext>. #2727\n+  - You don't have to check if the context is <type://ClientRequestContext> or not anymore.\n+  - `root()` and `ownAttrs()` are pulled up as well.\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- You can now use Armeria 0.99.6 with Micrometer 1.3.9 (Using Micrometer 1.5.1 is recommend though). #2742", "originalCommit": "8824670516f3412cf09d8812bcdb5b981422ee54", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NjE3OA==", "url": "https://github.com/line/armeria/pull/2745#discussion_r430146178", "bodyText": "type://DocService", "author": "trustin", "createdAt": "2020-05-26T04:12:16Z", "path": "site/src/pages/release-notes/0.99.6.mdx", "diffHunk": "@@ -0,0 +1,117 @@\n+## \ud83c\udf1f New features\n+\n+- New <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent> API lets you define a complex\n+  circuit breaking policy conveniently. #2726\n+  ```java\n+  CircuitBreakerRule myRule =\n+      CircuitBreakerRule.of(\n+          // A failure if an Exception is raised.\n+          CircuitBreakerRule.onException(),\n+          // Neither a success nor a failure because the request has not been handled by the server.\n+          CircuitBreakerRule.builder()\n+                            .onUnprocessed()\n+                            .thenIgnore(),\n+          // A failure if the response is 5xx.\n+          CircuitBreakerRule.onServerErrorStatus(),\n+          // A success if the response is 2xx.\n+          CircuitBreakerRule.builder()\n+                            .onStatusClass(HttpStatusClass.SUCCESS)\n+                            .thenSuccess(),\n+          // Neither a success nor a failure. Do not take this response into account.\n+          CircuitBreakerRule.builder().thenIgnore());\n+  ```\n+- You can now easily bind an MDC property to a <type://RequestContext> and log it using a logging framework.\n+  #2634 #2724 #2729\n+  ```java\n+  ServiceRequestContext sctx = ...;\n+  try (SafeCloseable ignored = sctx.push()) {\n+      RequestScopedMdc.put(sctx, \"transactionId\", \"1234\");\n+\n+      ClientRequestContext cctx = ...;\n+      try (SafeCloseable ignored2 = cctx.push()) {\n+          assert MDC.get(\"transactionId\").equals(\"1234\");\n+      }\n+  }\n+  ```\n+- You can now install a custom hook to <type://RequestContextStorage> in runtime, usually at startup time. #2723\n+  ```java\n+  RequestContextStorage.hook(delegate -> new RequestContextStorageWrapper(delegate) {\n+      @Nullable\n+      @Override\n+      public <T extends RequestContext> T push(RequestContext toPush) {\n+          MDC.put(\"foo\", toPush.attr(FOO)); // Usually, you can just use RequestScopedMdc for this purpose.\n+          return super.push(toPush);\n+      }\n+\n+      @Override\n+      public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+          MDC.remove(\"foo\");\n+          super.pop(current, toRestore);\n+      }\n+\n+      ...\n+  }\n+  ```\n+- You can now set method and parameter descriptions for annotated services in doc service using Javadoc. #2697\n+- You can now easily sanitize headers and content using <type://RegexBasedSanitizer>. #1810 #2721\n+\n+## \ud83d\udcc8 Improvements\n+\n+- You can now easily call `ownAttr()` from <type://RequestContext>. #2727\n+  - You don't have to check if the context is <type://ClientRequestContext> or not anymore.\n+  - `root()` and `ownAttrs()` are pulled up as well.\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- You can now use Armeria 0.99.6 with Micrometer 1.3.9 (Using Micrometer 1.5.1 is recommend though). #2742\n+- You can now retry even when the current <type://EndpointGroup> is empty. #2736\n+- You can send a request by setting the authority and scheme header to <type://RequestHeaders>. #2730 #2734\n+- You no longer see `&lt;zero-length response&gt;` in doc service anymore. #2732", "originalCommit": "8824670516f3412cf09d8812bcdb5b981422ee54", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NjQwOQ==", "url": "https://github.com/line/armeria/pull/2745#discussion_r430146409", "bodyText": "while building ... -> when Armeria is shaded.", "author": "trustin", "createdAt": "2020-05-26T04:13:01Z", "path": "site/src/pages/release-notes/0.99.6.mdx", "diffHunk": "@@ -0,0 +1,117 @@\n+## \ud83c\udf1f New features\n+\n+- New <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent> API lets you define a complex\n+  circuit breaking policy conveniently. #2726\n+  ```java\n+  CircuitBreakerRule myRule =\n+      CircuitBreakerRule.of(\n+          // A failure if an Exception is raised.\n+          CircuitBreakerRule.onException(),\n+          // Neither a success nor a failure because the request has not been handled by the server.\n+          CircuitBreakerRule.builder()\n+                            .onUnprocessed()\n+                            .thenIgnore(),\n+          // A failure if the response is 5xx.\n+          CircuitBreakerRule.onServerErrorStatus(),\n+          // A success if the response is 2xx.\n+          CircuitBreakerRule.builder()\n+                            .onStatusClass(HttpStatusClass.SUCCESS)\n+                            .thenSuccess(),\n+          // Neither a success nor a failure. Do not take this response into account.\n+          CircuitBreakerRule.builder().thenIgnore());\n+  ```\n+- You can now easily bind an MDC property to a <type://RequestContext> and log it using a logging framework.\n+  #2634 #2724 #2729\n+  ```java\n+  ServiceRequestContext sctx = ...;\n+  try (SafeCloseable ignored = sctx.push()) {\n+      RequestScopedMdc.put(sctx, \"transactionId\", \"1234\");\n+\n+      ClientRequestContext cctx = ...;\n+      try (SafeCloseable ignored2 = cctx.push()) {\n+          assert MDC.get(\"transactionId\").equals(\"1234\");\n+      }\n+  }\n+  ```\n+- You can now install a custom hook to <type://RequestContextStorage> in runtime, usually at startup time. #2723\n+  ```java\n+  RequestContextStorage.hook(delegate -> new RequestContextStorageWrapper(delegate) {\n+      @Nullable\n+      @Override\n+      public <T extends RequestContext> T push(RequestContext toPush) {\n+          MDC.put(\"foo\", toPush.attr(FOO)); // Usually, you can just use RequestScopedMdc for this purpose.\n+          return super.push(toPush);\n+      }\n+\n+      @Override\n+      public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+          MDC.remove(\"foo\");\n+          super.pop(current, toRestore);\n+      }\n+\n+      ...\n+  }\n+  ```\n+- You can now set method and parameter descriptions for annotated services in doc service using Javadoc. #2697\n+- You can now easily sanitize headers and content using <type://RegexBasedSanitizer>. #1810 #2721\n+\n+## \ud83d\udcc8 Improvements\n+\n+- You can now easily call `ownAttr()` from <type://RequestContext>. #2727\n+  - You don't have to check if the context is <type://ClientRequestContext> or not anymore.\n+  - `root()` and `ownAttrs()` are pulled up as well.\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- You can now use Armeria 0.99.6 with Micrometer 1.3.9 (Using Micrometer 1.5.1 is recommend though). #2742\n+- You can now retry even when the current <type://EndpointGroup> is empty. #2736\n+- You can send a request by setting the authority and scheme header to <type://RequestHeaders>. #2730 #2734\n+- You no longer see `&lt;zero-length response&gt;` in doc service anymore. #2732\n+- A `NullPointerException` is not raised anymore due to the dependency order while building with Armeria.", "originalCommit": "8824670516f3412cf09d8812bcdb5b981422ee54", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NjU3Mw==", "url": "https://github.com/line/armeria/pull/2745#discussion_r430146573", "bodyText": "Unicode arrows?", "author": "trustin", "createdAt": "2020-05-26T04:13:53Z", "path": "site/src/pages/release-notes/0.99.6.mdx", "diffHunk": "@@ -0,0 +1,117 @@\n+## \ud83c\udf1f New features\n+\n+- New <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent> API lets you define a complex\n+  circuit breaking policy conveniently. #2726\n+  ```java\n+  CircuitBreakerRule myRule =\n+      CircuitBreakerRule.of(\n+          // A failure if an Exception is raised.\n+          CircuitBreakerRule.onException(),\n+          // Neither a success nor a failure because the request has not been handled by the server.\n+          CircuitBreakerRule.builder()\n+                            .onUnprocessed()\n+                            .thenIgnore(),\n+          // A failure if the response is 5xx.\n+          CircuitBreakerRule.onServerErrorStatus(),\n+          // A success if the response is 2xx.\n+          CircuitBreakerRule.builder()\n+                            .onStatusClass(HttpStatusClass.SUCCESS)\n+                            .thenSuccess(),\n+          // Neither a success nor a failure. Do not take this response into account.\n+          CircuitBreakerRule.builder().thenIgnore());\n+  ```\n+- You can now easily bind an MDC property to a <type://RequestContext> and log it using a logging framework.\n+  #2634 #2724 #2729\n+  ```java\n+  ServiceRequestContext sctx = ...;\n+  try (SafeCloseable ignored = sctx.push()) {\n+      RequestScopedMdc.put(sctx, \"transactionId\", \"1234\");\n+\n+      ClientRequestContext cctx = ...;\n+      try (SafeCloseable ignored2 = cctx.push()) {\n+          assert MDC.get(\"transactionId\").equals(\"1234\");\n+      }\n+  }\n+  ```\n+- You can now install a custom hook to <type://RequestContextStorage> in runtime, usually at startup time. #2723\n+  ```java\n+  RequestContextStorage.hook(delegate -> new RequestContextStorageWrapper(delegate) {\n+      @Nullable\n+      @Override\n+      public <T extends RequestContext> T push(RequestContext toPush) {\n+          MDC.put(\"foo\", toPush.attr(FOO)); // Usually, you can just use RequestScopedMdc for this purpose.\n+          return super.push(toPush);\n+      }\n+\n+      @Override\n+      public void pop(RequestContext current, @Nullable RequestContext toRestore) {\n+          MDC.remove(\"foo\");\n+          super.pop(current, toRestore);\n+      }\n+\n+      ...\n+  }\n+  ```\n+- You can now set method and parameter descriptions for annotated services in doc service using Javadoc. #2697\n+- You can now easily sanitize headers and content using <type://RegexBasedSanitizer>. #1810 #2721\n+\n+## \ud83d\udcc8 Improvements\n+\n+- You can now easily call `ownAttr()` from <type://RequestContext>. #2727\n+  - You don't have to check if the context is <type://ClientRequestContext> or not anymore.\n+  - `root()` and `ownAttrs()` are pulled up as well.\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- You can now use Armeria 0.99.6 with Micrometer 1.3.9 (Using Micrometer 1.5.1 is recommend though). #2742\n+- You can now retry even when the current <type://EndpointGroup> is empty. #2736\n+- You can send a request by setting the authority and scheme header to <type://RequestHeaders>. #2730 #2734\n+- You no longer see `&lt;zero-length response&gt;` in doc service anymore. #2732\n+- A `NullPointerException` is not raised anymore due to the dependency order while building with Armeria.\n+  #2731 #2735\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- `RetryStrategy` and `RetryStrategyWithContent` are gone in favor of\n+  <type://RetryRule> and <type://RetryRuleWithContent>. #2726\n+- `CircuitBreakerStrategy` and `CircuitBreakerStrategyWithContent` are gone in favor of\n+  <type://CircuitBreakerRule> and <type://CircuitBreakerRuleWithContent>. #2726\n+- `EndpointSelector.select()` (and thus EndpointGroup.select() as well) now returns `null`\n+  instead of throwing an <type://EmptyEndpointGroupException>. #2736\n+- The method signature of `ClientFactory.acquireEventLoop()` and `EventLoopScheduler.acquire()`\n+  have been changed. #2736\n+\n+## \u26d3 Dependencies\n+\n+- Brave 5.11.2 -> 5.12.3", "originalCommit": "8824670516f3412cf09d8812bcdb5b981422ee54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NzcyOA==", "url": "https://github.com/line/armeria/pull/2745#discussion_r430147728", "bodyText": "Oops, didn't notice that. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-05-26T04:19:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE0NjU3Mw=="}], "type": "inlineReview"}, {"oid": "b3d5e7290cabb3e0cda1ee25c7090ae4acbbdf13", "url": "https://github.com/line/armeria/commit/b3d5e7290cabb3e0cda1ee25c7090ae4acbbdf13", "message": "fix", "committedDate": "2020-05-26T04:14:08Z", "type": "commit"}, {"oid": "3d6bbaa22587c13420f6e8a95cd8c6d3b2144366", "url": "https://github.com/line/armeria/commit/3d6bbaa22587c13420f6e8a95cd8c6d3b2144366", "message": "Address comments by @trustin", "committedDate": "2020-05-26T04:19:23Z", "type": "commit"}, {"oid": "e3a3ade50e1e4637adf76914d532ba19e35ce58d", "url": "https://github.com/line/armeria/commit/e3a3ade50e1e4637adf76914d532ba19e35ce58d", "message": "Address comments by @ikhoon", "committedDate": "2020-05-26T04:23:32Z", "type": "commit"}, {"oid": "6a4e00a28b338e1fcab95d499c1af4f5cf2a7f3a", "url": "https://github.com/line/armeria/commit/6a4e00a28b338e1fcab95d499c1af4f5cf2a7f3a", "message": "Revert \"Address comments by @ikhoon\"\n\nThis reverts commit e3a3ade50e1e4637adf76914d532ba19e35ce58d.", "committedDate": "2020-05-26T04:24:52Z", "type": "commit"}]}