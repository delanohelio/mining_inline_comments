{"pr_number": 3183, "pr_title": "Support Thrift custom protocol", "pr_createdAt": "2020-11-17T07:18:13Z", "pr_url": "https://github.com/line/armeria/pull/3183", "timeline": [{"oid": "28c227b93c671ec423a4632eb52ddf0208d0537d", "url": "https://github.com/line/armeria/commit/28c227b93c671ec423a4632eb52ddf0208d0537d", "message": "Fix rawtypes warning", "committedDate": "2020-11-17T04:49:08Z", "type": "commit"}, {"oid": "2215112a4ef1562e3a2393608dfa61a840758ec3", "url": "https://github.com/line/armeria/commit/2215112a4ef1562e3a2393608dfa61a840758ec3", "message": "Support custom Thrift serialization format", "committedDate": "2020-11-17T07:13:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkzMDMzMQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r524930331", "bodyText": "How about using SPI instead of this, like others?", "author": "trustin", "createdAt": "2020-11-17T07:21:33Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftProtocolFactories.java", "diffHunk": "@@ -77,59 +83,53 @@ public String toString() {\n      */\n     public static final TProtocolFactory TEXT_NAMED_ENUM = TTextProtocolFactory.get(true);\n \n+    /**\n+     * A way to lookup the related {@link TProtocolFactory} from a {@link SerializationFormat}.\n+     * Users can add new entries at runtime using\n+     * {@link #registerThriftProtocolFactory(SerializationFormat, TProtocolFactory)}.\n+     */\n+    private static final ConcurrentMap<SerializationFormat, TProtocolFactory> knownProtocolFactories =\n+            new ConcurrentHashMap<>();\n+\n+    /**\n+     * Registers a new Thrift protocol. This operation cannot be undone.\n+     *\n+     * @param serializationFormat the handle for this new protocol\n+     * @param protocolFactory a factory to instantiate this protocol\n+     */\n+    public static void registerThriftProtocolFactory(\n+            SerializationFormat serializationFormat, TProtocolFactory protocolFactory) {\n+        knownProtocolFactories.put(serializationFormat, protocolFactory);\n+    }", "originalCommit": "2215112a4ef1562e3a2393608dfa61a840758ec3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkzMjEyMg==", "url": "https://github.com/line/armeria/pull/3183#discussion_r524932122", "bodyText": "e.g.\npublic interface ThriftProtocolFactoryProvider {\n    ...\n}\n\npublic interface ThriftProtocolFactory {\n    SerializationFormat serializationFormat();\n    TProtocolFactory protocolFactory(); // Or delegate all methods internally, because protocolFactory.protocolFactory() doesn't look nice.\n}", "author": "trustin", "createdAt": "2020-11-17T07:25:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkzMDMzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkzMTQ4Ng==", "url": "https://github.com/line/armeria/pull/3183#discussion_r524931486", "bodyText": "How about values() that returns Set<ThriftProtocolFactory>? ThriftProtocolFactory could provide some common properties including SerializationFormat and TProtocolFactory (or just methods that delegates to TProtocolFactory).", "author": "trustin", "createdAt": "2020-11-17T07:24:26Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftProtocolFactories.java", "diffHunk": "@@ -77,59 +83,53 @@ public String toString() {\n      */\n     public static final TProtocolFactory TEXT_NAMED_ENUM = TTextProtocolFactory.get(true);\n \n+    /**\n+     * A way to lookup the related {@link TProtocolFactory} from a {@link SerializationFormat}.\n+     * Users can add new entries at runtime using\n+     * {@link #registerThriftProtocolFactory(SerializationFormat, TProtocolFactory)}.\n+     */\n+    private static final ConcurrentMap<SerializationFormat, TProtocolFactory> knownProtocolFactories =\n+            new ConcurrentHashMap<>();\n+\n+    /**\n+     * Registers a new Thrift protocol. This operation cannot be undone.\n+     *\n+     * @param serializationFormat the handle for this new protocol\n+     * @param protocolFactory a factory to instantiate this protocol\n+     */\n+    public static void registerThriftProtocolFactory(\n+            SerializationFormat serializationFormat, TProtocolFactory protocolFactory) {\n+        knownProtocolFactories.put(serializationFormat, protocolFactory);\n+    }\n+\n+    static {\n+        registerThriftProtocolFactory(ThriftSerializationFormats.BINARY, BINARY);\n+        registerThriftProtocolFactory(ThriftSerializationFormats.COMPACT, COMPACT);\n+        registerThriftProtocolFactory(ThriftSerializationFormats.JSON, JSON);\n+        registerThriftProtocolFactory(ThriftSerializationFormats.TEXT, TEXT);\n+        registerThriftProtocolFactory(ThriftSerializationFormats.TEXT_NAMED_ENUM, TEXT_NAMED_ENUM);\n+    }\n+\n     /**\n      * Returns the {@link TProtocolFactory} for the specified {@link SerializationFormat}.\n      *\n-     * @throws IllegalArgumentException if the specified {@link SerializationFormat} is not for Thrift\n+     * @throws IllegalArgumentException if the specified {@link SerializationFormat} is not a\n+     *         known Thrift serialization format\n      */\n     public static TProtocolFactory get(SerializationFormat serializationFormat) {\n         requireNonNull(serializationFormat, \"serializationFormat\");\n-\n-        if (serializationFormat == ThriftSerializationFormats.BINARY) {\n-            return BINARY;\n-        }\n-\n-        if (serializationFormat == ThriftSerializationFormats.COMPACT) {\n-            return COMPACT;\n-        }\n-\n-        if (serializationFormat == ThriftSerializationFormats.JSON) {\n-            return JSON;\n-        }\n-\n-        if (serializationFormat == ThriftSerializationFormats.TEXT) {\n-            return TEXT;\n-        }\n-\n-        if (serializationFormat == ThriftSerializationFormats.TEXT_NAMED_ENUM) {\n-            return TEXT_NAMED_ENUM;\n-        }\n-\n-        throw new IllegalArgumentException(\"non-Thrift serializationFormat: \" + serializationFormat);\n+        return Optional.ofNullable(knownProtocolFactories.get(serializationFormat))\n+                .orElseThrow(() -> new IllegalArgumentException(\n+                        \"Unsupported Thrift serializationFormat: \" + serializationFormat));\n     }\n \n     /**\n-     * Returns the {@link SerializationFormat} for the specified {@link TProtocolFactory}.\n+     * Retrieves all registered Thrift serialization formats.\n      *\n-     * @throws IllegalArgumentException if the specified {@link TProtocolFactory} is not known by this class\n+     * @return an unmodifiable view of the registered Thrift serialization formats set.\n      */\n-    public static SerializationFormat toSerializationFormat(TProtocolFactory protoFactory) {\n-        requireNonNull(protoFactory, \"protoFactory\");\n-\n-        if (protoFactory instanceof TBinaryProtocol.Factory) {\n-            return ThriftSerializationFormats.BINARY;\n-        } else if (protoFactory instanceof TCompactProtocol.Factory) {\n-            return ThriftSerializationFormats.COMPACT;\n-        } else if (protoFactory instanceof TJSONProtocol.Factory) {\n-            return ThriftSerializationFormats.JSON;\n-        } else if (protoFactory instanceof TTextProtocolFactory) {\n-            final TTextProtocolFactory factory = (TTextProtocolFactory) protoFactory;\n-            return factory.usesNamedEnums() ? ThriftSerializationFormats.TEXT_NAMED_ENUM\n-                                            : ThriftSerializationFormats.TEXT;\n-        } else {\n-            throw new IllegalArgumentException(\n-                    \"unsupported TProtocolFactory: \" + protoFactory.getClass().getName());\n-        }\n+    public static Set<SerializationFormat> getThriftSerializationFormats() {", "originalCommit": "2215112a4ef1562e3a2393608dfa61a840758ec3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2NDgyMw==", "url": "https://github.com/line/armeria/pull/3183#discussion_r524964823", "bodyText": "I don't see any use for it at the moment", "author": "mauhiz", "createdAt": "2020-11-17T08:24:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkzMTQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0OTgzNw==", "url": "https://github.com/line/armeria/pull/3183#discussion_r526649837", "bodyText": "OK. Then how about making ThriftSerializationFormats.values() return what this method returns, and then hiding this method from the public API?", "author": "trustin", "createdAt": "2020-11-19T07:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkzMTQ4Ng=="}], "type": "inlineReview"}, {"oid": "52957173000e423046d3a0b8be77beb60e0594c5", "url": "https://github.com/line/armeria/commit/52957173000e423046d3a0b8be77beb60e0594c5", "message": "Use SPI to define Thrift Protocol factories", "committedDate": "2020-11-17T08:22:55Z", "type": "commit"}, {"oid": "6ba0f73df06682b8a8fff4506aada3b5caf8ce97", "url": "https://github.com/line/armeria/commit/6ba0f73df06682b8a8fff4506aada3b5caf8ce97", "message": "Please some oversensitive Javadoc parser", "committedDate": "2020-11-17T08:57:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0NzU0NQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r526647545", "bodyText": "How about renaming ThriftSerializationFormat to Entry, like we did in SerializationFormatProvider?", "author": "trustin", "createdAt": "2020-11-19T07:34:15Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftProtocolFactoryProvider.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.thrift;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+\n+import org.apache.thrift.protocol.TProtocolFactory;\n+\n+import com.linecorp.armeria.common.SerializationFormat;\n+\n+/**\n+ * SPI Provider for links from {@link SerializationFormat} to {@link TProtocolFactory}.\n+ */\n+@FunctionalInterface\n+public interface ThriftProtocolFactoryProvider {\n+    /**\n+     * Pair of {@link SerializationFormat} and {@link TProtocolFactory}.\n+     */\n+    final class ThriftSerializationFormat {\n+        private final SerializationFormat serializationFormat;\n+        private final TProtocolFactory tProtocolFactory;\n+\n+        public ThriftSerializationFormat(SerializationFormat serializationFormat,\n+                                         TProtocolFactory tProtocolFactory) {\n+            this.serializationFormat = requireNonNull(serializationFormat, \"serializationFormat\");\n+            this.tProtocolFactory = requireNonNull(tProtocolFactory, \"tProtocolFactory\");\n+        }\n+\n+        public SerializationFormat getSerializationFormat() {\n+            return serializationFormat;\n+        }\n+\n+        public TProtocolFactory getTProtocolFactory() {\n+            return tProtocolFactory;\n+        }\n+    }\n+\n+    /**\n+     * Accessed configured {@link ThriftSerializationFormat}s for this SPI provider.\n+     *\n+     * @return an immutable view\n+     */\n+    Set<ThriftSerializationFormat> thriftSerializationFormats();", "originalCommit": "6ba0f73df06682b8a8fff4506aada3b5caf8ce97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0ODUxOA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r526648518", "bodyText": "How about just modifying this class class to make values() return all discovered Thrift serialization formats?", "author": "trustin", "createdAt": "2020-11-19T07:36:20Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftSerializationFormats.java", "diffHunk": "@@ -15,16 +15,10 @@\n  */\n package com.linecorp.armeria.common.thrift;\n \n-import static java.util.Objects.requireNonNull;\n-\n-import java.util.Set;\n-\n-import com.google.common.collect.ImmutableSet;\n-\n import com.linecorp.armeria.common.SerializationFormat;\n \n /**\n- * Thrift-related {@link SerializationFormat} instances.\n+ * Out-of-the box supported Thrift-related {@link SerializationFormat} instances.", "originalCommit": "6ba0f73df06682b8a8fff4506aada3b5caf8ce97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5Nzg1NA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r528197854", "bodyText": "Understood. It makes more sense.", "author": "mauhiz", "createdAt": "2020-11-21T13:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0ODUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1MDY4NA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r526650684", "bodyText": "This doesn't need to be visible to other classes than subclasses. How about making this class protected and ThriftProtocolFactoryProvider a public abstract class, like we did in SerializationFormatProvider?", "author": "trustin", "createdAt": "2020-11-19T07:40:51Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftProtocolFactoryProvider.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.thrift;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+\n+import org.apache.thrift.protocol.TProtocolFactory;\n+\n+import com.linecorp.armeria.common.SerializationFormat;\n+\n+/**\n+ * SPI Provider for links from {@link SerializationFormat} to {@link TProtocolFactory}.\n+ */\n+@FunctionalInterface\n+public interface ThriftProtocolFactoryProvider {\n+    /**\n+     * Pair of {@link SerializationFormat} and {@link TProtocolFactory}.\n+     */\n+    final class ThriftSerializationFormat {", "originalCommit": "6ba0f73df06682b8a8fff4506aada3b5caf8ce97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5NTc2MA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r528195760", "bodyText": "Subclasses and classes in same package (like SerializationFormat uses SerializationFormatProvider.Entry). ;)\nI used interface to make the test class inherit multiple providers.\nHowever, let me change to follow the existing pattern.", "author": "mauhiz", "createdAt": "2020-11-21T13:20:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1MDY4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0MjA5Ng==", "url": "https://github.com/line/armeria/pull/3183#discussion_r530142096", "bodyText": "Thanks!", "author": "trustin", "createdAt": "2020-11-25T06:51:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1MDY4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1MTQ2Mg==", "url": "https://github.com/line/armeria/pull/3183#discussion_r526651462", "bodyText": "Could we revive these methods? values() could pull the values from getThriftSerializationFormats() you added.", "author": "trustin", "createdAt": "2020-11-19T07:42:32Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftSerializationFormats.java", "diffHunk": "@@ -55,22 +49,5 @@\n      */\n     public static final SerializationFormat TEXT_NAMED_ENUM = SerializationFormat.of(\"ttext-named-enum\");\n \n-    private static final Set<SerializationFormat> THRIFT_FORMATS =\n-            ImmutableSet.of(BINARY, COMPACT, JSON, TEXT, TEXT_NAMED_ENUM);\n-\n-    /**\n-     * Returns the set of all known Thrift serialization formats.\n-     */\n-    public static Set<SerializationFormat> values() {\n-        return THRIFT_FORMATS;\n-    }\n-\n-    /**\n-     * Returns whether the specified {@link SerializationFormat} is Thrift.\n-     */\n-    public static boolean isThrift(SerializationFormat format) {\n-        return values().contains(requireNonNull(format, \"format\"));\n-    }\n-", "originalCommit": "6ba0f73df06682b8a8fff4506aada3b5caf8ce97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5Njg5NA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r528196894", "bodyText": "What you suggest is to have the link SerializationFormat -> TProtocolFactory in this class rather than ThriftProtocolFactories right? We certainly don't need to access it from both", "author": "mauhiz", "createdAt": "2020-11-21T13:32:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1MTQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIwMTk3Mw==", "url": "https://github.com/line/armeria/pull/3183#discussion_r528201973", "bodyText": "Understood your intent and fixed. \ud83d\udc4d", "author": "mauhiz", "createdAt": "2020-11-21T14:25:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1MTQ2Mg=="}], "type": "inlineReview"}, {"oid": "d442857c150a82bff715b1e35ee00fda255f1856", "url": "https://github.com/line/armeria/commit/d442857c150a82bff715b1e35ee00fda255f1856", "message": "Rename Entry and change visibility", "committedDate": "2020-11-21T13:34:06Z", "type": "commit"}, {"oid": "04824d39ae0a37ba94fb23ff209bb4890cc34a01", "url": "https://github.com/line/armeria/commit/04824d39ae0a37ba94fb23ff209bb4890cc34a01", "message": "Move knownProtocolFactories; Rename to values(); revive isThrift", "committedDate": "2020-11-21T14:24:26Z", "type": "commit"}, {"oid": "8fb28007fc8bab76cc5dfe29715b531cc0589666", "url": "https://github.com/line/armeria/commit/8fb28007fc8bab76cc5dfe29715b531cc0589666", "message": "revert unnecessary diff", "committedDate": "2020-11-21T14:24:26Z", "type": "commit"}, {"oid": "038a7d71386e7b4fbfa05aa074d1b8a2bf91c747", "url": "https://github.com/line/armeria/commit/038a7d71386e7b4fbfa05aa074d1b8a2bf91c747", "message": "Restore method for binary compatibility", "committedDate": "2020-11-21T14:24:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyNzgwMQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529127801", "bodyText": "How about making this static final field?", "author": "ikhoon", "createdAt": "2020-11-24T02:00:09Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/DefaultThriftProtocolFactoryProvider.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.thrift;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * Default registered {@link ThriftProtocolFactoryProvider}.\n+ * It is not overridable but you may provide and register another implementation.\n+ */\n+public final class DefaultThriftProtocolFactoryProvider extends ThriftProtocolFactoryProvider {\n+    @Override\n+    protected Set<Entry> entries() {\n+        return ImmutableSet.of(\n+                new Entry(\n+                        ThriftSerializationFormats.BINARY, ThriftProtocolFactories.BINARY),\n+                new Entry(\n+                        ThriftSerializationFormats.COMPACT, ThriftProtocolFactories.COMPACT),\n+                new Entry(\n+                        ThriftSerializationFormats.JSON, ThriftProtocolFactories.JSON),\n+                new Entry(\n+                        ThriftSerializationFormats.TEXT, ThriftProtocolFactories.TEXT),\n+                new Entry(\n+                        ThriftSerializationFormats.TEXT_NAMED_ENUM, ThriftProtocolFactories.TEXT_NAMED_ENUM)\n+        );", "originalCommit": "038a7d71386e7b4fbfa05aa074d1b8a2bf91c747", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwMzQyMg==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529203422", "bodyText": "as I understand it, it's read only once in the JVM lifecycle, so it doesn't make sense to cache it.", "author": "mauhiz", "createdAt": "2020-11-24T04:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyNzgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ0NzkxOQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529447919", "bodyText": "I thought this method could be called by users because this is a public API. Anyway, it makes sense to not cache.", "author": "ikhoon", "createdAt": "2020-11-24T10:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyNzgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2NzUzMA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529567530", "bodyText": "This is a protected method (not public API)", "author": "mauhiz", "createdAt": "2020-11-24T14:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyNzgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2MTA2Nw==", "url": "https://github.com/line/armeria/pull/3183#discussion_r530061067", "bodyText": "Oops... I misused the term. \ud83d\ude05 What I meant was a user-accessible API.", "author": "ikhoon", "createdAt": "2020-11-25T02:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyNzgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyODQ1OA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529128458", "bodyText": "Some nits \ud83d\ude09:\n\nJavadoc?\nRemove get prefix?\nAdd toString()?", "author": "ikhoon", "createdAt": "2020-11-24T02:00:48Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftProtocolFactoryProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.thrift;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+\n+import org.apache.thrift.protocol.TProtocolFactory;\n+\n+import com.linecorp.armeria.common.SerializationFormat;\n+\n+/**\n+ * SPI Provider for links from {@link SerializationFormat} to {@link TProtocolFactory}.\n+ */\n+public abstract class ThriftProtocolFactoryProvider {\n+    /**\n+     * Pair of {@link SerializationFormat} and {@link TProtocolFactory}.\n+     */\n+    protected static final class Entry {\n+        private final SerializationFormat serializationFormat;\n+        private final TProtocolFactory tProtocolFactory;\n+\n+        public Entry(SerializationFormat serializationFormat, TProtocolFactory tProtocolFactory) {\n+            this.serializationFormat = requireNonNull(serializationFormat, \"serializationFormat\");\n+            this.tProtocolFactory = requireNonNull(tProtocolFactory, \"tProtocolFactory\");\n+        }\n+\n+        public SerializationFormat getSerializationFormat() {\n+            return serializationFormat;\n+        }\n+\n+        public TProtocolFactory getTProtocolFactory() {\n+            return tProtocolFactory;\n+        }", "originalCommit": "038a7d71386e7b4fbfa05aa074d1b8a2bf91c747", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwNDAwNA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529204004", "bodyText": "Javadoc seems not required for getters, but I guess we can add it\n\ud83d\udc4d Let me follow the convention in this project then\nokay", "author": "mauhiz", "createdAt": "2020-11-24T05:00:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyODQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIwNzY0MA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529207640", "bodyText": "made the fields package-protected like in the existing example (SerializationFormatProvider)", "author": "mauhiz", "createdAt": "2020-11-24T05:14:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyODQ1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIzMDYxNQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529230615", "bodyText": "made the fields package-protected like in the existing example (SerializationFormatProvider)\n\nThat sounds good.", "author": "ikhoon", "createdAt": "2020-11-24T06:29:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEyODQ1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEzMTYxMQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529131611", "bodyText": "Should this method return an immutable Set?", "author": "ikhoon", "createdAt": "2020-11-24T02:04:11Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftProtocolFactoryProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.thrift;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+\n+import org.apache.thrift.protocol.TProtocolFactory;\n+\n+import com.linecorp.armeria.common.SerializationFormat;\n+\n+/**\n+ * SPI Provider for links from {@link SerializationFormat} to {@link TProtocolFactory}.\n+ */\n+public abstract class ThriftProtocolFactoryProvider {\n+    /**\n+     * Pair of {@link SerializationFormat} and {@link TProtocolFactory}.\n+     */\n+    protected static final class Entry {\n+        private final SerializationFormat serializationFormat;\n+        private final TProtocolFactory tProtocolFactory;\n+\n+        public Entry(SerializationFormat serializationFormat, TProtocolFactory tProtocolFactory) {\n+            this.serializationFormat = requireNonNull(serializationFormat, \"serializationFormat\");\n+            this.tProtocolFactory = requireNonNull(tProtocolFactory, \"tProtocolFactory\");\n+        }\n+\n+        public SerializationFormat getSerializationFormat() {\n+            return serializationFormat;\n+        }\n+\n+        public TProtocolFactory getTProtocolFactory() {\n+            return tProtocolFactory;\n+        }\n+    }\n+\n+    /**\n+     * Accessed configured {@link Entry}s for this SPI provider.\n+     *\n+     * @return an immutable view", "originalCommit": "038a7d71386e7b4fbfa05aa074d1b8a2bf91c747", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIzNzA2Nw==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529237067", "bodyText": "it does :P let me update the doc", "author": "mauhiz", "createdAt": "2020-11-24T06:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEzMTYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0MDk2Ng==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529140966", "bodyText": "nit: null checking with if condition? The Optional seems to only be in a stack by escape analysis, however, we always try to avoid creating additional objects if possible.", "author": "ikhoon", "createdAt": "2020-11-24T02:14:08Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftSerializationFormats.java", "diffHunk": "@@ -55,14 +63,44 @@\n      */\n     public static final SerializationFormat TEXT_NAMED_ENUM = SerializationFormat.of(\"ttext-named-enum\");\n \n-    private static final Set<SerializationFormat> THRIFT_FORMATS =\n-            ImmutableSet.of(BINARY, COMPACT, JSON, TEXT, TEXT_NAMED_ENUM);\n+    /**\n+     * A way to lookup the related {@link TProtocolFactory} from a {@link SerializationFormat}.\n+     * Entries are provided via registered SPI {@link ThriftProtocolFactoryProvider} implementations.\n+     */\n+    private static final Map<SerializationFormat, TProtocolFactory> knownProtocolFactories;\n+\n+    static {\n+        final List<ThriftProtocolFactoryProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(ThriftProtocolFactoryProvider.class,\n+                                   ThriftProtocolFactoryProvider.class.getClassLoader()));\n+        knownProtocolFactories = providers\n+                .stream()\n+                .map(ThriftProtocolFactoryProvider::entries)\n+                .flatMap(Set::stream)\n+                .collect(toImmutableMap(Entry::getSerializationFormat,\n+                                        Entry::getTProtocolFactory));\n+    }\n+\n+    /**\n+     * Returns the {@link TProtocolFactory} for the specified {@link SerializationFormat}.\n+     *\n+     * @throws IllegalArgumentException if the specified {@link SerializationFormat} is not a\n+     *         known Thrift serialization format\n+     */\n+    public static TProtocolFactory get(SerializationFormat serializationFormat) {\n+        requireNonNull(serializationFormat, \"serializationFormat\");\n+        return Optional.ofNullable(knownProtocolFactories.get(serializationFormat))\n+                       .orElseThrow(() -> new IllegalArgumentException(\n+                               \"Unsupported Thrift serializationFormat: \" + serializationFormat));", "originalCommit": "038a7d71386e7b4fbfa05aa074d1b8a2bf91c747", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4NTU1Ng==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529285556", "bodyText": "I suppose it's mostly a matter of taste. changed.", "author": "mauhiz", "createdAt": "2020-11-24T08:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0MDk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0MzMxNw==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529143317", "bodyText": "Make it singleton and use it?", "author": "ikhoon", "createdAt": "2020-11-24T02:16:38Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftSerializationFormats.java", "diffHunk": "@@ -55,14 +63,44 @@\n      */\n     public static final SerializationFormat TEXT_NAMED_ENUM = SerializationFormat.of(\"ttext-named-enum\");\n \n-    private static final Set<SerializationFormat> THRIFT_FORMATS =\n-            ImmutableSet.of(BINARY, COMPACT, JSON, TEXT, TEXT_NAMED_ENUM);\n+    /**\n+     * A way to lookup the related {@link TProtocolFactory} from a {@link SerializationFormat}.\n+     * Entries are provided via registered SPI {@link ThriftProtocolFactoryProvider} implementations.\n+     */\n+    private static final Map<SerializationFormat, TProtocolFactory> knownProtocolFactories;\n+\n+    static {\n+        final List<ThriftProtocolFactoryProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(ThriftProtocolFactoryProvider.class,\n+                                   ThriftProtocolFactoryProvider.class.getClassLoader()));\n+        knownProtocolFactories = providers\n+                .stream()\n+                .map(ThriftProtocolFactoryProvider::entries)\n+                .flatMap(Set::stream)\n+                .collect(toImmutableMap(Entry::getSerializationFormat,\n+                                        Entry::getTProtocolFactory));\n+    }\n+\n+    /**\n+     * Returns the {@link TProtocolFactory} for the specified {@link SerializationFormat}.\n+     *\n+     * @throws IllegalArgumentException if the specified {@link SerializationFormat} is not a\n+     *         known Thrift serialization format\n+     */\n+    public static TProtocolFactory get(SerializationFormat serializationFormat) {\n+        requireNonNull(serializationFormat, \"serializationFormat\");\n+        return Optional.ofNullable(knownProtocolFactories.get(serializationFormat))\n+                       .orElseThrow(() -> new IllegalArgumentException(\n+                               \"Unsupported Thrift serializationFormat: \" + serializationFormat));\n+    }\n \n     /**\n-     * Returns the set of all known Thrift serialization formats.\n+     * Retrieves all registered Thrift serialization formats.\n+     *\n+     * @return an view of the registered Thrift serialization formats.\n      */\n     public static Set<SerializationFormat> values() {\n-        return THRIFT_FORMATS;\n+        return knownProtocolFactories.keySet();", "originalCommit": "038a7d71386e7b4fbfa05aa074d1b8a2bf91c747", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4NjI0MQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529286241", "bodyText": "ImmutableMap already caches its keySet as a field.", "author": "mauhiz", "createdAt": "2020-11-24T08:26:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0MzMxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0NDI5OQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529144299", "bodyText": "How about renaming to tProtocolFactory instead of get?", "author": "minwoox", "createdAt": "2020-11-24T02:17:40Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftSerializationFormats.java", "diffHunk": "@@ -55,14 +63,44 @@\n      */\n     public static final SerializationFormat TEXT_NAMED_ENUM = SerializationFormat.of(\"ttext-named-enum\");\n \n-    private static final Set<SerializationFormat> THRIFT_FORMATS =\n-            ImmutableSet.of(BINARY, COMPACT, JSON, TEXT, TEXT_NAMED_ENUM);\n+    /**\n+     * A way to lookup the related {@link TProtocolFactory} from a {@link SerializationFormat}.\n+     * Entries are provided via registered SPI {@link ThriftProtocolFactoryProvider} implementations.\n+     */\n+    private static final Map<SerializationFormat, TProtocolFactory> knownProtocolFactories;\n+\n+    static {\n+        final List<ThriftProtocolFactoryProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(ThriftProtocolFactoryProvider.class,\n+                                   ThriftProtocolFactoryProvider.class.getClassLoader()));\n+        knownProtocolFactories = providers\n+                .stream()\n+                .map(ThriftProtocolFactoryProvider::entries)\n+                .flatMap(Set::stream)\n+                .collect(toImmutableMap(Entry::getSerializationFormat,\n+                                        Entry::getTProtocolFactory));\n+    }\n+\n+    /**\n+     * Returns the {@link TProtocolFactory} for the specified {@link SerializationFormat}.\n+     *\n+     * @throws IllegalArgumentException if the specified {@link SerializationFormat} is not a\n+     *         known Thrift serialization format\n+     */\n+    public static TProtocolFactory get(SerializationFormat serializationFormat) {", "originalCommit": "038a7d71386e7b4fbfa05aa074d1b8a2bf91c747", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4NzYxNw==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529287617", "bodyText": "I wanted to keep the same name as in ThriftProtocolFactories and I cannot rename as I should keep binary compatibility.", "author": "mauhiz", "createdAt": "2020-11-24T08:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0NDI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMwMDMyMQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529300321", "bodyText": "It's deprecated and I think it's okay to use a new name for this method.\nIt was ThriftProtocolFactories.get(serializationFormat) so it's obvious that the return value will be a TProtocolFactory.\nBut now it is ThriftSerializationFormats so I thought using the specific name would be better in this case. But not so strong on this. It's your choice. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-11-24T08:49:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0NDI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQzMzA4NQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529433085", "bodyText": "fair enough. let me rename the new method then", "author": "mauhiz", "createdAt": "2020-11-24T10:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0NDI5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0NTMwOQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529145309", "bodyText": "Question: Is there any reason that you made this as an abstract class instead of an interface like other providers?", "author": "minwoox", "createdAt": "2020-11-24T02:18:47Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftProtocolFactoryProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.thrift;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+\n+import org.apache.thrift.protocol.TProtocolFactory;\n+\n+import com.linecorp.armeria.common.SerializationFormat;\n+\n+/**\n+ * SPI Provider for links from {@link SerializationFormat} to {@link TProtocolFactory}.\n+ */\n+public abstract class ThriftProtocolFactoryProvider {", "originalCommit": "038a7d71386e7b4fbfa05aa074d1b8a2bf91c747", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4ODI4Nw==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529288287", "bodyText": "Because @trustin pointed out that the nested class and the accessor should have restricted visibility.", "author": "mauhiz", "createdAt": "2020-11-24T08:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0NTMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMwMDYxOA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r529300618", "bodyText": "I missed that. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-11-24T08:49:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0NTMwOQ=="}], "type": "inlineReview"}, {"oid": "9ce3c8793a73296394eeaf214259ee978e348806", "url": "https://github.com/line/armeria/commit/9ce3c8793a73296394eeaf214259ee978e348806", "message": "Remove getters", "committedDate": "2020-11-24T08:18:44Z", "type": "commit"}, {"oid": "a3900e9044f741cc7e81941d0bd266d3bb577c21", "url": "https://github.com/line/armeria/commit/a3900e9044f741cc7e81941d0bd266d3bb577c21", "message": "Replace optional with a if", "committedDate": "2020-11-24T08:25:38Z", "type": "commit"}, {"oid": "3c649257297f8cd8f414cbcd8193e3551370cdf7", "url": "https://github.com/line/armeria/commit/3c649257297f8cd8f414cbcd8193e3551370cdf7", "message": "Rename to tProtocolFactory", "committedDate": "2020-11-24T10:41:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzNjAxMA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r530136010", "bodyText": "Could we move to com.linecorp.armeria.internal.common.thrift? This class doesn't need to be part of public API.", "author": "trustin", "createdAt": "2020-11-25T06:34:28Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/DefaultThriftProtocolFactoryProvider.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.thrift;", "originalCommit": "3c649257297f8cd8f414cbcd8193e3551370cdf7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0NjgxOQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r531246819", "bodyText": "sounds good", "author": "mauhiz", "createdAt": "2020-11-26T22:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzNjAxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzNzYxOA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r530137618", "bodyText": "public -> protected?", "author": "trustin", "createdAt": "2020-11-25T06:39:12Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftProtocolFactoryProvider.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.thrift;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+\n+import org.apache.thrift.protocol.TProtocolFactory;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.common.SerializationFormat;\n+\n+/**\n+ * SPI Provider for links from {@link SerializationFormat} to {@link TProtocolFactory}.\n+ */\n+public abstract class ThriftProtocolFactoryProvider {\n+    /**\n+     * Pair of {@link SerializationFormat} and {@link TProtocolFactory}.\n+     */\n+    protected static final class Entry {\n+        final SerializationFormat serializationFormat;\n+        final TProtocolFactory tProtocolFactory;\n+\n+        public Entry(SerializationFormat serializationFormat, TProtocolFactory tProtocolFactory) {", "originalCommit": "3c649257297f8cd8f414cbcd8193e3551370cdf7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0NjgwMA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r531246800", "bodyText": "I did so first but got a (misguided?) warning since this class is final. Anyways, I guess that public is fine here.", "author": "mauhiz", "createdAt": "2020-11-26T22:54:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzNzYxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM3MzI5Ng==", "url": "https://github.com/line/armeria/pull/3183#discussion_r531373296", "bodyText": "I see. No problem with that!", "author": "trustin", "createdAt": "2020-11-27T04:11:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzNzYxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzNzc1NQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r530137755", "bodyText": "Accessed -> Returns the", "author": "trustin", "createdAt": "2020-11-25T06:39:35Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftProtocolFactoryProvider.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.thrift;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Set;\n+\n+import org.apache.thrift.protocol.TProtocolFactory;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.common.SerializationFormat;\n+\n+/**\n+ * SPI Provider for links from {@link SerializationFormat} to {@link TProtocolFactory}.\n+ */\n+public abstract class ThriftProtocolFactoryProvider {\n+    /**\n+     * Pair of {@link SerializationFormat} and {@link TProtocolFactory}.\n+     */\n+    protected static final class Entry {\n+        final SerializationFormat serializationFormat;\n+        final TProtocolFactory tProtocolFactory;\n+\n+        public Entry(SerializationFormat serializationFormat, TProtocolFactory tProtocolFactory) {\n+            this.serializationFormat = requireNonNull(serializationFormat, \"serializationFormat\");\n+            this.tProtocolFactory = requireNonNull(tProtocolFactory, \"tProtocolFactory\");\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return MoreObjects.toStringHelper(this)\n+                              .add(\"serializationFormat\", serializationFormat)\n+                              .add(\"tProtocolFactory\", tProtocolFactory)\n+                              .toString();\n+        }\n+    }\n+\n+    /**\n+     * Accessed configured {@link Entry}s for this SPI provider.", "originalCommit": "3c649257297f8cd8f414cbcd8193e3551370cdf7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzNzgwOA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r530137808", "bodyText": "use -> Use", "author": "trustin", "createdAt": "2020-11-25T06:39:48Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftProtocolFactories.java", "diffHunk": "@@ -78,44 +78,28 @@ public String toString() {\n     public static final TProtocolFactory TEXT_NAMED_ENUM = TTextProtocolFactory.get(true);\n \n     /**\n-     * Returns the {@link TProtocolFactory} for the specified {@link SerializationFormat}.\n+     * Alias for {@link ThriftSerializationFormats#tProtocolFactory(SerializationFormat)}.\n      *\n-     * @throws IllegalArgumentException if the specified {@link SerializationFormat} is not for Thrift\n+     * @param serializationFormat a known serialization format\n+     * @return the protocol factory linked to the input serializationFormat\n+     * @deprecated use {@link ThriftSerializationFormats#tProtocolFactory(SerializationFormat)}.", "originalCommit": "3c649257297f8cd8f414cbcd8193e3551370cdf7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzODQ1NA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r530138454", "bodyText": "How about just toProtocolFactory() or protocolFactory()? That 't' looks somewhat awkward.", "author": "trustin", "createdAt": "2020-11-25T06:41:37Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftSerializationFormats.java", "diffHunk": "@@ -55,14 +62,43 @@\n      */\n     public static final SerializationFormat TEXT_NAMED_ENUM = SerializationFormat.of(\"ttext-named-enum\");\n \n-    private static final Set<SerializationFormat> THRIFT_FORMATS =\n-            ImmutableSet.of(BINARY, COMPACT, JSON, TEXT, TEXT_NAMED_ENUM);\n+    /**\n+     * A way to lookup the related {@link TProtocolFactory} from a {@link SerializationFormat}.\n+     * Entries are provided via registered SPI {@link ThriftProtocolFactoryProvider} implementations.\n+     */\n+    private static final Map<SerializationFormat, TProtocolFactory> knownProtocolFactories;\n+\n+    static {\n+        final List<ThriftProtocolFactoryProvider> providers = ImmutableList.copyOf(\n+                ServiceLoader.load(ThriftProtocolFactoryProvider.class,\n+                                   ThriftProtocolFactoryProvider.class.getClassLoader()));\n+        knownProtocolFactories = providers\n+                .stream()\n+                .map(ThriftProtocolFactoryProvider::entries)\n+                .flatMap(Set::stream)\n+                .collect(toImmutableMap(e -> e.serializationFormat, e -> e.tProtocolFactory));\n+    }\n+\n+    /**\n+     * Returns the {@link TProtocolFactory} for the specified {@link SerializationFormat}.\n+     *\n+     * @throws IllegalArgumentException if the specified {@link SerializationFormat} is not a\n+     *         known Thrift serialization format\n+     */\n+    public static TProtocolFactory tProtocolFactory(SerializationFormat serializationFormat) {", "originalCommit": "3c649257297f8cd8f414cbcd8193e3551370cdf7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzODY5OA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r530138698", "bodyText": "return -> returned", "author": "trustin", "createdAt": "2020-11-25T06:42:16Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/server/thrift/THttpServiceBuilder.java", "diffHunk": "@@ -121,11 +123,11 @@ public THttpServiceBuilder otherSerializationFormats(SerializationFormat otherSe\n     }\n \n     /**\n-     * Adds other {@link SerializationFormat} to the builder. Current supported {@link SerializationFormat}s are\n-     * {@link ThriftSerializationFormats#values()}. If nothing is specified then all the\n-     * {@link SerializationFormat#values()}s are added.\n+     * Adds other {@link SerializationFormat}s to the builder. If nothing is specified then all\n+     * {@link SerializationFormat}s return by {@link ThriftSerializationFormats#values()}", "originalCommit": "3c649257297f8cd8f414cbcd8193e3551370cdf7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzOTQ0OQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r530139449", "bodyText": "How about this:\nProvides Thrift-related {@link SerializationFormat} instances and their {@link TProtocolFactory}s.\n\n.. because whether this class registers anything is implementation detail.", "author": "trustin", "createdAt": "2020-11-25T06:44:30Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftSerializationFormats.java", "diffHunk": "@@ -15,16 +15,23 @@\n  */\n package com.linecorp.armeria.common.thrift;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n import static java.util.Objects.requireNonNull;\n \n+import java.util.List;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n import java.util.Set;\n \n-import com.google.common.collect.ImmutableSet;\n+import org.apache.thrift.protocol.TProtocolFactory;\n+\n+import com.google.common.collect.ImmutableList;\n \n import com.linecorp.armeria.common.SerializationFormat;\n \n /**\n- * Thrift-related {@link SerializationFormat} instances.\n+ * Registered Thrift-related {@link SerializationFormat} instances.", "originalCommit": "3c649257297f8cd8f414cbcd8193e3551370cdf7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzOTkzNQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r530139935", "bodyText": "Holds -> Provides ?", "author": "trustin", "createdAt": "2020-11-25T06:45:43Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftProtocolFactories.java", "diffHunk": "@@ -27,7 +27,7 @@\n import com.linecorp.armeria.common.thrift.text.TTextProtocolFactory;\n \n /**\n- * Provides a set of the known {@link TProtocolFactory} instances.\n+ * Holds a few known {@link TProtocolFactory} instances.", "originalCommit": "3c649257297f8cd8f414cbcd8193e3551370cdf7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0MzkzNA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r531243934", "bodyText": "Umm, why? This class doesn't provide anything", "author": "mauhiz", "createdAt": "2020-11-26T22:39:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzOTkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM3Mjg4MQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r531372881", "bodyText": "Hmm, doesn't it provide TProtocolFactory instances as static fields?", "author": "trustin", "createdAt": "2020-11-27T04:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzOTkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM3NTg1NA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r531375854", "bodyText": "Let me change this to move forward for today's release.", "author": "trustin", "createdAt": "2020-11-27T04:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEzOTkzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0MTEwMA==", "url": "https://github.com/line/armeria/pull/3183#discussion_r530141100", "bodyText": "How about reimplementing this method in ThriftSerializationFormats using a bidi map? e.g.\nSerializationFormat serfmt = ThriftSerializationFormats.of(protoFactory);", "author": "trustin", "createdAt": "2020-11-25T06:49:08Z", "path": "thrift0.13/src/main/java/com/linecorp/armeria/common/thrift/ThriftProtocolFactories.java", "diffHunk": "@@ -78,44 +78,28 @@ public String toString() {\n     public static final TProtocolFactory TEXT_NAMED_ENUM = TTextProtocolFactory.get(true);\n \n     /**\n-     * Returns the {@link TProtocolFactory} for the specified {@link SerializationFormat}.\n+     * Alias for {@link ThriftSerializationFormats#tProtocolFactory(SerializationFormat)}.\n      *\n-     * @throws IllegalArgumentException if the specified {@link SerializationFormat} is not for Thrift\n+     * @param serializationFormat a known serialization format\n+     * @return the protocol factory linked to the input serializationFormat\n+     * @deprecated use {@link ThriftSerializationFormats#tProtocolFactory(SerializationFormat)}.\n      */\n+    @Deprecated\n     public static TProtocolFactory get(SerializationFormat serializationFormat) {\n-        requireNonNull(serializationFormat, \"serializationFormat\");\n-\n-        if (serializationFormat == ThriftSerializationFormats.BINARY) {\n-            return BINARY;\n-        }\n-\n-        if (serializationFormat == ThriftSerializationFormats.COMPACT) {\n-            return COMPACT;\n-        }\n-\n-        if (serializationFormat == ThriftSerializationFormats.JSON) {\n-            return JSON;\n-        }\n-\n-        if (serializationFormat == ThriftSerializationFormats.TEXT) {\n-            return TEXT;\n-        }\n-\n-        if (serializationFormat == ThriftSerializationFormats.TEXT_NAMED_ENUM) {\n-            return TEXT_NAMED_ENUM;\n-        }\n-\n-        throw new IllegalArgumentException(\"non-Thrift serializationFormat: \" + serializationFormat);\n+        return ThriftSerializationFormats.tProtocolFactory(serializationFormat);\n     }\n \n     /**\n-     * Returns the {@link SerializationFormat} for the specified {@link TProtocolFactory}.\n+     * Returns the {@link SerializationFormat} for the specified {@link TProtocolFactory},\n+     * as if it were registered by {@link DefaultThriftProtocolFactoryProvider}.\n+     * Consider having your own {@link TProtocolFactory} to {@link SerializationFormat} mapping if necessary.\n      *\n-     * @throws IllegalArgumentException if the specified {@link TProtocolFactory} is not known by this class\n+     * @throws IllegalArgumentException if the specified {@link TProtocolFactory} did not match anything\n+     * @deprecated this method cannot reliably work with custom protocol factories\n      */\n+    @Deprecated\n     public static SerializationFormat toSerializationFormat(TProtocolFactory protoFactory) {", "originalCommit": "3c649257297f8cd8f414cbcd8193e3551370cdf7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0MzcxNw==", "url": "https://github.com/line/armeria/pull/3183#discussion_r531243717", "bodyText": "I'm afraid this doesn't help since most TProtocolFactory implementations don't have a stable equals. Anyways, what's the use case for generic reverse lookup?", "author": "mauhiz", "createdAt": "2020-11-26T22:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0MTEwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM3Mjc0MQ==", "url": "https://github.com/line/armeria/pull/3183#discussion_r531372741", "bodyText": "I agree. Fine with deprecation without replacement.", "author": "trustin", "createdAt": "2020-11-27T04:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0MTEwMA=="}], "type": "inlineReview"}, {"oid": "b3aedfe44820422637ed2fa87025729e61945fda", "url": "https://github.com/line/armeria/commit/b3aedfe44820422637ed2fa87025729e61945fda", "message": "Address review comments", "committedDate": "2020-11-26T22:59:37Z", "type": "commit"}, {"oid": "26bdfe2eea648ea4be329ddd58c73390d228e12c", "url": "https://github.com/line/armeria/commit/26bdfe2eea648ea4be329ddd58c73390d228e12c", "message": "Update ThriftProtocolFactories.java", "committedDate": "2020-11-27T04:10:56Z", "type": "commit"}, {"oid": "1df925df3ddf27857d8b1fd645428ac1599b763b", "url": "https://github.com/line/armeria/commit/1df925df3ddf27857d8b1fd645428ac1599b763b", "message": "Javadoc", "committedDate": "2020-11-27T04:25:35Z", "type": "commit"}, {"oid": "cb92b8f19c32619b2f2167c65c25fd2fcf495e04", "url": "https://github.com/line/armeria/commit/cb92b8f19c32619b2f2167c65c25fd2fcf495e04", "message": "Hyphen", "committedDate": "2020-11-27T04:27:31Z", "type": "commit"}]}