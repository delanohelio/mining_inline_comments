{"pr_number": 3010, "pr_title": "Add documentation for Kotlin coroutines", "pr_createdAt": "2020-08-20T11:44:43Z", "pr_url": "https://github.com/line/armeria/pull/3010", "timeline": [{"oid": "25c30893bcae226464014525379f66107601fcb3", "url": "https://github.com/line/armeria/commit/25c30893bcae226464014525379f66107601fcb3", "message": "Documentation for Kotlin Coroutines Support", "committedDate": "2020-08-20T11:38:45Z", "type": "commit"}, {"oid": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "url": "https://github.com/line/armeria/commit/5ae4f9338dfef01a502ab73d81cc9ec38f778005", "message": "add import sentence", "committedDate": "2020-08-20T11:48:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NDg1NQ==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474374855", "bodyText": "Does gitpod support Kotlin? If so, we could add a link to it like we did for annotated-http-service.", "author": "trustin", "createdAt": "2020-08-21T02:35:09Z", "path": "examples/README.md", "diffHunk": "@@ -6,6 +6,10 @@\n   - Learn how to write an HTTP service using annotations.\n   - See [Annotated services](https://armeria.dev/docs/server-annotated-service).\n \n+- `annotated-http-service-kotlin`", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM4MjI5OA==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474382298", "bodyText": "Gitpod seems to support Kotlin. https://www.gitpod.io/docs/languages/kotlin/", "author": "okue", "createdAt": "2020-08-21T03:03:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NDg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM4MjM3Mw==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474382373", "bodyText": "I'll add a link.", "author": "okue", "createdAt": "2020-08-21T03:03:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NDg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NTE2OA==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474375168", "bodyText": "We do not capitalize every word in headings. Kotlin coroutines support or Kotlin Coroutines support?", "author": "trustin", "createdAt": "2020-08-21T02:36:15Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM4NjIyNQ==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474386225", "bodyText": "I'll change to Kotlin coroutines support", "author": "okue", "createdAt": "2020-08-21T03:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NTE2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NTMwOA==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474375308", "bodyText": "Can we just return a String here?", "author": "trustin", "createdAt": "2020-08-21T02:36:52Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NTUyMA==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474375520", "bodyText": "armeria -> Armeria\nIf coroutine dispatcher is referred only once, how about just using an inline hyperlink?", "author": "trustin", "createdAt": "2020-08-21T02:37:50Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NTc3OQ==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474375779", "bodyText": "annotates methods -> annotate a service method\nenables ... -> enable the ... property,\n@Blocking -> <type://@Blocking>", "author": "trustin", "createdAt": "2020-08-21T02:38:56Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NTg2Mw==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474375863", "bodyText": "How about: A context-aware blocking executor is used as a dispatcher if you annotate ...", "author": "trustin", "createdAt": "2020-08-21T02:39:20Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NTkyNg==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474375926", "bodyText": "enables -> Enable\nMissing period", "author": "trustin", "createdAt": "2020-08-21T02:39:31Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.\n+\n+```kotlin\n+serverBuilder\n+    .annotatedService()\n+    // enables `useBlockingTaskExecutor`", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NjEyNQ==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474376125", "bodyText": "Ditto - could just return a String?", "author": "trustin", "createdAt": "2020-08-21T02:40:15Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.\n+\n+```kotlin\n+serverBuilder\n+    .annotatedService()\n+    // enables `useBlockingTaskExecutor`\n+    .useBlockingTaskExecutor(true)\n+    .build(MyAnnotatedService())\n+\n+// or\n+\n+import com.linecorp.armeria.server.annotation.Blocking\n+\n+class MyAnnotatedService {\n+    @Blocking\n+    @Get(\"/blocking/users/{name}\")\n+    suspend fun getUserTokenBlocking(@Param(\"name\") name: String): HttpResponse {\n+        val id = myReactiveClient.getId(name).await()\n+        val user = myBlockingRepository.findById(id)\n+        return HttpResponse.of(user.token)", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NjE5NA==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474376194", "bodyText": "and/or could be simplified to 'or'", "author": "trustin", "createdAt": "2020-08-21T02:40:34Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.\n+\n+```kotlin\n+serverBuilder\n+    .annotatedService()\n+    // enables `useBlockingTaskExecutor`\n+    .useBlockingTaskExecutor(true)\n+    .build(MyAnnotatedService())\n+\n+// or\n+\n+import com.linecorp.armeria.server.annotation.Blocking\n+\n+class MyAnnotatedService {\n+    @Blocking\n+    @Get(\"/blocking/users/{name}\")\n+    suspend fun getUserTokenBlocking(@Param(\"name\") name: String): HttpResponse {\n+        val id = myReactiveClient.getId(name).await()\n+        val user = myBlockingRepository.findById(id)\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+<Tip>\n+\n+If you use [Logback integration][logback] and/or [Zipkin integration][zipkin],", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NjU2Mg==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474376562", "bodyText": "... executed in a <type://RequestContext>-aware thread. ?\nIf >-aware breaks a link, then ... executed in a thread that is aware of <type://RequestContext>.", "author": "trustin", "createdAt": "2020-08-21T02:42:10Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.\n+\n+```kotlin\n+serverBuilder\n+    .annotatedService()\n+    // enables `useBlockingTaskExecutor`\n+    .useBlockingTaskExecutor(true)\n+    .build(MyAnnotatedService())\n+\n+// or\n+\n+import com.linecorp.armeria.server.annotation.Blocking\n+\n+class MyAnnotatedService {\n+    @Blocking\n+    @Get(\"/blocking/users/{name}\")\n+    suspend fun getUserTokenBlocking(@Param(\"name\") name: String): HttpResponse {\n+        val id = myReactiveClient.getId(name).await()\n+        val user = myBlockingRepository.findById(id)\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+<Tip>\n+\n+If you use [Logback integration][logback] and/or [Zipkin integration][zipkin],\n+coroutines should be executed in threads context aware of [RequestContext][ctx].", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM5MTIzMw==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474391233", "bodyText": "I rewrite to the latter one.", "author": "okue", "createdAt": "2020-08-21T03:41:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NjU2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NjYxMA==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474376610", "bodyText": "Could just inine", "author": "trustin", "createdAt": "2020-08-21T02:42:24Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.\n+\n+```kotlin\n+serverBuilder\n+    .annotatedService()\n+    // enables `useBlockingTaskExecutor`\n+    .useBlockingTaskExecutor(true)\n+    .build(MyAnnotatedService())\n+\n+// or\n+\n+import com.linecorp.armeria.server.annotation.Blocking\n+\n+class MyAnnotatedService {\n+    @Blocking\n+    @Get(\"/blocking/users/{name}\")\n+    suspend fun getUserTokenBlocking(@Param(\"name\") name: String): HttpResponse {\n+        val id = myReactiveClient.getId(name).await()\n+        val user = myBlockingRepository.findById(id)\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+<Tip>\n+\n+If you use [Logback integration][logback] and/or [Zipkin integration][zipkin],\n+coroutines should be executed in threads context aware of [RequestContext][ctx].\n+\n+</Tip>\n+\n+[CoroutineDispatcher]: https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/\n+[ctx]: https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/RequestContext.html\n+[logback]: /docs/advanced-logging\n+[zipkin]: /docs/advanced-zipkin", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3Njc3Mg==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474376772", "bodyText": "CoroutineContextService could be monospaced", "author": "trustin", "createdAt": "2020-08-21T02:42:52Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.\n+\n+```kotlin\n+serverBuilder\n+    .annotatedService()\n+    // enables `useBlockingTaskExecutor`\n+    .useBlockingTaskExecutor(true)\n+    .build(MyAnnotatedService())\n+\n+// or\n+\n+import com.linecorp.armeria.server.annotation.Blocking\n+\n+class MyAnnotatedService {\n+    @Blocking\n+    @Get(\"/blocking/users/{name}\")\n+    suspend fun getUserTokenBlocking(@Param(\"name\") name: String): HttpResponse {\n+        val id = myReactiveClient.getId(name).await()\n+        val user = myBlockingRepository.findById(id)\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+<Tip>\n+\n+If you use [Logback integration][logback] and/or [Zipkin integration][zipkin],\n+coroutines should be executed in threads context aware of [RequestContext][ctx].\n+\n+</Tip>\n+\n+[CoroutineDispatcher]: https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/\n+[ctx]: https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/RequestContext.html\n+[logback]: /docs/advanced-logging\n+[zipkin]: /docs/advanced-zipkin\n+\n+### CoroutineContextService decorator", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NzAyMw==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474377023", "bodyText": "Kotlin coroutines support or Kotlin Coroutines support ?", "author": "trustin", "createdAt": "2020-08-21T02:43:48Z", "path": "site/src/pages/docs/setup.mdx", "diffHunk": "@@ -40,6 +40,9 @@ the list of major Armeria artifacts which might interest you:\n +---------------------------------------------+---------------------------------------------------------------------------------+\n | `armeria-kafka`                             | Enables sending access logs to Kafka                                            |\n +---------------------------------------------+---------------------------------------------------------------------------------+\n+| `armeria-kotlin`                            | Kotlin support.                                                                 |\n+|                                             | See [Kotlin Coroutines Support][kotlin-coroutines-support].                     |", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NDIwNQ==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474374205", "bodyText": "Let's add a reference link for Kotlin Coroutines\nhttps://kotlinlang.org/docs/reference/coroutines-overview.html\nBetter to describe how to install the Kotlin module?\ndependencies {\n    implementation 'com.linecorp.armeria:armeria-kotlin'\n}", "author": "ikhoon", "createdAt": "2020-08-21T02:32:33Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NDk0NA==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474374944", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n          \n          \n            \n            If you annotates methods with <type://@Blocking> or enables <type://AnnotatedServiceBindingBuilder#useBlockingTaskExecutor(boolean)>,", "author": "ikhoon", "createdAt": "2020-08-21T02:35:22Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NTAzOQ==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474375039", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n          \n          \n            \n            By default, Armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].", "author": "ikhoon", "createdAt": "2020-08-21T02:35:43Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3NzI1OA==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474377258", "bodyText": "It would be more natural to return String for annotated services if don't need to control HTTP status or other headers.", "author": "ikhoon", "createdAt": "2020-08-21T02:44:41Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM3Nzg5Nw==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474377897", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            using `CoroutineContextService` decorator.\n          \n          \n            \n            using <type://CoroutineContextService> decorator.", "author": "ikhoon", "createdAt": "2020-08-21T02:47:22Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,71 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin Coroutines Support\n+\n+You can implement annotated services with Kotlin Coroutines.\n+\n+```kotlin\n+class MyAnnotatedService {\n+    @Get(\"/users/{name}\")\n+    suspend fun getUserToken(@Param(\"name\") name: String): HttpResponse {\n+        val user = myReactiveRepository.findByName(name).await()\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+By default, armeria uses a context-aware event loop as a [coroutine dispatcher][CoroutineDispatcher].\n+If you annotates methods with `@Blocking` or enables `useBlockingTaskExecutor`,\n+a context-aware blocking executor is used as a dispatcher.\n+\n+```kotlin\n+serverBuilder\n+    .annotatedService()\n+    // enables `useBlockingTaskExecutor`\n+    .useBlockingTaskExecutor(true)\n+    .build(MyAnnotatedService())\n+\n+// or\n+\n+import com.linecorp.armeria.server.annotation.Blocking\n+\n+class MyAnnotatedService {\n+    @Blocking\n+    @Get(\"/blocking/users/{name}\")\n+    suspend fun getUserTokenBlocking(@Param(\"name\") name: String): HttpResponse {\n+        val id = myReactiveClient.getId(name).await()\n+        val user = myBlockingRepository.findById(id)\n+        return HttpResponse.of(user.token)\n+    }\n+}\n+```\n+\n+<Tip>\n+\n+If you use [Logback integration][logback] and/or [Zipkin integration][zipkin],\n+coroutines should be executed in threads context aware of [RequestContext][ctx].\n+\n+</Tip>\n+\n+[CoroutineDispatcher]: https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/\n+[ctx]: https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/RequestContext.html\n+[logback]: /docs/advanced-logging\n+[zipkin]: /docs/advanced-zipkin\n+\n+### CoroutineContextService decorator\n+\n+Armeria provides a way to configure a coroutine context of annotated service methods\n+using `CoroutineContextService` decorator.", "originalCommit": "5ae4f9338dfef01a502ab73d81cc9ec38f778005", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e8731120faf0ec60a8e9d6ce7551d38a8891ed53", "url": "https://github.com/line/armeria/commit/e8731120faf0ec60a8e9d6ce7551d38a8891ed53", "message": "Add a link to gitpod", "committedDate": "2020-08-21T03:14:03Z", "type": "commit"}, {"oid": "ef2290b1583a252ebd3185c5b58176dd0334e942", "url": "https://github.com/line/armeria/commit/ef2290b1583a252ebd3185c5b58176dd0334e942", "message": "fix project name of gitpod", "committedDate": "2020-08-21T03:15:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM4NjI4NQ==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474386285", "bodyText": "\ud83d\ude31", "author": "ikhoon", "createdAt": "2020-08-21T03:19:57Z", "path": "examples/README.md", "diffHunk": "@@ -1,11 +1,18 @@\n # Armeria examples\n \n-- `annotated-http-service` <a href=\"https://gitpod.io/#project=annotated-http-service/https://github.com/ikhoon/armeria-examples/tree/master/annotated-http-service/src/main/java/example/armeria/server/annotated/Main.java\">", "originalCommit": "ef2290b1583a252ebd3185c5b58176dd0334e942", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "70f7c5ff3cf6ca0a08e519de8745d5d787a1627c", "url": "https://github.com/line/armeria/commit/70f7c5ff3cf6ca0a08e519de8745d5d787a1627c", "message": "address comments by @trustin", "committedDate": "2020-08-21T03:23:32Z", "type": "commit"}, {"oid": "955c39d5340a21d893a34d2b2b1fc0cc1495372d", "url": "https://github.com/line/armeria/commit/955c39d5340a21d893a34d2b2b1fc0cc1495372d", "message": "address comments by @trustin", "committedDate": "2020-08-21T03:30:00Z", "type": "commit"}, {"oid": "bcf9f991d1d1eaeef8cf49aa777952853f1288ec", "url": "https://github.com/line/armeria/commit/bcf9f991d1d1eaeef8cf49aa777952853f1288ec", "message": "address comments by @ikhoon", "committedDate": "2020-08-21T03:32:14Z", "type": "commit"}, {"oid": "e2f6f684731069df7686c456d95774c0e94ce090", "url": "https://github.com/line/armeria/commit/e2f6f684731069df7686c456d95774c0e94ce090", "message": "address comments", "committedDate": "2020-08-21T03:37:15Z", "type": "commit"}, {"oid": "173d1961644cee86f5c462d7baee693962b9bc8b", "url": "https://github.com/line/armeria/commit/173d1961644cee86f5c462d7baee693962b9bc8b", "message": "address comments by @trustin", "committedDate": "2020-08-21T03:42:16Z", "type": "commit"}, {"oid": "61d07e7605d13501ba33bd289de94b0e414a7e1f", "url": "https://github.com/line/armeria/commit/61d07e7605d13501ba33bd289de94b0e414a7e1f", "message": "add gradle setting", "committedDate": "2020-08-21T03:57:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM5ODg3OA==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474398878", "bodyText": "Kotlin coroutines support?", "author": "trustin", "createdAt": "2020-08-21T04:15:54Z", "path": "examples/README.md", "diffHunk": "@@ -1,11 +1,18 @@\n # Armeria examples\n \n-- `annotated-http-service` <a href=\"https://gitpod.io/#project=annotated-http-service/https://github.com/ikhoon/armeria-examples/tree/master/annotated-http-service/src/main/java/example/armeria/server/annotated/Main.java\">\n+- `annotated-http-service` <a href=\"https://gitpod.io/#project=annotated-http-service/https://github.com/line/armeria-examples/tree/master/annotated-http-service/src/main/java/example/armeria/server/annotated/Main.java\">\n                              <img align=\"absmiddle\" height=\"20\" src=\"https://gitpod.io/button/open-in-gitpod.svg\"/>\n                            </a> \n   - Learn how to write an HTTP service using annotations.\n   - See [Annotated services](https://armeria.dev/docs/server-annotated-service).\n \n+- `annotated-http-service-kotlin` <a href=\"https://gitpod.io/#project=annotated-http-service-kotlin/https://github.com/line/armeria-examples/tree/master/annotated-http-service-kotlin/src/main/kotlin/example/armeria/server/annotated/kotlin/Main.kt\">\n+                                    <img align=\"absmiddle\" height=\"20\" src=\"https://gitpod.io/button/open-in-gitpod.svg\"/>\n+                                  </a>\n+  - Learn how to write an HTTP service using annotations.\n+  - Learn how to write an HTTP service using annotations with Kotlin Coroutines.\n+  - See [Kotlin Coroutines Support](https://armeria.dev/docs/server-annotated-service#kotlin-coroutines-support).", "originalCommit": "61d07e7605d13501ba33bd289de94b0e414a7e1f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "369d20bfa57ac8bd7dca865b3cdea384b9296b90", "url": "https://github.com/line/armeria/commit/369d20bfa57ac8bd7dca865b3cdea384b9296b90", "message": "address comments by @trustin", "committedDate": "2020-08-21T05:00:03Z", "type": "commit"}, {"oid": "eb57a8091576735724aa64f96bdd6e7a9194d4eb", "url": "https://github.com/line/armeria/commit/eb57a8091576735724aa64f96bdd6e7a9194d4eb", "message": "remove values from `@Param`", "committedDate": "2020-08-21T05:23:53Z", "type": "commit"}, {"oid": "1b2987a45b15a712ee5c0306deb6e1590a241e90", "url": "https://github.com/line/armeria/commit/1b2987a45b15a712ee5c0306deb6e1590a241e90", "message": "add guide for -java-parameters option", "committedDate": "2020-08-21T05:41:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyMjI2NQ==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474422265", "bodyText": "Could be removed or leave it intentionally?", "author": "ikhoon", "createdAt": "2020-08-21T05:50:14Z", "path": "examples/README.md", "diffHunk": "@@ -1,11 +1,18 @@\n # Armeria examples\n \n-- `annotated-http-service` <a href=\"https://gitpod.io/#project=annotated-http-service/https://github.com/ikhoon/armeria-examples/tree/master/annotated-http-service/src/main/java/example/armeria/server/annotated/Main.java\">\n+- `annotated-http-service` <a href=\"https://gitpod.io/#project=annotated-http-service/https://github.com/line/armeria-examples/tree/master/annotated-http-service/src/main/java/example/armeria/server/annotated/Main.java\">\n                              <img align=\"absmiddle\" height=\"20\" src=\"https://gitpod.io/button/open-in-gitpod.svg\"/>\n                            </a> \n   - Learn how to write an HTTP service using annotations.\n   - See [Annotated services](https://armeria.dev/docs/server-annotated-service).\n \n+- `annotated-http-service-kotlin` <a href=\"https://gitpod.io/#project=annotated-http-service-kotlin/https://github.com/line/armeria-examples/tree/master/annotated-http-service-kotlin/src/main/kotlin/example/armeria/server/annotated/kotlin/Main.kt\">\n+                                    <img align=\"absmiddle\" height=\"20\" src=\"https://gitpod.io/button/open-in-gitpod.svg\"/>\n+                                  </a>\n+  - Learn how to write an HTTP service using annotations.", "originalCommit": "1b2987a45b15a712ee5c0306deb6e1590a241e90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyMzMyOA==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474423328", "bodyText": "oops", "author": "okue", "createdAt": "2020-08-21T05:54:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyMjI2NQ=="}], "type": "inlineReview"}, {"oid": "03928175f91fd56a652ac31c4e0867bdb4978f8d", "url": "https://github.com/line/armeria/commit/03928175f91fd56a652ac31c4e0867bdb4978f8d", "message": "address comments by @ikhoon", "committedDate": "2020-08-21T05:55:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQyMzg3MA==", "url": "https://github.com/line/armeria/pull/3010#discussion_r474423870", "bodyText": "nit: dependencies.", "author": "minwoox", "createdAt": "2020-08-21T05:56:08Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -1428,3 +1428,84 @@ for more information about RPC and HTTP service names, and how to use it.\n </Tip>\n \n [Publisher]: https://www.reactive-streams.org/reactive-streams-1.0.2-javadoc/org/reactivestreams/Publisher.html\n+\n+## Kotlin coroutines support\n+\n+You can implement annotated services with [Kotlin coroutines](https://kotlinlang.org/docs/reference/coroutines-overview.html)\n+by adding the following dependency.", "originalCommit": "03928175f91fd56a652ac31c4e0867bdb4978f8d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5774f52c0558d55b857304b70bf6334b2cd9c771", "url": "https://github.com/line/armeria/commit/5774f52c0558d55b857304b70bf6334b2cd9c771", "message": "address comments by @minwoox", "committedDate": "2020-08-21T06:01:47Z", "type": "commit"}]}