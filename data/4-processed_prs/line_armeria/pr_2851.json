{"pr_number": 2851, "pr_title": "Add `ClientRequestContext` to the filters of RetryRule and CircuitBre\u2026", "pr_createdAt": "2020-06-29T11:20:58Z", "pr_url": "https://github.com/line/armeria/pull/2851", "timeline": [{"oid": "ce7a993650d71678213e65b760b92bdf8f5af060", "url": "https://github.com/line/armeria/commit/ce7a993650d71678213e65b760b92bdf8f5af060", "message": "Add `ClientRequestContext` to the filters of RetryRule and CircuitBreakerRule\n\nMotivation:\nIt is useful to use `ClientRequestContext` information to build a complex RetryRule{WithContent} and CircuitBreakerRule{WithContent}.\nFor example, if you apply a `RetryRule` only to a specific RPC method,\nthen you need to check the current served method using `ClientRequestContext#rpcRequest()`\nAlthough it could be possible by implementing `RetryRule`, `RetryRuleBuilder` would be more convenient.\n```java\nBackoff backoff = ...\nCompletableFuture<RetryDecision> retryDecisionFuture =\n     CompletableFuture.completedFuture(RetryDecision.retry(backoff));\nCompletableFuture<RetryDecision> nextDecisionFuture =\n     CompletableFuture.completedFuture(RetryDecision.next());\n\nRetryRuleWithContent<RpcResponse> rule = (ctx, response, cause) -> {\n    final RpcRequest request = ctx.rpcRequest();\n    if (request != null && !safeMethods.contains(request.method())) {\n        if (isRetryableException(cause)) {\n            return retryDecisionFuture;\n        }\n    }\n    return nextDecisionFuture;\n};\n\n// Versus:\nBackoff backoff = ...\nRetryRuleWithContent.<RpcResponse>builder()\n                    .onException((ctx, ex) -> {\n                        RpcRequest request = ctx.rpcRequest();\n                        if (request != null && !safeMethods.contains(request.method())) {\n                            return isRetryableException(throwable);\n                        } else {\n                            return false;\n                        }\n                    })\n                    .thenBackoff(backoff);\n```\n\nModifications:\n\n- Add new methods that take `BiPredicate<ClientRequestContext, ?>` as a predicate.\n- Deprecate on*(Predicate<?>) methods in the followings in favor of `on*(BiPredicate<ClientRequestContext, ?>)`:\n  - RetryRule and RetryRuleBuilder\n  - RetryRuleWithContent and RetryRuleWithContentBuilder\n  - CircuitBreakerRule and CircuitBreakerRuleBuilder\n  - CircuitBreakerRuleWithContent and CircuitBreakerRuleWithContentBuilder\n\nResult:\n\nYou can now use ClientRequestContext to build a complex RetyRule and CircuitBreakerRule.", "committedDate": "2020-06-29T10:44:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNjQ4OA==", "url": "https://github.com/line/armeria/pull/2851#discussion_r447436488", "bodyText": "How about BiPredicates.second()?", "author": "minwoox", "createdAt": "2020-06-30T06:21:13Z", "path": "core/src/main/java/com/linecorp/armeria/client/AbstractRuleBuilder.java", "diffHunk": "@@ -46,55 +48,90 @@\n @UnstableApi\n public abstract class AbstractRuleBuilder {\n \n-    private final Predicate<RequestHeaders> requestHeadersFilter;\n+    private final BiPredicate<ClientRequestContext, RequestHeaders> requestHeadersFilter;\n \n     @Nullable\n-    private Predicate<ResponseHeaders> responseHeadersFilter;\n+    private BiPredicate<ClientRequestContext, ResponseHeaders> responseHeadersFilter;\n     @Nullable\n-    private Predicate<HttpHeaders> responseTrailersFilter;\n+    private BiPredicate<ClientRequestContext, HttpHeaders> responseTrailersFilter;\n     @Nullable\n-    private Predicate<Throwable> exceptionFilter;\n+    private BiPredicate<ClientRequestContext, Throwable> exceptionFilter;\n \n     /**\n      * Creates a new instance with the specified {@code requestHeadersFilter}.\n      */\n     @SuppressWarnings(\"unchecked\")\n+    protected AbstractRuleBuilder(\n+            BiPredicate<? super ClientRequestContext, ? super RequestHeaders> requestHeadersFilter) {\n+        this.requestHeadersFilter = (BiPredicate<ClientRequestContext, RequestHeaders>) requestHeadersFilter;\n+    }\n+\n+    /**\n+     * Creates a new instance with the specified {@code requestHeadersFilter}.\n+     *\n+     * @deprecated Use {@link #AbstractRuleBuilder(BiPredicate)}.\n+     */\n+    @Deprecated\n     protected AbstractRuleBuilder(Predicate<? super RequestHeaders> requestHeadersFilter) {\n-        this.requestHeadersFilter = (Predicate<RequestHeaders>) requestHeadersFilter;\n+        this(toBiPredicateForSecond(requireNonNull(requestHeadersFilter, \"requestHeadersFilter\")));", "originalCommit": "ce7a993650d71678213e65b760b92bdf8f5af060", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNTA3Nw==", "url": "https://github.com/line/armeria/pull/2851#discussion_r447505077", "bodyText": "I thought that names too. I was not sure that the second() expresses the behavior. \ud83e\udd14\n\nFunctions.second() returns a BiFunction that returns its second arguments.\nBiPredicates.second(Predicate) that returns a BiPredicate that uses only the second argument to evaluate the predicate.\n\nHow about BiPredicates.ofSecond(Predicate) at least to indicate the method is a factory?", "author": "ikhoon", "createdAt": "2020-06-30T08:27:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNjQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxMTczOA==", "url": "https://github.com/line/armeria/pull/2851#discussion_r447511738", "bodyText": "We're probably gonna remove it once the deprecated methods are gone, so.. maybe OK not to care about naming? \ud83d\ude05", "author": "trustin", "createdAt": "2020-06-30T08:37:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNjQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxNjkyNw==", "url": "https://github.com/line/armeria/pull/2851#discussion_r447516927", "bodyText": "We're probably gonna remove it once the deprecated methods are gone, so.. maybe OK not to care about naming? \ud83d\ude05\n\nYes, the BiPredicates class will be removed eventually.", "author": "ikhoon", "createdAt": "2020-06-30T08:44:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNjQ4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxNzQ5Mg==", "url": "https://github.com/line/armeria/pull/2851#discussion_r447517492", "bodyText": "If so, then it's fine as it is. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-06-30T08:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNjQ4OA=="}], "type": "inlineReview"}]}