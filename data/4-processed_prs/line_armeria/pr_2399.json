{"pr_number": 2399, "pr_title": "Add examples for context propagation using kotlin coroutine", "pr_createdAt": "2020-01-15T05:20:18Z", "pr_url": "https://github.com/line/armeria/pull/2399", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY5OTk5MQ==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366699991", "bodyText": "Remove", "author": "anuraaga", "createdAt": "2020-01-15T05:21:47Z", "path": "examples/context-propagation/kotlin/build.gradle", "diffHunk": "@@ -0,0 +1,25 @@\n+plugins {\n+    id 'application'\n+    id \"org.jetbrains.kotlin.jvm\"\n+}\n+\n+dependencies {\n+    implementation project(':core')\n+\n+    implementation 'io.reactivex.rxjava2:rxjava'", "originalCommit": "2ef731e514ca70fc662793b82203e5c68cefa70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcwMDAwMQ==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366700001", "bodyText": "Remove", "author": "anuraaga", "createdAt": "2020-01-15T05:21:51Z", "path": "examples/context-propagation/kotlin/build.gradle", "diffHunk": "@@ -0,0 +1,25 @@\n+plugins {\n+    id 'application'\n+    id \"org.jetbrains.kotlin.jvm\"\n+}\n+\n+dependencies {\n+    implementation project(':core')\n+\n+    implementation 'io.reactivex.rxjava2:rxjava'\n+    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'\n+    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core'\n+    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8'\n+    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-rx2'", "originalCommit": "2ef731e514ca70fc662793b82203e5c68cefa70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcwMDEwMQ==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366700101", "bodyText": "Do you need : ServiceRequestContext? Or is it just more idiomatic in kotlin?", "author": "anuraaga", "createdAt": "2020-01-15T05:22:26Z", "path": "examples/context-propagation/kotlin/src/main/kotlin/example/armeria/contextpropagation/manual/Main.kt", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package example.armeria.contextpropagation.manual\n+\n+import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.common.HttpResponse\n+import com.linecorp.armeria.common.HttpStatus\n+import com.linecorp.armeria.server.Server\n+import com.linecorp.armeria.server.ServiceRequestContext\n+\n+fun main(args: Array<String>) {\n+    val backend = Server.builder()\n+        .service(\"/square/{num}\") { ctx: ServiceRequestContext, _ ->", "originalCommit": "2ef731e514ca70fc662793b82203e5c68cefa70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcwMDIyOQ==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366700229", "bodyText": "We're not bothering being safe about this check this in other examples, probably fine not to here (or otherwise we could update the other examples", "author": "anuraaga", "createdAt": "2020-01-15T05:23:18Z", "path": "examples/context-propagation/kotlin/src/main/kotlin/example/armeria/contextpropagation/manual/Main.kt", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package example.armeria.contextpropagation.manual\n+\n+import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.common.HttpResponse\n+import com.linecorp.armeria.common.HttpStatus\n+import com.linecorp.armeria.server.Server\n+import com.linecorp.armeria.server.ServiceRequestContext\n+\n+fun main(args: Array<String>) {\n+    val backend = Server.builder()\n+        .service(\"/square/{num}\") { ctx: ServiceRequestContext, _ ->\n+            val num = try {\n+                ctx.pathParam(\"num\")?.toLong()\n+            } catch (e: NumberFormatException) {", "originalCommit": "2ef731e514ca70fc662793b82203e5c68cefa70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcwMDMzNQ==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366700335", "bodyText": "Do you need Runnable?", "author": "anuraaga", "createdAt": "2020-01-15T05:23:51Z", "path": "examples/context-propagation/kotlin/src/main/kotlin/example/armeria/contextpropagation/manual/Main.kt", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package example.armeria.contextpropagation.manual\n+\n+import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.common.HttpResponse\n+import com.linecorp.armeria.common.HttpStatus\n+import com.linecorp.armeria.server.Server\n+import com.linecorp.armeria.server.ServiceRequestContext\n+\n+fun main(args: Array<String>) {\n+    val backend = Server.builder()\n+        .service(\"/square/{num}\") { ctx: ServiceRequestContext, _ ->\n+            val num = try {\n+                ctx.pathParam(\"num\")?.toLong()\n+            } catch (e: NumberFormatException) {\n+                return@service HttpResponse.of(HttpStatus.BAD_REQUEST)\n+            }\n+            if (num != null) {\n+                HttpResponse.of((num * num).toString())\n+            } else {\n+                HttpResponse.of(HttpStatus.BAD_REQUEST)\n+            }\n+        }\n+        .http(8081)\n+        .build()\n+    val backendClient = WebClient.of(\"http://localhost:8081\")\n+    val frontend = Server.builder()\n+        .http(8080)\n+        .serviceUnder(\"/\", MainService(backendClient))\n+        .build()\n+    Runtime.getRuntime().addShutdownHook(Thread(Runnable {", "originalCommit": "2ef731e514ca70fc662793b82203e5c68cefa70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcwMDUxMg==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366700512", "bodyText": "I think we should be able to use Armeria's code style at least for the imports (we do in grpc-kotlin example)", "author": "anuraaga", "createdAt": "2020-01-15T05:25:07Z", "path": "examples/context-propagation/kotlin/src/main/kotlin/example/armeria/contextpropagation/manual/MainService.kt", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package example.armeria.contextpropagation.manual\n+\n+import com.google.common.base.Splitter", "originalCommit": "2ef731e514ca70fc662793b82203e5c68cefa70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcwMDg0MA==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366700840", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private suspend fun fetchFromRequest(req: HttpRequest): List<Long> {\n          \n          \n            \n                private suspend fun fetchFromRequest(req: HttpRequest): List<Long> {\n          \n          \n            \n                  // The context is mounted in a thread-local, meaning it is available to all logic such as tracing.\n          \n          \n            \n                  require(ServiceRequestContext.current() === ctx)\n          \n          \n            \n                  require(ctx.eventLoop().inEventLoop())", "author": "anuraaga", "createdAt": "2020-01-15T05:27:15Z", "path": "examples/context-propagation/kotlin/src/main/kotlin/example/armeria/contextpropagation/manual/MainService.kt", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package example.armeria.contextpropagation.manual\n+\n+import com.google.common.base.Splitter\n+import com.google.common.collect.ImmutableList\n+import com.google.common.collect.Iterables\n+import com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly\n+import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.common.AggregatedHttpResponse\n+import com.linecorp.armeria.common.HttpRequest\n+import com.linecorp.armeria.common.HttpResponse\n+import com.linecorp.armeria.server.HttpService\n+import com.linecorp.armeria.server.ServiceRequestContext\n+import kotlinx.coroutines.GlobalScope\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.async\n+import kotlinx.coroutines.awaitAll\n+import kotlinx.coroutines.future.asDeferred\n+import kotlinx.coroutines.future.await\n+import kotlinx.coroutines.future.future\n+import kotlinx.coroutines.withContext\n+import java.time.Duration\n+import java.util.function.Function\n+import java.util.stream.Collectors\n+\n+class MainService(private val backendClient: WebClient) : HttpService {\n+    override fun serve(ctx: ServiceRequestContext, req: HttpRequest): HttpResponse {\n+        val ctxExecutor = ctx.contextAwareExecutor()\n+        val response = GlobalScope.future(ctxExecutor.asCoroutineDispatcher()) {\n+            val numsFromRequest = async { fetchFromRequest(req) }\n+            val numsFromDb = async { fetchFromFakeDb(ctx) }\n+            val nums = awaitAll(numsFromRequest, numsFromDb).flatten()\n+            val backendResponses = awaitAll(\n+                *nums.map { num ->\n+                    // The context is mounted in a thread-local, meaning it is available to all logic such\n+                    // as tracing.\n+                    require(ServiceRequestContext.current() === ctx)\n+                    require(ctx.eventLoop().inEventLoop())\n+                    backendClient.get(\"/square/$num\").aggregate().asDeferred()\n+                }.toTypedArray()\n+            ).toList()\n+            // The context is mounted in a thread-local, meaning it is available to all logic such as tracing.\n+            require(ServiceRequestContext.current() === ctx)\n+            require(ctx.eventLoop().inEventLoop())\n+            HttpResponse.of(\n+                backendResponses.stream()\n+                    .map(Function { obj: AggregatedHttpResponse -> obj.contentUtf8() })\n+                    .collect(Collectors.joining(\"\\n\"))\n+            )\n+        }\n+        return HttpResponse.from(response)\n+    }\n+\n+    private suspend fun fetchFromRequest(req: HttpRequest): List<Long> {", "originalCommit": "2ef731e514ca70fc662793b82203e5c68cefa70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcwMDk4Ng==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366700986", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    val nums = mutableListOf<Long>()\n          \n          \n            \n                    // The context is mounted in a thread-local, meaning it is available to all logic such as tracing.\n          \n          \n            \n                    require(ServiceRequestContext.current() === ctx)\n          \n          \n            \n                    require(ctx.eventLoop().inEventLoop())\n          \n          \n            \n                    val nums = mutableListOf<Long>()", "author": "anuraaga", "createdAt": "2020-01-15T05:28:10Z", "path": "examples/context-propagation/kotlin/src/main/kotlin/example/armeria/contextpropagation/manual/MainService.kt", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package example.armeria.contextpropagation.manual\n+\n+import com.google.common.base.Splitter\n+import com.google.common.collect.ImmutableList\n+import com.google.common.collect.Iterables\n+import com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly\n+import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.common.AggregatedHttpResponse\n+import com.linecorp.armeria.common.HttpRequest\n+import com.linecorp.armeria.common.HttpResponse\n+import com.linecorp.armeria.server.HttpService\n+import com.linecorp.armeria.server.ServiceRequestContext\n+import kotlinx.coroutines.GlobalScope\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.async\n+import kotlinx.coroutines.awaitAll\n+import kotlinx.coroutines.future.asDeferred\n+import kotlinx.coroutines.future.await\n+import kotlinx.coroutines.future.future\n+import kotlinx.coroutines.withContext\n+import java.time.Duration\n+import java.util.function.Function\n+import java.util.stream.Collectors\n+\n+class MainService(private val backendClient: WebClient) : HttpService {\n+    override fun serve(ctx: ServiceRequestContext, req: HttpRequest): HttpResponse {\n+        val ctxExecutor = ctx.contextAwareExecutor()\n+        val response = GlobalScope.future(ctxExecutor.asCoroutineDispatcher()) {\n+            val numsFromRequest = async { fetchFromRequest(req) }\n+            val numsFromDb = async { fetchFromFakeDb(ctx) }\n+            val nums = awaitAll(numsFromRequest, numsFromDb).flatten()\n+            val backendResponses = awaitAll(\n+                *nums.map { num ->\n+                    // The context is mounted in a thread-local, meaning it is available to all logic such\n+                    // as tracing.\n+                    require(ServiceRequestContext.current() === ctx)\n+                    require(ctx.eventLoop().inEventLoop())\n+                    backendClient.get(\"/square/$num\").aggregate().asDeferred()\n+                }.toTypedArray()\n+            ).toList()\n+            // The context is mounted in a thread-local, meaning it is available to all logic such as tracing.\n+            require(ServiceRequestContext.current() === ctx)\n+            require(ctx.eventLoop().inEventLoop())\n+            HttpResponse.of(\n+                backendResponses.stream()\n+                    .map(Function { obj: AggregatedHttpResponse -> obj.contentUtf8() })\n+                    .collect(Collectors.joining(\"\\n\"))\n+            )\n+        }\n+        return HttpResponse.from(response)\n+    }\n+\n+    private suspend fun fetchFromRequest(req: HttpRequest): List<Long> {\n+        val aggregatedHttpRequest = req.aggregate().await()\n+        val nums = mutableListOf<Long>()", "originalCommit": "2ef731e514ca70fc662793b82203e5c68cefa70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcwMjgxMg==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366702812", "bodyText": "Doesn't Kotlin have method reference too? obj::contentUtf8?", "author": "anuraaga", "createdAt": "2020-01-15T05:38:04Z", "path": "examples/context-propagation/kotlin/src/main/kotlin/example/armeria/contextpropagation/manual/MainService.kt", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package example.armeria.contextpropagation.manual\n+\n+import com.google.common.base.Splitter\n+import com.google.common.collect.ImmutableList\n+import com.google.common.collect.Iterables\n+import com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly\n+import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.common.AggregatedHttpResponse\n+import com.linecorp.armeria.common.HttpRequest\n+import com.linecorp.armeria.common.HttpResponse\n+import com.linecorp.armeria.server.HttpService\n+import com.linecorp.armeria.server.ServiceRequestContext\n+import kotlinx.coroutines.GlobalScope\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.async\n+import kotlinx.coroutines.awaitAll\n+import kotlinx.coroutines.future.asDeferred\n+import kotlinx.coroutines.future.await\n+import kotlinx.coroutines.future.future\n+import kotlinx.coroutines.withContext\n+import java.time.Duration\n+import java.util.function.Function\n+import java.util.stream.Collectors\n+\n+class MainService(private val backendClient: WebClient) : HttpService {\n+    override fun serve(ctx: ServiceRequestContext, req: HttpRequest): HttpResponse {\n+        val ctxExecutor = ctx.contextAwareExecutor()\n+        val response = GlobalScope.future(ctxExecutor.asCoroutineDispatcher()) {\n+            val numsFromRequest = async { fetchFromRequest(req) }\n+            val numsFromDb = async { fetchFromFakeDb(ctx) }\n+            val nums = awaitAll(numsFromRequest, numsFromDb).flatten()\n+            val backendResponses = awaitAll(\n+                *nums.map { num ->\n+                    // The context is mounted in a thread-local, meaning it is available to all logic such\n+                    // as tracing.\n+                    require(ServiceRequestContext.current() === ctx)\n+                    require(ctx.eventLoop().inEventLoop())\n+                    backendClient.get(\"/square/$num\").aggregate().asDeferred()\n+                }.toTypedArray()\n+            ).toList()\n+            // The context is mounted in a thread-local, meaning it is available to all logic such as tracing.\n+            require(ServiceRequestContext.current() === ctx)\n+            require(ctx.eventLoop().inEventLoop())\n+            HttpResponse.of(\n+                backendResponses.stream()\n+                    .map(Function { obj: AggregatedHttpResponse -> obj.contentUtf8() })", "originalCommit": "2ef731e514ca70fc662793b82203e5c68cefa70d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f3359ca8d479e3c9b3df7c04e13eeb006356a475", "url": "https://github.com/line/armeria/commit/f3359ca8d479e3c9b3df7c04e13eeb006356a475", "message": "Add examples for context propagation using kotlin coroutine\n\nhis changeset adds the examples for context propagation using kotlin coroutines.", "committedDate": "2020-01-15T05:57:10Z", "type": "forcePushed"}, {"oid": "51fe81d6469451d2bd4f4b25d21cd2cbccc00930", "url": "https://github.com/line/armeria/commit/51fe81d6469451d2bd4f4b25d21cd2cbccc00930", "message": "Add examples for context propagation using kotlin coroutine\n\nhis changeset adds the examples for context propagation using kotlin coroutines.", "committedDate": "2020-01-15T06:12:30Z", "type": "commit"}, {"oid": "51fe81d6469451d2bd4f4b25d21cd2cbccc00930", "url": "https://github.com/line/armeria/commit/51fe81d6469451d2bd4f4b25d21cd2cbccc00930", "message": "Add examples for context propagation using kotlin coroutine\n\nhis changeset adds the examples for context propagation using kotlin coroutines.", "committedDate": "2020-01-15T06:12:30Z", "type": "forcePushed"}, {"oid": "1347547769ad01554b6c6769bc1615076c683c39", "url": "https://github.com/line/armeria/commit/1347547769ad01554b6c6769bc1615076c683c39", "message": "correcting as pointed out.\n\n* Remove unused dependencies\n* Manually change the order of import\n* Remove explicit type at lambda\n* Using method references\n* Add more context checking", "committedDate": "2020-01-15T06:27:15Z", "type": "commit"}, {"oid": "1347547769ad01554b6c6769bc1615076c683c39", "url": "https://github.com/line/armeria/commit/1347547769ad01554b6c6769bc1615076c683c39", "message": "correcting as pointed out.\n\n* Remove unused dependencies\n* Manually change the order of import\n* Remove explicit type at lambda\n* Using method references\n* Add more context checking", "committedDate": "2020-01-15T06:27:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcyMjE0Mg==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366722142", "bodyText": "Can we write this file in kotlin since it's a kotlin project?", "author": "anuraaga", "createdAt": "2020-01-15T07:10:46Z", "path": "examples/context-propagation/kotlin/build.gradle", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {", "originalCommit": "1347547769ad01554b6c6769bc1615076c683c39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcyMjM1NA==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366722354", "bodyText": "I think this is required in our build because of the way we run tests. Maybe we should apply in top level build file instead?", "author": "anuraaga", "createdAt": "2020-01-15T07:11:36Z", "path": "examples/context-propagation/kotlin/build.gradle", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+    id 'application'\n+    id \"org.jetbrains.kotlin.jvm\"\n+}\n+\n+dependencies {\n+    implementation project(':core')\n+\n+    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'\n+    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core'\n+    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8'\n+}\n+\n+application {\n+    mainClassName = 'example.armeria.contextpropagation.kotlin.Main'\n+}\n+\n+compileKotlin {\n+    kotlinOptions.jvmTarget = \"1.8\"", "originalCommit": "1347547769ad01554b6c6769bc1615076c683c39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcyMjY1OA==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366722658", "bodyText": "Can we check context / event loop after await too? I guess that's the equivalent of a callback in future style and it would be incorrect if the context was wrong here and we needed to make another backend call.", "author": "anuraaga", "createdAt": "2020-01-15T07:12:53Z", "path": "examples/context-propagation/kotlin/src/main/kotlin/example/armeria/contextpropagation/manual/MainService.kt", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package example.armeria.contextpropagation.manual\n+\n+import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.common.AggregatedHttpResponse\n+import com.linecorp.armeria.common.HttpRequest\n+import com.linecorp.armeria.common.HttpResponse\n+import com.linecorp.armeria.server.HttpService\n+import com.linecorp.armeria.server.ServiceRequestContext\n+import com.google.common.base.Splitter\n+import com.google.common.collect.ImmutableList\n+import com.google.common.collect.Iterables\n+import com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly\n+import java.time.Duration\n+import java.util.stream.Collectors\n+import kotlinx.coroutines.GlobalScope\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.async\n+import kotlinx.coroutines.awaitAll\n+import kotlinx.coroutines.future.asDeferred\n+import kotlinx.coroutines.future.await\n+import kotlinx.coroutines.future.future\n+import kotlinx.coroutines.withContext\n+\n+class MainService(private val backendClient: WebClient) : HttpService {\n+    override fun serve(ctx: ServiceRequestContext, req: HttpRequest): HttpResponse {\n+        val ctxExecutor = ctx.contextAwareExecutor()\n+        val response = GlobalScope.future(ctxExecutor.asCoroutineDispatcher()) {\n+            val numsFromRequest = async { fetchFromRequest(ctx, req) }\n+            val numsFromDb = async { fetchFromFakeDb(ctx) }\n+            val nums = awaitAll(numsFromRequest, numsFromDb).flatten()\n+\n+            val backendResponses =\n+                awaitAll(\n+                    *nums.map { num ->\n+                        // The context is mounted in a thread-local, meaning it is available to all logic such\n+                        // as tracing.\n+                        require(ServiceRequestContext.current() === ctx)\n+                        require(ctx.eventLoop().inEventLoop())\n+                        backendClient.get(\"/square/$num\").aggregate().asDeferred()\n+                    }.toTypedArray()\n+                ).toList()\n+            // The context is mounted in a thread-local, meaning it is available to all logic such as tracing.\n+            require(ServiceRequestContext.current() === ctx)\n+            require(ctx.eventLoop().inEventLoop())\n+            HttpResponse.of(\n+                backendResponses.stream()\n+                    .map(AggregatedHttpResponse::contentUtf8)\n+                    .collect(Collectors.joining(\"\\n\"))\n+            )\n+        }\n+        return HttpResponse.from(response)\n+    }\n+\n+    private suspend fun fetchFromRequest(ctx: ServiceRequestContext, req: HttpRequest): List<Long> {\n+        // The context is mounted in a thread-local, meaning it is available to all logic such as tracing.\n+        require(ServiceRequestContext.current() === ctx)\n+        require(ctx.eventLoop().inEventLoop())\n+        val aggregatedHttpRequest = req.aggregate().await()", "originalCommit": "1347547769ad01554b6c6769bc1615076c683c39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcyMzI0Ng==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366723246", "bodyText": "What do you think about withContext vs CompletableFuture.supplyAsync().await()? I'm a bit worried about using a suspending function inside this block which I think would change threads and possibly break something like a transaction. I guess suspension should generally be prevented for uses of blocking executor, do you know if there's a simpler way to do that?", "author": "anuraaga", "createdAt": "2020-01-15T07:15:15Z", "path": "examples/context-propagation/kotlin/src/main/kotlin/example/armeria/contextpropagation/manual/MainService.kt", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package example.armeria.contextpropagation.manual\n+\n+import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.common.AggregatedHttpResponse\n+import com.linecorp.armeria.common.HttpRequest\n+import com.linecorp.armeria.common.HttpResponse\n+import com.linecorp.armeria.server.HttpService\n+import com.linecorp.armeria.server.ServiceRequestContext\n+import com.google.common.base.Splitter\n+import com.google.common.collect.ImmutableList\n+import com.google.common.collect.Iterables\n+import com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly\n+import java.time.Duration\n+import java.util.stream.Collectors\n+import kotlinx.coroutines.GlobalScope\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.async\n+import kotlinx.coroutines.awaitAll\n+import kotlinx.coroutines.future.asDeferred\n+import kotlinx.coroutines.future.await\n+import kotlinx.coroutines.future.future\n+import kotlinx.coroutines.withContext\n+\n+class MainService(private val backendClient: WebClient) : HttpService {\n+    override fun serve(ctx: ServiceRequestContext, req: HttpRequest): HttpResponse {\n+        val ctxExecutor = ctx.contextAwareExecutor()\n+        val response = GlobalScope.future(ctxExecutor.asCoroutineDispatcher()) {\n+            val numsFromRequest = async { fetchFromRequest(ctx, req) }\n+            val numsFromDb = async { fetchFromFakeDb(ctx) }\n+            val nums = awaitAll(numsFromRequest, numsFromDb).flatten()\n+\n+            val backendResponses =\n+                awaitAll(\n+                    *nums.map { num ->\n+                        // The context is mounted in a thread-local, meaning it is available to all logic such\n+                        // as tracing.\n+                        require(ServiceRequestContext.current() === ctx)\n+                        require(ctx.eventLoop().inEventLoop())\n+                        backendClient.get(\"/square/$num\").aggregate().asDeferred()\n+                    }.toTypedArray()\n+                ).toList()\n+            // The context is mounted in a thread-local, meaning it is available to all logic such as tracing.\n+            require(ServiceRequestContext.current() === ctx)\n+            require(ctx.eventLoop().inEventLoop())\n+            HttpResponse.of(\n+                backendResponses.stream()\n+                    .map(AggregatedHttpResponse::contentUtf8)\n+                    .collect(Collectors.joining(\"\\n\"))\n+            )\n+        }\n+        return HttpResponse.from(response)\n+    }\n+\n+    private suspend fun fetchFromRequest(ctx: ServiceRequestContext, req: HttpRequest): List<Long> {\n+        // The context is mounted in a thread-local, meaning it is available to all logic such as tracing.\n+        require(ServiceRequestContext.current() === ctx)\n+        require(ctx.eventLoop().inEventLoop())\n+        val aggregatedHttpRequest = req.aggregate().await()\n+        val nums = mutableListOf<Long>()\n+        for (token in Iterables.concat(\n+            NUM_SPLITTER.split(aggregatedHttpRequest.path().substring(1)),\n+            NUM_SPLITTER.split(aggregatedHttpRequest.contentUtf8())\n+        )) {\n+            nums.add(token.toLong())\n+        }\n+        return nums\n+    }\n+\n+    private suspend fun fetchFromFakeDb(ctx: ServiceRequestContext): List<Long> {\n+        // The context is mounted in a thread-local, meaning it is available to all logic such as tracing.\n+        require(ServiceRequestContext.current() === ctx)\n+        require(ctx.eventLoop().inEventLoop())\n+        // This logic mimics using a blocking method, which would usually be something like a MySQL\n+        // database query using JDBC.\n+        return withContext(ctx.blockingTaskExecutor().asCoroutineDispatcher()) {", "originalCommit": "1347547769ad01554b6c6769bc1615076c683c39", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2NzE2Ng==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366767166", "bodyText": "You mean user may do like below?\nreturn withContext(ctx.blockingTaskExecutor().asCoroutineDispatcher()) {\n            ..\n            // begin tx\n            ..\n            anotherSuspendFunction();\n            ..\n            // end tx\n        }\n\nIf so, maybe as you said we should wrap whole tx in one CompletableFuture.supplyAsync().", "author": "kojilin", "createdAt": "2020-01-15T09:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcyMzI0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MDQxOQ==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366770419", "bodyText": "Yeah that's what I'm a bit worried about - maybe it's too much worrying ;) But I wish there were a good pattern to prevent suspension within a certain block of code, couldn't find anything with some googling but it seems important enough to be in Kotlin.", "author": "anuraaga", "createdAt": "2020-01-15T09:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcyMzI0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc4ODIyMA==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366788220", "bodyText": "Agree, I have updated the code.\nI'm not familiar with reactive transaction. https://spring.io/blog/2019/05/16/reactive-transactions-with-spring. Looks like it can allow us to suspend during tx.", "author": "kojilin", "createdAt": "2020-01-15T10:03:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcyMzI0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc0MTY0OQ==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366741649", "bodyText": "nit: Could you add empty lines for improving readability?", "author": "ikhoon", "createdAt": "2020-01-15T08:19:19Z", "path": "examples/context-propagation/kotlin/src/main/kotlin/example/armeria/contextpropagation/manual/Main.kt", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package example.armeria.contextpropagation.manual\n+\n+import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.common.HttpResponse\n+import com.linecorp.armeria.common.HttpStatus\n+import com.linecorp.armeria.server.Server\n+\n+fun main(args: Array<String>) {\n+    val backend = Server.builder()\n+        .service(\"/square/{num}\") { ctx, _ ->\n+            val num = ctx.pathParam(\"num\")?.toLong()\n+            if (num != null) {\n+                HttpResponse.of((num * num).toString())\n+            } else {\n+                HttpResponse.of(HttpStatus.BAD_REQUEST)\n+            }\n+        }\n+        .http(8081)\n+        .build()\n+    val backendClient = WebClient.of(\"http://localhost:8081\")\n+    val frontend = Server.builder()\n+        .http(8080)\n+        .serviceUnder(\"/\", MainService(backendClient))\n+        .build()\n+    Runtime.getRuntime().addShutdownHook(Thread {\n+        backend.stop().join()\n+        frontend.stop().join()\n+    })\n+    backend.start().join()\n+    frontend.start().join()", "originalCommit": "1347547769ad01554b6c6769bc1615076c683c39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7e40f6fe9919f49d1649b0d0f0762b5ec095cb6d", "url": "https://github.com/line/armeria/commit/7e40f6fe9919f49d1649b0d0f0762b5ec095cb6d", "message": "Fix as pointed out.\n\n* Move kotlin target jvm version to top level build.gradle\n* Change gradle to gradle.kts\n* Rename package\n* Put some blank lines for readability", "committedDate": "2020-01-15T09:18:03Z", "type": "commit"}, {"oid": "df41f1c27f3e4b2d57c62ddcdd060c5e2608c91e", "url": "https://github.com/line/armeria/commit/df41f1c27f3e4b2d57c62ddcdd060c5e2608c91e", "message": "Fix", "committedDate": "2020-01-15T09:59:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc4NzI0Nw==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366787247", "bodyText": "Maybe this type came automatically from intellij", "author": "anuraaga", "createdAt": "2020-01-15T10:01:38Z", "path": "examples/context-propagation/kotlin/src/main/kotlin/example/armeria/contextpropagation/kotlin/MainService.kt", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package example.armeria.contextpropagation.kotlin\n+\n+import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.common.AggregatedHttpResponse\n+import com.linecorp.armeria.common.HttpRequest\n+import com.linecorp.armeria.common.HttpResponse\n+import com.linecorp.armeria.server.HttpService\n+import com.linecorp.armeria.server.ServiceRequestContext\n+import com.google.common.base.Splitter\n+import com.google.common.collect.Iterables\n+import com.google.common.util.concurrent.Uninterruptibles\n+import java.time.Duration\n+import java.util.concurrent.CompletableFuture\n+import java.util.function.Supplier\n+import java.util.stream.Collectors\n+import kotlinx.coroutines.GlobalScope\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.async\n+import kotlinx.coroutines.awaitAll\n+import kotlinx.coroutines.future.asDeferred\n+import kotlinx.coroutines.future.await\n+import kotlinx.coroutines.future.future\n+\n+class MainService(private val backendClient: WebClient) : HttpService {\n+    override fun serve(ctx: ServiceRequestContext, req: HttpRequest): HttpResponse {\n+        val ctxExecutor = ctx.contextAwareExecutor()\n+        val response = GlobalScope.future(ctxExecutor.asCoroutineDispatcher()) {\n+\n+            val numsFromRequest = async { fetchFromRequest(ctx, req) }\n+            val numsFromDb = async { fetchFromFakeDb(ctx) }\n+            val nums = awaitAll(numsFromRequest, numsFromDb).flatten()\n+\n+            // The context is kept after resume.\n+            require(ServiceRequestContext.current() === ctx)\n+            require(ctx.eventLoop().inEventLoop())\n+\n+            val backendResponses =\n+                awaitAll(\n+                    *nums.map { num ->\n+                        // The context is mounted in a thread-local, meaning it is available to all logic such\n+                        // as tracing.\n+                        require(ServiceRequestContext.current() === ctx)\n+                        require(ctx.eventLoop().inEventLoop())\n+\n+                        backendClient.get(\"/square/$num\").aggregate().asDeferred()\n+                    }.toTypedArray()\n+                ).toList()\n+\n+            // The context is mounted in a thread-local, meaning it is available to all logic such as tracing.\n+            require(ServiceRequestContext.current() === ctx)\n+            require(ctx.eventLoop().inEventLoop())\n+\n+            HttpResponse.of(\n+                backendResponses.stream()\n+                    .map(AggregatedHttpResponse::contentUtf8)\n+                    .collect(Collectors.joining(\"\\n\"))\n+            )\n+        }\n+        return HttpResponse.from(response)\n+    }\n+\n+    private suspend fun fetchFromRequest(ctx: ServiceRequestContext, req: HttpRequest): List<Long> {\n+        // The context is mounted in a thread-local, meaning it is available to all logic such as tracing.\n+        require(ServiceRequestContext.current() === ctx)\n+        require(ctx.eventLoop().inEventLoop())\n+\n+        val aggregatedHttpRequest = req.aggregate().await()\n+\n+        // The context is kept after resume.\n+        require(ServiceRequestContext.current() === ctx)\n+        require(ctx.eventLoop().inEventLoop())\n+\n+        val nums = mutableListOf<Long>()\n+        for (token in Iterables.concat(\n+            NUM_SPLITTER.split(aggregatedHttpRequest.path().substring(1)),\n+            NUM_SPLITTER.split(aggregatedHttpRequest.contentUtf8())\n+        )) {\n+            nums.add(token.toLong())\n+        }\n+        return nums\n+    }\n+\n+    private suspend fun fetchFromFakeDb(ctx: ServiceRequestContext): List<Long> {\n+        // The context is mounted in a thread-local, meaning it is available to all logic such as tracing.\n+        require(ServiceRequestContext.current() === ctx)\n+        require(ctx.eventLoop().inEventLoop())\n+\n+        // This logic mimics using a blocking method, which would usually be something like a MySQL\n+        // database query using JDBC.\n+        return CompletableFuture.supplyAsync(\n+            Supplier<List<Long>> {", "originalCommit": "df41f1c27f3e4b2d57c62ddcdd060c5e2608c91e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc4OTk1Nw==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366789957", "bodyText": "Looks like kotlin failed to infer the type, so I need to add it explicitly.", "author": "kojilin", "createdAt": "2020-01-15T10:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc4NzI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc4NzM4MA==", "url": "https://github.com/line/armeria/pull/2399#discussion_r366787380", "bodyText": "Static import was lost (not a big deal) and spaces around parens (bigger deal)", "author": "anuraaga", "createdAt": "2020-01-15T10:01:52Z", "path": "examples/context-propagation/kotlin/src/main/kotlin/example/armeria/contextpropagation/kotlin/MainService.kt", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package example.armeria.contextpropagation.kotlin\n+\n+import com.linecorp.armeria.client.WebClient\n+import com.linecorp.armeria.common.AggregatedHttpResponse\n+import com.linecorp.armeria.common.HttpRequest\n+import com.linecorp.armeria.common.HttpResponse\n+import com.linecorp.armeria.server.HttpService\n+import com.linecorp.armeria.server.ServiceRequestContext\n+import com.google.common.base.Splitter\n+import com.google.common.collect.Iterables\n+import com.google.common.util.concurrent.Uninterruptibles\n+import java.time.Duration\n+import java.util.concurrent.CompletableFuture\n+import java.util.function.Supplier\n+import java.util.stream.Collectors\n+import kotlinx.coroutines.GlobalScope\n+import kotlinx.coroutines.asCoroutineDispatcher\n+import kotlinx.coroutines.async\n+import kotlinx.coroutines.awaitAll\n+import kotlinx.coroutines.future.asDeferred\n+import kotlinx.coroutines.future.await\n+import kotlinx.coroutines.future.future\n+\n+class MainService(private val backendClient: WebClient) : HttpService {\n+    override fun serve(ctx: ServiceRequestContext, req: HttpRequest): HttpResponse {\n+        val ctxExecutor = ctx.contextAwareExecutor()\n+        val response = GlobalScope.future(ctxExecutor.asCoroutineDispatcher()) {\n+\n+            val numsFromRequest = async { fetchFromRequest(ctx, req) }\n+            val numsFromDb = async { fetchFromFakeDb(ctx) }\n+            val nums = awaitAll(numsFromRequest, numsFromDb).flatten()\n+\n+            // The context is kept after resume.\n+            require(ServiceRequestContext.current() === ctx)\n+            require(ctx.eventLoop().inEventLoop())\n+\n+            val backendResponses =\n+                awaitAll(\n+                    *nums.map { num ->\n+                        // The context is mounted in a thread-local, meaning it is available to all logic such\n+                        // as tracing.\n+                        require(ServiceRequestContext.current() === ctx)\n+                        require(ctx.eventLoop().inEventLoop())\n+\n+                        backendClient.get(\"/square/$num\").aggregate().asDeferred()\n+                    }.toTypedArray()\n+                ).toList()\n+\n+            // The context is mounted in a thread-local, meaning it is available to all logic such as tracing.\n+            require(ServiceRequestContext.current() === ctx)\n+            require(ctx.eventLoop().inEventLoop())\n+\n+            HttpResponse.of(\n+                backendResponses.stream()\n+                    .map(AggregatedHttpResponse::contentUtf8)\n+                    .collect(Collectors.joining(\"\\n\"))\n+            )\n+        }\n+        return HttpResponse.from(response)\n+    }\n+\n+    private suspend fun fetchFromRequest(ctx: ServiceRequestContext, req: HttpRequest): List<Long> {\n+        // The context is mounted in a thread-local, meaning it is available to all logic such as tracing.\n+        require(ServiceRequestContext.current() === ctx)\n+        require(ctx.eventLoop().inEventLoop())\n+\n+        val aggregatedHttpRequest = req.aggregate().await()\n+\n+        // The context is kept after resume.\n+        require(ServiceRequestContext.current() === ctx)\n+        require(ctx.eventLoop().inEventLoop())\n+\n+        val nums = mutableListOf<Long>()\n+        for (token in Iterables.concat(\n+            NUM_SPLITTER.split(aggregatedHttpRequest.path().substring(1)),\n+            NUM_SPLITTER.split(aggregatedHttpRequest.contentUtf8())\n+        )) {\n+            nums.add(token.toLong())\n+        }\n+        return nums\n+    }\n+\n+    private suspend fun fetchFromFakeDb(ctx: ServiceRequestContext): List<Long> {\n+        // The context is mounted in a thread-local, meaning it is available to all logic such as tracing.\n+        require(ServiceRequestContext.current() === ctx)\n+        require(ctx.eventLoop().inEventLoop())\n+\n+        // This logic mimics using a blocking method, which would usually be something like a MySQL\n+        // database query using JDBC.\n+        return CompletableFuture.supplyAsync(\n+            Supplier<List<Long>> {\n+                // The context is mounted in a thread-local, meaning it is available to all logic such\n+                // as tracing.\n+                require(ServiceRequestContext.current() === ctx)\n+                require(!ctx.eventLoop().inEventLoop())\n+\n+                Uninterruptibles.sleepUninterruptibly( Duration.ofMillis( 50 ) )", "originalCommit": "df41f1c27f3e4b2d57c62ddcdd060c5e2608c91e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "144b2f75e70cd0f6e98845af4bb2ada7e8bd22ce", "url": "https://github.com/line/armeria/commit/144b2f75e70cd0f6e98845af4bb2ada7e8bd22ce", "message": "Fix", "committedDate": "2020-01-15T10:09:39Z", "type": "commit"}, {"oid": "144b2f75e70cd0f6e98845af4bb2ada7e8bd22ce", "url": "https://github.com/line/armeria/commit/144b2f75e70cd0f6e98845af4bb2ada7e8bd22ce", "message": "Fix", "committedDate": "2020-01-15T10:09:39Z", "type": "forcePushed"}]}