{"pr_number": 2719, "pr_title": "Support gRPC Scala using ScalaPB", "pr_createdAt": "2020-05-17T14:44:07Z", "pr_url": "https://github.com/line/armeria/pull/2719", "timeline": [{"oid": "a546f575049e458a23d436d25538ce61f96210ba", "url": "https://github.com/line/armeria/commit/a546f575049e458a23d436d25538ce61f96210ba", "message": "Support gRPC Scala using ScalaPB\n\nMotivation:\n\nAs a part of better interop with other JVM languages(#1078),\nit would be nice if Armeria Grpc server and client support [ScalaPB](https://scalapb.github.io/).\n\nNotifications:\n\n- Rename the original `GrpcMessageMashaller` to `GrpcMessageMashallingHandler`.\n- Introduce a new interface `GrpcMessageMashaller`. A user can customize\n `GrpcMessageMashaller` by setting it to GrpcServerBuilder or GrpcClientOptions.\n  I'm not sure this approach is the right direction. \ud83e\uddd0\n- Add ScalaPBMessageMashaller.\n  Note, It is hard to support releasing an artifact with multiple Scala versions in Gradle.\n  Do we need to move this code to Armeria `contrib`?\n\nResult:\n\nYou can now use the gRPC server/client stubs generated by ScalaPB", "committedDate": "2020-05-17T14:49:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzMzY5NQ==", "url": "https://github.com/line/armeria/pull/2719#discussion_r426333695", "bodyText": "Missing space before {", "author": "trustin", "createdAt": "2020-05-18T01:42:37Z", "path": "benchmarks/build.gradle", "diffHunk": "@@ -79,3 +78,12 @@ jmh {\n         }\n     }\n }\n+\n+// Workaround a bug where the conflict of output path between 'benchmarks.jmh' and 'benchmarks.test' in IDEA\n+project.afterEvaluate {\n+    idea {\n+        module{", "originalCommit": "a546f575049e458a23d436d25538ce61f96210ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNDQxNQ==", "url": "https://github.com/line/armeria/pull/2719#discussion_r426334415", "bodyText": "to the specified -> with the specified", "author": "trustin", "createdAt": "2020-05-18T01:46:53Z", "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientOptions.java", "diffHunk": "@@ -76,11 +83,27 @@\n     public static final ClientOption<Boolean> UNSAFE_WRAP_RESPONSE_BUFFERS =\n             ClientOption.define(\"GRPC_UNSAFE_WRAP_RESPONSE_BUFFERS\", false);\n \n+    /**\n+     * Sets a {@link GrpcMessageMarshaller} that serialize and deserialize request or response messages\n+     * to and from {@link ByteBuf}. This replaces the built-in {@link GrpcMessageMarshaller} to the specified", "originalCommit": "a546f575049e458a23d436d25538ce61f96210ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNDU1MA==", "url": "https://github.com/line/armeria/pull/2719#discussion_r426334550", "bodyText": "Note that JSON_MAR... option will be ignored if this option is set.", "author": "trustin", "createdAt": "2020-05-18T01:47:38Z", "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientOptions.java", "diffHunk": "@@ -76,11 +83,27 @@\n     public static final ClientOption<Boolean> UNSAFE_WRAP_RESPONSE_BUFFERS =\n             ClientOption.define(\"GRPC_UNSAFE_WRAP_RESPONSE_BUFFERS\", false);\n \n+    /**\n+     * Sets a {@link GrpcMessageMarshaller} that serialize and deserialize request or response messages\n+     * to and from {@link ByteBuf}. This replaces the built-in {@link GrpcMessageMarshaller} to the specified\n+     * {@link GrpcMessageMarshaller}.\n+     *\n+     * This is commonly used to optimize code paths for a subclass of {@link Marshaller} or enable to handle\n+     * {@link GrpcSerializationFormats#JSON} and {@link GrpcSerializationFormats#JSON_WEB} formats by\n+     * marshalling a message to and from JSON depending on {@link SerializationFormat}.\n+     *\n+     * Note that this option is configured, {@link #JSON_MARSHALLER_CUSTOMIZER} option will be ignored.", "originalCommit": "a546f575049e458a23d436d25538ce61f96210ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNDY2Mw==", "url": "https://github.com/line/armeria/pull/2719#discussion_r426334663", "bodyText": "Note that this option will be ignored if GRPC_MESSAGE... is set.", "author": "trustin", "createdAt": "2020-05-18T01:48:15Z", "path": "grpc/src/main/java/com/linecorp/armeria/client/grpc/GrpcClientOptions.java", "diffHunk": "@@ -76,11 +83,27 @@\n     public static final ClientOption<Boolean> UNSAFE_WRAP_RESPONSE_BUFFERS =\n             ClientOption.define(\"GRPC_UNSAFE_WRAP_RESPONSE_BUFFERS\", false);\n \n+    /**\n+     * Sets a {@link GrpcMessageMarshaller} that serialize and deserialize request or response messages\n+     * to and from {@link ByteBuf}. This replaces the built-in {@link GrpcMessageMarshaller} to the specified\n+     * {@link GrpcMessageMarshaller}.\n+     *\n+     * This is commonly used to optimize code paths for a subclass of {@link Marshaller} or enable to handle\n+     * {@link GrpcSerializationFormats#JSON} and {@link GrpcSerializationFormats#JSON_WEB} formats by\n+     * marshalling a message to and from JSON depending on {@link SerializationFormat}.\n+     *\n+     * Note that this option is configured, {@link #JSON_MARSHALLER_CUSTOMIZER} option will be ignored.\n+     */\n+    public static final ClientOption<GrpcMessageMarshaller> GRPC_MESSAGE_MARSHALLER =\n+            ClientOption.define(\"GRPC_MESSAGE_MARSHALLER\", NoopGrpcMessageMarshaller.get());\n+\n     /**\n      * Sets a {@link Consumer} that can customize the JSON marshaller used when handling JSON payloads in the\n      * service. This is commonly used to switch from the default of using lowerCamelCase for field names to\n      * using the field name from the proto definition, by setting\n      * {@link MessageMarshaller.Builder#preservingProtoFieldNames(boolean)}.\n+     *\n+     * Note that a {@link #GRPC_MESSAGE_MARSHALLER} is configured, this option will be ignored.", "originalCommit": "a546f575049e458a23d436d25538ce61f96210ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNDc2Mw==", "url": "https://github.com/line/armeria/pull/2719#discussion_r426334763", "bodyText": "Maybe better using null instead of NoopGrpcMessageMarshaller?", "author": "trustin", "createdAt": "2020-05-18T01:48:57Z", "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/ArmeriaChannel.java", "diffHunk": "@@ -62,23 +68,31 @@\n     private final MeterRegistry meterRegistry;\n     private final SessionProtocol sessionProtocol;\n     private final SerializationFormat serializationFormat;\n-    @Nullable\n-    private final MessageMarshaller jsonMarshaller;\n+    private final GrpcMessageMarshaller messageMarshaller;\n     private final String advertisedEncodingsHeader;\n \n     ArmeriaChannel(ClientBuilderParams params,\n                    HttpClient httpClient,\n                    MeterRegistry meterRegistry,\n                    SessionProtocol sessionProtocol,\n                    SerializationFormat serializationFormat,\n+                   GrpcMessageMarshaller messageMarshaller,\n                    @Nullable MessageMarshaller jsonMarshaller) {\n         this.params = params;\n         this.httpClient = httpClient;\n         this.meterRegistry = meterRegistry;\n         this.sessionProtocol = sessionProtocol;\n         this.serializationFormat = serializationFormat;\n-        this.jsonMarshaller = jsonMarshaller;\n-\n+        if (messageMarshaller != NoopGrpcMessageMarshaller.get()) {", "originalCommit": "a546f575049e458a23d436d25538ce61f96210ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzODEyNA==", "url": "https://github.com/line/armeria/pull/2719#discussion_r426338124", "bodyText": "I tried at first, but I realized a ClientOption does not take null as a default value.\n// Will throw NullPointerException\nClientOption.define(\"GRPC_MESSAGE_MARSHALLER\", null);\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/common/util/AbstractOption.java\n    \n    \n        Lines 113 to 118\n      in\n      56c58ff\n    \n    \n    \n    \n\n        \n          \n           T define(Class<?> type, String name, V defaultValue, \n        \n\n        \n          \n                    Factory<T, U, V> optionFactory, Function<V, V> validator, BiFunction<U, U, U> mergeFunction) { \n        \n\n        \n          \n            \n        \n\n        \n          \n               requireNonNull(type, \"type\"); \n        \n\n        \n          \n               requireNonNull(name, \"name\"); \n        \n\n        \n          \n               requireNonNull(defaultValue, \"defaultValue\"); \n        \n    \n  \n\n\nProbably better to make it accept null?", "author": "ikhoon", "createdAt": "2020-05-18T02:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNDc2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0MDE3NA==", "url": "https://github.com/line/armeria/pull/2719#discussion_r426340174", "bodyText": "That's a good point. If we accept null, we will have to add @Nullable to the getter methods which doesn't sound like a good idea. Let's leave this as it is. \ud83d\ude05", "author": "trustin", "createdAt": "2020-05-18T02:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNDc2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0MjE2MQ==", "url": "https://github.com/line/armeria/pull/2719#discussion_r426342161", "bodyText": "Agreed!", "author": "ikhoon", "createdAt": "2020-05-18T02:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNDc2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNTIwNw==", "url": "https://github.com/line/armeria/pull/2719#discussion_r426335207", "bodyText": "Prototype or Protobuf?\nfinal?", "author": "trustin", "createdAt": "2020-05-18T01:51:21Z", "path": "grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/PrototypeMessageMarshaller.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.grpc;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.Nullable;\n+\n+import org.curioswitch.common.protobuf.json.MessageMarshaller;\n+\n+import com.google.protobuf.CodedInputStream;\n+import com.google.protobuf.CodedOutputStream;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import com.google.protobuf.Message;\n+import com.google.protobuf.UnsafeByteOperations;\n+\n+import com.linecorp.armeria.common.SerializationFormat;\n+import com.linecorp.armeria.common.grpc.GrpcSerializationFormats;\n+\n+import io.grpc.MethodDescriptor.Marshaller;\n+import io.grpc.MethodDescriptor.PrototypeMarshaller;\n+import io.grpc.Status;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufInputStream;\n+import io.netty.buffer.ByteBufOutputStream;\n+\n+/**\n+ * A {@link GrpcMessageMarshaller} for {@link PrototypeMarshaller} that provides optimized code paths\n+ * for a {@link Message}.\n+ */\n+public class PrototypeMessageMarshaller implements GrpcMessageMarshaller {", "originalCommit": "a546f575049e458a23d436d25538ce61f96210ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNTI2Mw==", "url": "https://github.com/line/armeria/pull/2719#discussion_r426335263", "bodyText": "Revert?", "author": "trustin", "createdAt": "2020-05-18T01:51:43Z", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/FramedGrpcService.java", "diffHunk": "@@ -129,8 +139,8 @@\n         advertisedEncodingsHeader = String.join(\",\", decompressorRegistry.getAdvertisedMessageEncodings());\n \n         defaultHeaders = supportedSerializationFormats\n-                .stream()\n-                .map(format -> {\n+                                 .stream()\n+                                 .map(format -> {", "originalCommit": "a546f575049e458a23d436d25538ce61f96210ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNjQxNg==", "url": "https://github.com/line/armeria/pull/2719#discussion_r426336416", "bodyText": "Oops...", "author": "ikhoon", "createdAt": "2020-05-18T01:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNTI2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNTMxNQ==", "url": "https://github.com/line/armeria/pull/2719#discussion_r426335315", "bodyText": "serializes and deserialzes", "author": "trustin", "createdAt": "2020-05-18T01:52:04Z", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "diffHunk": "@@ -261,14 +268,36 @@ public GrpcServiceBuilder unsafeWrapRequestBuffers(boolean unsafeWrapRequestBuff\n         return this;\n     }\n \n+    /**\n+     * Sets a {@link GrpcMessageMarshaller} that serialize and deserialize request or response messages", "originalCommit": "a546f575049e458a23d436d25538ce61f96210ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNTM1Ng==", "url": "https://github.com/line/armeria/pull/2719#discussion_r426335356", "bodyText": "with the specified", "author": "trustin", "createdAt": "2020-05-18T01:52:19Z", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "diffHunk": "@@ -261,14 +268,36 @@ public GrpcServiceBuilder unsafeWrapRequestBuffers(boolean unsafeWrapRequestBuff\n         return this;\n     }\n \n+    /**\n+     * Sets a {@link GrpcMessageMarshaller} that serialize and deserialize request or response messages\n+     * to and from {@link ByteBuf}. This replaces the built-in {@link GrpcMessageMarshaller} to the specified", "originalCommit": "a546f575049e458a23d436d25538ce61f96210ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNTQ0MQ==", "url": "https://github.com/line/armeria/pull/2719#discussion_r426335441", "bodyText": "Note that this method will throw ... if ... is set.", "author": "trustin", "createdAt": "2020-05-18T01:52:47Z", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "diffHunk": "@@ -261,14 +268,36 @@ public GrpcServiceBuilder unsafeWrapRequestBuffers(boolean unsafeWrapRequestBuff\n         return this;\n     }\n \n+    /**\n+     * Sets a {@link GrpcMessageMarshaller} that serialize and deserialize request or response messages\n+     * to and from {@link ByteBuf}. This replaces the built-in {@link GrpcMessageMarshaller} to the specified\n+     * {@link GrpcMessageMarshaller}.\n+     *\n+     * This is commonly used to optimize code paths for a subclass of {@link Marshaller} or enable to handle\n+     * {@link GrpcSerializationFormats#JSON} and {@link GrpcSerializationFormats#JSON_WEB} formats by\n+     * marshalling a message to and from JSON depending on {@link SerializationFormat}.\n+     *\n+     * Note that a {@link #jsonMarshallerCustomizer(Consumer)} is configured,\n+     * this method will throw an {@link IllegalStateException}.", "originalCommit": "a546f575049e458a23d436d25538ce61f96210ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMzNTQ4NA==", "url": "https://github.com/line/armeria/pull/2719#discussion_r426335484", "bodyText": "Note that this method will ... if ... is set.", "author": "trustin", "createdAt": "2020-05-18T01:53:03Z", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "diffHunk": "@@ -261,14 +268,36 @@ public GrpcServiceBuilder unsafeWrapRequestBuffers(boolean unsafeWrapRequestBuff\n         return this;\n     }\n \n+    /**\n+     * Sets a {@link GrpcMessageMarshaller} that serialize and deserialize request or response messages\n+     * to and from {@link ByteBuf}. This replaces the built-in {@link GrpcMessageMarshaller} to the specified\n+     * {@link GrpcMessageMarshaller}.\n+     *\n+     * This is commonly used to optimize code paths for a subclass of {@link Marshaller} or enable to handle\n+     * {@link GrpcSerializationFormats#JSON} and {@link GrpcSerializationFormats#JSON_WEB} formats by\n+     * marshalling a message to and from JSON depending on {@link SerializationFormat}.\n+     *\n+     * Note that a {@link #jsonMarshallerCustomizer(Consumer)} is configured,\n+     * this method will throw an {@link IllegalStateException}.\n+     */\n+    public GrpcServiceBuilder messageMarshaller(GrpcMessageMarshaller messageMarshaller) {\n+        checkState(!isJsonMarshallerCustomizerSet, \"jsonMarshallerCustomizer has been set already.\");\n+        this.messageMarshaller = requireNonNull(messageMarshaller, \"messageMarshaller\");\n+        return this;\n+    }\n+\n     /**\n      * Sets a {@link Consumer} that can customize the JSON marshaller used when handling JSON payloads in the\n      * service. This is commonly used to switch from the default of using lowerCamelCase for field names to\n      * using the field name from the proto definition, by setting\n      * {@link MessageMarshaller.Builder#preservingProtoFieldNames(boolean)}.\n+     *\n+     * Note that a {@link #messageMarshaller(GrpcMessageMarshaller)} is configured,\n+     * this method will throw an {@link IllegalStateException}.", "originalCommit": "a546f575049e458a23d436d25538ce61f96210ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "122c47ee6d71e8b31422e4aa2e73e897e5136ebd", "url": "https://github.com/line/armeria/commit/122c47ee6d71e8b31422e4aa2e73e897e5136ebd", "message": "Support gRPC Scala using ScalaPB #2719\n\nMotivation:\n\nAs a part of better interop with other JVM languages(#1078),\nit would be nice if Armeria Grpc server and client support [ScalaPB](https://scalapb.github.io/).\n\nModifications:\n\n- Rename the original `GrpcMessageMashaller` to `GrpcMessageMashallingHandler`.\n- Introduce a new interface `GrpcMessageMashaller`. A user can customize\n `GrpcMessageMashaller` by setting it to GrpcServerBuilder or GrpcClientOptions.\n  I'm not sure this approach is a right direction. \ud83e\uddd0\n  Related: #2416\n- Add ScalaPBMessageMashaller.\n  Note, It is hard to support releasing an artifact with multiple Scala versions in Gradle.\n  Do we need to move this code to Armeria `contrib`?\n\nResult:\n\nYou can now use the gRPC server/client stubs generated by ScalaPB", "committedDate": "2020-06-13T13:45:04Z", "type": "commit"}, {"oid": "122c47ee6d71e8b31422e4aa2e73e897e5136ebd", "url": "https://github.com/line/armeria/commit/122c47ee6d71e8b31422e4aa2e73e897e5136ebd", "message": "Support gRPC Scala using ScalaPB #2719\n\nMotivation:\n\nAs a part of better interop with other JVM languages(#1078),\nit would be nice if Armeria Grpc server and client support [ScalaPB](https://scalapb.github.io/).\n\nModifications:\n\n- Rename the original `GrpcMessageMashaller` to `GrpcMessageMashallingHandler`.\n- Introduce a new interface `GrpcMessageMashaller`. A user can customize\n `GrpcMessageMashaller` by setting it to GrpcServerBuilder or GrpcClientOptions.\n  I'm not sure this approach is a right direction. \ud83e\uddd0\n  Related: #2416\n- Add ScalaPBMessageMashaller.\n  Note, It is hard to support releasing an artifact with multiple Scala versions in Gradle.\n  Do we need to move this code to Armeria `contrib`?\n\nResult:\n\nYou can now use the gRPC server/client stubs generated by ScalaPB", "committedDate": "2020-06-13T13:45:04Z", "type": "forcePushed"}, {"oid": "212ff87f0173e7765bef9718115a90ec465610a8", "url": "https://github.com/line/armeria/commit/212ff87f0173e7765bef9718115a90ec465610a8", "message": "Clean up", "committedDate": "2020-06-13T13:52:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwNzcwMA==", "url": "https://github.com/line/armeria/pull/2719#discussion_r440807700", "bodyText": "Probably better not using static import? current() seems confusing.", "author": "trustin", "createdAt": "2020-06-16T12:23:27Z", "path": "gradle/scripts/lib/java-rpc-proto.gradle", "diffHunk": "@@ -41,22 +44,38 @@ configure(projectsWithFlags('java')) {\n                             artifact = \"io.grpc:protoc-gen-grpc-kotlin:${managedVersions['io.grpc:protoc-gen-grpc-kotlin']}\"\n                         }\n                     }\n+\n+                    def isWindow = current() == WINDOWS", "originalCommit": "212ff87f0173e7765bef9718115a90ec465610a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxMzExOA==", "url": "https://github.com/line/armeria/pull/2719#discussion_r440813118", "bodyText": "This makes me think GRPC_JSON_MARSHALLER and JSON_MARSHALLER_CUSTOMIZER are not orthogonal. Should we merge these two options into one, e.g. GRPC_JSON_MARSHALLER_FACTORY (Function<Class<?>, GrpcJsonMarshaller>)? The default value of the new option could be something like:\nclientType -> GrpcJsonMarshaller.of(clientType)\nwhere GrpcJsonMarshaller.of() calls something like new DefaultJsonMarshaller(GrpcJsonUtil.jsonMarshaller(stubMethods(clientType)).\nIf a user wants to customize the marshaller, the user could specify an alternative factory like this:\nclientType -> GrpcJsonMarshaller.builder(clientType)\n                                ...\n                                .build()\nFor ScalaPB and others, it could be _ -> ScalaPBJsonMarshaller().\nWhat do you think, @ikhoon and @anuraaga ?", "author": "trustin", "createdAt": "2020-06-16T12:32:59Z", "path": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcClientFactory.java", "diffHunk": "@@ -95,13 +98,14 @@ public Object newClient(ClientBuilderParams params) {\n \n         final HttpClient httpClient = newHttpClient(params);\n \n-        // TODO(ikhoon): Support gjson with Kotlin coroutine stub once\n-        //               https://github.com/grpc/grpc-kotlin/pull/63 is released\n-        final MessageMarshaller jsonMarshaller =\n-                GrpcSerializationFormats.isJson(serializationFormat) ?\n-                GrpcJsonUtil.jsonMarshaller(\n-                        stubMethods(clientType),\n-                        options.get(GrpcClientOptions.JSON_MARSHALLER_CUSTOMIZER)) : null;\n+        GrpcJsonMarshaller jsonMarshaller = null;\n+        if (GrpcSerializationFormats.isJson(serializationFormat)) {\n+            jsonMarshaller = options.get(GrpcClientOptions.GRPC_JSON_MARSHALLER);\n+            if (jsonMarshaller == NoopJsonMarshaller.get()) {\n+                jsonMarshaller = new DefaultJsonMarshaller(GrpcJsonUtil.jsonMarshaller(\n+                        stubMethods(clientType), options.get(GrpcClientOptions.JSON_MARSHALLER_CUSTOMIZER)));", "originalCommit": "212ff87f0173e7765bef9718115a90ec465610a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxOTAxMA==", "url": "https://github.com/line/armeria/pull/2719#discussion_r440819010", "bodyText": "That was my most considering part - JSON marshaller and JSON marshaller customizer. I want to merge the extension points into one.\nGRPC_JSON_MARSHALLER_FACTORY looks good to me. \ud83d\udc4d", "author": "ikhoon", "createdAt": "2020-06-16T12:42:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxMzExOA=="}], "type": "inlineReview"}, {"oid": "dc6fddd35fea5d7140c79dc268e2f94ddb02c789", "url": "https://github.com/line/armeria/commit/dc6fddd35fea5d7140c79dc268e2f94ddb02c789", "message": "Merge branch 'master' into grpc-scala", "committedDate": "2020-06-23T09:00:21Z", "type": "commit"}, {"oid": "361e29d19815e6fd9d8abd5b5092c690a91e789d", "url": "https://github.com/line/armeria/commit/361e29d19815e6fd9d8abd5b5092c690a91e789d", "message": "Address comments by @trustin / Add a fatory and builder of GrpcJsonMashaller", "committedDate": "2020-06-24T07:21:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5NjAwOA==", "url": "https://github.com/line/armeria/pull/2719#discussion_r444696008", "bodyText": "I haven't seen this before, what is it working around?", "author": "anuraaga", "createdAt": "2020-06-24T07:24:46Z", "path": "benchmarks/build.gradle", "diffHunk": "@@ -80,3 +79,12 @@ jmh {\n         }\n     }\n }\n+\n+// Workaround a bug where the conflict of output path between 'benchmarks.jmh' and 'benchmarks.test' in IDEA", "originalCommit": "361e29d19815e6fd9d8abd5b5092c690a91e789d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwNjQzMg==", "url": "https://github.com/line/armeria/pull/2719#discussion_r444706432", "bodyText": "I think, maybe, this is caused by plugin scala.\nIf I remove this block I will get the following message from the IntelliJ.", "author": "ikhoon", "createdAt": "2020-06-24T07:45:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5NjAwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMTMwOA==", "url": "https://github.com/line/armeria/pull/2719#discussion_r444701308", "bodyText": "Is this used?", "author": "anuraaga", "createdAt": "2020-06-24T07:35:31Z", "path": "grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/NoopJsonMarshaller.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.grpc;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import com.linecorp.armeria.common.grpc.GrpcJsonMarshaller;\n+\n+import io.grpc.MethodDescriptor.Marshaller;\n+\n+public final class NoopJsonMarshaller implements GrpcJsonMarshaller {", "originalCommit": "361e29d19815e6fd9d8abd5b5092c690a91e789d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwNzIyMQ==", "url": "https://github.com/line/armeria/pull/2719#discussion_r444707221", "bodyText": "Oops.. this is cruft. It was removed now.", "author": "ikhoon", "createdAt": "2020-06-24T07:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMTMwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMTQxMA==", "url": "https://github.com/line/armeria/pull/2719#discussion_r444701410", "bodyText": "I don't know if we need this class, but if we do we want to return default instance, not null.", "author": "anuraaga", "createdAt": "2020-06-24T07:35:45Z", "path": "grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/NoopJsonMarshaller.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.common.grpc;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import com.linecorp.armeria.common.grpc.GrpcJsonMarshaller;\n+\n+import io.grpc.MethodDescriptor.Marshaller;\n+\n+public final class NoopJsonMarshaller implements GrpcJsonMarshaller {\n+\n+    private static final NoopJsonMarshaller INSTANCE = new NoopJsonMarshaller();\n+\n+    public static NoopJsonMarshaller get() {\n+        return INSTANCE;\n+    }\n+\n+    private NoopJsonMarshaller() {}\n+\n+    @Override\n+    public <T> void serializeMessage(Marshaller<T> marshaller, T message, OutputStream os) throws IOException {}\n+\n+    @Override\n+    public <T> T deserializeMessage(Marshaller<T> marshaller, InputStream is) throws IOException {\n+        return null;", "originalCommit": "361e29d19815e6fd9d8abd5b5092c690a91e789d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a9186521c583bbf28258e8cc2dffa204ccbbf5a4", "url": "https://github.com/line/armeria/commit/a9186521c583bbf28258e8cc2dffa204ccbbf5a4", "message": "Clean up", "committedDate": "2020-06-24T07:40:09Z", "type": "commit"}, {"oid": "c7c6c703bc9f8728e39edc41485e1b356a2805be", "url": "https://github.com/line/armeria/commit/c7c6c703bc9f8728e39edc41485e1b356a2805be", "message": "Remove blank", "committedDate": "2020-06-24T07:51:46Z", "type": "commit"}, {"oid": "c2ac49deaff5841ec09139c48aebd4f9a7de8b40", "url": "https://github.com/line/armeria/commit/c2ac49deaff5841ec09139c48aebd4f9a7de8b40", "message": "Update code example in GrpcClientOptions", "committedDate": "2020-06-24T09:02:59Z", "type": "commit"}, {"oid": "1e517a423b3e3b072b8b42f589a4cace4806fbbf", "url": "https://github.com/line/armeria/commit/1e517a423b3e3b072b8b42f589a4cace4806fbbf", "message": "Fix option name", "committedDate": "2020-06-24T09:07:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc0ODIwNQ==", "url": "https://github.com/line/armeria/pull/2719#discussion_r444748205", "bodyText": "two empty lines?", "author": "minwoox", "createdAt": "2020-06-24T08:58:49Z", "path": "examples/grpc-scala/src/main/scala/example/armeria/grpc/scala/HelloServiceImpl.scala", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package example.armeria.grpc.scala\n+\n+import java.util.concurrent.{ScheduledExecutorService, TimeUnit}\n+\n+import com.linecorp.armeria.server.ServiceRequestContext\n+import example.armeria.grpc.scala.HelloServiceImpl.{blockingContextAwareExecutionContext, contextAwareScheduler, toMessage}\n+import example.armeria.grpc.scala.hello.{HelloReply, HelloRequest, HelloServiceGrpc}\n+import io.grpc.stub.StreamObserver\n+import monix.execution\n+import monix.execution.Ack.Continue\n+import monix.execution.Scheduler\n+import monix.reactive.Observable\n+\n+import scala.collection.mutable\n+import scala.concurrent.duration._\n+import scala.concurrent.{ExecutionContext, Future, Promise}\n+\n+", "originalCommit": "c7c6c703bc9f8728e39edc41485e1b356a2805be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI3MjkzOA==", "url": "https://github.com/line/armeria/pull/2719#discussion_r445272938", "bodyText": "rnn?", "author": "minwoox", "createdAt": "2020-06-25T02:26:53Z", "path": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java", "diffHunk": "@@ -264,14 +268,34 @@ public GrpcServiceBuilder unsafeWrapRequestBuffers(boolean unsafeWrapRequestBuff\n     }\n \n     /**\n-     * Sets a {@link Consumer} that can customize the JSON marshaller used when handling JSON payloads in the\n-     * service. This is commonly used to switch from the default of using lowerCamelCase for field names to\n-     * using the field name from the proto definition, by setting\n-     * {@link MessageMarshaller.Builder#preservingProtoFieldNames(boolean)}.\n+     * Sets the factory that creates a {@link GrpcJsonMarshaller} that serializes and deserializes request or\n+     * response messages to and from JSON depending on the {@link SerializationFormat}. The returned\n+     * {@link GrpcJsonMarshaller} from the factory replaces the built-in {@link GrpcJsonMarshaller}.\n+     *\n+     * <p>This is commonly used to:\n+     * <ul>\n+     *   <li>Switch from the default of using lowerCamelCase for field names to using the field name from\n+     *       the proto definition, by setting\n+     *       {@link MessageMarshaller.Builder#preservingProtoFieldNames(boolean)} via\n+     *       {@link GrpcJsonMarshallerBuilder#jsonMarshallerCustomizer(Consumer)}.\n+     *       <pre>{@code\n+     *       GrpcService.builder()\n+     *            .jsonMarshallerFactory(serviceDescriptor -> {\n+     *                return GrpcJsonMarshaller.builder()\n+     *                                         .jsonMarshallerCustomizer(builder -> {\n+     *                                             builder.preservingProtoFieldNames(true);\n+     *                                         })\n+     *                                         .build(serviceDescriptor);\n+     *            })\n+     *            .build();\n+     *       }</pre></li>\n+     *   <li>Set a customer marshaller for non-{@link Message} types such as {@code scalapb.GeneratedMessage}\n+     *       for Scala and {@code pbandk.Message} for Kotlin.</li>\n+     * </ul>\n      */\n-    public GrpcServiceBuilder jsonMarshallerCustomizer(\n-            Consumer<MessageMarshaller.Builder> jsonMarshallerCustomizer) {\n-        this.jsonMarshallerCustomizer = requireNonNull(jsonMarshallerCustomizer, \"jsonMarshallerCustomizer\");\n+    public GrpcServiceBuilder jsonMarshallerFactory(\n+            Function<? super ServiceDescriptor, ? extends GrpcJsonMarshaller> jsonMarshallerFactory) {\n+        this.jsonMarshallerFactory = jsonMarshallerFactory;", "originalCommit": "1e517a423b3e3b072b8b42f589a4cace4806fbbf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3e076723d130f43133af3d780968a26762e0c8eb", "url": "https://github.com/line/armeria/commit/3e076723d130f43133af3d780968a26762e0c8eb", "message": "Address comments by @minwoox", "committedDate": "2020-06-25T04:14:06Z", "type": "commit"}, {"oid": "b9c88f6feb7f9b8d0fb5a604e1d76fbfdbb818c4", "url": "https://github.com/line/armeria/commit/b9c88f6feb7f9b8d0fb5a604e1d76fbfdbb818c4", "message": "Fix indent", "committedDate": "2020-06-25T09:50:46Z", "type": "commit"}]}