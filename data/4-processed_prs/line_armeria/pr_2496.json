{"pr_number": 2496, "pr_title": "Client-side proxy support", "pr_createdAt": "2020-02-16T15:23:21Z", "pr_url": "https://github.com/line/armeria/pull/2496", "timeline": [{"oid": "bd6e22f0f0a720a9b2883ab8887e4f6484744a8a", "url": "https://github.com/line/armeria/commit/bd6e22f0f0a720a9b2883ab8887e4f6484744a8a", "message": "try to get ci to pass", "committedDate": "2020-02-22T01:28:04Z", "type": "forcePushed"}, {"oid": "8b96a3df8a0826ea4a6d4ac0cf32482f4880b526", "url": "https://github.com/line/armeria/commit/8b96a3df8a0826ea4a6d4ac0cf32482f4880b526", "message": "basic test case with socks proxy", "committedDate": "2020-02-22T01:43:29Z", "type": "forcePushed"}, {"oid": "614795ed6f5b8c61365830efb9e2a73d88b78423", "url": "https://github.com/line/armeria/commit/614795ed6f5b8c61365830efb9e2a73d88b78423", "message": "basic test case with socks proxy", "committedDate": "2020-02-22T01:58:39Z", "type": "forcePushed"}, {"oid": "f4b032aaa377b42bb0fa17d9c3a4fc5231980d25", "url": "https://github.com/line/armeria/commit/f4b032aaa377b42bb0fa17d9c3a4fc5231980d25", "message": " basic test case with socks proxy", "committedDate": "2020-02-22T02:17:00Z", "type": "forcePushed"}, {"oid": "3c50944c603192eee06d7783ddb802ccf0dcd38e", "url": "https://github.com/line/armeria/commit/3c50944c603192eee06d7783ddb802ccf0dcd38e", "message": "add sanity test for validating test server", "committedDate": "2020-02-22T15:50:28Z", "type": "forcePushed"}, {"oid": "0189a93b433c78267e65bfbb06a458ea81cb818a", "url": "https://github.com/line/armeria/commit/0189a93b433c78267e65bfbb06a458ea81cb818a", "message": "add sanity test for validating test server", "committedDate": "2020-02-22T16:13:53Z", "type": "forcePushed"}, {"oid": "26ce01041123153d9587eadfc6a3f004c671754d", "url": "https://github.com/line/armeria/commit/26ce01041123153d9587eadfc6a3f004c671754d", "message": "add sanity test for validating test server", "committedDate": "2020-02-22T16:20:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2MzQxMg==", "url": "https://github.com/line/armeria/pull/2496#discussion_r383063412", "bodyText": "Just curious if it's good to expose Netty proxy handler directly to the user.\nEspecially if we start to support Forward Proxy, we may need to add one more netty handler in the middle. Then the proxy handler is not suitable for that case. It's better to provide proxy setting from armeria?\nJFYI my investigation kojilin@6cbd1e4#diff-fd04617458eb8556240b7e1a48959f8bR349", "author": "kojilin", "createdAt": "2020-02-24T01:54:39Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java", "diffHunk": "@@ -398,6 +403,13 @@ public MeterRegistry meterRegistry() {\n         return get(ClientFactoryOption.METER_REGISTRY);\n     }\n \n+    /**\n+     * TODO: add javadoc comment.\n+     */\n+    public Optional<? extends ProxyHandler> getProxyHandler() {\n+        return get(ClientFactoryOption.PROXY_HANDLER);", "originalCommit": "665a6b6092c1d94214dd4ad03445a566268f1daa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NTg5Mg==", "url": "https://github.com/line/armeria/pull/2496#discussion_r383065892", "bodyText": "Good point.   Was also thinking about this yesterday for a while.\nEach proxy will require different parameters (connectionTimeout, user, password, etc.), so the choice was either to expose netty apis, or to create a wrapper.\nI'm still unsure about this though.   (I haven't really thought about Forward Proxy..)\nI'll take a look at your draft later \ud83d\ude4f \ud83d\ude47 \ud83d\udc4d", "author": "jrhee17", "createdAt": "2020-02-24T02:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2MzQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MTE0OQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389251149", "bodyText": "we may need to add one more netty handler in the middle\n\nAgreed.  I have added ssl support to CONNECT to support this claim.\nThanks for the investigation by the way, it actually helped a lot.  I actually couldn't use mock-server like you did since I wanted some negative test cases, but I had a fun day looking through the mock-server code \ud83d\udc4d\nAlso, I am getting the feeling support for regular forward proxy will be trickier.. (especially with HTTP2). I am working on a POC, so I'll maybe upload a PR separately if I get it sorted out.", "author": "jrhee17", "createdAt": "2020-03-07T12:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2MzQxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2MzY5Ng==", "url": "https://github.com/line/armeria/pull/2496#discussion_r383063696", "bodyText": "Maybe 1 more HttpProxyHandler for CONNECT?", "author": "kojilin", "createdAt": "2020-02-24T01:56:43Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -118,6 +124,14 @@ protected void initChannel(Channel ch) throws Exception {\n                                                       .get(ChannelOption.CONNECT_TIMEOUT_MILLIS);\n     }\n \n+    private static void addSocksProxyHandlerIfPossible(\n+            ChannelPipeline pipeline, Optional<? extends ProxyHandler> proxyHandler) {\n+        if (proxyHandler.isPresent() && (proxyHandler.get() instanceof Socks4ProxyHandler ||", "originalCommit": "665a6b6092c1d94214dd4ad03445a566268f1daa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NTQ2Mg==", "url": "https://github.com/line/armeria/pull/2496#discussion_r383065462", "bodyText": "I think HttpProxyHandler should be added after ssl is applied (at least that's what the netty examples were doing \ud83e\udd14 )", "author": "jrhee17", "createdAt": "2020-02-24T02:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2MzY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NjgzNw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r383066837", "bodyText": "You mean between client and proxy using https? If we use HttpProxyHandler directly, we may support nomral HTTP CONNECT one I think.\n--\nAlso can you tell me the link, just curious about which example.", "author": "kojilin", "createdAt": "2020-02-24T02:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2MzY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NzMzMQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r383067331", "bodyText": "https://github.com/netty/netty/blob/5c458c9a98d4d3d0345e58495e017175156d624f/handler-proxy/src/test/java/io/netty/handler/proxy/ProxyHandlerTest.java#L360\nDidn't really take a thorough look though.. (I didn't really have time to look at HttpProxyHandler internals yet)", "author": "jrhee17", "createdAt": "2020-02-24T02:28:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2MzY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2ODU0OQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r383068549", "bodyText": "So it looks like 2 cases.\nIf we want to provide https proxy, I think as you said we need to put before HttpProxyHandler.\nBut there is another https between client and the real server?", "author": "kojilin", "createdAt": "2020-02-24T02:38:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2MzY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2OTQ4Mg==", "url": "https://github.com/line/armeria/pull/2496#discussion_r383069482", "bodyText": "Ah,   I see.  You're right in that there are 2 cases.\nThis may complicate the api a bit (we may need to add another ssl handler if we want to support Http[s]ProxyHandler \ud83e\udd14 )", "author": "jrhee17", "createdAt": "2020-02-24T02:47:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2MzY5Ng=="}], "type": "inlineReview"}, {"oid": "f77364484ceffbc44bc24c08f0acdac16d6bfa41", "url": "https://github.com/line/armeria/commit/f77364484ceffbc44bc24c08f0acdac16d6bfa41", "message": " basic test case with socks proxy", "committedDate": "2020-02-27T16:09:05Z", "type": "commit"}, {"oid": "be23d88cc370c3d388d9e4c5ffee4e2abb2218c2", "url": "https://github.com/line/armeria/commit/be23d88cc370c3d388d9e4c5ffee4e2abb2218c2", "message": "add sanity test for validating test server", "committedDate": "2020-02-27T16:09:05Z", "type": "commit"}, {"oid": "ad20348d1df5e9ab8046398422e781b723fd23e8", "url": "https://github.com/line/armeria/commit/ad20348d1df5e9ab8046398422e781b723fd23e8", "message": "cleanup tests, warning logs before next iteration", "committedDate": "2020-02-27T16:09:05Z", "type": "commit"}, {"oid": "e7700370bded735b2730663249e9c4afc30219cf", "url": "https://github.com/line/armeria/commit/e7700370bded735b2730663249e9c4afc30219cf", "message": "allow to configure ProxyHandler directly from clientFactory", "committedDate": "2020-02-27T16:11:13Z", "type": "commit"}, {"oid": "1ada5ac4e96b7988fb1e10098e3cd9689bc45554", "url": "https://github.com/line/armeria/commit/1ada5ac4e96b7988fb1e10098e3cd9689bc45554", "message": "add test for socks5 proxy", "committedDate": "2020-02-27T16:11:13Z", "type": "commit"}, {"oid": "9ade0005f4ac931293646b4817027195184871a7", "url": "https://github.com/line/armeria/commit/9ade0005f4ac931293646b4817027195184871a7", "message": "try supporting http proxy", "committedDate": "2020-02-27T23:02:59Z", "type": "commit"}, {"oid": "9ade0005f4ac931293646b4817027195184871a7", "url": "https://github.com/line/armeria/commit/9ade0005f4ac931293646b4817027195184871a7", "message": "try supporting http proxy", "committedDate": "2020-02-27T23:02:59Z", "type": "forcePushed"}, {"oid": "fe5c73e61d4f0f2ea2529b06d74b78f42075a6c4", "url": "https://github.com/line/armeria/commit/fe5c73e61d4f0f2ea2529b06d74b78f42075a6c4", "message": "modify optional to supplier, add tests for h2c/http", "committedDate": "2020-03-01T08:05:06Z", "type": "commit"}, {"oid": "ea702b8fee6ffcbb170ef123848a909969abe4b8", "url": "https://github.com/line/armeria/commit/ea702b8fee6ffcbb170ef123848a909969abe4b8", "message": "introduce a very basic version of Proxy object", "committedDate": "2020-03-01T09:26:04Z", "type": "commit"}, {"oid": "ea702b8fee6ffcbb170ef123848a909969abe4b8", "url": "https://github.com/line/armeria/commit/ea702b8fee6ffcbb170ef123848a909969abe4b8", "message": "introduce a very basic version of Proxy object", "committedDate": "2020-03-01T09:26:04Z", "type": "forcePushed"}, {"oid": "9f54fc3bcd8d2cbe86293ab66e5988e6c40dee36", "url": "https://github.com/line/armeria/commit/9f54fc3bcd8d2cbe86293ab66e5988e6c40dee36", "message": "hide proxy type, use default connectTimeout", "committedDate": "2020-03-01T10:20:16Z", "type": "commit"}, {"oid": "9f54fc3bcd8d2cbe86293ab66e5988e6c40dee36", "url": "https://github.com/line/armeria/commit/9f54fc3bcd8d2cbe86293ab66e5988e6c40dee36", "message": "hide proxy type, use default connectTimeout", "committedDate": "2020-03-01T10:20:16Z", "type": "forcePushed"}, {"oid": "cc7d6ef1dadcae9cd0a4b4a539c5e185c048ab20", "url": "https://github.com/line/armeria/commit/cc7d6ef1dadcae9cd0a4b4a539c5e185c048ab20", "message": "add username, password support", "committedDate": "2020-03-01T13:34:09Z", "type": "commit"}, {"oid": "650fc5218c675a24e5a3e0124f60c7c2a8e4e382", "url": "https://github.com/line/armeria/commit/650fc5218c675a24e5a3e0124f60c7c2a8e4e382", "message": "the Proxy object only has relevant public accessors", "committedDate": "2020-03-02T15:24:29Z", "type": "commit"}, {"oid": "e363317322aa4b1e8abc1d5ffcafeac95970528e", "url": "https://github.com/line/armeria/commit/e363317322aa4b1e8abc1d5ffcafeac95970528e", "message": "poc for https proxy", "committedDate": "2020-03-03T16:51:10Z", "type": "commit"}, {"oid": "e363317322aa4b1e8abc1d5ffcafeac95970528e", "url": "https://github.com/line/armeria/commit/e363317322aa4b1e8abc1d5ffcafeac95970528e", "message": "poc for https proxy", "committedDate": "2020-03-03T16:51:10Z", "type": "forcePushed"}, {"oid": "92d4407ca387e9237c671c45daf3b499b5e6f944", "url": "https://github.com/line/armeria/commit/92d4407ca387e9237c671c45daf3b499b5e6f944", "message": "add javadocs", "committedDate": "2020-03-05T14:07:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyMzE3MQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r388323171", "bodyText": "proxy() for consistency", "author": "trustin", "createdAt": "2020-03-05T14:21:59Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java", "diffHunk": "@@ -257,4 +257,11 @@ public ConnectionPoolListener connectionPoolListener() {\n     public MeterRegistry meterRegistry() {\n         return get(ClientFactoryOption.METER_REGISTRY);\n     }\n+\n+    /**\n+     * The {@link Proxy} which contains the proxy configuration.\n+     */\n+    public Proxy getProxy() {", "originalCommit": "92d4407ca387e9237c671c45daf3b499b5e6f944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyMzM1MQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r388323351", "bodyText": "configureProxy ?", "author": "trustin", "createdAt": "2020-03-05T14:22:16Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -118,6 +125,40 @@ protected void initChannel(Channel ch) throws Exception {\n                                                       .get(ChannelOption.CONNECT_TIMEOUT_MILLIS);\n     }\n \n+    private void applyProxy(Channel ch, Proxy proxy, SslContext sslCtx) {", "originalCommit": "92d4407ca387e9237c671c45daf3b499b5e6f944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyMzc5NQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r388323795", "bodyText": "\"{} Ignoring unknown proxy type: {}\", ch, proxy.proxyType() ?", "author": "trustin", "createdAt": "2020-03-05T14:23:01Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -118,6 +125,40 @@ protected void initChannel(Channel ch) throws Exception {\n                                                       .get(ChannelOption.CONNECT_TIMEOUT_MILLIS);\n     }\n \n+    private void applyProxy(Channel ch, Proxy proxy, SslContext sslCtx) {\n+        final ProxyHandler proxyHandler;\n+        switch (proxy.proxyType()) {\n+            case NONE:\n+                return;\n+            case SOCKS4:\n+                proxyHandler = new Socks4ProxyHandler(proxy.proxyAddress(), proxy.userName());\n+                break;\n+            case SOCKS5:\n+                proxyHandler = new Socks5ProxyHandler(\n+                        proxy.proxyAddress(), proxy.userName(), ((Socks5Proxy) proxy).password());\n+                break;\n+            case CONNECT:\n+                final String username = proxy.userName();\n+                final String password = ((ConnectProxy) proxy).password();\n+                if (username == null || password == null) {\n+                    proxyHandler = new HttpProxyHandler(proxy.proxyAddress());\n+                } else {\n+                    proxyHandler = new HttpProxyHandler(proxy.proxyAddress(), username, password);\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Unknown proxy type not applied: {}.\", proxy.proxyType());", "originalCommit": "92d4407ca387e9237c671c45daf3b499b5e6f944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyNDQ4OA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r388324488", "bodyText": "final\nProbably ProxyConfig is better?\nPlease implement toString() for this class and its subclasses.", "author": "trustin", "createdAt": "2020-03-05T14:24:02Z", "path": "core/src/main/java/com/linecorp/armeria/client/Proxy.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ProxyBuilder.ConnectProxyBuilder;\n+import com.linecorp.armeria.client.ProxyBuilder.Socks4ProxyBuilder;\n+import com.linecorp.armeria.client.ProxyBuilder.Socks5ProxyBuilder;\n+\n+/**\n+ * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n+ */\n+public class Proxy {", "originalCommit": "92d4407ca387e9237c671c45daf3b499b5e6f944", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MTI5NA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389251294", "bodyText": "Couldn't use final since other classes are inheriting this class", "author": "jrhee17", "createdAt": "2020-03-07T12:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyNDQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyNDgxMg==", "url": "https://github.com/line/armeria/pull/2496#discussion_r388324812", "bodyText": "Could we also add a static singleton factory method ofDefault() and none()?", "author": "trustin", "createdAt": "2020-03-05T14:24:32Z", "path": "core/src/main/java/com/linecorp/armeria/client/Proxy.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ProxyBuilder.ConnectProxyBuilder;\n+import com.linecorp.armeria.client.ProxyBuilder.Socks4ProxyBuilder;\n+import com.linecorp.armeria.client.ProxyBuilder.Socks5ProxyBuilder;\n+\n+/**\n+ * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n+ */\n+public class Proxy {\n+\n+    private static final long USE_DEFAULT_TIMEOUT_MILLIS = -1;\n+    static final Proxy DEFAULT =\n+            new Proxy(ProxyType.NONE, new InetSocketAddress(0), USE_DEFAULT_TIMEOUT_MILLIS);", "originalCommit": "92d4407ca387e9237c671c45daf3b499b5e6f944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyNTAyMA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r388325020", "bodyText": "type()", "author": "trustin", "createdAt": "2020-03-05T14:24:52Z", "path": "core/src/main/java/com/linecorp/armeria/client/Proxy.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ProxyBuilder.ConnectProxyBuilder;\n+import com.linecorp.armeria.client.ProxyBuilder.Socks4ProxyBuilder;\n+import com.linecorp.armeria.client.ProxyBuilder.Socks5ProxyBuilder;\n+\n+/**\n+ * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n+ */\n+public class Proxy {\n+\n+    private static final long USE_DEFAULT_TIMEOUT_MILLIS = -1;\n+    static final Proxy DEFAULT =\n+            new Proxy(ProxyType.NONE, new InetSocketAddress(0), USE_DEFAULT_TIMEOUT_MILLIS);\n+\n+    private final ProxyType proxyType;\n+    private final InetSocketAddress proxyAddress;\n+    private final long connectTimeoutMillis;\n+\n+    @Nullable\n+    private String userName;\n+\n+    Proxy(ProxyType proxyType, InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        this.proxyType = proxyType;\n+        this.proxyAddress = proxyAddress;\n+        this.connectTimeoutMillis = connectTimeoutMillis;\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS4 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks4ProxyBuilder socks4(InetSocketAddress proxyAddress) {\n+        return new Socks4ProxyBuilder(requireNonNull(proxyAddress), USE_DEFAULT_TIMEOUT_MILLIS);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS4 protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param connectTimeoutMillis The connection timeout for connecting to the proxy server.\n+     */\n+    public static Socks4ProxyBuilder socks4(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        checkArgument(connectTimeoutMillis >= 0);\n+        return new Socks4ProxyBuilder(requireNonNull(proxyAddress), connectTimeoutMillis);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS5 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks5ProxyBuilder socks5(InetSocketAddress proxyAddress) {\n+        return new Socks5ProxyBuilder(requireNonNull(proxyAddress), USE_DEFAULT_TIMEOUT_MILLIS);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS5 protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param connectTimeoutMillis The connection timeout for connecting to the proxy server.\n+     */\n+    public static Socks5ProxyBuilder socks5(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        checkArgument(connectTimeoutMillis >= 0);\n+        return new Socks5ProxyBuilder(requireNonNull(proxyAddress), connectTimeoutMillis);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for CONNECT protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static ConnectProxyBuilder connect(InetSocketAddress proxyAddress) {\n+        return new ConnectProxyBuilder(requireNonNull(proxyAddress), USE_DEFAULT_TIMEOUT_MILLIS);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for CONNECT protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param connectTimeoutMillis The connection timeout for connecting to the proxy server.\n+     */\n+    public static ConnectProxyBuilder connect(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        checkArgument(connectTimeoutMillis >= 0);\n+        return new ConnectProxyBuilder(requireNonNull(proxyAddress), connectTimeoutMillis);\n+    }\n+\n+    ProxyType proxyType() {", "originalCommit": "92d4407ca387e9237c671c45daf3b499b5e6f944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyNTIzNQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r388325235", "bodyText": "Please move to the top level.", "author": "trustin", "createdAt": "2020-03-05T14:25:12Z", "path": "core/src/main/java/com/linecorp/armeria/client/Proxy.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ProxyBuilder.ConnectProxyBuilder;\n+import com.linecorp.armeria.client.ProxyBuilder.Socks4ProxyBuilder;\n+import com.linecorp.armeria.client.ProxyBuilder.Socks5ProxyBuilder;\n+\n+/**\n+ * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n+ */\n+public class Proxy {\n+\n+    private static final long USE_DEFAULT_TIMEOUT_MILLIS = -1;\n+    static final Proxy DEFAULT =\n+            new Proxy(ProxyType.NONE, new InetSocketAddress(0), USE_DEFAULT_TIMEOUT_MILLIS);\n+\n+    private final ProxyType proxyType;\n+    private final InetSocketAddress proxyAddress;\n+    private final long connectTimeoutMillis;\n+\n+    @Nullable\n+    private String userName;\n+\n+    Proxy(ProxyType proxyType, InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        this.proxyType = proxyType;\n+        this.proxyAddress = proxyAddress;\n+        this.connectTimeoutMillis = connectTimeoutMillis;\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS4 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks4ProxyBuilder socks4(InetSocketAddress proxyAddress) {\n+        return new Socks4ProxyBuilder(requireNonNull(proxyAddress), USE_DEFAULT_TIMEOUT_MILLIS);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS4 protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param connectTimeoutMillis The connection timeout for connecting to the proxy server.\n+     */\n+    public static Socks4ProxyBuilder socks4(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        checkArgument(connectTimeoutMillis >= 0);\n+        return new Socks4ProxyBuilder(requireNonNull(proxyAddress), connectTimeoutMillis);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS5 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks5ProxyBuilder socks5(InetSocketAddress proxyAddress) {\n+        return new Socks5ProxyBuilder(requireNonNull(proxyAddress), USE_DEFAULT_TIMEOUT_MILLIS);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS5 protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param connectTimeoutMillis The connection timeout for connecting to the proxy server.\n+     */\n+    public static Socks5ProxyBuilder socks5(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        checkArgument(connectTimeoutMillis >= 0);\n+        return new Socks5ProxyBuilder(requireNonNull(proxyAddress), connectTimeoutMillis);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for CONNECT protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static ConnectProxyBuilder connect(InetSocketAddress proxyAddress) {\n+        return new ConnectProxyBuilder(requireNonNull(proxyAddress), USE_DEFAULT_TIMEOUT_MILLIS);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for CONNECT protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param connectTimeoutMillis The connection timeout for connecting to the proxy server.\n+     */\n+    public static ConnectProxyBuilder connect(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        checkArgument(connectTimeoutMillis >= 0);\n+        return new ConnectProxyBuilder(requireNonNull(proxyAddress), connectTimeoutMillis);\n+    }\n+\n+    ProxyType proxyType() {\n+        return proxyType;\n+    }\n+\n+    /**\n+     * The proxy address.\n+     */\n+    public InetSocketAddress proxyAddress() {\n+        return proxyAddress;\n+    }\n+\n+    /**\n+     * The connect timeout.\n+     */\n+    public long connectTimeoutMillis() {\n+        return connectTimeoutMillis;\n+    }\n+\n+    /**\n+     * The userName.\n+     */\n+    @Nullable\n+    public String userName() {\n+        return userName;\n+    }\n+\n+    void setUserName(@Nullable String userName) {\n+        this.userName = userName;\n+    }\n+\n+    enum ProxyType {", "originalCommit": "92d4407ca387e9237c671c45daf3b499b5e6f944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyNTcxMQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r388325711", "bodyText": "These subtypes could be moved to the top level.", "author": "trustin", "createdAt": "2020-03-05T14:25:54Z", "path": "core/src/main/java/com/linecorp/armeria/client/Proxy.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ProxyBuilder.ConnectProxyBuilder;\n+import com.linecorp.armeria.client.ProxyBuilder.Socks4ProxyBuilder;\n+import com.linecorp.armeria.client.ProxyBuilder.Socks5ProxyBuilder;\n+\n+/**\n+ * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n+ */\n+public class Proxy {\n+\n+    private static final long USE_DEFAULT_TIMEOUT_MILLIS = -1;\n+    static final Proxy DEFAULT =\n+            new Proxy(ProxyType.NONE, new InetSocketAddress(0), USE_DEFAULT_TIMEOUT_MILLIS);\n+\n+    private final ProxyType proxyType;\n+    private final InetSocketAddress proxyAddress;\n+    private final long connectTimeoutMillis;\n+\n+    @Nullable\n+    private String userName;\n+\n+    Proxy(ProxyType proxyType, InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        this.proxyType = proxyType;\n+        this.proxyAddress = proxyAddress;\n+        this.connectTimeoutMillis = connectTimeoutMillis;\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS4 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks4ProxyBuilder socks4(InetSocketAddress proxyAddress) {\n+        return new Socks4ProxyBuilder(requireNonNull(proxyAddress), USE_DEFAULT_TIMEOUT_MILLIS);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS4 protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param connectTimeoutMillis The connection timeout for connecting to the proxy server.\n+     */\n+    public static Socks4ProxyBuilder socks4(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        checkArgument(connectTimeoutMillis >= 0);\n+        return new Socks4ProxyBuilder(requireNonNull(proxyAddress), connectTimeoutMillis);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS5 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks5ProxyBuilder socks5(InetSocketAddress proxyAddress) {\n+        return new Socks5ProxyBuilder(requireNonNull(proxyAddress), USE_DEFAULT_TIMEOUT_MILLIS);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS5 protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param connectTimeoutMillis The connection timeout for connecting to the proxy server.\n+     */\n+    public static Socks5ProxyBuilder socks5(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        checkArgument(connectTimeoutMillis >= 0);\n+        return new Socks5ProxyBuilder(requireNonNull(proxyAddress), connectTimeoutMillis);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for CONNECT protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static ConnectProxyBuilder connect(InetSocketAddress proxyAddress) {\n+        return new ConnectProxyBuilder(requireNonNull(proxyAddress), USE_DEFAULT_TIMEOUT_MILLIS);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for CONNECT protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param connectTimeoutMillis The connection timeout for connecting to the proxy server.\n+     */\n+    public static ConnectProxyBuilder connect(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        checkArgument(connectTimeoutMillis >= 0);\n+        return new ConnectProxyBuilder(requireNonNull(proxyAddress), connectTimeoutMillis);\n+    }\n+\n+    ProxyType proxyType() {\n+        return proxyType;\n+    }\n+\n+    /**\n+     * The proxy address.\n+     */\n+    public InetSocketAddress proxyAddress() {\n+        return proxyAddress;\n+    }\n+\n+    /**\n+     * The connect timeout.\n+     */\n+    public long connectTimeoutMillis() {\n+        return connectTimeoutMillis;\n+    }\n+\n+    /**\n+     * The userName.\n+     */\n+    @Nullable\n+    public String userName() {\n+        return userName;\n+    }\n+\n+    void setUserName(@Nullable String userName) {\n+        this.userName = userName;\n+    }\n+\n+    enum ProxyType {\n+        NONE,\n+        SOCKS4,\n+        SOCKS5,\n+        CONNECT,\n+    }\n+\n+    /**\n+     * Contains SOCKS4 proxy configuration used in {@link ClientFactory}.\n+     */\n+    public static class Socks4Proxy extends Proxy {", "originalCommit": "92d4407ca387e9237c671c45daf3b499b5e6f944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyNjM4NA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r388326384", "bodyText": "instance members should appear after the static factory methods.", "author": "trustin", "createdAt": "2020-03-05T14:26:58Z", "path": "core/src/main/java/com/linecorp/armeria/client/Proxy.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ProxyBuilder.ConnectProxyBuilder;\n+import com.linecorp.armeria.client.ProxyBuilder.Socks4ProxyBuilder;\n+import com.linecorp.armeria.client.ProxyBuilder.Socks5ProxyBuilder;\n+\n+/**\n+ * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n+ */\n+public class Proxy {\n+\n+    private static final long USE_DEFAULT_TIMEOUT_MILLIS = -1;\n+    static final Proxy DEFAULT =\n+            new Proxy(ProxyType.NONE, new InetSocketAddress(0), USE_DEFAULT_TIMEOUT_MILLIS);\n+\n+    private final ProxyType proxyType;\n+    private final InetSocketAddress proxyAddress;\n+    private final long connectTimeoutMillis;\n+\n+    @Nullable\n+    private String userName;\n+\n+    Proxy(ProxyType proxyType, InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        this.proxyType = proxyType;\n+        this.proxyAddress = proxyAddress;\n+        this.connectTimeoutMillis = connectTimeoutMillis;\n+    }", "originalCommit": "92d4407ca387e9237c671c45daf3b499b5e6f944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyNjY4NQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r388326685", "bodyText": "Global comment: userName -> username", "author": "trustin", "createdAt": "2020-03-05T14:27:23Z", "path": "core/src/main/java/com/linecorp/armeria/client/ProxyBuilder.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Proxy.ConnectProxy;\n+import com.linecorp.armeria.client.Proxy.Socks4Proxy;\n+import com.linecorp.armeria.client.Proxy.Socks5Proxy;\n+\n+abstract class ProxyBuilder {\n+    @Nullable\n+    private String userName;\n+    @Nullable\n+    private String password;\n+\n+    private final InetSocketAddress proxyAddress;\n+    private final long connectTimeoutMillis;\n+    private boolean useSsl;\n+\n+    private ProxyBuilder(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        this.proxyAddress = proxyAddress;\n+        this.connectTimeoutMillis = connectTimeoutMillis;\n+    }\n+\n+    @Nullable\n+    protected String getUserName() {\n+        return userName;\n+    }\n+\n+    protected void setUserName(@Nullable String userName) {\n+        this.userName = userName;", "originalCommit": "92d4407ca387e9237c671c45daf3b499b5e6f944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyNzE5NQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r388327195", "bodyText": "AbstractProxyBuilder?", "author": "trustin", "createdAt": "2020-03-05T14:28:11Z", "path": "core/src/main/java/com/linecorp/armeria/client/ProxyBuilder.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Proxy.ConnectProxy;\n+import com.linecorp.armeria.client.Proxy.Socks4Proxy;\n+import com.linecorp.armeria.client.Proxy.Socks5Proxy;\n+\n+abstract class ProxyBuilder {", "originalCommit": "92d4407ca387e9237c671c45daf3b499b5e6f944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyNzg3NQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r388327875", "bodyText": "How about just splitting into username() and password()?", "author": "trustin", "createdAt": "2020-03-05T14:29:10Z", "path": "core/src/main/java/com/linecorp/armeria/client/ProxyBuilder.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.Proxy.ConnectProxy;\n+import com.linecorp.armeria.client.Proxy.Socks4Proxy;\n+import com.linecorp.armeria.client.Proxy.Socks5Proxy;\n+\n+abstract class ProxyBuilder {\n+    @Nullable\n+    private String userName;\n+    @Nullable\n+    private String password;\n+\n+    private final InetSocketAddress proxyAddress;\n+    private final long connectTimeoutMillis;\n+    private boolean useSsl;\n+\n+    private ProxyBuilder(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        this.proxyAddress = proxyAddress;\n+        this.connectTimeoutMillis = connectTimeoutMillis;\n+    }\n+\n+    @Nullable\n+    protected String getUserName() {\n+        return userName;\n+    }\n+\n+    protected void setUserName(@Nullable String userName) {\n+        this.userName = userName;\n+    }\n+\n+    @Nullable\n+    protected String getPassword() {\n+        return password;\n+    }\n+\n+    protected void setPassword(@Nullable String password) {\n+        this.password = password;\n+    }\n+\n+    protected InetSocketAddress getProxyAddress() {\n+        return proxyAddress;\n+    }\n+\n+    protected long getConnectTimeoutMillis() {\n+        return connectTimeoutMillis;\n+    }\n+\n+    protected void setUseSsl(boolean useSsl) {\n+        this.useSsl = useSsl;\n+    }\n+\n+    protected boolean getUseSsl() {\n+        return useSsl;\n+    }\n+\n+    /**\n+     * Build the proxy object.\n+     */\n+    public abstract Proxy build();\n+\n+    /**\n+     * A {@code ProxyBuilder} which builds a SOCKS4 protocol configuration.\n+     */\n+    public static final class Socks4ProxyBuilder extends ProxyBuilder {\n+        Socks4ProxyBuilder(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+            super(proxyAddress, connectTimeoutMillis);\n+        }\n+\n+        /**\n+         * Set the proxy userName.\n+         */\n+        public Socks4ProxyBuilder userName(String userName) {\n+            setUserName(userName);\n+            return this;\n+        }\n+\n+        @Override\n+        public Socks4Proxy build() {\n+            final Socks4Proxy socks4Proxy =\n+                    new Socks4Proxy(getProxyAddress(), getConnectTimeoutMillis());\n+            socks4Proxy.setUserName(getUserName());\n+            return socks4Proxy;\n+        }\n+    }\n+\n+    /**\n+     * A {@code ProxyBuilder} which builds a SOCKS4 protocol configuration.\n+     */\n+    public static final class Socks5ProxyBuilder extends ProxyBuilder {\n+        Socks5ProxyBuilder(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+            super(proxyAddress, connectTimeoutMillis);\n+        }\n+\n+        /**\n+         * Set the proxy userName.\n+         */\n+        public Socks5ProxyBuilder userName(String userName) {\n+            setUserName(userName);\n+            return this;\n+        }\n+\n+        /**\n+         * Set the proxy password.\n+         */\n+        public Socks5ProxyBuilder password(String password) {\n+            setPassword(password);\n+            return this;\n+        }\n+\n+        @Override\n+        public Socks5Proxy build() {\n+            final Socks5Proxy socks5Proxy =\n+                    new Socks5Proxy(getProxyAddress(), getConnectTimeoutMillis());\n+            socks5Proxy.setUserName(getUserName());\n+            socks5Proxy.setPassword(getPassword());\n+            return socks5Proxy;\n+        }\n+    }\n+\n+    /**\n+     * A {@code ProxyBuilder} which builds a SOCKS4 protocol configuration.\n+     */\n+    public static final class ConnectProxyBuilder extends ProxyBuilder {\n+        ConnectProxyBuilder(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+            super(proxyAddress, connectTimeoutMillis);\n+        }\n+\n+        /**\n+         * Set the proxy userName and password.\n+         */\n+        public ConnectProxyBuilder auth(String userName, String password) {", "originalCommit": "92d4407ca387e9237c671c45daf3b499b5e6f944", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MTY1MA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389251650", "bodyText": "Actually, as you may know HttpProxyHandler requires both username, password are either null or non-null.\nIf we decide to split this, I can add validation logic to the build method, but I felt this style of API would communicate this restraint to the user better. Let me know what you think \ud83d\ude09", "author": "jrhee17", "createdAt": "2020-03-07T12:32:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyNzg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUwNTE4NQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389505185", "bodyText": "OK, then how about renaming to credential()?", "author": "trustin", "createdAt": "2020-03-09T07:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyNzg3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyODkxOA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r388328918", "bodyText": "if connect timeout is optional, we can remove the factory methods with connectTimeoutMillis and add connectTimeout(Duration) and connectTimeoutMillis(long) to the builder class.", "author": "trustin", "createdAt": "2020-03-05T14:30:42Z", "path": "core/src/main/java/com/linecorp/armeria/client/Proxy.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ProxyBuilder.ConnectProxyBuilder;\n+import com.linecorp.armeria.client.ProxyBuilder.Socks4ProxyBuilder;\n+import com.linecorp.armeria.client.ProxyBuilder.Socks5ProxyBuilder;\n+\n+/**\n+ * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n+ */\n+public class Proxy {\n+\n+    private static final long USE_DEFAULT_TIMEOUT_MILLIS = -1;\n+    static final Proxy DEFAULT =\n+            new Proxy(ProxyType.NONE, new InetSocketAddress(0), USE_DEFAULT_TIMEOUT_MILLIS);\n+\n+    private final ProxyType proxyType;\n+    private final InetSocketAddress proxyAddress;\n+    private final long connectTimeoutMillis;\n+\n+    @Nullable\n+    private String userName;\n+\n+    Proxy(ProxyType proxyType, InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        this.proxyType = proxyType;\n+        this.proxyAddress = proxyAddress;\n+        this.connectTimeoutMillis = connectTimeoutMillis;\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS4 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks4ProxyBuilder socks4(InetSocketAddress proxyAddress) {\n+        return new Socks4ProxyBuilder(requireNonNull(proxyAddress), USE_DEFAULT_TIMEOUT_MILLIS);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS4 protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param connectTimeoutMillis The connection timeout for connecting to the proxy server.\n+     */\n+    public static Socks4ProxyBuilder socks4(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        checkArgument(connectTimeoutMillis >= 0);\n+        return new Socks4ProxyBuilder(requireNonNull(proxyAddress), connectTimeoutMillis);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS5 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks5ProxyBuilder socks5(InetSocketAddress proxyAddress) {\n+        return new Socks5ProxyBuilder(requireNonNull(proxyAddress), USE_DEFAULT_TIMEOUT_MILLIS);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS5 protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param connectTimeoutMillis The connection timeout for connecting to the proxy server.\n+     */\n+    public static Socks5ProxyBuilder socks5(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        checkArgument(connectTimeoutMillis >= 0);\n+        return new Socks5ProxyBuilder(requireNonNull(proxyAddress), connectTimeoutMillis);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for CONNECT protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static ConnectProxyBuilder connect(InetSocketAddress proxyAddress) {\n+        return new ConnectProxyBuilder(requireNonNull(proxyAddress), USE_DEFAULT_TIMEOUT_MILLIS);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for CONNECT protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param connectTimeoutMillis The connection timeout for connecting to the proxy server.\n+     */\n+    public static ConnectProxyBuilder connect(InetSocketAddress proxyAddress, long connectTimeoutMillis) {", "originalCommit": "92d4407ca387e9237c671c45daf3b499b5e6f944", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MTQ3Mg==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389251472", "bodyText": "Decided to get rid of proxy specific connectTimeoutMillis  and use ClientFactory.connectTimeoutMillis.", "author": "jrhee17", "createdAt": "2020-03-07T12:29:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyODkxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMyOTU0Ng==", "url": "https://github.com/line/armeria/pull/2496#discussion_r388329546", "bodyText": "Make all non-builder classes purely immutable.", "author": "trustin", "createdAt": "2020-03-05T14:31:43Z", "path": "core/src/main/java/com/linecorp/armeria/client/Proxy.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ProxyBuilder.ConnectProxyBuilder;\n+import com.linecorp.armeria.client.ProxyBuilder.Socks4ProxyBuilder;\n+import com.linecorp.armeria.client.ProxyBuilder.Socks5ProxyBuilder;\n+\n+/**\n+ * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n+ */\n+public class Proxy {\n+\n+    private static final long USE_DEFAULT_TIMEOUT_MILLIS = -1;\n+    static final Proxy DEFAULT =\n+            new Proxy(ProxyType.NONE, new InetSocketAddress(0), USE_DEFAULT_TIMEOUT_MILLIS);\n+\n+    private final ProxyType proxyType;\n+    private final InetSocketAddress proxyAddress;\n+    private final long connectTimeoutMillis;\n+\n+    @Nullable\n+    private String userName;\n+\n+    Proxy(ProxyType proxyType, InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        this.proxyType = proxyType;\n+        this.proxyAddress = proxyAddress;\n+        this.connectTimeoutMillis = connectTimeoutMillis;\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS4 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks4ProxyBuilder socks4(InetSocketAddress proxyAddress) {\n+        return new Socks4ProxyBuilder(requireNonNull(proxyAddress), USE_DEFAULT_TIMEOUT_MILLIS);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS4 protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param connectTimeoutMillis The connection timeout for connecting to the proxy server.\n+     */\n+    public static Socks4ProxyBuilder socks4(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        checkArgument(connectTimeoutMillis >= 0);\n+        return new Socks4ProxyBuilder(requireNonNull(proxyAddress), connectTimeoutMillis);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS5 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks5ProxyBuilder socks5(InetSocketAddress proxyAddress) {\n+        return new Socks5ProxyBuilder(requireNonNull(proxyAddress), USE_DEFAULT_TIMEOUT_MILLIS);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for SOCKS5 protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param connectTimeoutMillis The connection timeout for connecting to the proxy server.\n+     */\n+    public static Socks5ProxyBuilder socks5(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        checkArgument(connectTimeoutMillis >= 0);\n+        return new Socks5ProxyBuilder(requireNonNull(proxyAddress), connectTimeoutMillis);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for CONNECT protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static ConnectProxyBuilder connect(InetSocketAddress proxyAddress) {\n+        return new ConnectProxyBuilder(requireNonNull(proxyAddress), USE_DEFAULT_TIMEOUT_MILLIS);\n+    }\n+\n+    /**\n+     * Creates a {@code Proxy} configuration for CONNECT protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param connectTimeoutMillis The connection timeout for connecting to the proxy server.\n+     */\n+    public static ConnectProxyBuilder connect(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+        checkArgument(connectTimeoutMillis >= 0);\n+        return new ConnectProxyBuilder(requireNonNull(proxyAddress), connectTimeoutMillis);\n+    }\n+\n+    ProxyType proxyType() {\n+        return proxyType;\n+    }\n+\n+    /**\n+     * The proxy address.\n+     */\n+    public InetSocketAddress proxyAddress() {\n+        return proxyAddress;\n+    }\n+\n+    /**\n+     * The connect timeout.\n+     */\n+    public long connectTimeoutMillis() {\n+        return connectTimeoutMillis;\n+    }\n+\n+    /**\n+     * The userName.\n+     */\n+    @Nullable\n+    public String userName() {\n+        return userName;\n+    }\n+\n+    void setUserName(@Nullable String userName) {\n+        this.userName = userName;\n+    }\n+\n+    enum ProxyType {\n+        NONE,\n+        SOCKS4,\n+        SOCKS5,\n+        CONNECT,\n+    }\n+\n+    /**\n+     * Contains SOCKS4 proxy configuration used in {@link ClientFactory}.\n+     */\n+    public static class Socks4Proxy extends Proxy {\n+        Socks4Proxy(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+            super(ProxyType.SOCKS4, proxyAddress, connectTimeoutMillis);\n+        }\n+    }\n+\n+    /**\n+     * Contains SOCKS5 proxy configuration used in {@link ClientFactory}.\n+     */\n+    public static class Socks5Proxy extends Proxy {\n+        @Nullable\n+        private String password;\n+\n+        Socks5Proxy(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+            super(ProxyType.SOCKS5, proxyAddress, connectTimeoutMillis);\n+        }\n+\n+        /**\n+         * The configured password.\n+         */\n+        @Nullable\n+        public String password() {\n+            return password;\n+        }\n+\n+        void setPassword(@Nullable String password) {\n+            this.password = password;\n+        }\n+    }\n+\n+    /**\n+     * Contains CONNECT proxy configuration used in {@link ClientFactory}.\n+     */\n+    public static class ConnectProxy extends Proxy {\n+        @Nullable\n+        private String password;\n+\n+        private boolean useSsl;\n+\n+        ConnectProxy(InetSocketAddress proxyAddress, long connectTimeoutMillis) {\n+            super(ProxyType.CONNECT, proxyAddress, connectTimeoutMillis);\n+        }\n+\n+        /**\n+         * The configured password.\n+         */\n+        @Nullable\n+        public String password() {\n+            return password;\n+        }\n+\n+        void setPassword(@Nullable String password) {\n+            this.password = password;\n+        }\n+\n+        void setUseSsl(boolean useSsl) {\n+            this.useSsl = useSsl;\n+        }", "originalCommit": "92d4407ca387e9237c671c45daf3b499b5e6f944", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzMDMwMw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r388330303", "bodyText": "This seems unused but I guess you have a plan. \ud83d\ude09", "author": "trustin", "createdAt": "2020-03-05T14:32:52Z", "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/DynamicBehaviorHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import javax.annotation.Nullable;\n+\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+\n+@Sharable\n+public class DynamicBehaviorHandler extends ChannelDuplexHandler {", "originalCommit": "92d4407ca387e9237c671c45daf3b499b5e6f944", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MTgxNw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389251817", "bodyText": "It's used to control proxy server behavior while running integration tests. \ud83c\udfc3\n\n  \n    \n      armeria/core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java\n    \n    \n         Line 94\n      in\n      5c79ac0\n    \n    \n    \n    \n\n        \n          \n           private static final DynamicBehaviorHandler SOCKS_DYNAMIC_HANDLER = new DynamicBehaviorHandler();", "author": "jrhee17", "createdAt": "2020-03-07T12:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzMDMwMw=="}], "type": "inlineReview"}, {"oid": "7c7c0626a40e6260567eff67abd4a1c6e35f9723", "url": "https://github.com/line/armeria/commit/7c7c0626a40e6260567eff67abd4a1c6e35f9723", "message": "use clientFactory timeout instead of a dedicated proxy parameter", "committedDate": "2020-03-05T15:10:29Z", "type": "commit"}, {"oid": "e16cd070b3cccfeff7e24c645059496268f59cbd", "url": "https://github.com/line/armeria/commit/e16cd070b3cccfeff7e24c645059496268f59cbd", "message": "move inner classes to upper level and rename proxy to proxyConfig", "committedDate": "2020-03-06T15:55:49Z", "type": "commit"}, {"oid": "8bcd2f3522ffc30998317d6a13f9b5ab89fbbc93", "url": "https://github.com/line/armeria/commit/8bcd2f3522ffc30998317d6a13f9b5ab89fbbc93", "message": "rename proxy to proxyConfig, userName to username", "committedDate": "2020-03-06T16:50:13Z", "type": "commit"}, {"oid": "a4503e6229ab73c3c8b875dc33e4a5ad737ba514", "url": "https://github.com/line/armeria/commit/a4503e6229ab73c3c8b875dc33e4a5ad737ba514", "message": "clean up javadoc, add noop proxy config type", "committedDate": "2020-03-07T11:55:36Z", "type": "forcePushed"}, {"oid": "9499aa21920be0723e6c52e66e78b0dbdbb27c28", "url": "https://github.com/line/armeria/commit/9499aa21920be0723e6c52e66e78b0dbdbb27c28", "message": "clean up javadoc, add noop proxy config type", "committedDate": "2020-03-07T12:07:05Z", "type": "forcePushed"}, {"oid": "9bd10c2ca790ea504e140175257f9fa3cd0d9839", "url": "https://github.com/line/armeria/commit/9bd10c2ca790ea504e140175257f9fa3cd0d9839", "message": "clean up javadoc, add noop proxy config type", "committedDate": "2020-03-07T12:11:27Z", "type": "forcePushed"}, {"oid": "5c79ac09cb59f0e6e463b32ffe4cd2e2f362010c", "url": "https://github.com/line/armeria/commit/5c79ac09cb59f0e6e463b32ffe4cd2e2f362010c", "message": "clean up javadoc, add noop proxy config type", "committedDate": "2020-03-07T12:24:42Z", "type": "forcePushed"}, {"oid": "d07e63a98b669a83303d05bc406c15203417c995", "url": "https://github.com/line/armeria/commit/d07e63a98b669a83303d05bc406c15203417c995", "message": "clean up javadoc, add noop proxy config type", "committedDate": "2020-03-07T12:53:46Z", "type": "commit"}, {"oid": "d07e63a98b669a83303d05bc406c15203417c995", "url": "https://github.com/line/armeria/commit/d07e63a98b669a83303d05bc406c15203417c995", "message": "clean up javadoc, add noop proxy config type", "committedDate": "2020-03-07T12:53:46Z", "type": "forcePushed"}, {"oid": "488b63c211d63f50cf415a276fda2f21c2dfd421", "url": "https://github.com/line/armeria/commit/488b63c211d63f50cf415a276fda2f21c2dfd421", "message": "rename ProxyBuilder to ProxyConfigBuilder", "committedDate": "2020-03-08T01:53:31Z", "type": "commit"}, {"oid": "488b63c211d63f50cf415a276fda2f21c2dfd421", "url": "https://github.com/line/armeria/commit/488b63c211d63f50cf415a276fda2f21c2dfd421", "message": "rename ProxyBuilder to ProxyConfigBuilder", "committedDate": "2020-03-08T01:53:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ1OTY0Nw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389459647", "bodyText": "This Noop config seems weird a little bit for me.\nBecause this is not an action or behavior but a configuration.\nHow about removing this and using nullable as a default?", "author": "ikhoon", "createdAt": "2020-03-09T04:34:42Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/NoopProxyConfig.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Represents client-side proxy is disabled.\n+ */\n+public class NoopProxyConfig extends ProxyConfig {", "originalCommit": "488b63c211d63f50cf415a276fda2f21c2dfd421", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxMTgzNw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389511837", "bodyText": "How about DisabledProxyConfig ?\nMissing final", "author": "trustin", "createdAt": "2020-03-09T08:16:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ1OTY0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ1OTcwNQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389459705", "bodyText": "nit: This and others :-)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new Socks4ProxyConfigBuilder(requireNonNull(proxyAddress));\n          \n          \n            \n                    return new Socks4ProxyConfigBuilder(requireNonNull(proxyAddress, \"proxyAddress\"));", "author": "ikhoon", "createdAt": "2020-03-09T04:35:07Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static com.linecorp.armeria.client.proxy.NoopProxyConfig.NOOP_PROXY_CONFIG;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+\n+/**\n+ * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n+ */\n+public abstract class ProxyConfig {\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for SOCKS4 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks4ProxyConfigBuilder socks4(InetSocketAddress proxyAddress) {\n+        return new Socks4ProxyConfigBuilder(requireNonNull(proxyAddress));", "originalCommit": "488b63c211d63f50cf415a276fda2f21c2dfd421", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ3MDQwNQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389470405", "bodyText": "I think Armeria would not use this builder API design. You might want to start with builder()... to build ProxyConfig pattern.\nProxyConfig.builder()\n           .socks4(...)\n           .username(...)\n           .build()\nOr How about making factory methods as we did in Backoff?\n\n  \n    \n      armeria/core/src/main/java/com/linecorp/armeria/client/retry/Backoff.java\n    \n    \n        Lines 50 to 62\n      in\n      bd28eb2\n    \n    \n    \n    \n\n        \n          \n               /** \n        \n\n        \n          \n                * Returns a {@link Backoff} that waits a fixed delay between attempts. \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               static Backoff fixed(long delayMillis) { \n        \n\n        \n          \n                   return new FixedBackoff(delayMillis); \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               /** \n        \n\n        \n          \n                * Returns a {@link Backoff} that waits an exponentially-increasing amount of time between attempts. \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               static Backoff exponential(long initialDelayMillis, long maxDelayMillis) { \n        \n\n        \n          \n                   return exponential(initialDelayMillis, maxDelayMillis, 2.0); \n        \n\n        \n          \n               }", "author": "ikhoon", "createdAt": "2020-03-09T05:37:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ1OTcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxMjQ5Mw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389512493", "bodyText": "How about builderForSocks4, etc?", "author": "trustin", "createdAt": "2020-03-09T08:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ1OTcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxNDU5Mw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389514593", "bodyText": "Alternatively, we could give up builder API and just add various factory methods:\npublic static Socks4ProxyConfig socks4(address);\npublic static Socks4ProxyConfig socks4(address, username);\npublic static Socks5ProxyConfig socks5(address);\npublic static Socks5ProxyConfig socks5(address, username, password);\npublic static ConnectProxyConfig connect(address);\npublic static ConnectProxyConfig connect(address, HttpHeaders?);", "author": "trustin", "createdAt": "2020-03-09T08:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ1OTcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MzY2OQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389773669", "bodyText": "start with builder()\n\nI think It might be hard to express that only one of the proxy protocols can be selected with this API. As @trustin suggested, I think I would need a method like builderForSocks4 to go with this route .\n\ngive up builder API and just add various factory methods\n\nI initially tried to avoid this bc I don't like nullable parameters, but I do feel like this pattern may be slightly overkill.\nDecided to go with factory methods to save users from typing the extra build() \ud83d\ude09", "author": "jrhee17", "createdAt": "2020-03-09T15:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ1OTcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2OTk0OQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389469949", "bodyText": "Could be package-private?", "author": "ikhoon", "createdAt": "2020-03-09T05:34:35Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/AbstractProxyConfigBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+abstract class AbstractProxyConfigBuilder {\n+\n+    private final InetSocketAddress proxyAddress;\n+    @Nullable\n+    private String username;\n+    @Nullable\n+    private String password;\n+\n+    protected AbstractProxyConfigBuilder(InetSocketAddress proxyAddress) {\n+        this.proxyAddress = proxyAddress;\n+    }\n+\n+    protected InetSocketAddress getProxyAddress() {\n+        return proxyAddress;\n+    }\n+\n+    @Nullable\n+    protected String getUsername() {", "originalCommit": "488b63c211d63f50cf415a276fda2f21c2dfd421", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUwNTk3NQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389505975", "bodyText": ".. and final?", "author": "trustin", "createdAt": "2020-03-09T07:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2OTk0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2OTk2OQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389469969", "bodyText": "Ditto", "author": "ikhoon", "createdAt": "2020-03-09T05:34:43Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/AbstractProxyConfigBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+abstract class AbstractProxyConfigBuilder {\n+\n+    private final InetSocketAddress proxyAddress;\n+    @Nullable\n+    private String username;\n+    @Nullable\n+    private String password;\n+\n+    protected AbstractProxyConfigBuilder(InetSocketAddress proxyAddress) {\n+        this.proxyAddress = proxyAddress;\n+    }\n+\n+    protected InetSocketAddress getProxyAddress() {\n+        return proxyAddress;\n+    }\n+\n+    @Nullable\n+    protected String getUsername() {\n+        return username;\n+    }\n+\n+    protected void setUsername(@Nullable String username) {\n+        this.username = username;\n+    }\n+\n+    @Nullable\n+    protected String getPassword() {", "originalCommit": "488b63c211d63f50cf415a276fda2f21c2dfd421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2OTk4NA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389469984", "bodyText": "Ditto", "author": "ikhoon", "createdAt": "2020-03-09T05:34:51Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/AbstractProxyConfigBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+abstract class AbstractProxyConfigBuilder {\n+\n+    private final InetSocketAddress proxyAddress;\n+    @Nullable\n+    private String username;\n+    @Nullable\n+    private String password;\n+\n+    protected AbstractProxyConfigBuilder(InetSocketAddress proxyAddress) {\n+        this.proxyAddress = proxyAddress;\n+    }\n+\n+    protected InetSocketAddress getProxyAddress() {", "originalCommit": "488b63c211d63f50cf415a276fda2f21c2dfd421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUwNjc3Mg==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389506772", "bodyText": "useTls", "author": "trustin", "createdAt": "2020-03-09T08:02:01Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ConnectProxyConfig.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Contains CONNECT proxy related configuration.\n+ */\n+public class ConnectProxyConfig extends ProxyConfig {\n+\n+    @Nullable\n+    private final String password;\n+\n+    private final boolean useSsl;\n+\n+    ConnectProxyConfig(InetSocketAddress proxyAddress, @Nullable String username,\n+                       @Nullable String password, boolean useSsl) {\n+        super(proxyAddress, username);\n+        this.password = password;\n+        this.useSsl = useSsl;\n+    }\n+\n+    /**\n+     * The configured password.\n+     */\n+    @Nullable\n+    public String password() {\n+        return password;\n+    }\n+\n+    /**\n+     * Whether ssl is enabled.\n+     */\n+    public boolean useSsl() {\n+        return useSsl;", "originalCommit": "488b63c211d63f50cf415a276fda2f21c2dfd421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUwNjgyMQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389506821", "bodyText": "useTls", "author": "trustin", "createdAt": "2020-03-09T08:02:10Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ConnectProxyConfigBuilder.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+\n+/**\n+ * A {@link ProxyConfig} builder for the CONNECT protocol.\n+ */\n+public final class ConnectProxyConfigBuilder extends AbstractProxyConfigBuilder {\n+\n+    private boolean useSsl;\n+\n+    ConnectProxyConfigBuilder(InetSocketAddress proxyAddress) {\n+        super(proxyAddress);\n+    }\n+\n+    /**\n+     * Sets the proxy username and password.\n+     */\n+    public ConnectProxyConfigBuilder auth(String username, String password) {\n+        setUsername(requireNonNull(username));\n+        setPassword(requireNonNull(password));\n+        return this;\n+    }\n+\n+    /**\n+     * Signifies whether to use ssl to connect to the proxy.\n+     * If enabled, the ssl configurations for the {@link ClientFactory} will also be applied to the proxy.\n+     */\n+    public ConnectProxyConfigBuilder useSsl(boolean useSsl) {\n+        this.useSsl = useSsl;", "originalCommit": "488b63c211d63f50cf415a276fda2f21c2dfd421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxMTk1NQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389511955", "bodyText": "Why do we need username here?", "author": "trustin", "createdAt": "2020-03-09T08:16:49Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/NoopProxyConfig.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Represents client-side proxy is disabled.\n+ */\n+public class NoopProxyConfig extends ProxyConfig {\n+\n+    static final NoopProxyConfig NOOP_PROXY_CONFIG =\n+            new NoopProxyConfig(new InetSocketAddress(0), null);\n+\n+    NoopProxyConfig(InetSocketAddress proxyAddress, @Nullable String username) {", "originalCommit": "488b63c211d63f50cf415a276fda2f21c2dfd421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxMjU4NQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389512585", "bodyText": "disabled()", "author": "trustin", "createdAt": "2020-03-09T08:18:40Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static com.linecorp.armeria.client.proxy.NoopProxyConfig.NOOP_PROXY_CONFIG;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+\n+/**\n+ * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n+ */\n+public abstract class ProxyConfig {\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for SOCKS4 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks4ProxyConfigBuilder socks4(InetSocketAddress proxyAddress) {\n+        return new Socks4ProxyConfigBuilder(requireNonNull(proxyAddress));\n+    }\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for SOCKS5 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks5ProxyConfigBuilder socks5(InetSocketAddress proxyAddress) {\n+        return new Socks5ProxyConfigBuilder(requireNonNull(proxyAddress));\n+    }\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for CONNECT protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static ConnectProxyConfigBuilder connect(InetSocketAddress proxyAddress) {\n+        return new ConnectProxyConfigBuilder(requireNonNull(proxyAddress));\n+    }\n+\n+    /**\n+     * Returns a {@code ProxyConfig} which signifies that proxy is disabled.\n+     */\n+    public static ProxyConfig noop() {\n+        return NOOP_PROXY_CONFIG;", "originalCommit": "488b63c211d63f50cf415a276fda2f21c2dfd421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxMjk3NQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389512975", "bodyText": "These fields are non-existent when disabled or when we add a config with different authentication mechanism such as SASL. Could you push them down to the subtypes and make this class an interface?", "author": "trustin", "createdAt": "2020-03-09T08:19:46Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static com.linecorp.armeria.client.proxy.NoopProxyConfig.NOOP_PROXY_CONFIG;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+\n+/**\n+ * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n+ */\n+public abstract class ProxyConfig {\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for SOCKS4 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks4ProxyConfigBuilder socks4(InetSocketAddress proxyAddress) {\n+        return new Socks4ProxyConfigBuilder(requireNonNull(proxyAddress));\n+    }\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for SOCKS5 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks5ProxyConfigBuilder socks5(InetSocketAddress proxyAddress) {\n+        return new Socks5ProxyConfigBuilder(requireNonNull(proxyAddress));\n+    }\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for CONNECT protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static ConnectProxyConfigBuilder connect(InetSocketAddress proxyAddress) {\n+        return new ConnectProxyConfigBuilder(requireNonNull(proxyAddress));\n+    }\n+\n+    /**\n+     * Returns a {@code ProxyConfig} which signifies that proxy is disabled.\n+     */\n+    public static ProxyConfig noop() {\n+        return NOOP_PROXY_CONFIG;\n+    }\n+\n+    private final InetSocketAddress proxyAddress;\n+\n+    @Nullable\n+    private final String username;", "originalCommit": "488b63c211d63f50cf415a276fda2f21c2dfd421", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3NTU4Nw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389775587", "bodyText": "Actually I made ProxyConfig a class with a default visibility constructor to prevent library users from extending on their own. Let me know if you have a better idea (or if an interface is just fine since we are leaving warning logs for unknown ProxyConfig types anyways)", "author": "jrhee17", "createdAt": "2020-03-09T15:41:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxMjk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MzgxNg==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390093816", "bodyText": "Ah, OK, then.", "author": "trustin", "createdAt": "2020-03-10T04:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxMjk3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxMzA4OA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389513088", "bodyText": "Missing final", "author": "trustin", "createdAt": "2020-03-09T08:20:10Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/Socks5ProxyConfig.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Contains SOCKS5 proxy related configuration.\n+ */\n+public class Socks5ProxyConfig extends ProxyConfig {", "originalCommit": "488b63c211d63f50cf415a276fda2f21c2dfd421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUxMzQ1Mw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r389513453", "bodyText": "Missing final", "author": "trustin", "createdAt": "2020-03-09T08:21:03Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ConnectProxyConfig.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Contains CONNECT proxy related configuration.\n+ */\n+public class ConnectProxyConfig extends ProxyConfig {", "originalCommit": "488b63c211d63f50cf415a276fda2f21c2dfd421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "da68a913426228965dc8d70f07e52729f6bfe2f2", "url": "https://github.com/line/armeria/commit/da68a913426228965dc8d70f07e52729f6bfe2f2", "message": "remove proxyConfigBuilder, noop to disabled, push down common var", "committedDate": "2020-03-09T15:34:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMzEyOA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390103128", "bodyText": "Returns the ...", "author": "trustin", "createdAt": "2020-03-10T05:33:15Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ConnectProxyConfig.java", "diffHunk": "@@ -25,18 +27,41 @@\n /**\n  * Contains CONNECT proxy related configuration.\n  */\n-public class ConnectProxyConfig extends ProxyConfig {\n+public final class ConnectProxyConfig extends ProxyConfig {\n+\n+    private final InetSocketAddress proxyAddress;\n+\n+    @Nullable\n+    private final String username;\n \n     @Nullable\n     private final String password;\n \n-    private final boolean useSsl;\n+    private final boolean useTls;\n \n     ConnectProxyConfig(InetSocketAddress proxyAddress, @Nullable String username,\n-                       @Nullable String password, boolean useSsl) {\n-        super(proxyAddress, username);\n+                       @Nullable String password, boolean useTls) {\n+        checkArgument((username == null && password == null) || (username != null && password != null),\n+                      \"Username and password must either both be null or non-null.\");\n+        this.proxyAddress = proxyAddress;\n+        this.username = username;\n         this.password = password;\n-        this.useSsl = useSsl;\n+        this.useTls = useTls;\n+    }\n+\n+    /**\n+     * The configured proxy address.", "originalCommit": "da68a913426228965dc8d70f07e52729f6bfe2f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMzE3Mg==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390103172", "bodyText": "Returns whether TLS is enabled", "author": "trustin", "createdAt": "2020-03-10T05:33:29Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ConnectProxyConfig.java", "diffHunk": "@@ -50,17 +75,17 @@ public String password() {\n     /**\n      * Whether ssl is enabled.", "originalCommit": "da68a913426228965dc8d70f07e52729f6bfe2f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMzIyMA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390103220", "bodyText": "Returns the ...", "author": "trustin", "createdAt": "2020-03-10T05:33:38Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ConnectProxyConfig.java", "diffHunk": "@@ -25,18 +27,41 @@\n /**\n  * Contains CONNECT proxy related configuration.\n  */\n-public class ConnectProxyConfig extends ProxyConfig {\n+public final class ConnectProxyConfig extends ProxyConfig {\n+\n+    private final InetSocketAddress proxyAddress;\n+\n+    @Nullable\n+    private final String username;\n \n     @Nullable\n     private final String password;\n \n-    private final boolean useSsl;\n+    private final boolean useTls;\n \n     ConnectProxyConfig(InetSocketAddress proxyAddress, @Nullable String username,\n-                       @Nullable String password, boolean useSsl) {\n-        super(proxyAddress, username);\n+                       @Nullable String password, boolean useTls) {\n+        checkArgument((username == null && password == null) || (username != null && password != null),\n+                      \"Username and password must either both be null or non-null.\");\n+        this.proxyAddress = proxyAddress;\n+        this.username = username;\n         this.password = password;\n-        this.useSsl = useSsl;\n+        this.useTls = useTls;\n+    }\n+\n+    /**\n+     * The configured proxy address.\n+     */\n+    public InetSocketAddress proxyAddress() {\n+        return proxyAddress;\n+    }\n+\n+    /**\n+     * The configured username.", "originalCommit": "da68a913426228965dc8d70f07e52729f6bfe2f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMzMyNg==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390103326", "bodyText": "Please move down.", "author": "trustin", "createdAt": "2020-03-10T05:34:07Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "diffHunk": "@@ -16,83 +16,86 @@\n \n package com.linecorp.armeria.client.proxy;\n \n-import static com.linecorp.armeria.client.proxy.NoopProxyConfig.NOOP_PROXY_CONFIG;\n+import static com.linecorp.armeria.client.proxy.DisabledProxyConfig.DISABLED_PROXY_CONFIG;\n import static java.util.Objects.requireNonNull;\n \n import java.net.InetSocketAddress;\n \n import javax.annotation.Nullable;\n \n-import com.google.common.base.MoreObjects;\n-\n import com.linecorp.armeria.client.ClientFactory;\n \n /**\n  * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n  */\n public abstract class ProxyConfig {\n \n+    ProxyConfig() {\n+    }", "originalCommit": "da68a913426228965dc8d70f07e52729f6bfe2f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyOTU1Mw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390329553", "bodyText": "Sorry, I always seem to forget this :P", "author": "jrhee17", "createdAt": "2020-03-10T13:55:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMzMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMzMTQ4MA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390331480", "bodyText": "No worries. We love you, fellow contributor. \u2764\ufe0f", "author": "trustin", "createdAt": "2020-03-10T13:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMzMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMzUyNg==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390103526", "bodyText": "Perhaps better making username non-null, given that we have the version that does not require username?", "author": "trustin", "createdAt": "2020-03-10T05:35:03Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "diffHunk": "@@ -16,83 +16,86 @@\n \n package com.linecorp.armeria.client.proxy;\n \n-import static com.linecorp.armeria.client.proxy.NoopProxyConfig.NOOP_PROXY_CONFIG;\n+import static com.linecorp.armeria.client.proxy.DisabledProxyConfig.DISABLED_PROXY_CONFIG;\n import static java.util.Objects.requireNonNull;\n \n import java.net.InetSocketAddress;\n \n import javax.annotation.Nullable;\n \n-import com.google.common.base.MoreObjects;\n-\n import com.linecorp.armeria.client.ClientFactory;\n \n /**\n  * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n  */\n public abstract class ProxyConfig {\n \n+    ProxyConfig() {\n+    }\n+\n     /**\n      * Creates a {@code ProxyConfig} configuration for SOCKS4 protocol.\n      * @param proxyAddress The proxy address.\n      */\n-    public static Socks4ProxyConfigBuilder socks4(InetSocketAddress proxyAddress) {\n-        return new Socks4ProxyConfigBuilder(requireNonNull(proxyAddress));\n+    public static Socks4ProxyConfig socks4(InetSocketAddress proxyAddress) {\n+        return new Socks4ProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"), null);\n     }\n \n     /**\n-     * Creates a {@code ProxyConfig} configuration for SOCKS5 protocol.\n+     * Creates a {@code ProxyConfig} configuration for SOCKS4 protocol.\n      * @param proxyAddress The proxy address.\n+     * @param username The user name.\n      */\n-    public static Socks5ProxyConfigBuilder socks5(InetSocketAddress proxyAddress) {\n-        return new Socks5ProxyConfigBuilder(requireNonNull(proxyAddress));\n+    public static Socks4ProxyConfig socks4(InetSocketAddress proxyAddress, @Nullable String username) {", "originalCommit": "da68a913426228965dc8d70f07e52729f6bfe2f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMzYzNQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390103635", "bodyText": "Ditto - username and password could be non-null.", "author": "trustin", "createdAt": "2020-03-10T05:35:30Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "diffHunk": "@@ -16,83 +16,86 @@\n \n package com.linecorp.armeria.client.proxy;\n \n-import static com.linecorp.armeria.client.proxy.NoopProxyConfig.NOOP_PROXY_CONFIG;\n+import static com.linecorp.armeria.client.proxy.DisabledProxyConfig.DISABLED_PROXY_CONFIG;\n import static java.util.Objects.requireNonNull;\n \n import java.net.InetSocketAddress;\n \n import javax.annotation.Nullable;\n \n-import com.google.common.base.MoreObjects;\n-\n import com.linecorp.armeria.client.ClientFactory;\n \n /**\n  * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n  */\n public abstract class ProxyConfig {\n \n+    ProxyConfig() {\n+    }\n+\n     /**\n      * Creates a {@code ProxyConfig} configuration for SOCKS4 protocol.\n      * @param proxyAddress The proxy address.\n      */\n-    public static Socks4ProxyConfigBuilder socks4(InetSocketAddress proxyAddress) {\n-        return new Socks4ProxyConfigBuilder(requireNonNull(proxyAddress));\n+    public static Socks4ProxyConfig socks4(InetSocketAddress proxyAddress) {\n+        return new Socks4ProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"), null);\n     }\n \n     /**\n-     * Creates a {@code ProxyConfig} configuration for SOCKS5 protocol.\n+     * Creates a {@code ProxyConfig} configuration for SOCKS4 protocol.\n      * @param proxyAddress The proxy address.\n+     * @param username The user name.\n      */\n-    public static Socks5ProxyConfigBuilder socks5(InetSocketAddress proxyAddress) {\n-        return new Socks5ProxyConfigBuilder(requireNonNull(proxyAddress));\n+    public static Socks4ProxyConfig socks4(InetSocketAddress proxyAddress, @Nullable String username) {\n+        return new Socks4ProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"), username);\n     }\n \n     /**\n-     * Creates a {@code ProxyConfig} configuration for CONNECT protocol.\n+     * Creates a {@code ProxyConfig} configuration for SOCKS5 protocol.\n      * @param proxyAddress The proxy address.\n      */\n-    public static ConnectProxyConfigBuilder connect(InetSocketAddress proxyAddress) {\n-        return new ConnectProxyConfigBuilder(requireNonNull(proxyAddress));\n+    public static Socks5ProxyConfig socks5(InetSocketAddress proxyAddress) {\n+        return new Socks5ProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"), null, null);\n     }\n \n     /**\n-     * Returns a {@code ProxyConfig} which signifies that proxy is disabled.\n+     * Creates a {@code ProxyConfig} configuration for SOCKS5 protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param username The user name.\n+     * @param password The password.\n      */\n-    public static ProxyConfig noop() {\n-        return NOOP_PROXY_CONFIG;\n-    }\n-\n-    private final InetSocketAddress proxyAddress;\n-\n-    @Nullable\n-    private final String username;\n-\n-    ProxyConfig(InetSocketAddress proxyAddress, @Nullable String username) {\n-        this.proxyAddress = proxyAddress;\n-        this.username = username;\n+    public static Socks5ProxyConfig socks5(\n+            InetSocketAddress proxyAddress, @Nullable String username, @Nullable String password) {", "originalCommit": "da68a913426228965dc8d70f07e52729f6bfe2f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMzY5Ng==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390103696", "bodyText": "Ditto - username and password could be non-null.", "author": "trustin", "createdAt": "2020-03-10T05:35:46Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "diffHunk": "@@ -16,83 +16,86 @@\n \n package com.linecorp.armeria.client.proxy;\n \n-import static com.linecorp.armeria.client.proxy.NoopProxyConfig.NOOP_PROXY_CONFIG;\n+import static com.linecorp.armeria.client.proxy.DisabledProxyConfig.DISABLED_PROXY_CONFIG;\n import static java.util.Objects.requireNonNull;\n \n import java.net.InetSocketAddress;\n \n import javax.annotation.Nullable;\n \n-import com.google.common.base.MoreObjects;\n-\n import com.linecorp.armeria.client.ClientFactory;\n \n /**\n  * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n  */\n public abstract class ProxyConfig {\n \n+    ProxyConfig() {\n+    }\n+\n     /**\n      * Creates a {@code ProxyConfig} configuration for SOCKS4 protocol.\n      * @param proxyAddress The proxy address.\n      */\n-    public static Socks4ProxyConfigBuilder socks4(InetSocketAddress proxyAddress) {\n-        return new Socks4ProxyConfigBuilder(requireNonNull(proxyAddress));\n+    public static Socks4ProxyConfig socks4(InetSocketAddress proxyAddress) {\n+        return new Socks4ProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"), null);\n     }\n \n     /**\n-     * Creates a {@code ProxyConfig} configuration for SOCKS5 protocol.\n+     * Creates a {@code ProxyConfig} configuration for SOCKS4 protocol.\n      * @param proxyAddress The proxy address.\n+     * @param username The user name.\n      */\n-    public static Socks5ProxyConfigBuilder socks5(InetSocketAddress proxyAddress) {\n-        return new Socks5ProxyConfigBuilder(requireNonNull(proxyAddress));\n+    public static Socks4ProxyConfig socks4(InetSocketAddress proxyAddress, @Nullable String username) {\n+        return new Socks4ProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"), username);\n     }\n \n     /**\n-     * Creates a {@code ProxyConfig} configuration for CONNECT protocol.\n+     * Creates a {@code ProxyConfig} configuration for SOCKS5 protocol.\n      * @param proxyAddress The proxy address.\n      */\n-    public static ConnectProxyConfigBuilder connect(InetSocketAddress proxyAddress) {\n-        return new ConnectProxyConfigBuilder(requireNonNull(proxyAddress));\n+    public static Socks5ProxyConfig socks5(InetSocketAddress proxyAddress) {\n+        return new Socks5ProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"), null, null);\n     }\n \n     /**\n-     * Returns a {@code ProxyConfig} which signifies that proxy is disabled.\n+     * Creates a {@code ProxyConfig} configuration for SOCKS5 protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param username The user name.\n+     * @param password The password.\n      */\n-    public static ProxyConfig noop() {\n-        return NOOP_PROXY_CONFIG;\n-    }\n-\n-    private final InetSocketAddress proxyAddress;\n-\n-    @Nullable\n-    private final String username;\n-\n-    ProxyConfig(InetSocketAddress proxyAddress, @Nullable String username) {\n-        this.proxyAddress = proxyAddress;\n-        this.username = username;\n+    public static Socks5ProxyConfig socks5(\n+            InetSocketAddress proxyAddress, @Nullable String username, @Nullable String password) {\n+        return new Socks5ProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"), username, password);\n     }\n \n     /**\n-     * The proxy address.\n+     * Creates a {@code ProxyConfig} configuration for CONNECT protocol.\n+     * @param proxyAddress The proxy address.\n      */\n-    public InetSocketAddress proxyAddress() {\n-        return proxyAddress;\n+    public static ConnectProxyConfig connect(InetSocketAddress proxyAddress) {\n+        return new ConnectProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"), null, null, false);\n     }\n \n     /**\n-     * The configured username.\n+     * Creates a {@code ProxyConfig} configuration for CONNECT protocol.\n+     * Username and password must both be null, or both be non-null.\n+     * @param proxyAddress The proxy address.\n+     * @param username The user name.\n+     * @param password The password.\n+     * @param useTls Whether to use TLS to connect to the proxy.\n      */\n-    @Nullable\n-    public String username() {\n-        return username;\n+    public static ConnectProxyConfig connect(\n+            InetSocketAddress proxyAddress, @Nullable String username, @Nullable String password,", "originalCommit": "da68a913426228965dc8d70f07e52729f6bfe2f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d702870da5d3fa3609097f5daa97959fb6b645c2", "url": "https://github.com/line/armeria/commit/d702870da5d3fa3609097f5daa97959fb6b645c2", "message": "move validation to factory method, start javadoc with verb", "committedDate": "2020-03-10T13:53:05Z", "type": "commit"}, {"oid": "d702870da5d3fa3609097f5daa97959fb6b645c2", "url": "https://github.com/line/armeria/commit/d702870da5d3fa3609097f5daa97959fb6b645c2", "message": "move validation to factory method, start javadoc with verb", "committedDate": "2020-03-10T13:53:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMzMzIwMQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390333201", "bodyText": "netty-handler-proxy could be declared at implementation configuration? I know we need to move some other netty modules from api to implementation, but I thought this may be a good baby step.", "author": "trustin", "createdAt": "2020-03-10T14:00:18Z", "path": "core/build.gradle", "diffHunk": "@@ -106,7 +106,7 @@ dependencies {\n     optionalApi 'io.prometheus:simpleclient_common'\n \n     // Netty\n-    [ 'netty-transport', 'netty-codec-http2', 'netty-codec-haproxy', 'netty-resolver-dns' ].each {\n+    [ 'netty-transport', 'netty-codec-http2', 'netty-codec-haproxy', 'netty-resolver-dns', 'netty-handler-proxy' ].each {", "originalCommit": "d702870da5d3fa3609097f5daa97959fb6b645c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMzNDAxNQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390334015", "bodyText": "Could remove Contains and related from all ProxyConfig classes, i.e. CONNECT proxy configuration.", "author": "trustin", "createdAt": "2020-03-10T14:01:30Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ConnectProxyConfig.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Contains CONNECT proxy related configuration.", "originalCommit": "d702870da5d3fa3609097f5daa97959fb6b645c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMzNDYxNw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390334617", "bodyText": "Base configuration for proxy settings used by {@link ClientFactory}", "author": "trustin", "createdAt": "2020-03-10T14:02:21Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static com.linecorp.armeria.client.proxy.DisabledProxyConfig.DISABLED_PROXY_CONFIG;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+\n+/**\n+ * Contains base configuration for proxy related settings used in {@link ClientFactory}.", "originalCommit": "d702870da5d3fa3609097f5daa97959fb6b645c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MDMxMA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390390310", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                      .add(\"password\", password())\n          \n          \n            \n                                      .add(\"password\", \"****\")", "author": "ikhoon", "createdAt": "2020-03-10T15:14:17Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/Socks5ProxyConfig.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Contains SOCKS5 proxy related configuration.\n+ */\n+public final class Socks5ProxyConfig extends ProxyConfig {\n+\n+    private final InetSocketAddress proxyAddress;\n+\n+    @Nullable\n+    private final String username;\n+\n+    @Nullable\n+    private final String password;\n+\n+    Socks5ProxyConfig(InetSocketAddress proxyAddress, @Nullable String username,\n+                      @Nullable String password) {\n+        this.proxyAddress = proxyAddress;\n+        this.username = username;\n+        this.password = password;\n+    }\n+\n+    /**\n+     * Returns the configured proxy address.\n+     */\n+    public InetSocketAddress proxyAddress() {\n+        return proxyAddress;\n+    }\n+\n+    /**\n+     * Returns the configured username.\n+     */\n+    @Nullable\n+    public String username() {\n+        return username;\n+    }\n+\n+    /**\n+     * Returns the configured password.\n+     */\n+    @Nullable\n+    public String password() {\n+        return password;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return MoreObjects.toStringHelper(this)\n+                          .add(\"proxyAddress\", proxyAddress())\n+                          .add(\"username\", username())\n+                          .add(\"password\", password())", "originalCommit": "d702870da5d3fa3609097f5daa97959fb6b645c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQwNTEwNg==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390405106", "bodyText": "Just test code but how about?\nif (msg instanceof DefaultSocks4CommandRequest) {\n    ctx.channel().eventLoop().schedule(() -> ctx.fireChannelRead(msg), 50, TimeUnit.MILLISECONDS);\n} else {\n    ctx.fireChannelRead(msg);\n}", "author": "ikhoon", "createdAt": "2020-03-10T15:33:27Z", "path": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,523 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.linecorp.armeria.common.HttpStatus.OK;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.net.ConnectException;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ConcurrentLinkedDeque;\n+\n+import javax.annotation.Nullable;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.logging.LoggingClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.ClosedSessionException;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.testing.DynamicBehaviorHandler;\n+import com.linecorp.armeria.internal.testing.NettyServerExtension;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit.server.SelfSignedCertificateExtension;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.handler.codec.http.DefaultFullHttpResponse;\n+import io.netty.handler.codec.http.FullHttpRequest;\n+import io.netty.handler.codec.http.HttpObjectAggregator;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.netty.handler.codec.http.HttpServerCodec;\n+import io.netty.handler.codec.http.HttpVersion;\n+import io.netty.handler.codec.socksx.SocksPortUnificationServerHandler;\n+import io.netty.handler.codec.socksx.v4.DefaultSocks4CommandRequest;\n+import io.netty.handler.codec.socksx.v4.DefaultSocks4CommandResponse;\n+import io.netty.handler.codec.socksx.v4.Socks4CommandStatus;\n+import io.netty.handler.codec.socksx.v4.Socks4Message;\n+import io.netty.handler.codec.socksx.v5.DefaultSocks5CommandRequest;\n+import io.netty.handler.codec.socksx.v5.DefaultSocks5CommandResponse;\n+import io.netty.handler.codec.socksx.v5.DefaultSocks5InitialRequest;\n+import io.netty.handler.codec.socksx.v5.DefaultSocks5InitialResponse;\n+import io.netty.handler.codec.socksx.v5.Socks5AddressType;\n+import io.netty.handler.codec.socksx.v5.Socks5AuthMethod;\n+import io.netty.handler.codec.socksx.v5.Socks5CommandRequestDecoder;\n+import io.netty.handler.codec.socksx.v5.Socks5CommandStatus;\n+import io.netty.handler.codec.socksx.v5.Socks5Message;\n+import io.netty.handler.logging.LoggingHandler;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import io.netty.util.ReferenceCountUtil;\n+\n+public class ProxyClientIntegrationTest {\n+    private static final String PROXY_PATH = \"/proxy\";\n+    private static final String SUCCESS_RESPONSE = \"success\";\n+\n+    private static final DynamicBehaviorHandler SOCKS_DYNAMIC_HANDLER = new DynamicBehaviorHandler();\n+\n+    @RegisterExtension\n+    @Order(0)\n+    static final SelfSignedCertificateExtension ssc = new SelfSignedCertificateExtension();\n+\n+    @RegisterExtension\n+    @Order(1)\n+    static ServerExtension backendServer = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.port(0, SessionProtocol.HTTP);\n+            sb.service(PROXY_PATH, (ctx, req) -> HttpResponse.of(SUCCESS_RESPONSE));\n+        }\n+    };\n+\n+    @RegisterExtension\n+    @Order(2)\n+    static NettyServerExtension socksProxyServer = new NettyServerExtension() {\n+        @Override\n+        protected void configure(Channel ch) throws Exception {\n+            ch.pipeline().addLast(new LoggingHandler(getClass()));\n+            ch.pipeline().addLast(new SocksPortUnificationServerHandler());\n+            ch.pipeline().addLast(SOCKS_DYNAMIC_HANDLER);\n+            ch.pipeline().addLast(new Socks4ProxyServerHandler());\n+            ch.pipeline().addLast(new Socks5ProxyServerHandler());\n+            ch.pipeline().addLast(new IntermediaryProxyServerHandler(\"socks\"));\n+        }\n+    };\n+\n+    @RegisterExtension\n+    @Order(3)\n+    static NettyServerExtension httpProxyServer = new NettyServerExtension() {\n+        @Override\n+        protected void configure(Channel ch) throws Exception {\n+            ch.pipeline().addLast(new LoggingHandler(getClass()));\n+            ch.pipeline().addLast(new HttpServerCodec());\n+            ch.pipeline().addLast(new HttpObjectAggregator(1024));\n+            ch.pipeline().addLast(new HttpProxyServerHandler());\n+            ch.pipeline().addLast(new IntermediaryProxyServerHandler(\"http\"));\n+        }\n+    };\n+\n+    @RegisterExtension\n+    @Order(4)\n+    static NettyServerExtension httpsProxyServer = new NettyServerExtension() {\n+        @Override\n+        protected void configure(Channel ch) throws Exception {\n+            final SslContext sslContext = SslContextBuilder\n+                    .forServer(ssc.privateKey(), ssc.certificate()).build();\n+            ch.pipeline().addLast(new LoggingHandler(getClass()));\n+            ch.pipeline().addLast(sslContext.newHandler(ch.alloc()));\n+            ch.pipeline().addLast(new LoggingHandler(getClass()));\n+            ch.pipeline().addLast(new HttpServerCodec());\n+            ch.pipeline().addLast(new HttpObjectAggregator(1024));\n+            ch.pipeline().addLast(new HttpProxyServerHandler());\n+            ch.pipeline().addLast(new IntermediaryProxyServerHandler(\"http\"));\n+        }\n+    };\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        SOCKS_DYNAMIC_HANDLER.reset();\n+    }\n+\n+    @Test\n+    void testDisabledProxyBasicCase() throws Exception {\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(ProxyConfig.disabled()).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testSocks4BasicCase() throws Exception {\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks4(socksProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testSocks5BasicCase() throws Exception {\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks5(socksProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testHttpProxyBasicCase() throws Exception {\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.connect(httpProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testHttpsProxyBasicCase() throws Exception {\n+        final ClientFactory clientFactory =\n+                ClientFactory.builder().tlsNoVerify().proxyConfig(\n+                        ProxyConfig.connect(httpsProxyServer.address(), true)).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testProxyWithH2C() throws Exception {\n+        final int numRequests = 5;\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks4(socksProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H2C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+\n+        final List<CompletableFuture<AggregatedHttpResponse>> responseFutures = new ArrayList<>();\n+        for (int i = 0; i < numRequests; i++) {\n+            responseFutures.add(webClient.get(PROXY_PATH).aggregate());\n+        }\n+        await().until(() -> responseFutures.stream().allMatch(CompletableFuture::isDone));\n+        assertThat(responseFutures.stream().map(CompletableFuture::join))\n+                .allMatch(response -> response.contentUtf8().equals(SUCCESS_RESPONSE));\n+    }\n+\n+    @Test\n+    void testProxyWithUserName() throws Exception {\n+        final String username = \"username\";\n+        SOCKS_DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {\n+            if (msg instanceof DefaultSocks4CommandRequest) {\n+                assertThat(username.equals(((DefaultSocks4CommandRequest) msg).userId()));\n+            }\n+            ctx.fireChannelRead(msg);\n+        });\n+\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks4(socksProxyServer.address(), username)).build();\n+\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testProxy_protocolUpgrade_notSharableExceptionNotThrown() throws Exception {\n+        SOCKS_DYNAMIC_HANDLER.setWriteCustomizer((ctx, msg, promise) -> {\n+            ctx.write(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED), promise);\n+        });\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks4(socksProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.HTTP, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        assertThatThrownBy(responseFuture::join).isInstanceOf(CompletionException.class)\n+                                                .hasCauseInstanceOf(ClosedSessionException.class);\n+    }\n+\n+    @Test\n+    void testProxy_connectionFailure_throwsException() throws Exception {\n+        final int unusedPort;\n+        try (ServerSocket ss = new ServerSocket(0)) {\n+            unusedPort = ss.getLocalPort();\n+        }\n+\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks4(new InetSocketAddress(\"127.0.0.1\", unusedPort))).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+\n+        assertThatThrownBy(responseFuture::join).isInstanceOf(CompletionException.class)\n+                                                .hasMessageContaining(\"Connection refused\")\n+                                                .hasCauseInstanceOf(UnprocessedRequestException.class)\n+                                                .hasRootCauseInstanceOf(ConnectException.class);\n+    }\n+\n+    @Test\n+    void testProxy_connectionTimeoutFailure_throwsException() throws Exception {\n+        SOCKS_DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {\n+            if (msg instanceof DefaultSocks4CommandRequest) {\n+                Thread.sleep(50);\n+            }\n+            ctx.fireChannelRead(msg);", "originalCommit": "d702870da5d3fa3609097f5daa97959fb6b645c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzMTQ5Nw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390431497", "bodyText": "nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public interface ThrowingTriConsumer<A,B,C> {\n          \n          \n            \n                public interface ThrowingTriConsumer<A, B, C> {", "author": "ikhoon", "createdAt": "2020-03-10T16:08:32Z", "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/DynamicBehaviorHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import javax.annotation.Nullable;\n+\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+\n+@Sharable\n+public class DynamicBehaviorHandler extends ChannelDuplexHandler {\n+\n+    @Nullable\n+    private volatile ThrowingBiConsumer<ChannelHandlerContext, Object> channelReadCustomizer;\n+    @Nullable\n+    private volatile ThrowingTriConsumer<ChannelHandlerContext, Object, ChannelPromise> writeCustomizer;\n+\n+    public void reset() {\n+        channelReadCustomizer = null;\n+        writeCustomizer = null;\n+    }\n+\n+    public void setChannelReadCustomizer(\n+            ThrowingBiConsumer<ChannelHandlerContext, Object> channelReadCustomizer) {\n+        this.channelReadCustomizer = channelReadCustomizer;\n+    }\n+\n+    public void setWriteCustomizer(\n+            ThrowingTriConsumer<ChannelHandlerContext, Object, ChannelPromise> writeCustomizer) {\n+        this.writeCustomizer = writeCustomizer;\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        final ThrowingBiConsumer<ChannelHandlerContext, Object> customizerRef = channelReadCustomizer;\n+        if (customizerRef != null) {\n+            customizerRef.accept(ctx, msg);\n+        } else {\n+            super.channelRead(ctx, msg);\n+        }\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        final ThrowingTriConsumer<ChannelHandlerContext, Object, ChannelPromise>\n+                customizerRef = writeCustomizer;\n+        if (customizerRef != null) {\n+            customizerRef.accept(ctx, msg, promise);\n+        } else {\n+            super.write(ctx, msg, promise);\n+        }\n+    }\n+\n+    @FunctionalInterface\n+    public interface ThrowingTriConsumer<A,B,C> {", "originalCommit": "d702870da5d3fa3609097f5daa97959fb6b645c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzMTYxOA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390431618", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public interface ThrowingBiConsumer<A,B> {\n          \n          \n            \n                public interface ThrowingBiConsumer<A, B> {", "author": "ikhoon", "createdAt": "2020-03-10T16:08:41Z", "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/DynamicBehaviorHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import javax.annotation.Nullable;\n+\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+\n+@Sharable\n+public class DynamicBehaviorHandler extends ChannelDuplexHandler {\n+\n+    @Nullable\n+    private volatile ThrowingBiConsumer<ChannelHandlerContext, Object> channelReadCustomizer;\n+    @Nullable\n+    private volatile ThrowingTriConsumer<ChannelHandlerContext, Object, ChannelPromise> writeCustomizer;\n+\n+    public void reset() {\n+        channelReadCustomizer = null;\n+        writeCustomizer = null;\n+    }\n+\n+    public void setChannelReadCustomizer(\n+            ThrowingBiConsumer<ChannelHandlerContext, Object> channelReadCustomizer) {\n+        this.channelReadCustomizer = channelReadCustomizer;\n+    }\n+\n+    public void setWriteCustomizer(\n+            ThrowingTriConsumer<ChannelHandlerContext, Object, ChannelPromise> writeCustomizer) {\n+        this.writeCustomizer = writeCustomizer;\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        final ThrowingBiConsumer<ChannelHandlerContext, Object> customizerRef = channelReadCustomizer;\n+        if (customizerRef != null) {\n+            customizerRef.accept(ctx, msg);\n+        } else {\n+            super.channelRead(ctx, msg);\n+        }\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        final ThrowingTriConsumer<ChannelHandlerContext, Object, ChannelPromise>\n+                customizerRef = writeCustomizer;\n+        if (customizerRef != null) {\n+            customizerRef.accept(ctx, msg, promise);\n+        } else {\n+            super.write(ctx, msg, promise);\n+        }\n+    }\n+\n+    @FunctionalInterface\n+    public interface ThrowingTriConsumer<A,B,C> {\n+        void accept(A a, B b, C c) throws Exception;\n+    }\n+\n+    @FunctionalInterface\n+    public interface ThrowingBiConsumer<A,B> {", "originalCommit": "d702870da5d3fa3609097f5daa97959fb6b645c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNDA3NA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390434074", "bodyText": "Could be final?", "author": "ikhoon", "createdAt": "2020-03-10T16:12:04Z", "path": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/NettyServerExtension.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal.testing;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import com.linecorp.armeria.testing.junit.common.AbstractAllOrEachExtension;\n+\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+\n+public abstract class NettyServerExtension extends AbstractAllOrEachExtension {\n+\n+    private final EventLoopGroup bossGroup;\n+    private final EventLoopGroup workerGroup;\n+    @Nullable\n+    private Channel channel;\n+\n+    protected NettyServerExtension() {\n+        bossGroup = new NioEventLoopGroup(1);\n+        workerGroup = new NioEventLoopGroup(1);\n+    }\n+\n+    public InetSocketAddress address() {", "originalCommit": "d702870da5d3fa3609097f5daa97959fb6b645c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNjkxMw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390436913", "bodyText": "nit: writeToBackendAndFlush() seems to be better for this method name. \ud83d\ude00", "author": "ikhoon", "createdAt": "2020-03-10T16:16:06Z", "path": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,523 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.linecorp.armeria.common.HttpStatus.OK;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.net.ConnectException;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ConcurrentLinkedDeque;\n+\n+import javax.annotation.Nullable;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.logging.LoggingClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.ClosedSessionException;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.testing.DynamicBehaviorHandler;\n+import com.linecorp.armeria.internal.testing.NettyServerExtension;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit.server.SelfSignedCertificateExtension;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.handler.codec.http.DefaultFullHttpResponse;\n+import io.netty.handler.codec.http.FullHttpRequest;\n+import io.netty.handler.codec.http.HttpObjectAggregator;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.netty.handler.codec.http.HttpServerCodec;\n+import io.netty.handler.codec.http.HttpVersion;\n+import io.netty.handler.codec.socksx.SocksPortUnificationServerHandler;\n+import io.netty.handler.codec.socksx.v4.DefaultSocks4CommandRequest;\n+import io.netty.handler.codec.socksx.v4.DefaultSocks4CommandResponse;\n+import io.netty.handler.codec.socksx.v4.Socks4CommandStatus;\n+import io.netty.handler.codec.socksx.v4.Socks4Message;\n+import io.netty.handler.codec.socksx.v5.DefaultSocks5CommandRequest;\n+import io.netty.handler.codec.socksx.v5.DefaultSocks5CommandResponse;\n+import io.netty.handler.codec.socksx.v5.DefaultSocks5InitialRequest;\n+import io.netty.handler.codec.socksx.v5.DefaultSocks5InitialResponse;\n+import io.netty.handler.codec.socksx.v5.Socks5AddressType;\n+import io.netty.handler.codec.socksx.v5.Socks5AuthMethod;\n+import io.netty.handler.codec.socksx.v5.Socks5CommandRequestDecoder;\n+import io.netty.handler.codec.socksx.v5.Socks5CommandStatus;\n+import io.netty.handler.codec.socksx.v5.Socks5Message;\n+import io.netty.handler.logging.LoggingHandler;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import io.netty.util.ReferenceCountUtil;\n+\n+public class ProxyClientIntegrationTest {\n+    private static final String PROXY_PATH = \"/proxy\";\n+    private static final String SUCCESS_RESPONSE = \"success\";\n+\n+    private static final DynamicBehaviorHandler SOCKS_DYNAMIC_HANDLER = new DynamicBehaviorHandler();\n+\n+    @RegisterExtension\n+    @Order(0)\n+    static final SelfSignedCertificateExtension ssc = new SelfSignedCertificateExtension();\n+\n+    @RegisterExtension\n+    @Order(1)\n+    static ServerExtension backendServer = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.port(0, SessionProtocol.HTTP);\n+            sb.service(PROXY_PATH, (ctx, req) -> HttpResponse.of(SUCCESS_RESPONSE));\n+        }\n+    };\n+\n+    @RegisterExtension\n+    @Order(2)\n+    static NettyServerExtension socksProxyServer = new NettyServerExtension() {\n+        @Override\n+        protected void configure(Channel ch) throws Exception {\n+            ch.pipeline().addLast(new LoggingHandler(getClass()));\n+            ch.pipeline().addLast(new SocksPortUnificationServerHandler());\n+            ch.pipeline().addLast(SOCKS_DYNAMIC_HANDLER);\n+            ch.pipeline().addLast(new Socks4ProxyServerHandler());\n+            ch.pipeline().addLast(new Socks5ProxyServerHandler());\n+            ch.pipeline().addLast(new IntermediaryProxyServerHandler(\"socks\"));\n+        }\n+    };\n+\n+    @RegisterExtension\n+    @Order(3)\n+    static NettyServerExtension httpProxyServer = new NettyServerExtension() {\n+        @Override\n+        protected void configure(Channel ch) throws Exception {\n+            ch.pipeline().addLast(new LoggingHandler(getClass()));\n+            ch.pipeline().addLast(new HttpServerCodec());\n+            ch.pipeline().addLast(new HttpObjectAggregator(1024));\n+            ch.pipeline().addLast(new HttpProxyServerHandler());\n+            ch.pipeline().addLast(new IntermediaryProxyServerHandler(\"http\"));\n+        }\n+    };\n+\n+    @RegisterExtension\n+    @Order(4)\n+    static NettyServerExtension httpsProxyServer = new NettyServerExtension() {\n+        @Override\n+        protected void configure(Channel ch) throws Exception {\n+            final SslContext sslContext = SslContextBuilder\n+                    .forServer(ssc.privateKey(), ssc.certificate()).build();\n+            ch.pipeline().addLast(new LoggingHandler(getClass()));\n+            ch.pipeline().addLast(sslContext.newHandler(ch.alloc()));\n+            ch.pipeline().addLast(new LoggingHandler(getClass()));\n+            ch.pipeline().addLast(new HttpServerCodec());\n+            ch.pipeline().addLast(new HttpObjectAggregator(1024));\n+            ch.pipeline().addLast(new HttpProxyServerHandler());\n+            ch.pipeline().addLast(new IntermediaryProxyServerHandler(\"http\"));\n+        }\n+    };\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        SOCKS_DYNAMIC_HANDLER.reset();\n+    }\n+\n+    @Test\n+    void testDisabledProxyBasicCase() throws Exception {\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(ProxyConfig.disabled()).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testSocks4BasicCase() throws Exception {\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks4(socksProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testSocks5BasicCase() throws Exception {\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks5(socksProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testHttpProxyBasicCase() throws Exception {\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.connect(httpProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testHttpsProxyBasicCase() throws Exception {\n+        final ClientFactory clientFactory =\n+                ClientFactory.builder().tlsNoVerify().proxyConfig(\n+                        ProxyConfig.connect(httpsProxyServer.address(), true)).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testProxyWithH2C() throws Exception {\n+        final int numRequests = 5;\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks4(socksProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H2C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+\n+        final List<CompletableFuture<AggregatedHttpResponse>> responseFutures = new ArrayList<>();\n+        for (int i = 0; i < numRequests; i++) {\n+            responseFutures.add(webClient.get(PROXY_PATH).aggregate());\n+        }\n+        await().until(() -> responseFutures.stream().allMatch(CompletableFuture::isDone));\n+        assertThat(responseFutures.stream().map(CompletableFuture::join))\n+                .allMatch(response -> response.contentUtf8().equals(SUCCESS_RESPONSE));\n+    }\n+\n+    @Test\n+    void testProxyWithUserName() throws Exception {\n+        final String username = \"username\";\n+        SOCKS_DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {\n+            if (msg instanceof DefaultSocks4CommandRequest) {\n+                assertThat(username.equals(((DefaultSocks4CommandRequest) msg).userId()));\n+            }\n+            ctx.fireChannelRead(msg);\n+        });\n+\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks4(socksProxyServer.address(), username)).build();\n+\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testProxy_protocolUpgrade_notSharableExceptionNotThrown() throws Exception {\n+        SOCKS_DYNAMIC_HANDLER.setWriteCustomizer((ctx, msg, promise) -> {\n+            ctx.write(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED), promise);\n+        });\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks4(socksProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.HTTP, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        assertThatThrownBy(responseFuture::join).isInstanceOf(CompletionException.class)\n+                                                .hasCauseInstanceOf(ClosedSessionException.class);\n+    }\n+\n+    @Test\n+    void testProxy_connectionFailure_throwsException() throws Exception {\n+        final int unusedPort;\n+        try (ServerSocket ss = new ServerSocket(0)) {\n+            unusedPort = ss.getLocalPort();\n+        }\n+\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks4(new InetSocketAddress(\"127.0.0.1\", unusedPort))).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+\n+        assertThatThrownBy(responseFuture::join).isInstanceOf(CompletionException.class)\n+                                                .hasMessageContaining(\"Connection refused\")\n+                                                .hasCauseInstanceOf(UnprocessedRequestException.class)\n+                                                .hasRootCauseInstanceOf(ConnectException.class);\n+    }\n+\n+    @Test\n+    void testProxy_connectionTimeoutFailure_throwsException() throws Exception {\n+        SOCKS_DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {\n+            if (msg instanceof DefaultSocks4CommandRequest) {\n+                Thread.sleep(50);\n+            }\n+            ctx.fireChannelRead(msg);\n+        });\n+\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks4(socksProxyServer.address())).connectTimeoutMillis(1).build();\n+\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+\n+        assertThatThrownBy(responseFuture::join).isInstanceOf(CompletionException.class)\n+                                                .hasCauseInstanceOf(ClosedSessionException.class);\n+    }\n+\n+    @Test\n+    void testProxy_responseFailure_throwsException() throws Exception {\n+        SOCKS_DYNAMIC_HANDLER.setWriteCustomizer((ctx, msg, promise) -> {\n+            ctx.write(new DefaultSocks4CommandResponse(Socks4CommandStatus.REJECTED_OR_FAILED), promise);\n+        });\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks4(socksProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+\n+        assertThatThrownBy(responseFuture::join).isInstanceOf(CompletionException.class)\n+                                                .hasCauseInstanceOf(ClosedSessionException.class);\n+    }\n+\n+    static class ProxySuccessEvent {\n+        private final InetSocketAddress backendAddress;\n+        private final Object response;\n+\n+        ProxySuccessEvent(InetSocketAddress backendAddress, Object response) {\n+            this.backendAddress = backendAddress;\n+            this.response = response;\n+        }\n+\n+        public Object getResponse() {\n+            return response;\n+        }\n+\n+        public InetSocketAddress getBackendAddress() {\n+            return backendAddress;\n+        }\n+    }\n+\n+    private static class Socks5ProxyServerHandler extends SimpleChannelInboundHandler<Socks5Message> {\n+        @Override\n+        protected void channelRead0(ChannelHandlerContext ctx, Socks5Message msg) throws Exception {\n+            if (msg instanceof DefaultSocks5InitialRequest) {\n+                ctx.pipeline().addBefore(ctx.name(), Socks5CommandRequestDecoder.class.getName(),\n+                                         new Socks5CommandRequestDecoder());\n+                ctx.writeAndFlush(new DefaultSocks5InitialResponse(Socks5AuthMethod.NO_AUTH));\n+            } else if (msg instanceof DefaultSocks5CommandRequest) {\n+                final DefaultSocks5CommandRequest req = (DefaultSocks5CommandRequest) msg;\n+                ctx.pipeline().remove(Socks5CommandRequestDecoder.class);\n+                ctx.fireUserEventTriggered(new ProxySuccessEvent(\n+                        new InetSocketAddress(req.dstAddr(), req.dstPort()),\n+                        new DefaultSocks5CommandResponse(Socks5CommandStatus.SUCCESS,\n+                                                         Socks5AddressType.IPv4)));\n+            } else {\n+                throw new IllegalStateException(\"unexpected msg: \" + msg);\n+            }\n+        }\n+    }\n+\n+    private static class Socks4ProxyServerHandler extends SimpleChannelInboundHandler<Socks4Message> {\n+        @Override\n+        protected void channelRead0(ChannelHandlerContext ctx, Socks4Message msg) throws Exception {\n+            if (msg instanceof DefaultSocks4CommandRequest) {\n+                final DefaultSocks4CommandRequest req = (DefaultSocks4CommandRequest) msg;\n+                final DefaultSocks4CommandResponse response;\n+                response = new DefaultSocks4CommandResponse(Socks4CommandStatus.SUCCESS);\n+                ctx.fireUserEventTriggered(new ProxySuccessEvent(\n+                        new InetSocketAddress(req.dstAddr(), req.dstPort()), response));\n+            } else {\n+                throw new IllegalStateException(\"unexpected msg: \" + msg);\n+            }\n+        }\n+    }\n+\n+    private static class HttpProxyServerHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n+        @Override\n+        protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest msg) throws Exception {\n+            final String uri = msg.uri();\n+            final String[] split = uri.split(\":\");\n+            checkArgument(split.length == 2, \"invalid destination url\");\n+\n+            ctx.fireUserEventTriggered(new ProxySuccessEvent(\n+                    new InetSocketAddress(split[0], Integer.parseInt(split[1])),\n+                    new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK)));\n+        }\n+    }\n+\n+    private static final class IntermediaryProxyServerHandler extends ChannelInboundHandlerAdapter {\n+        private final ConcurrentLinkedDeque<ByteBuf> received = new ConcurrentLinkedDeque<>();\n+        @Nullable\n+        private Channel backend;\n+        private final String proxyType;\n+\n+        private IntermediaryProxyServerHandler(String proxyType) {\n+            this.proxyType = proxyType;\n+        }\n+\n+        @Override\n+        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n+            if (evt instanceof ProxySuccessEvent) {\n+                connectBackend(ctx, ((ProxySuccessEvent) evt).getBackendAddress()).addListener(f -> {\n+                    if (f.isSuccess()) {\n+                        ctx.writeAndFlush(((ProxySuccessEvent) evt).getResponse());\n+                        if (\"http\".equals(proxyType)) {\n+                            ctx.pipeline().remove(HttpObjectAggregator.class);\n+                            ctx.pipeline().remove(HttpServerCodec.class);\n+                        }\n+                    } else {\n+                        ctx.close();\n+                    }\n+                });\n+            }\n+        }\n+\n+        @Override\n+        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+            if (msg instanceof ByteBuf) {\n+                final ByteBuf backendMessage = ReferenceCountUtil.retain((ByteBuf) msg);\n+                received.add(backendMessage);\n+                flush();\n+            } else {\n+                throw new IllegalStateException(\"unexpected msg: \" + msg);\n+            }\n+        }\n+\n+        @Override\n+        public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n+            if (backend != null) {\n+                backend.close();\n+            }\n+            super.channelInactive(ctx);\n+        }\n+\n+        private ChannelFuture connectBackend(\n+                final ChannelHandlerContext ctx, InetSocketAddress backendAddress) {\n+            final ChannelHandlerContext clientCtx = ctx;\n+            final Bootstrap b = new Bootstrap();\n+            b.group(ctx.channel().eventLoop());\n+            b.channel(NioSocketChannel.class);\n+            b.handler(new ChannelInitializer<Channel>() {\n+                @Override\n+                protected void initChannel(Channel ch) throws Exception {\n+                    ch.pipeline().addLast(new LoggingHandler());\n+                    ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n+                        @Override\n+                        public void channelRead(ChannelHandlerContext ctx, Object msg)\n+                                throws Exception {\n+                            clientCtx.writeAndFlush(msg);\n+                        }\n+\n+                        @Override\n+                        public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n+                            clientCtx.close();\n+                            super.channelInactive(ctx);\n+                        }\n+                    });\n+                }\n+            });\n+            return b.connect(backendAddress).addListener((ChannelFutureListener) f -> {\n+                if (!f.isSuccess()) {\n+                    clientCtx.close();\n+                    return;\n+                }\n+                backend = f.channel();\n+                flush();\n+            });\n+        }\n+\n+        private void flush() {", "originalCommit": "d702870da5d3fa3609097f5daa97959fb6b645c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0NDEwMQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390444101", "bodyText": "nit: Indent for readability\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n          \n          \n            \n                            ProxyConfig.socks4(socksProxyServer.address(), username)).build();\n          \n          \n            \n                    final ClientFactory clientFactory =\n          \n          \n            \n                            ClientFactory.builder()\n          \n          \n            \n                                         .proxyConfig(ProxyConfig.socks4(socksProxyServer.address(), username))\n          \n          \n            \n                                         .build();", "author": "ikhoon", "createdAt": "2020-03-10T16:26:06Z", "path": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,523 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.linecorp.armeria.common.HttpStatus.OK;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.net.ConnectException;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ConcurrentLinkedDeque;\n+\n+import javax.annotation.Nullable;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+import com.linecorp.armeria.client.UnprocessedRequestException;\n+import com.linecorp.armeria.client.WebClient;\n+import com.linecorp.armeria.client.logging.LoggingClient;\n+import com.linecorp.armeria.common.AggregatedHttpResponse;\n+import com.linecorp.armeria.common.ClosedSessionException;\n+import com.linecorp.armeria.common.HttpResponse;\n+import com.linecorp.armeria.common.SessionProtocol;\n+import com.linecorp.armeria.internal.testing.DynamicBehaviorHandler;\n+import com.linecorp.armeria.internal.testing.NettyServerExtension;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit.server.SelfSignedCertificateExtension;\n+import com.linecorp.armeria.testing.junit.server.ServerExtension;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.handler.codec.http.DefaultFullHttpResponse;\n+import io.netty.handler.codec.http.FullHttpRequest;\n+import io.netty.handler.codec.http.HttpObjectAggregator;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.netty.handler.codec.http.HttpServerCodec;\n+import io.netty.handler.codec.http.HttpVersion;\n+import io.netty.handler.codec.socksx.SocksPortUnificationServerHandler;\n+import io.netty.handler.codec.socksx.v4.DefaultSocks4CommandRequest;\n+import io.netty.handler.codec.socksx.v4.DefaultSocks4CommandResponse;\n+import io.netty.handler.codec.socksx.v4.Socks4CommandStatus;\n+import io.netty.handler.codec.socksx.v4.Socks4Message;\n+import io.netty.handler.codec.socksx.v5.DefaultSocks5CommandRequest;\n+import io.netty.handler.codec.socksx.v5.DefaultSocks5CommandResponse;\n+import io.netty.handler.codec.socksx.v5.DefaultSocks5InitialRequest;\n+import io.netty.handler.codec.socksx.v5.DefaultSocks5InitialResponse;\n+import io.netty.handler.codec.socksx.v5.Socks5AddressType;\n+import io.netty.handler.codec.socksx.v5.Socks5AuthMethod;\n+import io.netty.handler.codec.socksx.v5.Socks5CommandRequestDecoder;\n+import io.netty.handler.codec.socksx.v5.Socks5CommandStatus;\n+import io.netty.handler.codec.socksx.v5.Socks5Message;\n+import io.netty.handler.logging.LoggingHandler;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import io.netty.util.ReferenceCountUtil;\n+\n+public class ProxyClientIntegrationTest {\n+    private static final String PROXY_PATH = \"/proxy\";\n+    private static final String SUCCESS_RESPONSE = \"success\";\n+\n+    private static final DynamicBehaviorHandler SOCKS_DYNAMIC_HANDLER = new DynamicBehaviorHandler();\n+\n+    @RegisterExtension\n+    @Order(0)\n+    static final SelfSignedCertificateExtension ssc = new SelfSignedCertificateExtension();\n+\n+    @RegisterExtension\n+    @Order(1)\n+    static ServerExtension backendServer = new ServerExtension() {\n+        @Override\n+        protected void configure(ServerBuilder sb) throws Exception {\n+            sb.port(0, SessionProtocol.HTTP);\n+            sb.service(PROXY_PATH, (ctx, req) -> HttpResponse.of(SUCCESS_RESPONSE));\n+        }\n+    };\n+\n+    @RegisterExtension\n+    @Order(2)\n+    static NettyServerExtension socksProxyServer = new NettyServerExtension() {\n+        @Override\n+        protected void configure(Channel ch) throws Exception {\n+            ch.pipeline().addLast(new LoggingHandler(getClass()));\n+            ch.pipeline().addLast(new SocksPortUnificationServerHandler());\n+            ch.pipeline().addLast(SOCKS_DYNAMIC_HANDLER);\n+            ch.pipeline().addLast(new Socks4ProxyServerHandler());\n+            ch.pipeline().addLast(new Socks5ProxyServerHandler());\n+            ch.pipeline().addLast(new IntermediaryProxyServerHandler(\"socks\"));\n+        }\n+    };\n+\n+    @RegisterExtension\n+    @Order(3)\n+    static NettyServerExtension httpProxyServer = new NettyServerExtension() {\n+        @Override\n+        protected void configure(Channel ch) throws Exception {\n+            ch.pipeline().addLast(new LoggingHandler(getClass()));\n+            ch.pipeline().addLast(new HttpServerCodec());\n+            ch.pipeline().addLast(new HttpObjectAggregator(1024));\n+            ch.pipeline().addLast(new HttpProxyServerHandler());\n+            ch.pipeline().addLast(new IntermediaryProxyServerHandler(\"http\"));\n+        }\n+    };\n+\n+    @RegisterExtension\n+    @Order(4)\n+    static NettyServerExtension httpsProxyServer = new NettyServerExtension() {\n+        @Override\n+        protected void configure(Channel ch) throws Exception {\n+            final SslContext sslContext = SslContextBuilder\n+                    .forServer(ssc.privateKey(), ssc.certificate()).build();\n+            ch.pipeline().addLast(new LoggingHandler(getClass()));\n+            ch.pipeline().addLast(sslContext.newHandler(ch.alloc()));\n+            ch.pipeline().addLast(new LoggingHandler(getClass()));\n+            ch.pipeline().addLast(new HttpServerCodec());\n+            ch.pipeline().addLast(new HttpObjectAggregator(1024));\n+            ch.pipeline().addLast(new HttpProxyServerHandler());\n+            ch.pipeline().addLast(new IntermediaryProxyServerHandler(\"http\"));\n+        }\n+    };\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        SOCKS_DYNAMIC_HANDLER.reset();\n+    }\n+\n+    @Test\n+    void testDisabledProxyBasicCase() throws Exception {\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(ProxyConfig.disabled()).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testSocks4BasicCase() throws Exception {\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks4(socksProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testSocks5BasicCase() throws Exception {\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks5(socksProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testHttpProxyBasicCase() throws Exception {\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.connect(httpProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testHttpsProxyBasicCase() throws Exception {\n+        final ClientFactory clientFactory =\n+                ClientFactory.builder().tlsNoVerify().proxyConfig(\n+                        ProxyConfig.connect(httpsProxyServer.address(), true)).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H1C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+        final CompletableFuture<AggregatedHttpResponse> responseFuture =\n+                webClient.get(PROXY_PATH).aggregate();\n+        final AggregatedHttpResponse response = responseFuture.join();\n+        assertThat(response.status()).isEqualByComparingTo(OK);\n+        assertThat(response.contentUtf8()).isEqualTo(SUCCESS_RESPONSE);\n+    }\n+\n+    @Test\n+    void testProxyWithH2C() throws Exception {\n+        final int numRequests = 5;\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks4(socksProxyServer.address())).build();\n+        final WebClient webClient = WebClient.builder(SessionProtocol.H2C, backendServer.httpEndpoint())\n+                                             .factory(clientFactory)\n+                                             .decorator(LoggingClient.newDecorator())\n+                                             .build();\n+\n+        final List<CompletableFuture<AggregatedHttpResponse>> responseFutures = new ArrayList<>();\n+        for (int i = 0; i < numRequests; i++) {\n+            responseFutures.add(webClient.get(PROXY_PATH).aggregate());\n+        }\n+        await().until(() -> responseFutures.stream().allMatch(CompletableFuture::isDone));\n+        assertThat(responseFutures.stream().map(CompletableFuture::join))\n+                .allMatch(response -> response.contentUtf8().equals(SUCCESS_RESPONSE));\n+    }\n+\n+    @Test\n+    void testProxyWithUserName() throws Exception {\n+        final String username = \"username\";\n+        SOCKS_DYNAMIC_HANDLER.setChannelReadCustomizer((ctx, msg) -> {\n+            if (msg instanceof DefaultSocks4CommandRequest) {\n+                assertThat(username.equals(((DefaultSocks4CommandRequest) msg).userId()));\n+            }\n+            ctx.fireChannelRead(msg);\n+        });\n+\n+        final ClientFactory clientFactory = ClientFactory.builder().proxyConfig(\n+                ProxyConfig.socks4(socksProxyServer.address(), username)).build();", "originalCommit": "d702870da5d3fa3609097f5daa97959fb6b645c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwMTM4Ng==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390301386", "bodyText": "Could just add isDisabled method to ProxyConfig and returns true in DisabledProxyConfig.", "author": "minwoox", "createdAt": "2020-03-10T13:12:15Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -118,6 +128,41 @@ protected void initChannel(Channel ch) throws Exception {\n                                                       .get(ChannelOption.CONNECT_TIMEOUT_MILLIS);\n     }\n \n+    private void configureProxy(Channel ch, ProxyConfig proxyConfig, SslContext sslCtx) {\n+        if (proxyConfig instanceof DisabledProxyConfig) {", "originalCommit": "da68a913426228965dc8d70f07e52729f6bfe2f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyMzE0OA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390723148", "bodyText": "Or an enum, like ProxyType? E.g. ProxyType.SOCKS5", "author": "trustin", "createdAt": "2020-03-11T03:07:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwMTM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNTUxNg==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390725516", "bodyText": "Ah that's better. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-03-11T03:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwMTM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA0MDIxNA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r391040214", "bodyText": "So the reason I removed enum ProxyType previously was basically because I didn't like how when the end-user types Proxy..., intellij autocomplete would show ProxyType, but it doesn't really serve any purpose to the end-user.\nFor us, I definitely agree the switch case statement looks a lot cleaner \ud83d\ude04, so i guess this is a trade-off.\nWe can 1) keep as-is 2) revert back (I intentionally created a separate commit) 3)  move all proxy related classes to com.linecorp.armeria.client and keep ProxyType package private.\nLet me know what you guys think \ud83d\ude47", "author": "jrhee17", "createdAt": "2020-03-11T15:07:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwMTM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA1MzkwNQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r391053905", "bodyText": "SGTM :-)", "author": "trustin", "createdAt": "2020-03-11T15:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwMTM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM2MTI4OA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r391361288", "bodyText": "For me, I like the current code because I think it's much readable. \ud83d\ude09\nAlso, I don't think we don't have to move the package because:\n\nIt doesn't harm to show one more class which starts with Proxy... because the IntelliJ shows them(there are so many classes already but we can know which one is from Armeria) with the package and I think the name, which is ProxyType, is clear to understand.", "author": "minwoox", "createdAt": "2020-03-12T01:47:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwMTM4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxMjUwMg==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390712502", "bodyText": "Let's remove public here then.", "author": "minwoox", "createdAt": "2020-03-11T02:21:54Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/DisabledProxyConfig.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Represents client-side proxy is disabled.\n+ */\n+public final class DisabledProxyConfig extends ProxyConfig {", "originalCommit": "d702870da5d3fa3609097f5daa97959fb6b645c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxMjY5Nw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390712697", "bodyText": "Let's add an empty line before the parameter description.", "author": "minwoox", "createdAt": "2020-03-11T02:22:45Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static com.linecorp.armeria.client.proxy.DisabledProxyConfig.DISABLED_PROXY_CONFIG;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+\n+/**\n+ * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n+ */\n+public abstract class ProxyConfig {\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for SOCKS4 protocol.\n+     * @param proxyAddress The proxy address.", "originalCommit": "d702870da5d3fa3609097f5daa97959fb6b645c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxMzAyNw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390713027", "bodyText": "This class doesn't have any implementation. How about making this as an interface?", "author": "minwoox", "createdAt": "2020-03-11T02:24:04Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static com.linecorp.armeria.client.proxy.DisabledProxyConfig.DISABLED_PROXY_CONFIG;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+\n+/**\n+ * Contains base configuration for proxy related settings used in {@link ClientFactory}.\n+ */\n+public abstract class ProxyConfig {\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for SOCKS4 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks4ProxyConfig socks4(InetSocketAddress proxyAddress) {\n+        return new Socks4ProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"), null);\n+    }\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for SOCKS4 protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param username The username.\n+     */\n+    public static Socks4ProxyConfig socks4(InetSocketAddress proxyAddress, String username) {\n+        return new Socks4ProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"),\n+                                     requireNonNull(username, \"username\"));\n+    }\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for SOCKS5 protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks5ProxyConfig socks5(InetSocketAddress proxyAddress) {\n+        return new Socks5ProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"), null, null);\n+    }\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for SOCKS5 protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param username The username.\n+     * @param password The password.\n+     */\n+    public static Socks5ProxyConfig socks5(\n+            InetSocketAddress proxyAddress, String username, String password) {\n+        return new Socks5ProxyConfig(\n+                requireNonNull(proxyAddress, \"proxyAddress\"), requireNonNull(username, \"username\"),\n+                requireNonNull(password, \"password\"));\n+    }\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for CONNECT protocol.\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static ConnectProxyConfig connect(InetSocketAddress proxyAddress) {\n+        return new ConnectProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"), null, null, false);\n+    }\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for CONNECT protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param useTls Whether to use TLS to connect to the proxy.\n+     */\n+    public static ConnectProxyConfig connect(\n+            InetSocketAddress proxyAddress, boolean useTls) {\n+        return new ConnectProxyConfig(\n+                requireNonNull(proxyAddress, \"proxyAddress\"), null, null, useTls);\n+    }\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for CONNECT protocol.\n+     * @param proxyAddress The proxy address.\n+     * @param username The username.\n+     * @param password The password.\n+     * @param useTls Whether to use TLS to connect to the proxy.\n+     */\n+    public static ConnectProxyConfig connect(\n+            InetSocketAddress proxyAddress, String username, String password, boolean useTls) {\n+        return new ConnectProxyConfig(\n+                requireNonNull(proxyAddress, \"proxyAddress\"), requireNonNull(username, \"username\"),\n+                requireNonNull(password, \"password\"), useTls);\n+    }\n+\n+    /**\n+     * Returns a {@code ProxyConfig} which signifies that proxy is disabled.\n+     */\n+    public static ProxyConfig disabled() {\n+        return DISABLED_PROXY_CONFIG;\n+    }\n+\n+    ProxyConfig() {", "originalCommit": "d702870da5d3fa3609097f5daa97959fb6b645c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwNjkzMQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390806931", "bodyText": "It's because we don't want a user to extend it.", "author": "trustin", "createdAt": "2020-03-11T08:24:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxMzAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwNzc5Ng==", "url": "https://github.com/line/armeria/pull/2496#discussion_r390807796", "bodyText": "Ah, thanks!", "author": "minwoox", "createdAt": "2020-03-11T08:26:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxMzAyNw=="}], "type": "inlineReview"}, {"oid": "f34fee642f55e1e6948ad91fa83e2213067983d2", "url": "https://github.com/line/armeria/commit/f34fee642f55e1e6948ad91fa83e2213067983d2", "message": "improve javadocs, better styling for test, mask password", "committedDate": "2020-03-11T14:50:04Z", "type": "commit"}, {"oid": "89f8dfd6faa469d4016804a2414bb21ff2ab759b", "url": "https://github.com/line/armeria/commit/89f8dfd6faa469d4016804a2414bb21ff2ab759b", "message": "try re-introducing proxyType", "committedDate": "2020-03-11T14:50:31Z", "type": "commit"}, {"oid": "89f8dfd6faa469d4016804a2414bb21ff2ab759b", "url": "https://github.com/line/armeria/commit/89f8dfd6faa469d4016804a2414bb21ff2ab759b", "message": "try re-introducing proxyType", "committedDate": "2020-03-11T14:50:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM2MTcxMA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r391361710", "bodyText": "nit but global comment:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param proxyAddress The proxy address.\n          \n          \n            \n                 * @param proxyAddress the proxy address", "author": "minwoox", "createdAt": "2020-03-12T01:50:05Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static com.linecorp.armeria.client.proxy.DisabledProxyConfig.DISABLED_PROXY_CONFIG;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+\n+/**\n+ * Base configuration for proxy settings used by {@link ClientFactory}.\n+ */\n+public abstract class ProxyConfig {\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for SOCKS4 protocol.\n+     *\n+     * @param proxyAddress The proxy address.", "originalCommit": "89f8dfd6faa469d4016804a2414bb21ff2ab759b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1MjI5NQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r391552295", "bodyText": "I finally caught the difference! \ud83e\udd23\n\n\nBut I was wrong... \ud83d\udd75\ufe0f\u200d\u2642\ufe0f", "author": "ikhoon", "createdAt": "2020-03-12T11:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM2MTcxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1NTk3NA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r391555974", "bodyText": "Oops, What I meant is, The should start with a lowercase. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-03-12T11:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM2MTcxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1MTc0Nw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r391651747", "bodyText": "I finally caught the difference!\n\n\ud83e\udd85\ud83d\udc41.    \ud83d\ude06\ud83d\ude06\ud83d\ude06", "author": "jrhee17", "createdAt": "2020-03-12T14:17:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM2MTcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM2MzczMA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r391363730", "bodyText": "How about always returning **** regardless of whether the value is null or not? Since it can hide that the password is null.", "author": "ikhoon", "createdAt": "2020-03-12T01:59:11Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.client.proxy;\n+\n+import static com.linecorp.armeria.client.proxy.DisabledProxyConfig.DISABLED_PROXY_CONFIG;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.net.InetSocketAddress;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.client.ClientFactory;\n+\n+/**\n+ * Base configuration for proxy settings used by {@link ClientFactory}.\n+ */\n+public abstract class ProxyConfig {\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for SOCKS4 protocol.\n+     *\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks4ProxyConfig socks4(InetSocketAddress proxyAddress) {\n+        return new Socks4ProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"), null);\n+    }\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for SOCKS4 protocol.\n+     *\n+     * @param proxyAddress The proxy address.\n+     * @param username The username.\n+     */\n+    public static Socks4ProxyConfig socks4(InetSocketAddress proxyAddress, String username) {\n+        return new Socks4ProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"),\n+                                     requireNonNull(username, \"username\"));\n+    }\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for SOCKS5 protocol.\n+     *\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static Socks5ProxyConfig socks5(InetSocketAddress proxyAddress) {\n+        return new Socks5ProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"), null, null);\n+    }\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for SOCKS5 protocol.\n+     *\n+     * @param proxyAddress The proxy address.\n+     * @param username The username.\n+     * @param password The password.\n+     */\n+    public static Socks5ProxyConfig socks5(\n+            InetSocketAddress proxyAddress, String username, String password) {\n+        return new Socks5ProxyConfig(\n+                requireNonNull(proxyAddress, \"proxyAddress\"), requireNonNull(username, \"username\"),\n+                requireNonNull(password, \"password\"));\n+    }\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for CONNECT protocol.\n+     *\n+     * @param proxyAddress The proxy address.\n+     */\n+    public static ConnectProxyConfig connect(InetSocketAddress proxyAddress) {\n+        return new ConnectProxyConfig(requireNonNull(proxyAddress, \"proxyAddress\"), null, null, false);\n+    }\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for CONNECT protocol.\n+     *\n+     * @param proxyAddress The proxy address.\n+     * @param useTls Whether to use TLS to connect to the proxy.\n+     */\n+    public static ConnectProxyConfig connect(\n+            InetSocketAddress proxyAddress, boolean useTls) {\n+        return new ConnectProxyConfig(\n+                requireNonNull(proxyAddress, \"proxyAddress\"), null, null, useTls);\n+    }\n+\n+    /**\n+     * Creates a {@code ProxyConfig} configuration for CONNECT protocol.\n+     *\n+     * @param proxyAddress The proxy address.\n+     * @param username The username.\n+     * @param password The password.\n+     * @param useTls Whether to use TLS to connect to the proxy.\n+     */\n+    public static ConnectProxyConfig connect(\n+            InetSocketAddress proxyAddress, String username, String password, boolean useTls) {\n+        return new ConnectProxyConfig(\n+                requireNonNull(proxyAddress, \"proxyAddress\"), requireNonNull(username, \"username\"),\n+                requireNonNull(password, \"password\"), useTls);\n+    }\n+\n+    /**\n+     * Returns a {@code ProxyConfig} which signifies that proxy is disabled.\n+     */\n+    public static ProxyConfig disabled() {\n+        return DISABLED_PROXY_CONFIG;\n+    }\n+\n+    @Nullable\n+    static String maskedStr(@Nullable String value) {\n+        return value == null ? null : \"****\";", "originalCommit": "89f8dfd6faa469d4016804a2414bb21ff2ab759b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MDY0Mw==", "url": "https://github.com/line/armeria/pull/2496#discussion_r391990643", "bodyText": "See #2496 (comment)", "author": "trustin", "createdAt": "2020-03-13T01:53:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM2MzczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU1MTk3Mg==", "url": "https://github.com/line/armeria/pull/2496#discussion_r391551972", "bodyText": "How about renaming to ProxyConfig.direct() and DirectProxyConfig, given that JDK uses DIRECT?", "author": "trustin", "createdAt": "2020-03-12T11:15:03Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryOption.java", "diffHunk": "@@ -214,6 +215,12 @@\n     public static final ClientFactoryOption<MeterRegistry> METER_REGISTRY =\n             define(\"METER_REGISTRY\", Metrics.globalRegistry);\n \n+    /**\n+     * The {@link ProxyConfig} which contains proxy related configuration.\n+     */\n+    public static final ClientFactoryOption<ProxyConfig> PROXY_CONFIG =\n+            define(\"PROXY_CONFIG\", ProxyConfig.disabled());", "originalCommit": "89f8dfd6faa469d4016804a2414bb21ff2ab759b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "46fda6ab55c268d2fb24c1ea37bd5e707ddcf5cb", "url": "https://github.com/line/armeria/commit/46fda6ab55c268d2fb24c1ea37bd5e707ddcf5cb", "message": "rename disabled to direct, mask pw unconditionally, javadoc param style", "committedDate": "2020-03-12T14:07:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MDIxMg==", "url": "https://github.com/line/armeria/pull/2496#discussion_r391990212", "bodyText": "How about reviving this and using omitNullValues() for ToStringHelper? Showing **** for a non-existent password may give a user a misconception that authentication is enabled.", "author": "trustin", "createdAt": "2020-03-13T01:51:02Z", "path": "core/src/main/java/com/linecorp/armeria/client/proxy/ProxyConfig.java", "diffHunk": "@@ -110,15 +108,10 @@ public static ConnectProxyConfig connect(\n     }\n \n     /**\n-     * Returns a {@code ProxyConfig} which signifies that proxy is disabled.\n+     * Returns a {@code ProxyConfig} which signifies that a proxy is absent.\n      */\n-    public static ProxyConfig disabled() {\n-        return DISABLED_PROXY_CONFIG;\n-    }\n-\n-    @Nullable\n-    static String maskedStr(@Nullable String value) {\n-        return value == null ? null : \"****\";", "originalCommit": "46fda6ab55c268d2fb24c1ea37bd5e707ddcf5cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MTIwMA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r391991200", "bodyText": "We could still return **** when username is not null, although it's not very likely in our current code base.", "author": "trustin", "createdAt": "2020-03-13T01:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MDIxMg=="}], "type": "inlineReview"}, {"oid": "e10a1d8d74afc3280ad707c9968270f0abadfe90", "url": "https://github.com/line/armeria/commit/e10a1d8d74afc3280ad707c9968270f0abadfe90", "message": "mask password if username, password is null", "committedDate": "2020-03-14T00:31:33Z", "type": "commit"}, {"oid": "f1025d187aa7aca902ae09eab628bc5f0e96eb73", "url": "https://github.com/line/armeria/commit/f1025d187aa7aca902ae09eab628bc5f0e96eb73", "message": "Update ProxyConfig.java", "committedDate": "2020-03-14T08:10:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzOTk1NA==", "url": "https://github.com/line/armeria/pull/2496#discussion_r392539954", "bodyText": "nit: proxyConfig.proxyType() ?", "author": "ikhoon", "createdAt": "2020-03-14T00:45:11Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java", "diffHunk": "@@ -118,6 +127,43 @@ protected void initChannel(Channel ch) throws Exception {\n                                                       .get(ChannelOption.CONNECT_TIMEOUT_MILLIS);\n     }\n \n+    private void configureProxy(Channel ch, ProxyConfig proxyConfig, SslContext sslCtx) {\n+        final ProxyHandler proxyHandler;\n+        switch (proxyConfig.proxyType()) {\n+            case DIRECT:\n+                return;\n+            case SOCKS4:\n+                final Socks4ProxyConfig socks4ProxyConfig = (Socks4ProxyConfig) proxyConfig;\n+                proxyHandler = new Socks4ProxyHandler(socks4ProxyConfig.proxyAddress(),\n+                                                      socks4ProxyConfig.username());\n+                break;\n+            case SOCKS5:\n+                final Socks5ProxyConfig socks5ProxyConfig = (Socks5ProxyConfig) proxyConfig;\n+                proxyHandler = new Socks5ProxyHandler(\n+                        socks5ProxyConfig.proxyAddress(), socks5ProxyConfig.username(),\n+                        socks5ProxyConfig.password());\n+                break;\n+            case CONNECT:\n+                final ConnectProxyConfig connectProxyConfig = (ConnectProxyConfig) proxyConfig;\n+                final String username = connectProxyConfig.username();\n+                final String password = connectProxyConfig.password();\n+                if (username == null || password == null) {\n+                    proxyHandler = new HttpProxyHandler(connectProxyConfig.proxyAddress());\n+                } else {\n+                    proxyHandler = new HttpProxyHandler(connectProxyConfig.proxyAddress(), username, password);\n+                }\n+                if (connectProxyConfig.useTls()) {\n+                    ch.pipeline().addLast(sslCtx.newHandler(ch.alloc()));\n+                }\n+                break;\n+            default:\n+                logger.warn(\"{} Ignoring unknown proxy type: {}\", ch, proxyConfig.getClass().getSimpleName());", "originalCommit": "e10a1d8d74afc3280ad707c9968270f0abadfe90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc2NjE3MQ==", "url": "https://github.com/line/armeria/pull/2496#discussion_r392766171", "bodyText": "\ud83d\ude05", "author": "jrhee17", "createdAt": "2020-03-16T03:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzOTk1NA=="}], "type": "inlineReview"}, {"oid": "fdd559818a25950afceb6cf69131f55d10b65315", "url": "https://github.com/line/armeria/commit/fdd559818a25950afceb6cf69131f55d10b65315", "message": "log proxyType on unknown proxy type", "committedDate": "2020-03-16T03:22:18Z", "type": "commit"}]}