{"pr_number": 2566, "pr_title": "Added `armeria-bucket4j` to throttle based on token buckets", "pr_createdAt": "2020-03-09T17:00:08Z", "pr_url": "https://github.com/line/armeria/pull/2566", "timeline": [{"oid": "233bb09360eadb96a996365f28da58ea5b98333f", "url": "https://github.com/line/armeria/commit/233bb09360eadb96a996365f28da58ea5b98333f", "message": "Added advanced throttling mechanism based on Token-Bucket algorithm (#2394):\n- Implemented advanced throttling TokenBucketThrottlingStrategy based on Token-Bucket rate-limiting algorithm and Bucket4j library.\n- Added new \"bucket4j\" module to Armeria.\n- Provided solution for issue #2394 in an alternative way as per earlier review feedback by @trustin: \"Provide a separate module armeria-bucket4j which provides an alternative ThrottlingStrategy implementation that exposes bucket4j classes in the public API.\"", "committedDate": "2020-03-09T16:57:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2OTA1OQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390069059", "bodyText": "You could use HttpHeaderNames.of() instead.", "author": "trustin", "createdAt": "2020-03-10T02:56:50Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/common/throttling/ThrottlingHeadersImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.throttling;\n+\n+import com.google.common.base.Ascii;\n+\n+import io.netty.util.AsciiString;\n+\n+final class ThrottlingHeadersImpl implements ThrottlingHeaders {\n+\n+    private static final String LIMIT_SUFFIX = \"-Limit\";\n+    private static final String REMAINING_SUFFIX = \"-Remaining\";\n+    private static final String RESET_SUFFIX = \"-Reset\";\n+\n+    private final AsciiString limitHeader;\n+    private final AsciiString remainingHeader;\n+    private final AsciiString resetHeader;\n+\n+    ThrottlingHeadersImpl(final String scheme) {\n+        limitHeader = createHeaderName(scheme + LIMIT_SUFFIX);\n+        remainingHeader = createHeaderName(scheme + REMAINING_SUFFIX);\n+        resetHeader = createHeaderName(scheme + RESET_SUFFIX);\n+    }\n+\n+    private static AsciiString createHeaderName(String name) {\n+        return AsciiString.cached(Ascii.toLowerCase(name));", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNzY2NA==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390237664", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T11:01:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2OTA1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2OTI2Mg==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390069262", "bodyText": "You could remove the Javadoc comments of the overridden methods in this class, because they are identical with those in the interface.", "author": "trustin", "createdAt": "2020-03-10T02:57:50Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/common/throttling/ThrottlingHeadersImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.throttling;\n+\n+import com.google.common.base.Ascii;\n+\n+import io.netty.util.AsciiString;\n+\n+final class ThrottlingHeadersImpl implements ThrottlingHeaders {\n+\n+    private static final String LIMIT_SUFFIX = \"-Limit\";\n+    private static final String REMAINING_SUFFIX = \"-Remaining\";\n+    private static final String RESET_SUFFIX = \"-Reset\";\n+\n+    private final AsciiString limitHeader;\n+    private final AsciiString remainingHeader;\n+    private final AsciiString resetHeader;\n+\n+    ThrottlingHeadersImpl(final String scheme) {\n+        limitHeader = createHeaderName(scheme + LIMIT_SUFFIX);\n+        remainingHeader = createHeaderName(scheme + REMAINING_SUFFIX);\n+        resetHeader = createHeaderName(scheme + RESET_SUFFIX);\n+    }\n+\n+    private static AsciiString createHeaderName(String name) {\n+        return AsciiString.cached(Ascii.toLowerCase(name));\n+    }\n+\n+    /**\n+     * Returns the name of the \"limit\" throttling header for the given scheme, like \"X-RateLimit-Limit\".\n+     * This header specifies the requests quota for the given time window.\n+     */", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNzc0MQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390237741", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T11:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2OTI2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2OTQwNA==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390069404", "bodyText": "Maybe useful to have toString()?", "author": "trustin", "createdAt": "2020-03-10T02:58:27Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/common/throttling/ThrottlingHeadersImpl.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.common.throttling;\n+\n+import com.google.common.base.Ascii;\n+\n+import io.netty.util.AsciiString;\n+\n+final class ThrottlingHeadersImpl implements ThrottlingHeaders {\n+\n+    private static final String LIMIT_SUFFIX = \"-Limit\";\n+    private static final String REMAINING_SUFFIX = \"-Remaining\";\n+    private static final String RESET_SUFFIX = \"-Reset\";\n+\n+    private final AsciiString limitHeader;\n+    private final AsciiString remainingHeader;\n+    private final AsciiString resetHeader;\n+\n+    ThrottlingHeadersImpl(final String scheme) {\n+        limitHeader = createHeaderName(scheme + LIMIT_SUFFIX);\n+        remainingHeader = createHeaderName(scheme + REMAINING_SUFFIX);\n+        resetHeader = createHeaderName(scheme + RESET_SUFFIX);\n+    }\n+\n+    private static AsciiString createHeaderName(String name) {\n+        return AsciiString.cached(Ascii.toLowerCase(name));\n+    }\n+\n+    /**\n+     * Returns the name of the \"limit\" throttling header for the given scheme, like \"X-RateLimit-Limit\".\n+     * This header specifies the requests quota for the given time window.\n+     */\n+    @Override\n+    public AsciiString limitHeader() {\n+        return limitHeader;\n+    }\n+\n+    /**\n+     * Returns the name of the \"remaining\" throttling header for the given scheme, like \"X-RateLimit-Remaining\".\n+     * This header specifies the remaining requests quota for the current time window.\n+     */\n+    @Override\n+    public AsciiString remainingHeader() {\n+        return remainingHeader;\n+    }\n+\n+    /**\n+     * Returns the name of the \"reset\" throttling header for the given scheme, like \"X-RateLimit-Reset\".\n+     * This header specifies the time remaining in the current window. Its value defined in seconds or\n+     * as a timestamp.\n+     */\n+    @Override\n+    public AsciiString resetHeader() {\n+        return resetHeader;\n+    }\n+}", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzODAzNw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390238037", "bodyText": "Did not understand your suggestion. Could you clarify?", "author": "max904-github", "createdAt": "2020-03-10T11:02:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2OTQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyMjgyMw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390322823", "bodyText": "I was suggesting to add ThrottlingHeadersImpl.toString() which may be useful when debugging or logging.", "author": "trustin", "createdAt": "2020-03-10T13:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2OTQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM0MjQ2Mw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390342463", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T14:13:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2OTQwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MDA0OQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390070049", "bodyText": "nit: needs one more space after initialSize", "author": "trustin", "createdAt": "2020-03-10T02:59:48Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public class BandwidthLimit {\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {\n+            throw new IllegalArgumentException(\"Overdraft limit has to exceed bandwidth limit \" + limit +\n+                                               \". Found: \" + overdraftLimit);\n+        }\n+        this.overdraftLimit = overdraftLimit;\n+\n+        // validate initialSize\n+        this.initialSize = initialSize;\n+\n+        requireNonNull(period, \"period\");\n+        if (period.isNegative() || period.isZero()) {\n+            throw new IllegalArgumentException(\"Bandwidth period must be positive. Found: \" + period);\n+        }\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit          the bucket size - defines the count of tokens which can be held by bucket\n+     *                       and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by\n+     *                       bucket, this must exceed the {@code limit}\n+     * @param initialSize   the initial number of tokens for this bandwidth", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzODExNg==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390238116", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T11:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MDA0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MDE1Mw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390070153", "bodyText": "Creates new -> Returns a newly created", "author": "trustin", "createdAt": "2020-03-10T03:00:17Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public class BandwidthLimit {\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {\n+            throw new IllegalArgumentException(\"Overdraft limit has to exceed bandwidth limit \" + limit +\n+                                               \". Found: \" + overdraftLimit);\n+        }\n+        this.overdraftLimit = overdraftLimit;\n+\n+        // validate initialSize\n+        this.initialSize = initialSize;\n+\n+        requireNonNull(period, \"period\");\n+        if (period.isNegative() || period.isZero()) {\n+            throw new IllegalArgumentException(\"Bandwidth period must be positive. Found: \" + period);\n+        }\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzODE5MA==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390238190", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T11:02:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MDE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MDMxOQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390070319", "bodyText": "Could you move all static factory methods before member field declarations?", "author": "trustin", "createdAt": "2020-03-10T03:00:48Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public class BandwidthLimit {\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {\n+            throw new IllegalArgumentException(\"Overdraft limit has to exceed bandwidth limit \" + limit +\n+                                               \". Found: \" + overdraftLimit);\n+        }\n+        this.overdraftLimit = overdraftLimit;\n+\n+        // validate initialSize\n+        this.initialSize = initialSize;\n+\n+        requireNonNull(period, \"period\");\n+        if (period.isNegative() || period.isZero()) {\n+            throw new IllegalArgumentException(\"Bandwidth period must be positive. Found: \" + period);\n+        }\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit          the bucket size - defines the count of tokens which can be held by bucket\n+     *                       and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by\n+     *                       bucket, this must exceed the {@code limit}\n+     * @param initialSize   the initial number of tokens for this bandwidth\n+     * @param period         the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, long initialSize, Duration period) {", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzOTQ3OQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390239479", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T11:05:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MDMxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MDgyMg==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390070822", "bodyText": "Returns the bucket size, which defines ...\nProbably no need to specify @return tag because summary implies it.", "author": "trustin", "createdAt": "2020-03-10T03:02:58Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public class BandwidthLimit {\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {\n+            throw new IllegalArgumentException(\"Overdraft limit has to exceed bandwidth limit \" + limit +\n+                                               \". Found: \" + overdraftLimit);\n+        }\n+        this.overdraftLimit = overdraftLimit;\n+\n+        // validate initialSize\n+        this.initialSize = initialSize;\n+\n+        requireNonNull(period, \"period\");\n+        if (period.isNegative() || period.isZero()) {\n+            throw new IllegalArgumentException(\"Bandwidth period must be positive. Found: \" + period);\n+        }\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit          the bucket size - defines the count of tokens which can be held by bucket\n+     *                       and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by\n+     *                       bucket, this must exceed the {@code limit}\n+     * @param initialSize   the initial number of tokens for this bandwidth\n+     * @param period         the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, initialSize, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit the bucket size - defines the count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by bucket,\n+     *                       this must exceed the {@code limit}\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, 0L, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}.\n+     * Specifies easy limitation of {@code limit} tokens per {@code period} time window.\n+     * @param limit the bucket size - defines the maximum count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, Duration period) {\n+        return new BandwidthLimit(limit, 0L, 0L, period);\n+    }\n+\n+    /**\n+     * Creates a new {@link BandwidthLimit} that computes {@code limit}, {@code overdraftLimit},\n+     * {@code initialSize} and {@code period} from a semicolon-separated {@code specification} string\n+     * that conforms to the following format,\n+     * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>:\n+     * <pre>{@code\n+     * <limit>;window=<period(in seconds)>[;burst=<overdraftLimit>][;initial=<initialSize>]\n+     * }</pre>\n+     * All {@code specification} string elements must come in the defined order.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize} and {@code period}=60seconds)</li>\n+     *   <li>{@code 100;window=60;burst=1000;initial=20} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize}=20 and {@code period}=60seconds)</li>\n+     *   <li>{@code 5000;window=1} ({@code limit}=5000 and {@code period}=1second)</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     */\n+    public static BandwidthLimit of(String specification) {\n+        return TokenBucketSpec.parseBandwidthLimit(specification);\n+    }\n+\n+    /**\n+     * The bucket size - defines the count of tokens which can be held by bucket\n+     * and defines the speed at which tokens are regenerated in bucket.\n+     * @return Bucket size.", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MDk5OQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390070999", "bodyText": "Returns the maximum ...\n, this must ... -> . This value always exceeds ...", "author": "trustin", "createdAt": "2020-03-10T03:03:40Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public class BandwidthLimit {\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {\n+            throw new IllegalArgumentException(\"Overdraft limit has to exceed bandwidth limit \" + limit +\n+                                               \". Found: \" + overdraftLimit);\n+        }\n+        this.overdraftLimit = overdraftLimit;\n+\n+        // validate initialSize\n+        this.initialSize = initialSize;\n+\n+        requireNonNull(period, \"period\");\n+        if (period.isNegative() || period.isZero()) {\n+            throw new IllegalArgumentException(\"Bandwidth period must be positive. Found: \" + period);\n+        }\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit          the bucket size - defines the count of tokens which can be held by bucket\n+     *                       and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by\n+     *                       bucket, this must exceed the {@code limit}\n+     * @param initialSize   the initial number of tokens for this bandwidth\n+     * @param period         the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, initialSize, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit the bucket size - defines the count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by bucket,\n+     *                       this must exceed the {@code limit}\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, 0L, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}.\n+     * Specifies easy limitation of {@code limit} tokens per {@code period} time window.\n+     * @param limit the bucket size - defines the maximum count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, Duration period) {\n+        return new BandwidthLimit(limit, 0L, 0L, period);\n+    }\n+\n+    /**\n+     * Creates a new {@link BandwidthLimit} that computes {@code limit}, {@code overdraftLimit},\n+     * {@code initialSize} and {@code period} from a semicolon-separated {@code specification} string\n+     * that conforms to the following format,\n+     * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>:\n+     * <pre>{@code\n+     * <limit>;window=<period(in seconds)>[;burst=<overdraftLimit>][;initial=<initialSize>]\n+     * }</pre>\n+     * All {@code specification} string elements must come in the defined order.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize} and {@code period}=60seconds)</li>\n+     *   <li>{@code 100;window=60;burst=1000;initial=20} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize}=20 and {@code period}=60seconds)</li>\n+     *   <li>{@code 5000;window=1} ({@code limit}=5000 and {@code period}=1second)</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     */\n+    public static BandwidthLimit of(String specification) {\n+        return TokenBucketSpec.parseBandwidthLimit(specification);\n+    }\n+\n+    /**\n+     * The bucket size - defines the count of tokens which can be held by bucket\n+     * and defines the speed at which tokens are regenerated in bucket.\n+     * @return Bucket size.\n+     */\n+    public long limit() {\n+        return limit;\n+    }\n+\n+    /**\n+     * The maximum overdraft count of tokens which can be held by bucket,\n+     * this must exceed the {@code BandwidthLimit#limit()}.\n+     * @return Bucket maximum overdraft count.", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1Njg5OQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390256899", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T11:43:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MDk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTE2Mw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071163", "bodyText": "Returns the number of initial tokens in the bandwidth. By default, newly created ....\nfor example for case -> for example, for the case", "author": "trustin", "createdAt": "2020-03-10T03:04:23Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public class BandwidthLimit {\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {\n+            throw new IllegalArgumentException(\"Overdraft limit has to exceed bandwidth limit \" + limit +\n+                                               \". Found: \" + overdraftLimit);\n+        }\n+        this.overdraftLimit = overdraftLimit;\n+\n+        // validate initialSize\n+        this.initialSize = initialSize;\n+\n+        requireNonNull(period, \"period\");\n+        if (period.isNegative() || period.isZero()) {\n+            throw new IllegalArgumentException(\"Bandwidth period must be positive. Found: \" + period);\n+        }\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit          the bucket size - defines the count of tokens which can be held by bucket\n+     *                       and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by\n+     *                       bucket, this must exceed the {@code limit}\n+     * @param initialSize   the initial number of tokens for this bandwidth\n+     * @param period         the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, initialSize, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit the bucket size - defines the count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by bucket,\n+     *                       this must exceed the {@code limit}\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, 0L, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}.\n+     * Specifies easy limitation of {@code limit} tokens per {@code period} time window.\n+     * @param limit the bucket size - defines the maximum count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, Duration period) {\n+        return new BandwidthLimit(limit, 0L, 0L, period);\n+    }\n+\n+    /**\n+     * Creates a new {@link BandwidthLimit} that computes {@code limit}, {@code overdraftLimit},\n+     * {@code initialSize} and {@code period} from a semicolon-separated {@code specification} string\n+     * that conforms to the following format,\n+     * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>:\n+     * <pre>{@code\n+     * <limit>;window=<period(in seconds)>[;burst=<overdraftLimit>][;initial=<initialSize>]\n+     * }</pre>\n+     * All {@code specification} string elements must come in the defined order.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize} and {@code period}=60seconds)</li>\n+     *   <li>{@code 100;window=60;burst=1000;initial=20} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize}=20 and {@code period}=60seconds)</li>\n+     *   <li>{@code 5000;window=1} ({@code limit}=5000 and {@code period}=1second)</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     */\n+    public static BandwidthLimit of(String specification) {\n+        return TokenBucketSpec.parseBandwidthLimit(specification);\n+    }\n+\n+    /**\n+     * The bucket size - defines the count of tokens which can be held by bucket\n+     * and defines the speed at which tokens are regenerated in bucket.\n+     * @return Bucket size.\n+     */\n+    public long limit() {\n+        return limit;\n+    }\n+\n+    /**\n+     * The maximum overdraft count of tokens which can be held by bucket,\n+     * this must exceed the {@code BandwidthLimit#limit()}.\n+     * @return Bucket maximum overdraft count.\n+     */\n+    public long overdraftLimit() {\n+        return overdraftLimit;\n+    }\n+\n+    /**\n+     * By default new created bandwidth has amount tokens that equals its capacity.\n+     * The initial limit allows having lesser initial size, for example for case of cold start\n+     * in order to prevent denial of service.\n+     *\n+     * @return the number of initial tokens in the bandwidth.", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2MDYxMw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390260613", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T11:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTE2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTIyMQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071221", "bodyText": "Returns the time window during which ...", "author": "trustin", "createdAt": "2020-03-10T03:04:41Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public class BandwidthLimit {\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {\n+            throw new IllegalArgumentException(\"Overdraft limit has to exceed bandwidth limit \" + limit +\n+                                               \". Found: \" + overdraftLimit);\n+        }\n+        this.overdraftLimit = overdraftLimit;\n+\n+        // validate initialSize\n+        this.initialSize = initialSize;\n+\n+        requireNonNull(period, \"period\");\n+        if (period.isNegative() || period.isZero()) {\n+            throw new IllegalArgumentException(\"Bandwidth period must be positive. Found: \" + period);\n+        }\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit          the bucket size - defines the count of tokens which can be held by bucket\n+     *                       and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by\n+     *                       bucket, this must exceed the {@code limit}\n+     * @param initialSize   the initial number of tokens for this bandwidth\n+     * @param period         the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, initialSize, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit the bucket size - defines the count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by bucket,\n+     *                       this must exceed the {@code limit}\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, 0L, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}.\n+     * Specifies easy limitation of {@code limit} tokens per {@code period} time window.\n+     * @param limit the bucket size - defines the maximum count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, Duration period) {\n+        return new BandwidthLimit(limit, 0L, 0L, period);\n+    }\n+\n+    /**\n+     * Creates a new {@link BandwidthLimit} that computes {@code limit}, {@code overdraftLimit},\n+     * {@code initialSize} and {@code period} from a semicolon-separated {@code specification} string\n+     * that conforms to the following format,\n+     * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>:\n+     * <pre>{@code\n+     * <limit>;window=<period(in seconds)>[;burst=<overdraftLimit>][;initial=<initialSize>]\n+     * }</pre>\n+     * All {@code specification} string elements must come in the defined order.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize} and {@code period}=60seconds)</li>\n+     *   <li>{@code 100;window=60;burst=1000;initial=20} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize}=20 and {@code period}=60seconds)</li>\n+     *   <li>{@code 5000;window=1} ({@code limit}=5000 and {@code period}=1second)</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     */\n+    public static BandwidthLimit of(String specification) {\n+        return TokenBucketSpec.parseBandwidthLimit(specification);\n+    }\n+\n+    /**\n+     * The bucket size - defines the count of tokens which can be held by bucket\n+     * and defines the speed at which tokens are regenerated in bucket.\n+     * @return Bucket size.\n+     */\n+    public long limit() {\n+        return limit;\n+    }\n+\n+    /**\n+     * The maximum overdraft count of tokens which can be held by bucket,\n+     * this must exceed the {@code BandwidthLimit#limit()}.\n+     * @return Bucket maximum overdraft count.\n+     */\n+    public long overdraftLimit() {\n+        return overdraftLimit;\n+    }\n+\n+    /**\n+     * By default new created bandwidth has amount tokens that equals its capacity.\n+     * The initial limit allows having lesser initial size, for example for case of cold start\n+     * in order to prevent denial of service.\n+     *\n+     * @return the number of initial tokens in the bandwidth.\n+     */\n+    public long initialSize() {\n+        return initialSize;\n+    }\n+\n+    /**\n+     * The time window, during which the tokens will be regenerated.\n+     * @return Time window for the limit.", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2MDc2Mw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390260763", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T11:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTIyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTI3MQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071271", "bodyText": "Constructs a new", "author": "trustin", "createdAt": "2020-03-10T03:04:54Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public class BandwidthLimit {\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {\n+            throw new IllegalArgumentException(\"Overdraft limit has to exceed bandwidth limit \" + limit +\n+                                               \". Found: \" + overdraftLimit);\n+        }\n+        this.overdraftLimit = overdraftLimit;\n+\n+        // validate initialSize\n+        this.initialSize = initialSize;\n+\n+        requireNonNull(period, \"period\");\n+        if (period.isNegative() || period.isZero()) {\n+            throw new IllegalArgumentException(\"Bandwidth period must be positive. Found: \" + period);\n+        }\n+        this.period = period;\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit          the bucket size - defines the count of tokens which can be held by bucket\n+     *                       and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by\n+     *                       bucket, this must exceed the {@code limit}\n+     * @param initialSize   the initial number of tokens for this bandwidth\n+     * @param period         the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, initialSize, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit the bucket size - defines the count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by bucket,\n+     *                       this must exceed the {@code limit}\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, 0L, period);\n+    }\n+\n+    /**\n+     * Creates new {@link BandwidthLimit}.\n+     * Specifies easy limitation of {@code limit} tokens per {@code period} time window.\n+     * @param limit the bucket size - defines the maximum count of tokens which can be held by bucket\n+     *              and defines the speed at which tokens are regenerated in bucket\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, Duration period) {\n+        return new BandwidthLimit(limit, 0L, 0L, period);\n+    }\n+\n+    /**\n+     * Creates a new {@link BandwidthLimit} that computes {@code limit}, {@code overdraftLimit},\n+     * {@code initialSize} and {@code period} from a semicolon-separated {@code specification} string\n+     * that conforms to the following format,\n+     * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>:\n+     * <pre>{@code\n+     * <limit>;window=<period(in seconds)>[;burst=<overdraftLimit>][;initial=<initialSize>]\n+     * }</pre>\n+     * All {@code specification} string elements must come in the defined order.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize} and {@code period}=60seconds)</li>\n+     *   <li>{@code 100;window=60;burst=1000;initial=20} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize}=20 and {@code period}=60seconds)</li>\n+     *   <li>{@code 5000;window=1} ({@code limit}=5000 and {@code period}=1second)</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     */\n+    public static BandwidthLimit of(String specification) {\n+        return TokenBucketSpec.parseBandwidthLimit(specification);\n+    }\n+\n+    /**\n+     * The bucket size - defines the count of tokens which can be held by bucket\n+     * and defines the speed at which tokens are regenerated in bucket.\n+     * @return Bucket size.\n+     */\n+    public long limit() {\n+        return limit;\n+    }\n+\n+    /**\n+     * The maximum overdraft count of tokens which can be held by bucket,\n+     * this must exceed the {@code BandwidthLimit#limit()}.\n+     * @return Bucket maximum overdraft count.\n+     */\n+    public long overdraftLimit() {\n+        return overdraftLimit;\n+    }\n+\n+    /**\n+     * By default new created bandwidth has amount tokens that equals its capacity.\n+     * The initial limit allows having lesser initial size, for example for case of cold start\n+     * in order to prevent denial of service.\n+     *\n+     * @return the number of initial tokens in the bandwidth.\n+     */\n+    public long initialSize() {\n+        return initialSize;\n+    }\n+\n+    /**\n+     * The time window, during which the tokens will be regenerated.\n+     * @return Time window for the limit.\n+     */\n+    public Duration period() {\n+        return period;\n+    }\n+\n+    /**\n+     * Constructs new {@link Bandwidth}.", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MDExNw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390240117", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T11:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTI3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTQ2Mw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071463", "bodyText": "Ditto - please move the static factory methods up.", "author": "trustin", "createdAt": "2020-03-10T03:05:43Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucket.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Stores configuration of the Token-Bucket algorithm, comprised of multiple limits.\n+ */\n+public class TokenBucket {\n+\n+    @Nonnull\n+    private final BandwidthLimit[] limits;\n+\n+    /**\n+     * Defines throttling configuration comprised of zero or more bandwidth limits in accordance to\n+     * token-bucket algorithm.\n+     *\n+     * <h3>Multiple bandwidths:</h3>\n+     * It is possible to specify more than one bandwidth per bucket, and bucket will handle all bandwidth in\n+     * strongly atomic way. Strongly atomic means that token will be consumed from all bandwidth or from\n+     * nothing, in other words any token can not be partially consumed.\n+     * <br> Example of multiple bandwidth:\n+     * <pre>{@code\n+     * // Adds bandwidth that restricts to consume\n+     * // not often than 1000 tokens per 1 minute and\n+     * // not often than 100 tokens per second.\n+     * TokenBucketConfig config = TokenBucketConfig.builder()\n+     *      .limit(1000L, Duration.ofMinutes(1))\n+     *      .limit(100L, Duration.ofSeconds(1))\n+     *      .build()\n+     * }</pre>\n+     *\n+     * @param limits one or more bandwidth limits to be used by token-bucket algorithm\n+     */\n+    TokenBucket(@Nonnull BandwidthLimit... limits) {\n+        this.limits = requireNonNull(limits, \"limits\");\n+    }\n+\n+    /**\n+     * Creates a new {@link TokenBucketBuilder} using a builder.\n+     */\n+    public static TokenBucketBuilder builder() {", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MDE5NA==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390240194", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T11:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTQ2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTUwNQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071505", "bodyText": "final?", "author": "trustin", "createdAt": "2020-03-10T03:05:59Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucket.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Stores configuration of the Token-Bucket algorithm, comprised of multiple limits.\n+ */\n+public class TokenBucket {", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MDY0Nw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390240647", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T11:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTUwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTU0Nw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071547", "bodyText": "final?", "author": "trustin", "createdAt": "2020-03-10T03:06:11Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucketBuilder.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Builds a {@link TokenBucket} instance.\n+ */\n+public class TokenBucketBuilder {", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MDg2OQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390240869", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T11:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTU0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTc2OA==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071768", "bodyText": "Could we use ImmutableList.Builder<BandwithLimit> instead?", "author": "trustin", "createdAt": "2020-03-10T03:06:55Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucketBuilder.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Builds a {@link TokenBucket} instance.\n+ */\n+public class TokenBucketBuilder {\n+    private static final BandwidthLimit[] NO_BANDWIDTH_LIMITS = {};\n+\n+    private List<BandwidthLimit> limits = Collections.emptyList();", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0Mjc4Nw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390242787", "bodyText": "Collections.emptyList() is immutable. Simply followed your contribution guidelines \"Prefer using plain JDK API when the same behavior can be achieved with the same amount of code.\"\nI can change it if you insist.", "author": "max904-github", "createdAt": "2020-03-10T11:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0OTE5Mw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390249193", "bodyText": "Sorry, did not get your suggestion at first.\nFixed.", "author": "max904-github", "createdAt": "2020-03-10T11:26:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyMzI5MA==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390323290", "bodyText": "No worries. Thanks for fixing. \ud83d\ude04", "author": "trustin", "createdAt": "2020-03-10T13:46:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTg0NA==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071844", "bodyText": "ImmutableList.copyOf(limits)?", "author": "trustin", "createdAt": "2020-03-10T03:07:14Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucketBuilder.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Builds a {@link TokenBucket} instance.\n+ */\n+public class TokenBucketBuilder {\n+    private static final BandwidthLimit[] NO_BANDWIDTH_LIMITS = {};\n+\n+    private List<BandwidthLimit> limits = Collections.emptyList();\n+\n+    TokenBucketBuilder() {} // prevent public access\n+\n+    /**\n+     * Adds a number of {@link BandwidthLimit}.\n+     */\n+    public TokenBucketBuilder limits(BandwidthLimit... limits) {\n+        requireNonNull(limits, \"limits\");\n+        return limits(Arrays.asList(limits));", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0OTI1OQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390249259", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T11:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTg0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTkzMw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390071933", "bodyText": "No need to do this once we switch to ImmutableList.builder()", "author": "trustin", "createdAt": "2020-03-10T03:07:41Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucketBuilder.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Builds a {@link TokenBucket} instance.\n+ */\n+public class TokenBucketBuilder {\n+    private static final BandwidthLimit[] NO_BANDWIDTH_LIMITS = {};\n+\n+    private List<BandwidthLimit> limits = Collections.emptyList();\n+\n+    TokenBucketBuilder() {} // prevent public access\n+\n+    /**\n+     * Adds a number of {@link BandwidthLimit}.\n+     */\n+    public TokenBucketBuilder limits(BandwidthLimit... limits) {\n+        requireNonNull(limits, \"limits\");\n+        return limits(Arrays.asList(limits));\n+    }\n+\n+    /**\n+     * Adds a number of {@link BandwidthLimit}.\n+     */\n+    public TokenBucketBuilder limits(Iterable<? extends BandwidthLimit> limits) {\n+        requireNonNull(limits, \"limits\");\n+        if (this.limits.isEmpty()) {\n+            this.limits = new ArrayList<>(2);\n+        }", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0OTM1OQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390249359", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T11:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MTkzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjA5NQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390072095", "bodyText": "Question: Would it make sense to add of(long limit) as well?", "author": "trustin", "createdAt": "2020-03-10T03:08:28Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucket.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Stores configuration of the Token-Bucket algorithm, comprised of multiple limits.\n+ */\n+public class TokenBucket {\n+\n+    @Nonnull\n+    private final BandwidthLimit[] limits;\n+\n+    /**\n+     * Defines throttling configuration comprised of zero or more bandwidth limits in accordance to\n+     * token-bucket algorithm.\n+     *\n+     * <h3>Multiple bandwidths:</h3>\n+     * It is possible to specify more than one bandwidth per bucket, and bucket will handle all bandwidth in\n+     * strongly atomic way. Strongly atomic means that token will be consumed from all bandwidth or from\n+     * nothing, in other words any token can not be partially consumed.\n+     * <br> Example of multiple bandwidth:\n+     * <pre>{@code\n+     * // Adds bandwidth that restricts to consume\n+     * // not often than 1000 tokens per 1 minute and\n+     * // not often than 100 tokens per second.\n+     * TokenBucketConfig config = TokenBucketConfig.builder()\n+     *      .limit(1000L, Duration.ofMinutes(1))\n+     *      .limit(100L, Duration.ofSeconds(1))\n+     *      .build()\n+     * }</pre>\n+     *\n+     * @param limits one or more bandwidth limits to be used by token-bucket algorithm\n+     */\n+    TokenBucket(@Nonnull BandwidthLimit... limits) {\n+        this.limits = requireNonNull(limits, \"limits\");\n+    }\n+\n+    /**\n+     * Creates a new {@link TokenBucketBuilder} using a builder.\n+     */\n+    public static TokenBucketBuilder builder() {\n+        return new TokenBucketBuilder();\n+    }\n+\n+    /**\n+     * Creates a new {@link TokenBucket} from a comma-separated {@code specification} string\n+     * that conforms to the following format,\n+     * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>:\n+     * <pre>{@code\n+     * <bandwidth limit 1>[, <bandwidth limit 2>[, etc.]]\n+     * }</pre>\n+     * The order of elements inside {@code specification} is not defined.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000, 50000;window=3600}</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     * @see TokenBucketSpec#parseTokenBucket(String)\n+     */\n+    public static TokenBucket of(String specification) {\n+        return TokenBucketSpec.parseTokenBucket(specification);\n+    }", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MDI5Mw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390250293", "bodyText": "Do you mean of(BandwidthLimit limit)?", "author": "max904-github", "createdAt": "2020-03-10T11:29:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyMzg0MA==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390323840", "bodyText": "I meant of(long limit) where other properties are set with the default values. I'm not sure it will be useful to a user though. Let me know what you think.", "author": "trustin", "createdAt": "2020-03-10T13:47:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM0NTA4OQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390345089", "bodyText": "Minimum required set of parameters includes both limit and duration. In that case it could be of(long limit, Duration period).\nAdded this to support basic cases.", "author": "max904-github", "createdAt": "2020-03-10T14:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjA5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjMyMg==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390072322", "bodyText": "final?", "author": "trustin", "createdAt": "2020-03-10T03:09:37Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucketThrottlingStrategy.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.HttpHeaderNames;\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.throttling.ThrottlingHeaders;\n+import com.linecorp.armeria.server.ServiceRequestContext;\n+import com.linecorp.armeria.server.throttling.ThrottlingStrategy;\n+\n+import io.github.bucket4j.AsyncBucket;\n+import io.github.bucket4j.Bucket4j;\n+import io.github.bucket4j.ConfigurationBuilder;\n+import io.github.bucket4j.local.LocalBucketBuilder;\n+\n+/**\n+ * A {@link ThrottlingStrategy} that provides a throttling strategy based on Token-Bucket algorithm.\n+ * The throttling works by examining the number of requests from the beginning, and\n+ * throttling if the request rate exceed the configured bucket limits.\n+ */\n+public class TokenBucketThrottlingStrategy<T extends Request> extends ThrottlingStrategy<T> {", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MDczOQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390250739", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T11:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjMyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjM2Nw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390072367", "bodyText": "final?", "author": "trustin", "createdAt": "2020-03-10T03:09:51Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucketThrottlingStrategyBuilder.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.throttling.ThrottlingHeaders;\n+\n+/**\n+ * Builds {@link TokenBucketThrottlingStrategy}.\n+ */\n+public class TokenBucketThrottlingStrategyBuilder<T extends Request> {", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MDg2MQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390250861", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T11:30:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjM2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjQ4Mw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390072483", "bodyText": "How about bucket4j instead of tokenbucket?", "author": "trustin", "createdAt": "2020-03-10T03:10:21Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/tokenbucket/package-info.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/**\n+ * Rate-limiting throttling implementation based on\n+ * <a href=\"https://en.wikipedia.org/wiki/Token_bucket\">Token-Bucket</a> algorithm\n+ * and <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j\">Bucket4j</a> library.\n+ *\n+ */\n+@NonNullByDefault\n+package com.linecorp.armeria.server.throttling.tokenbucket;", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MjQ2NQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390252465", "bodyText": "I think we've talked about it in the past. \"Bucket4j\" is a library. It provides an implementation of \"TokenBucket\" algorithm. \"TokenBucket\" algorithm is what used for throttling and that's what is important. The Armeria's new module already called \"bucket4j\" that links it to the library. I think it's sufficient. I prefer to keep tokenbucket in the package name.", "author": "max904-github", "createdAt": "2020-03-10T11:33:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyMjM0OQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390322349", "bodyText": "I'd prefer having bucket4j in the package name because in the future we may want to add another module that provides similar functionality based on a other library than bucket4j then we will have a package name conflict.", "author": "trustin", "createdAt": "2020-03-10T13:44:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3NTkyNg==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390375926", "bodyText": "Renamed, as you insist.", "author": "max904-github", "createdAt": "2020-03-10T14:55:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjQ4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ1NDYwOA==", "url": "https://github.com/line/armeria/pull/2566#discussion_r393454608", "bodyText": "Thanks!", "author": "trustin", "createdAt": "2020-03-17T05:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjU0NA==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390072544", "bodyText": "public is not necessary for test classes and methods.", "author": "trustin", "createdAt": "2020-03-10T03:10:41Z", "path": "bucket4j/src/test/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimitTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.time.Duration;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.github.bucket4j.Bandwidth;\n+\n+public class BandwidthLimitTest {", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MzE2Mw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390253163", "bodyText": "Well, some things complain about it. It's either the checkstyle or something else.\nRemoved public anywhere it was not complaining.", "author": "max904-github", "createdAt": "2020-03-10T11:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjU0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjU5MA==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390072590", "bodyText": "Cruft?", "author": "trustin", "createdAt": "2020-03-10T03:10:52Z", "path": "bucket4j/src/test/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimitTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.time.Duration;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.github.bucket4j.Bandwidth;\n+\n+public class BandwidthLimitTest {\n+\n+    @Test\n+    public void testConstructor() {\n+        final BandwidthLimit bl1 = BandwidthLimit.of(100L, 1000L, 50L, Duration.ofSeconds(60L));\n+        System.out.println(bl1);", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MzUxNQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390253515", "bodyText": "System.out? Yep! Removed it.", "author": "max904-github", "createdAt": "2020-03-10T11:36:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjU5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjY5NQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390072695", "bodyText": "Could we use Assert4J instead of JUnit assertions? e.g.\nassertThat(bl1.limit()).isEqualTo(100L);", "author": "trustin", "createdAt": "2020-03-10T03:11:27Z", "path": "bucket4j/src/test/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimitTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.tokenbucket;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.time.Duration;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import io.github.bucket4j.Bandwidth;\n+\n+public class BandwidthLimitTest {\n+\n+    @Test\n+    public void testConstructor() {\n+        final BandwidthLimit bl1 = BandwidthLimit.of(100L, 1000L, 50L, Duration.ofSeconds(60L));\n+        System.out.println(bl1);\n+        assertEquals(100L, bl1.limit());\n+        assertEquals(1000L, bl1.overdraftLimit());\n+        assertEquals(50L, bl1.initialSize());\n+        assertEquals(Duration.ofSeconds(60L), bl1.period());", "originalCommit": "233bb09360eadb96a996365f28da58ea5b98333f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NDc5Mg==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390254792", "bodyText": "Sorry. This was automatic. Not very used to AssertJ. There is nothing in particular in your guidelines about it. Maybe you should fix the guidelines if it's absolutely required.\nFixed.", "author": "max904-github", "createdAt": "2020-03-10T11:38:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxMzkyNw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390313927", "bodyText": "Thanks a lot for your patience and suggestion. Let me update our CONTRIBUTING.md. \ud83d\ude47\u200d\u2642\ufe0f", "author": "trustin", "createdAt": "2020-03-10T13:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyODY2Mg==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390328662", "bodyText": "#2569", "author": "trustin", "createdAt": "2020-03-10T13:53:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MjY5NQ=="}], "type": "inlineReview"}, {"oid": "a3d12a9fe17591b9044abb296e3cdd31bf6a4eea", "url": "https://github.com/line/armeria/commit/a3d12a9fe17591b9044abb296e3cdd31bf6a4eea", "message": "Review comments by @trustin", "committedDate": "2020-03-10T12:17:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxNDMzMQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390314331", "bodyText": "I guess you can just inline createHeaderName now that it's just a single call.", "author": "trustin", "createdAt": "2020-03-10T13:33:15Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/common/throttling/ThrottlingHeadersImpl.java", "diffHunk": "@@ -37,32 +37,19 @@\n     }\n \n     private static AsciiString createHeaderName(String name) {\n-        return AsciiString.cached(Ascii.toLowerCase(name));\n+        return HttpHeaderNames.of(name);\n     }", "originalCommit": "a3d12a9fe17591b9044abb296e3cdd31bf6a4eea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM0Mjk4Mw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390342983", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T14:13:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxNDMzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxNjk2Mw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390316963", "bodyText": "assertThatThrownBy(() -> BandwidthLimit.of(...))\n        .isInstanceOf(IllegalArgumentException.class)\n        .hasMessageContaining(\"Bandwidth limit must be ...\");", "author": "trustin", "createdAt": "2020-03-10T13:37:15Z", "path": "bucket4j/src/test/java/com/linecorp/armeria/server/throttling/tokenbucket/BandwidthLimitTest.java", "diffHunk": "@@ -16,182 +16,166 @@\n \n package com.linecorp.armeria.server.throttling.tokenbucket;\n \n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n import java.time.Duration;\n \n import org.junit.jupiter.api.Test;\n \n import io.github.bucket4j.Bandwidth;\n \n-public class BandwidthLimitTest {\n+class BandwidthLimitTest {\n \n     @Test\n-    public void testConstructor() {\n+    void testConstructor() {\n         final BandwidthLimit bl1 = BandwidthLimit.of(100L, 1000L, 50L, Duration.ofSeconds(60L));\n-        System.out.println(bl1);\n-        assertEquals(100L, bl1.limit());\n-        assertEquals(1000L, bl1.overdraftLimit());\n-        assertEquals(50L, bl1.initialSize());\n-        assertEquals(Duration.ofSeconds(60L), bl1.period());\n-        assertEquals(\"100;window=60;burst=1000\", bl1.toSpecString());\n+        assertThat(bl1.limit()).isEqualTo(100L);\n+        assertThat(bl1.overdraftLimit()).isEqualTo(1000L);\n+        assertThat(bl1.initialSize()).isEqualTo(50L);\n+        assertThat(bl1.period()).isEqualTo(Duration.ofSeconds(60L));\n+        assertThat(bl1.toSpecString()).isEqualTo(\"100;window=60;burst=1000\");\n         final Bandwidth b1 = bl1.bandwidth();\n-        System.out.println(b1);\n-        assertEquals(1000L, b1.getCapacity());\n-        assertEquals(100L, b1.getRefillTokens());\n-        assertEquals(50L, b1.getInitialTokens());\n-        assertEquals(Duration.ofSeconds(60L).toNanos(), b1.getRefillPeriodNanos());\n+        assertThat(b1.getCapacity()).isEqualTo(1000L);\n+        assertThat(b1.getRefillTokens()).isEqualTo(100L);\n+        assertThat(b1.getInitialTokens()).isEqualTo(50L);\n+        assertThat(b1.getRefillPeriodNanos()).isEqualTo(Duration.ofSeconds(60L).toNanos());\n \n         final BandwidthLimit bl2 = BandwidthLimit.of(100L, 1000L, Duration.ofSeconds(60L));\n-        System.out.println(bl2);\n-        assertEquals(100L, bl2.limit());\n-        assertEquals(1000L, bl2.overdraftLimit());\n-        assertEquals(0L, bl2.initialSize());\n-        assertEquals(Duration.ofSeconds(60L), bl2.period());\n-        assertEquals(\"100;window=60;burst=1000\", bl2.toSpecString());\n+        assertThat(bl2.limit()).isEqualTo(100L);\n+        assertThat(bl2.overdraftLimit()).isEqualTo(1000L);\n+        assertThat(bl2.initialSize()).isEqualTo(0L);\n+        assertThat(bl2.period()).isEqualTo(Duration.ofSeconds(60L));\n+        assertThat(bl2.toSpecString()).isEqualTo(\"100;window=60;burst=1000\");\n         final Bandwidth b2 = bl2.bandwidth();\n-        System.out.println(b2);\n-        assertEquals(1000L, b2.getCapacity());\n-        assertEquals(100L, b2.getRefillTokens());\n-        assertEquals(100L, b2.getInitialTokens());\n-        assertEquals(Duration.ofSeconds(60L).toNanos(), b2.getRefillPeriodNanos());\n+        assertThat(b2.getCapacity()).isEqualTo(1000L);\n+        assertThat(b2.getRefillTokens()).isEqualTo(100L);\n+        assertThat(b2.getInitialTokens()).isEqualTo(100L);\n+        assertThat(b2.getRefillPeriodNanos()).isEqualTo(Duration.ofSeconds(60L).toNanos());\n \n         final BandwidthLimit bl3 = BandwidthLimit.of(100L, Duration.ofSeconds(60L));\n-        System.out.println(bl3);\n-        assertEquals(100L, bl3.limit());\n-        assertEquals(0L, bl3.overdraftLimit());\n-        assertEquals(0L, bl3.initialSize());\n-        assertEquals(Duration.ofSeconds(60L), bl3.period());\n-        assertEquals(\"100;window=60\", bl3.toSpecString());\n+        assertThat(bl3.limit()).isEqualTo(100L);\n+        assertThat(bl3.overdraftLimit()).isEqualTo(0L);\n+        assertThat(bl3.initialSize()).isEqualTo(0L);\n+        assertThat(bl3.period()).isEqualTo(Duration.ofSeconds(60L));\n+        assertThat(bl3.toSpecString()).isEqualTo(\"100;window=60\");\n         final Bandwidth b3 = bl3.bandwidth();\n-        System.out.println(b3);\n-        assertEquals(100L, b3.getCapacity());\n-        assertEquals(100L, b3.getRefillTokens());\n-        assertEquals(100L, b3.getInitialTokens());\n-        assertEquals(Duration.ofSeconds(60L).toNanos(), b3.getRefillPeriodNanos());\n+        assertThat(b3.getCapacity()).isEqualTo(100L);\n+        assertThat(b3.getRefillTokens()).isEqualTo(100L);\n+        assertThat(b3.getInitialTokens()).isEqualTo(100L);\n+        assertThat(b3.getRefillPeriodNanos()).isEqualTo(Duration.ofSeconds(60L).toNanos());\n \n         final BandwidthLimit bl4 = BandwidthLimit.of(100L, 0L, Duration.ofSeconds(60L));\n-        System.out.println(bl4);\n-        assertEquals(100L, bl4.limit());\n-        assertEquals(0L, bl4.overdraftLimit());\n-        assertEquals(0L, bl4.initialSize());\n-        assertEquals(Duration.ofSeconds(60L), bl4.period());\n-        assertEquals(\"100;window=60\", bl4.toSpecString());\n+        assertThat(bl4.limit()).isEqualTo(100L);\n+        assertThat(bl4.overdraftLimit()).isEqualTo(0L);\n+        assertThat(bl4.initialSize()).isEqualTo(0L);\n+        assertThat(bl4.period()).isEqualTo(Duration.ofSeconds(60L));\n+        assertThat(bl4.toSpecString()).isEqualTo(\"100;window=60\");\n         final Bandwidth b4 = bl4.bandwidth();\n-        System.out.println(b4);\n-        assertEquals(100L, b4.getCapacity());\n-        assertEquals(100L, b4.getRefillTokens());\n-        assertEquals(100L, b4.getInitialTokens());\n-        assertEquals(Duration.ofSeconds(60L).toNanos(), b4.getRefillPeriodNanos());\n+        assertThat(b4.getCapacity()).isEqualTo(100L);\n+        assertThat(b4.getRefillTokens()).isEqualTo(100L);\n+        assertThat(b4.getInitialTokens()).isEqualTo(100L);\n+        assertThat(b4.getRefillPeriodNanos()).isEqualTo(Duration.ofSeconds(60L).toNanos());\n     }\n \n     @Test\n-    public void testInvalidConstructor() {\n+    void testInvalidConstructor() {\n         try {\n             BandwidthLimit.of(0L, 1000L, 50L, Duration.ofSeconds(60L));\n         } catch (IllegalArgumentException e) {\n-            assertEquals(\n-                    \"Bandwidth limit must be positive. Found: 0\", e.getMessage());\n+            assertThat(\n+                    e.getMessage()).isEqualTo(\"Bandwidth limit must be positive. Found: 0\");\n         }", "originalCommit": "a3d12a9fe17591b9044abb296e3cdd31bf6a4eea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM2NTQ4Mw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390365483", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T14:42:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxNjk2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxODEwNw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390318107", "bodyText": "assertThat(retryAfter2).isBetween(5, 10);", "author": "trustin", "createdAt": "2020-03-10T13:38:59Z", "path": "bucket4j/src/test/java/com/linecorp/armeria/server/throttling/tokenbucket/TokenBucketThrottlingStrategyTest.java", "diffHunk": "@@ -94,130 +92,121 @@ protected void configure(ServerBuilder sb) throws Exception {\n     public void serve1() throws Exception {\n         final WebClient client = WebClient.of(serverRule.httpUri());\n         final AggregatedHttpResponse response = client.get(\"/http-serve\").aggregate().get();\n-        assertEquals(HttpStatus.OK, response.status());\n-        System.out.println(response.headers());\n-\n-        assertFalse(response.headers().contains(HttpHeaderNames.RETRY_AFTER));\n-        assertFalse(response.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response.headers().contains(\"X-RateLimit-Remaining\"));\n-        assertFalse(response.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertFalse(response.headers().contains(\"RateLimit-Reset\"));\n-        assertFalse(response.headers().contains(\"X-RateLimit-Reset\"));\n-        assertFalse(response.headers().contains(\"X-Rate-Limit-Reset\"));\n-        assertFalse(response.headers().contains(\"RateLimit-Limit\"));\n-        assertFalse(response.headers().contains(\"X-RateLimit-Limit\"));\n-        assertFalse(response.headers().contains(\"X-Rate-Limit-Limit\"));\n+        assertThat(response.status()).isEqualTo(HttpStatus.OK);\n+\n+        assertThat(response.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();\n+        assertThat(response.headers().contains(\"RateLimit-Remaining\")).isFalse();\n+        assertThat(response.headers().contains(\"X-RateLimit-Remaining\")).isFalse();\n+        assertThat(response.headers().contains(\"X-Rate-Limit-Remaining\")).isFalse();\n+        assertThat(response.headers().contains(\"RateLimit-Reset\")).isFalse();\n+        assertThat(response.headers().contains(\"X-RateLimit-Reset\")).isFalse();\n+        assertThat(response.headers().contains(\"X-Rate-Limit-Reset\")).isFalse();\n+        assertThat(response.headers().contains(\"RateLimit-Limit\")).isFalse();\n+        assertThat(response.headers().contains(\"X-RateLimit-Limit\")).isFalse();\n+        assertThat(response.headers().contains(\"X-Rate-Limit-Limit\")).isFalse();\n     }\n \n     @Test\n     public void throttle1() throws Exception {\n         final WebClient client = WebClient.of(serverRule.httpUri());\n         final AggregatedHttpResponse response1 = client.get(\"/http-throttle1\").aggregate().get();\n-        assertEquals(HttpStatus.OK, response1.status());\n-        System.out.println(response1.headers());\n-\n-        assertFalse(response1.headers().contains(HttpHeaderNames.RETRY_AFTER));\n-        assertFalse(response1.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response1.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertTrue(response1.headers().contains(\"X-RateLimit-Remaining\", \"0\"));\n-        assertTrue(response1.headers().contains(\"X-RateLimit-Reset\"));\n+        assertThat(response1.status()).isEqualTo(HttpStatus.OK);\n+\n+        assertThat(response1.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();\n+        assertThat(response1.headers().contains(\"RateLimit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-Rate-Limit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Remaining\", \"0\")).isTrue();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Reset\")).isTrue();\n         final long reset1 = Long.parseLong(response1.headers().get(\"X-RateLimit-Reset\"));\n-        assertTrue(reset1 <= 10L && reset1 >= 0L);\n-        assertFalse(response1.headers().contains(\"X-RateLimit-Limit\"));\n+        assertThat(reset1 <= 10L && reset1 >= 0L).isTrue();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Limit\")).isFalse();\n \n         final AggregatedHttpResponse response2 = client.get(\"/http-throttle1\").aggregate().get();\n-        System.out.println(response2.headers());\n-        assertEquals(HttpStatus.TOO_MANY_REQUESTS, response2.status());\n+        assertThat(response2.status()).isEqualTo(HttpStatus.TOO_MANY_REQUESTS);\n \n-        assertTrue(response2.headers().contains(HttpHeaderNames.RETRY_AFTER));\n+        assertThat(response2.headers().contains(HttpHeaderNames.RETRY_AFTER)).isTrue();\n         final long retryAfter2 = Long.parseLong(response2.headers().get(HttpHeaderNames.RETRY_AFTER));\n-        assertTrue(retryAfter2 <= 10L && retryAfter2 >= 0L);\n-        assertFalse(response2.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response2.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertTrue(response2.headers().contains(\"X-RateLimit-Remaining\", \"0\"));\n-        assertTrue(response2.headers().contains(\"X-RateLimit-Reset\"));\n+        assertThat(retryAfter2 <= 10L && retryAfter2 >= 0L).isTrue();\n+        assertThat(response2.headers().contains(\"RateLimit-Remaining\")).isFalse();\n+        assertThat(response2.headers().contains(\"X-Rate-Limit-Remaining\")).isFalse();\n+        assertThat(response2.headers().contains(\"X-RateLimit-Remaining\", \"0\")).isTrue();\n+        assertThat(response2.headers().contains(\"X-RateLimit-Reset\")).isTrue();\n         final long reset = Long.parseLong(response2.headers().get(\"X-RateLimit-Reset\"));\n-        assertEquals(retryAfter2, reset);\n-        assertFalse(response2.headers().contains(\"X-RateLimit-Limit\"));\n+        assertThat(reset).isEqualTo(retryAfter2);\n+        assertThat(response2.headers().contains(\"X-RateLimit-Limit\")).isFalse();\n     }\n \n     @Test\n     public void throttle2() throws Exception {\n         final WebClient client = WebClient.of(serverRule.httpUri());\n         final AggregatedHttpResponse response1 = client.get(\"/http-throttle2\").aggregate().get();\n-        assertEquals(HttpStatus.OK, response1.status());\n-        System.out.println(response1.headers());\n-\n-        assertFalse(response1.headers().contains(HttpHeaderNames.RETRY_AFTER));\n-        assertFalse(response1.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response1.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertTrue(response1.headers().contains(\"X-RateLimit-Remaining\", \"0\"));\n-        assertTrue(response1.headers().contains(\"X-RateLimit-Reset\"));\n+        assertThat(response1.status()).isEqualTo(HttpStatus.OK);\n+\n+        assertThat(response1.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();\n+        assertThat(response1.headers().contains(\"RateLimit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-Rate-Limit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Remaining\", \"0\")).isTrue();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Reset\")).isTrue();\n         final long reset1 = Long.parseLong(response1.headers().get(\"X-RateLimit-Reset\"));\n-        assertTrue(reset1 <= 10L && reset1 >= 0L);\n-        assertEquals(\"1, 1;window=10\", response1.headers().get(\"X-RateLimit-Limit\"));\n+        assertThat(reset1 <= 10L && reset1 >= 0L).isTrue();\n+        assertThat(response1.headers().get(\"X-RateLimit-Limit\")).isEqualTo(\"1, 1;window=10\");\n \n         final AggregatedHttpResponse response2 = client.get(\"/http-throttle2\").aggregate().get();\n-        System.out.println(response2.headers());\n-        assertEquals(HttpStatus.TOO_MANY_REQUESTS, response2.status());\n-\n-        assertTrue(response2.headers().contains(HttpHeaderNames.RETRY_AFTER, \"15\"));\n-        assertFalse(response2.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response2.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertTrue(response2.headers().contains(\"X-RateLimit-Remaining\", \"0\"));\n-        assertTrue(response2.headers().contains(\"X-RateLimit-Reset\", \"15\"));\n-        assertEquals(\"1, 1;window=10\", response1.headers().get(\"X-RateLimit-Limit\"));\n+        assertThat(response2.status()).isEqualTo(HttpStatus.TOO_MANY_REQUESTS);\n+\n+        assertThat(response2.headers().contains(HttpHeaderNames.RETRY_AFTER, \"15\")).isTrue();\n+        assertThat(response2.headers().contains(\"RateLimit-Remaining\")).isFalse();\n+        assertThat(response2.headers().contains(\"X-Rate-Limit-Remaining\")).isFalse();\n+        assertThat(response2.headers().contains(\"X-RateLimit-Remaining\", \"0\")).isTrue();\n+        assertThat(response2.headers().contains(\"X-RateLimit-Reset\", \"15\")).isTrue();\n+        assertThat(response1.headers().get(\"X-RateLimit-Limit\")).isEqualTo(\"1, 1;window=10\");\n     }\n \n     @Test\n     public void throttle3() throws Exception {\n         final WebClient client = WebClient.of(serverRule.httpUri());\n         final AggregatedHttpResponse response1 = client.get(\"/http-throttle3\").aggregate().get();\n-        assertEquals(HttpStatus.OK, response1.status());\n-        System.out.println(response1.headers());\n+        assertThat(response1.status()).isEqualTo(HttpStatus.OK);\n \n-        assertFalse(response1.headers().contains(HttpHeaderNames.RETRY_AFTER));\n-        assertFalse(response1.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response1.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertFalse(response1.headers().contains(\"X-RateLimit-Remaining\"));\n-        assertFalse(response1.headers().contains(\"X-RateLimit-Reset\"));\n+        assertThat(response1.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();\n+        assertThat(response1.headers().contains(\"RateLimit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-Rate-Limit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Reset\")).isFalse();\n \n         final AggregatedHttpResponse response2 = client.get(\"/http-throttle3\").aggregate().get();\n-        System.out.println(response2.headers());\n-        assertEquals(HttpStatus.TOO_MANY_REQUESTS, response2.status());\n+        assertThat(response2.status()).isEqualTo(HttpStatus.TOO_MANY_REQUESTS);\n \n-        assertTrue(response2.headers().contains(HttpHeaderNames.RETRY_AFTER));\n+        assertThat(response2.headers().contains(HttpHeaderNames.RETRY_AFTER)).isTrue();\n         final long retryAfter2 = Long.parseLong(response2.headers().get(HttpHeaderNames.RETRY_AFTER));\n-        assertTrue(retryAfter2 <= 10L && retryAfter2 >= 0L);\n-        assertFalse(response2.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response2.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertFalse(response2.headers().contains(\"X-RateLimit-Remaining\"));\n-        assertFalse(response2.headers().contains(\"X-RateLimit-Reset\"));\n+        assertThat(retryAfter2 <= 10L && retryAfter2 >= 0L).isTrue();\n+        assertThat(response2.headers().contains(\"RateLimit-Remaining\")).isFalse();\n+        assertThat(response2.headers().contains(\"X-Rate-Limit-Remaining\")).isFalse();\n+        assertThat(response2.headers().contains(\"X-RateLimit-Remaining\")).isFalse();\n+        assertThat(response2.headers().contains(\"X-RateLimit-Reset\")).isFalse();\n     }\n \n     @Test\n     public void throttle4() throws Exception {\n         final WebClient client = WebClient.of(serverRule.httpUri());\n         final AggregatedHttpResponse response1 = client.get(\"/http-throttle4\").aggregate().get();\n-        assertEquals(HttpStatus.OK, response1.status());\n-        System.out.println(response1.headers());\n+        assertThat(response1.status()).isEqualTo(HttpStatus.OK);\n \n-        assertFalse(response1.headers().contains(HttpHeaderNames.RETRY_AFTER));\n-        assertFalse(response1.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response1.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertFalse(response1.headers().contains(\"X-RateLimit-Remaining\"));\n-        assertFalse(response1.headers().contains(\"X-RateLimit-Reset\"));\n+        assertThat(response1.headers().contains(HttpHeaderNames.RETRY_AFTER)).isFalse();\n+        assertThat(response1.headers().contains(\"RateLimit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-Rate-Limit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Remaining\")).isFalse();\n+        assertThat(response1.headers().contains(\"X-RateLimit-Reset\")).isFalse();\n \n         final AggregatedHttpResponse response2 = client.get(\"/http-throttle4\").aggregate().get();\n-        System.out.println(response2.headers());\n-        assertEquals(HttpStatus.SERVICE_UNAVAILABLE, response2.status());\n+        assertThat(response2.status()).isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);\n \n-        assertTrue(response2.headers().contains(HttpHeaderNames.RETRY_AFTER));\n+        assertThat(response2.headers().contains(HttpHeaderNames.RETRY_AFTER)).isTrue();\n         final long retryAfter2 = Long.parseLong(response2.headers().get(HttpHeaderNames.RETRY_AFTER));\n-        assertTrue(retryAfter2 <= 10L && retryAfter2 >= 5L);\n-        assertFalse(response2.headers().contains(\"RateLimit-Remaining\"));\n-        assertFalse(response2.headers().contains(\"X-Rate-Limit-Remaining\"));\n-        assertFalse(response2.headers().contains(\"X-RateLimit-Remaining\"));\n-        assertFalse(response2.headers().contains(\"X-RateLimit-Reset\"));\n+        assertThat(retryAfter2 <= 10L && retryAfter2 >= 5L).isTrue();", "originalCommit": "a3d12a9fe17591b9044abb296e3cdd31bf6a4eea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM1Mzk5OQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r390353999", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-10T14:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxODEwNw=="}], "type": "inlineReview"}, {"oid": "48892b2b7b7f87b470dd28c3a934746b8f085977", "url": "https://github.com/line/armeria/commit/48892b2b7b7f87b470dd28c3a934746b8f085977", "message": "More review comments by @trustin", "committedDate": "2020-03-10T14:43:45Z", "type": "commit"}, {"oid": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b", "url": "https://github.com/line/armeria/commit/6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b", "message": "Renamed package com.linecorp.armeria.server.throttling.tokenbucket -> com.linecorp.armeria.server.throttling.bucket4j as per review comments", "committedDate": "2020-03-10T14:51:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3NDk5NQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r394074995", "bodyText": "I think this will not catch when overdraftLimit is negative.\nWe usually just use checkArgument, how about using it?\ncheckArgument(limit > 0, \"limit: %s (expected: >0 )\", limit);\ncheckArgument(overdraftLimit == 0 || overdraftLimit > limit,\n              \"overdraftLimit: %s (expected: > %s )\", overdraftLimit, limit);", "author": "minwoox", "createdAt": "2020-03-18T02:35:29Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/BandwidthLimit.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.bucket4j;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.base.MoreObjects;\n+\n+import io.github.bucket4j.Bandwidth;\n+import io.github.bucket4j.Refill;\n+\n+/**\n+ * Stores configurations of a single Token-Bucket bandwidth limit.\n+ */\n+public final class BandwidthLimit {\n+\n+    /**\n+     * Returns a newly created {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit          the bucket size - defines the count of tokens which can be held by the bucket\n+     *                       and defines the speed at which tokens are regenerated in the bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by\n+     *                       the bucket, this value must exceed the {@code limit}\n+     * @param initialSize    the initial number of tokens available to this bandwidth limit\n+     * @param period         the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, initialSize, period);\n+    }\n+\n+    /**\n+     * Returns a newly created {@link BandwidthLimit}. Specifies limitation in\n+     * <a href=\"https://github.com/vladimir-bukhtoyarov/bucket4j/blob/1.3/doc-pages/token-bucket-brief-overview.md#token-bucket-algorithm\">classic\n+     * interpretation</a> of token-bucket algorithm.\n+     *\n+     * @param limit the bucket size - defines the count of tokens which can be held by the bucket\n+     *              and defines the speed at which tokens are regenerated in the bucket\n+     * @param overdraftLimit defines the maximum overdraft count of tokens which can be held by the bucket,\n+     *                       this value must exceed the {@code limit}\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, long overdraftLimit, Duration period) {\n+        return new BandwidthLimit(limit, overdraftLimit, 0L, period);\n+    }\n+\n+    /**\n+     * Returns a newly created simple {@link BandwidthLimit}.\n+     * Specifies easy limitation of {@code limit} tokens per {@code period} time window.\n+     * @param limit the bucket size - defines the maximum count of tokens which can be held by the bucket\n+     *              and defines the speed at which tokens are regenerated in the bucket\n+     * @param period the time window, during which the tokens will be regenerated\n+     */\n+    public static BandwidthLimit of(long limit, Duration period) {\n+        return new BandwidthLimit(limit, 0L, 0L, period);\n+    }\n+\n+    /**\n+     * Returns a newly created {@link BandwidthLimit}. Computes {@code limit}, {@code overdraftLimit},\n+     * {@code initialSize} and {@code period} out of a semicolon-separated {@code specification} string\n+     * that conforms to the following format,\n+     * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>:\n+     * <pre>{@code\n+     * <limit>;window=<period(in seconds)>[;burst=<overdraftLimit>][;initial=<initialSize>]\n+     * }</pre>\n+     * All {@code specification} string elements must come in the defined order.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize} and {@code period}=60seconds)</li>\n+     *   <li>{@code 100;window=60;burst=1000;initial=20} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize}=20 and {@code period}=60seconds)</li>\n+     *   <li>{@code 5000;window=1} ({@code limit}=5000 and {@code period}=1second)</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     */\n+    public static BandwidthLimit of(String specification) {\n+        return TokenBucketSpec.parseBandwidthLimit(specification);\n+    }\n+\n+    private final long limit;\n+    private final long overdraftLimit;\n+    private final long initialSize;\n+    private final Duration period;\n+\n+    BandwidthLimit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        // validate limit\n+        if (limit <= 0L) {\n+            throw new IllegalArgumentException(\"Bandwidth limit must be positive. Found: \" + limit);\n+        }\n+        this.limit = limit;\n+\n+        // validate overdraftLimit\n+        if (overdraftLimit > 0L && overdraftLimit <= limit) {", "originalCommit": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUzODkyOA==", "url": "https://github.com/line/armeria/pull/2566#discussion_r394538928", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-18T17:59:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3NDk5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3NTk0Nw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r394075947", "bodyText": "Aren't we going to add initial size?", "author": "minwoox", "createdAt": "2020-03-18T02:39:31Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketSpec.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.bucket4j;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Splitter;\n+\n+/**\n+ * A specification of a {@link TokenBucket} configuration represented by a string. The string syntax is\n+ * a series of comma-separated {@link BandwidthLimit} configurations and each values is semicolon-separated,\n+ * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>.\n+ *\n+ * @see #parseTokenBucket(String) for detailed format of the specification.\n+ */\n+final class TokenBucketSpec {\n+\n+    private static final char OPTIONS_SEPARATOR = ';';\n+    private static final char KEY_VALUE_SEPARATOR = '=';\n+    private static final String PERIOD = \"window\";\n+    private static final String OVERDRAFT = \"burst\";\n+    private static final String INITIAL = \"initial\";\n+    private static final Splitter.MapSplitter OPTIONS_SPLITTER =\n+            Splitter.on(OPTIONS_SEPARATOR).trimResults().withKeyValueSeparator(KEY_VALUE_SEPARATOR);\n+    private static final Splitter LIMITS_SPLITTER = Splitter.on(',').trimResults();\n+\n+    private TokenBucketSpec() {}\n+\n+    /**\n+     * Creates a new {@link BandwidthLimit} that computes {@code limit}, {@code overdraftLimit},\n+     * {@code initialSize} and {@code period} from a semicolon-separated {@code specification} string\n+     * that conforms to the following format:\n+     * <pre>{@code\n+     * <limit>;window=<period(in seconds)>[;burst=<overdraftLimit>][;initial=<initialSize>]\n+     * }</pre>\n+     * All {@code specification} string elements must come in the defined order.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize} and {@code period}=60seconds)</li>\n+     *   <li>{@code 100;window=60;burst=1000;initial=20} ({@code limit}=100, {@code overdraftLimit}=1000,\n+     *       {@code initialSize}=20 and {@code period}=60seconds)</li>\n+     *   <li>{@code 5000;window=1} ({@code limit}=5000 and {@code period}=1second)</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     */\n+    static BandwidthLimit parseBandwidthLimit(String specification) {\n+        requireNonNull(specification, \"specification\");\n+        if (specification.isEmpty()) {\n+            throw new IllegalArgumentException(\"Empty bandwidth limit specification\");\n+        }\n+        final int limitSep = specification.indexOf(OPTIONS_SEPARATOR);\n+        final long limit;\n+        final Map<String, String> options;\n+        if (limitSep > 0) {\n+            limit = Long.parseLong(specification.substring(0, limitSep));\n+            options = (limitSep < specification.length() - 1) ?\n+                      OPTIONS_SPLITTER.split(specification.substring(limitSep + 1)) : Collections.emptyMap();\n+        } else if (limitSep < 0) {\n+            limit = Long.parseLong(specification);\n+            options = Collections.emptyMap();\n+        } else { // if (limitSep == 0)\n+            throw new IllegalArgumentException(\"Invalid format of \\\"\" +\n+                                               specification + \"\\\" - limit not found\");\n+        }\n+        if (!options.containsKey(PERIOD)) {\n+            throw new IllegalArgumentException(\"Invalid format of \\\"\" +\n+                                               specification + \"\\\" - period not found\");\n+        }\n+        final Duration period = Duration.ofSeconds(Long.parseLong(options.get(PERIOD)));\n+        if (options.containsKey(OVERDRAFT)) {\n+            final long overdraftLimit = Long.parseLong(options.get(OVERDRAFT));\n+            if (options.containsKey(INITIAL)) {\n+                final long initialSize = Long.parseLong(options.get(INITIAL));\n+                return BandwidthLimit.of(limit, overdraftLimit, initialSize, period);\n+            } else {\n+                return BandwidthLimit.of(limit, overdraftLimit, period);\n+            }\n+        } else {\n+            return BandwidthLimit.of(limit, period);\n+        }\n+    }\n+\n+    /**\n+     * Creates a new {@link TokenBucket} from a comma-separated {@code specification} string\n+     * that conforms to the following format:\n+     * <pre>{@code\n+     * <bandwidth limit 1>[, <bandwidth limit 2>[, etc.]]\n+     * }</pre>\n+     * The order of elements inside {@code specification} is not defined.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000, 50000;window=3600}</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}.\n+     *                      Empty {@link String} permitted to specify empty {@link TokenBucket}.\n+     */\n+    static TokenBucket parseTokenBucket(String specification) {\n+        requireNonNull(specification, \"specification\");\n+        final TokenBucketBuilder builder = TokenBucket.builder();\n+        if (specification.isEmpty()) {\n+            // empty specification allowed here\n+            return builder.limits().build();\n+        }\n+        final List<BandwidthLimit> limits = new ArrayList<>(2);\n+        for (String limitSpec: LIMITS_SPLITTER.split(specification)) {\n+            limits.add(parseBandwidthLimit(limitSpec));\n+        }\n+        return builder.limits(limits).build();\n+    }\n+\n+    /**\n+     * Returns a string representation of the {@link BandwidthLimit} in the following format:\n+     * <pre>{@code\n+     * <limit>;window=<period(in seconds)>[;burst=<overdraftLimit>][;policy=\"token bucket\"]\n+     * }</pre>\n+     * For example: \"100;window=60;burst=1000\".\n+     *\n+     * @return A {@link String} representation of the {@link BandwidthLimit}.\n+     */\n+    @Nullable\n+    static String toString(@Nullable BandwidthLimit bandwidthLimit) {\n+        if (bandwidthLimit == null) {\n+            return null;\n+        }\n+        final long limit = bandwidthLimit.limit();\n+        final StringBuilder sb = new StringBuilder().append(limit);\n+        sb.append(OPTIONS_SEPARATOR).append(PERIOD).append(KEY_VALUE_SEPARATOR)\n+          .append(bandwidthLimit.period().getSeconds());\n+        final long overdraftLimit = bandwidthLimit.overdraftLimit();\n+        if (overdraftLimit > limit) {\n+            sb.append(OPTIONS_SEPARATOR).append(OVERDRAFT).append(KEY_VALUE_SEPARATOR).append(overdraftLimit);\n+        }\n+        //sb.append(OPTIONS_SEPARATOR).append(INITIAL).append(KEY_VALUE_SEPARATOR)\n+        //  .append(bandwidthLimit.initialSize());", "originalCommit": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0OTU5NQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r394549595", "bodyText": "This is intentional, but unfortunately asymmetric. The initial size of the limit is important as a configuration parameter, which this spec is parsing. But the spec is also used to communicate parameters of the quota policy to the client as part of RateLimit-Limit header. The initial size of the limit is not important as part of the quota policy, since it's only applicable at the warmup.\nLet me know if this is too confusing. I could add more explanation of that into the comment or javadoc.", "author": "max904-github", "createdAt": "2020-03-18T18:17:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3NTk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc0NDY4Ng==", "url": "https://github.com/line/armeria/pull/2566#discussion_r394744686", "bodyText": "Thanks for the explanation! Then, let's just remove this code and add the comment on why we didn't do this for the initial size. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-03-19T01:44:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3NTk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEzMTYyMA==", "url": "https://github.com/line/armeria/pull/2566#discussion_r395131620", "bodyText": "Gentle ping - Good to go once this comment is addressed.", "author": "trustin", "createdAt": "2020-03-19T15:52:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3NTk0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0NzQ2MA==", "url": "https://github.com/line/armeria/pull/2566#discussion_r395547460", "bodyText": "Sorry for the delay. Just pushed the fix.", "author": "max904-github", "createdAt": "2020-03-20T10:25:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3NTk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3ODA4MQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r394078081", "bodyText": "We don't use @Nonnull.\nAll fields and arguments are non-null by default.\nCould you remove this annotation from this PR, please?", "author": "minwoox", "createdAt": "2020-03-18T02:48:17Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucket.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.bucket4j;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * Stores configuration of the Token-Bucket algorithm, comprised of multiple limits.\n+ */\n+public final class TokenBucket {\n+\n+    /**\n+     * Returns a newly created {@link TokenBucketBuilder}.\n+     */\n+    public static TokenBucketBuilder builder() {\n+        return new TokenBucketBuilder();\n+    }\n+\n+    /**\n+     * Returns a newly created {@link TokenBucket}. Computes a set of {@link BandwidthLimit} out of\n+     * a comma-separated {@code specification} string that conforms to the following format,\n+     * as per <a href=\"https://tools.ietf.org/id/draft-polli-ratelimit-headers-00.html\">RateLimit Header Scheme for HTTP</a>:\n+     * <pre>{@code\n+     * <bandwidth limit 1>[, <bandwidth limit 2>[, etc.]]\n+     * }</pre>\n+     * The order of elements inside {@code specification} is not defined.\n+     * For example:\n+     * <ul>\n+     *   <li>{@code 100;window=60;burst=1000, 50000;window=3600}</li>\n+     * </ul>\n+     *\n+     * @param specification the specification used to create a {@link BandwidthLimit}\n+     * @see TokenBucketSpec#parseTokenBucket(String)\n+     */\n+    public static TokenBucket of(String specification) {\n+        return TokenBucketSpec.parseTokenBucket(specification);\n+    }\n+\n+    /**\n+     * Returns a newly created {@link TokenBucket} with a single simple {@link BandwidthLimit}.\n+     * Specifies easy limitation of {@code limit} tokens per {@code period} time window.\n+     * @param limit the bucket size - defines the maximum count of tokens which can be held by the bucket\n+     *              and defines the speed at which tokens are regenerated in the bucket\n+     * @param period the time window, during which the tokens will be regenerated\n+     * @return Newly created {@link TokenBucket}\n+     * @see BandwidthLimit#of(long, Duration)\n+     */\n+    public static TokenBucket of(long limit, Duration period) {\n+        return new TokenBucket(BandwidthLimit.of(limit, period));\n+    }\n+\n+    @Nonnull", "originalCommit": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUzOTE0Mg==", "url": "https://github.com/line/armeria/pull/2566#discussion_r394539142", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-18T17:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3ODA4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3OTU3OA==", "url": "https://github.com/line/armeria/pull/2566#discussion_r394079578", "bodyText": "Could you add null check even though the name is nullable?", "author": "minwoox", "createdAt": "2020-03-18T02:54:16Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketThrottlingStrategyBuilder.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.bucket4j;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.throttling.ThrottlingHeaders;\n+\n+/**\n+ * Builds {@link TokenBucketThrottlingStrategy}.\n+ */\n+public final class TokenBucketThrottlingStrategyBuilder<T extends Request> {\n+\n+    private final TokenBucket tokenBucket;\n+    @Nullable\n+    private Duration minimumBackoff;\n+    @Nullable\n+    private ThrottlingHeaders headersScheme;\n+    private boolean sendQuota;\n+    @Nullable\n+    private String name;\n+\n+    TokenBucketThrottlingStrategyBuilder(TokenBucket tokenBucket) {\n+        this.tokenBucket = Objects.requireNonNull(tokenBucket, \"tokenBucket\");\n+    }\n+\n+    /**\n+     * Optional name of the strategy.\n+     * By default, it will be assigned with a predefined name.\n+     */\n+    public TokenBucketThrottlingStrategyBuilder<T> name(String name) {\n+        this.name = name;", "originalCommit": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0Mjc3NQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r394542775", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-18T18:05:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3OTU3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3OTc5Ng==", "url": "https://github.com/line/armeria/pull/2566#discussion_r394079796", "bodyText": "Don't we need to validate this value?", "author": "minwoox", "createdAt": "2020-03-18T02:55:09Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketThrottlingStrategyBuilder.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.bucket4j;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import javax.annotation.Nullable;\n+\n+import com.linecorp.armeria.common.Request;\n+import com.linecorp.armeria.common.throttling.ThrottlingHeaders;\n+\n+/**\n+ * Builds {@link TokenBucketThrottlingStrategy}.\n+ */\n+public final class TokenBucketThrottlingStrategyBuilder<T extends Request> {\n+\n+    private final TokenBucket tokenBucket;\n+    @Nullable\n+    private Duration minimumBackoff;\n+    @Nullable\n+    private ThrottlingHeaders headersScheme;\n+    private boolean sendQuota;\n+    @Nullable\n+    private String name;\n+\n+    TokenBucketThrottlingStrategyBuilder(TokenBucket tokenBucket) {\n+        this.tokenBucket = Objects.requireNonNull(tokenBucket, \"tokenBucket\");\n+    }\n+\n+    /**\n+     * Optional name of the strategy.\n+     * By default, it will be assigned with a predefined name.\n+     */\n+    public TokenBucketThrottlingStrategyBuilder<T> name(String name) {\n+        this.name = name;\n+        return this;\n+    }\n+\n+    /**\n+     * Optional {@link Duration} that defines a minimum backoff period for throttled requests.\n+     * By default, it will be set to 0 seconds.\n+     */\n+    public TokenBucketThrottlingStrategyBuilder<T> withMinimumBackoff(Duration minimumBackoff) {\n+        this.minimumBackoff = minimumBackoff;", "originalCommit": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0Mjg0Mg==", "url": "https://github.com/line/armeria/pull/2566#discussion_r394542842", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-18T18:05:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3OTc5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA4NTUxNw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r394085517", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final ImmutableList.Builder<BandwidthLimit> limitsBuilder = new ImmutableList.Builder<>();\n          \n          \n            \n                private final ImmutableList.Builder<BandwidthLimit> limitsBuilder = ImmutableList.builder();", "author": "ikhoon", "createdAt": "2020-03-18T03:19:44Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketBuilder.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.bucket4j;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Builds a {@link TokenBucket} instance.\n+ */\n+public final class TokenBucketBuilder {\n+    private static final BandwidthLimit[] NO_BANDWIDTH_LIMITS = {};\n+\n+    private final ImmutableList.Builder<BandwidthLimit> limitsBuilder = new ImmutableList.Builder<>();", "originalCommit": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1NTMwMA==", "url": "https://github.com/line/armeria/pull/2566#discussion_r394555300", "bodyText": "Fixed", "author": "max904-github", "createdAt": "2020-03-18T18:27:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA4NTUxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA4NjQ5Nw==", "url": "https://github.com/line/armeria/pull/2566#discussion_r394086497", "bodyText": "How about just pass limits and make TokenBucket accept ImmutableList?\nThen TokenBucket#limits() can return ImmutableList with zero cost.", "author": "ikhoon", "createdAt": "2020-03-18T03:23:50Z", "path": "bucket4j/src/main/java/com/linecorp/armeria/server/throttling/bucket4j/TokenBucketBuilder.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.server.throttling.bucket4j;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.time.Duration;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * Builds a {@link TokenBucket} instance.\n+ */\n+public final class TokenBucketBuilder {\n+    private static final BandwidthLimit[] NO_BANDWIDTH_LIMITS = {};\n+\n+    private final ImmutableList.Builder<BandwidthLimit> limitsBuilder = new ImmutableList.Builder<>();\n+\n+    TokenBucketBuilder() {} // prevent public access\n+\n+    /**\n+     * Adds a number of {@link BandwidthLimit}.\n+     */\n+    public TokenBucketBuilder limits(BandwidthLimit... limits) {\n+        requireNonNull(limits, \"limits\");\n+        return limits(ImmutableList.copyOf(limits));\n+    }\n+\n+    /**\n+     * Adds a number of {@link BandwidthLimit}.\n+     */\n+    public TokenBucketBuilder limits(Iterable<BandwidthLimit> limits) {\n+        requireNonNull(limits, \"limits\");\n+        limitsBuilder.addAll(limits);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds new {@link BandwidthLimit}.\n+     */\n+    public TokenBucketBuilder limit(long limit, long overdraftLimit, long initialSize, Duration period) {\n+        return limits(BandwidthLimit.of(limit, overdraftLimit, initialSize, period));\n+    }\n+\n+    /**\n+     * Adds new {@link BandwidthLimit}.\n+     */\n+    public TokenBucketBuilder limit(long limit, long overdraftLimit, Duration period) {\n+        return limits(BandwidthLimit.of(limit, overdraftLimit, period));\n+    }\n+\n+    /**\n+     * Adds new {@link BandwidthLimit}.\n+     */\n+    public TokenBucketBuilder limit(long limit, Duration period) {\n+        return limits(BandwidthLimit.of(limit, period));\n+    }\n+\n+    /**\n+     * Returns a newly-created {@link TokenBucket} based on the set of limits configured for this builder.\n+     */\n+    public TokenBucket build() {\n+        final ImmutableList<BandwidthLimit> limits = limitsBuilder.build();\n+        return new TokenBucket(limits.isEmpty() ? NO_BANDWIDTH_LIMITS\n+                                                : limits.toArray(NO_BANDWIDTH_LIMITS));", "originalCommit": "6ade9bc47d1dcfcb8ef57b812a2f8cbde0fc321b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2NzEyNg==", "url": "https://github.com/line/armeria/pull/2566#discussion_r394567126", "bodyText": "I understand your proposal, but it's quite a bit of change. I don't see a cost concern here as the conversion of the List to an array is completely internal and happens only once.\nI prefer not to make such interface modification.", "author": "max904-github", "createdAt": "2020-03-18T18:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA4NjQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczOTEyOQ==", "url": "https://github.com/line/armeria/pull/2566#discussion_r394739129", "bodyText": "OK, let keep as it is. \ud83d\ude00", "author": "ikhoon", "createdAt": "2020-03-19T01:31:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA4NjQ5Nw=="}], "type": "inlineReview"}, {"oid": "ef926b55181f3c3bb0840c58cef918fd8c6e9c50", "url": "https://github.com/line/armeria/commit/ef926b55181f3c3bb0840c58cef918fd8c6e9c50", "message": "Review feedback by @minwoox", "committedDate": "2020-03-18T18:25:40Z", "type": "commit"}, {"oid": "6478cdb4eb78daa513ab00127c1b023b0cc4c451", "url": "https://github.com/line/armeria/commit/6478cdb4eb78daa513ab00127c1b023b0cc4c451", "message": "Review feedback by @ikhoon", "committedDate": "2020-03-18T18:49:00Z", "type": "commit"}, {"oid": "6852c4450d52af78eca68efa13f4ee94754141ac", "url": "https://github.com/line/armeria/commit/6852c4450d52af78eca68efa13f4ee94754141ac", "message": "Review feedback by @minwoox", "committedDate": "2020-03-20T10:23:31Z", "type": "commit"}]}