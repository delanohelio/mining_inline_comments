{"pr_number": 2963, "pr_title": "Add the release note for 0.99.9", "pr_createdAt": "2020-08-03T09:02:26Z", "pr_url": "https://github.com/line/armeria/pull/2963", "timeline": [{"oid": "9417091e53ebf125b25ee0ba2219532efa651798", "url": "https://github.com/line/armeria/commit/9417091e53ebf125b25ee0ba2219532efa651798", "message": "Add the release note for 0.99.0\n\n- Added the release note for 0.99.0\n- Added the `date` to MDX frontmatter and rendered page whenever\n  possible.", "committedDate": "2020-08-03T08:59:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4OTIyOQ==", "url": "https://github.com/line/armeria/pull/2963#discussion_r464289229", "bodyText": "nit: wants -> want", "author": "minwoox", "createdAt": "2020-08-03T09:09:57Z", "path": "site/src/pages/release-notes/0.99.9.mdx", "diffHunk": "@@ -0,0 +1,239 @@\n+---\n+date: 2020-08-03\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now add multiple request timeout callbacks using the following methods: #2937 #2939\n+  - <type://ClientRequestContext#whenResponseTimingOut()>\n+  - <type://ClientRequestContext#whenResponseTimedOut()>\n+  - <type://ServiceRequestContext#whenRequestTimingOut()>\n+  - <type://ServiceRequestContext#whenRequestTimedOut()>\n+- You can now specify multiple decorators with a single call when building a service binding fluently. #2889\n+  ```java\n+  Server.builder()\n+        .route().get(\"/hello\")\n+                .decorators(firstDecorator,\n+                            secondDecorator,\n+                            thirdDecorator)\n+                .build(helloService)\n+        .build();\n+  ```\n+- You can now specify whether the entire annotated service methods has to run in a `blockingTaskExecutor`.\n+  #2923 #2925\n+  ```java\n+  Server.builder()\n+        .annotatedService().pathPrefix(\"/my_service\")\n+                           .useBlockingTaskExecutor(true)\n+                           .build(myService);\n+\n+  ```\n+- You can also specify the <type://@Blocking> annotation on a class. It was previously allowed only on methods.\n+  #2915\n+  ```java\n+  @Blocking\n+  public class MyBlockingAnnotatedService {\n+      @Get\n+      public String delayed() throws Exception {\n+          Thread.sleep(1000);\n+          return \"slept a second\";\n+      }\n+  }\n+  ```\n+- You can now bind an annotated service method to the prefix path by specifying no path. #2708 #2853\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get\n+      public String withoutSlash() {\n+          return \"without slash\";\n+      }\n+\n+      @Get(\"/\")\n+      public String withSlash() {\n+          return \"with slash\";\n+      }\n+  }\n+\n+  Server server =\n+      Server.builder()\n+            .http(8080)\n+            .annotatedService(\"/prefix\", new MyAnnotatedService())\n+            .build();\n+  server.start().join();\n+\n+  assert \"without slash\".equals(\n+      WebClient.of().get(\"http://127.0.0.1:8080/prefix\")\n+               .aggregate().toStringUtf8());\n+\n+  assert \"with slash\".equals(\n+      WebClient.of().get(\"http://127.0.0.1:8080/prefix/\")\n+               .aggregate().toStringUtf8());\n+  ```\n+- You can now send and receive `grpc-web-text` messages in gRPC, as well as `grpc-web+proto` and\n+  `grpc-web+json`. #2938 #2955\n+  ```java\n+  MyGrpcServiceStub client =\n+      Clients.newClient(\"gproto-web-text+h2c://example.com\",\n+                        MyGrpcServiceStub.class);\n+  ```\n+- You can now send a request via an HAPROXY server preserving the original source and destination addresses.\n+  #2907\n+  ```java\n+  ClientFactory factory =\n+      ClientFactory.builder()\n+                   .proxyConfig(ProxyConfig.haproxy(haproxyServerAddr))\n+                   .build();\n+\n+  WebClient client =\n+      WebClient.builder()\n+               .factory(factory)\n+               .build();\n+\n+  // Send an HTTP request to example.com via an HAPROXY server,\n+  // preserving the source address by using HAPROXY protocol.\n+  client.get(\"http://example.com/\").aggregate().join();\n+  ```\n+- You can now use different <type://ProxyConfig> for different <typeplural://Endpoint> using\n+  <type://ProxyConfigSelector>. #2752\n+  ```java\n+  ProxyConfigSelector mySelector = (protocol, endpoint) -> {\n+      // Send the requests to *.foo.com via a SOCKS5 server.\n+      if (endpoint.host().endsWith(\".foo.com\")) {\n+          return ProxyConfig.socks5(socksServerAddr);\n+      }\n+      // Send the requests to *.bar.com via a HAPROXY server.\n+      if (endpoint.host().endsWith(\".bar.com\")) {\n+          return ProxyConfig.haproxy(haproxyServerAddr);\n+      }\n+      return ProxyConfig.direct();\n+  };\n+\n+  ClientFactory factory =\n+      ClientFactory.builder()\n+                   .proxyConfig(mySelector)\n+                   .build();\n+  ```\n+- Added <type://Route#patternString()> which can be used as a simple human-readable description of\n+  a <type://Route>. #2932 #2933\n+- <type://HttpData> now extends `AutoCloseable` and provides various methods useful when using\n+  <type://SubscriptionOption#WITH_POOLED_OBJECTS>. #2892\n+  - Note that this feature is only for the advanced users who wants to reduce the number of memory copies", "originalCommit": "9417091e53ebf125b25ee0ba2219532efa651798", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c9c6954709018af6660adf5e313959f110d80a3c", "url": "https://github.com/line/armeria/commit/c9c6954709018af6660adf5e313959f110d80a3c", "message": "Clean up the plugin", "committedDate": "2020-08-03T09:18:35Z", "type": "commit"}, {"oid": "bdd50894290bb978387963df1871e7171fc1c43e", "url": "https://github.com/line/armeria/commit/bdd50894290bb978387963df1871e7171fc1c43e", "message": "Grammar", "committedDate": "2020-08-03T09:23:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5OTAxNA==", "url": "https://github.com/line/armeria/pull/2963#discussion_r464299014", "bodyText": "amreria -> armeria", "author": "KarboniteKream", "createdAt": "2020-08-03T09:28:18Z", "path": "site/src/pages/release-notes/0.99.9.mdx", "diffHunk": "@@ -0,0 +1,239 @@\n+---\n+date: 2020-08-03\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now add multiple request timeout callbacks using the following methods: #2937 #2939\n+  - <type://ClientRequestContext#whenResponseTimingOut()>\n+  - <type://ClientRequestContext#whenResponseTimedOut()>\n+  - <type://ServiceRequestContext#whenRequestTimingOut()>\n+  - <type://ServiceRequestContext#whenRequestTimedOut()>\n+- You can now specify multiple decorators with a single call when building a service binding fluently. #2889\n+  ```java\n+  Server.builder()\n+        .route().get(\"/hello\")\n+                .decorators(firstDecorator,\n+                            secondDecorator,\n+                            thirdDecorator)\n+                .build(helloService)\n+        .build();\n+  ```\n+- You can now specify whether the entire annotated service methods has to run in a `blockingTaskExecutor`.\n+  #2923 #2925\n+  ```java\n+  Server.builder()\n+        .annotatedService().pathPrefix(\"/my_service\")\n+                           .useBlockingTaskExecutor(true)\n+                           .build(myService);\n+\n+  ```\n+- You can also specify the <type://@Blocking> annotation on a class. It was previously allowed only on methods.\n+  #2915\n+  ```java\n+  @Blocking\n+  public class MyBlockingAnnotatedService {\n+      @Get\n+      public String delayed() throws Exception {\n+          Thread.sleep(1000);\n+          return \"slept a second\";\n+      }\n+  }\n+  ```\n+- You can now bind an annotated service method to the prefix path by specifying no path. #2708 #2853\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get\n+      public String withoutSlash() {\n+          return \"without slash\";\n+      }\n+\n+      @Get(\"/\")\n+      public String withSlash() {\n+          return \"with slash\";\n+      }\n+  }\n+\n+  Server server =\n+      Server.builder()\n+            .http(8080)\n+            .annotatedService(\"/prefix\", new MyAnnotatedService())\n+            .build();\n+  server.start().join();\n+\n+  assert \"without slash\".equals(\n+      WebClient.of().get(\"http://127.0.0.1:8080/prefix\")\n+               .aggregate().toStringUtf8());\n+\n+  assert \"with slash\".equals(\n+      WebClient.of().get(\"http://127.0.0.1:8080/prefix/\")\n+               .aggregate().toStringUtf8());\n+  ```\n+- You can now send and receive `grpc-web-text` messages in gRPC, as well as `grpc-web+proto` and\n+  `grpc-web+json`. #2938 #2955\n+  ```java\n+  MyGrpcServiceStub client =\n+      Clients.newClient(\"gproto-web-text+h2c://example.com\",\n+                        MyGrpcServiceStub.class);\n+  ```\n+- You can now send a request via an HAPROXY server preserving the original source and destination addresses.\n+  #2907\n+  ```java\n+  ClientFactory factory =\n+      ClientFactory.builder()\n+                   .proxyConfig(ProxyConfig.haproxy(haproxyServerAddr))\n+                   .build();\n+\n+  WebClient client =\n+      WebClient.builder()\n+               .factory(factory)\n+               .build();\n+\n+  // Send an HTTP request to example.com via an HAPROXY server,\n+  // preserving the source address by using HAPROXY protocol.\n+  client.get(\"http://example.com/\").aggregate().join();\n+  ```\n+- You can now use different <type://ProxyConfig> for different <typeplural://Endpoint> using\n+  <type://ProxyConfigSelector>. #2752\n+  ```java\n+  ProxyConfigSelector mySelector = (protocol, endpoint) -> {\n+      // Send the requests to *.foo.com via a SOCKS5 server.\n+      if (endpoint.host().endsWith(\".foo.com\")) {\n+          return ProxyConfig.socks5(socksServerAddr);\n+      }\n+      // Send the requests to *.bar.com via a HAPROXY server.\n+      if (endpoint.host().endsWith(\".bar.com\")) {\n+          return ProxyConfig.haproxy(haproxyServerAddr);\n+      }\n+      return ProxyConfig.direct();\n+  };\n+\n+  ClientFactory factory =\n+      ClientFactory.builder()\n+                   .proxyConfig(mySelector)\n+                   .build();\n+  ```\n+- Added <type://Route#patternString()> which can be used as a simple human-readable description of\n+  a <type://Route>. #2932 #2933\n+- <type://HttpData> now extends `AutoCloseable` and provides various methods useful when using\n+  <type://SubscriptionOption#WITH_POOLED_OBJECTS>. #2892\n+  - Note that this feature is only for the advanced users who want to reduce the number of memory copies\n+    in a performance-sensitive environment.\n+  - See <type://PooledObjects> for more information.\n+\n+## \ud83d\udcc8 Improvements\n+\n+- We now use the following [Google Error Prone](https://errorprone.info/) annotations which might be useful\n+  if you use Error Prone already or your static analysis tool supports them: #2876 #2908\n+  - `@CheckReturnValue`\n+  - `@FormatMethod` and `@FormatString`\n+  - `@MustBeClosed`\n+- You can now specify the connection ping interval less than 10 seconds, which was previously impossible. #2944\n+- Improved the load distribution of client requests by randomizing how we choose the initial event loop,\n+  which may reduce the error rate in a certain situation. #2941\n+- Improved the performance of <type://Endpoint#toString()>. #2906\n+\n+## \ud83d\udee0\ufe0f Bug fixes\n+\n+- <type://ClientRequestContext#currentOrNull()> and <type://ServiceRequestContext#currentOrNull()> don't throw\n+  an `IllegalStateException` anymore but return `null` when the current context type mismatches. #2962\n+- <type://Endpoint#parse(String)> doesn't fail anymore when given with an authority with a userInfo part.\n+  #2869 #2893\n+- `req.serviceName` in <type://BuiltInProperties> has been renamed to `req.service_name` for the consistency\n+  with other property names. #2958\n+- We now handle an HTTP/2 request with a `Host` header properly, matching the behavior of HAPROXY. #2877 #2878\n+- You can now send an HTTPS request via an HTTPS CONNECT proxy server (double encryption). #2887\n+- Fixed the buffer leaks in the following places: \ud83d\ude31 #2891 #2892 #2951\n+  - <type://RetryingClient>\n+  - <type://CircuitBreakerClient>\n+  - `DefaultDnsNameResolver`\n+  - `DefaultStreamMessageDuplicator`\n+- You are now disallowed to set a `:status` header when building an `HttpFile`, because it will make\n+  `FileService` misbehave. #2926.\n+- Fixed an `IllegalReferenceCountException` when content preview is turned on. #2905\n+- gRPC-Web trailers are now compressed and decompressed properly. #2930\n+- You can now use the graceful shutdown properties when integration with Spring Boot 1. #2954\n+- You can now use <type://DocServiceConfigurator> when integrating with Spring Boot 2. #2960\n+- <type://MetricCollectingService> now decorates all services if the `armeria.enableMetrics` property is set\n+  when integrating with Spring Boot. #2873 #2898\n+\n+## \ud83c\udfda\ufe0f Deprecations\n+\n+- All option constants in <type://ClientOption> and <type://ClientFactoryOption> have been moved to\n+  <type://ClientOptions> and <type://ClientFactoryOptions> respectively. #2928\n+- Various implementation classes have been deprecated in favor of static factory methods: #2875 #2890\n+  - <type://MetricCollectingCircuitBreakerListener> \u2192 <type://CircuitBreakerListener#metricCollecting(MeterRegistry)>\n+  - <type://RateLimitingThrottlingStrategy> \u2192 <type://ThrottlingStrategy#rateLimiting(double)>\n+  - <type://ConnectionPoolLoggingListener> \u2192 <type://ConnectionPoolListener#logging()>\n+  - <type://StickyEndpointSelectionStrategy> \u2192 <type://EndpointSelectionStrategy#sticky(ToLongFunction)>\n+  - <type://TTextProtocol> \u2192 <type://TTextProtocolFactory#getProtocol(TTransport)>\n+- <type://Route#meterTag()> and <type://Route#loggerName()> have been deprecated in favor of\n+  <type://Route#patternString()>. #2933\n+- <type://ClientRequestContext#responseTimeoutHandler()>,\n+  <type://ClientRequestContext#setResponseTimeoutHandler(Runnable)>,\n+  <type://ServiceRequestContext#requestTimeoutHandler()> and\n+  <type://ServiceRequestContext#setRequestTimeoutHandler(Runnable)> have been deprecated in favor of\n+  <type://ClientRequestContext#whenResponseTimedOut()> and\n+  <type://ServiceRequestContext#whenRequestTimedOut()>. #2939\n+\n+## \u2622\ufe0f Breaking changes\n+\n+- Added `final` to the various classes and methods so that a user doesn't extend them beyond the devs'\n+  intention. #2927\n+- `com.linecorp.amreria.common.util.NonNullByDefault` and `UnstableApi` have been moved to", "originalCommit": "bdd50894290bb978387963df1871e7171fc1c43e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMwMDkyNA==", "url": "https://github.com/line/armeria/pull/2963#discussion_r464300924", "bodyText": "\ud83d\ude31", "author": "ikhoon", "createdAt": "2020-08-03T09:31:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5OTAxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMwMzgxMw==", "url": "https://github.com/line/armeria/pull/2963#discussion_r464303813", "bodyText": "\ud83d\ude05", "author": "trustin", "createdAt": "2020-08-03T09:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5OTAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5NDM2NA==", "url": "https://github.com/line/armeria/pull/2963#discussion_r464294364", "bodyText": "has -> have?", "author": "ikhoon", "createdAt": "2020-08-03T09:19:45Z", "path": "site/src/pages/release-notes/0.99.9.mdx", "diffHunk": "@@ -0,0 +1,239 @@\n+---\n+date: 2020-08-03\n+---\n+\n+## \ud83c\udf1f New features\n+\n+- You can now add multiple request timeout callbacks using the following methods: #2937 #2939\n+  - <type://ClientRequestContext#whenResponseTimingOut()>\n+  - <type://ClientRequestContext#whenResponseTimedOut()>\n+  - <type://ServiceRequestContext#whenRequestTimingOut()>\n+  - <type://ServiceRequestContext#whenRequestTimedOut()>\n+- You can now specify multiple decorators with a single call when building a service binding fluently. #2889\n+  ```java\n+  Server.builder()\n+        .route().get(\"/hello\")\n+                .decorators(firstDecorator,\n+                            secondDecorator,\n+                            thirdDecorator)\n+                .build(helloService)\n+        .build();\n+  ```\n+- You can now specify whether the entire annotated service methods has to run in a `blockingTaskExecutor`.", "originalCommit": "c9c6954709018af6660adf5e313959f110d80a3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1e722c42f1e292da22dd5cc32e8b5e17a6e65ef5", "url": "https://github.com/line/armeria/commit/1e722c42f1e292da22dd5cc32e8b5e17a6e65ef5", "message": "One more issue", "committedDate": "2020-08-03T09:35:06Z", "type": "commit"}, {"oid": "c858360e5997dfb581c4f70791ad865745db8157", "url": "https://github.com/line/armeria/commit/c858360e5997dfb581c4f70791ad865745db8157", "message": "Typos and grammar", "committedDate": "2020-08-03T09:37:29Z", "type": "commit"}, {"oid": "b34dd7bcd05caaf68c396424e62e01893c4d867d", "url": "https://github.com/line/armeria/commit/b34dd7bcd05caaf68c396424e62e01893c4d867d", "message": "Merge branch 'master' into release_note", "committedDate": "2020-08-03T11:24:20Z", "type": "commit"}]}