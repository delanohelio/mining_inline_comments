{"pr_number": 2546, "pr_title": "Allow setting example paths and queries for DocService", "pr_createdAt": "2020-03-02T12:55:20Z", "pr_url": "https://github.com/line/armeria/pull/2546", "timeline": [{"oid": "108a21d429a03f2b46884cf146105e95aa8c2180", "url": "https://github.com/line/armeria/commit/108a21d429a03f2b46884cf146105e95aa8c2180", "message": "Provide a way to set example paths and queries when building DocService\n\nMotivation:\n\nCurrently, a user cannot set example paths and queries. #2195\nThe endpoint path or queries are only set automatically when\nsharing a URL that contains `endpoint_path` or `queries` as params.\n\nModifications:\n\n- Add `examplePaths` to `DocService` and `DocServiceBuilder`\n- Add `exampleQueries` to `DocService` and `DocServiceBuilder`\n- Show `examplePath` if the `endpoint_path` is null and the `examplePath` is not null\n- Show `exampleQuery` if the `queries` is null and the `exampleQuery` is not null\n- Make `ENDPOINT PATH` input visible with readonlyif path type is exact\n\nResult:\nYou can now set an example path and queries for `DocService`", "committedDate": "2020-03-02T12:52:25Z", "type": "commit"}, {"oid": "cd0702874f5f96d77c1d1ecd2b0b21c7fb65c8c4", "url": "https://github.com/line/armeria/commit/cd0702874f5f96d77c1d1ecd2b0b21c7fb65c8c4", "message": "Allow adding multiple example paths and queries", "committedDate": "2020-03-03T07:03:28Z", "type": "commit"}, {"oid": "5825c196ee7a7ca94acc94243ce83e2a782b72c8", "url": "https://github.com/line/armeria/commit/5825c196ee7a7ca94acc94243ce83e2a782b72c8", "message": "Fix checkstyle and clean up", "committedDate": "2020-03-03T07:42:14Z", "type": "commit"}, {"oid": "23e5674b759a67aa24c42d91bc86d293ef81c780", "url": "https://github.com/line/armeria/commit/23e5674b759a67aa24c42d91bc86d293ef81c780", "message": "Clean up", "committedDate": "2020-03-03T07:51:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg0ODczMg==", "url": "https://github.com/line/armeria/pull/2546#discussion_r386848732", "bodyText": "This was already a bit crazy but now even more so probably needs param comments e.g., /* exampleHttpHeaders= */ ImmutableMap.of()", "author": "anuraaga", "createdAt": "2020-03-03T07:57:14Z", "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocService.java", "diffHunk": "@@ -108,14 +110,17 @@ public static DocServiceBuilder builder() {\n      * Creates a new instance.\n      */\n     public DocService() {\n-        this(ImmutableMap.of(), ImmutableMap.of(), ImmutableList.of(), DocServiceBuilder.ALL_SERVICES);\n+        this(ImmutableMap.of(), ImmutableMap.of(), ImmutableMap.of(),", "originalCommit": "23e5674b759a67aa24c42d91bc86d293ef81c780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg1NTI5MQ==", "url": "https://github.com/line/armeria/pull/2546#discussion_r386855291", "bodyText": "Let me add param comments.\ud83e\udd23\ud83d\ude48", "author": "ikhoon", "createdAt": "2020-03-03T08:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg0ODczMg=="}], "type": "inlineReview"}, {"oid": "a53840a980afc90a22a0dad05ccfd9533af6d0ad", "url": "https://github.com/line/armeria/commit/a53840a980afc90a22a0dad05ccfd9533af6d0ad", "message": "Add param comments", "committedDate": "2020-03-03T08:19:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3NDQ4MQ==", "url": "https://github.com/line/armeria/pull/2546#discussion_r387474481", "bodyText": "Out of curiosity: is there special meaning for a space after code?", "author": "hexoul", "createdAt": "2020-03-04T06:43:40Z", "path": "docs-client/src/containers/MethodPage/EndpointPath.tsx", "diffHunk": "@@ -37,15 +41,25 @@ const EndpointPath: React.FunctionComponent<Props> = (props) => (\n     <Typography variant=\"body2\" paragraph />\n     {props.endpointPathOpen && (\n       <>\n+        {props.examplePaths.length > 0 && (\n+          <>\n+            <Typography variant=\"body2\" paragraph />\n+            <Dropdown\n+              placeholder=\"Select an example path...\"\n+              options={props.examplePaths}\n+              onChange={props.onSelectedPathChange}\n+            />\n+          </>\n+        )}\n+        <Typography variant=\"body2\" paragraph />\n         <TextField\n-          multiline\n           fullWidth\n-          rows={1}\n-          value={props.endpointPath}\n+          value={props.additionalPath}\n           placeholder={endpointPathPlaceHolder}\n-          onChange={props.onEndpointPathChange}\n+          onChange={props.onPathFormChange}\n           inputProps={{\n-            className: 'code',\n+            readOnly: !props.editable,\n+            className: 'code ',", "originalCommit": "a53840a980afc90a22a0dad05ccfd9533af6d0ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5NjUxMw==", "url": "https://github.com/line/armeria/pull/2546#discussion_r387496513", "bodyText": "Oops... it's my mistake. thanks for catching it!", "author": "ikhoon", "createdAt": "2020-03-04T07:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3NDQ4MQ=="}], "type": "inlineReview"}, {"oid": "f5957e4f032966b3f7ea60dda340eb3cdebcb3b0", "url": "https://github.com/line/armeria/commit/f5957e4f032966b3f7ea60dda340eb3cdebcb3b0", "message": "Fix NPE", "committedDate": "2020-03-04T07:32:39Z", "type": "commit"}, {"oid": "10c9559d14cb062b437a566ba03e148ef33a51d3", "url": "https://github.com/line/armeria/commit/10c9559d14cb062b437a566ba03e148ef33a51d3", "message": "Address comments by @hexoul / Remove white space", "committedDate": "2020-03-04T07:56:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMwOTk3NA==", "url": "https://github.com/line/armeria/pull/2546#discussion_r388309974", "bodyText": "the specified example queries -> the specified example query strings ? (for clarity)", "author": "trustin", "createdAt": "2020-03-05T13:59:56Z", "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java", "diffHunk": "@@ -183,6 +185,90 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN\n         return this;\n     }\n \n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName, String... examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName, String... examplePaths) {\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        return examplePaths(serviceName, methodName, ImmutableList.copyOf(examplePaths));\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        checkArgument(!serviceName.isEmpty(), \"serviceName is empty.\");\n+        requireNonNull(methodName, \"methodName\");\n+        checkArgument(!methodName.isEmpty(), \"methodName is empty.\");\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        for (String examplePath : examplePaths) {\n+            requireNonNull(examplePath, \"examplePaths contains null\");\n+            this.examplePaths.computeIfAbsent(serviceName, unused -> ArrayListMultimap.create())\n+                             .put(methodName, examplePath);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified example queries for the method with the specified service and method name.", "originalCommit": "10c9559d14cb062b437a566ba03e148ef33a51d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxMDA5Mg==", "url": "https://github.com/line/armeria/pull/2546#discussion_r388310092", "bodyText": "queries -> queryStrings ?", "author": "trustin", "createdAt": "2020-03-05T14:00:08Z", "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java", "diffHunk": "@@ -183,6 +185,90 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN\n         return this;\n     }\n \n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName, String... examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName, String... examplePaths) {\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        return examplePaths(serviceName, methodName, ImmutableList.copyOf(examplePaths));\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        checkArgument(!serviceName.isEmpty(), \"serviceName is empty.\");\n+        requireNonNull(methodName, \"methodName\");\n+        checkArgument(!methodName.isEmpty(), \"methodName is empty.\");\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        for (String examplePath : examplePaths) {\n+            requireNonNull(examplePath, \"examplePaths contains null\");\n+            this.examplePaths.computeIfAbsent(serviceName, unused -> ArrayListMultimap.create())\n+                             .put(methodName, examplePath);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified example queries for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder exampleQueries(Class<?> serviceType, String methodName, String... queries) {", "originalCommit": "10c9559d14cb062b437a566ba03e148ef33a51d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxNDUxNw==", "url": "https://github.com/line/armeria/pull/2546#discussion_r388314517", "bodyText": "How about validating all paths and query strings, using PathAndQuery and QueryParams.fromQueryString()?", "author": "trustin", "createdAt": "2020-03-05T14:07:48Z", "path": "core/src/main/java/com/linecorp/armeria/server/docs/MethodInfo.java", "diffHunk": "@@ -108,6 +114,8 @@ public MethodInfo(String name,\n         this.exampleHttpHeaders = ImmutableList.copyOf(requireNonNull(exampleHttpHeaders,\n                                                                       \"exampleHttpHeaders\"));\n         this.exampleRequests = ImmutableList.copyOf(requireNonNull(exampleRequests, \"exampleRequests\"));\n+        this.examplePaths = ImmutableList.copyOf(requireNonNull(examplePaths, \"examplePaths\"));\n+        this.exampleQueries = ImmutableList.copyOf(requireNonNull(exampleQueries, \"exampleQueries\"));", "originalCommit": "10c9559d14cb062b437a566ba03e148ef33a51d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDYzNg==", "url": "https://github.com/line/armeria/pull/2546#discussion_r389574636", "bodyText": "This is not addressed yet.", "author": "trustin", "createdAt": "2020-03-09T10:28:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxNDUxNw=="}], "type": "inlineReview"}, {"oid": "a1597274e1bf0fa4ca028f3730f745873c86f6d9", "url": "https://github.com/line/armeria/commit/a1597274e1bf0fa4ca028f3730f745873c86f6d9", "message": "Address comments by @trustin", "committedDate": "2020-03-06T09:12:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3Mzg3MQ==", "url": "https://github.com/line/armeria/pull/2546#discussion_r389573871", "bodyText": "queries -> queryStrings", "author": "trustin", "createdAt": "2020-03-09T10:26:48Z", "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java", "diffHunk": "@@ -183,6 +186,95 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN\n         return this;\n     }\n \n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName, String... examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName, String... examplePaths) {\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        return examplePaths(serviceName, methodName, ImmutableList.copyOf(examplePaths));\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        checkArgument(!serviceName.isEmpty(), \"serviceName is empty.\");\n+        requireNonNull(methodName, \"methodName\");\n+        checkArgument(!methodName.isEmpty(), \"methodName is empty.\");\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        for (String examplePath : examplePaths) {\n+            requireNonNull(examplePath, \"examplePaths contains null\");\n+            examplePaths.forEach(path -> checkArgument(PathAndQuery.parse(path) != null,\n+                                                       \"examplePaths contain an invalid path: {}\", path));\n+            this.examplePaths.computeIfAbsent(serviceName, unused -> ArrayListMultimap.create())\n+                             .put(methodName, examplePath);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified example query strings for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder exampleQueries(Class<?> serviceType, String methodName, String... queryStrings) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return exampleQueries(serviceType.getName(), methodName, queryStrings);\n+    }\n+\n+    /**\n+     * Adds the specified example query strings for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder exampleQueries(Class<?> serviceType, String methodName, Iterable<String> queries) {", "originalCommit": "a1597274e1bf0fa4ca028f3730f745873c86f6d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3MzkxMw==", "url": "https://github.com/line/armeria/pull/2546#discussion_r389573913", "bodyText": "queries -> queryStrings", "author": "trustin", "createdAt": "2020-03-09T10:26:52Z", "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java", "diffHunk": "@@ -183,6 +186,95 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN\n         return this;\n     }\n \n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName, String... examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName, String... examplePaths) {\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        return examplePaths(serviceName, methodName, ImmutableList.copyOf(examplePaths));\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceName, \"serviceName\");\n+        checkArgument(!serviceName.isEmpty(), \"serviceName is empty.\");\n+        requireNonNull(methodName, \"methodName\");\n+        checkArgument(!methodName.isEmpty(), \"methodName is empty.\");\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        for (String examplePath : examplePaths) {\n+            requireNonNull(examplePath, \"examplePaths contains null\");\n+            examplePaths.forEach(path -> checkArgument(PathAndQuery.parse(path) != null,\n+                                                       \"examplePaths contain an invalid path: {}\", path));\n+            this.examplePaths.computeIfAbsent(serviceName, unused -> ArrayListMultimap.create())\n+                             .put(methodName, examplePath);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Adds the specified example query strings for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder exampleQueries(Class<?> serviceType, String methodName, String... queryStrings) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return exampleQueries(serviceType.getName(), methodName, queryStrings);\n+    }\n+\n+    /**\n+     * Adds the specified example query strings for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder exampleQueries(Class<?> serviceType, String methodName, Iterable<String> queries) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return exampleQueries(serviceType.getName(), methodName, queries);\n+    }\n+\n+    /**\n+     * Adds the specified example query strings for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder exampleQueries(String serviceName, String methodName, String... queryStrings) {\n+        requireNonNull(queryStrings, \"queryStrings\");\n+        return exampleQueries(serviceName, methodName, ImmutableList.copyOf(queryStrings));\n+    }\n+\n+    /**\n+     * Adds the specified example query strings for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder exampleQueries(String serviceName, String methodName, Iterable<String> queries) {", "originalCommit": "a1597274e1bf0fa4ca028f3730f745873c86f6d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDIzNw==", "url": "https://github.com/line/armeria/pull/2546#discussion_r389574237", "bodyText": "paths? (like queryStrings below)", "author": "trustin", "createdAt": "2020-03-09T10:27:29Z", "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java", "diffHunk": "@@ -183,6 +186,95 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN\n         return this;\n     }\n \n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName, String... examplePaths) {", "originalCommit": "a1597274e1bf0fa4ca028f3730f745873c86f6d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDI3Ng==", "url": "https://github.com/line/armeria/pull/2546#discussion_r389574276", "bodyText": "paths? (like queryStrings below)", "author": "trustin", "createdAt": "2020-03-09T10:27:33Z", "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java", "diffHunk": "@@ -183,6 +186,95 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN\n         return this;\n     }\n \n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName, String... examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName,\n+                                          Iterable<String> examplePaths) {", "originalCommit": "a1597274e1bf0fa4ca028f3730f745873c86f6d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDM2NA==", "url": "https://github.com/line/armeria/pull/2546#discussion_r389574364", "bodyText": "paths? (like queryStrings below)", "author": "trustin", "createdAt": "2020-03-09T10:27:46Z", "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java", "diffHunk": "@@ -183,6 +186,95 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN\n         return this;\n     }\n \n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName, String... examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName, String... examplePaths) {", "originalCommit": "a1597274e1bf0fa4ca028f3730f745873c86f6d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3NDQyMw==", "url": "https://github.com/line/armeria/pull/2546#discussion_r389574423", "bodyText": "paths? (like queryStrings below)", "author": "trustin", "createdAt": "2020-03-09T10:27:51Z", "path": "core/src/main/java/com/linecorp/armeria/server/docs/DocServiceBuilder.java", "diffHunk": "@@ -183,6 +186,95 @@ private DocServiceBuilder exampleHttpHeaders0(String serviceName, String methodN\n         return this;\n     }\n \n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName, String... examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(Class<?> serviceType, String methodName,\n+                                          Iterable<String> examplePaths) {\n+        requireNonNull(serviceType, \"serviceType\");\n+        return examplePaths(serviceType.getName(), methodName, examplePaths);\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName, String... examplePaths) {\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        return examplePaths(serviceName, methodName, ImmutableList.copyOf(examplePaths));\n+    }\n+\n+    /**\n+     * Adds the specified example paths for the method with the specified service and method name.\n+     */\n+    public DocServiceBuilder examplePaths(String serviceName, String methodName,\n+                                          Iterable<String> examplePaths) {", "originalCommit": "a1597274e1bf0fa4ca028f3730f745873c86f6d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "773418ffe0052414485761a06f07ada9610a8a8a", "url": "https://github.com/line/armeria/commit/773418ffe0052414485761a06f07ada9610a8a8a", "message": "Address comments by @trustin", "committedDate": "2020-03-09T11:12:39Z", "type": "commit"}, {"oid": "908e99eff3202789c6b3bde5eb90f99e85d01e4a", "url": "https://github.com/line/armeria/commit/908e99eff3202789c6b3bde5eb90f99e85d01e4a", "message": "Address comments by @trustin / Use normalized path and queryString", "committedDate": "2020-03-09T12:56:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2ODUxMw==", "url": "https://github.com/line/armeria/pull/2546#discussion_r390068513", "bodyText": "{} -> %s", "author": "trustin", "createdAt": "2020-03-10T02:54:19Z", "path": "core/src/main/java/com/linecorp/armeria/server/docs/MethodInfo.java", "diffHunk": "@@ -117,16 +118,25 @@ public MethodInfo(String name,\n                                                                       \"exampleHttpHeaders\"));\n         this.exampleRequests = ImmutableList.copyOf(requireNonNull(exampleRequests, \"exampleRequests\"));\n \n-        this.examplePaths = ImmutableList.copyOf(requireNonNull(examplePaths, \"examplePaths\"));\n-        this.examplePaths.forEach(path -> checkArgument(PathAndQuery.parse(path) != null,\n-                                                        \"examplePaths contains an invalid path: {}\", path));\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        final ImmutableList.Builder<String> examplePathsBuilder =\n+                ImmutableList.builderWithExpectedSize(Iterables.size(examplePaths));\n+        for (String path : examplePaths) {\n+            final PathAndQuery pathAndQuery = PathAndQuery.parse(path);\n+            checkArgument(pathAndQuery != null, \"examplePaths contains an invalid path: {}\", path);", "originalCommit": "908e99eff3202789c6b3bde5eb90f99e85d01e4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3Mjk2MQ==", "url": "https://github.com/line/armeria/pull/2546#discussion_r390072961", "bodyText": "\ufffdOops...", "author": "ikhoon", "createdAt": "2020-03-10T03:12:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2ODUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2ODUzNg==", "url": "https://github.com/line/armeria/pull/2546#discussion_r390068536", "bodyText": "{} -> %s", "author": "trustin", "createdAt": "2020-03-10T02:54:26Z", "path": "core/src/main/java/com/linecorp/armeria/server/docs/MethodInfo.java", "diffHunk": "@@ -117,16 +118,25 @@ public MethodInfo(String name,\n                                                                       \"exampleHttpHeaders\"));\n         this.exampleRequests = ImmutableList.copyOf(requireNonNull(exampleRequests, \"exampleRequests\"));\n \n-        this.examplePaths = ImmutableList.copyOf(requireNonNull(examplePaths, \"examplePaths\"));\n-        this.examplePaths.forEach(path -> checkArgument(PathAndQuery.parse(path) != null,\n-                                                        \"examplePaths contains an invalid path: {}\", path));\n+        requireNonNull(examplePaths, \"examplePaths\");\n+        final ImmutableList.Builder<String> examplePathsBuilder =\n+                ImmutableList.builderWithExpectedSize(Iterables.size(examplePaths));\n+        for (String path : examplePaths) {\n+            final PathAndQuery pathAndQuery = PathAndQuery.parse(path);\n+            checkArgument(pathAndQuery != null, \"examplePaths contains an invalid path: {}\", path);\n+            examplePathsBuilder.add(pathAndQuery.path());\n+        }\n+        this.examplePaths = examplePathsBuilder.build();\n \n-        this.exampleQueries = ImmutableList.copyOf(requireNonNull(exampleQueries, \"exampleQueries\"));\n-        this.exampleQueries.forEach(query -> {\n+        requireNonNull(exampleQueries, \"exampleQueries\");\n+        final ImmutableList.Builder<String> exampleQueriesBuilder =\n+                ImmutableList.builderWithExpectedSize(Iterables.size(exampleQueries));\n+        for (String query : exampleQueries) {\n             final PathAndQuery pathAndQuery = PathAndQuery.parse(query.startsWith(\"?\") ? query : '?' + query);\n-            checkArgument(pathAndQuery != null,\n-                          \"exampleQueries contains an invalid query string: {}\", query);\n-        });\n+            checkArgument(pathAndQuery != null, \"exampleQueries contains an invalid query string: {}\", query);", "originalCommit": "908e99eff3202789c6b3bde5eb90f99e85d01e4a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "10d07ee593d20e2e9eb3a86e4421874f0410e707", "url": "https://github.com/line/armeria/commit/10d07ee593d20e2e9eb3a86e4421874f0410e707", "message": "Address comments by @trustin / Preserve the original queryString", "committedDate": "2020-03-10T03:26:43Z", "type": "commit"}, {"oid": "45826bb77486b7cea0539c5504113144b7e46844", "url": "https://github.com/line/armeria/commit/45826bb77486b7cea0539c5504113144b7e46844", "message": "Preserve original queryString in DocService client", "committedDate": "2020-03-10T03:40:38Z", "type": "commit"}]}