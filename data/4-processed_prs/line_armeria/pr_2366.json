{"pr_number": 2366, "pr_title": "Warn when pushing a wrong context using ContextFuture", "pr_createdAt": "2020-01-03T09:50:20Z", "pr_url": "https://github.com/line/armeria/pull/2366", "timeline": [{"oid": "6c938d304f6db92b2d85712ecd61682ef3876e1a", "url": "https://github.com/line/armeria/commit/6c938d304f6db92b2d85712ecd61682ef3876e1a", "message": "Warn when pushing a wrong context using RequestContextAwareCompletableFuture\nMotivation:\nRelated #2173\n\nIn that case, which is trying to push a wrong context when the current thread had an unrelated context already, the `RequestContextAwareCompletableFuture` just swallows the exception and a user has no way what is going wrong.\n\nModification:\n- Leave a warning log every time a wrong context is pushed to let the user something is going wrong.\n\nResult:\n- You can now easily get noticed when pushing a wrong context.\n- Close #2173", "committedDate": "2020-01-03T09:49:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1MzQ5NA==", "url": "https://github.com/line/armeria/pull/2366#discussion_r362753494", "bodyText": "This is not called because in exceptionally, pushing with a wrong context happens as well.\nI'm wondering we should mitigate this by not pushing the context in exceptionally. \ud83e\udd14", "author": "minwoox", "createdAt": "2020-01-03T09:52:47Z", "path": "core/src/test/java/com/linecorp/armeria/internal/ContextFutureCallbackArgumentsProvider.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiConsumer;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.ArgumentsProvider;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+\n+public class ContextFutureCallbackArgumentsProvider implements ArgumentsProvider {\n+\n+    @Override\n+    public Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {\n+        final Arguments thenApply = Arguments.of(\n+                (BiConsumer<CompletableFuture<?>, AtomicBoolean>) (future, called) -> {\n+                    future.thenApply(res -> {\n+                        called.set(true);\n+                        return null;\n+                    }).exceptionally(cause -> {\n+                        called.set(true);", "originalCommit": "6c938d304f6db92b2d85712ecd61682ef3876e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1ODA5MA==", "url": "https://github.com/line/armeria/pull/2366#discussion_r362758090", "bodyText": "That's a good question. \ud83e\udd14\nIt is also possible that a user tries to handle an exception using handle or whenComplete, so I think it's not a good idea to handle exceptionally exceptionally. (pun intended \ud83d\ude06) i.e. I can't think of a good solution other than just logging.", "author": "trustin", "createdAt": "2020-01-03T10:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1MzQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc2MTY3Ng==", "url": "https://github.com/line/armeria/pull/2366#discussion_r362761676", "bodyText": "\ud83d\ude06", "author": "minwoox", "createdAt": "2020-01-03T10:21:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1MzQ5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NjI1NA==", "url": "https://github.com/line/armeria/pull/2366#discussion_r362756254", "bodyText": "Could we make it much shorter? It will increase the amount of our logs by large margin.", "author": "trustin", "createdAt": "2020-01-03T10:02:38Z", "path": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java", "diffHunk": "@@ -545,7 +545,10 @@ public String toString() {\n             return strVal;\n         }\n \n-        final StringBuilder buf = new StringBuilder(96);\n+        final StringBuilder buf = new StringBuilder(117);\n+        buf.append('[')\n+           .append(ClientRequestContext.class.getSimpleName())\n+           .append(']');", "originalCommit": "6c938d304f6db92b2d85712ecd61682ef3876e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NzY1Nw==", "url": "https://github.com/line/armeria/pull/2366#discussion_r362757657", "bodyText": "Then how about [ClientCtx]? or [Client]? I really wish to know whether the context is ClientRequestContext or ServiceRequestContext from the logs. \ud83e\udd14", "author": "minwoox", "createdAt": "2020-01-03T10:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NjI1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNjMwMQ==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363026301", "bodyText": "Changed to [ClientCtx] and [ServiceCtx]", "author": "minwoox", "createdAt": "2020-01-04T09:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NjI1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE0Mzk4Mg==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363143982", "bodyText": "How about shortening even more, like [C] and [S]?", "author": "trustin", "createdAt": "2020-01-06T03:03:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NjI1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE0NjIwMg==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363146202", "bodyText": "It's fine for me. Let me change that. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-01-06T03:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NjI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NjQ3Mg==", "url": "https://github.com/line/armeria/pull/2366#discussion_r362756472", "bodyText": "Could extract into a new method and deduplicate", "author": "trustin", "createdAt": "2020-01-03T10:03:27Z", "path": "core/src/main/java/com/linecorp/armeria/internal/AbstractRequestContextAwareCompletableFuture.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+/**\n+ * A base class for {@link CompletableFuture} which pushing {@link RequestContext} into the thread-local\n+ * when executes callbacks.\n+ */\n+public abstract class AbstractRequestContextAwareCompletableFuture<T> extends CompletableFuture<T> {\n+\n+    private static final Logger logger =\n+            LoggerFactory.getLogger(AbstractRequestContextAwareCompletableFuture.class);\n+\n+    private final RequestContext ctx;\n+\n+    protected AbstractRequestContextAwareCompletableFuture(RequestContext ctx) {\n+        this.ctx = ctx;\n+    }\n+\n+    protected RequestContext ctx() {\n+        return ctx;\n+    }\n+\n+    protected Runnable makeContextAwareLoggingException(Runnable runnable) {\n+        requireNonNull(runnable, \"runnable\");\n+        return () -> {\n+            try (SafeCloseable ignored = ctx.push()) {\n+                runnable.run();\n+            } catch (Throwable th) {\n+                logger.warn(\"An error occurred when pushing a context\", th);\n+                throw th;", "originalCommit": "6c938d304f6db92b2d85712ecd61682ef3876e1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNjI5Mw==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363026293", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-01-04T09:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NjQ3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1NjY3Nw==", "url": "https://github.com/line/armeria/pull/2366#discussion_r362756677", "bodyText": "Ditto", "author": "trustin", "createdAt": "2020-01-03T10:04:10Z", "path": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java", "diffHunk": "@@ -584,7 +584,10 @@ public String toString() {\n             return strVal;\n         }\n \n-        final StringBuilder buf = new StringBuilder(96);\n+        final StringBuilder buf = new StringBuilder(119);\n+        buf.append('[')\n+           .append(ServiceRequestContext.class.getSimpleName())\n+           .append(']');", "originalCommit": "6c938d304f6db92b2d85712ecd61682ef3876e1a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ef3ee2105f2fa1e7a9b4ad9425e41ef6fe75114e", "url": "https://github.com/line/armeria/commit/ef3ee2105f2fa1e7a9b4ad9425e41ef6fe75114e", "message": "Address comments by @trustin`", "committedDate": "2020-01-03T16:36:54Z", "type": "commit"}, {"oid": "3780cf8cca46aa8bec4df98ed17ec5efe05e6332", "url": "https://github.com/line/armeria/commit/3780cf8cca46aa8bec4df98ed17ec5efe05e6332", "message": "Fix", "committedDate": "2020-01-04T09:47:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MDgwMA==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363070800", "bodyText": "Ah here's where I first saw the pattern - see my comment here #2371 (comment)\nUsing return instead of throw doesn't seem to improve verbosity but makes the code much less readable.", "author": "anuraaga", "createdAt": "2020-01-05T05:37:36Z", "path": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java", "diffHunk": "@@ -351,10 +352,7 @@ default SafeCloseable push(boolean runCallbacks) {\n \n         // Put the oldCtx back before throwing an exception.\n         RequestContextThreadLocal.set(oldCtx);\n-        throw new IllegalStateException(\n-                \"Trying to call object wrapped with context \" + this + \", but context is currently \" +\n-                \"set to \" + oldCtx + \". This means the callback was called from \" +\n-                \"unexpected thread or forgetting to close previous context.\");\n+        return throwIllegalContextPushing(this, oldCtx);", "originalCommit": "3780cf8cca46aa8bec4df98ed17ec5efe05e6332", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEzNDk3OQ==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363134979", "bodyText": "Yes, it's now much readable. Thanks!", "author": "minwoox", "createdAt": "2020-01-06T01:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MDgwMA=="}], "type": "inlineReview"}, {"oid": "edf840debf98c182523d5450b00c01db1a9231ed", "url": "https://github.com/line/armeria/commit/edf840debf98c182523d5450b00c01db1a9231ed", "message": "Address the comment by @anuraaga", "committedDate": "2020-01-06T01:48:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEzMzg0OA==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363133848", "bodyText": "I'm not an expert here. So...\nQuestion: Is there any chance the runnable throws an exception?\nIf throws, I think we need to update the message like:\nAn error occurred when pushing a context and executing the 'Runnable'\nOr should we catch only the throwIllegalContextPushing?", "author": "ikhoon", "createdAt": "2020-01-06T01:37:38Z", "path": "core/src/main/java/com/linecorp/armeria/internal/AbstractRequestContextAwareCompletableFuture.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.linecorp.armeria.internal;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.linecorp.armeria.common.RequestContext;\n+import com.linecorp.armeria.common.util.SafeCloseable;\n+\n+/**\n+ * A base class for {@link CompletableFuture} which pushing {@link RequestContext} into the thread-local\n+ * when executes callbacks.\n+ */\n+public abstract class AbstractRequestContextAwareCompletableFuture<T> extends CompletableFuture<T> {\n+\n+    private static final Logger logger =\n+            LoggerFactory.getLogger(AbstractRequestContextAwareCompletableFuture.class);\n+\n+    private final RequestContext ctx;\n+\n+    protected AbstractRequestContextAwareCompletableFuture(RequestContext ctx) {\n+        this.ctx = ctx;\n+    }\n+\n+    protected RequestContext ctx() {\n+        return ctx;\n+    }\n+\n+    protected Runnable makeContextAwareLoggingException(Runnable runnable) {\n+        requireNonNull(runnable, \"runnable\");\n+        return () -> {\n+            makeContextAwareLoggingException0(runnable);\n+        };\n+    }\n+\n+    protected <I> Consumer<I> makeContextAwareLoggingException(Consumer<I> action) {\n+        requireNonNull(action, \"action\");\n+        return t -> makeContextAwareLoggingException0(() -> action.accept(t));\n+    }\n+\n+    protected <I, U> BiConsumer<I, U> makeContextAwareLoggingException(BiConsumer<I, U> action) {\n+        requireNonNull(action, \"action\");\n+        return (t, u) -> makeContextAwareLoggingException0(() -> action.accept(t, u));\n+    }\n+\n+    protected <V> Supplier<V> makeContextAwareLoggingException(Supplier<? extends V> action) {\n+        requireNonNull(action, \"action\");\n+        return () -> makeContextAwareLoggingException0(action);\n+    }\n+\n+    protected <I, R> Function<I, R> makeContextAwareLoggingException(Function<I, R> function) {\n+        requireNonNull(function, \"function\");\n+        return t -> makeContextAwareLoggingException0(() -> function.apply(t));\n+    }\n+\n+    protected <I, U, V> BiFunction<I, U, V> makeContextAwareLoggingException(BiFunction<I, U, V> function) {\n+        requireNonNull(function, \"function\");\n+        return (t, u) -> makeContextAwareLoggingException0(() -> function.apply(t, u));\n+    }\n+\n+    private void makeContextAwareLoggingException0(Runnable runnable) {\n+        try (SafeCloseable ignored = ctx.push()) {\n+            runnable.run();\n+        } catch (Throwable th) {\n+            logger.warn(\"An error occurred when pushing a context\", th);", "originalCommit": "3780cf8cca46aa8bec4df98ed17ec5efe05e6332", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEzOTc1MQ==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363139751", "bodyText": "That's a good point. Let me update the message. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-01-06T02:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEzMzg0OA=="}], "type": "inlineReview"}, {"oid": "35bbeb553d5156519b9b2c0db0fc284b0295668c", "url": "https://github.com/line/armeria/commit/35bbeb553d5156519b9b2c0db0fc284b0295668c", "message": "Address comments by @trustin and @ikhoon", "committedDate": "2020-01-06T03:37:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1NDE5Nw==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363154197", "bodyText": "We should not log exceptions raised by .run()\nfinal SafeCloseable handle;\ntry {\n    handle = ctx.push();\n} catch (Throwable t) {\n    logger.warn(...);\n    Exceptions.throwUnsafely(t);\n    return;\n}\n\ntry {\n    action.run();\n} finally {\n    handle.close();\n}", "author": "trustin", "createdAt": "2020-01-06T04:22:02Z", "path": "core/src/main/java/com/linecorp/armeria/internal/AbstractRequestContextAwareCompletableFuture.java", "diffHunk": "@@ -67,35 +67,35 @@ protected Runnable makeContextAwareLoggingException(Runnable runnable) {\n         return (t, u) -> makeContextAwareLoggingException0(() -> action.accept(t, u));\n     }\n \n-    protected <V> Supplier<V> makeContextAwareLoggingException(Supplier<? extends V> action) {\n-        requireNonNull(action, \"action\");\n-        return () -> makeContextAwareLoggingException0(action);\n+    protected <V> Supplier<V> makeContextAwareLoggingException(Supplier<? extends V> supplier) {\n+        requireNonNull(supplier, \"supplier\");\n+        return () -> makeContextAwareLoggingException0(supplier);\n     }\n \n-    protected <I, R> Function<I, R> makeContextAwareLoggingException(Function<I, R> function) {\n-        requireNonNull(function, \"function\");\n-        return t -> makeContextAwareLoggingException0(() -> function.apply(t));\n+    protected <I, R> Function<I, R> makeContextAwareLoggingException(Function<I, R> fn) {\n+        requireNonNull(fn, \"fn\");\n+        return t -> makeContextAwareLoggingException0(() -> fn.apply(t));\n     }\n \n-    protected <I, U, V> BiFunction<I, U, V> makeContextAwareLoggingException(BiFunction<I, U, V> function) {\n-        requireNonNull(function, \"function\");\n-        return (t, u) -> makeContextAwareLoggingException0(() -> function.apply(t, u));\n+    protected <I, U, V> BiFunction<I, U, V> makeContextAwareLoggingException(BiFunction<I, U, V> fn) {\n+        requireNonNull(fn, \"fn\");\n+        return (t, u) -> makeContextAwareLoggingException0(() -> fn.apply(t, u));\n     }\n \n-    private void makeContextAwareLoggingException0(Runnable runnable) {\n+    private void makeContextAwareLoggingException0(Runnable action) {\n         try (SafeCloseable ignored = ctx.push()) {\n-            runnable.run();\n+            action.run();\n         } catch (Throwable th) {\n-            logger.warn(\"An error occurred when pushing a context\", th);\n+            logger.warn(\"An error occurred when pushing a context and executing the action\", th);\n             throw th;\n         }", "originalCommit": "35bbeb553d5156519b9b2c0db0fc284b0295668c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1NDIzMA==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363154230", "bodyText": "Ditto", "author": "trustin", "createdAt": "2020-01-06T04:22:20Z", "path": "core/src/main/java/com/linecorp/armeria/internal/AbstractRequestContextAwareCompletableFuture.java", "diffHunk": "@@ -67,35 +67,35 @@ protected Runnable makeContextAwareLoggingException(Runnable runnable) {\n         return (t, u) -> makeContextAwareLoggingException0(() -> action.accept(t, u));\n     }\n \n-    protected <V> Supplier<V> makeContextAwareLoggingException(Supplier<? extends V> action) {\n-        requireNonNull(action, \"action\");\n-        return () -> makeContextAwareLoggingException0(action);\n+    protected <V> Supplier<V> makeContextAwareLoggingException(Supplier<? extends V> supplier) {\n+        requireNonNull(supplier, \"supplier\");\n+        return () -> makeContextAwareLoggingException0(supplier);\n     }\n \n-    protected <I, R> Function<I, R> makeContextAwareLoggingException(Function<I, R> function) {\n-        requireNonNull(function, \"function\");\n-        return t -> makeContextAwareLoggingException0(() -> function.apply(t));\n+    protected <I, R> Function<I, R> makeContextAwareLoggingException(Function<I, R> fn) {\n+        requireNonNull(fn, \"fn\");\n+        return t -> makeContextAwareLoggingException0(() -> fn.apply(t));\n     }\n \n-    protected <I, U, V> BiFunction<I, U, V> makeContextAwareLoggingException(BiFunction<I, U, V> function) {\n-        requireNonNull(function, \"function\");\n-        return (t, u) -> makeContextAwareLoggingException0(() -> function.apply(t, u));\n+    protected <I, U, V> BiFunction<I, U, V> makeContextAwareLoggingException(BiFunction<I, U, V> fn) {\n+        requireNonNull(fn, \"fn\");\n+        return (t, u) -> makeContextAwareLoggingException0(() -> fn.apply(t, u));\n     }\n \n-    private void makeContextAwareLoggingException0(Runnable runnable) {\n+    private void makeContextAwareLoggingException0(Runnable action) {\n         try (SafeCloseable ignored = ctx.push()) {\n-            runnable.run();\n+            action.run();\n         } catch (Throwable th) {\n-            logger.warn(\"An error occurred when pushing a context\", th);\n+            logger.warn(\"An error occurred when pushing a context and executing the action\", th);\n             throw th;\n         }\n     }\n \n-    private <V> V makeContextAwareLoggingException0(Supplier<? extends V> action) {\n+    private <V> V makeContextAwareLoggingException0(Supplier<? extends V> fn) {\n         try (SafeCloseable ignored = ctx.push()) {\n-            return action.get();\n+            return fn.get();\n         } catch (Throwable th) {\n-            logger.warn(\"An error occurred when pushing a context\", th);\n+            logger.warn(\"An error occurred when pushing a context and executing the fn\", th);\n             throw th;\n         }", "originalCommit": "35bbeb553d5156519b9b2c0db0fc284b0295668c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1NDM3Mw==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363154373", "bodyText": "Could you make it a top-level class and make it part of common package?", "author": "trustin", "createdAt": "2020-01-06T04:23:34Z", "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "diffHunk": "@@ -87,5 +87,20 @@ public static SafeCloseable pushWithRootAndOldCtx(ClientRequestContext currentCt\n         }\n     }\n \n+    /**\n+     * An {@link IllegalStateException} which is raised when pushing a context from the unexpected thread\n+     * or forgetting to close the previous context.\n+     */\n+    public static final class IllegalContextPushingException extends IllegalStateException {", "originalCommit": "35bbeb553d5156519b9b2c0db0fc284b0295668c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4MzI4Mg==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363183282", "bodyText": "So If I change just to return the IllegalStateException from the previous method, I don't have to declare this new exception type. And I think we don't have to have this another exception, especially for this case. (Sorry I made this class because I misunderstood the comment. \ud83d\ude4f) Do you think we still need this?", "author": "minwoox", "createdAt": "2020-01-06T07:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1NDM3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI5MTkxOQ==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363291919", "bodyText": "Nope. Let's continue using IllegalStateException.", "author": "trustin", "createdAt": "2020-01-06T13:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1NDM3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1NDY0MA==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363154640", "bodyText": "Now that we have a dedicated exception type, we could add getters for the two contexts? We could also simplify the exception message and add more details to the class Javadoc.", "author": "trustin", "createdAt": "2020-01-06T04:25:59Z", "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "diffHunk": "@@ -87,5 +87,20 @@ public static SafeCloseable pushWithRootAndOldCtx(ClientRequestContext currentCt\n         }\n     }\n \n+    /**\n+     * An {@link IllegalStateException} which is raised when pushing a context from the unexpected thread\n+     * or forgetting to close the previous context.\n+     */\n+    public static final class IllegalContextPushingException extends IllegalStateException {\n+\n+        private static final long serialVersionUID = 5431942355463120798L;\n+\n+        public IllegalContextPushingException(RequestContext newCtx, RequestContext oldCtx) {\n+            super(\"Trying to call object wrapped with context \" + newCtx + \", but context is currently \" +\n+                  \"set to \" + oldCtx + \". This means the callback was called from \" +\n+                  \"unexpected thread or forgetting to close previous context.\");", "originalCommit": "35bbeb553d5156519b9b2c0db0fc284b0295668c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1ODU0MQ==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363158541", "bodyText": "This type looks good but just to clarify, I was just expecting the old factory method to return IllegalStateException instead of throwing it ;)", "author": "anuraaga", "createdAt": "2020-01-06T04:58:13Z", "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "diffHunk": "@@ -87,5 +87,20 @@ public static SafeCloseable pushWithRootAndOldCtx(ClientRequestContext currentCt\n         }\n     }\n \n+    /**\n+     * An {@link IllegalStateException} which is raised when pushing a context from the unexpected thread\n+     * or forgetting to close the previous context.\n+     */\n+    public static final class IllegalContextPushingException extends IllegalStateException {\n+\n+        private static final long serialVersionUID = 5431942355463120798L;\n+\n+        public IllegalContextPushingException(RequestContext newCtx, RequestContext oldCtx) {", "originalCommit": "35bbeb553d5156519b9b2c0db0fc284b0295668c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4MjgxMA==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363182810", "bodyText": "Ah, I misunderstood. \ud83d\ude05", "author": "minwoox", "createdAt": "2020-01-06T07:25:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1ODU0MQ=="}], "type": "inlineReview"}, {"oid": "20a07aead0331a839ada3a569770f9c535b3f9f0", "url": "https://github.com/line/armeria/commit/20a07aead0331a839ada3a569770f9c535b3f9f0", "message": "Address comment by @anuraaga and @trustin", "committedDate": "2020-01-06T08:06:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE5MjYzOA==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363192638", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throw new IllegalStateException(\n          \n          \n            \n                    return new IllegalStateException(", "author": "anuraaga", "createdAt": "2020-01-06T08:11:23Z", "path": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java", "diffHunk": "@@ -87,5 +87,19 @@ public static SafeCloseable pushWithRootAndOldCtx(ClientRequestContext currentCt\n         }\n     }\n \n+    /**\n+     * Returns an {@link IllegalStateException} which is raised when pushing a context from\n+     * the unexpected thread or forgetting to close the previous context.\n+     */\n+    public static IllegalStateException newIllegalContextPushingException(\n+            RequestContext newCtx, RequestContext oldCtx) {\n+        requireNonNull(newCtx, \"newCtx\");\n+        requireNonNull(oldCtx, \"oldCtx\");\n+        throw new IllegalStateException(", "originalCommit": "20a07aead0331a839ada3a569770f9c535b3f9f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE5MzA2OQ==", "url": "https://github.com/line/armeria/pull/2366#discussion_r363193069", "bodyText": "Oops forgot to change that.", "author": "minwoox", "createdAt": "2020-01-06T08:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE5MjYzOA=="}], "type": "inlineReview"}, {"oid": "5eab119f51ec149538d52e2b596e04eb0a61dda6", "url": "https://github.com/line/armeria/commit/5eab119f51ec149538d52e2b596e04eb0a61dda6", "message": "Fix to return", "committedDate": "2020-01-06T08:13:47Z", "type": "commit"}, {"oid": "114d89c400dd7efe9cbf2efa1b75d3998c15e214", "url": "https://github.com/line/armeria/commit/114d89c400dd7efe9cbf2efa1b75d3998c15e214", "message": "Merge branch 'master' into context_aware_mismatch", "committedDate": "2020-01-06T13:26:44Z", "type": "commit"}, {"oid": "1bf10791c050d37316994f83d58dbf20d4532a3a", "url": "https://github.com/line/armeria/commit/1bf10791c050d37316994f83d58dbf20d4532a3a", "message": "Fix check style", "committedDate": "2020-01-06T13:55:36Z", "type": "commit"}]}