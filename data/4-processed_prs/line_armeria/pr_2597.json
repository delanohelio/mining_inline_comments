{"pr_number": 2597, "pr_title": "Assign stream ID right before writing RequestHeaders", "pr_createdAt": "2020-03-17T15:01:27Z", "pr_url": "https://github.com/line/armeria/pull/2597", "timeline": [{"oid": "dd65c6383b1e9259d7f23572695f236c9606736d", "url": "https://github.com/line/armeria/commit/dd65c6383b1e9259d7f23572695f236c9606736d", "message": "Assign stream ID right before writing RequestHeaders\nMotivation:\nWhen sending requests asyncronously, the requests might not be sending in order due to DNS resolution and HTTP/2 multiplexing.\nIf it happens after stream ID is assigned, the request, which tries to create a new stream after a stream whose ID is bigger is created, couldn't be used.\n\nModifications:\n- Assign the stream ID right before writing `RequestHeaders`.\n\nResult:\n- You no longer see `ClosedStreamException` due to the stream reversal", "committedDate": "2020-03-17T15:00:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1OTU1Mg==", "url": "https://github.com/line/armeria/pull/2597#discussion_r394059552", "bodyText": "How about adding a message to the exception? Could use different message for the two cases (!session.canSendRequest() and id >= MAX_NUM_REQUESTS_SENT)", "author": "trustin", "createdAt": "2020-03-18T01:31:54Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -122,43 +129,53 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                 return;\n             }\n \n-            fail(future.cause());\n-        }\n-\n-        final Throwable cause = future.cause();\n-        if (!(cause instanceof ClosedStreamException)) {\n-            final Channel ch = future.channel();\n-            Exceptions.logIfUnexpected(logger, ch, HttpSession.get(ch).protocol(), cause);\n-            ch.close();\n+            failAndWriteResetIfActive(future.cause());\n         }\n     }\n \n     @Override\n     public void onSubscribe(Subscription subscription) {\n         assert this.subscription == null;\n         this.subscription = subscription;\n+        if (state == State.DONE) {\n+            cancelSubscription();\n+            return;\n+        }\n \n-        final EventLoop eventLoop = ch.eventLoop();\n+        final HttpSession session = HttpSession.get(ch);\n+        id = session.getAndIncrementNumRequestsSent();\n+        if (!session.canSendRequest() || id >= MAX_NUM_REQUESTS_SENT) {\n+            responseDecoder.disconnectWhenFinished();\n+            // No need to send RST because we didn't send any packet and this will be disconnected anyway.\n+            fail(new UnprocessedRequestException(ClosedSessionException.get()));", "originalCommit": "dd65c6383b1e9259d7f23572695f236c9606736d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3MTIyNw==", "url": "https://github.com/line/armeria/pull/2597#discussion_r394071227", "bodyText": "Specified the exception messages. Thanks!", "author": "minwoox", "createdAt": "2020-03-18T02:19:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1OTU1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MDQ0NQ==", "url": "https://github.com/line/armeria/pull/2597#discussion_r394060445", "bodyText": "I think failAndReset() is enough. Whether a channel is active or not doesn't matter much because the RST_STREAM frame would not be sent even if we didn't have if (ch.isActive()).", "author": "trustin", "createdAt": "2020-03-18T01:35:45Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -298,7 +322,7 @@ private void cancelSubscription() {\n         subscription.cancel();\n     }\n \n-    private void failAndRespond(Throwable cause) {\n+    private void failAndWriteResetIfActive(Throwable cause) {", "originalCommit": "dd65c6383b1e9259d7f23572695f236c9606736d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3MTA1NQ==", "url": "https://github.com/line/armeria/pull/2597#discussion_r394071055", "bodyText": "Thanks fixed. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-03-18T02:18:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MDQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MDUzNw==", "url": "https://github.com/line/armeria/pull/2597#discussion_r394060537", "bodyText": "Maybe better returning MAX_NUM_REQUESTS_SENT?", "author": "trustin", "createdAt": "2020-03-18T01:36:13Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpSession.java", "diffHunk": "@@ -63,6 +63,11 @@ public void retryWithH1C() {\n \n         @Override\n         public void deactivate() {}\n+\n+        @Override\n+        public int getAndIncrementNumRequestsSent() {\n+            return 0;", "originalCommit": "dd65c6383b1e9259d7f23572695f236c9606736d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3MTA5Ng==", "url": "https://github.com/line/armeria/pull/2597#discussion_r394071096", "bodyText": "Right!", "author": "minwoox", "createdAt": "2020-03-18T02:19:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MDUzNw=="}], "type": "inlineReview"}, {"oid": "986c0f1a1a96cc2c76f8f4879a626820272d6bf9", "url": "https://github.com/line/armeria/commit/986c0f1a1a96cc2c76f8f4879a626820272d6bf9", "message": "Address comments by @trustin", "committedDate": "2020-03-18T02:06:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNjQzNA==", "url": "https://github.com/line/armeria/pull/2597#discussion_r394106434", "bodyText": "The prefix ++ seems increment and get the numRequestsSent.", "author": "ikhoon", "createdAt": "2020-03-18T04:55:38Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java", "diffHunk": "@@ -146,37 +146,41 @@ public boolean canSendRequest() {\n     }\n \n     @Override\n-    public boolean invoke(ClientRequestContext ctx, HttpRequest req, DecodedHttpResponse res) {\n+    public void invoke(PooledChannel pooledChannel, ClientRequestContext ctx,\n+                       HttpRequest req, DecodedHttpResponse res) {\n         if (handleEarlyCancellation(ctx, req, res)) {\n-            return true;\n+            pooledChannel.release();\n+            return;\n         }\n \n         final long writeTimeoutMillis = ctx.writeTimeoutMillis();\n-        final long responseTimeoutMillis = ctx.responseTimeoutMillis();\n-        final long maxContentLength = ctx.maxResponseLength();\n \n+        assert protocol != null;\n         assert responseDecoder != null;\n         assert requestEncoder != null;\n-\n-        final int numRequestsSent = ++this.numRequestsSent;\n-        final HttpResponseWrapper wrappedRes =\n-                responseDecoder.addResponse(numRequestsSent, res, ctx,\n-                                            channel.eventLoop(), responseTimeoutMillis, maxContentLength);\n-        if (ctx instanceof DefaultClientRequestContext) {\n-            ((DefaultClientRequestContext) ctx).setResponseTimeoutController(wrappedRes);\n+        if (!protocol.isMultiplex()) {\n+            // When HTTP/1.1 is used:\n+            // If pipelining is enabled, return as soon as the request is fully sent.\n+            // If pipelining is disabled, return after the response is fully received.\n+            final CompletableFuture<Void> completionFuture =\n+                    useHttp1Pipelining ? req.whenComplete() : res.whenComplete();\n+            completionFuture.handle((ret, cause) -> {\n+                if (!responseDecoder.needsToDisconnectWhenFinished()) {\n+                    pooledChannel.release();\n+                }\n+                return null;\n+            });\n         }\n \n         final HttpRequestSubscriber reqSubscriber =\n-                new HttpRequestSubscriber(channel, requestEncoder, numRequestsSent,\n-                                          req, wrappedRes, ctx, writeTimeoutMillis);\n+                new HttpRequestSubscriber(channel, requestEncoder, responseDecoder,\n+                                          req, res, ctx, writeTimeoutMillis);\n         req.subscribe(reqSubscriber, channel.eventLoop(), WITH_POOLED_OBJECTS);\n+    }\n \n-        if (numRequestsSent >= MAX_NUM_REQUESTS_SENT) {\n-            responseDecoder.disconnectWhenFinished();\n-            return false;\n-        } else {\n-            return true;\n-        }\n+    @Override\n+    public int getAndIncrementNumRequestsSent() {\n+        return ++numRequestsSent;", "originalCommit": "986c0f1a1a96cc2c76f8f4879a626820272d6bf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExMDc1MA==", "url": "https://github.com/line/armeria/pull/2597#discussion_r394110750", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-03-18T05:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNjQzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwOTQ3MA==", "url": "https://github.com/line/armeria/pull/2597#discussion_r394109470", "bodyText": "Don't we need to wrap this cause with UnprocessedRequestException?", "author": "ikhoon", "createdAt": "2020-03-18T05:09:37Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -218,7 +242,12 @@ public void onNext(HttpObject o) {\n     @Override\n     public void onError(Throwable cause) {\n         isSubscriptionCompleted = true;\n-        failAndRespond(cause);\n+        if (id >= 0) { // onSubscribe is called.\n+            failAndReset(cause);\n+        } else {\n+            // No need to send RST because we didn't send any packet.\n+            fail(cause);", "originalCommit": "986c0f1a1a96cc2c76f8f4879a626820272d6bf9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExMDMzMw==", "url": "https://github.com/line/armeria/pull/2597#discussion_r394110333", "bodyText": "Yes, right. Thanks!", "author": "minwoox", "createdAt": "2020-03-18T05:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwOTQ3MA=="}], "type": "inlineReview"}, {"oid": "9f3762634b515c614436591436a3e4315fdb38d2", "url": "https://github.com/line/armeria/commit/9f3762634b515c614436591436a3e4315fdb38d2", "message": "Address comments by @ikhoon", "committedDate": "2020-03-18T05:15:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNTI3NQ==", "url": "https://github.com/line/armeria/pull/2597#discussion_r394115275", "bodyText": "Question: We don't need to care about the type of cause just in case the cause is instance of UnprocessedRequestException already?\nIf the cause can not be UnprocessedRequestException, skip this review \ud83d\ude00", "author": "ikhoon", "createdAt": "2020-03-18T05:35:10Z", "path": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java", "diffHunk": "@@ -218,7 +242,12 @@ public void onNext(HttpObject o) {\n     @Override\n     public void onError(Throwable cause) {\n         isSubscriptionCompleted = true;\n-        failAndRespond(cause);\n+        if (id >= 0) { // onSubscribe is called.\n+            failAndReset(cause);\n+        } else {\n+            // No need to send RST because we didn't send any packet.\n+            fail(new UnprocessedRequestException(cause));", "originalCommit": "9f3762634b515c614436591436a3e4315fdb38d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyMTAxMQ==", "url": "https://github.com/line/armeria/pull/2597#discussion_r394121011", "bodyText": "I think that's not going to happen. If so, I should unwrap the cause and call failAndReset on line 246. I think it's not worth. \ud83d\ude04", "author": "minwoox", "createdAt": "2020-03-18T05:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNTI3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyMjU5Mg==", "url": "https://github.com/line/armeria/pull/2597#discussion_r394122592", "bodyText": "Thanks for the explanation! \ud83d\ude4f", "author": "ikhoon", "createdAt": "2020-03-18T06:04:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNTI3NQ=="}], "type": "inlineReview"}]}