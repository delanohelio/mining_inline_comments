{"pr_number": 2770, "pr_title": "Add builder for OAuth1aToken", "pr_createdAt": "2020-06-03T06:59:09Z", "pr_url": "https://github.com/line/armeria/pull/2770", "timeline": [{"oid": "a840b78ddf2092bac71de4cd3834694940c6238a", "url": "https://github.com/line/armeria/commit/a840b78ddf2092bac71de4cd3834694940c6238a", "message": "Add builder for OAuth1aToken\nMotivation:\nRelated https://github.com/line/armeria/pull/2680#discussion_r416371720\nThe current implementation for building OAuth 1a token isn't convinient.\n\nModifcations:\n- Add `OAuth1aTokenBuilder`.\n\nResult:\n- You can now easily create `OAuth1aToken`.", "committedDate": "2020-06-03T06:57:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyMDU3Mw==", "url": "https://github.com/line/armeria/pull/2770#discussion_r435020573", "bodyText": "What happens if:\n\na user puts existing properties such as nonce using this method?\na user calls this method twice? Shouldn't we merge them?\n\nWhen a user calls this method, we're gonna have to check if there's an entry with a known key, and if so, we should delegate to the specific setter method.", "author": "trustin", "createdAt": "2020-06-04T06:31:01Z", "path": "core/src/main/java/com/linecorp/armeria/common/auth/OAuth1aTokenBuilder.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.auth;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableMap;\n+\n+/**\n+ * Builds a new {@link OAuth1aToken}.\n+ */\n+public final class OAuth1aTokenBuilder {\n+\n+    private static final String DEFAULT_OAUTH_VERSION = \"1.0\";\n+\n+    @Nullable\n+    private String consumerKey;\n+    @Nullable\n+    private String token;\n+    @Nullable\n+    private String signatureMethod;\n+    @Nullable\n+    private String signature;\n+    @Nullable\n+    private String timestamp;\n+    @Nullable\n+    private String nonce;\n+    @Nullable\n+    private String realm;\n+    private String version = DEFAULT_OAUTH_VERSION;\n+    private Map<String, String> additionals = ImmutableMap.of();\n+\n+    /**\n+     * Creates a new instance.\n+     */\n+    OAuth1aTokenBuilder() {}\n+\n+    /**\n+     * Sets the value of the realm property.\n+     */\n+    public OAuth1aTokenBuilder realm(String realm) {\n+        this.realm = requireNonNull(realm, \"realm\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the value of the oath_consumer_key property.\n+     */\n+    public OAuth1aTokenBuilder consumerKey(String consumerKey) {\n+        this.consumerKey = requireNonNull(consumerKey, \"consumerKey\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the value of the oauth_token property.\n+     */\n+    public OAuth1aTokenBuilder token(String token) {\n+        this.token = requireNonNull(token, \"token\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the value of oauth_signature_method property.\n+     */\n+    public OAuth1aTokenBuilder signatureMethod(String signatureMethod) {\n+        this.signatureMethod = requireNonNull(signatureMethod, \"signatureMethod\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the value of oauth_signature property.\n+     */\n+    public OAuth1aTokenBuilder signature(String signature) {\n+        this.signature = requireNonNull(signature, \"signature\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the value of oauth_timestamp property.\n+     */\n+    public OAuth1aTokenBuilder timestamp(String timestamp) {\n+        try {\n+            Long.parseLong(requireNonNull(timestamp, \"timestamp\"));\n+        } catch (NumberFormatException e) {\n+            throw new IllegalArgumentException(\"timestamp: \" + timestamp +\n+                                               \" (expected: a string containing a long representation)\");\n+        }\n+        this.timestamp = timestamp;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the value of oauth_nonce property.\n+     */\n+    public OAuth1aTokenBuilder nonce(String nonce) {\n+        this.nonce = requireNonNull(nonce, \"nonce\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets the value of oauth_version property.\n+     * If not set, {@value DEFAULT_OAUTH_VERSION} is used by default.\n+     */\n+    public OAuth1aTokenBuilder version(String version) {\n+        this.version = requireNonNull(version, \"version\");\n+        return this;\n+    }\n+\n+    /**\n+     * Sets additional (or user-defined) parameters.\n+     */\n+    public OAuth1aTokenBuilder additionals(Map<String, String> additionals) {", "originalCommit": "a840b78ddf2092bac71de4cd3834694940c6238a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyMTY1Ng==", "url": "https://github.com/line/armeria/pull/2770#discussion_r435021656", "bodyText": "That's a good suggestion. \ud83d\udc4d", "author": "minwoox", "createdAt": "2020-06-04T06:33:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyMDU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1OTg2MA==", "url": "https://github.com/line/armeria/pull/2770#discussion_r434959860", "bodyText": "nit: This is trivial. You can ignore this. \ud83d\ude09\nHow about taking a boolean isLast or boolean addComma and\nif (isLast) {\n    builder.append(\"\\\",\");\n} else {\n    builder.append('\"');\n}", "author": "ikhoon", "createdAt": "2020-06-04T02:39:26Z", "path": "core/src/main/java/com/linecorp/armeria/common/auth/OAuth1aToken.java", "diffHunk": "@@ -233,38 +237,39 @@ public String toHeaderValue() {\n         }\n         final StringBuilder builder = TemporaryThreadLocals.get().stringBuilder();\n         builder.append(\"OAuth \");\n-        final String realm = realm();\n-        if (!isNullOrEmpty(realm())) {\n-            builder.append(\"realm=\\\"\");\n-            encodeComponent(builder, realm);\n-            builder.append(\"\\\",\");\n+        if (!isNullOrEmpty(realm)) {\n+            appendValue(builder, REALM, realm);\n+            builder.append(',');\n         }\n-        builder.append(\"oauth_consumer_key=\\\"\");\n-        encodeComponent(builder, consumerKey());\n-        builder.append(\"\\\",oauth_token=\\\"\");\n-        encodeComponent(builder, token());\n-        builder.append(\"\\\",oauth_signature_method=\\\"\");\n-        encodeComponent(builder, signatureMethod());\n-        builder.append(\"\\\",oauth_signature=\\\"\");\n-        encodeComponent(builder, signature());\n-        builder.append(\"\\\",oauth_timestamp=\\\"\");\n-        encodeComponent(builder, timestamp());\n-        builder.append(\"\\\",oauth_nonce=\\\"\");\n-        encodeComponent(builder, nonce());\n-        builder.append(\"\\\",version=\\\"\");\n-        // Do not have to encode the version.\n-        builder.append(version());\n-        builder.append('\"');\n-        for (Entry<String, String> entry : additionals().entrySet()) {\n-            builder.append(\"\\\",\");\n-            encodeComponent(builder, entry.getKey());\n-            builder.append(\"=\\\"\");\n-            encodeComponent(builder, entry.getValue());\n-            builder.append('\"');\n+\n+        appendValue(builder, OAUTH_CONSUMER_KEY, consumerKey);\n+        builder.append(',');\n+        appendValue(builder, OAUTH_TOKEN, token);\n+        builder.append(',');\n+        appendValue(builder, OAUTH_SIGNATURE_METHOD, signatureMethod);\n+        builder.append(',');\n+        appendValue(builder, OAUTH_SIGNATURE, signature);\n+        builder.append(',');\n+        appendValue(builder, OAUTH_TIMESTAMP, timestamp);\n+        builder.append(',');\n+        appendValue(builder, OAUTH_NONCE, nonce);\n+        builder.append(',');\n+        appendValue(builder, OAUTH_VERSION, version);\n+        for (Entry<String, String> entry : additionals.entrySet()) {\n+            builder.append(',');\n+            appendValue(builder, entry.getKey(), entry.getValue());\n         }\n+\n         return headerValue = builder.toString();\n     }\n \n+    private static void appendValue(StringBuilder builder, String key, String value) {", "originalCommit": "a840b78ddf2092bac71de4cd3834694940c6238a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyMzcxOQ==", "url": "https://github.com/line/armeria/pull/2770#discussion_r435023719", "bodyText": "That's a good suggestion, also. \ud83d\udc4d", "author": "minwoox", "createdAt": "2020-06-04T06:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1OTg2MA=="}], "type": "inlineReview"}, {"oid": "6f46914dd92503d9525ce16cbc9b7cae2dc9521b", "url": "https://github.com/line/armeria/commit/6f46914dd92503d9525ce16cbc9b7cae2dc9521b", "message": "Address comments by @trustin and @ikhoon", "committedDate": "2020-06-04T09:35:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY5OTY1Mw==", "url": "https://github.com/line/armeria/pull/2770#discussion_r435699653", "bodyText": "Can this be simplified into builder().additionals(rnn(params)).build()?", "author": "trustin", "createdAt": "2020-06-05T05:37:40Z", "path": "core/src/main/java/com/linecorp/armeria/common/auth/OAuth1aToken.java", "diffHunk": "@@ -86,46 +84,8 @@\n     @Deprecated\n     public static OAuth1aToken of(Map<String, String> params) {\n         final OAuth1aTokenBuilder builder = builder();\n-        final Builder<String, String> additionals = ImmutableMap.builder();\n-\n-        for (Entry<String, String> param : params.entrySet()) {\n-            final String key = param.getKey();\n-            final String value = param.getValue();\n-\n-            // Empty values are ignored.\n-            if (!isNullOrEmpty(key) && !isNullOrEmpty(value)) {\n-                final String lowerCased = Ascii.toLowerCase(key);\n-                switch (lowerCased) {\n-                    case REALM:\n-                        builder.realm(value);\n-                        break;\n-                    case OAUTH_CONSUMER_KEY:\n-                        builder.consumerKey(value);\n-                        break;\n-                    case OAUTH_TOKEN:\n-                        builder.token(value);\n-                        break;\n-                    case OAUTH_SIGNATURE_METHOD:\n-                        builder.signatureMethod(value);\n-                        break;\n-                    case OAUTH_SIGNATURE:\n-                        builder.signature(value);\n-                        break;\n-                    case OAUTH_TIMESTAMP:\n-                        builder.timestamp(value);\n-                        break;\n-                    case OAUTH_NONCE:\n-                        builder.nonce(value);\n-                        break;\n-                    case OAUTH_VERSION:\n-                        builder.version(value);\n-                        break;\n-                    default:\n-                        additionals.put(key, value);\n-                }\n-            }\n-        }\n-        return builder.additionals(additionals.build()).build();\n+        setParameters(builder, params);", "originalCommit": "6f46914dd92503d9525ce16cbc9b7cae2dc9521b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY5OTc4Nw==", "url": "https://github.com/line/armeria/pull/2770#discussion_r435699787", "bodyText": "Could this method be inlined?\nCould we merge instead of overwriting the previous additionals?", "author": "trustin", "createdAt": "2020-06-05T05:38:07Z", "path": "core/src/main/java/com/linecorp/armeria/common/auth/OAuth1aTokenBuilder.java", "diffHunk": "@@ -125,13 +137,60 @@ public OAuth1aTokenBuilder version(String version) {\n     }\n \n     /**\n-     * Sets additional (or user-defined) parameters.\n+     * Sets additional parameters. If the specified {@code additionals} has pre-defined parameters,\n+     * the parameters are set automatically to this builder and removed from the {@code additionals}.\n      */\n     public OAuth1aTokenBuilder additionals(Map<String, String> additionals) {\n-        this.additionals = ImmutableMap.copyOf(requireNonNull(additionals, \"additionals\"));\n+        setParameters(this, requireNonNull(additionals, \"additionals\"));\n         return this;\n     }\n \n+    private void additionals0(ImmutableMap<String, String> additionals) {\n+        this.additionals = additionals;\n+    }", "originalCommit": "6f46914dd92503d9525ce16cbc9b7cae2dc9521b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcwMDQzNA==", "url": "https://github.com/line/armeria/pull/2770#discussion_r435700434", "bodyText": "This method is not only for additional parameters but any parameters including pre-defined ones. Perhaps we should rename it to putAll()? We could also add methods like put(CharSequence, CharSequence).", "author": "trustin", "createdAt": "2020-06-05T05:40:37Z", "path": "core/src/main/java/com/linecorp/armeria/common/auth/OAuth1aTokenBuilder.java", "diffHunk": "@@ -125,13 +137,60 @@ public OAuth1aTokenBuilder version(String version) {\n     }\n \n     /**\n-     * Sets additional (or user-defined) parameters.\n+     * Sets additional parameters. If the specified {@code additionals} has pre-defined parameters,\n+     * the parameters are set automatically to this builder and removed from the {@code additionals}.\n      */\n     public OAuth1aTokenBuilder additionals(Map<String, String> additionals) {", "originalCommit": "6f46914dd92503d9525ce16cbc9b7cae2dc9521b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMTA3Ng==", "url": "https://github.com/line/armeria/pull/2770#discussion_r435821076", "bodyText": "Thanks, added put() and putAll(). I didn't use CharSequence though because I feel it's too much.\nIf it's necessary, jut let me know. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-06-05T10:03:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcwMDQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg2ODQ1NQ==", "url": "https://github.com/line/armeria/pull/2770#discussion_r435868455", "bodyText": "SGTM. Thanks, @minwoox", "author": "trustin", "createdAt": "2020-06-05T11:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcwMDQzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcwMDY4NQ==", "url": "https://github.com/line/armeria/pull/2770#discussion_r435700685", "bodyText": "Is this change relevant to this pull request? \ud83e\udd14", "author": "trustin", "createdAt": "2020-06-05T05:41:23Z", "path": "docs-client/package-lock.json", "diffHunk": "@@ -3369,6 +3369,16 @@\n       \"dev\": true,\n       \"optional\": true\n     },\n+    \"bindings\": {", "originalCommit": "6f46914dd92503d9525ce16cbc9b7cae2dc9521b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3NjY2Mw==", "url": "https://github.com/line/armeria/pull/2770#discussion_r435776663", "bodyText": "Gradle build just keeps changing this file.\nI made a separate PR to solve this. #2777", "author": "minwoox", "createdAt": "2020-06-05T08:43:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcwMDY4NQ=="}], "type": "inlineReview"}, {"oid": "887989b491a67a33a1974872fe86fe44c424f281", "url": "https://github.com/line/armeria/commit/887989b491a67a33a1974872fe86fe44c424f281", "message": "Address comments by @trustin", "committedDate": "2020-06-05T09:57:18Z", "type": "commit"}, {"oid": "13d4215697592fb37f413eb3e769831e09569992", "url": "https://github.com/line/armeria/commit/13d4215697592fb37f413eb3e769831e09569992", "message": "Fix", "committedDate": "2020-06-05T10:25:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3NzYwNA==", "url": "https://github.com/line/armeria/pull/2770#discussion_r436277604", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Builder<String, String> additionalsBuilder = ImmutableMap.builder();\n          \n          \n            \n                private final ImmutableMap.Builder<String, String> additionalsBuilder = ImmutableMap.builder();", "author": "ikhoon", "createdAt": "2020-06-06T15:32:34Z", "path": "core/src/main/java/com/linecorp/armeria/common/auth/OAuth1aTokenBuilder.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.auth;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_CONSUMER_KEY;\n+import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_NONCE;\n+import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_SIGNATURE;\n+import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_SIGNATURE_METHOD;\n+import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_TIMESTAMP;\n+import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_TOKEN;\n+import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_VERSION;\n+import static com.linecorp.armeria.common.auth.OAuth1aToken.REALM;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Ascii;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableMap.Builder;\n+\n+/**\n+ * Builds a new {@link OAuth1aToken}.\n+ */\n+public final class OAuth1aTokenBuilder {\n+\n+    private static final String DEFAULT_OAUTH_VERSION = \"1.0\";\n+\n+    @Nullable\n+    private String consumerKey;\n+    @Nullable\n+    private String token;\n+    @Nullable\n+    private String signatureMethod;\n+    @Nullable\n+    private String signature;\n+    @Nullable\n+    private String timestamp;\n+    @Nullable\n+    private String nonce;\n+    @Nullable\n+    private String realm;\n+    private String version = DEFAULT_OAUTH_VERSION;\n+    private final Builder<String, String> additionalsBuilder = ImmutableMap.builder();", "originalCommit": "13d4215697592fb37f413eb3e769831e09569992", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0MzYwMQ==", "url": "https://github.com/line/armeria/pull/2770#discussion_r436443601", "bodyText": "Fixed. \ud83d\ude09", "author": "minwoox", "createdAt": "2020-06-08T03:42:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3NzYwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3NzgzMA==", "url": "https://github.com/line/armeria/pull/2770#discussion_r436277830", "bodyText": "Ditto", "author": "ikhoon", "createdAt": "2020-06-06T15:35:40Z", "path": "core/src/test/java/com/linecorp/armeria/common/auth/OAuth1aTokenTest.java", "diffHunk": "@@ -15,65 +15,51 @@\n  */\n package com.linecorp.armeria.common.auth;\n \n-import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_CONSUMER_KEY;\n-import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_NONCE;\n-import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_SIGNATURE;\n-import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_SIGNATURE_METHOD;\n-import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_TIMESTAMP;\n-import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_TOKEN;\n import static org.assertj.core.api.Assertions.assertThat;\n \n import org.junit.jupiter.api.Test;\n \n import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableMap.Builder;\n \n class OAuth1aTokenTest {\n     @Test\n     void testEquals() {\n-        final OAuth1aToken token = OAuth1aToken.of(ImmutableMap.<String, String>builder()\n-                                                           .put(OAUTH_CONSUMER_KEY, \"a\")\n-                                                           .put(OAUTH_TOKEN, \"b\")\n-                                                           .put(OAUTH_SIGNATURE_METHOD, \"c\")\n-                                                           .put(OAUTH_SIGNATURE, \"d\")\n-                                                           .put(OAUTH_TIMESTAMP, \"0\")\n-                                                           .put(OAUTH_NONCE, \"f\")\n-                                                           .put(\"x-others\", \"g\")\n-                                                           .build());\n-        assertThat(token).isEqualTo(OAuth1aToken.of(ImmutableMap.<String, String>builder()\n-                                                            .put(OAUTH_CONSUMER_KEY, \"a\")\n-                                                            .put(OAUTH_TOKEN, \"b\")\n-                                                            .put(OAUTH_SIGNATURE_METHOD, \"c\")\n-                                                            .put(OAUTH_SIGNATURE, \"d\")\n-                                                            .put(OAUTH_TIMESTAMP, \"0\")\n-                                                            .put(OAUTH_NONCE, \"f\")\n-                                                            .put(\"x-others\", \"g\")\n-                                                            .build()));\n-        assertThat(token).isNotEqualTo(OAuth1aToken.of(ImmutableMap.<String, String>builder()\n-                                                               .put(OAUTH_CONSUMER_KEY, \"1\")\n-                                                               .put(OAUTH_TOKEN, \"2\")\n-                                                               .put(OAUTH_SIGNATURE_METHOD, \"3\")\n-                                                               .put(OAUTH_SIGNATURE, \"4\")\n-                                                               .put(OAUTH_TIMESTAMP, \"5\")\n-                                                               .put(OAUTH_NONCE, \"6\")\n-                                                               .put(\"x-others\", \"7\")\n-                                                               .build()));\n-        assertThat(token).isNotEqualTo(OAuth1aToken.of(ImmutableMap.<String, String>builder()\n-                                                               .put(OAUTH_CONSUMER_KEY, \"a\")\n-                                                               .put(OAUTH_TOKEN, \"b\")\n-                                                               .put(OAUTH_SIGNATURE_METHOD, \"c\")\n-                                                               .put(OAUTH_SIGNATURE, \"d\")\n-                                                               .put(OAUTH_TIMESTAMP, \"0\")\n-                                                               .put(OAUTH_NONCE, \"f\")\n-                                                               .build()));\n-        assertThat(token).isNotEqualTo(OAuth1aToken.of(ImmutableMap.<String, String>builder()\n-                                                               .put(OAUTH_CONSUMER_KEY, \"a\")\n-                                                               .put(OAUTH_TOKEN, \"b\")\n-                                                               .put(OAUTH_SIGNATURE_METHOD, \"c\")\n-                                                               .put(OAUTH_SIGNATURE, \"d\")\n-                                                               .put(OAUTH_TIMESTAMP, \"0\")\n-                                                               .put(OAUTH_NONCE, \"f\")\n-                                                               .put(\"x-others\", \"g\")\n-                                                               .put(\"x-others-2\", \"h\")\n-                                                               .build()));\n+        final OAuth1aToken token = OAuth1aToken.builder()\n+                                               .consumerKey(\"a\")\n+                                               .token(\"b\")\n+                                               .signatureMethod(\"c\")\n+                                               .signature(\"d\")\n+                                               .timestamp(\"0\")\n+                                               .nonce(\"f\")\n+                                               .put(\"x-others\", \"g\")\n+                                               .build();\n+        final Builder<String, String> paramsBuilder = ImmutableMap.builder();", "originalCommit": "13d4215697592fb37f413eb3e769831e09569992", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3ODE4OA==", "url": "https://github.com/line/armeria/pull/2770#discussion_r436278188", "bodyText": "How about adding toString()?", "author": "ikhoon", "createdAt": "2020-06-06T15:41:02Z", "path": "core/src/main/java/com/linecorp/armeria/common/auth/OAuth1aTokenBuilder.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 LINE Corporation\n+ *\n+ * LINE Corporation licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.linecorp.armeria.common.auth;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_CONSUMER_KEY;\n+import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_NONCE;\n+import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_SIGNATURE;\n+import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_SIGNATURE_METHOD;\n+import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_TIMESTAMP;\n+import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_TOKEN;\n+import static com.linecorp.armeria.common.auth.OAuth1aToken.OAUTH_VERSION;\n+import static com.linecorp.armeria.common.auth.OAuth1aToken.REALM;\n+import static java.util.Objects.requireNonNull;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import javax.annotation.Nullable;\n+\n+import com.google.common.base.Ascii;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableMap.Builder;\n+\n+/**\n+ * Builds a new {@link OAuth1aToken}.\n+ */\n+public final class OAuth1aTokenBuilder {", "originalCommit": "13d4215697592fb37f413eb3e769831e09569992", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4f541437ea89833a8a2d35847e89cc2fdc339839", "url": "https://github.com/line/armeria/commit/4f541437ea89833a8a2d35847e89cc2fdc339839", "message": "Address comments by @ikhoon", "committedDate": "2020-06-08T03:42:35Z", "type": "commit"}]}