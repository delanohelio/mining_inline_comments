{"pr_number": 2682, "pr_title": "New web site", "pr_createdAt": "2020-04-29T08:10:45Z", "pr_url": "https://github.com/line/armeria/pull/2682", "timeline": [{"oid": "da05f2404383bc883687adc43aa96914c9680670", "url": "https://github.com/line/armeria/commit/da05f2404383bc883687adc43aa96914c9680670", "message": "New web site\n\nMotivation:\n\nOur web site currently has the following issues:\n\n- Most Java devs are not familiar with reStructuredText markup.\n- We need a nice modern landing page.\n- It'll be nice if we can use our frontend development skills on both\n  web site and documentation service.\n\nModifications:\n\n- Rebuild the web site using Gatsby, React, TypeScript and Ant Design.\n\nResult:\n\n- We now have a landing page.\n- Contributors can write documentation in Markdown (MDX).\n- Release notes, developer guide and contributor guide are now all\n  browseable without leaving the web site.\n- We can use our React skills for both web site and documentation\n  service.\n\nCo-authored by: minux <songmw725@gmail.com>\nCo-authored by: Ikhun Um <ikhun.um@linecorp.com>", "committedDate": "2020-04-29T08:02:33Z", "type": "commit"}, {"oid": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "url": "https://github.com/line/armeria/commit/ad762d3ed63563757a2ece19a1855a0b2af284bf", "message": "Do not fail but warn when diagram generation fails", "committedDate": "2020-04-29T09:32:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwMjU1MQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417202551", "bodyText": "build any type of microservices leveraging\n\nShould it be any type of microservice? Singular, not plural?", "author": "andrewoma", "createdAt": "2020-04-29T10:04:25Z", "path": "README.md", "diffHunk": "@@ -2,36 +2,30 @@ Visit [the official web site](https://line.github.io/armeria/) for more informat\n \n # Armeria\n \n-_Armeria_ is an open-source asynchronous RPC/API client/server library built on top of\n-[Java 8](https://go.java/), [Netty 4.1](https://netty.io/), [HTTP/2](https://http2.github.io/),\n-[Thrift](https://thrift.apache.org/) and [gRPC](https://grpc.io/). Its primary goal is to help engineers build\n-high-performance asynchronous microservices that use HTTP/2 as a session layer protocol.\n+<a href=\"https://github.com/line/armeria\"><img src=\"https://img.shields.io/github/stars/line/armeria.svg?style=social\" /></a>\n+<a href=\"https://twitter.com/armeria_project\"><img src=\"https://img.shields.io/twitter/follow/armeria_project.svg?label=Follow\" /></a>\n+<a href=\"https://line.github.io/armeria/s/slack\"><img src=\"https://img.shields.io/badge/chat-on%20Slack-brightgreen.svg?style=social&amp;logo=slack\" /></a>\n+<a href=\"https://github.com/line/armeria/contributors\"><img src=\"https://img.shields.io/github/contributors/line/armeria.svg\" /></a>\n+<a href=\"https://github.com/line/armeria/pulse\"><img src=\"https://img.shields.io/github/commit-activity/m/line/armeria.svg?label=commits\" /></a>\n+<a href=\"https://search.maven.org/search?q=g:com.linecorp.armeria%20AND%20a:armeria\"><img src=\"https://img.shields.io/maven-central/v/com.linecorp.armeria/armeria.svg?label=version\" /></a>\n+<a href=\"https://github.com/line/armeria/commits\"><img src=\"https://img.shields.io/github/release-date/line/armeria.svg?label=release\" /></a>\n \n-It is open-sourced and licensed under [Apache License 2.0](https://tldrlegal.com/license/apache-license-2.0-(apache-2.0))\n-by [LINE Corporation](https://linecorp.com/en/), who uses it in production.\n+> Build a reactive microservice **at your pace**, not theirs.\n \n-## Requirements\n-\n-[Java 8 or later](https://adoptopenjdk.net/).\n-See [Requirements](https://line.github.io/armeria/setup.html#requirements) for more information.\n-\n-## How to build\n-\n-We use [Gradle](https://gradle.org/) and Java 13 or later to build Armeria.\n-The following command will compile Armeria and generate JARs and web site:\n+_Armeria_ is an all-round microservice framework that lets you build any type of microservices", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxMDY5NQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417210695", "bodyText": "in a single port, or on a single port?", "author": "andrewoma", "createdAt": "2020-04-29T10:20:32Z", "path": "site/src/pages/index.tsx", "diffHunk": "@@ -0,0 +1,402 @@\n+import { WindowLocation } from '@reach/router';\n+import { Carousel, Button, Tooltip, Typography } from 'antd';\n+import React from 'react';\n+import { graphql, Link, useStaticQuery } from 'gatsby';\n+import Img from 'gatsby-image';\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+\n+import Blockquote from '../components/blockquote';\n+import BrowserMockup from '../components/browser-mockup';\n+import CodeBlock from '../components/code-block';\n+import Emoji from '../components/emoji';\n+import Logo from '../components/logo';\n+import { Highlight, Marketing, MarketingBlock } from '../components/marketing';\n+import NoWrap from '../components/nowrap';\n+import ProjectBadge from '../components/project-badge';\n+import BaseLayout from '../layouts/base';\n+\n+import styles from './index.module.less';\n+\n+const { Title, Paragraph } = Typography;\n+\n+const IndexPage: React.FC<{\n+  location: WindowLocation;\n+}> = props => {\n+  const data = useStaticQuery(graphql`\n+    query {\n+      docServiceImages: allFile(\n+        filter: { relativePath: { glob: \"docservice-carousel-*.png\" } }\n+        sort: { fields: relativePath, order: ASC }\n+      ) {\n+        nodes {\n+          childImageSharp {\n+            fluid {\n+              ...GatsbyImageSharpFluid\n+            }\n+          }\n+        }\n+      }\n+\n+      logoVideo: file(relativePath: { eq: \"armeria.m4v\" }) {\n+        publicURL\n+      }\n+\n+      logoGif: file(relativePath: { eq: \"armeria.gif\" }) {\n+        publicURL\n+      }\n+\n+      integrationDiagram: file(relativePath: { eq: \"integration.svg\" }) {\n+        publicURL\n+      }\n+    }\n+  `);\n+\n+  function renderGetStartedButtons(responsive: boolean) {\n+    const className = `${styles.getStartedButton} ${\n+      responsive ? styles.responsive : ''\n+    }`;\n+    return (\n+      <>\n+        <Link to=\"/docs\" className={className}>\n+          <Button type=\"primary\" size=\"large\">\n+            <Emoji text=\"Learn more \u2728\" />\n+          </Button>\n+        </Link>\n+        <Link to=\"/community\" className={className}>\n+          <Button size=\"large\">\n+            <Emoji text=\"Community \ud83d\udc4b\" />\n+          </Button>\n+        </Link>\n+      </>\n+    );\n+  }\n+\n+  return (\n+    <BaseLayout\n+      location={props.location}\n+      pageTitle=\"Armeria &ndash; An all-round microservice framework\"\n+      contentClassName={styles.wrapper}\n+    >\n+      <Marketing className={styles.slogan}>\n+        <MarketingBlock noreveal>\n+          <Logo\n+            className={styles.sloganBackgroundImage}\n+            width=\"768px\"\n+            height=\"768px\"\n+            primaryColor=\"rgba(255, 255, 255, 1.0)\"\n+            secondaryColor=\"rgba(255, 255, 255, 0.55)\"\n+            tertiaryColor=\"transparent\"\n+            label=\" \"\n+            notext\n+            ariaHidden\n+          />\n+          <Title level={1}>\n+            Build a reactive microservice{' '}\n+            <NoWrap>\n+              <Highlight>\n+                at <u>your</u> pace\n+              </Highlight>\n+              ,\n+            </NoWrap>{' '}\n+            <NoWrap>not theirs.</NoWrap>\n+          </Title>\n+          <Paragraph>\n+            <em>Armeria</em> is an all-round microservice framework that lets\n+            you build any type of microservices leveraging your favorite\n+            technologies, including gRPC, Thrift, Kotlin, Retrofit, Reactive\n+            Streams, Spring Boot and Dropwizard.\n+          </Paragraph>\n+          <Paragraph className={styles.indented}>\n+            &ldquo; Brought to you by the creater of{' '}\n+            <Tooltip title=\"The most popular non-blocking I/O client-server framework in Java ecosystem\">\n+              <OutboundLink href=\"https://netty.io/\">Netty</OutboundLink>\n+            </Tooltip>{' '}\n+            and his colleagues at{' '}\n+            <Tooltip title=\"The company behind the most popular mobile messaging app in Japan, Taiwan and Thai\">\n+              <OutboundLink href=\"https://engineering.linecorp.com/en/\">\n+                LINE corporation\n+              </OutboundLink>\n+            </Tooltip>{' '}\n+            &rdquo;\n+          </Paragraph>\n+          <div>{renderGetStartedButtons(true)}</div>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            gRPC, Thrift, REST, files? <NoWrap>You name it.</NoWrap>{' '}\n+            <Highlight nowrap>We serve them all.</Highlight>\n+          </Title>\n+          <Paragraph>\n+            Let&apos;s embrace the reality &mdash; we almost always have to deal\n+            with more than one protocol. It was once Thrift, today it&apos;s\n+            gRPC, and REST never gets old. At the same time, you sometimes have\n+            to handle health check requests from a load balancer or even serve\n+            some static files.\n+          </Paragraph>\n+          <Paragraph>\n+            Armeria is capable of running services of different protocols, all\n+            in a single port. Waste no more setting up forward proxy or sidecar.", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxMTE1Mg==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417211152", "bodyText": "microservices or microservice?", "author": "andrewoma", "createdAt": "2020-04-29T10:21:24Z", "path": "site/src/pages/index.tsx", "diffHunk": "@@ -0,0 +1,402 @@\n+import { WindowLocation } from '@reach/router';\n+import { Carousel, Button, Tooltip, Typography } from 'antd';\n+import React from 'react';\n+import { graphql, Link, useStaticQuery } from 'gatsby';\n+import Img from 'gatsby-image';\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+\n+import Blockquote from '../components/blockquote';\n+import BrowserMockup from '../components/browser-mockup';\n+import CodeBlock from '../components/code-block';\n+import Emoji from '../components/emoji';\n+import Logo from '../components/logo';\n+import { Highlight, Marketing, MarketingBlock } from '../components/marketing';\n+import NoWrap from '../components/nowrap';\n+import ProjectBadge from '../components/project-badge';\n+import BaseLayout from '../layouts/base';\n+\n+import styles from './index.module.less';\n+\n+const { Title, Paragraph } = Typography;\n+\n+const IndexPage: React.FC<{\n+  location: WindowLocation;\n+}> = props => {\n+  const data = useStaticQuery(graphql`\n+    query {\n+      docServiceImages: allFile(\n+        filter: { relativePath: { glob: \"docservice-carousel-*.png\" } }\n+        sort: { fields: relativePath, order: ASC }\n+      ) {\n+        nodes {\n+          childImageSharp {\n+            fluid {\n+              ...GatsbyImageSharpFluid\n+            }\n+          }\n+        }\n+      }\n+\n+      logoVideo: file(relativePath: { eq: \"armeria.m4v\" }) {\n+        publicURL\n+      }\n+\n+      logoGif: file(relativePath: { eq: \"armeria.gif\" }) {\n+        publicURL\n+      }\n+\n+      integrationDiagram: file(relativePath: { eq: \"integration.svg\" }) {\n+        publicURL\n+      }\n+    }\n+  `);\n+\n+  function renderGetStartedButtons(responsive: boolean) {\n+    const className = `${styles.getStartedButton} ${\n+      responsive ? styles.responsive : ''\n+    }`;\n+    return (\n+      <>\n+        <Link to=\"/docs\" className={className}>\n+          <Button type=\"primary\" size=\"large\">\n+            <Emoji text=\"Learn more \u2728\" />\n+          </Button>\n+        </Link>\n+        <Link to=\"/community\" className={className}>\n+          <Button size=\"large\">\n+            <Emoji text=\"Community \ud83d\udc4b\" />\n+          </Button>\n+        </Link>\n+      </>\n+    );\n+  }\n+\n+  return (\n+    <BaseLayout\n+      location={props.location}\n+      pageTitle=\"Armeria &ndash; An all-round microservice framework\"\n+      contentClassName={styles.wrapper}\n+    >\n+      <Marketing className={styles.slogan}>\n+        <MarketingBlock noreveal>\n+          <Logo\n+            className={styles.sloganBackgroundImage}\n+            width=\"768px\"\n+            height=\"768px\"\n+            primaryColor=\"rgba(255, 255, 255, 1.0)\"\n+            secondaryColor=\"rgba(255, 255, 255, 0.55)\"\n+            tertiaryColor=\"transparent\"\n+            label=\" \"\n+            notext\n+            ariaHidden\n+          />\n+          <Title level={1}>\n+            Build a reactive microservice{' '}\n+            <NoWrap>\n+              <Highlight>\n+                at <u>your</u> pace\n+              </Highlight>\n+              ,\n+            </NoWrap>{' '}\n+            <NoWrap>not theirs.</NoWrap>\n+          </Title>\n+          <Paragraph>\n+            <em>Armeria</em> is an all-round microservice framework that lets\n+            you build any type of microservices leveraging your favorite", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0Mzc5NA==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417143794", "bodyText": "If possible, it'd be nice to see if we can use this wasm library with our normal node tooling. Can leave it as future work.\nhttps://www.npmjs.com/package/svgbob-wasm", "author": "anuraaga", "createdAt": "2020-04-29T08:19:32Z", "path": "site/README.md", "diffHunk": "@@ -0,0 +1,81 @@\n+This directory contains a Gatsby project that generates the official\n+web site for Armeria.\n+\n+### Build requirements\n+\n+- The build requirements in [CONTRIBUTING.md](../CONTRIBUTING.md)\n+- `svgbob_cli`", "originalCommit": "da05f2404383bc883687adc43aa96914c9680670", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3NTMyNQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r420675325", "bodyText": "Seems like it's not easily doable due to how Gatsby was written: gatsbyjs/gatsby#7810 Let me add a todo instead.", "author": "trustin", "createdAt": "2020-05-06T10:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0Mzc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NDM2Mw==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417144363", "bodyText": "Think we should prefix with :site: for all the example commands", "author": "anuraaga", "createdAt": "2020-04-29T08:20:36Z", "path": "site/README.md", "diffHunk": "@@ -0,0 +1,81 @@\n+This directory contains a Gatsby project that generates the official\n+web site for Armeria.\n+\n+### Build requirements\n+\n+- The build requirements in [CONTRIBUTING.md](../CONTRIBUTING.md)\n+- `svgbob_cli`\n+  - `brew install rust && cargo install svgbob_cli` on Mac OS X\n+\n+### Working with the project\n+\n+1. Download and install `node`, `yarn` and other dependencies as well as\n+   generating the required `.json` files into the `gen-src` directory.\n+   ```console\n+   $ ../gradlew prepare", "originalCommit": "da05f2404383bc883687adc43aa96914c9680670", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2NjExMg==", "url": "https://github.com/line/armeria/pull/2682#discussion_r420566112", "bodyText": "Because it's ../gradlew, :site:prepare will not actually work. \ud83d\ude09", "author": "trustin", "createdAt": "2020-05-06T06:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NDM2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0Njc3Mg==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417146772", "bodyText": "Recommend importing functions instead of using React it matches the pattern of most tutorials on the web including official one so easier for occasional contributors.", "author": "anuraaga", "createdAt": "2020-04-29T08:25:05Z", "path": "site/src/components/article-list.tsx", "diffHunk": "@@ -0,0 +1,243 @@\n+import React from 'react';\n+import { Table, Form, Radio, Checkbox, Tag, TreeSelect } from 'antd';\n+\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+import {\n+  TranslationOutlined,\n+  PlaySquareOutlined,\n+  FileTextOutlined,\n+  CommentOutlined,\n+  ExperimentOutlined,\n+} from '@ant-design/icons';\n+import styles from './article-list.module.less';\n+\n+interface LocalizedText {\n+  [language: string]: string;\n+}\n+\n+interface Article {\n+  title: LocalizedText;\n+  url: LocalizedText;\n+  author: LocalizedText;\n+  date: string;\n+  tags: string[];\n+  machineTranslation?: boolean;\n+}\n+\n+interface ArticleListProps {\n+  dataSource: Article[];\n+}\n+\n+const ArticleList: React.FC<ArticleListProps> = props => {\n+  const [language, setLanguage] = React.useState('en');", "originalCommit": "da05f2404383bc883687adc43aa96914c9680670", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4NzU1MQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r420587551", "bodyText": "Fixed", "author": "trustin", "createdAt": "2020-05-06T07:15:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0Njc3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIwNzM5Mw==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417207393", "bodyText": "Probably reasonable for us to remove ? and force a type so people don't have to look up API docs to know what the default is. Trick to reduce the need for jsdocs", "author": "anuraaga", "createdAt": "2020-04-29T10:13:42Z", "path": "site/src/components/alert.tsx", "diffHunk": "@@ -0,0 +1,35 @@\n+import { Alert as AntdAlert } from 'antd';\n+import React from 'react';\n+import { InfoCircleOutlined, WarningOutlined } from '@ant-design/icons';\n+\n+interface AlertProps {\n+  type?: 'success' | 'info' | 'warning' | 'error';", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxMzI1OA==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417213258", "bodyText": "Can share some code with something like\nconst content = props.href ? <OutboundLink>...</OutboundLink> : simpleTypeName`\nreturn <code>{content}...", "author": "anuraaga", "createdAt": "2020-04-29T10:25:28Z", "path": "site/src/components/api-link.tsx", "diffHunk": "@@ -0,0 +1,45 @@\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+import React from 'react';\n+\n+import styles from './api-link.module.less';\n+\n+interface TypeLinkProps {\n+  name: string;\n+  href?: string;\n+  plural?: boolean;\n+}\n+\n+const TypeLink: React.FC<TypeLinkProps> = props => {\n+  let simpleTypeName = props.name;\n+  const lastDotIdx = simpleTypeName.lastIndexOf('.');\n+  if (lastDotIdx >= 0) {\n+    simpleTypeName = simpleTypeName.substring(lastDotIdx + 1);\n+  }\n+\n+  let suffix = '';\n+  if (props.plural) {\n+    if (simpleTypeName.match(/(ch|s|sh|x|z)$/)) {\n+      suffix = 'es';\n+    } else {\n+      suffix = 's';\n+    }\n+  }\n+\n+  if (props.href) {\n+    return (\n+      <code>\n+        <OutboundLink href={props.href}>{simpleTypeName}</OutboundLink>", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxNTEyMw==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417215123", "bodyText": "Maybe use useCallback for all the callbacks in the PR - matters less due to prerendering, but I guess pages after the first one will be impacted.", "author": "anuraaga", "createdAt": "2020-04-29T10:29:05Z", "path": "site/src/components/article-list.tsx", "diffHunk": "@@ -0,0 +1,243 @@\n+import React from 'react';\n+import { Table, Form, Radio, Checkbox, Tag, TreeSelect } from 'antd';\n+\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+import {\n+  TranslationOutlined,\n+  PlaySquareOutlined,\n+  FileTextOutlined,\n+  CommentOutlined,\n+  ExperimentOutlined,\n+} from '@ant-design/icons';\n+import styles from './article-list.module.less';\n+\n+interface LocalizedText {\n+  [language: string]: string;\n+}\n+\n+interface Article {\n+  title: LocalizedText;\n+  url: LocalizedText;\n+  author: LocalizedText;\n+  date: string;\n+  tags: string[];\n+  machineTranslation?: boolean;\n+}\n+\n+interface ArticleListProps {\n+  dataSource: Article[];\n+}\n+\n+const ArticleList: React.FC<ArticleListProps> = props => {\n+  const [language, setLanguage] = React.useState('en');\n+  const [tags, setTags] = React.useState([\n+    'articles',\n+    'slides',\n+    'knowledge',\n+    'experience',\n+  ]);\n+  const [\n+    includeMachineTranslated,\n+    setIncludeMachineTranslated,\n+  ] = React.useState(true);\n+\n+  const columns = [\n+    {\n+      title: 'Title',\n+      dataIndex: 'title',\n+      key: 'title',\n+      className: styles.title,\n+      render: (e: any) => {\n+        let url: string = e.article.url[e.language];\n+        let machineTranslated = false;\n+        if (!url) {\n+          const startLanguage = ['en', 'ja', 'ko'].find(l => e.article.url[l]);\n+          if (startLanguage) {\n+            url = `https://translate.google.com/translate?sl=${startLanguage}&tl=${language}&u=${encodeURIComponent(\n+              e.article.url[startLanguage],\n+            )}`;\n+            machineTranslated = true;\n+          }\n+        }\n+\n+        if (!url) {\n+          return e.localizedTitle;\n+        }\n+\n+        return (\n+          <>\n+            {url ? (\n+              <OutboundLink href={url}>{e.localizedTitle}</OutboundLink>\n+            ) : (\n+              e.localizedTitle\n+            )}{' '}\n+            {e.article.tags\n+              .map((tag: string) => {\n+                switch (tag) {\n+                  case 'articles':\n+                    return <FileTextOutlined />;\n+                  case 'slides':\n+                    return <PlaySquareOutlined />;\n+                  case 'knowledge':\n+                    return <ExperimentOutlined />;\n+                  case 'experience':\n+                    return <CommentOutlined />;\n+                  default:\n+                    return <Tag key={tag}>{tag}</Tag>;\n+                }\n+              })\n+              .map((reactNode: React.ReactNode) => [reactNode, ' '])}\n+            {machineTranslated ? <TranslationOutlined /> : ''}\n+          </>\n+        );\n+      },\n+      sorter: (a: any, b: any) =>\n+        a.title.localizedTitle.localeCompare(b.title.localizedTitle),\n+    },\n+    {\n+      title: 'Date',\n+      dataIndex: 'date',\n+      key: 'date',\n+      sorter: (a: any, b: any) => a.date.localeCompare(b.date),\n+      className: styles.nowrap,\n+    },\n+    {\n+      title: 'Author',\n+      dataIndex: 'author',\n+      key: 'author',\n+      sorter: (a: any, b: any) => a.author.localeCompare(b.author),\n+      className: styles.nowrap,\n+    },\n+  ];\n+\n+  const dataSource = convert(props.dataSource);\n+\n+  function convert(articles: Article[]) {\n+    const formatTags = tags.filter(\n+      tag => tag === 'articles' || tag === 'slides',\n+    );\n+    const typeTags = tags.filter(\n+      tag => tag === 'knowledge' || tag === 'experience',\n+    );\n+    return articles.flatMap((e, i) => {\n+      // Skip if the tags do not match.\n+      if (\n+        !formatTags.find(tag => e.tags.includes(tag)) ||\n+        !typeTags.find(tag => e.tags.includes(tag))\n+      ) {\n+        return [];\n+      }\n+\n+      // Skip if:\n+      // - Google Translate can't translate the article.\n+      // - A user unchecked the 'include machine-translagted' checkbox.\n+      if (\n+        (e.machineTranslation === false || !includeMachineTranslated) &&\n+        !e.url[language]\n+      ) {\n+        return [];\n+      }\n+\n+      return {\n+        key: i,\n+        title: {\n+          localizedTitle: e.title[language] || e.title.en,\n+          article: e,\n+          language,\n+        },\n+        date: e.date,\n+        author: e.author[language] || e.author.en,\n+      };\n+    });\n+  }\n+\n+  return (\n+    <>\n+      <Form className={styles.form} layout=\"inline\">\n+        <Form.Item>\n+          <Radio.Group\n+            onChange={e => setLanguage(e.target.value)}\n+            value={language}\n+          >\n+            <Radio value=\"en\">English</Radio>\n+            <Radio value=\"ja\">\u65e5\u672c\u8a9e</Radio>\n+            <Radio value=\"ko\">\ud55c\uad6d\uc5b4</Radio>\n+          </Radio.Group>\n+        </Form.Item>\n+        <Form.Item>\n+          <Checkbox\n+            checked={includeMachineTranslated}\n+            onChange={() =>", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyMjI1NQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r420622255", "bodyText": "@anuraaga, could you check f34bfd3 to see if my fix is correct? I'm not good at this. \ud83e\udd23", "author": "trustin", "createdAt": "2020-05-06T08:24:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxNTEyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyMTIyOA==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417221228", "bodyText": "I think CSS can be applied to SVG too, maybe it can reduce some of the edits of the SVG from the designer.", "author": "anuraaga", "createdAt": "2020-04-29T10:40:55Z", "path": "site/src/components/logo.tsx", "diffHunk": "@@ -0,0 +1,341 @@\n+import React from 'react';\n+\n+interface LogoProps {\n+  className?: string;\n+  style?: React.CSSProperties;\n+  width?: string;\n+  height?: string;\n+  primaryColor?: string;\n+  secondaryColor?: string;\n+  tertiaryColor?: string;\n+  textColor?: string;\n+  notext?: boolean;\n+  role?: string;\n+  label?: string;\n+  ariaHidden?: boolean;\n+}\n+\n+const Logo: React.FC<LogoProps> = props => {\n+  const primaryStyle: React.CSSProperties = {\n+    fill: props.primaryColor || '#ff0089',\n+    fillOpacity: 1,\n+    fillRule: 'nonzero',\n+    stroke: 'none',\n+  };\n+  const secondaryStyle: React.CSSProperties = {\n+    fill: props.secondaryColor || '#ff9dc3',\n+    fillOpacity: 1,\n+    fillRule: 'nonzero',\n+    stroke: 'none',\n+  };\n+  const tertiaryStyle: React.CSSProperties = {\n+    fill: props.tertiaryColor || '#ffffff',\n+    fillOpacity: 1,\n+    fillRule: 'nonzero',\n+    stroke: 'none',\n+  };\n+  const textStyle: React.CSSProperties = {\n+    fill: props.textColor || '#3a3a3a',\n+    fillOpacity: 1,\n+    fillRule: 'nonzero',\n+    stroke: 'none',\n+  };\n+\n+  const logoStyle: React.CSSProperties = {\n+    ...props.style,\n+  };\n+\n+  logoStyle.width = props.width || logoStyle.width || '200px';\n+  logoStyle.height = props.height || logoStyle.height;\n+  logoStyle.overflow = logoStyle.overflow || 'hidden';\n+  logoStyle.verticalAlign = logoStyle.verticalAlign || 'middle';\n+\n+  const label = props.label || 'Armeria project logo';\n+\n+  return (\n+    <span\n+      role={props.role || 'img'}\n+      aria-label={label}\n+      aria-hidden={props.ariaHidden || false}\n+    >\n+      <svg\n+        className={props.className || ''}\n+        style={logoStyle}\n+        viewBox={props.notext ? '20 70 70 70' : '20 70 257 70'}\n+        version=\"1.1\"\n+      >\n+        <title>{label}</title>\n+        <g id=\"layer1\" transform=\"translate(0,-87)\">\n+          <g\n+            id=\"g4208\"\n+            transform=\"matrix(1.3217499,0,0,1.3217499,-49.437761,-33.946772)\"\n+          >\n+            {props.notext ? (\n+              ''\n+            ) : (\n+              <>\n+                <g\n+                  transform=\"matrix(0.35277777,0,0,-0.35277777,124.77564,163.15531)\"\n+                  id=\"g12\"\n+                >\n+                  <path\n+                    id=\"path14\"\n+                    style={textStyle}", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5MzQ0Mw==", "url": "https://github.com/line/armeria/pull/2682#discussion_r420593443", "bodyText": "Yeah, extracted some common and default styles into a CSS module.", "author": "trustin", "createdAt": "2020-05-06T07:27:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyMTIyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyMzk1NQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417223955", "bodyText": "Markdown, woot!", "author": "anuraaga", "createdAt": "2020-04-29T10:46:13Z", "path": "site/src/pages/docs/advanced-custom-attributes.mdx", "diffHunk": "@@ -0,0 +1,38 @@\n+# `RequestContext` custom attributes", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNTY1NA==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417225654", "bodyText": "Think all-round is British English, all-around would be US. But since it has a bit of connotation of jack-of-all-trades, master of none, maybe instead a very flexible", "author": "anuraaga", "createdAt": "2020-04-29T10:49:35Z", "path": "site/src/pages/index.tsx", "diffHunk": "@@ -0,0 +1,402 @@\n+import { WindowLocation } from '@reach/router';\n+import { Carousel, Button, Tooltip, Typography } from 'antd';\n+import React from 'react';\n+import { graphql, Link, useStaticQuery } from 'gatsby';\n+import Img from 'gatsby-image';\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+\n+import Blockquote from '../components/blockquote';\n+import BrowserMockup from '../components/browser-mockup';\n+import CodeBlock from '../components/code-block';\n+import Emoji from '../components/emoji';\n+import Logo from '../components/logo';\n+import { Highlight, Marketing, MarketingBlock } from '../components/marketing';\n+import NoWrap from '../components/nowrap';\n+import ProjectBadge from '../components/project-badge';\n+import BaseLayout from '../layouts/base';\n+\n+import styles from './index.module.less';\n+\n+const { Title, Paragraph } = Typography;\n+\n+const IndexPage: React.FC<{\n+  location: WindowLocation;\n+}> = props => {\n+  const data = useStaticQuery(graphql`\n+    query {\n+      docServiceImages: allFile(\n+        filter: { relativePath: { glob: \"docservice-carousel-*.png\" } }\n+        sort: { fields: relativePath, order: ASC }\n+      ) {\n+        nodes {\n+          childImageSharp {\n+            fluid {\n+              ...GatsbyImageSharpFluid\n+            }\n+          }\n+        }\n+      }\n+\n+      logoVideo: file(relativePath: { eq: \"armeria.m4v\" }) {\n+        publicURL\n+      }\n+\n+      logoGif: file(relativePath: { eq: \"armeria.gif\" }) {\n+        publicURL\n+      }\n+\n+      integrationDiagram: file(relativePath: { eq: \"integration.svg\" }) {\n+        publicURL\n+      }\n+    }\n+  `);\n+\n+  function renderGetStartedButtons(responsive: boolean) {\n+    const className = `${styles.getStartedButton} ${\n+      responsive ? styles.responsive : ''\n+    }`;\n+    return (\n+      <>\n+        <Link to=\"/docs\" className={className}>\n+          <Button type=\"primary\" size=\"large\">\n+            <Emoji text=\"Learn more \u2728\" />\n+          </Button>\n+        </Link>\n+        <Link to=\"/community\" className={className}>\n+          <Button size=\"large\">\n+            <Emoji text=\"Community \ud83d\udc4b\" />\n+          </Button>\n+        </Link>\n+      </>\n+    );\n+  }\n+\n+  return (\n+    <BaseLayout\n+      location={props.location}\n+      pageTitle=\"Armeria &ndash; An all-round microservice framework\"\n+      contentClassName={styles.wrapper}\n+    >\n+      <Marketing className={styles.slogan}>\n+        <MarketingBlock noreveal>\n+          <Logo\n+            className={styles.sloganBackgroundImage}\n+            width=\"768px\"\n+            height=\"768px\"\n+            primaryColor=\"rgba(255, 255, 255, 1.0)\"\n+            secondaryColor=\"rgba(255, 255, 255, 0.55)\"\n+            tertiaryColor=\"transparent\"\n+            label=\" \"\n+            notext\n+            ariaHidden\n+          />\n+          <Title level={1}>\n+            Build a reactive microservice{' '}\n+            <NoWrap>\n+              <Highlight>\n+                at <u>your</u> pace\n+              </Highlight>\n+              ,\n+            </NoWrap>{' '}\n+            <NoWrap>not theirs.</NoWrap>\n+          </Title>\n+          <Paragraph>\n+            <em>Armeria</em> is an all-round microservice framework that lets", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYzNDk5NQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r420634995", "bodyText": "TIL!\n'very flexible' sounds somewhat flat, though. Any fancier expressions?", "author": "trustin", "createdAt": "2020-05-06T08:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNTY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1MTg4OQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r421251889", "bodyText": "https://grammarist.com/usage/all-around-all-round/ for those who are curious. I'm not sure it really has a nuance of 'master of none', though. \ud83e\udd14", "author": "trustin", "createdAt": "2020-05-07T05:43:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNTY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NDIyNA==", "url": "https://github.com/line/armeria/pull/2682#discussion_r421254224", "bodyText": "batteries-included is also pretty common for frameworks with many features built in\nWe can also follow Shakespeare and make up some English :) Armeria is a \"do-it-all\" microservice framework\nAdding quotes allows using bad grammar too, this is a play on the more normal full featured - Armeria is a \"fullest featured\" microservice framework\nIf we split sentences, this seems nice Armeria is your go-to microservice framework for any situation. You can build... Go-to is exactly how I always describe it ;)\nAnother word I like \"one-stop shop\". Armeria is the one-stop shop for your microservice needs, allowing you to build any type...\nFWIW, I don't see all-around or all-round much in practice, except maybe in novels, so it feels weird here on a docs page.", "author": "anuraaga", "createdAt": "2020-05-07T05:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNTY1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3MTE2OA==", "url": "https://github.com/line/armeria/pull/2682#discussion_r421271168", "bodyText": "Thanks a lot for awesome suggestions! Switched to your go-to microservice framework ....", "author": "trustin", "createdAt": "2020-05-07T06:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNTY1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNjQ0MQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417226441", "bodyText": "Perhaps a marketing policy, but if it's possible to just say LINE easier to read - for example, Google, Facebook, Twitter etc would not add Inc, LLC, etc in this sort of documentation", "author": "anuraaga", "createdAt": "2020-04-29T10:51:09Z", "path": "site/src/pages/index.tsx", "diffHunk": "@@ -0,0 +1,402 @@\n+import { WindowLocation } from '@reach/router';\n+import { Carousel, Button, Tooltip, Typography } from 'antd';\n+import React from 'react';\n+import { graphql, Link, useStaticQuery } from 'gatsby';\n+import Img from 'gatsby-image';\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+\n+import Blockquote from '../components/blockquote';\n+import BrowserMockup from '../components/browser-mockup';\n+import CodeBlock from '../components/code-block';\n+import Emoji from '../components/emoji';\n+import Logo from '../components/logo';\n+import { Highlight, Marketing, MarketingBlock } from '../components/marketing';\n+import NoWrap from '../components/nowrap';\n+import ProjectBadge from '../components/project-badge';\n+import BaseLayout from '../layouts/base';\n+\n+import styles from './index.module.less';\n+\n+const { Title, Paragraph } = Typography;\n+\n+const IndexPage: React.FC<{\n+  location: WindowLocation;\n+}> = props => {\n+  const data = useStaticQuery(graphql`\n+    query {\n+      docServiceImages: allFile(\n+        filter: { relativePath: { glob: \"docservice-carousel-*.png\" } }\n+        sort: { fields: relativePath, order: ASC }\n+      ) {\n+        nodes {\n+          childImageSharp {\n+            fluid {\n+              ...GatsbyImageSharpFluid\n+            }\n+          }\n+        }\n+      }\n+\n+      logoVideo: file(relativePath: { eq: \"armeria.m4v\" }) {\n+        publicURL\n+      }\n+\n+      logoGif: file(relativePath: { eq: \"armeria.gif\" }) {\n+        publicURL\n+      }\n+\n+      integrationDiagram: file(relativePath: { eq: \"integration.svg\" }) {\n+        publicURL\n+      }\n+    }\n+  `);\n+\n+  function renderGetStartedButtons(responsive: boolean) {\n+    const className = `${styles.getStartedButton} ${\n+      responsive ? styles.responsive : ''\n+    }`;\n+    return (\n+      <>\n+        <Link to=\"/docs\" className={className}>\n+          <Button type=\"primary\" size=\"large\">\n+            <Emoji text=\"Learn more \u2728\" />\n+          </Button>\n+        </Link>\n+        <Link to=\"/community\" className={className}>\n+          <Button size=\"large\">\n+            <Emoji text=\"Community \ud83d\udc4b\" />\n+          </Button>\n+        </Link>\n+      </>\n+    );\n+  }\n+\n+  return (\n+    <BaseLayout\n+      location={props.location}\n+      pageTitle=\"Armeria &ndash; An all-round microservice framework\"\n+      contentClassName={styles.wrapper}\n+    >\n+      <Marketing className={styles.slogan}>\n+        <MarketingBlock noreveal>\n+          <Logo\n+            className={styles.sloganBackgroundImage}\n+            width=\"768px\"\n+            height=\"768px\"\n+            primaryColor=\"rgba(255, 255, 255, 1.0)\"\n+            secondaryColor=\"rgba(255, 255, 255, 0.55)\"\n+            tertiaryColor=\"transparent\"\n+            label=\" \"\n+            notext\n+            ariaHidden\n+          />\n+          <Title level={1}>\n+            Build a reactive microservice{' '}\n+            <NoWrap>\n+              <Highlight>\n+                at <u>your</u> pace\n+              </Highlight>\n+              ,\n+            </NoWrap>{' '}\n+            <NoWrap>not theirs.</NoWrap>\n+          </Title>\n+          <Paragraph>\n+            <em>Armeria</em> is an all-round microservice framework that lets\n+            you build any type of microservices leveraging your favorite\n+            technologies, including gRPC, Thrift, Kotlin, Retrofit, Reactive\n+            Streams, Spring Boot and Dropwizard.\n+          </Paragraph>\n+          <Paragraph className={styles.indented}>\n+            &ldquo; Brought to you by the creater of{' '}\n+            <Tooltip title=\"The most popular non-blocking I/O client-server framework in Java ecosystem\">\n+              <OutboundLink href=\"https://netty.io/\">Netty</OutboundLink>\n+            </Tooltip>{' '}\n+            and his colleagues at{' '}\n+            <Tooltip title=\"The company behind the most popular mobile messaging app in Japan, Taiwan and Thai\">\n+              <OutboundLink href=\"https://engineering.linecorp.com/en/\">\n+                LINE corporation", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNjc5Nw==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417226797", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        gRPC, Thrift, REST, files? <NoWrap>You name it.</NoWrap>{' '}\n          \n          \n            \n                        gRPC, Thrift, REST, static files? <NoWrap>You name it.</NoWrap>{' '}", "author": "anuraaga", "createdAt": "2020-04-29T10:51:46Z", "path": "site/src/pages/index.tsx", "diffHunk": "@@ -0,0 +1,402 @@\n+import { WindowLocation } from '@reach/router';\n+import { Carousel, Button, Tooltip, Typography } from 'antd';\n+import React from 'react';\n+import { graphql, Link, useStaticQuery } from 'gatsby';\n+import Img from 'gatsby-image';\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+\n+import Blockquote from '../components/blockquote';\n+import BrowserMockup from '../components/browser-mockup';\n+import CodeBlock from '../components/code-block';\n+import Emoji from '../components/emoji';\n+import Logo from '../components/logo';\n+import { Highlight, Marketing, MarketingBlock } from '../components/marketing';\n+import NoWrap from '../components/nowrap';\n+import ProjectBadge from '../components/project-badge';\n+import BaseLayout from '../layouts/base';\n+\n+import styles from './index.module.less';\n+\n+const { Title, Paragraph } = Typography;\n+\n+const IndexPage: React.FC<{\n+  location: WindowLocation;\n+}> = props => {\n+  const data = useStaticQuery(graphql`\n+    query {\n+      docServiceImages: allFile(\n+        filter: { relativePath: { glob: \"docservice-carousel-*.png\" } }\n+        sort: { fields: relativePath, order: ASC }\n+      ) {\n+        nodes {\n+          childImageSharp {\n+            fluid {\n+              ...GatsbyImageSharpFluid\n+            }\n+          }\n+        }\n+      }\n+\n+      logoVideo: file(relativePath: { eq: \"armeria.m4v\" }) {\n+        publicURL\n+      }\n+\n+      logoGif: file(relativePath: { eq: \"armeria.gif\" }) {\n+        publicURL\n+      }\n+\n+      integrationDiagram: file(relativePath: { eq: \"integration.svg\" }) {\n+        publicURL\n+      }\n+    }\n+  `);\n+\n+  function renderGetStartedButtons(responsive: boolean) {\n+    const className = `${styles.getStartedButton} ${\n+      responsive ? styles.responsive : ''\n+    }`;\n+    return (\n+      <>\n+        <Link to=\"/docs\" className={className}>\n+          <Button type=\"primary\" size=\"large\">\n+            <Emoji text=\"Learn more \u2728\" />\n+          </Button>\n+        </Link>\n+        <Link to=\"/community\" className={className}>\n+          <Button size=\"large\">\n+            <Emoji text=\"Community \ud83d\udc4b\" />\n+          </Button>\n+        </Link>\n+      </>\n+    );\n+  }\n+\n+  return (\n+    <BaseLayout\n+      location={props.location}\n+      pageTitle=\"Armeria &ndash; An all-round microservice framework\"\n+      contentClassName={styles.wrapper}\n+    >\n+      <Marketing className={styles.slogan}>\n+        <MarketingBlock noreveal>\n+          <Logo\n+            className={styles.sloganBackgroundImage}\n+            width=\"768px\"\n+            height=\"768px\"\n+            primaryColor=\"rgba(255, 255, 255, 1.0)\"\n+            secondaryColor=\"rgba(255, 255, 255, 0.55)\"\n+            tertiaryColor=\"transparent\"\n+            label=\" \"\n+            notext\n+            ariaHidden\n+          />\n+          <Title level={1}>\n+            Build a reactive microservice{' '}\n+            <NoWrap>\n+              <Highlight>\n+                at <u>your</u> pace\n+              </Highlight>\n+              ,\n+            </NoWrap>{' '}\n+            <NoWrap>not theirs.</NoWrap>\n+          </Title>\n+          <Paragraph>\n+            <em>Armeria</em> is an all-round microservice framework that lets\n+            you build any type of microservices leveraging your favorite\n+            technologies, including gRPC, Thrift, Kotlin, Retrofit, Reactive\n+            Streams, Spring Boot and Dropwizard.\n+          </Paragraph>\n+          <Paragraph className={styles.indented}>\n+            &ldquo; Brought to you by the creater of{' '}\n+            <Tooltip title=\"The most popular non-blocking I/O client-server framework in Java ecosystem\">\n+              <OutboundLink href=\"https://netty.io/\">Netty</OutboundLink>\n+            </Tooltip>{' '}\n+            and his colleagues at{' '}\n+            <Tooltip title=\"The company behind the most popular mobile messaging app in Japan, Taiwan and Thai\">\n+              <OutboundLink href=\"https://engineering.linecorp.com/en/\">\n+                LINE corporation\n+              </OutboundLink>\n+            </Tooltip>{' '}\n+            &rdquo;\n+          </Paragraph>\n+          <div>{renderGetStartedButtons(true)}</div>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            gRPC, Thrift, REST, files? <NoWrap>You name it.</NoWrap>{' '}", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNzIxOQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417227219", "bodyText": "Perhaps more readable as\n{`Let's embrace the reality - \n\nto avoid HTML escaping. JSX is Javascript, not HTML, so we shouldn't have to worry :D", "author": "anuraaga", "createdAt": "2020-04-29T10:52:40Z", "path": "site/src/pages/index.tsx", "diffHunk": "@@ -0,0 +1,402 @@\n+import { WindowLocation } from '@reach/router';\n+import { Carousel, Button, Tooltip, Typography } from 'antd';\n+import React from 'react';\n+import { graphql, Link, useStaticQuery } from 'gatsby';\n+import Img from 'gatsby-image';\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+\n+import Blockquote from '../components/blockquote';\n+import BrowserMockup from '../components/browser-mockup';\n+import CodeBlock from '../components/code-block';\n+import Emoji from '../components/emoji';\n+import Logo from '../components/logo';\n+import { Highlight, Marketing, MarketingBlock } from '../components/marketing';\n+import NoWrap from '../components/nowrap';\n+import ProjectBadge from '../components/project-badge';\n+import BaseLayout from '../layouts/base';\n+\n+import styles from './index.module.less';\n+\n+const { Title, Paragraph } = Typography;\n+\n+const IndexPage: React.FC<{\n+  location: WindowLocation;\n+}> = props => {\n+  const data = useStaticQuery(graphql`\n+    query {\n+      docServiceImages: allFile(\n+        filter: { relativePath: { glob: \"docservice-carousel-*.png\" } }\n+        sort: { fields: relativePath, order: ASC }\n+      ) {\n+        nodes {\n+          childImageSharp {\n+            fluid {\n+              ...GatsbyImageSharpFluid\n+            }\n+          }\n+        }\n+      }\n+\n+      logoVideo: file(relativePath: { eq: \"armeria.m4v\" }) {\n+        publicURL\n+      }\n+\n+      logoGif: file(relativePath: { eq: \"armeria.gif\" }) {\n+        publicURL\n+      }\n+\n+      integrationDiagram: file(relativePath: { eq: \"integration.svg\" }) {\n+        publicURL\n+      }\n+    }\n+  `);\n+\n+  function renderGetStartedButtons(responsive: boolean) {\n+    const className = `${styles.getStartedButton} ${\n+      responsive ? styles.responsive : ''\n+    }`;\n+    return (\n+      <>\n+        <Link to=\"/docs\" className={className}>\n+          <Button type=\"primary\" size=\"large\">\n+            <Emoji text=\"Learn more \u2728\" />\n+          </Button>\n+        </Link>\n+        <Link to=\"/community\" className={className}>\n+          <Button size=\"large\">\n+            <Emoji text=\"Community \ud83d\udc4b\" />\n+          </Button>\n+        </Link>\n+      </>\n+    );\n+  }\n+\n+  return (\n+    <BaseLayout\n+      location={props.location}\n+      pageTitle=\"Armeria &ndash; An all-round microservice framework\"\n+      contentClassName={styles.wrapper}\n+    >\n+      <Marketing className={styles.slogan}>\n+        <MarketingBlock noreveal>\n+          <Logo\n+            className={styles.sloganBackgroundImage}\n+            width=\"768px\"\n+            height=\"768px\"\n+            primaryColor=\"rgba(255, 255, 255, 1.0)\"\n+            secondaryColor=\"rgba(255, 255, 255, 0.55)\"\n+            tertiaryColor=\"transparent\"\n+            label=\" \"\n+            notext\n+            ariaHidden\n+          />\n+          <Title level={1}>\n+            Build a reactive microservice{' '}\n+            <NoWrap>\n+              <Highlight>\n+                at <u>your</u> pace\n+              </Highlight>\n+              ,\n+            </NoWrap>{' '}\n+            <NoWrap>not theirs.</NoWrap>\n+          </Title>\n+          <Paragraph>\n+            <em>Armeria</em> is an all-round microservice framework that lets\n+            you build any type of microservices leveraging your favorite\n+            technologies, including gRPC, Thrift, Kotlin, Retrofit, Reactive\n+            Streams, Spring Boot and Dropwizard.\n+          </Paragraph>\n+          <Paragraph className={styles.indented}>\n+            &ldquo; Brought to you by the creater of{' '}\n+            <Tooltip title=\"The most popular non-blocking I/O client-server framework in Java ecosystem\">\n+              <OutboundLink href=\"https://netty.io/\">Netty</OutboundLink>\n+            </Tooltip>{' '}\n+            and his colleagues at{' '}\n+            <Tooltip title=\"The company behind the most popular mobile messaging app in Japan, Taiwan and Thai\">\n+              <OutboundLink href=\"https://engineering.linecorp.com/en/\">\n+                LINE corporation\n+              </OutboundLink>\n+            </Tooltip>{' '}\n+            &rdquo;\n+          </Paragraph>\n+          <div>{renderGetStartedButtons(true)}</div>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            gRPC, Thrift, REST, files? <NoWrap>You name it.</NoWrap>{' '}\n+            <Highlight nowrap>We serve them all.</Highlight>\n+          </Title>\n+          <Paragraph>\n+            Let&apos;s embrace the reality &mdash; we almost always have to deal", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3MDExNw==", "url": "https://github.com/line/armeria/pull/2682#discussion_r420570117", "bodyText": "eslint tells us not to use ' but only &apos;, &lquos; or &rquos;. Should we disable the rule? Having to type &apos; is boring but I think it makes sense in terms of disambiguation.", "author": "trustin", "createdAt": "2020-05-06T06:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNzIxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NTUxOA==", "url": "https://github.com/line/armeria/pull/2682#discussion_r421255518", "bodyText": "Ah thought it'd be ok with the { but if not no worries", "author": "anuraaga", "createdAt": "2020-05-07T05:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNzIxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNzQwNw==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417227407", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Armeria is capable of running services of different protocols, all\n          \n          \n            \n                        Armeria is capable of running services using different protocols, all", "author": "anuraaga", "createdAt": "2020-04-29T10:53:03Z", "path": "site/src/pages/index.tsx", "diffHunk": "@@ -0,0 +1,402 @@\n+import { WindowLocation } from '@reach/router';\n+import { Carousel, Button, Tooltip, Typography } from 'antd';\n+import React from 'react';\n+import { graphql, Link, useStaticQuery } from 'gatsby';\n+import Img from 'gatsby-image';\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+\n+import Blockquote from '../components/blockquote';\n+import BrowserMockup from '../components/browser-mockup';\n+import CodeBlock from '../components/code-block';\n+import Emoji from '../components/emoji';\n+import Logo from '../components/logo';\n+import { Highlight, Marketing, MarketingBlock } from '../components/marketing';\n+import NoWrap from '../components/nowrap';\n+import ProjectBadge from '../components/project-badge';\n+import BaseLayout from '../layouts/base';\n+\n+import styles from './index.module.less';\n+\n+const { Title, Paragraph } = Typography;\n+\n+const IndexPage: React.FC<{\n+  location: WindowLocation;\n+}> = props => {\n+  const data = useStaticQuery(graphql`\n+    query {\n+      docServiceImages: allFile(\n+        filter: { relativePath: { glob: \"docservice-carousel-*.png\" } }\n+        sort: { fields: relativePath, order: ASC }\n+      ) {\n+        nodes {\n+          childImageSharp {\n+            fluid {\n+              ...GatsbyImageSharpFluid\n+            }\n+          }\n+        }\n+      }\n+\n+      logoVideo: file(relativePath: { eq: \"armeria.m4v\" }) {\n+        publicURL\n+      }\n+\n+      logoGif: file(relativePath: { eq: \"armeria.gif\" }) {\n+        publicURL\n+      }\n+\n+      integrationDiagram: file(relativePath: { eq: \"integration.svg\" }) {\n+        publicURL\n+      }\n+    }\n+  `);\n+\n+  function renderGetStartedButtons(responsive: boolean) {\n+    const className = `${styles.getStartedButton} ${\n+      responsive ? styles.responsive : ''\n+    }`;\n+    return (\n+      <>\n+        <Link to=\"/docs\" className={className}>\n+          <Button type=\"primary\" size=\"large\">\n+            <Emoji text=\"Learn more \u2728\" />\n+          </Button>\n+        </Link>\n+        <Link to=\"/community\" className={className}>\n+          <Button size=\"large\">\n+            <Emoji text=\"Community \ud83d\udc4b\" />\n+          </Button>\n+        </Link>\n+      </>\n+    );\n+  }\n+\n+  return (\n+    <BaseLayout\n+      location={props.location}\n+      pageTitle=\"Armeria &ndash; An all-round microservice framework\"\n+      contentClassName={styles.wrapper}\n+    >\n+      <Marketing className={styles.slogan}>\n+        <MarketingBlock noreveal>\n+          <Logo\n+            className={styles.sloganBackgroundImage}\n+            width=\"768px\"\n+            height=\"768px\"\n+            primaryColor=\"rgba(255, 255, 255, 1.0)\"\n+            secondaryColor=\"rgba(255, 255, 255, 0.55)\"\n+            tertiaryColor=\"transparent\"\n+            label=\" \"\n+            notext\n+            ariaHidden\n+          />\n+          <Title level={1}>\n+            Build a reactive microservice{' '}\n+            <NoWrap>\n+              <Highlight>\n+                at <u>your</u> pace\n+              </Highlight>\n+              ,\n+            </NoWrap>{' '}\n+            <NoWrap>not theirs.</NoWrap>\n+          </Title>\n+          <Paragraph>\n+            <em>Armeria</em> is an all-round microservice framework that lets\n+            you build any type of microservices leveraging your favorite\n+            technologies, including gRPC, Thrift, Kotlin, Retrofit, Reactive\n+            Streams, Spring Boot and Dropwizard.\n+          </Paragraph>\n+          <Paragraph className={styles.indented}>\n+            &ldquo; Brought to you by the creater of{' '}\n+            <Tooltip title=\"The most popular non-blocking I/O client-server framework in Java ecosystem\">\n+              <OutboundLink href=\"https://netty.io/\">Netty</OutboundLink>\n+            </Tooltip>{' '}\n+            and his colleagues at{' '}\n+            <Tooltip title=\"The company behind the most popular mobile messaging app in Japan, Taiwan and Thai\">\n+              <OutboundLink href=\"https://engineering.linecorp.com/en/\">\n+                LINE corporation\n+              </OutboundLink>\n+            </Tooltip>{' '}\n+            &rdquo;\n+          </Paragraph>\n+          <div>{renderGetStartedButtons(true)}</div>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            gRPC, Thrift, REST, files? <NoWrap>You name it.</NoWrap>{' '}\n+            <Highlight nowrap>We serve them all.</Highlight>\n+          </Title>\n+          <Paragraph>\n+            Let&apos;s embrace the reality &mdash; we almost always have to deal\n+            with more than one protocol. It was once Thrift, today it&apos;s\n+            gRPC, and REST never gets old. At the same time, you sometimes have\n+            to handle health check requests from a load balancer or even serve\n+            some static files.\n+          </Paragraph>\n+          <Paragraph>\n+            Armeria is capable of running services of different protocols, all", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyNzcxNQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417227715", "bodyText": "Maybe something like\nNo need for any proxies or sidecars. Enjoy the reduced complexity and points of failure, even when migrating between protocols!", "author": "anuraaga", "createdAt": "2020-04-29T10:53:42Z", "path": "site/src/pages/index.tsx", "diffHunk": "@@ -0,0 +1,402 @@\n+import { WindowLocation } from '@reach/router';\n+import { Carousel, Button, Tooltip, Typography } from 'antd';\n+import React from 'react';\n+import { graphql, Link, useStaticQuery } from 'gatsby';\n+import Img from 'gatsby-image';\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+\n+import Blockquote from '../components/blockquote';\n+import BrowserMockup from '../components/browser-mockup';\n+import CodeBlock from '../components/code-block';\n+import Emoji from '../components/emoji';\n+import Logo from '../components/logo';\n+import { Highlight, Marketing, MarketingBlock } from '../components/marketing';\n+import NoWrap from '../components/nowrap';\n+import ProjectBadge from '../components/project-badge';\n+import BaseLayout from '../layouts/base';\n+\n+import styles from './index.module.less';\n+\n+const { Title, Paragraph } = Typography;\n+\n+const IndexPage: React.FC<{\n+  location: WindowLocation;\n+}> = props => {\n+  const data = useStaticQuery(graphql`\n+    query {\n+      docServiceImages: allFile(\n+        filter: { relativePath: { glob: \"docservice-carousel-*.png\" } }\n+        sort: { fields: relativePath, order: ASC }\n+      ) {\n+        nodes {\n+          childImageSharp {\n+            fluid {\n+              ...GatsbyImageSharpFluid\n+            }\n+          }\n+        }\n+      }\n+\n+      logoVideo: file(relativePath: { eq: \"armeria.m4v\" }) {\n+        publicURL\n+      }\n+\n+      logoGif: file(relativePath: { eq: \"armeria.gif\" }) {\n+        publicURL\n+      }\n+\n+      integrationDiagram: file(relativePath: { eq: \"integration.svg\" }) {\n+        publicURL\n+      }\n+    }\n+  `);\n+\n+  function renderGetStartedButtons(responsive: boolean) {\n+    const className = `${styles.getStartedButton} ${\n+      responsive ? styles.responsive : ''\n+    }`;\n+    return (\n+      <>\n+        <Link to=\"/docs\" className={className}>\n+          <Button type=\"primary\" size=\"large\">\n+            <Emoji text=\"Learn more \u2728\" />\n+          </Button>\n+        </Link>\n+        <Link to=\"/community\" className={className}>\n+          <Button size=\"large\">\n+            <Emoji text=\"Community \ud83d\udc4b\" />\n+          </Button>\n+        </Link>\n+      </>\n+    );\n+  }\n+\n+  return (\n+    <BaseLayout\n+      location={props.location}\n+      pageTitle=\"Armeria &ndash; An all-round microservice framework\"\n+      contentClassName={styles.wrapper}\n+    >\n+      <Marketing className={styles.slogan}>\n+        <MarketingBlock noreveal>\n+          <Logo\n+            className={styles.sloganBackgroundImage}\n+            width=\"768px\"\n+            height=\"768px\"\n+            primaryColor=\"rgba(255, 255, 255, 1.0)\"\n+            secondaryColor=\"rgba(255, 255, 255, 0.55)\"\n+            tertiaryColor=\"transparent\"\n+            label=\" \"\n+            notext\n+            ariaHidden\n+          />\n+          <Title level={1}>\n+            Build a reactive microservice{' '}\n+            <NoWrap>\n+              <Highlight>\n+                at <u>your</u> pace\n+              </Highlight>\n+              ,\n+            </NoWrap>{' '}\n+            <NoWrap>not theirs.</NoWrap>\n+          </Title>\n+          <Paragraph>\n+            <em>Armeria</em> is an all-round microservice framework that lets\n+            you build any type of microservices leveraging your favorite\n+            technologies, including gRPC, Thrift, Kotlin, Retrofit, Reactive\n+            Streams, Spring Boot and Dropwizard.\n+          </Paragraph>\n+          <Paragraph className={styles.indented}>\n+            &ldquo; Brought to you by the creater of{' '}\n+            <Tooltip title=\"The most popular non-blocking I/O client-server framework in Java ecosystem\">\n+              <OutboundLink href=\"https://netty.io/\">Netty</OutboundLink>\n+            </Tooltip>{' '}\n+            and his colleagues at{' '}\n+            <Tooltip title=\"The company behind the most popular mobile messaging app in Japan, Taiwan and Thai\">\n+              <OutboundLink href=\"https://engineering.linecorp.com/en/\">\n+                LINE corporation\n+              </OutboundLink>\n+            </Tooltip>{' '}\n+            &rdquo;\n+          </Paragraph>\n+          <div>{renderGetStartedButtons(true)}</div>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            gRPC, Thrift, REST, files? <NoWrap>You name it.</NoWrap>{' '}\n+            <Highlight nowrap>We serve them all.</Highlight>\n+          </Title>\n+          <Paragraph>\n+            Let&apos;s embrace the reality &mdash; we almost always have to deal\n+            with more than one protocol. It was once Thrift, today it&apos;s\n+            gRPC, and REST never gets old. At the same time, you sometimes have\n+            to handle health check requests from a load balancer or even serve\n+            some static files.\n+          </Paragraph>\n+          <Paragraph>\n+            Armeria is capable of running services of different protocols, all\n+            in a single port. Waste no more setting up forward proxy or sidecar.", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyOTQ5Nw==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417229497", "bodyText": "Don't think supercharge makes much sense here, large implication of speed or power, but this is about ease of understanding.\nRPC, without the pain - a bit superlative but I think it's ok", "author": "anuraaga", "createdAt": "2020-04-29T10:57:12Z", "path": "site/src/pages/index.tsx", "diffHunk": "@@ -0,0 +1,402 @@\n+import { WindowLocation } from '@reach/router';\n+import { Carousel, Button, Tooltip, Typography } from 'antd';\n+import React from 'react';\n+import { graphql, Link, useStaticQuery } from 'gatsby';\n+import Img from 'gatsby-image';\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+\n+import Blockquote from '../components/blockquote';\n+import BrowserMockup from '../components/browser-mockup';\n+import CodeBlock from '../components/code-block';\n+import Emoji from '../components/emoji';\n+import Logo from '../components/logo';\n+import { Highlight, Marketing, MarketingBlock } from '../components/marketing';\n+import NoWrap from '../components/nowrap';\n+import ProjectBadge from '../components/project-badge';\n+import BaseLayout from '../layouts/base';\n+\n+import styles from './index.module.less';\n+\n+const { Title, Paragraph } = Typography;\n+\n+const IndexPage: React.FC<{\n+  location: WindowLocation;\n+}> = props => {\n+  const data = useStaticQuery(graphql`\n+    query {\n+      docServiceImages: allFile(\n+        filter: { relativePath: { glob: \"docservice-carousel-*.png\" } }\n+        sort: { fields: relativePath, order: ASC }\n+      ) {\n+        nodes {\n+          childImageSharp {\n+            fluid {\n+              ...GatsbyImageSharpFluid\n+            }\n+          }\n+        }\n+      }\n+\n+      logoVideo: file(relativePath: { eq: \"armeria.m4v\" }) {\n+        publicURL\n+      }\n+\n+      logoGif: file(relativePath: { eq: \"armeria.gif\" }) {\n+        publicURL\n+      }\n+\n+      integrationDiagram: file(relativePath: { eq: \"integration.svg\" }) {\n+        publicURL\n+      }\n+    }\n+  `);\n+\n+  function renderGetStartedButtons(responsive: boolean) {\n+    const className = `${styles.getStartedButton} ${\n+      responsive ? styles.responsive : ''\n+    }`;\n+    return (\n+      <>\n+        <Link to=\"/docs\" className={className}>\n+          <Button type=\"primary\" size=\"large\">\n+            <Emoji text=\"Learn more \u2728\" />\n+          </Button>\n+        </Link>\n+        <Link to=\"/community\" className={className}>\n+          <Button size=\"large\">\n+            <Emoji text=\"Community \ud83d\udc4b\" />\n+          </Button>\n+        </Link>\n+      </>\n+    );\n+  }\n+\n+  return (\n+    <BaseLayout\n+      location={props.location}\n+      pageTitle=\"Armeria &ndash; An all-round microservice framework\"\n+      contentClassName={styles.wrapper}\n+    >\n+      <Marketing className={styles.slogan}>\n+        <MarketingBlock noreveal>\n+          <Logo\n+            className={styles.sloganBackgroundImage}\n+            width=\"768px\"\n+            height=\"768px\"\n+            primaryColor=\"rgba(255, 255, 255, 1.0)\"\n+            secondaryColor=\"rgba(255, 255, 255, 0.55)\"\n+            tertiaryColor=\"transparent\"\n+            label=\" \"\n+            notext\n+            ariaHidden\n+          />\n+          <Title level={1}>\n+            Build a reactive microservice{' '}\n+            <NoWrap>\n+              <Highlight>\n+                at <u>your</u> pace\n+              </Highlight>\n+              ,\n+            </NoWrap>{' '}\n+            <NoWrap>not theirs.</NoWrap>\n+          </Title>\n+          <Paragraph>\n+            <em>Armeria</em> is an all-round microservice framework that lets\n+            you build any type of microservices leveraging your favorite\n+            technologies, including gRPC, Thrift, Kotlin, Retrofit, Reactive\n+            Streams, Spring Boot and Dropwizard.\n+          </Paragraph>\n+          <Paragraph className={styles.indented}>\n+            &ldquo; Brought to you by the creater of{' '}\n+            <Tooltip title=\"The most popular non-blocking I/O client-server framework in Java ecosystem\">\n+              <OutboundLink href=\"https://netty.io/\">Netty</OutboundLink>\n+            </Tooltip>{' '}\n+            and his colleagues at{' '}\n+            <Tooltip title=\"The company behind the most popular mobile messaging app in Japan, Taiwan and Thai\">\n+              <OutboundLink href=\"https://engineering.linecorp.com/en/\">\n+                LINE corporation\n+              </OutboundLink>\n+            </Tooltip>{' '}\n+            &rdquo;\n+          </Paragraph>\n+          <div>{renderGetStartedButtons(true)}</div>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            gRPC, Thrift, REST, files? <NoWrap>You name it.</NoWrap>{' '}\n+            <Highlight nowrap>We serve them all.</Highlight>\n+          </Title>\n+          <Paragraph>\n+            Let&apos;s embrace the reality &mdash; we almost always have to deal\n+            with more than one protocol. It was once Thrift, today it&apos;s\n+            gRPC, and REST never gets old. At the same time, you sometimes have\n+            to handle health check requests from a load balancer or even serve\n+            some static files.\n+          </Paragraph>\n+          <Paragraph>\n+            Armeria is capable of running services of different protocols, all\n+            in a single port. Waste no more setting up forward proxy or sidecar.\n+            Worry no more about operational complexity and points of failure.\n+            Imagine you don&apos;t need to set anything up while you migrate\n+            from one protocol to another.\n+          </Paragraph>\n+        </MarketingBlock>\n+        <MarketingBlock>\n+          <CodeBlock language=\"java\">\n+            {`\n+            Server\n+              .builder()\n+              .service(\n+                \"/hello\",\n+                (ctx, req) -> HttpResponse.of(\"Hello!\"))\n+              .service(GrpcService\n+                .builder()\n+                .addService(myGrpcServiceImpl)\n+                .build())\n+              .service(\n+                \"/api/thrift\",\n+                ThriftService.of(myThriftServiceImpl));\n+              .service(\n+                \"prefix:/files\",\n+                FileService.of(new File(\"/var/www\")))\n+              .service(\n+                \"/monitor/l7check\",\n+                HealthCheckService.of())\n+              .build()\n+              .start();\n+            `}\n+          </CodeBlock>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing reverse>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            <Highlight>Supercharge your RPC</Highlight> with documentation", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYzNTQxNw==", "url": "https://github.com/line/armeria/pull/2682#discussion_r420635417", "bodyText": "'Pain-free RPC' or 'Headache-free RPC' ? \ud83e\udd14", "author": "trustin", "createdAt": "2020-05-06T08:48:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyOTQ5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NTE4Mw==", "url": "https://github.com/line/armeria/pull/2682#discussion_r421265183", "bodyText": "Changed to 'Headache-free RPC'", "author": "trustin", "createdAt": "2020-05-07T06:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyOTQ5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIyOTgzNg==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417229836", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        API. How would you make an ad-hoc call to your gRPC service when you\n          \n          \n            \n                        APIs. How would you make an ad-hoc call to your gRPC service when you", "author": "anuraaga", "createdAt": "2020-04-29T10:57:53Z", "path": "site/src/pages/index.tsx", "diffHunk": "@@ -0,0 +1,402 @@\n+import { WindowLocation } from '@reach/router';\n+import { Carousel, Button, Tooltip, Typography } from 'antd';\n+import React from 'react';\n+import { graphql, Link, useStaticQuery } from 'gatsby';\n+import Img from 'gatsby-image';\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+\n+import Blockquote from '../components/blockquote';\n+import BrowserMockup from '../components/browser-mockup';\n+import CodeBlock from '../components/code-block';\n+import Emoji from '../components/emoji';\n+import Logo from '../components/logo';\n+import { Highlight, Marketing, MarketingBlock } from '../components/marketing';\n+import NoWrap from '../components/nowrap';\n+import ProjectBadge from '../components/project-badge';\n+import BaseLayout from '../layouts/base';\n+\n+import styles from './index.module.less';\n+\n+const { Title, Paragraph } = Typography;\n+\n+const IndexPage: React.FC<{\n+  location: WindowLocation;\n+}> = props => {\n+  const data = useStaticQuery(graphql`\n+    query {\n+      docServiceImages: allFile(\n+        filter: { relativePath: { glob: \"docservice-carousel-*.png\" } }\n+        sort: { fields: relativePath, order: ASC }\n+      ) {\n+        nodes {\n+          childImageSharp {\n+            fluid {\n+              ...GatsbyImageSharpFluid\n+            }\n+          }\n+        }\n+      }\n+\n+      logoVideo: file(relativePath: { eq: \"armeria.m4v\" }) {\n+        publicURL\n+      }\n+\n+      logoGif: file(relativePath: { eq: \"armeria.gif\" }) {\n+        publicURL\n+      }\n+\n+      integrationDiagram: file(relativePath: { eq: \"integration.svg\" }) {\n+        publicURL\n+      }\n+    }\n+  `);\n+\n+  function renderGetStartedButtons(responsive: boolean) {\n+    const className = `${styles.getStartedButton} ${\n+      responsive ? styles.responsive : ''\n+    }`;\n+    return (\n+      <>\n+        <Link to=\"/docs\" className={className}>\n+          <Button type=\"primary\" size=\"large\">\n+            <Emoji text=\"Learn more \u2728\" />\n+          </Button>\n+        </Link>\n+        <Link to=\"/community\" className={className}>\n+          <Button size=\"large\">\n+            <Emoji text=\"Community \ud83d\udc4b\" />\n+          </Button>\n+        </Link>\n+      </>\n+    );\n+  }\n+\n+  return (\n+    <BaseLayout\n+      location={props.location}\n+      pageTitle=\"Armeria &ndash; An all-round microservice framework\"\n+      contentClassName={styles.wrapper}\n+    >\n+      <Marketing className={styles.slogan}>\n+        <MarketingBlock noreveal>\n+          <Logo\n+            className={styles.sloganBackgroundImage}\n+            width=\"768px\"\n+            height=\"768px\"\n+            primaryColor=\"rgba(255, 255, 255, 1.0)\"\n+            secondaryColor=\"rgba(255, 255, 255, 0.55)\"\n+            tertiaryColor=\"transparent\"\n+            label=\" \"\n+            notext\n+            ariaHidden\n+          />\n+          <Title level={1}>\n+            Build a reactive microservice{' '}\n+            <NoWrap>\n+              <Highlight>\n+                at <u>your</u> pace\n+              </Highlight>\n+              ,\n+            </NoWrap>{' '}\n+            <NoWrap>not theirs.</NoWrap>\n+          </Title>\n+          <Paragraph>\n+            <em>Armeria</em> is an all-round microservice framework that lets\n+            you build any type of microservices leveraging your favorite\n+            technologies, including gRPC, Thrift, Kotlin, Retrofit, Reactive\n+            Streams, Spring Boot and Dropwizard.\n+          </Paragraph>\n+          <Paragraph className={styles.indented}>\n+            &ldquo; Brought to you by the creater of{' '}\n+            <Tooltip title=\"The most popular non-blocking I/O client-server framework in Java ecosystem\">\n+              <OutboundLink href=\"https://netty.io/\">Netty</OutboundLink>\n+            </Tooltip>{' '}\n+            and his colleagues at{' '}\n+            <Tooltip title=\"The company behind the most popular mobile messaging app in Japan, Taiwan and Thai\">\n+              <OutboundLink href=\"https://engineering.linecorp.com/en/\">\n+                LINE corporation\n+              </OutboundLink>\n+            </Tooltip>{' '}\n+            &rdquo;\n+          </Paragraph>\n+          <div>{renderGetStartedButtons(true)}</div>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            gRPC, Thrift, REST, files? <NoWrap>You name it.</NoWrap>{' '}\n+            <Highlight nowrap>We serve them all.</Highlight>\n+          </Title>\n+          <Paragraph>\n+            Let&apos;s embrace the reality &mdash; we almost always have to deal\n+            with more than one protocol. It was once Thrift, today it&apos;s\n+            gRPC, and REST never gets old. At the same time, you sometimes have\n+            to handle health check requests from a load balancer or even serve\n+            some static files.\n+          </Paragraph>\n+          <Paragraph>\n+            Armeria is capable of running services of different protocols, all\n+            in a single port. Waste no more setting up forward proxy or sidecar.\n+            Worry no more about operational complexity and points of failure.\n+            Imagine you don&apos;t need to set anything up while you migrate\n+            from one protocol to another.\n+          </Paragraph>\n+        </MarketingBlock>\n+        <MarketingBlock>\n+          <CodeBlock language=\"java\">\n+            {`\n+            Server\n+              .builder()\n+              .service(\n+                \"/hello\",\n+                (ctx, req) -> HttpResponse.of(\"Hello!\"))\n+              .service(GrpcService\n+                .builder()\n+                .addService(myGrpcServiceImpl)\n+                .build())\n+              .service(\n+                \"/api/thrift\",\n+                ThriftService.of(myThriftServiceImpl));\n+              .service(\n+                \"prefix:/files\",\n+                FileService.of(new File(\"/var/www\")))\n+              .service(\n+                \"/monitor/l7check\",\n+                HealthCheckService.of())\n+              .build()\n+              .start();\n+            `}\n+          </CodeBlock>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing reverse>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            <Highlight>Supercharge your RPC</Highlight> with documentation\n+            service\n+          </Title>\n+          <Paragraph>\n+            RPC protocols were often more difficult to work with than RESTful\n+            API. How would you make an ad-hoc call to your gRPC service when you", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzMDg3MA==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417230870", "bodyText": "Don't want to feed words for a testimonial, but @andrewoma ok to replace Zipkin with Brave? Backend doesn't necessarily have to be Zipkin", "author": "anuraaga", "createdAt": "2020-04-29T10:59:53Z", "path": "site/src/pages/index.tsx", "diffHunk": "@@ -0,0 +1,402 @@\n+import { WindowLocation } from '@reach/router';\n+import { Carousel, Button, Tooltip, Typography } from 'antd';\n+import React from 'react';\n+import { graphql, Link, useStaticQuery } from 'gatsby';\n+import Img from 'gatsby-image';\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+\n+import Blockquote from '../components/blockquote';\n+import BrowserMockup from '../components/browser-mockup';\n+import CodeBlock from '../components/code-block';\n+import Emoji from '../components/emoji';\n+import Logo from '../components/logo';\n+import { Highlight, Marketing, MarketingBlock } from '../components/marketing';\n+import NoWrap from '../components/nowrap';\n+import ProjectBadge from '../components/project-badge';\n+import BaseLayout from '../layouts/base';\n+\n+import styles from './index.module.less';\n+\n+const { Title, Paragraph } = Typography;\n+\n+const IndexPage: React.FC<{\n+  location: WindowLocation;\n+}> = props => {\n+  const data = useStaticQuery(graphql`\n+    query {\n+      docServiceImages: allFile(\n+        filter: { relativePath: { glob: \"docservice-carousel-*.png\" } }\n+        sort: { fields: relativePath, order: ASC }\n+      ) {\n+        nodes {\n+          childImageSharp {\n+            fluid {\n+              ...GatsbyImageSharpFluid\n+            }\n+          }\n+        }\n+      }\n+\n+      logoVideo: file(relativePath: { eq: \"armeria.m4v\" }) {\n+        publicURL\n+      }\n+\n+      logoGif: file(relativePath: { eq: \"armeria.gif\" }) {\n+        publicURL\n+      }\n+\n+      integrationDiagram: file(relativePath: { eq: \"integration.svg\" }) {\n+        publicURL\n+      }\n+    }\n+  `);\n+\n+  function renderGetStartedButtons(responsive: boolean) {\n+    const className = `${styles.getStartedButton} ${\n+      responsive ? styles.responsive : ''\n+    }`;\n+    return (\n+      <>\n+        <Link to=\"/docs\" className={className}>\n+          <Button type=\"primary\" size=\"large\">\n+            <Emoji text=\"Learn more \u2728\" />\n+          </Button>\n+        </Link>\n+        <Link to=\"/community\" className={className}>\n+          <Button size=\"large\">\n+            <Emoji text=\"Community \ud83d\udc4b\" />\n+          </Button>\n+        </Link>\n+      </>\n+    );\n+  }\n+\n+  return (\n+    <BaseLayout\n+      location={props.location}\n+      pageTitle=\"Armeria &ndash; An all-round microservice framework\"\n+      contentClassName={styles.wrapper}\n+    >\n+      <Marketing className={styles.slogan}>\n+        <MarketingBlock noreveal>\n+          <Logo\n+            className={styles.sloganBackgroundImage}\n+            width=\"768px\"\n+            height=\"768px\"\n+            primaryColor=\"rgba(255, 255, 255, 1.0)\"\n+            secondaryColor=\"rgba(255, 255, 255, 0.55)\"\n+            tertiaryColor=\"transparent\"\n+            label=\" \"\n+            notext\n+            ariaHidden\n+          />\n+          <Title level={1}>\n+            Build a reactive microservice{' '}\n+            <NoWrap>\n+              <Highlight>\n+                at <u>your</u> pace\n+              </Highlight>\n+              ,\n+            </NoWrap>{' '}\n+            <NoWrap>not theirs.</NoWrap>\n+          </Title>\n+          <Paragraph>\n+            <em>Armeria</em> is an all-round microservice framework that lets\n+            you build any type of microservices leveraging your favorite\n+            technologies, including gRPC, Thrift, Kotlin, Retrofit, Reactive\n+            Streams, Spring Boot and Dropwizard.\n+          </Paragraph>\n+          <Paragraph className={styles.indented}>\n+            &ldquo; Brought to you by the creater of{' '}\n+            <Tooltip title=\"The most popular non-blocking I/O client-server framework in Java ecosystem\">\n+              <OutboundLink href=\"https://netty.io/\">Netty</OutboundLink>\n+            </Tooltip>{' '}\n+            and his colleagues at{' '}\n+            <Tooltip title=\"The company behind the most popular mobile messaging app in Japan, Taiwan and Thai\">\n+              <OutboundLink href=\"https://engineering.linecorp.com/en/\">\n+                LINE corporation\n+              </OutboundLink>\n+            </Tooltip>{' '}\n+            &rdquo;\n+          </Paragraph>\n+          <div>{renderGetStartedButtons(true)}</div>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            gRPC, Thrift, REST, files? <NoWrap>You name it.</NoWrap>{' '}\n+            <Highlight nowrap>We serve them all.</Highlight>\n+          </Title>\n+          <Paragraph>\n+            Let&apos;s embrace the reality &mdash; we almost always have to deal\n+            with more than one protocol. It was once Thrift, today it&apos;s\n+            gRPC, and REST never gets old. At the same time, you sometimes have\n+            to handle health check requests from a load balancer or even serve\n+            some static files.\n+          </Paragraph>\n+          <Paragraph>\n+            Armeria is capable of running services of different protocols, all\n+            in a single port. Waste no more setting up forward proxy or sidecar.\n+            Worry no more about operational complexity and points of failure.\n+            Imagine you don&apos;t need to set anything up while you migrate\n+            from one protocol to another.\n+          </Paragraph>\n+        </MarketingBlock>\n+        <MarketingBlock>\n+          <CodeBlock language=\"java\">\n+            {`\n+            Server\n+              .builder()\n+              .service(\n+                \"/hello\",\n+                (ctx, req) -> HttpResponse.of(\"Hello!\"))\n+              .service(GrpcService\n+                .builder()\n+                .addService(myGrpcServiceImpl)\n+                .build())\n+              .service(\n+                \"/api/thrift\",\n+                ThriftService.of(myThriftServiceImpl));\n+              .service(\n+                \"prefix:/files\",\n+                FileService.of(new File(\"/var/www\")))\n+              .service(\n+                \"/monitor/l7check\",\n+                HealthCheckService.of())\n+              .build()\n+              .start();\n+            `}\n+          </CodeBlock>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing reverse>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            <Highlight>Supercharge your RPC</Highlight> with documentation\n+            service\n+          </Title>\n+          <Paragraph>\n+            RPC protocols were often more difficult to work with than RESTful\n+            API. How would you make an ad-hoc call to your gRPC service when you\n+            can&apos;t find the right <code>.proto</code> file? How would you\n+            help your colleague reproduce your problem by making the same call?\n+          </Paragraph>\n+          <Paragraph>\n+            Armeria&apos;s <em>documentation service</em> allows you to browse\n+            the complete list of services and their documentation from a web\n+            browser. You can also make a real RPC call in human friendly JSON\n+            format and share the URL of the call with your colleague. Who said\n+            RPC is difficult to work with? <Emoji text=\"\ud83d\ude06\" />\n+          </Paragraph>\n+        </MarketingBlock>\n+        <MarketingBlock>\n+          <Carousel\n+            className={styles.docServiceCarousel}\n+            autoplay\n+            autoplaySpeed={5000}\n+          >\n+            {data.docServiceImages.nodes.map((e: any) => (\n+              <BrowserMockup key={e.childImageSharp.fluid.src}>\n+                <Img fluid={e.childImageSharp.fluid} />\n+              </BrowserMockup>\n+            ))}\n+          </Carousel>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing className={styles.testimonial}>\n+        <MarketingBlock>\n+          <Blockquote\n+            author={\n+              <OutboundLink href=\"https://github.com/andrewoma\">\n+                Andrew O&apos;Malley\n+              </OutboundLink>\n+            }\n+            from={\n+              <OutboundLink href=\"https://en.wikipedia.org/wiki/Afterpay\">\n+                Afterpay\n+              </OutboundLink>\n+            }\n+            bgColor1=\"rgba(255, 255, 255, 0.5)\"\n+            bgColor2=\"white\"\n+          >\n+            Armeria has eased our adoption of gRPC at Afterpay. Serving gRPC,\n+            documentation, health checks and metrics on a single port (with or\n+            without TLS) gives us the functionality of a sidecar like Envoy in a\n+            single process. Automated serving of API documentation, complete\n+            with sample payloads, allows simple ad-hoc gRPC requests straight\n+            from the browser. Distributed tracing is trivial to configure using\n+            the built-in Zipkin decorators. Logging request bodies, performing", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5NDYxOA==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417694618", "bodyText": "Sure", "author": "andrewoma", "createdAt": "2020-04-30T00:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzMDg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzMjU2NQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r417232565", "bodyText": "Maybe integrates them without getting in the way.\nNot sure about this \"not like any other that claims so.\"", "author": "anuraaga", "createdAt": "2020-04-29T11:03:24Z", "path": "site/src/pages/index.tsx", "diffHunk": "@@ -0,0 +1,402 @@\n+import { WindowLocation } from '@reach/router';\n+import { Carousel, Button, Tooltip, Typography } from 'antd';\n+import React from 'react';\n+import { graphql, Link, useStaticQuery } from 'gatsby';\n+import Img from 'gatsby-image';\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+\n+import Blockquote from '../components/blockquote';\n+import BrowserMockup from '../components/browser-mockup';\n+import CodeBlock from '../components/code-block';\n+import Emoji from '../components/emoji';\n+import Logo from '../components/logo';\n+import { Highlight, Marketing, MarketingBlock } from '../components/marketing';\n+import NoWrap from '../components/nowrap';\n+import ProjectBadge from '../components/project-badge';\n+import BaseLayout from '../layouts/base';\n+\n+import styles from './index.module.less';\n+\n+const { Title, Paragraph } = Typography;\n+\n+const IndexPage: React.FC<{\n+  location: WindowLocation;\n+}> = props => {\n+  const data = useStaticQuery(graphql`\n+    query {\n+      docServiceImages: allFile(\n+        filter: { relativePath: { glob: \"docservice-carousel-*.png\" } }\n+        sort: { fields: relativePath, order: ASC }\n+      ) {\n+        nodes {\n+          childImageSharp {\n+            fluid {\n+              ...GatsbyImageSharpFluid\n+            }\n+          }\n+        }\n+      }\n+\n+      logoVideo: file(relativePath: { eq: \"armeria.m4v\" }) {\n+        publicURL\n+      }\n+\n+      logoGif: file(relativePath: { eq: \"armeria.gif\" }) {\n+        publicURL\n+      }\n+\n+      integrationDiagram: file(relativePath: { eq: \"integration.svg\" }) {\n+        publicURL\n+      }\n+    }\n+  `);\n+\n+  function renderGetStartedButtons(responsive: boolean) {\n+    const className = `${styles.getStartedButton} ${\n+      responsive ? styles.responsive : ''\n+    }`;\n+    return (\n+      <>\n+        <Link to=\"/docs\" className={className}>\n+          <Button type=\"primary\" size=\"large\">\n+            <Emoji text=\"Learn more \u2728\" />\n+          </Button>\n+        </Link>\n+        <Link to=\"/community\" className={className}>\n+          <Button size=\"large\">\n+            <Emoji text=\"Community \ud83d\udc4b\" />\n+          </Button>\n+        </Link>\n+      </>\n+    );\n+  }\n+\n+  return (\n+    <BaseLayout\n+      location={props.location}\n+      pageTitle=\"Armeria &ndash; An all-round microservice framework\"\n+      contentClassName={styles.wrapper}\n+    >\n+      <Marketing className={styles.slogan}>\n+        <MarketingBlock noreveal>\n+          <Logo\n+            className={styles.sloganBackgroundImage}\n+            width=\"768px\"\n+            height=\"768px\"\n+            primaryColor=\"rgba(255, 255, 255, 1.0)\"\n+            secondaryColor=\"rgba(255, 255, 255, 0.55)\"\n+            tertiaryColor=\"transparent\"\n+            label=\" \"\n+            notext\n+            ariaHidden\n+          />\n+          <Title level={1}>\n+            Build a reactive microservice{' '}\n+            <NoWrap>\n+              <Highlight>\n+                at <u>your</u> pace\n+              </Highlight>\n+              ,\n+            </NoWrap>{' '}\n+            <NoWrap>not theirs.</NoWrap>\n+          </Title>\n+          <Paragraph>\n+            <em>Armeria</em> is an all-round microservice framework that lets\n+            you build any type of microservices leveraging your favorite\n+            technologies, including gRPC, Thrift, Kotlin, Retrofit, Reactive\n+            Streams, Spring Boot and Dropwizard.\n+          </Paragraph>\n+          <Paragraph className={styles.indented}>\n+            &ldquo; Brought to you by the creater of{' '}\n+            <Tooltip title=\"The most popular non-blocking I/O client-server framework in Java ecosystem\">\n+              <OutboundLink href=\"https://netty.io/\">Netty</OutboundLink>\n+            </Tooltip>{' '}\n+            and his colleagues at{' '}\n+            <Tooltip title=\"The company behind the most popular mobile messaging app in Japan, Taiwan and Thai\">\n+              <OutboundLink href=\"https://engineering.linecorp.com/en/\">\n+                LINE corporation\n+              </OutboundLink>\n+            </Tooltip>{' '}\n+            &rdquo;\n+          </Paragraph>\n+          <div>{renderGetStartedButtons(true)}</div>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            gRPC, Thrift, REST, files? <NoWrap>You name it.</NoWrap>{' '}\n+            <Highlight nowrap>We serve them all.</Highlight>\n+          </Title>\n+          <Paragraph>\n+            Let&apos;s embrace the reality &mdash; we almost always have to deal\n+            with more than one protocol. It was once Thrift, today it&apos;s\n+            gRPC, and REST never gets old. At the same time, you sometimes have\n+            to handle health check requests from a load balancer or even serve\n+            some static files.\n+          </Paragraph>\n+          <Paragraph>\n+            Armeria is capable of running services of different protocols, all\n+            in a single port. Waste no more setting up forward proxy or sidecar.\n+            Worry no more about operational complexity and points of failure.\n+            Imagine you don&apos;t need to set anything up while you migrate\n+            from one protocol to another.\n+          </Paragraph>\n+        </MarketingBlock>\n+        <MarketingBlock>\n+          <CodeBlock language=\"java\">\n+            {`\n+            Server\n+              .builder()\n+              .service(\n+                \"/hello\",\n+                (ctx, req) -> HttpResponse.of(\"Hello!\"))\n+              .service(GrpcService\n+                .builder()\n+                .addService(myGrpcServiceImpl)\n+                .build())\n+              .service(\n+                \"/api/thrift\",\n+                ThriftService.of(myThriftServiceImpl));\n+              .service(\n+                \"prefix:/files\",\n+                FileService.of(new File(\"/var/www\")))\n+              .service(\n+                \"/monitor/l7check\",\n+                HealthCheckService.of())\n+              .build()\n+              .start();\n+            `}\n+          </CodeBlock>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing reverse>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            <Highlight>Supercharge your RPC</Highlight> with documentation\n+            service\n+          </Title>\n+          <Paragraph>\n+            RPC protocols were often more difficult to work with than RESTful\n+            API. How would you make an ad-hoc call to your gRPC service when you\n+            can&apos;t find the right <code>.proto</code> file? How would you\n+            help your colleague reproduce your problem by making the same call?\n+          </Paragraph>\n+          <Paragraph>\n+            Armeria&apos;s <em>documentation service</em> allows you to browse\n+            the complete list of services and their documentation from a web\n+            browser. You can also make a real RPC call in human friendly JSON\n+            format and share the URL of the call with your colleague. Who said\n+            RPC is difficult to work with? <Emoji text=\"\ud83d\ude06\" />\n+          </Paragraph>\n+        </MarketingBlock>\n+        <MarketingBlock>\n+          <Carousel\n+            className={styles.docServiceCarousel}\n+            autoplay\n+            autoplaySpeed={5000}\n+          >\n+            {data.docServiceImages.nodes.map((e: any) => (\n+              <BrowserMockup key={e.childImageSharp.fluid.src}>\n+                <Img fluid={e.childImageSharp.fluid} />\n+              </BrowserMockup>\n+            ))}\n+          </Carousel>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing className={styles.testimonial}>\n+        <MarketingBlock>\n+          <Blockquote\n+            author={\n+              <OutboundLink href=\"https://github.com/andrewoma\">\n+                Andrew O&apos;Malley\n+              </OutboundLink>\n+            }\n+            from={\n+              <OutboundLink href=\"https://en.wikipedia.org/wiki/Afterpay\">\n+                Afterpay\n+              </OutboundLink>\n+            }\n+            bgColor1=\"rgba(255, 255, 255, 0.5)\"\n+            bgColor2=\"white\"\n+          >\n+            Armeria has eased our adoption of gRPC at Afterpay. Serving gRPC,\n+            documentation, health checks and metrics on a single port (with or\n+            without TLS) gives us the functionality of a sidecar like Envoy in a\n+            single process. Automated serving of API documentation, complete\n+            with sample payloads, allows simple ad-hoc gRPC requests straight\n+            from the browser. Distributed tracing is trivial to configure using\n+            the built-in Zipkin decorators. Logging request bodies, performing\n+            retries or circuit breaking are all built-in. The friendly devs\n+            rapidly respond to issues and feature requests. Armeria is becoming\n+            the default stack for gRPC at Afterpay.\n+          </Blockquote>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            Fuel your request pipeline with{' '}\n+            <Highlight>reusable components</Highlight>\n+          </Title>\n+          <Paragraph>\n+            There are so many cross-cutting concerns you need to address when\n+            building a microservice &mdash; metrics, distributed tracing, load\n+            balancing, authentication, rate-limiting, circuit breakers,\n+            automatic retries, etc.\n+          </Paragraph>\n+          <Paragraph>\n+            Armeria solves your problems by providing various reusable\n+            components called &lsquo;decorators&rsquo; in a clean, consistent,\n+            flexible and user-friendly API. You can also write a custom\n+            decorator if ours doesn&apos;t work for your use case.\n+          </Paragraph>\n+        </MarketingBlock>\n+        <MarketingBlock>\n+          <CodeBlock language=\"java\">\n+            {`\n+            Server\n+              .builder()\n+              .service((ctx, req) -> ...);\n+              .decorator(\n+                MetricCollectingService.newDecorator(...))\n+              .decorator(\n+                BraveService.newDecorator(...))\n+              .decorator(\n+                AuthService.newDecorator(...))\n+              .decorator(\n+                ThrottlingService.newDecorator(...))\n+              .build()\n+              .start();\n+            `}\n+          </CodeBlock>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing reverse>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            <Highlight>Integrate seamlessly</Highlight> with your favorite\n+            frameworks &amp; languages\n+          </Title>\n+          <Paragraph>\n+            Wanna try some cool technology while using Spring Boot or\n+            Dropwizard? That&apos;s absolutely fine. Armeria integrates with", "originalCommit": "ad762d3ed63563757a2ece19a1855a0b2af284bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU3MTc2Nw==", "url": "https://github.com/line/armeria/pull/2682#discussion_r420571767", "bodyText": "I meant 'without enforcing a user to use certain features shipped with the framework'. 'integrates them without getting in the way' sounds good to me. Let me know if you find a better phrase.", "author": "trustin", "createdAt": "2020-05-06T06:34:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzMjU2NQ=="}], "type": "inlineReview"}, {"oid": "b749858731c68de35644605a5f1a4e87b8f627de", "url": "https://github.com/line/armeria/commit/b749858731c68de35644605a5f1a4e87b8f627de", "message": "Merge branch 'master' into new_site", "committedDate": "2020-05-06T06:02:57Z", "type": "commit"}, {"oid": "9f199afd2f00f5eb93db0749a37894876f6ff9ed", "url": "https://github.com/line/armeria/commit/9f199afd2f00f5eb93db0749a37894876f6ff9ed", "message": "Update deps", "committedDate": "2020-05-06T06:13:43Z", "type": "commit"}, {"oid": "26514c66b6704dc3db81d1a987e0d3cc640cd004", "url": "https://github.com/line/armeria/commit/26514c66b6704dc3db81d1a987e0d3cc640cd004", "message": "Address some of the comments from @andrewoma and @anuraaga", "committedDate": "2020-05-06T06:36:24Z", "type": "commit"}, {"oid": "e8b914275ea0192600ef413173bcd514c7fa5faf", "url": "https://github.com/line/armeria/commit/e8b914275ea0192600ef413173bcd514c7fa5faf", "message": "Remove `react-lazyload` which doesn't seem to help much / Fix React imports", "committedDate": "2020-05-06T07:13:53Z", "type": "commit"}, {"oid": "a0beac69af1030ba2e88e804edf8c66d3bd9dea7", "url": "https://github.com/line/armeria/commit/a0beac69af1030ba2e88e804edf8c66d3bd9dea7", "message": "Extract common/default logo styles into a CSS module as suggested by @anuraaga", "committedDate": "2020-05-06T07:27:07Z", "type": "commit"}, {"oid": "f34bfd3c01f134906b8adccdb8c933164b21bba1", "url": "https://github.com/line/armeria/commit/f34bfd3c01f134906b8adccdb8c933164b21bba1", "message": "Use 'useCallback' wherever possible as suggested by @anuraaga", "committedDate": "2020-05-06T08:23:38Z", "type": "commit"}, {"oid": "a809cfa17e8818d489fab0bcf786c9d7596e8f2b", "url": "https://github.com/line/armeria/commit/a809cfa17e8818d489fab0bcf786c9d7596e8f2b", "message": "Fix ToC blinking when a user clicks the right pane", "committedDate": "2020-05-06T08:30:25Z", "type": "commit"}, {"oid": "5f5e664d51e6c9dc1561f9e41f4cc004f9fce74e", "url": "https://github.com/line/armeria/commit/5f5e664d51e6c9dc1561f9e41f4cc004f9fce74e", "message": "Update deps again", "committedDate": "2020-05-06T10:02:23Z", "type": "commit"}, {"oid": "5a9d084541f1c6c3e5d0ab37ebcce3804d162add", "url": "https://github.com/line/armeria/commit/5a9d084541f1c6c3e5d0ab37ebcce3804d162add", "message": "Add a TODO", "committedDate": "2020-05-06T10:03:43Z", "type": "commit"}, {"oid": "ab41de05bf741e76c57eda6f9bd797a205ec54b0", "url": "https://github.com/line/armeria/commit/ab41de05bf741e76c57eda6f9bd797a205ec54b0", "message": "Update deps / Supercharge -> headache-free", "committedDate": "2020-05-07T05:29:30Z", "type": "commit"}, {"oid": "a4441997d3adadfc4041878ad4b832db135ea767", "url": "https://github.com/line/armeria/commit/a4441997d3adadfc4041878ad4b832db135ea767", "message": "Add 'key colors' section to design resources / Fix layout", "committedDate": "2020-05-07T06:06:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0OTI0NA==", "url": "https://github.com/line/armeria/pull/2682#discussion_r421249244", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Keep yourself updated with new releases and useful tips from the community!\n          \n          \n            \n            Keep up-to-date with new releases and useful tips from the community!", "author": "anuraaga", "createdAt": "2020-05-07T05:34:04Z", "path": "site/src/pages/news/sign-up.mdx", "diffHunk": "@@ -0,0 +1,5 @@\n+# Sign up for our newsletters\n+\n+Keep yourself updated with new releases and useful tips from the community!", "originalCommit": "ab41de05bf741e76c57eda6f9bd797a205ec54b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0OTYwNQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r421249605", "bodyText": "Looks like you're keeping these alphabetized - in which case this one isn't quite", "author": "anuraaga", "createdAt": "2020-05-07T05:35:28Z", "path": "site/src/pages/index.tsx", "diffHunk": "@@ -0,0 +1,400 @@\n+import { WindowLocation } from '@reach/router';\n+import { Carousel, Button, Tooltip, Typography } from 'antd';\n+import React from 'react';", "originalCommit": "ab41de05bf741e76c57eda6f9bd797a205ec54b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3ODk3OQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r421278979", "bodyText": "Oops!", "author": "trustin", "createdAt": "2020-05-07T06:56:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0OTYwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1MDIwNA==", "url": "https://github.com/line/armeria/pull/2682#discussion_r421250204", "bodyText": "Think you can use React.FC<RouteComponentProps> instead of manually defining the interface", "author": "anuraaga", "createdAt": "2020-05-07T05:37:26Z", "path": "site/src/pages/index.tsx", "diffHunk": "@@ -0,0 +1,400 @@\n+import { WindowLocation } from '@reach/router';\n+import { Carousel, Button, Tooltip, Typography } from 'antd';\n+import React from 'react';\n+import { graphql, Link, useStaticQuery } from 'gatsby';\n+import Img from 'gatsby-image';\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+\n+import Blockquote from '../components/blockquote';\n+import BrowserMockup from '../components/browser-mockup';\n+import CodeBlock from '../components/code-block';\n+import Emoji from '../components/emoji';\n+import Logo from '../components/logo';\n+import { Highlight, Marketing, MarketingBlock } from '../components/marketing';\n+import NoWrap from '../components/nowrap';\n+import ProjectBadge from '../components/project-badge';\n+import BaseLayout from '../layouts/base';\n+\n+import styles from './index.module.less';\n+\n+const { Title, Paragraph } = Typography;\n+\n+const IndexPage: React.FC<{", "originalCommit": "ab41de05bf741e76c57eda6f9bd797a205ec54b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3OTIxOQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r421279219", "bodyText": "Thanks. Replaced with RouteComponentProps everywhere.", "author": "trustin", "createdAt": "2020-05-07T06:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1MDIwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1MTc3OQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r421251779", "bodyText": "Probably should link to https://docs.gradle.org/current/userguide/platforms.html#sub:bom_import as well for Gradle", "author": "anuraaga", "createdAt": "2020-05-07T05:42:47Z", "path": "site/src/pages/docs/setup.mdx", "diffHunk": "@@ -0,0 +1,242 @@\n+import versions from '../../../gen-src/versions.json';\n+\n+# Setting up a project\n+\n+## Requirements\n+\n+[Java 8 (or later)](https://adoptopenjdk.net/) is required to build and run an application based on Armeria.\n+\n+<Tip>\n+\n+Use Java 13 (or later) if you are a contributor who tries to build Armeria itself.\n+See [CONTRIBUTING.md](https://github.com/line/armeria/blob/master/CONTRIBUTING.md) for more information.\n+   \n+</Tip>\n+\n+## Choosing the artifacts\n+\n+All Armeria JARs are available in [Maven Central Repository](https://search.maven.org/search?q=g:com.linecorp.armeria%20-shaded)\n+under group ID `com.linecorp.armeria` so that you can fetch them easily using your favorite build tool.\n+Add the Armeria artifacts that provide the desired functionality to your project dependencies. The following is\n+the list of major Armeria artifacts which might interest you:\n+\n++---------------------------------------------+---------------------------------------------------------------------------------+\n+| Artifact ID                                 | Description                                                                     |\n++=============================================+=================================================================================+\n+| `armeria`                                   | The core library.                                                               |\n++---------------------------------------------+---------------------------------------------------------------------------------+\n+| `armeria-brave`                             | Distributed tracing with Brave.                                                 |\n+|                                             | See [Zipkin integration](/docs/advanced-zipkin).                                |\n++---------------------------------------------+---------------------------------------------------------------------------------+\n+| `armeria-dropwizard`                        | Provides a Dropwizard Bundle around `armeria-jetty`.                            |\n+|                                             | See [Using Armeria with Dropwizard](/docs/advanced-dropwizard-integration).     |\n++---------------------------------------------+---------------------------------------------------------------------------------+\n+| `armeria-grpc`                              | gRPC client and server support.                                                 |\n+|                                             | See [Running a gRPC service](/docs/server-grpc)                                 |\n+|                                             | and [Calling a gRPC service](/docs/client-grpc).                                |\n++---------------------------------------------+---------------------------------------------------------------------------------+\n+| `armeria-jetty`                             | Embedded Jetty Servlet container.                                               |\n+|                                             |  See [Embedding a servlet container](/docs/server-servlet).                     |\n++---------------------------------------------+---------------------------------------------------------------------------------+\n+| `armeria-kafka`                             | Enables sending access logs to Kafka                                            |\n++---------------------------------------------+---------------------------------------------------------------------------------+\n+| `armeria-logback`                           | Provides Logback `Appender` implementation that adds                            |\n+|                                             | request information.                                                            |\n+|                                             | See [Logging contextual information](/docs/advanced-logging).                   |\n++---------------------------------------------+---------------------------------------------------------------------------------+\n+| `armeria-retrofit2`                         | Allows using Armeria instead of OkHttp as transport layer                       |\n+|                                             | when using Retrofit.                                                            |\n+|                                             | See [Retrofit integration](/docs/client-retrofit).                              |\n++---------------------------------------------+---------------------------------------------------------------------------------+\n+| `armeria-rxjava`                            | RxJava plugin                                                                   |\n++---------------------------------------------+---------------------------------------------------------------------------------+\n+| `armeria-saml`                              | SAML support                                                                    |\n++---------------------------------------------+---------------------------------------------------------------------------------+\n+| `armeria-spring-boot-autoconfigure`         | Spring Boot integration                                                         |\n++---------------------------------------------+---------------------------------------------------------------------------------+\n+| `armeria-spring-boot-webflux-autoconfigure` | Spring Boot WebFlux integration. See                                            |\n+|                                             | [Using Armeria with Spring WebFlux](/docs/advanced-spring-webflux-integration). |\n++---------------------------------------------+---------------------------------------------------------------------------------+\n+| `armeria-thrift`                            | Thrift client and server support.                                               |\n+|                                             | See [Running a Thrift service](/docs/server-thrift)                             |\n+|                                             | and [Calling a Thrift service](/docs/client-thrift).                            |\n++---------------------------------------------+---------------------------------------------------------------------------------+\n+| `armeria-tomcat`                            | Embedded Tomcat Servlet container.                                              |\n+|                                             |  See [Embedding a servlet container](/docs/server-servlet).                     |\n++---------------------------------------------+---------------------------------------------------------------------------------+\n+| `armeria-zookeeper`                         | ZooKeeper-based service discovery.                                              |\n+|                                             | See [Service discovery with ZooKeeper](/docs/advanced-zookeeper).               |\n++---------------------------------------------+---------------------------------------------------------------------------------+\n+\n+## Setting up with a build system\n+\n+You might want to use the following build file as a starting point when you set up a new project:\n+\n+<Tabs>\n+  <TabPane tab=\"Gradle\" key=\"gradle\">\n+    <CodeBlock language=\"groovy\" filename=\"build.gradle\">{`\n+    apply plugin: 'java'\n+    apply plugin: 'idea'\n+    apply plugin: 'eclipse'\\n\n+    repositories {\n+        mavenCentral()\n+    }\\n\n+    dependencies {\n+        // Adjust the list as you need.\n+        ['armeria',\n+        'armeria-brave',\n+        'armeria-grpc',\n+        'armeria-jetty',\n+        'armeria-kafka',\n+        'armeria-logback',\n+        'armeria-retrofit2',\n+        'armeria-rxjava',\n+        'armeria-saml',\n+        'armeria-thrift',\n+        'armeria-tomcat',\n+        'armeria-zookeeper'].each {\n+            compile \"com.linecorp.armeria:\\${it}:${versions['com.linecorp.armeria:armeria-bom']}\"\n+        }\\n\n+        // Logging\n+        runtime 'ch.qos.logback:logback-classic:${versions['ch.qos.logback:logback-classic']}'\n+        runtime 'org.slf4j:log4j-over-slf4j:${versions['org.slf4j:log4j-over-slf4j']}'\n+    }\n+    `}</CodeBlock>\n+  </TabPane>\n+  <TabPane tab=\"Maven\" key=\"maven\">\n+    <CodeBlock language=\"xml\" filename=\"pom.xml\">{`\n+    <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+             xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\\n\n+      <modelVersion>4.0.0</modelVersion>\n+      <groupId>com.example</groupId>\n+      <artifactId>myproject</artifactId>\n+      <version>1.0-SNAPSHOT</version>\n+      <packaging>jar</packaging>\n+      <name>myproject</name>\n+      <url>https://example.com/</url>\\n\n+      <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+      </properties>\\n\n+      <dependencies>\n+        <dependency>\n+          <groupId>com.linecorp.armeria</groupId>\n+          <artifactId>armeria</artifactId>\n+          <version>${versions['com.linecorp.armeria:armeria-bom']}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>com.linecorp.armeria</groupId>\n+          <artifactId>armeria-brave</artifactId>\n+          <version>${versions['com.linecorp.armeria:armeria-bom']}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>com.linecorp.armeria</groupId>\n+          <artifactId>armeria-grpc</artifactId>\n+          <version>${versions['com.linecorp.armeria:armeria-bom']}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>com.linecorp.armeria</groupId>\n+          <artifactId>armeria-jetty</artifactId>\n+          <version>${versions['com.linecorp.armeria:armeria-bom']}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>com.linecorp.armeria</groupId>\n+          <artifactId>armeria-kafka</artifactId>\n+          <version>${versions['com.linecorp.armeria:armeria-bom']}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>com.linecorp.armeria</groupId>\n+          <artifactId>armeria-logback</artifactId>\n+          <version>${versions['com.linecorp.armeria:armeria-bom']}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>com.linecorp.armeria</groupId>\n+          <artifactId>armeria-retrofit2</artifactId>\n+          <version>${versions['com.linecorp.armeria:armeria-bom']}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>com.linecorp.armeria</groupId>\n+          <artifactId>armeria-rxjava</artifactId>\n+          <version>${versions['com.linecorp.armeria:armeria-bom']}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>com.linecorp.armeria</groupId>\n+          <artifactId>armeria-saml</artifactId>\n+          <version>${versions['com.linecorp.armeria:armeria-bom']}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>com.linecorp.armeria</groupId>\n+          <artifactId>armeria-thrift</artifactId>\n+          <version>${versions['com.linecorp.armeria:armeria-bom']}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>com.linecorp.armeria</groupId>\n+          <artifactId>armeria-tomcat</artifactId>\n+          <version>${versions['com.linecorp.armeria:armeria-bom']}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>com.linecorp.armeria</groupId>\n+          <artifactId>armeria-zookeeper</artifactId>\n+          <version>${versions['com.linecorp.armeria:armeria-bom']}</version>\n+        </dependency>\n+        <!-- Logging -->\n+        <dependency>\n+          <groupId>ch.qos.logback</groupId>\n+          <artifactId>logback-classic</artifactId>\n+          <version>${versions['ch.qos.logback:logback-classic']}</version>\n+          <scope>runtime</scope>\n+        </dependency>\n+        <dependency>\n+          <groupId>org.slf4j</groupId>\n+          <artifactId>log4j-over-slf4j</artifactId>\n+          <version>${versions['org.slf4j:log4j-over-slf4j']}</version>\n+          <scope>runtime</scope>\n+        </dependency>\n+      </dependencies>\n+    </project>\n+    `}</CodeBlock>\n+  </TabPane>\n+</Tabs>\n+\n+## Configure `-parameters` javac option\n+\n+You can configure your build tool to add `-parameters` javac option as follows.\n+\n+```groovy\n+// Gradle:\n+tasks.withType(JavaCompile) {\n+    options.compilerArgs += '-parameters'\n+}\n+```\n+\n+```xml\n+<!-- Maven -->\n+<project>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <configuration>\n+          <compilerArgs>\n+            <arg>-parameters</arg>\n+          </compilerArgs>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>\n+```\n+\n+### IntelliJ IDEA\n+\n+Go to `Preferences` > `Build, Execution, Deployment` > `Compiler` > `Java Compiler` \n+and add `-parameters` to `Additional command line paramters`.\n+\n+![](../../images/intellij_javac_parameters.png)\n+\n+## Using Maven BOM for simpler dependency management\n+\n+You can import `com.linecorp.armeria:armeria-bom` into your build rather than specifying Armeria versions in\n+more than one place. See [this article](https://www.baeldung.com/spring-maven-bom) to learn more about what", "originalCommit": "ab41de05bf741e76c57eda6f9bd797a205ec54b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3OTUwMw==", "url": "https://github.com/line/armeria/pull/2682#discussion_r421279503", "bodyText": "Changed to: See this article for Gradle and this article for Maven ...", "author": "trustin", "createdAt": "2020-05-07T06:57:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1MTc3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1OTY5NQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r421259695", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Got a legacy webapp you must keep until you migrate off? No problem!\n          \n          \n            \n                        Got a legacy webapp you need to keep running until you migrate off? No problem!", "author": "anuraaga", "createdAt": "2020-05-07T06:07:00Z", "path": "site/src/pages/index.tsx", "diffHunk": "@@ -0,0 +1,400 @@\n+import { WindowLocation } from '@reach/router';\n+import { Carousel, Button, Tooltip, Typography } from 'antd';\n+import React from 'react';\n+import { graphql, Link, useStaticQuery } from 'gatsby';\n+import Img from 'gatsby-image';\n+import { OutboundLink } from 'gatsby-plugin-google-analytics';\n+\n+import Blockquote from '../components/blockquote';\n+import BrowserMockup from '../components/browser-mockup';\n+import CodeBlock from '../components/code-block';\n+import Emoji from '../components/emoji';\n+import Logo from '../components/logo';\n+import { Highlight, Marketing, MarketingBlock } from '../components/marketing';\n+import NoWrap from '../components/nowrap';\n+import ProjectBadge from '../components/project-badge';\n+import BaseLayout from '../layouts/base';\n+\n+import styles from './index.module.less';\n+\n+const { Title, Paragraph } = Typography;\n+\n+const IndexPage: React.FC<{\n+  location: WindowLocation;\n+}> = props => {\n+  const data = useStaticQuery(graphql`\n+    query {\n+      docServiceImages: allFile(\n+        filter: { relativePath: { glob: \"docservice-carousel-*.png\" } }\n+        sort: { fields: relativePath, order: ASC }\n+      ) {\n+        nodes {\n+          childImageSharp {\n+            fluid {\n+              ...GatsbyImageSharpFluid\n+            }\n+          }\n+        }\n+      }\n+\n+      logoVideo: file(relativePath: { eq: \"armeria.m4v\" }) {\n+        publicURL\n+      }\n+\n+      logoGif: file(relativePath: { eq: \"armeria.gif\" }) {\n+        publicURL\n+      }\n+\n+      integrationDiagram: file(relativePath: { eq: \"integration.svg\" }) {\n+        publicURL\n+      }\n+    }\n+  `);\n+\n+  function renderGetStartedButtons(responsive: boolean) {\n+    const className = `${styles.getStartedButton} ${\n+      responsive ? styles.responsive : ''\n+    }`;\n+    return (\n+      <>\n+        <Link to=\"/docs\" className={className}>\n+          <Button type=\"primary\" size=\"large\">\n+            <Emoji text=\"Learn more \u2728\" />\n+          </Button>\n+        </Link>\n+        <Link to=\"/community\" className={className}>\n+          <Button size=\"large\">\n+            <Emoji text=\"Community \ud83d\udc4b\" />\n+          </Button>\n+        </Link>\n+      </>\n+    );\n+  }\n+\n+  return (\n+    <BaseLayout\n+      location={props.location}\n+      pageTitle=\"Armeria &ndash; An all-round microservice framework\"\n+      contentClassName={styles.wrapper}\n+    >\n+      <Marketing className={styles.slogan}>\n+        <MarketingBlock noreveal>\n+          <Logo\n+            className={styles.sloganBackgroundImage}\n+            width=\"768px\"\n+            height=\"768px\"\n+            primaryColor=\"rgba(255, 255, 255, 1.0)\"\n+            secondaryColor=\"rgba(255, 255, 255, 0.55)\"\n+            tertiaryColor=\"transparent\"\n+            label=\" \"\n+            notext\n+            ariaHidden\n+          />\n+          <Title level={1}>\n+            Build a reactive microservice{' '}\n+            <NoWrap>\n+              <Highlight>\n+                at <u>your</u> pace\n+              </Highlight>\n+              ,\n+            </NoWrap>{' '}\n+            <NoWrap>not theirs.</NoWrap>\n+          </Title>\n+          <Paragraph>\n+            <em>Armeria</em> is an all-round microservice framework that lets\n+            you build any type of microservice leveraging your favorite\n+            technologies, including gRPC, Thrift, Kotlin, Retrofit, Reactive\n+            Streams, Spring Boot and Dropwizard.\n+          </Paragraph>\n+          <Paragraph className={styles.indented}>\n+            &ldquo; Brought to you by the creater of{' '}\n+            <Tooltip title=\"The most popular non-blocking I/O client-server framework in Java ecosystem\">\n+              <OutboundLink href=\"https://netty.io/\">Netty</OutboundLink>\n+            </Tooltip>{' '}\n+            and his colleagues at{' '}\n+            <Tooltip title=\"The company behind the most popular mobile messaging app in Japan, Taiwan and Thai\">\n+              <OutboundLink href=\"https://engineering.linecorp.com/en/\">\n+                LINE\n+              </OutboundLink>\n+            </Tooltip>{' '}\n+            &rdquo;\n+          </Paragraph>\n+          <div>{renderGetStartedButtons(true)}</div>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            gRPC, Thrift, REST, static files? <NoWrap>You name it.</NoWrap>{' '}\n+            <Highlight nowrap>We serve them all.</Highlight>\n+          </Title>\n+          <Paragraph>\n+            Let&apos;s embrace the reality &mdash; we almost always have to deal\n+            with more than one protocol. It was once Thrift, today it&apos;s\n+            gRPC, and REST never gets old. At the same time, you sometimes have\n+            to handle health check requests from a load balancer or even serve\n+            some static files.\n+          </Paragraph>\n+          <Paragraph>\n+            Armeria is capable of running services using different protocols,\n+            all on a single port. No need for any proxies or sidecars. Enjoy the\n+            reduced complexity and points of failure, even when migrating\n+            between protocols!\n+          </Paragraph>\n+        </MarketingBlock>\n+        <MarketingBlock>\n+          <CodeBlock language=\"java\">\n+            {`\n+            Server\n+              .builder()\n+              .service(\n+                \"/hello\",\n+                (ctx, req) -> HttpResponse.of(\"Hello!\"))\n+              .service(GrpcService\n+                .builder()\n+                .addService(myGrpcServiceImpl)\n+                .build())\n+              .service(\n+                \"/api/thrift\",\n+                ThriftService.of(myThriftServiceImpl));\n+              .service(\n+                \"prefix:/files\",\n+                FileService.of(new File(\"/var/www\")))\n+              .service(\n+                \"/monitor/l7check\",\n+                HealthCheckService.of())\n+              .build()\n+              .start();\n+            `}\n+          </CodeBlock>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing reverse>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            <Highlight>Headache-free RPC</Highlight> with documentation service\n+          </Title>\n+          <Paragraph>\n+            RPC protocols were often more difficult to work with than RESTful\n+            APIs. How would you make an ad-hoc call to your gRPC service when\n+            you can&apos;t find the right <code>.proto</code> file? How would\n+            you help your colleague reproduce your problem by making the same\n+            call?\n+          </Paragraph>\n+          <Paragraph>\n+            Armeria&apos;s <em>documentation service</em> allows you to browse\n+            the complete list of services and their documentation from a web\n+            browser. You can also make a real RPC call in human friendly JSON\n+            format and share the URL of the call with your colleague. Who said\n+            RPC is difficult to work with? <Emoji text=\"\ud83d\ude06\" />\n+          </Paragraph>\n+        </MarketingBlock>\n+        <MarketingBlock>\n+          <Carousel\n+            className={styles.docServiceCarousel}\n+            autoplay\n+            autoplaySpeed={5000}\n+          >\n+            {data.docServiceImages.nodes.map((e: any) => (\n+              <BrowserMockup key={e.childImageSharp.fluid.src}>\n+                <Img fluid={e.childImageSharp.fluid} />\n+              </BrowserMockup>\n+            ))}\n+          </Carousel>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing className={styles.testimonial}>\n+        <MarketingBlock>\n+          <Blockquote\n+            author={\n+              <OutboundLink href=\"https://github.com/andrewoma\">\n+                Andrew O&apos;Malley\n+              </OutboundLink>\n+            }\n+            from={\n+              <OutboundLink href=\"https://en.wikipedia.org/wiki/Afterpay\">\n+                Afterpay\n+              </OutboundLink>\n+            }\n+            bgColor1=\"rgba(255, 255, 255, 0.5)\"\n+            bgColor2=\"white\"\n+          >\n+            Armeria has eased our adoption of gRPC at Afterpay. Serving gRPC,\n+            documentation, health checks and metrics on a single port (with or\n+            without TLS) gives us the functionality of a sidecar like Envoy in a\n+            single process. Automated serving of API documentation, complete\n+            with sample payloads, allows simple ad-hoc gRPC requests straight\n+            from the browser. Distributed tracing is trivial to configure using\n+            the built-in Brave decorators. Logging request bodies, performing\n+            retries or circuit breaking are all built-in. The friendly devs\n+            rapidly respond to issues and feature requests. Armeria is becoming\n+            the default stack for gRPC at Afterpay.\n+          </Blockquote>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            Fuel your request pipeline with{' '}\n+            <Highlight>reusable components</Highlight>\n+          </Title>\n+          <Paragraph>\n+            There are so many cross-cutting concerns you need to address when\n+            building a microservice &mdash; metrics, distributed tracing, load\n+            balancing, authentication, rate-limiting, circuit breakers,\n+            automatic retries, etc.\n+          </Paragraph>\n+          <Paragraph>\n+            Armeria solves your problems by providing various reusable\n+            components called &lsquo;decorators&rsquo; in a clean, consistent,\n+            flexible and user-friendly API. You can also write a custom\n+            decorator if ours doesn&apos;t work for your use case.\n+          </Paragraph>\n+        </MarketingBlock>\n+        <MarketingBlock>\n+          <CodeBlock language=\"java\">\n+            {`\n+            Server\n+              .builder()\n+              .service((ctx, req) -> ...);\n+              .decorator(\n+                MetricCollectingService.newDecorator(...))\n+              .decorator(\n+                BraveService.newDecorator(...))\n+              .decorator(\n+                AuthService.newDecorator(...))\n+              .decorator(\n+                ThrottlingService.newDecorator(...))\n+              .build()\n+              .start();\n+            `}\n+          </CodeBlock>\n+        </MarketingBlock>\n+      </Marketing>\n+      <Marketing reverse>\n+        <MarketingBlock>\n+          <Title level={1}>\n+            <Highlight>Integrate seamlessly</Highlight> with your favorite\n+            frameworks &amp; languages\n+          </Title>\n+          <Paragraph>\n+            Wanna try some cool technology while using Spring Boot or\n+            Dropwizard? That&apos;s absolutely fine. Armeria integrates them\n+            without getting in the way. It serves gRPC or Thrift requests at\n+            high efficiency while leaving other requests to Spring MVC, WebFlux\n+            or Dropwizard with minimal changes only.\n+          </Paragraph>\n+          <Paragraph>\n+            Got a legacy webapp you must keep until you migrate off? No problem!", "originalCommit": "ab41de05bf741e76c57eda6f9bd797a205ec54b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "449ac7bb5d80b8fb366d85463f1abd14935ce060", "url": "https://github.com/line/armeria/commit/449ac7bb5d80b8fb366d85463f1abd14935ce060", "message": "Fix the color value for the light gray", "committedDate": "2020-05-07T06:16:24Z", "type": "commit"}, {"oid": "419bb0c0a905421e9158fc0045549e7ddde52679", "url": "https://github.com/line/armeria/commit/419bb0c0a905421e9158fc0045549e7ddde52679", "message": "Add white to the key color list", "committedDate": "2020-05-07T06:21:28Z", "type": "commit"}, {"oid": "debcd3d7bc285b09777652b150bf551116c10cd5", "url": "https://github.com/line/armeria/commit/debcd3d7bc285b09777652b150bf551116c10cd5", "message": "Your go-to microservice framework", "committedDate": "2020-05-07T06:37:01Z", "type": "commit"}, {"oid": "c70904307ca0462d540e39bb1f7c7b037705a9ca", "url": "https://github.com/line/armeria/commit/c70904307ca0462d540e39bb1f7c7b037705a9ca", "message": "Address the comments from @anuraaga", "committedDate": "2020-05-07T06:48:06Z", "type": "commit"}, {"oid": "6ae5894663117d1c603c900afa459d0a8bd75089", "url": "https://github.com/line/armeria/commit/6ae5894663117d1c603c900afa459d0a8bd75089", "message": "Fix slight misalignment", "committedDate": "2020-05-07T06:51:20Z", "type": "commit"}, {"oid": "bbac5704788c63ab3ae831f0c82411edff8b7bc4", "url": "https://github.com/line/armeria/commit/bbac5704788c63ab3ae831f0c82411edff8b7bc4", "message": "Minor aesthetic tweak of paragraph layout", "committedDate": "2020-05-07T07:11:26Z", "type": "commit"}, {"oid": "33863979fa56edab434dca7ad4764fd05a602de2", "url": "https://github.com/line/armeria/commit/33863979fa56edab434dca7ad4764fd05a602de2", "message": "Add the testimonial from @renaudb / Tweak the look of block quote", "committedDate": "2020-05-07T15:04:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4NDI5MQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r421884291", "bodyText": "build build \ud83d\ude04", "author": "minwoox", "createdAt": "2020-05-08T01:23:59Z", "path": "README.md", "diffHunk": "@@ -2,36 +2,30 @@ Visit [the official web site](https://line.github.io/armeria/) for more informat\n \n # Armeria\n \n-_Armeria_ is an open-source asynchronous RPC/API client/server library built on top of\n-[Java 8](https://go.java/), [Netty 4.1](https://netty.io/), [HTTP/2](https://http2.github.io/),\n-[Thrift](https://thrift.apache.org/) and [gRPC](https://grpc.io/). Its primary goal is to help engineers build\n-high-performance asynchronous microservices that use HTTP/2 as a session layer protocol.\n+<a href=\"https://github.com/line/armeria\"><img src=\"https://img.shields.io/github/stars/line/armeria.svg?style=social\" /></a>\n+<a href=\"https://twitter.com/armeria_project\"><img src=\"https://img.shields.io/twitter/follow/armeria_project.svg?label=Follow\" /></a>\n+<a href=\"https://line.github.io/armeria/s/slack\"><img src=\"https://img.shields.io/badge/chat-on%20Slack-brightgreen.svg?style=social&amp;logo=slack\" /></a>\n+<a href=\"https://github.com/line/armeria/contributors\"><img src=\"https://img.shields.io/github/contributors/line/armeria.svg\" /></a>\n+<a href=\"https://github.com/line/armeria/pulse\"><img src=\"https://img.shields.io/github/commit-activity/m/line/armeria.svg?label=commits\" /></a>\n+<a href=\"https://search.maven.org/search?q=g:com.linecorp.armeria%20AND%20a:armeria\"><img src=\"https://img.shields.io/maven-central/v/com.linecorp.armeria/armeria.svg?label=version\" /></a>\n+<a href=\"https://github.com/line/armeria/commits\"><img src=\"https://img.shields.io/github/release-date/line/armeria.svg?label=release\" /></a>\n \n-It is open-sourced and licensed under [Apache License 2.0](https://tldrlegal.com/license/apache-license-2.0-(apache-2.0))\n-by [LINE Corporation](https://linecorp.com/en/), who uses it in production.\n+> Build a reactive microservice **at your pace**, not theirs.\n \n-## Requirements\n-\n-[Java 8 or later](https://adoptopenjdk.net/).\n-See [Requirements](https://line.github.io/armeria/setup.html#requirements) for more information.\n-\n-## How to build\n-\n-We use [Gradle](https://gradle.org/) and Java 13 or later to build Armeria.\n-The following command will compile Armeria and generate JARs and web site:\n+_Armeria_ is your go-to microservice framework for any situation. You can build build any type of", "originalCommit": "33863979fa56edab434dca7ad4764fd05a602de2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzMTU2OQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r423531569", "bodyText": "\ud83e\udd23", "author": "trustin", "createdAt": "2020-05-12T07:50:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4NDI5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4NDYxOQ==", "url": "https://github.com/line/armeria/pull/2682#discussion_r421884619", "bodyText": "ditto", "author": "minwoox", "createdAt": "2020-05-08T01:25:11Z", "path": "site/src/pages/docs/index.mdx", "diffHunk": "@@ -0,0 +1,75 @@\n+# User manual\n+\n+## What is Armeria?\n+\n+_Armeria_ is your go-to microservice framework for any situation. You can build build any type of", "originalCommit": "33863979fa56edab434dca7ad4764fd05a602de2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c4a90a7e66ec6ac4f54387d085284643a24e0621", "url": "https://github.com/line/armeria/commit/c4a90a7e66ec6ac4f54387d085284643a24e0621", "message": "Minor block quote tweaks", "committedDate": "2020-05-08T01:33:01Z", "type": "commit"}, {"oid": "511772b8c6345c2781fb5f6144a0d87ddd86106e", "url": "https://github.com/line/armeria/commit/511772b8c6345c2781fb5f6144a0d87ddd86106e", "message": "Address the comment from @minwoox", "committedDate": "2020-05-08T02:05:27Z", "type": "commit"}, {"oid": "ca92c3cc179b79d1c8a52b4de47d0f8a43f41bfb", "url": "https://github.com/line/armeria/commit/ca92c3cc179b79d1c8a52b4de47d0f8a43f41bfb", "message": "Add OpenCollective contributor list banner", "committedDate": "2020-05-11T09:57:56Z", "type": "commit"}, {"oid": "cd25dd89eae8e0908313aa334eb5334d0676bd05", "url": "https://github.com/line/armeria/commit/cd25dd89eae8e0908313aa334eb5334d0676bd05", "message": "Merge branch 'master' into new_site", "committedDate": "2020-05-13T02:34:10Z", "type": "commit"}, {"oid": "22d4c8194107be8ed137ddf51227d3dd54cfab43", "url": "https://github.com/line/armeria/commit/22d4c8194107be8ed137ddf51227d3dd54cfab43", "message": "Update deps", "committedDate": "2020-05-13T02:41:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAyNzAzMw==", "url": "https://github.com/line/armeria/pull/2682#discussion_r422027033", "bodyText": "\ud83d\udc4b", "author": "ikhoon", "createdAt": "2020-05-08T08:51:48Z", "path": "dependencies.yml", "diffHunk": "@@ -285,9 +281,6 @@ org.junit.jupiter:\n     # ':site:javadoc' fails when we use a newer version of Javadoc.\n     - https://junit.org/junit5/docs/5.5.2/api/\n \n-kr.motd.gradle:\n-  sphinx-gradle-plugin: { version: '2.6.1' }", "originalCommit": "511772b8c6345c2781fb5f6144a0d87ddd86106e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAzMDMyOA==", "url": "https://github.com/line/armeria/pull/2682#discussion_r422030328", "bodyText": "End with ```?", "author": "ikhoon", "createdAt": "2020-05-08T08:59:06Z", "path": "site/README.md", "diffHunk": "@@ -0,0 +1,81 @@\n+This directory contains a Gatsby project that generates the official\n+web site for Armeria.\n+\n+### Build requirements\n+\n+- The build requirements in [CONTRIBUTING.md](../CONTRIBUTING.md)\n+- `svgbob_cli`\n+  - `brew install rust && cargo install svgbob_cli` on Mac OS X\n+\n+### Working with the project\n+\n+1. Download and install `node`, `yarn` and other dependencies as well as\n+   generating the required `.json` files into the `gen-src` directory.\n+   ```console\n+   $ ../gradlew prepare\n+   ```\n+2. Run Gatsby in development mode.\n+   ```console\n+   $ ../gradlew develop\n+   ```\n+3. Start updating the pages in `src/pages`.\n+   All changes will be visible at <http://127.0.0.1:8000/>.\n+\n+Note that you can also use your local `yarn` or `node` installation,\n+although you'll have to run `../gradlew prepare` to generate the `.json`\n+files into the `gen-src` directory at least once.\n+\n+### Adding a short URL\n+\n+It's often useful to define a short URL such as `/s/slack` when you need\n+to:\n+\n+- Shorten a long URL\n+- Manage a URL that changes often\n+\n+Define a short URL in `gatsby-config.js`. `createPages` in `gatsby-node.js`\n+will create static redirect pages for it. For example, the following\n+configuration will create a redirect from `/s/foo` to `https://bar.com/`:\n+\n+```js\n+module.exports = {\n+  siteMetadata: {\n+    shortUrls: [\n+      {\n+        name: 'foo',\n+        href: 'https://bar.com/',\n+      },\n+    ],\n+  },\n+  // ...\n+};\n+```\n+\n+### Building the project for deployment\n+\n+1. Perform a clean production build.\n+   ```console\n+   $ ../gradlew clean site\n+   ```\n+2. Upload all files in the `public` directory into the `gh-pages` branch, e.g.\n+   ```console\n+   $ cd ../../site-armeria\n+   $ rm -fr *\n+   $ mv ../../armeria/site/public/* .\n+   $ git add -A .\n+   $ git commit --amend -m 'Deploy the web site'\n+   $ git push --force", "originalCommit": "511772b8c6345c2781fb5f6144a0d87ddd86106e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2MjQ0NA==", "url": "https://github.com/line/armeria/pull/2682#discussion_r422062444", "bodyText": "Dead code?", "author": "ikhoon", "createdAt": "2020-05-08T10:13:21Z", "path": "site/src/components/shadow.module.less", "diffHunk": "@@ -0,0 +1,8 @@\n+@import '../../node_modules/antd/es/style/themes/default.less';\n+\n+@shadow-margin: 48px;", "originalCommit": "511772b8c6345c2781fb5f6144a0d87ddd86106e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5NDk5Ng==", "url": "https://github.com/line/armeria/pull/2682#discussion_r424194996", "bodyText": "Indeed. Removed the Shadow component completely.", "author": "trustin", "createdAt": "2020-05-13T06:14:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2MjQ0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0Njc0Mw==", "url": "https://github.com/line/armeria/pull/2682#discussion_r423446743", "bodyText": "nit: Remove brank lines?", "author": "ikhoon", "createdAt": "2020-05-12T03:54:21Z", "path": "site/src/pages/docs/advanced-saml.mdx", "diffHunk": "@@ -0,0 +1,216 @@\n+import versions from '../../../gen-src/versions.json';\n+\n+# SAML Single Sign-On\n+\n+<Tip>\n+\n+Visit [armeria-examples](https://github.com/line/armeria-examples) to find a fully working example.\n+\n+</Tip>\n+\n+## What is SAML?\n+\n+[Security Assertion Markup Language (SAML)](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language)\n+is an open standard for exchanging authentication and authorization data between an identity provider and\n+a service provider. In this protocol, a service provider is an endpoint which provides a web service to\n+an end user, and an identity provider is in charge of authenticating an end user with information sent by\n+the service provider.\n+Armeria currently provides [OpenSAML](https://wiki.shibboleth.net/confluence/display/OS30/Home) based\n+`armeria-saml` module in order to support the integration with an identity provider from a service\n+provider's point of view.\n+\n+## Configuring your server as a service provider\n+\n+\n+", "originalCommit": "ca92c3cc179b79d1c8a52b4de47d0f8a43f41bfb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyODkxNg==", "url": "https://github.com/line/armeria/pull/2682#discussion_r424128916", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ZookeeperUpdatingListener listener =\n          \n          \n            \n            ZooKeeperUpdatingListener listener =", "author": "ikhoon", "createdAt": "2020-05-13T01:52:52Z", "path": "site/src/pages/docs/advanced-zookeeper.mdx", "diffHunk": "@@ -0,0 +1,85 @@\n+# Service discovery with ZooKeeper\n+\n+You can put the list of available <typeplural://Endpoint> into a zNode in\n+[Apache ZooKeeper](https://zookeeper.apache.org/) cluster as a node tree, like the following:\n+\n+```yaml\n+# Note: Only child node values are used. i.e. Child node names are ignored.\n+- /myProductionEndpoints\n+  - /192.168.1.10_8080: 192.168.1.10:8080\n+  - /192.168.1.11_8080: 192.168.1.11:8080:100\n+```\n+\n+In the examples above, `192.168.1.10` and other IP strings are your servers' IP addresses, `8080` is a\n+service port number and `100` is a weight value. You can omit a weight value as it is optional.\n+\n+Create a <type://ZooKeeperEndpointGroup> to retrieve this information:\n+\n+```java\n+import com.linecorp.armeria.client.endpoint.EndpointGroup;\n+import com.linecorp.armeria.client.zookeeper.ZooKeeperEndpointGroup;\n+\n+EndpointGroup myEndpointGroup =\n+        ZooKeeperEndpointGroup.builder(/* zkConnectionStr */ \"myZooKeeperHost:2181\",\n+                                       /* zNodePath       */ \"/myProductionEndpoints\")\n+                              .customizer(builder ->  builder.sessionTimeoutMs(10000))\n+                              .build();\n+```\n+\n+And then specify it when you build a client:\n+\n+```java\n+HelloService.Iface helloClient =\n+        Clients.builder(\"tbinary+http\", myEndpointGroup, \"/hello\")\n+               .build(HelloService.Iface.class);\n+```\n+\n+For more information, please refer to the API documentation of the\n+[com.linecorp.armeria.server.zookeeper](https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/zookeeper/package-summary.html) package.\n+\n+## Automatic service registration\n+\n+Use <type://ZooKeeperUpdatingListenerBuilder> to register your server to a ZooKeeper cluster:\n+\n+```java\n+import com.linecorp.armeria.server.ServerListener;\n+import com.linecorp.armeria.server.zookeeper.ZooKeeperUpdatingListenerBuilder;\n+\n+ZookeeperUpdatingListener listener =", "originalCommit": "ca92c3cc179b79d1c8a52b4de47d0f8a43f41bfb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyODk5Nw==", "url": "https://github.com/line/armeria/pull/2682#discussion_r424128997", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ZookeeperUpdatingListener listener =\n          \n          \n            \n            ZooKeeperUpdatingListener listener =", "author": "ikhoon", "createdAt": "2020-05-13T01:53:07Z", "path": "site/src/pages/docs/advanced-zookeeper.mdx", "diffHunk": "@@ -0,0 +1,85 @@\n+# Service discovery with ZooKeeper\n+\n+You can put the list of available <typeplural://Endpoint> into a zNode in\n+[Apache ZooKeeper](https://zookeeper.apache.org/) cluster as a node tree, like the following:\n+\n+```yaml\n+# Note: Only child node values are used. i.e. Child node names are ignored.\n+- /myProductionEndpoints\n+  - /192.168.1.10_8080: 192.168.1.10:8080\n+  - /192.168.1.11_8080: 192.168.1.11:8080:100\n+```\n+\n+In the examples above, `192.168.1.10` and other IP strings are your servers' IP addresses, `8080` is a\n+service port number and `100` is a weight value. You can omit a weight value as it is optional.\n+\n+Create a <type://ZooKeeperEndpointGroup> to retrieve this information:\n+\n+```java\n+import com.linecorp.armeria.client.endpoint.EndpointGroup;\n+import com.linecorp.armeria.client.zookeeper.ZooKeeperEndpointGroup;\n+\n+EndpointGroup myEndpointGroup =\n+        ZooKeeperEndpointGroup.builder(/* zkConnectionStr */ \"myZooKeeperHost:2181\",\n+                                       /* zNodePath       */ \"/myProductionEndpoints\")\n+                              .customizer(builder ->  builder.sessionTimeoutMs(10000))\n+                              .build();\n+```\n+\n+And then specify it when you build a client:\n+\n+```java\n+HelloService.Iface helloClient =\n+        Clients.builder(\"tbinary+http\", myEndpointGroup, \"/hello\")\n+               .build(HelloService.Iface.class);\n+```\n+\n+For more information, please refer to the API documentation of the\n+[com.linecorp.armeria.server.zookeeper](https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/zookeeper/package-summary.html) package.\n+\n+## Automatic service registration\n+\n+Use <type://ZooKeeperUpdatingListenerBuilder> to register your server to a ZooKeeper cluster:\n+\n+```java\n+import com.linecorp.armeria.server.ServerListener;\n+import com.linecorp.armeria.server.zookeeper.ZooKeeperUpdatingListenerBuilder;\n+\n+ZookeeperUpdatingListener listener =\n+        ZooKeeperUpdatingListener.builder(\"myZooKeeperHost:2181\", \"/myProductionEndpoints\")\n+                                 .sessionTimeout(10000)\n+                                 .build();\n+server.addListener(listener);\n+server.start();\n+...\n+```\n+\n+You can also use an existing\n+[CuratorFramework](https://curator.apache.org/apidocs/org/apache/curator/framework/CuratorFramework.html)\n+instance instead of ZooKeeper connection string:\n+\n+```java\n+import com.linecorp.armeria.server.ServerListener;\n+import com.linecorp.armeria.server.zookeeper.ZooKeeperUpdatingListenerBuilder;\n+import org.apache.curator.framework.CuratorFramework;\n+\n+CuratorFramework client = ...\n+ZookeeperUpdatingListener listener =", "originalCommit": "ca92c3cc179b79d1c8a52b4de47d0f8a43f41bfb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEyOTI5Mw==", "url": "https://github.com/line/armeria/pull/2682#discussion_r424129293", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can use the `decorator()` method in <type://ClientBuilder> to build a <type://CircuitBreakerClient>:\n          \n          \n            \n            You can use the `decorator()` method in <type://WebClientBuilder> to build a <type://CircuitBreakerClient>:", "author": "ikhoon", "createdAt": "2020-05-13T01:54:28Z", "path": "site/src/pages/docs/client-circuit-breaker.mdx", "diffHunk": "@@ -0,0 +1,319 @@\n+# Circuit breaker\n+\n+In microservice architecture, it's common that various services running on different machines are connected to\n+each other through remote calls. If one of the services becomes unreachable somehow such as due to network\n+issues, the client which connects to that service will take long to get a response from it or to fail to\n+get one. Situation will get even worse if there are many remote calls to such unresponsive service.\n+You can configure an Armeria client with a circuit breaker to prevent this circumstance. The circuit breaker\n+can automatically detect failures by continuously updating success and failure events. If the remote service\n+is unresponsive, it will immediately respond with an error and not make remote calls.\n+Please refer to [CircuitBreaker wiki page](https://martinfowler.com/bliki/CircuitBreaker.html) by Martin Fowler and\n+[LINE Engineering blog post about circuit breaker](https://engineering.linecorp.com/en/blog/detail/76)\n+for more information.\n+\n+## State of `CircuitBreaker`\n+\n+A <type://CircuitBreaker> can be one of the following three states:\n+- `CLOSED`\n+  - Initial state. All requests are treated normally.\n+- `OPEN`\n+  - The state machine enters the `OPEN` state once the number of failures divided by the total number of\n+    requests exceeds a certain threshold. All requests are blocked off responding with <type://FailFastException>.\n+- `HALF_OPEN`.\n+  - After a certain amount of time in the `OPEN` state, the state machine enters the `HALF_OPEN` state\n+    which sends a request to find out if the service is still unavailable or not.\n+    If the request succeeds, it enters the `CLOSED` state. If it fails, it enters the `OPEN` state again.\n+    \n+```bob-svg\n+                                   +----------------+\n+                                   |                |\n+                                   |      OPEN      |\n+                                   |                |<-------------------+\n+                                   +------------+---+     failed again   |\n+                                       ^        |                        |\n+                                       |        |                        |\n+                                       |        |                        |\n+                                       |        |                        |\n+ under threshold                       |        |                        |\n+     +---+                             |        |                        |\n+     |   |                             |        |                        |\n+     |   v                             |        |                        |\n++----+-----------+  exceeded threshold |        |     timed out       +--+-------------+\n+|                +---------------------+        +-------------------->|                |\n+|     CLOSED     |                                                    |   HALF_ OPEN   |\n+|                |<---------------------------------------------------+                |\n++----------------+          back to normal (request succeeded)        +----------------+\n+```\n+\n+## `CircuitBreakerClient`\n+\n+Armeria provides two different client implementations depending on the\n+<type://Request> and <type://Response> types:\n+- <type://CircuitBreakerClient>\n+- <type://CircuitBreakerRpcClient>\n+\n+Let's use <type://CircuitBreakerClient> to find out what we can do.\n+You can use the `decorator()` method in <type://ClientBuilder> to build a <type://CircuitBreakerClient>:", "originalCommit": "ca92c3cc179b79d1c8a52b4de47d0f8a43f41bfb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzMjQ0NA==", "url": "https://github.com/line/armeria/pull/2682#discussion_r424132444", "bodyText": "Let me make a PR to your branch once #2661 is merged", "author": "ikhoon", "createdAt": "2020-05-13T02:06:47Z", "path": "site/src/pages/docs/client-retry.mdx", "diffHunk": "@@ -0,0 +1,433 @@\n+# Automatic retry\n+\n+When a client gets an error response, it might want to retry the request depending on the response.\n+This can be accomplished using a decorator_, and Armeria provides the following implementations out-of-the box.\n+- <type://RetryingClient>\n+- <type://RetryingRpcClient>\n+\n+Both behave the same except for the different request and response types.\n+So, let's find out what we can do with <type://RetryingClient>.\n+\n+## `RetryingClient`\n+\n+You can just use the `decorator()` method in <type://ClientBuilder> or <type://WebClientBuilder> to build a\n+<type://RetryingClient>. For example:\n+\n+```java\n+    import com.linecorp.armeria.client.WebClient;\n+    import com.linecorp.armeria.client.retry.RetryingClient;\n+    import com.linecorp.armeria.client.retry.RetryStrategy;\n+    import com.linecorp.armeria.common.AggregatedHttpResponse;\n+\n+    RetryStrategy strategy = RetryStrategy.onServerErrorStatus();", "originalCommit": "ca92c3cc179b79d1c8a52b4de47d0f8a43f41bfb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzNzQ4MA==", "url": "https://github.com/line/armeria/pull/2682#discussion_r424137480", "bodyText": "Need close brace? } (It was my mistake.\ud83d\ude05)", "author": "ikhoon", "createdAt": "2020-05-13T02:26:03Z", "path": "site/src/pages/docs/server-annotated-service.mdx", "diffHunk": "@@ -0,0 +1,1315 @@\n+# Annotated services\n+\n+<Tip>\n+\n+Visit [armeria-examples](https://github.com/line/armeria-examples) to find a fully working example.\n+\n+</Tip>\n+\n+Armeria provides a way to write an HTTP service using annotations. It helps a user make his or her code\n+simple and easy to understand. A user is able to run an HTTP service by fewer lines of code using\n+annotations as follows. `hello()` method in the example would be mapped to the path of `/hello/{name}`\n+with an HTTP `GET` method.\n+\n+```java\n+ServerBuilder sb = Server.builder();\n+sb.annotatedService(new Object() {\n+    @Get(\"/hello/{name}\")\n+    public HttpResponse hello(@Param(\"name\") String name) {\n+        return HttpResponse.of(HttpStatus.OK,\n+                               MediaType.PLAIN_TEXT_UTF_8,\n+                               \"Hello, %s!\", name);\n+    }\n+});\n+```\n+\n+## Mapping HTTP service methods\n+\n+To map a service method in an annotated HTTP service class to an HTTP path, it has to be annotated with one of\n+HTTP method annotations. The following is the list of HTTP method annotations where each of them is mapped\n+to an HTTP method.\n+\n+- <type://@Get>\n+- <type://@Head>\n+- <type://@Post>\n+- <type://@Put>\n+- <type://@Delete>\n+- <type://@Options>\n+- <type://@Patch>\n+- <type://@Trace>\n+\n+To handle an HTTP request with a service method, you can annotate your service method simply as follows.\n+\n+```java\n+public class MyAnnotatedService {\n+    @Get(\"/hello\")\n+    public HttpResponse hello() { ... }\n+}\n+```\n+\n+There are 5 different path types that you can define:\n+\n+- Exact path, e.g. `/hello` or `exact:/hello`\n+\n+  - a service method will handle the path exactly matched with the specified path.\n+\n+- Prefix path, e.g. `prefix:/hello`\n+\n+  - a service method will handle every path which starts with the specified prefix.\n+\n+- Path containing path variables, e.g `/hello/{name}` or `/hello/:name`\n+\n+  - a service method will handle the path matched with the specified path pattern. A path variable in the\n+    specified pattern may be mapped to a parameter of the service method.\n+\n+- Regular expression path, e.g. `regex:^/hello/(?<name>.*)$`\n+\n+  - a service method will handle the path matched with the specified regular expression. If a named capturing\n+    group exists in the regular expression, it may be mapped to a parameter of the service method.\n+\n+- Glob pattern path, e.g. `glob:/*/hello/**`\n+\n+  - a service method will handle the path matched with the specified glob pattern. Each wildcard is mapped to\n+    an index which starts with `0`, so it may be mapped to a parameter of the service method.\n+\n+You can get the value of a path variable, a named capturing group of the regular expression or wildcards of\n+the glob pattern in your service method by annotating a parameter with <type://@Param> as follows.\n+Please refer to [Parameter injection](#parameter-injection) for more information about <type://@Param>.\n+\n+```java\n+public class MyAnnotatedService {\n+\n+    @Get(\"/hello/{name}\")\n+    public HttpResponse pathVar(@Param(\"name\") String name) { ... }\n+\n+    @Get(\"regex:^/hello/(?<name>.*)$\")\n+    public HttpResponse regex(@Param(\"name\") String name) { ... }\n+\n+    @Get(\"glob:/*/hello/**\")\n+    public HttpResponse glob(@Param(\"0\") String prefix, @Param(\"1\") String name) { ... }\n+}\n+```\n+\n+Every service method in the examples so far had a single HTTP method annotation with it. What if you want\n+to map more than one HTTP method or path to your service method? You can use <type://@Path> annotations to\n+specify multiple paths, and use the HTTP method annotations without a path to map multiple HTTP methods, e.g.\n+\n+```java\n+public class MyAnnotatedService {\n+    @Get\n+    @Post\n+    @Put\n+    @Delete\n+    @Path(\"/hello\")\n+    @Path(\"/hi\")\n+    public HttpResponse greeting() { ... }\n+}\n+```\n+\n+Every service method assumes that it returns an HTTP response with `200 OK` or `204 No Content` status\n+according to its return type. If the return type is `void` or `Void`, `204 No Content` would be applied.\n+`200 OK` would be applied for the other types. If you want to return an alternative status code for a method,\n+you can use <type://@StatusCode> annotation as follows.\n+\n+```java\n+public class MyAnnotatedService {\n+\n+    @StatusCode(201)\n+    @Post(\"/users/{name}\")\n+    public User createUser(@Param(\"name\") String name) { ... }\n+\n+    // @StatusCode(200) would be applied by default.\n+    @Get(\"/users/{name}\")\n+    public User getUser(@Param(\"name\") String name) { ... }\n+\n+    // @StatusCode(204) would be applied by default.\n+    @Delete(\"/users/{name}\")\n+    public void deleteUser(@Param(\"name\") String name) { ... }\n+}\n+```\n+\n+You can define a service method which handles a request only if it contains a header or parameter the method\n+requires. The following methods are bound to the same path `/users` but a request may be routed based on the\n+`client-type` header.\n+\n+```java\n+public class MyAnnotatedService {\n+\n+    // Handles a request which contains 'client-type: android' header.\n+    @Get(\"/users\")\n+    @ConditionalHeader(\"client-type=android\")\n+    public User getUsers1() { ... }\n+\n+    // Handles a request which contains 'client-type' header. Any values of the 'client-type' header are accepted.\n+    @Get(\"/users\")\n+    @ConditionalHeader(\"client-type\")\n+    public User getUsers2() { ... }\n+\n+    // Handles a request which doesn't contain 'client-type' header.\n+    @Get(\"/users\")\n+    public User getUsers3() { ... }\n+}\n+```\n+\n+## Parameter injection\n+\n+Let's see the example in the above section again.\n+\n+```java\n+public class MyAnnotatedService {\n+\n+    @Get(\"/hello/{name}\")\n+    public HttpResponse pathvar(@Param(\"name\") String name) { ... }\n+\n+    @Get(\"regex:^/hello/(?<name>.*)$\")\n+    public HttpResponse regex(@Param(\"name\") String name) { ... }\n+\n+    @Get(\"glob:/*/hello/**\")\n+    public HttpResponse glob(@Param(\"0\") String prefix, @Param(\"1\") String name) { ... }\n+}\n+```\n+\n+A value of a parameter `name` is automatically injected as a `String` by Armeria.\n+Armeria will try to convert the value appropriately if the parameter type is not `String`.\n+`IllegalArgumentException` will be raised if the conversion fails or the parameter type is not\n+one of the following supported types:\n+\n+- `boolean` or `Boolean`\n+- `byte` or `Byte`\n+- `short` or `Short`\n+- `integer` or `Integer`\n+- `long` or `Long`\n+- `float` or `Float`\n+- `double` or `Double`\n+- `String`\n+- `Enum`\n+- `UUID`\n+\n+Note that you can omit the value of <type://@Param> if you compiled your code with `-parameters` javac\n+option. In this case the variable name is used as the value.\n+\n+```java\n+public class MyAnnotatedService {\n+    @Get(\"/hello/{name}\")\n+    public HttpResponse hello1(@Param String name) { ... }\n+}\n+```\n+\n+Please refer to [Configure -parameters javac option](/docs/setup#configure--parameters-javac-option) \n+for more information.\n+\n+### Injecting a parameter as an `Enum` type\n+\n+`Enum` type is also automatically converted if you annotate a parameter of your service method with\n+<type://@Param> annotation. If your `Enum` type can be handled in a case-insensitive way, Armeria\n+automatically converts the string value of a parameter to a value of `Enum` in a case-insensitive way.\n+Otherwise, case-sensitive exact match will be performed.\n+\n+```java\n+public enum CaseInsensitive {\n+    ALPHA, BRAVO, CHARLIE\n+}\n+```\n+\n+```java\n+public enum CaseSensitive {\n+    ALPHA, alpha\n+}\n+```\n+\n+```java\n+public class MyAnnotatedService {\n+\n+    @Get(\"/hello1/{there}\")\n+    public HttpResponse hello1(@Param(\"there\") CaseInsensitive there) {\n+        // 'there' is converted in a case-insensitive way.\n+    }\n+\n+    @Get(\"/hello2/{there}\")\n+    public HttpResponse hello2(@Param(\"there\") CaseSensitive there) {\n+        // 'there' must be converted in a case-sensitive way.\n+        // So 'ALPHA' and 'alpha' are only acceptable.\n+    }\n+}\n+```\n+\n+### Getting a query parameter\n+\n+When the value of <type://@Param> annotation is not shown in the path pattern, it will be handled as a\n+parameter name of the query string of the request. If you have a service class like the example below and\n+a user sends an HTTP `GET` request with URI of `/hello1?name=armeria`, the service method will get `armeria`\n+as the value of parameter `name`. If there is no parameter named `name` in the query string, the parameter\n+`name` of the method would be `null`. If you want to avoid `null` in this case, you can use\n+<type://@Default> annotation or `Optional<?>` class, e.g. `hello2` and `hello3` methods below, respectively.\n+\n+```java\n+public class MyAnnotatedService {\n+\n+    @Get(\"/hello1\")\n+    public HttpResponse hello1(@Param(\"name\") String name) { ... }\n+\n+    @Get(\"/hello2\")\n+    public HttpResponse hello2(@Param(\"name\") @Default(\"armeria\") String name) { ... }\n+\n+    @Get(\"/hello3\")\n+    public HttpResponse hello3(@Param(\"name\") Optional<String> name) {\n+        String clientName = name.orElse(\"armeria\");\n+        // ...\n+    }\n+}\n+```\n+\n+If multiple parameters exist with the same name in a query string, they can be injected as a `List<?>`\n+or `Set<?>`, e.g. `/hello1?number=1&number=2&number=3`. You can use <type://@Default> annotation\n+or `Optional<?>` class here, too.\n+\n+```java\n+public class MyAnnotatedService {\n+    @Get(\"/hello1\")\n+    public HttpResponse hello1(@Param(\"number\") List<Integer> numbers) { ... }\n+\n+    // If there is no 'number' parameter, the default value \"1\" will be converted to Integer 1,\n+    // then it will be added to the 'numbers' list.\n+    @Get(\"/hello2\")\n+    public HttpResponse hello2(@Param(\"number\") @Default(\"1\") List<Integer> numbers) { ... }\n+\n+    @Get(\"/hello3\")\n+    public HttpResponse hello3(@Param(\"number\") Optional<List<Integer>> numbers) { ... }\n+}\n+```\n+\n+If an HTTP `POST` request with a `Content-Type: x-www-form-urlencoded` header is received and\n+no <type://@Param> value appears in the path pattern, Armeria will aggregate the received request and\n+decode its body as a URL-encoded form. After that, Armeria will inject the decoded value into the parameter.\n+\n+```java\n+public class MyAnnotatedService {\n+    @Post(\"/hello4\")\n+    public HttpResponse hello4(@Param(\"name\") String name) {\n+        // 'x-www-form-urlencoded' request will be aggregated. The other requests may get\n+        // a '400 Bad Request' because there is no way to inject a mandatory parameter 'name'.\n+    }\n+}\n+```\n+\n+### Getting an HTTP header\n+\n+Armeria also provides <type://@Header> annotation to inject an HTTP header value into a parameter.\n+The parameter annotated with <type://@Header> can also be specified as one of the built-in types as follows.\n+<type://@Default> and `Optional<?>` are also supported. <type://@Header> annotation also supports\n+`List<?>` or `Set<?>` because HTTP headers can be added several times with the same name.\n+\n+```java\n+public class MyAnnotatedService {\n+\n+    @Get(\"/hello1\")\n+    public HttpResponse hello1(@Header(\"Authorization\") String auth) { ... }\n+\n+    @Post(\"/hello2\")\n+    public HttpResponse hello2(@Header(\"Content-Length\") long contentLength) { ... }\n+\n+    @Post(\"/hello3\")\n+    public HttpResponse hello3(@Header(\"Forwarded\") List<String> forwarded) { ... }\n+\n+    @Post(\"/hello4\")\n+    public HttpResponse hello4(@Header(\"Forwarded\") Optional<Set<String>> forwarded) { ... }\n+}\n+```\n+\n+Note that you can omit the value of <type://@Header> if you compiled your code with `-parameters` javac\n+option. Read [Parameter injection](#parameter-injection) for more information.\n+In this case, the variable name is used as the value, but it will be converted to hyphen-separated lowercase\n+string to be suitable for general HTTP header names. e.g. a variable name `contentLength` or\n+`content_length` will be converted to `content-length` as the value of <type://@Header>.\n+\n+```java\n+public class MyAnnotatedService {\n+    @Post(\"/hello2\")\n+    public HttpResponse hello2(@Header long contentLength) { ... }\n+}\n+```\n+\n+### Other classes automatically injected\n+\n+The following classes are automatically injected when you specify them on the parameter list of your method.\n+\n+- <type://ServiceRequestContext> (or <type://RequestContext>)\n+- <type://RequestHeaders> (or <type://HttpHeaders>)\n+- <type://HttpRequest> (or <type://Request>)\n+- <type://AggregatedHttpRequest>\n+- <type://QueryParams>\n+- <type://Cookies>\n+\n+```java\n+public class MyAnnotatedService {\n+\n+    @Get(\"/hello1\")\n+    public HttpResponse hello1(ServiceRequestContext ctx, HttpRequest req) {\n+        // Use the context and request inside a method.\n+    }\n+\n+    @Post(\"/hello2\")\n+    public HttpResponse hello2(AggregatedHttpRequest aggregatedRequest) {\n+        // Armeria aggregates the received HttpRequest and calls this method with the aggregated request.\n+    }\n+\n+    @Get(\"/hello3\")\n+    public HttpResponse hello3(QueryParams params) {\n+        // 'params' holds the parameters parsed from a query string of a request.\n+    }\n+\n+    @Post(\"/hello4\")\n+    public HttpResponse hello4(QueryParams params) {\n+        // If a request has a url-encoded form as its body, it can be accessed via 'params'.\n+    }\n+\n+    @Post(\"/hello5\")\n+    public HttpResponse hello5(Cookies cookies) {\n+        // If 'Cookie' header exists, it will be injected into the specified 'cookies' parameter.\n+    }\n+}\n+```\n+\n+## Handling exceptions\n+\n+It is often useful to extract exception handling logic from service methods into a separate common class.\n+Armeria provides <type://@ExceptionHandler> annotation to transform an exception into a response.\n+You can write your own exception handler by implementing <type://ExceptionHandlerFunction> interface and\n+annotate your service object or method with <type://@ExceptionHandler> annotation. Here is an example of\n+an exception handler. If your exception handler is not able to handle a given exception, you can call\n+`ExceptionHandlerFunction.fallthrough()` to pass the exception to the next exception handler.\n+\n+```java\n+public class MyExceptionHandler implements ExceptionHandlerFunction {\n+    @Override\n+    public HttpResponse handleException(ServiceRequestContext ctx, HttpRequest req, Throwable cause) {\n+        if (cause instanceof MyServiceException) {\n+            return HttpResponse.of(HttpStatus.CONFLICT);\n+        }\n+\n+        // To the next exception handler.\n+        return ExceptionHandlerFunction.fallthrough();\n+    }\n+}\n+```\n+\n+You can annotate at class level to catch an exception from every method in your service class.\n+\n+```java\n+@ExceptionHandler(MyExceptionHandler.class)\n+public class MyAnnotatedService {\n+    @Get(\"/hello\")\n+    public HttpResponse hello() { ... }\n+}\n+```\n+\n+You can also annotate at method level to catch an exception from a single method in your service class.\n+\n+```java\n+public class MyAnnotatedService {\n+    @Get(\"/hello\")\n+    @ExceptionHandler(MyExceptionHandler.class)\n+    public HttpResponse hello() { ... }\n+}\n+```\n+\n+If there is no exception handler which is able to handle an exception, the exception would be passed to\n+the default exception handler. It handles `IllegalArgumentException`, <type://HttpStatusException> and\n+<type://HttpResponseException> by default. `IllegalArgumentException` would be converted into\n+`400 Bad Request` response, and the other two exceptions would be converted into a response with\n+the status code which they are holding. For another exceptions, `500 Internal Server Error` would be\n+sent to the client.\n+\n+## Conversion between an HTTP message and a Java object\n+\n+### Converting an HTTP request to a Java object\n+\n+In some cases like receiving a JSON document from a client, it may be useful to convert the document to\n+a Java object automatically. Armeria provides <type://@RequestConverter> and <type://@RequestObject>\n+annotations so that such conversion can be done conveniently.\n+You can write your own request converter by implementing <type://RequestConverterFunction> as follows.\n+Similar to the exception handler, you can call `RequestConverterFunction.fallthrough()` when your request\n+converter is not able to convert the request.\n+\n+```java\n+public class ToEnglishConverter implements RequestConverterFunction {\n+    @Override\n+    public Object convertRequest(ServiceRequestContext ctx, AggregatedHttpRequest request,\n+                                 Class<?> expectedResultType) {\n+        if (expectedResultType == Greeting.class) {\n+            // Convert the request to a Java object.\n+            return new Greeting(translateToEnglish(request.contentUtf8()));\n+        }\n+\n+        // To the next request converter.\n+        return RequestConverterFunction.fallthrough();\n+    }\n+\n+    private String translateToEnglish(String greetingInAnyLanguage) { ... }\n+}\n+```\n+\n+Then, you can write your service method as follows. Custom request objects will be converted automatically\n+by the converters you registered with <type://@RequestConverter> annotation. \n+Note that <type://@RequestConverter> annotation can be specified on a class, a method or a parameter \n+in an annotated service, and its scope is determined depending on where it is specified.\n+\n+```java\n+@RequestConverter(ToEnglishConverter.class)\n+public class MyAnnotatedService {\n+\n+    @Post(\"/hello\")\n+    public HttpResponse hello(Greeting greeting) {\n+        // ToEnglishConverter will be used to convert a request.\n+        // ...\n+    }\n+\n+    @Post(\"/hola\")\n+    @RequestConverter(ToSpanishConverter.class)\n+    public HttpResponse hola(Greeting greeting) {\n+        // ToSpanishConverter will be tried to convert a request first.\n+        // ToEnglishConverter will be used if ToSpanishConverter fell through.\n+        // ...\n+    }\n+\n+    @Post(\"/greet\")\n+    public HttpResponse greet(RequestConverter(ToGermanConverter.class) Greeting greetingInGerman,\n+                              Greeting greetingInEnglish) {\n+        // For the 1st parameter 'greetingInGerman':\n+        // ToGermanConverter will be tried to convert a request first.\n+        // ToEnglishConverter will be used if ToGermanConverter fell through.\n+        //\n+        // For the 2nd parameter 'greetingInEnglish':\n+        // ToEnglishConverter will be used to convert a request.\n+        // ...\n+    }\n+}\n+```\n+\n+Armeria also provides built-in request converters such as, a request converter for a Java Bean,\n+<type://JacksonRequestConverterFunction> for a JSON document, <type://StringRequestConverterFunction>\n+for a string and <type://ByteArrayRequestConverterFunction> for binary data. They will be applied\n+after your request converters, so you don't have to specify any <type://@RequestConverter> annotations:\n+\n+```java\n+public class MyAnnotatedService {\n+\n+    // JacksonRequestConverterFunction will work for the content type of 'application/json' or\n+    // one of '+json' types.\n+    @Post(\"/hello1\")\n+    public HttpResponse hello1(JsonNode body) { ... }\n+\n+    @Post(\"/hello2\")\n+    public HttpResponse hello2(MyJsonRequest body) { ... }\n+\n+    // StringRequestConverterFunction will work regardless of the content type.\n+    @Post(\"/hello3\")\n+    public HttpResponse hello3(String body) { ... }\n+\n+    @Post(\"/hello4\")\n+    public HttpResponse hello4(CharSequence body) { ... }\n+\n+    // ByteArrayRequestConverterFunction will work regardless of the content type.\n+    @Post(\"/hello5\")\n+    public HttpResponse hello5(byte[] body) { ... }\n+\n+    @Post(\"/hello6\")\n+    public HttpResponse hello6(HttpData body) { ... }\n+}\n+```\n+\n+#### Injecting value of parameters and HTTP headers into a Java object\n+\n+Armeria provides a generic built-in request converter that converts a request into a Java object.\n+Just define a plain old Java class and specify it as a parameter of your service method.\n+\n+```java\n+public class MyAnnotatedService {\n+    @Post(\"/hello\")\n+    public HttpResponse hello(MyRequestObject myRequestObject) { ... }\n+}\n+```\n+\n+We also need to define the `MyRequestObject` class which was used in the method `hello()` above.\n+To tell Armeria which constructor parameter, setter method or field has to be injected with what value,\n+we should put <type://@Param>, <type://@Header>, <type://@RequestObject> annotations on any of the following elements:\n+\n+- Fields\n+- Constructors with only one parameter\n+- Methods with only one parameter\n+- Constructor parameters\n+- Method parameters\n+\n+\n+```java\n+public class MyRequestObject {\n+    @Param(\"name\") // This field will be injected by the value of parameter \"name\".\n+    private String name;\n+\n+    @Header(\"age\") // This field will be injected by the value of HTTP header \"age\".\n+    private int age;\n+\n+    @RequestObject // This field will be injected by another request converter.\n+    private MyAnotherRequestObject obj;\n+\n+    // You can omit the value of @Param or @Header if you compiled your code with `-parameters` javac option.\n+    @Param         // This field will be injected by the value of parameter \"gender\".\n+    private String gender;\n+\n+    @Header        // This field will be injected by the value of HTTP header \"accept-language\".\n+    private String acceptLanguage;\n+\n+    @Param(\"address\") // You can annotate a single parameter method with @Param or @Header.\n+    public void setAddress(String address) { ... }\n+\n+    @Header(\"id\") // You can annotate a single parameter constructor with @Param or @Header.\n+    @Default(\"0\")\n+    public MyRequestObject(long id) { ... }\n+\n+    // You can annotate all parameters of method or constructor with @Param or @Header.\n+    public void init(@Header(\"permissions\") String permissions,\n+                     @Param(\"client-id\") @Default(\"0\") int clientId)\n+}\n+```\n+\n+The usage of <type://@Param> or <type://@Header> annotations on Java object elements is much like\n+using them on the parameters of a service method because even you can use <type://@Default> and\n+<type://@RequestObject> annotations defined there.\n+Please refer to [Parameter injection](#parameter-injection), and \n+[Getting an HTTP header](#getting-an-http-header) for more information.\n+\n+### Converting a Java object to an HTTP response\n+\n+Every object returned by an annotated service method can be converted to an HTTP response message by\n+response converters, except for <type://HttpResponse> and <type://AggregatedHttpResponse> which are already\n+in a form of response message. You can also write your own response converter by implementing\n+<type://ResponseConverterFunction> as follows. Also similar to <type://RequestConverterFunction>,\n+you can call `ResponseConverterFunction.fallthrough()` when your response converter is not able to\n+convert the result to an <type://HttpResponse>.\n+\n+```java\n+public class MyResponseConverter implements ResponseConverterFunction {\n+    @Override\n+    HttpResponse convertResponse(ServiceRequestContext ctx,\n+                                 ResponseHeaders headers,\n+                                 @Nullable Object result,\n+                                 HttpHeaders trailers) throws Exception {\n+        if (result instanceof MyObject) {\n+            return HttpResponse.of(HttpStatus.OK,\n+                                   MediaType.PLAIN_TEXT_UTF_8,\n+                                   \"Hello, %s!\", ((MyObject) result).processedName(),\n+                                   trailers);\n+        }\n+\n+        // To the next response converter.\n+        return ResponseConverterFunction.fallthrough();\n+    }\n+}\n+```\n+\n+You can annotate your service method and class as follows.\n+\n+```java\n+@ResponseConverter(MyResponseConverter.class)\n+public class MyAnnotatedService {\n+\n+    @Post(\"/hello\")\n+    public MyObject hello() {\n+        // MyResponseConverter will be used to make a response.\n+        // ...\n+    }\n+\n+    @Post(\"/hola\")\n+    @ResponseConverter(MySpanishResponseConverter.class)\n+    public MyObject hola() {\n+        // MySpanishResponseConverter will be tried to convert MyObject to a response first.\n+        // MyResponseConverter will be used if MySpanishResponseConverter fell through.\n+        // ...\n+    }\n+}\n+```\n+\n+Armeria supports [Media type negotiation](#media-type-negotiation). So you may want to get \n+a negotiated media type in order to set a `Content-Type` header on your response. \n+In this case, you can access it in your response converter as follows.\n+\n+```java\n+public class MyResponseConverter implements ResponseConverterFunction {\n+    @Override\n+    HttpResponse convertResponse(ServiceRequestContext ctx,\n+                                 ResponseHeaders headers,\n+                                 @Nullable Object result,\n+                                 HttpHeaders trailers) throws Exception {\n+        MediaType mediaType = ctx.negotiatedResponseMediaType();\n+        if (mediaType != null) {\n+            // Do something based on the media type.\n+            // ...\n+        }\n+    }\n+}\n+```\n+\n+Even if you do not specify any <type://@ResponseConverter> annotation, the response object can be converted into\n+an <type://HttpResponse> by one of the following response converters which performs the conversion based on\n+the negotiated media type and the type of the object.\n+\n+- <type://JacksonResponseConverterFunction>\n+\n+  - converts an object to a JSON document if the negotiated media type is `application/json`.\n+    `JsonNode` object can be converted to a JSON document even if there is no media type negotiated.\n+\n+- <type://StringResponseConverterFunction>\n+\n+  - converts an object to a string if the negotiated main media type is one of `text` types.\n+    If there is no media type negotiated, `String` and `CharSequence` object will be written as a text\n+    with `Content-Type: text/plain; charset=utf-8` header.\n+\n+- <type://ByteArrayResponseConverterFunction>\n+\n+  - converts an object to a byte array. Only <type://HttpData> and `byte[]` will be handled\n+    even if the negotiated media type is `application/binary` or `application/octet-stream`.\n+    If there is no media type negotiated, <type://HttpData> and `byte[]` object will be written as a binary\n+    with `Content-Type: application/binary` header.\n+\n+Let's see the following example about the default response conversion.\n+\n+```java\n+public class MyAnnotatedService {\n+\n+    // JacksonResponseConverterFunction will convert the return values to JSON documents:\n+    @Get(\"/json1\")\n+    @ProducesJson    // the same as @Produces(\"application/json; charset=utf-8\")\n+    public MyObject json1() { ... }\n+\n+    @Get(\"/json2\")\n+    public JsonNode json2() { ... }\n+\n+    // StringResponseConverterFunction will convert the return values to strings:\n+    @Get(\"/string1\")\n+    @ProducesText    // the same as @Produces(\"text/plain; charset=utf-8\")\n+    public int string1() { ... }\n+\n+    @Get(\"/string2\")\n+    public CharSequence string2() { ... }\n+\n+    // ByteArrayResponseConverterFunction will convert the return values to byte arrays:\n+    @Get(\"/byte1\")\n+    @ProducesBinary  // the same as @Produces(\"application/binary\")\n+    public HttpData byte1() { ... }\n+\n+    @Get(\"/byte2\")\n+    public byte[] byte2() { ... }\n+}\n+```\n+\n+## Using `ServerBuilder` to configure converters and exception handlers\n+\n+You can specify converters and exception handlers using <type://ServerBuilder>, without using the annotations\n+explained in the previous sections:\n+\n+```java\n+sb.annotatedService(new MyAnnotatedService(),\n+                    new MyExceptionHandler(), new MyRequestConverter(), new MyResponseConverter());\n+```\n+\n+Also, they have a different method signature for conversion and exception handling so you can even write them\n+in a single class and add it to your <type://ServerBuilder> at once, e.g.\n+\n+```java\n+public class MyAllInOneHandler implements RequestConverterFunction,\n+                                          ResponseConverterFunction,\n+                                          ExceptionHandlerFunction {\n+    @Override\n+    public Object convertRequest(ServiceRequestContext ctx, AggregatedHttpRequest request,\n+                                 Class<?> expectedResultType) { ... }\n+\n+    @Override\n+    HttpResponse convertResponse(ServiceRequestContext ctx,\n+                                 ResponseHeaders headers,\n+                                 @Nullable Object result,\n+                                 HttpHeaders trailers) throws Exception { ... }\n+\n+    @Override\n+    public HttpResponse handleException(ServiceRequestContext ctx, HttpRequest req,\n+                                        Throwable cause) { ... }\n+}\n+\n+// ...\n+\n+sb.annotatedService(new MyAnnotatedService(), new MyAllInOneHandler());\n+```\n+\n+When you specify exception handlers in a mixed manner like below, they will be evaluated in the following\n+order commented. It is also the same as the evaluation order of the converters.\n+\n+```java\n+@ExceptionHandler(MyClassExceptionHandler3.class)           // order 3\n+@ExceptionHandler(MyClassExceptionHandler4.class)           // order 4\n+public class MyAnnotatedService {\n+    @Get(\"/hello\")\n+    @ExceptionHandler(MyMethodExceptionHandler1.class)      // order 1\n+    @ExceptionHandler(MyMethodExceptionHandler2.class)      // order 2\n+    public HttpResponse hello() { ... }\n+}\n+\n+// ...\n+\n+sb.annotatedService(new MyAnnotatedService(),\n+                    new MyGlobalExceptionHandler5(),        // order 5\n+                    new MyGlobalExceptionHandler6());       // order 6\n+```\n+\n+## Returning a response\n+\n+In the earlier examples, the annotated service methods only return <type://HttpResponse>, however there are\n+more response types which can be used in the annotated service.\n+\n+- <type://HttpResponse> and <type://AggregatedHttpResponse>\n+\n+  - It will be sent to the client without any modification. If an exception is raised while the response is\n+    being sent, exception handlers will handle it. If no message has been sent to the client yet,\n+    the exception handler can send an <type://HttpResponse> instead.\n+\n+- <type://HttpResult>\n+\n+  - It contains the <type://HttpHeaders> and the object which can be converted into HTTP response body by\n+    response converters. A user can customize the HTTP status and headers including the trailers, with this type.\n+\n+  ```java\n+  public class MyAnnotatedService {\n+      @Get(\"/users\")\n+      public HttpResult<List<User>> getUsers(@Param int start) {\n+          List<User> users = ...;\n+          ResponseHeaders headers = ResponseHeaders.builder()\n+              .status(HttpStatus.OK)\n+              .add(HttpHeaderNames.LINK,\n+                   String.format(\"<https://example.com/users?start=%s>; rel=\\\"next\\\"\", start + 10))\n+              .build();\n+          return HttpResult.of(headers, users);\n+      }\n+  ```", "originalCommit": "ca92c3cc179b79d1c8a52b4de47d0f8a43f41bfb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5a88d862b638856f0a192258316b07f15af65661", "url": "https://github.com/line/armeria/commit/5a88d862b638856f0a192258316b07f15af65661", "message": "Address the comments from @ikhoon", "committedDate": "2020-05-13T06:14:03Z", "type": "commit"}, {"oid": "1da0904081818bb6b833eb3db1567e06921a3926", "url": "https://github.com/line/armeria/commit/1da0904081818bb6b833eb3db1567e06921a3926", "message": "Merge branch 'master' into new_site", "committedDate": "2020-05-13T06:48:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxMjA4Mg==", "url": "https://github.com/line/armeria/pull/2682#discussion_r424212082", "bodyText": "and to send -> and send or to send?", "author": "minwoox", "createdAt": "2020-05-13T06:57:28Z", "path": "site/src/pages/community/index.mdx", "diffHunk": "@@ -0,0 +1,53 @@\n+import loadable from '@loadable/component';\n+export const Mailchimp = loadable(() => import('../../components/mailchimp'));\n+\n+export const ContributorList = loadable.lib(() =>\n+  import('../../../gen-src/contributors.json'),\n+);\n+\n+# Contributor manual\n+\n+## You are the contributor \ud83d\ude80\n+\n+First of all, thank you so much for taking your time to visit Armeria project.\n+Here, everything you do or even your mere presence is a contribution in a broad sense.\n+We strongly believe your contribution will enrich our community and create\n+a virtuous cycle that propels the project into something great.\n+\n+## We're all ears \ud83d\udc42\n+\n+- Join [our Slack workspace](/s/slack) to chat with us.\n+- Ask a question tagged with `armeria` at [StackOverflow](https://stackoverflow.com/questions/tagged/armeria).\n+- File an issue in [the issue tracker](https://github.com/line/armeria/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc)\n+  to report bugs or suggest an idea.\n+  - In case of a security issue, use [LINE's security bug bounty program](https://bugbounty.linecorp.com/en/)\n+    or [contact us](mailto:dl_oss_dev@linecorp.com) directly.\n+\n+## Watch our community in action \ud83c\udfac\n+\n+- Check out [the articles and presentations](/community/articles) by our community.\n+- Sign up for our newsletters to keep up-to-date with new releases and useful tips!\n+  <div style=\"max-width: 320px; margin-top: 0.5rem;\">\n+    <Mailchimp />\n+  </div>\n+\n+## Sending a pull request? \ud83d\ude0d\n+\n+Learn [how to build and modify Armeria](/community/developer-guide) and to send an awesome pull request.", "originalCommit": "1da0904081818bb6b833eb3db1567e06921a3926", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a0002a932fe492bd1fe51abf0b8207b78af68ea1", "url": "https://github.com/line/armeria/commit/a0002a932fe492bd1fe51abf0b8207b78af68ea1", "message": "Merge branch 'master' into new_site", "committedDate": "2020-05-13T07:37:04Z", "type": "commit"}, {"oid": "3ba0bb7686eddc5953561ec93b1489439e1bccec", "url": "https://github.com/line/armeria/commit/3ba0bb7686eddc5953561ec93b1489439e1bccec", "message": "Rephrase the link to the developer guide", "committedDate": "2020-05-13T07:39:27Z", "type": "commit"}, {"oid": "845bdc9d6e0b2e608fbe958cce5f4d130873f2f8", "url": "https://github.com/line/armeria/commit/845bdc9d6e0b2e608fbe958cce5f4d130873f2f8", "message": "Use tabs", "committedDate": "2020-05-13T07:53:58Z", "type": "commit"}, {"oid": "b49e0bf1bcb5a3666b0203096a9d899ed113ff3b", "url": "https://github.com/line/armeria/commit/b49e0bf1bcb5a3666b0203096a9d899ed113ff3b", "message": "Update RetryRule documentation (#19)", "committedDate": "2020-05-13T07:58:44Z", "type": "commit"}]}