{"pr_number": 3278, "pr_title": "[RW-4367] Manual Workspace Migration (Part 1) - toApiWorkspace, researchPurpose", "pr_createdAt": "2020-03-20T13:51:50Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3278", "timeline": [{"oid": "9cef513e12cd188ac5ec153d47c85c93b9405fe8", "url": "https://github.com/all-of-us/workbench/commit/9cef513e12cd188ac5ec153d47c85c93b9405fe8", "message": "fix and migrate research purpose mapper", "committedDate": "2020-03-18T20:38:23Z", "type": "commit"}, {"oid": "7453f9293529c8a10d1b26c712400880d4a72042", "url": "https://github.com/all-of-us/workbench/commit/7453f9293529c8a10d1b26c712400880d4a72042", "message": "WIP", "committedDate": "2020-03-19T16:25:00Z", "type": "commit"}, {"oid": "a251018ad86541c3afdab66976ae251903cb9111", "url": "https://github.com/all-of-us/workbench/commit/a251018ad86541c3afdab66976ae251903cb9111", "message": "tests passing", "committedDate": "2020-03-19T18:32:50Z", "type": "commit"}, {"oid": "1cd350f6d4cf905654641f2dd54b842a9f9298d1", "url": "https://github.com/all-of-us/workbench/commit/1cd350f6d4cf905654641f2dd54b842a9f9298d1", "message": "remove population field", "committedDate": "2020-03-19T21:22:32Z", "type": "commit"}, {"oid": "aad8972df4b87f9cbd1fe7e3a2f0dbeadd27ad2f", "url": "https://github.com/all-of-us/workbench/commit/aad8972df4b87f9cbd1fe7e3a2f0dbeadd27ad2f", "message": "remove population from ui", "committedDate": "2020-03-19T21:51:14Z", "type": "commit"}, {"oid": "94511333513046bcbfde1554d6f0205925898fec", "url": "https://github.com/all-of-us/workbench/commit/94511333513046bcbfde1554d6f0205925898fec", "message": "lint/spotless", "committedDate": "2020-03-19T21:53:38Z", "type": "commit"}, {"oid": "19eb9541ef5b4ce8baede4368f3d8ef1831f37af", "url": "https://github.com/all-of-us/workbench/commit/19eb9541ef5b4ce8baede4368f3d8ef1831f37af", "message": "remove api(db) calls", "committedDate": "2020-03-19T22:23:42Z", "type": "commit"}, {"oid": "df8db2a3dbc7c328c03fa712df34fed25750ac3e", "url": "https://github.com/all-of-us/workbench/commit/df8db2a3dbc7c328c03fa712df34fed25750ac3e", "message": "spotless", "committedDate": "2020-03-19T22:24:30Z", "type": "commit"}, {"oid": "eb9a4beeb9eba7968b206d06eeffed604d3374e0", "url": "https://github.com/all-of-us/workbench/commit/eb9a4beeb9eba7968b206d06eeffed604d3374e0", "message": "fix api tests", "committedDate": "2020-03-20T14:11:15Z", "type": "commit"}, {"oid": "5bf715d09605b5ea41cfa85784824ac83bf0fc4f", "url": "https://github.com/all-of-us/workbench/commit/5bf715d09605b5ea41cfa85784824ac83bf0fc4f", "message": "fix ui", "committedDate": "2020-03-20T14:14:41Z", "type": "commit"}, {"oid": "0ceeca0f6fb2779a874406bdcc7d2cbd61767f58", "url": "https://github.com/all-of-us/workbench/commit/0ceeca0f6fb2779a874406bdcc7d2cbd61767f58", "message": "fix bq", "committedDate": "2020-03-20T14:25:39Z", "type": "commit"}, {"oid": "96e04d36aad0a209bef42e33f2f483653d53b1a6", "url": "https://github.com/all-of-us/workbench/commit/96e04d36aad0a209bef42e33f2f483653d53b1a6", "message": "fix bq", "committedDate": "2020-03-20T14:39:21Z", "type": "commit"}, {"oid": "3f1269c7094e6deea68d6e8dffea9c290035f2a7", "url": "https://github.com/all-of-us/workbench/commit/3f1269c7094e6deea68d6e8dffea9c290035f2a7", "message": "fix some tests", "committedDate": "2020-03-20T15:07:48Z", "type": "commit"}, {"oid": "1a7bec4b216b1795157c05003a0da17732bbe4b0", "url": "https://github.com/all-of-us/workbench/commit/1a7bec4b216b1795157c05003a0da17732bbe4b0", "message": "whack a mole", "committedDate": "2020-03-20T15:48:51Z", "type": "commit"}, {"oid": "f36968ee448ac200b9256a1494995524311badf4", "url": "https://github.com/all-of-us/workbench/commit/f36968ee448ac200b9256a1494995524311badf4", "message": "whack", "committedDate": "2020-03-20T16:07:33Z", "type": "commit"}, {"oid": "002aa8976c725794c45f654e43ac1a5a540b0f68", "url": "https://github.com/all-of-us/workbench/commit/002aa8976c725794c45f654e43ac1a5a540b0f68", "message": "whack", "committedDate": "2020-03-20T16:25:26Z", "type": "commit"}, {"oid": "477e6d23c73f4fac75613bc91b0bce2099fc7109", "url": "https://github.com/all-of-us/workbench/commit/477e6d23c73f4fac75613bc91b0bce2099fc7109", "message": "whack", "committedDate": "2020-03-20T16:35:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyODczOA==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395728738", "bodyText": "I'm slightly confused on what the effect of this will be. It looks like a switch to append instances in a collection instead of replacing a collection. But I'm trying to understand why there would be existing instances at all in a brand-new target object's collection.", "author": "jaycarlton", "createdAt": "2020-03-20T15:51:07Z", "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -1,36 +1,40 @@\n package org.pmiops.workbench.utils;\n \n-import com.google.common.collect.ImmutableSet;\n-import java.util.List;\n-import java.util.Set;\n+import static org.mapstruct.NullValuePropertyMappingStrategy.*;\n+\n+import org.mapstruct.CollectionMappingStrategy;\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n-import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.mapstruct.MappingTarget;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.model.CdrVersion;\n import org.pmiops.workbench.model.ResearchPurpose;\n-import org.pmiops.workbench.model.SpecificPopulationEnum;\n import org.pmiops.workbench.model.Workspace;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n+    collectionMappingStrategy = CollectionMappingStrategy.TARGET_IMMUTABLE,", "originalCommit": "1a7bec4b216b1795157c05003a0da17732bbe4b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyODczMQ==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r398628731", "bodyText": "This is only used when there's a mapping target and a new object is not created. In this case, MapStruct will default to using get() -> clear() ->  addAll(). This doesn't work if the object's getter returns a copy of the collection instead of a reference to the real data, which is what we do for our enum sets in DbWorkspace.", "author": "ericsong", "createdAt": "2020-03-26T14:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyODczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyOTU0NQ==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395729545", "bodyText": "What would be the default behavior here if you didn't specify dbWorkspace as the source?", "author": "jaycarlton", "createdAt": "2020-03-20T15:52:21Z", "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -1,36 +1,40 @@\n package org.pmiops.workbench.utils;\n \n-import com.google.common.collect.ImmutableSet;\n-import java.util.List;\n-import java.util.Set;\n+import static org.mapstruct.NullValuePropertyMappingStrategy.*;\n+\n+import org.mapstruct.CollectionMappingStrategy;\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n-import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.mapstruct.MappingTarget;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.model.CdrVersion;\n import org.pmiops.workbench.model.ResearchPurpose;\n-import org.pmiops.workbench.model.SpecificPopulationEnum;\n import org.pmiops.workbench.model.Workspace;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n+    collectionMappingStrategy = CollectionMappingStrategy.TARGET_IMMUTABLE,\n     uses = {CommonMappers.class})\n public interface WorkspaceMapper {\n \n   @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")\n   @Mapping(target = \"etag\", source = \"dbWorkspace.version\", qualifiedByName = \"cdrVersionToEtag\")\n-  @Mapping(target = \"dataAccessLevel\", source = \"dbWorkspace.dataAccessLevelEnum\")\n   @Mapping(target = \"name\", source = \"dbWorkspace.name\")\n   @Mapping(target = \"id\", source = \"fcWorkspace.name\")\n   @Mapping(target = \"googleBucketName\", source = \"fcWorkspace.bucketName\")\n   @Mapping(target = \"creator\", source = \"fcWorkspace.createdBy\")\n   @Mapping(target = \"cdrVersionId\", source = \"dbWorkspace.cdrVersion\")\n   Workspace toApiWorkspace(DbWorkspace dbWorkspace, FirecloudWorkspace fcWorkspace);\n \n-  // This method is simply merging the research purpose, which covers only a subset of the fields\n-  // in the DbWorkspace source.\n+  @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")", "originalCommit": "1a7bec4b216b1795157c05003a0da17732bbe4b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNjQ1MA==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395816450", "bodyText": "From my understanding, the default is it will look for a getter on dbWorkspace called getResearchPurpose. I don't think this annotation is quite what we want; I think what this will do is look for a getter in dbWorkspace called getDbWorkspace...", "author": "als364", "createdAt": "2020-03-20T18:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyOTU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1ODQwMw==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395858403", "bodyText": "It looks like we have a method to translate a DbWorkspace directly into a ResearchPurpose. Since those types are both unique, I would've expected the inspection machinery to do the needful. NBD.", "author": "jaycarlton", "createdAt": "2020-03-20T19:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyOTU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0MjE4MA==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r398642180", "bodyText": "This is a bit of an odd one since there is no researchPurpose field on DbWorkspace. Rather, it needs to read several fields off of DbWorkspace to construct ResearchPurpose through one of the other mapper functions", "author": "ericsong", "createdAt": "2020-03-26T15:01:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyOTU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0MjQ0Mw==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r398642443", "bodyText": "It's not able to figure that out on its own though so this line is necessary.", "author": "ericsong", "createdAt": "2020-03-26T15:01:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTcyOTU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDI2OQ==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395730269", "bodyText": "(later) Let's think about consolidating some of these names on the DB and/or api side so we don't have so many non-obvious mappings.", "author": "jaycarlton", "createdAt": "2020-03-20T15:53:27Z", "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -1,36 +1,40 @@\n package org.pmiops.workbench.utils;\n \n-import com.google.common.collect.ImmutableSet;\n-import java.util.List;\n-import java.util.Set;\n+import static org.mapstruct.NullValuePropertyMappingStrategy.*;\n+\n+import org.mapstruct.CollectionMappingStrategy;\n import org.mapstruct.Mapper;\n import org.mapstruct.Mapping;\n-import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.mapstruct.MappingTarget;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.model.CdrVersion;\n import org.pmiops.workbench.model.ResearchPurpose;\n-import org.pmiops.workbench.model.SpecificPopulationEnum;\n import org.pmiops.workbench.model.Workspace;\n import org.pmiops.workbench.utils.mappers.CommonMappers;\n \n @Mapper(\n     componentModel = \"spring\",\n+    collectionMappingStrategy = CollectionMappingStrategy.TARGET_IMMUTABLE,\n     uses = {CommonMappers.class})\n public interface WorkspaceMapper {\n \n   @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")\n   @Mapping(target = \"etag\", source = \"dbWorkspace.version\", qualifiedByName = \"cdrVersionToEtag\")\n-  @Mapping(target = \"dataAccessLevel\", source = \"dbWorkspace.dataAccessLevelEnum\")\n   @Mapping(target = \"name\", source = \"dbWorkspace.name\")\n   @Mapping(target = \"id\", source = \"fcWorkspace.name\")\n   @Mapping(target = \"googleBucketName\", source = \"fcWorkspace.bucketName\")\n   @Mapping(target = \"creator\", source = \"fcWorkspace.createdBy\")\n   @Mapping(target = \"cdrVersionId\", source = \"dbWorkspace.cdrVersion\")\n   Workspace toApiWorkspace(DbWorkspace dbWorkspace, FirecloudWorkspace fcWorkspace);\n \n-  // This method is simply merging the research purpose, which covers only a subset of the fields\n-  // in the DbWorkspace source.\n+  @Mapping(target = \"researchPurpose\", source = \"dbWorkspace\")\n+  @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"cdrVersionToEtag\")\n+  @Mapping(target = \"id\", source = \"firecloudName\")", "originalCommit": "1a7bec4b216b1795157c05003a0da17732bbe4b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0Mjk5Mg==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r398642992", "bodyText": "for sure. this is probably my biggest peeve in the API code.", "author": "ericsong", "createdAt": "2020-03-26T15:02:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDI2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDc2OQ==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395730769", "bodyText": "Can you please comment whenever you're ignoring something on why that's expected/correct behavior?", "author": "jaycarlton", "createdAt": "2020-03-20T15:54:09Z", "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -39,11 +43,24 @@\n   @Mapping(target = \"otherDisseminateResearchFindings\", source = \"disseminateResearchOther\")\n   ResearchPurpose workspaceToResearchPurpose(DbWorkspace dbWorkspace);\n \n-  default Set<Short> map(List<SpecificPopulationEnum> value) {\n-    return value.stream()\n-        .map(DbStorageEnums::specificPopulationToStorage)\n-        .collect(ImmutableSet.toImmutableSet());\n-  }\n+  @Mapping(target = \"approved\", ignore = true)", "originalCommit": "1a7bec4b216b1795157c05003a0da17732bbe4b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxOTAzOA==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395819038", "bodyText": "not useful for this, but generally this is used for things we never display on the frontend, such as ids.", "author": "als364", "createdAt": "2020-03-20T18:27:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1OTMzNw==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395859337", "bodyText": "Makes sense. Though I feel like presentation-layer considerations shouldn't really drive the object structure on the backend, since in principle we could have other clients that might be interested. \ud83e\udd37\u200d\u2642", "author": "jaycarlton", "createdAt": "2020-03-20T19:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY0OTQ0Ng==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r398649446", "bodyText": "sure, this tripped me up but I believe its only supposed to be set one time and never again. IDK why that is but all the code and tests I've read seem to point in that direction.", "author": "ericsong", "createdAt": "2020-03-26T15:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1MDUwOQ==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r398650509", "bodyText": "Ideally, we should be letting the mapper run its course and handle business logic in the controller/services but that was looking like a much bigger refactoring effort.", "author": "ericsong", "createdAt": "2020-03-26T15:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDc2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2NDg0OA==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r398764848", "bodyText": "I've been meaning to start a pet peeves document on the Workspace and its handling up and down the stack. This will help with that if I ever get around to it.", "author": "jaycarlton", "createdAt": "2020-03-26T17:39:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDc2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMTY2OA==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395731668", "bodyText": "This is cool. I wonder if you can set it at the top level for the mapper and only override that when you don't want this behavior.", "author": "jaycarlton", "createdAt": "2020-03-20T15:55:32Z", "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -39,11 +43,24 @@\n   @Mapping(target = \"otherDisseminateResearchFindings\", source = \"disseminateResearchOther\")\n   ResearchPurpose workspaceToResearchPurpose(DbWorkspace dbWorkspace);\n \n-  default Set<Short> map(List<SpecificPopulationEnum> value) {\n-    return value.stream()\n-        .map(DbStorageEnums::specificPopulationToStorage)\n-        .collect(ImmutableSet.toImmutableSet());\n-  }\n+  @Mapping(target = \"approved\", ignore = true)\n+  @Mapping(target = \"reviewRequested\", ignore = true)\n+  @Mapping(target = \"timeRequested\", ignore = true)\n+  @Mapping(\n+      target = \"specificPopulationsEnum\",\n+      source = \"populationDetails\",\n+      nullValuePropertyMappingStrategy = SET_TO_DEFAULT)", "originalCommit": "1a7bec4b216b1795157c05003a0da17732bbe4b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1MjAxMA==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r398652010", "bodyText": "I tried but I don't think they have it at the class level :/", "author": "ericsong", "createdAt": "2020-03-26T15:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMTY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2NTQyOA==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r398765428", "bodyText": "bummer.", "author": "jaycarlton", "createdAt": "2020-03-26T17:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMTY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMjMzOA==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395732338", "bodyText": "Maybe name these longToTimestamp and timestampToLong?", "author": "jaycarlton", "createdAt": "2020-03-20T15:56:33Z", "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -2,63 +2,80 @@\n \n import java.sql.Timestamp;\n import java.util.Optional;\n-import org.mapstruct.Mapper;\n+import javax.inject.Provider;\n import org.mapstruct.Named;\n import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.model.BillingStatus;\n import org.pmiops.workbench.model.DataAccessLevel;\n+import org.springframework.stereotype.Service;\n \n-@Mapper(componentModel = \"spring\")\n+@Service\n public class CommonMappers {\n \n-  public static Long timestamp(Timestamp timestamp) {\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  public CommonMappers(Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  public Long timestamp(Timestamp timestamp) {", "originalCommit": "1a7bec4b216b1795157c05003a0da17732bbe4b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMzExOQ==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395733119", "bodyText": "nit: unless we're going to put these billboard comments everywhere, I say we drop them. They're a pain to maintain, even when they're consistent.", "author": "jaycarlton", "createdAt": "2020-03-20T15:57:45Z", "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -2,63 +2,80 @@\n \n import java.sql.Timestamp;\n import java.util.Optional;\n-import org.mapstruct.Mapper;\n+import javax.inject.Provider;\n import org.mapstruct.Named;\n import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.model.BillingStatus;\n import org.pmiops.workbench.model.DataAccessLevel;\n+import org.springframework.stereotype.Service;\n \n-@Mapper(componentModel = \"spring\")\n+@Service\n public class CommonMappers {\n \n-  public static Long timestamp(Timestamp timestamp) {\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  public CommonMappers(Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  public Long timestamp(Timestamp timestamp) {\n     if (timestamp != null) {\n       return timestamp.getTime();\n     }\n \n     return null;\n   }\n \n-  public static Timestamp timestamp(Long timestamp) {\n+  public Timestamp timestamp(Long timestamp) {\n     if (timestamp != null) {\n       return new Timestamp(timestamp);\n     }\n \n     return null;\n   }\n \n-  public static String dbUserToCreatorEmail(DbUser creator) {\n+  public String dbUserToCreatorEmail(DbUser creator) {\n     return Optional.ofNullable(creator).map(DbUser::getUsername).orElse(null);\n   }\n \n-  public static String cdrVersionToId(DbCdrVersion cdrVersion) {\n+  public String cdrVersionToId(DbCdrVersion cdrVersion) {\n     return Optional.ofNullable(cdrVersion)\n         .map(DbCdrVersion::getCdrVersionId)\n         .map(id -> Long.toString(id))\n         .orElse(null);\n   }\n \n   @Named(\"cdrVersionToEtag\")\n-  public static String cdrVersionToEtag(int cdrVersion) {\n+  public String cdrVersionToEtag(int cdrVersion) {\n     return Etags.fromVersion(cdrVersion);\n   }\n \n   @Named(\"etagToCdrVersion\")\n-  public static int etagToCdrVersion(String etag) {\n+  public int etagToCdrVersion(String etag) {\n     return Etags.toVersion(etag);\n   }\n \n   /////////////////////////////////////////////////////////////////////////////\n   //                                  ENUMS                                  //", "originalCommit": "1a7bec4b216b1795157c05003a0da17732bbe4b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMzk3MA==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395733970", "bodyText": "Malkovich Malkovich Malkovich. Malkovich?", "author": "jaycarlton", "createdAt": "2020-03-20T15:58:56Z", "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -2,63 +2,80 @@\n \n import java.sql.Timestamp;\n import java.util.Optional;\n-import org.mapstruct.Mapper;\n+import javax.inject.Provider;\n import org.mapstruct.Named;\n import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.model.BillingStatus;\n import org.pmiops.workbench.model.DataAccessLevel;\n+import org.springframework.stereotype.Service;\n \n-@Mapper(componentModel = \"spring\")\n+@Service\n public class CommonMappers {\n \n-  public static Long timestamp(Timestamp timestamp) {\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  public CommonMappers(Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  public Long timestamp(Timestamp timestamp) {\n     if (timestamp != null) {\n       return timestamp.getTime();\n     }\n \n     return null;\n   }\n \n-  public static Timestamp timestamp(Long timestamp) {\n+  public Timestamp timestamp(Long timestamp) {\n     if (timestamp != null) {\n       return new Timestamp(timestamp);\n     }\n \n     return null;\n   }\n \n-  public static String dbUserToCreatorEmail(DbUser creator) {\n+  public String dbUserToCreatorEmail(DbUser creator) {\n     return Optional.ofNullable(creator).map(DbUser::getUsername).orElse(null);\n   }\n \n-  public static String cdrVersionToId(DbCdrVersion cdrVersion) {\n+  public String cdrVersionToId(DbCdrVersion cdrVersion) {\n     return Optional.ofNullable(cdrVersion)\n         .map(DbCdrVersion::getCdrVersionId)\n         .map(id -> Long.toString(id))\n         .orElse(null);\n   }\n \n   @Named(\"cdrVersionToEtag\")\n-  public static String cdrVersionToEtag(int cdrVersion) {\n+  public String cdrVersionToEtag(int cdrVersion) {\n     return Etags.fromVersion(cdrVersion);\n   }\n \n   @Named(\"etagToCdrVersion\")\n-  public static int etagToCdrVersion(String etag) {\n+  public int etagToCdrVersion(String etag) {\n     return Etags.toVersion(etag);\n   }\n \n   /////////////////////////////////////////////////////////////////////////////\n   //                                  ENUMS                                  //\n   /////////////////////////////////////////////////////////////////////////////\n \n-  public static DataAccessLevel dataAccessLevelFromStorage(Short dataAccessLevel) {\n+  public DataAccessLevel dataAccessLevelFromStorage(Short dataAccessLevel) {\n     return DbStorageEnums.dataAccessLevelFromStorage(dataAccessLevel);\n   }\n \n-  public static Short dataAccessLevelToStorage(DataAccessLevel dataAccessLevel) {\n+  public Short dataAccessLevelToStorage(DataAccessLevel dataAccessLevel) {\n     return DbStorageEnums.dataAccessLevelToStorage(dataAccessLevel);\n   }\n+\n+  public BillingStatus billingStatus(BillingStatus billingStatus) {", "originalCommit": "1a7bec4b216b1795157c05003a0da17732bbe4b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMTUzNQ==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395821535", "bodyText": "Yeah, I agree that this should probably have a verb", "author": "als364", "createdAt": "2020-03-20T18:32:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMzk3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MjE0Ng==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395772146", "bodyText": "nit; use method ref", "author": "jaycarlton", "createdAt": "2020-03-20T17:01:32Z", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -741,7 +741,7 @@ private Boolean copyBlob(String bucketName, Blob b) {\n     List<DbWorkspace> workspaces = workspaceService.findForReview();\n     response.setItems(\n         workspaces.stream()\n-            .map(ws -> manualWorkspaceMapper.toApiWorkspace(ws))\n+            .map(ws -> workspaceMapper.toApiWorkspace(ws))", "originalCommit": "1a7bec4b216b1795157c05003a0da17732bbe4b0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3NTEwNQ==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395775105", "bodyText": "nit: Ideally we could tie this to a constant or something invariant. This is probably my fault though.", "author": "jaycarlton", "createdAt": "2020-03-20T17:06:59Z", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/auditors/WorkspaceAuditorTest.java", "diffHunk": "@@ -117,7 +129,7 @@ public void testFiresCreateWorkspaceEvents() {\n     workspaceAuditor.fireCreateAction(workspace1, WORKSPACE_1_DB_ID);\n     verify(mockActionAuditService).send(eventCollectionCaptor.capture());\n     Collection<ActionAuditEvent> eventsSent = eventCollectionCaptor.getValue();\n-    assertThat(eventsSent).hasSize(20);\n+    assertThat(eventsSent).hasSize(19);", "originalCommit": "477e6d23c73f4fac75613bc91b0bce2099fc7109", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3NjE2OQ==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395776169", "bodyText": "I thought @gjuggler had a scheme where you could extend a parent class and get a config for free. I'm too hungry to go look it up or how to use it. This looks OK to me, but there's some duplication across test classes.", "author": "jaycarlton", "createdAt": "2020-03-20T17:08:51Z", "path": "api/src/test/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminControllerTest.java", "diffHunk": "@@ -66,12 +69,20 @@\n   private static final String WORKSPACE_NAME = \"name\";\n \n   @TestConfiguration\n-  @Import({WorkspaceAdminController.class, WorkspaceMapperImpl.class})\n+  @Import({WorkspaceAdminController.class, WorkspaceMapperImpl.class, CommonMappers.class})\n   @MockBean({\n     CloudStorageService.class,\n     NotebooksService.class,\n   })\n-  static class Configuration {}\n+  static class Configuration {\n+    @Bean\n+    WorkbenchConfig workbenchConfig() {", "originalCommit": "477e6d23c73f4fac75613bc91b0bce2099fc7109", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3NjI3Ng==", "url": "https://github.com/all-of-us/workbench/pull/3278#discussion_r395776276", "bodyText": "\ud83d\ude22", "author": "jaycarlton", "createdAt": "2020-03-20T17:09:02Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ExportWorkspaceData.java", "diffHunk": "@@ -85,7 +85,7 @@\n   @Bean\n   public WorkspaceService workspaceService() {\n     return new WorkspaceServiceImpl(\n-        null, null, null, null, null, null, null, null, null, null, null, null, null, null);\n+        null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);", "originalCommit": "477e6d23c73f4fac75613bc91b0bce2099fc7109", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e6d446c21266c6fe0a736e026626acb5c3e0dad9", "url": "https://github.com/all-of-us/workbench/commit/e6d446c21266c6fe0a736e026626acb5c3e0dad9", "message": "merge master", "committedDate": "2020-03-26T14:56:56Z", "type": "commit"}, {"oid": "6b2784b77a220dac55826b2bab851aeb8f9ce484", "url": "https://github.com/all-of-us/workbench/commit/6b2784b77a220dac55826b2bab851aeb8f9ce484", "message": "code review", "committedDate": "2020-03-26T15:35:48Z", "type": "commit"}, {"oid": "9f7135a3a967d943a00b36550b2999f10faeb672", "url": "https://github.com/all-of-us/workbench/commit/9f7135a3a967d943a00b36550b2999f10faeb672", "message": "spotless", "committedDate": "2020-03-26T15:37:14Z", "type": "commit"}, {"oid": "1e188a3e38985c0fb4395c7fbb19a2a4d8b73e49", "url": "https://github.com/all-of-us/workbench/commit/1e188a3e38985c0fb4395c7fbb19a2a4d8b73e49", "message": "Merge branch 'master' of github.com:all-of-us/workbench into songe/RW-4367", "committedDate": "2020-03-26T15:46:31Z", "type": "commit"}, {"oid": "21648aebc3efabe3caf2d3805382f46f4272cc45", "url": "https://github.com/all-of-us/workbench/commit/21648aebc3efabe3caf2d3805382f46f4272cc45", "message": "fix tests", "committedDate": "2020-03-26T17:00:36Z", "type": "commit"}, {"oid": "b6edfc82d579e75d3df5ddc3084d74044c6785cf", "url": "https://github.com/all-of-us/workbench/commit/b6edfc82d579e75d3df5ddc3084d74044c6785cf", "message": "fix test", "committedDate": "2020-03-26T18:44:57Z", "type": "commit"}, {"oid": "9fdcc71456ddae4f3bb48427426dd7e8c2c02405", "url": "https://github.com/all-of-us/workbench/commit/9fdcc71456ddae4f3bb48427426dd7e8c2c02405", "message": "add update stub. fix test", "committedDate": "2020-03-26T19:56:12Z", "type": "commit"}, {"oid": "b8ef22d29c3e537c9a23c414ff9bdc61b6b3555f", "url": "https://github.com/all-of-us/workbench/commit/b8ef22d29c3e537c9a23c414ff9bdc61b6b3555f", "message": "lint", "committedDate": "2020-03-26T19:56:49Z", "type": "commit"}]}