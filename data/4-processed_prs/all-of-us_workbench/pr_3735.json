{"pr_number": 3735, "pr_title": "[RW-5099][risk=no] Reactify unguarded static content routes", "pr_createdAt": "2020-07-01T14:41:17Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3735", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzMjQzMA==", "url": "https://github.com/all-of-us/workbench/pull/3735#discussion_r448432430", "bodyText": "things will be collapsible, dangit", "author": "als364", "createdAt": "2020-07-01T15:11:19Z", "path": "ui/src/app/app-routing.module.ts", "diffHunk": "@@ -55,19 +52,8 @@ const routes: Routes = [\n     path: 'login',\n     component: SignInComponent,\n     data: {title: 'Sign In'}\n-  }, {\n-    path: 'session-expired',\n-    component: SessionExpiredComponent,\n-    data: {title: 'You have been signed out'}\n-  }, {\n-    path: 'sign-in-again',\n-    component: SignInAgainComponent,\n-    data: {title: 'You have been signed out'}\n-  }, {\n-    path: 'user-disabled',\n-    component: UserDisabledComponent,\n-    data: {title: 'Disabled'}\n-  }, {\n+  },\n+  {", "originalCommit": "4cf62c38b9fa09adc64bcd8f336725f3f457d98e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzMzI1OA==", "url": "https://github.com/all-of-us/workbench/pull/3735#discussion_r448433258", "bodyText": "This was originally consumed in the Angular wrappers for SignInAgain and SessionExpired. Pushing it down here so that 1) it's in one place instead of several and 2) so that I don't have to figure out how to deprecate it before we get rid of the Angular router.", "author": "als364", "createdAt": "2020-07-01T15:12:33Z", "path": "ui/src/app/app-routing.tsx", "diffHunk": "@@ -1,20 +1,32 @@\n import {Component as AComponent} from '@angular/core';\n import {AppRoute, AppRouter} from 'app/components/app-router';\n+import {CookiePolicy} from 'app/pages/cookie-policy';\n+import {SessionExpired} from 'app/pages/session-expired';\n+import {SignInAgain} from 'app/pages/sign-in-again';\n+import {UserDisabled} from 'app/pages/user-disabled';\n+import {SignInService} from 'app/services/sign-in.service';\n import { ReactWrapperBase } from 'app/utils';\n import * as React from 'react';\n-import {CookiePolicyComponent} from './pages/cookie-policy';\n \n-export const AppRoutingComponent: React.FunctionComponent = () => {\n+export const AppRoutingComponent: React.FunctionComponent<{signIn: Function}> = ({signIn}) => {\n   return <AppRouter>\n-    <AppRoute path='/cookie-policy' component={CookiePolicyComponent}/>\n+    <AppRoute path='/cookie-policy' component={CookiePolicy}/>\n+    <AppRoute path='/session-expired' data={{signIn: signIn}} component={SessionExpired}/>\n+    <AppRoute path='/sign-in-again' data={{signIn: signIn}} component={SignInAgain}/>\n+    <AppRoute path='/user-disabled' component={UserDisabled}/>\n   </AppRouter>;\n };\n \n @AComponent({\n   template: '<div #root></div>'\n })\n export class AppRouting extends ReactWrapperBase {\n-  constructor() {\n-    super(AppRoutingComponent, []);\n+  constructor(private signInService: SignInService) {", "originalCommit": "4cf62c38b9fa09adc64bcd8f336725f3f457d98e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzOTAxMA==", "url": "https://github.com/all-of-us/workbench/pull/3735#discussion_r448439010", "bodyText": "the basic idea is that we could do like a thin wrapper around React.Component kind of like:\nexport class ComponentWithPageTitle extends React.Component<{pageTitle, ...props}> {\n    constructor(pageTitle, ...props) {\n        super(props);\n        document.title = buildPageTitleForEnvironment(pageTitle);\n    }\n}\n\nexport class UserDisabled extends ComponentWithPageTitle<{pageTitle}> {\n    constructor(pageTitle) {\n        super(pageTitle);\n    }\n\n    render() {\n        [...]\n    }\n}", "author": "als364", "createdAt": "2020-07-01T15:21:20Z", "path": "ui/src/app/pages/user-disabled.tsx", "diffHunk": "@@ -1,31 +1,27 @@\n-import {Component} from '@angular/core';\n import * as React from 'react';\n \n import {StyledAnchorTag} from 'app/components/buttons';\n import {BoldHeader} from 'app/components/headers';\n import {PublicLayout} from 'app/components/public-layout';\n import colors from 'app/styles/colors';\n-import {\n-  ReactWrapperBase\n-} from 'app/utils';\n+import {buildPageTitleForEnvironment} from 'app/utils/title';\n \n const supportUrl = 'support@researchallofus.org';\n \n-export const UserDisabled: React.FunctionComponent<{}> = () => {\n-  return <PublicLayout>\n-    <BoldHeader>Your account has been disabled</BoldHeader>\n-    <section style={{color: colors.primary, fontSize: '18px', marginTop: '.5rem'}}>\n-      Contact <StyledAnchorTag href={'mailto:' + supportUrl}>{supportUrl}</StyledAnchorTag> for\n-      more information.\n-    </section>\n-  </PublicLayout>;\n-};\n+export class UserDisabled extends React.Component {\n+  // TODO: esteemed reviewer, please yell at me if I don't write a paper about a global wrapper that", "originalCommit": "4cf62c38b9fa09adc64bcd8f336725f3f457d98e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4OTgwNg==", "url": "https://github.com/all-of-us/workbench/pull/3735#discussion_r448589806", "bodyText": "Please take a look at this document about how I could do this better (but not in this PR)", "author": "als364", "createdAt": "2020-07-01T20:07:58Z", "path": "ui/src/app/pages/cookie-policy.tsx", "diffHunk": "@@ -46,7 +47,11 @@ const COOKIE_DELETION_LINK = 'https://www.aboutcookies.org/how-to-delete-cookies\n const GOOGLE_PRIVACY_LINK = 'https://policies.google.com/privacy';\n const ZENDESK_PRIVACY_LINK = 'https://www.zendesk.com/company/customers-partners/privacy-policy/';\n \n-export class CookiePolicyComponent extends React.Component<{}, {}> {\n+export class CookiePolicy extends React.Component<{}, {}> {\n+  componentDidMount() {", "originalCommit": "4cf62c38b9fa09adc64bcd8f336725f3f457d98e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "82e32920b0dce1d3c4abe60c58545551ad133efd", "url": "https://github.com/all-of-us/workbench/commit/82e32920b0dce1d3c4abe60c58545551ad133efd", "message": "user-disabled + title function", "committedDate": "2020-07-01T20:12:02Z", "type": "commit"}, {"oid": "d972b4b117f1ca106bd95b0048058479c9b0a04b", "url": "https://github.com/all-of-us/workbench/commit/d972b4b117f1ca106bd95b0048058479c9b0a04b", "message": "signinservice pushed down to app-routing wrapper", "committedDate": "2020-07-01T20:13:15Z", "type": "commit"}, {"oid": "5721e8ec50a69aab35bba234babdc7e8910b53c1", "url": "https://github.com/all-of-us/workbench/commit/5721e8ec50a69aab35bba234babdc7e8910b53c1", "message": "whoops, fixed SessionExpired", "committedDate": "2020-07-01T20:13:15Z", "type": "commit"}, {"oid": "7222e50efe1ab843b7ac6324e654c0332de9c9cd", "url": "https://github.com/all-of-us/workbench/commit/7222e50efe1ab843b7ac6324e654c0332de9c9cd", "message": "lint", "committedDate": "2020-07-01T20:13:43Z", "type": "commit"}, {"oid": "611a839a5b550ec21b0a806e1551dec70d495159", "url": "https://github.com/all-of-us/workbench/commit/611a839a5b550ec21b0a806e1551dec70d495159", "message": "removed snarky comment", "committedDate": "2020-07-01T20:13:43Z", "type": "commit"}, {"oid": "611a839a5b550ec21b0a806e1551dec70d495159", "url": "https://github.com/all-of-us/workbench/commit/611a839a5b550ec21b0a806e1551dec70d495159", "message": "removed snarky comment", "committedDate": "2020-07-01T20:13:43Z", "type": "forcePushed"}, {"oid": "e00648ffc31cc091fc6a075548c4b0f13a3c5038", "url": "https://github.com/all-of-us/workbench/commit/e00648ffc31cc091fc6a075548c4b0f13a3c5038", "message": "lint post-rebase", "committedDate": "2020-07-01T20:15:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEwMjA2Ng==", "url": "https://github.com/all-of-us/workbench/pull/3735#discussion_r449102066", "bodyText": "nit: avoid concatenating with interpolation:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                title = `[${environment.displayTag}] ` + title;\n          \n          \n            \n                title = `[${environment.displayTag}] title` ;", "author": "petesantos", "createdAt": "2020-07-02T15:42:34Z", "path": "ui/src/app/utils/title.ts", "diffHunk": "@@ -0,0 +1,14 @@\n+import {environment} from 'environments/environment';\n+\n+import {BASE_TITLE} from 'app/utils/strings';\n+\n+export function buildPageTitleForEnvironment(pageTitle?: string) {\n+  let title = BASE_TITLE;\n+  if (environment.shouldShowDisplayTag) {\n+    title = `[${environment.displayTag}] ` + title;", "originalCommit": "e00648ffc31cc091fc6a075548c4b0f13a3c5038", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEwNDE4Mw==", "url": "https://github.com/all-of-us/workbench/pull/3735#discussion_r449104183", "bodyText": "same nit as above", "author": "petesantos", "createdAt": "2020-07-02T15:44:20Z", "path": "ui/src/app/utils/title.ts", "diffHunk": "@@ -0,0 +1,14 @@\n+import {environment} from 'environments/environment';\n+\n+import {BASE_TITLE} from 'app/utils/strings';\n+\n+export function buildPageTitleForEnvironment(pageTitle?: string) {\n+  let title = BASE_TITLE;\n+  if (environment.shouldShowDisplayTag) {\n+    title = `[${environment.displayTag}] ` + title;\n+    if (pageTitle) {\n+      title = `${pageTitle} | ` + title;", "originalCommit": "e00648ffc31cc091fc6a075548c4b0f13a3c5038", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExMTQ2NA==", "url": "https://github.com/all-of-us/workbench/pull/3735#discussion_r449111464", "bodyText": "One possiblity to avoid the let:\n    const title = environment.shouldShowDisplayTag && pageTitle ? `${pageTitle} | ` : ''\n    return environment.shouldShowDisplayTag ? `${title}[${environment.displayTag}] ${BASE_TITLE}` : BASE_TITLE\n\nBut I don't know if that is cleaner to read", "author": "petesantos", "createdAt": "2020-07-02T15:50:10Z", "path": "ui/src/app/utils/title.ts", "diffHunk": "@@ -0,0 +1,14 @@\n+import {environment} from 'environments/environment';\n+\n+import {BASE_TITLE} from 'app/utils/strings';\n+\n+export function buildPageTitleForEnvironment(pageTitle?: string) {\n+  let title = BASE_TITLE;", "originalCommit": "e00648ffc31cc091fc6a075548c4b0f13a3c5038", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE0NzM2Mg==", "url": "https://github.com/all-of-us/workbench/pull/3735#discussion_r449147362", "bodyText": "That's exactly why I did it as a let. I don't think mutables are so evil as to make it better to do something this much harder to parse", "author": "als364", "createdAt": "2020-07-02T16:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExMTQ2NA=="}], "type": "inlineReview"}, {"oid": "135ef47ece41972997d7addb0a620433a78ef8d4", "url": "https://github.com/all-of-us/workbench/commit/135ef47ece41972997d7addb0a620433a78ef8d4", "message": "nitpicking", "committedDate": "2020-07-02T16:52:40Z", "type": "commit"}]}