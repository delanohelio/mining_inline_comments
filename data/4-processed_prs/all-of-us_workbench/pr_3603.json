{"pr_number": 3603, "pr_title": "[risk=no][RW-4954] User Admin - User Information Page", "pr_createdAt": "2020-05-19T20:53:22Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3603", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MzY5Mw==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r427593693", "bodyText": "Passing this through to the Profile object now so that I can display it in the user admin.", "author": "als364", "createdAt": "2020-05-19T20:54:18Z", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java", "diffHunk": "@@ -54,9 +54,6 @@\n   @Mapping(target = \"dataAccessLevelEnum\", ignore = true) // derived property\n   @Mapping(target = \"degreesEnum\", ignore = true) // derived property\n   @Mapping(target = \"emailVerificationStatusEnum\", ignore = true) // derived property\n-  @Mapping(", "originalCommit": "365c8450ffca10eb3137362f1a615a5415d1929b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5NTQwOA==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r427595408", "bodyText": "Renamed enabled to initialValue because I didn't want to have both an enabled and a disabled when they are not opposite states of the same concept.", "author": "als364", "createdAt": "2020-05-19T20:57:31Z", "path": "ui/src/app/components/inputs.tsx", "diffHunk": "@@ -418,10 +418,14 @@ export class DatePicker extends React.Component<\n   }\n }\n \n-export const Toggle = ({name, enabled, onToggle, ...props}) => {\n-  return <label style={{display: 'flex', flexDirection: 'row', paddingBottom: '.5rem'}}>\n-    <Switch onChange={onToggle} checked={enabled} checkedIcon={false}\n-            {...props}\n+export const Toggle = ({name, initialValue, disabled= false, onToggle, style= {}, ...props}) => {", "originalCommit": "365c8450ffca10eb3137362f1a615a5415d1929b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5NjEyMA==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r427596120", "bodyText": "Putting this in state on the presumption that we're going to update it and then pass the updated object back to the server. We may end up wanting to do something reactier like passing back an object representing only the attributes that should be changed.", "author": "als364", "createdAt": "2020-05-19T20:58:51Z", "path": "ui/src/app/pages/admin/admin-user.tsx", "diffHunk": "@@ -1,179 +1,273 @@\n-import {Component} from '@angular/core';\n-import {Column} from 'primereact/column';\n-import {DataTable} from 'primereact/datatable';\n+import * as fp from 'lodash/fp';\n import * as React from 'react';\n \n+import {Component} from '@angular/core';\n+\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+\n import {Button} from 'app/components/buttons';\n-import {Spinner, SpinnerOverlay} from 'app/components/spinners';\n-import {AdminUserBypass} from 'app/pages/admin/admin-user-bypass';\n-import {authDomainApi, profileApi} from 'app/services/swagger-fetch-clients';\n-import {reactStyles, ReactWrapperBase, withUserProfile} from 'app/utils';\n-import {serverConfigStore} from 'app/utils/navigation';\n-import {\n-  Profile,\n-} from 'generated/fetch';\n+import {FadeBox} from 'app/components/containers';\n+import {SmallHeader} from 'app/components/headers';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput, Toggle} from 'app/components/inputs';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {displayDateWithoutHours, reactStyles, ReactWrapperBase, withUserProfile} from 'app/utils';\n+\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import {Profile} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n \n const styles = reactStyles({\n-  colStyle: {\n-    lineHeight: '0.5rem',\n-    fontSize: 12\n-  },\n-  tableStyle: {\n-    fontSize: 12,\n-    minWidth: 1200\n+  semiBold: {\n+    fontWeight: 600\n   }\n });\n \n-const LockoutButton: React.FunctionComponent<{disabled: boolean,\n-  profileDisabled: boolean, onClick: Function}> =\n-  ({disabled, profileDisabled, onClick}) => {\n-    return <Button type='secondaryLight' onClick={onClick} disabled={disabled}>\n-      {disabled ? <Spinner size={25}/> : (profileDisabled ? 'Enable' : 'Disable')}\n-    </Button>;\n-  };\n+const freeCreditLimitOptions = [\n+  {label: '$300', value: 300},\n+  {label: '$350', value: 350},\n+  {label: '$400', value: 400},\n+  {label: '$450', value: 450},\n+  {label: '$500', value: 500},\n+  {label: '$550', value: 550},\n+  {label: '$600', value: 600},\n+  {label: '$650', value: 650},\n+  {label: '$700', value: 700},\n+  {label: '$750', value: 750},\n+  {label: '$800', value: 800}\n+];\n \n-/**\n- * Users with the ACCESS_MODULE_ADMIN permission use this\n- * to manually set (approve/reject) the beta access state of a user, as well as\n- * other access module bypasses.\n- */\n-export const AdminUser = withUserProfile()(class extends React.Component<\n-  {profileState: {\n-    profile: Profile, reload: Function, updateCache: Function\n-  }}, {profiles: Profile[], contentLoaded: boolean, reloadingProfile: Profile}> {\n+const ReadonlyInputWithLabel = ({label, content, inputStyle = {}}) => {\n+  return <FlexColumn style={{marginTop: '1rem'}}>\n+    <label style={styles.semiBold}>{label}</label>\n+    <TextInput\n+        value={content}\n+        disabled\n+        style={{\n+          backgroundColor: colorWithWhiteness(colors.primary, .95),\n+          opacity: '100%',\n+          width: '17.5rem',\n+          ...inputStyle\n+        }}\n+    />\n+  </FlexColumn>;\n+};\n \n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      profiles: [],\n-      contentLoaded: false,\n-      reloadingProfile: null\n-    };\n-  }\n+const DropdownWithLabel = ({label, options, initialValue, onChange, disabled, dropdownStyle = {}}) => {\n+  return <FlexColumn style={{marginTop: '1rem'}}>\n+    <label style={styles.semiBold}>{label}</label>\n+    <Dropdown\n+        style={{\n+          minWidth: '70px',\n+          width: '14rem',\n+          ...dropdownStyle\n+        }}\n+        options={options}\n+        onChange={(e) => onChange(e)}\n+        value={initialValue}\n+        disabled={disabled}\n+    />\n+  </FlexColumn>;\n+};\n \n-  componentDidMount() {\n-    this.loadProfiles();\n-  }\n+const ToggleWithLabelAndToggledText = ({label, initialValue, disabled, onChange}) => {\n+  return <FlexColumn style={{width: '8rem', flex: '0 0 auto'}}>\n+    <label>{label}</label>\n+    <Toggle\n+        name={initialValue ? 'BYPASSED' : ''}\n+        initialValue={initialValue}\n+        disabled={disabled}\n+        onToggle={(checked) => onChange(checked)}\n+    />\n+  </FlexColumn>;\n+};\n \n-  async loadProfiles() {\n-    this.setState({contentLoaded: false});\n-    profileApi().getAllUsers().then(profilesResp => {\n-      this.setState({profiles: this.sortProfileList(profilesResp.profileList),\n-        contentLoaded: true});\n-    });\n-  }\n-\n-  // To avoid reloading the entire list of profiles when we make a change to one user,\n-  //  reload the single user and update the list of profiles\n-  async reloadProfile(profile: Profile) {\n-    const profiles = this.state.profiles;\n-    this.setState({reloadingProfile: profile});\n-    const index = profiles.findIndex(x => x.username === profile.username);\n-    profileApi().getUser(profile.userId).then(updatedProfile => {\n-      profiles[index] = updatedProfile;\n-      this.setState({profiles: profiles, reloadingProfile: null});\n-    });\n-  }\n-\n-  async updateUserDisabledStatus(disable: boolean, profile: Profile) {\n-    this.setState({reloadingProfile: profile});\n-    authDomainApi().updateUserDisabledStatus(\n-      {email: profile.username, disabled: disable}).then(_ => {\n-        this.reloadProfile(profile);\n-      });\n-  }\n+interface Props {\n+  // From withUserProfile\n+  profileState: {\n+    profile: Profile,\n+    reload: Function,\n+    updateCache: Function\n+  };\n+}\n \n-  // We want to sort first by beta access status, then by\n-  // submission time (newest at the top), then alphanumerically.\n-  sortProfileList(profileList: Array<Profile>): Array<Profile> {\n-    return profileList.sort((a, b) => {\n-      // put disabled accounts at the bottom\n-      if (a.disabled && b.disabled) {\n-        return this.timeCompare(a, b);\n-      }\n-      if (a.disabled) {\n-        return 1;\n-      }\n-      if (!!a.betaAccessBypassTime === !!b.betaAccessBypassTime) {\n-        return this.timeCompare(a, b);\n-      }\n-      if (!!b.betaAccessBypassTime) {\n-        return -1;\n-      }\n-      return 1;\n-    });\n-  }\n+interface State {\n+  loading: boolean;\n+  profile: Profile;", "originalCommit": "365c8450ffca10eb3137362f1a615a5415d1929b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5NzE3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r427597175", "bodyText": "I broke the change history a bit by naming the new admin page admin-user instead of admin-single-user or something like that. I can change this if you think it's a problem.", "author": "als364", "createdAt": "2020-05-19T21:00:44Z", "path": "ui/src/app/pages/admin/admin-users.tsx", "diffHunk": "@@ -0,0 +1,187 @@\n+import {Component} from '@angular/core';", "originalCommit": "365c8450ffca10eb3137362f1a615a5415d1929b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NzI5OA==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428147298", "bodyText": "Ehh I wouldn't worry about it. I'm assuming this file has barely changed, if at all... correct me if I'm wrong.", "author": "gjuggler", "createdAt": "2020-05-20T16:29:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5NzE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3NjA3NA==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428276074", "bodyText": "Added an anchor on the user's name to go to the single-user page.", "author": "als364", "createdAt": "2020-05-20T20:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5NzE3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0MTIzMw==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428141233", "bodyText": "For consistency with https://cloud.google.com/apis/design/resource_names and with our workspaces paths, it would be ideal for this path to use plural on the resource type, e.g. 'users/:userId' and for the path above to be 'users'. (It would be nice to maintain backwards-compatibility on the 'user' path, and/or create a redirect route, in case someone has the user admin table page bookmarked there.)\nIt hasn't been codified yet, but we're increasingly moving towards using https://cloud.google.com/apis/design/ as a base \"style guide\" for API design where possible, and only veering from that when necessary.", "author": "gjuggler", "createdAt": "2020-05-20T16:19:49Z", "path": "ui/src/app/app-routing.module.ts", "diffHunk": "@@ -286,30 +287,44 @@ const routes: Routes = [\n           }]\n       },\n       {\n-        path: 'admin/review-workspace',\n-        component: AdminReviewWorkspaceComponent,\n-        data: {title: 'Review Workspaces'}\n-      }, {\n-        path: 'admin/user',\n-        component: AdminUserComponent,\n-        data: {title: 'User Admin Table'}\n-      }, {\n-        path: 'admin/banner',\n-        component: AdminBannerComponent,\n-        data: {title: 'Create Banner'}\n-      }, {\n-        path: 'admin/workspaces',\n-        component: AdminWorkspaceSearchComponent,\n-        data: { title: 'Workspace Admin'},\n-      }, {\n-        path: 'admin/workspaces/:workspaceNamespace',\n-        component: AdminWorkspaceComponent,\n-        data: { title: 'Workspace Admin'}\n-      }, {\n+        path: 'admin',\n+        children: [{\n+          path: 'review-workspace',\n+          component: AdminReviewWorkspaceComponent,\n+          data: {title: 'Review Workspaces'}\n+        },\n+          {\n+            path: 'user',\n+            component: AdminUsersComponent,\n+            data: {title: 'User Admin Table'}\n+          },\n+          {\n+            path: 'user/:userId',", "originalCommit": "07879df9c2dada88b91a7b7c403ff67ce723413e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3NjQxNA==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428276414", "bodyText": "Can do.", "author": "als364", "createdAt": "2020-05-20T20:05:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0MTIzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NTY5NA==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428145694", "bodyText": "I think the name change to initialValue isn't accurate \u2013 as best I can tell, react-switch is a controlled component in React terminology, e.g. it will always render the checked prop value (code ref).\nI'd propose renaming this prop to checked for clarify & consistency with the react-switch prop name.", "author": "gjuggler", "createdAt": "2020-05-20T16:26:50Z", "path": "ui/src/app/components/inputs.tsx", "diffHunk": "@@ -418,10 +418,16 @@ export class DatePicker extends React.Component<\n   }\n }\n \n-export const Toggle = ({name, enabled, onToggle, ...props}) => {\n-  return <label style={{display: 'flex', flexDirection: 'row', paddingBottom: '.5rem'}}>\n-    <Switch onChange={onToggle} checked={enabled} checkedIcon={false}\n-            {...props}\n+export const Toggle = ({name, initialValue, disabled= false, onToggle, style= {}, height, width, ...props}) => {", "originalCommit": "07879df9c2dada88b91a7b7c403ff67ce723413e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3NTQ2OQ==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428275469", "bodyText": "checked is shadowed by Switch, which is a prime-react component, and Javascript is too block-scoped to handle three checkeds, so I have to call it anything other than checked...", "author": "als364", "createdAt": "2020-05-20T20:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NTY5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3NTUxOQ==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428275519", "bodyText": "I can call it value though.", "author": "als364", "createdAt": "2020-05-20T20:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NTY5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4Mzc5OA==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428283798", "bodyText": "Oh or isChecked...", "author": "als364", "createdAt": "2020-05-20T20:19:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NTY5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5MTA0NA==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428291044", "bodyText": "I like value, just be sure to type-annotate it as a boolean for clarity.", "author": "gjuggler", "createdAt": "2020-05-20T20:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NTY5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1NzU5NQ==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428657595", "bodyText": "I'll have to turn it into a proper component for that, but it's probably complicated enough anyways", "author": "als364", "createdAt": "2020-05-21T13:40:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NTY5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0ODI5OA==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428148298", "bodyText": "It's mildly annoying that these hard-coded values are repeated a handful of times... but I won't press too hard on fixing this since (I think?) it's likely that this component will go away sometime in the near future anyway.", "author": "gjuggler", "createdAt": "2020-05-20T16:30:56Z", "path": "ui/src/app/pages/admin/admin-user-bypass.tsx", "diffHunk": "@@ -79,35 +79,50 @@ export class AdminUserBypass extends React.Component<\n         content={<FlexColumn style={{padding: '1rem'}}>\n           {enableBetaAccess && <FlexRow style={{justifyContent: 'space-between'}}>\n             <Toggle name='Beta Access'\n-                    enabled={selectedModules.includes(AccessModule.BETAACCESS)}\n+                    initialValue={selectedModules.includes(AccessModule.BETAACCESS)}\n                     data-test-id='beta-access-toggle'\n                     onToggle={() => {this.setState({selectedModules:\n-                      fp.xor(selectedModules, [AccessModule.BETAACCESS])}); } } />\n+                      fp.xor(selectedModules, [AccessModule.BETAACCESS])}); } }\n+                    height={28}", "originalCommit": "07879df9c2dada88b91a7b7c403ff67ce723413e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3NTg3Mg==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428275872", "bodyText": "I tried defaulting them in the Toggle const and for whatever reason it didn't work.", "author": "als364", "createdAt": "2020-05-20T20:04:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0ODI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4NDcyOQ==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428184729", "bodyText": "Are we 100% clear on what \"Registration date\" is meant to represent? I'm a little surprised that we don't have a field here for \"user creation date\" \u2014\u00a0unless Lou and Karthik are expecting that's what will show up in this input box?", "author": "gjuggler", "createdAt": "2020-05-20T17:27:25Z", "path": "ui/src/app/pages/admin/admin-user.tsx", "diffHunk": "@@ -1,179 +1,298 @@\n-import {Component} from '@angular/core';\n-import {Column} from 'primereact/column';\n-import {DataTable} from 'primereact/datatable';\n+import * as fp from 'lodash/fp';\n import * as React from 'react';\n \n+import {Component} from '@angular/core';\n+\n import {Button} from 'app/components/buttons';\n-import {Spinner, SpinnerOverlay} from 'app/components/spinners';\n-import {AdminUserBypass} from 'app/pages/admin/admin-user-bypass';\n-import {authDomainApi, profileApi} from 'app/services/swagger-fetch-clients';\n-import {reactStyles, ReactWrapperBase, withUserProfile} from 'app/utils';\n-import {serverConfigStore} from 'app/utils/navigation';\n-import {\n-  Profile,\n-} from 'generated/fetch';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SmallHeader} from 'app/components/headers';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput, Toggle} from 'app/components/inputs';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {displayDateWithoutHours, reactStyles, ReactWrapperBase, withUserProfile} from 'app/utils';\n+\n+import {navigate} from 'app/utils/navigation';\n+import {Profile} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n \n const styles = reactStyles({\n-  colStyle: {\n-    lineHeight: '0.5rem',\n-    fontSize: 12\n-  },\n-  tableStyle: {\n-    fontSize: 12,\n-    minWidth: 1200\n+  semiBold: {\n+    fontWeight: 600\n   }\n });\n \n-const LockoutButton: React.FunctionComponent<{disabled: boolean,\n-  profileDisabled: boolean, onClick: Function}> =\n-  ({disabled, profileDisabled, onClick}) => {\n-    return <Button type='secondaryLight' onClick={onClick} disabled={disabled}>\n-      {disabled ? <Spinner size={25}/> : (profileDisabled ? 'Enable' : 'Disable')}\n-    </Button>;\n-  };\n-\n-/**\n- * Users with the ACCESS_MODULE_ADMIN permission use this\n- * to manually set (approve/reject) the beta access state of a user, as well as\n- * other access module bypasses.\n- */\n-export const AdminUser = withUserProfile()(class extends React.Component<\n-  {profileState: {\n-    profile: Profile, reload: Function, updateCache: Function\n-  }}, {profiles: Profile[], contentLoaded: boolean, reloadingProfile: Profile}> {\n-\n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      profiles: [],\n-      contentLoaded: false,\n-      reloadingProfile: null\n-    };\n-  }\n+const freeCreditLimitOptions = [\n+  {label: '$300', value: 300},\n+  {label: '$350', value: 350},\n+  {label: '$400', value: 400},\n+  {label: '$450', value: 450},\n+  {label: '$500', value: 500},\n+  {label: '$550', value: 550},\n+  {label: '$600', value: 600},\n+  {label: '$650', value: 650},\n+  {label: '$700', value: 700},\n+  {label: '$750', value: 750},\n+  {label: '$800', value: 800}\n+];\n \n-  componentDidMount() {\n-    this.loadProfiles();\n-  }\n+const ReadonlyInputWithLabel = ({label, content, dataTestId, inputStyle = {}}) => {\n+  return <FlexColumn data-test-id={dataTestId} style={{marginTop: '1rem'}}>\n+    <label style={styles.semiBold}>{label}</label>\n+    <TextInput\n+        value={content}\n+        disabled\n+        style={{\n+          backgroundColor: colorWithWhiteness(colors.primary, .95),\n+          opacity: '100%',\n+          width: '17.5rem',\n+          ...inputStyle\n+        }}\n+    />\n+  </FlexColumn>;\n+};\n \n-  async loadProfiles() {\n-    this.setState({contentLoaded: false});\n-    profileApi().getAllUsers().then(profilesResp => {\n-      this.setState({profiles: this.sortProfileList(profilesResp.profileList),\n-        contentLoaded: true});\n-    });\n-  }\n+const DropdownWithLabel = ({label, options, initialValue, onChange, disabled, dataTestId, dropdownStyle = {}}) => {\n+  return <FlexColumn data-test-id={dataTestId} style={{marginTop: '1rem'}}>\n+    <label style={styles.semiBold}>{label}</label>\n+    <Dropdown\n+        style={{\n+          minWidth: '70px',\n+          width: '14rem',\n+          ...dropdownStyle\n+        }}\n+        options={options}\n+        onChange={(e) => onChange(e)}\n+        value={initialValue}\n+        disabled={disabled}\n+    />\n+  </FlexColumn>;\n+};\n \n-  // To avoid reloading the entire list of profiles when we make a change to one user,\n-  //  reload the single user and update the list of profiles\n-  async reloadProfile(profile: Profile) {\n-    const profiles = this.state.profiles;\n-    this.setState({reloadingProfile: profile});\n-    const index = profiles.findIndex(x => x.username === profile.username);\n-    profileApi().getUser(profile.userId).then(updatedProfile => {\n-      profiles[index] = updatedProfile;\n-      this.setState({profiles: profiles, reloadingProfile: null});\n-    });\n-  }\n+const ToggleWithLabelAndToggledText = ({label, initialValue, disabled, onChange, dataTestId}) => {\n+  return <FlexColumn data-test-id={dataTestId} style={{width: '8rem', flex: '0 0 auto'}}>\n+    <label>{label}</label>\n+    <Toggle\n+        name={initialValue ? 'BYPASSED' : ''}\n+        initialValue={initialValue}\n+        disabled={disabled}\n+        onToggle={(checked) => onChange(checked)}\n+        height={18}\n+        width={33}\n+    />\n+  </FlexColumn>;\n+};\n \n-  async updateUserDisabledStatus(disable: boolean, profile: Profile) {\n-    this.setState({reloadingProfile: profile});\n-    authDomainApi().updateUserDisabledStatus(\n-      {email: profile.username, disabled: disable}).then(_ => {\n-        this.reloadProfile(profile);\n-      });\n-  }\n+interface Props {\n+  // From withUserProfile\n+  profileState: {\n+    profile: Profile,\n+    reload: Function,\n+    updateCache: Function\n+  };\n+}\n \n-  // We want to sort first by beta access status, then by\n-  // submission time (newest at the top), then alphanumerically.\n-  sortProfileList(profileList: Array<Profile>): Array<Profile> {\n-    return profileList.sort((a, b) => {\n-      // put disabled accounts at the bottom\n-      if (a.disabled && b.disabled) {\n-        return this.timeCompare(a, b);\n-      }\n-      if (a.disabled) {\n-        return 1;\n-      }\n-      if (!!a.betaAccessBypassTime === !!b.betaAccessBypassTime) {\n-        return this.timeCompare(a, b);\n-      }\n-      if (!!b.betaAccessBypassTime) {\n-        return -1;\n-      }\n-      return 1;\n-    });\n-  }\n+interface State {\n+  loading: boolean;\n+  profile: Profile;\n+  saveDisabled: boolean;\n+  verifiedInstitutionOptions: Array<{label: string, value: {displayName: string, shortName: string}}>;\n+}\n \n-  private timeCompare(a: Profile, b: Profile): number {\n-    if (a.betaAccessRequestTime === b.betaAccessRequestTime) {\n-      return this.nameCompare(a, b);\n-    } else if (a.betaAccessRequestTime === null) {\n-      return 1;\n-    } else if (b.betaAccessRequestTime === null) {\n-      return -1;\n-    }\n-    return b.betaAccessRequestTime - a.betaAccessRequestTime;\n-  }\n \n-  private nameCompare(a: Profile, b: Profile): number {\n-    if (a.familyName === null) {\n-      return 1;\n-    }\n-    if (a.familyName.localeCompare(b.familyName) === 0) {\n-      if (a.givenName === null) {\n-        return 1;\n-      }\n-      return a.givenName.localeCompare(b.givenName);\n-    }\n-    return a.familyName.localeCompare(b.familyName);\n-  }\n+const AdminUser = withUserProfile()(class extends React.Component<Props, State> {\n+  constructor(props) {\n+    super(props);\n \n-  convertDate(date): string {\n-    return new Date(date).toString().split(' ').slice(1, 5).join(' ');\n+    this.state = {\n+      loading: false,\n+      profile: this.props.profileState.profile,\n+      saveDisabled: true,\n+      verifiedInstitutionOptions: []\n+    };\n   }\n \n-  convertProfilesToFields(profiles: Profile[]) {\n-    return profiles.map(p => ({...p, name: p.familyName + ', ' + p.givenName,\n-      betaAccessRequestTime: this.convertDate(p.betaAccessRequestTime),\n-      bypass: <AdminUserBypass profile={p}/>, disabled: p.disabled.toString(),\n-      userLockout: <LockoutButton disabled={this.state.reloadingProfile === p}\n-        profileDisabled={p.disabled}\n-        onClick={() => this.updateUserDisabledStatus(!p.disabled, p)}/>}));\n+  async componentDidMount() {\n+    const institutionsResponse = await institutionApi().getInstitutions();\n+    const options = fp.map(\n+      institution => {\n+        return {\n+          'label': institution.displayName ? institution.displayName : institution.shortName,\n+          'value': {displayName: institution.displayName, shortName: institution.shortName}\n+        };\n+      },\n+      institutionsResponse.institutions\n+    );\n+    this.setState({verifiedInstitutionOptions: options});\n   }\n \n   render() {\n-    const {contentLoaded, profiles} = this.state;\n-    const {enableBetaAccess} = serverConfigStore.getValue();\n-    return <div style={{position: 'relative'}}>\n-      <h2>User Admin Table</h2>\n-      {contentLoaded ?\n-        <DataTable value={this.convertProfilesToFields(profiles)} style={styles.tableStyle}>\n-          <Column field='disabled' header='Disabled' bodyStyle={{...styles.colStyle, width: '7%'}}\n-                  headerStyle={{width: '7%'}}/>\n-          <Column field='name' header='Name' bodyStyle={{...styles.colStyle, width: '15%'}}\n-                  headerStyle={{width: '15%'}} sortable={true}/>\n-          <Column field='username' header='User Name' bodyStyle={{...styles.colStyle, width: '20%'}}\n-                  headerStyle={{width: '20%'}} sortable={true}/>\n-          <Column field='contactEmail' header='Contact Email' sortable={true}\n-                  bodyStyle={{...styles.colStyle, width: '19%'}} headerStyle={{width: '19%'}}/>\n-          {enableBetaAccess && <Column field='betaAccessRequestTime' header='Beta Access Time Requested' sortable={true}\n-                  bodyStyle={{...styles.colStyle, width: '15%'}} headerStyle={{width: '15%'}}/>}\n-          <Column field='userLockout' header='User Lockout'\n-                  bodyStyle={{...styles.colStyle, width: '10%'}} headerStyle={{width: '10%'}}/>\n-          <Column field='bypass' header='Bypass'\n-                  bodyStyle={{...styles.colStyle, width: '10%'}} headerStyle={{width: '10%'}}/>\n-        </DataTable> :\n-        <div>\n-          Loading user profiles...\n-          <SpinnerOverlay\n-            overrideStylesOverlay={{alignItems: 'flex-start', marginTop: '2rem'}}/>\n-        </div>}\n-    </div>;\n+    const {profile} = this.state;\n+    return <FadeBox\n+        style={{\n+          margin: 'auto',\n+          paddingTop: '1rem',\n+          width: '96.25%',\n+          minWidth: '1232px',\n+          color: colors.primary\n+        }}\n+    >\n+      <FlexColumn>\n+        <FlexRow style={{alignItems: 'center'}}>\n+          <a onClick={() => navigate(['admin', 'user'])}>\n+            <ClrIcon\n+              shape='arrow'\n+              size={37}\n+              style={{\n+                backgroundColor: colorWithWhiteness(colors.accent, .85),\n+                color: colors.accent,\n+                borderRadius: '18px',\n+                transform: 'rotate(270deg)'\n+              }}\n+            />\n+          </a>\n+          <SmallHeader style={{marginTop: 0, marginLeft: '0.5rem'}}>\n+            User Profile Information\n+          </SmallHeader>\n+        </FlexRow>\n+        <FlexRow style={{width: '100%', marginTop: '1rem', alignItems: 'center'}}>\n+          <FlexRow\n+              style={{\n+                alignItems: 'center',\n+                backgroundColor: colorWithWhiteness(colors.primary, .85),\n+                borderRadius: '5px',\n+                padding: '0 .5rem',\n+                height: '1.625rem',\n+                width: '17.5rem'\n+              }}\n+          >\n+            <label style={{fontWeight: 600}}>\n+              Account access\n+            </label>\n+            <Toggle\n+                name={profile.disabled ? 'Disabled' : 'Enabled'}\n+                initialValue={!profile.disabled}\n+                disabled={true}\n+                data-test-id='account-access-toggle'\n+                onToggle={() => this.setState({saveDisabled: false})}\n+                style={{marginLeft: 'auto', paddingBottom: '0px'}}\n+                height={18}\n+                width={33}\n+            />\n+          </FlexRow>\n+          <Button type='link' style={{marginLeft: 'auto'}}>\n+            Cancel\n+          </Button>\n+          <Button type='primary' disabled={this.state.saveDisabled}>\n+            Save\n+          </Button>\n+        </FlexRow>\n+        <FlexRow>\n+          <FlexColumn style={{width: '33%', marginRight: '1rem'}}>\n+            <ReadonlyInputWithLabel\n+                label={'User name'}\n+                content={profile.givenName + ' ' + profile.familyName}\n+                dataTestId={'userFullName'}\n+            />\n+            <ReadonlyInputWithLabel\n+                label={'Registration state'}\n+                content={fp.capitalize(profile.dataAccessLevel.toString())}\n+                dataTestId={'registrationState'}\n+            />\n+            <ReadonlyInputWithLabel\n+                label={'Registration date'}\n+                content={profile.firstRegistrationCompletionTime ? displayDateWithoutHours(profile.firstRegistrationCompletionTime) : ''}", "originalCommit": "07879df9c2dada88b91a7b7c403ff67ce723413e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1NDg0Mw==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428654843", "bodyText": "I talked with Karthik and Joel about this and this is the field that I should be using; it's meant to differentiate between 'never registered' and 'disabled and therefore deregistered'. I don't think we actually capture 'user creation date'. There's a 'first time logged in' date but I'm not sure offhand whether that is the same as 'finished creating my user'.", "author": "als364", "createdAt": "2020-05-21T13:35:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4NDcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwOTkyNw==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428709927", "bodyText": "OK \u2013\u00a0makes sense. (For posterity / reference, I do think we track user creation time here.)", "author": "gjuggler", "createdAt": "2020-05-21T15:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4NDcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcyMDYxOA==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428720618", "bodyText": "Thanks for the find.", "author": "als364", "createdAt": "2020-05-21T15:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4NDcyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4NTAwMw==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428185003", "bodyText": "Do we want to keep beta access request time, even though beta access module isn't expected to be enabled in prod in the long term?", "author": "gjuggler", "createdAt": "2020-05-20T17:27:51Z", "path": "ui/src/app/pages/admin/admin-user.tsx", "diffHunk": "@@ -1,179 +1,298 @@\n-import {Component} from '@angular/core';\n-import {Column} from 'primereact/column';\n-import {DataTable} from 'primereact/datatable';\n+import * as fp from 'lodash/fp';\n import * as React from 'react';\n \n+import {Component} from '@angular/core';\n+\n import {Button} from 'app/components/buttons';\n-import {Spinner, SpinnerOverlay} from 'app/components/spinners';\n-import {AdminUserBypass} from 'app/pages/admin/admin-user-bypass';\n-import {authDomainApi, profileApi} from 'app/services/swagger-fetch-clients';\n-import {reactStyles, ReactWrapperBase, withUserProfile} from 'app/utils';\n-import {serverConfigStore} from 'app/utils/navigation';\n-import {\n-  Profile,\n-} from 'generated/fetch';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SmallHeader} from 'app/components/headers';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput, Toggle} from 'app/components/inputs';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {displayDateWithoutHours, reactStyles, ReactWrapperBase, withUserProfile} from 'app/utils';\n+\n+import {navigate} from 'app/utils/navigation';\n+import {Profile} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n \n const styles = reactStyles({\n-  colStyle: {\n-    lineHeight: '0.5rem',\n-    fontSize: 12\n-  },\n-  tableStyle: {\n-    fontSize: 12,\n-    minWidth: 1200\n+  semiBold: {\n+    fontWeight: 600\n   }\n });\n \n-const LockoutButton: React.FunctionComponent<{disabled: boolean,\n-  profileDisabled: boolean, onClick: Function}> =\n-  ({disabled, profileDisabled, onClick}) => {\n-    return <Button type='secondaryLight' onClick={onClick} disabled={disabled}>\n-      {disabled ? <Spinner size={25}/> : (profileDisabled ? 'Enable' : 'Disable')}\n-    </Button>;\n-  };\n-\n-/**\n- * Users with the ACCESS_MODULE_ADMIN permission use this\n- * to manually set (approve/reject) the beta access state of a user, as well as\n- * other access module bypasses.\n- */\n-export const AdminUser = withUserProfile()(class extends React.Component<\n-  {profileState: {\n-    profile: Profile, reload: Function, updateCache: Function\n-  }}, {profiles: Profile[], contentLoaded: boolean, reloadingProfile: Profile}> {\n-\n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      profiles: [],\n-      contentLoaded: false,\n-      reloadingProfile: null\n-    };\n-  }\n+const freeCreditLimitOptions = [\n+  {label: '$300', value: 300},\n+  {label: '$350', value: 350},\n+  {label: '$400', value: 400},\n+  {label: '$450', value: 450},\n+  {label: '$500', value: 500},\n+  {label: '$550', value: 550},\n+  {label: '$600', value: 600},\n+  {label: '$650', value: 650},\n+  {label: '$700', value: 700},\n+  {label: '$750', value: 750},\n+  {label: '$800', value: 800}\n+];\n \n-  componentDidMount() {\n-    this.loadProfiles();\n-  }\n+const ReadonlyInputWithLabel = ({label, content, dataTestId, inputStyle = {}}) => {\n+  return <FlexColumn data-test-id={dataTestId} style={{marginTop: '1rem'}}>\n+    <label style={styles.semiBold}>{label}</label>\n+    <TextInput\n+        value={content}\n+        disabled\n+        style={{\n+          backgroundColor: colorWithWhiteness(colors.primary, .95),\n+          opacity: '100%',\n+          width: '17.5rem',\n+          ...inputStyle\n+        }}\n+    />\n+  </FlexColumn>;\n+};\n \n-  async loadProfiles() {\n-    this.setState({contentLoaded: false});\n-    profileApi().getAllUsers().then(profilesResp => {\n-      this.setState({profiles: this.sortProfileList(profilesResp.profileList),\n-        contentLoaded: true});\n-    });\n-  }\n+const DropdownWithLabel = ({label, options, initialValue, onChange, disabled, dataTestId, dropdownStyle = {}}) => {\n+  return <FlexColumn data-test-id={dataTestId} style={{marginTop: '1rem'}}>\n+    <label style={styles.semiBold}>{label}</label>\n+    <Dropdown\n+        style={{\n+          minWidth: '70px',\n+          width: '14rem',\n+          ...dropdownStyle\n+        }}\n+        options={options}\n+        onChange={(e) => onChange(e)}\n+        value={initialValue}\n+        disabled={disabled}\n+    />\n+  </FlexColumn>;\n+};\n \n-  // To avoid reloading the entire list of profiles when we make a change to one user,\n-  //  reload the single user and update the list of profiles\n-  async reloadProfile(profile: Profile) {\n-    const profiles = this.state.profiles;\n-    this.setState({reloadingProfile: profile});\n-    const index = profiles.findIndex(x => x.username === profile.username);\n-    profileApi().getUser(profile.userId).then(updatedProfile => {\n-      profiles[index] = updatedProfile;\n-      this.setState({profiles: profiles, reloadingProfile: null});\n-    });\n-  }\n+const ToggleWithLabelAndToggledText = ({label, initialValue, disabled, onChange, dataTestId}) => {\n+  return <FlexColumn data-test-id={dataTestId} style={{width: '8rem', flex: '0 0 auto'}}>\n+    <label>{label}</label>\n+    <Toggle\n+        name={initialValue ? 'BYPASSED' : ''}\n+        initialValue={initialValue}\n+        disabled={disabled}\n+        onToggle={(checked) => onChange(checked)}\n+        height={18}\n+        width={33}\n+    />\n+  </FlexColumn>;\n+};\n \n-  async updateUserDisabledStatus(disable: boolean, profile: Profile) {\n-    this.setState({reloadingProfile: profile});\n-    authDomainApi().updateUserDisabledStatus(\n-      {email: profile.username, disabled: disable}).then(_ => {\n-        this.reloadProfile(profile);\n-      });\n-  }\n+interface Props {\n+  // From withUserProfile\n+  profileState: {\n+    profile: Profile,\n+    reload: Function,\n+    updateCache: Function\n+  };\n+}\n \n-  // We want to sort first by beta access status, then by\n-  // submission time (newest at the top), then alphanumerically.\n-  sortProfileList(profileList: Array<Profile>): Array<Profile> {\n-    return profileList.sort((a, b) => {\n-      // put disabled accounts at the bottom\n-      if (a.disabled && b.disabled) {\n-        return this.timeCompare(a, b);\n-      }\n-      if (a.disabled) {\n-        return 1;\n-      }\n-      if (!!a.betaAccessBypassTime === !!b.betaAccessBypassTime) {\n-        return this.timeCompare(a, b);\n-      }\n-      if (!!b.betaAccessBypassTime) {\n-        return -1;\n-      }\n-      return 1;\n-    });\n-  }\n+interface State {\n+  loading: boolean;\n+  profile: Profile;\n+  saveDisabled: boolean;\n+  verifiedInstitutionOptions: Array<{label: string, value: {displayName: string, shortName: string}}>;\n+}\n \n-  private timeCompare(a: Profile, b: Profile): number {\n-    if (a.betaAccessRequestTime === b.betaAccessRequestTime) {\n-      return this.nameCompare(a, b);\n-    } else if (a.betaAccessRequestTime === null) {\n-      return 1;\n-    } else if (b.betaAccessRequestTime === null) {\n-      return -1;\n-    }\n-    return b.betaAccessRequestTime - a.betaAccessRequestTime;\n-  }\n \n-  private nameCompare(a: Profile, b: Profile): number {\n-    if (a.familyName === null) {\n-      return 1;\n-    }\n-    if (a.familyName.localeCompare(b.familyName) === 0) {\n-      if (a.givenName === null) {\n-        return 1;\n-      }\n-      return a.givenName.localeCompare(b.givenName);\n-    }\n-    return a.familyName.localeCompare(b.familyName);\n-  }\n+const AdminUser = withUserProfile()(class extends React.Component<Props, State> {\n+  constructor(props) {\n+    super(props);\n \n-  convertDate(date): string {\n-    return new Date(date).toString().split(' ').slice(1, 5).join(' ');\n+    this.state = {\n+      loading: false,\n+      profile: this.props.profileState.profile,\n+      saveDisabled: true,\n+      verifiedInstitutionOptions: []\n+    };\n   }\n \n-  convertProfilesToFields(profiles: Profile[]) {\n-    return profiles.map(p => ({...p, name: p.familyName + ', ' + p.givenName,\n-      betaAccessRequestTime: this.convertDate(p.betaAccessRequestTime),\n-      bypass: <AdminUserBypass profile={p}/>, disabled: p.disabled.toString(),\n-      userLockout: <LockoutButton disabled={this.state.reloadingProfile === p}\n-        profileDisabled={p.disabled}\n-        onClick={() => this.updateUserDisabledStatus(!p.disabled, p)}/>}));\n+  async componentDidMount() {\n+    const institutionsResponse = await institutionApi().getInstitutions();\n+    const options = fp.map(\n+      institution => {\n+        return {\n+          'label': institution.displayName ? institution.displayName : institution.shortName,\n+          'value': {displayName: institution.displayName, shortName: institution.shortName}\n+        };\n+      },\n+      institutionsResponse.institutions\n+    );\n+    this.setState({verifiedInstitutionOptions: options});\n   }\n \n   render() {\n-    const {contentLoaded, profiles} = this.state;\n-    const {enableBetaAccess} = serverConfigStore.getValue();\n-    return <div style={{position: 'relative'}}>\n-      <h2>User Admin Table</h2>\n-      {contentLoaded ?\n-        <DataTable value={this.convertProfilesToFields(profiles)} style={styles.tableStyle}>\n-          <Column field='disabled' header='Disabled' bodyStyle={{...styles.colStyle, width: '7%'}}\n-                  headerStyle={{width: '7%'}}/>\n-          <Column field='name' header='Name' bodyStyle={{...styles.colStyle, width: '15%'}}\n-                  headerStyle={{width: '15%'}} sortable={true}/>\n-          <Column field='username' header='User Name' bodyStyle={{...styles.colStyle, width: '20%'}}\n-                  headerStyle={{width: '20%'}} sortable={true}/>\n-          <Column field='contactEmail' header='Contact Email' sortable={true}\n-                  bodyStyle={{...styles.colStyle, width: '19%'}} headerStyle={{width: '19%'}}/>\n-          {enableBetaAccess && <Column field='betaAccessRequestTime' header='Beta Access Time Requested' sortable={true}\n-                  bodyStyle={{...styles.colStyle, width: '15%'}} headerStyle={{width: '15%'}}/>}\n-          <Column field='userLockout' header='User Lockout'\n-                  bodyStyle={{...styles.colStyle, width: '10%'}} headerStyle={{width: '10%'}}/>\n-          <Column field='bypass' header='Bypass'\n-                  bodyStyle={{...styles.colStyle, width: '10%'}} headerStyle={{width: '10%'}}/>\n-        </DataTable> :\n-        <div>\n-          Loading user profiles...\n-          <SpinnerOverlay\n-            overrideStylesOverlay={{alignItems: 'flex-start', marginTop: '2rem'}}/>\n-        </div>}\n-    </div>;\n+    const {profile} = this.state;\n+    return <FadeBox\n+        style={{\n+          margin: 'auto',\n+          paddingTop: '1rem',\n+          width: '96.25%',\n+          minWidth: '1232px',\n+          color: colors.primary\n+        }}\n+    >\n+      <FlexColumn>\n+        <FlexRow style={{alignItems: 'center'}}>\n+          <a onClick={() => navigate(['admin', 'user'])}>\n+            <ClrIcon\n+              shape='arrow'\n+              size={37}\n+              style={{\n+                backgroundColor: colorWithWhiteness(colors.accent, .85),\n+                color: colors.accent,\n+                borderRadius: '18px',\n+                transform: 'rotate(270deg)'\n+              }}\n+            />\n+          </a>\n+          <SmallHeader style={{marginTop: 0, marginLeft: '0.5rem'}}>\n+            User Profile Information\n+          </SmallHeader>\n+        </FlexRow>\n+        <FlexRow style={{width: '100%', marginTop: '1rem', alignItems: 'center'}}>\n+          <FlexRow\n+              style={{\n+                alignItems: 'center',\n+                backgroundColor: colorWithWhiteness(colors.primary, .85),\n+                borderRadius: '5px',\n+                padding: '0 .5rem',\n+                height: '1.625rem',\n+                width: '17.5rem'\n+              }}\n+          >\n+            <label style={{fontWeight: 600}}>\n+              Account access\n+            </label>\n+            <Toggle\n+                name={profile.disabled ? 'Disabled' : 'Enabled'}\n+                initialValue={!profile.disabled}\n+                disabled={true}\n+                data-test-id='account-access-toggle'\n+                onToggle={() => this.setState({saveDisabled: false})}\n+                style={{marginLeft: 'auto', paddingBottom: '0px'}}\n+                height={18}\n+                width={33}\n+            />\n+          </FlexRow>\n+          <Button type='link' style={{marginLeft: 'auto'}}>\n+            Cancel\n+          </Button>\n+          <Button type='primary' disabled={this.state.saveDisabled}>\n+            Save\n+          </Button>\n+        </FlexRow>\n+        <FlexRow>\n+          <FlexColumn style={{width: '33%', marginRight: '1rem'}}>\n+            <ReadonlyInputWithLabel\n+                label={'User name'}\n+                content={profile.givenName + ' ' + profile.familyName}\n+                dataTestId={'userFullName'}\n+            />\n+            <ReadonlyInputWithLabel\n+                label={'Registration state'}\n+                content={fp.capitalize(profile.dataAccessLevel.toString())}\n+                dataTestId={'registrationState'}\n+            />\n+            <ReadonlyInputWithLabel\n+                label={'Registration date'}\n+                content={profile.firstRegistrationCompletionTime ? displayDateWithoutHours(profile.firstRegistrationCompletionTime) : ''}\n+                dataTestId={'firstRegistrationCompletionTime'}\n+            />\n+            <ReadonlyInputWithLabel\n+                label={'Username'}\n+                content={profile.username}\n+                dataTestId={'username'}\n+            />\n+            <ReadonlyInputWithLabel\n+                label={'Contact email'}\n+                content={profile.contactEmail}\n+                dataTestId={'contactEmail'}\n+            />\n+            <ReadonlyInputWithLabel\n+                label={'Free credits used'}\n+                content={profile.freeTierUsage}\n+                inputStyle={{width: '6.5rem'}}\n+                dataTestId={'freeTierUsage'}\n+            />\n+            <ReadonlyInputWithLabel\n+                label={'Beta access time requested'}", "originalCommit": "07879df9c2dada88b91a7b7c403ff67ce723413e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1MjQ0NQ==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428652445", "bodyText": "It's enabled in prod for the moment, so admins need to be able to bypass it.", "author": "als364", "createdAt": "2020-05-21T13:31:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4NTAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcxMDMwOQ==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428710309", "bodyText": "I don't think it is enabled (code ref)", "author": "gjuggler", "createdAt": "2020-05-21T15:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4NTAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcyMTg3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428721875", "bodyText": "Ooh, I'll ask Karthik then", "author": "als364", "createdAt": "2020-05-21T15:19:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4NTAwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4NjA3Mw==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428186073", "bodyText": "This is a convenient / simple trick, but it wont' be correct if the user makes a change to an input and then changes it back to the original value. It's a bit more work, but technically cleaner, to do an actual client-side comparison of the form's \"draft\" object against the latest version of the object from the server. That way you'll only show the \"save\" button enabled when there are actual pending changes to be saved.", "author": "gjuggler", "createdAt": "2020-05-20T17:29:45Z", "path": "ui/src/app/pages/admin/admin-user.tsx", "diffHunk": "@@ -1,179 +1,298 @@\n-import {Component} from '@angular/core';\n-import {Column} from 'primereact/column';\n-import {DataTable} from 'primereact/datatable';\n+import * as fp from 'lodash/fp';\n import * as React from 'react';\n \n+import {Component} from '@angular/core';\n+\n import {Button} from 'app/components/buttons';\n-import {Spinner, SpinnerOverlay} from 'app/components/spinners';\n-import {AdminUserBypass} from 'app/pages/admin/admin-user-bypass';\n-import {authDomainApi, profileApi} from 'app/services/swagger-fetch-clients';\n-import {reactStyles, ReactWrapperBase, withUserProfile} from 'app/utils';\n-import {serverConfigStore} from 'app/utils/navigation';\n-import {\n-  Profile,\n-} from 'generated/fetch';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SmallHeader} from 'app/components/headers';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput, Toggle} from 'app/components/inputs';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {displayDateWithoutHours, reactStyles, ReactWrapperBase, withUserProfile} from 'app/utils';\n+\n+import {navigate} from 'app/utils/navigation';\n+import {Profile} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n \n const styles = reactStyles({\n-  colStyle: {\n-    lineHeight: '0.5rem',\n-    fontSize: 12\n-  },\n-  tableStyle: {\n-    fontSize: 12,\n-    minWidth: 1200\n+  semiBold: {\n+    fontWeight: 600\n   }\n });\n \n-const LockoutButton: React.FunctionComponent<{disabled: boolean,\n-  profileDisabled: boolean, onClick: Function}> =\n-  ({disabled, profileDisabled, onClick}) => {\n-    return <Button type='secondaryLight' onClick={onClick} disabled={disabled}>\n-      {disabled ? <Spinner size={25}/> : (profileDisabled ? 'Enable' : 'Disable')}\n-    </Button>;\n-  };\n-\n-/**\n- * Users with the ACCESS_MODULE_ADMIN permission use this\n- * to manually set (approve/reject) the beta access state of a user, as well as\n- * other access module bypasses.\n- */\n-export const AdminUser = withUserProfile()(class extends React.Component<\n-  {profileState: {\n-    profile: Profile, reload: Function, updateCache: Function\n-  }}, {profiles: Profile[], contentLoaded: boolean, reloadingProfile: Profile}> {\n-\n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      profiles: [],\n-      contentLoaded: false,\n-      reloadingProfile: null\n-    };\n-  }\n+const freeCreditLimitOptions = [\n+  {label: '$300', value: 300},\n+  {label: '$350', value: 350},\n+  {label: '$400', value: 400},\n+  {label: '$450', value: 450},\n+  {label: '$500', value: 500},\n+  {label: '$550', value: 550},\n+  {label: '$600', value: 600},\n+  {label: '$650', value: 650},\n+  {label: '$700', value: 700},\n+  {label: '$750', value: 750},\n+  {label: '$800', value: 800}\n+];\n \n-  componentDidMount() {\n-    this.loadProfiles();\n-  }\n+const ReadonlyInputWithLabel = ({label, content, dataTestId, inputStyle = {}}) => {\n+  return <FlexColumn data-test-id={dataTestId} style={{marginTop: '1rem'}}>\n+    <label style={styles.semiBold}>{label}</label>\n+    <TextInput\n+        value={content}\n+        disabled\n+        style={{\n+          backgroundColor: colorWithWhiteness(colors.primary, .95),\n+          opacity: '100%',\n+          width: '17.5rem',\n+          ...inputStyle\n+        }}\n+    />\n+  </FlexColumn>;\n+};\n \n-  async loadProfiles() {\n-    this.setState({contentLoaded: false});\n-    profileApi().getAllUsers().then(profilesResp => {\n-      this.setState({profiles: this.sortProfileList(profilesResp.profileList),\n-        contentLoaded: true});\n-    });\n-  }\n+const DropdownWithLabel = ({label, options, initialValue, onChange, disabled, dataTestId, dropdownStyle = {}}) => {\n+  return <FlexColumn data-test-id={dataTestId} style={{marginTop: '1rem'}}>\n+    <label style={styles.semiBold}>{label}</label>\n+    <Dropdown\n+        style={{\n+          minWidth: '70px',\n+          width: '14rem',\n+          ...dropdownStyle\n+        }}\n+        options={options}\n+        onChange={(e) => onChange(e)}\n+        value={initialValue}\n+        disabled={disabled}\n+    />\n+  </FlexColumn>;\n+};\n \n-  // To avoid reloading the entire list of profiles when we make a change to one user,\n-  //  reload the single user and update the list of profiles\n-  async reloadProfile(profile: Profile) {\n-    const profiles = this.state.profiles;\n-    this.setState({reloadingProfile: profile});\n-    const index = profiles.findIndex(x => x.username === profile.username);\n-    profileApi().getUser(profile.userId).then(updatedProfile => {\n-      profiles[index] = updatedProfile;\n-      this.setState({profiles: profiles, reloadingProfile: null});\n-    });\n-  }\n+const ToggleWithLabelAndToggledText = ({label, initialValue, disabled, onChange, dataTestId}) => {\n+  return <FlexColumn data-test-id={dataTestId} style={{width: '8rem', flex: '0 0 auto'}}>\n+    <label>{label}</label>\n+    <Toggle\n+        name={initialValue ? 'BYPASSED' : ''}\n+        initialValue={initialValue}\n+        disabled={disabled}\n+        onToggle={(checked) => onChange(checked)}\n+        height={18}\n+        width={33}\n+    />\n+  </FlexColumn>;\n+};\n \n-  async updateUserDisabledStatus(disable: boolean, profile: Profile) {\n-    this.setState({reloadingProfile: profile});\n-    authDomainApi().updateUserDisabledStatus(\n-      {email: profile.username, disabled: disable}).then(_ => {\n-        this.reloadProfile(profile);\n-      });\n-  }\n+interface Props {\n+  // From withUserProfile\n+  profileState: {\n+    profile: Profile,\n+    reload: Function,\n+    updateCache: Function\n+  };\n+}\n \n-  // We want to sort first by beta access status, then by\n-  // submission time (newest at the top), then alphanumerically.\n-  sortProfileList(profileList: Array<Profile>): Array<Profile> {\n-    return profileList.sort((a, b) => {\n-      // put disabled accounts at the bottom\n-      if (a.disabled && b.disabled) {\n-        return this.timeCompare(a, b);\n-      }\n-      if (a.disabled) {\n-        return 1;\n-      }\n-      if (!!a.betaAccessBypassTime === !!b.betaAccessBypassTime) {\n-        return this.timeCompare(a, b);\n-      }\n-      if (!!b.betaAccessBypassTime) {\n-        return -1;\n-      }\n-      return 1;\n-    });\n-  }\n+interface State {\n+  loading: boolean;\n+  profile: Profile;\n+  saveDisabled: boolean;\n+  verifiedInstitutionOptions: Array<{label: string, value: {displayName: string, shortName: string}}>;\n+}\n \n-  private timeCompare(a: Profile, b: Profile): number {\n-    if (a.betaAccessRequestTime === b.betaAccessRequestTime) {\n-      return this.nameCompare(a, b);\n-    } else if (a.betaAccessRequestTime === null) {\n-      return 1;\n-    } else if (b.betaAccessRequestTime === null) {\n-      return -1;\n-    }\n-    return b.betaAccessRequestTime - a.betaAccessRequestTime;\n-  }\n \n-  private nameCompare(a: Profile, b: Profile): number {\n-    if (a.familyName === null) {\n-      return 1;\n-    }\n-    if (a.familyName.localeCompare(b.familyName) === 0) {\n-      if (a.givenName === null) {\n-        return 1;\n-      }\n-      return a.givenName.localeCompare(b.givenName);\n-    }\n-    return a.familyName.localeCompare(b.familyName);\n-  }\n+const AdminUser = withUserProfile()(class extends React.Component<Props, State> {\n+  constructor(props) {\n+    super(props);\n \n-  convertDate(date): string {\n-    return new Date(date).toString().split(' ').slice(1, 5).join(' ');\n+    this.state = {\n+      loading: false,\n+      profile: this.props.profileState.profile,\n+      saveDisabled: true,\n+      verifiedInstitutionOptions: []\n+    };\n   }\n \n-  convertProfilesToFields(profiles: Profile[]) {\n-    return profiles.map(p => ({...p, name: p.familyName + ', ' + p.givenName,\n-      betaAccessRequestTime: this.convertDate(p.betaAccessRequestTime),\n-      bypass: <AdminUserBypass profile={p}/>, disabled: p.disabled.toString(),\n-      userLockout: <LockoutButton disabled={this.state.reloadingProfile === p}\n-        profileDisabled={p.disabled}\n-        onClick={() => this.updateUserDisabledStatus(!p.disabled, p)}/>}));\n+  async componentDidMount() {\n+    const institutionsResponse = await institutionApi().getInstitutions();\n+    const options = fp.map(\n+      institution => {\n+        return {\n+          'label': institution.displayName ? institution.displayName : institution.shortName,\n+          'value': {displayName: institution.displayName, shortName: institution.shortName}\n+        };\n+      },\n+      institutionsResponse.institutions\n+    );\n+    this.setState({verifiedInstitutionOptions: options});\n   }\n \n   render() {\n-    const {contentLoaded, profiles} = this.state;\n-    const {enableBetaAccess} = serverConfigStore.getValue();\n-    return <div style={{position: 'relative'}}>\n-      <h2>User Admin Table</h2>\n-      {contentLoaded ?\n-        <DataTable value={this.convertProfilesToFields(profiles)} style={styles.tableStyle}>\n-          <Column field='disabled' header='Disabled' bodyStyle={{...styles.colStyle, width: '7%'}}\n-                  headerStyle={{width: '7%'}}/>\n-          <Column field='name' header='Name' bodyStyle={{...styles.colStyle, width: '15%'}}\n-                  headerStyle={{width: '15%'}} sortable={true}/>\n-          <Column field='username' header='User Name' bodyStyle={{...styles.colStyle, width: '20%'}}\n-                  headerStyle={{width: '20%'}} sortable={true}/>\n-          <Column field='contactEmail' header='Contact Email' sortable={true}\n-                  bodyStyle={{...styles.colStyle, width: '19%'}} headerStyle={{width: '19%'}}/>\n-          {enableBetaAccess && <Column field='betaAccessRequestTime' header='Beta Access Time Requested' sortable={true}\n-                  bodyStyle={{...styles.colStyle, width: '15%'}} headerStyle={{width: '15%'}}/>}\n-          <Column field='userLockout' header='User Lockout'\n-                  bodyStyle={{...styles.colStyle, width: '10%'}} headerStyle={{width: '10%'}}/>\n-          <Column field='bypass' header='Bypass'\n-                  bodyStyle={{...styles.colStyle, width: '10%'}} headerStyle={{width: '10%'}}/>\n-        </DataTable> :\n-        <div>\n-          Loading user profiles...\n-          <SpinnerOverlay\n-            overrideStylesOverlay={{alignItems: 'flex-start', marginTop: '2rem'}}/>\n-        </div>}\n-    </div>;\n+    const {profile} = this.state;\n+    return <FadeBox\n+        style={{\n+          margin: 'auto',\n+          paddingTop: '1rem',\n+          width: '96.25%',\n+          minWidth: '1232px',\n+          color: colors.primary\n+        }}\n+    >\n+      <FlexColumn>\n+        <FlexRow style={{alignItems: 'center'}}>\n+          <a onClick={() => navigate(['admin', 'user'])}>\n+            <ClrIcon\n+              shape='arrow'\n+              size={37}\n+              style={{\n+                backgroundColor: colorWithWhiteness(colors.accent, .85),\n+                color: colors.accent,\n+                borderRadius: '18px',\n+                transform: 'rotate(270deg)'\n+              }}\n+            />\n+          </a>\n+          <SmallHeader style={{marginTop: 0, marginLeft: '0.5rem'}}>\n+            User Profile Information\n+          </SmallHeader>\n+        </FlexRow>\n+        <FlexRow style={{width: '100%', marginTop: '1rem', alignItems: 'center'}}>\n+          <FlexRow\n+              style={{\n+                alignItems: 'center',\n+                backgroundColor: colorWithWhiteness(colors.primary, .85),\n+                borderRadius: '5px',\n+                padding: '0 .5rem',\n+                height: '1.625rem',\n+                width: '17.5rem'\n+              }}\n+          >\n+            <label style={{fontWeight: 600}}>\n+              Account access\n+            </label>\n+            <Toggle\n+                name={profile.disabled ? 'Disabled' : 'Enabled'}\n+                initialValue={!profile.disabled}\n+                disabled={true}\n+                data-test-id='account-access-toggle'\n+                onToggle={() => this.setState({saveDisabled: false})}", "originalCommit": "07879df9c2dada88b91a7b7c403ff67ce723413e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY1NTExNQ==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428655115", "bodyText": "I was hoping to avoid implementing any details of the follow on tickets in this ticket.", "author": "als364", "createdAt": "2020-05-21T13:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4NjA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcxMTg5Nw==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428711897", "bodyText": "sgtm", "author": "gjuggler", "createdAt": "2020-05-21T15:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4NjA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzMzg4MQ==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428233881", "bodyText": "Separate comment on this line: I think the URL path param should be username, not user ID. I'd advocated for this in the original design doc \u2013 it's important because we may want external systems to be able to create inbound links to our admin pages, so we should use externally-meaningful URL paths wherever possible.", "author": "gjuggler", "createdAt": "2020-05-20T18:45:59Z", "path": "ui/src/app/app-routing.module.ts", "diffHunk": "@@ -286,30 +287,44 @@ const routes: Routes = [\n           }]\n       },\n       {\n-        path: 'admin/review-workspace',\n-        component: AdminReviewWorkspaceComponent,\n-        data: {title: 'Review Workspaces'}\n-      }, {\n-        path: 'admin/user',\n-        component: AdminUserComponent,\n-        data: {title: 'User Admin Table'}\n-      }, {\n-        path: 'admin/banner',\n-        component: AdminBannerComponent,\n-        data: {title: 'Create Banner'}\n-      }, {\n-        path: 'admin/workspaces',\n-        component: AdminWorkspaceSearchComponent,\n-        data: { title: 'Workspace Admin'},\n-      }, {\n-        path: 'admin/workspaces/:workspaceNamespace',\n-        component: AdminWorkspaceComponent,\n-        data: { title: 'Workspace Admin'}\n-      }, {\n+        path: 'admin',\n+        children: [{\n+          path: 'review-workspace',\n+          component: AdminReviewWorkspaceComponent,\n+          data: {title: 'Review Workspaces'}\n+        },\n+          {\n+            path: 'user',\n+            component: AdminUsersComponent,\n+            data: {title: 'User Admin Table'}\n+          },\n+          {\n+            path: 'user/:userId',", "originalCommit": "07879df9c2dada88b91a7b7c403ff67ce723413e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3Nzc4Nw==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428277787", "bodyText": "The username is a research-aou.org email address. What about everything in front of the @?", "author": "als364", "createdAt": "2020-05-20T20:07:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzMzg4MQ=="}], "type": "inlineReview"}, {"oid": "4d28cddae882816749216d353f3be265d2dbebde", "url": "https://github.com/all-of-us/workbench/commit/4d28cddae882816749216d353f3be265d2dbebde", "message": "click on username to navigate to new component", "committedDate": "2020-05-21T19:07:22Z", "type": "commit"}, {"oid": "5a409c6625116d8a1f6410e5d3748f32e5a09347", "url": "https://github.com/all-of-us/workbench/commit/5a409c6625116d8a1f6410e5d3748f32e5a09347", "message": "partially styled first row", "committedDate": "2020-05-21T19:07:22Z", "type": "commit"}, {"oid": "51a1753a2a19aeb48807989dd928f7af431d808f", "url": "https://github.com/all-of-us/workbench/commit/51a1753a2a19aeb48807989dd928f7af431d808f", "message": "first column", "committedDate": "2020-05-21T19:07:22Z", "type": "commit"}, {"oid": "7f154feefeae12ec3c4b9e5c177681bb4157dab4", "url": "https://github.com/all-of-us/workbench/commit/7f154feefeae12ec3c4b9e5c177681bb4157dab4", "message": "mostly ready", "committedDate": "2020-05-21T19:07:23Z", "type": "commit"}, {"oid": "743281e3bcd9acd9f288e725af00cba7d1374b23", "url": "https://github.com/all-of-us/workbench/commit/743281e3bcd9acd9f288e725af00cba7d1374b23", "message": "fixed toggle size", "committedDate": "2020-05-21T19:07:23Z", "type": "commit"}, {"oid": "21df385639bd51eee05671fa3c617e903db54b67", "url": "https://github.com/all-of-us/workbench/commit/21df385639bd51eee05671fa3c617e903db54b67", "message": "buncha data test ids", "committedDate": "2020-05-21T19:07:23Z", "type": "commit"}, {"oid": "b264d0ac04c870af79e2e5801419c6afc209d52e", "url": "https://github.com/all-of-us/workbench/commit/b264d0ac04c870af79e2e5801419c6afc209d52e", "message": "disable save button until something changes", "committedDate": "2020-05-21T19:07:23Z", "type": "commit"}, {"oid": "2412733ceef400e4f78d14df1edb0b7183b1bc19", "url": "https://github.com/all-of-us/workbench/commit/2412733ceef400e4f78d14df1edb0b7183b1bc19", "message": "linting and also make back button work", "committedDate": "2020-05-21T19:07:23Z", "type": "commit"}, {"oid": "52a0f1aac45413ae3c85e1f89cd803ebd2960e1b", "url": "https://github.com/all-of-us/workbench/commit/52a0f1aac45413ae3c85e1f89cd803ebd2960e1b", "message": "initial review feedback", "committedDate": "2020-05-21T19:07:23Z", "type": "commit"}, {"oid": "335a2bf4f744837fe34e114673f5bc7a68dd68b4", "url": "https://github.com/all-of-us/workbench/commit/335a2bf4f744837fe34e114673f5bc7a68dd68b4", "message": "lol might help if i get all of them", "committedDate": "2020-05-21T19:07:23Z", "type": "commit"}, {"oid": "97080ebc8f8ec298c5a0ebb998299a41a31c13a0", "url": "https://github.com/all-of-us/workbench/commit/97080ebc8f8ec298c5a0ebb998299a41a31c13a0", "message": "wow this actually works now", "committedDate": "2020-05-21T19:07:23Z", "type": "commit"}, {"oid": "83702844bc62d8262ad549ab49ac8843439cdec3", "url": "https://github.com/all-of-us/workbench/commit/83702844bc62d8262ad549ab49ac8843439cdec3", "message": "make Toggle a component", "committedDate": "2020-05-21T19:07:23Z", "type": "commit"}, {"oid": "05a2fa44eaa5389ada4604ba2c9f6719af23c7d0", "url": "https://github.com/all-of-us/workbench/commit/05a2fa44eaa5389ada4604ba2c9f6719af23c7d0", "message": "onToggle parameter", "committedDate": "2020-05-21T19:07:23Z", "type": "commit"}, {"oid": "47ae2ce733b0ef7008716aec6e57d04469ba617f", "url": "https://github.com/all-of-us/workbench/commit/47ae2ce733b0ef7008716aec6e57d04469ba617f", "message": "parameter and rename", "committedDate": "2020-05-21T19:07:23Z", "type": "commit"}, {"oid": "c82dff401aa0147ceff53fea5b6a4cdd150bc321", "url": "https://github.com/all-of-us/workbench/commit/c82dff401aa0147ceff53fea5b6a4cdd150bc321", "message": "removing beta access display", "committedDate": "2020-05-21T19:07:23Z", "type": "commit"}, {"oid": "c10244d6c48964a9c2b2a81ab8d12151f4923281", "url": "https://github.com/all-of-us/workbench/commit/c10244d6c48964a9c2b2a81ab8d12151f4923281", "message": "by username", "committedDate": "2020-05-21T19:07:23Z", "type": "commit"}, {"oid": "9e2d2e3694a8ce52a780db1e7ffb8db70a265be3", "url": "https://github.com/all-of-us/workbench/commit/9e2d2e3694a8ce52a780db1e7ffb8db70a265be3", "message": "comment for clarity", "committedDate": "2020-05-21T19:07:47Z", "type": "commit"}, {"oid": "9e2d2e3694a8ce52a780db1e7ffb8db70a265be3", "url": "https://github.com/all-of-us/workbench/commit/9e2d2e3694a8ce52a780db1e7ffb8db70a265be3", "message": "comment for clarity", "committedDate": "2020-05-21T19:07:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg1NzYxMg==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428857612", "bodyText": "Nice \u2013 it's helpful even just to have the props split out and typed like that.", "author": "gjuggler", "createdAt": "2020-05-21T19:12:22Z", "path": "ui/src/app/components/inputs.tsx", "diffHunk": "@@ -418,11 +418,33 @@ export class DatePicker extends React.Component<\n   }\n }\n \n-export const Toggle = ({name, enabled, onToggle, ...props}) => {\n-  return <label style={{display: 'flex', flexDirection: 'row', paddingBottom: '.5rem'}}>\n-    <Switch onChange={onToggle} checked={enabled} checkedIcon={false}\n-            {...props}\n-    />\n-    <span style={{marginLeft: '.5rem'}}>{name}</span>\n-  </label>;\n-};\n+interface ToggleProps {", "originalCommit": "9e2d2e3694a8ce52a780db1e7ffb8db70a265be3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2NDI5OQ==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428864299", "bodyText": "nit: add some sort of user-visible error handling here, e.g. what happens if the server returns a 404?", "author": "gjuggler", "createdAt": "2020-05-21T19:25:40Z", "path": "ui/src/app/pages/admin/admin-user.tsx", "diffHunk": "@@ -1,179 +1,296 @@\n-import {Component} from '@angular/core';\n-import {Column} from 'primereact/column';\n-import {DataTable} from 'primereact/datatable';\n+import * as fp from 'lodash/fp';\n import * as React from 'react';\n \n+import {Component} from '@angular/core';\n+\n import {Button} from 'app/components/buttons';\n-import {Spinner, SpinnerOverlay} from 'app/components/spinners';\n-import {AdminUserBypass} from 'app/pages/admin/admin-user-bypass';\n-import {authDomainApi, profileApi} from 'app/services/swagger-fetch-clients';\n-import {reactStyles, ReactWrapperBase, withUserProfile} from 'app/utils';\n-import {serverConfigStore} from 'app/utils/navigation';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SmallHeader} from 'app/components/headers';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput, Toggle} from 'app/components/inputs';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {institutionApi, profileApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n import {\n-  Profile,\n-} from 'generated/fetch';\n+  displayDateWithoutHours,\n+  reactStyles,\n+  ReactWrapperBase,\n+  withUrlParams\n+} from 'app/utils';\n+\n+import {navigate, serverConfigStore} from 'app/utils/navigation';\n+import {Profile} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n \n const styles = reactStyles({\n-  colStyle: {\n-    lineHeight: '0.5rem',\n-    fontSize: 12\n-  },\n-  tableStyle: {\n-    fontSize: 12,\n-    minWidth: 1200\n+  semiBold: {\n+    fontWeight: 600\n   }\n });\n \n-const LockoutButton: React.FunctionComponent<{disabled: boolean,\n-  profileDisabled: boolean, onClick: Function}> =\n-  ({disabled, profileDisabled, onClick}) => {\n-    return <Button type='secondaryLight' onClick={onClick} disabled={disabled}>\n-      {disabled ? <Spinner size={25}/> : (profileDisabled ? 'Enable' : 'Disable')}\n-    </Button>;\n-  };\n-\n-/**\n- * Users with the ACCESS_MODULE_ADMIN permission use this\n- * to manually set (approve/reject) the beta access state of a user, as well as\n- * other access module bypasses.\n- */\n-export const AdminUser = withUserProfile()(class extends React.Component<\n-  {profileState: {\n-    profile: Profile, reload: Function, updateCache: Function\n-  }}, {profiles: Profile[], contentLoaded: boolean, reloadingProfile: Profile}> {\n+const freeCreditLimitOptions = [\n+  {label: '$300', value: 300},\n+  {label: '$350', value: 350},\n+  {label: '$400', value: 400},\n+  {label: '$450', value: 450},\n+  {label: '$500', value: 500},\n+  {label: '$550', value: 550},\n+  {label: '$600', value: 600},\n+  {label: '$650', value: 650},\n+  {label: '$700', value: 700},\n+  {label: '$750', value: 750},\n+  {label: '$800', value: 800}\n+];\n \n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      profiles: [],\n-      contentLoaded: false,\n-      reloadingProfile: null\n-    };\n-  }\n+const ReadonlyInputWithLabel = ({label, content, dataTestId, inputStyle = {}}) => {\n+  return <FlexColumn data-test-id={dataTestId} style={{marginTop: '1rem'}}>\n+    <label style={styles.semiBold}>{label}</label>\n+    <TextInput\n+        value={content || ''} // react yells at me if this is null\n+        disabled\n+        style={{\n+          backgroundColor: colorWithWhiteness(colors.primary, .95),\n+          opacity: '100%',\n+          width: '17.5rem',\n+          ...inputStyle\n+        }}\n+    />\n+  </FlexColumn>;\n+};\n \n-  componentDidMount() {\n-    this.loadProfiles();\n-  }\n+const DropdownWithLabel = ({label, options, initialValue, onChange, disabled, dataTestId, dropdownStyle = {}}) => {\n+  return <FlexColumn data-test-id={dataTestId} style={{marginTop: '1rem'}}>\n+    <label style={styles.semiBold}>{label}</label>\n+    <Dropdown\n+        style={{\n+          minWidth: '70px',\n+          width: '14rem',\n+          ...dropdownStyle\n+        }}\n+        options={options}\n+        onChange={(e) => onChange(e)}\n+        value={initialValue}\n+        disabled={disabled}\n+    />\n+  </FlexColumn>;\n+};\n \n-  async loadProfiles() {\n-    this.setState({contentLoaded: false});\n-    profileApi().getAllUsers().then(profilesResp => {\n-      this.setState({profiles: this.sortProfileList(profilesResp.profileList),\n-        contentLoaded: true});\n-    });\n-  }\n+const ToggleWithLabelAndToggledText = ({label, initialValue, disabled, onToggle, dataTestId}) => {\n+  return <FlexColumn data-test-id={dataTestId} style={{width: '8rem', flex: '0 0 auto'}}>\n+    <label>{label}</label>\n+    <Toggle\n+        name={initialValue ? 'BYPASSED' : ''}\n+        checked={initialValue}\n+        disabled={disabled}\n+        onToggle={(checked) => onToggle(checked)}\n+        height={18}\n+        width={33}\n+    />\n+  </FlexColumn>;\n+};\n \n-  // To avoid reloading the entire list of profiles when we make a change to one user,\n-  //  reload the single user and update the list of profiles\n-  async reloadProfile(profile: Profile) {\n-    const profiles = this.state.profiles;\n-    this.setState({reloadingProfile: profile});\n-    const index = profiles.findIndex(x => x.username === profile.username);\n-    profileApi().getUser(profile.userId).then(updatedProfile => {\n-      profiles[index] = updatedProfile;\n-      this.setState({profiles: profiles, reloadingProfile: null});\n-    });\n-  }\n+interface Props {\n+  // From withUrlParams\n+  urlParams: {\n+    usernameWithoutGsuiteDomain: string\n+  };\n+}\n \n-  async updateUserDisabledStatus(disable: boolean, profile: Profile) {\n-    this.setState({reloadingProfile: profile});\n-    authDomainApi().updateUserDisabledStatus(\n-      {email: profile.username, disabled: disable}).then(_ => {\n-        this.reloadProfile(profile);\n-      });\n-  }\n+interface State {\n+  loading: boolean;\n+  profile: Profile;\n+  saveDisabled: boolean;\n+  verifiedInstitutionOptions: Array<{label: string, value: {displayName: string, shortName: string}}>;\n+}\n \n-  // We want to sort first by beta access status, then by\n-  // submission time (newest at the top), then alphanumerically.\n-  sortProfileList(profileList: Array<Profile>): Array<Profile> {\n-    return profileList.sort((a, b) => {\n-      // put disabled accounts at the bottom\n-      if (a.disabled && b.disabled) {\n-        return this.timeCompare(a, b);\n-      }\n-      if (a.disabled) {\n-        return 1;\n-      }\n-      if (!!a.betaAccessBypassTime === !!b.betaAccessBypassTime) {\n-        return this.timeCompare(a, b);\n-      }\n-      if (!!b.betaAccessBypassTime) {\n-        return -1;\n-      }\n-      return 1;\n-    });\n-  }\n \n-  private timeCompare(a: Profile, b: Profile): number {\n-    if (a.betaAccessRequestTime === b.betaAccessRequestTime) {\n-      return this.nameCompare(a, b);\n-    } else if (a.betaAccessRequestTime === null) {\n-      return 1;\n-    } else if (b.betaAccessRequestTime === null) {\n-      return -1;\n-    }\n-    return b.betaAccessRequestTime - a.betaAccessRequestTime;\n-  }\n+const AdminUser = withUrlParams()(class extends React.Component<Props, State> {\n+  constructor(props) {\n+    super(props);\n \n-  private nameCompare(a: Profile, b: Profile): number {\n-    if (a.familyName === null) {\n-      return 1;\n-    }\n-    if (a.familyName.localeCompare(b.familyName) === 0) {\n-      if (a.givenName === null) {\n-        return 1;\n-      }\n-      return a.givenName.localeCompare(b.givenName);\n-    }\n-    return a.familyName.localeCompare(b.familyName);\n+    this.state = {\n+      loading: false,\n+      profile: null,\n+      saveDisabled: true,\n+      verifiedInstitutionOptions: []\n+    };\n   }\n \n-  convertDate(date): string {\n-    return new Date(date).toString().split(' ').slice(1, 5).join(' ');\n-  }\n+  async componentDidMount() {\n+    const {gsuiteDomain} = serverConfigStore.getValue();\n+    const profileResponse = await profileApi().getUserByUsername(this.props.urlParams.usernameWithoutGsuiteDomain + \"@\" + gsuiteDomain);", "originalCommit": "9e2d2e3694a8ce52a780db1e7ffb8db70a265be3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2NDU0MQ==", "url": "https://github.com/all-of-us/workbench/pull/3603#discussion_r428864541", "bodyText": "Same nitpick here: it would be nice to have some sort of error message if the institutions API call fails for some reason.", "author": "gjuggler", "createdAt": "2020-05-21T19:26:09Z", "path": "ui/src/app/pages/admin/admin-user.tsx", "diffHunk": "@@ -1,179 +1,296 @@\n-import {Component} from '@angular/core';\n-import {Column} from 'primereact/column';\n-import {DataTable} from 'primereact/datatable';\n+import * as fp from 'lodash/fp';\n import * as React from 'react';\n \n+import {Component} from '@angular/core';\n+\n import {Button} from 'app/components/buttons';\n-import {Spinner, SpinnerOverlay} from 'app/components/spinners';\n-import {AdminUserBypass} from 'app/pages/admin/admin-user-bypass';\n-import {authDomainApi, profileApi} from 'app/services/swagger-fetch-clients';\n-import {reactStyles, ReactWrapperBase, withUserProfile} from 'app/utils';\n-import {serverConfigStore} from 'app/utils/navigation';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SmallHeader} from 'app/components/headers';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput, Toggle} from 'app/components/inputs';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {institutionApi, profileApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n import {\n-  Profile,\n-} from 'generated/fetch';\n+  displayDateWithoutHours,\n+  reactStyles,\n+  ReactWrapperBase,\n+  withUrlParams\n+} from 'app/utils';\n+\n+import {navigate, serverConfigStore} from 'app/utils/navigation';\n+import {Profile} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n \n const styles = reactStyles({\n-  colStyle: {\n-    lineHeight: '0.5rem',\n-    fontSize: 12\n-  },\n-  tableStyle: {\n-    fontSize: 12,\n-    minWidth: 1200\n+  semiBold: {\n+    fontWeight: 600\n   }\n });\n \n-const LockoutButton: React.FunctionComponent<{disabled: boolean,\n-  profileDisabled: boolean, onClick: Function}> =\n-  ({disabled, profileDisabled, onClick}) => {\n-    return <Button type='secondaryLight' onClick={onClick} disabled={disabled}>\n-      {disabled ? <Spinner size={25}/> : (profileDisabled ? 'Enable' : 'Disable')}\n-    </Button>;\n-  };\n-\n-/**\n- * Users with the ACCESS_MODULE_ADMIN permission use this\n- * to manually set (approve/reject) the beta access state of a user, as well as\n- * other access module bypasses.\n- */\n-export const AdminUser = withUserProfile()(class extends React.Component<\n-  {profileState: {\n-    profile: Profile, reload: Function, updateCache: Function\n-  }}, {profiles: Profile[], contentLoaded: boolean, reloadingProfile: Profile}> {\n+const freeCreditLimitOptions = [\n+  {label: '$300', value: 300},\n+  {label: '$350', value: 350},\n+  {label: '$400', value: 400},\n+  {label: '$450', value: 450},\n+  {label: '$500', value: 500},\n+  {label: '$550', value: 550},\n+  {label: '$600', value: 600},\n+  {label: '$650', value: 650},\n+  {label: '$700', value: 700},\n+  {label: '$750', value: 750},\n+  {label: '$800', value: 800}\n+];\n \n-  constructor(props) {\n-    super(props);\n-    this.state = {\n-      profiles: [],\n-      contentLoaded: false,\n-      reloadingProfile: null\n-    };\n-  }\n+const ReadonlyInputWithLabel = ({label, content, dataTestId, inputStyle = {}}) => {\n+  return <FlexColumn data-test-id={dataTestId} style={{marginTop: '1rem'}}>\n+    <label style={styles.semiBold}>{label}</label>\n+    <TextInput\n+        value={content || ''} // react yells at me if this is null\n+        disabled\n+        style={{\n+          backgroundColor: colorWithWhiteness(colors.primary, .95),\n+          opacity: '100%',\n+          width: '17.5rem',\n+          ...inputStyle\n+        }}\n+    />\n+  </FlexColumn>;\n+};\n \n-  componentDidMount() {\n-    this.loadProfiles();\n-  }\n+const DropdownWithLabel = ({label, options, initialValue, onChange, disabled, dataTestId, dropdownStyle = {}}) => {\n+  return <FlexColumn data-test-id={dataTestId} style={{marginTop: '1rem'}}>\n+    <label style={styles.semiBold}>{label}</label>\n+    <Dropdown\n+        style={{\n+          minWidth: '70px',\n+          width: '14rem',\n+          ...dropdownStyle\n+        }}\n+        options={options}\n+        onChange={(e) => onChange(e)}\n+        value={initialValue}\n+        disabled={disabled}\n+    />\n+  </FlexColumn>;\n+};\n \n-  async loadProfiles() {\n-    this.setState({contentLoaded: false});\n-    profileApi().getAllUsers().then(profilesResp => {\n-      this.setState({profiles: this.sortProfileList(profilesResp.profileList),\n-        contentLoaded: true});\n-    });\n-  }\n+const ToggleWithLabelAndToggledText = ({label, initialValue, disabled, onToggle, dataTestId}) => {\n+  return <FlexColumn data-test-id={dataTestId} style={{width: '8rem', flex: '0 0 auto'}}>\n+    <label>{label}</label>\n+    <Toggle\n+        name={initialValue ? 'BYPASSED' : ''}\n+        checked={initialValue}\n+        disabled={disabled}\n+        onToggle={(checked) => onToggle(checked)}\n+        height={18}\n+        width={33}\n+    />\n+  </FlexColumn>;\n+};\n \n-  // To avoid reloading the entire list of profiles when we make a change to one user,\n-  //  reload the single user and update the list of profiles\n-  async reloadProfile(profile: Profile) {\n-    const profiles = this.state.profiles;\n-    this.setState({reloadingProfile: profile});\n-    const index = profiles.findIndex(x => x.username === profile.username);\n-    profileApi().getUser(profile.userId).then(updatedProfile => {\n-      profiles[index] = updatedProfile;\n-      this.setState({profiles: profiles, reloadingProfile: null});\n-    });\n-  }\n+interface Props {\n+  // From withUrlParams\n+  urlParams: {\n+    usernameWithoutGsuiteDomain: string\n+  };\n+}\n \n-  async updateUserDisabledStatus(disable: boolean, profile: Profile) {\n-    this.setState({reloadingProfile: profile});\n-    authDomainApi().updateUserDisabledStatus(\n-      {email: profile.username, disabled: disable}).then(_ => {\n-        this.reloadProfile(profile);\n-      });\n-  }\n+interface State {\n+  loading: boolean;\n+  profile: Profile;\n+  saveDisabled: boolean;\n+  verifiedInstitutionOptions: Array<{label: string, value: {displayName: string, shortName: string}}>;\n+}\n \n-  // We want to sort first by beta access status, then by\n-  // submission time (newest at the top), then alphanumerically.\n-  sortProfileList(profileList: Array<Profile>): Array<Profile> {\n-    return profileList.sort((a, b) => {\n-      // put disabled accounts at the bottom\n-      if (a.disabled && b.disabled) {\n-        return this.timeCompare(a, b);\n-      }\n-      if (a.disabled) {\n-        return 1;\n-      }\n-      if (!!a.betaAccessBypassTime === !!b.betaAccessBypassTime) {\n-        return this.timeCompare(a, b);\n-      }\n-      if (!!b.betaAccessBypassTime) {\n-        return -1;\n-      }\n-      return 1;\n-    });\n-  }\n \n-  private timeCompare(a: Profile, b: Profile): number {\n-    if (a.betaAccessRequestTime === b.betaAccessRequestTime) {\n-      return this.nameCompare(a, b);\n-    } else if (a.betaAccessRequestTime === null) {\n-      return 1;\n-    } else if (b.betaAccessRequestTime === null) {\n-      return -1;\n-    }\n-    return b.betaAccessRequestTime - a.betaAccessRequestTime;\n-  }\n+const AdminUser = withUrlParams()(class extends React.Component<Props, State> {\n+  constructor(props) {\n+    super(props);\n \n-  private nameCompare(a: Profile, b: Profile): number {\n-    if (a.familyName === null) {\n-      return 1;\n-    }\n-    if (a.familyName.localeCompare(b.familyName) === 0) {\n-      if (a.givenName === null) {\n-        return 1;\n-      }\n-      return a.givenName.localeCompare(b.givenName);\n-    }\n-    return a.familyName.localeCompare(b.familyName);\n+    this.state = {\n+      loading: false,\n+      profile: null,\n+      saveDisabled: true,\n+      verifiedInstitutionOptions: []\n+    };\n   }\n \n-  convertDate(date): string {\n-    return new Date(date).toString().split(' ').slice(1, 5).join(' ');\n-  }\n+  async componentDidMount() {\n+    const {gsuiteDomain} = serverConfigStore.getValue();\n+    const profileResponse = await profileApi().getUserByUsername(this.props.urlParams.usernameWithoutGsuiteDomain + \"@\" + gsuiteDomain);\n \n-  convertProfilesToFields(profiles: Profile[]) {\n-    return profiles.map(p => ({...p, name: p.familyName + ', ' + p.givenName,\n-      betaAccessRequestTime: this.convertDate(p.betaAccessRequestTime),\n-      bypass: <AdminUserBypass profile={p}/>, disabled: p.disabled.toString(),\n-      userLockout: <LockoutButton disabled={this.state.reloadingProfile === p}\n-        profileDisabled={p.disabled}\n-        onClick={() => this.updateUserDisabledStatus(!p.disabled, p)}/>}));\n+    const institutionsResponse = await institutionApi().getInstitutions();", "originalCommit": "9e2d2e3694a8ce52a780db1e7ffb8db70a265be3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "92d97310372c06ac191c471387b46611a54da403", "url": "https://github.com/all-of-us/workbench/commit/92d97310372c06ac191c471387b46611a54da403", "message": "user facing error handling \\!", "committedDate": "2020-05-21T19:53:39Z", "type": "commit"}, {"oid": "a714acefb893863bc1a8667e93a2e258a6c56008", "url": "https://github.com/all-of-us/workbench/commit/a714acefb893863bc1a8667e93a2e258a6c56008", "message": "lint", "committedDate": "2020-05-21T20:07:43Z", "type": "commit"}]}