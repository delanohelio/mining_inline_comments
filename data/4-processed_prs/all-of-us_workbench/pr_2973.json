{"pr_number": 2973, "pr_title": "[RW-3650][risk=no] Add label support to our core CheckBox class and add type-safety and unit tests.", "pr_createdAt": "2020-01-06T17:23:43Z", "pr_url": "https://github.com/all-of-us/workbench/pull/2973", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ3NTQ1Nw==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363475457", "bodyText": "It looks like you're changing the actual checked property here. What happens if you simulate click instead?", "author": "als364", "createdAt": "2020-01-06T20:47:02Z", "path": "ui/src/app/components/inputs.spec.tsx", "diffHunk": "@@ -0,0 +1,67 @@\n+import {\n+  EnzymeAdapter,\n+  mount,\n+  ReactWrapper,\n+  shallow,\n+  ShallowWrapper,\n+} from 'enzyme';\n+import * as React from 'react';\n+\n+import {CheckBox} from './inputs';\n+\n+function findInput(wrapper: (ShallowWrapper|ReactWrapper)): (ShallowWrapper|ReactWrapper) {\n+  return wrapper.find('input[type=\"checkbox\"]').first();\n+}\n+\n+function clickCheckbox(wrapper: (ShallowWrapper|ReactWrapper)) {\n+  const currentChecked = findInput(wrapper).prop('checked');\n+  findInput(wrapper).simulate('change', {target: {checked: !currentChecked}});", "originalCommit": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc1MTMzMQ==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363751331", "bodyText": "That was my first instinct \u2013 in fact I spent a fair bit of time trying various approaches and Googling to see if I could get that to work. Sad stories like enzymejs/enzyme#952 and https://stackoverflow.com/questions/39892256/checkbox-is-not-checked-after-simulate-change-with-enzyme popped up, and I couldn't find anything other than the 'change' simulation to work reliably here.", "author": "gjuggler", "createdAt": "2020-01-07T13:40:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ3NTQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1ODg0OA==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364758848", "bodyText": "Boooo\nThis code feels like we're just testing that 1=1.", "author": "als364", "createdAt": "2020-01-09T14:13:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ3NTQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2NzE2OQ==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364767169", "bodyText": "Yeah... I'm not thrilled about it, but (1) it demonstrates expected usage and does test a modicum of the state-management flow, and (2) stupid tests are still better than null tests, esp. in a core component library like this :)\nI'll probably poke at this a bit more in the future... stuff like this bugs me, as I pretty strongly believe UI stuff should be tested as realistically as possible, e.g. simulating true clicks on the DOM. But that does seem to go somewhat against the grain of typical React unit test patterns. Maybe the real answer is, we have defense in depth and this kind of stuff will get caught at an end-to-end test stage.", "author": "gjuggler", "createdAt": "2020-01-09T14:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ3NTQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4NTAwOA==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363485008", "bodyText": "Should we file a ticket to deprecate this?", "author": "als364", "createdAt": "2020-01-06T21:11:54Z", "path": "ui/src/app/components/inputs.tsx", "diffHunk": "@@ -119,64 +133,87 @@ export const RadioButton = ({ onChange, ...props }) => {\n   />;\n };\n \n-\n-export const CheckBox = ({onChange, ...props}) => {\n-  return <input\n-    type='checkbox'\n-    onChange={onChange ? (e => onChange(e.target.checked)) : undefined}\n-    {...props}\n-  />;\n-};\n-\n-interface LabeledCheckboxProps {\n-  initialValue: boolean;\n+interface CheckBoxProps {\n+  // Whether the checkbox should be checked. If manageOwnState is false, the\n+  // checkbox will always be rendered with the value of this prop. If\n+  // manageOwnState is true, this prop controls only the initial value.\n+  checked?: boolean;\n+  // Whether the checkbox is rendered in a disabled state.\n   disabled?: boolean;\n-  onChange?: Function;\n-  style?: object;\n-  checkboxStyle?: object;\n-  labelStyle?: object;\n-  label: string;\n+  id?: string;\n+  // An optional label to show alongside the input. Can be a plain string or\n+  // any React node.\n+  label?: React.ReactNode;\n+  // Styles to apply to the label element. Only relevant when label is non-null.\n+  labelStyle?: React.CSSProperties;\n+  // Indicates whether the CheckBox should be responsible for managing its own\n+  // state. When false, the HTML input will always be rendered with the value of\n+  // the passed 'checked' prop.\n+  manageOwnState: boolean;", "originalCommit": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM4ODAzMQ==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364388031", "bodyText": "Good point \u2013 filed https://precisionmedicineinitiative.atlassian.net/browse/RW-4251 for this.", "author": "gjuggler", "createdAt": "2020-01-08T18:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4NTAwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NDE0Ng==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363494146", "bodyText": "not props.id ? props.id : uniqueId?", "author": "als364", "createdAt": "2020-01-06T21:35:28Z", "path": "ui/src/app/components/inputs.tsx", "diffHunk": "@@ -119,64 +133,87 @@ export const RadioButton = ({ onChange, ...props }) => {\n   />;\n };\n \n-\n-export const CheckBox = ({onChange, ...props}) => {\n-  return <input\n-    type='checkbox'\n-    onChange={onChange ? (e => onChange(e.target.checked)) : undefined}\n-    {...props}\n-  />;\n-};\n-\n-interface LabeledCheckboxProps {\n-  initialValue: boolean;\n+interface CheckBoxProps {\n+  // Whether the checkbox should be checked. If manageOwnState is false, the\n+  // checkbox will always be rendered with the value of this prop. If\n+  // manageOwnState is true, this prop controls only the initial value.\n+  checked?: boolean;\n+  // Whether the checkbox is rendered in a disabled state.\n   disabled?: boolean;\n-  onChange?: Function;\n-  style?: object;\n-  checkboxStyle?: object;\n-  labelStyle?: object;\n-  label: string;\n+  id?: string;\n+  // An optional label to show alongside the input. Can be a plain string or\n+  // any React node.\n+  label?: React.ReactNode;\n+  // Styles to apply to the label element. Only relevant when label is non-null.\n+  labelStyle?: React.CSSProperties;\n+  // Indicates whether the CheckBox should be responsible for managing its own\n+  // state. When false, the HTML input will always be rendered with the value of\n+  // the passed 'checked' prop.\n+  manageOwnState: boolean;\n+  // Callback called when the user clicks the checkbox or label, containing the\n+  // new checked value.\n+  onChange?: (boolean) => void;\n+  // Styles for the <input> checkbox component.\n+  style?: React.CSSProperties;\n+  // If the label is non-empty, styles to be applied to the <span> wrapper.\n+  wrapperStyle?: React.CSSProperties;\n }\n \n-interface LabeledCheckboxState {\n-  value: boolean;\n+interface CheckBoxState {\n+  checked: boolean;\n }\n \n-export class LabeledCheckbox extends React.Component<LabeledCheckboxProps, LabeledCheckboxState> {\n-  constructor(props: any) {\n+export class CheckBox extends React.Component<CheckBoxProps, CheckBoxState> {\n+  constructor(props: CheckBoxProps) {\n     super(props);\n     this.state = {\n-      value: props.initialValue\n+      checked: props.checked\n     };\n   }\n \n-  toggleValue() {\n-    if (!this.props.disabled) {\n-      this.setState(previousState => ({value: !previousState.value}));\n+  static defaultProps: CheckBoxProps = {\n+    checked: false,\n+    manageOwnState: true\n+  };\n+\n+  handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n+    if (this.props.manageOwnState) {\n+      // We only track state internally if props aren't being used to render\n+      // the checkbox value.\n+      this.setState({checked: !this.state.checked});\n+    }\n+    if (this.props.onChange) {\n+      this.props.onChange(e.target.checked);\n     }\n   }\n-\n   render() {\n-    return <div style={this.props.style}>\n-      <CheckBox\n-          style={{...this.props.checkboxStyle, verticalAlign: 'middle'}}\n-          checked={this.state.value}\n-          disabled={this.props.disabled}\n-          onChange={\n-            e => {\n-              if (this.props.onChange) {\n-                this.props.onChange(e);\n-              }\n-            }\n-          }\n-      />\n-      <label\n-          style={this.props.labelStyle}\n-          onClick={() => this.toggleValue()}\n-      >\n-        {this.props.label}\n-      </label>\n-    </div>;\n+    const {\n+      checked, disabled, label, labelStyle, onChange, manageOwnState, style, wrapperStyle,\n+      ...otherProps\n+    } = this.props;\n+    const uniqueId = fp.uniqueId('checkbox');\n+\n+    const maybeDisabledOverrides = disabled ? styles.disabledStyle : {};\n+\n+    const input = <input\n+      id={uniqueId}", "originalCommit": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM4ODE0OQ==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364388149", "bodyText": "Sounds sensible \u2013\u00a0done. While in here, I adjusted the logic to only create a new unique ID on component construction, not on every render. I'm not sure if this has a real impact on performance, but if feels cleaner.", "author": "gjuggler", "createdAt": "2020-01-08T18:53:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NDE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NTEwMA==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363495100", "bodyText": "this seems unrelated. Did this miss a linter somewhere?", "author": "als364", "createdAt": "2020-01-06T21:37:52Z", "path": "ui/src/app/components/tables.tsx", "diffHunk": "@@ -20,14 +20,14 @@ export const TwoColPaddedTable = ({style = {}, header = false, headerLeft = '',\n   headerRight = '', cellWidth = {left: '50%', right: '50%'}, contentLeft, contentRight}) => {\n   return <FlexColumn style={{...style}}>\n     {header &&\n-      <FlexRow style={{height: '100%'}}>\n-        <PaddedTableCell left={true} leftWidth={cellWidth.left}\n+      <FlexRow key='header' style={{height: '100%'}}>", "originalCommit": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwNDE2MQ==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364404161", "bodyText": "Ah, no \u2013 this is unrelated, but I was encountering these React warning log statements about non-unique keys while debugging some of this stuff. I forget where exactly. I'll split out into a separate PR for clarity, done.", "author": "gjuggler", "createdAt": "2020-01-08T19:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NTEwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NTUzMg==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363495532", "bodyText": "shouldn't this be checked: !checked?", "author": "als364", "createdAt": "2020-01-06T21:38:56Z", "path": "ui/src/app/pages/analysis/confirm-playground-mode-modal.tsx", "diffHunk": "@@ -27,10 +27,9 @@ export class ConfirmPlaygroundModeModal extends React.Component<Props, State> {\n     };\n   }\n \n-  toggleChecked() {\n-    const newState = !this.state.checked;\n-    this.setState({checked: newState});\n-    Cookies.set(ConfirmPlaygroundModeModal.DO_NOT_SHOW_AGAIN, String(newState));\n+  toggleChecked(checked: boolean) {\n+    this.setState({checked: checked});", "originalCommit": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NjU5Mg==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363496592", "bodyText": "or does this happen after the actual checked state changes? if that's the case we should change the name of this function since it is no longer toggling checked", "author": "als364", "createdAt": "2020-01-06T21:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NTUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwNDI1MA==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364404250", "bodyText": "Function rename sgtm \u2013\u00a0done.", "author": "gjuggler", "createdAt": "2020-01-08T19:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NTUzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NjY3NQ==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363496675", "bodyText": "extraneous", "author": "als364", "createdAt": "2020-01-06T21:42:19Z", "path": "ui/src/app/pages/login/account-creation/account-creation-survey.tsx", "diffHunk": "@@ -110,6 +102,7 @@ export class AccountCreationSurvey extends React.Component<AccountCreationSurvey\n     // Toggle Includes removes the element if it already exist and adds if not\n     const attributeList = toggleIncludes(value, this.state.profile.demographicSurvey[attribute]);\n     this.setState(fp.set(['profile', 'demographicSurvey', attribute], attributeList));\n+    console.log(this.state);", "originalCommit": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0NDExOA==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364744118", "bodyText": "Woops \u2013\u00a0thanks", "author": "gjuggler", "createdAt": "2020-01-09T13:43:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5NjY3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5ODQwMQ==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363498401", "bodyText": "uh oh, what probably hilarious bug made the boolifier necessary?", "author": "als364", "createdAt": "2020-01-06T21:46:34Z", "path": "ui/src/app/pages/workspace/workspace-edit.tsx", "diffHunk": "@@ -521,7 +532,7 @@ export const WorkspaceEdit = fp.flow(withRouteConfigData(), withCurrentWorkspace\n     }\n \n     specificPopulationCheckboxSelected(populationEnum): boolean {\n-      return fp.includes(populationEnum, this.state.workspace.researchPurpose.populationDetails);\n+      return !!fp.includes(populationEnum, this.state.workspace.researchPurpose.populationDetails);", "originalCommit": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0NzM5Mw==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364747393", "bodyText": "Good question, I don't even remember making this change, lemme check on it again...\n[Update] Oh yeah, it was a Typescript error I was seeing in IntelliJ. It doesn't show up as an error in our actual compile though, which is strange. Anyway \u2013\u00a0removed for now. (I might have switched this to be a Boolean() call around the entire expression, which I find more readable than double-bang... but I'd rather just not change this if it's not needed.)", "author": "gjuggler", "createdAt": "2020-01-09T13:50:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5ODQwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5ODg5MQ==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363498891", "bodyText": "this results in the same style as the original styling? even with no margins set?", "author": "als364", "createdAt": "2020-01-06T21:47:55Z", "path": "ui/src/app/pages/workspace/workspace-edit.tsx", "diffHunk": "@@ -707,13 +718,14 @@ export const WorkspaceEdit = fp.flow(withRouteConfigData(), withCurrentWorkspace\n           </FlexRow>\n         </WorkspaceEditSection>\n         {this.isMode(WorkspaceEditMode.Duplicate) &&\n-        <FlexRow>\n+        <WorkspaceEditSection header='Options for duplicate workspace'\n+          >\n           <CheckBox\n-                 style={{height: '.66667rem', marginRight: '.31667rem', marginTop: '1.2rem'}}\n-          onChange={v => this.setState({cloneUserRole: v})}/>\n-          <WorkspaceEditSection header='Copy Original workspace Collaborators'\n-            description='Share cloned workspace with same collaborators'/>\n-        </FlexRow>\n+            style={styles.checkboxStyle}\n+            label='Share workspace with the same set of collaborators'\n+            labelStyle={styles.text}", "originalCommit": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1MDg0MA==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364750840", "bodyText": "Ah \u2013 I forgot I also tried reworking this area a bit. The issue here was that the previous styling had the checkbox wedged into the header section, which didn't fit well with having the checkbox label be clickable. The original wording also felt needlessly repetitive. I tried to reframe this as a form section with options specific to the duplicate action (which I think is what's really going on). As a bonus, I was able to make the checkbox align better with the styling of other checkboxes in this form. LMK what you think.\nBefore:\n\nAfter:", "author": "gjuggler", "createdAt": "2020-01-09T13:57:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5ODg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc2MTI5Ng==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364761296", "bodyText": "I do like the appearance of this better than the old appearance, including the larger checkbox.", "author": "als364", "createdAt": "2020-01-09T14:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5ODg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5OTIwOA==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363499208", "bodyText": "This is better wording, thank you", "author": "als364", "createdAt": "2020-01-06T21:48:41Z", "path": "ui/src/app/pages/workspace/workspace-edit.tsx", "diffHunk": "@@ -707,13 +718,14 @@ export const WorkspaceEdit = fp.flow(withRouteConfigData(), withCurrentWorkspace\n           </FlexRow>\n         </WorkspaceEditSection>\n         {this.isMode(WorkspaceEditMode.Duplicate) &&\n-        <FlexRow>\n+        <WorkspaceEditSection header='Options for duplicate workspace'\n+          >\n           <CheckBox\n-                 style={{height: '.66667rem', marginRight: '.31667rem', marginTop: '1.2rem'}}\n-          onChange={v => this.setState({cloneUserRole: v})}/>\n-          <WorkspaceEditSection header='Copy Original workspace Collaborators'\n-            description='Share cloned workspace with same collaborators'/>\n-        </FlexRow>\n+            style={styles.checkboxStyle}\n+            label='Share workspace with the same set of collaborators'", "originalCommit": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0NzkyOA==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364747928", "bodyText": "Yeah, I'm of a mixed mind about drive-by tweaks like this, but it was bothering me enough I couldn't help but try a bit of wordsmithing.", "author": "gjuggler", "createdAt": "2020-01-09T13:51:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5OTIwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5OTYwOQ==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363499609", "bodyText": "indentation is off here.", "author": "als364", "createdAt": "2020-01-06T21:49:41Z", "path": "ui/src/app/pages/workspace/workspace-edit.tsx", "diffHunk": "@@ -744,6 +757,7 @@ export const WorkspaceEdit = fp.flow(withRouteConfigData(), withCurrentWorkspace\n                 .map((rp, i) =>\n                   <WorkspaceCategory shortDescription={rp.shortDescription}\n                     longDescription={rp.longDescription} key={i}\n+                                     uniqueId={rp.uniqueId}", "originalCommit": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1MTIwOQ==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364751209", "bodyText": "Fixed", "author": "gjuggler", "createdAt": "2020-01-09T13:57:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5OTYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5OTY0OQ==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r363499649", "bodyText": "indentation is off here.", "author": "als364", "createdAt": "2020-01-06T21:49:46Z", "path": "ui/src/app/pages/workspace/workspace-edit.tsx", "diffHunk": "@@ -734,6 +746,7 @@ export const WorkspaceEdit = fp.flow(withRouteConfigData(), withCurrentWorkspace\n                 .map((rp, i) =>\n                   <WorkspaceCategory shortDescription={rp.shortDescription} key={i}\n                     longDescription={rp.longDescription}\n+                     uniqueId={rp.uniqueId}", "originalCommit": "155ca1d6025de86285a5acc8ac7ff7d03bf17cb3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc1MDk0Nw==", "url": "https://github.com/all-of-us/workbench/pull/2973#discussion_r364750947", "bodyText": "Thanks \u2013\u00a0fixed.", "author": "gjuggler", "createdAt": "2020-01-09T13:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ5OTY0OQ=="}], "type": "inlineReview"}, {"oid": "076971af3a7faff43081bda2b105af0c23ac564f", "url": "https://github.com/all-of-us/workbench/commit/076971af3a7faff43081bda2b105af0c23ac564f", "message": "Fix up a bug with the uniqueId handling in workspace-edit.", "committedDate": "2020-01-09T14:25:34Z", "type": "forcePushed"}, {"oid": "beac80ca59c1e95fa600485e86fb16b9c02f32ec", "url": "https://github.com/all-of-us/workbench/commit/beac80ca59c1e95fa600485e86fb16b9c02f32ec", "message": "Checkbox fixes: add label prop, type-safety, and unit tests.", "committedDate": "2020-01-10T02:22:11Z", "type": "commit"}, {"oid": "4ba325075eb90327e0c3fec3bd14b4b14256c318", "url": "https://github.com/all-of-us/workbench/commit/4ba325075eb90327e0c3fec3bd14b4b14256c318", "message": "A couple test fixes.", "committedDate": "2020-01-10T02:22:11Z", "type": "commit"}, {"oid": "147c7fbc0c3725db91df9aec7bf46812b8d29e07", "url": "https://github.com/all-of-us/workbench/commit/147c7fbc0c3725db91df9aec7bf46812b8d29e07", "message": "PR feedback.", "committedDate": "2020-01-10T02:22:11Z", "type": "commit"}, {"oid": "f262a20538a141f357064e5aeec03a1bd7923ec6", "url": "https://github.com/all-of-us/workbench/commit/f262a20538a141f357064e5aeec03a1bd7923ec6", "message": "Remove flex-row key changes.", "committedDate": "2020-01-10T02:22:11Z", "type": "commit"}, {"oid": "9dcad60b8c78c9c4db3c0db5b722eeae6f3dd8f4", "url": "https://github.com/all-of-us/workbench/commit/9dcad60b8c78c9c4db3c0db5b722eeae6f3dd8f4", "message": "Capitalization fix.", "committedDate": "2020-01-10T02:22:11Z", "type": "commit"}, {"oid": "e53f5f3219eeca652cc8144a380b98b1a769fafb", "url": "https://github.com/all-of-us/workbench/commit/e53f5f3219eeca652cc8144a380b98b1a769fafb", "message": "Fix up a bug with the uniqueId handling in workspace-edit.", "committedDate": "2020-01-10T02:22:11Z", "type": "commit"}, {"oid": "a1b05f12ad924c2f90ea91881aa2acf617e55d96", "url": "https://github.com/all-of-us/workbench/commit/a1b05f12ad924c2f90ea91881aa2acf617e55d96", "message": "Fix checkboxes in the account creation survey.", "committedDate": "2020-01-10T06:15:17Z", "type": "commit"}, {"oid": "a1b05f12ad924c2f90ea91881aa2acf617e55d96", "url": "https://github.com/all-of-us/workbench/commit/a1b05f12ad924c2f90ea91881aa2acf617e55d96", "message": "Fix checkboxes in the account creation survey.", "committedDate": "2020-01-10T06:15:17Z", "type": "forcePushed"}]}