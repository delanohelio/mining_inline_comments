{"pr_number": 3907, "pr_title": "[RW-4847][risk=low] Use swagger codegen plugin over custom gradle tasks", "pr_createdAt": "2020-08-24T04:47:02Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3907", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1NTgzMQ==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475655831", "bodyText": "aside: I never quite grokked what needs to go here vs. an external properties file.", "author": "jaycarlton", "createdAt": "2020-08-24T14:31:40Z", "path": "api/build.gradle", "diffHunk": "@@ -1,12 +1,10 @@\n-import io.swagger.codegen.DefaultGenerator\n-import io.swagger.codegen.config.CodegenConfigurator\n import org.pmiops.workbench.tooling.GenerateAPIListingTask\n import org.pmiops.workbench.tooling.IncrementalHotSwapTask\n \n // Runs before all tasks. Sets up properties and dependencies for the build\n // process itself.\n buildscript {\n-  // External propertiges on the default project. Values declared in ext blocks\n+  // External properties on the default project. Values declared in ext blocks\n   // outside of the buildscsript block aren't usable here.\n   ext {\n     ELASTICSEARCH_VERSION = '6.8.3'", "originalCommit": "1b83f15c61a71398a6d89052684b123cea15e0f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1Njk2MA==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475656960", "bodyText": "why Captcha and not ReCaptcha?", "author": "jaycarlton", "createdAt": "2020-08-24T14:33:24Z", "path": "api/src/main/resources/captcha.yaml", "diffHunk": "@@ -3,10 +3,10 @@ info:\n   title: Captcha", "originalCommit": "1b83f15c61a71398a6d89052684b123cea15e0f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc4MDIyNQ==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475780225", "bodyText": "This should pretty clearly be recaptcha. However, I won't be making that change here as it is an existing issue and I'd need to rename the codegen package for consistency.", "author": "calbach", "createdAt": "2020-08-24T17:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1Njk2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1NzYxMA==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475657610", "bodyText": "You should be able to add deprecated: true here so that it maps to @Deprecated in Java.", "author": "jaycarlton", "createdAt": "2020-08-24T14:34:18Z", "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -5055,10 +5055,9 @@ definitions:\n         type: string\n       contactEmailFailure:\n         description: >\n-          Whether or not contact email could be added to verification list. No longer in use.\n+          DEPRECATED. Whether or not contact email could be added to verification list. No longer in use.", "originalCommit": "1b83f15c61a71398a6d89052684b123cea15e0f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc4NDYyMQ==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475784621", "bodyText": "I removed it because the Swagger validator rejects it. Indeed, it appears to have no effect on the generated Java code that I can see. The online Swagger editor also rejects it.\nThere is support for marking a method as deprecated in Swagger 2, but I found no documentation for property deprecation.", "author": "calbach", "createdAt": "2020-08-24T17:38:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1NzYxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1ODE5MA==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475658190", "bodyText": "nit: you could just do **/*.md in case you want another top-level markdown file.", "author": "jaycarlton", "createdAt": "2020-08-24T14:35:09Z", "path": "api/.swagger2-codegen-ignore", "diffHunk": "@@ -22,18 +22,22 @@\n # Then explicitly reverse the ignore rule for a single file:\n #!docs/README.md\n \n-README.md\n-pom.xml\n-.gitignore\n-.travis.yml\n-build.sbt\n-docs/*.md\n-settings.gradle\n-git_push.sh\n-gradle.properties\n-src/main/AndroidManifest.xml\n-src/main/resources/application.properties\n-src/test/**\n-gradlew\n-gradlew.bat\n-gradle/**\n+build/swagger2/README.md", "originalCommit": "1b83f15c61a71398a6d89052684b123cea15e0f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5NzM0NQ==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475797345", "bodyText": "This is an ignore file for the output of Swagger codegen, it doesn't relate to the files that we check in to the repository. I also don't see a reason to make changes in this PR since only the base path changed.", "author": "calbach", "createdAt": "2020-08-24T18:01:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1ODE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY2MTM3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475661375", "bodyText": "nit: you could declare constants like MODEL_SUBPACKAGE = 'model' and API_SUBPACKAGE so they're not repeated for each of these. Or even have a little method for generating all the additional package properties.", "author": "jaycarlton", "createdAt": "2020-08-24T14:39:53Z", "path": "api/build.gradle", "diffHunk": "@@ -69,251 +66,208 @@ apply plugin: 'org.owasp.dependencycheck'\n apply plugin: 'org.springframework.boot'\n apply plugin: 'war'\n \n-def swaggerTargetFolder = 'src/generated/java'\n-// This path is the Java sources root for finding any overridden Swagger-codegen\n-// templates we may be using.\n-def swaggerTemplateDir = 'src/main/resources/swaggercodegen'\n-def workbenchApiSourceFile = 'src/main/resources/workbench-api.yaml'\n-\n-task generateWorkbenchApi {\n-  group 'swagger-codegen'\n-  description 'Generates the Spring controllers and API model classes in Java.'\n-  dependsOn tasks.validateSwagger\n-  inputs.file(\"$projectDir/$workbenchApiSourceFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"$projectDir/$workbenchApiSourceFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('spring')\n-    config.setAdditionalProperties([\n-            'apiPackage'     : 'org.pmiops.workbench.api',\n-            'modelPackage'   : 'org.pmiops.workbench.model',\n-            'sourceFolder'   : swaggerTargetFolder,\n-            'useTags'        : 'true',\n-            // Generates delegate interfaces; used to make method annotations work without\n-            // having to copy them to our implementations.\n-            'delegatePattern': 'true'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def fireCloudApiFile = 'src/main/resources/fireCloud.yaml'\n-\n-task generateFireCloudClient {\n-  group 'swagger-codegen'\n-  description 'Generates the FireCloud service client and model class definitions from Swagger file.'\n-  inputs.file(\"$projectDir/$fireCloudApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"$projectDir/$fireCloudApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setModelNamePrefix(\"Firecloud\")\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.firecloud',\n-            'modelPackage'     : 'org.pmiops.workbench.firecloud.model',\n-            'apiPackage'       : 'org.pmiops.workbench.firecloud.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def notebooksApiFile = 'src/main/resources/notebooks.yaml'\n-\n-task generateNotebooksClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Leonardo Notebooks client Java code.'\n-  inputs.file(\"$projectDir/$notebooksApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$notebooksApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.notebooks',\n-            'modelPackage'     : 'org.pmiops.workbench.notebooks.model',\n-            'apiPackage'       : 'org.pmiops.workbench.notebooks.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def jiraApiFile = 'src/main/resources/jira.yaml'\n-\n-task generateJiraClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Jira client Java code.'\n-  inputs.file(\"$projectDir/$jiraApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"$projectDir/$jiraApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.jira',\n-            'modelPackage'     : 'org.pmiops.workbench.jira.model',\n-            'apiPackage'       : 'org.pmiops.workbench.jira.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def mandrillApiFile = 'src/main/resources/mandrill_api.yaml'\n-\n-task generateMandrillClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Mandrill client Java code.'\n-\n-  inputs.file(\"$projectDir/$mandrillApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$mandrillApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.mandrill',\n-            'modelPackage'     : 'org.pmiops.workbench.mandrill.model',\n-            'apiPackage'       : 'org.pmiops.workbench.mandrill.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def moodleApiFile = 'src/main/resources/moodle.yaml'\n-\n-task generateMoodleClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Moodle client Java code.'\n-\n-  inputs.file(\"$projectDir/$moodleApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$moodleApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.moodle',\n-            'modelPackage'     : 'org.pmiops.workbench.moodle.model',\n-            'apiPackage'       : 'org.pmiops.workbench.moodle.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def rdrApiFile = 'src/main/resources/rdr.yaml'\n-\n-task generateRdrClient {\n-  group 'swagger-codegen'\n-  description 'Generates the AoU Raw Data Repository API client Java code.'\n-\n-  inputs.file(\"$projectDir/$rdrApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$rdrApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.rdr',\n-            'modelPackage'     : 'org.pmiops.workbench.rdr.model',\n-            'apiPackage'       : 'org.pmiops.workbench.rdr.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def captchaApiFile = 'src/main/resources/captcha.yaml'\n-\n-task generateCaptchaClient {\n-  group 'swagger-codegen'\n-  description 'Generates the ReCAPTCHA API Java code.'\n-\n-  inputs.file(\"$projectDir/$captchaApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$captchaApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.captcha',\n-            'modelPackage'     : 'org.pmiops.workbench.captcha.model',\n-            'apiPackage'       : 'org.pmiops.workbench.captcha.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def shibbolethApiFile = 'src/main/resources/shibboleth.yaml'\n-\n-task generateShibbolethClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Shibboleth API Java code.'\n-\n-  inputs.file(\"$projectDir/$shibbolethApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$shibbolethApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setModelNamePrefix(\"Shibboleth\")\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.shibboleth',\n-            'modelPackage'     : 'org.pmiops.workbench.shibboleth.model',\n-            'apiPackage'       : 'org.pmiops.workbench.shibboleth.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n+// Artifact configurations derived from base configs. Configuration names\n+// are concatenated by the Java plugin.\n+// https://docs.gradle.org/current/userguide/java_plugin.html#java_source_set_configurations\n+configurations {\n+  __bigQueryTest__Compile.extendsFrom testCompile\n+  __bigQueryTest__Runtime.extendsFrom testRuntime\n+\n+  __integration__Compile.extendsFrom testCompile\n+  __integration__Runtime.extendsFrom testRuntime\n+\n+  __tools__Implementation.extendsFrom implementation\n+  __tools__RuntimeOnly.extendsFrom runtimeOnly\n+\n+  __swaggerCodegenV2__\n+\n+  generatedCompile {\n+    exclude group: 'com.google.guava', module:'guava-jdk5'\n+  }\n+}\n+\n+def swagger2CodegenDir = \"$buildDir/swagger2\"\n+\n+// Configuration for the Swagger Gradle plugin:\n+// https://github.com/int128/gradle-swagger-generator-plugin\n+//\n+// Note: The tasks below share an output directory, but we rely on the swagger\n+// ignore file to ensure they don't step on eachother's outputs. If this were to\n+// happen in the future due to a regression or a codegen upgrade, the issue\n+// would likely manifest as an infinite build loop on our continuous incremental\n+// build (e.g. dev-up). Run ./gradlew copmileGeneratedJava --info to see which\n+// overlapping files/diretories may be getting written by different Swagger\n+// codegen tasks.\n+swaggerSources {\n+  // This path is the Java sources root for finding any overridden Swagger-codegen\n+  // templates we may be using.\n+  def swaggerTemplateDir = \"$projectDir/src/main/resources/swaggercodegen\"\n+  def swaggerCodegenPackage = 'org.pmiops.workbench'\n+  // Raw options passed to the Swagger codegen CLI.\n+  def rawOptsSwagger2 = [\n+    // By default, the ignore file within the output directory is used. Override\n+    // as we don't track the output directory in source.\n+    '--ignore-file-override', \"$projectDir/.swagger2-codegen-ignore\"\n+  ]\n+  def baseJavaProps = [\n+    'library'          : 'okhttp-gson',\n+    'serializableModel': 'true',\n+    'dateLibrary'      : 'java8'\n+  ]\n+  workbench {\n+    inputFile = file('src/main/resources/workbench-api.yaml')\n+    code {\n+      configuration = configurations.__swaggerCodegenV2__\n+      language = 'spring'\n+      outputDir = file(swagger2CodegenDir)\n+      templateDir = file(swaggerTemplateDir)\n+      // Since the output directory is shared among these swagger tasks, wiping\n+      // the directory would result in task invalidation / churn.\n+      wipeOutputDir = false\n+      rawOptions = rawOptsSwagger2\n+      additionalProperties = [\n+        'modelPackage'     : \"${swaggerCodegenPackage}.model\",\n+        'apiPackage'       : \"${swaggerCodegenPackage}.api\",\n+        'useTags'        : 'true',\n+        // Generates delegate interfaces; used to make method annotations work without\n+        // having to copy them to our implementations.\n+        'delegatePattern': 'true'\n+      ]\n+    }\n+  }\n+  firecloud {\n+    inputFile = file('src/main/resources/firecloud.yaml')\n+    code {\n+      configuration = configurations.__swaggerCodegenV2__\n+      language = 'java'\n+      outputDir = file(swagger2CodegenDir)\n+      templateDir = file(swaggerTemplateDir)\n+      wipeOutputDir = false\n+      rawOptions = rawOptsSwagger2 + [\n+        '--model-name-prefix', 'Firecloud'\n+      ]\n+      additionalProperties = baseJavaProps + [\n+        'invokerPackage'   : \"${swaggerCodegenPackage}.firecloud\",\n+        'modelPackage'     : \"${swaggerCodegenPackage}.firecloud.model\",", "originalCommit": "1b83f15c61a71398a6d89052684b123cea15e0f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3OTAzNA==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475779034", "bodyText": "Second suggestion was exactly what I was looking for - for some reason I thought you couldn't do helper functions like this within the Gradle Groovy DSL. I've finally eliminated most of this boilplerate. Thanks, this was very unsatisfying in my original PR.", "author": "calbach", "createdAt": "2020-08-24T17:27:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY2MTM3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY2MjAxOQ==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475662019", "bodyText": "Likewise, is there a way to factor out the common settings across all of these client codegen tasks? Kotlin DSL is probably easier for that.", "author": "jaycarlton", "createdAt": "2020-08-24T14:40:45Z", "path": "api/build.gradle", "diffHunk": "@@ -69,251 +66,208 @@ apply plugin: 'org.owasp.dependencycheck'\n apply plugin: 'org.springframework.boot'\n apply plugin: 'war'\n \n-def swaggerTargetFolder = 'src/generated/java'\n-// This path is the Java sources root for finding any overridden Swagger-codegen\n-// templates we may be using.\n-def swaggerTemplateDir = 'src/main/resources/swaggercodegen'\n-def workbenchApiSourceFile = 'src/main/resources/workbench-api.yaml'\n-\n-task generateWorkbenchApi {\n-  group 'swagger-codegen'\n-  description 'Generates the Spring controllers and API model classes in Java.'\n-  dependsOn tasks.validateSwagger\n-  inputs.file(\"$projectDir/$workbenchApiSourceFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"$projectDir/$workbenchApiSourceFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('spring')\n-    config.setAdditionalProperties([\n-            'apiPackage'     : 'org.pmiops.workbench.api',\n-            'modelPackage'   : 'org.pmiops.workbench.model',\n-            'sourceFolder'   : swaggerTargetFolder,\n-            'useTags'        : 'true',\n-            // Generates delegate interfaces; used to make method annotations work without\n-            // having to copy them to our implementations.\n-            'delegatePattern': 'true'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def fireCloudApiFile = 'src/main/resources/fireCloud.yaml'\n-\n-task generateFireCloudClient {\n-  group 'swagger-codegen'\n-  description 'Generates the FireCloud service client and model class definitions from Swagger file.'\n-  inputs.file(\"$projectDir/$fireCloudApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"$projectDir/$fireCloudApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setModelNamePrefix(\"Firecloud\")\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.firecloud',\n-            'modelPackage'     : 'org.pmiops.workbench.firecloud.model',\n-            'apiPackage'       : 'org.pmiops.workbench.firecloud.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def notebooksApiFile = 'src/main/resources/notebooks.yaml'\n-\n-task generateNotebooksClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Leonardo Notebooks client Java code.'\n-  inputs.file(\"$projectDir/$notebooksApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$notebooksApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.notebooks',\n-            'modelPackage'     : 'org.pmiops.workbench.notebooks.model',\n-            'apiPackage'       : 'org.pmiops.workbench.notebooks.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def jiraApiFile = 'src/main/resources/jira.yaml'\n-\n-task generateJiraClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Jira client Java code.'\n-  inputs.file(\"$projectDir/$jiraApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"$projectDir/$jiraApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.jira',\n-            'modelPackage'     : 'org.pmiops.workbench.jira.model',\n-            'apiPackage'       : 'org.pmiops.workbench.jira.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def mandrillApiFile = 'src/main/resources/mandrill_api.yaml'\n-\n-task generateMandrillClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Mandrill client Java code.'\n-\n-  inputs.file(\"$projectDir/$mandrillApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$mandrillApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.mandrill',\n-            'modelPackage'     : 'org.pmiops.workbench.mandrill.model',\n-            'apiPackage'       : 'org.pmiops.workbench.mandrill.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def moodleApiFile = 'src/main/resources/moodle.yaml'\n-\n-task generateMoodleClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Moodle client Java code.'\n-\n-  inputs.file(\"$projectDir/$moodleApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$moodleApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.moodle',\n-            'modelPackage'     : 'org.pmiops.workbench.moodle.model',\n-            'apiPackage'       : 'org.pmiops.workbench.moodle.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def rdrApiFile = 'src/main/resources/rdr.yaml'\n-\n-task generateRdrClient {\n-  group 'swagger-codegen'\n-  description 'Generates the AoU Raw Data Repository API client Java code.'\n-\n-  inputs.file(\"$projectDir/$rdrApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$rdrApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.rdr',\n-            'modelPackage'     : 'org.pmiops.workbench.rdr.model',\n-            'apiPackage'       : 'org.pmiops.workbench.rdr.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def captchaApiFile = 'src/main/resources/captcha.yaml'\n-\n-task generateCaptchaClient {\n-  group 'swagger-codegen'\n-  description 'Generates the ReCAPTCHA API Java code.'\n-\n-  inputs.file(\"$projectDir/$captchaApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$captchaApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.captcha',\n-            'modelPackage'     : 'org.pmiops.workbench.captcha.model',\n-            'apiPackage'       : 'org.pmiops.workbench.captcha.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def shibbolethApiFile = 'src/main/resources/shibboleth.yaml'\n-\n-task generateShibbolethClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Shibboleth API Java code.'\n-\n-  inputs.file(\"$projectDir/$shibbolethApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$shibbolethApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setModelNamePrefix(\"Shibboleth\")\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.shibboleth',\n-            'modelPackage'     : 'org.pmiops.workbench.shibboleth.model',\n-            'apiPackage'       : 'org.pmiops.workbench.shibboleth.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n+// Artifact configurations derived from base configs. Configuration names\n+// are concatenated by the Java plugin.\n+// https://docs.gradle.org/current/userguide/java_plugin.html#java_source_set_configurations\n+configurations {\n+  __bigQueryTest__Compile.extendsFrom testCompile\n+  __bigQueryTest__Runtime.extendsFrom testRuntime\n+\n+  __integration__Compile.extendsFrom testCompile\n+  __integration__Runtime.extendsFrom testRuntime\n+\n+  __tools__Implementation.extendsFrom implementation\n+  __tools__RuntimeOnly.extendsFrom runtimeOnly\n+\n+  __swaggerCodegenV2__\n+\n+  generatedCompile {\n+    exclude group: 'com.google.guava', module:'guava-jdk5'\n+  }\n+}\n+\n+def swagger2CodegenDir = \"$buildDir/swagger2\"\n+\n+// Configuration for the Swagger Gradle plugin:\n+// https://github.com/int128/gradle-swagger-generator-plugin\n+//\n+// Note: The tasks below share an output directory, but we rely on the swagger\n+// ignore file to ensure they don't step on eachother's outputs. If this were to\n+// happen in the future due to a regression or a codegen upgrade, the issue\n+// would likely manifest as an infinite build loop on our continuous incremental\n+// build (e.g. dev-up). Run ./gradlew copmileGeneratedJava --info to see which\n+// overlapping files/diretories may be getting written by different Swagger\n+// codegen tasks.\n+swaggerSources {\n+  // This path is the Java sources root for finding any overridden Swagger-codegen\n+  // templates we may be using.\n+  def swaggerTemplateDir = \"$projectDir/src/main/resources/swaggercodegen\"\n+  def swaggerCodegenPackage = 'org.pmiops.workbench'\n+  // Raw options passed to the Swagger codegen CLI.\n+  def rawOptsSwagger2 = [\n+    // By default, the ignore file within the output directory is used. Override\n+    // as we don't track the output directory in source.\n+    '--ignore-file-override', \"$projectDir/.swagger2-codegen-ignore\"\n+  ]\n+  def baseJavaProps = [\n+    'library'          : 'okhttp-gson',\n+    'serializableModel': 'true',\n+    'dateLibrary'      : 'java8'\n+  ]\n+  workbench {\n+    inputFile = file('src/main/resources/workbench-api.yaml')\n+    code {\n+      configuration = configurations.__swaggerCodegenV2__\n+      language = 'spring'\n+      outputDir = file(swagger2CodegenDir)\n+      templateDir = file(swaggerTemplateDir)\n+      // Since the output directory is shared among these swagger tasks, wiping\n+      // the directory would result in task invalidation / churn.\n+      wipeOutputDir = false\n+      rawOptions = rawOptsSwagger2\n+      additionalProperties = [\n+        'modelPackage'     : \"${swaggerCodegenPackage}.model\",\n+        'apiPackage'       : \"${swaggerCodegenPackage}.api\",\n+        'useTags'        : 'true',\n+        // Generates delegate interfaces; used to make method annotations work without\n+        // having to copy them to our implementations.\n+        'delegatePattern': 'true'\n+      ]\n+    }\n+  }\n+  firecloud {\n+    inputFile = file('src/main/resources/firecloud.yaml')\n+    code {\n+      configuration = configurations.__swaggerCodegenV2__\n+      language = 'java'\n+      outputDir = file(swagger2CodegenDir)\n+      templateDir = file(swaggerTemplateDir)\n+      wipeOutputDir = false\n+      rawOptions = rawOptsSwagger2 + [\n+        '--model-name-prefix', 'Firecloud'\n+      ]\n+      additionalProperties = baseJavaProps + [\n+        'invokerPackage'   : \"${swaggerCodegenPackage}.firecloud\",\n+        'modelPackage'     : \"${swaggerCodegenPackage}.firecloud.model\",\n+        'apiPackage'       : \"${swaggerCodegenPackage}.firecloud.api\",\n+      ]\n+    }\n+  }\n+  notebooks {\n+    inputFile = file('src/main/resources/notebooks.yaml')\n+    code {\n+      configuration = configurations.__swaggerCodegenV2__\n+      language = 'java'", "originalCommit": "1b83f15c61a71398a6d89052684b123cea15e0f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5ODQ5NA==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475798494", "bodyText": "These were the cause of the test breakages - it was resulting in a default value of false. I suspect the Swagger plugin may convert to JSON before passing to the codegen CLI, which would explain why the resulting code was different. I didn't see a good reason to keep these lines, though perhaps I could have also done default: null, if you want to leave them around.", "author": "calbach", "createdAt": "2020-08-24T18:03:36Z", "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -4199,7 +4199,6 @@ definitions:\n         type: string\n       approved:\n         type: boolean\n-        default:", "originalCommit": "cd1a75c80325fc5dbc60b3e3123ec4728fdb54d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4ODM4MA==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r476588380", "bodyText": "tl;dr, if you really want 3-state boolean semantics (\ud83e\udd2e ), then you need default: null.\nI put in a PR a while back to default all booleans explicitly because the null default made them all tri-state, and since we don't  have proper constructors, we kept having  issues. There are only a couple of places where we want null booleans. (I'm planning on writing about this in one of the Java best practices guides: IMO if you need null booleans, you need an enum). It's also a painful mapping to typescript.\nSo the new convention I proposed was to put a default value for all booleans in Swagger files, and this new issue seems to me to be an even stronger argument  for it.", "author": "jaycarlton", "createdAt": "2020-08-25T16:42:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5ODQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwMjg4OA==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r476602888", "bodyText": "I tried default: null as well. It doesn't work with the plugin, it has the same behavior as default: , which both appear to be interpreted as default: false", "author": "calbach", "createdAt": "2020-08-25T17:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5ODQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1NzM0NQ==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r476657345", "bodyText": "That's definitely a regression then. That, or we were relying on undocumented behavior, which I don't believe we were.", "author": "jaycarlton", "createdAt": "2020-08-25T18:36:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5ODQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MzE0Ng==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r476663146", "bodyText": "What is the regression? Having to omit the default rather than stating default: null would be a change, but it seems pretty insignificant and non-functional to me. If you're concerned about documentation, I can replace these instances with a comment.", "author": "calbach", "createdAt": "2020-08-25T18:46:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5ODQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyMTQ5Ng==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r476721496", "bodyText": "I mean a boolean with no stated default changing causing generated classes to initialize members to false instead of null seems like a potentially (silently) breaking change.", "author": "jaycarlton", "createdAt": "2020-08-25T20:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5ODQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkxNDU4OQ==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r476914589", "bodyText": "I'm not too surprised to see undefined behavior out of default: null and especially default: . I'm probably not going to spend more time investigating this issue unless you have clear documentation that Java code gen is supposed to respond to default: null in a specific way. Even then, it's probably a idiosyncrasy with how the plugin works - best I can do is file a bug, this issue is not severe enough to back out of this approach.\nTo be clear, this has nothing to do with Swagger 3. Everything is still on Swagger 2. The change here is to use a plugin instead of our own bespoke codegen task.", "author": "calbach", "createdAt": "2020-08-26T00:33:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5ODQ5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwNjkxMQ==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475806911", "bodyText": "Very  nice. If they're effectively constants, maybe use UPPER_SNAKE_CASE.", "author": "jaycarlton", "createdAt": "2020-08-24T18:17:18Z", "path": "api/build.gradle", "diffHunk": "@@ -86,7 +86,45 @@ configurations {\n   }\n }\n \n-def swagger2CodegenDir = \"$buildDir/swagger2\"\n+// Shared variables for Swagger codegen. Use \"ext\" rather than \"def\" to allow\n+// access globally, including from within helper functions.\n+ext.swaggerCodegenBasePkg = 'org.pmiops.workbench'", "originalCommit": "f8bd861c166bcb91541ae855c496ff9c5a4fdbdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgxMjIzMg==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475812232", "bodyText": "sure, done", "author": "calbach", "createdAt": "2020-08-24T18:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwNjkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwODIxNg==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475808216", "bodyText": "Is this a change? I  thought  it was defaulting to joda today for datetimes, at least in  our own  API models. java8 is the recommended  replacement for joda, but there would be a bit of fixup  I'd think.", "author": "jaycarlton", "createdAt": "2020-08-24T18:19:53Z", "path": "api/build.gradle", "diffHunk": "@@ -86,7 +86,45 @@ configurations {\n   }\n }\n \n-def swagger2CodegenDir = \"$buildDir/swagger2\"\n+// Shared variables for Swagger codegen. Use \"ext\" rather than \"def\" to allow\n+// access globally, including from within helper functions.\n+ext.swaggerCodegenBasePkg = 'org.pmiops.workbench'\n+ext.swagger2CodegenDir = \"$buildDir/swagger2\"\n+// This path is the Java sources root for finding any overridden Swagger-codegen\n+// templates we may be using.\n+ext.swaggerTemplateDir = \"$projectDir/src/main/resources/swaggercodegen\"\n+// Raw options passed to the Swagger codegen CLI.\n+ext.swagger2RawOpts = [\n+  // By default, the ignore file within the output directory is used. Override\n+  // as we don't track the output directory in source.\n+  '--ignore-file-override', \"$projectDir/.swagger2-codegen-ignore\"\n+]\n+\n+// Helper function to define a Java client Swagger codegen target for the Gradle\n+// Swagger Generator Plugin: https://github.com/int128/gradle-swagger-generator-plugin#code-generation\n+def swagger2JavaClient(yaml, pkg, rawOptExtras = []) {\n+  return {\n+    inputFile = file(\"src/main/resources/${yaml}\")\n+    code {\n+      configuration = configurations.__swaggerCodegenV2__\n+      language = 'java'\n+      outputDir = file(swagger2CodegenDir)\n+      templateDir = file(swaggerTemplateDir)\n+      // Since the output directory is shared among these swagger tasks, wiping\n+      // the directory would result in task invalidation / churn.\n+      wipeOutputDir = false\n+      rawOptions = swagger2RawOpts + rawOptExtras\n+      additionalProperties = [\n+        'library'          : 'okhttp-gson',\n+        'serializableModel': 'true',\n+        'dateLibrary'      : 'java8',", "originalCommit": "f8bd861c166bcb91541ae855c496ff9c5a4fdbdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwOTgxMQ==", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475809811", "bodyText": "It's not a change, see the previous value above: https://github.com/all-of-us/workbench/pull/3907/files#diff-dd8fd6d45c4e2eccf0f278e121d714d8L150", "author": "calbach", "createdAt": "2020-08-24T18:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwODIxNg=="}], "type": "inlineReview"}, {"oid": "a53a1c8db6dbbaa6d04156c866f08503667fdbe9", "url": "https://github.com/all-of-us/workbench/commit/a53a1c8db6dbbaa6d04156c866f08503667fdbe9", "message": "finally works", "committedDate": "2020-08-25T04:24:46Z", "type": "commit"}, {"oid": "159be11314e516fd71951d55f4cf464f088c863f", "url": "https://github.com/all-of-us/workbench/commit/159be11314e516fd71951d55f4cf464f088c863f", "message": "single dep", "committedDate": "2020-08-25T04:24:46Z", "type": "commit"}, {"oid": "9b7300564d19d94a1cffec5abda3678363288278", "url": "https://github.com/all-of-us/workbench/commit/9b7300564d19d94a1cffec5abda3678363288278", "message": "cleanups", "committedDate": "2020-08-25T04:24:46Z", "type": "commit"}, {"oid": "98009087b7b1bd6f9cef0cce14bab0de41bc48b2", "url": "https://github.com/all-of-us/workbench/commit/98009087b7b1bd6f9cef0cce14bab0de41bc48b2", "message": "self-review", "committedDate": "2020-08-25T04:24:46Z", "type": "commit"}, {"oid": "afe7d510225d4ed57ae2b06356b3cddbed16db10", "url": "https://github.com/all-of-us/workbench/commit/afe7d510225d4ed57ae2b06356b3cddbed16db10", "message": "Fix invalid swagger..", "committedDate": "2020-08-25T04:24:46Z", "type": "commit"}, {"oid": "e766ab744a05cc9e914e2e898f16155f7bd0da10", "url": "https://github.com/all-of-us/workbench/commit/e766ab744a05cc9e914e2e898f16155f7bd0da10", "message": "swagger2 ignore", "committedDate": "2020-08-25T04:24:46Z", "type": "commit"}, {"oid": "0a844a76035b1474de75e29c7f3642cc96fa3d30", "url": "https://github.com/all-of-us/workbench/commit/0a844a76035b1474de75e29c7f3642cc96fa3d30", "message": "mv to helper function", "committedDate": "2020-08-25T04:24:47Z", "type": "commit"}, {"oid": "8212342334f59d440a771436f1052dadda096c07", "url": "https://github.com/all-of-us/workbench/commit/8212342334f59d440a771436f1052dadda096c07", "message": "drop empty defaults", "committedDate": "2020-08-25T04:24:47Z", "type": "commit"}, {"oid": "477d3966c70674d8332c3caeb3ae6669b23dc88f", "url": "https://github.com/all-of-us/workbench/commit/477d3966c70674d8332c3caeb3ae6669b23dc88f", "message": "const case", "committedDate": "2020-08-25T04:24:47Z", "type": "commit"}, {"oid": "560ce89740be2f28887ca569b1eca1713f1e201c", "url": "https://github.com/all-of-us/workbench/commit/560ce89740be2f28887ca569b1eca1713f1e201c", "message": "Add sourceFolder \"\" to play better with Intellij", "committedDate": "2020-08-25T04:24:47Z", "type": "commit"}, {"oid": "560ce89740be2f28887ca569b1eca1713f1e201c", "url": "https://github.com/all-of-us/workbench/commit/560ce89740be2f28887ca569b1eca1713f1e201c", "message": "Add sourceFolder \"\" to play better with Intellij", "committedDate": "2020-08-25T04:24:47Z", "type": "forcePushed"}]}