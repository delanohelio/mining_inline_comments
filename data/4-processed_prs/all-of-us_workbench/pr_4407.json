{"pr_number": 4407, "pr_title": "[RW-5691][risk=no] Remove Remaining Projections", "pr_createdAt": "2020-12-15T15:11:08Z", "pr_url": "https://github.com/all-of-us/workbench/pull/4407", "timeline": [{"oid": "c6fdc5dd9fedf5a0e17a09459cf2386b723f1f1b", "url": "https://github.com/all-of-us/workbench/commit/c6fdc5dd9fedf5a0e17a09459cf2386b723f1f1b", "message": "start", "committedDate": "2020-12-14T19:19:31Z", "type": "commit"}, {"oid": "44e03ce0b55803f81ba4a453c591028658b31eb1", "url": "https://github.com/all-of-us/workbench/commit/44e03ce0b55803f81ba4a453c591028658b31eb1", "message": "kill ProjectedReportingInstitution class", "committedDate": "2020-12-14T19:19:31Z", "type": "commit"}, {"oid": "2d5f15fd360b64e28daf21cc290fb6a2f670e938", "url": "https://github.com/all-of-us/workbench/commit/2d5f15fd360b64e28daf21cc290fb6a2f670e938", "message": "progress", "committedDate": "2020-12-14T19:19:31Z", "type": "commit"}, {"oid": "25777b1b233d48e0cfbf6f85aeddb462cba7bcb8", "url": "https://github.com/all-of-us/workbench/commit/25777b1b233d48e0cfbf6f85aeddb462cba7bcb8", "message": "progress", "committedDate": "2020-12-14T19:19:31Z", "type": "commit"}, {"oid": "fca4071b5e20c908e0e7e8cc1b995c1fe4a96d79", "url": "https://github.com/all-of-us/workbench/commit/fca4071b5e20c908e0e7e8cc1b995c1fe4a96d79", "message": "add users & spotless", "committedDate": "2020-12-14T19:44:03Z", "type": "commit"}, {"oid": "b845f702850c7ec84a11cb633caa28740e0ad092", "url": "https://github.com/all-of-us/workbench/commit/b845f702850c7ec84a11cb633caa28740e0ad092", "message": "migrate remaining tables away from projections", "committedDate": "2020-12-15T15:00:09Z", "type": "commit"}, {"oid": "3902359d997cb35acad94dee5ea86b877b02245b", "url": "https://github.com/all-of-us/workbench/commit/3902359d997cb35acad94dee5ea86b877b02245b", "message": "reemove more methods", "committedDate": "2020-12-15T15:07:56Z", "type": "commit"}, {"oid": "abbe490acec50c2c3e75082d2a090324211ba146", "url": "https://github.com/all-of-us/workbench/commit/abbe490acec50c2c3e75082d2a090324211ba146", "message": "spotless", "committedDate": "2020-12-15T15:08:22Z", "type": "commit"}, {"oid": "b0fb2f648ad1758773bd0841d00bbe1b97725f31", "url": "https://github.com/all-of-us/workbench/commit/b0fb2f648ad1758773bd0841d00bbe1b97725f31", "message": "implement missing method", "committedDate": "2020-12-15T15:44:48Z", "type": "commit"}, {"oid": "83421df3cbed16e4b28d167d085fa553355db048", "url": "https://github.com/all-of-us/workbench/commit/83421df3cbed16e4b28d167d085fa553355db048", "message": "spotless", "committedDate": "2020-12-15T18:31:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzNzA5OA==", "url": "https://github.com/all-of-us/workbench/pull/4407#discussion_r543637098", "bodyText": "Since you hardcode the column names below anyways - is there a reason not to just do a select * here?", "author": "calbach", "createdAt": "2020-12-15T19:44:54Z", "path": "api/src/main/java/org/pmiops/workbench/db/jdbc/ReportingQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,294 @@\n+package org.pmiops.workbench.db.jdbc;\n+\n+import static org.pmiops.workbench.db.model.DbStorageEnums.billingAccountTypeFromStorage;\n+import static org.pmiops.workbench.db.model.DbStorageEnums.billingStatusFromStorage;\n+import static org.pmiops.workbench.db.model.DbStorageEnums.dataAccessLevelFromStorage;\n+import static org.pmiops.workbench.db.model.DbStorageEnums.institutionDUATypeFromStorage;\n+import static org.pmiops.workbench.db.model.DbStorageEnums.organizationTypeFromStorage;\n+import static org.pmiops.workbench.utils.mappers.CommonMappers.offsetDateTimeUtc;\n+\n+import java.util.List;\n+import org.pmiops.workbench.model.ReportingCohort;\n+import org.pmiops.workbench.model.ReportingDataset;\n+import org.pmiops.workbench.model.ReportingDatasetCohort;\n+import org.pmiops.workbench.model.ReportingDatasetConceptSet;\n+import org.pmiops.workbench.model.ReportingDatasetDomainIdValue;\n+import org.pmiops.workbench.model.ReportingInstitution;\n+import org.pmiops.workbench.model.ReportingUser;\n+import org.pmiops.workbench.model.ReportingWorkspace;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ReportingQueryServiceImpl implements ReportingQueryService {\n+\n+  private final JdbcTemplate jdbcTemplate;\n+\n+  public ReportingQueryServiceImpl(JdbcTemplate jdbcTemplate) {\n+    this.jdbcTemplate = jdbcTemplate;\n+  }\n+\n+  @Override\n+  public List<ReportingWorkspace> getWorkspaces() {\n+    return jdbcTemplate.query(\n+        \"SELECT \\n\"\n+            + \"  billing_account_type,\\n\"", "originalCommit": "83421df3cbed16e4b28d167d085fa553355db048", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxNTI5NA==", "url": "https://github.com/all-of-us/workbench/pull/4407#discussion_r543715294", "bodyText": "The Ruby stuff is hardened against places things need to be renamed for some reason. If it's not needed anymore that would be an OK simplification.\nAt HubSpot we had a human SQL linter who would watch hundreds of repos for SQL changes via some kind of script and jump in to tell us things. One of those was never to use *, as the semantics of your queries could change on you when someone adds or removes or changes a column. </war_story>", "author": "jaycarlton", "createdAt": "2020-12-15T21:56:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzNzA5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzOTg5MA==", "url": "https://github.com/all-of-us/workbench/pull/4407#discussion_r543639890", "bodyText": "Why do these need to be ordered, and the others not? Comment?", "author": "calbach", "createdAt": "2020-12-15T19:49:14Z", "path": "api/src/main/java/org/pmiops/workbench/db/jdbc/ReportingQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,294 @@\n+package org.pmiops.workbench.db.jdbc;\n+\n+import static org.pmiops.workbench.db.model.DbStorageEnums.billingAccountTypeFromStorage;\n+import static org.pmiops.workbench.db.model.DbStorageEnums.billingStatusFromStorage;\n+import static org.pmiops.workbench.db.model.DbStorageEnums.dataAccessLevelFromStorage;\n+import static org.pmiops.workbench.db.model.DbStorageEnums.institutionDUATypeFromStorage;\n+import static org.pmiops.workbench.db.model.DbStorageEnums.organizationTypeFromStorage;\n+import static org.pmiops.workbench.utils.mappers.CommonMappers.offsetDateTimeUtc;\n+\n+import java.util.List;\n+import org.pmiops.workbench.model.ReportingCohort;\n+import org.pmiops.workbench.model.ReportingDataset;\n+import org.pmiops.workbench.model.ReportingDatasetCohort;\n+import org.pmiops.workbench.model.ReportingDatasetConceptSet;\n+import org.pmiops.workbench.model.ReportingDatasetDomainIdValue;\n+import org.pmiops.workbench.model.ReportingInstitution;\n+import org.pmiops.workbench.model.ReportingUser;\n+import org.pmiops.workbench.model.ReportingWorkspace;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ReportingQueryServiceImpl implements ReportingQueryService {\n+\n+  private final JdbcTemplate jdbcTemplate;\n+\n+  public ReportingQueryServiceImpl(JdbcTemplate jdbcTemplate) {\n+    this.jdbcTemplate = jdbcTemplate;\n+  }\n+\n+  @Override\n+  public List<ReportingWorkspace> getWorkspaces() {\n+    return jdbcTemplate.query(\n+        \"SELECT \\n\"\n+            + \"  billing_account_type,\\n\"\n+            + \"  billing_status,\\n\"\n+            + \"  cdr_version_id,\\n\"\n+            + \"  creation_time,\\n\"\n+            + \"  creator_id,\\n\"\n+            + \"  disseminate_research_other,\\n\"\n+            + \"  last_accessed_time,\\n\"\n+            + \"  last_modified_time,\\n\"\n+            + \"  name,\\n\"\n+            + \"  needs_rp_review_prompt,\\n\"\n+            + \"  published,\\n\"\n+            + \"  rp_additional_notes,\\n\"\n+            + \"  rp_ancestry,\\n\"\n+            + \"  rp_anticipated_findings,\\n\"\n+            + \"  rp_approved,\\n\"\n+            + \"  rp_commercial_purpose,\\n\"\n+            + \"  rp_control_set,\\n\"\n+            + \"  rp_disease_focused_research,\\n\"\n+            + \"  rp_disease_of_focus,\\n\"\n+            + \"  rp_drug_development,\\n\"\n+            + \"  rp_educational,\\n\"\n+            + \"  rp_ethics,\\n\"\n+            + \"  rp_intended_study,\\n\"\n+            + \"  rp_methods_development,\\n\"\n+            + \"  rp_other_population_details,\\n\"\n+            + \"  rp_other_purpose,\\n\"\n+            + \"  rp_other_purpose_details,\\n\"\n+            + \"  rp_population_health,\\n\"\n+            + \"  rp_reason_for_all_of_us,\\n\"\n+            + \"  rp_review_requested,\\n\"\n+            + \"  rp_scientific_approach,\\n\"\n+            + \"  rp_social_behavioral,\\n\"\n+            + \"  rp_time_requested,\\n\"\n+            + \"  workspace_id\\n\"\n+            + \"FROM workspace\",\n+        (rs, unused) ->\n+            new ReportingWorkspace()\n+                .billingAccountType(\n+                    billingAccountTypeFromStorage(rs.getShort(\"billing_account_type\")))\n+                .billingStatus(billingStatusFromStorage(rs.getShort(\"billing_status\")))\n+                .cdrVersionId(rs.getLong(\"cdr_version_id\"))\n+                .creationTime(offsetDateTimeUtc(rs.getTimestamp(\"creation_time\")))\n+                .creatorId(rs.getLong(\"creator_id\"))\n+                .disseminateResearchOther(rs.getString(\"disseminate_research_other\"))\n+                .lastAccessedTime(offsetDateTimeUtc(rs.getTimestamp(\"last_accessed_time\")))\n+                .lastModifiedTime(offsetDateTimeUtc(rs.getTimestamp(\"last_modified_time\")))\n+                .name(rs.getString(\"name\"))\n+                .needsRpReviewPrompt((int) rs.getShort(\"needs_rp_review_prompt\"))\n+                .published(rs.getBoolean(\"published\"))\n+                .rpAdditionalNotes(rs.getString(\"rp_additional_notes\"))\n+                .rpAncestry(rs.getBoolean(\"rp_ancestry\"))\n+                .rpAnticipatedFindings(rs.getString(\"rp_anticipated_findings\"))\n+                .rpApproved(rs.getBoolean(\"rp_approved\"))\n+                .rpCommercialPurpose(rs.getBoolean(\"rp_commercial_purpose\"))\n+                .rpControlSet(rs.getBoolean(\"rp_control_set\"))\n+                .rpDiseaseFocusedResearch(rs.getBoolean(\"rp_disease_focused_research\"))\n+                .rpDiseaseOfFocus(rs.getString(\"rp_disease_of_focus\"))\n+                .rpDrugDevelopment(rs.getBoolean(\"rp_drug_development\"))\n+                .rpEducational(rs.getBoolean(\"rp_educational\"))\n+                .rpEthics(rs.getBoolean(\"rp_ethics\"))\n+                .rpIntendedStudy(rs.getString(\"rp_intended_study\"))\n+                .rpMethodsDevelopment(rs.getBoolean(\"rp_methods_development\"))\n+                .rpOtherPopulationDetails(rs.getString(\"rp_other_population_details\"))\n+                .rpOtherPurpose(rs.getBoolean(\"rp_other_purpose\"))\n+                .rpOtherPurposeDetails(rs.getString(\"rp_other_purpose_details\"))\n+                .rpPopulationHealth(rs.getBoolean(\"rp_population_health\"))\n+                .rpReasonForAllOfUs(rs.getString(\"rp_reason_for_all_of_us\"))\n+                .rpReviewRequested(rs.getBoolean(\"rp_review_requested\"))\n+                .rpScientificApproach(rs.getString(\"rp_scientific_approach\"))\n+                .rpSocialBehavioral(rs.getBoolean(\"rp_social_behavioral\"))\n+                .rpTimeRequested(offsetDateTimeUtc(rs.getTimestamp(\"rp_time_requested\")))\n+                .workspaceId(rs.getLong(\"workspace_id\")));\n+  }\n+\n+  @Override\n+  public List<ReportingCohort> getCohorts() {\n+    return jdbcTemplate.query(\n+        \"SELECT \\n\"\n+            + \"  cohort_id,\\n\"\n+            + \"  creation_time,\\n\"\n+            + \"  creator_id,\\n\"\n+            + \"  criteria,\\n\"\n+            + \"  description,\\n\"\n+            + \"  last_modified_time,\\n\"\n+            + \"  name,\\n\"\n+            + \"  workspace_id\\n\"\n+            + \"FROM cohort\",\n+        (rs, unused) ->\n+            new ReportingCohort()\n+                .cohortId(rs.getLong(\"cohort_id\"))\n+                .creationTime(offsetDateTimeUtc(rs.getTimestamp(\"creation_time\")))\n+                .creatorId(rs.getLong(\"creator_id\"))\n+                .criteria(rs.getString(\"criteria\"))\n+                .description(rs.getString(\"description\"))\n+                .lastModifiedTime(offsetDateTimeUtc(rs.getTimestamp(\"last_modified_time\")))\n+                .name(rs.getString(\"name\"))\n+                .workspaceId(rs.getLong(\"workspace_id\")));\n+  }\n+\n+  @Override\n+  public List<ReportingDataset> getDatasets() {\n+    return jdbcTemplate.query(\n+        \"SELECT \\n\"\n+            + \"  creation_time,\\n\"\n+            + \"  creator_id,\\n\"\n+            + \"  data_set_id,\\n\"\n+            + \"  description,\\n\"\n+            + \"  includes_all_participants,\\n\"\n+            + \"  last_modified_time,\\n\"\n+            + \"  name,\\n\"\n+            + \"  workspace_id\\n\"\n+            + \"FROM data_set\",\n+        (rs, unused) ->\n+            new ReportingDataset()\n+                .creationTime(offsetDateTimeUtc(rs.getTimestamp(\"creation_time\")))\n+                .creatorId(rs.getLong(\"creator_id\"))\n+                .datasetId(rs.getLong(\"data_set_id\"))\n+                .description(rs.getString(\"description\"))\n+                .includesAllParticipants(rs.getBoolean(\"includes_all_participants\"))\n+                .lastModifiedTime(offsetDateTimeUtc(rs.getTimestamp(\"last_modified_time\")))\n+                .name(rs.getString(\"name\"))\n+                .workspaceId(rs.getLong(\"workspace_id\")));\n+  }\n+\n+  @Override\n+  public List<ReportingDatasetCohort> getDatasetCohorts() {\n+    return jdbcTemplate.query(\n+        \"SELECT data_set_id, cohort_id\\n\"\n+            + \"FROM data_set_cohort\\n\"\n+            + \"ORDER BY data_set_id, cohort_id;\",", "originalCommit": "83421df3cbed16e4b28d167d085fa553355db048", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxNTcwOA==", "url": "https://github.com/all-of-us/workbench/pull/4407#discussion_r543715708", "bodyText": "they don't; good catch.", "author": "jaycarlton", "createdAt": "2020-12-15T21:57:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYzOTg5MA=="}], "type": "inlineReview"}, {"oid": "a221e4c7fd096a434379ad2012e6afdd5d372edf", "url": "https://github.com/all-of-us/workbench/commit/a221e4c7fd096a434379ad2012e6afdd5d372edf", "message": "remove order", "committedDate": "2020-12-15T22:05:55Z", "type": "commit"}]}