{"pr_number": 3054, "pr_title": "[RW-4159][risk=no] Terms of service data model and API", "pr_createdAt": "2020-01-29T13:39:51Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3054", "timeline": [{"oid": "91d39e5397d53346b9c6de364f6e9ed177933e13", "url": "https://github.com/all-of-us/workbench/commit/91d39e5397d53346b9c6de364f6e9ed177933e13", "message": "Add a user_terms_of_service table and associated DB / API paraphernalia", "committedDate": "2020-01-29T17:30:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzMjA0MQ==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372532041", "bodyText": "with UserTermsOfServiceDao, we should be able to find this more efficiently with findTopByTosVersionAndUser() or some variation on that.", "author": "ericsong", "createdAt": "2020-01-29T17:43:04Z", "path": "api/src/main/java/org/pmiops/workbench/auth/ProfileService.java", "diffHunk": "@@ -207,6 +210,16 @@ public Profile getProfile(DbUser user) {\n     profile.setFreeTierUsage(freeTierBillingService.getUserCachedFreeTierUsage(user));\n     profile.setFreeTierDollarQuota(freeTierBillingService.getUserFreeTierDollarLimit(user));\n \n+    Optional<DbUserTermsOfService> latestTermsOfServiceMaybe =", "originalCommit": "91d39e5397d53346b9c6de364f6e9ed177933e13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0ODkzNg==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372648936", "bodyText": "Done \u2013\u00a0see my response below summarizing our offline discussion and reasons why I'm trying out the model where data access for \"child\" tables is done through the child table DAO.", "author": "gjuggler", "createdAt": "2020-01-29T21:47:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzMjA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzMjk0MQ==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372532941", "bodyText": "are we intentionally allowing users to be created w/o a ToS?", "author": "ericsong", "createdAt": "2020-01-29T17:44:42Z", "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -361,6 +361,10 @@ private DbUser initializeUserIfNeeded() {\n                 .map(FROM_CLIENT_INSTITUTIONAL_AFFILIATION)\n                 .collect(Collectors.toList()));\n \n+    if (request.getTermsOfServiceVersion() != null) {", "originalCommit": "91d39e5397d53346b9c6de364f6e9ed177933e13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1ODc0Nw==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372558747", "bodyText": "Yes \u2013\u00a0at least until the TOS UI is implemented (that will be PR 2 of 2 for this ticket). In the UI PR, I'll probably update this to require a TOS version when featureFlags.enableNewAccountCreation is true. (I think we're just bundling all account creation flow changes into that flag for simplicity's sake.)", "author": "gjuggler", "createdAt": "2020-01-29T18:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzMjk0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzNDc0MA==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372534740", "bodyText": "I believe you can use @CreationTimestamp to leave this work to Hibernate\nhttps://thoughts-on-java.org/persist-creation-update-timestamps-hibernate/", "author": "ericsong", "createdAt": "2020-01-29T17:48:16Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -412,6 +417,21 @@ public void setDataUseAgreementNameOutOfDate(String newGivenName, String newFami\n     userDataUseAgreementDao.save(dataUseAgreements);\n   }\n \n+  @Override\n+  @Transactional\n+  public void submitTermsOfService(DbUser dbUser, Integer tosVersion) {\n+    if (tosVersion != CURRENT_TERMS_OF_SERVICE_VERSION) {\n+      throw new BadRequestException(\"Terms of Service version is not up to date\");\n+    }\n+    final Timestamp timestamp = new Timestamp(clock.instant().toEpochMilli());", "originalCommit": "8a550570727d239f6cb19459bdbe87fba259fa51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1OTAyNQ==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372559025", "bodyText": "Lemme see if that works \u2013 I read about that and it would be great, but I didn't find any existing usage so I wasn't sure whether we'd evaluated and rejected that option before.", "author": "gjuggler", "createdAt": "2020-01-29T18:36:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzNDc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzNTI5Ng==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372535296", "bodyText": "Noting that this means we cannot roll back the UI/API independently when we have ToS updates. Should be fine since I imagine these updates are rare but it may be good to note in our rollback doc.", "author": "ericsong", "createdAt": "2020-01-29T17:49:20Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -412,6 +417,21 @@ public void setDataUseAgreementNameOutOfDate(String newGivenName, String newFami\n     userDataUseAgreementDao.save(dataUseAgreements);\n   }\n \n+  @Override\n+  @Transactional\n+  public void submitTermsOfService(DbUser dbUser, Integer tosVersion) {\n+    if (tosVersion != CURRENT_TERMS_OF_SERVICE_VERSION) {\n+      throw new BadRequestException(\"Terms of Service version is not up to date\");", "originalCommit": "8a550570727d239f6cb19459bdbe87fba259fa51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU2MDEzMw==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372560133", "bodyText": "Yeah \u2013 I used this hokey pattern for consistency with our setup for DUA. In both places, we're pretty blatantly kicking the can to deal with this issue more comprehensively once we actually need to bump the version.\nActually though, your comment is making me realize that having a more permissive backend is likely the right answer. Having an old client log a tos acknowledgement for an older agreement version is a non-issue, as far as the data model is concerned. How exactly we enforce what happens when a user hasn't signed the most-recent version is more interesting, and will require some further thought.", "author": "gjuggler", "createdAt": "2020-01-29T18:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzNTI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMjA4NA==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373812084", "bodyText": "+1 the lifecycles on all these compliance checks are really adding up, and we have to deal with combinatoric effects of some of them not being done, with overlapping grace periods, etc. It's worth thinking about the migration story if we want to keep things super simple up front.", "author": "jaycarlton", "createdAt": "2020-02-02T01:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzNTI5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzOTk2OQ==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372539969", "bodyText": "I think we can actually make do without these fields if we make the change to the TosDao above. We can leave the management of the Tos objects purely to the Tos model/dao and not maintain the bidirectional mapping.\nIt might seem a little weird that a field that we're returning on the API object does not live on the DB model but I've found this pattern of having API objects being constructed from several sources work well for me in the past. It allows the data model to fit the most natural access patterns instead of being constrained by the API requirements", "author": "ericsong", "createdAt": "2020-01-29T17:58:30Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbUser.java", "diffHunk": "@@ -710,4 +711,17 @@ public DbAddress getAddress() {\n   public void setAddress(DbAddress address) {\n     this.address = address;\n   }\n+\n+  @OneToMany(fetch = FetchType.LAZY, mappedBy = \"user\")\n+  public Set<DbUserTermsOfService> getTermsOfServiceRows() {", "originalCommit": "8a550570727d239f6cb19459bdbe87fba259fa51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMTA4MA==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r372601080", "bodyText": "Thanks for the comment \u2013\u00a0I struggled with this question when working through this PR. We discussed offline and I was well-enough convinced to give the \"access to child tables happens through separate DAOs\" approach a try.", "author": "gjuggler", "createdAt": "2020-01-29T20:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzOTk2OQ=="}], "type": "inlineReview"}, {"oid": "35ec4111ed1213072e0b97413686c6dab3d86c73", "url": "https://github.com/all-of-us/workbench/commit/35ec4111ed1213072e0b97413686c6dab3d86c73", "message": "Add action audit event logging and UserServiceTest test.", "committedDate": "2020-01-30T22:24:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNjA1Mg==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373636052", "bodyText": "Was it necessary to change the User model to a long? At some point, we should decide which access pattern we want to standardize on. I think there's good arguments for both approaches.", "author": "ericsong", "createdAt": "2020-01-31T19:03:32Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbUserTermsOfService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.pmiops.workbench.db.model;\n+\n+import java.sql.Timestamp;\n+import java.util.Objects;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import org.hibernate.annotations.CreationTimestamp;\n+\n+@Entity\n+@Table(name = \"user_terms_of_service\")\n+public class DbUserTermsOfService {\n+  private long userTermsOfServiceId;\n+  private long userId;\n+  private int tosVersion;\n+  private Timestamp agreementTime;\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"user_terms_of_service_id\")\n+  public long getUserTermsOfServiceId() {\n+    return userTermsOfServiceId;\n+  }\n+\n+  public void setUserTermsOfServiceId(long userTermsOfServiceId) {\n+    this.userTermsOfServiceId = userTermsOfServiceId;\n+  }\n+\n+  @Column(name = \"user_id\", nullable = false)\n+  public long getUserId() {", "originalCommit": "35ec4111ed1213072e0b97413686c6dab3d86c73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMzIzNA==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373913234", "bodyText": "It wasn't strictly necessary, but I think I changed this to be more consistent with the implementation for DUA (since this is otherwise very similar to that model). I don't have a strong feeling here, and also don't yet have a sense of the pros / cons for either way.", "author": "gjuggler", "createdAt": "2020-02-03T03:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNjA1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNjIzMg==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373636232", "bodyText": "Also curious about the nullable annotation. Is it for documentation or does it affect our code somehow?", "author": "ericsong", "createdAt": "2020-01-31T19:03:57Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbUserTermsOfService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.pmiops.workbench.db.model;\n+\n+import java.sql.Timestamp;\n+import java.util.Objects;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import org.hibernate.annotations.CreationTimestamp;\n+\n+@Entity\n+@Table(name = \"user_terms_of_service\")\n+public class DbUserTermsOfService {\n+  private long userTermsOfServiceId;\n+  private long userId;\n+  private int tosVersion;\n+  private Timestamp agreementTime;\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"user_terms_of_service_id\")\n+  public long getUserTermsOfServiceId() {\n+    return userTermsOfServiceId;\n+  }\n+\n+  public void setUserTermsOfServiceId(long userTermsOfServiceId) {\n+    this.userTermsOfServiceId = userTermsOfServiceId;\n+  }\n+\n+  @Column(name = \"user_id\", nullable = false)", "originalCommit": "35ec4111ed1213072e0b97413686c6dab3d86c73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMjEyNA==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373812124", "bodyText": "Spring can use this to talk to the database in a more intelligent way. +1 for readable annotations instead of comments; -1 that we have to specify this stuff multiple places.", "author": "jaycarlton", "createdAt": "2020-02-02T01:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNjIzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzMjcwMQ==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r374232701", "bodyText": "My understanding is that these impact how the H2 database is generated for unit tests. It's slightly more realistic for those tables to match the nullability constraints in our actual Liquibase-defined SQL schema.\n(Although, that being said, see a long comment I added to the \"agreement_time\" column. Due to some weirdness with how the CreationTimestamp annotation is used by Hibernate, I wasn't able to mark this column as non-nullable in the @column annotation, even though it is non-nullable in SQL.)", "author": "gjuggler", "createdAt": "2020-02-03T17:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNjIzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMTY0NA==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373811644", "bodyText": "If you don't mind, please tag me on PRs with new audit log entries, since we don't have a great migration story there.\nThe main thing I see here is that the action and target don't feel quite right: at the moment compliance docs and compliance acceptance aren't first-class concepts in the audit system. It would be slightly more idiomatic (and potentially help with audit queries), if you had something like\nAgentType.USER\nActionType.ACCEPT\nTargetType.COMPLIANCE_DOCUMENT\n\n// 2 property fields:\nDocumentTargetProperty.VERSION,\nDocumentTargetProperty.NAME,\n\nThen the log entry for DUA acceptance would be almost identical to this code (and in fact we could bust out a separate ComplianceDocumentAuditor when we're ready to do that.", "author": "jaycarlton", "createdAt": "2020-02-02T01:04:18Z", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/UserServiceAuditAdapterImpl.java", "diffHunk": "@@ -76,4 +76,21 @@ public void fireAdministrativeBypassTime(\n \n     actionAuditService.send(eventBuilder.build());\n   }\n+\n+  @Override\n+  public void fireAcknowledgeTermsOfService(DbUser targetUser, Integer termsOfServiceVersion) {\n+    actionAuditService.send(\n+        ActionAuditEvent.builder()\n+            .timestamp(clock.millis())\n+            .agentType(AgentType.USER)\n+            .agentId(dbUserProvider.get().getUserId())\n+            .agentEmailMaybe(dbUserProvider.get().getUsername())\n+            .actionId(actionIdProvider.get())\n+            .actionType(ActionType.EDIT)\n+            .targetType(TargetType.ACCOUNT)", "originalCommit": "35ec4111ed1213072e0b97413686c6dab3d86c73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2ODY0OQ==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373868649", "bodyText": "Filed this story to add constraints to these object types to make the intent more clear (and assist in query-building tools and services for this dataset).", "author": "jaycarlton", "createdAt": "2020-02-02T19:24:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMTY0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMTU4OQ==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373911589", "bodyText": "Thanks for the comment & suggestion. I'm inclined to leave the log entry as-is for now.\nIf we went whole hog on merging DUA and TOS, to the point where we had a compliance_document table and a ComplianceDocumentService, it would be more natural to have a separate TargetType. But for now we don't have a distinct entity for that, and I'd rather not pre-emptively create generic structures before we've moved the system to model things in that way. There's a risk of putting the cart before the horse.\nAlso, there's no information loss with what's being logged here (we still capture TOS version and the fact that it's a TOS acknowledgement), so I think the risk of leaving this as-is is pretty minimal.", "author": "gjuggler", "createdAt": "2020-02-03T03:42:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMTY0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMTY4MQ==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373811681", "bodyText": "Please add a comment about why you use the provider here and the passed-in user below if that's intentional.", "author": "jaycarlton", "createdAt": "2020-02-02T01:05:38Z", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/UserServiceAuditAdapterImpl.java", "diffHunk": "@@ -76,4 +76,21 @@ public void fireAdministrativeBypassTime(\n \n     actionAuditService.send(eventBuilder.build());\n   }\n+\n+  @Override\n+  public void fireAcknowledgeTermsOfService(DbUser targetUser, Integer termsOfServiceVersion) {\n+    actionAuditService.send(\n+        ActionAuditEvent.builder()\n+            .timestamp(clock.millis())\n+            .agentType(AgentType.USER)\n+            .agentId(dbUserProvider.get().getUserId())", "originalCommit": "35ec4111ed1213072e0b97413686c6dab3d86c73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMDA0OQ==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373910049", "bodyText": "This was just copy-pasta \u2013\u00a0and in fact it broke local end-to-end testing with a runtime exception, since at this point in the process there is no authenticated user.", "author": "gjuggler", "createdAt": "2020-02-03T03:30:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMTY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMjAwNw==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373812007", "bodyText": "nit: one pattern that's kinda nice is to do:\nlatestTermsOfServiceMaybe.ifPresent(profile::setTermsOfServiceFields)\n\nwhere setTermsOfServiceFields is a helper method that sets both these things.", "author": "jaycarlton", "createdAt": "2020-02-02T01:14:57Z", "path": "api/src/main/java/org/pmiops/workbench/auth/ProfileService.java", "diffHunk": "@@ -207,6 +215,14 @@ public Profile getProfile(DbUser user) {\n     profile.setFreeTierUsage(freeTierBillingService.getUserCachedFreeTierUsage(user));\n     profile.setFreeTierDollarQuota(freeTierBillingService.getUserFreeTierDollarLimit(user));\n \n+    Optional<DbUserTermsOfService> latestTermsOfServiceMaybe =\n+        userTermsOfServiceDao.findFirstByUserIdOrderByTosVersionDesc(user.getUserId());\n+    if (latestTermsOfServiceMaybe.isPresent()) {", "originalCommit": "35ec4111ed1213072e0b97413686c6dab3d86c73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMTg2Ng==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373911866", "bodyText": "Interesting! Doesn't seem super widely used in our codebase though (possibly since we don't use Optional very widely), so I'll stick with old-fashioned control flow here.", "author": "gjuggler", "createdAt": "2020-02-03T03:44:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMjAwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMjAxNg==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373812016", "bodyText": "nit: I'd name this recordTermsOfServiceAcceptance()", "author": "jaycarlton", "createdAt": "2020-02-02T01:15:28Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserService.java", "diffHunk": "@@ -43,6 +43,9 @@ DbUser createUser(\n   DbUser submitDataUseAgreement(\n       DbUser user, Integer dataUseAgreementSignedVersion, String initials);\n \n+  // Registers that a user has agreed to a given version of the Terms of Service.\n+  void submitTermsOfService(DbUser dbUser, Integer tosVersion);", "originalCommit": "35ec4111ed1213072e0b97413686c6dab3d86c73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMTkzOA==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373911938", "bodyText": "Consistency argument: I'd prefer this to align with the naming used for data use agreement above.", "author": "gjuggler", "createdAt": "2020-02-03T03:44:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMjAxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMjA5MQ==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373812091", "bodyText": "This would be a good spot to make a builder and an immutable class I think.", "author": "jaycarlton", "createdAt": "2020-02-02T01:17:26Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -414,6 +419,21 @@ public void setDataUseAgreementNameOutOfDate(String newGivenName, String newFami\n     userDataUseAgreementDao.save(dataUseAgreements);\n   }\n \n+  @Override\n+  @Transactional\n+  public void submitTermsOfService(DbUser dbUser, Integer tosVersion) {\n+    if (tosVersion != CURRENT_TERMS_OF_SERVICE_VERSION) {\n+      throw new BadRequestException(\"Terms of Service version is not up to date\");\n+    }\n+\n+    DbUserTermsOfService userTermsOfService = new DbUserTermsOfService();", "originalCommit": "35ec4111ed1213072e0b97413686c6dab3d86c73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMjE0MA==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373912140", "bodyText": "Would be \u2013\u00a0not for this PR though. We'd want to make sure to set a direction that can eventually be adopted for all of our system's DB model classes, and, where possible, reduces / eliminates boilerplate involved in generating builder classes.", "author": "gjuggler", "createdAt": "2020-02-03T03:46:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMjA5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMjE3OQ==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373812179", "bodyText": "aside: how hard would it be to merge the data model and services, etc, for the TOS and DUA. I think only a little business logic separates them, right?", "author": "jaycarlton", "createdAt": "2020-02-02T01:19:36Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbUserTermsOfService.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.pmiops.workbench.db.model;\n+\n+import java.sql.Timestamp;\n+import java.util.Objects;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+import org.hibernate.annotations.CreationTimestamp;\n+\n+@Entity\n+@Table(name = \"user_terms_of_service\")\n+public class DbUserTermsOfService {", "originalCommit": "35ec4111ed1213072e0b97413686c6dab3d86c73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkxMzA4MA==", "url": "https://github.com/all-of-us/workbench/pull/3054#discussion_r373913080", "bodyText": "It wouldn't be too hard. We'd have to make a case that there would be practical value to gain from it \u2013\u00a0as-is, with two consistent-but-separate implementations, it doesn't seem like a huge maintenance nightmare. And we're relatively well-poised to merge if needed. I tend to follow the \"rule of 3\", where once we have three examples, the argument for creating a generic implementation starts to sound more compelling.", "author": "gjuggler", "createdAt": "2020-02-03T03:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxMjE3OQ=="}], "type": "inlineReview"}, {"oid": "6dc05d3e8992552a98fbb89f98f38105ef5ba27b", "url": "https://github.com/all-of-us/workbench/commit/6dc05d3e8992552a98fbb89f98f38105ef5ba27b", "message": "Add a user_terms_of_service table and associated DB / API paraphernalia", "committedDate": "2020-02-03T17:09:09Z", "type": "commit"}, {"oid": "a9aef1d0cabfc57d73fc11d7dc4a568a64527334", "url": "https://github.com/all-of-us/workbench/commit/a9aef1d0cabfc57d73fc11d7dc4a568a64527334", "message": "Switch from list to set in test.", "committedDate": "2020-02-03T17:09:09Z", "type": "commit"}, {"oid": "1a476277a7e2b2a07c03e0d2e3b8e4b11657b163", "url": "https://github.com/all-of-us/workbench/commit/1a476277a7e2b2a07c03e0d2e3b8e4b11657b163", "message": "PR feedback", "committedDate": "2020-02-03T17:09:09Z", "type": "commit"}, {"oid": "01515da86ca8afe8198176b75b95a78516590f11", "url": "https://github.com/all-of-us/workbench/commit/01515da86ca8afe8198176b75b95a78516590f11", "message": "Add action audit event logging and UserServiceTest test.", "committedDate": "2020-02-03T17:09:09Z", "type": "commit"}, {"oid": "bc078f6cfcce8fc7cecf931d751a8ad256c387cf", "url": "https://github.com/all-of-us/workbench/commit/bc078f6cfcce8fc7cecf931d751a8ad256c387cf", "message": "Fix a bug in TOS audit events and add some comments on nullability in DbUserTermsOfService.", "committedDate": "2020-02-03T17:09:09Z", "type": "commit"}, {"oid": "bc078f6cfcce8fc7cecf931d751a8ad256c387cf", "url": "https://github.com/all-of-us/workbench/commit/bc078f6cfcce8fc7cecf931d751a8ad256c387cf", "message": "Fix a bug in TOS audit events and add some comments on nullability in DbUserTermsOfService.", "committedDate": "2020-02-03T17:09:09Z", "type": "forcePushed"}, {"oid": "61952f217bebd7a2068510b3c1ebf868894376fc", "url": "https://github.com/all-of-us/workbench/commit/61952f217bebd7a2068510b3c1ebf868894376fc", "message": "Remove changes to aou-utils", "committedDate": "2020-02-03T17:12:43Z", "type": "commit"}]}