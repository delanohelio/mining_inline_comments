{"pr_number": 3365, "pr_title": "[RW-4736][risk=no] Puppeteer test: waitFor institution email validation", "pr_createdAt": "2020-04-08T01:05:25Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3365", "timeline": [{"oid": "535249361341f60811d00734c33e9dc20413f829", "url": "https://github.com/all-of-us/workbench/commit/535249361341f60811d00734c33e9dc20413f829", "message": "institution email waitFor validation", "committedDate": "2020-04-08T01:04:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNjMxMw==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405216313", "bodyText": "Do you need to catch and rethrow, or will the framework & language do most of this for you?", "author": "jaycarlton", "createdAt": "2020-04-08T02:05:24Z", "path": "e2e/app/aou-elements/clr-icon-link.ts", "diffHunk": "@@ -1,23 +1,24 @@\n import {Page, WaitForSelectorOptions} from 'puppeteer';\n import BaseElement from './base-element';\n+import TextOptions from './text-options';\n import {findIcon} from './xpath-finder';\n \n export default class ClrIconLink extends BaseElement {\n    \n   static async forLabel(\n      page: Page,\n-     aElementName: string,\n+     textOptions: TextOptions,\n      shape: string,\n      waitOptions: WaitForSelectorOptions = {visible: true},\n      throwErr = true): Promise<ClrIconLink> {\n \n     let element: ClrIconLink;\n     try {\n-      const iconElement = await findIcon(page, aElementName, shape, waitOptions);\n+      const iconElement = await findIcon(page, textOptions, shape, waitOptions);", "originalCommit": "535249361341f60811d00734c33e9dc20413f829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2ODk3NA==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405568974", "bodyText": "jest will throws exception too. I'm printing out textOptions for manual checking if fail", "author": "aweng98", "createdAt": "2020-04-08T14:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNjMxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNjUwMA==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405216500", "bodyText": "nit: space after commas", "author": "jaycarlton", "createdAt": "2020-04-08T02:06:07Z", "path": "e2e/app/aou-elements/xpath-defaults.ts", "diffHunk": "@@ -2,11 +2,11 @@ import TextOptions from './text-options';\n \n function textXpathHelper(opts: TextOptions) {\n   if (opts.text) {\n-    return `text()=\"${opts.text}\" or @aria-label=\"${opts.text}\" or @placeholder=\"${opts.text}\"`;\n+    return `text()='${opts.text}' or @aria-label='${opts.text}' or @placeholder='${opts.text}'`;\n   } else if (opts.textContains) {\n-    return `contains(text(),\"${opts.textContains}\") or contains(@aria-label,\"${opts.textContains}\") or contains(@placeholder,\"${opts.textContains}\")`;\n+    return `contains(text(),'${opts.textContains}') or contains(@aria-label,'${opts.textContains}') or contains(@placeholder,'${opts.textContains}')`;", "originalCommit": "535249361341f60811d00734c33e9dc20413f829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyNzU4NA==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405227584", "bodyText": "Done", "author": "aweng98", "createdAt": "2020-04-08T02:48:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNjUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNjcwNQ==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405216705", "bodyText": "nit: can you declare a string for '${opts.text}' and use it in all three places?", "author": "jaycarlton", "createdAt": "2020-04-08T02:06:57Z", "path": "e2e/app/aou-elements/xpath-defaults.ts", "diffHunk": "@@ -2,11 +2,11 @@ import TextOptions from './text-options';\n \n function textXpathHelper(opts: TextOptions) {\n   if (opts.text) {\n-    return `text()=\"${opts.text}\" or @aria-label=\"${opts.text}\" or @placeholder=\"${opts.text}\"`;\n+    return `text()='${opts.text}' or @aria-label='${opts.text}' or @placeholder='${opts.text}'`;", "originalCommit": "535249361341f60811d00734c33e9dc20413f829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyNzQ5OA==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405227498", "bodyText": "Done", "author": "aweng98", "createdAt": "2020-04-08T02:48:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNjcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNzgxNA==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405217814", "bodyText": "Is xpath the only way to reach this icon? I feel like it may be brittle in the face of future page reorganization and isn't the most readable representation for folks trying to investigate failed tests.\nAlso, I don't know what clr means.", "author": "jaycarlton", "createdAt": "2020-04-08T02:11:00Z", "path": "e2e/app/aou-elements/xpath-defaults.ts", "diffHunk": "@@ -59,10 +59,11 @@ export function clickableXpath(label: string) {\n  * @param label:\n  * @param shapeValue:\n  */\n-export function clrIconXpath(label: string, shapeValue: string) {\n-  if (label === '') {\n+export function clrIconXpath(opts: TextOptions, shapeValue: string) {", "originalCommit": "535249361341f60811d00734c33e9dc20413f829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyODQ1Mg==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405228452", "bodyText": "xpath is the only way for finding majority of AoU UI elements.\nclr-icon is a type of node found on UI.", "author": "aweng98", "createdAt": "2020-04-08T02:51:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNzgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxODk2OQ==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405218969", "bodyText": "Can you name this barsIcon or hamburgerIcon?", "author": "jaycarlton", "createdAt": "2020-04-08T02:14:33Z", "path": "e2e/app/authenticated-page.ts", "diffHunk": "@@ -132,7 +132,7 @@ export default abstract class AuthenticatedPage extends BasePage {\n     const is = await this.isSideNavDropdownOpen();\n     if (!is) {\n       // click bars icon to open dropdown\n-      const icon = await findIcon(this.page, '', 'bars');\n+      const icon = await findIcon(this.page, {}, 'bars');", "originalCommit": "535249361341f60811d00734c33e9dc20413f829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyOTQ2NQ==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405229465", "bodyText": "Done. barsIcon", "author": "aweng98", "createdAt": "2020-04-08T02:55:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxODk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxOTE3Mw==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405219173", "bodyText": "nit: name this sideNavIsOpen", "author": "jaycarlton", "createdAt": "2020-04-08T02:15:10Z", "path": "e2e/app/authenticated-page.ts", "diffHunk": "@@ -132,7 +132,7 @@ export default abstract class AuthenticatedPage extends BasePage {\n     const is = await this.isSideNavDropdownOpen();", "originalCommit": "535249361341f60811d00734c33e9dc20413f829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyODg3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405228875", "bodyText": "Done", "author": "aweng98", "createdAt": "2020-04-08T02:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxOTE3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxOTkxNA==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405219914", "bodyText": "Could you please add a description, like \"the side Nav for this page is either docked to the right or open. We can determine the open state by looking for a visible Home icon\" Or something. It's not obvious to someone who doesn't watch the UI closely.\nAdditionally, it's confusing that the method is named after the  side nav dropdown, but the implementation is in terms of a  home icon. Can we add a test data tag to the nav and check for it more directly?", "author": "jaycarlton", "createdAt": "2020-04-08T02:17:56Z", "path": "e2e/app/authenticated-page.ts", "diffHunk": "@@ -179,7 +179,7 @@ export default abstract class AuthenticatedPage extends BasePage {\n \n   private async isSideNavDropdownOpen(): Promise<boolean> {", "originalCommit": "535249361341f60811d00734c33e9dc20413f829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzMjg0OQ==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405232849", "bodyText": "sorry. your feedback is awesome! I have comments for most \"big\" methods but don't do for all methods because I think some methods are easy to know what it suppose to do. For this method, I added what you said as comment.\nIt is the easiest way to determine the open or close state by looking for visible Home icon. If someone is going to implement a test friendly tag in future, I'd be happy to update this code.", "author": "aweng98", "createdAt": "2020-04-08T03:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxOTkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyMDYxNg==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405220616", "bodyText": "I would pass an institution input object into this method so that you can fill it out more than one way to test edge cases, validation, etc, if you want.", "author": "jaycarlton", "createdAt": "2020-04-08T02:20:44Z", "path": "e2e/app/create-account-page.ts", "diffHunk": "@@ -154,7 +154,7 @@ export default class CreateAccountPage extends BasePage {\n     const emailAddress = await Textbox.forLabel(this.page, {textContains: FIELD_LABEL.INSTITUTION_EMAIL, ancestorNodeLevel: 2});", "originalCommit": "535249361341f60811d00734c33e9dc20413f829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzMzE4OQ==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405233189", "bodyText": "I can refactor in a new PR. This PR only deals with one test failure that only happens on CircleCi.", "author": "aweng98", "createdAt": "2020-04-08T03:10:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyMDYxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyMDkyMQ==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405220921", "bodyText": "nit: could we make an enum  with these icon type strings?", "author": "jaycarlton", "createdAt": "2020-04-08T02:22:04Z", "path": "e2e/app/home-page.ts", "diffHunk": "@@ -32,7 +32,7 @@ export default class HomePage extends AuthenticatedPage {\n   }\n \n   async getCreateNewWorkspaceLink(): Promise<ElementHandle> {\n-    return findIcon(this.page, FIELD_LABEL.CREATE_NEW_WORKSPACE, 'plus-circle');\n+    return findIcon(this.page, {text: FIELD_LABEL.CREATE_NEW_WORKSPACE}, 'plus-circle');", "originalCommit": "535249361341f60811d00734c33e9dc20413f829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzMzMzNg==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405233336", "bodyText": "good suggestion. I can refactor code in a new PR.", "author": "aweng98", "createdAt": "2020-04-08T03:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyMDkyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyMjYyNw==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405222627", "bodyText": "Can we use module exports or something so we don't have to import from grandparent directories? It's really breakable when you do that, because it means you can't move your test directories around easily.", "author": "jaycarlton", "createdAt": "2020-04-08T02:28:42Z", "path": "e2e/tests/user/registration-ui.spec.ts", "diffHunk": "@@ -1,7 +1,5 @@\n import BaseElement from '../../app/aou-elements/base-element';\n-import SelectComponent from '../../app/aou-elements/select-component';\n-import Textbox from '../../app/aou-elements/textbox';\n-import CreateAccountPage, {FIELD_LABEL, INSTITUTION_ROLE_VALUE, INSTITUTION_VALUE} from '../../app/create-account-page';\n+import CreateAccountPage from '../../app/create-account-page';", "originalCommit": "535249361341f60811d00734c33e9dc20413f829", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNDAwMg==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405234002", "bodyText": "don't know how to do what you suggested. but I will research around for how-to to see what other people are doing.", "author": "aweng98", "createdAt": "2020-04-08T03:14:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyMjYyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5NTI1Mg==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405795252", "bodyText": "I think it should be possible to specify a root directory, so you can use absolute paths from the root rather than relative from here.", "author": "s-rubenstein", "createdAt": "2020-04-08T20:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyMjYyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyMzI2Mw==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405223263", "bodyText": "nit: there are two different conventions on this line and the next for async functions. I would have expected to see await nextButton.enabled(); for consistency.", "author": "jaycarlton", "createdAt": "2020-04-08T02:31:14Z", "path": "e2e/tests/user/registration-ui.spec.ts", "diffHunk": "@@ -90,14 +88,7 @@ describe('User registration tests:', () => {\n     const nextButton = await createAccountPage.getNextButton();\n     expect(await nextButton.isCursorNotAllowed()).toEqual(true);\n \n-    const institutionSelect = new SelectComponent(page, 'Select your institution');\n-    await institutionSelect.select(INSTITUTION_VALUE.BROAD);\n-\n-    const emailAddress = await Textbox.forLabel(page, {textContains: FIELD_LABEL.INSTITUTION_EMAIL, ancestorNodeLevel: 2});\n-    await emailAddress.type(configs.broadInstitutionEmail);\n-\n-    const roleSelect = new SelectComponent(page, 'describes your role');\n-    await roleSelect.select(INSTITUTION_ROLE_VALUE.UNDERGRADUATE_STUDENT);\n+    await createAccountPage.fillOutInstitution();\n \n     await nextButton.waitUntilEnabled();", "originalCommit": "535249361341f60811d00734c33e9dc20413f829", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyMzYwOQ==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405223609", "bodyText": "nit: I'd rename emailAddress to emailAddressTextBox to distinguish it from the address itself.", "author": "jaycarlton", "createdAt": "2020-04-08T02:32:36Z", "path": "e2e/app/create-account-page.ts", "diffHunk": "@@ -154,7 +154,7 @@ export default class CreateAccountPage extends BasePage {\n     const emailAddress = await Textbox.forLabel(this.page, {textContains: FIELD_LABEL.INSTITUTION_EMAIL, ancestorNodeLevel: 2});", "originalCommit": "535249361341f60811d00734c33e9dc20413f829", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyMzk4OQ==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405223989", "bodyText": "can you make a utility method that's an async boolean-valued method to wait look for and wait for an icon (or other element)? It seems like this would be a common itch to scratch.", "author": "jaycarlton", "createdAt": "2020-04-08T02:34:07Z", "path": "e2e/app/authenticated-page.ts", "diffHunk": "@@ -179,7 +179,7 @@ export default abstract class AuthenticatedPage extends BasePage {\n \n   private async isSideNavDropdownOpen(): Promise<boolean> {\n     try {\n-      await findIcon(this.page, 'Home', 'home', {visible: true, timeout: 1000});\n+      await findIcon(this.page, {text: 'Home'}, 'home', {visible: true, timeout: 1000});", "originalCommit": "535249361341f60811d00734c33e9dc20413f829", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cb7dfd1d2a1e2329cf226f4b76828e7e006125a8", "url": "https://github.com/all-of-us/workbench/commit/cb7dfd1d2a1e2329cf226f4b76828e7e006125a8", "message": "refactored findIcon method", "committedDate": "2020-04-08T02:42:12Z", "type": "commit"}, {"oid": "1b14e21822c4e62ac31e0346738034152f2e0339", "url": "https://github.com/all-of-us/workbench/commit/1b14e21822c4e62ac31e0346738034152f2e0339", "message": "PR feedback", "committedDate": "2020-04-08T03:18:07Z", "type": "commit"}, {"oid": "3fa62bb78d187d0e3610acfc9911cfd6624dd9dd", "url": "https://github.com/all-of-us/workbench/commit/3fa62bb78d187d0e3610acfc9911cfd6624dd9dd", "message": "import fix", "committedDate": "2020-04-08T14:49:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2NTY5NA==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405565694", "bodyText": "Request GET /v1/institutions/Broad/checkEmail/aou-dev-registration@broadinstitute.org/ could takes up to several seconds to complete. Changed to waitForFunction for waiting function returns true, up to 30 seconds.", "author": "aweng98", "createdAt": "2020-04-08T14:25:09Z", "path": "e2e/app/aou-elements/button.ts", "diffHunk": "@@ -27,12 +27,13 @@ export default class Button extends BaseElement {\n   /**\n    * Wait until button is clickable (enabled).\n    */\n-  async waitUntilEnabled(): Promise<JSHandle> {\n-    const handle = this.element.asElement();\n-    return await handle.evaluateHandle((e) => {\n+  async waitUntilEnabled(): Promise<unknown> {\n+    const result = await this.page.waitForFunction((e) => {\n       const style = window.getComputedStyle(e);\n       return style.getPropertyValue('cursor') === 'pointer';\n-    }, this.element);\n+    }, {}, this.element);\n+    const jval = await result.jsonValue();\n+    return jval;", "originalCommit": "1b14e21822c4e62ac31e0346738034152f2e0339", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5MTA3MA==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405791070", "bodyText": "Nit: Could you use a more descriptive variable name than result?", "author": "s-rubenstein", "createdAt": "2020-04-08T20:22:29Z", "path": "e2e/app/aou-elements/button.ts", "diffHunk": "@@ -27,12 +27,13 @@ export default class Button extends BaseElement {\n   /**\n    * Wait until button is clickable (enabled).\n    */\n-  async waitUntilEnabled(): Promise<JSHandle> {\n-    const handle = this.element.asElement();\n-    return await handle.evaluateHandle((e) => {\n+  async waitUntilEnabled(): Promise<unknown> {\n+    const result = await this.page.waitForFunction((e) => {", "originalCommit": "3fa62bb78d187d0e3610acfc9911cfd6624dd9dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzYwNg==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405807606", "bodyText": "how about retrievedValue?", "author": "aweng98", "createdAt": "2020-04-08T20:52:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5MTA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5MTY2NQ==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405791665", "bodyText": "Nit: I would leave out this variable, and just return await result.jsonValue();\nIf you do need the variable, I would use a more descriptive name than jval. Maybe {rename of result}AsJson?", "author": "s-rubenstein", "createdAt": "2020-04-08T20:23:35Z", "path": "e2e/app/aou-elements/button.ts", "diffHunk": "@@ -27,12 +27,13 @@ export default class Button extends BaseElement {\n   /**\n    * Wait until button is clickable (enabled).\n    */\n-  async waitUntilEnabled(): Promise<JSHandle> {\n-    const handle = this.element.asElement();\n-    return await handle.evaluateHandle((e) => {\n+  async waitUntilEnabled(): Promise<unknown> {\n+    const result = await this.page.waitForFunction((e) => {\n       const style = window.getComputedStyle(e);\n       return style.getPropertyValue('cursor') === 'pointer';\n-    }, this.element);\n+    }, {}, this.element);\n+    const jval = await result.jsonValue();", "originalCommit": "3fa62bb78d187d0e3610acfc9911cfd6624dd9dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzc1OA==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405807758", "bodyText": "done", "author": "aweng98", "createdAt": "2020-04-08T20:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5MTY2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5MjYwMw==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405792603", "bodyText": "Nit: I'd just call it text. Or if we can have a more descriptive name describing where the text comes from? Because I am not super following what text this variable is meant to contain.", "author": "s-rubenstein", "createdAt": "2020-04-08T20:25:08Z", "path": "e2e/app/aou-elements/xpath-defaults.ts", "diffHunk": "@@ -1,12 +1,16 @@\n import TextOptions from './text-options';\n \n function textXpathHelper(opts: TextOptions) {\n+  let txt;", "originalCommit": "3fa62bb78d187d0e3610acfc9911cfd6624dd9dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwODQzNw==", "url": "https://github.com/all-of-us/workbench/pull/3365#discussion_r405808437", "bodyText": "how about findText?", "author": "aweng98", "createdAt": "2020-04-08T20:53:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5MjYwMw=="}], "type": "inlineReview"}, {"oid": "9d8fb4ac02217a9ff312a96a05314bf188b117ab", "url": "https://github.com/all-of-us/workbench/commit/9d8fb4ac02217a9ff312a96a05314bf188b117ab", "message": "PR feedback", "committedDate": "2020-04-08T20:55:21Z", "type": "commit"}]}