{"pr_number": 4316, "pr_title": "[RW-5641][risk=no] Start/Stop button", "pr_createdAt": "2020-11-19T20:03:25Z", "pr_url": "https://github.com/all-of-us/workbench/pull/4316", "timeline": [{"oid": "4b94c25c0f8176289e8ce69be406041e8686d956", "url": "https://github.com/all-of-us/workbench/commit/4b94c25c0f8176289e8ce69be406041e8686d956", "message": "tests", "committedDate": "2020-11-19T20:51:58Z", "type": "forcePushed"}, {"oid": "6b2d86d49aad9498f2b798ef87af4bb41cb0bda1", "url": "https://github.com/all-of-us/workbench/commit/6b2d86d49aad9498f2b798ef87af4bb41cb0bda1", "message": "shelving! leo borked", "committedDate": "2020-11-30T15:51:17Z", "type": "commit"}, {"oid": "9f9dfe56da0e1979b4a19c47819eedd56b148182", "url": "https://github.com/all-of-us/workbench/commit/9f9dfe56da0e1979b4a19c47819eedd56b148182", "message": "works", "committedDate": "2020-11-30T15:57:35Z", "type": "commit"}, {"oid": "5592c20a85d0d8adb2fcf30b945fd6c4ac94a8cc", "url": "https://github.com/all-of-us/workbench/commit/5592c20a85d0d8adb2fcf30b945fd6c4ac94a8cc", "message": "revert api", "committedDate": "2020-11-30T15:57:35Z", "type": "commit"}, {"oid": "57177dbe9afb98dae6b849710cc8f008dc15a5c6", "url": "https://github.com/all-of-us/workbench/commit/57177dbe9afb98dae6b849710cc8f008dc15a5c6", "message": "spotless", "committedDate": "2020-11-30T15:57:35Z", "type": "commit"}, {"oid": "bfc0c89a2bb0bcfb591807f2cf93bf902f6bc313", "url": "https://github.com/all-of-us/workbench/commit/bfc0c89a2bb0bcfb591807f2cf93bf902f6bc313", "message": "lint", "committedDate": "2020-11-30T15:57:46Z", "type": "commit"}, {"oid": "a4dbfb1dea0f24c0e0b7a27df852defdea4ecc6c", "url": "https://github.com/all-of-us/workbench/commit/a4dbfb1dea0f24c0e0b7a27df852defdea4ecc6c", "message": "tooltip / alt text", "committedDate": "2020-11-30T15:57:46Z", "type": "commit"}, {"oid": "93e39e78e0b12a71ca30f6177cbcd42929048256", "url": "https://github.com/all-of-us/workbench/commit/93e39e78e0b12a71ca30f6177cbcd42929048256", "message": "cleanup", "committedDate": "2020-11-30T15:57:46Z", "type": "commit"}, {"oid": "dee249b580381247a03307db80e0e5a939678ea0", "url": "https://github.com/all-of-us/workbench/commit/dee249b580381247a03307db80e0e5a939678ea0", "message": "tests", "committedDate": "2020-11-30T15:57:46Z", "type": "commit"}, {"oid": "eabba91d94821a90d18f10703c302b13396484be", "url": "https://github.com/all-of-us/workbench/commit/eabba91d94821a90d18f10703c302b13396484be", "message": "tidying after rebase", "committedDate": "2020-11-30T17:19:30Z", "type": "commit"}, {"oid": "eabba91d94821a90d18f10703c302b13396484be", "url": "https://github.com/all-of-us/workbench/commit/eabba91d94821a90d18f10703c302b13396484be", "message": "tidying after rebase", "committedDate": "2020-11-30T17:19:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwODQ4OA==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532808488", "bodyText": "nit: component() already does this now, so I'd be surprised if you need to tick again here", "author": "calbach", "createdAt": "2020-11-30T18:26:42Z", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -626,4 +628,19 @@ describe('RuntimePanel', () => {\n     expect(runtimeApiStub.runtime.status).toEqual(RuntimeStatus.Running);\n     expect(wrapper.find(ConfirmDelete).exists()).toBeFalsy();\n   });\n+\n+  it('should display the Running runtime status icon in state Running', async() => {\n+    const wrapper = await component();\n+\n+    const runtimeStatusIcon = () => wrapper.find('[data-test-id=\"runtime-status-icon\"]').first();\n+    expect(runtimeStatusIcon().prop('src')).toBe(`${iconsDir}/compute-running.svg`);\n+  });\n+\n+  it('should display a compute-none when there is no runtime', async() => {\n+    runtimeApiStub.runtime = null;\n+    act(() => { runtimeStore.set({runtime: null, workspaceNamespace: workspaceStubs[0].namespace}) });\n+    const wrapper = await component();\n+    await waitOneTickAndUpdate(wrapper);", "originalCommit": "eabba91d94821a90d18f10703c302b13396484be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwOTI5NA==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532809294", "bodyText": "nit: would use a consistent pattern here and below - this one uses an anonymous helper, the other inlines", "author": "calbach", "createdAt": "2020-11-30T18:27:57Z", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -626,4 +628,19 @@ describe('RuntimePanel', () => {\n     expect(runtimeApiStub.runtime.status).toEqual(RuntimeStatus.Running);\n     expect(wrapper.find(ConfirmDelete).exists()).toBeFalsy();\n   });\n+\n+  it('should display the Running runtime status icon in state Running', async() => {\n+    const wrapper = await component();\n+\n+    const runtimeStatusIcon = () => wrapper.find('[data-test-id=\"runtime-status-icon\"]').first();", "originalCommit": "eabba91d94821a90d18f10703c302b13396484be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgxMDUxOA==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532810518", "bodyText": "opt: maybe cleaner to use the switchCase utility instead, which is basically the same but you could replace this line with just RuntimeStatus.Creating", "author": "calbach", "createdAt": "2020-11-30T18:30:00Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -390,6 +389,146 @@ const PresetSelector = ({hasMicroarrayData, setSelectedDiskSize, setSelectedMach\n   </PopupTrigger>;\n };\n \n+const StartStopRuntimeButton = ({workspace, containerStyle}) => {\n+  const [status, setRuntimeStatus] = useRuntimeStatus(workspace.namespace);\n+\n+  const rotateStyle = {animation: 'rotation 2s infinite linear'};\n+  const {altText, clickable = false, iconShape = null, styleOverrides = {}, onClick = () => {}, } = fp.cond([\n+    [\n+      (s) => s === RuntimeStatus.Creating,", "originalCommit": "eabba91d94821a90d18f10703c302b13396484be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgxNjYzOA==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532816638", "bodyText": "nit: seems like it would be a bug if clickable and onClick being a no-op diverged. If so, may want to just treat null / omission of onClick as an indication that it should not be clickable.", "author": "calbach", "createdAt": "2020-11-30T18:40:31Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -390,6 +389,146 @@ const PresetSelector = ({hasMicroarrayData, setSelectedDiskSize, setSelectedMach\n   </PopupTrigger>;\n };\n \n+const StartStopRuntimeButton = ({workspace, containerStyle}) => {\n+  const [status, setRuntimeStatus] = useRuntimeStatus(workspace.namespace);\n+\n+  const rotateStyle = {animation: 'rotation 2s infinite linear'};\n+  const {altText, clickable = false, iconShape = null, styleOverrides = {}, onClick = () => {}, } = fp.cond([\n+    [\n+      (s) => s === RuntimeStatus.Creating,\n+      () => ({\n+        altText: 'Runtime creation in progress',\n+        clickable: false,\n+        iconShape: 'compute-starting',\n+        styleOverrides: rotateStyle,\n+        onClick: () => {}", "originalCommit": "eabba91d94821a90d18f10703c302b13396484be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgxNzU0MA==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532817540", "bodyText": "nit: I would probably just omit these values where you are just accepting the default - would remove some boilerplate and makes this easier to scan", "author": "calbach", "createdAt": "2020-11-30T18:42:06Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -390,6 +389,146 @@ const PresetSelector = ({hasMicroarrayData, setSelectedDiskSize, setSelectedMach\n   </PopupTrigger>;\n };\n \n+const StartStopRuntimeButton = ({workspace, containerStyle}) => {\n+  const [status, setRuntimeStatus] = useRuntimeStatus(workspace.namespace);\n+\n+  const rotateStyle = {animation: 'rotation 2s infinite linear'};\n+  const {altText, clickable = false, iconShape = null, styleOverrides = {}, onClick = () => {}, } = fp.cond([\n+    [\n+      (s) => s === RuntimeStatus.Creating,\n+      () => ({\n+        altText: 'Runtime creation in progress',\n+        clickable: false,\n+        iconShape: 'compute-starting',\n+        styleOverrides: rotateStyle,\n+        onClick: () => {}\n+      })\n+    ],\n+    [\n+      (s) => s === RuntimeStatus.Running,\n+      () => ({\n+        altText: 'Runtime running, click to pause',\n+        clickable: true,\n+        iconShape: 'compute-running',\n+        styleOverrides: {},", "originalCommit": "eabba91d94821a90d18f10703c302b13396484be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgxOTI4OA==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532819288", "bodyText": "nit: If this just uses the namespace, I'd probably have the parameter just be namespace instead", "author": "calbach", "createdAt": "2020-11-30T18:45:09Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -390,6 +389,146 @@ const PresetSelector = ({hasMicroarrayData, setSelectedDiskSize, setSelectedMach\n   </PopupTrigger>;\n };\n \n+const StartStopRuntimeButton = ({workspace, containerStyle}) => {\n+  const [status, setRuntimeStatus] = useRuntimeStatus(workspace.namespace);", "originalCommit": "eabba91d94821a90d18f10703c302b13396484be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyMDg3Mw==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532820873", "bodyText": "Why does the conditional currentRuntime && exist here, but not on the create page?", "author": "calbach", "createdAt": "2020-11-30T18:47:44Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -811,13 +953,15 @@ export const RuntimePanel = fp.flow(\n       />],\n       [PanelContent.Customize, () => <Fragment>\n         <div style={styles.controlSection}>\n-          <CostInfo runtimeChanged={runtimeChanged}\n-                                runtimeConfig={newRuntimeConfig}\n-                                currentUser={profile.username}\n-                                workspace={workspace}\n-                                creatorFreeCreditsRemaining={creatorFreeCreditsRemaining}\n-          />\n-\n+          <FlexRow style={styles.costPredictorWrapper}>\n+            {currentRuntime && <StartStopRuntimeButton workspace={workspace} containerStyle={{borderRadius: '5px 0 0 5px'}}/>}", "originalCommit": "eabba91d94821a90d18f10703c302b13396484be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg0NjEyOA==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532846128", "bodyText": "probably just had this earlier while fixing a bug and forgot to remove", "author": "als364", "createdAt": "2020-11-30T19:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyMDg3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyMTE4Mg==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532821182", "bodyText": "containerStyle is identical in both usages. Should this parameter just be removed and consolidated?", "author": "calbach", "createdAt": "2020-11-30T18:48:19Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -530,12 +669,15 @@ const CreatePanel = ({creatorFreeCreditsRemaining, preset, profile, setPanelCont\n   const workerDiskSize = computeType === ComputeType.Dataproc ? dataprocConfig.workerDiskSize : null;\n \n   return <div style={styles.controlSection}>\n-    <CostInfo runtimeChanged={false}\n-              runtimeConfig={runtimeConfig}\n-              currentUser={profile.username}\n-              workspace={workspace}\n-              creatorFreeCreditsRemaining={creatorFreeCreditsRemaining}\n-    />\n+    <FlexRow style={styles.costPredictorWrapper}>\n+      <StartStopRuntimeButton workspace={workspace} containerStyle={{borderRadius: '5px 0 0 5px'}}/>", "originalCommit": "eabba91d94821a90d18f10703c302b13396484be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg0NjUzOQ==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532846539", "bodyText": "yeah, probably fine for now, it can always be factored out if someone wants to put this not next to the cost estimator", "author": "als364", "createdAt": "2020-11-30T19:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyMTE4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyNDE3NA==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532824174", "bodyText": "Existing issue with other test cases, but this is flawed because if await runInitializerAndTimers(); does not throw an error, the test passes.", "author": "calbach", "createdAt": "2020-11-30T18:53:27Z", "path": "ui/src/app/utils/leo-runtime-initializer.spec.tsx", "diffHunk": "@@ -315,4 +317,27 @@ describe('RuntimeInitializer', () => {\n       expect(error.message).toMatch(/max runtime resume count/i);\n     }\n   });\n+\n+  it('should respect the maxPauseCount default', async() => {\n+    mockGetRuntimeCalls([\n+      {status: RuntimeStatus.Running},\n+    ]);\n+    try {\n+      await runInitializerAndTimers();\n+    } catch (error) {", "originalCommit": "eabba91d94821a90d18f10703c302b13396484be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMTkyNQ==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532831925", "bodyText": "This breaks the functionality Eric added, since his resolutionCondition is status !== Running. I believe the correct logic here instead would be:\n} else if (this.reachedResolution()) {\n  ...\n} else if (this.isRuntimeRunning() && this.pauseCount < this.maxPauseCount) {\n  await this.pauseRuntime();\n}\n\nYou should also adjust the resolutionCondition in your case to instead look for the Stopped status, otherwise it will just hang indefinitely.", "author": "calbach", "createdAt": "2020-11-30T19:06:28Z", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -343,9 +363,13 @@ export class LeoRuntimeInitializer {\n           `Runtime ${this.currentRuntime.googleProject}/${this.currentRuntime.runtimeName}` +\n           ` has reached an ERROR status`);\n         await this.deleteRuntime();\n-      } else if (this.reachedResolution()) {\n-        // We've reached the goal - resolve the Promise.\n-        return this.resolve(this.currentRuntime);\n+      } else if (this.isRuntimeRunning()) {", "originalCommit": "eabba91d94821a90d18f10703c302b13396484be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg0MzUxNg==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532843516", "bodyText": "Sorry, on further reading, I realize it won't hang - but instead it will just throw once it hits the limit of 0 on maxResumeCount, which is similar to what we're doing for deletion. resolutionCondition is probably a cleaner way of handling this (per my other comment), both for this Stop functionality, and for the previous delete functionality.", "author": "calbach", "createdAt": "2020-11-30T19:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMTkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyMDgyNA==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532920824", "bodyText": "If I do this I'll need to move resolutionCondition up to the top of this set of conditionals or else it'll just thrash between stopping/starting forever. It's likely that it should be there anyways though", "author": "als364", "createdAt": "2020-11-30T21:39:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMTkyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMjY5Mw==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532832693", "bodyText": "nit: Please use a consistent verb throughout - would prefer stop over pause, since it matches Leo's terminology.  I realize this is somewhat of an existing issue, since we already used resume in this file.", "author": "calbach", "createdAt": "2020-11-30T19:07:46Z", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -343,9 +363,13 @@ export class LeoRuntimeInitializer {\n           `Runtime ${this.currentRuntime.googleProject}/${this.currentRuntime.runtimeName}` +\n           ` has reached an ERROR status`);\n         await this.deleteRuntime();\n-      } else if (this.reachedResolution()) {\n-        // We've reached the goal - resolve the Promise.\n-        return this.resolve(this.currentRuntime);\n+      } else if (this.isRuntimeRunning()) {\n+        if (this.pauseCount < this.maxPauseCount) {\n+          await this.pauseRuntime();", "originalCommit": "eabba91d94821a90d18f10703c302b13396484be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg0MDE4Ng==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532840186", "bodyText": "On further review, I don't think we need this at all. Just issue the Stop manually (you're already doing this, in runtime-utils), then use the initializer to wait for it to reach the Stopped status via the custom resolutionCondition. You'll also need to move the resolutionCond check higher in the list of checks, so we don't try to for example, startRuntime when we're actually done. The initializer itself has no need that I can see to invoke Stop.", "author": "calbach", "createdAt": "2020-11-30T19:20:24Z", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -80,6 +82,7 @@ export interface LeoRuntimeInitializerOptions {\n   overallTimeout?: number;\n   maxCreateCount?: number;\n   maxDeleteCount?: number;\n+  maxPauseCount?: number;", "originalCommit": "eabba91d94821a90d18f10703c302b13396484be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg0Njg2Mg==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532846862", "bodyText": "To expand on this slightly, the reason this is incongruent to the other options is that the others are all in service of moving the state machine towards a Running state - even though in several places this is more or less abused to exit early in another state, the state machine always moves towards Running. Adding pause as a knob here introduces ambiguity into the utility, e.g. maxPauseCount: 1, maxResumeCount: 1 is nonsensical. I think there's probably some more general refactoring to do here, but I think it shouldn't be necessary as part of this PR.", "author": "calbach", "createdAt": "2020-11-30T19:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg0MDE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg0MTc0OA==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532841748", "bodyText": "If you remove maxPauseCount per my other comment, I would consolidate all of these. Only the resolutionCondition should need to vary between these different options.", "author": "calbach", "createdAt": "2020-11-30T19:23:01Z", "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -277,17 +279,51 @@ export const useRuntimeStatus = (currentWorkspaceNamespace): [\n               throw e;\n             }\n           }\n-        }]);\n+        }],\n+        [RuntimeStatusRequest.Start, async() => {\n+          try {\n+            await LeoRuntimeInitializer.initialize({workspaceNamespace: currentWorkspaceNamespace, maxCreateCount: 0, maxPauseCount: 0});\n+          } catch (e) {\n+            // ExceededActionCountError is expected, as we exceed our create limit of 0.\n+            if (!(e instanceof ExceededActionCountError ||\n+                e instanceof LeoRuntimeInitializationAbortedError)) {\n+              throw e;\n+            }\n+          }\n+        }],\n+        [RuntimeStatusRequest.Stop, async() => {\n+          try {\n+            await LeoRuntimeInitializer.initialize({\n+              workspaceNamespace: currentWorkspaceNamespace,\n+              maxCreateCount: 0,\n+              maxPauseCount: 1,", "originalCommit": "eabba91d94821a90d18f10703c302b13396484be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6bccaccbfbd8fce8452f3fc16c94972c70a94995", "url": "https://github.com/all-of-us/workbench/commit/6bccaccbfbd8fce8452f3fc16c94972c70a94995", "message": "review feedback", "committedDate": "2020-11-30T21:49:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk2NDg4NQ==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532964885", "bodyText": "nit: accidental trailing comma after onClick?", "author": "calbach", "createdAt": "2020-11-30T23:14:27Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -390,6 +390,121 @@ const PresetSelector = ({hasMicroarrayData, setSelectedDiskSize, setSelectedMach\n   </PopupTrigger>;\n };\n \n+const StartStopRuntimeButton = ({workspaceNamespace}) => {\n+  const [status, setRuntimeStatus] = useRuntimeStatus(workspaceNamespace);\n+\n+  const rotateStyle = {animation: 'rotation 2s infinite linear'};\n+  const {altText, iconShape = null, styleOverrides = {}, onClick = null, } = switchCase(status,", "originalCommit": "6bccaccbfbd8fce8452f3fc16c94972c70a94995", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk2NTI4MQ==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532965281", "bodyText": "I notice in the video that the alt text is bouncing with the rotation animation as the effective width/position of the icon changes. Would be good to fix this", "author": "calbach", "createdAt": "2020-11-30T23:15:29Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -390,6 +390,121 @@ const PresetSelector = ({hasMicroarrayData, setSelectedDiskSize, setSelectedMach\n   </PopupTrigger>;\n };\n \n+const StartStopRuntimeButton = ({workspaceNamespace}) => {\n+  const [status, setRuntimeStatus] = useRuntimeStatus(workspaceNamespace);\n+\n+  const rotateStyle = {animation: 'rotation 2s infinite linear'};\n+  const {altText, iconShape = null, styleOverrides = {}, onClick = null, } = switchCase(status,\n+    [\n+      RuntimeStatus.Creating,\n+      () => ({\n+        altText: 'Runtime creation in progress',", "originalCommit": "6bccaccbfbd8fce8452f3fc16c94972c70a94995", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk2ODIzMw==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532968233", "bodyText": "maxCreateCount: 0  should probably still be set here", "author": "calbach", "createdAt": "2020-11-30T23:22:52Z", "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -265,29 +267,42 @@ export const useRuntimeStatus = (currentWorkspaceNamespace): [\n \n   useEffect(() => {\n     // Additional status changes can be put here\n-    if (!!runtimeStatus) {\n-      switchCase(runtimeStatus,\n-        [RuntimeStatusRequest.Delete, async() => {\n-          try {\n-            await LeoRuntimeInitializer.initialize({workspaceNamespace: currentWorkspaceNamespace, maxCreateCount: 0});\n-          } catch (e) {\n-            // ExceededActionCountError is expected, as we exceed our create limit of 0.\n-            if (!(e instanceof ExceededActionCountError ||\n-                  e instanceof LeoRuntimeInitializationAbortedError)) {\n-              throw e;\n-            }\n+    const targetStatus = switchCase(runtimeStatus,\n+        [RuntimeStatusRequest.Delete, () => RuntimeStatus.Deleted],\n+        [RuntimeStatusRequest.Start, () => RuntimeStatus.Running],\n+        [RuntimeStatusRequest.Stop, () => RuntimeStatus.Stopped]\n+    );\n+    const initializePolling = async() => {\n+      if (!!runtimeStatus) {\n+        try {\n+          await LeoRuntimeInitializer.initialize({\n+            workspaceNamespace: currentWorkspaceNamespace,", "originalCommit": "6bccaccbfbd8fce8452f3fc16c94972c70a94995", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk2ODU1Mw==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532968553", "bodyText": "The goal in the deleted case should technically be runtime === null OR status is Deleted", "author": "calbach", "createdAt": "2020-11-30T23:23:42Z", "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -265,29 +267,42 @@ export const useRuntimeStatus = (currentWorkspaceNamespace): [\n \n   useEffect(() => {\n     // Additional status changes can be put here\n-    if (!!runtimeStatus) {\n-      switchCase(runtimeStatus,\n-        [RuntimeStatusRequest.Delete, async() => {\n-          try {\n-            await LeoRuntimeInitializer.initialize({workspaceNamespace: currentWorkspaceNamespace, maxCreateCount: 0});\n-          } catch (e) {\n-            // ExceededActionCountError is expected, as we exceed our create limit of 0.\n-            if (!(e instanceof ExceededActionCountError ||\n-                  e instanceof LeoRuntimeInitializationAbortedError)) {\n-              throw e;\n-            }\n+    const targetStatus = switchCase(runtimeStatus,\n+        [RuntimeStatusRequest.Delete, () => RuntimeStatus.Deleted],", "originalCommit": "6bccaccbfbd8fce8452f3fc16c94972c70a94995", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk3MDAxMw==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r532970013", "bodyText": "The previous logic was correct. It will need to be updated once https://precisionmedicineinitiative.atlassian.net/browse/RW-5922 is fixed, but it would be looking at the labels instead in that case. As it currently stands, you'll only see Deleted on the client side if the deleted runtime was a user override (in which case, we want to show the customize page instead).", "author": "calbach", "createdAt": "2020-11-30T23:27:08Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -666,7 +784,7 @@ export const RuntimePanel = fp.flow(\n   const initialPanelContent = fp.cond([\n     // currentRuntime being undefined means the first `getRuntime` has still not completed.\n     [([r, ]) => r === undefined, () => PanelContent.Customize],\n-    [([r, s]) => r === null || s === RuntimeStatus.Unknown, () => PanelContent.Create],\n+    [([r, s]) => r === null || s === RuntimeStatus.Unknown || s === RuntimeStatus.Deleted, () => PanelContent.Create],", "originalCommit": "6bccaccbfbd8fce8452f3fc16c94972c70a94995", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1MTk4MQ==", "url": "https://github.com/all-of-us/workbench/pull/4316#discussion_r533451981", "bodyText": "ah, this would be the source of the behavior you asked me about in Slack, then. I think I did this after talking with Lou about the delete flow.", "author": "als364", "createdAt": "2020-12-01T14:33:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk3MDAxMw=="}], "type": "inlineReview"}, {"oid": "87b4a4cb76e1187d563dabcdfdbeab19dab2e551", "url": "https://github.com/all-of-us/workbench/commit/87b4a4cb76e1187d563dabcdfdbeab19dab2e551", "message": "delete delete delete", "committedDate": "2020-12-01T14:07:13Z", "type": "commit"}, {"oid": "cac7ea7c8f5eb29350a3fe8f8bb21cc5c061f4ad", "url": "https://github.com/all-of-us/workbench/commit/cac7ea7c8f5eb29350a3fe8f8bb21cc5c061f4ad", "message": "most comments", "committedDate": "2020-12-01T15:09:49Z", "type": "commit"}, {"oid": "f270ffc60344c48f7bbcb23e179ff9e2887763e9", "url": "https://github.com/all-of-us/workbench/commit/f270ffc60344c48f7bbcb23e179ff9e2887763e9", "message": "one would think webdev would not require me to remember middle school math but there you go", "committedDate": "2020-12-01T15:20:34Z", "type": "commit"}, {"oid": "e1c0b7c0bd29063df5a70268ec2a2099b22fd86a", "url": "https://github.com/all-of-us/workbench/commit/e1c0b7c0bd29063df5a70268ec2a2099b22fd86a", "message": "lint", "committedDate": "2020-12-01T15:39:31Z", "type": "commit"}]}