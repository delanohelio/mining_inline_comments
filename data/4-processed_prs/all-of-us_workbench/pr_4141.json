{"pr_number": 4141, "pr_title": "[RW-5742][risk=no] CircleCI config improvement", "pr_createdAt": "2020-10-09T02:22:20Z", "pr_url": "https://github.com/all-of-us/workbench/pull/4141", "timeline": [{"oid": "d95938fae87ed4c4f7ebb0432398b57244fb4122", "url": "https://github.com/all-of-us/workbench/commit/d95938fae87ed4c4f7ebb0432398b57244fb4122", "message": "use executors in ci config", "committedDate": "2020-10-09T18:46:41Z", "type": "forcePushed"}, {"oid": "2ab3f5aedbcd70d46eb12dae0f2ca26b50ac6aa9", "url": "https://github.com/all-of-us/workbench/commit/2ab3f5aedbcd70d46eb12dae0f2ca26b50ac6aa9", "message": "use executors in ci config", "committedDate": "2020-10-09T18:48:51Z", "type": "forcePushed"}, {"oid": "b1504802b756bf835aa6ebdd422349b787c5e05a", "url": "https://github.com/all-of-us/workbench/commit/b1504802b756bf835aa6ebdd422349b787c5e05a", "message": "cleanup ci config file", "committedDate": "2020-10-13T20:46:33Z", "type": "forcePushed"}, {"oid": "eed2e66f5a7cb09a996fa3cfafe98c1c3d9250cb", "url": "https://github.com/all-of-us/workbench/commit/eed2e66f5a7cb09a996fa3cfafe98c1c3d9250cb", "message": "cleanup ci config file", "committedDate": "2020-10-13T20:56:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI4NDY2Nw==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r504284667", "bodyText": "For testing e2e job short-circuit evaluation.", "author": "aweng98", "createdAt": "2020-10-13T22:03:26Z", "path": "e2e/app/page/workspaces-page.ts", "diffHunk": "@@ -46,7 +46,6 @@ export default class WorkspacesPage extends WorkspaceEditPage {\n    */\n   async load(): Promise<this> {\n     await this.loadPageUrl(PageUrl.Workspaces);\n-    await waitWhileLoading(this.page);", "originalCommit": "6e69d50d07743376682438191800d4e50eead7e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMjI3NQ==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r504912275", "bodyText": "[not necessarily for this PR]\nThinking about naming here, a better convention might be for each job to start with a verb. That way they sort a little better, and align with typical method-naming conventions where you want the verb first. This is also the pattern that most of the commands use.\nA few example renames:\napi-unit-test --> test-api-unit\napi-deps-check --> check-api-deps\nui-deploy-to-test --> deploy-ui-to-test\netc...\nThis may be infeasible / annoying to change though, with not great value add. Just thought it was worth noting.", "author": "gjuggler", "createdAt": "2020-10-14T19:14:10Z", "path": ".circleci/README.md", "diffHunk": "@@ -0,0 +1,100 @@\n+## CircleCI\n+\n+#### config.yml overview:\n+\n+##### Pipeline parameters:\n+    - workbench-image\n+    - db-image\n+    - circle-service-account\n+    \n+##### Anchors\n+    - default-environment\n+    - db-environment\n+    - puppeteer-test-environment\n+    - filter-master-branch\n+    - filter-release-tags\n+    - filter-pr-branch\n+\n+##### Executors\n+    - workbench-executor\n+    - db-executor\n+    - e2e-test-executor\n+    \n+##### Commands\n+    - notify-on-failure\n+    - gcloud-auth-login\n+    - checkout-code\n+    - store-commit-message\n+    - halt-e2e-test-check\n+    - halt-test-check\n+    - ui-cache\n+    - run-e2e-test\n+    - launch-local-api\n+    - launch-local-ui\n+    - run-api-test\n+    - deploy-to-staging-perf\n+    - deploy-to-test\n+    \n+##### Jobs", "originalCommit": "920f76071a7c4e721e1936be76025d79490f3d07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1ODA4NQ==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505658085", "bodyText": "I like the suggestion. If all agrees, I can implement change in new PR.", "author": "aweng98", "createdAt": "2020-10-15T15:58:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMjI3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3MzI5MA==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505873290", "bodyText": "If there's a way to have the tests contained somehow so that we have api.test-unit and ui.test-unit\nI'd start a little doc with the proposed system before doing it in the yaml.", "author": "jaycarlton", "createdAt": "2020-10-15T21:34:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMjI3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMjQyNA==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r504912424", "bodyText": "nit: remove extra bullet?", "author": "gjuggler", "createdAt": "2020-10-14T19:14:25Z", "path": ".circleci/README.md", "diffHunk": "@@ -0,0 +1,100 @@\n+## CircleCI\n+\n+#### config.yml overview:\n+\n+##### Pipeline parameters:\n+    - workbench-image\n+    - db-image\n+    - circle-service-account\n+    \n+##### Anchors\n+    - default-environment\n+    - db-environment\n+    - puppeteer-test-environment\n+    - filter-master-branch\n+    - filter-release-tags\n+    - filter-pr-branch\n+\n+##### Executors\n+    - workbench-executor\n+    - db-executor\n+    - e2e-test-executor\n+    \n+##### Commands\n+    - notify-on-failure\n+    - gcloud-auth-login\n+    - checkout-code\n+    - store-commit-message\n+    - halt-e2e-test-check\n+    - halt-test-check\n+    - ui-cache\n+    - run-e2e-test\n+    - launch-local-api\n+    - launch-local-ui\n+    - run-api-test\n+    - deploy-to-staging-perf\n+    - deploy-to-test\n+    \n+##### Jobs\n+    - api-unit-test\n+    - api-local-test\n+    - api-deps-check\n+    - api-integration-test\n+    - api-bigquery-test\n+    - ui-unit-test\n+    - ui-deploy-to-test\n+    - api-deploy-to-test\n+    - deploy-to-staging\n+    - deploy-to-perf\n+    - puppeteer-e2e-test\n+    \n+#### Skipping CI build:\n+    \n+    - Adding [ci skip] or [skip ci] string in commit message. This not only skips the marked commit, but also all other commits in the push.\n+    - Adding `skip e2e` (case-insensitive) in commit message. This skips build on marked commit.\n+    - ", "originalCommit": "920f76071a7c4e721e1936be76025d79490f3d07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMjU2OA==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r504912568", "bodyText": "nit: remove leading dash?", "author": "gjuggler", "createdAt": "2020-10-14T19:14:41Z", "path": ".circleci/README.md", "diffHunk": "@@ -0,0 +1,100 @@\n+## CircleCI\n+\n+#### config.yml overview:\n+\n+##### Pipeline parameters:\n+    - workbench-image\n+    - db-image\n+    - circle-service-account\n+    \n+##### Anchors\n+    - default-environment\n+    - db-environment\n+    - puppeteer-test-environment\n+    - filter-master-branch\n+    - filter-release-tags\n+    - filter-pr-branch\n+\n+##### Executors\n+    - workbench-executor\n+    - db-executor\n+    - e2e-test-executor\n+    \n+##### Commands\n+    - notify-on-failure\n+    - gcloud-auth-login\n+    - checkout-code\n+    - store-commit-message\n+    - halt-e2e-test-check\n+    - halt-test-check\n+    - ui-cache\n+    - run-e2e-test\n+    - launch-local-api\n+    - launch-local-ui\n+    - run-api-test\n+    - deploy-to-staging-perf\n+    - deploy-to-test\n+    \n+##### Jobs\n+    - api-unit-test\n+    - api-local-test\n+    - api-deps-check\n+    - api-integration-test\n+    - api-bigquery-test\n+    - ui-unit-test\n+    - ui-deploy-to-test\n+    - api-deploy-to-test\n+    - deploy-to-staging\n+    - deploy-to-perf\n+    - puppeteer-e2e-test\n+    \n+#### Skipping CI build:\n+    \n+    - Adding [ci skip] or [skip ci] string in commit message. This not only skips the marked commit, but also all other commits in the push.\n+    - Adding `skip e2e` (case-insensitive) in commit message. This skips build on marked commit.\n+    - \n+\n+#### - Short-circuit evaluation: ", "originalCommit": "920f76071a7c4e721e1936be76025d79490f3d07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxNDE4NA==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r504914184", "bodyText": "nit: typo s/ene/end/", "author": "gjuggler", "createdAt": "2020-10-14T19:17:40Z", "path": ".circleci/README.md", "diffHunk": "@@ -0,0 +1,100 @@\n+## CircleCI\n+\n+#### config.yml overview:\n+\n+##### Pipeline parameters:\n+    - workbench-image\n+    - db-image\n+    - circle-service-account\n+    \n+##### Anchors\n+    - default-environment\n+    - db-environment\n+    - puppeteer-test-environment\n+    - filter-master-branch\n+    - filter-release-tags\n+    - filter-pr-branch\n+\n+##### Executors\n+    - workbench-executor\n+    - db-executor\n+    - e2e-test-executor\n+    \n+##### Commands\n+    - notify-on-failure\n+    - gcloud-auth-login\n+    - checkout-code\n+    - store-commit-message\n+    - halt-e2e-test-check\n+    - halt-test-check\n+    - ui-cache\n+    - run-e2e-test\n+    - launch-local-api\n+    - launch-local-ui\n+    - run-api-test\n+    - deploy-to-staging-perf\n+    - deploy-to-test\n+    \n+##### Jobs\n+    - api-unit-test\n+    - api-local-test\n+    - api-deps-check\n+    - api-integration-test\n+    - api-bigquery-test\n+    - ui-unit-test\n+    - ui-deploy-to-test\n+    - api-deploy-to-test\n+    - deploy-to-staging\n+    - deploy-to-perf\n+    - puppeteer-e2e-test\n+    \n+#### Skipping CI build:\n+    \n+    - Adding [ci skip] or [skip ci] string in commit message. This not only skips the marked commit, but also all other commits in the push.\n+    - Adding `skip e2e` (case-insensitive) in commit message. This skips build on marked commit.\n+    - \n+\n+#### - Short-circuit evaluation: \n+    - API/UI tests will not run if file has not changed inside `ui, api or api/src/main/resources` directories.\n+    - Puppeteer tests will not run if file has not changed inside `e2e, ui, api or api/src/main/resources` directories.\n+    - Puppeteer tests will not run if changed files match patterns specified in `e2e-job-ignore-patterns.txt` file.\n+     \n+#### Running tests in parallel:\n+\n+    - `puppeteer-e2e-test` job run Puppeteer ene-to-end tests in parallel.", "originalCommit": "920f76071a7c4e721e1936be76025d79490f3d07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkyNDE1Nw==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r504924157", "bodyText": "The rest of the README looks useful, but this section is almost guaranteed to go out of sync, and doesn't provide too much value over just looking at the config directly. I would suggest removing it.", "author": "calbach", "createdAt": "2020-10-14T19:35:24Z", "path": ".circleci/README.md", "diffHunk": "@@ -0,0 +1,100 @@\n+## CircleCI\n+\n+#### config.yml overview:", "originalCommit": "920f76071a7c4e721e1936be76025d79490f3d07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1NzQwMg==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505657402", "bodyText": "My original plan for the overview section is this, have short explanation, comments, or link add under each bulleted item. It allows users a quick understanding without opening config.yml.\nSomething like this simple example:\n##### Executors\n    - workbench-executor\n        Default workbench docker image environment which is used to run all jobs.\n    - db-executor\n        Default workbench environment plus MySQL database docker image.\n    - puppeteer-executor\n        Environment with browsers that is used to run Puppeteer end-to-end tests.\n\nWhat do you think? keep or remove.", "author": "aweng98", "createdAt": "2020-10-15T15:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkyNDE1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3MTU5OA==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505871598", "bodyText": "I'd inline any comments you have. Maybe do a tutorial-style that goes into how to build one in a bit of depth, but I tend to agree that keeping this file up-to-date for those details will be tricky.", "author": "jaycarlton", "createdAt": "2020-10-15T21:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkyNDE1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMDgzMA==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505900830", "bodyText": "overview is removed.", "author": "aweng98", "createdAt": "2020-10-15T22:31:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkyNDE1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk0Nzk0MQ==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505947941", "bodyText": "Agree with removal - would just add these in the config.yml itself as appropriate", "author": "calbach", "createdAt": "2020-10-16T00:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkyNDE1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkyNDc4Nw==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r504924787", "bodyText": "nit: puppeteer-environment seems sufficient to me, the \"-test-\" infix is sort of implied.", "author": "calbach", "createdAt": "2020-10-14T19:36:37Z", "path": ".circleci/config.yml", "diffHunk": "@@ -1,241 +1,216 @@\n version: 2.1\n \n-slack/notify-on-failure:\n-  only_for_branches: \"master\"\n-\n+# -------------------------\n+#   ORBS\n+# -------------------------\n # https://circleci.com/orbs/registry/\n orbs:\n   browser-tools: circleci/browser-tools@1.0.1\n-  slack: circleci/slack@3.4.2\n \n # -------------------------\n-#   PARAMETERS\n+#   PIPELINE PARAMETERS\n # -------------------------\n parameters:\n-  circleci_service_account:\n+  circle-service-account:\n     type: string\n     default: \"circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com\"\n-  workbench_image:\n+  workbench-image:\n     type: string\n     default: \"allofustest/workbench:buildimage-0.0.19\"\n-  mysql_image:\n+  db-image:\n     type: string\n     default: \"circleci/mysql:5.7\"\n \n # -------------------------\n #   ANCHORS\n # -------------------------\n anchors:\n-  java_env: &java_env\n-    # As best I can tell (dmohs, 7 Feb '17), this is the only way to set a memory limit that Java\n-    # processes executed within CircleCI's docker containers will respect. Very helpful resource:\n-    # https://circleci.com/blog/how-to-handle-java-oom-errors/\n-    #\n-    # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n-    # so we bumped this down further to 2G.\n+  default-environment: &default-environment\n     JAVA_TOOL_OPTIONS: -Xmx2g\n     # See: https://support.circleci.com/hc/en-us/articles/360021812453-Common-Android-memory-issues\n     GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process\n     TERM: dumb\n-    MYSQL_ROOT_PASSWORD: ubuntu\n \n-  mysql_env: &mysql_env\n+  db-environment: &db-environment\n     MYSQL_ROOT_PASSWORD: ubuntu\n     MYSQL_USER: ubuntu\n     MYSQL_PASSWORD: ubuntu\n \n-  e2e_env: &e2e_env\n+  puppeteer-test-environment: &puppeteer-test-environment", "originalCommit": "920f76071a7c4e721e1936be76025d79490f3d07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkyNjM1NA==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r504926354", "bodyText": "consistency on puppeteer vs e2e?", "author": "calbach", "createdAt": "2020-10-14T19:39:35Z", "path": ".circleci/config.yml", "diffHunk": "@@ -1,241 +1,216 @@\n version: 2.1\n \n-slack/notify-on-failure:\n-  only_for_branches: \"master\"\n-\n+# -------------------------\n+#   ORBS\n+# -------------------------\n # https://circleci.com/orbs/registry/\n orbs:\n   browser-tools: circleci/browser-tools@1.0.1\n-  slack: circleci/slack@3.4.2\n \n # -------------------------\n-#   PARAMETERS\n+#   PIPELINE PARAMETERS\n # -------------------------\n parameters:\n-  circleci_service_account:\n+  circle-service-account:\n     type: string\n     default: \"circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com\"\n-  workbench_image:\n+  workbench-image:\n     type: string\n     default: \"allofustest/workbench:buildimage-0.0.19\"\n-  mysql_image:\n+  db-image:\n     type: string\n     default: \"circleci/mysql:5.7\"\n \n # -------------------------\n #   ANCHORS\n # -------------------------\n anchors:\n-  java_env: &java_env\n-    # As best I can tell (dmohs, 7 Feb '17), this is the only way to set a memory limit that Java\n-    # processes executed within CircleCI's docker containers will respect. Very helpful resource:\n-    # https://circleci.com/blog/how-to-handle-java-oom-errors/\n-    #\n-    # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n-    # so we bumped this down further to 2G.\n+  default-environment: &default-environment\n     JAVA_TOOL_OPTIONS: -Xmx2g\n     # See: https://support.circleci.com/hc/en-us/articles/360021812453-Common-Android-memory-issues\n     GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process\n     TERM: dumb\n-    MYSQL_ROOT_PASSWORD: ubuntu\n \n-  mysql_env: &mysql_env\n+  db-environment: &db-environment\n     MYSQL_ROOT_PASSWORD: ubuntu\n     MYSQL_USER: ubuntu\n     MYSQL_PASSWORD: ubuntu\n \n-  e2e_env: &e2e_env\n+  puppeteer-test-environment: &puppeteer-test-environment\n     CI: true\n     NODE_ENV: development\n+    WORKBENCH_ENV: test\n+    TEST_MODE: integration\n+\n+  # Job runs for master branch only\n+  filter-master-branch: &filter-master-branch\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter-release-tags: &filter-release-tags\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        # Regex matches Workbench release tag. Example: v5-3-rc1\n+        only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n+\n+  # Job runs for PR branch only\n+  filter-pr-branch: &filter-pr-branch\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n \n-  defaults: &defaults\n+# -------------------------\n+#   EXECUTORS\n+# -------------------------\n+executors:\n+  workbench-executor:\n+    environment:\n+      <<: *default-environment\n     docker:\n-      - image: << pipeline.parameters.workbench_image >>\n+      - image: << pipeline.parameters.workbench-image >>\n     working_directory: ~/workbench\n \n-  java_defaults: &java_defaults\n-    <<: *defaults\n+  db-executor:\n+    docker:\n+      - image: << pipeline.parameters.workbench-image >>\n+      - image: << pipeline.parameters.db-image >>\n+        environment:\n+          <<: *db-environment\n     environment:\n-      <<: *java_env\n-\n-  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n-  # Job runs for master branch only\n-  filter_only_master_branch: &filter_only_master_branch\n-    tags:\n-      ignore: /.*/\n-    branches:\n-      only: master\n+      <<: *default-environment\n+      <<: *db-environment\n+    working_directory: ~/workbench\n \n-  # Job runs for no branch and only for tags starting with \u2018v\u2019\n-  filter_only_release_tags: &filter_only_release_tags\n-    branches:\n-      ignore: /.*/\n-    tags:\n-      # regex explanation:\n-      # \"^\" asserts position at start of a line.\n-      # \"v\" matches the character \"v\" literally (case sensitive).\n-      # \"[0-9]+\" match a single numerical digit (the + quantifier, matches between one and unlimited times, as many times as possible).\n-      # \"-\" matches the character \"-\" literally.\n-      # \"rc\" matches the character \"rc\" literally (case sensitive).\n-      # \"$\" asserts position at the end of a line.\n-      # Workbench release tag format example: v5-3-rc1\n-      only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n-\n-  # Job runs for PR branches only\n-  filter_only_pr_branch: &filter_only_pr_branch\n-    tags:\n-      ignore: /.*/\n-    branches:\n-      ignore: master\n+  e2e-test-executor:", "originalCommit": "920f76071a7c4e721e1936be76025d79490f3d07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "37a017a09b1b6ebf1d2d6ebd260f9abc48b361ac", "url": "https://github.com/all-of-us/workbench/commit/37a017a09b1b6ebf1d2d6ebd260f9abc48b361ac", "message": "undo e2e file change", "committedDate": "2020-10-15T16:33:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3NDMwNg==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505874306", "bodyText": "Is there a command to have circleCI list all the targets, or to show a page with them all? That would remove any need for this list I think.\nThere are description fiields for all these jobs I believe.", "author": "jaycarlton", "createdAt": "2020-10-15T21:35:28Z", "path": ".circleci/README.md", "diffHunk": "@@ -0,0 +1,104 @@\n+## CircleCI\n+https://circleci.com/docs/reference-2-1/#circleci-2-1-reference\n+\n+#### config.yml overview:\n+\n+##### Pipeline parameters:\n+    - workbench-image\n+    - db-image\n+    - circle-service-account\n+    \n+##### Anchors\n+    - default-environment\n+    - db-environment\n+    - puppeteer-environment\n+    - filter-master-branch\n+    - filter-release-tags\n+    - filter-pr-branch\n+\n+##### Executors\n+    - workbench-executor\n+        Default workbench docker image environment which is used to run all jobs.\n+    - db-executor\n+        Default workbench environment plus MySQL database docker image.\n+    - puppeteer-executor\n+        Environment with browsers that is used to run Puppeteer end-to-end tests.\n+    \n+##### Commands\n+    - notify-on-failure\n+    - gcloud-auth-login\n+    - checkout-code\n+    - store-commit-message\n+    - halt-puppeteer-check\n+    - halt-test-check\n+    - ui-cache\n+    - run-e2e-test\n+    - launch-local-api\n+    - launch-local-ui\n+    - run-api-test\n+    - deploy-to-staging-perf\n+    - deploy-to-test\n+    \n+##### Jobs\n+    - api-unit-test", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3NDk1Ng==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505874956", "bodyText": "nit: github is rendering these long bullets oddly. I wonder if an asterisk would work better.", "author": "jaycarlton", "createdAt": "2020-10-15T21:36:18Z", "path": ".circleci/README.md", "diffHunk": "@@ -0,0 +1,104 @@\n+## CircleCI\n+https://circleci.com/docs/reference-2-1/#circleci-2-1-reference\n+\n+#### config.yml overview:\n+\n+##### Pipeline parameters:\n+    - workbench-image\n+    - db-image\n+    - circle-service-account\n+    \n+##### Anchors\n+    - default-environment\n+    - db-environment\n+    - puppeteer-environment\n+    - filter-master-branch\n+    - filter-release-tags\n+    - filter-pr-branch\n+\n+##### Executors\n+    - workbench-executor\n+        Default workbench docker image environment which is used to run all jobs.\n+    - db-executor\n+        Default workbench environment plus MySQL database docker image.\n+    - puppeteer-executor\n+        Environment with browsers that is used to run Puppeteer end-to-end tests.\n+    \n+##### Commands\n+    - notify-on-failure\n+    - gcloud-auth-login\n+    - checkout-code\n+    - store-commit-message\n+    - halt-puppeteer-check\n+    - halt-test-check\n+    - ui-cache\n+    - run-e2e-test\n+    - launch-local-api\n+    - launch-local-ui\n+    - run-api-test\n+    - deploy-to-staging-perf\n+    - deploy-to-test\n+    \n+##### Jobs\n+    - api-unit-test\n+    - api-local-test\n+    - api-deps-check\n+    - api-integration-test\n+    - api-bigquery-test\n+    - ui-unit-test\n+    - ui-deploy-to-test\n+    - api-deploy-to-test\n+    - deploy-to-staging\n+    - deploy-to-perf\n+    - puppeteer-e2e-test\n+    \n+#### Skipping CI build:\n+    \n+    - Adding [ci skip] or [skip ci] string in commit message. This not only skips the marked commit, but also all other commits in the push.", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3NTU4OQ==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505875589", "bodyText": "Please talk about the dependencies between the different things, and examples where things are parallel or not. Doesn't need to be exhaustive; just one or two nodes from each part of the pipeline. Link to the page with the grraph.", "author": "jaycarlton", "createdAt": "2020-10-15T21:37:09Z", "path": ".circleci/README.md", "diffHunk": "@@ -0,0 +1,104 @@\n+## CircleCI\n+https://circleci.com/docs/reference-2-1/#circleci-2-1-reference\n+\n+#### config.yml overview:\n+\n+##### Pipeline parameters:\n+    - workbench-image\n+    - db-image\n+    - circle-service-account\n+    \n+##### Anchors\n+    - default-environment\n+    - db-environment\n+    - puppeteer-environment\n+    - filter-master-branch\n+    - filter-release-tags\n+    - filter-pr-branch\n+\n+##### Executors\n+    - workbench-executor\n+        Default workbench docker image environment which is used to run all jobs.\n+    - db-executor\n+        Default workbench environment plus MySQL database docker image.\n+    - puppeteer-executor\n+        Environment with browsers that is used to run Puppeteer end-to-end tests.\n+    \n+##### Commands\n+    - notify-on-failure\n+    - gcloud-auth-login\n+    - checkout-code\n+    - store-commit-message\n+    - halt-puppeteer-check\n+    - halt-test-check\n+    - ui-cache\n+    - run-e2e-test\n+    - launch-local-api\n+    - launch-local-ui\n+    - run-api-test\n+    - deploy-to-staging-perf\n+    - deploy-to-test\n+    \n+##### Jobs\n+    - api-unit-test\n+    - api-local-test\n+    - api-deps-check\n+    - api-integration-test\n+    - api-bigquery-test\n+    - ui-unit-test", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3NjMyNg==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505876326", "bodyText": "We don't need a full listing. Just say the high-level intent of the rules:\n\nchanges to API code or Swagger inputs trigger api and e2e tests. Other tests proceedd in parallel. etc.", "author": "jaycarlton", "createdAt": "2020-10-15T21:38:09Z", "path": ".circleci/README.md", "diffHunk": "@@ -0,0 +1,104 @@\n+## CircleCI\n+https://circleci.com/docs/reference-2-1/#circleci-2-1-reference\n+\n+#### config.yml overview:\n+\n+##### Pipeline parameters:\n+    - workbench-image\n+    - db-image\n+    - circle-service-account\n+    \n+##### Anchors\n+    - default-environment\n+    - db-environment\n+    - puppeteer-environment\n+    - filter-master-branch\n+    - filter-release-tags\n+    - filter-pr-branch\n+\n+##### Executors\n+    - workbench-executor\n+        Default workbench docker image environment which is used to run all jobs.\n+    - db-executor\n+        Default workbench environment plus MySQL database docker image.\n+    - puppeteer-executor\n+        Environment with browsers that is used to run Puppeteer end-to-end tests.\n+    \n+##### Commands\n+    - notify-on-failure\n+    - gcloud-auth-login\n+    - checkout-code\n+    - store-commit-message\n+    - halt-puppeteer-check\n+    - halt-test-check\n+    - ui-cache\n+    - run-e2e-test\n+    - launch-local-api\n+    - launch-local-ui\n+    - run-api-test\n+    - deploy-to-staging-perf\n+    - deploy-to-test\n+    \n+##### Jobs\n+    - api-unit-test\n+    - api-local-test\n+    - api-deps-check\n+    - api-integration-test\n+    - api-bigquery-test\n+    - ui-unit-test\n+    - ui-deploy-to-test\n+    - api-deploy-to-test\n+    - deploy-to-staging\n+    - deploy-to-perf\n+    - puppeteer-e2e-test\n+    \n+#### Skipping CI build:\n+    \n+    - Adding [ci skip] or [skip ci] string in commit message. This not only skips the marked commit, but also all other commits in the push.\n+    - Adding `skip e2e` (case-insensitive) in commit message. This skips build on marked commit.\n+    \n+\n+#### Short-circuit evaluation: \n+    - API/UI tests will not run if file has not changed inside `ui, api or api/src/main/resources` directories.", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3NzEwNQ==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505877105", "bodyText": "Wow, our first Orb! Three more for a \u2764\ufe0f  Container.", "author": "jaycarlton", "createdAt": "2020-10-15T21:39:13Z", "path": ".circleci/config.yml", "diffHunk": "@@ -1,241 +1,216 @@\n version: 2.1\n \n-slack/notify-on-failure:\n-  only_for_branches: \"master\"\n-\n+# -------------------------\n+#   ORBS\n+# -------------------------", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3NzI4Mg==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505877282", "bodyText": "Where did Slack go?", "author": "jaycarlton", "createdAt": "2020-10-15T21:39:27Z", "path": ".circleci/config.yml", "diffHunk": "@@ -1,241 +1,216 @@\n version: 2.1\n \n-slack/notify-on-failure:\n-  only_for_branches: \"master\"\n-\n+# -------------------------\n+#   ORBS\n+# -------------------------\n # https://circleci.com/orbs/registry/\n orbs:\n   browser-tools: circleci/browser-tools@1.0.1\n-  slack: circleci/slack@3.4.2", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk0NzQ4NQ==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505947485", "bodyText": "I don't like slack!! (It didn't work for our needs)", "author": "aweng98", "createdAt": "2020-10-16T00:54:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3NzI4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3ODcxOA==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505878718", "bodyText": "When you have lots of variable names at the same scope with a suffix, it's generally a smell that you're in want of an object with fields, e.g. env = {db, puppeteer, default}. If we can't do that, then the next best thing is to name with a prefix instead: env-db env-default.", "author": "jaycarlton", "createdAt": "2020-10-15T21:41:38Z", "path": ".circleci/config.yml", "diffHunk": "@@ -1,241 +1,216 @@\n version: 2.1\n \n-slack/notify-on-failure:\n-  only_for_branches: \"master\"\n-\n+# -------------------------\n+#   ORBS\n+# -------------------------\n # https://circleci.com/orbs/registry/\n orbs:\n   browser-tools: circleci/browser-tools@1.0.1\n-  slack: circleci/slack@3.4.2\n \n # -------------------------\n-#   PARAMETERS\n+#   PIPELINE PARAMETERS\n # -------------------------\n parameters:\n-  circleci_service_account:\n+  circle-service-account:\n     type: string\n     default: \"circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com\"\n-  workbench_image:\n+  workbench-image:\n     type: string\n     default: \"allofustest/workbench:buildimage-0.0.19\"\n-  mysql_image:\n+  db-image:\n     type: string\n     default: \"circleci/mysql:5.7\"\n \n # -------------------------\n #   ANCHORS\n # -------------------------\n anchors:\n-  java_env: &java_env\n-    # As best I can tell (dmohs, 7 Feb '17), this is the only way to set a memory limit that Java\n-    # processes executed within CircleCI's docker containers will respect. Very helpful resource:\n-    # https://circleci.com/blog/how-to-handle-java-oom-errors/\n-    #\n-    # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n-    # so we bumped this down further to 2G.\n+  default-environment: &default-environment\n     JAVA_TOOL_OPTIONS: -Xmx2g\n     # See: https://support.circleci.com/hc/en-us/articles/360021812453-Common-Android-memory-issues\n     GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process\n     TERM: dumb\n-    MYSQL_ROOT_PASSWORD: ubuntu\n \n-  mysql_env: &mysql_env\n+  db-environment: &db-environment", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk0NDcxMA==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505944710", "bodyText": "sure, this makes sense for me. I'll change names with prefix env-. If anyone objects, please let me know.", "author": "aweng98", "createdAt": "2020-10-16T00:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3ODcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4MTg4Mw==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505881883", "bodyText": "nit: These comment headings don't seem to  add value. They will easily become incomplete or misaligned (see my rant about how YAML comments are a hoax).\nI can use the structure tab in IntelliJ or other YAML editor to see the top-level nodes. It's a self-documenting structure.", "author": "jaycarlton", "createdAt": "2020-10-15T21:46:29Z", "path": ".circleci/config.yml", "diffHunk": "@@ -1,241 +1,216 @@\n version: 2.1\n \n-slack/notify-on-failure:\n-  only_for_branches: \"master\"\n-\n+# -------------------------\n+#   ORBS\n+# -------------------------\n # https://circleci.com/orbs/registry/\n orbs:\n   browser-tools: circleci/browser-tools@1.0.1\n-  slack: circleci/slack@3.4.2\n \n # -------------------------\n-#   PARAMETERS\n+#   PIPELINE PARAMETERS\n # -------------------------\n parameters:\n-  circleci_service_account:\n+  circle-service-account:\n     type: string\n     default: \"circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com\"\n-  workbench_image:\n+  workbench-image:\n     type: string\n     default: \"allofustest/workbench:buildimage-0.0.19\"\n-  mysql_image:\n+  db-image:\n     type: string\n     default: \"circleci/mysql:5.7\"\n \n # -------------------------\n #   ANCHORS\n # -------------------------\n anchors:\n-  java_env: &java_env\n-    # As best I can tell (dmohs, 7 Feb '17), this is the only way to set a memory limit that Java\n-    # processes executed within CircleCI's docker containers will respect. Very helpful resource:\n-    # https://circleci.com/blog/how-to-handle-java-oom-errors/\n-    #\n-    # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n-    # so we bumped this down further to 2G.\n+  default-environment: &default-environment\n     JAVA_TOOL_OPTIONS: -Xmx2g\n     # See: https://support.circleci.com/hc/en-us/articles/360021812453-Common-Android-memory-issues\n     GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process\n     TERM: dumb\n-    MYSQL_ROOT_PASSWORD: ubuntu\n \n-  mysql_env: &mysql_env\n+  db-environment: &db-environment\n     MYSQL_ROOT_PASSWORD: ubuntu\n     MYSQL_USER: ubuntu\n     MYSQL_PASSWORD: ubuntu\n \n-  e2e_env: &e2e_env\n+  puppeteer-environment: &puppeteer-environment\n     CI: true\n     NODE_ENV: development\n+    WORKBENCH_ENV: test\n+    TEST_MODE: integration\n+\n+  # Job runs for master branch only\n+  filter-master-branch: &filter-master-branch\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter-release-tags: &filter-release-tags\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        # Regex matches Workbench release tag. Example: v5-3-rc1\n+        only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n+\n+  # Job runs for PR branch only\n+  filter-pr-branch: &filter-pr-branch\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n \n-  defaults: &defaults\n+# -------------------------\n+#   EXECUTORS", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NTcxMw==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505885713", "bodyText": "", "author": "jaycarlton", "createdAt": "2020-10-15T21:51:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4MTg4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4ODQ0Nw==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505888447", "bodyText": "curious: can this be dots all the way down? e.g. pipeline.parameters.images.workbench?", "author": "jaycarlton", "createdAt": "2020-10-15T21:58:42Z", "path": ".circleci/config.yml", "diffHunk": "@@ -1,241 +1,216 @@\n version: 2.1\n \n-slack/notify-on-failure:\n-  only_for_branches: \"master\"\n-\n+# -------------------------\n+#   ORBS\n+# -------------------------\n # https://circleci.com/orbs/registry/\n orbs:\n   browser-tools: circleci/browser-tools@1.0.1\n-  slack: circleci/slack@3.4.2\n \n # -------------------------\n-#   PARAMETERS\n+#   PIPELINE PARAMETERS\n # -------------------------\n parameters:\n-  circleci_service_account:\n+  circle-service-account:\n     type: string\n     default: \"circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com\"\n-  workbench_image:\n+  workbench-image:\n     type: string\n     default: \"allofustest/workbench:buildimage-0.0.19\"\n-  mysql_image:\n+  db-image:\n     type: string\n     default: \"circleci/mysql:5.7\"\n \n # -------------------------\n #   ANCHORS\n # -------------------------\n anchors:\n-  java_env: &java_env\n-    # As best I can tell (dmohs, 7 Feb '17), this is the only way to set a memory limit that Java\n-    # processes executed within CircleCI's docker containers will respect. Very helpful resource:\n-    # https://circleci.com/blog/how-to-handle-java-oom-errors/\n-    #\n-    # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n-    # so we bumped this down further to 2G.\n+  default-environment: &default-environment\n     JAVA_TOOL_OPTIONS: -Xmx2g\n     # See: https://support.circleci.com/hc/en-us/articles/360021812453-Common-Android-memory-issues\n     GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process\n     TERM: dumb\n-    MYSQL_ROOT_PASSWORD: ubuntu\n \n-  mysql_env: &mysql_env\n+  db-environment: &db-environment\n     MYSQL_ROOT_PASSWORD: ubuntu\n     MYSQL_USER: ubuntu\n     MYSQL_PASSWORD: ubuntu\n \n-  e2e_env: &e2e_env\n+  puppeteer-environment: &puppeteer-environment\n     CI: true\n     NODE_ENV: development\n+    WORKBENCH_ENV: test\n+    TEST_MODE: integration\n+\n+  # Job runs for master branch only\n+  filter-master-branch: &filter-master-branch\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter-release-tags: &filter-release-tags\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        # Regex matches Workbench release tag. Example: v5-3-rc1\n+        only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n+\n+  # Job runs for PR branch only\n+  filter-pr-branch: &filter-pr-branch\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n \n-  defaults: &defaults\n+# -------------------------\n+#   EXECUTORS\n+# -------------------------\n+executors:\n+  workbench-executor:\n+    environment:\n+      <<: *default-environment\n     docker:\n-      - image: << pipeline.parameters.workbench_image >>\n+      - image: << pipeline.parameters.workbench-image >>", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwODMyNw==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505908327", "bodyText": "no.", "author": "aweng98", "createdAt": "2020-10-15T22:52:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4ODQ0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MTAxOQ==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505891019", "bodyText": "Please add description nodes for everything that takes them. This will make it fairly obvious what's left for the README.\nI'm really excited to see how clean it's getting: it's going to make expanding and adapting the deployment in the future a breeze.", "author": "jaycarlton", "createdAt": "2020-10-15T22:05:20Z", "path": ".circleci/config.yml", "diffHunk": "@@ -1,241 +1,216 @@\n version: 2.1\n \n-slack/notify-on-failure:\n-  only_for_branches: \"master\"\n-\n+# -------------------------\n+#   ORBS\n+# -------------------------\n # https://circleci.com/orbs/registry/\n orbs:\n   browser-tools: circleci/browser-tools@1.0.1\n-  slack: circleci/slack@3.4.2\n \n # -------------------------\n-#   PARAMETERS\n+#   PIPELINE PARAMETERS\n # -------------------------\n parameters:\n-  circleci_service_account:\n+  circle-service-account:", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkzNzI5NQ==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505937295", "bodyText": "every commands has description added.", "author": "aweng98", "createdAt": "2020-10-16T00:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MTAxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MTUyNA==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505891524", "bodyText": "aside: I wonder why we have to do this. Why wouldn't CircleCI have this built in? Or is there an off-the-shelf PR trigger orb that simplifies this stuff?", "author": "jaycarlton", "createdAt": "2020-10-15T22:06:33Z", "path": ".circleci/config.yml", "diffHunk": "@@ -1,241 +1,216 @@\n version: 2.1\n \n-slack/notify-on-failure:\n-  only_for_branches: \"master\"\n-\n+# -------------------------\n+#   ORBS\n+# -------------------------\n # https://circleci.com/orbs/registry/\n orbs:\n   browser-tools: circleci/browser-tools@1.0.1\n-  slack: circleci/slack@3.4.2\n \n # -------------------------\n-#   PARAMETERS\n+#   PIPELINE PARAMETERS\n # -------------------------\n parameters:\n-  circleci_service_account:\n+  circle-service-account:\n     type: string\n     default: \"circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com\"\n-  workbench_image:\n+  workbench-image:\n     type: string\n     default: \"allofustest/workbench:buildimage-0.0.19\"\n-  mysql_image:\n+  db-image:\n     type: string\n     default: \"circleci/mysql:5.7\"\n \n # -------------------------\n #   ANCHORS\n # -------------------------\n anchors:\n-  java_env: &java_env\n-    # As best I can tell (dmohs, 7 Feb '17), this is the only way to set a memory limit that Java\n-    # processes executed within CircleCI's docker containers will respect. Very helpful resource:\n-    # https://circleci.com/blog/how-to-handle-java-oom-errors/\n-    #\n-    # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n-    # so we bumped this down further to 2G.\n+  default-environment: &default-environment\n     JAVA_TOOL_OPTIONS: -Xmx2g\n     # See: https://support.circleci.com/hc/en-us/articles/360021812453-Common-Android-memory-issues\n     GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process\n     TERM: dumb\n-    MYSQL_ROOT_PASSWORD: ubuntu\n \n-  mysql_env: &mysql_env\n+  db-environment: &db-environment\n     MYSQL_ROOT_PASSWORD: ubuntu\n     MYSQL_USER: ubuntu\n     MYSQL_PASSWORD: ubuntu\n \n-  e2e_env: &e2e_env\n+  puppeteer-environment: &puppeteer-environment\n     CI: true\n     NODE_ENV: development\n+    WORKBENCH_ENV: test\n+    TEST_MODE: integration\n+\n+  # Job runs for master branch only\n+  filter-master-branch: &filter-master-branch\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter-release-tags: &filter-release-tags\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        # Regex matches Workbench release tag. Example: v5-3-rc1\n+        only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n+\n+  # Job runs for PR branch only\n+  filter-pr-branch: &filter-pr-branch\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n \n-  defaults: &defaults\n+# -------------------------\n+#   EXECUTORS\n+# -------------------------\n+executors:\n+  workbench-executor:\n+    environment:\n+      <<: *default-environment\n     docker:\n-      - image: << pipeline.parameters.workbench_image >>\n+      - image: << pipeline.parameters.workbench-image >>\n     working_directory: ~/workbench\n \n-  java_defaults: &java_defaults\n-    <<: *defaults\n+  db-executor:\n+    docker:\n+      - image: << pipeline.parameters.workbench-image >>\n+      - image: << pipeline.parameters.db-image >>\n+        environment:\n+          <<: *db-environment\n     environment:\n-      <<: *java_env\n-\n-  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n-  # Job runs for master branch only\n-  filter_only_master_branch: &filter_only_master_branch\n-    tags:\n-      ignore: /.*/\n-    branches:\n-      only: master\n+      <<: *default-environment\n+      <<: *db-environment\n+    working_directory: ~/workbench\n \n-  # Job runs for no branch and only for tags starting with \u2018v\u2019\n-  filter_only_release_tags: &filter_only_release_tags\n-    branches:\n-      ignore: /.*/\n-    tags:\n-      # regex explanation:\n-      # \"^\" asserts position at start of a line.\n-      # \"v\" matches the character \"v\" literally (case sensitive).\n-      # \"[0-9]+\" match a single numerical digit (the + quantifier, matches between one and unlimited times, as many times as possible).\n-      # \"-\" matches the character \"-\" literally.\n-      # \"rc\" matches the character \"rc\" literally (case sensitive).\n-      # \"$\" asserts position at the end of a line.\n-      # Workbench release tag format example: v5-3-rc1\n-      only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n-\n-  # Job runs for PR branches only\n-  filter_only_pr_branch: &filter_only_pr_branch\n-    tags:\n-      ignore: /.*/\n-    branches:\n-      ignore: master\n+  puppeteer-executor:\n+    docker:\n+      - image: << pipeline.parameters.workbench-image >>\n+    working_directory: ~/workbench\n+    environment:\n+      <<: *puppeteer-environment\n \n # -------------------------\n #   COMMANDS\n # Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n # -------------------------\n commands:\n-  activate_service_account_credential:\n+  gcloud-auth-login:\n     description: \"Activiate CircleCI service account credential\"\n     steps:\n       - run:\n-          name: Activate CircleCI service account credential\n           working_directory: ~/workbench\n-          # Used to call gsutil from the circle environment.\n           command: ci/activate_creds.sh api/circle-sa-key.json\n \n-  checkout_init_git:\n+  checkout-code:\n     description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n       - run:\n-          name: Update git submodules\n           command: git submodule update --init --recursive\n \n-  halt_if_code_unchanged:\n-    description: \"Halt job if no code changed\"\n+  store-commit-message:\n+    description: \"Export Git commit message to environment variable\"", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwOTc1Mg==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505909752", "bodyText": "I didn't find any orb that provides me with the git commit message.", "author": "aweng98", "createdAt": "2020-10-15T22:56:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MTUyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MjE0MQ==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505892141", "bodyText": "You can shorten the name to \"Skip Ignored Changes\"", "author": "jaycarlton", "createdAt": "2020-10-15T22:08:13Z", "path": ".circleci/config.yml", "diffHunk": "@@ -1,241 +1,216 @@\n version: 2.1\n \n-slack/notify-on-failure:\n-  only_for_branches: \"master\"\n-\n+# -------------------------\n+#   ORBS\n+# -------------------------\n # https://circleci.com/orbs/registry/\n orbs:\n   browser-tools: circleci/browser-tools@1.0.1\n-  slack: circleci/slack@3.4.2\n \n # -------------------------\n-#   PARAMETERS\n+#   PIPELINE PARAMETERS\n # -------------------------\n parameters:\n-  circleci_service_account:\n+  circle-service-account:\n     type: string\n     default: \"circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com\"\n-  workbench_image:\n+  workbench-image:\n     type: string\n     default: \"allofustest/workbench:buildimage-0.0.19\"\n-  mysql_image:\n+  db-image:\n     type: string\n     default: \"circleci/mysql:5.7\"\n \n # -------------------------\n #   ANCHORS\n # -------------------------\n anchors:\n-  java_env: &java_env\n-    # As best I can tell (dmohs, 7 Feb '17), this is the only way to set a memory limit that Java\n-    # processes executed within CircleCI's docker containers will respect. Very helpful resource:\n-    # https://circleci.com/blog/how-to-handle-java-oom-errors/\n-    #\n-    # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n-    # so we bumped this down further to 2G.\n+  default-environment: &default-environment\n     JAVA_TOOL_OPTIONS: -Xmx2g\n     # See: https://support.circleci.com/hc/en-us/articles/360021812453-Common-Android-memory-issues\n     GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process\n     TERM: dumb\n-    MYSQL_ROOT_PASSWORD: ubuntu\n \n-  mysql_env: &mysql_env\n+  db-environment: &db-environment\n     MYSQL_ROOT_PASSWORD: ubuntu\n     MYSQL_USER: ubuntu\n     MYSQL_PASSWORD: ubuntu\n \n-  e2e_env: &e2e_env\n+  puppeteer-environment: &puppeteer-environment\n     CI: true\n     NODE_ENV: development\n+    WORKBENCH_ENV: test\n+    TEST_MODE: integration\n+\n+  # Job runs for master branch only\n+  filter-master-branch: &filter-master-branch\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter-release-tags: &filter-release-tags\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        # Regex matches Workbench release tag. Example: v5-3-rc1\n+        only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n+\n+  # Job runs for PR branch only\n+  filter-pr-branch: &filter-pr-branch\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n \n-  defaults: &defaults\n+# -------------------------\n+#   EXECUTORS\n+# -------------------------\n+executors:\n+  workbench-executor:\n+    environment:\n+      <<: *default-environment\n     docker:\n-      - image: << pipeline.parameters.workbench_image >>\n+      - image: << pipeline.parameters.workbench-image >>\n     working_directory: ~/workbench\n \n-  java_defaults: &java_defaults\n-    <<: *defaults\n+  db-executor:\n+    docker:\n+      - image: << pipeline.parameters.workbench-image >>\n+      - image: << pipeline.parameters.db-image >>\n+        environment:\n+          <<: *db-environment\n     environment:\n-      <<: *java_env\n-\n-  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n-  # Job runs for master branch only\n-  filter_only_master_branch: &filter_only_master_branch\n-    tags:\n-      ignore: /.*/\n-    branches:\n-      only: master\n+      <<: *default-environment\n+      <<: *db-environment\n+    working_directory: ~/workbench\n \n-  # Job runs for no branch and only for tags starting with \u2018v\u2019\n-  filter_only_release_tags: &filter_only_release_tags\n-    branches:\n-      ignore: /.*/\n-    tags:\n-      # regex explanation:\n-      # \"^\" asserts position at start of a line.\n-      # \"v\" matches the character \"v\" literally (case sensitive).\n-      # \"[0-9]+\" match a single numerical digit (the + quantifier, matches between one and unlimited times, as many times as possible).\n-      # \"-\" matches the character \"-\" literally.\n-      # \"rc\" matches the character \"rc\" literally (case sensitive).\n-      # \"$\" asserts position at the end of a line.\n-      # Workbench release tag format example: v5-3-rc1\n-      only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n-\n-  # Job runs for PR branches only\n-  filter_only_pr_branch: &filter_only_pr_branch\n-    tags:\n-      ignore: /.*/\n-    branches:\n-      ignore: master\n+  puppeteer-executor:\n+    docker:\n+      - image: << pipeline.parameters.workbench-image >>\n+    working_directory: ~/workbench\n+    environment:\n+      <<: *puppeteer-environment\n \n # -------------------------\n #   COMMANDS\n # Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n # -------------------------\n commands:\n-  activate_service_account_credential:\n+  gcloud-auth-login:\n     description: \"Activiate CircleCI service account credential\"\n     steps:\n       - run:\n-          name: Activate CircleCI service account credential\n           working_directory: ~/workbench\n-          # Used to call gsutil from the circle environment.\n           command: ci/activate_creds.sh api/circle-sa-key.json\n \n-  checkout_init_git:\n+  checkout-code:\n     description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n       - run:\n-          name: Update git submodules\n           command: git submodule update --init --recursive\n \n-  halt_if_code_unchanged:\n-    description: \"Halt job if no code changed\"\n+  store-commit-message:\n+    description: \"Export Git commit message to environment variable\"\n+    steps:\n+      - run:\n+          command: |\n+            echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:\"%s\")' >> $BASH_ENV\n+            source $BASH_ENV\n+          name: \"Export COMMIT_MESSAGE environment variable\"\n+\n+  halt-puppeteer-check:\n+    description: \"Halt if changed file name match ignore patterns\"\n     steps:\n       - run:\n+          name: \"Halt if changed file name match ignore patterns\"", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkxMDA2MQ==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505910061", "bodyText": "Done", "author": "aweng98", "createdAt": "2020-10-15T22:57:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MjE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MjQyNg==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505892426", "bodyText": "If you need any more complexity here, I'll write you a short Ruby script like the Bash weenie that I am.", "author": "jaycarlton", "createdAt": "2020-10-15T22:08:58Z", "path": ".circleci/config.yml", "diffHunk": "@@ -1,241 +1,216 @@\n version: 2.1\n \n-slack/notify-on-failure:\n-  only_for_branches: \"master\"\n-\n+# -------------------------\n+#   ORBS\n+# -------------------------\n # https://circleci.com/orbs/registry/\n orbs:\n   browser-tools: circleci/browser-tools@1.0.1\n-  slack: circleci/slack@3.4.2\n \n # -------------------------\n-#   PARAMETERS\n+#   PIPELINE PARAMETERS\n # -------------------------\n parameters:\n-  circleci_service_account:\n+  circle-service-account:\n     type: string\n     default: \"circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com\"\n-  workbench_image:\n+  workbench-image:\n     type: string\n     default: \"allofustest/workbench:buildimage-0.0.19\"\n-  mysql_image:\n+  db-image:\n     type: string\n     default: \"circleci/mysql:5.7\"\n \n # -------------------------\n #   ANCHORS\n # -------------------------\n anchors:\n-  java_env: &java_env\n-    # As best I can tell (dmohs, 7 Feb '17), this is the only way to set a memory limit that Java\n-    # processes executed within CircleCI's docker containers will respect. Very helpful resource:\n-    # https://circleci.com/blog/how-to-handle-java-oom-errors/\n-    #\n-    # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n-    # so we bumped this down further to 2G.\n+  default-environment: &default-environment\n     JAVA_TOOL_OPTIONS: -Xmx2g\n     # See: https://support.circleci.com/hc/en-us/articles/360021812453-Common-Android-memory-issues\n     GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process\n     TERM: dumb\n-    MYSQL_ROOT_PASSWORD: ubuntu\n \n-  mysql_env: &mysql_env\n+  db-environment: &db-environment\n     MYSQL_ROOT_PASSWORD: ubuntu\n     MYSQL_USER: ubuntu\n     MYSQL_PASSWORD: ubuntu\n \n-  e2e_env: &e2e_env\n+  puppeteer-environment: &puppeteer-environment\n     CI: true\n     NODE_ENV: development\n+    WORKBENCH_ENV: test\n+    TEST_MODE: integration\n+\n+  # Job runs for master branch only\n+  filter-master-branch: &filter-master-branch\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter-release-tags: &filter-release-tags\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        # Regex matches Workbench release tag. Example: v5-3-rc1\n+        only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n+\n+  # Job runs for PR branch only\n+  filter-pr-branch: &filter-pr-branch\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n \n-  defaults: &defaults\n+# -------------------------\n+#   EXECUTORS\n+# -------------------------\n+executors:\n+  workbench-executor:\n+    environment:\n+      <<: *default-environment\n     docker:\n-      - image: << pipeline.parameters.workbench_image >>\n+      - image: << pipeline.parameters.workbench-image >>\n     working_directory: ~/workbench\n \n-  java_defaults: &java_defaults\n-    <<: *defaults\n+  db-executor:\n+    docker:\n+      - image: << pipeline.parameters.workbench-image >>\n+      - image: << pipeline.parameters.db-image >>\n+        environment:\n+          <<: *db-environment\n     environment:\n-      <<: *java_env\n-\n-  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n-  # Job runs for master branch only\n-  filter_only_master_branch: &filter_only_master_branch\n-    tags:\n-      ignore: /.*/\n-    branches:\n-      only: master\n+      <<: *default-environment\n+      <<: *db-environment\n+    working_directory: ~/workbench\n \n-  # Job runs for no branch and only for tags starting with \u2018v\u2019\n-  filter_only_release_tags: &filter_only_release_tags\n-    branches:\n-      ignore: /.*/\n-    tags:\n-      # regex explanation:\n-      # \"^\" asserts position at start of a line.\n-      # \"v\" matches the character \"v\" literally (case sensitive).\n-      # \"[0-9]+\" match a single numerical digit (the + quantifier, matches between one and unlimited times, as many times as possible).\n-      # \"-\" matches the character \"-\" literally.\n-      # \"rc\" matches the character \"rc\" literally (case sensitive).\n-      # \"$\" asserts position at the end of a line.\n-      # Workbench release tag format example: v5-3-rc1\n-      only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n-\n-  # Job runs for PR branches only\n-  filter_only_pr_branch: &filter_only_pr_branch\n-    tags:\n-      ignore: /.*/\n-    branches:\n-      ignore: master\n+  puppeteer-executor:\n+    docker:\n+      - image: << pipeline.parameters.workbench-image >>\n+    working_directory: ~/workbench\n+    environment:\n+      <<: *puppeteer-environment\n \n # -------------------------\n #   COMMANDS\n # Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n # -------------------------\n commands:\n-  activate_service_account_credential:\n+  gcloud-auth-login:\n     description: \"Activiate CircleCI service account credential\"\n     steps:\n       - run:\n-          name: Activate CircleCI service account credential\n           working_directory: ~/workbench\n-          # Used to call gsutil from the circle environment.\n           command: ci/activate_creds.sh api/circle-sa-key.json\n \n-  checkout_init_git:\n+  checkout-code:\n     description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n       - run:\n-          name: Update git submodules\n           command: git submodule update --init --recursive\n \n-  halt_if_code_unchanged:\n-    description: \"Halt job if no code changed\"\n+  store-commit-message:\n+    description: \"Export Git commit message to environment variable\"\n+    steps:\n+      - run:\n+          command: |\n+            echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:\"%s\")' >> $BASH_ENV\n+            source $BASH_ENV\n+          name: \"Export COMMIT_MESSAGE environment variable\"\n+\n+  halt-puppeteer-check:\n+    description: \"Halt if changed file name match ignore patterns\"\n     steps:\n       - run:\n+          name: \"Halt if changed file name match ignore patterns\"\n           command: |\n-            if ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvFf .circleci/e2e-job-ignore-patterns.txt; then\n-              echo \"Application code have not changed. halting job.\"\n-              circleci step halt\n-            else\n-              git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -vFf .circleci/e2e-job-ignore-patterns.txt\n-              echo \"job continuing.\"\n+            if ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvFf .circleci/e2e-job-ignore-patterns.txt ; then", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MzAyNA==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505893024", "bodyText": "This is a lot of code for an environment we don't really have a way to unit test (to my knowledge; maybe we could spin something up). I kinda want a separate script for this that can be tracked more like code than config.", "author": "jaycarlton", "createdAt": "2020-10-15T22:10:25Z", "path": ".circleci/config.yml", "diffHunk": "@@ -1,241 +1,216 @@\n version: 2.1\n \n-slack/notify-on-failure:\n-  only_for_branches: \"master\"\n-\n+# -------------------------\n+#   ORBS\n+# -------------------------\n # https://circleci.com/orbs/registry/\n orbs:\n   browser-tools: circleci/browser-tools@1.0.1\n-  slack: circleci/slack@3.4.2\n \n # -------------------------\n-#   PARAMETERS\n+#   PIPELINE PARAMETERS\n # -------------------------\n parameters:\n-  circleci_service_account:\n+  circle-service-account:\n     type: string\n     default: \"circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com\"\n-  workbench_image:\n+  workbench-image:\n     type: string\n     default: \"allofustest/workbench:buildimage-0.0.19\"\n-  mysql_image:\n+  db-image:\n     type: string\n     default: \"circleci/mysql:5.7\"\n \n # -------------------------\n #   ANCHORS\n # -------------------------\n anchors:\n-  java_env: &java_env\n-    # As best I can tell (dmohs, 7 Feb '17), this is the only way to set a memory limit that Java\n-    # processes executed within CircleCI's docker containers will respect. Very helpful resource:\n-    # https://circleci.com/blog/how-to-handle-java-oom-errors/\n-    #\n-    # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,\n-    # so we bumped this down further to 2G.\n+  default-environment: &default-environment\n     JAVA_TOOL_OPTIONS: -Xmx2g\n     # See: https://support.circleci.com/hc/en-us/articles/360021812453-Common-Android-memory-issues\n     GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process\n     TERM: dumb\n-    MYSQL_ROOT_PASSWORD: ubuntu\n \n-  mysql_env: &mysql_env\n+  db-environment: &db-environment\n     MYSQL_ROOT_PASSWORD: ubuntu\n     MYSQL_USER: ubuntu\n     MYSQL_PASSWORD: ubuntu\n \n-  e2e_env: &e2e_env\n+  puppeteer-environment: &puppeteer-environment\n     CI: true\n     NODE_ENV: development\n+    WORKBENCH_ENV: test\n+    TEST_MODE: integration\n+\n+  # Job runs for master branch only\n+  filter-master-branch: &filter-master-branch\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        only: master\n+\n+  # Job runs for no branch and only for tags starting with \u2018v\u2019\n+  filter-release-tags: &filter-release-tags\n+    filters:\n+      branches:\n+        ignore: /.*/\n+      tags:\n+        # Regex matches Workbench release tag. Example: v5-3-rc1\n+        only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n+\n+  # Job runs for PR branch only\n+  filter-pr-branch: &filter-pr-branch\n+    filters:\n+      tags:\n+        ignore: /.*/\n+      branches:\n+        ignore: master\n \n-  defaults: &defaults\n+# -------------------------\n+#   EXECUTORS\n+# -------------------------\n+executors:\n+  workbench-executor:\n+    environment:\n+      <<: *default-environment\n     docker:\n-      - image: << pipeline.parameters.workbench_image >>\n+      - image: << pipeline.parameters.workbench-image >>\n     working_directory: ~/workbench\n \n-  java_defaults: &java_defaults\n-    <<: *defaults\n+  db-executor:\n+    docker:\n+      - image: << pipeline.parameters.workbench-image >>\n+      - image: << pipeline.parameters.db-image >>\n+        environment:\n+          <<: *db-environment\n     environment:\n-      <<: *java_env\n-\n-  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution\n-  # Job runs for master branch only\n-  filter_only_master_branch: &filter_only_master_branch\n-    tags:\n-      ignore: /.*/\n-    branches:\n-      only: master\n+      <<: *default-environment\n+      <<: *db-environment\n+    working_directory: ~/workbench\n \n-  # Job runs for no branch and only for tags starting with \u2018v\u2019\n-  filter_only_release_tags: &filter_only_release_tags\n-    branches:\n-      ignore: /.*/\n-    tags:\n-      # regex explanation:\n-      # \"^\" asserts position at start of a line.\n-      # \"v\" matches the character \"v\" literally (case sensitive).\n-      # \"[0-9]+\" match a single numerical digit (the + quantifier, matches between one and unlimited times, as many times as possible).\n-      # \"-\" matches the character \"-\" literally.\n-      # \"rc\" matches the character \"rc\" literally (case sensitive).\n-      # \"$\" asserts position at the end of a line.\n-      # Workbench release tag format example: v5-3-rc1\n-      only: /^v[0-9]+-[0-9]+-rc[0-9]+$/\n-\n-  # Job runs for PR branches only\n-  filter_only_pr_branch: &filter_only_pr_branch\n-    tags:\n-      ignore: /.*/\n-    branches:\n-      ignore: master\n+  puppeteer-executor:\n+    docker:\n+      - image: << pipeline.parameters.workbench-image >>\n+    working_directory: ~/workbench\n+    environment:\n+      <<: *puppeteer-environment\n \n # -------------------------\n #   COMMANDS\n # Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands\n # -------------------------\n commands:\n-  activate_service_account_credential:\n+  gcloud-auth-login:\n     description: \"Activiate CircleCI service account credential\"\n     steps:\n       - run:\n-          name: Activate CircleCI service account credential\n           working_directory: ~/workbench\n-          # Used to call gsutil from the circle environment.\n           command: ci/activate_creds.sh api/circle-sa-key.json\n \n-  checkout_init_git:\n+  checkout-code:\n     description: \"git checkout and update submodules\"\n     steps:\n       - checkout\n       - run:\n-          name: Update git submodules\n           command: git submodule update --init --recursive\n \n-  halt_if_code_unchanged:\n-    description: \"Halt job if no code changed\"\n+  store-commit-message:\n+    description: \"Export Git commit message to environment variable\"\n+    steps:\n+      - run:\n+          command: |\n+            echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:\"%s\")' >> $BASH_ENV\n+            source $BASH_ENV\n+          name: \"Export COMMIT_MESSAGE environment variable\"\n+\n+  halt-puppeteer-check:\n+    description: \"Halt if changed file name match ignore patterns\"\n     steps:\n       - run:\n+          name: \"Halt if changed file name match ignore patterns\"\n           command: |\n-            if ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvFf .circleci/e2e-job-ignore-patterns.txt; then\n-              echo \"Application code have not changed. halting job.\"\n-              circleci step halt\n-            else\n-              git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -vFf .circleci/e2e-job-ignore-patterns.txt\n-              echo \"job continuing.\"\n+            if ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvFf .circleci/e2e-job-ignore-patterns.txt ; then\n+              echo \"Workbench application code are not changed.\"\n+              circleci-agent step halt\n+            fi\n+      - store-commit-message\n+      - run:\n+          name: \"Halt if commit message contains 'skip e2e'\"\n+          command: |\n+            echo \"Git commit message: $COMMIT_MESSAGE\"\n+            # Double comma is \"Parameter Expansion\". It converts string to lowercase letters\n+            if [[ \"${COMMIT_MESSAGE,,}\" == *\"skip e2e\"* ]]; then\n+              echo \"Halting e2e test.\"\n+              circleci-agent step halt\n             fi\n-          name: Halt job if no code changed\n+      - run:\n+          name: \"Halt if branch is not a pull request\"\n+          command: bash .circleci/pr-skip-ci.sh\n \n-  ensure_branch_has_changes:\n-    description: Halt job and succeed early if no code changes in << parameters.dir_name >> directory on non-master branch\n+  halt-test-check:\n+    description: Halt job and succeed early if no code changes detected in << parameters.dir_names >> directories on non-master branch\n     parameters:\n-      dir_name:\n-        type: enum\n-        enum: [\"api\", \"ui\"]\n+      dir_names:\n+        type: string\n+        default: \"\"\n     steps:\n       - run:\n           command: |\n-            if [ ${CIRCLE_BRANCH} != \"\" ] &&\n-              [ ${CIRCLE_BRANCH} != \"master\" ] &&\n-              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then\n-                echo \"No relevant changes in << parameters.dir_name >> directory on non-master branch. halting job.\"\n-                circleci step halt\n+            if [ ${CIRCLE_BRANCH} != \"\" ] && [ ${CIRCLE_BRANCH} != \"master\" ]; then", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MzM1OQ==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505893359", "bodyText": "For next time, it would be good to separate the renames from the main PR. It's not worth splitting these out, though.", "author": "jaycarlton", "createdAt": "2020-10-15T22:11:16Z", "path": ".circleci/config.yml", "diffHunk": "@@ -244,17 +219,15 @@ commands:\n       - store_artifacts:\n           path: e2e/logs\n           destination: logs\n+          when: always\n       - store_test_results:\n           path: ~/workbench/e2e/logs\n \n-  start_local_api:\n-    description: \"Start local API server\"\n+  launch-local-api:", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MzcyMg==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505893722", "bodyText": "Please add descriptions to all of this new stuff.", "author": "jaycarlton", "createdAt": "2020-10-15T22:12:12Z", "path": ".circleci/config.yml", "diffHunk": "@@ -294,244 +267,189 @@ commands:\n             - run:\n                 name: Launch local UI server\n                 working_directory: ~/workbench/ui\n-                # Start local UI server that connects to \"test\" api\n+                # Start local UI server that connects to \"test\" api server\n                 command: yarn dev-up\n                 background: true\n       - run:\n-          name: Wait for local UI server to start\n+          name: Watch the port for 4m for local UI server start up\n           command: dockerize -wait tcp://localhost:4200 -timeout 4m\n \n-  store_commit_message:\n+  run-api-test:\n+    parameters:\n+      additional_steps:\n+        type: steps\n+        default: []\n     steps:\n-      - run:\n-          name: \"Store Git commit message in an environment variable\"\n-          command: |\n-            echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:\"%s\")' >> $BASH_ENV\n-            source $BASH_ENV\n+      - checkout-code\n+      - halt-test-check:", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5NDA2Mw==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505894063", "bodyText": "Again, for next time, a change to use Executors could be its own short PR.", "author": "jaycarlton", "createdAt": "2020-10-15T22:13:18Z", "path": ".circleci/config.yml", "diffHunk": "@@ -294,244 +267,189 @@ commands:\n             - run:\n                 name: Launch local UI server\n                 working_directory: ~/workbench/ui\n-                # Start local UI server that connects to \"test\" api\n+                # Start local UI server that connects to \"test\" api server\n                 command: yarn dev-up\n                 background: true\n       - run:\n-          name: Wait for local UI server to start\n+          name: Watch the port for 4m for local UI server start up\n           command: dockerize -wait tcp://localhost:4200 -timeout 4m\n \n-  store_commit_message:\n+  run-api-test:\n+    parameters:\n+      additional_steps:\n+        type: steps\n+        default: []\n     steps:\n-      - run:\n-          name: \"Store Git commit message in an environment variable\"\n-          command: |\n-            echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:\"%s\")' >> $BASH_ENV\n-            source $BASH_ENV\n+      - checkout-code\n+      - halt-test-check:\n+          dir_names: \"api\"\n+      - restore_cache:\n+          key: v5-gradle-wrapper-{{ .Branch }}-{{ checksum \"~/workbench/api/gradle/wrapper/gradle-wrapper.properties\" }}\n+      - restore_cache:\n+          key: v5-gradle-cache-{{ .Branch }}-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - steps: << parameters.additional_steps >>\n+      - save_cache:\n+          paths:\n+            - ~/.gradle/wrapper\n+          key: v5-gradle-wrapper-{{ .Branch }}-{{ checksum \"~/workbench/api/gradle/wrapper/gradle-wrapper.properties\" }}\n+      - save_cache:\n+          paths:\n+            - ~/.gradle/caches\n+          key: v5-gradle-cache-{{ .Branch }}-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - store_test_results:\n+          path: ~/workbench/api/build/test-results/test\n+      - store_artifacts:\n+          path: ~/workbench/api/build/test-results/test\n+          destination: JunitTestResult\n+          when: always\n \n-  e2e_skip:\n-    description: \"Halt job if commit message contains 'SKIP E2E'\"\n+  deploy-to-staging-perf:\n+    parameters:\n+      project_name:\n+        type: string\n+        default: \"\"\n     steps:\n-      - store_commit_message\n-      - run:\n-          name: \"Halt job if commit message contains 'SKIP E2E'\"\n+      - checkout-code\n+      - attach_workspace:\n+          at: .\n+      - gcloud-auth-login\n+      - deploy:\n+          working_directory: ~/workbench/deploy\n           command: |\n-            echo \"Git commit message: $COMMIT_MESSAGE\"\n-            # Double comma is called \"Parameter Expansion\" in Bash version 4+. It converts string to lowercase letters.\n-            if [[ \"${COMMIT_MESSAGE,,}\" == *\"skip e2e\"* ]]; then\n-              echo \"Halting e2e test.\"\n-              circleci step halt\n-            fi\n-\n-  e2e_presubmit_check:\n-    steps:\n-      - e2e_skip\n-      - halt_if_code_unchanged\n-      - run:\n-          name: \"Halt job if not a pull request\"\n-          command: bash .circleci/pr-skip-ci.sh\n-\n+            ./project.rb deploy \\\n+              --project << parameters.project_name >> \\\n+              --account << pipeline.parameters.circle-service-account >> \\\n+              --git-version \"${CIRCLE_TAG}\" \\\n+              --app-version \"${CIRCLE_TAG}\" \\\n+              --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n+              --key-file ~/workbench/api/circle-sa-key.json \\\n+              --promote\n+          name: Deploy API and UI to << parameters.project_name >> App Engine\n \n # -------------------------\n #        JOBS\n # -------------------------\n jobs:\n   api-unit-test:\n     parallelism: 4\n-    <<: *java_defaults\n+    executor: workbench-executor", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5NDc2OA==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505894768", "bodyText": "@calbach At some point soon  I feel like we're going to want to start calling the main backend \"api\". There are APIs left and right. It's also confusing to see api and genomics listed as if they're orthogonal concepts, but I don't have much context on that.", "author": "jaycarlton", "createdAt": "2020-10-15T22:14:59Z", "path": ".circleci/config.yml", "diffHunk": "@@ -294,244 +267,189 @@ commands:\n             - run:\n                 name: Launch local UI server\n                 working_directory: ~/workbench/ui\n-                # Start local UI server that connects to \"test\" api\n+                # Start local UI server that connects to \"test\" api server\n                 command: yarn dev-up\n                 background: true\n       - run:\n-          name: Wait for local UI server to start\n+          name: Watch the port for 4m for local UI server start up\n           command: dockerize -wait tcp://localhost:4200 -timeout 4m\n \n-  store_commit_message:\n+  run-api-test:\n+    parameters:\n+      additional_steps:\n+        type: steps\n+        default: []\n     steps:\n-      - run:\n-          name: \"Store Git commit message in an environment variable\"\n-          command: |\n-            echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:\"%s\")' >> $BASH_ENV\n-            source $BASH_ENV\n+      - checkout-code\n+      - halt-test-check:\n+          dir_names: \"api\"\n+      - restore_cache:\n+          key: v5-gradle-wrapper-{{ .Branch }}-{{ checksum \"~/workbench/api/gradle/wrapper/gradle-wrapper.properties\" }}\n+      - restore_cache:\n+          key: v5-gradle-cache-{{ .Branch }}-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - steps: << parameters.additional_steps >>\n+      - save_cache:\n+          paths:\n+            - ~/.gradle/wrapper\n+          key: v5-gradle-wrapper-{{ .Branch }}-{{ checksum \"~/workbench/api/gradle/wrapper/gradle-wrapper.properties\" }}\n+      - save_cache:\n+          paths:\n+            - ~/.gradle/caches\n+          key: v5-gradle-cache-{{ .Branch }}-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - store_test_results:\n+          path: ~/workbench/api/build/test-results/test\n+      - store_artifacts:\n+          path: ~/workbench/api/build/test-results/test\n+          destination: JunitTestResult\n+          when: always\n \n-  e2e_skip:\n-    description: \"Halt job if commit message contains 'SKIP E2E'\"\n+  deploy-to-staging-perf:\n+    parameters:\n+      project_name:\n+        type: string\n+        default: \"\"\n     steps:\n-      - store_commit_message\n-      - run:\n-          name: \"Halt job if commit message contains 'SKIP E2E'\"\n+      - checkout-code\n+      - attach_workspace:\n+          at: .\n+      - gcloud-auth-login\n+      - deploy:\n+          working_directory: ~/workbench/deploy\n           command: |\n-            echo \"Git commit message: $COMMIT_MESSAGE\"\n-            # Double comma is called \"Parameter Expansion\" in Bash version 4+. It converts string to lowercase letters.\n-            if [[ \"${COMMIT_MESSAGE,,}\" == *\"skip e2e\"* ]]; then\n-              echo \"Halting e2e test.\"\n-              circleci step halt\n-            fi\n-\n-  e2e_presubmit_check:\n-    steps:\n-      - e2e_skip\n-      - halt_if_code_unchanged\n-      - run:\n-          name: \"Halt job if not a pull request\"\n-          command: bash .circleci/pr-skip-ci.sh\n-\n+            ./project.rb deploy \\\n+              --project << parameters.project_name >> \\\n+              --account << pipeline.parameters.circle-service-account >> \\\n+              --git-version \"${CIRCLE_TAG}\" \\\n+              --app-version \"${CIRCLE_TAG}\" \\\n+              --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n+              --key-file ~/workbench/api/circle-sa-key.json \\\n+              --promote\n+          name: Deploy API and UI to << parameters.project_name >> App Engine\n \n # -------------------------\n #        JOBS\n # -------------------------\n jobs:\n   api-unit-test:\n     parallelism: 4\n-    <<: *java_defaults\n+    executor: workbench-executor\n     steps:\n-      - checkout_init_git\n-      - ensure_branch_has_changes:\n-          dir_name: \"api\"\n-      - manage_api_cache:\n-          restore: true\n-      - run:\n-          name: Validate Swagger definitions\n-          working_directory: ~/workbench/api\n-          command: |\n-            if [ \"$CIRCLE_NODE_INDEX\" == 0 ]; then\n-              ./project.rb validate-swagger --project-prop verboseTestLogging=yes\n-            fi\n-      - run:\n-          name: Run Java genomics unit tests\n-          working_directory: ~/workbench/api\n-          command: |\n-            CLASSNAMES=$(circleci tests glob \"genomics/src/test/java/**/*Test.java\" \\\n-              | cut -c 1- \\\n-              | sed 's@genomics/src/test/java/@@' \\\n-              | sed 's@/@.@g' \\\n-              | sed 's/\\.[^.]*$//' \\\n-              | circleci tests split --split-by=timings --timings-type=classname --index=$CIRCLE_NODE_INDEX)\n-            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print \"--tests\", $i }')\n-            gradle -p genomics test $GRADLE_ARGS\n-      - run:\n-          name: Run Java api unit tests\n-          working_directory: ~/workbench/api\n-          # See: https://circleci.com/docs/2.0/language-java/#sample-configuration\n-          # \"circleci tests split\" command provides each CircleCI node with a list of fully qualified test names to execute.\n-          #  JUnit XML test reports provide tests timing data. CircleCI partition tests based on timing data.\n-          #\n-          # Formatting fully qualified test names for gradle and running them with \"gradle test\" command. Short explanation on commands:\n-          #   Find all unit tests recursively in \"api/src/test/java/\" directories.\n-          #   Strips off \"src/test/java/\" substring;\n-          #   Replaces all path separator \"/\" with \".\";\n-          #   Removes file extensions.\n-          #   Append \"--tests\" in front of file name.\n-          #\n-          # Example of string before formatting:\n-          #   src/test/java/org/pmiops/*********/monitoring/LogsBasedMetricsServiceTest.java src/test/java/org/pmiops/*********/monitoring/MonitoringServiceTest.java\n-          # Example of Gradle command after formatting:\n-          #   gradle test --tests org.pmiops.*********.monitoring.LogsBasedMetricsServiceTest --tests org.pmiops.*********.monitoring.MonitoringServiceTest\n-          #\n-          # We exclude the :genomics:test task below because otherwise gradle will attempt to run all the regular API unit tests under the genomics\n-          # submodule and will be unable to find them and will barf\n-          command: |\n-            CLASSNAMES=$(circleci tests glob \"src/test/java/**/*Test.java\" \"src/test/java/**/*Test.kt\" \\\n-              | cut -c 1- \\\n-              | sed 's@src/test/java/@@' \\\n-              | sed 's@/@.@g' \\\n-              | sed 's/\\.[^.]*$//' \\\n-              | circleci tests split --split-by=timings --timings-type=classname --index=$CIRCLE_NODE_INDEX)\n-            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print \"--tests\", $i }')\n-            gradle :test $GRADLE_ARGS\n-      - run:\n-          # Lint last; it's more important to surface test failures early.\n-          name: Java linting\n-          working_directory: ~/workbench/api\n-          command: |\n-            if [ \"$CIRCLE_NODE_INDEX\" == 0 ]; then\n-              ./gradlew spotlessCheck\n-            fi\n-      - store_test_results:\n-           path: ~/workbench/api/build/test-results/test\n-      # Save JUnit test results in artifacts because it provides the timing info on tests.\n-      - store_artifacts:\n-          path: ~/workbench/api/build/test-results/test\n-          destination: JunitTestResult\n-      - manage_api_cache:\n-          save: true\n+      - run-api-test:\n+          additional_steps:\n+            - run:\n+                name: Validate Swagger definitions\n+                working_directory: ~/workbench/api\n+                command: |\n+                  if [ \"$CIRCLE_NODE_INDEX\" == 0 ]; then\n+                    ./project.rb validate-swagger --project-prop verboseTestLogging=yes\n+                  fi\n+            - run:\n+                name: Run Java genomics unit tests\n+                working_directory: ~/workbench/api\n+                command: |\n+                  CLASSNAMES=$(circleci tests glob \"genomics/src/test/java/**/*Test.java\" \\\n+                    | cut -c 1- \\\n+                    | sed 's@genomics/src/test/java/@@' \\\n+                    | sed 's@/@.@g' \\\n+                    | sed 's/\\.[^.]*$//' \\\n+                    | circleci tests split --split-by=timings --index=$CIRCLE_NODE_INDEX)\n+                  GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print \"--tests\", $i }')\n+                  gradle -p genomics test $GRADLE_ARGS\n+            - run:\n+                name: Run Java api unit tests\n+                working_directory: ~/workbench/api", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk0NjY5MA==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505946690", "bodyText": "My opinion on this hasn't changed since it was last discussed: #3658 (comment)\ngenomics is a subdir under api - it is split out in CircleCI because the genomics tools gradle project is independent, though that could likely be cleaned up.", "author": "calbach", "createdAt": "2020-10-16T00:53:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5NDc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5NTAwNw==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505895007", "bodyText": "Yeah, as ugly as Ruby is, it absolutely sings at this kind of stuff.", "author": "jaycarlton", "createdAt": "2020-10-15T22:15:30Z", "path": ".circleci/config.yml", "diffHunk": "@@ -294,244 +267,189 @@ commands:\n             - run:\n                 name: Launch local UI server\n                 working_directory: ~/workbench/ui\n-                # Start local UI server that connects to \"test\" api\n+                # Start local UI server that connects to \"test\" api server\n                 command: yarn dev-up\n                 background: true\n       - run:\n-          name: Wait for local UI server to start\n+          name: Watch the port for 4m for local UI server start up\n           command: dockerize -wait tcp://localhost:4200 -timeout 4m\n \n-  store_commit_message:\n+  run-api-test:\n+    parameters:\n+      additional_steps:\n+        type: steps\n+        default: []\n     steps:\n-      - run:\n-          name: \"Store Git commit message in an environment variable\"\n-          command: |\n-            echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:\"%s\")' >> $BASH_ENV\n-            source $BASH_ENV\n+      - checkout-code\n+      - halt-test-check:\n+          dir_names: \"api\"\n+      - restore_cache:\n+          key: v5-gradle-wrapper-{{ .Branch }}-{{ checksum \"~/workbench/api/gradle/wrapper/gradle-wrapper.properties\" }}\n+      - restore_cache:\n+          key: v5-gradle-cache-{{ .Branch }}-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - steps: << parameters.additional_steps >>\n+      - save_cache:\n+          paths:\n+            - ~/.gradle/wrapper\n+          key: v5-gradle-wrapper-{{ .Branch }}-{{ checksum \"~/workbench/api/gradle/wrapper/gradle-wrapper.properties\" }}\n+      - save_cache:\n+          paths:\n+            - ~/.gradle/caches\n+          key: v5-gradle-cache-{{ .Branch }}-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - store_test_results:\n+          path: ~/workbench/api/build/test-results/test\n+      - store_artifacts:\n+          path: ~/workbench/api/build/test-results/test\n+          destination: JunitTestResult\n+          when: always\n \n-  e2e_skip:\n-    description: \"Halt job if commit message contains 'SKIP E2E'\"\n+  deploy-to-staging-perf:\n+    parameters:\n+      project_name:\n+        type: string\n+        default: \"\"\n     steps:\n-      - store_commit_message\n-      - run:\n-          name: \"Halt job if commit message contains 'SKIP E2E'\"\n+      - checkout-code\n+      - attach_workspace:\n+          at: .\n+      - gcloud-auth-login\n+      - deploy:\n+          working_directory: ~/workbench/deploy\n           command: |\n-            echo \"Git commit message: $COMMIT_MESSAGE\"\n-            # Double comma is called \"Parameter Expansion\" in Bash version 4+. It converts string to lowercase letters.\n-            if [[ \"${COMMIT_MESSAGE,,}\" == *\"skip e2e\"* ]]; then\n-              echo \"Halting e2e test.\"\n-              circleci step halt\n-            fi\n-\n-  e2e_presubmit_check:\n-    steps:\n-      - e2e_skip\n-      - halt_if_code_unchanged\n-      - run:\n-          name: \"Halt job if not a pull request\"\n-          command: bash .circleci/pr-skip-ci.sh\n-\n+            ./project.rb deploy \\\n+              --project << parameters.project_name >> \\\n+              --account << pipeline.parameters.circle-service-account >> \\\n+              --git-version \"${CIRCLE_TAG}\" \\\n+              --app-version \"${CIRCLE_TAG}\" \\\n+              --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n+              --key-file ~/workbench/api/circle-sa-key.json \\\n+              --promote\n+          name: Deploy API and UI to << parameters.project_name >> App Engine\n \n # -------------------------\n #        JOBS\n # -------------------------\n jobs:\n   api-unit-test:\n     parallelism: 4\n-    <<: *java_defaults\n+    executor: workbench-executor\n     steps:\n-      - checkout_init_git\n-      - ensure_branch_has_changes:\n-          dir_name: \"api\"\n-      - manage_api_cache:\n-          restore: true\n-      - run:\n-          name: Validate Swagger definitions\n-          working_directory: ~/workbench/api\n-          command: |\n-            if [ \"$CIRCLE_NODE_INDEX\" == 0 ]; then\n-              ./project.rb validate-swagger --project-prop verboseTestLogging=yes\n-            fi\n-      - run:\n-          name: Run Java genomics unit tests\n-          working_directory: ~/workbench/api\n-          command: |\n-            CLASSNAMES=$(circleci tests glob \"genomics/src/test/java/**/*Test.java\" \\\n-              | cut -c 1- \\\n-              | sed 's@genomics/src/test/java/@@' \\\n-              | sed 's@/@.@g' \\\n-              | sed 's/\\.[^.]*$//' \\\n-              | circleci tests split --split-by=timings --timings-type=classname --index=$CIRCLE_NODE_INDEX)\n-            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print \"--tests\", $i }')\n-            gradle -p genomics test $GRADLE_ARGS\n-      - run:\n-          name: Run Java api unit tests\n-          working_directory: ~/workbench/api\n-          # See: https://circleci.com/docs/2.0/language-java/#sample-configuration\n-          # \"circleci tests split\" command provides each CircleCI node with a list of fully qualified test names to execute.\n-          #  JUnit XML test reports provide tests timing data. CircleCI partition tests based on timing data.\n-          #\n-          # Formatting fully qualified test names for gradle and running them with \"gradle test\" command. Short explanation on commands:\n-          #   Find all unit tests recursively in \"api/src/test/java/\" directories.\n-          #   Strips off \"src/test/java/\" substring;\n-          #   Replaces all path separator \"/\" with \".\";\n-          #   Removes file extensions.\n-          #   Append \"--tests\" in front of file name.\n-          #\n-          # Example of string before formatting:\n-          #   src/test/java/org/pmiops/*********/monitoring/LogsBasedMetricsServiceTest.java src/test/java/org/pmiops/*********/monitoring/MonitoringServiceTest.java\n-          # Example of Gradle command after formatting:\n-          #   gradle test --tests org.pmiops.*********.monitoring.LogsBasedMetricsServiceTest --tests org.pmiops.*********.monitoring.MonitoringServiceTest\n-          #\n-          # We exclude the :genomics:test task below because otherwise gradle will attempt to run all the regular API unit tests under the genomics\n-          # submodule and will be unable to find them and will barf\n-          command: |\n-            CLASSNAMES=$(circleci tests glob \"src/test/java/**/*Test.java\" \"src/test/java/**/*Test.kt\" \\\n-              | cut -c 1- \\\n-              | sed 's@src/test/java/@@' \\\n-              | sed 's@/@.@g' \\\n-              | sed 's/\\.[^.]*$//' \\\n-              | circleci tests split --split-by=timings --timings-type=classname --index=$CIRCLE_NODE_INDEX)\n-            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print \"--tests\", $i }')\n-            gradle :test $GRADLE_ARGS\n-      - run:\n-          # Lint last; it's more important to surface test failures early.\n-          name: Java linting\n-          working_directory: ~/workbench/api\n-          command: |\n-            if [ \"$CIRCLE_NODE_INDEX\" == 0 ]; then\n-              ./gradlew spotlessCheck\n-            fi\n-      - store_test_results:\n-           path: ~/workbench/api/build/test-results/test\n-      # Save JUnit test results in artifacts because it provides the timing info on tests.\n-      - store_artifacts:\n-          path: ~/workbench/api/build/test-results/test\n-          destination: JunitTestResult\n-      - manage_api_cache:\n-          save: true\n+      - run-api-test:\n+          additional_steps:\n+            - run:\n+                name: Validate Swagger definitions\n+                working_directory: ~/workbench/api\n+                command: |\n+                  if [ \"$CIRCLE_NODE_INDEX\" == 0 ]; then\n+                    ./project.rb validate-swagger --project-prop verboseTestLogging=yes\n+                  fi\n+            - run:\n+                name: Run Java genomics unit tests\n+                working_directory: ~/workbench/api\n+                command: |\n+                  CLASSNAMES=$(circleci tests glob \"genomics/src/test/java/**/*Test.java\" \\\n+                    | cut -c 1- \\\n+                    | sed 's@genomics/src/test/java/@@' \\\n+                    | sed 's@/@.@g' \\\n+                    | sed 's/\\.[^.]*$//' \\\n+                    | circleci tests split --split-by=timings --index=$CIRCLE_NODE_INDEX)\n+                  GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print \"--tests\", $i }')\n+                  gradle -p genomics test $GRADLE_ARGS\n+            - run:\n+                name: Run Java api unit tests\n+                working_directory: ~/workbench/api\n+                # For script logics and explanation, see README.\n+                command: |\n+                  CLASSNAMES=$(circleci tests glob \"src/test/java/**/*Test.java\" \"src/test/java/**/*Test.kt\" \\", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5NTI4Mw==", "url": "https://github.com/all-of-us/workbench/pull/4141#discussion_r505895283", "bodyText": "Pleas name these steps all with consistent form (as they appear in a list). I think Lint Java Code would be good.", "author": "jaycarlton", "createdAt": "2020-10-15T22:16:23Z", "path": ".circleci/config.yml", "diffHunk": "@@ -294,244 +267,189 @@ commands:\n             - run:\n                 name: Launch local UI server\n                 working_directory: ~/workbench/ui\n-                # Start local UI server that connects to \"test\" api\n+                # Start local UI server that connects to \"test\" api server\n                 command: yarn dev-up\n                 background: true\n       - run:\n-          name: Wait for local UI server to start\n+          name: Watch the port for 4m for local UI server start up\n           command: dockerize -wait tcp://localhost:4200 -timeout 4m\n \n-  store_commit_message:\n+  run-api-test:\n+    parameters:\n+      additional_steps:\n+        type: steps\n+        default: []\n     steps:\n-      - run:\n-          name: \"Store Git commit message in an environment variable\"\n-          command: |\n-            echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:\"%s\")' >> $BASH_ENV\n-            source $BASH_ENV\n+      - checkout-code\n+      - halt-test-check:\n+          dir_names: \"api\"\n+      - restore_cache:\n+          key: v5-gradle-wrapper-{{ .Branch }}-{{ checksum \"~/workbench/api/gradle/wrapper/gradle-wrapper.properties\" }}\n+      - restore_cache:\n+          key: v5-gradle-cache-{{ .Branch }}-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - steps: << parameters.additional_steps >>\n+      - save_cache:\n+          paths:\n+            - ~/.gradle/wrapper\n+          key: v5-gradle-wrapper-{{ .Branch }}-{{ checksum \"~/workbench/api/gradle/wrapper/gradle-wrapper.properties\" }}\n+      - save_cache:\n+          paths:\n+            - ~/.gradle/caches\n+          key: v5-gradle-cache-{{ .Branch }}-{{ checksum \"~/workbench/api/build.gradle\" }}\n+      - store_test_results:\n+          path: ~/workbench/api/build/test-results/test\n+      - store_artifacts:\n+          path: ~/workbench/api/build/test-results/test\n+          destination: JunitTestResult\n+          when: always\n \n-  e2e_skip:\n-    description: \"Halt job if commit message contains 'SKIP E2E'\"\n+  deploy-to-staging-perf:\n+    parameters:\n+      project_name:\n+        type: string\n+        default: \"\"\n     steps:\n-      - store_commit_message\n-      - run:\n-          name: \"Halt job if commit message contains 'SKIP E2E'\"\n+      - checkout-code\n+      - attach_workspace:\n+          at: .\n+      - gcloud-auth-login\n+      - deploy:\n+          working_directory: ~/workbench/deploy\n           command: |\n-            echo \"Git commit message: $COMMIT_MESSAGE\"\n-            # Double comma is called \"Parameter Expansion\" in Bash version 4+. It converts string to lowercase letters.\n-            if [[ \"${COMMIT_MESSAGE,,}\" == *\"skip e2e\"* ]]; then\n-              echo \"Halting e2e test.\"\n-              circleci step halt\n-            fi\n-\n-  e2e_presubmit_check:\n-    steps:\n-      - e2e_skip\n-      - halt_if_code_unchanged\n-      - run:\n-          name: \"Halt job if not a pull request\"\n-          command: bash .circleci/pr-skip-ci.sh\n-\n+            ./project.rb deploy \\\n+              --project << parameters.project_name >> \\\n+              --account << pipeline.parameters.circle-service-account >> \\\n+              --git-version \"${CIRCLE_TAG}\" \\\n+              --app-version \"${CIRCLE_TAG}\" \\\n+              --circle-url \"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\" \\\n+              --key-file ~/workbench/api/circle-sa-key.json \\\n+              --promote\n+          name: Deploy API and UI to << parameters.project_name >> App Engine\n \n # -------------------------\n #        JOBS\n # -------------------------\n jobs:\n   api-unit-test:\n     parallelism: 4\n-    <<: *java_defaults\n+    executor: workbench-executor\n     steps:\n-      - checkout_init_git\n-      - ensure_branch_has_changes:\n-          dir_name: \"api\"\n-      - manage_api_cache:\n-          restore: true\n-      - run:\n-          name: Validate Swagger definitions\n-          working_directory: ~/workbench/api\n-          command: |\n-            if [ \"$CIRCLE_NODE_INDEX\" == 0 ]; then\n-              ./project.rb validate-swagger --project-prop verboseTestLogging=yes\n-            fi\n-      - run:\n-          name: Run Java genomics unit tests\n-          working_directory: ~/workbench/api\n-          command: |\n-            CLASSNAMES=$(circleci tests glob \"genomics/src/test/java/**/*Test.java\" \\\n-              | cut -c 1- \\\n-              | sed 's@genomics/src/test/java/@@' \\\n-              | sed 's@/@.@g' \\\n-              | sed 's/\\.[^.]*$//' \\\n-              | circleci tests split --split-by=timings --timings-type=classname --index=$CIRCLE_NODE_INDEX)\n-            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print \"--tests\", $i }')\n-            gradle -p genomics test $GRADLE_ARGS\n-      - run:\n-          name: Run Java api unit tests\n-          working_directory: ~/workbench/api\n-          # See: https://circleci.com/docs/2.0/language-java/#sample-configuration\n-          # \"circleci tests split\" command provides each CircleCI node with a list of fully qualified test names to execute.\n-          #  JUnit XML test reports provide tests timing data. CircleCI partition tests based on timing data.\n-          #\n-          # Formatting fully qualified test names for gradle and running them with \"gradle test\" command. Short explanation on commands:\n-          #   Find all unit tests recursively in \"api/src/test/java/\" directories.\n-          #   Strips off \"src/test/java/\" substring;\n-          #   Replaces all path separator \"/\" with \".\";\n-          #   Removes file extensions.\n-          #   Append \"--tests\" in front of file name.\n-          #\n-          # Example of string before formatting:\n-          #   src/test/java/org/pmiops/*********/monitoring/LogsBasedMetricsServiceTest.java src/test/java/org/pmiops/*********/monitoring/MonitoringServiceTest.java\n-          # Example of Gradle command after formatting:\n-          #   gradle test --tests org.pmiops.*********.monitoring.LogsBasedMetricsServiceTest --tests org.pmiops.*********.monitoring.MonitoringServiceTest\n-          #\n-          # We exclude the :genomics:test task below because otherwise gradle will attempt to run all the regular API unit tests under the genomics\n-          # submodule and will be unable to find them and will barf\n-          command: |\n-            CLASSNAMES=$(circleci tests glob \"src/test/java/**/*Test.java\" \"src/test/java/**/*Test.kt\" \\\n-              | cut -c 1- \\\n-              | sed 's@src/test/java/@@' \\\n-              | sed 's@/@.@g' \\\n-              | sed 's/\\.[^.]*$//' \\\n-              | circleci tests split --split-by=timings --timings-type=classname --index=$CIRCLE_NODE_INDEX)\n-            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print \"--tests\", $i }')\n-            gradle :test $GRADLE_ARGS\n-      - run:\n-          # Lint last; it's more important to surface test failures early.\n-          name: Java linting\n-          working_directory: ~/workbench/api\n-          command: |\n-            if [ \"$CIRCLE_NODE_INDEX\" == 0 ]; then\n-              ./gradlew spotlessCheck\n-            fi\n-      - store_test_results:\n-           path: ~/workbench/api/build/test-results/test\n-      # Save JUnit test results in artifacts because it provides the timing info on tests.\n-      - store_artifacts:\n-          path: ~/workbench/api/build/test-results/test\n-          destination: JunitTestResult\n-      - manage_api_cache:\n-          save: true\n+      - run-api-test:\n+          additional_steps:\n+            - run:\n+                name: Validate Swagger definitions\n+                working_directory: ~/workbench/api\n+                command: |\n+                  if [ \"$CIRCLE_NODE_INDEX\" == 0 ]; then\n+                    ./project.rb validate-swagger --project-prop verboseTestLogging=yes\n+                  fi\n+            - run:\n+                name: Run Java genomics unit tests\n+                working_directory: ~/workbench/api\n+                command: |\n+                  CLASSNAMES=$(circleci tests glob \"genomics/src/test/java/**/*Test.java\" \\\n+                    | cut -c 1- \\\n+                    | sed 's@genomics/src/test/java/@@' \\\n+                    | sed 's@/@.@g' \\\n+                    | sed 's/\\.[^.]*$//' \\\n+                    | circleci tests split --split-by=timings --index=$CIRCLE_NODE_INDEX)\n+                  GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print \"--tests\", $i }')\n+                  gradle -p genomics test $GRADLE_ARGS\n+            - run:\n+                name: Run Java api unit tests\n+                working_directory: ~/workbench/api\n+                # For script logics and explanation, see README.\n+                command: |\n+                  CLASSNAMES=$(circleci tests glob \"src/test/java/**/*Test.java\" \"src/test/java/**/*Test.kt\" \\\n+                    | cut -c 1- \\\n+                    | sed 's@src/test/java/@@' \\\n+                    | sed 's@/@.@g' \\\n+                    | sed 's/\\.[^.]*$//' \\\n+                    | circleci tests split --split-by=timings --index=$CIRCLE_NODE_INDEX)\n+                  GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print \"--tests\", $i }')\n+                  gradle :test $GRADLE_ARGS\n+            - run:\n+                # Lint last; it's more important to surface test failures early.\n+                name: Java linting", "originalCommit": "a81d591d88d48208358fb8a48aaac2b4a6b9b4df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5a8b8c1457fdb3bf8a219014b21d738337956201", "url": "https://github.com/all-of-us/workbench/commit/5a8b8c1457fdb3bf8a219014b21d738337956201", "message": "revamp circle ci config", "committedDate": "2020-10-16T00:53:02Z", "type": "commit"}, {"oid": "5a8b8c1457fdb3bf8a219014b21d738337956201", "url": "https://github.com/all-of-us/workbench/commit/5a8b8c1457fdb3bf8a219014b21d738337956201", "message": "revamp circle ci config", "committedDate": "2020-10-16T00:53:02Z", "type": "forcePushed"}]}