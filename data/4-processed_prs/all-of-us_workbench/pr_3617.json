{"pr_number": 3617, "pr_title": "[no ticket][risk=no] Puppeteer framework xpath refactor", "pr_createdAt": "2020-05-24T03:15:22Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3617", "timeline": [{"oid": "893b3fa505e6889228e1d74cb1b180b01f95a9e9", "url": "https://github.com/all-of-us/workbench/commit/893b3fa505e6889228e1d74cb1b180b01f95a9e9", "message": "element container class\n\nnew Container.ts class\n\nwip\n\ndelete text-options.ts\n\nundo jest-circus.setup change", "committedDate": "2020-05-24T03:19:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMjk5Mg==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430122992", "bodyText": "For example purpose only, this class to demonstrate finding icon-link in modal window. similar to existing function that finds button in dialog.\nIt is a not called anywhere in this PR.", "author": "aweng98", "createdAt": "2020-05-26T02:12:47Z", "path": "e2e/app/component/create-criteria-modal.ts", "diffHunk": "@@ -0,0 +1,37 @@\n+import {Page} from 'puppeteer';\n+import ClrIconLink from 'app/element/clr-icon-link';\n+import {ElementType} from 'app/xpath-options';\n+import Dialog from './dialog';\n+\n+const defaultXpath = '//*[contains(concat(\" \", normalize-space(@class), \" \"), \" crit-modal-container \")]';\n+\n+export enum PhysicalMeasurementsCriteria {\n+  BMI = 'BMI',\n+  HEIGHT = 'Height',\n+  WEIGHT = 'Weight',\n+  WAIST_CIRCUMFERENCE = 'Waist Circumference',\n+  HIP_CIRCUMFERENCE = 'Hip Circumference',\n+  HEART_RATE = 'Heart Rate',\n+  BLOOD_PRESSURE = 'Blood Pressure',\n+  PREGNANT_ENROLLMENT = 'Pregnant at enrollment',\n+  WHEELCHAIR_USER = 'Wheelchair user at enrollment',\n+  BP_HYPOTENSIVE = 'Hypotensive (Systolic <= 90 / Diastolic <= 60)', // Blood Pressure\n+  BP_NORMAL = 'Normal (Systolic <= 120 / Diastolic <= 80)', // Blood Pressure\n+  BP_PREHYPERTENSIVE = 'Pre-Hypertensive (Systolic 121-139 / Diastolic 81-89)', // Blood Pressure\n+  BP_HYPERTENSIVE = 'Hypertensive (Systolic >= 140 / Diastolic >= 90)', // Blood Pressure\n+  HR_NO_IRREGULARITY = 'No-irregularity detected', // Heart Rhythm Status\n+  HR_IRREGULARITY = 'Irregularity detected', // Heart Rhythm Status\n+}\n+\n+\n+export default class CreateCriteriaModal extends Dialog {\n+\n+  constructor(page: Page, xpath: string = defaultXpath) {\n+    super(page, xpath);\n+  }\n+\n+  async waitForPhysicalMeasurementCriteriaLink(criteriaType: PhysicalMeasurementsCriteria): Promise<ClrIconLink> {\n+    return ClrIconLink.forLabel(this.page, {type: ElementType.Icon, name: criteriaType, iconShape: 'slider'}, this);", "originalCommit": "0bdc39b0e801bebeb858edd0b2f243f7ee9539f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3NjcyMQ==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430676721", "bodyText": "It looks like this class isn't used at all yet? If not, can we not have an example that's also in use? Or maybe wait to merge it?", "author": "jaycarlton", "createdAt": "2020-05-26T20:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMjk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1MzI3OQ==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430753279", "bodyText": "no, not used by any class/function in this PR. To add a usage example, it would cause new files to be added in this PR, outside of scope. It is just for an example on how to find Icon-Link in a modal container.", "author": "aweng98", "createdAt": "2020-05-26T23:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMjk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1NjMzOA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r431156338", "bodyText": "Could this class be removed from this PR and added to the PR that actually uses it?", "author": "petesantos", "createdAt": "2020-05-27T14:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMjk5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMzI5Nw==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430123297", "bodyText": "extracted find button step out of clickButton function.", "author": "aweng98", "createdAt": "2020-05-26T02:14:25Z", "path": "e2e/app/component/dialog.ts", "diffHunk": "@@ -1,57 +1,66 @@\n+import Container from 'app/container';\n+import {xPathOptionToXpath} from 'app/element/xpath-defaults';\n import {ElementHandle, Page} from 'puppeteer';\n+import {ElementType} from '../xpath-options';\n \n export enum ButtonLabel {\n   Confirm = 'Confirm',\n   KeepEditing = 'Keep Editing',\n+  Cancel = 'Cancel',\n+  Calculate = 'Calculate',\n+  AddThis = 'ADD THIS',\n+  Finish = 'Finish',\n }\n \n-const SELECTOR = {\n-  dialogRoot: '.ReactModal__Content[role=\"dialog\"]',\n-  button: '[role=\"button\"]'\n+const Selector = {\n+  defaultDialog: '//*[@role=\"dialog\"]',\n }\n \n-export default class Dialog {\n-  private dialogElement: ElementHandle;\n+export default class Dialog extends Container {\n \n-  constructor(private readonly page: Page) {\n+  private dialogElement: ElementHandle;\n \n+  constructor(page: Page, xpath: string = Selector.defaultDialog) {\n+    super(page, xpath);\n   }\n \n   async getContent(): Promise<string> {\n     await this.findDialog();\n-    const modalText = await this.page.evaluate((selector) => {\n-      const modalElement = document.querySelector(selector);\n-      return modalElement.innerText;\n-    }, SELECTOR.dialogRoot);\n-    console.log('dialog: ' + modalText);\n-    return modalText;\n+    const modalText = await (await this.dialogElement.getProperty('innerText')).jsonValue();\n+    console.debug('dialog: \\n' + modalText);\n+    return modalText.toString();\n   }\n \n   async clickButton(buttonLabel: ButtonLabel): Promise<void> {\n-    const selector = this.getButtonSelector();\n-    await this.page.waitForSelector(selector, {visible: true});\n-    const buttons = await this.page.$$(selector);\n-    for (const button of buttons) {\n-      const propValue = await button.getProperty('textContent');\n-      if (await propValue.jsonValue() === buttonLabel) {\n-        return await button.click();\n-      }\n-    }\n-    throw new Error(`Failed to find button with label ${buttonLabel}`);\n+    const button = await this.waitForButton(buttonLabel);\n+    return button.click();\n+  }", "originalCommit": "0bdc39b0e801bebeb858edd0b2f243f7ee9539f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3NzMyOQ==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430677329", "bodyText": "might want to do this in one line. Would that be await this.waitForButton(buttonLabel).then(b => b.click())?", "author": "jaycarlton", "createdAt": "2020-05-26T20:06:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMzI5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNDA3MQ==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430124071", "bodyText": "lint check: Had to shorten the label alias in orde to keep length of line under 140 characters. Also for some other long alias.", "author": "aweng98", "createdAt": "2020-05-26T02:18:06Z", "path": "e2e/app/page/create-account-page.ts", "diffHunk": "@@ -37,8 +38,8 @@ export const EDUCATION_LEVEL_VALUE = {\n };\n \n export const LABEL_ALIAS = {\n-  READ_UNDERSTAND_PRIVACY_STATEMENT: 'I have read, understand, and agree to the All of Us Program Privacy Statement.',\n-  READ_UNDERSTAND_TERMS_OF_USE: 'I have read, understand, and agree to the Terms of Use described above.',\n+  READ_PRIVACY_STATEMENT: 'I have read, understand, and agree to the All of Us Program Privacy Statement',\n+  READ_TERMS_OF_USE: 'I have read, understand, and agree to the Terms of Use described above',", "originalCommit": "0bdc39b0e801bebeb858edd0b2f243f7ee9539f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzMjI4MA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430632280", "bodyText": "You could always break the string over two lines.", "author": "als364", "createdAt": "2020-05-26T18:49:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNDA3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNDk1MQ==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430124951", "bodyText": "moved up to if (jValue) block.", "author": "aweng98", "createdAt": "2020-05-26T02:22:08Z", "path": "e2e/utils/test-utils.ts", "diffHunk": "@@ -45,14 +45,13 @@ export async function waitWhileLoading(page: Page, timeOut: number = 60000): Pro\n       await page.waitFor((selector) => {\n         return document.querySelectorAll(selector).length === 0;\n       }, {timeout: timeOut}, spinAnimationSelector);\n+      // 1 second to give page time finish rendering\n+      await page.waitFor(1000);\n     }\n   } catch (err) {\n     throw new Error(err);\n   }\n-  // final 1 second wait for page render to finish\n-  if (jValue) {\n-    await page.waitFor(1000);\n-  }", "originalCommit": "0bdc39b0e801bebeb858edd0b2f243f7ee9539f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "701d87637a53129bd47994cf09dd40f0d06f591d", "url": "https://github.com/all-of-us/workbench/commit/701d87637a53129bd47994cf09dd40f0d06f591d", "message": "element container class\n\nnew Container.ts class\n\nwip\n\ndelete text-options.ts\n\nundo jest-circus.setup change\n\nrename ancestorNodeLevel parameter\n\nXPathOptions change\n\nmaxWorkers=2\n\nminor update\n\nfunction return types\n\nbug fix", "committedDate": "2020-05-26T16:41:30Z", "type": "commit"}, {"oid": "701d87637a53129bd47994cf09dd40f0d06f591d", "url": "https://github.com/all-of-us/workbench/commit/701d87637a53129bd47994cf09dd40f0d06f591d", "message": "element container class\n\nnew Container.ts class\n\nwip\n\ndelete text-options.ts\n\nundo jest-circus.setup change\n\nrename ancestorNodeLevel parameter\n\nXPathOptions change\n\nmaxWorkers=2\n\nminor update\n\nfunction return types\n\nbug fix", "committedDate": "2020-05-26T16:41:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyMDgwMw==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430620803", "bodyText": "why is this called forLabel? Should it perhaps be called waitForLabel?", "author": "als364", "createdAt": "2020-05-26T18:29:03Z", "path": "e2e/app/component/select-menu.ts", "diffHunk": "@@ -1,12 +1,21 @@\n-import {Page} from 'puppeteer';\n+import Container from 'app/container';\n import BaseElement from 'app/element/base-element';\n+import {xPathOptionToXpath} from 'app/element/xpath-defaults';\n+import {ElementType, XPathOptions} from 'app/xpath-options';\n+import {Page} from 'puppeteer';\n \n-export default class SelectMenu {\n+export default class SelectMenu extends Container {\n+\n+  static async forLabel(page: Page, xOpt: XPathOptions = {}, container?: Container): Promise<SelectMenu> {", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MzIzNw==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430643237", "bodyText": "For consistency. Element wrapper classes (Button, Link, etc.) have forLabel static function.", "author": "aweng98", "createdAt": "2020-05-26T19:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyMDgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4NTQxMw==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430685413", "bodyText": "It's confusing, because there's no label in the signature or in the body of the function.\nAlso, can you declare it in the base class and use override?", "author": "jaycarlton", "createdAt": "2020-05-26T20:22:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyMDgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0NDU5Nw==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430744597", "bodyText": "name, containsWith or normalizeSpace in XPathOptions object provides the label. The override keyword is not available in TypeScript.\nLet me know if you have a good name or approach to replace this. I'll make change in a separate PR.", "author": "aweng98", "createdAt": "2020-05-26T22:35:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyMDgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzMTI0NA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r431131244", "bodyText": "My expectation is that a function name tells me what a function does. This doesn't have a verb in it. Perhaps this should be called getSelectMenu, and the function getting the wrapped element in radio buttons should be getRadioButton, and so on.", "author": "als364", "createdAt": "2020-05-27T13:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyMDgwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NjQxNw==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r431246417", "bodyText": "I agree on the name being confusing. The refactor you did on the other forLabel methods cleaned up the code nicely and I believe could further be reduced to one function for all of these classes. The Container class could have a protected static method that retrieves the xpath - something like: (pseudo code)\nprotected static getXpath(xOpt, container) {\n    const itemXpath = xPathOptionToXpath(xOpt, container);\n    await page.waitForXPath(itemXpath, {visible: true});\n    return itemXpath\n}\n\nThe forLabel (to be renamed) functions could then look like:\nreturn new SelectMenu(page, await this.getXpath(xOpt, container))\n\nAnother option could be to have a generic xpath utility function outside of the class hierarchy that returns an xpath and these classes could be constructed directly", "author": "petesantos", "createdAt": "2020-05-27T15:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyMDgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3NTgyNA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430675824", "bodyText": "Please alphabetize these. Also, maybe document what this is for (and if it's supposed to include all the possibilities).", "author": "jaycarlton", "createdAt": "2020-05-26T20:03:31Z", "path": "e2e/app/component/create-criteria-modal.ts", "diffHunk": "@@ -0,0 +1,37 @@\n+import {Page} from 'puppeteer';\n+import ClrIconLink from 'app/element/clr-icon-link';\n+import {ElementType} from 'app/xpath-options';\n+import Dialog from './dialog';\n+\n+const defaultXpath = '//*[contains(concat(\" \", normalize-space(@class), \" \"), \" crit-modal-container \")]';\n+\n+export enum PhysicalMeasurementsCriteria {\n+  BMI = 'BMI',", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1MjcwMA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430752700", "bodyText": "Done. alphabetized enum values.", "author": "aweng98", "createdAt": "2020-05-26T22:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3NTgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3Nzc2MQ==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430677761", "bodyText": "What about renaming xPathOptionToXpath() to buildXPathSelector()?", "author": "jaycarlton", "createdAt": "2020-05-26T20:07:31Z", "path": "e2e/app/component/dialog.ts", "diffHunk": "@@ -1,57 +1,66 @@\n+import Container from 'app/container';\n+import {xPathOptionToXpath} from 'app/element/xpath-defaults';\n import {ElementHandle, Page} from 'puppeteer';\n+import {ElementType} from '../xpath-options';\n \n export enum ButtonLabel {\n   Confirm = 'Confirm',\n   KeepEditing = 'Keep Editing',\n+  Cancel = 'Cancel',\n+  Calculate = 'Calculate',\n+  AddThis = 'ADD THIS',\n+  Finish = 'Finish',\n }\n \n-const SELECTOR = {\n-  dialogRoot: '.ReactModal__Content[role=\"dialog\"]',\n-  button: '[role=\"button\"]'\n+const Selector = {\n+  defaultDialog: '//*[@role=\"dialog\"]',\n }\n \n-export default class Dialog {\n-  private dialogElement: ElementHandle;\n+export default class Dialog extends Container {\n \n-  constructor(private readonly page: Page) {\n+  private dialogElement: ElementHandle;\n \n+  constructor(page: Page, xpath: string = Selector.defaultDialog) {\n+    super(page, xpath);\n   }\n \n   async getContent(): Promise<string> {\n     await this.findDialog();\n-    const modalText = await this.page.evaluate((selector) => {\n-      const modalElement = document.querySelector(selector);\n-      return modalElement.innerText;\n-    }, SELECTOR.dialogRoot);\n-    console.log('dialog: ' + modalText);\n-    return modalText;\n+    const modalText = await (await this.dialogElement.getProperty('innerText')).jsonValue();\n+    console.debug('dialog: \\n' + modalText);\n+    return modalText.toString();\n   }\n \n   async clickButton(buttonLabel: ButtonLabel): Promise<void> {\n-    const selector = this.getButtonSelector();\n-    await this.page.waitForSelector(selector, {visible: true});\n-    const buttons = await this.page.$$(selector);\n-    for (const button of buttons) {\n-      const propValue = await button.getProperty('textContent');\n-      if (await propValue.jsonValue() === buttonLabel) {\n-        return await button.click();\n-      }\n-    }\n-    throw new Error(`Failed to find button with label ${buttonLabel}`);\n+    const button = await this.waitForButton(buttonLabel);\n+    return button.click();\n+  }\n+\n+  async waitForButton(buttonLabel: ButtonLabel): Promise<ElementHandle> {\n+    const selector = xPathOptionToXpath({name: buttonLabel, type: ElementType.Button}, this);", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1Nzc3OA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430757778", "bodyText": "yes, I can. I like the new name.", "author": "aweng98", "createdAt": "2020-05-26T23:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3Nzc2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3ODcwMw==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430678703", "bodyText": "style-wise, I wonder if we need to prefix everything with this.. For C++, Java, Ruby, etc, we tend not to (though other styles have emerged over the years, like m_page \ud83e\udd22.", "author": "jaycarlton", "createdAt": "2020-05-26T20:09:22Z", "path": "e2e/app/component/dialog.ts", "diffHunk": "@@ -1,57 +1,66 @@\n+import Container from 'app/container';\n+import {xPathOptionToXpath} from 'app/element/xpath-defaults';\n import {ElementHandle, Page} from 'puppeteer';\n+import {ElementType} from '../xpath-options';\n \n export enum ButtonLabel {\n   Confirm = 'Confirm',\n   KeepEditing = 'Keep Editing',\n+  Cancel = 'Cancel',\n+  Calculate = 'Calculate',\n+  AddThis = 'ADD THIS',\n+  Finish = 'Finish',\n }\n \n-const SELECTOR = {\n-  dialogRoot: '.ReactModal__Content[role=\"dialog\"]',\n-  button: '[role=\"button\"]'\n+const Selector = {\n+  defaultDialog: '//*[@role=\"dialog\"]',\n }\n \n-export default class Dialog {\n-  private dialogElement: ElementHandle;\n+export default class Dialog extends Container {\n \n-  constructor(private readonly page: Page) {\n+  private dialogElement: ElementHandle;\n \n+  constructor(page: Page, xpath: string = Selector.defaultDialog) {\n+    super(page, xpath);\n   }\n \n   async getContent(): Promise<string> {\n     await this.findDialog();\n-    const modalText = await this.page.evaluate((selector) => {\n-      const modalElement = document.querySelector(selector);\n-      return modalElement.innerText;\n-    }, SELECTOR.dialogRoot);\n-    console.log('dialog: ' + modalText);\n-    return modalText;\n+    const modalText = await (await this.dialogElement.getProperty('innerText')).jsonValue();\n+    console.debug('dialog: \\n' + modalText);\n+    return modalText.toString();\n   }\n \n   async clickButton(buttonLabel: ButtonLabel): Promise<void> {\n-    const selector = this.getButtonSelector();\n-    await this.page.waitForSelector(selector, {visible: true});\n-    const buttons = await this.page.$$(selector);\n-    for (const button of buttons) {\n-      const propValue = await button.getProperty('textContent');\n-      if (await propValue.jsonValue() === buttonLabel) {\n-        return await button.click();\n-      }\n-    }\n-    throw new Error(`Failed to find button with label ${buttonLabel}`);\n+    const button = await this.waitForButton(buttonLabel);\n+    return button.click();\n+  }\n+\n+  async waitForButton(buttonLabel: ButtonLabel): Promise<ElementHandle> {\n+    const selector = xPathOptionToXpath({name: buttonLabel, type: ElementType.Button}, this);\n+    return this.page.waitForXPath(selector, {visible: true});\n   }\n \n-  async waitUntilDialogIsClosed() {\n-    await this.page.waitForSelector(SELECTOR.dialogRoot, {visible: false, timeout: 60000});\n+  async waitUntilDialogIsClosed(): Promise<void> {\n+    await this.page.waitForXPath(this.xpath, {visible: false});\n   }\n \n-  private async findDialog() {\n+  async findDialog(): Promise<ElementHandle> {\n     if (this.dialogElement === undefined) {\n-      this.dialogElement = await this.page.waitForSelector(SELECTOR.dialogRoot, {visible: true});\n+      this.dialogElement = await this.page.waitForXPath(this.xpath, {visible: true});\n     }\n+    return this.dialogElement;", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1MTMyNA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430751324", "bodyText": "I don't know how to avoid using the this qualifier. TypeScript compile fails if it was removed.\nExample of TS compile error:\nTS2663: Cannot find name 'selectInstitution'. Did you mean the instance member 'this.selectInstitution'?", "author": "aweng98", "createdAt": "2020-05-26T22:55:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3ODcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MTk4Mg==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r431191982", "bodyText": "This may be a bit orthogonal, but I feel it is in line with Jay's comments... Looking at the class as a whole I am wondering what it is meant to do / what is the problem it is solving? Other than dialogElement and getContent it seems like most of the methods don't really need to be part of this class to function / they don't use any internal state that is specific to the class and isn't available elsewhere. Is there another abstraction that would be a better fit? Perhaps a set of helper functions?", "author": "petesantos", "createdAt": "2020-05-27T14:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3ODcwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTY3OQ==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430679679", "bodyText": "One thing I'm not 100% sure about is the protocol here. You instantiate the Dialog object before you've determined that a dialog is ready or exists at all. I kinda feel like the Dialog should be something you wait on, and then it exposes properties that dialogs have.", "author": "jaycarlton", "createdAt": "2020-05-26T20:11:14Z", "path": "e2e/app/component/dialog.ts", "diffHunk": "@@ -1,57 +1,66 @@\n+import Container from 'app/container';\n+import {xPathOptionToXpath} from 'app/element/xpath-defaults';\n import {ElementHandle, Page} from 'puppeteer';\n+import {ElementType} from '../xpath-options';\n \n export enum ButtonLabel {\n   Confirm = 'Confirm',\n   KeepEditing = 'Keep Editing',\n+  Cancel = 'Cancel',\n+  Calculate = 'Calculate',\n+  AddThis = 'ADD THIS',\n+  Finish = 'Finish',\n }\n \n-const SELECTOR = {\n-  dialogRoot: '.ReactModal__Content[role=\"dialog\"]',\n-  button: '[role=\"button\"]'\n+const Selector = {\n+  defaultDialog: '//*[@role=\"dialog\"]',\n }\n \n-export default class Dialog {\n-  private dialogElement: ElementHandle;\n+export default class Dialog extends Container {\n \n-  constructor(private readonly page: Page) {\n+  private dialogElement: ElementHandle;\n \n+  constructor(page: Page, xpath: string = Selector.defaultDialog) {", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1NzMwOQ==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430757309", "bodyText": "Sorry, I'm confused by this comment. Can you elaborate? Class constructor does nothing else except instantiate page and xpath class fields. It is not yet finding dialog. No action is happening here.", "author": "aweng98", "createdAt": "2020-05-26T23:13:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTY3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4Njg0OA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430686848", "bodyText": "I don't think Container is quite right. Aren't there leaf elements that are xpath-able that don't contain things?", "author": "jaycarlton", "createdAt": "2020-05-26T20:24:48Z", "path": "e2e/app/container.ts", "diffHunk": "@@ -0,0 +1,16 @@\n+import {Page} from 'puppeteer';\n+\n+/**\n+ * This is the super base class.\n+ * Every element needs a Page object and a xpath for locating the element.\n+ */\n+export default class Container {", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDczNjcwMw==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430736703", "bodyText": "Good point. It would be nice to have more descriptive and reasonable name. I'm not obsessed over name. Let me know if you got a better name. Some alternatives from me: Finder, Locator, WebElement, or simply Element.", "author": "aweng98", "createdAt": "2020-05-26T22:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4Njg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzNDM5Nw==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r431134397", "bodyText": "How about something like ComponentWrapper? That's what we're actually locating here", "author": "als364", "createdAt": "2020-05-27T13:34:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4Njg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2MzMyMA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r431263320", "bodyText": "Thank you. I will consider renaming in future refactor PRs.", "author": "aweng98", "createdAt": "2020-05-27T16:06:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4Njg0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4NzU5Ng==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430687596", "bodyText": "Generally methods starting with as aren't static. Can this go in the Page class?", "author": "jaycarlton", "createdAt": "2020-05-26T20:25:56Z", "path": "e2e/app/element/base-element.ts", "diffHunk": "@@ -1,77 +1,53 @@\n import {ClickOptions, ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import Container from 'app/container';\n \n /**\n  * BaseElement represents a web element in the DOM.\n  * It implements useful methods for querying and interacting with this element.\n  */\n-export default class BaseElement {\n+export default class BaseElement extends Container {\n \n-  static asBaseElement(page: Page, elem: ElementHandle): BaseElement {\n-    return new BaseElement(page, elem);\n+  static asBaseElement(page: Page, elementHandle: ElementHandle): BaseElement {", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDczMDY3OA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430730678", "bodyText": "Good to know that general rule with as. \ud83d\udc4d\nI don't understand why it should go into a *Page class. It doesn't make any sense to me. Can you elaborate? I think, if it should be moved or renamed, work is outside scope of this PR.", "author": "aweng98", "createdAt": "2020-05-26T21:57:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4NzU5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4ODk0NA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430688944", "bodyText": "Generally, you should not try to catch programming errors at runtime like this. It's OK to let low-level errors show up and fix those. There are just too many things that could be undefined to chase down.", "author": "jaycarlton", "createdAt": "2020-05-26T20:28:33Z", "path": "e2e/app/element/xpath-defaults.ts", "diffHunk": "@@ -1,77 +1,81 @@\n-import TextOptions from './text-options';\n+import Container from 'app/container';\n+import {ElementType, XPathOptions} from 'app/xpath-options';\n \n-function textXpathHelper(opts: TextOptions) {\n-  let findText;\n-  if (opts.text) {\n-    findText = opts.text;\n-    return `text()='${findText}' or @aria-label='${findText}' or @placeholder='${findText}'`;\n-  } else if (opts.textContains) {\n-    findText = opts.textContains;\n-    return `contains(text(), '${findText}') or contains(@aria-label, '${findText}') or contains(@placeholder, '${findText}')`;\n-  } else if (opts.normalizeSpace) {\n-    findText = opts.normalizeSpace;\n-    return `contains(normalize-space(), '${findText}')`;\n-  }\n+export function iframeXpath(label: string) {\n+  return `//body[@id='body']//*[contains(@aria-label, '${label}')]//iframe`;\n }\n \n-/**\n- * Label. It can be partial or full string.\n- * @param label\n- */\n-export function labelXpath(opts: TextOptions) {\n-  return `(//label | //*)[${textXpathHelper(opts)}]`;\n-}\n+export function xPathOptionToXpath(xOpts: XPathOptions, container?: Container): string {\n \n-/**\n- * any [@role=button] element with specified label.\n- * @param label\n- */\n-export function buttonXpath(opts: TextOptions) {\n-  const role = `@role='button'`;\n-  const txt = textXpathHelper(opts);\n-  return `(//button[${txt}] | //*[${txt} and ${role}])`;\n-}\n+  const  { type, name, containsText, normalizeSpace, ancestorLevel = 1, iconShape} = xOpts;\n \n-export function inputXpath(opts: TextOptions) {\n-  const numSlashes = opts.inputType === 'checkbox' ? '/' : '//';\n-  const nodeLevel = `ancestor::node()[${opts.ancestorNodeLevel}]`;\n-  if (opts.inputType !== undefined) {\n-    return `${labelXpath(opts)}/${nodeLevel}${numSlashes}input[@type='${opts.inputType}']`;\n+  // optional function parameters check\n+  if (type === 'icon') {\n+    if (iconShape === undefined) {\n+      throw new Error(`Incorrect XPathOptions configuration for Icon: set \"iconShape\" value.`);\n+    }\n+  } else {\n+    if (name === undefined && normalizeSpace === undefined && containsText === undefined) {", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyNjgzMg==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430726832", "bodyText": "Got it. \ud83d\udc4d\nparameter checks helped me catch few mistakes. I found them very helpful to detect misuse. If no strong objection, I'd like to keep them to keep me on my toes, ready to sound alarm over new mistakes that might happen.", "author": "aweng98", "createdAt": "2020-05-26T21:48:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4ODk0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4OTIxMQ==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430689211", "bodyText": "More descriptive name would help here.", "author": "jaycarlton", "createdAt": "2020-05-26T20:29:07Z", "path": "e2e/app/page/create-account-page.ts", "diffHunk": "@@ -47,6 +48,34 @@ export const LABEL_ALIAS = {\n   INSTITUTION_EMAIL: 'Your institutional email address',\n };\n \n+export const FIELD = {", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4OTY2NA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430689664", "bodyText": "enums are typically ALL_CAPS unless there's a typescript standard that says otherwise.", "author": "jaycarlton", "createdAt": "2020-05-26T20:29:59Z", "path": "e2e/app/xpath-options.ts", "diffHunk": "@@ -0,0 +1,20 @@\n+export interface XPathOptions {\n+  type?: ElementType;\n+  name?: string;\n+  containsText?: string;\n+  normalizeSpace?: string;\n+  ancestorLevel?: number;\n+  iconShape?: string;\n+}\n+\n+export enum ElementType {\n+  Button = 'button',", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyMzQzMg==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r430723432", "bodyText": "Following same TypeScript convention using PascalCase.\nExample on https://www.typescriptlang.org/docs/handbook/enums.html\nenum Direction {\n  Up = 1,\n  Down,\n  Left,\n  Right\n}", "author": "aweng98", "createdAt": "2020-05-26T21:40:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4OTY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3MTAxMQ==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r431171011", "bodyText": "Thinking out loud (TOL): Are these in the codebase? I believe there was some talk about extracting strings like this from the codebase into enums. If we are enumerating these strings here, would we be better off enumerating them in the codebase itself?\nThis may prevent having to make text changes to both code and tests in the future.", "author": "petesantos", "createdAt": "2020-05-27T14:22:12Z", "path": "e2e/app/component/dialog.ts", "diffHunk": "@@ -1,57 +1,66 @@\n+import Container from 'app/container';\n+import {xPathOptionToXpath} from 'app/element/xpath-defaults';\n import {ElementHandle, Page} from 'puppeteer';\n+import {ElementType} from '../xpath-options';\n \n export enum ButtonLabel {", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4MTQwOA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r431181408", "bodyText": "This method feels like it should be on the constructor, or the dialog element should be passed in to the class.\nGoing forward, anytime we need a handle on the dialog element we can never be sure if we have already retrieved the element and will always have to call findDialog before taking any other action. It feels like we will never be certain about the internal state of the object. If this cannot be done without a larger refactor consider adding a ticket for this", "author": "petesantos", "createdAt": "2020-05-27T14:32:33Z", "path": "e2e/app/component/dialog.ts", "diffHunk": "@@ -1,57 +1,66 @@\n+import Container from 'app/container';\n+import {xPathOptionToXpath} from 'app/element/xpath-defaults';\n import {ElementHandle, Page} from 'puppeteer';\n+import {ElementType} from '../xpath-options';\n \n export enum ButtonLabel {\n   Confirm = 'Confirm',\n   KeepEditing = 'Keep Editing',\n+  Cancel = 'Cancel',\n+  Calculate = 'Calculate',\n+  AddThis = 'ADD THIS',\n+  Finish = 'Finish',\n }\n \n-const SELECTOR = {\n-  dialogRoot: '.ReactModal__Content[role=\"dialog\"]',\n-  button: '[role=\"button\"]'\n+const Selector = {\n+  defaultDialog: '//*[@role=\"dialog\"]',\n }\n \n-export default class Dialog {\n-  private dialogElement: ElementHandle;\n+export default class Dialog extends Container {\n \n-  constructor(private readonly page: Page) {\n+  private dialogElement: ElementHandle;\n \n+  constructor(page: Page, xpath: string = Selector.defaultDialog) {\n+    super(page, xpath);\n   }\n \n   async getContent(): Promise<string> {\n     await this.findDialog();\n-    const modalText = await this.page.evaluate((selector) => {\n-      const modalElement = document.querySelector(selector);\n-      return modalElement.innerText;\n-    }, SELECTOR.dialogRoot);\n-    console.log('dialog: ' + modalText);\n-    return modalText;\n+    const modalText = await (await this.dialogElement.getProperty('innerText')).jsonValue();\n+    console.debug('dialog: \\n' + modalText);\n+    return modalText.toString();\n   }\n \n   async clickButton(buttonLabel: ButtonLabel): Promise<void> {\n-    const selector = this.getButtonSelector();\n-    await this.page.waitForSelector(selector, {visible: true});\n-    const buttons = await this.page.$$(selector);\n-    for (const button of buttons) {\n-      const propValue = await button.getProperty('textContent');\n-      if (await propValue.jsonValue() === buttonLabel) {\n-        return await button.click();\n-      }\n-    }\n-    throw new Error(`Failed to find button with label ${buttonLabel}`);\n+    const button = await this.waitForButton(buttonLabel);\n+    return button.click();\n+  }\n+\n+  async waitForButton(buttonLabel: ButtonLabel): Promise<ElementHandle> {\n+    const selector = xPathOptionToXpath({name: buttonLabel, type: ElementType.Button}, this);\n+    return this.page.waitForXPath(selector, {visible: true});\n   }\n \n-  async waitUntilDialogIsClosed() {\n-    await this.page.waitForSelector(SELECTOR.dialogRoot, {visible: false, timeout: 60000});\n+  async waitUntilDialogIsClosed(): Promise<void> {\n+    await this.page.waitForXPath(this.xpath, {visible: false});\n   }\n \n-  private async findDialog() {\n+  async findDialog(): Promise<ElementHandle> {", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1MDAwMA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r431250000", "bodyText": "Is this class being used? If not would it be unreasonable to add this to a PR that uses the tiered-menu class?", "author": "petesantos", "createdAt": "2020-05-27T15:51:42Z", "path": "e2e/app/component/tiered-menu.ts", "diffHunk": "@@ -0,0 +1,12 @@\n+import Container from 'app/container';", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2NDA5NA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r431264094", "bodyText": "I would prefer to have the element passed in to the constructor. This is the same argument that I had for dialog, except this class is designed to be extended, so I believe the problem can get out of hand much faster (this forces a pattern in all subclasses where they will need to run this method before continuing, and the subsequent code will not use the return value, but rather utilize the state change/side effect.", "author": "petesantos", "createdAt": "2020-05-27T16:07:36Z", "path": "e2e/app/element/base-element.ts", "diffHunk": "@@ -1,77 +1,53 @@\n import {ClickOptions, ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import Container from 'app/container';\n \n /**\n  * BaseElement represents a web element in the DOM.\n  * It implements useful methods for querying and interacting with this element.\n  */\n-export default class BaseElement {\n+export default class BaseElement extends Container {\n \n-  static asBaseElement(page: Page, elem: ElementHandle): BaseElement {\n-    return new BaseElement(page, elem);\n+  static asBaseElement(page: Page, elementHandle: ElementHandle): BaseElement {\n+    const baseElement = new BaseElement(page);\n+    baseElement.setElementHandle(elementHandle);\n+    return baseElement;\n   }\n \n-  protected readonly page: Page;\n-  protected css: string;\n-  protected xpath: string;\n   protected element: ElementHandle;\n \n-  constructor(aPage: Page, aElement?: ElementHandle) {\n-    this.page = aPage;\n-    this.element = aElement || undefined;\n+  constructor(protected readonly page: Page, xpath?: string) {\n+    super(page, xpath);\n   }\n \n-  /**\n-   * Find element with wait.\n-   * @param cssSelector\n-   * @param waitOptions\n-   */\n-  async withCss(cssSelector: string, waitOptions?: WaitForSelectorOptions): Promise<ElementHandle> {\n-    this.css = cssSelector;\n-    this.element = await this.page.waitForSelector(this.css, waitOptions);\n-    return this.element;\n+  protected setElementHandle(elementHandle: ElementHandle) {\n+    this.element = elementHandle;\n   }\n \n   /**\n-   * Find element with wait.\n-   * @param xpathSelector\n-   * @param waitOptions\n+   * Find first element matching xpath selector.\n+   * If there is no element matching xpath selector, null is returned.\n+   * @param {WaitForSelectorOptions} waitOptions\n    */\n-  async withXpath(xpathSelector: string, waitOptions?: WaitForSelectorOptions): Promise<ElementHandle> {\n-    this.xpath = xpathSelector;\n-    this.element = await this.page.waitForXPath(this.xpath, waitOptions);\n-    return this.element;\n-  }\n-\n-   /**\n-    * Find first element without wait for.\n-    */\n-  async findByCss(cssSelector: string,): Promise<ElementHandle | null> {\n-    this.css = cssSelector;\n-    this.element = await this.page.$(this.css);\n-    return this.element;\n+  async waitForXPath(waitOptions?: WaitForSelectorOptions): Promise<this> {", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI5NDU0OA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r431294548", "bodyText": "Consider opening another ticket to make this enum consistent with the others in the codebase (looks like PascalCase at the moment)", "author": "petesantos", "createdAt": "2020-05-27T16:52:27Z", "path": "e2e/tests/misc/sidenav.spec.ts", "diffHunk": "@@ -4,12 +4,12 @@ import ProfilePage from 'app/page/profile-page';\n import WorkspacesPage from 'app/page/workspaces-page';\n import {signIn} from 'utils/test-utils';\n import Navigation, {NavLink} from 'app/component/navigation';\n-import {waitForDocumentTitle} from '../../utils/waits-utils';\n+import {waitForDocumentTitle} from 'utils/waits-utils';\n \n export const HELP_DESK = {", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxNTM5Mw==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r431315393", "bodyText": "does this need an await as well ?\nThoughts on a ternary here?\nreturn checked ? await this.uncheck() : await this.check()", "author": "petesantos", "createdAt": "2020-05-27T17:25:16Z", "path": "e2e/app/element/checkbox.ts", "diffHunk": "@@ -68,7 +63,8 @@ export default class Checkbox extends BaseElement {\n     if (checked) {\n       return this.check();", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxNzI1NA==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r431317254", "bodyText": "Just curious if the comment is needed here. Perhaps a rename for clarity if that is the concern (in a separate PR)?\nTextboxInput", "author": "petesantos", "createdAt": "2020-05-27T17:28:20Z", "path": "e2e/app/element/textbox.ts", "diffHunk": "@@ -1,27 +1,25 @@\n import {Page, WaitForSelectorOptions} from 'puppeteer';\n-import TextOptions from './text-options';\n+import Container from 'app/container';\n+import {ElementType, XPathOptions} from 'app/xpath-options';\n import BaseElement from './base-element';\n-import {findTextbox} from './xpath-finder';\n+import {xPathOptionToXpath} from './xpath-defaults';\n \n+/**", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzNDgxMg==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r431334812", "bodyText": "Could you return the selected option directly and not set and remove the private selectedOption? My concern here is that the actual selectedOption is a piece of state we are storing that could change out from under us and not reflect the true state of the selection.\nFor instance - an interaction within the application causes a change to the value in this select box (e.g. the options go away)\nAlso, this value is not currently being used outside of a temporary placeholder for a return value", "author": "petesantos", "createdAt": "2020-05-27T17:54:28Z", "path": "e2e/app/element/select.ts", "diffHunk": "@@ -1,37 +1,42 @@\n import {Page, WaitForSelectorOptions} from 'puppeteer';\n-import TextOptions from './text-options';\n+import Container from 'app/container';\n+import {ElementType, XPathOptions} from 'app/xpath-options';\n import BaseElement from './base-element';\n-import {findSelect} from './xpath-finder';\n+import {xPathOptionToXpath} from './xpath-defaults';\n \n+/**\n+ * <select> element\n+ */\n export default class Select extends BaseElement {\n \n   private selectedOption;\n    \n   static async forLabel(\n      page: Page,\n-     textOptions: TextOptions,\n-     waitOptions: WaitForSelectorOptions = {visible: true},\n-     throwErr = true): Promise<Select> {\n+     xOpt: XPathOptions,\n+     container?: Container,\n+     waitOptions: WaitForSelectorOptions = {visible: true}): Promise<Select> {\n \n-    let elem: Select;\n-    try {\n-      const selectElement = await findSelect(page, textOptions, waitOptions);\n-      elem = new Select(page, selectElement);\n-    } catch (e) {\n-      if (throwErr) {\n-        console.error(`FAILED finding Select: \"${JSON.stringify(textOptions)}\".`);\n-        throw e;\n-      }\n-    }\n-    return elem;\n+    xOpt.type = ElementType.Select;\n+    const selectXpath = xPathOptionToXpath(xOpt, container);\n+    const select = new Select(page, selectXpath);\n+    await select.waitForXPath(waitOptions);\n+    return select;\n   }\n \n   async selectOption(optionValue: string): Promise<string> {\n     this.selectedOption = await this.element.select(optionValue);\n     return this.selectedOption;\n   }\n \n-  getSelectedOption(): string {\n+  /**\n+   * Returns selected value in Select.\n+   */\n+  async getSelectedOption(): Promise<string> {\n+    const selector = this.xpath + '/parent::*/following-sibling::label';\n+    const displayedValue = await this.page.waitForXPath(selector, { visible: true });\n+    const innerText = await displayedValue.getProperty('innerText');\n+    this.selectedOption = (await innerText.jsonValue()).toString();", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0MDA3OQ==", "url": "https://github.com/all-of-us/workbench/pull/3617#discussion_r431340079", "bodyText": "I am curious what the use cases are for this / how you envision its usage. Also - Should the constructor ever be directly called?", "author": "petesantos", "createdAt": "2020-05-27T18:01:01Z", "path": "e2e/app/element/base-element.ts", "diffHunk": "@@ -1,77 +1,53 @@\n import {ClickOptions, ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import Container from 'app/container';\n \n /**\n  * BaseElement represents a web element in the DOM.\n  * It implements useful methods for querying and interacting with this element.\n  */\n-export default class BaseElement {\n+export default class BaseElement extends Container {\n \n-  static asBaseElement(page: Page, elem: ElementHandle): BaseElement {\n-    return new BaseElement(page, elem);\n+  static asBaseElement(page: Page, elementHandle: ElementHandle): BaseElement {\n+    const baseElement = new BaseElement(page);\n+    baseElement.setElementHandle(elementHandle);\n+    return baseElement;\n   }\n \n-  protected readonly page: Page;\n-  protected css: string;\n-  protected xpath: string;\n   protected element: ElementHandle;\n \n-  constructor(aPage: Page, aElement?: ElementHandle) {\n-    this.page = aPage;\n-    this.element = aElement || undefined;\n+  constructor(protected readonly page: Page, xpath?: string) {", "originalCommit": "701d87637a53129bd47994cf09dd40f0d06f591d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}