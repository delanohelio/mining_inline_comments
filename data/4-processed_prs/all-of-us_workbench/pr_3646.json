{"pr_number": 3646, "pr_title": "[RW-4918][RW-4767][risk=no] Validate against whitespace-only strings on workspace create/edit/clone", "pr_createdAt": "2020-06-05T20:22:27Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3646", "timeline": [{"oid": "57502c1a23f660e939adc6adffa467f95376d802", "url": "https://github.com/all-of-us/workbench/commit/57502c1a23f660e939adc6adffa467f95376d802", "message": "Use more validate.js, leverage allowEmpty", "committedDate": "2020-06-05T20:03:07Z", "type": "commit"}, {"oid": "ecbbbe742098e94d89dd24af42d3e363bd53e98d", "url": "https://github.com/all-of-us/workbench/commit/ecbbbe742098e94d89dd24af42d3e363bd53e98d", "message": "lint", "committedDate": "2020-06-05T20:04:24Z", "type": "commit"}, {"oid": "d4c9d12edf411393733947ebb4520efe0c750db2", "url": "https://github.com/all-of-us/workbench/commit/d4c9d12edf411393733947ebb4520efe0c750db2", "message": "additional test", "committedDate": "2020-06-05T20:11:22Z", "type": "commit"}, {"oid": "4202d3e79957210ad48a996cb085a3deffae00f2", "url": "https://github.com/all-of-us/workbench/commit/4202d3e79957210ad48a996cb085a3deffae00f2", "message": "test code consistency", "committedDate": "2020-06-05T20:13:31Z", "type": "commit"}, {"oid": "db2878d1e193d29ba1767c2c7f1953b1a4dae377", "url": "https://github.com/all-of-us/workbench/commit/db2878d1e193d29ba1767c2c7f1953b1a4dae377", "message": "comments", "committedDate": "2020-06-05T20:16:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkwODI4OA==", "url": "https://github.com/all-of-us/workbench/pull/3646#discussion_r436908288", "bodyText": "I wish our data-test-ids were a bit more consistent in casing/style, but that's a problem for another PR", "author": "als364", "createdAt": "2020-06-08T18:28:01Z", "path": "ui/src/app/pages/workspace/workspace-edit.spec.tsx", "diffHunk": "@@ -392,13 +381,23 @@ describe('WorkspaceEdit', () => {\n     const validInput = fp.repeat(100, 'a');\n     wrapper.find('[data-test-id=\"other-specialPopulation-text\"]').first().simulate('change', {target: {value: validInput}});\n \n-    let otherSpecificPopulationError = getSaveButtonDisableMsg(wrapper, 'otherSpecificPopulation');\n-    expect(otherSpecificPopulationError).toBeUndefined();\n+    expect(getSaveButtonDisableMsg(wrapper, 'otherPopulationDetails')).toBeUndefined();\n \n     const inValidInput = fp.repeat(101, 'a');\n     wrapper.find('[data-test-id=\"other-specialPopulation-text\"]').first().simulate('change', {target: {value: inValidInput}});\n \n-    otherSpecificPopulationError = getSaveButtonDisableMsg(wrapper, 'otherSpecificPopulation');\n-    expect(fp.first(otherSpecificPopulationError)).toBe('Other specific population must be true');\n+    expect(getSaveButtonDisableMsg(wrapper, 'otherPopulationDetails')).toBeDefined();\n+  });\n+\n+  it ('should show error message when other disseminate checked but empty', async() => {\n+    const wrapper = component();\n+    wrapper.find('[data-test-id=\"OTHER-checkbox\"]').at(1).simulate('change', { target: { checked: true } });", "originalCommit": "db2878d1e193d29ba1767c2c7f1953b1a4dae377", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}