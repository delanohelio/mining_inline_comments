{"pr_number": 3550, "pr_title": "[RW-3942][risk=moderate] Add readonly database user (1/2)", "pr_createdAt": "2020-05-07T06:20:06Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3550", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ2OTY0Mg==", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421469642", "bodyText": "Can you put a prominent notice right above here that the session is or isn't read-only?", "author": "jaycarlton", "createdAt": "2020-05-07T12:37:09Z", "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2020,20 +2022,36 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(\n-    \"--root\",\n-    ->(opts, _) { opts.root = true },\n-    \"Connect as root\")\n+    \"--db-user [user]\",\n+    ->(opts, v) { opts.db_user = v },\n+    \"Optional database user to connect as, defaults to 'dev-readonly'\")\n   gcc = GcloudContextV2.new(op)\n   op.parse.validate\n   gcc.validate\n+\n+  if op.opts.db_user.nil?\n+    op.opts.db_user = \"dev-readonly\"\n+  end\n+\n   env = read_db_vars(gcc)\n+  db_password = nil\n+  case op.opts.db_user\n+  when \"dev-readonly\"\n+    db_password = env[\"DEV_READONLY_DB_PASSWORD\"]\n+  when \"workbench\"\n+    db_password = env[\"WORKBENCH_DB_PASSWORD\"]\n+  when \"root\"\n+    db_password = env[\"MYSQL_ROOT_PASSWORD\"]\n+  else\n+    raise ArgumentError.new(\n+            \"invalid --db-user provided, wanted 'workbench', 'dev-readonly', or 'root', got '#{op.opts.db_user}'\")\n+  end\n+\n   CloudSqlProxyContext.new(gcc.project).run do\n-    password = op.opts.root ? env[\"MYSQL_ROOT_PASSWORD\"] : env[\"WORKBENCH_DB_PASSWORD\"]\n-    user = op.opts.root ? \"root\" : env[\"WORKBENCH_DB_USER\"]\n     common.run_inline %W{\n-      mysql --host=127.0.0.1 --port=3307 --user=#{user}\n-      --database=#{env[\"DB_NAME\"]} --password=#{password}},\n-      password\n+      mysql --host=127.0.0.1 --port=3307 --user=#{op.opts.db_user}", "originalCommit": "e51ab0668aad88f6b817e3845c8c0f6d363fd17e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3MjY0Nw==", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421872647", "bodyText": "done", "author": "calbach", "createdAt": "2020-05-08T00:41:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ2OTY0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MDY0Mw==", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421470643", "bodyText": "Maybe for a later pass, but do we have a policy about which systems we need named accounts per user for and which ones we can share? If at some point we wanted to audit who was running which statements, it would be helpful to associate these sessions with names.\nOr maybe there's another way to capture that outside of mysql.", "author": "jaycarlton", "createdAt": "2020-05-07T12:38:49Z", "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1277,6 +1277,8 @@ def write_db_creds_file(project, cdr_db_name, root_password, workbench_password)\n       db_creds_file.puts \"MYSQL_ROOT_PASSWORD=#{root_password}\"\n       db_creds_file.puts \"WORKBENCH_DB_USER=workbench\"\n       db_creds_file.puts \"WORKBENCH_DB_PASSWORD=#{workbench_password}\"\n+      db_creds_file.puts \"DEV_READONLY_DB_USER=dev-readonly\"", "originalCommit": "e51ab0668aad88f6b817e3845c8c0f6d363fd17e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2OTgxOA==", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421869818", "bodyText": "In general we don't have a critical dependency on mysql users for auditing nor for authentication (except as defense-in-depth), since CloudSQL has its own mechanisms outside of MySQL for managing this (i.e. cloud sql proxy). The current convention is to add users is when we need different functional permissions for different things and there are good cut points to allow granting least privilege (mostly to mitigate security exploits / bugs).\nFor example, if we had a separate GAE service connecting to the same DB for a slightly different purpose (e.g. different subset of tables), another SQL user would probably make sense.\nI could see an argument for a dev-writer user to allow it to evolve separately of workbench, and for logging purposes on the off-chance this surfaces somewhere useful.\nGoing for something like one user per developer I think would be a pain to maintain and would not gain us much.", "author": "calbach", "createdAt": "2020-05-08T00:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MDY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MTY2Ng==", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421471666", "bodyText": "nit: I think this would be a bit more readable if the CREATE/PASSWORD/GRANT statements were grouped by user instead of by statement type.", "author": "jaycarlton", "createdAt": "2020-05-07T12:40:30Z", "path": "api/db/create_db.sql", "diffHunk": "@@ -1,16 +1,20 @@\n CREATE DATABASE IF NOT EXISTS ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_general_ci;\n \n+CREATE USER IF NOT EXISTS '${DEV_READONLY_DB_USER}'@'%' IDENTIFIED BY '${DEV_READONLY_DB_PASSWORD}';", "originalCommit": "e51ab0668aad88f6b817e3845c8c0f6d363fd17e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3MTg3Nw==", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421871877", "bodyText": "I'd rather keep all the user initialization first before executing any other GRANT statements", "author": "calbach", "createdAt": "2020-05-08T00:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MTY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MjQyMA==", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421472420", "bodyText": "If I were looking at the help text quickly, I'd probably be looking for an option like --read-only or --access=read-only rather than --db-user (which is a bit of an implementation detail).", "author": "jaycarlton", "createdAt": "2020-05-07T12:41:45Z", "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2020,20 +2022,36 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(", "originalCommit": "e51ab0668aad88f6b817e3845c8c0f6d363fd17e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3MjUzMw==", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421872533", "bodyText": "I added more to the flag doc. The problem with that approach is that we have existing functionality which supports signing in as --root instead. So the --readonly proposal means we now have mutually exclusive flags with confusing interactions, since the implementations are all driven by the database user e.g. --readonly, --db-user or , --readonly and --root\nI'd prefer to leave this general and add documentation. Also - I feel readonly should be the default, so I don't like it as a flag. --no-readonly maybe (suffers from same issues).", "author": "calbach", "createdAt": "2020-05-08T00:41:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MjQyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MzA0Mw==", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421473043", "bodyText": "I'd probably make a map from user name to env variable name and do a lookup instead of a case here.", "author": "jaycarlton", "createdAt": "2020-05-07T12:42:44Z", "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2020,20 +2022,36 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(\n-    \"--root\",\n-    ->(opts, _) { opts.root = true },\n-    \"Connect as root\")\n+    \"--db-user [user]\",\n+    ->(opts, v) { opts.db_user = v },\n+    \"Optional database user to connect as, defaults to 'dev-readonly'\")\n   gcc = GcloudContextV2.new(op)\n   op.parse.validate\n   gcc.validate\n+\n+  if op.opts.db_user.nil?\n+    op.opts.db_user = \"dev-readonly\"\n+  end\n+\n   env = read_db_vars(gcc)\n+  db_password = nil\n+  case op.opts.db_user", "originalCommit": "e51ab0668aad88f6b817e3845c8c0f6d363fd17e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2NzI0NQ==", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421867245", "bodyText": "done", "author": "calbach", "createdAt": "2020-05-08T00:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MzA0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MzQwNQ==", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421473405", "bodyText": "nit: might want the ability to override this port from a citizenship standpoint", "author": "jaycarlton", "createdAt": "2020-05-07T12:43:18Z", "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2020,20 +2022,36 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(\n-    \"--root\",\n-    ->(opts, _) { opts.root = true },\n-    \"Connect as root\")\n+    \"--db-user [user]\",\n+    ->(opts, v) { opts.db_user = v },\n+    \"Optional database user to connect as, defaults to 'dev-readonly'\")\n   gcc = GcloudContextV2.new(op)\n   op.parse.validate\n   gcc.validate\n+\n+  if op.opts.db_user.nil?\n+    op.opts.db_user = \"dev-readonly\"\n+  end\n+\n   env = read_db_vars(gcc)\n+  db_password = nil\n+  case op.opts.db_user\n+  when \"dev-readonly\"\n+    db_password = env[\"DEV_READONLY_DB_PASSWORD\"]\n+  when \"workbench\"\n+    db_password = env[\"WORKBENCH_DB_PASSWORD\"]\n+  when \"root\"\n+    db_password = env[\"MYSQL_ROOT_PASSWORD\"]\n+  else\n+    raise ArgumentError.new(\n+            \"invalid --db-user provided, wanted 'workbench', 'dev-readonly', or 'root', got '#{op.opts.db_user}'\")\n+  end\n+\n   CloudSqlProxyContext.new(gcc.project).run do\n-    password = op.opts.root ? env[\"MYSQL_ROOT_PASSWORD\"] : env[\"WORKBENCH_DB_PASSWORD\"]\n-    user = op.opts.root ? \"root\" : env[\"WORKBENCH_DB_USER\"]\n     common.run_inline %W{\n-      mysql --host=127.0.0.1 --port=3307 --user=#{user}\n-      --database=#{env[\"DB_NAME\"]} --password=#{password}},\n-      password\n+      mysql --host=127.0.0.1 --port=3307 --user=#{op.opts.db_user}", "originalCommit": "e51ab0668aad88f6b817e3845c8c0f6d363fd17e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3MjgyNQ==", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421872825", "bodyText": "Probably. I can send a follow-up PR - it's not related to this change", "author": "calbach", "createdAt": "2020-05-08T00:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MzQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3NDU3Mg==", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421474572", "bodyText": "Please break this into three assignments, one on each line, or make a method that outputs an array of random passwords so it's like root_password, workbench_password, readonly_password = *random_passwords(3). I stared at it for a good minute before I realized it was a multi-assignment.", "author": "jaycarlton", "createdAt": "2020-05-07T12:45:10Z", "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2490,12 +2508,12 @@ def create_project_resources(gcc)\n end\n \n def setup_project_data(gcc, cdr_db_name)\n-  root_password, workbench_password = random_password(), random_password()\n+  root_password, workbench_password, readonly_password = random_password(), random_password(), random_password()", "originalCommit": "e51ab0668aad88f6b817e3845c8c0f6d363fd17e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2NzIxOA==", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421867218", "bodyText": "sure", "author": "calbach", "createdAt": "2020-05-08T00:21:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3NDU3Mg=="}], "type": "inlineReview"}, {"oid": "96d7e013507b7c2dfeeabf8b1dbc11c4666d357b", "url": "https://github.com/all-of-us/workbench/commit/96d7e013507b7c2dfeeabf8b1dbc11c4666d357b", "message": "Add readonly user and support specifying a DB user for CLI access", "committedDate": "2020-05-09T00:03:43Z", "type": "commit"}, {"oid": "183682f3b3559c278bc39f04bead4a7d6309d647", "url": "https://github.com/all-of-us/workbench/commit/183682f3b3559c278bc39f04bead4a7d6309d647", "message": "PR feedback", "committedDate": "2020-05-09T00:03:43Z", "type": "commit"}, {"oid": "4d8955da64e62b2d12e04526af62cbc018e6bce5", "url": "https://github.com/all-of-us/workbench/commit/4d8955da64e62b2d12e04526af62cbc018e6bce5", "message": "grant all", "committedDate": "2020-05-09T00:03:43Z", "type": "commit"}, {"oid": "f4e601ce19f27af14fb915f839d338b2857c22b3", "url": "https://github.com/all-of-us/workbench/commit/f4e601ce19f27af14fb915f839d338b2857c22b3", "message": "revert DB CLI changes", "committedDate": "2020-05-09T00:09:57Z", "type": "commit"}, {"oid": "f4e601ce19f27af14fb915f839d338b2857c22b3", "url": "https://github.com/all-of-us/workbench/commit/f4e601ce19f27af14fb915f839d338b2857c22b3", "message": "revert DB CLI changes", "committedDate": "2020-05-09T00:09:57Z", "type": "forcePushed"}]}