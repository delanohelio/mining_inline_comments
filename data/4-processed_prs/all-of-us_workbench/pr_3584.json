{"pr_number": 3584, "pr_title": "[no ticket][risk=no] Implementing BQ integration tests for DataSet Builder", "pr_createdAt": "2020-05-14T18:29:41Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3584", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzNTYzNA==", "url": "https://github.com/all-of-us/workbench/pull/3584#discussion_r433235634", "bodyText": "should we check for assert for Comments like in previous test like \"\\n# This query represents dataset ...\"", "author": "NehaBroad", "createdAt": "2020-06-01T13:32:54Z", "path": "api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java", "diffHunk": "@@ -0,0 +1,504 @@\n+package org.pmiops.workbench.api;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.gson.Gson;\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.inject.Provider;\n+import org.bitbucket.radistao.test.runner.BeforeAfterSpringTestRunner;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.billing.FreeTierBillingService;\n+import org.pmiops.workbench.cdr.ConceptBigQueryService;\n+import org.pmiops.workbench.cohortbuilder.CohortQueryBuilder;\n+import org.pmiops.workbench.cohorts.CohortCloningService;\n+import org.pmiops.workbench.concept.ConceptService;\n+import org.pmiops.workbench.conceptset.ConceptSetMapper;\n+import org.pmiops.workbench.conceptset.ConceptSetMapperImpl;\n+import org.pmiops.workbench.conceptset.ConceptSetService;\n+import org.pmiops.workbench.config.CdrBigQuerySchemaConfigService;\n+import org.pmiops.workbench.dataset.DataSetMapper;\n+import org.pmiops.workbench.dataset.DataSetMapperImpl;\n+import org.pmiops.workbench.db.dao.CdrVersionDao;\n+import org.pmiops.workbench.db.dao.CohortDao;\n+import org.pmiops.workbench.db.dao.ConceptSetDao;\n+import org.pmiops.workbench.db.dao.DataDictionaryEntryDao;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.dao.DataSetService;\n+import org.pmiops.workbench.db.dao.DataSetServiceImpl;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbCdrVersion;\n+import org.pmiops.workbench.db.model.DbCohort;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceResponse;\n+import org.pmiops.workbench.model.ArchivalStatus;\n+import org.pmiops.workbench.model.DataAccessLevel;\n+import org.pmiops.workbench.model.DataSetRequest;\n+import org.pmiops.workbench.model.Domain;\n+import org.pmiops.workbench.model.DomainValuePair;\n+import org.pmiops.workbench.model.KernelTypeEnum;\n+import org.pmiops.workbench.model.PrePackagedConceptSetEnum;\n+import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.pmiops.workbench.notebooks.NotebooksService;\n+import org.pmiops.workbench.notebooks.NotebooksServiceImpl;\n+import org.pmiops.workbench.test.FakeClock;\n+import org.pmiops.workbench.test.SearchRequests;\n+import org.pmiops.workbench.test.TestBigQueryCdrSchemaConfig;\n+import org.pmiops.workbench.testconfig.TestJpaConfig;\n+import org.pmiops.workbench.testconfig.TestWorkbenchConfig;\n+import org.pmiops.workbench.utils.WorkspaceMapperImpl;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.pmiops.workbench.workspaces.WorkspaceServiceImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+\n+@RunWith(BeforeAfterSpringTestRunner.class)\n+@Import({TestJpaConfig.class})\n+public class DataSetControllerBQTest extends BigQueryBaseTest {\n+\n+  private static final FakeClock CLOCK = new FakeClock(Instant.now(), ZoneId.systemDefault());\n+  private static final String WORKSPACE_NAMESPACE = \"namespace\";\n+  private static final String WORKSPACE_NAME = \"name\";\n+\n+  private DataSetController controller;\n+  @Autowired private BigQueryService bigQueryService;\n+  @Autowired private CdrVersionDao cdrVersionDao;\n+  @Autowired private CohortDao cohortDao;\n+  @Autowired private ConceptService conceptService;\n+  @Autowired private ConceptSetDao conceptSetDao;\n+  @Autowired private ConceptSetMapper conceptSetMapper;\n+  @Autowired private DataDictionaryEntryDao dataDictionaryEntryDao;\n+  @Autowired private DataSetDao dataSetDao;\n+  @Autowired private DataSetMapper dataSetMapper;\n+  @Autowired private DataSetService dataSetService;\n+  @Autowired private FireCloudService fireCloudService;\n+  @Autowired private NotebooksService notebooksService;\n+  @Autowired private TestWorkbenchConfig testWorkbenchConfig;\n+  @Autowired private Provider<DbUser> userProvider;\n+  @Autowired private WorkspaceDao workspaceDao;\n+  @Autowired private WorkspaceService workspaceService;\n+\n+  private DbCdrVersion dbCdrVersion;\n+  private DbCohort dbCohort1;\n+  private DbCohort dbCohort2;\n+  private DbConceptSet dbConditionConceptSet;\n+  private DbConceptSet dbProcedureConceptSet;\n+  private DbWorkspace dbWorkspace;\n+\n+  @TestConfiguration\n+  @Import({\n+    BigQueryTestService.class,\n+    CdrBigQuerySchemaConfigService.class,\n+    CohortQueryBuilder.class,\n+    ConceptBigQueryService.class,\n+    DataSetServiceImpl.class,\n+    TestBigQueryCdrSchemaConfig.class,\n+    WorkspaceServiceImpl.class\n+  })\n+  @MockBean({\n+    CohortCloningService.class,\n+    ConceptService.class,\n+    ConceptSetMapperImpl.class,\n+    ConceptSetService.class,\n+    DataSetMapperImpl.class,\n+    FireCloudServiceImpl.class,\n+    FreeTierBillingService.class,\n+    NotebooksServiceImpl.class,\n+    Provider.class,\n+    WorkspaceMapperImpl.class\n+  })\n+  static class Configuration {\n+    @Bean\n+    public Clock clock() {\n+      return CLOCK;\n+    }\n+  }\n+\n+  @Override\n+  public List<String> getTableNames() {\n+    return ImmutableList.of(\n+        \"condition_occurrence\",\n+        \"procedure_occurrence\",\n+        \"concept\",\n+        \"cb_search_person\",\n+        \"cb_search_all_events\",\n+        \"cb_criteria\",\n+        \"ds_linking\",\n+        \"ds_survey\",\n+        \"person\");\n+  }\n+\n+  @Override\n+  public String getTestDataDirectory() {\n+    return CB_DATA;\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    controller =\n+        spy(\n+            new DataSetController(\n+                bigQueryService,\n+                CLOCK,\n+                cdrVersionDao,\n+                cohortDao,\n+                conceptService,\n+                conceptSetDao,\n+                dataDictionaryEntryDao,\n+                dataSetDao,\n+                dataSetMapper,\n+                dataSetService,\n+                fireCloudService,\n+                notebooksService,\n+                userProvider,\n+                workspaceService,\n+                conceptSetMapper));\n+\n+    FirecloudWorkspaceResponse fcResponse = new FirecloudWorkspaceResponse();\n+    fcResponse.setAccessLevel(WorkspaceAccessLevel.OWNER.name());\n+    when(fireCloudService.getWorkspace(WORKSPACE_NAMESPACE, WORKSPACE_NAME))\n+        .thenReturn(fcResponse)\n+        .thenReturn(fcResponse);\n+\n+    dbCdrVersion = new DbCdrVersion();\n+    dbCdrVersion.setBigqueryDataset(testWorkbenchConfig.bigquery.dataSetId);\n+    dbCdrVersion.setBigqueryProject(testWorkbenchConfig.bigquery.projectId);\n+    dbCdrVersion.setDataAccessLevel(\n+        DbStorageEnums.dataAccessLevelToStorage(DataAccessLevel.REGISTERED));\n+    dbCdrVersion.setArchivalStatus(DbStorageEnums.archivalStatusToStorage(ArchivalStatus.LIVE));\n+    dbCdrVersion = cdrVersionDao.save(dbCdrVersion);\n+\n+    dbWorkspace = new DbWorkspace();\n+    dbWorkspace.setWorkspaceNamespace(WORKSPACE_NAMESPACE);\n+    dbWorkspace.setFirecloudName(WORKSPACE_NAME);\n+    dbWorkspace.setCdrVersion(dbCdrVersion);\n+    dbWorkspace = workspaceDao.save(dbWorkspace);\n+\n+    dbConditionConceptSet =\n+        conceptSetDao.save(\n+            DbConceptSet.builder()\n+                .addDomain(DbStorageEnums.domainToStorage(Domain.CONDITION))\n+                .addConceptIds(new HashSet<>(Collections.singletonList(1L)))\n+                .addWorkspaceId(dbWorkspace.getWorkspaceId())\n+                .build());\n+    dbProcedureConceptSet =\n+        conceptSetDao.save(\n+            DbConceptSet.builder()\n+                .addDomain(DbStorageEnums.domainToStorage(Domain.PROCEDURE))\n+                .addConceptIds(new HashSet<>(Collections.singletonList(1L)))\n+                .addWorkspaceId(dbWorkspace.getWorkspaceId())\n+                .build());\n+\n+    dbCohort1 = new DbCohort();\n+    dbCohort1.setWorkspaceId(dbWorkspace.getWorkspaceId());\n+    dbCohort1.setCriteria(new Gson().toJson(SearchRequests.icd9CodeWithModifiers()));\n+    dbCohort1 = cohortDao.save(dbCohort1);\n+\n+    dbCohort2 = new DbCohort();\n+    dbCohort2.setWorkspaceId(dbWorkspace.getWorkspaceId());\n+    dbCohort2.setCriteria(new Gson().toJson(SearchRequests.icd9Codes()));\n+    dbCohort2 = cohortDao.save(dbCohort2);\n+\n+    when(controller.generateRandomEightCharacterQualifier()).thenReturn(\"00000000\");\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    cohortDao.delete(dbCohort1.getCohortId());\n+    cohortDao.delete(dbCohort2.getCohortId());\n+    conceptSetDao.delete(dbConditionConceptSet.getConceptSetId());\n+    conceptSetDao.delete(dbProcedureConceptSet.getConceptSetId());\n+    workspaceDao.delete(dbWorkspace.getWorkspaceId());\n+    cdrVersionDao.delete(dbCdrVersion.getCdrVersionId());\n+  }\n+\n+  @Test\n+  public void testGenerateCodePython() {\n+    String code =\n+        controller\n+            .generateCode(\n+                WORKSPACE_NAMESPACE,\n+                WORKSPACE_NAME,\n+                KernelTypeEnum.PYTHON.toString(),\n+                createDataSetRequest(\n+                    Arrays.asList(dbConditionConceptSet),\n+                    Arrays.asList(dbCohort1),\n+                    Arrays.asList(Domain.CONDITION),\n+                    false,\n+                    PrePackagedConceptSetEnum.NONE))\n+            .getBody()\n+            .getCode();\n+    assertThat(code)\n+        .contains(\n+            \"import pandas\\n\"\n+                + \"import os\\n\"\n+                + \"\\n\"\n+                + \"# This query represents dataset \\\"null\\\" for domain \\\"condition\\\"\\n\"\n+                + \"dataset_00000000_condition_sql =\");\n+\n+    String query = extractPythonQuery(code, 1);\n+\n+    try {\n+      TableResult result =\n+          bigQueryService.executeQuery(\n+              QueryJobConfiguration.newBuilder(query).setUseLegacySql(false).build());\n+      assertThat(result.getTotalRows()).isEqualTo(1L);\n+    } catch (Exception e) {\n+      fail(\"Problem generating BigQuery query for notebooks: \" + e.getCause().getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void testGenerateCodeR() {\n+    String code =\n+        controller\n+            .generateCode(\n+                WORKSPACE_NAMESPACE,\n+                WORKSPACE_NAME,\n+                KernelTypeEnum.R.toString(),\n+                createDataSetRequest(\n+                    Arrays.asList(dbConditionConceptSet),\n+                    Arrays.asList(dbCohort1),\n+                    Arrays.asList(Domain.CONDITION),\n+                    false,\n+                    PrePackagedConceptSetEnum.NONE))\n+            .getBody()\n+            .getCode();\n+\n+    assertThat(code)\n+        .contains(\n+            \"library(bigrquery)\\n\"\n+                + \"\\n# This query represents dataset \\\"null\\\" for domain \\\"condition\\\"\\n\"\n+                + \"dataset_00000000_condition_sql <- paste(\\\"\");\n+    String query = extractRQuery(code);\n+\n+    try {\n+      TableResult result =\n+          bigQueryService.executeQuery(\n+              QueryJobConfiguration.newBuilder(query).setUseLegacySql(false).build());\n+      assertThat(result.getTotalRows()).isEqualTo(1L);\n+    } catch (Exception e) {\n+      fail(\"Problem generating BigQuery query for notebooks: \" + e.getCause().getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void testGenerateCodeTwoConceptSets() {\n+    String code =\n+        controller\n+            .generateCode(\n+                WORKSPACE_NAMESPACE,\n+                WORKSPACE_NAME,\n+                KernelTypeEnum.PYTHON.toString(),\n+                createDataSetRequest(\n+                    Arrays.asList(dbConditionConceptSet, dbProcedureConceptSet),\n+                    Arrays.asList(dbCohort1),\n+                    Arrays.asList(Domain.CONDITION, Domain.PROCEDURE),\n+                    false,\n+                    PrePackagedConceptSetEnum.NONE))\n+            .getBody()\n+            .getCode();\n+\n+    String query = extractPythonQuery(code, 1);", "originalCommit": "7a8109972a8f30f028b75c860f3d99d4a6dafeee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MjUzMA==", "url": "https://github.com/all-of-us/workbench/pull/3584#discussion_r433282530", "bodyText": "Thanks for catching this. I extracted a private method that each test calls to capture the same asserts for all.", "author": "freemabd", "createdAt": "2020-06-01T14:53:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzNTYzNA=="}], "type": "inlineReview"}, {"oid": "cce0dbda868d808eda403ee8044dba9822181774", "url": "https://github.com/all-of-us/workbench/commit/cce0dbda868d808eda403ee8044dba9822181774", "message": "adding BQ test", "committedDate": "2020-06-03T14:48:33Z", "type": "commit"}, {"oid": "21cf61dd3d3d6675de0d7d9e99489d9cba512201", "url": "https://github.com/all-of-us/workbench/commit/21cf61dd3d3d6675de0d7d9e99489d9cba512201", "message": "adding data files", "committedDate": "2020-06-03T14:48:33Z", "type": "commit"}, {"oid": "f898e7738b9e0f5268d7603891355789d7380fd0", "url": "https://github.com/all-of-us/workbench/commit/f898e7738b9e0f5268d7603891355789d7380fd0", "message": "adding test", "committedDate": "2020-06-03T14:48:33Z", "type": "commit"}, {"oid": "b55909e6bbe07971ac633649189535888baa2b6a", "url": "https://github.com/all-of-us/workbench/commit/b55909e6bbe07971ac633649189535888baa2b6a", "message": "updating BQ test", "committedDate": "2020-06-03T14:48:33Z", "type": "commit"}, {"oid": "f6219d8c600a4c5615953fcef9a7830622c92117", "url": "https://github.com/all-of-us/workbench/commit/f6219d8c600a4c5615953fcef9a7830622c92117", "message": "moved import of comtroller to class level", "committedDate": "2020-06-03T14:48:33Z", "type": "commit"}, {"oid": "739149238696056f63bfd8121a9b62e8705dd121", "url": "https://github.com/all-of-us/workbench/commit/739149238696056f63bfd8121a9b62e8705dd121", "message": "moved import of comtroller to class level", "committedDate": "2020-06-03T14:48:33Z", "type": "commit"}, {"oid": "c33c1eb61b61c0ca55c22889fff7618a0f14895a", "url": "https://github.com/all-of-us/workbench/commit/c33c1eb61b61c0ca55c22889fff7618a0f14895a", "message": "updating tests.", "committedDate": "2020-06-03T14:48:33Z", "type": "commit"}, {"oid": "c33c1eb61b61c0ca55c22889fff7618a0f14895a", "url": "https://github.com/all-of-us/workbench/commit/c33c1eb61b61c0ca55c22889fff7618a0f14895a", "message": "updating tests.", "committedDate": "2020-06-03T14:48:33Z", "type": "forcePushed"}]}