{"pr_number": 3169, "pr_title": "[RW-4417][risk=no] Puppeteer test: new user registration", "pr_createdAt": "2020-02-20T21:48:43Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3169", "timeline": [{"oid": "22b3562c109ff1f46f648c879acb2809e7a5348d", "url": "https://github.com/all-of-us/workbench/commit/22b3562c109ff1f46f648c879acb2809e7a5348d", "message": "save work", "committedDate": "2020-02-19T15:37:26Z", "type": "commit"}, {"oid": "a5f2d6b0fddc4cbe6e68a131e0af8e3ede66a32e", "url": "https://github.com/all-of-us/workbench/commit/a5f2d6b0fddc4cbe6e68a131e0af8e3ede66a32e", "message": "work in progress", "committedDate": "2020-02-20T03:14:13Z", "type": "commit"}, {"oid": "8c3de9f3cc6c49aa744c4bb9071bca821acc6954", "url": "https://github.com/all-of-us/workbench/commit/8c3de9f3cc6c49aa744c4bb9071bca821acc6954", "message": "created new user registration test", "committedDate": "2020-02-20T21:46:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4ODI1MA==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382288250", "bodyText": "print out new account message.", "author": "aweng98", "createdAt": "2020-02-20T22:14:51Z", "path": "e2e/tests/user/registration.spec.ts", "diffHunk": "@@ -0,0 +1,122 @@\n+import {ElementHandle} from 'puppeteer';\n+import CreateAccountPage from '../../app/create-account-page';\n+import GoogleLoginPage from '../../app/google-login';\n+import PuppeteerLaunch from '../../services/puppeteer-launch';\n+require('../../driver/waitFuncs');\n+require('../../driver/puppeteerExtension');\n+import {waitForText, waitUntilFindTexts} from '../../driver/waitFuncs';\n+\n+jest.setTimeout(60 * 1000);\n+\n+const configs = require('../../resources/config');\n+\n+describe('User registration tests:', () => {\n+\n+  let browser;\n+  let incognitoContext;\n+  let page;\n+\n+  beforeAll(async () => {\n+    browser = await PuppeteerLaunch();\n+  });\n+\n+  beforeEach(async () => {\n+    incognitoContext = await browser.createIncognitoBrowserContext();\n+    page = await incognitoContext.newPage();\n+    await page.setUserAgent(configs.puppeteerUserAgent);\n+    await page.setDefaultNavigationTimeout(60000);\n+  });\n+\n+  afterEach(async () => {\n+    await incognitoContext.close();\n+  });\n+\n+  afterAll(async () => {\n+    await browser.close();\n+  });\n+\n+\n+  test('Can register new user', async () => {\n+    // Load the landing page for login.\n+    const url = configs.uiBaseUrl + configs.workspacesUrlPath;\n+    const loginPage = new GoogleLoginPage(page);\n+\n+    await loginPage.goto();\n+\n+    // Click the create account button to start new-user-registration flow.\n+    const createAccountButton = await loginPage.createAccountButton();\n+    expect(createAccountButton).toBeTruthy();\n+    await createAccountButton.click();\n+\n+    // Step 1: Enter invitation key.\n+    const createAccountPage = new CreateAccountPage(page);\n+    const header = 'Enter your Invitation Key:';\n+    const headerDisplayed = await waitForText(page, 'h2', header);\n+    expect(headerDisplayed).toBeTruthy();\n+\n+    await createAccountPage.fillOutInvitationKey();\n+    await page.waitFor(1000);\n+\n+    // Step 2: Accepting Terms of Service.\n+    const pdfPageCount =  await page.waitForFunction(() => {\n+      return document.querySelectorAll('.tos-pdf-page[data-page-number]').length === 9\n+    }, {timeout: 30000});\n+    // expecting 9 pages in pdf document\n+    expect(await pdfPageCount.jsonValue()).toBe(true);\n+\n+    await createAccountPage.acceptTermsOfUseAgreement();\n+    let nextButton = await createAccountPage.getNextButton();\n+    await nextButton.click();\n+    await page.waitFor(1000);\n+\n+    // Step 3: Enter user information\n+    // Should be on Create your account: Step 1 of 2 page\n+    expect(await waitUntilFindTexts(page, 'Create your account')).toBeTruthy();\n+    await createAccountPage.fillOutUserInformation();\n+    nextButton = await createAccountPage.getNextButton();\n+    await nextButton.click();\n+    await page.waitFor(1000);\n+\n+    // Step 4: Enter demographic survey (All Survey Fields are optional)\n+    // Should be on Demongraphic Survey page\n+    const demograpicsPageHeader = 'Demographics Survey (All Survey Fields are optional)';\n+    expect(await waitForText(page, 'h3', demograpicsPageHeader)).toBeTruthy();\n+    await createAccountPage.fillOutDemographicSurvey();\n+    const submitButton = await createAccountPage.getSubmitButton();\n+    await submitButton.click();\n+    await page.waitFor(1000);\n+\n+    // Step 5: New account created successfully page.\n+    const congratHeader = 'Congratulations!';\n+    await page.waitForSelector('h1', { visible: true });\n+\n+    const h4List = [];\n+    const h4Headers: ElementHandle[] = await page.$$('h4');\n+    for (const h4Header of h4Headers) {\n+      const txt = await (await h4Header.getProperty('innerText')).jsonValue();\n+      h4List.push(txt);\n+    }\n+    const expectedH4Headers = [\n+      'Your All of Us research account has been created!',\n+      'Check your contact email for instructions on getting started.',\n+      `Your contact email is: ${process.env.CONTACT_EMAIL}`\n+    ];\n+    expect(h4List).toEqual(expectedH4Headers);\n+\n+    const resendButton = await page.waitForXPath('//button[.=\"Resend Instructions\"]');\n+    expect(resendButton).toBeTruthy();\n+\n+    const changeEmailButton = await page.waitForXPath('//button[.=\"Change contact email\"]');\n+    expect(changeEmailButton).toBeTruthy();\n+\n+    const h3List = [];\n+    const h3Headers: ElementHandle[] = await page.$$('h3');\n+    for (const h3Header of h3Headers) {\n+      const txt = await (await h3Header.getProperty('innerText')).jsonValue();\n+      h3List.push(txt);\n+    }\n+    console.log(h3List);", "originalCommit": "8c3de9f3cc6c49aa744c4bb9071bca821acc6954", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzNTc3MQ==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382835771", "bodyText": "prefix aoutestuser is used to allow easy finding to delete in gsuite in future.", "author": "aweng98", "createdAt": "2020-02-21T22:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4ODI1MA=="}], "type": "inlineReview"}, {"oid": "d2dc03939a9069dbd313bdd0e598d01ddf6288bb", "url": "https://github.com/all-of-us/workbench/commit/d2dc03939a9069dbd313bdd0e598d01ddf6288bb", "message": "move user-registration-fields.js out of tests/ dir", "committedDate": "2020-02-20T22:18:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwNDI5OA==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382604298", "bodyText": "[non-opt nit] remove commented-out lines", "author": "gjuggler", "createdAt": "2020-02-21T14:18:03Z", "path": "e2e/app/create-account-page.ts", "diffHunk": "@@ -0,0 +1,226 @@\n+import {ElementHandle} from 'puppeteer';\n+import {getCursorValue} from '../driver/elementHandle-util';\n+import {inputFieldsValues, institutionAffiliationValues} from '../resources/user-registration-fields';\n+import * as widgetXpath from './elements/widgetxpath';\n+import BasePage from './mixin/basepage';\n+import DropdownSelect from './mixin/dropdown-list-select';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export default class CreateAccountPage extends BasePage {\n+  public async getInvitationKeyInput(): Promise<ElementHandle> {\n+    return await this.puppeteerPage.waitForSelector('#invitationKey');\n+  }\n+\n+  public async getSubmitButton(): Promise<ElementHandle> {\n+    const xpath = widgetXpath.button('Submit');\n+    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  }\n+\n+  public async getNextButton(): Promise<ElementHandle> {\n+    const xpath = widgetXpath.button('Next');\n+    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  }\n+\n+  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selectr = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.puppeteerPage.waitForSelector('.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page');\n+    /*", "originalCommit": "d2dc03939a9069dbd313bdd0e598d01ddf6288bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwMTU0Nw==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382701547", "bodyText": "Done.", "author": "aweng98", "createdAt": "2020-02-21T17:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwNDI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwNTg0Mw==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382605843", "bodyText": "[opt, potential follow-up] Have you considered using the e2e/app/elements/checkbox component to control how we interact with these checkboxes?\nOn the code side, Checkbox is a core component in our system and is used very widely. If we create a test component which knows how to find & interact with checkboxes created by that component, it would likely save some repetition.", "author": "gjuggler", "createdAt": "2020-02-21T14:21:09Z", "path": "e2e/app/create-account-page.ts", "diffHunk": "@@ -0,0 +1,226 @@\n+import {ElementHandle} from 'puppeteer';\n+import {getCursorValue} from '../driver/elementHandle-util';\n+import {inputFieldsValues, institutionAffiliationValues} from '../resources/user-registration-fields';\n+import * as widgetXpath from './elements/widgetxpath';\n+import BasePage from './mixin/basepage';\n+import DropdownSelect from './mixin/dropdown-list-select';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export default class CreateAccountPage extends BasePage {\n+  public async getInvitationKeyInput(): Promise<ElementHandle> {\n+    return await this.puppeteerPage.waitForSelector('#invitationKey');\n+  }\n+\n+  public async getSubmitButton(): Promise<ElementHandle> {\n+    const xpath = widgetXpath.button('Submit');\n+    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  }\n+\n+  public async getNextButton(): Promise<ElementHandle> {\n+    const xpath = widgetXpath.button('Next');\n+    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  }\n+\n+  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selectr = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.puppeteerPage.waitForSelector('.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page');\n+    /*\n+    const [response] = await Promise.all([\n+       this.puppeteerPage.waitForNavigation({waitUntil: 'domcontentloaded'}),\n+       this.puppeteerPage.click(selectr, {delay: 20}),\n+     ]); */\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  // find the second checkbox. it should be for the privacy statement\n+  public async getPrivacyStatementCheckbox(): Promise<ElementHandle> {", "originalCommit": "d2dc03939a9069dbd313bdd0e598d01ddf6288bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzMTQ2Nw==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382831467", "bodyText": "yes yes. it will be part of code refactoring that I am longing for. change will be in a new PR in future.", "author": "aweng98", "createdAt": "2020-02-21T22:14:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwNTg0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwNjA4NA==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382606084", "bodyText": "[non-opt nit] s/term/terms/ for consistency with wording in the app.", "author": "gjuggler", "createdAt": "2020-02-21T14:21:35Z", "path": "e2e/app/create-account-page.ts", "diffHunk": "@@ -0,0 +1,226 @@\n+import {ElementHandle} from 'puppeteer';\n+import {getCursorValue} from '../driver/elementHandle-util';\n+import {inputFieldsValues, institutionAffiliationValues} from '../resources/user-registration-fields';\n+import * as widgetXpath from './elements/widgetxpath';\n+import BasePage from './mixin/basepage';\n+import DropdownSelect from './mixin/dropdown-list-select';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export default class CreateAccountPage extends BasePage {\n+  public async getInvitationKeyInput(): Promise<ElementHandle> {\n+    return await this.puppeteerPage.waitForSelector('#invitationKey');\n+  }\n+\n+  public async getSubmitButton(): Promise<ElementHandle> {\n+    const xpath = widgetXpath.button('Submit');\n+    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  }\n+\n+  public async getNextButton(): Promise<ElementHandle> {\n+    const xpath = widgetXpath.button('Next');\n+    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  }\n+\n+  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selectr = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.puppeteerPage.waitForSelector('.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page');\n+    /*\n+    const [response] = await Promise.all([\n+       this.puppeteerPage.waitForNavigation({waitUntil: 'domcontentloaded'}),\n+       this.puppeteerPage.click(selectr, {delay: 20}),\n+     ]); */\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  // find the second checkbox. it should be for the privacy statement\n+  public async getPrivacyStatementCheckbox(): Promise<ElementHandle> {\n+    const label = 'I have read and understand the All of Us Research Program Privacy Statement.';\n+    const selector = '[type=\"checkbox\"]';\n+    const element = await this.puppeteerPage.waitForSelector(selector, {visible: true});\n+    return element;\n+  }\n+\n+  public async getPrivacyStatementLabel(): Promise<ElementHandle> {\n+    const label = 'I have read and understand the All of Us Research Program Privacy Statement.';\n+    return this.getCheckboxLabel(label);\n+  }\n+\n+  // find the second checkbox\n+  public async getTermOfUseCheckbox(): Promise<ElementHandle> {", "originalCommit": "d2dc03939a9069dbd313bdd0e598d01ddf6288bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwMjU2Ng==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382702566", "bodyText": "Done", "author": "aweng98", "createdAt": "2020-02-21T17:12:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwNjA4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwNjc3MQ==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382606771", "bodyText": "[non-opt] This feels extremely brittle -- if we change the wording at all, then this test will break. That isn't a good plan for maintainability. At the very least, can you match by a regexp or substring instead?", "author": "gjuggler", "createdAt": "2020-02-21T14:22:52Z", "path": "e2e/app/create-account-page.ts", "diffHunk": "@@ -0,0 +1,226 @@\n+import {ElementHandle} from 'puppeteer';\n+import {getCursorValue} from '../driver/elementHandle-util';\n+import {inputFieldsValues, institutionAffiliationValues} from '../resources/user-registration-fields';\n+import * as widgetXpath from './elements/widgetxpath';\n+import BasePage from './mixin/basepage';\n+import DropdownSelect from './mixin/dropdown-list-select';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export default class CreateAccountPage extends BasePage {\n+  public async getInvitationKeyInput(): Promise<ElementHandle> {\n+    return await this.puppeteerPage.waitForSelector('#invitationKey');\n+  }\n+\n+  public async getSubmitButton(): Promise<ElementHandle> {\n+    const xpath = widgetXpath.button('Submit');\n+    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  }\n+\n+  public async getNextButton(): Promise<ElementHandle> {\n+    const xpath = widgetXpath.button('Next');\n+    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  }\n+\n+  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selectr = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.puppeteerPage.waitForSelector('.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page');\n+    /*\n+    const [response] = await Promise.all([\n+       this.puppeteerPage.waitForNavigation({waitUntil: 'domcontentloaded'}),\n+       this.puppeteerPage.click(selectr, {delay: 20}),\n+     ]); */\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  // find the second checkbox. it should be for the privacy statement\n+  public async getPrivacyStatementCheckbox(): Promise<ElementHandle> {\n+    const label = 'I have read and understand the All of Us Research Program Privacy Statement.';\n+    const selector = '[type=\"checkbox\"]';\n+    const element = await this.puppeteerPage.waitForSelector(selector, {visible: true});\n+    return element;\n+  }\n+\n+  public async getPrivacyStatementLabel(): Promise<ElementHandle> {\n+    const label = 'I have read and understand the All of Us Research Program Privacy Statement.';\n+    return this.getCheckboxLabel(label);\n+  }\n+\n+  // find the second checkbox\n+  public async getTermOfUseCheckbox(): Promise<ElementHandle> {\n+    const label = 'I have read and understand the All of Us Research Program Terms of Use described above.';\n+    const selector = '[type=\"checkbox\"]';\n+    const element = await this.puppeteerPage.waitForSelector(selector, {visible: true});\n+    return element;\n+  }\n+\n+  public async getTermOfUseLabel(): Promise<ElementHandle> {\n+    const label = 'I have read and understand the All of Us Research Program Terms of Use described above.';", "originalCommit": "d2dc03939a9069dbd313bdd0e598d01ddf6288bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwMzkyOA==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382703928", "bodyText": "I'm open to change. My original thoughts were make string match exact. If it is changed, failure will force a person to manually inspect, update and verify new string. Exact string is also good to catch any issue in UI with displaying or rendering.", "author": "aweng98", "createdAt": "2020-02-21T17:15:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwNjc3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwNjkxOA==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382606918", "bodyText": "Cool!", "author": "gjuggler", "createdAt": "2020-02-21T14:23:10Z", "path": "e2e/app/create-account-page.ts", "diffHunk": "@@ -0,0 +1,226 @@\n+import {ElementHandle} from 'puppeteer';\n+import {getCursorValue} from '../driver/elementHandle-util';\n+import {inputFieldsValues, institutionAffiliationValues} from '../resources/user-registration-fields';\n+import * as widgetXpath from './elements/widgetxpath';\n+import BasePage from './mixin/basepage';\n+import DropdownSelect from './mixin/dropdown-list-select';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export default class CreateAccountPage extends BasePage {\n+  public async getInvitationKeyInput(): Promise<ElementHandle> {\n+    return await this.puppeteerPage.waitForSelector('#invitationKey');\n+  }\n+\n+  public async getSubmitButton(): Promise<ElementHandle> {\n+    const xpath = widgetXpath.button('Submit');\n+    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  }\n+\n+  public async getNextButton(): Promise<ElementHandle> {\n+    const xpath = widgetXpath.button('Next');\n+    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  }\n+\n+  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selectr = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.puppeteerPage.waitForSelector('.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page');\n+    /*\n+    const [response] = await Promise.all([\n+       this.puppeteerPage.waitForNavigation({waitUntil: 'domcontentloaded'}),\n+       this.puppeteerPage.click(selectr, {delay: 20}),\n+     ]); */\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  // find the second checkbox. it should be for the privacy statement\n+  public async getPrivacyStatementCheckbox(): Promise<ElementHandle> {\n+    const label = 'I have read and understand the All of Us Research Program Privacy Statement.';\n+    const selector = '[type=\"checkbox\"]';\n+    const element = await this.puppeteerPage.waitForSelector(selector, {visible: true});\n+    return element;\n+  }\n+\n+  public async getPrivacyStatementLabel(): Promise<ElementHandle> {\n+    const label = 'I have read and understand the All of Us Research Program Privacy Statement.';\n+    return this.getCheckboxLabel(label);\n+  }\n+\n+  // find the second checkbox\n+  public async getTermOfUseCheckbox(): Promise<ElementHandle> {\n+    const label = 'I have read and understand the All of Us Research Program Terms of Use described above.';\n+    const selector = '[type=\"checkbox\"]';\n+    const element = await this.puppeteerPage.waitForSelector(selector, {visible: true});\n+    return element;\n+  }\n+\n+  public async getTermOfUseLabel(): Promise<ElementHandle> {\n+    const label = 'I have read and understand the All of Us Research Program Terms of Use described above.';\n+    return this.getCheckboxLabel(label);\n+  }\n+\n+  // find checkbox label by matching label\n+  public async getCheckboxLabel(checkboxLabel: string): Promise<ElementHandle> {\n+    const selector = '[type=\"checkbox\"] + label';\n+    await this.puppeteerPage.waitForSelector(selector);\n+    const elements = await this.puppeteerPage.$$(selector);\n+    for (const element of elements) {\n+      const innerTxt  = await (await element.getProperty('innerText')).jsonValue();\n+      if (innerTxt === checkboxLabel) {\n+        return element;\n+      }\n+    }\n+\n+  }\n+\n+  public async getInstitutionNameInput(): Promise<ElementHandle> {\n+    return await this.puppeteerPage.waitForXPath('//input[@placeholder=\\'Institution Name\\']');\n+  }\n+\n+  public async getResearchBackgroundTextarea(): Promise<ElementHandle> {\n+    const label = 'Please describe your research background, experience and research interests';\n+    return await this.puppeteerPage.waitForXPath(`//label[contains(normalize-space(.),'${label}')]/parent::*//textarea`)\n+  }\n+\n+  public async fillInFormFields(fields: Array<{ label: string; value: string; }>): Promise<string> {", "originalCommit": "d2dc03939a9069dbd313bdd0e598d01ddf6288bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzNTU2NA==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382635564", "bodyText": "[non-opt / requires response] Personally I think all 'expect' calls should live in test classes, not in the page object. Was there a particular reason you opted for this design?\nIf you wanted to break this out into a method, I would make it a private method on the test class, rather than part of the page component itself. It just feels too surprising to have test expectations living in a page object like this, at least on first look.", "author": "gjuggler", "createdAt": "2020-02-21T15:13:37Z", "path": "e2e/app/create-account-page.ts", "diffHunk": "@@ -0,0 +1,226 @@\n+import {ElementHandle} from 'puppeteer';\n+import {getCursorValue} from '../driver/elementHandle-util';\n+import {inputFieldsValues, institutionAffiliationValues} from '../resources/user-registration-fields';\n+import * as widgetXpath from './elements/widgetxpath';\n+import BasePage from './mixin/basepage';\n+import DropdownSelect from './mixin/dropdown-list-select';\n+\n+const faker = require('faker/locale/en_US');\n+\n+export default class CreateAccountPage extends BasePage {\n+  public async getInvitationKeyInput(): Promise<ElementHandle> {\n+    return await this.puppeteerPage.waitForSelector('#invitationKey');\n+  }\n+\n+  public async getSubmitButton(): Promise<ElementHandle> {\n+    const xpath = widgetXpath.button('Submit');\n+    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  }\n+\n+  public async getNextButton(): Promise<ElementHandle> {\n+    const xpath = widgetXpath.button('Next');\n+    return await this.puppeteerPage.waitForXPath(xpath, {visible:true})\n+  }\n+\n+  public async scrollToLastPdfPage(): Promise<ElementHandle> {\n+    const selectr = '.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page';\n+    const pdfPage = await this.puppeteerPage.waitForSelector('.react-pdf__Document :last-child.react-pdf__Page.tos-pdf-page');\n+    /*\n+    const [response] = await Promise.all([\n+       this.puppeteerPage.waitForNavigation({waitUntil: 'domcontentloaded'}),\n+       this.puppeteerPage.click(selectr, {delay: 20}),\n+     ]); */\n+    await this.puppeteerPage.evaluate(el => el.scrollIntoView(), pdfPage);\n+    await this.puppeteerPage.waitFor(1000);\n+    return pdfPage;\n+  }\n+\n+  // find the second checkbox. it should be for the privacy statement\n+  public async getPrivacyStatementCheckbox(): Promise<ElementHandle> {\n+    const label = 'I have read and understand the All of Us Research Program Privacy Statement.';\n+    const selector = '[type=\"checkbox\"]';\n+    const element = await this.puppeteerPage.waitForSelector(selector, {visible: true});\n+    return element;\n+  }\n+\n+  public async getPrivacyStatementLabel(): Promise<ElementHandle> {\n+    const label = 'I have read and understand the All of Us Research Program Privacy Statement.';\n+    return this.getCheckboxLabel(label);\n+  }\n+\n+  // find the second checkbox\n+  public async getTermOfUseCheckbox(): Promise<ElementHandle> {\n+    const label = 'I have read and understand the All of Us Research Program Terms of Use described above.';\n+    const selector = '[type=\"checkbox\"]';\n+    const element = await this.puppeteerPage.waitForSelector(selector, {visible: true});\n+    return element;\n+  }\n+\n+  public async getTermOfUseLabel(): Promise<ElementHandle> {\n+    const label = 'I have read and understand the All of Us Research Program Terms of Use described above.';\n+    return this.getCheckboxLabel(label);\n+  }\n+\n+  // find checkbox label by matching label\n+  public async getCheckboxLabel(checkboxLabel: string): Promise<ElementHandle> {\n+    const selector = '[type=\"checkbox\"] + label';\n+    await this.puppeteerPage.waitForSelector(selector);\n+    const elements = await this.puppeteerPage.$$(selector);\n+    for (const element of elements) {\n+      const innerTxt  = await (await element.getProperty('innerText')).jsonValue();\n+      if (innerTxt === checkboxLabel) {\n+        return element;\n+      }\n+    }\n+\n+  }\n+\n+  public async getInstitutionNameInput(): Promise<ElementHandle> {\n+    return await this.puppeteerPage.waitForXPath('//input[@placeholder=\\'Institution Name\\']');\n+  }\n+\n+  public async getResearchBackgroundTextarea(): Promise<ElementHandle> {\n+    const label = 'Please describe your research background, experience and research interests';\n+    return await this.puppeteerPage.waitForXPath(`//label[contains(normalize-space(.),'${label}')]/parent::*//textarea`)\n+  }\n+\n+  public async fillInFormFields(fields: Array<{ label: string; value: string; }>): Promise<string> {\n+    let newUserName;\n+\n+    function formFieldXpathHelper(aLabel: string): string {\n+      return `//label[contains(normalize-space(.),'${aLabel}')]/parent::*//input[@type='text']`;\n+    }\n+\n+    for (const field of fields) {\n+      const selector = formFieldXpathHelper(field.label);\n+      const e = await this.puppeteerPage.waitForXPath(selector, {visible: true});\n+      await e.focus();\n+      await e.type(field.value);\n+      await e.press('Tab', { delay: 100 }); // tab out\n+      if (field.label === 'New Username') {\n+        await this.puppeteerPage.waitForSelector('clr-icon.is-solid[shape=\"success-standard\"]', {visible: true});\n+        newUserName = field.value;\n+      }\n+    }\n+    return newUserName;\n+  }\n+\n+  // select Institution Affiliation from a dropdown\n+  public async selectInstitution(selectTextValue: string) {\n+    const dropdown = new DropdownSelect(this.puppeteerPage);\n+    await dropdown.select(selectTextValue);\n+  }\n+\n+  public async getInstitutionValue() {\n+    const dropdown = new DropdownSelect(this.puppeteerPage);\n+    return await dropdown.displayedValue();\n+  }\n+\n+  // select Institution Affiliation from a dropdown\n+  public async selectEducationLevel(selectTextValue: string) {\n+    const dropdown = new DropdownSelect(this.puppeteerPage, 'Highest Level of Education Completed');\n+    await dropdown.select(selectTextValue);\n+  }\n+\n+  // select Year of Birth from a dropdown\n+  public async selectYearOfBirth(year: string) {\n+    const dropdown = new DropdownSelect(this.puppeteerPage, 'Year of Birth');\n+    await dropdown.select(year);\n+  }\n+\n+  // Combined steps to make test code cleaner and shorter\n+\n+  // Step 1: Enter Invitation key\n+  public async fillOutInvitationKey() {\n+    await this.getInvitationKeyInput()\n+    .then(invitationKeyInput => invitationKeyInput.type(process.env.INVITATION_KEY))\n+    .then(() => this.getNextButton())\n+    .then(submitButton => submitButton.click());\n+  }\n+\n+  // Step 2: Accepting Terms of Use and Privacy statement.\n+  public async acceptTermsOfUseAgreement() {\n+    const privacyStatementCheckbox = await this.getPrivacyStatementCheckbox();\n+    expect(privacyStatementCheckbox.asElement()).toBeTruthy();", "originalCommit": "d2dc03939a9069dbd313bdd0e598d01ddf6288bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwNDg5Ng==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382704896", "bodyText": "agree to remove expect in page file. I didn't like it myself. I'm going to create a new test registration-ui.spec.ts that only focus on UI behavior checking.", "author": "aweng98", "createdAt": "2020-02-21T17:17:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzNTU2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzNjY0Mw==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382636643", "bodyText": "typo, s/registeration/registration/", "author": "gjuggler", "createdAt": "2020-02-21T15:15:33Z", "path": "e2e/resources/config.js", "diffHunk": "@@ -4,59 +4,71 @@ const _ = require('lodash');\n const env = process.env.WORKBENCH_ENV || 'test';\n \n const userCredential = {\n-    userEmail: process.env.USER_NAME,\n-    userPassword: process.env.PASSWORD,\n-    userInvitationkey: process.env.INVITATION_KEY,\n-    registerationContactEmail: 'hermione.owner@quality.firecloud.org'\n+  registerationContactEmail: process.env.CONTACT_EMAIL,", "originalCommit": "d2dc03939a9069dbd313bdd0e598d01ddf6288bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxMDg0Mg==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382710842", "bodyText": "Corrected.", "author": "aweng98", "createdAt": "2020-02-21T17:30:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzNjY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0NTg3Mg==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382645872", "bodyText": "Please remove commented-out lines. I know they seem convenient, but it's almost universally considered bad form to include commented-out code in version control.", "author": "gjuggler", "createdAt": "2020-02-21T15:31:32Z", "path": "e2e/resources/config.js", "diffHunk": "@@ -4,59 +4,71 @@ const _ = require('lodash');\n const env = process.env.WORKBENCH_ENV || 'test';\n \n const userCredential = {\n-    userEmail: process.env.USER_NAME,\n-    userPassword: process.env.PASSWORD,\n-    userInvitationkey: process.env.INVITATION_KEY,\n-    registerationContactEmail: 'hermione.owner@quality.firecloud.org'\n+  registerationContactEmail: process.env.CONTACT_EMAIL,\n+  userEmail: process.env.USER_NAME,\n+  userPassword: process.env.PASSWORD,\n+  userInvitationkey: process.env.INVITATION_KEY,\n };\n \n const urlPath = {\n-    loginUrlPath: \"/login\",\n-    workspacesUrlPath: \"/workspaces\",\n-    profileUrlPath: \"/profile\",\n-    libraryUrlPath: \"/library\",\n-    adminUrlPath: \"/admin/user\",\n-  };\n+  loginUrlPath: \"/login\",\n+  workspacesUrlPath: \"/workspaces\",\n+  profileUrlPath: \"/profile\",\n+  libraryUrlPath: \"/library\",\n+  adminUrlPath: \"/admin/user\",\n+};\n \n const puppeteer = {\n-  isHeadless: process.env.PUPPETEER_HEADLESS || true,\n-  slowMotion: parseInt(process.env.PUPPETEER_SLOWMO) || 10, // milliseconds\n+  isHeadless: process.env.PUPPETEER_HEADLESS === true,\n+  slowMotion: 10, // milliseconds\n   isDevTools: process.env.PUPPETEER_DEVTOOLS || false,\n-  puppeteerUserAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36'\n-  };\n+  puppeteerUserAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36',\n+};\n \n // localhost development server\n const local = {\n-    uiBaseUrl: process.env.DEV_LOGIN_URL || \"https://localhost\",\n-    apiBaseUrl: process.env.DEV_API_URL || \"https://api-localhost/v1\"\n+  uiBaseUrl: process.env.DEV_LOGIN_URL || \"https://localhost\",\n+  apiBaseUrl: process.env.DEV_API_URL || \"https://api-localhost/v1\",\n+  userEmailDomain: \"@fake-research-aou.org\",\n };\n \n // workbench test environments\n const test = {\n-    uiBaseUrl: process.env.TEST_LOGIN_URL || \"https://all-of-us-workbench-test.appspot.com\",\n-    apiBaseUrl: process.env.TEST_API_URL || \"https://api-dot-all-of-us-workbench-test.appspot.com/v1\"\n+  uiBaseUrl: process.env.TEST_LOGIN_URL || \"https://all-of-us-workbench-test.appspot.com\",\n+  apiBaseUrl: process.env.TEST_API_URL || \"https://api-dot-all-of-us-workbench-test.appspot.com/v1\",\n+  userEmailDomain: \"@fake-research-aou.org\",\n };\n \n const staging = {\n-    uiBaseUrl: process.env.STAGING_LOGIN_URL || \"https://all-of-us-rw-staging.appspot.com\",\n-    apiBaseUrl: process.env.STAGING_API_URL || \"https://api-dot-all-of-us-rw-staging.appspot.com/v1\"\n+  uiBaseUrl: process.env.STAGING_LOGIN_URL || \"https://all-of-us-rw-staging.appspot.com\",\n+  apiBaseUrl: process.env.STAGING_API_URL || \"https://api-dot-all-of-us-rw-staging.appspot.com/v1\",\n+  userEmailDomain: \"@staging.fake-research-aou.org\",\n+};\n+\n+const stable = {\n+  uiBaseUrl: process.env.PRODUCTION_LOGIN_URL,\n+  apiBaseUrl: process.env.PRODUCTION_API_URL,\n+  userEmailDomain: \"@stable.fake-research-aou.org\",\n };\n \n const production = {\n-    uiBaseUrl: process.env.PRODUCTION_LOGIN_URL,\n-    apiBaseUrl: process.env.PRODUCTION_API_URL\n+  uiBaseUrl: process.env.PRODUCTION_LOGIN_URL,\n+  apiBaseUrl: process.env.PRODUCTION_API_URL,\n+  userEmailDomain: \"I_DO_NOT_CARE\",\n };\n \n const environment = {\n   local,\n   test,\n   staging,\n+  stable,\n   production\n };\n \n const configs = _.merge(environment[env], userCredential, urlPath, puppeteer);\n \n // uncomment for configs inspection\n-// console.log(`env: ${env} configs: ${JSON.stringify(configs, undefined, configs.json_indentation)}`);", "originalCommit": "d2dc03939a9069dbd313bdd0e598d01ddf6288bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxMDkyMg==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382710922", "bodyText": "Done.", "author": "aweng98", "createdAt": "2020-02-21T17:30:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0NTg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0NjU5NQ==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382646595", "bodyText": "I'm curious, why do you require(...) in some cases, and in some other cases use \"import foo from ...\"?\nIn most of our React codebase we use module imports, except for a few cases in test code where we use require(...). Do you know of a significant difference between them that guides you to use one versus the other?", "author": "gjuggler", "createdAt": "2020-02-21T15:32:41Z", "path": "e2e/tests/user/registration.spec.ts", "diffHunk": "@@ -0,0 +1,122 @@\n+import {ElementHandle} from 'puppeteer';\n+import CreateAccountPage from '../../app/create-account-page';\n+import GoogleLoginPage from '../../app/google-login';\n+import PuppeteerLaunch from '../../services/puppeteer-launch';\n+require('../../driver/waitFuncs');", "originalCommit": "d2dc03939a9069dbd313bdd0e598d01ddf6288bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzNTM1NQ==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382835355", "bodyText": "require and import are used due to my inability to convert all require to import. I had  difficult time to make conversion works. I can try convert all require in a following PR.", "author": "aweng98", "createdAt": "2020-02-21T22:25:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0NjU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0ODU3MQ==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382648571", "bodyText": "Should this be reverted before this PR goes in?", "author": "gjuggler", "createdAt": "2020-02-21T15:36:06Z", "path": "e2e/tests/workspace/workspace-create.spec.ts", "diffHunk": "@@ -7,7 +7,7 @@ require('../../driver/puppeteerExtension');\n import { getCursorValue } from '../../driver/elementHandle-util'\n \n jest.setTimeout(300000);\n-describe('Workspace create:', () => {\n+describe.skip('Workspace create:', () => {", "originalCommit": "d2dc03939a9069dbd313bdd0e598d01ddf6288bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzMjYzMw==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382832633", "bodyText": "reverted. test is broken due to Neha's PR on new workspace UI. It needs to be fixed.", "author": "aweng98", "createdAt": "2020-02-21T22:17:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0ODU3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0ODY5OQ==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382648699", "bodyText": "nit: this log message is probably unnecessary, I'd just remove it.", "author": "gjuggler", "createdAt": "2020-02-21T15:36:21Z", "path": "e2e/tests/workspace/workspace-create.spec.ts", "diffHunk": "@@ -91,7 +91,7 @@ describe('Workspace create:', () => {\n     await createButton.click();\n     await (new DataPage(page)).waitUntilPageReady();\n \n-    console.log(\"done\");\n+    console.log('done');", "originalCommit": "d2dc03939a9069dbd313bdd0e598d01ddf6288bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzMDI0MA==", "url": "https://github.com/all-of-us/workbench/pull/3169#discussion_r382830240", "bodyText": "Done", "author": "aweng98", "createdAt": "2020-02-21T22:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0ODY5OQ=="}], "type": "inlineReview"}, {"oid": "9b484156acaedddf8129b09210c8098cf98f2f17", "url": "https://github.com/all-of-us/workbench/commit/9b484156acaedddf8129b09210c8098cf98f2f17", "message": "pr feedback", "committedDate": "2020-02-21T20:05:43Z", "type": "commit"}, {"oid": "ff72c5571b8f0e0d665b1737e947949a74a812b6", "url": "https://github.com/all-of-us/workbench/commit/ff72c5571b8f0e0d665b1737e947949a74a812b6", "message": "pr feedback", "committedDate": "2020-02-21T22:11:58Z", "type": "commit"}, {"oid": "bfac761b7ce3b8966f50a106c1d349ca50b38d43", "url": "https://github.com/all-of-us/workbench/commit/bfac761b7ce3b8966f50a106c1d349ca50b38d43", "message": "PR feedback", "committedDate": "2020-02-22T00:44:44Z", "type": "commit"}]}