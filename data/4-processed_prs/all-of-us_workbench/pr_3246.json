{"pr_number": 3246, "pr_title": "[RW-4360][risk=no] Create tool to load institutional affiliations from a file", "pr_createdAt": "2020-03-11T21:59:16Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3246", "timeline": [{"oid": "aad0922522754c79ff1ed87c1500ef3f091527bd", "url": "https://github.com/all-of-us/workbench/commit/aad0922522754c79ff1ed87c1500ef3f091527bd", "message": "create tool to load initial set of institutitons", "committedDate": "2020-03-11T21:45:17Z", "type": "commit"}, {"oid": "2fd6db3557c09ec5fb38609a956a894661d3ef88", "url": "https://github.com/all-of-us/workbench/commit/2fd6db3557c09ec5fb38609a956a894661d3ef88", "message": "remove accidental file commit", "committedDate": "2020-03-11T21:47:12Z", "type": "commit"}, {"oid": "e45eab3d0ec8a03064674b8845e4cbf76780aa9f", "url": "https://github.com/all-of-us/workbench/commit/e45eab3d0ec8a03064674b8845e4cbf76780aa9f", "message": "spotless", "committedDate": "2020-03-11T21:49:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2OTEwMw==", "url": "https://github.com/all-of-us/workbench/pull/3246#discussion_r391569103", "bodyText": "nit: I like parenthesis when args are present", "author": "jaycarlton", "createdAt": "2020-03-12T11:51:37Z", "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1285,6 +1285,60 @@ def export_workspace_data(cmd_name, *args)\n     :fn => ->(*args) {export_workspace_data(\"export-workspace-data\", *args)}\n })\n \n+def load_institutions(cmd_name, *args)\n+  common = Common.new\n+  ensure_docker cmd_name, args", "originalCommit": "e45eab3d0ec8a03064674b8845e4cbf76780aa9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MDE2MQ==", "url": "https://github.com/all-of-us/workbench/pull/3246#discussion_r391570161", "bodyText": "What do you think about keeping this file in the private workbench-devops repo? If someone else wants to use this code, we wouldn't want them to use our institution file most likely. I.e., there are only nefarious reasons for them doing that, and no good ones.", "author": "jaycarlton", "createdAt": "2020-03-12T11:53:58Z", "path": "api/config/test_institutions.json", "diffHunk": "@@ -0,0 +1,16 @@\n+[{", "originalCommit": "e45eab3d0ec8a03064674b8845e4cbf76780aa9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MDg1MA==", "url": "https://github.com/all-of-us/workbench/pull/3246#discussion_r391570850", "bodyText": "nit: there might be a simpler syntax for defining a \"switch\" or boolean parameter. Maybe not if it's default true though.", "author": "jaycarlton", "createdAt": "2020-03-12T11:55:27Z", "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1285,6 +1285,60 @@ def export_workspace_data(cmd_name, *args)\n     :fn => ->(*args) {export_workspace_data(\"export-workspace-data\", *args)}\n })\n \n+def load_institutions(cmd_name, *args)\n+  common = Common.new\n+  ensure_docker cmd_name, args\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.opts.dry_run = true\n+  op.opts.project = TEST_PROJECT\n+\n+  op.add_typed_option(", "originalCommit": "e45eab3d0ec8a03064674b8845e4cbf76780aa9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIyNzA2MA==", "url": "https://github.com/all-of-us/workbench/pull/3246#discussion_r392227060", "bodyText": "I ran into something similar in #3225. I didn't get the sense that our hand-rolled options class was built with all the usual bells & whistles in mind :)", "author": "gjuggler", "createdAt": "2020-03-13T13:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MDg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MTcwMQ==", "url": "https://github.com/all-of-us/workbench/pull/3246#discussion_r391571701", "bodyText": "maybe name this gradle_args to distinguish from the Java or Ruby ones", "author": "jaycarlton", "createdAt": "2020-03-12T11:57:17Z", "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1285,6 +1285,60 @@ def export_workspace_data(cmd_name, *args)\n     :fn => ->(*args) {export_workspace_data(\"export-workspace-data\", *args)}\n })\n \n+def load_institutions(cmd_name, *args)\n+  common = Common.new\n+  ensure_docker cmd_name, args\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.opts.dry_run = true\n+  op.opts.project = TEST_PROJECT\n+\n+  op.add_typed_option(\n+      \"--dry_run=[dry_run]\",\n+      TrueClass,\n+      ->(opts, v) { opts.dry_run = v},\n+      \"When true, print debug lines instead of performing writes. Defaults to true.\")\n+\n+  op.add_typed_option(\n+      \"--import-filename [import-filename]\",\n+      String,\n+      ->(opts, v) { opts.importFilename = v},\n+      \"File (JSON) containing list of institutions to save\")\n+\n+  # Create a cloud context and apply the DB connection variables to the environment.\n+  # These will be read by Gradle and passed as Spring Boot properties to the command-line.\n+  gcc = GcloudContextV2.new(op)\n+  op.parse.validate\n+  gcc.validate()\n+\n+  if op.opts.dry_run\n+    common.status \"DRY RUN -- CHANGES WILL NOT BE PERSISTED\"\n+  end\n+\n+  flags = ([", "originalCommit": "e45eab3d0ec8a03064674b8845e4cbf76780aa9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MjMxMA==", "url": "https://github.com/all-of-us/workbench/pull/3246#discussion_r391572310", "bodyText": "nit: why a trailing newline? I don't see that in the first half dozen or so descriptions in this file.", "author": "jaycarlton", "createdAt": "2020-03-12T11:58:43Z", "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1285,6 +1285,60 @@ def export_workspace_data(cmd_name, *args)\n     :fn => ->(*args) {export_workspace_data(\"export-workspace-data\", *args)}\n })\n \n+def load_institutions(cmd_name, *args)\n+  common = Common.new\n+  ensure_docker cmd_name, args\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.opts.dry_run = true\n+  op.opts.project = TEST_PROJECT\n+\n+  op.add_typed_option(\n+      \"--dry_run=[dry_run]\",\n+      TrueClass,\n+      ->(opts, v) { opts.dry_run = v},\n+      \"When true, print debug lines instead of performing writes. Defaults to true.\")\n+\n+  op.add_typed_option(\n+      \"--import-filename [import-filename]\",\n+      String,\n+      ->(opts, v) { opts.importFilename = v},\n+      \"File (JSON) containing list of institutions to save\")\n+\n+  # Create a cloud context and apply the DB connection variables to the environment.\n+  # These will be read by Gradle and passed as Spring Boot properties to the command-line.\n+  gcc = GcloudContextV2.new(op)\n+  op.parse.validate\n+  gcc.validate()\n+\n+  if op.opts.dry_run\n+    common.status \"DRY RUN -- CHANGES WILL NOT BE PERSISTED\"\n+  end\n+\n+  flags = ([\n+      [\"--import-filename\", op.opts.importFilename]\n+  ]).map { |kv| \"#{kv[0]}=#{kv[1]}\" }\n+  if op.opts.dry_run\n+    flags += [\"--dry-run\"]\n+  end\n+  # Gradle args need to be single-quote wrapped.\n+  flags.map! { |f| \"'#{f}'\" }\n+\n+  with_cloud_proxy_and_db(gcc) do\n+    common.run_inline %W{\n+        gradle loadInstitutions\n+       -PappArgs=[#{flags.join(',')}]}\n+  end\n+end\n+\n+LOAD_INSTITUTIONS_CMD = \"load-institutions\"\n+\n+Common.register_command({\n+    :invocation => LOAD_INSTITUTIONS_CMD,\n+    :description => \"Load institutions specified in given file.\\n\",", "originalCommit": "e45eab3d0ec8a03064674b8845e4cbf76780aa9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MzA0Nw==", "url": "https://github.com/all-of-us/workbench/pull/3246#discussion_r391573047", "bodyText": "It can be helpful to have an example file and refer to it from here, e.g. \"see /path/to/examples/institutions.json\". These would need to be fake/anonymous.", "author": "jaycarlton", "createdAt": "2020-03-12T12:00:18Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/LoadInstitutions.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.util.logging.Logger;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.institution.InstitutionMapperImpl;\n+import org.pmiops.workbench.institution.InstitutionService;\n+import org.pmiops.workbench.institution.InstitutionServiceImpl;\n+import org.pmiops.workbench.institution.PublicInstitutionDetailsMapperImpl;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+@Configuration\n+@Import({\n+  InstitutionServiceImpl.class,\n+  InstitutionMapperImpl.class,\n+  PublicInstitutionDetailsMapperImpl.class\n+})\n+public class LoadInstitutions {\n+\n+  private static final Logger log = Logger.getLogger(LoadInstitutions.class.getName());\n+\n+  private static Option importFilename =\n+      Option.builder()\n+          .longOpt(\"import-filename\")\n+          .desc(\"File containing JSON for institutions to save\")", "originalCommit": "e45eab3d0ec8a03064674b8845e4cbf76780aa9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MzczOQ==", "url": "https://github.com/all-of-us/workbench/pull/3246#discussion_r391573739", "bodyText": "thinking out loud, but I wonder if it wouldn't be easier for the Ruby layer to build a JSON object of the options and just pass them to Java as one chunk. No need to change this now though.", "author": "jaycarlton", "createdAt": "2020-03-12T12:01:44Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/LoadInstitutions.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.util.logging.Logger;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.institution.InstitutionMapperImpl;\n+import org.pmiops.workbench.institution.InstitutionService;\n+import org.pmiops.workbench.institution.InstitutionServiceImpl;\n+import org.pmiops.workbench.institution.PublicInstitutionDetailsMapperImpl;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+@Configuration\n+@Import({\n+  InstitutionServiceImpl.class,\n+  InstitutionMapperImpl.class,\n+  PublicInstitutionDetailsMapperImpl.class\n+})\n+public class LoadInstitutions {\n+\n+  private static final Logger log = Logger.getLogger(LoadInstitutions.class.getName());\n+\n+  private static Option importFilename =\n+      Option.builder()\n+          .longOpt(\"import-filename\")\n+          .desc(\"File containing JSON for institutions to save\")\n+          .required()\n+          .hasArg()\n+          .build();\n+  private static Option dryRunOpt =", "originalCommit": "e45eab3d0ec8a03064674b8845e4cbf76780aa9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MjgwNA==", "url": "https://github.com/all-of-us/workbench/pull/3246#discussion_r391962804", "bodyText": "Hmm, that would make the gradle commands pretty unwieldy if they're used without project.rb.", "author": "ericsong", "createdAt": "2020-03-12T23:49:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MzczOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI4MDYwOQ==", "url": "https://github.com/all-of-us/workbench/pull/3246#discussion_r392280609", "bodyText": "Good point.", "author": "jaycarlton", "createdAt": "2020-03-13T14:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MzczOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NDE4Mg==", "url": "https://github.com/all-of-us/workbench/pull/3246#discussion_r391574182", "bodyText": "nit: with builders, I like to see them instantiated inline unless we've got conditionals happening or they're more than a couple of levels deep. I'd inline your two option vars into this declaration.", "author": "jaycarlton", "createdAt": "2020-03-12T12:02:45Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/LoadInstitutions.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.util.logging.Logger;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.institution.InstitutionMapperImpl;\n+import org.pmiops.workbench.institution.InstitutionService;\n+import org.pmiops.workbench.institution.InstitutionServiceImpl;\n+import org.pmiops.workbench.institution.PublicInstitutionDetailsMapperImpl;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+@Configuration\n+@Import({\n+  InstitutionServiceImpl.class,\n+  InstitutionMapperImpl.class,\n+  PublicInstitutionDetailsMapperImpl.class\n+})\n+public class LoadInstitutions {\n+\n+  private static final Logger log = Logger.getLogger(LoadInstitutions.class.getName());\n+\n+  private static Option importFilename =\n+      Option.builder()\n+          .longOpt(\"import-filename\")\n+          .desc(\"File containing JSON for institutions to save\")\n+          .required()\n+          .hasArg()\n+          .build();\n+  private static Option dryRunOpt =\n+      Option.builder()\n+          .longOpt(\"dry-run\")\n+          .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+          .build();\n+\n+  private static Options options = new Options().addOption(importFilename).addOption(dryRunOpt);", "originalCommit": "e45eab3d0ec8a03064674b8845e4cbf76780aa9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NDYwNg==", "url": "https://github.com/all-of-us/workbench/pull/3246#discussion_r391574606", "bodyText": "do you want to check if props have changed here? Even if you don't want to upsert, it's good to know.", "author": "jaycarlton", "createdAt": "2020-03-12T12:03:37Z", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/LoadInstitutions.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.pmiops.workbench.tools;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.util.logging.Logger;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.institution.InstitutionMapperImpl;\n+import org.pmiops.workbench.institution.InstitutionService;\n+import org.pmiops.workbench.institution.InstitutionServiceImpl;\n+import org.pmiops.workbench.institution.PublicInstitutionDetailsMapperImpl;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+@Configuration\n+@Import({\n+  InstitutionServiceImpl.class,\n+  InstitutionMapperImpl.class,\n+  PublicInstitutionDetailsMapperImpl.class\n+})\n+public class LoadInstitutions {\n+\n+  private static final Logger log = Logger.getLogger(LoadInstitutions.class.getName());\n+\n+  private static Option importFilename =\n+      Option.builder()\n+          .longOpt(\"import-filename\")\n+          .desc(\"File containing JSON for institutions to save\")\n+          .required()\n+          .hasArg()\n+          .build();\n+  private static Option dryRunOpt =\n+      Option.builder()\n+          .longOpt(\"dry-run\")\n+          .desc(\"If specified, the tool runs in dry run mode; no modifications are made\")\n+          .build();\n+\n+  private static Options options = new Options().addOption(importFilename).addOption(dryRunOpt);\n+\n+  @Bean\n+  public CommandLineRunner run(InstitutionService institutionService) {\n+    return (args) -> {\n+      CommandLine opts = new DefaultParser().parse(options, args);\n+      boolean dryRun = opts.hasOption(dryRunOpt.getLongOpt());\n+\n+      try (BufferedReader reader =\n+          new BufferedReader(new FileReader(opts.getOptionValue(importFilename.getLongOpt())))) {\n+        ObjectMapper mapper = new ObjectMapper();\n+        Institution[] institutions = mapper.readValue(reader, Institution[].class);\n+\n+        for (Institution institution : institutions) {\n+          if (institutionService.getDbInstitution(institution.getShortName()).isPresent()) {\n+            log.info(\"Skipping... Entry already exists for \" + institution.getShortName());", "originalCommit": "e45eab3d0ec8a03064674b8845e4cbf76780aa9f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dfd797e16cbcf844ebf121deee98819df554b010", "url": "https://github.com/all-of-us/workbench/commit/dfd797e16cbcf844ebf121deee98819df554b010", "message": "address pr", "committedDate": "2020-03-13T00:43:17Z", "type": "commit"}, {"oid": "6ed351f4b6363f4d7bb8b0a6ad831b5e6a5a1460", "url": "https://github.com/all-of-us/workbench/commit/6ed351f4b6363f4d7bb8b0a6ad831b5e6a5a1460", "message": "use comparator", "committedDate": "2020-03-13T00:51:41Z", "type": "commit"}, {"oid": "c93f7ebe534c007198f5b13c28fa3401c87f825a", "url": "https://github.com/all-of-us/workbench/commit/c93f7ebe534c007198f5b13c28fa3401c87f825a", "message": "spotless", "committedDate": "2020-03-13T00:52:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIyNDIzMg==", "url": "https://github.com/all-of-us/workbench/pull/3246#discussion_r392224232", "bodyText": "File naming nit: for other configs we have {configType}_{env}.json. Prefer that convension here, e.g. institutions_test.json", "author": "gjuggler", "createdAt": "2020-03-13T13:23:59Z", "path": "api/config/test_institutions.json", "diffHunk": "@@ -0,0 +1,19 @@\n+[{", "originalCommit": "c93f7ebe534c007198f5b13c28fa3401c87f825a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fb49c95ef979afdfa6264403d395ceeafa15e332", "url": "https://github.com/all-of-us/workbench/commit/fb49c95ef979afdfa6264403d395ceeafa15e332", "message": "rename", "committedDate": "2020-03-13T14:48:35Z", "type": "commit"}]}