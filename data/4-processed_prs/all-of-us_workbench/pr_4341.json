{"pr_number": 4341, "pr_title": "[RW-5922][risk=no] GetRuntime: remember which preset was chosen for deleted runtimes", "pr_createdAt": "2020-12-01T20:29:48Z", "pr_url": "https://github.com/all-of-us/workbench/pull/4341", "timeline": [{"oid": "d9012e561e951e1b031141c56808217a1bbb6c54", "url": "https://github.com/all-of-us/workbench/commit/d9012e561e951e1b031141c56808217a1bbb6c54", "message": "add test and impl for returning presets in getRuntime", "committedDate": "2020-11-30T18:28:54Z", "type": "commit"}, {"oid": "755f192e012dbd5337e2692baf646c7d341bcb47", "url": "https://github.com/all-of-us/workbench/commit/755f192e012dbd5337e2692baf646c7d341bcb47", "message": "add tests and impl for overriding getRuntime values with presets", "committedDate": "2020-12-01T18:22:02Z", "type": "commit"}, {"oid": "6e1cd381575e876223111be006f1fda8aec190d1", "url": "https://github.com/all-of-us/workbench/commit/6e1cd381575e876223111be006f1fda8aec190d1", "message": "refactor. remove usage of preset object in create panel", "committedDate": "2020-12-01T20:12:20Z", "type": "commit"}, {"oid": "fae55a3920ac164a6ff8d697101e0199e6f45f49", "url": "https://github.com/all-of-us/workbench/commit/fae55a3920ac164a6ff8d697101e0199e6f45f49", "message": "additional tests", "committedDate": "2020-12-01T20:22:41Z", "type": "commit"}, {"oid": "df1874b3ad8172b7ef63102b6591d474c6cfe075", "url": "https://github.com/all-of-us/workbench/commit/df1874b3ad8172b7ef63102b6591d474c6cfe075", "message": "lint", "committedDate": "2020-12-01T20:32:28Z", "type": "commit"}, {"oid": "b3f8ba682b5658502b59a3bb543acdf6380236f1", "url": "https://github.com/all-of-us/workbench/commit/b3f8ba682b5658502b59a3bb543acdf6380236f1", "message": "accidentally changed test", "committedDate": "2020-12-01T20:50:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcwNjcwOQ==", "url": "https://github.com/all-of-us/workbench/pull/4341#discussion_r533706709", "bodyText": "nit: can write this as just gceConfig,", "author": "calbach", "createdAt": "2020-12-01T20:39:29Z", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -159,6 +159,55 @@ describe('RuntimePanel', () => {\n     expect(runtimeApiStub.runtime.gceConfig.machineType).toEqual('n1-standard-4');\n   });\n \n+  it('should create runtime with preset values instead of getRuntime values if configurationType is GeneralAnalysis', async() => {\n+    const gceConfig = defaultGceConfig();\n+    gceConfig.machineType = 'n1-standard-16';\n+    gceConfig.diskSize = 1000;\n+    const runtime = {...runtimeApiStub.runtime,\n+      status: RuntimeStatus.Deleted,\n+      configurationType: RuntimeConfigurationType.GeneralAnalysis,\n+      gceConfig: gceConfig,", "originalCommit": "fae55a3920ac164a6ff8d697101e0199e6f45f49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcwNzQxNQ==", "url": "https://github.com/all-of-us/workbench/pull/4341#discussion_r533707415", "bodyText": "opt: imo maybe slightly more readable as:\n{\n  ...defaultGceConfig(),\n  machineType: ...,\n  diskSize: ...\n\nAlso, if you take this suggestion, you may not need the gceConfig variable either, can inline the whole thing below", "author": "calbach", "createdAt": "2020-12-01T20:40:46Z", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -159,6 +159,55 @@ describe('RuntimePanel', () => {\n     expect(runtimeApiStub.runtime.gceConfig.machineType).toEqual('n1-standard-4');\n   });\n \n+  it('should create runtime with preset values instead of getRuntime values if configurationType is GeneralAnalysis', async() => {\n+    const gceConfig = defaultGceConfig();", "originalCommit": "fae55a3920ac164a6ff8d697101e0199e6f45f49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcwODM2OQ==", "url": "https://github.com/all-of-us/workbench/pull/4341#discussion_r533708369", "bodyText": "nit: determined we didn't act here and dropped from other cases, probably remove here too for consistency.\nSpecifically, it's only needed after we render a React component.", "author": "calbach", "createdAt": "2020-12-01T20:42:30Z", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -159,6 +159,55 @@ describe('RuntimePanel', () => {\n     expect(runtimeApiStub.runtime.gceConfig.machineType).toEqual('n1-standard-4');\n   });\n \n+  it('should create runtime with preset values instead of getRuntime values if configurationType is GeneralAnalysis', async() => {\n+    const gceConfig = defaultGceConfig();\n+    gceConfig.machineType = 'n1-standard-16';\n+    gceConfig.diskSize = 1000;\n+    const runtime = {...runtimeApiStub.runtime,\n+      status: RuntimeStatus.Deleted,\n+      configurationType: RuntimeConfigurationType.GeneralAnalysis,\n+      gceConfig: gceConfig,\n+      dataprocConfig: null\n+    };\n+    runtimeApiStub.runtime = runtime;\n+    act(() => { runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace}); });", "originalCommit": "fae55a3920ac164a6ff8d697101e0199e6f45f49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcwODQ4NA==", "url": "https://github.com/all-of-us/workbench/pull/4341#discussion_r533708484", "bodyText": "opt: same comment as above", "author": "calbach", "createdAt": "2020-12-01T20:42:45Z", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -159,6 +159,55 @@ describe('RuntimePanel', () => {\n     expect(runtimeApiStub.runtime.gceConfig.machineType).toEqual('n1-standard-4');\n   });\n \n+  it('should create runtime with preset values instead of getRuntime values if configurationType is GeneralAnalysis', async() => {\n+    const gceConfig = defaultGceConfig();\n+    gceConfig.machineType = 'n1-standard-16';\n+    gceConfig.diskSize = 1000;\n+    const runtime = {...runtimeApiStub.runtime,\n+      status: RuntimeStatus.Deleted,\n+      configurationType: RuntimeConfigurationType.GeneralAnalysis,\n+      gceConfig: gceConfig,\n+      dataprocConfig: null\n+    };\n+    runtimeApiStub.runtime = runtime;\n+    act(() => { runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace}); });\n+\n+    const wrapper = await component();\n+\n+    await mustClickButton(wrapper, 'Create');\n+\n+    expect(runtimeApiStub.runtime.status).toEqual('Creating');\n+    expect(runtimeApiStub.runtime.gceConfig.machineType).toEqual(runtimePresets.generalAnalysis.runtimeTemplate.gceConfig.machineType);\n+    expect(runtimeApiStub.runtime.gceConfig.diskSize).toEqual(runtimePresets.generalAnalysis.runtimeTemplate.gceConfig.diskSize);\n+  });\n+\n+  it('should create runtime with preset values instead of getRuntime values if configurationType is HailGenomicsAnalysis', async() => {\n+    const dataprocConfig = defaultDataprocConfig();\n+    dataprocConfig.masterMachineType = 'n1-standard-16';", "originalCommit": "fae55a3920ac164a6ff8d697101e0199e6f45f49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxMDczMQ==", "url": "https://github.com/all-of-us/workbench/pull/4341#discussion_r533710731", "bodyText": "opt: this is a bit verbose, consider using an approach like this to do a partial comparison: \n  \n    \n      workbench/ui/src/app/pages/analysis/runtime-panel.tsx\n    \n    \n        Lines 150 to 154\n      in\n      a6e7985\n    \n    \n    \n    \n\n        \n          \n           const strip = fp.flow( \n        \n\n        \n          \n             // In the future, things like toolDockerImage and autopause may be considerations. \n        \n\n        \n          \n             fp.pick(['gceConfig', 'dataprocConfig']), \n        \n\n        \n          \n             // numberOfWorkerLocalSSDs is currently part of the API spec, but is not used by the panel. \n        \n\n        \n          \n             fp.omit(['dataprocConfig.numberOfWorkerLocalSSDs'])); \n        \n    \n  \n\n\nThere may be a better way, but I haven't seen any dedicated test utils for doing so.", "author": "calbach", "createdAt": "2020-12-01T20:46:45Z", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -159,6 +159,55 @@ describe('RuntimePanel', () => {\n     expect(runtimeApiStub.runtime.gceConfig.machineType).toEqual('n1-standard-4');\n   });\n \n+  it('should create runtime with preset values instead of getRuntime values if configurationType is GeneralAnalysis', async() => {\n+    const gceConfig = defaultGceConfig();\n+    gceConfig.machineType = 'n1-standard-16';\n+    gceConfig.diskSize = 1000;\n+    const runtime = {...runtimeApiStub.runtime,\n+      status: RuntimeStatus.Deleted,\n+      configurationType: RuntimeConfigurationType.GeneralAnalysis,\n+      gceConfig: gceConfig,\n+      dataprocConfig: null\n+    };\n+    runtimeApiStub.runtime = runtime;\n+    act(() => { runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace}); });\n+\n+    const wrapper = await component();\n+\n+    await mustClickButton(wrapper, 'Create');\n+\n+    expect(runtimeApiStub.runtime.status).toEqual('Creating');\n+    expect(runtimeApiStub.runtime.gceConfig.machineType).toEqual(runtimePresets.generalAnalysis.runtimeTemplate.gceConfig.machineType);\n+    expect(runtimeApiStub.runtime.gceConfig.diskSize).toEqual(runtimePresets.generalAnalysis.runtimeTemplate.gceConfig.diskSize);\n+  });\n+\n+  it('should create runtime with preset values instead of getRuntime values if configurationType is HailGenomicsAnalysis', async() => {\n+    const dataprocConfig = defaultDataprocConfig();\n+    dataprocConfig.masterMachineType = 'n1-standard-16';\n+    dataprocConfig.masterDiskSize = 999;\n+    dataprocConfig.workerDiskSize = 444;\n+    dataprocConfig.numberOfWorkers = 5;\n+\n+    const runtime = {...runtimeApiStub.runtime,\n+      status: RuntimeStatus.Deleted,\n+      configurationType: RuntimeConfigurationType.HailGenomicAnalysis,\n+      gceConfig: null,\n+      dataprocConfig: dataprocConfig\n+    };\n+    runtimeApiStub.runtime = runtime;\n+    act(() => { runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace}); });\n+\n+    const wrapper = await component();\n+\n+    await mustClickButton(wrapper, 'Create');\n+\n+    expect(runtimeApiStub.runtime.status).toEqual('Creating');\n+    expect(runtimeApiStub.runtime.dataprocConfig.masterMachineType).toEqual(runtimePresets.hailAnalysis.runtimeTemplate.dataprocConfig.masterMachineType);", "originalCommit": "fae55a3920ac164a6ff8d697101e0199e6f45f49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxMTYyNQ==", "url": "https://github.com/all-of-us/workbench/pull/4341#discussion_r533711625", "bodyText": "This test case is great. I would put a comment in here somewhere to explain more specifically the scenario this is covering.", "author": "calbach", "createdAt": "2020-12-01T20:48:26Z", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -159,6 +159,55 @@ describe('RuntimePanel', () => {\n     expect(runtimeApiStub.runtime.gceConfig.machineType).toEqual('n1-standard-4');\n   });\n \n+  it('should create runtime with preset values instead of getRuntime values if configurationType is GeneralAnalysis', async() => {\n+    const gceConfig = defaultGceConfig();\n+    gceConfig.machineType = 'n1-standard-16';", "originalCommit": "fae55a3920ac164a6ff8d697101e0199e6f45f49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxMzEyMA==", "url": "https://github.com/all-of-us/workbench/pull/4341#discussion_r533713120", "bodyText": "nit: don't need !! in a predicate context (where it is already going to be coerced to a boolean)", "author": "calbach", "createdAt": "2020-12-01T20:51:09Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -652,6 +643,17 @@ export const RuntimePanel = fp.flow(\n   const {hasMicroarrayData} = fp.find({cdrVersionId}, cdrVersionListResponse.items) || {hasMicroarrayData: false};\n   const [{currentRuntime, pendingRuntime}, setRequestedRuntime] = useCustomRuntime(namespace);\n \n+  // if runtime configuration type is a default, override its config with preset values\n+  if (!!currentRuntime && currentRuntime.status === RuntimeStatus.Deleted) {", "originalCommit": "fae55a3920ac164a6ff8d697101e0199e6f45f49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxNDA2NQ==", "url": "https://github.com/all-of-us/workbench/pull/4341#discussion_r533714065", "bodyText": "nit: probably slightly more extensible/readable: [RuntimeConfigurationType.GeneralAnalysis, ...].includes(r.configurationType)", "author": "calbach", "createdAt": "2020-12-01T20:52:49Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -667,12 +669,13 @@ export const RuntimePanel = fp.flow(\n     // currentRuntime being undefined means the first `getRuntime` has still not completed.\n     [([r, ]) => r === undefined, () => PanelContent.Customize],\n     [([r, s]) => r === null || s === RuntimeStatus.Unknown, () => PanelContent.Create],\n+    [([r, ]) => r.status === RuntimeStatus.Deleted &&\n+      (r.configurationType === RuntimeConfigurationType.GeneralAnalysis || r.configurationType === RuntimeConfigurationType.HailGenomicAnalysis),", "originalCommit": "fae55a3920ac164a6ff8d697101e0199e6f45f49", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxNTU1Ng==", "url": "https://github.com/all-of-us/workbench/pull/4341#discussion_r533715556", "bodyText": "nit: this could probably be written slightly more generically, e.g. if we had a mapping of configurationType -> preset, or a helper function to do this lookup.", "author": "calbach", "createdAt": "2020-12-01T20:55:35Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -652,6 +643,17 @@ export const RuntimePanel = fp.flow(\n   const {hasMicroarrayData} = fp.find({cdrVersionId}, cdrVersionListResponse.items) || {hasMicroarrayData: false};\n   const [{currentRuntime, pendingRuntime}, setRequestedRuntime] = useCustomRuntime(namespace);\n \n+  // if runtime configuration type is a default, override its config with preset values\n+  if (!!currentRuntime && currentRuntime.status === RuntimeStatus.Deleted) {\n+    if (currentRuntime.configurationType === RuntimeConfigurationType.GeneralAnalysis) {", "originalCommit": "fae55a3920ac164a6ff8d697101e0199e6f45f49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc3MTYyNg==", "url": "https://github.com/all-of-us/workbench/pull/4341#discussion_r533771626", "bodyText": "I played around with this a bit but couldn't find an alternative that I was happy with that seemed simpler than the switch case here. Mostly complicated by the fact that the config variable name is different in the two cases (dataprocConfig vs gceConfig).", "author": "ericsong", "createdAt": "2020-12-01T22:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxNTU1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc3MzQwNg==", "url": "https://github.com/all-of-us/workbench/pull/4341#discussion_r533773406", "bodyText": "This code doesn't need to know that dataprocConfig is null in one case or the other. You can just grab the runtimeTemplate and then set both gceConfig and dataprocConfig according to what's there. Ideally, the code here would be treating these presets opaquely anyways.", "author": "calbach", "createdAt": "2020-12-01T22:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxNTU1Ng=="}], "type": "inlineReview"}, {"oid": "20131a4d2f1b9c1e7636e8a27d4d66e833f7a64a", "url": "https://github.com/all-of-us/workbench/commit/20131a4d2f1b9c1e7636e8a27d4d66e833f7a64a", "message": "code review feedback", "committedDate": "2020-12-01T22:44:31Z", "type": "commit"}, {"oid": "b2a12716a39f2259b34671dd3f3ab966f9646a4e", "url": "https://github.com/all-of-us/workbench/commit/b2a12716a39f2259b34671dd3f3ab966f9646a4e", "message": "spotless", "committedDate": "2020-12-01T23:04:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NjA3Mw==", "url": "https://github.com/all-of-us/workbench/pull/4341#discussion_r533796073", "bodyText": "nit: It would be better to use expect().toEqual() so that you get a useful error message when this fails. Maybe change the signature to expectEqualForFields() or expectPartiallyEqual and just do the expect in here", "author": "calbach", "createdAt": "2020-12-01T23:40:34Z", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -159,6 +160,71 @@ describe('RuntimePanel', () => {\n     expect(runtimeApiStub.runtime.gceConfig.machineType).toEqual('n1-standard-4');\n   });\n \n+  it('should create runtime with preset values instead of getRuntime values if configurationType is GeneralAnalysis', async() => {\n+    // In the case where the user's latest runtime is a preset (GeneralAnalysis in this case)\n+    // we should ignore the other runtime config values that were delivered with the getRuntime response\n+    // and instead, defer to the preset values defined in runtime-presets.ts when creating a new runtime\n+\n+    const runtime = {...runtimeApiStub.runtime,\n+      status: RuntimeStatus.Deleted,\n+      configurationType: RuntimeConfigurationType.GeneralAnalysis,\n+      gceConfig: {\n+        ...defaultGceConfig(),\n+        machineType: 'n1-standard-16',\n+        diskSize: 1000\n+      },\n+      dataprocConfig: null\n+    };\n+    runtimeApiStub.runtime = runtime;\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+    await mustClickButton(wrapper, 'Create');\n+\n+    expect(runtimeApiStub.runtime.status).toEqual('Creating');\n+    expect(compareFields(\n+      runtimeApiStub.runtime.gceConfig,\n+      runtimePresets.generalAnalysis.runtimeTemplate.gceConfig,\n+      ['machineType', 'diskSize']\n+    )).toBeTruthy();\n+  });\n+\n+  it('should create runtime with preset values instead of getRuntime values if configurationType is HailGenomicsAnalysis', async() => {\n+    // In the case where the user's latest runtime is a preset (HailGenomicsAnalysis in this case)\n+    // we should ignore the other runtime config values that were delivered with the getRuntime response\n+    // and instead, defer to the preset values defined in runtime-presets.ts when creating a new runtime\n+\n+    const runtime = {...runtimeApiStub.runtime,\n+      status: RuntimeStatus.Deleted,\n+      configurationType: RuntimeConfigurationType.HailGenomicAnalysis,\n+      gceConfig: null,\n+      dataprocConfig: {\n+        ...defaultDataprocConfig(),\n+        masterMachineType: 'n1-standard-16',\n+        masterDiskSize: 999,\n+        workerDiskSize: 444,\n+        numberOfWorkers: 5\n+      }\n+    };\n+    runtimeApiStub.runtime = runtime;\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+    await mustClickButton(wrapper, 'Create');\n+\n+    expect(runtimeApiStub.runtime.status).toEqual('Creating');\n+    expect(compareFields(\n+      runtimeApiStub.runtime.dataprocConfig,\n+      runtimePresets.hailAnalysis.runtimeTemplate.dataprocConfig,\n+      ['masterMachineType', 'masterDiskSize', 'workerDiskSize', 'numberOfWorkers']\n+    )).toBeTruthy();\n+  });\n+\n+  const compareFields = (a, b, fieldNames) => {\n+    const pick = fp.flow(fp.pick(fieldNames));\n+    return fp.isEqual(pick(a) , pick(b));", "originalCommit": "b2a12716a39f2259b34671dd3f3ab966f9646a4e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f3382e658ab04ff5c906e9c781e573442c8e7078", "url": "https://github.com/all-of-us/workbench/commit/f3382e658ab04ff5c906e9c781e573442c8e7078", "message": "refactor type mapping. test syntax", "committedDate": "2020-12-02T15:48:31Z", "type": "commit"}]}