{"pr_number": 4049, "pr_title": "[RW-5363][risk=no]  Puppeteer test for notebook download", "pr_createdAt": "2020-09-22T23:57:32Z", "pr_url": "https://github.com/all-of-us/workbench/pull/4049", "timeline": [{"oid": "a582d55b6d9e099c6535bad5295f798c5e089641", "url": "https://github.com/all-of-us/workbench/commit/a582d55b6d9e099c6535bad5295f798c5e089641", "message": "Finally...", "committedDate": "2020-09-22T23:58:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4NzUwMg==", "url": "https://github.com/all-of-us/workbench/pull/4049#discussion_r493687502", "bodyText": "Note: in case you see this diff disappear, I stole this line for #4053", "author": "jmthibault79", "createdAt": "2020-09-23T15:29:34Z", "path": "e2e/README.md", "diffHunk": "@@ -44,6 +44,7 @@ interactions visible to you.\n * Run one test on deployed AoU \"test\" environment <div class=\"text-blue\">`yarn test:debug [TEST_FILE]` </div>\n * Run one test on your local server <div class=\"text-blue\">`yarn test-local [TEST_FILE]` </div>\n * Run one test in headless Chrome with node `--inspect-brk` argument. It pauses test playback at breakpoints which is useful for debugging or/and writing new tests <div class=\"text-blue\">`yarn test:debugTest [TEST_FILE]` </div>\n+  * Navigate to chrome://inspect after launching the tests to debug test code", "originalCommit": "a582d55b6d9e099c6535bad5295f798c5e089641", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "db7a52ac7a38129e0caf7db5bbf3c54635533f04", "url": "https://github.com/all-of-us/workbench/commit/db7a52ac7a38129e0caf7db5bbf3c54635533f04", "message": "Stuck on two issues", "committedDate": "2020-09-23T23:27:02Z", "type": "commit"}, {"oid": "80c708b69dd0cb6e6d1d60c013571a24b5ef955f", "url": "https://github.com/all-of-us/workbench/commit/80c708b69dd0cb6e6d1d60c013571a24b5ef955f", "message": "doc issues", "committedDate": "2020-09-23T23:27:02Z", "type": "commit"}, {"oid": "59543c7a900fc287d3cd567e79d441a9204eaafc", "url": "https://github.com/all-of-us/workbench/commit/59543c7a900fc287d3cd567e79d441a9204eaafc", "message": "Finally...", "committedDate": "2020-09-23T23:27:02Z", "type": "commit"}, {"oid": "621904d7ed7f7a686a4dcc39249cdb6f8e15ebdd", "url": "https://github.com/all-of-us/workbench/commit/621904d7ed7f7a686a4dcc39249cdb6f8e15ebdd", "message": "poll for 10s until new tab shows up", "committedDate": "2020-09-23T23:27:02Z", "type": "commit"}, {"oid": "621904d7ed7f7a686a4dcc39249cdb6f8e15ebdd", "url": "https://github.com/all-of-us/workbench/commit/621904d7ed7f7a686a4dcc39249cdb6f8e15ebdd", "message": "poll for 10s until new tab shows up", "committedDate": "2020-09-23T23:27:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5NDYxOQ==", "url": "https://github.com/all-of-us/workbench/pull/4049#discussion_r493994619", "bodyText": "tslint error.", "author": "aweng98", "createdAt": "2020-09-24T01:58:23Z", "path": "e2e/tests/notebook/notebook-download.spec.ts", "diffHunk": "@@ -0,0 +1,88 @@\n+import NotebookDownloadModal from 'app/page/notebook-download-modal';\n+import WorkspaceDataPage from 'app/page/workspace-data-page';\n+import {makeRandomName} from 'utils/str-utils';\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+import {waitForFn} from 'utils/waits-utils';\n+\n+describe('Jupyter notebook download test', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  const testDownloadModal = async (modal: NotebookDownloadModal): Promise<void> => {\n+    let downloadBtn = await modal.getDownloadButton();\n+    expect(await downloadBtn.getProperty('disabled')).toBeTruthy();\n+\n+    await modal.clickPolicyCheckbox();\n+\n+    downloadBtn = await modal.getDownloadButton();\n+    const btnProps = await downloadBtn.getProperties();\n+    expect(btnProps['disabled']).toBeFalsy();", "originalCommit": "621904d7ed7f7a686a4dcc39249cdb6f8e15ebdd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwMTA1Mw==", "url": "https://github.com/all-of-us/workbench/pull/4049#discussion_r494001053", "bodyText": "nit: I'd have used css selector to be consistent with others. but nothing wrong with xpath selectors.", "author": "aweng98", "createdAt": "2020-09-24T02:24:13Z", "path": "e2e/app/page/notebook-page.ts", "diffHunk": "@@ -6,19 +6,28 @@ import {waitForDocumentTitle} from 'utils/waits-utils';\n import {ResourceCard} from 'app/text-labels';\n import AuthenticatedPage from './authenticated-page';\n import NotebookCell, {CellType} from './notebook-cell';\n+import NotebookDownloadModal from './notebook-download-modal';\n import WorkspaceAnalysisPage from './workspace-analysis-page';\n \n // CSS selectors\n enum CssSelector {\n   body = 'body.notebook_app',\n   notebookContainer = '#notebook-container',\n+\n   toolbarContainer = '#maintoolbar-container',\n   runCellButton = 'button[data-jupyter-action=\"jupyter-notebook:run-cell-and-select-next\"]',\n   saveNotebookButton = 'button[data-jupyter-action=\"jupyter-notebook:save-notebook\"]',\n   kernelIcon = '#kernel_indicator_icon',\n   kernelName = '.kernel_indicator_name',\n }\n \n+enum Xpath {", "originalCommit": "621904d7ed7f7a686a4dcc39249cdb6f8e15ebdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzOTczNQ==", "url": "https://github.com/all-of-us/workbench/pull/4049#discussion_r495339735", "bodyText": "Tried this at first, file menu does not have a logical html structure or clear class/ids, so I had to use the text content matching for it. The download buttons I figured I may as well be self-consistent with, but these could have been done in CSS instead.", "author": "calbach", "createdAt": "2020-09-26T00:25:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwMTA1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwMTk0NA==", "url": "https://github.com/all-of-us/workbench/pull/4049#discussion_r494001944", "bodyText": "nit: It would also make sense to check/verify policy texts in modal window before close.", "author": "aweng98", "createdAt": "2020-09-24T02:27:41Z", "path": "e2e/tests/notebook/notebook-download.spec.ts", "diffHunk": "@@ -0,0 +1,88 @@\n+import NotebookDownloadModal from 'app/page/notebook-download-modal';\n+import WorkspaceDataPage from 'app/page/workspace-data-page';\n+import {makeRandomName} from 'utils/str-utils';\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+import {waitForFn} from 'utils/waits-utils';\n+\n+describe('Jupyter notebook download test', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  const testDownloadModal = async (modal: NotebookDownloadModal): Promise<void> => {\n+    let downloadBtn = await modal.getDownloadButton();\n+    expect(await downloadBtn.getProperty('disabled')).toBeTruthy();\n+\n+    await modal.clickPolicyCheckbox();", "originalCommit": "621904d7ed7f7a686a4dcc39249cdb6f8e15ebdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMTA4NQ==", "url": "https://github.com/all-of-us/workbench/pull/4049#discussion_r495331085", "bodyText": "Eh, I think I prefer without that. I'd rather use something like a snapshot test for something visual like this; testing for a string in the modal content I think is unlikely to protect against many regressions, and can break easily when we make changes.", "author": "calbach", "createdAt": "2020-09-26T00:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwMTk0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAxNDMyNg==", "url": "https://github.com/all-of-us/workbench/pull/4049#discussion_r494014326", "bodyText": "This check always pass even for disabled: false because getProperty() returns a JSHandle object.\nThis code checks properly:\n   let downloadBtn = await modal.getDownloadButton();\n   // sleep 2 seconds because state of the button changes. polling for \"disable: true\" would be a nicer solution. Without sleep, `disabled` is `false` after modal is opened because the check happened too soon.\n    await page.waitFor(2000);\n    expect(await getPropValue<boolean>(downloadBtn, 'disabled')).toBe(true);\n\n    await modal.clickPolicyCheckbox();\n\n    expect(await getPropValue<boolean>(downloadBtn, 'disabled')).toBe(false);", "author": "aweng98", "createdAt": "2020-09-24T03:19:04Z", "path": "e2e/tests/notebook/notebook-download.spec.ts", "diffHunk": "@@ -0,0 +1,88 @@\n+import NotebookDownloadModal from 'app/page/notebook-download-modal';\n+import WorkspaceDataPage from 'app/page/workspace-data-page';\n+import {makeRandomName} from 'utils/str-utils';\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+import {waitForFn} from 'utils/waits-utils';\n+\n+describe('Jupyter notebook download test', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  const testDownloadModal = async (modal: NotebookDownloadModal): Promise<void> => {\n+    let downloadBtn = await modal.getDownloadButton();\n+    expect(await downloadBtn.getProperty('disabled')).toBeTruthy();", "originalCommit": "621904d7ed7f7a686a4dcc39249cdb6f8e15ebdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMDY0Nw==", "url": "https://github.com/all-of-us/workbench/pull/4049#discussion_r495330647", "bodyText": "Oops thanks, fixed.", "author": "calbach", "createdAt": "2020-09-26T00:02:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAxNDMyNg=="}], "type": "inlineReview"}, {"oid": "007dd0999829f147ebc53dd5b94f643ad7ebf406", "url": "https://github.com/all-of-us/workbench/commit/007dd0999829f147ebc53dd5b94f643ad7ebf406", "message": "Fixes, and drop validation", "committedDate": "2020-09-26T00:00:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5MTI2Mg==", "url": "https://github.com/all-of-us/workbench/pull/4049#discussion_r495591262", "bodyText": "I like this code a lot. I can use same code pattern in other places.", "author": "aweng98", "createdAt": "2020-09-27T16:42:40Z", "path": "e2e/tests/notebook/notebook-download.spec.ts", "diffHunk": "@@ -0,0 +1,75 @@\n+import NotebookDownloadModal from 'app/page/notebook-download-modal';\n+import WorkspaceDataPage from 'app/page/workspace-data-page';\n+import {makeRandomName} from 'utils/str-utils';\n+import {findWorkspace, signIn} from 'utils/test-utils';\n+import {getPropValue} from 'utils/element-utils';\n+import {waitForFn} from 'utils/waits-utils';\n+\n+describe('Jupyter notebook download test', () => {\n+\n+  beforeEach(async () => {\n+    await signIn(page);\n+  });\n+\n+  const testDownloadModal = async (modal: NotebookDownloadModal): Promise<void> => {\n+    const checkDownloadDisabledState = async (wantDisabled: boolean) => {\n+      expect(await waitForFn(async () => {\n+        let downloadBtn = await modal.getDownloadButton();\n+        return wantDisabled == await getPropValue<boolean>(downloadBtn, 'disabled');\n+      })).toBe(true);\n+    };", "originalCommit": "007dd0999829f147ebc53dd5b94f643ad7ebf406", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}