{"pr_number": 3736, "pr_title": "[RW-4999][risk=low] User and Workspace Audit Log Admin Pages", "pr_createdAt": "2020-07-01T19:04:37Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3736", "timeline": [{"oid": "09ceec036b8318e51f8ca9ccf65d0ac32b00df06", "url": "https://github.com/all-of-us/workbench/commit/09ceec036b8318e51f8ca9ccf65d0ac32b00df06", "message": "Initial stab at user audit page\n\nCo-authored-by: Jay Carlton <oscar.j.carlton4@gmail.com>", "committedDate": "2020-06-30T20:57:42Z", "type": "commit"}, {"oid": "80fc67c2450fd2f1d44c5c3517aee9fdfc6aeb71", "url": "https://github.com/all-of-us/workbench/commit/80fc67c2450fd2f1d44c5c3517aee9fdfc6aeb71", "message": "Get data loades", "committedDate": "2020-06-30T21:38:59Z", "type": "commit"}, {"oid": "38f2b571f442b0dab340a6eae097a329aa8decb4", "url": "https://github.com/all-of-us/workbench/commit/38f2b571f442b0dab340a6eae097a329aa8decb4", "message": "added string rendering for all elements and attempted a card. needs work to display in html or actual widget", "committedDate": "2020-07-01T04:17:08Z", "type": "commit"}, {"oid": "6db0b4450cac4285448417c796ecd3ef6a15adb3", "url": "https://github.com/all-of-us/workbench/commit/6db0b4450cac4285448417c796ecd3ef6a15adb3", "message": "update TODO stuff", "committedDate": "2020-07-01T12:10:22Z", "type": "commit"}, {"oid": "cd6e5447e260a73aff3de82f79f729e8c780377f", "url": "https://github.com/all-of-us/workbench/commit/cd6e5447e260a73aff3de82f79f729e8c780377f", "message": "starting to use cards with yucky html", "committedDate": "2020-07-01T13:46:09Z", "type": "commit"}, {"oid": "a0bf868cf2e5d995da373e707768644890e4286d", "url": "https://github.com/all-of-us/workbench/commit/a0bf868cf2e5d995da373e707768644890e4286d", "message": "fix date strings", "committedDate": "2020-07-01T14:10:55Z", "type": "commit"}, {"oid": "19a3a423395b6694426b92e367d1e1b606e75d21", "url": "https://github.com/all-of-us/workbench/commit/19a3a423395b6694426b92e367d1e1b606e75d21", "message": "more fixes", "committedDate": "2020-07-01T18:58:14Z", "type": "commit"}, {"oid": "5b2fd4743efab5969bff1ff3ca30cb8b96e18583", "url": "https://github.com/all-of-us/workbench/commit/5b2fd4743efab5969bff1ff3ca30cb8b96e18583", "message": "Merge remote-tracking branch 'origin/master' into psantos-jcarlton/audit-cards", "committedDate": "2020-07-02T18:02:18Z", "type": "commit"}, {"oid": "b813818809232d3ff37d2134cbe7e2ae37f7c55b", "url": "https://github.com/all-of-us/workbench/commit/b813818809232d3ff37d2134cbe7e2ae37f7c55b", "message": "Update routing", "committedDate": "2020-07-02T18:02:39Z", "type": "commit"}, {"oid": "a009ab939232bf790ddd9d854faf48ba4202e252", "url": "https://github.com/all-of-us/workbench/commit/a009ab939232bf790ddd9d854faf48ba4202e252", "message": "Update view/html, add routing and paramaterization", "committedDate": "2020-07-02T22:12:49Z", "type": "commit"}, {"oid": "6edc651e5263ad71db9deae60cb20f9193b07af3", "url": "https://github.com/all-of-us/workbench/commit/6edc651e5263ad71db9deae60cb20f9193b07af3", "message": "sidenav support for user audit", "committedDate": "2020-07-06T18:50:58Z", "type": "commit"}, {"oid": "133314660f842ca3b7f687ee1ace31a7c8eaa085", "url": "https://github.com/all-of-us/workbench/commit/133314660f842ca3b7f687ee1ace31a7c8eaa085", "message": "much CSS", "committedDate": "2020-07-06T22:44:18Z", "type": "commit"}, {"oid": "5701d6fd119febe8bae31f6e4901d8f48a163ada", "url": "https://github.com/all-of-us/workbench/commit/5701d6fd119febe8bae31f6e4901d8f48a163ada", "message": "workspace audit working (will need to work on the text input", "committedDate": "2020-07-07T16:01:01Z", "type": "commit"}, {"oid": "13d832c530c8de6ea725f6c4cec5eb162996100a", "url": "https://github.com/all-of-us/workbench/commit/13d832c530c8de6ea725f6c4cec5eb162996100a", "message": "user audit using new audit page component", "committedDate": "2020-07-07T16:30:53Z", "type": "commit"}, {"oid": "0e7f3de799cd2e337f320dabdedfb8ae61c35cd4", "url": "https://github.com/all-of-us/workbench/commit/0e7f3de799cd2e337f320dabdedfb8ae61c35cd4", "message": "Style tweaks on card view\n\nCo-authored-by: Jay Carlton <oscar.j.carlton4@gmail.com>", "committedDate": "2020-07-08T16:19:32Z", "type": "commit"}, {"oid": "118e9cbb1bdaa3c279b9df906044db0fb02258ae", "url": "https://github.com/all-of-us/workbench/commit/118e9cbb1bdaa3c279b9df906044db0fb02258ae", "message": "Improve state management for audit component", "committedDate": "2020-07-08T21:41:21Z", "type": "commit"}, {"oid": "84f662a81290951fecd206b4794ec29f966569be", "url": "https://github.com/all-of-us/workbench/commit/84f662a81290951fecd206b4794ec29f966569be", "message": "Render total number of actions available", "committedDate": "2020-07-08T21:47:20Z", "type": "commit"}, {"oid": "80c110428a69ec2b37ab873b22816ebb45eec835", "url": "https://github.com/all-of-us/workbench/commit/80c110428a69ec2b37ab873b22816ebb45eec835", "message": "fixes & tweaks", "committedDate": "2020-07-09T13:55:51Z", "type": "commit"}, {"oid": "a7ffd0b1425bb9318d9c7a5c76ef59ef93ab0d20", "url": "https://github.com/all-of-us/workbench/commit/a7ffd0b1425bb9318d9c7a5c76ef59ef93ab0d20", "message": "Better performance of action counter", "committedDate": "2020-07-09T14:02:13Z", "type": "commit"}, {"oid": "32abbcdeaedd2467f36beb33e904e192db2296d5", "url": "https://github.com/all-of-us/workbench/commit/32abbcdeaedd2467f36beb33e904e192db2296d5", "message": "Update colors", "committedDate": "2020-07-09T14:17:08Z", "type": "commit"}, {"oid": "b58e6e3e4253e129dd9e800f0e3715ec65cc2eb9", "url": "https://github.com/all-of-us/workbench/commit/b58e6e3e4253e129dd9e800f0e3715ec65cc2eb9", "message": "Merge remote-tracking branch 'origin/master' into psantos-jcarlton/audit-cards", "committedDate": "2020-07-09T14:29:33Z", "type": "commit"}, {"oid": "7ae6e2e193e1bfe5bfbdf0956a620b6081e97e00", "url": "https://github.com/all-of-us/workbench/commit/7ae6e2e193e1bfe5bfbdf0956a620b6081e97e00", "message": "Update title, odd import issue", "committedDate": "2020-07-09T14:55:58Z", "type": "commit"}, {"oid": "9c88664bc5842ed810067aef971b91b118b6db95", "url": "https://github.com/all-of-us/workbench/commit/9c88664bc5842ed810067aef971b91b118b6db95", "message": "rename workspace audit page back to original name", "committedDate": "2020-07-09T14:57:38Z", "type": "commit"}, {"oid": "60c8f3b16c8ef3703953093a4a5ee1fdb4b62ec1", "url": "https://github.com/all-of-us/workbench/commit/60c8f3b16c8ef3703953093a4a5ee1fdb4b62ec1", "message": "sort by time desc to get latest events", "committedDate": "2020-07-09T15:01:02Z", "type": "commit"}, {"oid": "d5e3e82ff98d23ee8a5713ee041022072e356ab9", "url": "https://github.com/all-of-us/workbench/commit/d5e3e82ff98d23ee8a5713ee041022072e356ab9", "message": "Clear results for invalid queries", "committedDate": "2020-07-09T15:08:25Z", "type": "commit"}, {"oid": "69bfa11deb0c35aed888f8b209c5f589d366da4f", "url": "https://github.com/all-of-us/workbench/commit/69bfa11deb0c35aed888f8b209c5f589d366da4f", "message": "Fix max actions", "committedDate": "2020-07-09T15:11:09Z", "type": "commit"}, {"oid": "2427e21e6b92a4e7612dc06e19765d1b5a790183", "url": "https://github.com/all-of-us/workbench/commit/2427e21e6b92a4e7612dc06e19765d1b5a790183", "message": "Merge branch 'psantos-jcarlton/audit-cards' of github.com:all-of-us/workbench into psantos-jcarlton/audit-cards", "committedDate": "2020-07-09T15:17:37Z", "type": "commit"}, {"oid": "333bd1bbb8360921f31f94f18f5a41a7bc810e0d", "url": "https://github.com/all-of-us/workbench/commit/333bd1bbb8360921f31f94f18f5a41a7bc810e0d", "message": "fix message", "committedDate": "2020-07-09T15:28:40Z", "type": "commit"}, {"oid": "b179c8bd9da1f7831336bddb6235a11b25e97a9a", "url": "https://github.com/all-of-us/workbench/commit/b179c8bd9da1f7831336bddb6235a11b25e97a9a", "message": "Merge branch 'psantos-jcarlton/audit-cards' of github.com:all-of-us/workbench into psantos-jcarlton/audit-cards", "committedDate": "2020-07-09T17:00:58Z", "type": "commit"}, {"oid": "b29446d3c3b8f6479ab9e363e0cb4fb4e13d09f5", "url": "https://github.com/all-of-us/workbench/commit/b29446d3c3b8f6479ab9e363e0cb4fb4e13d09f5", "message": "pass in button description", "committedDate": "2020-07-09T17:31:07Z", "type": "commit"}, {"oid": "d3c48938d9769fbad079c110ddd1732827c0dd96", "url": "https://github.com/all-of-us/workbench/commit/d3c48938d9769fbad079c110ddd1732827c0dd96", "message": "fix test", "committedDate": "2020-07-10T17:15:35Z", "type": "commit"}, {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "url": "https://github.com/all-of-us/workbench/commit/6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "message": "fix typo", "committedDate": "2020-07-10T17:27:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcwNzE1Ng==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r453707156", "bodyText": "workaround for what?", "author": "als364", "createdAt": "2020-07-13T14:51:02Z", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -97,9 +97,11 @@ private String getTableName() {\n   public UserAuditLogQueryResponse queryEventsForUser(\n       long userDatabaseId, long limit, DateTime after, DateTime before) {\n \n+    // Workaround for", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1MzQ1MA==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454453450", "bodyText": "RW-5289. knew I forgot something.", "author": "jaycarlton", "createdAt": "2020-07-14T15:42:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcwNzE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM3Mzg2Ng==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454373866", "bodyText": "nit: 'hideable'", "author": "als364", "createdAt": "2020-07-14T13:54:55Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM3NDI3Nw==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454374277", "bodyText": "You'll have to fix this sort of thing manually, but you should run yarn lint --fix in your UI project", "author": "als364", "createdAt": "2020-07-14T13:55:25Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM3ODg2Mg==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454378862", "bodyText": "style nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n          \n          \n            \n              return <div style={{\n          \n          \n            \n                      backgroundColor: content ? 'white' : '#f0f3f5',\n          \n          \n            \n                      border: '1px solid',\n          \n          \n            \n                      boxSizing: 'border-box'\n          \n          \n            \n              }}>{content}</div>;", "author": "als364", "createdAt": "2020-07-14T14:01:36Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4MjkzNg==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454382936", "bodyText": "nit: either put rem everywhere for consistency or break it out into margin-top and margin-left or whatever this is", "author": "als364", "createdAt": "2020-07-14T14:07:36Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4NjMwNw==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454386307", "bodyText": "Pull this out of this const and into a top-level const:\nconst styles = reactStyles({\n    propertyCell: {\n        fontWeight: 600,\n        border: '1px solid'\n    }\n});\n\nand then use it below as:\n<div style={styles.propertyCell}>etc</div>", "author": "als364", "createdAt": "2020-07-14T14:12:21Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4OTQ0Ng==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454389446", "bodyText": "style nit: put the ? and : at the beginning of new lines rather than at the end of lines or infixed", "author": "als364", "createdAt": "2020-07-14T14:16:38Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NjcwOQ==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454656709", "bodyText": "Yeah, that seems to be the standard. Jagged little pill, that.", "author": "jaycarlton", "createdAt": "2020-07-14T21:29:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4OTQ0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4OTc4Ng==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454389786", "bodyText": "just use the colors directly.", "author": "als364", "createdAt": "2020-07-14T14:17:04Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ2MTEwNQ==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454461105", "bodyText": "That makes sense, but now I'm tempted to break out two new named fragments so it's obvious what's what. It's not the most intuitive data structure to work with.", "author": "jaycarlton", "createdAt": "2020-07-14T15:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4OTc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MDk5Mw==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454390993", "bodyText": "same style nit as above with how to display multi-line props", "author": "als364", "createdAt": "2020-07-14T14:18:52Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjY0Mg==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454392642", "bodyText": "backticks not necessary if you're not worried about preserving the space without doing + \" \" +\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      <div>{`${header.agent.agentUsername}`}</div>\n          \n          \n            \n                      <div>{header.agent.agentUsername}</div>", "author": "als364", "createdAt": "2020-07-14T14:21:11Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5Mzg2MA==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454393860", "bodyText": "you use this frequently, could you 1) check whether there's already a fonts style for semi-bold in a utils file somewhere and use that if it exists, and 2) if it doesn't, extract it to the top-level reactStyles const I suggested earlier", "author": "als364", "createdAt": "2020-07-14T14:22:51Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2ODY3Ng==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454668676", "bodyText": "Searching for fontWeight: 600 I see lots of places we hardcode it. I've way overspent my time budget on this already so I'm going to have to let that go for now.", "author": "jaycarlton", "createdAt": "2020-07-14T21:55:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5Mzg2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NDEyOA==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454394128", "bodyText": "I don't think that the props:  is necessary", "author": "als364", "createdAt": "2020-07-14T14:23:13Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3MDgwMg==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454670802", "bodyText": "How would you do it? Do you mean like\nconst EventBundleView = (eventBundle: AuditEventBundle) => {\n  return <div style={{marginBottom: '1rem'}}>\n    <AuditEventBundleHeaderView header={eventBundle.header}/>\n    <PropertyChangeListView propertyChanges={eventBundle.propertyChanges}/>\n  </div>;\n};\n\nIf I just make eventBundle the new argument, I have to pass each field separately when creating an EventBundleView, like\n            <EventBundleView key={index}\n                             header={eventBundle.header}\n                             propertyChanges={eventBundle.propertyChanges}/>)}\n\nSince the abstraction is that this is a view for an EventBundle, I don't think it's a win to force earlier unbundling. If I add fields to that type later for some reason, I'd expect to be able to make changes to the element that use it without changing the call sites. I think I'll keep it this way for now unless I'm missing something slick. I would likely not have created these types just to use them this way, though.", "author": "jaycarlton", "createdAt": "2020-07-14T22:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NDEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1NDUyOQ==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455254529", "bodyText": "I meant like:\nconst EventBundleView = ({eventBundle: ActionEventBundle}) => {\n[...]", "author": "als364", "createdAt": "2020-07-15T18:25:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NDEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2NzUyMg==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455367522", "bodyText": "That looks a lot slicker, but I can't seem to get it to work.\n\nI like the semantics the way they are, since I designed these data types to map in a straightforward way to visual widgets or other units of computation or display. I want the calling code (the parent element) to be able to hand over the whole object and trust that the child will handle it.", "author": "jaycarlton", "createdAt": "2020-07-15T21:34:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NDEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMTc4MQ==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455901781", "bodyText": "Ah, gotcha. Yeah, this is fine for now.", "author": "als364", "createdAt": "2020-07-16T16:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NDEyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NTQ1OA==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454395458", "bodyText": "I don't think this is necessary either", "author": "als364", "createdAt": "2020-07-14T14:24:54Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NzU2Nw==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454397567", "bodyText": "style nit for multi-line fp / stream operations:\nconst actionTypes = action.eventBundles\n    .map((eventBundle) => { return eventBundle.header.actionType; })\n    .join(' & ');", "author": "als364", "createdAt": "2020-07-14T14:27:39Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;\n+  return <div style={{marginBottom: '1rem'}}>\n+    <AuditEventBundleHeaderView header={eventBundle.header}/>\n+    <PropertyChangeListView propertyChanges={eventBundle.propertyChanges}/>\n+  </div>;\n+};\n+\n+const AuditActionCard = (props: { action: AuditAction }) => {\n+  const {action} = props;\n+  // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n+  // but turns out to be a number for some reason here. In other contexts it appears\n+  // to format itself happily though.\n+  // yyyy-MM-dd HH:mm:ss.SSS\n+  // SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+  const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n+  const actionTypes = action.eventBundles.map((eventBundle) => {", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3NTgyNA==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454675824", "bodyText": "Now i'm getting hooked on fp:\n  const actionTypes = fp.flow(\n    fp.map(fp.get('header.actionType')),\n    s => s.join(' & '))\n  (action.eventBundles);", "author": "jaycarlton", "createdAt": "2020-07-14T22:13:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NzU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1NDg4Mw==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455254883", "bodyText": "lodash is pretty great as javascript goes.", "author": "als364", "createdAt": "2020-07-15T18:25:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NzU2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5ODA2Ng==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454398066", "bodyText": "this could be spread over multiple lines for ease of reading.", "author": "als364", "createdAt": "2020-07-14T14:28:21Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;\n+  return <div style={{marginBottom: '1rem'}}>\n+    <AuditEventBundleHeaderView header={eventBundle.header}/>\n+    <PropertyChangeListView propertyChanges={eventBundle.propertyChanges}/>\n+  </div>;\n+};\n+\n+const AuditActionCard = (props: { action: AuditAction }) => {\n+  const {action} = props;\n+  // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n+  // but turns out to be a number for some reason here. In other contexts it appears\n+  // to format itself happily though.\n+  // yyyy-MM-dd HH:mm:ss.SSS\n+  // SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+  const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n+  const actionTypes = action.eventBundles.map((eventBundle) => {\n+    return eventBundle.header.actionType;\n+  }).join(' & ');\n+  return (\n+      <ActionAuditCardBase>\n+        <FlexRow style={{\n+          fontWeight: 200,\n+          textAlign: 'left',\n+          fontSize: '0.825rem',\n+          padding: '5px'\n+        }}><div>{timeString}</div><div style={{marginLeft: 'auto'}}>{actionTypes}</div>", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5ODIyMw==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454398223", "bodyText": "nit: put a newline above this", "author": "als364", "createdAt": "2020-07-14T14:28:32Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;\n+  return <div style={{marginBottom: '1rem'}}>\n+    <AuditEventBundleHeaderView header={eventBundle.header}/>\n+    <PropertyChangeListView propertyChanges={eventBundle.propertyChanges}/>\n+  </div>;\n+};\n+\n+const AuditActionCard = (props: { action: AuditAction }) => {\n+  const {action} = props;\n+  // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n+  // but turns out to be a number for some reason here. In other contexts it appears\n+  // to format itself happily though.\n+  // yyyy-MM-dd HH:mm:ss.SSS\n+  // SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+  const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n+  const actionTypes = action.eventBundles.map((eventBundle) => {\n+    return eventBundle.header.actionType;\n+  }).join(' & ');\n+  return (\n+      <ActionAuditCardBase>\n+        <FlexRow style={{\n+          fontWeight: 200,\n+          textAlign: 'left',\n+          fontSize: '0.825rem',\n+          padding: '5px'\n+        }}><div>{timeString}</div><div style={{marginLeft: 'auto'}}>{actionTypes}</div>\n+        </FlexRow>\n+        {action.eventBundles.map((eventBundle, index) =>\n+            <EventBundleView key={index} eventBundle={eventBundle}/>)}\n+      </ActionAuditCardBase>\n+  );\n+};\n+export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5ODMxMw==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454398313", "bodyText": "this is probably extraneous by this point", "author": "als364", "createdAt": "2020-07-14T14:28:39Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;\n+  return <div style={{marginBottom: '1rem'}}>\n+    <AuditEventBundleHeaderView header={eventBundle.header}/>\n+    <PropertyChangeListView propertyChanges={eventBundle.propertyChanges}/>\n+  </div>;\n+};\n+\n+const AuditActionCard = (props: { action: AuditAction }) => {\n+  const {action} = props;\n+  // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n+  // but turns out to be a number for some reason here. In other contexts it appears\n+  // to format itself happily though.\n+  // yyyy-MM-dd HH:mm:ss.SSS\n+  // SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+  const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n+  const actionTypes = action.eventBundles.map((eventBundle) => {\n+    return eventBundle.header.actionType;\n+  }).join(' & ');\n+  return (\n+      <ActionAuditCardBase>\n+        <FlexRow style={{\n+          fontWeight: 200,\n+          textAlign: 'left',\n+          fontSize: '0.825rem',\n+          padding: '5px'\n+        }}><div>{timeString}</div><div style={{marginLeft: 'auto'}}>{actionTypes}</div>\n+        </FlexRow>\n+        {action.eventBundles.map((eventBundle, index) =>\n+            <EventBundleView key={index} eventBundle={eventBundle}/>)}\n+      </ActionAuditCardBase>\n+  );\n+};\n+export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+  const {actions} = props;\n+  console.log(`actions length ${actions.length}`);", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwMTkxMw==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454401913", "bodyText": "nit: workspacd -> workspace", "author": "als364", "createdAt": "2020-07-14T14:33:20Z", "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,145 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import { useParams } from 'react-router-dom';\n+import {AuditLogEntry} from '../../../generated';\n+import {AuditAction} from '../../../generated/model/auditAction';\n+\n+\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspacd audit)", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwMjA1OQ==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454402059", "bodyText": "nit: assmptions -> assumptions", "author": "als364", "createdAt": "2020-07-14T14:33:32Z", "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,145 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import { useParams } from 'react-router-dom';\n+import {AuditLogEntry} from '../../../generated';\n+import {AuditAction} from '../../../generated/model/auditAction';\n+\n+\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspacd audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assmptions: the path parameter is called initially with the audit API subject.", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMTY4MA==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454411680", "bodyText": "extraneous?", "author": "als364", "createdAt": "2020-07-14T14:45:51Z", "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,145 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import { useParams } from 'react-router-dom';\n+import {AuditLogEntry} from '../../../generated';\n+import {AuditAction} from '../../../generated/model/auditAction';\n+\n+\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspacd audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assmptions: the path parameter is called initially with the audit API subject.\n+//   (this will need revisiting for multi-subject queries)\n+export interface AuditPageProps {\n+  initialAuditSubject?: string;\n+  auditSubjectType: string;\n+  queryAuditLog: (subject: string) => Promise<GenericAuditQueryResult>;\n+  getNextAuditPath: (subject: string) => string;\n+  debug: boolean;\n+  buttonLabel?: string;\n+}\n+\n+const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, buttonLabel}) => {\n+  const [auditSubject, setAuditSubject] = useState(initialAuditSubject);\n+  const [loadNextSubject, setLoadNextSubject] = useState(false);\n+  useEffect(() => {\n+    loadNextSubject && setLoadNextSubject(false);\n+  }, [loadNextSubject]);\n+\n+  return <React.Fragment>\n+    {loadNextSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}\n+    <TextInputWithLabel\n+      containerStyle={{display: 'inline-block'}}\n+      style={{width: '15rem', margin: '1rem'}}\n+      labelText = {buttonLabel || auditSubjectType}\n+      value = {auditSubject}\n+      onChange = {setAuditSubject}\n+    />\n+    <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}} disabled={fp.isEmpty(auditSubject)} onClick={() => setLoadNextSubject(true)}>\n+    Audit\n+    </Button>\n+  </React.Fragment>;\n+};\n+\n+const NumActions = ({onChange, totalActions}) => {\n+  const [displayNum, setDisplayNum] = useState(20);\n+\n+  useEffect(() => {\n+    const timeoutId = setTimeout(() => onChange(displayNum), 250);\n+    return () => clearTimeout(timeoutId);\n+  }, [displayNum]);\n+\n+  return <div>\n+    <label style={{\n+      fontSize: 14,\n+      display: 'block',\n+      color: colors.primary,\n+      lineHeight: '22px',\n+      fontWeight: 600,\n+      marginRight: '0.25rem'\n+    }}>{`Number of Actions to Display (${totalActions} available)`}</label>\n+    <NumberInput value={Math.min(displayNum, totalActions)} min={1} max={totalActions} style={{width: '4rem'}} onChange={setDisplayNum}/>\n+  </div>;\n+};\n+\n+export const AuditPageComponent = (props: AuditPageProps) => {\n+  const {initialAuditSubject, queryAuditLog, getNextAuditPath, debug, auditSubjectType, buttonLabel} = props;\n+  const emptyResult = {actions: [], logEntries: [], sourceId: 0, query: ''};\n+  const [loading, setLoading] = useState(true);\n+  const [queryResult, setQueryResult] = useState<GenericAuditQueryResult>(emptyResult);\n+  const [displayNum, setDisplayNum] = useState(20);\n+  const {actions, sourceId, query} = queryResult;\n+\n+  useEffect(() => {\n+    if (debug) {", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3NDM3Ng==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454474376", "bodyText": "I'd like to have something like Log Levels that come with the Java loggers, but it looks like I don't get that for free. Basically I want it to be an easier experience doing the next api type.\nMaybe changing debug to verboseLogging would be more respectable?", "author": "jaycarlton", "createdAt": "2020-07-14T16:13:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMTY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1MTAyMw==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455251023", "bodyText": "I guess what I don't understand is why you'd console-log information that could be displayed on the screen.", "author": "als364", "createdAt": "2020-07-15T18:19:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMTY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNTExMw==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455315113", "bodyText": "I agree with Ariel. When developing it wouldn't/shouldn't be difficult to add a console.log of query results if needed. I am not a fan of leaving debug statements in, even if hidden behind a flag.\nOne reason for this is these statements can start leaking into the console unintentionally if we allow console statements in the code base at all. Having a lot of console messages can add noise to a search and the code. Unfortunately, right now there are a bunch of console statements for errors in the code rather than error notifications that are useful to the user (something showing up in the UI). I would prefer to not add more.\nPersonally, I would like to see a lint rule added in the not too distant future prohibiting the use of console.log. I believe that this helps keep the UI code clean and forces good (at least better) error notifications for users.", "author": "petesantos", "createdAt": "2020-07-15T20:14:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMTY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MDkyOA==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455360928", "bodyText": "I hear ya. Without some kind of a log level we can adjust it's hard to have conditional output. I wouldn't kill all logging until there was a legitimate way to have optional diagnostic statements that end users couldn't turn on.\nCan we have an unobtrusive widget on the page to show it? Or even just a button launching a modal? Call it [Show BigQuery SQL] or something.", "author": "jaycarlton", "createdAt": "2020-07-15T21:25:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMTY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMTY0Mg==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455901642", "bodyText": "Yes, I'd prefer to have it on the screen, behind a fold (e.g. the admin or profile dropdowns in the sidebar). I would personally find a modal annoying.", "author": "als364", "createdAt": "2020-07-16T16:07:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMTY4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNDA2OA==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454414068", "bodyText": "do we want this to work like this for ALL react routes?", "author": "als364", "createdAt": "2020-07-14T14:49:02Z", "path": "ui/src/app/components/app-router.tsx", "diffHunk": "@@ -42,7 +42,7 @@ export const AppRoute = ({path, data = {}, component: Component}): React.ReactEl\n   const routeParams = useParams();\n   const routeHistory = useHistory();\n \n-  return <Route path={path} >\n+  return <Route exact={true} path={path} >", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1NzI3Nw==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454457277", "bodyText": "@petesantos what say you? I'm just happy it works at all.", "author": "jaycarlton", "createdAt": "2020-07-14T15:47:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNDA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MzcyNA==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455083724", "bodyText": "Let me test this - I intended to open another PR for this - my apologies for that slipping through.\nIn my original testing with react router, it seemed that exact routes are a bit more predictable.", "author": "petesantos", "createdAt": "2020-07-15T14:13:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNDA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzNDE0MQ==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455134141", "bodyText": "Tested - I don't see any issues. If we need to we can pass in a parameter to disable exact matching", "author": "petesantos", "createdAt": "2020-07-15T15:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNDA2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjA2MQ==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454416061", "bodyText": "what ticket captures this work?", "author": "als364", "createdAt": "2020-07-14T14:51:29Z", "path": "ui/src/app/pages/admin/user-audit.tsx", "diffHunk": "@@ -0,0 +1,46 @@\n+import {profileApi} from 'app/services/swagger-fetch-clients';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import {useParams} from 'react-router-dom';\n+import {AuditAction, AuditEventBundle} from '../../../generated';\n+import {AuditPageComponent} from '../../components/admin/audit-page-component';\n+\n+const getAuditLog = (subject: string) => {\n+  const bqRowLimit = 1000; // Workspaces take many rows because of the Research Purpose fields\n+  return profileApi().getAuditLogEntries(subject, bqRowLimit);\n+};\n+\n+const queryAuditLog = (subject: string) => {\n+  return getAuditLog(subject).then((queryResult) => {\n+    console.log(queryResult.query);\n+    return {\n+      actions: queryResult.actions,\n+      sourceId: queryResult.userDatabaseId,\n+      query: queryResult.query,\n+      logEntries: queryResult.logEntries\n+    };\n+  }).then(genericQueryResult => {\n+    // TODO(jaycarlton): This is a workaround for LOGIN event issues on the backend. Can be removed when that patch is in.", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1NzY1OQ==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454457659", "bodyText": "https://precisionmedicineinitiative.atlassian.net/browse/RW-5249", "author": "jaycarlton", "createdAt": "2020-07-14T15:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1NTM5NA==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455255394", "bodyText": "sorry, I wasn't clear - can you put that information in the comment?", "author": "als364", "createdAt": "2020-07-15T18:26:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjEzMw==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454416133", "bodyText": "is this necessary?", "author": "als364", "createdAt": "2020-07-14T14:51:37Z", "path": "ui/src/app/pages/admin/user-audit.tsx", "diffHunk": "@@ -0,0 +1,46 @@\n+import {profileApi} from 'app/services/swagger-fetch-clients';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import {useParams} from 'react-router-dom';\n+import {AuditAction, AuditEventBundle} from '../../../generated';\n+import {AuditPageComponent} from '../../components/admin/audit-page-component';\n+\n+const getAuditLog = (subject: string) => {\n+  const bqRowLimit = 1000; // Workspaces take many rows because of the Research Purpose fields\n+  return profileApi().getAuditLogEntries(subject, bqRowLimit);\n+};\n+\n+const queryAuditLog = (subject: string) => {\n+  return getAuditLog(subject).then((queryResult) => {\n+    console.log(queryResult.query);", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1ODQ1Nw==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454458457", "bodyText": "I like it, because it gives you a jumping-off point in BigQuery for follow-up exploration (not to mention debugging). It would be nice to show it (optionally) in the UI.", "author": "jaycarlton", "createdAt": "2020-07-14T15:49:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjEzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjg1MA==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454416850", "bodyText": "You probably didn't mean to do this twice and you probably also should explain what you mean by this", "author": "als364", "createdAt": "2020-07-14T14:52:33Z", "path": "ui/src/app/utils/audit-utils.tsx", "diffHunk": "@@ -0,0 +1,35 @@\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTarget,\n+  AuditTargetPropertyChange\n+} from '../../generated';\n+\n+// Type sold separately\n+// Type sold separately", "originalCommit": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1ODk2Mw==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454458963", "bodyText": "that's left over. I'll collapse this whole file back into one of the others since there's only one place we need to do this now.", "author": "jaycarlton", "createdAt": "2020-07-14T15:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1MDgwNw==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454650807", "bodyText": "Actually there was enough reuse to keep this file. Cleaned up the old comments and dead method.", "author": "jaycarlton", "createdAt": "2020-07-14T21:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjg1MA=="}], "type": "inlineReview"}, {"oid": "67bd670e63c7609194a87f741f2320db5d75e704", "url": "https://github.com/all-of-us/workbench/commit/67bd670e63c7609194a87f741f2320db5d75e704", "message": "Merge branch 'master' into psantos-jcarlton/audit-cards", "committedDate": "2020-07-14T15:54:02Z", "type": "commit"}, {"oid": "3ed75b4b71184a7f76b1fb48aaa4acbdf8cb73be", "url": "https://github.com/all-of-us/workbench/commit/3ed75b4b71184a7f76b1fb48aaa4acbdf8cb73be", "message": "pass linting; use fp", "committedDate": "2020-07-14T17:50:58Z", "type": "commit"}, {"oid": "563f0b5941a0a146c85a1139ad9bc6ad6e001867", "url": "https://github.com/all-of-us/workbench/commit/563f0b5941a0a146c85a1139ad9bc6ad6e001867", "message": "fixes", "committedDate": "2020-07-14T21:38:50Z", "type": "commit"}, {"oid": "d0d304ccb7ff9de6126f01708846c2e0026517e6", "url": "https://github.com/all-of-us/workbench/commit/d0d304ccb7ff9de6126f01708846c2e0026517e6", "message": "fixes from PR", "committedDate": "2020-07-14T22:18:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMjcyOA==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455102728", "bodyText": "I am going to add a comment here to make it clear what the purpose of this is:\nTo debounce the input action. Without this it will re-render immediately after every number change.", "author": "petesantos", "createdAt": "2020-07-15T14:37:58Z", "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,147 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import {AuditAction, AuditLogEntry} from 'generated';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspace audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assumptions: the path parameter is called initially with the audit API subject.\n+//   (this will need revisiting for multi-subject queries)\n+export interface AuditPageProps {\n+  initialAuditSubject?: string;\n+  auditSubjectType: string;\n+  queryAuditLog: (subject: string) => Promise<GenericAuditQueryResult>;\n+  getNextAuditPath: (subject: string) => string;\n+  logVerbose: boolean;\n+  buttonLabel?: string;\n+}\n+\n+const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, buttonLabel}) => {\n+  const [auditSubject, setAuditSubject] = useState(initialAuditSubject);\n+  const [loadNextSubject, setLoadNextSubject] = useState(false);\n+  useEffect(() =>  {\n+    if (loadNextSubject) {\n+      setLoadNextSubject(false);\n+    }\n+  }, [loadNextSubject]);\n+\n+  return <React.Fragment>\n+    {loadNextSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}\n+    <TextInputWithLabel\n+      containerStyle={{display: 'inline-block'}}\n+      style={{width: '15rem', margin: '1rem'}}\n+      labelText = {buttonLabel || auditSubjectType}\n+      value = {auditSubject}\n+      onChange = {setAuditSubject}\n+    />\n+    <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}}\n+            disabled={fp.isEmpty(auditSubject)}\n+            onClick={() => setLoadNextSubject(true)}>\n+    Audit\n+    </Button>\n+  </React.Fragment>;\n+};\n+\n+const NumActions = ({onChange, totalActions}) => {\n+  const [displayNum, setDisplayNum] = useState(20);\n+\n+  useEffect(() => {", "originalCommit": "d0d304ccb7ff9de6126f01708846c2e0026517e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzNDkyMQ==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455134921", "bodyText": "I added a useDebounce hook rather than a code comment. Hopefully this will make it clearer in the code what we are doing rather than using a comment to explain.", "author": "petesantos", "createdAt": "2020-07-15T15:20:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMjcyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MjYxMg==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455362612", "bodyText": "Yeah, I remember it from a EE course. It does seem to help.", "author": "jaycarlton", "createdAt": "2020-07-15T21:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMjcyOA=="}], "type": "inlineReview"}, {"oid": "5c9bd7e4bf70ffe80f00179dc89f179040da0061", "url": "https://github.com/all-of-us/workbench/commit/5c9bd7e4bf70ffe80f00179dc89f179040da0061", "message": "Add useDebounce hook", "committedDate": "2020-07-15T15:13:38Z", "type": "commit"}, {"oid": "791273347a06ceff56da50a0bd846f25022c64b1", "url": "https://github.com/all-of-us/workbench/commit/791273347a06ceff56da50a0bd846f25022c64b1", "message": "Merge branch 'psantos-jcarlton/audit-cards' of github.com:all-of-us/workbench into psantos-jcarlton/audit-cards", "committedDate": "2020-07-15T15:14:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwNTA3Nw==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455205077", "bodyText": "OK. How did this bit relate to the rest of the PR?", "author": "jaycarlton", "createdAt": "2020-07-15T17:13:16Z", "path": "ui/src/app/utils/index.tsx", "diffHunk": "@@ -527,3 +529,9 @@ export function renderUSD(value: number) {\n   }\n }\n \n+export const useDebounce = (fn: Function, updateList = [], ms = 250) => {", "originalCommit": "791273347a06ceff56da50a0bd846f25022c64b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwODMxMA==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455208310", "bodyText": "Take a look at this line Line 76 in audit-page-component - the github link doesn't seem to work that well.\nDebouncing is a generally useful pattern, so rather than coding it up in the useEffect and leaving it up to the developer to figure out what the effect is doing (or adding comments), I created a custom hook useDebounce. Since this is a generally useful thing I put it in our utils file. This can be reused by any component that wants to utilize debounce functionality.", "author": "petesantos", "createdAt": "2020-07-15T17:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwNTA3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM1ODU0MA==", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455358540", "bodyText": "yeah, a debouncing input box would be nice.", "author": "jaycarlton", "createdAt": "2020-07-15T21:20:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwNTA3Nw=="}], "type": "inlineReview"}, {"oid": "e56ef237428f1d7e85d2c96ad2a10d0704a947e5", "url": "https://github.com/all-of-us/workbench/commit/e56ef237428f1d7e85d2c96ad2a10d0704a947e5", "message": "Merge branch 'master' into psantos-jcarlton/audit-cards", "committedDate": "2020-07-15T21:17:40Z", "type": "commit"}, {"oid": "78d0aedb52d2625a18cb3123fc51abf6f63742b9", "url": "https://github.com/all-of-us/workbench/commit/78d0aedb52d2625a18cb3123fc51abf6f63742b9", "message": "fixes & remove console output, replacing with button to download query and link to BQ console", "committedDate": "2020-07-16T15:16:12Z", "type": "commit"}, {"oid": "39c9ec1b33ef19e6ab3c9061ef6a31c6d8da2a0e", "url": "https://github.com/all-of-us/workbench/commit/39c9ec1b33ef19e6ab3c9061ef6a31c6d8da2a0e", "message": "Merge branch 'master' into psantos-jcarlton/audit-cards", "committedDate": "2020-07-17T13:59:12Z", "type": "commit"}, {"oid": "38bae3e99e1901ec1247bd4564b9356fba0d5a53", "url": "https://github.com/all-of-us/workbench/commit/38bae3e99e1901ec1247bd4564b9356fba0d5a53", "message": "pr fixes", "committedDate": "2020-07-17T14:52:42Z", "type": "commit"}]}