{"pr_number": 3110, "pr_title": "[RW-3685][risk=low] Add a config variable controlling invitation key verification", "pr_createdAt": "2020-02-10T15:45:58Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3110", "timeline": [{"oid": "046ef319b964122b7b6a7abd06549e0c6a8c4ed3", "url": "https://github.com/all-of-us/workbench/commit/046ef319b964122b7b6a7abd06549e0c6a8c4ed3", "message": "WIP adding new flag.", "committedDate": "2020-02-12T13:21:34Z", "type": "commit"}, {"oid": "92d645210f25e8e919ebf14630118d9935a94791", "url": "https://github.com/all-of-us/workbench/commit/92d645210f25e8e919ebf14630118d9935a94791", "message": "Add feature flag and controller integrations.", "committedDate": "2020-02-12T13:21:34Z", "type": "commit"}, {"oid": "b7a4ef9a91fd8df874955359f7c498bf369cb3ab", "url": "https://github.com/all-of-us/workbench/commit/b7a4ef9a91fd8df874955359f7c498bf369cb3ab", "message": "Add UI support for requireInvitationKey flag.", "committedDate": "2020-02-12T13:21:34Z", "type": "commit"}, {"oid": "ac18b98f1c876287ee57db2a2cf635c978bf383a", "url": "https://github.com/all-of-us/workbench/commit/ac18b98f1c876287ee57db2a2cf635c978bf383a", "message": "Fix tests.", "committedDate": "2020-02-12T13:21:34Z", "type": "commit"}, {"oid": "ac18b98f1c876287ee57db2a2cf635c978bf383a", "url": "https://github.com/all-of-us/workbench/commit/ac18b98f1c876287ee57db2a2cf635c978bf383a", "message": "Fix tests.", "committedDate": "2020-02-12T13:21:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MTY3OA==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378251678", "bodyText": "GitHub is kinda mangling the diff here. The key change made was to extract the inner class and turn it into a top-level component called SignInReactImpl. This allows us to refer to that class from the unit test, which this PR uses to verify that the set of sign-in steps is correct when invitation key verification is turned off.", "author": "gjuggler", "createdAt": "2020-02-12T13:33:34Z", "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -127,127 +127,177 @@ interface SignInState {\n   termsOfServiceVersion?: number;\n }\n \n-export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(", "originalCommit": "ac18b98f1c876287ee57db2a2cf635c978bf383a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMwNTEwNg==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378305106", "bodyText": "The diff looks much cleaner if you go \"gear menu --> hide whitespace changes\", or this link: https://github.com/all-of-us/workbench/pull/3110/files?utf8=%E2%9C%93&diff=unified&w=1", "author": "gjuggler", "createdAt": "2020-02-12T14:59:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MTY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3ODQzNw==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378478437", "bodyText": "it's mangled even with but at least it highlights the differences", "author": "als364", "createdAt": "2020-02-12T19:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MTY3OA=="}], "type": "inlineReview"}, {"oid": "98fbf61ff9b165eb5aaffd3bf2328473ac865275", "url": "https://github.com/all-of-us/workbench/commit/98fbf61ff9b165eb5aaffd3bf2328473ac865275", "message": "Fix tests, add a small comment.", "committedDate": "2020-02-12T14:04:59Z", "type": "commit"}, {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71", "url": "https://github.com/all-of-us/workbench/commit/7ad31366b9afad98c560483a3c6e8f051a72cb71", "message": "Fix clock increment issue.", "committedDate": "2020-02-12T14:47:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1NTE5NQ==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378455195", "bodyText": "Ooh. Will this mean that we'll no longer have to create a WorkbenchConfigProvider per test?", "author": "als364", "createdAt": "2020-02-12T19:10:16Z", "path": "api/build.gradle", "diffHunk": "@@ -293,6 +293,10 @@ sourceSets {\n     runtimeClasspath += generated.output\n   }\n   test {\n+    // Allow unit tests to directly load config files.\n+    resources {\n+      srcDir \"config/\"", "originalCommit": "7ad31366b9afad98c560483a3c6e8f051a72cb71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUyODQwNw==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378528407", "bodyText": "This specific change allows us to load the config_test.json by default from within unit tests. IMO this is a realistic way to set up our tests, e.g. by default our unit & integration tests are configured the same way they are in \"test\" environment.", "author": "gjuggler", "createdAt": "2020-02-12T21:40:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1NTE5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDUxMQ==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378470511", "bodyText": "With a name like this, I'd expect everything to extend it. Can you call this something that makes it clearer this class is intended for composition? Maybe something like WithWorkbenchConfig?", "author": "als364", "createdAt": "2020-02-12T19:39:10Z", "path": "api/src/test/java/org/pmiops/workbench/api/BaseControllerTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.pmiops.workbench.api;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Random;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.test.FakeLongRandom;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public abstract class BaseControllerTest {", "originalCommit": "7ad31366b9afad98c560483a3c6e8f051a72cb71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzMzM5NQ==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378533395", "bodyText": "Hmm, good point. My intention here would be for this to be a base class extended by all other test classes (I don't think there's enough variability in our tests to warrant full composition.\nBut given the number of controller test cases, I didn't want to bite this off as part of this PR. I filed https://precisionmedicineinitiative.atlassian.net/browse/RW-4443 and added some class-level comments clarifying the intent.", "author": "gjuggler", "createdAt": "2020-02-12T21:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0NTI5Ng==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378545296", "bodyText": "Works for me. Can you coordinate with Joel to put this on the list of best practices things?", "author": "als364", "createdAt": "2020-02-12T22:17:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDUxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTQ0OQ==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378475449", "bodyText": "extraneous", "author": "als364", "createdAt": "2020-02-12T19:48:11Z", "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -644,24 +660,8 @@ private void assertUser(\n     assertThat(user.getFamilyName()).isEqualTo(familyName);\n     assertThat(user.getGivenName()).isEqualTo(givenName);\n     assertThat(user.getDataAccessLevelEnum()).isEqualTo(dataAccessLevel);\n-    assertThat(user.getFirstSignInTime()).isEqualTo(firstSignInTime);\n+    assertThat(user.getFirstSignInTime().getTime()).isEqualTo(firstSignInTime.getTime());\n+    // assertThat(user.getFirstSignInTime()).isEqualTo(firstSignInTime);", "originalCommit": "7ad31366b9afad98c560483a3c6e8f051a72cb71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzMzcxNw==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378533717", "bodyText": "Yep, sorry. I'd been mucking with debugging some errors while refactoring the tests, forgot to clean up.", "author": "gjuggler", "createdAt": "2020-02-12T21:51:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTU2OQ==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378475569", "bodyText": "validate", "author": "als364", "createdAt": "2020-02-12T19:48:23Z", "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -184,16 +184,21 @@ public String freeTierBillingAccountName() {\n     public String host;\n   }\n \n-  // The access object specifies whether each of the following access requirements block access\n-  // to the workbench.\n+  // Config related to user sign-up and registration, including access modules and controls around\n+  // the sign-up flow.\n   public static class AccessConfig {\n     // Allows a user to bypass their own access modules. This is used for testing purposes so that\n     // We can give control over 3rd party access modules\n     public boolean unsafeAllowSelfBypass;\n+    // These booleans control whether each of our core access modules are enabled per environment.\n     public boolean enableComplianceTraining;\n     public boolean enableEraCommons;\n     public boolean enableDataUseAgreement;\n     public boolean enableBetaAccess;\n+    // Controls whether an invitation key is required for user creation. When true, the account\n+    // creation UI will show an invitation key form, and the server-side will valide the key before", "originalCommit": "7ad31366b9afad98c560483a3c6e8f051a72cb71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNjU5OQ==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378536599", "bodyText": "Done", "author": "gjuggler", "createdAt": "2020-02-12T21:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTcwOQ==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378475709", "bodyText": "valide -> validate", "author": "als364", "createdAt": "2020-02-12T19:48:38Z", "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -184,16 +184,21 @@ public String freeTierBillingAccountName() {\n     public String host;\n   }\n \n-  // The access object specifies whether each of the following access requirements block access\n-  // to the workbench.\n+  // Config related to user sign-up and registration, including access modules and controls around\n+  // the sign-up flow.\n   public static class AccessConfig {\n     // Allows a user to bypass their own access modules. This is used for testing purposes so that\n     // We can give control over 3rd party access modules\n     public boolean unsafeAllowSelfBypass;\n+    // These booleans control whether each of our core access modules are enabled per environment.\n     public boolean enableComplianceTraining;\n     public boolean enableEraCommons;\n     public boolean enableDataUseAgreement;\n     public boolean enableBetaAccess;\n+    // Controls whether an invitation key is required for user creation. When true, the account\n+    // creation UI will show an invitation key form, and the server-side will valide the key before", "originalCommit": "7ad31366b9afad98c560483a3c6e8f051a72cb71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNjU3Ng==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378536576", "bodyText": "Done", "author": "gjuggler", "createdAt": "2020-02-12T21:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3Nzg2Mg==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378477862", "bodyText": "This should be moved up to the new shallowComponent in line 23.", "author": "als364", "createdAt": "2020-02-12T19:52:39Z", "path": "ui/src/app/pages/login/sign-in.spec.tsx", "diffHunk": "@@ -74,7 +80,7 @@ describe('SignInReact', () => {\n   it('should handle sign-up flow for legacy account creation', () => {\n     // To correctly shallow-render this component wrapped by two HOCs, we need to add two extra\n     // .shallow() calls at the end.", "originalCommit": "7ad31366b9afad98c560483a3c6e8f051a72cb71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNjg2NQ==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378536865", "bodyText": "Thanks \u2013\u00a0done.", "author": "gjuggler", "createdAt": "2020-02-12T21:58:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3Nzg2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3Nzg5Ng==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378477896", "bodyText": "And so should this.", "author": "als364", "createdAt": "2020-02-12T19:52:44Z", "path": "ui/src/app/pages/login/sign-in.spec.tsx", "diffHunk": "@@ -97,7 +103,7 @@ describe('SignInReact', () => {\n \n     // To correctly shallow-render this component wrapped by two HOCs, we need to add two extra\n     // .shallow() calls at the end.", "originalCommit": "7ad31366b9afad98c560483a3c6e8f051a72cb71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNjkyMQ==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378536921", "bodyText": "Done.", "author": "gjuggler", "createdAt": "2020-02-12T21:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3Nzg5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3OTQwNA==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378479404", "bodyText": "nit: I'd prefer to just see separate lists returned in each of these cases. In this case, we're not going to change what enableNewAccountCreation or requireInvitationKey means.", "author": "als364", "createdAt": "2020-02-12T19:55:37Z", "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -127,127 +127,177 @@ interface SignInState {\n   termsOfServiceVersion?: number;\n }\n \n-export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(\n-  class extends React.Component<SignInProps, SignInState> {\n+/**\n+ * The inner / implementation SignIn component. This class should only be rendered via the\n+ * SignInReact method, which wraps this with the expected higher-order components.\n+ */\n+export class SignInReactImpl extends React.Component<SignInProps, SignInState> {\n \n-    constructor(props: SignInProps) {\n-      super(props);\n-      this.state = {\n-        currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n-        invitationKey: null,\n-        termsOfServiceVersion: null,\n-        // This defines the profile state for a new user flow. This will get passed to each\n-        // step component as a prop. When each sub-step completes, it will pass the updated Profile\n-        // data in its onComplete callback.\n-        profile: this.createEmptyProfile()\n-      };\n-    }\n+  constructor(props: SignInProps) {\n+    super(props);\n+    this.state = {\n+      currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n+      invitationKey: null,\n+      termsOfServiceVersion: null,\n+      // This defines the profile state for a new user flow. This will get passed to each\n+      // step component as a prop. When each sub-step completes, it will pass the updated Profile\n+      // data in its onComplete callback.\n+      profile: this.createEmptyProfile()\n+    };\n+  }\n \n-    createEmptyProfile(): Profile {\n-      return {\n-        // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n-        // profile creation, this field is populated with the full email address.\n-        username: '',\n-        dataAccessLevel: DataAccessLevel.Unregistered,\n-        givenName: '',\n-        familyName: '',\n-        contactEmail: '',\n-        currentPosition: '',\n-        organization: '',\n-        areaOfResearch: '',\n-        address: {\n-          streetAddress1: '',\n-          streetAddress2: '',\n-          city: '',\n-          state: '',\n-          country: '',\n-          zipCode: '',\n+  private createEmptyProfile(): Profile {\n+    return {\n+      // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n+      // profile creation, this field is populated with the full email address.\n+      username: '',\n+      dataAccessLevel: DataAccessLevel.Unregistered,\n+      givenName: '',\n+      familyName: '',\n+      contactEmail: '',\n+      currentPosition: '',\n+      organization: '',\n+      areaOfResearch: '',\n+      address: {\n+        streetAddress1: '',\n+        streetAddress2: '',\n+        city: '',\n+        state: '',\n+        country: '',\n+        zipCode: '',\n+      },\n+      institutionalAffiliations: [\n+        // We only allow entering a single institutional affiliation from the create account\n+        // page, so we pre-fill a single empty entry which will be bound to the AccountCreation\n+        // form.\n+        {\n+          institution: undefined,\n+          nonAcademicAffiliation: undefined,\n+          role: undefined,\n         },\n-        institutionalAffiliations: [\n-          // We only allow entering a single institutional affiliation from the create account\n-          // page, so we pre-fill a single empty entry which will be bound to the AccountCreation\n-          // form.\n-          {\n-            institution: undefined,\n-            nonAcademicAffiliation: undefined,\n-            role: undefined,\n-          },\n-        ],\n-        demographicSurvey: {},\n-        degrees: [] as Degree[],\n-      };\n+      ],\n+      demographicSurvey: {},\n+      degrees: [] as Degree[],\n+    };\n+  }\n+\n+  componentDidMount() {\n+    document.body.style.backgroundColor = colors.light;\n+    this.props.onInit();\n+  }\n+\n+  /**\n+   * Creates the appropriate set of steps based on the server-side config.\n+   *\n+   * Made visible for ease of unit-testing.\n+   */\n+  public getAccountCreationSteps(): Array<SignInStep> {\n+    let steps = [\n+      SignInStep.LANDING,\n+      SignInStep.INVITATION_KEY,\n+      SignInStep.TERMS_OF_SERVICE,\n+      SignInStep.ACCOUNT_CREATION,\n+      SignInStep.DEMOGRAPHIC_SURVEY,\n+      SignInStep.SUCCESS_PAGE\n+    ];\n+\n+    const {enableNewAccountCreation, requireInvitationKey} = this.props.serverConfig;\n+\n+    if (!enableNewAccountCreation) {", "originalCommit": "7ad31366b9afad98c560483a3c6e8f051a72cb71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNzIzMw==", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378537233", "bodyText": "good idea \u2013\u00a0done.", "author": "gjuggler", "createdAt": "2020-02-12T21:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3OTQwNA=="}], "type": "inlineReview"}, {"oid": "8cdfdfd1a4870ce59d8bd806ce1bdc97a5f1c145", "url": "https://github.com/all-of-us/workbench/commit/8cdfdfd1a4870ce59d8bd806ce1bdc97a5f1c145", "message": "PR feedback.", "committedDate": "2020-02-12T22:02:44Z", "type": "commit"}]}