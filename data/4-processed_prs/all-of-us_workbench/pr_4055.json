{"pr_number": 4055, "pr_title": "[RW-5420][risk=no] Runtime operations store", "pr_createdAt": "2020-09-23T20:10:41Z", "pr_url": "https://github.com/all-of-us/workbench/pull/4055", "timeline": [{"oid": "a319e28283ffc51e6c4618e434c3e68c9c1b56d8", "url": "https://github.com/all-of-us/workbench/commit/a319e28283ffc51e6c4618e434c3e68c9c1b56d8", "message": "unborking rebase", "committedDate": "2020-09-21T19:45:13Z", "type": "commit"}, {"oid": "db02a3fe9e27beea884c42576a015d34eddb73db", "url": "https://github.com/all-of-us/workbench/commit/db02a3fe9e27beea884c42576a015d34eddb73db", "message": "shelving...", "committedDate": "2020-09-22T14:49:41Z", "type": "commit"}, {"oid": "26a8057d51e18edacc7289bd7a0c60878fec1e5e", "url": "https://github.com/all-of-us/workbench/commit/26a8057d51e18edacc7289bd7a0c60878fec1e5e", "message": "unit tests", "committedDate": "2020-09-22T17:53:00Z", "type": "commit"}, {"oid": "07054e1dbf3602e64c44bd974a08d4a82f8f8459", "url": "https://github.com/all-of-us/workbench/commit/07054e1dbf3602e64c44bd974a08d4a82f8f8459", "message": "shelving", "committedDate": "2020-09-23T14:35:10Z", "type": "commit"}, {"oid": "b04e50b20a0504fb284850c5e91c515760ff62ba", "url": "https://github.com/all-of-us/workbench/commit/b04e50b20a0504fb284850c5e91c515760ff62ba", "message": "oh my god", "committedDate": "2020-09-23T15:26:47Z", "type": "commit"}, {"oid": "8bcd6bade8288b6a3e60aa94bc4715d2afcc2f38", "url": "https://github.com/all-of-us/workbench/commit/8bcd6bade8288b6a3e60aa94bc4715d2afcc2f38", "message": "think this works now", "committedDate": "2020-09-23T17:08:06Z", "type": "commit"}, {"oid": "16468fdd4c84dcb0fbd15864a90870c24001e2eb", "url": "https://github.com/all-of-us/workbench/commit/16468fdd4c84dcb0fbd15864a90870c24001e2eb", "message": "cleanup", "committedDate": "2020-09-23T17:26:36Z", "type": "commit"}, {"oid": "e67724b48084a9a5435463fbfc3bdb7314102cb4", "url": "https://github.com/all-of-us/workbench/commit/e67724b48084a9a5435463fbfc3bdb7314102cb4", "message": "unshadow runtimeOpsStore in runtime panel", "committedDate": "2020-09-23T20:21:06Z", "type": "commit"}, {"oid": "439c6792b54fc28ba2005841a5e2b8d698a56552", "url": "https://github.com/all-of-us/workbench/commit/439c6792b54fc28ba2005841a5e2b8d698a56552", "message": "fixing immediate problems", "committedDate": "2020-09-23T21:27:27Z", "type": "commit"}, {"oid": "3be7a031bff416b3c300b686d8f0e6dc95e9eaf2", "url": "https://github.com/all-of-us/workbench/commit/3be7a031bff416b3c300b686d8f0e6dc95e9eaf2", "message": "show outstanding runtime op test", "committedDate": "2020-09-24T15:11:29Z", "type": "commit"}, {"oid": "50355806be9349bf88960f88ceeb30372ece1f11", "url": "https://github.com/all-of-us/workbench/commit/50355806be9349bf88960f88ceeb30372ece1f11", "message": "another tick", "committedDate": "2020-09-24T15:32:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNTY4MA==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494405680", "bodyText": "i think our standard is to use absolute paths from the src root", "author": "ericsong", "createdAt": "2020-09-24T15:20:45Z", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -9,7 +9,10 @@ import {waitOneTickAndUpdate} from 'testing/react-test-helpers';\n import {RuntimeApiStub} from 'testing/stubs/runtime-api-stub';\n import {RuntimeApi} from 'generated/fetch/api';\n import {WorkspaceAccessLevel} from 'generated/fetch';\n-\n+import {\n+  markRuntimeOperationCompleteForWorkspace,\n+  updateRuntimeOpsStoreForWorkspaceNamespace\n+} from \"../../utils/stores\";", "originalCommit": "3be7a031bff416b3c300b686d8f0e6dc95e9eaf2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNzQ3OA==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494407478", "bodyText": "nit: separate with newline? there are two imports here unlike the other lines", "author": "ericsong", "createdAt": "2020-09-24T15:23:07Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -7,6 +7,14 @@ import {runtimeApi} from 'app/services/swagger-fetch-clients';\n import colors, {addOpacity} from 'app/styles/colors';\n import {reactStyles, withCurrentWorkspace} from 'app/utils';\n import {allMachineTypes, validLeonardoMachineTypes} from 'app/utils/machines';\n+import {\n+  abortRuntimeOperationForWorkspace,\n+  markRuntimeOperationCompleteForWorkspace,\n+  RuntimeOperation, RuntimeOpsStore,", "originalCommit": "3be7a031bff416b3c300b686d8f0e6dc95e9eaf2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwOTIxMg==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494409212", "bodyText": "I think the term \"Outstanding\" can be confusing for some of our users. Maybe \"Active\" or \"Running\"?", "author": "ericsong", "createdAt": "2020-09-24T15:25:27Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,7 +48,25 @@ const styles = reactStyles({\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n \n+const OutstandingRuntimeOp = ({operation, workspaceNamespace}) => {\n+  return <React.Fragment>\n+    <h3 style={styles.sectionHeader}>Outstanding Runtime Operations</h3>", "originalCommit": "3be7a031bff416b3c300b686d8f0e6dc95e9eaf2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxMzUxMw==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494413513", "bodyText": "can this be combined with the conditional above?", "author": "ericsong", "createdAt": "2020-09-24T15:30:56Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -88,14 +121,24 @@ export const RuntimePanel = withCurrentWorkspace()(\n     }\n \n     render() {\n+      const {runtimeOps, workspace} = this.props;\n       const {loading, error, runtime} = this.state;\n+\n+      const outstandingRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+\n       if (loading) {\n         return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n       } else if (error) {\n         return <div>Error loading compute configuration</div>;\n       } else if (!runtime) {\n         // TODO(RW-5591): Create runtime page goes here.\n-        return <div>No runtime exists yet</div>;\n+        return <React.Fragment>\n+          <div>No runtime exists yet</div>\n+          {outstandingRuntimeOp && <hr/>}\n+          {outstandingRuntimeOp && <div>", "originalCommit": "3be7a031bff416b3c300b686d8f0e6dc95e9eaf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ2NTgwNw==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494465807", "bodyText": "It cannot - you can only use this syntax with one element. I suppose I could wrap it in React.Fragment but I've never seen that outside the top level of a render function", "author": "als364", "createdAt": "2020-09-24T16:48:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxMzUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyMzMyNA==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494423324", "bodyText": "This is probably due to my unfamiliarity with UI testing but, can you explain how we're testing different calls in each test? I can see that you're changing what gets mocked in each test but it looks like the same call, runInitializerAndTimers is getting invoked in each test.", "author": "ericsong", "createdAt": "2020-09-24T15:44:40Z", "path": "ui/src/app/utils/leo-runtime-initializer.spec.tsx", "diffHunk": "@@ -311,4 +318,37 @@ describe('RuntimeInitializer', () => {\n     }\n   });\n \n+  it('should use and clean the runtimeOpsStore for get', async() => {\n+    mockGetRuntimeCalls([baseRuntime]);\n+    await runInitializerAndTimers();\n+    expect(mockSetRuntimeOpsStore).toHaveBeenCalled();\n+    expect(runtimeOpsStore.get().opsByWorkspaceNamespace[workspaceNamespace]).toBeUndefined();\n+  });\n+\n+  it('should use and clean the runtimeOpsStore for create', async() => {\n+    mockGetRuntime.mockRejectedValueOnce(new Response(null, {status: 404}));\n+    mockCreateRuntime.mockImplementationOnce(async(workspaceNamespace) => {\n+      return {status: RuntimeStatus.Creating};\n+    });\n+    await runInitializerAndTimers();", "originalCommit": "50355806be9349bf88960f88ceeb30372ece1f11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ2NjY1Mw==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494466653", "bodyText": "poll in leo-runtime-initializer does different runtime API calls based on the status of the runtime. The thing that's different in each of these tests is what I'm mocking the get with.", "author": "als364", "createdAt": "2020-09-24T16:49:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyMzMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyNTk5NA==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494425994", "bodyText": "this should probably be a dataprocConfig by default since that's what all of our runtimes are right now.", "author": "ericsong", "createdAt": "2020-09-24T15:48:16Z", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -166,37 +171,82 @@ export class LeoRuntimeInitializer {\n   }\n \n   private async getRuntime(): Promise<Runtime> {\n-    return await runtimeApi().getRuntime(this.workspaceNamespace, {signal: this.abortSignal});\n+    const aborter = new AbortController();\n+    const promise = runtimeApi().getRuntime(this.workspaceNamespace, {signal: aborter.signal});\n+    updateRuntimeOpsStoreForWorkspaceNamespace(this.workspaceNamespace, {\n+      promise: promise,\n+      operation: 'get',\n+      aborter: aborter\n+    });\n+    await promise;\n+    markRuntimeOperationCompleteForWorkspace(this.workspaceNamespace);\n+    return promise;\n   }\n \n   private async createRuntime(): Promise<void> {\n     if (this.createCount >= this.maxCreateCount) {\n       throw new ExceededActionCountError(\n         `Reached max runtime create count (${this.maxCreateCount})`, this.currentRuntime);\n     }\n-    await runtimeApi().createRuntime(this.workspaceNamespace,\n-      {configurationType: RuntimeConfigurationType.DefaultDataproc},\n-      {signal: this.abortSignal});\n+    const aborter = new AbortController();\n+    let runtime: Runtime;\n+    if (serverConfigStore.getValue().enableCustomRuntimes) {\n+      // TODO(RW-3418): allow custom runtimes, maybe plumb default through serverConfigStore?\n+      runtime = {\n+        gceConfig: {", "originalCommit": "50355806be9349bf88960f88ceeb30372ece1f11", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyNjgxMg==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494426812", "bodyText": "nit: you can just await the createRuntime call without making a variable", "author": "ericsong", "createdAt": "2020-09-24T15:49:20Z", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -166,37 +171,82 @@ export class LeoRuntimeInitializer {\n   }\n \n   private async getRuntime(): Promise<Runtime> {\n-    return await runtimeApi().getRuntime(this.workspaceNamespace, {signal: this.abortSignal});\n+    const aborter = new AbortController();\n+    const promise = runtimeApi().getRuntime(this.workspaceNamespace, {signal: aborter.signal});\n+    updateRuntimeOpsStoreForWorkspaceNamespace(this.workspaceNamespace, {\n+      promise: promise,\n+      operation: 'get',\n+      aborter: aborter\n+    });\n+    await promise;\n+    markRuntimeOperationCompleteForWorkspace(this.workspaceNamespace);\n+    return promise;\n   }\n \n   private async createRuntime(): Promise<void> {\n     if (this.createCount >= this.maxCreateCount) {\n       throw new ExceededActionCountError(\n         `Reached max runtime create count (${this.maxCreateCount})`, this.currentRuntime);\n     }\n-    await runtimeApi().createRuntime(this.workspaceNamespace,\n-      {configurationType: RuntimeConfigurationType.DefaultDataproc},\n-      {signal: this.abortSignal});\n+    const aborter = new AbortController();\n+    let runtime: Runtime;\n+    if (serverConfigStore.getValue().enableCustomRuntimes) {\n+      // TODO(RW-3418): allow custom runtimes, maybe plumb default through serverConfigStore?\n+      runtime = {\n+        gceConfig: {\n+          diskSize: 50,\n+          machineType: 'n1-standard-4'\n+        }\n+      };\n+    } else {\n+      runtime = {configurationType: RuntimeConfigurationType.DefaultDataproc};\n+    }\n+    const promise = runtimeApi().createRuntime(this.workspaceNamespace,\n+      runtime,\n+      {signal: this.pollAbortSignal});\n+    updateRuntimeOpsStoreForWorkspaceNamespace(this.workspaceNamespace, {\n+      promise: promise,\n+      operation: 'create',\n+      aborter: aborter\n+    });\n     this.createCount++;\n+    await promise;", "originalCommit": "50355806be9349bf88960f88ceeb30372ece1f11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ2OTI2NQ==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494469265", "bodyText": "I'm putting the promise in the runtimesStore; I guess I could then access the store again to await that?", "author": "als364", "createdAt": "2020-09-24T16:54:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyNjgxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNDIzMw==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494504233", "bodyText": "oh ok. missed that, this is good then.", "author": "ericsong", "createdAt": "2020-09-24T17:53:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyNjgxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzMjc4NQ==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494432785", "bodyText": "why is this one let while the others are const?", "author": "ericsong", "createdAt": "2020-09-24T15:57:39Z", "path": "ui/src/app/utils/stores.tsx", "diffHunk": "@@ -30,6 +30,46 @@ interface ProfileStore {\n \n export const profileStore = atom<ProfileStore>({});\n \n+export interface RuntimeOperation {\n+  promise: Promise<any>;\n+  operation: string;\n+  aborter: AbortController;\n+}\n+\n+export interface WorkspaceRuntimeOperationMap {\n+  [workspaceNamespace: string]: RuntimeOperation;\n+}\n+\n+export interface RuntimeOpsStore {\n+  opsByWorkspaceNamespace: WorkspaceRuntimeOperationMap;\n+}\n+\n+export const runtimeOpsStore = atom<RuntimeOpsStore>({opsByWorkspaceNamespace: {}});\n+\n+export const updateRuntimeOpsStoreForWorkspaceNamespace = (workspaceNamespace: string, runtimeOperation: RuntimeOperation) => {\n+  const opsByWorkspaceNamespace = runtimeOpsStore.get().opsByWorkspaceNamespace;\n+  opsByWorkspaceNamespace[workspaceNamespace] = runtimeOperation;\n+  runtimeOpsStore.set({opsByWorkspaceNamespace: opsByWorkspaceNamespace});\n+};\n+\n+export let markRuntimeOperationCompleteForWorkspace = (workspaceNamespace: string) => {", "originalCommit": "50355806be9349bf88960f88ceeb30372ece1f11", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzNTQwNg==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494435406", "bodyText": "do we need to set the entire map for this to work? I would have thought that its sufficient to just update the map with the line above.", "author": "ericsong", "createdAt": "2020-09-24T16:01:24Z", "path": "ui/src/app/utils/stores.tsx", "diffHunk": "@@ -30,6 +30,46 @@ interface ProfileStore {\n \n export const profileStore = atom<ProfileStore>({});\n \n+export interface RuntimeOperation {\n+  promise: Promise<any>;\n+  operation: string;\n+  aborter: AbortController;\n+}\n+\n+export interface WorkspaceRuntimeOperationMap {\n+  [workspaceNamespace: string]: RuntimeOperation;\n+}\n+\n+export interface RuntimeOpsStore {\n+  opsByWorkspaceNamespace: WorkspaceRuntimeOperationMap;\n+}\n+\n+export const runtimeOpsStore = atom<RuntimeOpsStore>({opsByWorkspaceNamespace: {}});\n+\n+export const updateRuntimeOpsStoreForWorkspaceNamespace = (workspaceNamespace: string, runtimeOperation: RuntimeOperation) => {\n+  const opsByWorkspaceNamespace = runtimeOpsStore.get().opsByWorkspaceNamespace;\n+  opsByWorkspaceNamespace[workspaceNamespace] = runtimeOperation;\n+  runtimeOpsStore.set({opsByWorkspaceNamespace: opsByWorkspaceNamespace});", "originalCommit": "50355806be9349bf88960f88ceeb30372ece1f11", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ3MDA3OQ==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494470079", "bodyText": "Javascript is pass by value", "author": "als364", "createdAt": "2020-09-24T16:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzNTQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwMzQ5Mg==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494503492", "bodyText": "Is that still true for objects? I was able to modify an object with the follow code snippet.\nThe behavior may be different in your case though because of atomic store.\nfunction flipValue(map) {\n  map['key'] = \"newValue\"\n}\n\nmyMap = {'key': \"oldValue\"};\nflipValue(myMap);\n\nconsole.log(\"Key is: \" + myMap['key'])\n\nKey is: newValue", "author": "ericsong", "createdAt": "2020-09-24T17:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzNTQwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNjE0Mg==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494506142", "bodyText": "Hm, ok. Perhaps it is atom related, then. It was definitely failing to update the store when I didn't explicitly set it.", "author": "als364", "createdAt": "2020-09-24T17:56:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzNTQwNg=="}], "type": "inlineReview"}, {"oid": "c569b7b82672a0ceb72830c52b06b5e3f82d32a5", "url": "https://github.com/all-of-us/workbench/commit/c569b7b82672a0ceb72830c52b06b5e3f82d32a5", "message": "review feedback", "committedDate": "2020-09-24T17:09:18Z", "type": "commit"}, {"oid": "61ce0ca42a085c6a60b5499f2c0c42cfd08887d9", "url": "https://github.com/all-of-us/workbench/commit/61ce0ca42a085c6a60b5499f2c0c42cfd08887d9", "message": "oops dataproc", "committedDate": "2020-09-24T17:21:03Z", "type": "commit"}, {"oid": "8137aab2fd1842a2084e73a1216ac593f420ac59", "url": "https://github.com/all-of-us/workbench/commit/8137aab2fd1842a2084e73a1216ac593f420ac59", "message": "argh", "committedDate": "2020-09-24T17:21:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNTk5Nw==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494505997", "bodyText": "nit: I would either change all of the variable naming to go from outstanding -> active or only use the \"Active\" term on the user facing string.\nHaving both synonymous terms like in this line can be confusing when searching for code references.", "author": "ericsong", "createdAt": "2020-09-24T17:56:13Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -242,10 +243,10 @@ export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOps\n         <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n           <Button disabled={true}>Create</Button>\n         </FlexRow>\n-        {outstandingRuntimeOp && <hr/>}\n-        {outstandingRuntimeOp && <div>\n-          <OutstandingRuntimeOp operation={outstandingRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-        </div>}\n+        {outstandingRuntimeOp && <React.Fragment>\n+          <hr/>\n+          <ActiveRuntimeOp operation={outstandingRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>", "originalCommit": "8137aab2fd1842a2084e73a1216ac593f420ac59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNjUwMQ==", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494506501", "bodyText": "whoops, thought I got them all. Thank you!", "author": "als364", "createdAt": "2020-09-24T17:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNTk5Nw=="}], "type": "inlineReview"}, {"oid": "8767b61c3e9f87597a54616f8e93d1b51f917550", "url": "https://github.com/all-of-us/workbench/commit/8767b61c3e9f87597a54616f8e93d1b51f917550", "message": "outstanding -> active", "committedDate": "2020-09-24T17:58:50Z", "type": "commit"}, {"oid": "7e7c80e823e4731f4a3284d1117d57648dbe432a", "url": "https://github.com/all-of-us/workbench/commit/7e7c80e823e4731f4a3284d1117d57648dbe432a", "message": "oy gevalt", "committedDate": "2020-09-24T18:11:03Z", "type": "commit"}]}