{"pr_number": 3005, "pr_title": "[RISK=LOW][No ticket] Removing null constraint from User table column creation and modified time ", "pr_createdAt": "2020-01-15T20:22:28Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3005", "timeline": [{"oid": "d8ce6b5dc338c91cb5856f8e7917b1c468106baf", "url": "https://github.com/all-of-us/workbench/commit/d8ce6b5dc338c91cb5856f8e7917b1c468106baf", "message": "Making creation and modified time null", "committedDate": "2020-01-15T20:03:56Z", "type": "commit"}, {"oid": "a05dd81f48a1a23e306a7d0ec4849cf45119fac7", "url": "https://github.com/all-of-us/workbench/commit/a05dd81f48a1a23e306a7d0ec4849cf45119fac7", "message": "removing unused variable", "committedDate": "2020-01-15T20:23:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMDc1MA==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367120750", "bodyText": "why is this being set now?", "author": "ericsong", "createdAt": "2020-01-15T21:38:52Z", "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java", "diffHunk": "@@ -259,10 +267,11 @@ private RdrWorkspace toRdrWorkspace(DbWorkspace dbWorkspace) {\n     Map<String, FirecloudWorkspaceAccessEntry> aclMap = firecloudResponse.getAcl();\n     aclMap.forEach(\n         (email, access) -> {\n-          RdrWorkspaceUser workspaceUderMap = new RdrWorkspaceUser();\n-          workspaceUderMap.setUserId((int) userDao.findUserByUsername(email).getUserId());\n-          workspaceUderMap.setRole(RdrWorkspaceUser.RoleEnum.fromValue(access.getAccessLevel()));\n-          rdrWorkspace.addWorkspaceUsersItem(workspaceUderMap);\n+          RdrWorkspaceUser workspaceUserMap = new RdrWorkspaceUser();\n+          workspaceUserMap.setUserId((int) userDao.findUserByUsername(email).getUserId());\n+          workspaceUserMap.setRole(RdrWorkspaceUser.RoleEnum.fromValue(access.getAccessLevel()));\n+          workspaceUserMap.setStatus(RdrWorkspaceUser.StatusEnum.fromValue(\"ACTIVE\"));", "originalCommit": "a05dd81f48a1a23e306a7d0ec4849cf45119fac7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzMjk2Mg==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367132962", "bodyText": "This has been made required for user by RDR. this is NOT part of this PR it just got sneaked in. I can revert this and make a new PR for this", "author": "NehaBroad", "createdAt": "2020-01-15T22:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMDc1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNTYyMg==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367135622", "bodyText": "I think that may be better even if its a small change since I have a lingering comment about its implementation.\nThat comment being, how do we know this value can be set to \"ACTIVE\"? IIRC, firecloud can return a value for the NO_ACCESS role.", "author": "ericsong", "createdAt": "2020-01-15T22:14:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMDc1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzODY2NQ==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367138665", "bodyText": "Thats because as of now for RDR we are going with assumption that all the USERS are active until we introduce an official way of removing users from workbench", "author": "NehaBroad", "createdAt": "2020-01-15T22:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMDc1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0NDcwNg==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367144706", "bodyText": "I see. It does seem a bit odd that we would send over \"ACTIVE\" for disabled users but if that's what they want \u00af_(\u30c4)_/\u00af.\nMaybe add a comment saying we should set this dynamically when we do start removing users from workbench?", "author": "ericsong", "createdAt": "2020-01-15T22:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMDc1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxNjkwNA==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367616904", "bodyText": "Is there a separate notion of RDR_ACTIVE from WORKBENCH_ACTIVE?", "author": "jaycarlton", "createdAt": "2020-01-16T19:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMDc1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMTkwNQ==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367121905", "bodyText": "are we ok with hitting the RDR multiple times with the same user account? As is, I believe a user will keep getting sent until they log in and their lat_modified_time gets set.", "author": "ericsong", "createdAt": "2020-01-15T21:41:35Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/RdrExportDao.java", "diffHunk": "@@ -12,7 +12,7 @@\n       nativeQuery = true,\n       value =\n           \"select u.user_id from user u LEFT JOIN rdr_export rdr on\"\n-              + \" u.user_id = rdr.export_id and rdr.entity_type = 1 where \"\n+              + \" u.user_id = rdr.export_id and rdr.entity_type = 1 where u.last_modified_time is null or \"", "originalCommit": "a05dd81f48a1a23e306a7d0ec4849cf45119fac7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNjUxMg==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367136512", "bodyText": "Actually i am going to push change to set the  value of  last_modified_date time as either today's date or first_sign in just so it is picked  only the first time", "author": "NehaBroad", "createdAt": "2020-01-15T22:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMTkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMjI4NQ==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367122285", "bodyText": "I think its OK to leave the last modified time update sql. That value changes often and its not as important to ensure its integrity.", "author": "ericsong", "createdAt": "2020-01-15T21:42:28Z", "path": "api/db/changelog/db.changelog-115-addColumn-user-create-modified.xml", "diffHunk": "@@ -7,17 +7,11 @@\n   <changeSet author=\"nsaxena\" id=\"db.changelog-115-addColumn-user-create-modified\">\n     <addColumn tableName=\"user\">\n       <column name=\"creation_time\" type=\"datetime\">\n-        <constraints nullable=\"false\" />\n+        <constraints nullable=\"true\" />\n       </column>\n       <column name=\"last_modified_time\" type=\"datetime\">\n-        <constraints nullable=\"false\"/>\n+        <constraints nullable=\"true\"/>\n       </column>\n     </addColumn>\n   </changeSet>\n-  <changeSet id=\"update creation time\" author=\"nsaxena\">\n-    <sql>update user set creation_time = first_sign_in_time</sql>\n-  </changeSet>\n-  <changeSet id=\"update modified time\" author=\"nsaxena\">\n-    <sql>update user set last_modified_time = first_sign_in_time</sql>", "originalCommit": "a05dd81f48a1a23e306a7d0ec4849cf45119fac7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMjYzOQ==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367122639", "bodyText": "unrelated but we should try to avoid native queries wherever possible since our test db and production db are different.", "author": "ericsong", "createdAt": "2020-01-15T21:43:18Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/RdrExportDao.java", "diffHunk": "@@ -12,7 +12,7 @@\n       nativeQuery = true,", "originalCommit": "a05dd81f48a1a23e306a7d0ec4849cf45119fac7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNDUyOA==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367134528", "bodyText": "Since rdr_export doesn't have ENTITY_ID as a foreign key (since it can contain either WORKSPACE  or USER id) i was unable to use it the using Db classes.", "author": "NehaBroad", "createdAt": "2020-01-15T22:12:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEyMjYzOQ=="}], "type": "inlineReview"}, {"oid": "1c24ec3f7abb92e694f03ea5c3d07d3c7296dfd7", "url": "https://github.com/all-of-us/workbench/commit/1c24ec3f7abb92e694f03ea5c3d07d3c7296dfd7", "message": "Comments", "committedDate": "2020-01-15T22:19:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNzIyMg==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367137222", "bodyText": "This feels misplaced. If the issue is that last_modified_time isn't getting updated when the user is saved, I think we should really be changing that value up within the UserServiceImpl.updateUserWithRetries method, which is where all user-modifying changes funnel through. And then this method should probably call updateUserWithRetries instead of userDao.save.", "author": "gjuggler", "createdAt": "2020-01-15T22:18:39Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -386,6 +386,7 @@ public DbUser submitDataUseAgreement(\n     // TODO: Teardown/reconcile duplicated state between the user profile and DUA.\n     dbUser.setDataUseAgreementCompletionTime(timestamp);\n     dbUser.setDataUseAgreementSignedVersion(dataUseAgreementSignedVersion);\n+    dbUser.setLastModifiedTime(timestamp);", "originalCommit": "a05dd81f48a1a23e306a7d0ec4849cf45119fac7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ4NDk0Nw==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367484947", "bodyText": "Can we use the updated updateUserWithRetries method to avoid setting this here?", "author": "ericsong", "createdAt": "2020-01-16T15:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNzIyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzODY5Mg==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367138692", "bodyText": "It's super surprising to see this conversion code take a null value from the DB and set it to the current timestamp in the RDR export call. I'm still kind of scratching my head about this... what's the motivation behind this choice? Is the RDR API unwilling to accept null values? Are they okay with receiving data about researchers whose creation time is constantly changing?\nThis absolutely needs some comment in the code explaining why we are making a somewhat-surprising choice.", "author": "gjuggler", "createdAt": "2020-01-15T22:22:07Z", "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java", "diffHunk": "@@ -157,8 +157,16 @@ public void exportWorkspaces(List<Long> workspaceIds) {\n   private RdrResearcher toRdrResearcher(DbUser dbUser) {\n     RdrResearcher researcher = new RdrResearcher();\n     researcher.setUserId((int) dbUser.getUserId());\n-    researcher.setCreationTime(dbUser.getCreationTime().toLocalDateTime().atOffset(offset));\n-    researcher.setModifiedTime(dbUser.getLastModifiedTime().toLocalDateTime().atOffset(offset));\n+    if (null != researcher.getCreationTime()) {\n+      researcher.setCreationTime(dbUser.getCreationTime().toLocalDateTime().atOffset(offset));\n+    } else {\n+      researcher.setCreationTime(OffsetDateTime.now());", "originalCommit": "a05dd81f48a1a23e306a7d0ec4849cf45119fac7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNDk2MA==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367224960", "bodyText": "I will add comments about this, right now i wanted to solve the creation_date issue with liquibase just so it unblocks the test build.", "author": "NehaBroad", "createdAt": "2020-01-16T04:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzODY5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MDcyOA==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367140728", "bodyText": "[Prod safety comment] How sure are we that it's safe to modify an existing Liquibase change in-place? Will we have to do something manually to make sure the new version of this change gets applied in our test environment? What happens if someone tries to rollback this PR and/or #2948 on their own? (I suspect something will likely go wrong in our prod DB.) We should think of a clear way to signal to the oncall next week that this PR isn't atomically rollback-safe.", "author": "gjuggler", "createdAt": "2020-01-15T22:27:20Z", "path": "api/db/changelog/db.changelog-115-addColumn-user-create-modified.xml", "diffHunk": "@@ -7,17 +7,14 @@\n   <changeSet author=\"nsaxena\" id=\"db.changelog-115-addColumn-user-create-modified\">\n     <addColumn tableName=\"user\">\n       <column name=\"creation_time\" type=\"datetime\">\n-        <constraints nullable=\"false\" />", "originalCommit": "1c24ec3f7abb92e694f03ea5c3d07d3c7296dfd7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNTIxOQ==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367225219", "bodyText": "Since the liquibase failed to execute on test environment itself, we decided to update the file itself and try.", "author": "NehaBroad", "createdAt": "2020-01-16T04:25:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MDcyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3OTQ1Mg==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367479452", "bodyText": "I think the issue is that something may go wrong if we perform a rollback to this PR or the previous one since the liquibase commits are split between two files.\nI think we might actually be OK given that we don't execute any database rollbacks ATM so it should just be the Java/UI code that switches back.\nThis made me think of an interesting point though. We may need to mark some commits on master as invalid candidates for rollback because it contains a known bug. Previously, I was only thinking about incompatibilities due to database changes.", "author": "ericsong", "createdAt": "2020-01-16T15:23:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MDcyOA=="}], "type": "inlineReview"}, {"oid": "53fc7024c273bd38dfa873c6bc8227fc8f5ab8b8", "url": "https://github.com/all-of-us/workbench/commit/53fc7024c273bd38dfa873c6bc8227fc8f5ab8b8", "message": "update user lastModifiedTime on userRetries method", "committedDate": "2020-01-16T15:17:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ4MjI4NQ==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367482285", "bodyText": "do we need a default value here?\nWe are already allowing nullable and we're copying over the first_sign_in_time (where it exists).\nThe integrity of last_modified_time is not as important but I still think its better to avoid setting it to a mix of values (first_sign_in_time and current timestamp).\nIf we do want to keep the default value, we can get rid of the nullable constraint.", "author": "ericsong", "createdAt": "2020-01-16T15:28:01Z", "path": "api/db/changelog/db.changelog-115-addColumn-user-create-modified.xml", "diffHunk": "@@ -7,17 +7,14 @@\n   <changeSet author=\"nsaxena\" id=\"db.changelog-115-addColumn-user-create-modified\">\n     <addColumn tableName=\"user\">\n       <column name=\"creation_time\" type=\"datetime\">\n-        <constraints nullable=\"false\" />\n+        <constraints nullable=\"true\" />\n       </column>\n-      <column name=\"last_modified_time\" type=\"datetime\">\n-        <constraints nullable=\"false\"/>\n+      <column name=\"last_modified_time\" type=\"datetime\" defaultValueDate=\"CURRENT_TIMESTAMP\">", "originalCommit": "53fc7024c273bd38dfa873c6bc8227fc8f5ab8b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ4NDcyNw==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367484727", "bodyText": "Lsat_modified_time should have some value so in case of null first_sign it would be current date.", "author": "NehaBroad", "createdAt": "2020-01-16T15:32:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ4MjI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYyNDQwNg==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367624406", "bodyText": "Liquibase migrations should work the same way every time. If we change the default, we're really changing the schema every time we run the migration.", "author": "jaycarlton", "createdAt": "2020-01-16T20:07:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ4MjI4NQ=="}], "type": "inlineReview"}, {"oid": "ee80bede4908d453fcbbdd3e6d3dcb99e7705197", "url": "https://github.com/all-of-us/workbench/commit/ee80bede4908d453fcbbdd3e6d3dcb99e7705197", "message": "last_modified_time removing not null constraint", "committedDate": "2020-01-16T15:33:49Z", "type": "commit"}, {"oid": "ae4ef2a06dcd3c29ab48ebf3d801e4ea0d58064a", "url": "https://github.com/all-of-us/workbench/commit/ae4ef2a06dcd3c29ab48ebf3d801e4ea0d58064a", "message": "PR", "committedDate": "2020-01-16T16:55:38Z", "type": "commit"}, {"oid": "9c3738ff1558b2c3504bed9465306c3055a0a661", "url": "https://github.com/all-of-us/workbench/commit/9c3738ff1558b2c3504bed9465306c3055a0a661", "message": "spotless and comments for future action", "committedDate": "2020-01-16T17:25:50Z", "type": "commit"}, {"oid": "94194a7b47da6ade2e0f2c24546ff8490381a50a", "url": "https://github.com/all-of-us/workbench/commit/94194a7b47da6ade2e0f2c24546ff8490381a50a", "message": "spotless", "committedDate": "2020-01-16T17:44:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYxNzAwMw==", "url": "https://github.com/all-of-us/workbench/pull/3005#discussion_r367617003", "bodyText": "the user modifier function should only contain code to update the user object.\nOtherwise, everything else will be run multiple times with the retries. In this case, the data use agreement will be created several times.", "author": "ericsong", "createdAt": "2020-01-16T19:50:18Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -370,23 +372,28 @@ public DbUser createUser(\n   @Override\n   public DbUser submitDataUseAgreement(\n       DbUser dbUser, Integer dataUseAgreementSignedVersion, String initials) {\n-    // FIXME: this should not be hardcoded\n-    if (dataUseAgreementSignedVersion != CURRENT_DATA_USE_AGREEMENT_VERSION) {\n-      throw new BadRequestException(\"Data Use Agreement Version is not up to date\");\n-    }\n-    final Timestamp timestamp = new Timestamp(clock.instant().toEpochMilli());\n-    DbUserDataUseAgreement dataUseAgreement = new DbUserDataUseAgreement();\n-    dataUseAgreement.setDataUseAgreementSignedVersion(dataUseAgreementSignedVersion);\n-    dataUseAgreement.setUserId(dbUser.getUserId());\n-    dataUseAgreement.setUserFamilyName(dbUser.getFamilyName());\n-    dataUseAgreement.setUserGivenName(dbUser.getGivenName());\n-    dataUseAgreement.setUserInitials(initials);\n-    dataUseAgreement.setCompletionTime(timestamp);\n-    userDataUseAgreementDao.save(dataUseAgreement);\n-    // TODO: Teardown/reconcile duplicated state between the user profile and DUA.\n-    dbUser.setDataUseAgreementCompletionTime(timestamp);\n-    dbUser.setDataUseAgreementSignedVersion(dataUseAgreementSignedVersion);\n-    return userDao.save(dbUser);\n+\n+    return updateUserWithRetries(\n+        (user) -> {", "originalCommit": "94194a7b47da6ade2e0f2c24546ff8490381a50a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e670ce2812643ca161451560ab41fea1b544605d", "url": "https://github.com/all-of-us/workbench/commit/e670ce2812643ca161451560ab41fea1b544605d", "message": "Fixing updateUserRetries", "committedDate": "2020-01-16T20:08:42Z", "type": "commit"}, {"oid": "edb388edaf6d11bef75f9f92e39abf8fb4b92eab", "url": "https://github.com/all-of-us/workbench/commit/edb388edaf6d11bef75f9f92e39abf8fb4b92eab", "message": "submit wiht updateUserRetires", "committedDate": "2020-01-16T20:15:47Z", "type": "commit"}]}