{"pr_number": 3117, "pr_title": "[risk=low][RW-3407] Workspace Admin UI", "pr_createdAt": "2020-02-11T21:17:05Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3117", "timeline": [{"oid": "322039cdf01e041c03d0b3fe5a8d936b41de6d56", "url": "https://github.com/all-of-us/workbench/commit/322039cdf01e041c03d0b3fe5a8d936b41de6d56", "message": "get clusters for gcp project id", "committedDate": "2020-02-11T21:19:27Z", "type": "commit"}, {"oid": "7bf1eaf93b1aecd5b01c2206620d74931fa7634a", "url": "https://github.com/all-of-us/workbench/commit/7bf1eaf93b1aecd5b01c2206620d74931fa7634a", "message": "stashing.", "committedDate": "2020-02-11T21:20:03Z", "type": "commit"}, {"oid": "fb151ce0e0cf774b3a803f949a1129d9482d73ed", "url": "https://github.com/all-of-us/workbench/commit/fb151ce0e0cf774b3a803f949a1129d9482d73ed", "message": "ok got workspace info now", "committedDate": "2020-02-11T21:20:03Z", "type": "commit"}, {"oid": "2dec2bfe273d7032e90cd6eedaf91f6776b7c4b2", "url": "https://github.com/all-of-us/workbench/commit/2dec2bfe273d7032e90cd6eedaf91f6776b7c4b2", "message": "workspace objects", "committedDate": "2020-02-11T21:20:40Z", "type": "commit"}, {"oid": "5131284e012e0d1e4d76efd7f93fd655edd81b18", "url": "https://github.com/all-of-us/workbench/commit/5131284e012e0d1e4d76efd7f93fd655edd81b18", "message": "more data, small refactor", "committedDate": "2020-02-11T21:20:40Z", "type": "commit"}, {"oid": "d8eec70d5d7456900330124f66efa92c82095519", "url": "https://github.com/all-of-us/workbench/commit/d8eec70d5d7456900330124f66efa92c82095519", "message": "styling", "committedDate": "2020-02-11T21:20:40Z", "type": "commit"}, {"oid": "af1b052d4d6ee48fb7f3e67c80d7f058e1233c67", "url": "https://github.com/all-of-us/workbench/commit/af1b052d4d6ee48fb7f3e67c80d7f058e1233c67", "message": "clusters", "committedDate": "2020-02-11T21:20:40Z", "type": "commit"}, {"oid": "b47c3fee2efbd487aaef5a7b7d4965dc45fc9b7d", "url": "https://github.com/all-of-us/workbench/commit/b47c3fee2efbd487aaef5a7b7d4965dc45fc9b7d", "message": "expando + research purpose", "committedDate": "2020-02-11T21:20:40Z", "type": "commit"}, {"oid": "8585e137c7599b657884ce796e1266a21f448a00", "url": "https://github.com/all-of-us/workbench/commit/8585e137c7599b657884ce796e1266a21f448a00", "message": "small refactors", "committedDate": "2020-02-11T21:20:40Z", "type": "commit"}, {"oid": "efd09e908424d11f75317f67c52d9adf79a0eda9", "url": "https://github.com/all-of-us/workbench/commit/efd09e908424d11f75317f67c52d9adf79a0eda9", "message": "linting", "committedDate": "2020-02-11T21:20:40Z", "type": "commit"}, {"oid": "efd09e908424d11f75317f67c52d9adf79a0eda9", "url": "https://github.com/all-of-us/workbench/commit/efd09e908424d11f75317f67c52d9adf79a0eda9", "message": "linting", "committedDate": "2020-02-11T21:20:40Z", "type": "forcePushed"}, {"oid": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "url": "https://github.com/all-of-us/workbench/commit/e08f465be337ef7ff50a6979b3a748bedf00db2d", "message": "bad rebase", "committedDate": "2020-02-11T21:23:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1NDgyNg==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378354826", "bodyText": "Can you add an entry describing this authority to the comment above?\nRe: naming, I'm pretty OK with WORKSPACES_VIEW though it still doesn't feel like we've nailed it. Spitballing some other options, definitely feel free to ignore:\n\nVIEW_ALL_WORKSPACES\nWORKSPACE_ADMIN_VIEW\nWORKSPACE_VIEW_ALL\nWORKSPACE_ADMIN_VIEWER", "author": "gjuggler", "createdAt": "2020-02-12T16:13:16Z", "path": "api/src/main/resources/workbench.yaml", "diffHunk": "@@ -2555,7 +2575,8 @@ definitions:\n       FEATURED_WORKSPACE_ADMIN,\n       COMMUNICATIONS_ADMIN,\n       SECURITY_ADMIN,\n-      INSTITUTION_ADMIN\n+      INSTITUTION_ADMIN,\n+      WORKSPACES_VIEW", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNDc1Mw==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378514753", "bodyText": "Thought we nixed ADMIN in authorities going forward.", "author": "als364", "createdAt": "2020-02-12T21:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1NDgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NDk5Mw==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r379154993", "bodyText": "Yeah, good point \u2013\u00a0ignore my 2nd and 4th ideas then :)\nFor clarity: renaming the authority is optional. But adding a comment to the list above the enum is blocking. (It may also be a good idea to add a note to that comment, clarifying that we want to not use ADMIN in any future authority names!)", "author": "gjuggler", "createdAt": "2020-02-13T22:27:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1NDgyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1NTY1MQ==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378355651", "bodyText": "Naming nit: I'm not in love with the \"federated\" interstitial word there. I think the clarity of naming wouldn't be meaningfully affected if you dropped it. \u2013\u00a0AdminWorkspaceDetailsResponse.", "author": "gjuggler", "createdAt": "2020-02-12T16:14:33Z", "path": "api/src/main/resources/workbench.yaml", "diffHunk": "@@ -4320,3 +4343,52 @@ definitions:\n         type: \"array\"\n         items:\n           $ref: \"#/definitions/Institution\"\n+\n+  AdminFederatedWorkspaceDetailsResponse:", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNDk4OA==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378514988", "bodyText": "I guess if you read the function instead of just looking at the name it's clear that it's pulling information from different places.", "author": "als364", "createdAt": "2020-02-12T21:12:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1NTY1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1ODUxMw==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378358513", "bodyText": "Wow \u2013\u00a0does Swagger-codegen really just collapse tokens like this? Bummer.", "author": "gjuggler", "createdAt": "2020-02-12T16:18:41Z", "path": "ui/src/app/components/side-nav.tsx", "diffHunk": "@@ -316,7 +317,8 @@ export class SideNav extends React.Component<SideNavProps, SideNavState> {\n       />\n       {\n         (profile.authorities.includes(Authority.ACCESSCONTROLADMIN)\n-          || profile.authorities.includes(Authority.COMMUNICATIONSADMIN)) && <SideNavItem\n+          || profile.authorities.includes(Authority.COMMUNICATIONSADMIN)\n+          || profile.authorities.includes(Authority.WORKSPACESVIEW)) && <SideNavItem", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNTIxMw==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378515213", "bodyText": "what do you mean?", "author": "als364", "createdAt": "2020-02-12T21:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1ODUxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NTM4Nw==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r379155387", "bodyText": "Yeah, I was just commenting on the way WORKSPACES_VIEW becomes WORKSPACESVIEW in our UI code. I hadn't realized that before, and it's sad. No action here!", "author": "gjuggler", "createdAt": "2020-02-13T22:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1ODUxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2OTQwMQ==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r379169401", "bodyText": "I'm guessing WORKSPACES_VIEW -> WORKSPACESVIEW.  I was quite surprised to see that the first time I did.  But it looks like all the UI does this.", "author": "jmthibault79", "createdAt": "2020-02-13T23:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1ODUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1OTU2OQ==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378359569", "bodyText": "nit: best practice is to use reactStyles({ ... }) for better type-safety. See code for details.", "author": "gjuggler", "createdAt": "2020-02-12T16:20:22Z", "path": "ui/src/app/pages/admin/admin-workspace.tsx", "diffHunk": "@@ -0,0 +1,301 @@\n+import * as React from 'react';\n+\n+import {Component} from '@angular/core';\n+\n+import {Button, Clickable} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {workspaceAdminApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {ReactWrapperBase} from 'app/utils';\n+import {\n+  getSelectedPopulations,\n+  getSelectedResearchPurposeItems\n+} from 'app/utils/research-purpose';\n+\n+import {\n+  AdminWorkspaceResources,\n+  UserRole,\n+  Workspace\n+} from 'generated/fetch';\n+\n+\n+const styles = {", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNTQ1Nw==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378515457", "bodyText": "whoops! an instance in which insufficient copy/paste bites me.", "author": "als364", "createdAt": "2020-02-12T21:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1OTU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2MDk1Nw==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378360957", "bodyText": "How important is it to create a deep-but-empty object here? IMO it might save a bit of maintenance over time to leave this null to start and not have to worry about deep-constructing the object. (But I guess that's a trade-off against the cost of doing qualified indexing in the render section... totally fine if you ended up concluding that was more important.)", "author": "gjuggler", "createdAt": "2020-02-12T16:22:29Z", "path": "ui/src/app/pages/admin/admin-workspace.tsx", "diffHunk": "@@ -0,0 +1,301 @@\n+import * as React from 'react';\n+\n+import {Component} from '@angular/core';\n+\n+import {Button, Clickable} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {workspaceAdminApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {ReactWrapperBase} from 'app/utils';\n+import {\n+  getSelectedPopulations,\n+  getSelectedResearchPurposeItems\n+} from 'app/utils/research-purpose';\n+\n+import {\n+  AdminWorkspaceResources,\n+  UserRole,\n+  Workspace\n+} from 'generated/fetch';\n+\n+\n+const styles = {\n+  fixedWidthWithMargin: {\n+    width: '10rem',\n+    marginRight: '1rem'\n+  },\n+  dropdownIcon: {\n+    marginRight: '1rem',\n+    transform: 'rotate(180deg)',\n+    transition: 'transform 0.5s',\n+    color: colors.primary\n+  },\n+  dropdownIconOpen: {\n+    transform: 'rotate(0deg)',\n+  }\n+};\n+\n+const FlexColumnWithRightMargin = ({style = {}, children}) => {\n+  return <FlexColumn style={{...styles.fixedWidthWithMargin, ...style}}>\n+    {...children}\n+  </FlexColumn>;\n+};\n+\n+const LabelWithPrimaryColor = ({style = {}, children}) => {\n+  return <label style={{color: colors.primary, ...style}}>\n+    {...children}\n+  </label>;\n+};\n+\n+interface State {\n+  googleProject: string;\n+  workspace: Workspace;\n+  collaborators: Array<UserRole>;\n+  resources: AdminWorkspaceResources;\n+  detailsOpen: boolean;\n+}\n+\n+export class AdminWorkspace extends React.Component<{}, State> {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      googleProject: '',\n+      workspace: null,\n+      collaborators: [],\n+      resources: {", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNjY4OA==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378516688", "bodyText": "Probably not that important; in fact, it might end up cleaner overall if I leave it out.", "author": "als364", "createdAt": "2020-02-12T21:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2MDk1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2MTcwNQ==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378361705", "bodyText": "[opt nit] This is trivial enough and only used in one place, it's probably safe to do the setState inline.", "author": "gjuggler", "createdAt": "2020-02-12T16:23:29Z", "path": "ui/src/app/pages/admin/admin-workspace.tsx", "diffHunk": "@@ -0,0 +1,301 @@\n+import * as React from 'react';\n+\n+import {Component} from '@angular/core';\n+\n+import {Button, Clickable} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {workspaceAdminApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {ReactWrapperBase} from 'app/utils';\n+import {\n+  getSelectedPopulations,\n+  getSelectedResearchPurposeItems\n+} from 'app/utils/research-purpose';\n+\n+import {\n+  AdminWorkspaceResources,\n+  UserRole,\n+  Workspace\n+} from 'generated/fetch';\n+\n+\n+const styles = {\n+  fixedWidthWithMargin: {\n+    width: '10rem',\n+    marginRight: '1rem'\n+  },\n+  dropdownIcon: {\n+    marginRight: '1rem',\n+    transform: 'rotate(180deg)',\n+    transition: 'transform 0.5s',\n+    color: colors.primary\n+  },\n+  dropdownIconOpen: {\n+    transform: 'rotate(0deg)',\n+  }\n+};\n+\n+const FlexColumnWithRightMargin = ({style = {}, children}) => {\n+  return <FlexColumn style={{...styles.fixedWidthWithMargin, ...style}}>\n+    {...children}\n+  </FlexColumn>;\n+};\n+\n+const LabelWithPrimaryColor = ({style = {}, children}) => {\n+  return <label style={{color: colors.primary, ...style}}>\n+    {...children}\n+  </label>;\n+};\n+\n+interface State {\n+  googleProject: string;\n+  workspace: Workspace;\n+  collaborators: Array<UserRole>;\n+  resources: AdminWorkspaceResources;\n+  detailsOpen: boolean;\n+}\n+\n+export class AdminWorkspace extends React.Component<{}, State> {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      googleProject: '',\n+      workspace: null,\n+      collaborators: [],\n+      resources: {\n+        workspaceObjects: {\n+          cohortCount: 0,\n+          conceptSetCount: 0,\n+          datasetCount: 0\n+        },\n+        cloudStorage: {\n+          notebookFileCount: 0,\n+          nonNotebookFileCount: 0,\n+          storageBytesUsed: 0\n+        },\n+        clusters: []\n+      },\n+      detailsOpen: false\n+    };\n+  }\n+\n+  updateProject(newProject: string) {", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2NjA1Mg==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378366052", "bodyText": "[Hobby-horse of mine, but ultimately optional] IMO console.error should be banned from our frontend code :) Can you add a simple loadingError state variable and display? It doesn't need to be sophisticated.\nAlternatively, we can ignore on the understanding that (1) this isn't really end-user-facing and (2) we're tracking https://precisionmedicineinitiative.atlassian.net/browse/RW-4392 and https://precisionmedicineinitiative.atlassian.net/browse/RW-4406 to improve this across the Workbench.", "author": "gjuggler", "createdAt": "2020-02-12T16:30:21Z", "path": "ui/src/app/pages/admin/admin-workspace.tsx", "diffHunk": "@@ -0,0 +1,301 @@\n+import * as React from 'react';\n+\n+import {Component} from '@angular/core';\n+\n+import {Button, Clickable} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {workspaceAdminApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {ReactWrapperBase} from 'app/utils';\n+import {\n+  getSelectedPopulations,\n+  getSelectedResearchPurposeItems\n+} from 'app/utils/research-purpose';\n+\n+import {\n+  AdminWorkspaceResources,\n+  UserRole,\n+  Workspace\n+} from 'generated/fetch';\n+\n+\n+const styles = {\n+  fixedWidthWithMargin: {\n+    width: '10rem',\n+    marginRight: '1rem'\n+  },\n+  dropdownIcon: {\n+    marginRight: '1rem',\n+    transform: 'rotate(180deg)',\n+    transition: 'transform 0.5s',\n+    color: colors.primary\n+  },\n+  dropdownIconOpen: {\n+    transform: 'rotate(0deg)',\n+  }\n+};\n+\n+const FlexColumnWithRightMargin = ({style = {}, children}) => {\n+  return <FlexColumn style={{...styles.fixedWidthWithMargin, ...style}}>\n+    {...children}\n+  </FlexColumn>;\n+};\n+\n+const LabelWithPrimaryColor = ({style = {}, children}) => {\n+  return <label style={{color: colors.primary, ...style}}>\n+    {...children}\n+  </label>;\n+};\n+\n+interface State {\n+  googleProject: string;\n+  workspace: Workspace;\n+  collaborators: Array<UserRole>;\n+  resources: AdminWorkspaceResources;\n+  detailsOpen: boolean;\n+}\n+\n+export class AdminWorkspace extends React.Component<{}, State> {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      googleProject: '',\n+      workspace: null,\n+      collaborators: [],\n+      resources: {\n+        workspaceObjects: {\n+          cohortCount: 0,\n+          conceptSetCount: 0,\n+          datasetCount: 0\n+        },\n+        cloudStorage: {\n+          notebookFileCount: 0,\n+          nonNotebookFileCount: 0,\n+          storageBytesUsed: 0\n+        },\n+        clusters: []\n+      },\n+      detailsOpen: false\n+    };\n+  }\n+\n+  updateProject(newProject: string) {\n+    this.setState({googleProject: newProject});\n+  }\n+\n+  getFederatedWorkspaceInformation() {\n+    workspaceAdminApi().getFederatedWorkspaceDetails(this.state.googleProject).then(\n+      response => {\n+        this.setState({\n+          workspace: response.workspace,\n+          collaborators: response.collaborators,\n+          resources: response.resources\n+        });\n+      }\n+    ).catch(error => {\n+      console.error(error);", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2Nzc2Nw==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378367767", "bodyText": "[nit] Would it be possible to shorten this name? It distracts a bit from the markup since it's used a lot. Some ideas:\n\nFlexWithMargin\nAdminFlexColumn\nAdminFlex", "author": "gjuggler", "createdAt": "2020-02-12T16:32:57Z", "path": "ui/src/app/pages/admin/admin-workspace.tsx", "diffHunk": "@@ -0,0 +1,301 @@\n+import * as React from 'react';\n+\n+import {Component} from '@angular/core';\n+\n+import {Button, Clickable} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {workspaceAdminApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {ReactWrapperBase} from 'app/utils';\n+import {\n+  getSelectedPopulations,\n+  getSelectedResearchPurposeItems\n+} from 'app/utils/research-purpose';\n+\n+import {\n+  AdminWorkspaceResources,\n+  UserRole,\n+  Workspace\n+} from 'generated/fetch';\n+\n+\n+const styles = {\n+  fixedWidthWithMargin: {\n+    width: '10rem',\n+    marginRight: '1rem'\n+  },\n+  dropdownIcon: {\n+    marginRight: '1rem',\n+    transform: 'rotate(180deg)',\n+    transition: 'transform 0.5s',\n+    color: colors.primary\n+  },\n+  dropdownIconOpen: {\n+    transform: 'rotate(0deg)',\n+  }\n+};\n+\n+const FlexColumnWithRightMargin = ({style = {}, children}) => {", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0Mjk4OQ==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378342989", "bodyText": "style nit: I'd prefer a construction like\nworkspaceMaybe.map(this::getDetailsResponse).orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build())\nover an explicit ifPresent() / get() pair", "author": "jmthibault79", "createdAt": "2020-02-12T15:55:55Z", "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminController.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.pmiops.workbench.workspaceadmin;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.pmiops.workbench.annotations.AuthorityRequired;\n+import org.pmiops.workbench.api.WorkspaceAdminApiDelegate;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n+import org.pmiops.workbench.model.AdminFederatedWorkspaceDetailsResponse;\n+import org.pmiops.workbench.model.AdminWorkspaceCloudStorageCounts;\n+import org.pmiops.workbench.model.AdminWorkspaceObjectsCounts;\n+import org.pmiops.workbench.model.AdminWorkspaceResources;\n+import org.pmiops.workbench.model.Authority;\n+import org.pmiops.workbench.model.ClusterStatus;\n+import org.pmiops.workbench.model.ListClusterResponse;\n+import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.notebooks.LeonardoNotebooksClient;\n+import org.pmiops.workbench.utils.WorkspaceMapper;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class WorkspaceAdminController implements WorkspaceAdminApiDelegate {\n+  private final FireCloudService fireCloudService;\n+  private final LeonardoNotebooksClient leonardoNotebooksClient;\n+  private final WorkspaceAdminService workspaceAdminService;\n+  private final WorkspaceMapper workspaceMapper;\n+  private final WorkspaceService workspaceService;\n+\n+  @Autowired\n+  public WorkspaceAdminController(\n+      FireCloudService fireCloudService,\n+      LeonardoNotebooksClient leonardoNotebooksClient,\n+      WorkspaceAdminService workspaceAdminService,\n+      WorkspaceMapper workspaceMapper,\n+      WorkspaceService workspaceService) {\n+    this.fireCloudService = fireCloudService;\n+    this.leonardoNotebooksClient = leonardoNotebooksClient;\n+    this.workspaceAdminService = workspaceAdminService;\n+    this.workspaceMapper = workspaceMapper;\n+    this.workspaceService = workspaceService;\n+  }\n+\n+  @Override\n+  @AuthorityRequired({Authority.WORKSPACES_VIEW})\n+  public ResponseEntity<AdminFederatedWorkspaceDetailsResponse> getFederatedWorkspaceDetails(\n+      String workspaceNamespace) {\n+    Optional<DbWorkspace> workspaceMaybe =\n+        workspaceAdminService.getFirstWorkspaceByNamespace(workspaceNamespace);\n+    if (workspaceMaybe.isPresent()) {", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0NzcwOA==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r379147708", "bodyText": "map doesn't like that one would be parameterized and the other wouldn't.", "author": "als364", "createdAt": "2020-02-13T22:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM0Mjk4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1MDIyNQ==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378350225", "bodyText": "I don't love that we have DB objects and IDs in this interface, but looking at other Workspace code I think that is too big a hill to climb for today.  This fits our current state of the world.", "author": "jmthibault79", "createdAt": "2020-02-12T16:06:21Z", "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminService.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.pmiops.workbench.workspaceadmin;\n+\n+import java.util.Optional;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.AdminWorkspaceCloudStorageCounts;\n+import org.pmiops.workbench.model.AdminWorkspaceObjectsCounts;\n+\n+public interface WorkspaceAdminService {", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1MjQyMQ==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378352421", "bodyText": "can get the stream count() directly here if switching to long is acceptable", "author": "jmthibault79", "createdAt": "2020-02-12T16:09:40Z", "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceImpl.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.pmiops.workbench.workspaceadmin;\n+\n+import com.google.cloud.storage.BlobInfo;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.pmiops.workbench.db.dao.CohortDao;\n+import org.pmiops.workbench.db.dao.ConceptSetDao;\n+import org.pmiops.workbench.db.dao.DataSetDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.model.AdminWorkspaceCloudStorageCounts;\n+import org.pmiops.workbench.model.AdminWorkspaceObjectsCounts;\n+import org.pmiops.workbench.notebooks.NotebooksService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class WorkspaceAdminServiceImpl implements WorkspaceAdminService {\n+  private final CloudStorageService cloudStorageService;\n+  private final CohortDao cohortDao;\n+  private final ConceptSetDao conceptSetDao;\n+  private final DataSetDao dataSetDao;\n+  private final FireCloudService fireCloudService;\n+  private final NotebooksService notebooksService;\n+  private final WorkspaceDao workspaceDao;\n+\n+  @Autowired\n+  public WorkspaceAdminServiceImpl(\n+      CloudStorageService cloudStorageService,\n+      CohortDao cohortDao,\n+      ConceptSetDao conceptSetDao,\n+      DataSetDao dataSetDao,\n+      FireCloudService fireCloudService,\n+      NotebooksService notebooksService,\n+      WorkspaceDao workspaceDao) {\n+    this.cloudStorageService = cloudStorageService;\n+    this.cohortDao = cohortDao;\n+    this.conceptSetDao = conceptSetDao;\n+    this.dataSetDao = dataSetDao;\n+    this.fireCloudService = fireCloudService;\n+    this.notebooksService = notebooksService;\n+    this.workspaceDao = workspaceDao;\n+  }\n+\n+  @Override\n+  public Optional<DbWorkspace> getFirstWorkspaceByNamespace(String workspaceNamespace) {\n+    return workspaceDao.findFirstByWorkspaceNamespaceOrderByFirecloudNameAsc(workspaceNamespace);\n+  }\n+\n+  @Override\n+  public AdminWorkspaceObjectsCounts getAdminWorkspaceObjects(long workspaceId) {\n+    int cohortCount = cohortDao.countByWorkspaceId(workspaceId);\n+    int conceptSetCount = conceptSetDao.countByWorkspaceId(workspaceId);\n+    int dataSetCount = dataSetDao.countByWorkspaceId(workspaceId);\n+    return new AdminWorkspaceObjectsCounts()\n+        .cohortCount(cohortCount)\n+        .conceptSetCount(conceptSetCount)\n+        .datasetCount(dataSetCount);\n+  }\n+\n+  @Override\n+  public AdminWorkspaceCloudStorageCounts getAdminWorkspaceCloudStorageCounts(\n+      String workspaceNamespace, String workspaceName) {\n+    String bucketName =\n+        fireCloudService\n+            .getWorkspace(workspaceNamespace, workspaceName)\n+            .getWorkspace()\n+            .getBucketName();\n+\n+    int notebookFilesCount =\n+        notebooksService.getNotebooks(workspaceNamespace, workspaceName).size();\n+    int nonNotebookFilesCount = getNonNotebookFileCount(bucketName);\n+    long storageSizeBytes = getStorageSizeBytes(bucketName);\n+\n+    return new AdminWorkspaceCloudStorageCounts()\n+        .notebookFileCount(notebookFilesCount)\n+        .nonNotebookFileCount(nonNotebookFilesCount)\n+        .storageBytesUsed(storageSizeBytes);\n+  }\n+\n+  private int getNonNotebookFileCount(String bucketName) {\n+    return cloudStorageService\n+        .getBlobListForPrefix(bucketName, NotebooksService.NOTEBOOKS_WORKSPACE_DIRECTORY).stream()\n+        .filter(blob -> !NotebooksService.NOTEBOOK_PATTERN.matcher(blob.getName()).matches())\n+        .collect(Collectors.toList())", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNDYwOA==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378514608", "bodyText": "considered it. it makes it a bit ugly in other ways.", "author": "als364", "createdAt": "2020-02-12T21:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1MjQyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1NTAxOA==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378355018", "bodyText": "was this a bug?", "author": "jmthibault79", "createdAt": "2020-02-12T16:13:32Z", "path": "ui/src/app/components/side-nav.tsx", "diffHunk": "@@ -328,19 +330,27 @@ export class SideNav extends React.Component<SideNavProps, SideNavState> {\n       {\n         profile.authorities.includes(Authority.ACCESSCONTROLADMIN) && this.state.showAdminOptions && <SideNavItem\n           content={'User Admin'}\n-          onToggleSideNav={() => this.props.onToggleSideNav}\n+          onToggleSideNav={() => this.props.onToggleSideNav()}", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0NTk0NA==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r379145944", "bodyText": "Yep.", "author": "als364", "createdAt": "2020-02-13T22:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1NTAxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2MzEwNg==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378363106", "bodyText": "I like these", "author": "jmthibault79", "createdAt": "2020-02-12T16:25:41Z", "path": "ui/src/app/pages/admin/admin-workspace.tsx", "diffHunk": "@@ -0,0 +1,301 @@\n+import * as React from 'react';\n+\n+import {Component} from '@angular/core';\n+\n+import {Button, Clickable} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {workspaceAdminApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {ReactWrapperBase} from 'app/utils';\n+import {\n+  getSelectedPopulations,\n+  getSelectedResearchPurposeItems\n+} from 'app/utils/research-purpose';\n+\n+import {\n+  AdminWorkspaceResources,\n+  UserRole,\n+  Workspace\n+} from 'generated/fetch';\n+\n+\n+const styles = {\n+  fixedWidthWithMargin: {\n+    width: '10rem',\n+    marginRight: '1rem'\n+  },\n+  dropdownIcon: {\n+    marginRight: '1rem',\n+    transform: 'rotate(180deg)',\n+    transition: 'transform 0.5s',\n+    color: colors.primary\n+  },\n+  dropdownIconOpen: {\n+    transform: 'rotate(0deg)',\n+  }\n+};\n+\n+const FlexColumnWithRightMargin = ({style = {}, children}) => {", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2NTc2Mg==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378365762", "bodyText": "This is already pretty great, but how about a function like this: workspaceInfoField(labelText, divContents)", "author": "jmthibault79", "createdAt": "2020-02-12T16:29:54Z", "path": "ui/src/app/pages/admin/admin-workspace.tsx", "diffHunk": "@@ -0,0 +1,301 @@\n+import * as React from 'react';\n+\n+import {Component} from '@angular/core';\n+\n+import {Button, Clickable} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {workspaceAdminApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {ReactWrapperBase} from 'app/utils';\n+import {\n+  getSelectedPopulations,\n+  getSelectedResearchPurposeItems\n+} from 'app/utils/research-purpose';\n+\n+import {\n+  AdminWorkspaceResources,\n+  UserRole,\n+  Workspace\n+} from 'generated/fetch';\n+\n+\n+const styles = {\n+  fixedWidthWithMargin: {\n+    width: '10rem',\n+    marginRight: '1rem'\n+  },\n+  dropdownIcon: {\n+    marginRight: '1rem',\n+    transform: 'rotate(180deg)',\n+    transition: 'transform 0.5s',\n+    color: colors.primary\n+  },\n+  dropdownIconOpen: {\n+    transform: 'rotate(0deg)',\n+  }\n+};\n+\n+const FlexColumnWithRightMargin = ({style = {}, children}) => {\n+  return <FlexColumn style={{...styles.fixedWidthWithMargin, ...style}}>\n+    {...children}\n+  </FlexColumn>;\n+};\n+\n+const LabelWithPrimaryColor = ({style = {}, children}) => {\n+  return <label style={{color: colors.primary, ...style}}>\n+    {...children}\n+  </label>;\n+};\n+\n+interface State {\n+  googleProject: string;\n+  workspace: Workspace;\n+  collaborators: Array<UserRole>;\n+  resources: AdminWorkspaceResources;\n+  detailsOpen: boolean;\n+}\n+\n+export class AdminWorkspace extends React.Component<{}, State> {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      googleProject: '',\n+      workspace: null,\n+      collaborators: [],\n+      resources: {\n+        workspaceObjects: {\n+          cohortCount: 0,\n+          conceptSetCount: 0,\n+          datasetCount: 0\n+        },\n+        cloudStorage: {\n+          notebookFileCount: 0,\n+          nonNotebookFileCount: 0,\n+          storageBytesUsed: 0\n+        },\n+        clusters: []\n+      },\n+      detailsOpen: false\n+    };\n+  }\n+\n+  updateProject(newProject: string) {\n+    this.setState({googleProject: newProject});\n+  }\n+\n+  getFederatedWorkspaceInformation() {\n+    workspaceAdminApi().getFederatedWorkspaceDetails(this.state.googleProject).then(\n+      response => {\n+        this.setState({\n+          workspace: response.workspace,\n+          collaborators: response.collaborators,\n+          resources: response.resources\n+        });\n+      }\n+    ).catch(error => {\n+      console.error(error);\n+    });\n+  }\n+\n+  maybeGetFederatedWorkspaceInformation(event) {\n+    if (event.key === 'Enter') {\n+      return this.getFederatedWorkspaceInformation();\n+    }\n+  }\n+\n+  render() {\n+    const {workspace, collaborators, resources, detailsOpen} = this.state;\n+    return <div>\n+      <h2>Manage Workspaces</h2>\n+      <FlexRow style={{justifyContent: 'flex-start', alignItems: 'center'}}>\n+        <label style={{marginRight: '1rem'}}>Google Project ID</label>\n+        <TextInput\n+            style={styles.fixedWidthWithMargin}\n+            onChange={value => this.updateProject(value)}\n+            onKeyDown={event => this.maybeGetFederatedWorkspaceInformation(event)}\n+        />\n+        <Button\n+            style={{height: '1.5rem'}}\n+            onClick={() => this.getFederatedWorkspaceInformation()}\n+        >\n+          Search\n+        </Button>\n+      </FlexRow>\n+      {\n+        workspace && <FlexColumn>\n+          <h3>Workspace Admin Actions</h3>\n+          <FlexRow style={{justifyContent: 'space-between'}}>\n+            <Button>Shut down all VMs</Button>\n+            <Button>Disable workspace</Button>\n+            <Button>Disable all collaborators</Button>\n+            <Button>Exclude from public directory</Button>\n+            <Button>Log administrative comment</Button>\n+            <Button>Publish workspace</Button>\n+          </FlexRow>\n+        </FlexColumn>\n+      }\n+      {workspace && (resources.workspaceObjects || resources.cloudStorage) &&\n+        <FlexColumn style={{flex: '1 0 auto'}}>\n+          <h3>Basic Information</h3>\n+          <FlexRow>\n+            <FlexColumnWithRightMargin>", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM3MzExNw==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378373117", "bodyText": "hooray for reuse!\nWould it make sense to have the parameters be ResearchPurpose instead, since that is all these functions need?", "author": "jmthibault79", "createdAt": "2020-02-12T16:40:56Z", "path": "ui/src/app/utils/research-purpose.ts", "diffHunk": "@@ -0,0 +1,26 @@\n+import {ResearchPurposeItems, SpecificPopulationItems} from 'app/pages/workspace/workspace-edit';\n+import {SpecificPopulationEnum, Workspace} from 'generated/fetch';\n+\n+export function getSelectedResearchPurposeItems(workspace: Workspace) {", "originalCommit": "e08f465be337ef7ff50a6979b3a748bedf00db2d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNzA0Ng==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r378517046", "bodyText": "probably yeah", "author": "als364", "createdAt": "2020-02-12T21:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM3MzExNw=="}], "type": "inlineReview"}, {"oid": "f73a21927ca12fcf805672918f605b7df5fc7d07", "url": "https://github.com/all-of-us/workbench/commit/f73a21927ca12fcf805672918f605b7df5fc7d07", "message": "fix test", "committedDate": "2020-02-12T19:09:38Z", "type": "commit"}, {"oid": "a1a753f94f2451af70f53b10d7aa7e5c09b1c4ee", "url": "https://github.com/all-of-us/workbench/commit/a1a753f94f2451af70f53b10d7aa7e5c09b1c4ee", "message": "ui feedback", "committedDate": "2020-02-13T22:06:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3NTA1Ng==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r379175056", "bodyText": "const styles = reactStyles({", "author": "jmthibault79", "createdAt": "2020-02-13T23:24:39Z", "path": "ui/src/app/pages/admin/admin-workspace.tsx", "diffHunk": "@@ -0,0 +1,310 @@\n+import * as React from 'react';\n+\n+import {Component} from '@angular/core';\n+\n+import {Button, Clickable} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {workspaceAdminApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {ReactWrapperBase} from 'app/utils';\n+import {\n+  getSelectedPopulations,\n+  getSelectedResearchPurposeItems\n+} from 'app/utils/research-purpose';\n+\n+import {\n+  AdminWorkspaceResources,\n+  UserRole,\n+  Workspace\n+} from 'generated/fetch';\n+\n+\n+const reactStyles = {", "originalCommit": "a1a753f94f2451af70f53b10d7aa7e5c09b1c4ee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3NTIxNw==", "url": "https://github.com/all-of-us/workbench/pull/3117#discussion_r379175217", "bodyText": "nice", "author": "jmthibault79", "createdAt": "2020-02-13T23:25:08Z", "path": "ui/src/app/pages/admin/admin-workspace.tsx", "diffHunk": "@@ -0,0 +1,310 @@\n+import * as React from 'react';\n+\n+import {Component} from '@angular/core';\n+\n+import {Button, Clickable} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {workspaceAdminApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {ReactWrapperBase} from 'app/utils';\n+import {\n+  getSelectedPopulations,\n+  getSelectedResearchPurposeItems\n+} from 'app/utils/research-purpose';\n+\n+import {\n+  AdminWorkspaceResources,\n+  UserRole,\n+  Workspace\n+} from 'generated/fetch';\n+\n+\n+const reactStyles = {\n+  fixedWidthWithMargin: {\n+    width: '10rem',\n+    marginRight: '1rem'\n+  },\n+  dropdownIcon: {\n+    marginRight: '1rem',\n+    transform: 'rotate(180deg)',\n+    transition: 'transform 0.5s',\n+    color: colors.primary\n+  },\n+  dropdownIconOpen: {\n+    transform: 'rotate(0deg)',\n+  }\n+};\n+\n+const FlexWithMargin = ({style = {}, children}) => {\n+  return <FlexColumn style={{...reactStyles.fixedWidthWithMargin, ...style}}>\n+    {...children}\n+  </FlexColumn>;\n+};\n+\n+const PurpleLabel = ({style = {}, children}) => {\n+  return <label style={{color: colors.primary, ...style}}>\n+    {...children}\n+  </label>;\n+};\n+\n+interface State {\n+  googleProject: string;\n+  workspace: Workspace;\n+  collaborators: Array<UserRole>;\n+  resources: AdminWorkspaceResources;\n+  detailsOpen: boolean;\n+}\n+\n+export class AdminWorkspace extends React.Component<{}, State> {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      googleProject: '',\n+      workspace: null,\n+      collaborators: [],\n+      resources: {},\n+      detailsOpen: false\n+    };\n+  }\n+\n+  getFederatedWorkspaceInformation() {\n+    workspaceAdminApi().getFederatedWorkspaceDetails(this.state.googleProject).then(\n+      response => {\n+        this.setState({\n+          workspace: response.workspace,\n+          collaborators: response.collaborators,\n+          resources: response.resources\n+        });\n+      }\n+    );\n+  }\n+\n+  maybeGetFederatedWorkspaceInformation(event) {\n+    if (event.key === 'Enter') {\n+      return this.getFederatedWorkspaceInformation();\n+    }\n+  }\n+\n+  workspaceInfoField(labelText, divContents, widthMultiplier = 1) {\n+    const width = 10 * (widthMultiplier - 1) + 9;\n+    const widthString = width + 'rem';\n+    return <FlexWithMargin style={{width: widthString}}>\n+      <PurpleLabel>{labelText}</PurpleLabel>\n+      <div style={{wordWrap: 'break-word'}}>{divContents}</div>\n+    </FlexWithMargin>\n+  }\n+\n+  render() {\n+    const {workspace, collaborators, resources, detailsOpen} = this.state;\n+    return <div>\n+      <h2>Manage Workspaces</h2>\n+      <FlexRow style={{justifyContent: 'flex-start', alignItems: 'center'}}>\n+        <label style={{marginRight: '1rem'}}>Google Project ID</label>\n+        <TextInput\n+            style={reactStyles.fixedWidthWithMargin}\n+            onChange={value => this.setState({googleProject: value})}\n+            onKeyDown={event => this.maybeGetFederatedWorkspaceInformation(event)}\n+        />\n+        <Button\n+            style={{height: '1.5rem'}}\n+            onClick={() => this.getFederatedWorkspaceInformation()}\n+        >\n+          Search\n+        </Button>\n+      </FlexRow>\n+      {\n+        workspace && <FlexColumn>\n+          <h3>Workspace Admin Actions</h3>\n+          <FlexRow style={{justifyContent: 'space-between'}}>\n+            <Button>Shut down all VMs</Button>\n+            <Button>Disable workspace</Button>\n+            <Button>Disable all collaborators</Button>\n+            <Button>Exclude from public directory</Button>\n+            <Button>Log administrative comment</Button>\n+            <Button>Publish workspace</Button>\n+          </FlexRow>\n+        </FlexColumn>\n+      }\n+      {workspace && (resources.workspaceObjects || resources.cloudStorage) &&\n+        <FlexColumn style={{flex: '1 0 auto'}}>\n+          <h3>Basic Information</h3>\n+          <FlexRow>\n+            {this.workspaceInfoField('Workspace Name', workspace.name)}", "originalCommit": "a1a753f94f2451af70f53b10d7aa7e5c09b1c4ee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8a7c0296d7b60807a1794f718c5fff8eea51874f", "url": "https://github.com/all-of-us/workbench/commit/8a7c0296d7b60807a1794f718c5fff8eea51874f", "message": "lint", "committedDate": "2020-02-14T17:17:02Z", "type": "commit"}, {"oid": "a9e3a80c7ba1efe81213ab570ca9cb0a24259a96", "url": "https://github.com/all-of-us/workbench/commit/a9e3a80c7ba1efe81213ab570ca9cb0a24259a96", "message": "reconfigure styles", "committedDate": "2020-02-14T20:56:03Z", "type": "commit"}, {"oid": "561f7810512269bcb77da4b0ac0c7f89cd773208", "url": "https://github.com/all-of-us/workbench/commit/561f7810512269bcb77da4b0ac0c7f89cd773208", "message": "lint", "committedDate": "2020-02-14T22:25:42Z", "type": "commit"}, {"oid": "e4ba3c9e40c05e3e00336da86ff218f52821689e", "url": "https://github.com/all-of-us/workbench/commit/e4ba3c9e40c05e3e00336da86ff218f52821689e", "message": "new test", "committedDate": "2020-02-18T16:00:59Z", "type": "commit"}]}