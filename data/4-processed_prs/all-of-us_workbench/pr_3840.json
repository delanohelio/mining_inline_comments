{"pr_number": 3840, "pr_title": "[risk=no][RW-5342] Add useNavigation hook", "pr_createdAt": "2020-08-03T15:34:48Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3840", "timeline": [{"oid": "23efa88c9dac002d344ffdfd5ada511920b28eff", "url": "https://github.com/all-of-us/workbench/commit/23efa88c9dac002d344ffdfd5ada511920b28eff", "message": "Add hook to make setting nav state a bit cleaner", "committedDate": "2020-08-03T15:14:12Z", "type": "commit"}, {"oid": "7388d416d1e851630163f654b1c5cc9c75af66a4", "url": "https://github.com/all-of-us/workbench/commit/7388d416d1e851630163f654b1c5cc9c75af66a4", "message": "Add comment", "committedDate": "2020-08-03T15:17:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2NzcwOQ==", "url": "https://github.com/all-of-us/workbench/pull/3840#discussion_r464567709", "bodyText": "I didn't read this name as a boolean and  was confused. Maybe something like doNavigate or canNavigate?", "author": "jaycarlton", "createdAt": "2020-08-03T17:46:13Z", "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -50,14 +50,8 @@ export interface AuditPageProps {\n \n const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, buttonLabel, queryText}) => {\n   const [auditSubject, setAuditSubject] = useState(initialAuditSubject);\n-  const [loadNextSubject, setLoadNextSubject] = useState(false);\n   const [downloadSqlFile, setDownloadSqlFile] = useState(false);\n-\n-  useEffect(() =>  {\n-    if (loadNextSubject) {\n-      setLoadNextSubject(false);\n-    }\n-  }, [loadNextSubject]);\n+  const [navSubject, setNavSubject] = useNavigation();", "originalCommit": "7388d416d1e851630163f654b1c5cc9c75af66a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTU4Mg==", "url": "https://github.com/all-of-us/workbench/pull/3840#discussion_r464591582", "bodyText": "Changed to nextSubjectRequested - is that clearer?", "author": "petesantos", "createdAt": "2020-08-03T18:34:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2NzcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2ODAzMA==", "url": "https://github.com/all-of-us/workbench/pull/3840#discussion_r464568030", "bodyText": "Can we  change <Navigate/> to take this in as a property like enabled so we don't need the &&? I guess I  was thinking the Navigate element would be absorbed into a hook as well, but I don't know that I understood.", "author": "jaycarlton", "createdAt": "2020-08-03T17:46:52Z", "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -91,7 +85,7 @@ const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, but\n   };\n \n   return <React.Fragment>\n-    {loadNextSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}\n+    {navSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}", "originalCommit": "7388d416d1e851630163f654b1c5cc9c75af66a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4Nzk2MQ==", "url": "https://github.com/all-of-us/workbench/pull/3840#discussion_r464587961", "bodyText": "This is the approach I initially took with the hook and had some type issues with it. I wasn't thrilled with the approach and after doing some more reading it seems that having a hook return a component for render is not recommended as it has negative effects on the state management.\nI personally do like the && (JS short-circuiting) approach as it is used in the react world quite a bit. Also I feel it is very explicit about state and what will render. In this case navigation occurs when the node is rendered. I feel it makes the code clear when the state is directly tied to whether the component will render - this pattern would apply to all components. Pushing it down into a component and letting the component decide whether it will render requires a bit more investigation when reading the code at a later date.\nThat said - I could make it look like this (and I do like the look of this/how it reads):\n   <Navigate when={nextSubjectRequested} to={getNextAuditPath(auditSubject)}/>\nhowever there is precedent in the code base for short-circuiting:\n{loading && <SpinnerOverlay/>}\nOverall it would be nice to have a coding style recommendation in place for this. Having when be a property we use for conditional rendering of a component could be nice", "author": "petesantos", "createdAt": "2020-08-03T18:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2ODAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2ODU3NA==", "url": "https://github.com/all-of-us/workbench/pull/3840#discussion_r464568574", "bodyText": "It would help to  have a little more documentation for what this does and doesn't do for you.  Maybe name it  useGatedNavigation?", "author": "jaycarlton", "createdAt": "2020-08-03T17:47:58Z", "path": "ui/src/app/components/app-router.tsx", "diffHunk": "@@ -59,3 +59,16 @@ export const Navigate = ({to}): React.ReactElement => {\n   const location = useLocation();\n   return <Redirect to={{pathname: to, state: {from: location}}}/>;\n };\n+\n+// Resets the state after change to prevent a navigation loop", "originalCommit": "7388d416d1e851630163f654b1c5cc9c75af66a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MDk3Ng==", "url": "https://github.com/all-of-us/workbench/pull/3840#discussion_r464590976", "bodyText": "Changed to useNavigationState and updated the comment", "author": "petesantos", "createdAt": "2020-08-03T18:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2ODU3NA=="}], "type": "inlineReview"}, {"oid": "1d3399cd56510d7b2649a6d77ebf76ff1e22eb98", "url": "https://github.com/all-of-us/workbench/commit/1d3399cd56510d7b2649a6d77ebf76ff1e22eb98", "message": "Change state name, add doc", "committedDate": "2020-08-03T18:29:49Z", "type": "commit"}, {"oid": "b3ca179f6339af8920eedaa3fcc7ebb1d8873314", "url": "https://github.com/all-of-us/workbench/commit/b3ca179f6339af8920eedaa3fcc7ebb1d8873314", "message": "Change hook name", "committedDate": "2020-08-03T18:31:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYxNTcwOA==", "url": "https://github.com/all-of-us/workbench/pull/3840#discussion_r464615708", "bodyText": "There's really nothing navigation-specific here. Could  this be more of a useToggle?", "author": "jaycarlton", "createdAt": "2020-08-03T19:24:38Z", "path": "ui/src/app/components/app-router.tsx", "diffHunk": "@@ -59,3 +59,19 @@ export const Navigate = ({to}): React.ReactElement => {\n   const location = useLocation();\n   return <Redirect to={{pathname: to, state: {from: location}}}/>;\n };\n+\n+// This is essentially a setState for navigation.\n+// When the navigation state is set to true it will trigger a render.\n+// At this point the state should be used to render the 'Navigate' component, triggering a route change\n+// This hook will automatically set the state back to false, preventing the need for an additional 'useEffect' per nav item\n+export const useNavigationState = (): [boolean, Function] => {", "originalCommit": "b3ca179f6339af8920eedaa3fcc7ebb1d8873314", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYzNDMzNg==", "url": "https://github.com/all-of-us/workbench/pull/3840#discussion_r464634336", "bodyText": "I like that a lot better - thanks!", "author": "petesantos", "createdAt": "2020-08-03T20:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYxNTcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYxNjE3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3840#discussion_r464616175", "bodyText": "Can we just call this subjectRequested? The first  one is also a next one, so I don't know that next  really signifies anything.\nAlso,  do we really need this other bit? It seems like we've got a boolean tracking whether another property is non-null and/or changed. Can we not express  what we need with useEffect on auditSubject?", "author": "jaycarlton", "createdAt": "2020-08-03T19:25:35Z", "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -50,14 +50,8 @@ export interface AuditPageProps {\n \n const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, buttonLabel, queryText}) => {\n   const [auditSubject, setAuditSubject] = useState(initialAuditSubject);\n-  const [loadNextSubject, setLoadNextSubject] = useState(false);\n   const [downloadSqlFile, setDownloadSqlFile] = useState(false);\n-\n-  useEffect(() =>  {\n-    if (loadNextSubject) {\n-      setLoadNextSubject(false);\n-    }\n-  }, [loadNextSubject]);\n+  const [nextSubjectRequested, setNextSubjectRequested] = useNavigationState();", "originalCommit": "b3ca179f6339af8920eedaa3fcc7ebb1d8873314", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYzNDMwOA==", "url": "https://github.com/all-of-us/workbench/pull/3840#discussion_r464634308", "bodyText": "I updated the name\nThe auditSubject state is needed to update the value in the text box, otherwise it would never change. The boolean state for navigation is more to check whether the user clicked on the \"Audit\" button. Without that information we have not way of knowing whether the user intended to run a new audit.\nThe additional state is a different paradigm from our previous navigation - which was basically a straight up callback. This is where react-router's philosophy leaks out a bit. In react-router's view of the world, it wants everything to be a react component, including navigation. In order navigate, we need to render a component.", "author": "petesantos", "createdAt": "2020-08-03T20:05:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYxNjE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczNDcwNQ==", "url": "https://github.com/all-of-us/workbench/pull/3840#discussion_r464734705", "bodyText": "OK, so a purist could have one piece of state to manage/describe the input box's contents, and  update  the next subject when that was committed, but that's no simpler than what you have here.", "author": "jaycarlton", "createdAt": "2020-08-04T00:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYxNjE3NQ=="}], "type": "inlineReview"}, {"oid": "488f770d8ba3acc2d0b744b675f9a298f116b242", "url": "https://github.com/all-of-us/workbench/commit/488f770d8ba3acc2d0b744b675f9a298f116b242", "message": "Update naming", "committedDate": "2020-08-03T20:05:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxMTYzNg==", "url": "https://github.com/all-of-us/workbench/pull/3840#discussion_r464711636", "bodyText": "this still  seems iffy somehow, to have to evaluate an external variable instead of having this be a prop on Navigate. Other elements have a show property, though if we're using an element to describe a state change, we're already well outside my comfort zone. I want to think of elements as nouns or objects, with possible side effects at render time. But having a new class of elements that are not only stateful but  mutate elements around them seems awkward. So something like  <MyNavigate go={subjectRequested} url={auditUrl}/>.", "author": "jaycarlton", "createdAt": "2020-08-03T23:20:44Z", "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -91,7 +85,7 @@ const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, but\n   };\n \n   return <React.Fragment>\n-    {loadNextSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}\n+    {subjectRequested && <Navigate to={getNextAuditPath(auditSubject)}/>}", "originalCommit": "488f770d8ba3acc2d0b744b675f9a298f116b242", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}