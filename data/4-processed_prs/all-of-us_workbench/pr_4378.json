{"pr_number": 4378, "pr_title": "[RW-5427][risk=no] Runtime control E2E tests", "pr_createdAt": "2020-12-08T22:36:48Z", "pr_url": "https://github.com/all-of-us/workbench/pull/4378", "timeline": [{"oid": "2a7341b7965123c78cc87b97eaec528e9094730f", "url": "https://github.com/all-of-us/workbench/commit/2a7341b7965123c78cc87b97eaec528e9094730f", "message": "shelving", "committedDate": "2020-12-08T22:25:06Z", "type": "commit"}, {"oid": "2c053ec9eee13908b485a9489258706f9121dbb8", "url": "https://github.com/all-of-us/workbench/commit/2c053ec9eee13908b485a9489258706f9121dbb8", "message": "shelving", "committedDate": "2020-12-08T22:25:07Z", "type": "commit"}, {"oid": "d99a19e2e4c5f8ef8da2882965dba8864edf3f04", "url": "https://github.com/all-of-us/workbench/commit/d99a19e2e4c5f8ef8da2882965dba8864edf3f04", "message": "revert some stuff", "committedDate": "2020-12-08T22:25:07Z", "type": "commit"}, {"oid": "f49e7d14d06a99827e1d4020e7d278a999f295f8", "url": "https://github.com/all-of-us/workbench/commit/f49e7d14d06a99827e1d4020e7d278a999f295f8", "message": "oop", "committedDate": "2020-12-08T22:25:07Z", "type": "commit"}, {"oid": "036e23a51ebcc068e1a1d7495d8c3267e02e00d7", "url": "https://github.com/all-of-us/workbench/commit/036e23a51ebcc068e1a1d7495d8c3267e02e00d7", "message": "why on earth is the dropdown so egregiously flaky", "committedDate": "2020-12-08T22:25:07Z", "type": "commit"}, {"oid": "9090c820cc0d8eee35e49e27a5c93aa0739606ae", "url": "https://github.com/all-of-us/workbench/commit/9090c820cc0d8eee35e49e27a5c93aa0739606ae", "message": "revert a thing", "committedDate": "2020-12-08T22:25:07Z", "type": "commit"}, {"oid": "7120b628679af6fdcfab711f41c7f86475f2d57d", "url": "https://github.com/all-of-us/workbench/commit/7120b628679af6fdcfab711f41c7f86475f2d57d", "message": "shelving new test for rebase", "committedDate": "2020-12-08T22:25:07Z", "type": "commit"}, {"oid": "a727210b27cd17f28ab3dd8e7a0b952756a2f093", "url": "https://github.com/all-of-us/workbench/commit/a727210b27cd17f28ab3dd8e7a0b952756a2f093", "message": "waitfortimeout slow", "committedDate": "2020-12-08T22:36:11Z", "type": "commit"}, {"oid": "e8d33576cb1461fa43972dce90d885364ab01d93", "url": "https://github.com/all-of-us/workbench/commit/e8d33576cb1461fa43972dce90d885364ab01d93", "message": "notes to self", "committedDate": "2020-12-08T22:38:32Z", "type": "commit"}, {"oid": "edd6368b05eb68fd24358b1e89581392bf9ed0fd", "url": "https://github.com/all-of-us/workbench/commit/edd6368b05eb68fd24358b1e89581392bf9ed0fd", "message": "fix", "committedDate": "2020-12-08T22:40:20Z", "type": "commit"}, {"oid": "3eec91c9b15df636f5e2910947c8251f0ba51ede", "url": "https://github.com/all-of-us/workbench/commit/3eec91c9b15df636f5e2910947c8251f0ba51ede", "message": "fix pickRuntimePreset", "committedDate": "2020-12-09T04:29:10Z", "type": "commit"}, {"oid": "6e85ac1ed6db30667c545f3f65724be05d04024f", "url": "https://github.com/all-of-us/workbench/commit/6e85ac1ed6db30667c545f3f65724be05d04024f", "message": "using select-menu, using html id", "committedDate": "2020-12-09T16:28:08Z", "type": "commit"}, {"oid": "8fdd3337f0980a72de886ef10c07334b4fe54fcc", "url": "https://github.com/all-of-us/workbench/commit/8fdd3337f0980a72de886ef10c07334b4fe54fcc", "message": "fix merge conflict", "committedDate": "2020-12-09T16:37:08Z", "type": "commit"}, {"oid": "bc8c87f30475b5a43f518ec52fd5c436b256aefe", "url": "https://github.com/all-of-us/workbench/commit/bc8c87f30475b5a43f518ec52fd5c436b256aefe", "message": "maybe it'll run on ci oy gevalt", "committedDate": "2020-12-09T18:00:57Z", "type": "commit"}, {"oid": "20cacff85a3c5fbeb916f003ace3f428aaab3ae9", "url": "https://github.com/all-of-us/workbench/commit/20cacff85a3c5fbeb916f003ace3f428aaab3ae9", "message": "this time with less 60s+ hail ops", "committedDate": "2020-12-09T20:22:09Z", "type": "commit"}, {"oid": "755b04143821f48606c3d81775c88cb9c7cc75f9", "url": "https://github.com/all-of-us/workbench/commit/755b04143821f48606c3d81775c88cb9c7cc75f9", "message": "shelving", "committedDate": "2020-12-09T22:28:42Z", "type": "commit"}, {"oid": "ce852438e65d4d237a6fb40323da7a6b197aa3d5", "url": "https://github.com/all-of-us/workbench/commit/ce852438e65d4d237a6fb40323da7a6b197aa3d5", "message": "some debugging", "committedDate": "2020-12-10T01:21:35Z", "type": "commit"}, {"oid": "6a0745acd0dc0a4a520cd18b17564ef28573e41a", "url": "https://github.com/all-of-us/workbench/commit/6a0745acd0dc0a4a520cd18b17564ef28573e41a", "message": "moar fixes", "committedDate": "2020-12-10T01:58:35Z", "type": "commit"}, {"oid": "8355a7d453d0b240a00b9b45fe7010a4727ad119", "url": "https://github.com/all-of-us/workbench/commit/8355a7d453d0b240a00b9b45fe7010a4727ad119", "message": "ahahaha it works", "committedDate": "2020-12-10T17:38:01Z", "type": "commit"}, {"oid": "da4cb7930e21e84b157a9461d0a6a577a3fae100", "url": "https://github.com/all-of-us/workbench/commit/da4cb7930e21e84b157a9461d0a6a577a3fae100", "message": "delete tests i used to test my tests", "committedDate": "2020-12-10T17:39:02Z", "type": "commit"}, {"oid": "1258075b3e5138328a24a69e060f6ba7233e7846", "url": "https://github.com/all-of-us/workbench/commit/1258075b3e5138328a24a69e060f6ba7233e7846", "message": "only make one workspace", "committedDate": "2020-12-10T18:30:00Z", "type": "commit"}, {"oid": "e42c552483c2714b9068310b6a3b55202461fe2b", "url": "https://github.com/all-of-us/workbench/commit/e42c552483c2714b9068310b6a3b55202461fe2b", "message": "ugh beforeall doesn't work for this i think", "committedDate": "2020-12-10T19:10:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwNzk0MA==", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540407940", "bodyText": "moved to Container, which underlies everything", "author": "als364", "createdAt": "2020-12-10T18:40:11Z", "path": "e2e/app/component/modal.ts", "diffHunk": "@@ -83,10 +83,6 @@ export default class Modal extends Container {\n     await this.page.waitForXPath(this.xpath, {hidden: true, timeout: 55000});\n   }\n \n-  async waitUntilVisible(): Promise<ElementHandle> {", "originalCommit": "1258075b3e5138328a24a69e060f6ba7233e7846", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwODk2Nw==", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540408967", "bodyText": "alphabetized", "author": "als364", "createdAt": "2020-12-10T18:41:53Z", "path": "e2e/app/text-labels.ts", "diffHunk": "@@ -34,9 +34,10 @@ export enum LinkText {\n    BackToReviewSet = 'Back to review set',\n    Calculate = 'Calculate',\n    Cancel = 'Cancel',\n-   Copy = 'Copy',", "originalCommit": "1258075b3e5138328a24a69e060f6ba7233e7846", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwOTM0OA==", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540409348", "bodyText": "I didn't use the suggested bash options because Python makes it obnoxious to capture commandline output", "author": "als364", "createdAt": "2020-12-10T18:42:26Z", "path": "e2e/resources/python-code/count-cpus.py", "diffHunk": "@@ -0,0 +1,2 @@\n+import psutil\n+psutil.cpu_count()", "originalCommit": "1258075b3e5138328a24a69e060f6ba7233e7846", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQzMTg5MA==", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540431890", "bodyText": "Unfortunately have to do this each time because there's no good way to tell from a workspace card what CDR the workspace is using and we need the one with microarray data", "author": "als364", "createdAt": "2020-12-10T19:18:31Z", "path": "e2e/tests/runtime/runtime-status-update.spec.ts", "diffHunk": "@@ -0,0 +1,222 @@\n+import HelpSidebar from 'app/component/help-sidebar';\n+import RuntimePanel, {\n+  ComputeType,\n+  RuntimePreset,\n+  StartStopIconState\n+} from 'app/component/runtime-panel';\n+import {config} from 'resources/workbench-config';\n+import {createWorkspace, signIn} from 'utils/test-utils';\n+import WorkspaceDataPage from 'app/page/workspace-data-page';\n+import {makeRandomName} from 'utils/str-utils';\n+import NotebookPreviewPage from 'app/page/notebook-preview-page';\n+\n+// This one is going to take a long time.\n+jest.setTimeout(60 * 30 * 1000);\n+\n+describe('Updating runtime parameters', () => {\n+  beforeEach(async () => {\n+    await signIn(page);\n+    const workspaceCard = await createWorkspace(page, config.altCdrVersionName);", "originalCommit": "e42c552483c2714b9068310b6a3b55202461fe2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3NDAyMg==", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540474022", "bodyText": "waitForXPath  needs {visible: true}", "author": "aweng98", "createdAt": "2020-12-10T20:27:31Z", "path": "e2e/app/component/help-sidebar.ts", "diffHunk": "@@ -108,11 +111,22 @@ export default class HelpSidebar extends Container {\n     return waitForNumericalString(this.page, selector);\n   }\n \n+  async clickSidebarTab(helpSidebarTab: HelpSidebarTab): Promise<void> {\n+    return await this.page.waitForXPath(helpSidebarTab).then(tab => tab.click());", "originalCommit": "e42c552483c2714b9068310b6a3b55202461fe2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5MzQwMg==", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540493402", "bodyText": "ty!", "author": "als364", "createdAt": "2020-12-10T21:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3NDAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4MDExNw==", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540480117", "bodyText": "TOL I think we need a sidebar base class which runtime panel and help sidebar can extends from.", "author": "aweng98", "createdAt": "2020-12-10T20:38:03Z", "path": "e2e/app/component/runtime-panel.ts", "diffHunk": "@@ -0,0 +1,192 @@\n+import Container from 'app/container';\n+import {LinkText} from 'app/text-labels';\n+import Button from 'app/element/button';\n+import {Page} from 'puppeteer';\n+import {waitForAttributeEquality, waitWhileLoading} from 'utils/waits-utils';\n+import PrimereactInputNumber from 'app/element/primereact-input-number';\n+import SelectMenu from \"./select-menu\";\n+import {savePageToFile, takeScreenshot} from \"../../utils/save-file-utils\";\n+import BaseElement from \"../element/base-element\";\n+\n+const defaultXpath = '//*[@id=\"runtime-panel\"]';\n+const startStopIconXpath = '//*[@data-test-id=\"runtime-status-icon\"]';\n+\n+export enum StartStopIconState {\n+  Error = 'error',\n+  None = 'none',\n+  Running = 'running',\n+  Starting = 'starting',\n+  Stopped = 'stopped',\n+  Stopping = 'stopping'\n+}\n+\n+export enum ComputeType {\n+  Standard = 'Standard VM',\n+  Dataproc = 'Dataproc Cluster'\n+}\n+\n+export enum RuntimePreset {\n+  GeneralAnalysis = 'General Analysis',\n+  HailGenomicsAnalysis = 'Hail Genomics Analysis'\n+}\n+\n+export default class RuntimePanel extends Container {", "originalCommit": "e42c552483c2714b9068310b6a3b55202461fe2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4Mjg3Mg==", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540482872", "bodyText": "how about await getPropValue<number>(input, 'value');? (I didn't test it out).", "author": "aweng98", "createdAt": "2020-12-10T20:42:39Z", "path": "e2e/app/element/primereact-input-number.ts", "diffHunk": "@@ -0,0 +1,42 @@\n+import BaseElement from './base-element';\n+import {ElementHandle, Page} from 'puppeteer';\n+\n+export default class PrimereactInputNumber extends BaseElement {\n+  constructor(page: Page, xpath?: string) {\n+    super(page, xpath);\n+  }\n+\n+  async setValue(value: number): Promise<void> {\n+    const input = await this.getInputElementHandle();\n+    // primereact InputNumber thoughtfully ignores any input that would cause the input to go outside\n+    // its specified mins and maxes and is very finicky around 1) copy/paste and 2) manual manipulation\n+    // of its value prop so instead we must do shenanigans!\n+    await input.click();\n+    while (await this.getInputValue() !== value) {\n+      const curr = await this.getInputValue();\n+      if (curr > value) {\n+        await this.page.keyboard.press('ArrowDown');\n+      }\n+      else if (curr < value) {\n+        await this.page.keyboard.press('ArrowUp');\n+      }\n+    }\n+  }\n+\n+  async getInputValue(): Promise<number> {\n+    const input = await this.getInputBaseElement();\n+    return parseInt(await input.getProperty('value'));", "originalCommit": "e42c552483c2714b9068310b6a3b55202461fe2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5NDA1MA==", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540494050", "bodyText": "tbh we're thinking about not using this sort of input anymore cause it has serious UX problems so I don't want to spend any more time messing with it", "author": "als364", "createdAt": "2020-12-10T21:02:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4Mjg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4NTM3Nw==", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540485377", "bodyText": "line 181 can be rewritten to }, {timeout}, selector.css, attribute, value);", "author": "aweng98", "createdAt": "2020-12-10T20:47:00Z", "path": "e2e/utils/waits-utils.ts", "diffHunk": "@@ -177,7 +178,7 @@ export async function waitForAttributeEquality(page: Page,\n           return element.attributes[attributeName] && element.attributes[attributeName].value === attributeValue;\n         }\n         return false;\n-      }, {}, selector.css, attribute, value);\n+      }, timeout ? {timeout} : {}, selector.css, attribute, value);", "originalCommit": "e42c552483c2714b9068310b6a3b55202461fe2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5NjA1Ng==", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540496056", "bodyText": "eek actually I think it should be {timeout: timeout || 30000}", "author": "als364", "createdAt": "2020-12-10T21:05:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4NTM3Nw=="}], "type": "inlineReview"}, {"oid": "0b6a6800315083b81be87f26c82711c00615b84d", "url": "https://github.com/all-of-us/workbench/commit/0b6a6800315083b81be87f26c82711c00615b84d", "message": "alex review feedback", "committedDate": "2020-12-10T21:05:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMjQ4Nw==", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540622487", "bodyText": "nit: absolute imports", "author": "ericsong", "createdAt": "2020-12-11T01:28:02Z", "path": "e2e/app/component/runtime-panel.ts", "diffHunk": "@@ -0,0 +1,192 @@\n+import Container from 'app/container';\n+import {LinkText} from 'app/text-labels';\n+import Button from 'app/element/button';\n+import {Page} from 'puppeteer';\n+import {waitForAttributeEquality, waitWhileLoading} from 'utils/waits-utils';\n+import PrimereactInputNumber from 'app/element/primereact-input-number';\n+import SelectMenu from \"./select-menu\";\n+import {savePageToFile, takeScreenshot} from \"../../utils/save-file-utils\";", "originalCommit": "0b6a6800315083b81be87f26c82711c00615b84d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMzE1Nw==", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540623157", "bodyText": "nit: statusIconXpath seems more accurate? or at least consistent with the UI name.", "author": "ericsong", "createdAt": "2020-12-11T01:29:57Z", "path": "e2e/app/component/runtime-panel.ts", "diffHunk": "@@ -0,0 +1,192 @@\n+import Container from 'app/container';\n+import {LinkText} from 'app/text-labels';\n+import Button from 'app/element/button';\n+import {Page} from 'puppeteer';\n+import {waitForAttributeEquality, waitWhileLoading} from 'utils/waits-utils';\n+import PrimereactInputNumber from 'app/element/primereact-input-number';\n+import SelectMenu from \"./select-menu\";\n+import {savePageToFile, takeScreenshot} from \"../../utils/save-file-utils\";\n+import BaseElement from \"../element/base-element\";\n+\n+const defaultXpath = '//*[@id=\"runtime-panel\"]';\n+const startStopIconXpath = '//*[@data-test-id=\"runtime-status-icon\"]';", "originalCommit": "0b6a6800315083b81be87f26c82711c00615b84d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYzMDcwMw==", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540630703", "bodyText": "why do some of these click actions have a timeout while others do not? Even if click triggers an action that takes a few seconds to complete, I think it's OK to return once the click has completed. We can let the calling function add a waitForVisible or w/e else is appropriate to wait for the action to complete.\nThis is mainly b/c of the semantics of a function named \"click\". If the function was just named \"customizeButton\", I think it makes sense to add the wait call here.", "author": "ericsong", "createdAt": "2020-12-11T01:51:23Z", "path": "e2e/app/component/runtime-panel.ts", "diffHunk": "@@ -0,0 +1,192 @@\n+import Container from 'app/container';\n+import {LinkText} from 'app/text-labels';\n+import Button from 'app/element/button';\n+import {Page} from 'puppeteer';\n+import {waitForAttributeEquality, waitWhileLoading} from 'utils/waits-utils';\n+import PrimereactInputNumber from 'app/element/primereact-input-number';\n+import SelectMenu from \"./select-menu\";\n+import {savePageToFile, takeScreenshot} from \"../../utils/save-file-utils\";\n+import BaseElement from \"../element/base-element\";\n+\n+const defaultXpath = '//*[@id=\"runtime-panel\"]';\n+const startStopIconXpath = '//*[@data-test-id=\"runtime-status-icon\"]';\n+\n+export enum StartStopIconState {\n+  Error = 'error',\n+  None = 'none',\n+  Running = 'running',\n+  Starting = 'starting',\n+  Stopped = 'stopped',\n+  Stopping = 'stopping'\n+}\n+\n+export enum ComputeType {\n+  Standard = 'Standard VM',\n+  Dataproc = 'Dataproc Cluster'\n+}\n+\n+export enum RuntimePreset {\n+  GeneralAnalysis = 'General Analysis',\n+  HailGenomicsAnalysis = 'Hail Genomics Analysis'\n+}\n+\n+export default class RuntimePanel extends Container {\n+  constructor(page: Page, xpath: string = defaultXpath) {\n+    super(page, xpath);\n+  }\n+\n+  async clickCreateButton(): Promise<void> {\n+    const button = await Button.findByName(this.page, {name: LinkText.Create}, this);\n+    await button.click();\n+    return await page.waitForTimeout(2000);\n+  }\n+\n+  async clickCustomizeButton(): Promise<void> {\n+    const button = await Button.findByName(this.page, {name: LinkText.Customize}, this);\n+    await button.click();\n+    return await page.waitForTimeout(2000);", "originalCommit": "0b6a6800315083b81be87f26c82711c00615b84d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0ODEzMw==", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r541048133", "bodyText": "Oops, I think this one is because I wanted it to pause when running the test on actual (vs headless) chromium so I could see what it's doing. I'll scan through and remove any of these that are unnecessary, and comment on the ones that are", "author": "als364", "createdAt": "2020-12-11T15:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYzMDcwMw=="}], "type": "inlineReview"}, {"oid": "ad2b385251e65aa4289364d74550902e4c06010e", "url": "https://github.com/all-of-us/workbench/commit/ad2b385251e65aa4289364d74550902e4c06010e", "message": "review feedback", "committedDate": "2020-12-11T16:44:02Z", "type": "commit"}, {"oid": "439c3b20cb18e30abf4201083d9ced66bd45b52e", "url": "https://github.com/all-of-us/workbench/commit/439c3b20cb18e30abf4201083d9ced66bd45b52e", "message": "whoops i didn't put any semicolons", "committedDate": "2020-12-11T21:52:33Z", "type": "commit"}]}