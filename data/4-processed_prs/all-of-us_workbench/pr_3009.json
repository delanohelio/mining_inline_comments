{"pr_number": 3009, "pr_title": "[risk=no][RW-3175] (Part 1) Track billing account names being used by workspaces", "pr_createdAt": "2020-01-16T23:13:16Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3009", "timeline": [{"oid": "ebd865e8a06fb80ac41b38b0ebc334235d381b23", "url": "https://github.com/all-of-us/workbench/commit/ebd865e8a06fb80ac41b38b0ebc334235d381b23", "message": "add field for billing account name to workspace. drop billing account type in favor of account name comparison", "committedDate": "2020-01-16T23:07:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxNDMxMw==", "url": "https://github.com/all-of-us/workbench/pull/3009#discussion_r367714313", "bodyText": "I misunderstood, I thought the proposal was null (free tier) OR user_billing_account_name. I think this would be preferred as it makes the usage of free tier a more explicit, separate state and avoids reencoding the exact free tier billing name for each workspace.", "author": "calbach", "createdAt": "2020-01-17T00:15:39Z", "path": "api/db/changelog/db.changelog-116-add-billing-account-to-workspaces.xml", "diffHunk": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<databaseChangeLog\n+    xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog/1.9\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog/1.9\n+                    http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd\">\n+  <changeSet author=\"ericsong\" id=\"db.changelog-116-add-billing-account-to-workspaces\">\n+    <addColumn tableName=\"workspace\">\n+      <column name=\"billing_account_name\" type=\"varchar(100)\">\n+        <constraints nullable=\"false\"/>\n+      </column>\n+    </addColumn>\n+\n+    <sql>update workspace set billing_account_name=(SELECT JSON_UNQUOTE(JSON_EXTRACT(configuration, '$.billing.accountId')) from config where config_id='main');</sql>\n+\n+    <dropColumn tableName=\"workspace\" columnName=\"billing_account_type\"/>", "originalCommit": "ebd865e8a06fb80ac41b38b0ebc334235d381b23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMDIyMA==", "url": "https://github.com/all-of-us/workbench/pull/3009#discussion_r367720220", "bodyText": "I was planning to add the free tier billing name for all the workspaces with a backfill because it simplifies the update/syncing code.\nEx. in my feature branch, there is no need for special handling of a null or empty string in the billing_account_name field. The UI is able to match the value from billing_account_name to the accounts in listBillingAccounts for both the free tier and user supplied case. The same should be true for the update billing account case.\nGiven that, is it still worth keeping both fields? If so, I can add a constraint to ensure that the type is always set to free tier if the billing account name matches the config account name.", "author": "ericsong", "createdAt": "2020-01-17T00:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxNDMxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxMzQ2NA==", "url": "https://github.com/all-of-us/workbench/pull/3009#discussion_r367913464", "bodyText": "+1 for keeping both fields. It seems fragile to rely on a naming convention, especially as project names aren't enforced by the DB schema. Also, how is the local vs test env name handled? Are they the same billing acct?", "author": "jaycarlton", "createdAt": "2020-01-17T12:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxNDMxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODExNjcxMg==", "url": "https://github.com/all-of-us/workbench/pull/3009#discussion_r368116712", "bodyText": "Having both columns sounds fine. I would not add any constraints that created dependencies between the config table and the backend data - I think we need to allow these to remain independent; the fact that we store our configs in SQL is mostly out of convenience rather than any logical requirement, and keeping them in lock-step may not always be correct (for example, consider projects pending assignment in the buffer).\nI'm happy with either:\n\na billingAccountName and a billingType column, or\njust userBillingAccountName (null if free tier)\n\n@jaycarlton there is no proposed dependency here on naming conventions. local and test are the same account, the value is in the config JSONs if you want to reference it.", "author": "calbach", "createdAt": "2020-01-17T20:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxNDMxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzNjM5NQ==", "url": "https://github.com/all-of-us/workbench/pull/3009#discussion_r368136395", "bodyText": "Thanks. I misunderstood. I was thinking one proposal involved inferring something from a name that was outside the database's control. Whether \"not null\" is a naming convention or not... \ud83d\ude09\nIt's still a bit odd to me that we have baked in an assumption that the presence of an account always indicates paid tier and vice versa. It seems like the kind of thing that reality might make less convenient.\nOption #1 seems like it's clearer in the short term and gives more flexibility in the long term (exactly what CH said in the pending case).", "author": "jaycarlton", "createdAt": "2020-01-17T21:06:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxNDMxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNDA3Mw==", "url": "https://github.com/all-of-us/workbench/pull/3009#discussion_r367914073", "bodyText": "thinking out loud: Currently, there's no capability or plan for our support to be able to give someone enough free credits to a customer with a billing account to get through a couple of days while they sort out a billing or config issue with Google? I.e. you can only ever get free credits on a free tier account.", "author": "jaycarlton", "createdAt": "2020-01-17T12:34:08Z", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -62,6 +62,12 @@ public FreeTierBillingService(\n     this.clock = clock;\n   }\n \n+  public boolean isUsingFreeTier(DbWorkspace workspace) {", "originalCommit": "ebd865e8a06fb80ac41b38b0ebc334235d381b23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODExMzA4Ng==", "url": "https://github.com/all-of-us/workbench/pull/3009#discussion_r368113086", "bodyText": "That specific implementation solution is not something that's at all supported by GCP billing or by the billing model we're using.\nSetting that aside, the way to resolve that use case in the current model would be to switch the workspace back to free tier. As currently proposed, the user would need to do this manually; or if they wait too long (and data is at risk of deletion), we will automatically switch them back.", "author": "calbach", "createdAt": "2020-01-17T20:01:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNDA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEyNjA3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3009#discussion_r368126075", "bodyText": "Our implementation plan is to set user-specific overrides (for both cost and time) which will restore users to the free tier when set.", "author": "jmthibault79", "createdAt": "2020-01-17T20:37:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNDA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzMDc2MA==", "url": "https://github.com/all-of-us/workbench/pull/3009#discussion_r368130760", "bodyText": "I don't think that matches my understanding of the plan. I think this is all outlined in the synthesis doc, but let me walk through this example to be clear.\nScenario: Workspace's user-provided billing account becomes inactive -> workspace becomes \"billing locked\"\nResolutions:\n\n(if creator still has free credits) owner can switch the workspace to free tier\nowner can fix the billing account\nowner can attach a different billing account\nowner does not resolve billing issues for 2 weeks: workspace reverts to free tier\na. If the user still has free tier credits, this is now a normal, functional free tier workspace\nb. If the user has no credits, this is still a \"billing locked\" workspace; but one which is attached to the free tier billing account (and therefore, data will not be deleted)\n\n(4b) is an identical end-state to the easier-to-follow scenario where a user has a free tier workspace and runs out of credits. The workspace is locked, but still incurs some service-level cost to free tier", "author": "calbach", "createdAt": "2020-01-17T20:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNDA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzMTQwMw==", "url": "https://github.com/all-of-us/workbench/pull/3009#discussion_r368131403", "bodyText": "also, overriding their free tier quota (on dollars or time), would not directly effect the free tier status of any of the workspaces, it would just change whether or not they are billing locked.", "author": "calbach", "createdAt": "2020-01-17T20:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNDA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzMTk0NA==", "url": "https://github.com/all-of-us/workbench/pull/3009#discussion_r368131944", "bodyText": "Sorry, I was confused.  I was thinking of the free-tier-only flow.  Your response matches my understanding.", "author": "jmthibault79", "createdAt": "2020-01-17T20:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNDA3Mw=="}], "type": "inlineReview"}, {"oid": "390e720f5d20f181280bdf75c7b46317f2213f99", "url": "https://github.com/all-of-us/workbench/commit/390e720f5d20f181280bdf75c7b46317f2213f99", "message": "Revert \"add field for billing account name to workspace. drop billing account type in favor of account name comparison\"\n\nThis reverts commit ebd865e8a06fb80ac41b38b0ebc334235d381b23.", "committedDate": "2020-01-21T22:26:56Z", "type": "commit"}, {"oid": "6d34dd213c0bac501ff290bcfb0d7221eba7269c", "url": "https://github.com/all-of-us/workbench/commit/6d34dd213c0bac501ff290bcfb0d7221eba7269c", "message": "Merge branch 'master' of github.com:all-of-us/workbench into songe/RW-3175-part-1", "committedDate": "2020-01-21T22:29:13Z", "type": "commit"}, {"oid": "2dd7001adc1ec4ec7835491f9789c8220cf23ad4", "url": "https://github.com/all-of-us/workbench/commit/2dd7001adc1ec4ec7835491f9789c8220cf23ad4", "message": "add billing account name column", "committedDate": "2020-01-21T22:33:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzMjI4Mg==", "url": "https://github.com/all-of-us/workbench/pull/3009#discussion_r369632282", "bodyText": "If you want to be a bit more conservative (e.g. if you think perhaps some config objects might not have what you need), then you can use a temp table to hold {workspaceId, billing_acct} pairs and verify that looks good before committing a new column to the main table. I.e. if we get stuck, it's only this temporary (non-application) table that is in bad shape.\nOf course if you've already vetted the configs interactively, then you're probably OK. Reading this I don't know what happens if JSON_EXTRACT() fails on the last workspace.", "author": "jaycarlton", "createdAt": "2020-01-22T15:35:01Z", "path": "api/db/changelog/db.changelog-118-add-billing-account-to-workspaces.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<databaseChangeLog\n+  xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog/1.9\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog/1.9\n+                    http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd\">\n+  <changeSet author=\"ericsong\" id=\"db.changelog-118-add-billing-account-to-workspaces\">\n+    <addColumn tableName=\"workspace\">\n+      <column name=\"billing_account_name\" type=\"varchar(100)\">\n+        <constraints nullable=\"false\"/>\n+      </column>\n+    </addColumn>\n+\n+    <sql>update workspace set billing_account_name=(SELECT JSON_UNQUOTE(JSON_EXTRACT(configuration, '$.billing.accountId')) from config where config_id='main');</sql>", "originalCommit": "2dd7001adc1ec4ec7835491f9789c8220cf23ad4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzMzEyNA==", "url": "https://github.com/all-of-us/workbench/pull/3009#discussion_r369633124", "bodyText": "So this will always be a gcp project id?", "author": "jaycarlton", "createdAt": "2020-01-22T15:36:22Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbWorkspace.java", "diffHunk": "@@ -569,6 +570,15 @@ public void setBillingStatus(BillingStatus billingStatus) {\n     this.billingStatus = DbStorageEnums.billingStatusToStorage(billingStatus);\n   }\n \n+  @Column(name = \"billing_account_name\")\n+  public String getBillingAccountName() {", "originalCommit": "2dd7001adc1ec4ec7835491f9789c8220cf23ad4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzMzc2OQ==", "url": "https://github.com/all-of-us/workbench/pull/3009#discussion_r369633769", "bodyText": "Re: the mapping between account names and project names, is that something guaranteed by the structure of one or the other name, or something we have to maintain with application code? Do all APIs that have access to change the name get checked against this invariant?", "author": "jaycarlton", "createdAt": "2020-01-22T15:37:29Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbWorkspace.java", "diffHunk": "@@ -569,6 +570,15 @@ public void setBillingStatus(BillingStatus billingStatus) {\n     this.billingStatus = DbStorageEnums.billingStatusToStorage(billingStatus);\n   }\n \n+  @Column(name = \"billing_account_name\")\n+  public String getBillingAccountName() {\n+    return billingAccountName;\n+  }\n+\n+  public void setBillingAccountName(String billingAccountName) {\n+    this.billingAccountName = billingAccountName;\n+  }\n+", "originalCommit": "2dd7001adc1ec4ec7835491f9789c8220cf23ad4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}