{"pr_number": 3811, "pr_title": "[no ticket][risk=no] Puppeteer notebook test", "pr_createdAt": "2020-07-21T01:51:05Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3811", "timeline": [{"oid": "7f3a624254421426fd5c6360459a50c9cbca0b2d", "url": "https://github.com/all-of-us/workbench/commit/7f3a624254421426fd5c6360459a50c9cbca0b2d", "message": "new notebook test", "committedDate": "2020-07-21T01:52:30Z", "type": "forcePushed"}, {"oid": "37214af429d7c724a9496d0846134a2de7e55f10", "url": "https://github.com/all-of-us/workbench/commit/37214af429d7c724a9496d0846134a2de7e55f10", "message": "skip R notebook test", "committedDate": "2020-07-21T17:02:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0OTQyMg==", "url": "https://github.com/all-of-us/workbench/pull/3811#discussion_r459449422", "bodyText": "Nice! Can we add a test for error like if the notebook name already exist?", "author": "NehaBroad", "createdAt": "2020-07-23T13:29:50Z", "path": "e2e/app/component/new-notebook-modal.ts", "diffHunk": "@@ -0,0 +1,71 @@\n+import {Page} from 'puppeteer';\n+import {savePageToFile, takeScreenshot} from 'utils/save-file-utils';\n+import {waitForText} from 'utils/waits-utils';\n+import RadioButton from 'app/element/radiobutton';\n+import {Language, LinkText} from 'app/text-labels';\n+import Button from 'app/element/button';\n+import Textbox from 'app/element/textbox';\n+import Modal from './modal';\n+\n+const modalTitle = 'New Notebook';\n+\n+export default class NewNotebookModal extends Modal {", "originalCommit": "29f998dd8c646a1e9d1ad24eeb70d715e5eab498", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwNTQ2MQ==", "url": "https://github.com/all-of-us/workbench/pull/3811#discussion_r459705461", "bodyText": "yes, added third test for this.", "author": "aweng98", "createdAt": "2020-07-23T20:21:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0OTQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ1MTQzOQ==", "url": "https://github.com/all-of-us/workbench/pull/3811#discussion_r459451439", "bodyText": "Optional: We can combine these three methods by just passing 'Shift'/'Control'. 'Alt' and replacing them in keyboard.down. Or\nKeep these three methods and have each one call a common method that takes the command and do the following:\nawait this.page.bringToFront();\nawait this.page.keyboard.down(command);\nawait this.page.keyboard.press('Enter', {delay: 20});\nawait this.page.keyboard.up(command);", "author": "NehaBroad", "createdAt": "2020-07-23T13:32:55Z", "path": "e2e/app/page/notebook-page.ts", "diffHunk": "@@ -0,0 +1,185 @@\n+import {ElementHandle, Frame, Page} from 'puppeteer';\n+import {waitForDocumentTitle} from 'utils/waits-utils';\n+import {getPropValue} from 'utils/element-utils';\n+import AuthenticatedPage from './authenticated-page';\n+import CodeCell, {Selector as CodeCellSelector} from './notebook-code-cell';\n+\n+// CSS selectors\n+enum CssSelector {\n+  body = 'body.notebook_app',\n+  notebookContainer = '#notebook-container',\n+  toolbarContainer = '#maintoolbar-container',\n+  runCellButton = 'button[data-jupyter-action=\"jupyter-notebook:run-cell-and-select-next\"]',\n+  saveNotebookButton = 'button[data-jupyter-action=\"jupyter-notebook:save-notebook\"]',\n+  kernelIcon = '#kernel_indicator_icon',\n+  kernelName = '.kernel_indicator_name',\n+}\n+\n+enum Mode {\n+  Command= 'command_mode',\n+  Edit = 'command_mode',\n+}\n+\n+export enum KernelStatus {\n+  notRunning = 'Kernel is not running',\n+  Idle = 'Kernel Idle',\n+}\n+\n+export default class NotebookPage extends AuthenticatedPage {\n+  private codeCell: CodeCell;\n+\n+  constructor(page: Page, private readonly documentTitle) {\n+    super(page);\n+  }\n+\n+  async isLoaded(): Promise<boolean> {\n+    try {\n+      const frame = await this.frame();\n+      this.codeCell = new CodeCell(frame);\n+      // Wait up to 2 minutes.\n+      await Promise.all([\n+        waitForDocumentTitle(this.page, this.documentTitle, 120000),\n+        frame.waitForSelector(CssSelector.runCellButton, {visible: true, timeout: 120000}),\n+        frame.waitForSelector(CodeCellSelector.codeCell, {visible: true, timeout: 120000}),\n+        frame.waitForSelector(CssSelector.kernelIcon, {visible: true, timeout: 120000})\n+      ]);\n+      return true;\n+    } catch (e) {\n+      console.log(`NotebookPage isLoaded() encountered ${e}`);\n+      return false;\n+    }\n+  }\n+\n+  async notebookLink(): Promise<ElementHandle> {\n+    const selector = '//a[text()=\"Notebooks\"]';\n+    return this.page.waitForXPath(selector, {visible: true});\n+  }\n+\n+  /**\n+   * Click Run button in toolbar. It run focused cell and insert a new cell below.\n+   */\n+  async runButton(): Promise<void> {\n+    return this.frame()\n+      .then( (iframe) => iframe.waitForSelector(CssSelector.runCellButton, {visible: true}))\n+      .then( (butn) => butn.click() );\n+  }\n+\n+  /**\n+   * Click Save button in toolbar.\n+   */\n+  async saveNotebook(): Promise<void> {\n+    return this.frame()\n+      .then( (iframe) => iframe.waitForSelector(CssSelector.saveNotebookButton, {visible: true}))\n+      .then( (butn) => butn.click() );\n+  }\n+\n+  /**\n+   * Wait for notebook kernel becomes ready (idle).\n+   */\n+  async waitForKernelIdle(timeOut: number = 60000): Promise<boolean> {\n+    const iconSelector = `${CssSelector.kernelIcon}.kernel_idle_icon`;\n+    const notifSelector = '#notification_kernel';\n+    const frame = await this.frame();\n+    try {\n+      await Promise.all([\n+        frame.waitForSelector(iconSelector, {visible: true, timeout: timeOut}),\n+        frame.waitForSelector(notifSelector, {hidden: true, timeout: timeOut}),\n+      ])\n+      return true;\n+    } catch (e) {\n+      return false;\n+    }\n+  }\n+\n+  async kernelStatus(): Promise<KernelStatus | null> {\n+    const elemt = await this.frame().then( (frame) => frame.waitForSelector(CssSelector.kernelIcon, {visible: true}));\n+    const value = await getPropValue(elemt, 'title');\n+    await elemt.dispose();\n+    Object.keys(KernelStatus).forEach(key => {\n+      if (KernelStatus[key] === value) {\n+        return key;\n+      }\n+    })\n+    return null;\n+  }\n+\n+  async getKernelName(): Promise<string> {\n+    const frame = await this.frame();\n+    const elemt = await frame.waitForSelector(CssSelector.kernelName, {visible: true});\n+    const value = await getPropValue(elemt, 'textContent');\n+    await elemt.dispose();\n+    return value;\n+  }\n+\n+  /**\n+   * Click Run button in toolbar. It run focused cell and insert a new cell below.\n+   * @param {number} cellIndex Code Cell index. (index number starts from 1)\n+   * @param {string} code New code.\n+   * @return {string} Output string.\n+   */\n+  async runCodeCell(cellIndex: number, opts: { code?: string, timeOut?: number }): Promise<string> {\n+    await this.codeCell.selectCell(cellIndex, opts.code);\n+    await this.runButton();\n+    await Promise.all([\n+      this.waitForKernelIdle(opts.timeOut),\n+      this.codeCell.waitForOutput(cellIndex, opts.timeOut),\n+    ]);\n+    return this.codeCell.waitForOutput(cellIndex);\n+  }\n+\n+\n+  // ****************************************************************************\n+\n+  /**\n+   * Active Notebook Command or Edit mode.\n+   * @param mode\n+   */\n+  async toggleMode(mode: Mode): Promise<void> {\n+    // Press Esc key to activate command mode\n+    if (mode === Mode.Command) {\n+      return this.page.keyboard.press('Escape');\n+    }\n+    // Press Enter key to activate edit mode\n+    return this.page.keyboard.press('Enter');\n+  }\n+\n+  /**\n+   * Run (Execute) cells using Shift+Enter keys.\n+   * Shortcut explanation: Shift+Enter run cells and select below.\n+   */\n+  async runCellShiftEnter(): Promise<void> {", "originalCommit": "29f998dd8c646a1e9d1ad24eeb70d715e5eab498", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwNTY0Ng==", "url": "https://github.com/all-of-us/workbench/pull/3811#discussion_r459705646", "bodyText": "\ud83d\udc4d Done.", "author": "aweng98", "createdAt": "2020-07-23T20:21:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ1MTQzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ1MzA4Nw==", "url": "https://github.com/all-of-us/workbench/pull/3811#discussion_r459453087", "bodyText": "Can we add a test to make sure that on clicking any Download Option from File menu we see a pop Up with AoU policy", "author": "NehaBroad", "createdAt": "2020-07-23T13:35:23Z", "path": "e2e/app/page/notebook-page.ts", "diffHunk": "@@ -0,0 +1,185 @@\n+import {ElementHandle, Frame, Page} from 'puppeteer';\n+import {waitForDocumentTitle} from 'utils/waits-utils';\n+import {getPropValue} from 'utils/element-utils';\n+import AuthenticatedPage from './authenticated-page';\n+import CodeCell, {Selector as CodeCellSelector} from './notebook-code-cell';\n+\n+// CSS selectors\n+enum CssSelector {\n+  body = 'body.notebook_app',\n+  notebookContainer = '#notebook-container',\n+  toolbarContainer = '#maintoolbar-container',\n+  runCellButton = 'button[data-jupyter-action=\"jupyter-notebook:run-cell-and-select-next\"]',\n+  saveNotebookButton = 'button[data-jupyter-action=\"jupyter-notebook:save-notebook\"]',\n+  kernelIcon = '#kernel_indicator_icon',\n+  kernelName = '.kernel_indicator_name',\n+}\n+\n+enum Mode {\n+  Command= 'command_mode',\n+  Edit = 'command_mode',\n+}\n+\n+export enum KernelStatus {\n+  notRunning = 'Kernel is not running',\n+  Idle = 'Kernel Idle',\n+}\n+\n+export default class NotebookPage extends AuthenticatedPage {", "originalCommit": "29f998dd8c646a1e9d1ad24eeb70d715e5eab498", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxMDkzMQ==", "url": "https://github.com/all-of-us/workbench/pull/3811#discussion_r459810931", "bodyText": "I'll add this test in new PR next time.", "author": "aweng98", "createdAt": "2020-07-24T01:21:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ1MzA4Nw=="}], "type": "inlineReview"}, {"oid": "762b99575e83b1e1d5999af49f15347681422c5a", "url": "https://github.com/all-of-us/workbench/commit/762b99575e83b1e1d5999af49f15347681422c5a", "message": "new notebook test", "committedDate": "2020-07-23T14:05:25Z", "type": "commit"}, {"oid": "00a2efdca73b64587cb8dfcbe89a514fc0deefaf", "url": "https://github.com/all-of-us/workbench/commit/00a2efdca73b64587cb8dfcbe89a514fc0deefaf", "message": "saving work", "committedDate": "2020-07-23T23:30:11Z", "type": "commit"}, {"oid": "00a2efdca73b64587cb8dfcbe89a514fc0deefaf", "url": "https://github.com/all-of-us/workbench/commit/00a2efdca73b64587cb8dfcbe89a514fc0deefaf", "message": "saving work", "committedDate": "2020-07-23T23:30:11Z", "type": "forcePushed"}, {"oid": "22220231067618061ee60462396988d6ff731017", "url": "https://github.com/all-of-us/workbench/commit/22220231067618061ee60462396988d6ff731017", "message": "updated new tests", "committedDate": "2020-07-24T01:19:46Z", "type": "commit"}, {"oid": "2f9b460c5f578d8e6b2365df3e49a510498d615c", "url": "https://github.com/all-of-us/workbench/commit/2f9b460c5f578d8e6b2365df3e49a510498d615c", "message": "fix flaky functions", "committedDate": "2020-07-24T20:18:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI3MTgzMQ==", "url": "https://github.com/all-of-us/workbench/pull/3811#discussion_r460271831", "bodyText": "reworked waitWhileLoading function", "author": "aweng98", "createdAt": "2020-07-24T20:26:14Z", "path": "e2e/utils/test-utils.ts", "diffHunk": "@@ -45,36 +45,24 @@ export async function signInAs(userId: string, passwd: string): Promise<Page> {\n  * It usually indicates the page is ready for user interaction.\n  * </pre>\n  */\n-export async function waitWhileLoading(page: Page, timeOut: number = 90000): Promise<void> {\n-  // wait maximum 1 second for either spinner to show up\n-  const spinSelector = '.spinner, svg';\n-  let spinner: JSHandle;\n-  try {\n-    spinner = await page.waitFor((selector) => {\n-      return document.querySelectorAll(selector).length > 0\n-    }, {timeout: 1000}, spinSelector);\n-  } catch (err) {\n-    console.info('waitWhileLoading does not find any spin elements.');\n-  }\n-  const jValue = await spinner.jsonValue();\n+export async function waitWhileLoading(page: Page, timeOut?: number): Promise<void> {", "originalCommit": "2f9b460c5f578d8e6b2365df3e49a510498d615c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}