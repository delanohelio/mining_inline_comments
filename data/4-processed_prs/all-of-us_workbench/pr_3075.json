{"pr_number": 3075, "pr_title": "[RW-4159][risk=no] Terms of Service UI and cleanup of create-account flow.", "pr_createdAt": "2020-02-03T17:45:24Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3075", "timeline": [{"oid": "c16aad492b917c80996993ab9297a4e195e9ffbf", "url": "https://github.com/all-of-us/workbench/commit/c16aad492b917c80996993ab9297a4e195e9ffbf", "message": "Small tweaks to fix build.", "committedDate": "2020-02-03T18:53:56Z", "type": "forcePushed"}, {"oid": "74440073efd55fb1abcea7ba834401932801c535", "url": "https://github.com/all-of-us/workbench/commit/74440073efd55fb1abcea7ba834401932801c535", "message": "Small tweaks to fix build.", "committedDate": "2020-02-03T18:55:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM3MzQ3Mg==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r374373472", "bodyText": "Dev note: it was quite a challenge to get the sign-in and Terms of Service components to be styled correctly to allow a \"flexible\" PDF panel with a sticky footer at the bottom to contain the checkboxes & next button. Ultimately, I took an approach of using nested FlexColumn components all the way down... this seemed to be minimally disruptive to the existing styling, though I haven't extensively tested this on very differently-sized screens. A bit of tire-kicking against my staged App Engine version would be very helpful here.", "author": "gjuggler", "createdAt": "2020-02-03T22:18:11Z", "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -71,99 +60,188 @@ const styles = {\n       return position;\n     }\n   },\n-  signedInContainer: {\n+  signInContainer: {\n     backgroundSize: 'contain',\n     backgroundRepeat: 'no-repeat',\n     backgroundPosition: 'center',\n-    display: 'flex',\n     justifyContent: 'space-around',\n     alignItems: 'flex-start',\n-    width: 'auto'\n+    width: 'auto',\n+    minHeight: '100vh'\n   },\n \n };\n \n+// Tracks each major stage in the sign-in / sign-up flow. Most of the steps are related to new\n+// account creation.\n+enum SignInStep {\n+  // Landing page. User can choose to sign in or create an account.\n+  LANDING,\n+  // Interstitial step, where a user must enter their invitation key.\n+  //\n+  // TODO: this needs to be controllable per-environment before beta launch!\n+  INVITATION_KEY,\n+  // Terms of Service page. User must read and acknowledge the privacy statement & TOS.\n+  TERMS_OF_SERVICE,\n+  // Basic account creation page. User chooses a username and provides basic name / address info.\n+  ACCOUNT_CREATION,\n+  // Optional demographic survey. Completion of this step triggers actual user creation.\n+  DEMOGRAPHIC_SURVEY,\n+  // Account creation success page.\n+  SUCCESS_PAGE\n+}\n \n+interface BackgroundImageConfig {\n+  backgroundImgSrc: string;\n+  smallerBackgroundImgSrc: string;\n+}\n \n+export const StepToImageConfig = {\n+  [SignInStep.LANDING]: {\n+    backgroundImgSrc: '/assets/images/login-group.png',\n+    smallerBackgroundImgSrc: '/assets/images/login-standing.png'\n+  },\n+  [SignInStep.SUCCESS_PAGE]: {\n+    backgroundImgSrc: '/assets/images/congrats-female.png',\n+    smallerBackgroundImgSrc: 'assets/images/congrats-female-standing.png'\n+  }\n+};\n \n-const headerImg = '/assets/images/logo-registration-non-signed-in.svg';\n+const HEADER_IMAGE = '/assets/images/logo-registration-non-signed-in.svg';\n \n-export const SignInReact = withWindowSize()(\n+export interface SignInProps extends ServerConfigProps, WindowSizeProps {\n+  initialStep?: SignInStep;\n+  onInit: () => void;\n+  signIn: () => void;\n+}\n+\n+interface SignInState {\n+  currentStep: SignInStep;\n+  // Tracks the invitation key provided by the user. This is a required parameter in the createUser\n+  // API call.\n+  invitationKey: string;\n+  profile: Profile;\n+  // Tracks the Terms of Service version that was viewed and acknowledged by the user.\n+  // This is an optional parameter in the createUser API call.\n+  termsOfServiceVersion?: number;\n+}\n+\n+export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(\n   class extends React.Component<SignInProps, SignInState> {\n \n     constructor(props: SignInProps) {\n       super(props);\n       this.state = {\n-        currentStep: {stepName: 'login', backgroundImages: signedOutImages.login},\n-        invitationKey: '',\n-        profile: {} as Profile\n+        currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n+        invitationKey: null,\n+        termsOfServiceVersion: null,\n+        // This defines the profile state for a new user flow. This will get passed to each\n+        // step component as a prop. When each sub-step completes, it will pass the updated Profile\n+        // data in its onComplete callback.\n+        profile: this.createEmptyProfile()\n+      };\n+    }\n+\n+    createEmptyProfile(): Profile {\n+      return {\n+        // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n+        // profile creation, this field is populated with the full email address.\n+        username: '',\n+        dataAccessLevel: DataAccessLevel.Unregistered,\n+        givenName: '',\n+        familyName: '',\n+        contactEmail: '',\n+        currentPosition: '',\n+        organization: '',\n+        areaOfResearch: '',\n+        address: {\n+          streetAddress1: '',\n+          streetAddress2: '',\n+          city: '',\n+          state: '',\n+          country: '',\n+          zipCode: '',\n+        },\n+        institutionalAffiliations: [\n+          // We only allow entering a single institutional affiliation from the creat account\n+          // page, so we pre-fill a single entry which will be bound to the form.\n+          {\n+            institution: undefined,\n+            nonAcademicAffiliation: undefined,\n+            role: undefined,\n+          },\n+        ],\n+        demographicSurvey: {},\n+        degrees: [] as Degree[],\n       };\n-      this.setProfile = this.setProfile.bind(this);\n     }\n \n     componentDidMount() {\n       document.body.style.backgroundColor = colors.light;\n       this.props.onInit();\n     }\n \n-    nextDirective(index: string) {\n-      switch (index) {\n-        case 'login':\n+    renderSignInStep(currentStep: SignInStep) {\n+      const {enableNewAccountCreation} = this.props.serverConfig;\n+\n+      switch (currentStep) {\n+        case SignInStep.LANDING:\n           return <LoginReactComponent signIn={this.props.signIn} onCreateAccount={() =>\n-            this.setCurrentStep({stepName: 'invitationKey'})}/>;\n-        case 'invitationKey':\n-          return <InvitationKey onInvitationKeyVerify={(key) => this.onKeyVerified(key)}/>;\n-        case 'accountCreation':\n-          return <AccountCreation invitationKey={this.state.invitationKey} profile={this.state.profile}\n-                                  setProfile={(profile, nextStep) => this.setProfile(profile, nextStep)}/>;\n-        case 'accountCreationSurvey':\n-          return <AccountCreationSurvey profile={this.state.profile}\n-            invitationKey={this.state.invitationKey} setProfile={(profile, nextStep) => this.setProfile(profile, nextStep)}/>;\n-        case 'accountCreationSuccess':\n+            this.setState({\n+              currentStep: SignInStep.INVITATION_KEY\n+            })}/>;\n+        case SignInStep.INVITATION_KEY:\n+          return <InvitationKey onInvitationKeyVerified={(key: string) => this.setState({\n+            invitationKey: key,\n+            // We skip over TERMS_OF_SERVICE if new-style account creation isn't enabled.\n+            currentStep: enableNewAccountCreation ? SignInStep.TERMS_OF_SERVICE : SignInStep.ACCOUNT_CREATION\n+          })}/>;\n+        case SignInStep.TERMS_OF_SERVICE:\n+          return <AccountCreationTos\n+            pdfPath='/assets/documents/terms-of-service.pdf'\n+            onComplete={() => this.setState({\n+              termsOfServiceVersion: 1,\n+              currentStep: SignInStep.ACCOUNT_CREATION\n+            })}/>;\n+        case SignInStep.ACCOUNT_CREATION:\n+          return <AccountCreation invitationKey={this.state.invitationKey}\n+                                  profile={this.state.profile}\n+                                  onComplete={(profile: Profile) => this.setState({\n+                                    profile: profile,\n+                                    // Skip over the demographic survey if new-style form isn't enabled.\n+                                    currentStep: enableNewAccountCreation ? SignInStep.DEMOGRAPHIC_SURVEY :\n+                                      SignInStep.SUCCESS_PAGE\n+                                  })}/>;\n+        case SignInStep.DEMOGRAPHIC_SURVEY:\n+          return <AccountCreationSurvey\n+            profile={this.state.profile}\n+            invitationKey={this.state.invitationKey}\n+            termsOfServiceVersion={this.state.termsOfServiceVersion}\n+            onComplete={(profile: Profile) => this.setState({\n+              profile: profile,\n+              currentStep: SignInStep.SUCCESS_PAGE\n+            })}\n+            onPreviousClick={(profile: Profile) => this.setState({\n+              profile: profile,\n+              currentStep: SignInStep.ACCOUNT_CREATION\n+            })}/>;\n+        case SignInStep.SUCCESS_PAGE:\n           return <AccountCreationSuccess profile={this.state.profile}/>;\n         default:\n           return;\n       }\n     }\n \n-    setCurrentStep(nextStep: Step) {\n-      this.setState({\n-        currentStep: nextStep\n-      });\n-    }\n-\n-    onKeyVerified(invitationKey: string) {\n-      this.setState({\n-        invitationKey: invitationKey,\n-        currentStep: {stepName: 'accountCreation'}\n-      });\n-    }\n-\n-    setProfile(profile, currentStep) {\n-      this.setState({\n-        profile: profile,\n-        currentStep: currentStep\n-      });\n-    }\n-\n-\n-\n     render() {\n-      const {stepName, backgroundImages} = this.state.currentStep;\n-      const maxWidth = backgroundImages === undefined ? '100%' : '41.66667%';\n-      return <div style={styles.signedInContainer}>\n-        <FlexColumn style={{width: '100%'}}>\n-          <div data-test-id='template'\n-               style={styles.template(this.props.windowSize, backgroundImages)}>\n-            <img style={{height: '1.75rem', marginLeft: '1rem', marginTop: '1rem'}}\n-                 src={headerImg}/>\n-            <div style={{flex: `0 0 ${maxWidth}`,\n-              maxWidth: maxWidth, minWidth: '25rem'}}>\n-              {this.nextDirective(stepName)}\n-            </div>\n-          </div>\n+      const backgroundImages = StepToImageConfig[this.state.currentStep];\n+      return <FlexColumn style={styles.signInContainer} data-test-id='sign-in-container'>", "originalCommit": "7b3a511038ef8550559add2dfcfd437d00ec5f54", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMjU2OA==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375612568", "bodyText": "I couldn't break it - looks pretty nice to me.", "author": "calbach", "createdAt": "2020-02-06T02:29:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM3MzQ3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NDMzNA==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r374844334", "bodyText": "This doesn't gel with my understanding of React rendering, or maybe I'm misunderstanding how you're querying the structure via the dataTestId.\nThe comment here seems to imply that this React component results in two elements being rendered: a \"FlexRow\" and a \"div\", when in fact the div really is just the HTML rendering of the FlexRow component - and when rendered it's just a single div. Am I missing something?", "author": "calbach", "createdAt": "2020-02-04T18:26:44Z", "path": "ui/src/app/components/flex.tsx", "diffHunk": "@@ -14,17 +14,25 @@ export const flexStyle = reactStyles({\n \n \n export const FlexRow = (props) => {\n-  return <div style={{...flexStyle.row, ...props.style}}>\n+  // The object destructuring below serves two purposes: (1) allows users of this component to pass\n+  // on styles which will override default FlexRow styles, and (2) allows other props passed to\n+  // FlexRow to be passed onto the inner <div>. We exclude data-test-id from being passed on, since\n+  // passing it onto the <div> would cause both the FlexRow and the <div> component to have the same", "originalCommit": "7f90a23d6565389a4c055525d16cf22a95ef29a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkyODU4Mw==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375928583", "bodyText": "Thanks for flagging this! It pushed me to better understand what's going on here.\nThe Enzyme docs (link) and this issue (link) describe the pain point better: Enzyme searches through both the DOM and the component tree. For components where we splat properties onto the inner DOM element, we end up with Enzyme returning two objects for a given 'data-test-id'.\nNow that I read the Enzyme team's understanding of the issue and their reasoning here, I'm realizing that it's not unreasonable to require a test writer to specify whether they want to access the component or the rendered DOM element \u2013\u00a0in fact, it's better that way.\nThe trick here will just be around socializing this behavior, and clarifying what our approach should be in writing tests. Effectively, if a bare '[data-test-id=\"foo\"]' search is yielding multiple nodes, the fix is to either (1) prefix with the component name, e.g. 'Checkbox[data-test-id ...', (2) prefix with a node tag, e.g. 'div[data-test-id ...]', or (3) add a call to .hostNodes() to exclude non-DOM nodes from the result (though this breaks when using shallow rendering).\nI updated the code & tests here to reflect that. I filed https://precisionmedicineinitiative.atlassian.net/browse/RW-4409 to track further cleanup which would have blown up the scope of this PR too much. I'll also share a quick PSA at the eng sync.", "author": "gjuggler", "createdAt": "2020-02-06T16:08:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NDMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMjczMQ==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375422731", "bodyText": "private? (also for scrollToBottom?)", "author": "calbach", "createdAt": "2020-02-05T18:13:43Z", "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "diffHunk": "@@ -0,0 +1,195 @@\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {CheckBox} from 'app/components/inputs';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors from 'app/styles/colors';\n+import {reactStyles, withWindowSize} from 'app/utils';\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+const baseCheckboxLabelStyle = {\n+  color: colors.primary,\n+  fontFamily: 'Montserrat',\n+  fontSize: '14px',\n+  fontWeight: 400,\n+  paddingLeft: '0.25rem',\n+  paddingRight: '0.5rem',\n+};\n+\n+const styles = reactStyles({\n+  checkbox: {\n+    marginRight: '.31667rem', zoom: '1.5',\n+  },\n+  checkboxLabel: baseCheckboxLabelStyle,\n+  // We add opacity to make disabled controls even more obvious (classic CSS trick).\n+  disabledCheckboxLabel: {\n+    ...baseCheckboxLabelStyle,\n+    opacity: '0.5',\n+  },\n+  noticeText: {\n+    fontSize: 14,\n+    fontWeight: 600,\n+    color: colors.primary,\n+  },\n+});\n+\n+export interface AccountCreationTosProps {\n+  windowSize: { width: number, height: number };\n+  // Callback which will be called by this component when the user clicks \"Next\".\n+  onComplete: () => void;\n+  // Path to the Terms of Service PDF file to be displayed.\n+  pdfPath: string;\n+}\n+\n+interface AccountCreationTosState {\n+  hasReadEntireTos: boolean;\n+  hasAckedPrivacyStatement: boolean;\n+  hasAckedTermsOfService: boolean;\n+  // Whether the PDF document is currently being loaded. A spinner will show while true.\n+  loadingPdf: boolean;\n+  // Once the PDF has been loaded, this value contains the number of pages in the PDF document.\n+  numPages: number;\n+}\n+\n+export const AccountCreationTos = withWindowSize()(\n+  class extends React.Component<AccountCreationTosProps, AccountCreationTosState> {\n+\n+    // Tracks whether this component has created an intersection observer to track the last page\n+    // visibility yet.\n+    hasCreatedIntersectionObserver = false;\n+    // Once the last page has been loaded, this contains a reference to the page's DOM element.\n+    lastPage: HTMLElement;\n+\n+    constructor(props: AccountCreationTosProps) {\n+      super(props);\n+      this.state = {\n+        hasReadEntireTos: false,\n+        hasAckedPrivacyStatement: false,\n+        hasAckedTermsOfService: false,\n+        loadingPdf: true,\n+        numPages: 0,\n+      };\n+    }\n+\n+    /**\n+     * Handles the onRenderSuccess callback from the Page element at the end of the document.\n+     * This sets up the intersection listener which will change state when the user scrolls to the\n+     * end of the document.\n+     */\n+    handleLastPageRender() {", "originalCommit": "7f90a23d6565389a4c055525d16cf22a95ef29a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5NTQ3NA==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376095474", "bodyText": "Done \u2013\u00a0sometimes I forget that real private methods are a thing now w/ Typescript...", "author": "gjuggler", "createdAt": "2020-02-06T21:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMjczMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNTA0Mw==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375425043", "bodyText": "Thank you for adding this, I can't take any more log spam", "author": "calbach", "createdAt": "2020-02-05T18:18:01Z", "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "diffHunk": "@@ -0,0 +1,195 @@\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {CheckBox} from 'app/components/inputs';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors from 'app/styles/colors';\n+import {reactStyles, withWindowSize} from 'app/utils';\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+const baseCheckboxLabelStyle = {\n+  color: colors.primary,\n+  fontFamily: 'Montserrat',\n+  fontSize: '14px',\n+  fontWeight: 400,\n+  paddingLeft: '0.25rem',\n+  paddingRight: '0.5rem',\n+};\n+\n+const styles = reactStyles({\n+  checkbox: {\n+    marginRight: '.31667rem', zoom: '1.5',\n+  },\n+  checkboxLabel: baseCheckboxLabelStyle,\n+  // We add opacity to make disabled controls even more obvious (classic CSS trick).\n+  disabledCheckboxLabel: {\n+    ...baseCheckboxLabelStyle,\n+    opacity: '0.5',\n+  },\n+  noticeText: {\n+    fontSize: 14,\n+    fontWeight: 600,\n+    color: colors.primary,\n+  },\n+});\n+\n+export interface AccountCreationTosProps {\n+  windowSize: { width: number, height: number };\n+  // Callback which will be called by this component when the user clicks \"Next\".\n+  onComplete: () => void;\n+  // Path to the Terms of Service PDF file to be displayed.\n+  pdfPath: string;\n+}\n+\n+interface AccountCreationTosState {\n+  hasReadEntireTos: boolean;\n+  hasAckedPrivacyStatement: boolean;\n+  hasAckedTermsOfService: boolean;\n+  // Whether the PDF document is currently being loaded. A spinner will show while true.\n+  loadingPdf: boolean;\n+  // Once the PDF has been loaded, this value contains the number of pages in the PDF document.\n+  numPages: number;\n+}\n+\n+export const AccountCreationTos = withWindowSize()(\n+  class extends React.Component<AccountCreationTosProps, AccountCreationTosState> {\n+\n+    // Tracks whether this component has created an intersection observer to track the last page\n+    // visibility yet.\n+    hasCreatedIntersectionObserver = false;\n+    // Once the last page has been loaded, this contains a reference to the page's DOM element.\n+    lastPage: HTMLElement;\n+\n+    constructor(props: AccountCreationTosProps) {\n+      super(props);\n+      this.state = {\n+        hasReadEntireTos: false,\n+        hasAckedPrivacyStatement: false,\n+        hasAckedTermsOfService: false,\n+        loadingPdf: true,\n+        numPages: 0,\n+      };\n+    }\n+\n+    /**\n+     * Handles the onRenderSuccess callback from the Page element at the end of the document.\n+     * This sets up the intersection listener which will change state when the user scrolls to the\n+     * end of the document.\n+     */\n+    handleLastPageRender() {\n+      if (this.hasCreatedIntersectionObserver) {\n+        return;\n+      }\n+      this.hasCreatedIntersectionObserver = true;\n+      const intersectionCallback: IntersectionObserverCallback = (\n+        entries: IntersectionObserverEntry[], unusedObserver: IntersectionObserver) => {\n+        for (const entry of entries) {\n+          if (entry.isIntersecting) {\n+            this.setState({hasReadEntireTos: true});\n+          }\n+        }\n+      };\n+      const observer = new IntersectionObserver(intersectionCallback);\n+      observer.observe(this.lastPage);\n+    }\n+\n+    /**\n+     * Attempts to scroll the last page of the PDF document into view.\n+     */\n+    scrollToBottom() {\n+      if (this.lastPage) {\n+        this.lastPage.scrollIntoView({block: 'end'});\n+      } else {\n+        throw new Error('Last page has not yet loaded.');\n+      }\n+    }\n+\n+    render() {\n+      const {numPages, loadingPdf, hasReadEntireTos, hasAckedTermsOfService, hasAckedPrivacyStatement} = this.state;\n+\n+      return <FlexColumn data-test-id='account-creation-tos'\n+                         style={{flex: 1, padding: '1rem 3rem 0 3rem'}}>\n+        {/* TODO: all of this PDF rendering stuff should be broken out into a separate component. */}\n+        <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+          {loadingPdf && <SpinnerOverlay/>}\n+          <Document data-test-id='tos-pdf-document' file={this.props.pdfPath}\n+                    loading=''\n+                    onLoadSuccess={data => this.setState(\n+                      {numPages: data.numPages, loadingPdf: false})}\n+          >\n+            {\n+              Array.from(\n+                new Array(numPages),\n+                (el, index) => (\n+                  <Page\n+                    renderAnnotationLayer={false}\n+                    renderTextLayer={false}\n+                    loading=''\n+                    className='terms-of-service__page'\n+                    width={Math.max(500, this.props.windowSize.width * .75)}\n+                    key={`page_${index + 1}`}", "originalCommit": "7f90a23d6565389a4c055525d16cf22a95ef29a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNTQ4OA==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375425488", "bodyText": "Is the __ a convention we've used elsewhere?", "author": "calbach", "createdAt": "2020-02-05T18:18:51Z", "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "diffHunk": "@@ -0,0 +1,195 @@\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {CheckBox} from 'app/components/inputs';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors from 'app/styles/colors';\n+import {reactStyles, withWindowSize} from 'app/utils';\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+const baseCheckboxLabelStyle = {\n+  color: colors.primary,\n+  fontFamily: 'Montserrat',\n+  fontSize: '14px',\n+  fontWeight: 400,\n+  paddingLeft: '0.25rem',\n+  paddingRight: '0.5rem',\n+};\n+\n+const styles = reactStyles({\n+  checkbox: {\n+    marginRight: '.31667rem', zoom: '1.5',\n+  },\n+  checkboxLabel: baseCheckboxLabelStyle,\n+  // We add opacity to make disabled controls even more obvious (classic CSS trick).\n+  disabledCheckboxLabel: {\n+    ...baseCheckboxLabelStyle,\n+    opacity: '0.5',\n+  },\n+  noticeText: {\n+    fontSize: 14,\n+    fontWeight: 600,\n+    color: colors.primary,\n+  },\n+});\n+\n+export interface AccountCreationTosProps {\n+  windowSize: { width: number, height: number };\n+  // Callback which will be called by this component when the user clicks \"Next\".\n+  onComplete: () => void;\n+  // Path to the Terms of Service PDF file to be displayed.\n+  pdfPath: string;\n+}\n+\n+interface AccountCreationTosState {\n+  hasReadEntireTos: boolean;\n+  hasAckedPrivacyStatement: boolean;\n+  hasAckedTermsOfService: boolean;\n+  // Whether the PDF document is currently being loaded. A spinner will show while true.\n+  loadingPdf: boolean;\n+  // Once the PDF has been loaded, this value contains the number of pages in the PDF document.\n+  numPages: number;\n+}\n+\n+export const AccountCreationTos = withWindowSize()(\n+  class extends React.Component<AccountCreationTosProps, AccountCreationTosState> {\n+\n+    // Tracks whether this component has created an intersection observer to track the last page\n+    // visibility yet.\n+    hasCreatedIntersectionObserver = false;\n+    // Once the last page has been loaded, this contains a reference to the page's DOM element.\n+    lastPage: HTMLElement;\n+\n+    constructor(props: AccountCreationTosProps) {\n+      super(props);\n+      this.state = {\n+        hasReadEntireTos: false,\n+        hasAckedPrivacyStatement: false,\n+        hasAckedTermsOfService: false,\n+        loadingPdf: true,\n+        numPages: 0,\n+      };\n+    }\n+\n+    /**\n+     * Handles the onRenderSuccess callback from the Page element at the end of the document.\n+     * This sets up the intersection listener which will change state when the user scrolls to the\n+     * end of the document.\n+     */\n+    handleLastPageRender() {\n+      if (this.hasCreatedIntersectionObserver) {\n+        return;\n+      }\n+      this.hasCreatedIntersectionObserver = true;\n+      const intersectionCallback: IntersectionObserverCallback = (\n+        entries: IntersectionObserverEntry[], unusedObserver: IntersectionObserver) => {\n+        for (const entry of entries) {\n+          if (entry.isIntersecting) {\n+            this.setState({hasReadEntireTos: true});\n+          }\n+        }\n+      };\n+      const observer = new IntersectionObserver(intersectionCallback);\n+      observer.observe(this.lastPage);\n+    }\n+\n+    /**\n+     * Attempts to scroll the last page of the PDF document into view.\n+     */\n+    scrollToBottom() {\n+      if (this.lastPage) {\n+        this.lastPage.scrollIntoView({block: 'end'});\n+      } else {\n+        throw new Error('Last page has not yet loaded.');\n+      }\n+    }\n+\n+    render() {\n+      const {numPages, loadingPdf, hasReadEntireTos, hasAckedTermsOfService, hasAckedPrivacyStatement} = this.state;\n+\n+      return <FlexColumn data-test-id='account-creation-tos'\n+                         style={{flex: 1, padding: '1rem 3rem 0 3rem'}}>\n+        {/* TODO: all of this PDF rendering stuff should be broken out into a separate component. */}\n+        <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+          {loadingPdf && <SpinnerOverlay/>}\n+          <Document data-test-id='tos-pdf-document' file={this.props.pdfPath}\n+                    loading=''\n+                    onLoadSuccess={data => this.setState(\n+                      {numPages: data.numPages, loadingPdf: false})}\n+          >\n+            {\n+              Array.from(\n+                new Array(numPages),\n+                (el, index) => (\n+                  <Page\n+                    renderAnnotationLayer={false}\n+                    renderTextLayer={false}\n+                    loading=''\n+                    className='terms-of-service__page'", "originalCommit": "7f90a23d6565389a4c055525d16cf22a95ef29a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEwMDg3Mg==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376100872", "bodyText": "No, it's somewhat-standard block-element-modifier approach (https://css-tricks.com/bem-101/). I'm totally willing to back off on that one, maybe switch this to \"tos-pdf-page\". There's probably not too much to be done in setting a direction there before we loop back on our whole CSS-in-JS versus inline styles story, anyway.", "author": "gjuggler", "createdAt": "2020-02-06T21:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNTQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNjE4NA==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375426184", "bodyText": "Our usual pattern for React components is to use inline style (despite my initial grumbling). Is there a need for this to be done in CSS? The classes here don't seem particularly general", "author": "calbach", "createdAt": "2020-02-05T18:20:21Z", "path": "ui/src/styles.css", "diffHunk": "@@ -196,3 +196,19 @@ iframe#launcher {\n     transform: rotate(359deg);\n   }\n }\n+\n+/*\n+ * Hides the unnecessary \"select all\" header from the multiselect drop-down for the\n+ * Degrees multi-select in the Account Creation component.\n+ */\n+.create-account__degree-select .p-multiselect-header {\n+  display: none;\n+}\n+\n+.terms-of-service__page {", "originalCommit": "7f90a23d6565389a4c055525d16cf22a95ef29a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwNjQ5OQ==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376206499", "bodyText": "Yeah, that's a good point. This is due to the react-pdf library not supporting inline style props \u2013\u00a0I'd tried that at first, but empirically the only thing that works is to set a classname. I added a comment here and where the  component is rendered in the account-creation-tos file.", "author": "gjuggler", "createdAt": "2020-02-07T04:09:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNjE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNjQ0MA==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375426440", "bodyText": "Why this change?", "author": "calbach", "createdAt": "2020-02-05T18:20:50Z", "path": "ui/tsconfig.json", "diffHunk": "@@ -20,7 +20,7 @@\n       \"dom\"\n     ],\n     \"module\": \"es2015\",\n-    \"baseUrl\": \"./\",\n+    \"baseUrl\": \"./src\",", "originalCommit": "7f90a23d6565389a4c055525d16cf22a95ef29a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwODIwNg==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376208206", "bodyText": "I was playing around with this to try and get rid of some IntelliJ errors that were showing up on imports of test files. When baseUrl in this file was set to './', IntelliJ's TypeScript service would show things like:\n\nwhich would go away when baseUrl was set to './src'.\nAnyway... I didn't really mean to keep it in here, if I do make that change I\"ll split it into a separate tiny PR.", "author": "gjuggler", "createdAt": "2020-02-07T04:20:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNjQ0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMTExNA==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375431114", "bodyText": "I don't understand this precondition. Is this for the new account creation logic, or the old?", "author": "calbach", "createdAt": "2020-02-05T18:29:55Z", "path": "ui/src/app/pages/login/account-creation/account-creation.tsx", "diffHunk": "@@ -175,45 +147,59 @@ export const MultiSelectWithLabel = (props) => {\n   </FlexColumn>;\n };\n \n+export interface AccountCreationProps {\n+  profile: Profile;\n+  invitationKey: string;\n+  onComplete: (profile: Profile) => void;\n+}\n+\n+export interface AccountCreationState {\n+  creatingAccount: boolean;\n+  errors: any;\n+  invalidEmail: boolean;\n+  rolesOptions: any;\n+  profile: Profile;\n+  showAllFieldsRequiredError: boolean;\n+  showInstitution: boolean;\n+  showNonAcademicAffiliationRole: boolean;\n+  showNonAcademicAffiliationOther: boolean;\n+  usernameCheckInProgress: boolean;\n+  usernameConflictError: boolean;\n+  institutionName: string;\n+  institutionRole: string;\n+  nonAcademicAffiliation: string;\n+  nonAcademicAffiliationRole: string;\n+  nonAcademicAffiliationOther: string;\n+}\n+\n export class AccountCreation extends React.Component<AccountCreationProps, AccountCreationState> {\n   private usernameCheckTimeout: NodeJS.Timer;\n \n   constructor(props: AccountCreationProps) {\n+    if (props.profile.institutionalAffiliations.length !== 1) {\n+      throw new Error('Profile must be pre-allocated with 1 institutional affiliation.');", "originalCommit": "7f90a23d6565389a4c055525d16cf22a95ef29a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEwNzIyMQ==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376107221", "bodyText": "This is for both. I am trying to codify what seemed to be happening in the existing code, around L204 (where a single object was pre-allocated in the institutionalAffiliations array), L232 (where various logic and form-rendering was applied based on the first element of this array), and L347 (old coordinates, where updateInstitutionalAffiliation is updating the first element).\nThe major change made in this PR is that this component takes the entire Profile object from props and uses that as the initial state value, rather than creating its own version of an empty profile (L185).\nI thought this assertion might help clarify that, plus the requirement that an institutional affiliation entry must have been pre-allocated. But maybe it just confuses things more... happy for some guidance on what changes might help a reader better understand what's going on here.", "author": "gjuggler", "createdAt": "2020-02-06T22:02:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMTExNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzODQ1Nw==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376538457", "bodyText": "Thanks, this seems fine. I think the only thing that may be confusing here is that typically this profile is going to be passed in an empty state. My first thought on reading this is that perhaps we're expecting the affiliation to already be filled in. A comment here explaining that it will typically be just a placeholder empty affiliation might make this more clear.", "author": "calbach", "createdAt": "2020-02-07T18:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMTExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNzg3Mw==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375437873", "bodyText": "nit: In general I think it is best practice to avoid directly mutating the innards of the state object, though this is probably a pretty innocuous case since it's happening in the state callback. I think the preferred approach here would be either lodash set or via shallow copy:\nreturn {\n   ...currentState.profile.institutionalAffiliations[0],\n  role: '',\n  institution: '',\n  other: ''\n}", "author": "calbach", "createdAt": "2020-02-05T18:43:46Z", "path": "ui/src/app/pages/login/account-creation/account-creation.tsx", "diffHunk": "@@ -362,10 +336,14 @@ export class AccountCreation extends React.Component<AccountCreationProps, Accou\n   }\n \n   clearInstitutionAffiliation() {\n-    this.updateInstitutionAffiliation('nonAcademicAffiliation', '');\n-    this.updateInstitutionAffiliation('role', '');\n-    this.updateInstitutionAffiliation('institution', '');\n-    this.updateInstitutionAffiliation('other', '');\n+    this.setState(currentState => {", "originalCommit": "7f90a23d6565389a4c055525d16cf22a95ef29a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEwNzU1MQ==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376107551", "bodyText": "Thanks \u2013\u00a0I switched to use lodash here, there were a couple other places where I wasn't doing this right too.\n(Side note: I'm a little unsatisfied with lodash as our solution for this pattern. I think it's some combination of (1) the painful lack of type safety, and (2) the horrible state of lodash-fp documentation. A quick bit of reading suggests https://github.com/immerjs/immer might offer a type-safe solution with nearly as concise syntax. I may track this as a new-tech opportunity for the future.)", "author": "gjuggler", "createdAt": "2020-02-06T22:03:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNzg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0MTcyMQ==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376541721", "bodyText": "My typical flow is:\n\nRead normal lodash docs\nGoogle lodash fp playground and poke at it until I can confirm understanding\n\nSometimes the mapping from lodash to a side-effect free functional interface is straightforward, other times it's very non-obvious.\nAlso there are some docs here, but I don't remember the quality:\nhttps://gist.github.com/jfmengels/6b973b69c491375117dc", "author": "calbach", "createdAt": "2020-02-07T18:33:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNzg3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMDY3Mg==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375610672", "bodyText": "Presumably this last part wasn't meant to be included in the TOS content itself, as of now it's super confusing since we'd show multiple sets of checkboxes, the ones in the PDF of course are not interactive:", "author": "calbach", "createdAt": "2020-02-06T02:20:02Z", "path": "ui/src/app/pages/login/account-creation/account-creation-tos.spec.tsx", "diffHunk": "@@ -0,0 +1,91 @@\n+import {mount, ReactWrapper, shallow, ShallowWrapper} from 'enzyme';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import AccountCreationTos, {AccountCreationTosProps} from './account-creation-tos';\n+import {Document, Page, pdfjs} from 'react-pdf';\n+\n+type AnyWrapper = (ShallowWrapper|ReactWrapper);\n+const getPrivacyCheckbox = (wrapper: AnyWrapper): AnyWrapper => {\n+  return wrapper.find('[data-test-id=\"privacy-statement-check\"]');\n+};\n+const getTosCheckbox = (wrapper: AnyWrapper): AnyWrapper => {\n+  return wrapper.find('[data-test-id=\"terms-of-service-check\"]');\n+};\n+const getNextButton = (wrapper: AnyWrapper ): AnyWrapper => {\n+  return wrapper.find('[data-test-id=\"next-button\"]');\n+};\n+\n+let props: AccountCreationTosProps;\n+const onCompleteSpy = jest.fn();\n+\n+beforeEach(() => {\n+  jest.clearAllMocks();\n+  props = {\n+    windowSize: {width: 1700, height: 0},\n+    onComplete: onCompleteSpy,\n+    pdfPath: '/assets/documents/terms-of-service.pdf'", "originalCommit": "7f90a23d6565389a4c055525d16cf22a95ef29a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MDcwNg==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376090706", "bodyText": "Yes \u2013\u00a0this is not the finished terms of service document. We're still waiting on CAPs for that.\nTo make it a little more reasonable-looking I clipped out this awkward stuff and regenerated the PDF.", "author": "gjuggler", "createdAt": "2020-02-06T21:26:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMDY3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMTM4NA==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375611384", "bodyText": "Should the TOS component itself live somewhere outside of the account creation flow? I thought we were planning to eventually have some kind of client-side interceptor to redirect users who hadn't submitted the TOS to do so (i.e. for handling future potential TOS updates). If that work is not planned for now, probably fine to leave as-is.", "author": "calbach", "createdAt": "2020-02-06T02:23:48Z", "path": "ui/src/app/pages/login/account-creation/account-creation-tos.tsx", "diffHunk": "@@ -0,0 +1,195 @@\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {CheckBox} from 'app/components/inputs';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors from 'app/styles/colors';\n+import {reactStyles, withWindowSize} from 'app/utils';\n+import * as React from 'react';\n+import {Document, Page} from 'react-pdf';\n+\n+const baseCheckboxLabelStyle = {\n+  color: colors.primary,\n+  fontFamily: 'Montserrat',\n+  fontSize: '14px',\n+  fontWeight: 400,\n+  paddingLeft: '0.25rem',\n+  paddingRight: '0.5rem',\n+};\n+\n+const styles = reactStyles({\n+  checkbox: {\n+    marginRight: '.31667rem', zoom: '1.5',\n+  },\n+  checkboxLabel: baseCheckboxLabelStyle,\n+  // We add opacity to make disabled controls even more obvious (classic CSS trick).\n+  disabledCheckboxLabel: {\n+    ...baseCheckboxLabelStyle,\n+    opacity: '0.5',\n+  },\n+  noticeText: {\n+    fontSize: 14,\n+    fontWeight: 600,\n+    color: colors.primary,\n+  },\n+});\n+\n+export interface AccountCreationTosProps {\n+  windowSize: { width: number, height: number };\n+  // Callback which will be called by this component when the user clicks \"Next\".\n+  onComplete: () => void;\n+  // Path to the Terms of Service PDF file to be displayed.\n+  pdfPath: string;\n+}\n+\n+interface AccountCreationTosState {\n+  hasReadEntireTos: boolean;\n+  hasAckedPrivacyStatement: boolean;\n+  hasAckedTermsOfService: boolean;\n+  // Whether the PDF document is currently being loaded. A spinner will show while true.\n+  loadingPdf: boolean;\n+  // Once the PDF has been loaded, this value contains the number of pages in the PDF document.\n+  numPages: number;\n+}\n+\n+export const AccountCreationTos = withWindowSize()(\n+  class extends React.Component<AccountCreationTosProps, AccountCreationTosState> {\n+\n+    // Tracks whether this component has created an intersection observer to track the last page\n+    // visibility yet.\n+    hasCreatedIntersectionObserver = false;\n+    // Once the last page has been loaded, this contains a reference to the page's DOM element.\n+    lastPage: HTMLElement;\n+\n+    constructor(props: AccountCreationTosProps) {\n+      super(props);\n+      this.state = {\n+        hasReadEntireTos: false,\n+        hasAckedPrivacyStatement: false,\n+        hasAckedTermsOfService: false,\n+        loadingPdf: true,\n+        numPages: 0,\n+      };\n+    }\n+\n+    /**\n+     * Handles the onRenderSuccess callback from the Page element at the end of the document.\n+     * This sets up the intersection listener which will change state when the user scrolls to the\n+     * end of the document.\n+     */\n+    handleLastPageRender() {\n+      if (this.hasCreatedIntersectionObserver) {\n+        return;\n+      }\n+      this.hasCreatedIntersectionObserver = true;\n+      const intersectionCallback: IntersectionObserverCallback = (\n+        entries: IntersectionObserverEntry[], unusedObserver: IntersectionObserver) => {\n+        for (const entry of entries) {\n+          if (entry.isIntersecting) {\n+            this.setState({hasReadEntireTos: true});\n+          }\n+        }\n+      };\n+      const observer = new IntersectionObserver(intersectionCallback);\n+      observer.observe(this.lastPage);\n+    }\n+\n+    /**\n+     * Attempts to scroll the last page of the PDF document into view.\n+     */\n+    scrollToBottom() {\n+      if (this.lastPage) {\n+        this.lastPage.scrollIntoView({block: 'end'});\n+      } else {\n+        throw new Error('Last page has not yet loaded.');\n+      }\n+    }\n+\n+    render() {\n+      const {numPages, loadingPdf, hasReadEntireTos, hasAckedTermsOfService, hasAckedPrivacyStatement} = this.state;\n+\n+      return <FlexColumn data-test-id='account-creation-tos'\n+                         style={{flex: 1, padding: '1rem 3rem 0 3rem'}}>\n+        {/* TODO: all of this PDF rendering stuff should be broken out into a separate component. */}\n+        <div style={{flex: '1 1 0', overflowY: 'auto'}}>\n+          {loadingPdf && <SpinnerOverlay/>}\n+          <Document data-test-id='tos-pdf-document' file={this.props.pdfPath}\n+                    loading=''\n+                    onLoadSuccess={data => this.setState(\n+                      {numPages: data.numPages, loadingPdf: false})}\n+          >\n+            {\n+              Array.from(\n+                new Array(numPages),\n+                (el, index) => (\n+                  <Page\n+                    renderAnnotationLayer={false}\n+                    renderTextLayer={false}\n+                    loading=''\n+                    className='terms-of-service__page'\n+                    width={Math.max(500, this.props.windowSize.width * .75)}\n+                    key={`page_${index + 1}`}\n+                    pageNumber={index + 1}\n+                    inputRef={index === numPages - 1 ? (ref) => {\n+                      this.lastPage = ref;\n+                    } : undefined}\n+                    onRenderSuccess={index === numPages - 1 ? () => this.handleLastPageRender() :\n+                      undefined}\n+                  />\n+                ),\n+              )\n+            }\n+          </Document>\n+        </div>\n+        <FlexRow\n+          style={{display: 'inline-flex', padding: '1rem', maxWidth: '1000px', margin: 'auto'}}>\n+          <div style={{flex: 3}}>\n+            <div style={{...styles.noticeText, marginBottom: '.5rem', height: '3rem'}}>\n+              By clicking here and moving to the Registration step, you acknowledge that you\n+              understand the terms of this agreement and agree to abide by them.\n+              {!hasReadEntireTos && <span><br/>\n+              <a data-test-id='scroll-to-bottom'\n+                 onClick={() => this.scrollToBottom()}\n+              >Scroll to bottom</a></span>}\n+            </div>\n+            <div style={{marginBottom: '.25rem'}}>\n+              <CheckBox data-test-id='privacy-statement-check'\n+                        checked={false}\n+                        disabled={!hasReadEntireTos}\n+                        onChange={checked => this.setState({hasAckedPrivacyStatement: true})}\n+                        style={styles.checkbox}\n+                        labelStyle={hasReadEntireTos ?\n+                          styles.checkboxLabel :\n+                          styles.disabledCheckboxLabel}\n+                        wrapperStyle={{marginBottom: '0.5rem'}}\n+                        label={<span>\n+                I have read and understand the <i>All of Us</i> Research Program Privacy Statement.</span>}\n+              /></div>\n+            <div>\n+              <CheckBox data-test-id='terms-of-service-check'\n+                        checked={false}\n+                        disabled={!hasReadEntireTos}\n+                        onChange={checked => this.setState({hasAckedTermsOfService: true})}\n+                        style={styles.checkbox}\n+                        labelStyle={hasReadEntireTos ?\n+                          styles.checkboxLabel :\n+                          styles.disabledCheckboxLabel}\n+                        wrapperStyle={{marginBottom: '0.5rem'}}\n+                        label={<span>\n+                I have read and understand the <i>All of Us</i> Research Program Terms of Use described above.</span>}\n+              /></div>\n+          </div>\n+          <FlexColumn style={{paddingLeft: '3rem', alignItems: 'center', justifyContent: 'center'}}>\n+            <Button data-test-id='next-button'\n+                    style={{width: '5rem', height: '2rem', margin: '.25rem .5rem .25rem 0'}}\n+                    disabled={!hasReadEntireTos || !hasAckedPrivacyStatement ||\n+                    !hasAckedTermsOfService}\n+                    onClick={() => this.props.onComplete()}>\n+              Next\n+            </Button>\n+          </FlexColumn>\n+        </FlexRow>\n+      </FlexColumn>;\n+    }\n+  });\n+\n+export default AccountCreationTos;", "originalCommit": "7f90a23d6565389a4c055525d16cf22a95ef29a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEwMjQyNA==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376102424", "bodyText": "Yeah, it eventually should, but it's not planned for launch. Follow-up work here is tracked under https://precisionmedicineinitiative.atlassian.net/browse/RW-4349, and a viable approach would be to pull most of what's in this component out into a separate terms-of-service-form that's used in both places.", "author": "gjuggler", "createdAt": "2020-02-06T21:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMTM4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMTkxOA==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375611918", "bodyText": "There used to be images on the account creation page - was removal intentional?", "author": "calbach", "createdAt": "2020-02-06T02:26:18Z", "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -71,99 +60,188 @@ const styles = {\n       return position;\n     }\n   },\n-  signedInContainer: {\n+  signInContainer: {\n     backgroundSize: 'contain',\n     backgroundRepeat: 'no-repeat',\n     backgroundPosition: 'center',\n-    display: 'flex',\n     justifyContent: 'space-around',\n     alignItems: 'flex-start',\n-    width: 'auto'\n+    width: 'auto',\n+    minHeight: '100vh'\n   },\n \n };\n \n+// Tracks each major stage in the sign-in / sign-up flow. Most of the steps are related to new\n+// account creation.\n+enum SignInStep {\n+  // Landing page. User can choose to sign in or create an account.\n+  LANDING,\n+  // Interstitial step, where a user must enter their invitation key.\n+  //\n+  // TODO: this needs to be controllable per-environment before beta launch!\n+  INVITATION_KEY,\n+  // Terms of Service page. User must read and acknowledge the privacy statement & TOS.\n+  TERMS_OF_SERVICE,\n+  // Basic account creation page. User chooses a username and provides basic name / address info.\n+  ACCOUNT_CREATION,\n+  // Optional demographic survey. Completion of this step triggers actual user creation.\n+  DEMOGRAPHIC_SURVEY,\n+  // Account creation success page.\n+  SUCCESS_PAGE\n+}\n \n+interface BackgroundImageConfig {\n+  backgroundImgSrc: string;\n+  smallerBackgroundImgSrc: string;\n+}\n \n+export const StepToImageConfig = {\n+  [SignInStep.LANDING]: {\n+    backgroundImgSrc: '/assets/images/login-group.png',", "originalCommit": "7f90a23d6565389a4c055525d16cf22a95ef29a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwMDAyMw==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376200023", "bodyText": "No, I didn't intend to change any of the images. Is this something you're seeing when testing, or based on the code?", "author": "gjuggler", "createdAt": "2020-02-07T03:32:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMTkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNzkwOQ==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376527909", "bodyText": "Nevermind. Existing behavior and it matches the updated mocks.", "author": "calbach", "createdAt": "2020-02-07T18:02:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMTkxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMjk5MQ==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r375612991", "bodyText": "One thing that looks a bit wrong is the lack of any margin under the \"submit\" button on the demographics survey. That might be an existing issue, so feel free to ignore it here. Note, this screenshot shows the bottom of the window, fully scrolled:", "author": "calbach", "createdAt": "2020-02-06T02:30:59Z", "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -71,99 +60,188 @@ const styles = {\n       return position;\n     }\n   },\n-  signedInContainer: {\n+  signInContainer: {\n     backgroundSize: 'contain',\n     backgroundRepeat: 'no-repeat',\n     backgroundPosition: 'center',\n-    display: 'flex',\n     justifyContent: 'space-around',\n     alignItems: 'flex-start',\n-    width: 'auto'\n+    width: 'auto',\n+    minHeight: '100vh'\n   },\n \n };\n \n+// Tracks each major stage in the sign-in / sign-up flow. Most of the steps are related to new\n+// account creation.\n+enum SignInStep {\n+  // Landing page. User can choose to sign in or create an account.\n+  LANDING,\n+  // Interstitial step, where a user must enter their invitation key.\n+  //\n+  // TODO: this needs to be controllable per-environment before beta launch!\n+  INVITATION_KEY,\n+  // Terms of Service page. User must read and acknowledge the privacy statement & TOS.\n+  TERMS_OF_SERVICE,\n+  // Basic account creation page. User chooses a username and provides basic name / address info.\n+  ACCOUNT_CREATION,\n+  // Optional demographic survey. Completion of this step triggers actual user creation.\n+  DEMOGRAPHIC_SURVEY,\n+  // Account creation success page.\n+  SUCCESS_PAGE\n+}\n \n+interface BackgroundImageConfig {\n+  backgroundImgSrc: string;\n+  smallerBackgroundImgSrc: string;\n+}\n \n+export const StepToImageConfig = {\n+  [SignInStep.LANDING]: {\n+    backgroundImgSrc: '/assets/images/login-group.png',\n+    smallerBackgroundImgSrc: '/assets/images/login-standing.png'\n+  },\n+  [SignInStep.SUCCESS_PAGE]: {\n+    backgroundImgSrc: '/assets/images/congrats-female.png',\n+    smallerBackgroundImgSrc: 'assets/images/congrats-female-standing.png'\n+  }\n+};\n \n-const headerImg = '/assets/images/logo-registration-non-signed-in.svg';\n+const HEADER_IMAGE = '/assets/images/logo-registration-non-signed-in.svg';\n \n-export const SignInReact = withWindowSize()(\n+export interface SignInProps extends ServerConfigProps, WindowSizeProps {\n+  initialStep?: SignInStep;\n+  onInit: () => void;\n+  signIn: () => void;\n+}\n+\n+interface SignInState {\n+  currentStep: SignInStep;\n+  // Tracks the invitation key provided by the user. This is a required parameter in the createUser\n+  // API call.\n+  invitationKey: string;\n+  profile: Profile;\n+  // Tracks the Terms of Service version that was viewed and acknowledged by the user.\n+  // This is an optional parameter in the createUser API call.\n+  termsOfServiceVersion?: number;\n+}\n+\n+export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(\n   class extends React.Component<SignInProps, SignInState> {\n \n     constructor(props: SignInProps) {\n       super(props);\n       this.state = {\n-        currentStep: {stepName: 'login', backgroundImages: signedOutImages.login},\n-        invitationKey: '',\n-        profile: {} as Profile\n+        currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n+        invitationKey: null,\n+        termsOfServiceVersion: null,\n+        // This defines the profile state for a new user flow. This will get passed to each\n+        // step component as a prop. When each sub-step completes, it will pass the updated Profile\n+        // data in its onComplete callback.\n+        profile: this.createEmptyProfile()\n+      };\n+    }\n+\n+    createEmptyProfile(): Profile {\n+      return {\n+        // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n+        // profile creation, this field is populated with the full email address.\n+        username: '',\n+        dataAccessLevel: DataAccessLevel.Unregistered,\n+        givenName: '',\n+        familyName: '',\n+        contactEmail: '',\n+        currentPosition: '',\n+        organization: '',\n+        areaOfResearch: '',\n+        address: {\n+          streetAddress1: '',\n+          streetAddress2: '',\n+          city: '',\n+          state: '',\n+          country: '',\n+          zipCode: '',\n+        },\n+        institutionalAffiliations: [\n+          // We only allow entering a single institutional affiliation from the creat account\n+          // page, so we pre-fill a single entry which will be bound to the form.\n+          {\n+            institution: undefined,\n+            nonAcademicAffiliation: undefined,\n+            role: undefined,\n+          },\n+        ],\n+        demographicSurvey: {},\n+        degrees: [] as Degree[],\n       };\n-      this.setProfile = this.setProfile.bind(this);\n     }\n \n     componentDidMount() {\n       document.body.style.backgroundColor = colors.light;\n       this.props.onInit();\n     }\n \n-    nextDirective(index: string) {\n-      switch (index) {\n-        case 'login':\n+    renderSignInStep(currentStep: SignInStep) {\n+      const {enableNewAccountCreation} = this.props.serverConfig;\n+\n+      switch (currentStep) {\n+        case SignInStep.LANDING:\n           return <LoginReactComponent signIn={this.props.signIn} onCreateAccount={() =>\n-            this.setCurrentStep({stepName: 'invitationKey'})}/>;\n-        case 'invitationKey':\n-          return <InvitationKey onInvitationKeyVerify={(key) => this.onKeyVerified(key)}/>;\n-        case 'accountCreation':\n-          return <AccountCreation invitationKey={this.state.invitationKey} profile={this.state.profile}\n-                                  setProfile={(profile, nextStep) => this.setProfile(profile, nextStep)}/>;\n-        case 'accountCreationSurvey':\n-          return <AccountCreationSurvey profile={this.state.profile}\n-            invitationKey={this.state.invitationKey} setProfile={(profile, nextStep) => this.setProfile(profile, nextStep)}/>;\n-        case 'accountCreationSuccess':\n+            this.setState({\n+              currentStep: SignInStep.INVITATION_KEY\n+            })}/>;\n+        case SignInStep.INVITATION_KEY:\n+          return <InvitationKey onInvitationKeyVerified={(key: string) => this.setState({\n+            invitationKey: key,\n+            // We skip over TERMS_OF_SERVICE if new-style account creation isn't enabled.\n+            currentStep: enableNewAccountCreation ? SignInStep.TERMS_OF_SERVICE : SignInStep.ACCOUNT_CREATION\n+          })}/>;\n+        case SignInStep.TERMS_OF_SERVICE:\n+          return <AccountCreationTos\n+            pdfPath='/assets/documents/terms-of-service.pdf'\n+            onComplete={() => this.setState({\n+              termsOfServiceVersion: 1,\n+              currentStep: SignInStep.ACCOUNT_CREATION\n+            })}/>;\n+        case SignInStep.ACCOUNT_CREATION:\n+          return <AccountCreation invitationKey={this.state.invitationKey}\n+                                  profile={this.state.profile}\n+                                  onComplete={(profile: Profile) => this.setState({\n+                                    profile: profile,\n+                                    // Skip over the demographic survey if new-style form isn't enabled.\n+                                    currentStep: enableNewAccountCreation ? SignInStep.DEMOGRAPHIC_SURVEY :\n+                                      SignInStep.SUCCESS_PAGE\n+                                  })}/>;\n+        case SignInStep.DEMOGRAPHIC_SURVEY:\n+          return <AccountCreationSurvey\n+            profile={this.state.profile}\n+            invitationKey={this.state.invitationKey}\n+            termsOfServiceVersion={this.state.termsOfServiceVersion}\n+            onComplete={(profile: Profile) => this.setState({\n+              profile: profile,\n+              currentStep: SignInStep.SUCCESS_PAGE\n+            })}\n+            onPreviousClick={(profile: Profile) => this.setState({\n+              profile: profile,\n+              currentStep: SignInStep.ACCOUNT_CREATION\n+            })}/>;\n+        case SignInStep.SUCCESS_PAGE:\n           return <AccountCreationSuccess profile={this.state.profile}/>;\n         default:\n           return;\n       }\n     }\n \n-    setCurrentStep(nextStep: Step) {\n-      this.setState({\n-        currentStep: nextStep\n-      });\n-    }\n-\n-    onKeyVerified(invitationKey: string) {\n-      this.setState({\n-        invitationKey: invitationKey,\n-        currentStep: {stepName: 'accountCreation'}\n-      });\n-    }\n-\n-    setProfile(profile, currentStep) {\n-      this.setState({\n-        profile: profile,\n-        currentStep: currentStep\n-      });\n-    }\n-\n-\n-\n     render() {\n-      const {stepName, backgroundImages} = this.state.currentStep;\n-      const maxWidth = backgroundImages === undefined ? '100%' : '41.66667%';\n-      return <div style={styles.signedInContainer}>\n-        <FlexColumn style={{width: '100%'}}>\n-          <div data-test-id='template'\n-               style={styles.template(this.props.windowSize, backgroundImages)}>\n-            <img style={{height: '1.75rem', marginLeft: '1rem', marginTop: '1rem'}}\n-                 src={headerImg}/>\n-            <div style={{flex: `0 0 ${maxWidth}`,\n-              maxWidth: maxWidth, minWidth: '25rem'}}>\n-              {this.nextDirective(stepName)}\n-            </div>\n-          </div>\n+      const backgroundImages = StepToImageConfig[this.state.currentStep];\n+      return <FlexColumn style={styles.signInContainer} data-test-id='sign-in-container'>\n+        <FlexColumn data-test-id='sign-in-page'\n+             style={styles.template(this.props.windowSize, backgroundImages)}>\n+          <div><img style={{height: '1.75rem', marginLeft: '1rem', marginTop: '1rem'}}\n+                    src={HEADER_IMAGE}/></div>\n+          {this.renderSignInStep(this.state.currentStep)}", "originalCommit": "7f90a23d6565389a4c055525d16cf22a95ef29a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIwMTA0MQ==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376201041", "bodyText": "Looks like an existing issue, but an easy enough fix. Done.", "author": "gjuggler", "createdAt": "2020-02-07T03:38:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMjk5MQ=="}], "type": "inlineReview"}, {"oid": "0fd7867a8844876b7776691605cb952bd5c766b4", "url": "https://github.com/all-of-us/workbench/commit/0fd7867a8844876b7776691605cb952bd5c766b4", "message": "Checkpoint on account creation cleanup.", "committedDate": "2020-02-06T15:56:49Z", "type": "commit"}, {"oid": "b25963f8e7a3669264e133d78b396bd870db4254", "url": "https://github.com/all-of-us/workbench/commit/b25963f8e7a3669264e133d78b396bd870db4254", "message": "Add an AccountCreationTos skeleton component.", "committedDate": "2020-02-06T15:56:49Z", "type": "commit"}, {"oid": "c74b3b64b475548a4de6c6e2f705904acadaba98", "url": "https://github.com/all-of-us/workbench/commit/c74b3b64b475548a4de6c6e2f705904acadaba98", "message": "Use react-pdf for rendering PDFs, finish up styling of TOS page, add & fix tests.", "committedDate": "2020-02-06T15:56:50Z", "type": "commit"}, {"oid": "238edfee5fac4e73e2215074225fb2d059adf364", "url": "https://github.com/all-of-us/workbench/commit/238edfee5fac4e73e2215074225fb2d059adf364", "message": "Add a comment about the data-test-id prop passing.", "committedDate": "2020-02-06T15:56:50Z", "type": "commit"}, {"oid": "9b50a4a421938065b4d2268318234b3a1dd39505", "url": "https://github.com/all-of-us/workbench/commit/9b50a4a421938065b4d2268318234b3a1dd39505", "message": "Add a withServerConfig HOC to ensure sign-in waits for a non-empty config value before rendering.", "committedDate": "2020-02-06T15:56:50Z", "type": "commit"}, {"oid": "f854a0d7276ed5f74c6d2c73a0d937cbfae0a049", "url": "https://github.com/all-of-us/workbench/commit/f854a0d7276ed5f74c6d2c73a0d937cbfae0a049", "message": "Add sign-in tests to ensure account flow works with new and old versions.", "committedDate": "2020-02-06T15:56:50Z", "type": "commit"}, {"oid": "3280362d43c616f578bf72bceb8f425958d34693", "url": "https://github.com/all-of-us/workbench/commit/3280362d43c616f578bf72bceb8f425958d34693", "message": "Point tsconfig to src/ directory as the root. This fixes some IJ errors in spec files.", "committedDate": "2020-02-06T15:56:50Z", "type": "commit"}, {"oid": "ea420dfccc57f0da0853f51233369eca6699da85", "url": "https://github.com/all-of-us/workbench/commit/ea420dfccc57f0da0853f51233369eca6699da85", "message": "Minor change from PR self-review.", "committedDate": "2020-02-06T15:56:50Z", "type": "commit"}, {"oid": "b5b7fde0e49e308cbb8b442e8fea4ab556848617", "url": "https://github.com/all-of-us/workbench/commit/b5b7fde0e49e308cbb8b442e8fea4ab556848617", "message": "Small tweaks to fix build.", "committedDate": "2020-02-06T15:56:50Z", "type": "commit"}, {"oid": "bb182816373faba4bd7717b5a20b3a35ab5741a2", "url": "https://github.com/all-of-us/workbench/commit/bb182816373faba4bd7717b5a20b3a35ab5741a2", "message": "Fix a test and a DOM console warning.", "committedDate": "2020-02-06T15:56:50Z", "type": "commit"}, {"oid": "4844beffe7d4aacf7e236d220ddbe061d67b056f", "url": "https://github.com/all-of-us/workbench/commit/4844beffe7d4aacf7e236d220ddbe061d67b056f", "message": "Add support for PDFs as static files.", "committedDate": "2020-02-06T15:56:50Z", "type": "commit"}, {"oid": "77dc4ce9f07d6b87b6ad55b62317a5258313de83", "url": "https://github.com/all-of-us/workbench/commit/77dc4ce9f07d6b87b6ad55b62317a5258313de83", "message": "Remove unnecessary console.log", "committedDate": "2020-02-06T15:56:50Z", "type": "commit"}, {"oid": "a7de049961fe8b03ff142ef78349cc713aeab5e5", "url": "https://github.com/all-of-us/workbench/commit/a7de049961fe8b03ff142ef78349cc713aeab5e5", "message": "Add typedef for StepToImageConfig.", "committedDate": "2020-02-06T15:56:50Z", "type": "commit"}, {"oid": "b0ccacbbf4ef34f66f56d505a58c760c7974f7f7", "url": "https://github.com/all-of-us/workbench/commit/b0ccacbbf4ef34f66f56d505a58c760c7974f7f7", "message": "PR feedback: data-test-id changes, new PDF file, style fixes.", "committedDate": "2020-02-07T14:09:46Z", "type": "commit"}, {"oid": "b0ccacbbf4ef34f66f56d505a58c760c7974f7f7", "url": "https://github.com/all-of-us/workbench/commit/b0ccacbbf4ef34f66f56d505a58c760c7974f7f7", "message": "PR feedback: data-test-id changes, new PDF file, style fixes.", "committedDate": "2020-02-07T14:09:46Z", "type": "forcePushed"}, {"oid": "3022ff0982d1e11e21fabbb7f05ca5f9f62700c5", "url": "https://github.com/all-of-us/workbench/commit/3022ff0982d1e11e21fabbb7f05ca5f9f62700c5", "message": "Imports / build fix.", "committedDate": "2020-02-07T14:34:40Z", "type": "commit"}, {"oid": "596d16a2959afc522b58e4e3d448e4db513d63a1", "url": "https://github.com/all-of-us/workbench/commit/596d16a2959afc522b58e4e3d448e4db513d63a1", "message": "Revert change to tsconfig.json", "committedDate": "2020-02-07T14:34:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNTgwOA==", "url": "https://github.com/all-of-us/workbench/pull/3075#discussion_r376535808", "bodyText": "s/creat/create/", "author": "calbach", "createdAt": "2020-02-07T18:20:36Z", "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -1,169 +1,248 @@\n import {Component} from '@angular/core';\n import {Router} from '@angular/router';\n+import * as fp from 'lodash/fp';\n \n+import {AccountCreation} from 'app/pages/login/account-creation/account-creation';\n import {AccountCreationSuccess} from 'app/pages/login/account-creation/account-creation-success';\n+import {AccountCreationSurvey} from 'app/pages/login/account-creation/account-creation-survey';\n+import {AccountCreationTos} from 'app/pages/login/account-creation/account-creation-tos';\n import {InvitationKey} from 'app/pages/login/invitation-key';\n import {LoginReactComponent} from 'app/pages/login/login';\n import {SignInService} from 'app/services/sign-in.service';\n import colors from 'app/styles/colors';\n-import {ReactWrapperBase, withWindowSize} from 'app/utils';\n-import {AccountCreation} from './account-creation/account-creation';\n+import {\n+  reactStyles,\n+  ReactWrapperBase, ServerConfigProps,\n+  WindowSizeProps,\n+  withServerConfig,\n+  withWindowSize,\n+} from 'app/utils';\n \n-import {Profile} from 'generated/fetch';\n+import {DataAccessLevel, Degree, Profile} from 'generated/fetch';\n \n import {FlexColumn} from 'app/components/flex';\n-import {SignedOutImages, signedOutImages} from 'app/pages/login/signed-out-images';\n import * as React from 'react';\n-import {AccountCreationSurvey} from './account-creation/account-creation-survey';\n \n-\n-\n-interface Step {\n-  stepName: string;\n-  backgroundImages?: SignedOutImages;\n-}\n-\n-export interface SignInProps {\n-  onInit: () => void;\n-  signIn: () => void;\n-  windowSize: { width: number, height: number };\n-}\n-\n-interface SignInState {\n-  currentStep: Step;\n-  invitationKey: string;\n-  profile: Profile;\n-}\n-\n-const styles = {\n-  template: (windowSize, images: SignedOutImages) => {\n-    // Lower bounds to prevent the small and large images from covering the\n-    // creation controls, respectively.\n-    const bgWidthMinPx = 900;\n-    const bgWidthSmallLimitPx = 1600;\n-\n-    return {\n-      backgroundImage: calculateImage(),\n-      backgroundColor: colors.light,\n-      backgroundRepeat: 'no-repeat',\n-      width: '100%',\n-      minHeight: '100vh',\n-      backgroundSize: windowSize.width <= bgWidthMinPx ? '0% 0%' : 'contain',\n-      backgroundPosition: calculateBackgroundPosition()\n-    };\n-\n-    function calculateImage() {\n-      if (images === undefined) {\n-        return null;\n-      }\n-      let imageUrl = 'url(\\'' + images.backgroundImgSrc + '\\')';\n-      if (windowSize.width > bgWidthMinPx && windowSize.width <= bgWidthSmallLimitPx) {\n-        imageUrl = 'url(\\'' + images.smallerBackgroundImgSrc + '\\')';\n-      }\n-      return imageUrl;\n+// A template function which returns the appropriate style config based on window size and\n+// background images.\n+const backgroundStyleTemplate = (windowSize, imageConfig?: BackgroundImageConfig) => {\n+  // Lower bounds to prevent the small and large images from covering the\n+  // creation controls, respectively.\n+  const bgWidthMinPx = 900;\n+  const bgWidthSmallLimitPx = 1600;\n+\n+  return {\n+    backgroundImage: calculateImage(),\n+    backgroundColor: colors.light,\n+    backgroundRepeat: 'no-repeat',\n+    flex: 1,\n+    width: '100%',\n+    backgroundSize: windowSize.width <= bgWidthMinPx ? '0% 0%' : 'contain',\n+    backgroundPosition: calculateBackgroundPosition()\n+  };\n+\n+  function calculateImage() {\n+    if (!imageConfig) {\n+      return null;\n+    }\n+    let imageUrl = 'url(\\'' + imageConfig.backgroundImgSrc + '\\')';\n+    if (windowSize.width > bgWidthMinPx && windowSize.width <= bgWidthSmallLimitPx) {\n+      imageUrl = 'url(\\'' + imageConfig.smallerBackgroundImgSrc + '\\')';\n     }\n+    return imageUrl;\n+  }\n \n-    function calculateBackgroundPosition() {\n-      let position = 'bottom right -1rem';\n-      if (windowSize.width > bgWidthMinPx && windowSize.width <= bgWidthSmallLimitPx) {\n-        position = 'bottom right';\n-      }\n-      return position;\n+  function calculateBackgroundPosition() {\n+    let position = 'bottom right -1rem';\n+    if (windowSize.width > bgWidthMinPx && windowSize.width <= bgWidthSmallLimitPx) {\n+      position = 'bottom right';\n     }\n-  },\n-  signedInContainer: {\n+    return position;\n+  }\n+};\n+\n+const styles = reactStyles({\n+  signInContainer: {\n     backgroundSize: 'contain',\n     backgroundRepeat: 'no-repeat',\n     backgroundPosition: 'center',\n-    display: 'flex',\n     justifyContent: 'space-around',\n     alignItems: 'flex-start',\n-    width: 'auto'\n+    width: 'auto',\n+    minHeight: '100vh'\n   },\n+});\n+\n+// Tracks each major stage in the sign-in / sign-up flow. Most of the steps are related to new\n+// account creation.\n+enum SignInStep {\n+  // Landing page. User can choose to sign in or create an account.\n+  LANDING,\n+  // Interstitial step, where a user must enter their invitation key.\n+  //\n+  // TODO: this needs to be controllable per-environment before beta launch!\n+  INVITATION_KEY,\n+  // Terms of Service page. User must read and acknowledge the privacy statement & TOS.\n+  TERMS_OF_SERVICE,\n+  // Basic account creation page. User chooses a username and provides basic name / address info.\n+  ACCOUNT_CREATION,\n+  // Optional demographic survey. Completion of this step triggers actual user creation.\n+  DEMOGRAPHIC_SURVEY,\n+  // Account creation success page.\n+  SUCCESS_PAGE\n+}\n \n-};\n-\n-\n+interface BackgroundImageConfig {\n+  backgroundImgSrc: string;\n+  smallerBackgroundImgSrc: string;\n+}\n \n+export const StepToImageConfig: Map<SignInStep, BackgroundImageConfig> = new Map([\n+  [SignInStep.LANDING, {\n+    backgroundImgSrc: '/assets/images/login-group.png',\n+    smallerBackgroundImgSrc: '/assets/images/login-standing.png'\n+  }],\n+  [SignInStep.SUCCESS_PAGE, {\n+    backgroundImgSrc: '/assets/images/congrats-female.png',\n+    smallerBackgroundImgSrc: 'assets/images/congrats-female-standing.png'\n+  }]]\n+);\n+\n+const HEADER_IMAGE = '/assets/images/logo-registration-non-signed-in.svg';\n+\n+export interface SignInProps extends ServerConfigProps, WindowSizeProps {\n+  initialStep?: SignInStep;\n+  onInit: () => void;\n+  signIn: () => void;\n+}\n \n-const headerImg = '/assets/images/logo-registration-non-signed-in.svg';\n+interface SignInState {\n+  currentStep: SignInStep;\n+  // Tracks the invitation key provided by the user. This is a required parameter in the createUser\n+  // API call.\n+  invitationKey: string;\n+  profile: Profile;\n+  // Tracks the Terms of Service version that was viewed and acknowledged by the user.\n+  // This is an optional parameter in the createUser API call.\n+  termsOfServiceVersion?: number;\n+}\n \n-export const SignInReact = withWindowSize()(\n+export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(\n   class extends React.Component<SignInProps, SignInState> {\n \n     constructor(props: SignInProps) {\n       super(props);\n       this.state = {\n-        currentStep: {stepName: 'login', backgroundImages: signedOutImages.login},\n-        invitationKey: '',\n-        profile: {} as Profile\n+        currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n+        invitationKey: null,\n+        termsOfServiceVersion: null,\n+        // This defines the profile state for a new user flow. This will get passed to each\n+        // step component as a prop. When each sub-step completes, it will pass the updated Profile\n+        // data in its onComplete callback.\n+        profile: this.createEmptyProfile()\n+      };\n+    }\n+\n+    createEmptyProfile(): Profile {\n+      return {\n+        // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n+        // profile creation, this field is populated with the full email address.\n+        username: '',\n+        dataAccessLevel: DataAccessLevel.Unregistered,\n+        givenName: '',\n+        familyName: '',\n+        contactEmail: '',\n+        currentPosition: '',\n+        organization: '',\n+        areaOfResearch: '',\n+        address: {\n+          streetAddress1: '',\n+          streetAddress2: '',\n+          city: '',\n+          state: '',\n+          country: '',\n+          zipCode: '',\n+        },\n+        institutionalAffiliations: [\n+          // We only allow entering a single institutional affiliation from the creat account", "originalCommit": "596d16a2959afc522b58e4e3d448e4db513d63a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3382e15d580fa0eb2a7d3929c95f550461cfd51c", "url": "https://github.com/all-of-us/workbench/commit/3382e15d580fa0eb2a7d3929c95f550461cfd51c", "message": "Last bit of PR feedback cleanups.", "committedDate": "2020-02-07T20:43:57Z", "type": "commit"}]}