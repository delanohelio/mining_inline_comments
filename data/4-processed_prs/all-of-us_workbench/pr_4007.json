{"pr_number": 4007, "pr_title": "[RW-5402][risk=no] Read-only sidebar runtime panel", "pr_createdAt": "2020-09-15T04:39:56Z", "pr_url": "https://github.com/all-of-us/workbench/pull/4007", "timeline": [{"oid": "95af81f57fd2390da079d352a4509c35d1b78425", "url": "https://github.com/all-of-us/workbench/commit/95af81f57fd2390da079d352a4509c35d1b78425", "message": "Add readonly runtime panel", "committedDate": "2020-09-16T00:24:51Z", "type": "forcePushed"}, {"oid": "d645b7718c1d5e5679bfc67042b275b78232449f", "url": "https://github.com/all-of-us/workbench/commit/d645b7718c1d5e5679bfc67042b275b78232449f", "message": "Add readonly runtime panel", "committedDate": "2020-09-16T00:31:07Z", "type": "forcePushed"}, {"oid": "2056ab26255867e2d4dc2c28ba54823e0f2f8158", "url": "https://github.com/all-of-us/workbench/commit/2056ab26255867e2d4dc2c28ba54823e0f2f8158", "message": "Add readonly runtime panel", "committedDate": "2020-09-16T00:31:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUzMTQwNA==", "url": "https://github.com/all-of-us/workbench/pull/4007#discussion_r489531404", "bodyText": "I had to add () to get it to compile\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            export const RuntimePanel = withCurrentWorkspace(\n          \n          \n            \n            export const RuntimePanel = withCurrentWorkspace()(", "author": "dolbeew", "createdAt": "2020-09-16T15:32:27Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -0,0 +1,207 @@\n+import {Button, Clickable, MenuItem} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {ClrIcon} from 'app/components/icons';\n+import {PopupTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {runtimeApi} from 'app/services/swagger-fetch-clients';\n+import colors, {addOpacity} from 'app/styles/colors';\n+import {reactStyles, withCurrentWorkspace} from 'app/utils';\n+import {machineTypes} from 'app/utils/machines';\n+import {WorkspaceData} from 'app/utils/workspace-data';\n+import {Dropdown} from 'primereact/dropdown';\n+import {InputNumber} from 'primereact/inputnumber';\n+\n+import {Runtime} from 'generated/fetch';\n+\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+\n+const styles = reactStyles({\n+  sectionHeader: {\n+    color: colors.primary,\n+    fontSize: '16px',\n+    fontWeight: 700,\n+    lineHeight: '1rem',\n+    marginBottom: '12px',\n+    marginTop: '12px'\n+  },\n+  controlSection: {\n+    backgroundColor: String(addOpacity(colors.white, .75)),\n+    borderRadius: '3px',\n+    padding: '.75rem',\n+    marginTop: '.75rem'\n+  },\n+  presetMenuItem: {\n+    color: colors.primary,\n+    fontSize: '14px'\n+  }\n+});\n+\n+const defaultMachineType = machineTypes.find(({name}) => name === 'n1-standard-4');\n+\n+export interface Props {\n+  workspace: WorkspaceData;\n+}\n+\n+interface State {\n+  // Whether the initial runtime load is still in progress.\n+  loading: boolean;\n+  // Whether there was an error in loading the runtime data.\n+  error: boolean;\n+  // The runtime. null if none exists, or if there was an error in loading the\n+  // runtime.\n+  runtime: Runtime|null;\n+}\n+\n+export const RuntimePanel = withCurrentWorkspace(", "originalCommit": "2056ab26255867e2d4dc2c28ba54823e0f2f8158", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "030ea457530aeeea1a09b3efbf470086e1aa04d8", "url": "https://github.com/all-of-us/workbench/commit/030ea457530aeeea1a09b3efbf470086e1aa04d8", "message": "Add readonly runtime panel", "committedDate": "2020-09-16T18:12:51Z", "type": "commit"}, {"oid": "5390b7f047f755b2479e89da46900bb4fce598c3", "url": "https://github.com/all-of-us/workbench/commit/5390b7f047f755b2479e89da46900bb4fce598c3", "message": "Fix compile", "committedDate": "2020-09-16T18:15:42Z", "type": "commit"}, {"oid": "5390b7f047f755b2479e89da46900bb4fce598c3", "url": "https://github.com/all-of-us/workbench/commit/5390b7f047f755b2479e89da46900bb4fce598c3", "message": "Fix compile", "committedDate": "2020-09-16T18:15:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NTU1Ng==", "url": "https://github.com/all-of-us/workbench/pull/4007#discussion_r489745556", "bodyText": "What are you intending to do with this? As written this unions the current CPU selection with all machine types, which should just be... all machine types. I believe this will also result in duplicate CPUs. Is it possible you meant fp.unionBy('cpu')?", "author": "als364", "createdAt": "2020-09-16T20:49:18Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -0,0 +1,207 @@\n+import {Button, Clickable, MenuItem} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {ClrIcon} from 'app/components/icons';\n+import {PopupTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {runtimeApi} from 'app/services/swagger-fetch-clients';\n+import colors, {addOpacity} from 'app/styles/colors';\n+import {reactStyles, withCurrentWorkspace} from 'app/utils';\n+import {machineTypes} from 'app/utils/machines';\n+import {WorkspaceData} from 'app/utils/workspace-data';\n+import {Dropdown} from 'primereact/dropdown';\n+import {InputNumber} from 'primereact/inputnumber';\n+\n+import {Runtime} from 'generated/fetch';\n+\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+\n+const styles = reactStyles({\n+  sectionHeader: {\n+    color: colors.primary,\n+    fontSize: '16px',\n+    fontWeight: 700,\n+    lineHeight: '1rem',\n+    marginBottom: '12px',\n+    marginTop: '12px'\n+  },\n+  controlSection: {\n+    backgroundColor: String(addOpacity(colors.white, .75)),\n+    borderRadius: '3px',\n+    padding: '.75rem',\n+    marginTop: '.75rem'\n+  },\n+  presetMenuItem: {\n+    color: colors.primary,\n+    fontSize: '14px'\n+  }\n+});\n+\n+const defaultMachineType = machineTypes.find(({name}) => name === 'n1-standard-4');\n+\n+export interface Props {\n+  workspace: WorkspaceData;\n+}\n+\n+interface State {\n+  // Whether the initial runtime load is still in progress.\n+  loading: boolean;\n+  // Whether there was an error in loading the runtime data.\n+  error: boolean;\n+  // The runtime. null if none exists, or if there was an error in loading the\n+  // runtime.\n+  runtime: Runtime|null;\n+}\n+\n+export const RuntimePanel = withCurrentWorkspace()(\n+  class extends React.Component<Props, State> {\n+    private aborter = new AbortController();\n+\n+    constructor(props: Props) {\n+      super(props);\n+      this.state = {\n+        loading: true,\n+        error: false,\n+        runtime: null\n+      };\n+    }\n+\n+    async componentDidMount() {\n+      // TODO(RW-5420): Centralize a runtimeStore.\n+      let runtime = null;\n+      let error = false;\n+      try {\n+        runtime = await runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n+      } catch (e) {\n+        // 404 is expected if the runtime doesn't exist, represent this as a null\n+        // runtime rather than an error mode.\n+        if (e.status !== 404) {\n+          error = true;\n+        }\n+      }\n+      this.setState({\n+        runtime,\n+        error,\n+        loading: false\n+      });\n+    }\n+\n+    render() {\n+      const {loading, error, runtime} = this.state;\n+      if (loading) {\n+        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n+      } else if (error) {\n+        return <div>Error loading compute configuration</div>;\n+      } else if (!runtime) {\n+        // TODO(RW-5591): Create runtime page goes here.\n+        return <div>No runtime exists yet</div>;\n+      }\n+\n+      const isDataproc = !!runtime.dataprocConfig;\n+\n+      let masterMachineName;\n+      let masterDiskSize;\n+      if (isDataproc) {\n+        masterMachineName = runtime.dataprocConfig.masterMachineType;\n+        masterDiskSize = runtime.dataprocConfig.masterDiskSize;\n+      } else {\n+        masterMachineName = runtime.gceConfig.machineType;\n+        masterDiskSize = runtime.gceConfig.bootDiskSize;\n+      }\n+      const machineType = machineTypes.find(({name}) => name === masterMachineName) || defaultMachineType;\n+\n+      return <div data-test-id='runtime-panel'>\n+        <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n+        <div>\n+          Your analysis environment consists of an application and compute resources.\n+          Your cloud environment is unique to this workspace and not shared with other users.\n+        </div>\n+        {/* TODO(RW-5419): Cost estimates go here. */}\n+        <div style={styles.controlSection}>\n+          {/* Recommended runtime: pick from default templates or change the image. */}\n+          <FlexRow style={{justifyContent: 'space-between', marginTop: '.5rem', marginBottom: '1rem'}}>\n+            <h3 style={{...styles.sectionHeader, margin: '0'}}>Custom cloud environment</h3>\n+            <PopupTrigger side='bottom'\n+                          closeOnClick\n+                          content={\n+                            <React.Fragment>\n+                              <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n+                              <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n+                            </React.Fragment>\n+                          }>\n+              <Clickable data-test-id='runtime-presets-menu'\n+                         disabled={true}>\n+                Recommended environments <ClrIcon shape='caret down'/>\n+              </Clickable>\n+            </PopupTrigger>\n+          </FlexRow>\n+          <h3 style={styles.sectionHeader}>Application configuration</h3>\n+          {/* TODO(RW-5413): Populate the image list with server driven options. */}\n+          <Dropdown style={{width: '100%'}}\n+                    data-test-id='runtime-image-dropdown'\n+                    disabled={true}\n+                    options={[runtime.toolDockerImage]}\n+                    value={runtime.toolDockerImage}/>\n+          {/* Runtime customization: change detailed machine configuration options. */}\n+          <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n+          <FlexRow style={{justifyContent: 'space-between'}}>\n+            <div>\n+              <label htmlFor='runtime-cpu'\n+                     style={{marginRight: '.25rem'}}>CPUs</label>\n+              <Dropdown id='runtime-cpu'\n+                        disabled={true}\n+                        options={fp.flow(\n+                          /* Show all CPU options. */\n+                          fp.map('cpu'),\n+                          fp.union([machineType.cpu]),", "originalCommit": "5390b7f047f755b2479e89da46900bb4fce598c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3Njc1MA==", "url": "https://github.com/all-of-us/workbench/pull/4007#discussion_r489776750", "bodyText": "Thanks for calling this out, this was not quite complete. I had one item I meant to research more here, which I've now done and added some comments explaining. Basically some of the smaller machine types are non-functional on Leo, and so they should be excluded from the options. However, we should still support rendering these runtimes so that the UI can display them and the user can change these runtimes, in the event that we change our definition of a \"valid\" machine type in the future.\nhttps://broadworkbench.atlassian.net/browse/SATURN-1337\nFor Saturn, they added this support for that because users had created small machines and couldn't use Terra UI to recover. In our case, it's purely future proofing.", "author": "calbach", "createdAt": "2020-09-16T21:55:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NTU1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMzMDg3Mg==", "url": "https://github.com/all-of-us/workbench/pull/4007#discussion_r490330872", "bodyText": "Gotcha, that makes sense. Thank you!", "author": "als364", "createdAt": "2020-09-17T15:11:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NTU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NzY2OA==", "url": "https://github.com/all-of-us/workbench/pull/4007#discussion_r489747668", "bodyText": "Would you mind adding a TODO reminding the implementer of RW-5410 or whatever the most appropriate ticket is to unset machineType.memory when this dropdown is changed? I believe that should make the dropdown repopulate with the correct values", "author": "als364", "createdAt": "2020-09-16T20:53:25Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -0,0 +1,207 @@\n+import {Button, Clickable, MenuItem} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {ClrIcon} from 'app/components/icons';\n+import {PopupTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {runtimeApi} from 'app/services/swagger-fetch-clients';\n+import colors, {addOpacity} from 'app/styles/colors';\n+import {reactStyles, withCurrentWorkspace} from 'app/utils';\n+import {machineTypes} from 'app/utils/machines';\n+import {WorkspaceData} from 'app/utils/workspace-data';\n+import {Dropdown} from 'primereact/dropdown';\n+import {InputNumber} from 'primereact/inputnumber';\n+\n+import {Runtime} from 'generated/fetch';\n+\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+\n+const styles = reactStyles({\n+  sectionHeader: {\n+    color: colors.primary,\n+    fontSize: '16px',\n+    fontWeight: 700,\n+    lineHeight: '1rem',\n+    marginBottom: '12px',\n+    marginTop: '12px'\n+  },\n+  controlSection: {\n+    backgroundColor: String(addOpacity(colors.white, .75)),\n+    borderRadius: '3px',\n+    padding: '.75rem',\n+    marginTop: '.75rem'\n+  },\n+  presetMenuItem: {\n+    color: colors.primary,\n+    fontSize: '14px'\n+  }\n+});\n+\n+const defaultMachineType = machineTypes.find(({name}) => name === 'n1-standard-4');\n+\n+export interface Props {\n+  workspace: WorkspaceData;\n+}\n+\n+interface State {\n+  // Whether the initial runtime load is still in progress.\n+  loading: boolean;\n+  // Whether there was an error in loading the runtime data.\n+  error: boolean;\n+  // The runtime. null if none exists, or if there was an error in loading the\n+  // runtime.\n+  runtime: Runtime|null;\n+}\n+\n+export const RuntimePanel = withCurrentWorkspace()(\n+  class extends React.Component<Props, State> {\n+    private aborter = new AbortController();\n+\n+    constructor(props: Props) {\n+      super(props);\n+      this.state = {\n+        loading: true,\n+        error: false,\n+        runtime: null\n+      };\n+    }\n+\n+    async componentDidMount() {\n+      // TODO(RW-5420): Centralize a runtimeStore.\n+      let runtime = null;\n+      let error = false;\n+      try {\n+        runtime = await runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n+      } catch (e) {\n+        // 404 is expected if the runtime doesn't exist, represent this as a null\n+        // runtime rather than an error mode.\n+        if (e.status !== 404) {\n+          error = true;\n+        }\n+      }\n+      this.setState({\n+        runtime,\n+        error,\n+        loading: false\n+      });\n+    }\n+\n+    render() {\n+      const {loading, error, runtime} = this.state;\n+      if (loading) {\n+        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n+      } else if (error) {\n+        return <div>Error loading compute configuration</div>;\n+      } else if (!runtime) {\n+        // TODO(RW-5591): Create runtime page goes here.\n+        return <div>No runtime exists yet</div>;\n+      }\n+\n+      const isDataproc = !!runtime.dataprocConfig;\n+\n+      let masterMachineName;\n+      let masterDiskSize;\n+      if (isDataproc) {\n+        masterMachineName = runtime.dataprocConfig.masterMachineType;\n+        masterDiskSize = runtime.dataprocConfig.masterDiskSize;\n+      } else {\n+        masterMachineName = runtime.gceConfig.machineType;\n+        masterDiskSize = runtime.gceConfig.bootDiskSize;\n+      }\n+      const machineType = machineTypes.find(({name}) => name === masterMachineName) || defaultMachineType;\n+\n+      return <div data-test-id='runtime-panel'>\n+        <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n+        <div>\n+          Your analysis environment consists of an application and compute resources.\n+          Your cloud environment is unique to this workspace and not shared with other users.\n+        </div>\n+        {/* TODO(RW-5419): Cost estimates go here. */}\n+        <div style={styles.controlSection}>\n+          {/* Recommended runtime: pick from default templates or change the image. */}\n+          <FlexRow style={{justifyContent: 'space-between', marginTop: '.5rem', marginBottom: '1rem'}}>\n+            <h3 style={{...styles.sectionHeader, margin: '0'}}>Custom cloud environment</h3>\n+            <PopupTrigger side='bottom'\n+                          closeOnClick\n+                          content={\n+                            <React.Fragment>\n+                              <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n+                              <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n+                            </React.Fragment>\n+                          }>\n+              <Clickable data-test-id='runtime-presets-menu'\n+                         disabled={true}>\n+                Recommended environments <ClrIcon shape='caret down'/>\n+              </Clickable>\n+            </PopupTrigger>\n+          </FlexRow>\n+          <h3 style={styles.sectionHeader}>Application configuration</h3>\n+          {/* TODO(RW-5413): Populate the image list with server driven options. */}\n+          <Dropdown style={{width: '100%'}}\n+                    data-test-id='runtime-image-dropdown'\n+                    disabled={true}\n+                    options={[runtime.toolDockerImage]}\n+                    value={runtime.toolDockerImage}/>\n+          {/* Runtime customization: change detailed machine configuration options. */}\n+          <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n+          <FlexRow style={{justifyContent: 'space-between'}}>\n+            <div>\n+              <label htmlFor='runtime-cpu'\n+                     style={{marginRight: '.25rem'}}>CPUs</label>\n+              <Dropdown id='runtime-cpu'", "originalCommit": "5390b7f047f755b2479e89da46900bb4fce598c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc3NzI2NQ==", "url": "https://github.com/all-of-us/workbench/pull/4007#discussion_r489777265", "bodyText": "I made some notes in the ticket at a requirement level, I think anything at the code level would be overly speculative at this point. The state management will need to be updated to account for local modifications, so the implementer will be forced to cross this bridge.", "author": "calbach", "createdAt": "2020-09-16T21:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NzY2OA=="}], "type": "inlineReview"}, {"oid": "1d5fbf7b96217fbb6b9dd9394f6e1ef4254e22cd", "url": "https://github.com/all-of-us/workbench/commit/1d5fbf7b96217fbb6b9dd9394f6e1ef4254e22cd", "message": "comments, feedback", "committedDate": "2020-09-16T21:50:13Z", "type": "commit"}]}