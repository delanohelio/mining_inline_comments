{"pr_number": 3262, "pr_title": "[RW-4390][risk=no] Update demographic survey from profile page", "pr_createdAt": "2020-03-17T15:37:50Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3262", "timeline": [{"oid": "a04097422f6972ac90770a7403a1e23017cf1941", "url": "https://github.com/all-of-us/workbench/commit/a04097422f6972ac90770a7403a1e23017cf1941", "message": "update demographic-survey-completion-date", "committedDate": "2020-03-17T15:40:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5OTY0OA==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394299648", "bodyText": "nit: unintentional single-to-double quote changes in these imports? I think our convention is for single-quotes everywhere possible in TS.", "author": "gjuggler", "createdAt": "2020-03-18T12:10:55Z", "path": "ui/src/app/pages/login/account-creation/account-creation-survey.spec.tsx", "diffHunk": "@@ -1,18 +1,14 @@\n-import {mount, ReactWrapper} from 'enzyme';\n-import * as React from 'react';\n+import {mount, ReactWrapper} from \"enzyme\";", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQzMTU1Nw==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394431557", "bodyText": "boooooo lint is supposed to catch this", "author": "als364", "createdAt": "2020-03-18T15:24:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI5OTY0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMwNjE4Nw==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394306187", "bodyText": "nit: add type, profile: Profile", "author": "gjuggler", "createdAt": "2020-03-18T12:23:20Z", "path": "ui/src/app/pages/profile/profile-page.tsx", "diffHunk": "@@ -112,9 +133,24 @@ export const ProfilePage = withUserProfile()(class extends React.Component<\n     }\n   }\n \n+  async saveDemographicSurvey(profile) {", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxMjcwNw==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394312707", "bodyText": "eek! We've been bitten by these hanging TODOs too many times. I'd love to see this resolved in this PR if feasible \u2013 see #3257 for what I did for user creation, it's pretty straightforward if a bit verbose.\nFor handling these types of errors (API error on form submit with user-entered content), I've grown fond of showing an actual error modal. I'd advocate for us to break that modal code out into its own well-documented & tested component, to reduce future effort of displaying error messages. I filed https://precisionmedicineinitiative.atlassian.net/browse/RW-4616 to track creating that core component.", "author": "gjuggler", "createdAt": "2020-03-18T12:35:07Z", "path": "ui/src/app/pages/profile/profile-page.tsx", "diffHunk": "@@ -112,9 +133,24 @@ export const ProfilePage = withUserProfile()(class extends React.Component<\n     }\n   }\n \n+  async saveDemographicSurvey(profile) {\n+    const {profileState: {reload}} = this.props;\n+    this.setState({updating: true});\n+\n+    try {\n+      await profileApi().updateProfile(profile);\n+      await reload();\n+    } catch (e) {\n+      // TODO: We should display some sort of user facing error if update fails.", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNDg5MQ==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394314891", "bodyText": "async nit: I don't think setState returns a promise, so the 'await' is unnecessary. (ref https://reactjs.org/docs/react-component.html#setstate) AFAICT this method can be non-async without any change in behavior.", "author": "gjuggler", "createdAt": "2020-03-18T12:38:56Z", "path": "ui/src/app/pages/profile/profile-page.tsx", "diffHunk": "@@ -353,6 +389,18 @@ export const ProfilePage = withUserProfile()(class extends React.Component<\n               {usdElement(profile.freeTierDollarQuota - profile.freeTierUsage)}\n             </FlexColumn>\n           </FlexRow>}\n+          <div>\n+            <div style={styles.title}>Optional Demographics Survey</div>\n+            <Button\n+                type={'link'}\n+                onClick={async() => {\n+                  if (!profileEdits.demographicSurvey) {\n+                    await this.setState(fp.set(['profileEdits', 'demographicSurvey'], {}));", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQzNzUzOA==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394437538", "bodyText": "setState is definitely async and it definitely returns a promise per the documentation you linked. I've been bitten by this before.", "author": "als364", "createdAt": "2020-03-18T15:32:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNDg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ0OTQzNQ==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394449435", "bodyText": "Can you provide a specific pointer?\nsetState does have what they call an \"async form\" where the caller provides a callback as the second argument (which is probably a source of much confusion in our codebase), but I'm pretty sure the setState method itself does not return a promise.\nPartially verified by ctrl-clicking into a setState call in IntelliJ and seeing the void return type:", "author": "gjuggler", "createdAt": "2020-03-18T15:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNDg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUwNzI2NA==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394507264", "bodyText": "You may optionally pass an object as the first argument to setState() instead of a function:\n\nsetState(stateChange[, callback])\n\nThis performs a shallow merge of stateChange into the new state, e.g., to adjust a shopping cart item quantity:\n\nthis.setState({quantity: 2})\n\nThis form of setState() is also asynchronous, and multiple calls during the same cycle may be batched together.\n\nThis is how we do all our setStates.", "author": "als364", "createdAt": "2020-03-18T17:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNDg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMjIxOQ==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394512219", "bodyText": "Yep \u2013\u00a0I think when they say \"asynchronous\" it's referring to a different 'asynchronous' than https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function.\nThis post seems to get more to my point: https://stackoverflow.com/a/53409805", "author": "gjuggler", "createdAt": "2020-03-18T17:16:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxNDg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1Mjk3MA==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394352970", "bodyText": "This seems to be the place in the code where we say 'if a demographicSurvey object doesn't exist yet, create one'.\nIncluding this business logic in a click handler is an awkward place, since it's somewhat buried in the JSX template and may not be easily noticed by future maintainers.\nMy instinct would be to bump this into a createInitialState method, a la https://github.com/all-of-us/workbench/blob/master/ui/src/app/pages/login/account-creation/account-creation.tsx#L135, which can be called to set the initial 'profileEdits' state property. That way we have a nice top-level method which lets us conditionally populate this nested object.", "author": "gjuggler", "createdAt": "2020-03-18T13:40:34Z", "path": "ui/src/app/pages/profile/profile-page.tsx", "diffHunk": "@@ -353,6 +389,18 @@ export const ProfilePage = withUserProfile()(class extends React.Component<\n               {usdElement(profile.freeTierDollarQuota - profile.freeTierUsage)}\n             </FlexColumn>\n           </FlexRow>}\n+          <div>\n+            <div style={styles.title}>Optional Demographics Survey</div>\n+            <Button\n+                type={'link'}\n+                onClick={async() => {\n+                  if (!profileEdits.demographicSurvey) {", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3NTI3OA==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394375278", "bodyText": "[no action required / potential follow-up]: I've been moving towards having a single form-level 'validate' method, with no parameters, which runs a validate.js check against the entire state object. I think this sets us up better for adding more validation functionality to each form over time. See \n  \n    \n      workbench/ui/src/app/pages/login/account-creation/account-creation-institution.tsx\n    \n    \n         Line 176\n      in\n      0a567f7\n    \n    \n    \n    \n\n        \n          \n           public validate(): {[key: string]: Array<string>} { \n        \n    \n  \n\n for example in a recent PR.\n(That link also demonstrates a reasonable type annotation for the validate.js return value \u2013\u00a0we should bump that into a shared place if we reuse it.)", "author": "gjuggler", "createdAt": "2020-03-18T14:11:51Z", "path": "ui/src/app/pages/profile/demographics-survey.tsx", "diffHunk": "@@ -0,0 +1,276 @@\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {CheckBox, RadioButton} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {TextColumn} from 'app/components/text-column';\n+import {AouTitle} from 'app/components/text-wrappers';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {DropDownSection, Section, TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import colors from 'app/styles/colors';\n+import {reactStyles, toggleIncludes} from 'app/utils';\n+import {serverConfigStore} from 'app/utils/navigation';\n+\n+import {environment} from 'environments/environment';\n+import {Profile} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import ReCAPTCHA from 'react-google-recaptcha';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  checkbox: {height: 17, width: 17, marginTop: '0.15rem'},\n+  checkboxWrapper: {display: 'flex', alignItems: 'flex-start', width: '13rem', marginBottom: '0.5rem'},\n+  checkboxLabel: {\n+    color: colors.primary,\n+    fontFamily: 'Montserrat',\n+    fontSize: '14px',\n+    fontWeight: 400,\n+    paddingLeft: '0.25rem',\n+    paddingRight: '0.5rem'\n+  },\n+  checkboxAreaContainer: {\n+    justifyContent: 'flex-start',\n+    flexWrap: 'wrap',\n+    height: '9rem',\n+    width: '26rem'\n+  }\n+});\n+\n+export interface Props {\n+  profile: Profile;\n+  onPreviousClick?: Function;\n+  onCancelClick?: Function;\n+  onSubmit: Function;\n+  enableCaptcha: boolean;\n+  enablePrevious: boolean;\n+}\n+\n+interface State {\n+  captcha: boolean;\n+  captchaToken: string;\n+  errors: Array<string>;\n+  loading: boolean;\n+  profile: Profile;\n+}\n+\n+export class DemographicSurvey extends React.Component<Props, State> {\n+  private captchaRef = React.createRef<ReCAPTCHA>();\n+  constructor(props: any) {\n+    super(props);\n+    this.state = {\n+      captcha: false,\n+      captchaToken: '',\n+      errors: [],\n+      loading: false,\n+      profile: {...this.props.profile},\n+    };\n+  }\n+\n+  createOptionCheckbox(optionKey: string, optionObject: any) {\n+    const {profile: {demographicSurvey}} = this.props;\n+    const initialValue = demographicSurvey && demographicSurvey[optionKey] && demographicSurvey[optionKey].includes(optionObject.value);\n+\n+    return <CheckBox label={optionObject.label} data-test-id={'checkbox-' + optionObject.value.toString()}\n+                     style={styles.checkbox} key={optionObject.value.toString()}\n+                     checked={initialValue}\n+                     wrapperStyle={styles.checkboxWrapper} labelStyle={styles.checkboxLabel}\n+                     onChange={(value) => this.updateList(optionKey, optionObject.value)}\n+    />;\n+  }\n+\n+  captureCaptchaResponse(token) {\n+    this.setState({captchaToken: token, captcha: true});\n+  }\n+\n+  updateList(key, value) {\n+    // Toggle Includes removes the element if it already exists and adds if not\n+    const attributeList = toggleIncludes(value, this.props.profile.demographicSurvey[key] || []);\n+    this.updateDemographicAttribute(key, attributeList);\n+  }\n+\n+  updateDemographicAttribute(attribute, value) {\n+    this.setState(fp.set(['profile', 'demographicSurvey', attribute], value));\n+  }\n+\n+  validateDemographicSurvey(demographicSurvey) {", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3NjYxMw==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394376613", "bodyText": "The default prefix displayed to users is based on validate.js's interpretation of the validation key (e.g. lgbtqIdentity). This usually ends up being not very user-friendly, so I usually include the full error message in the string by putting a carat '^' in the beginning, e.g. '^LBGTQ identity is too long for our system...'", "author": "gjuggler", "createdAt": "2020-03-18T14:13:31Z", "path": "ui/src/app/pages/profile/demographics-survey.tsx", "diffHunk": "@@ -0,0 +1,276 @@\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {CheckBox, RadioButton} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {TextColumn} from 'app/components/text-column';\n+import {AouTitle} from 'app/components/text-wrappers';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {DropDownSection, Section, TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import colors from 'app/styles/colors';\n+import {reactStyles, toggleIncludes} from 'app/utils';\n+import {serverConfigStore} from 'app/utils/navigation';\n+\n+import {environment} from 'environments/environment';\n+import {Profile} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import ReCAPTCHA from 'react-google-recaptcha';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  checkbox: {height: 17, width: 17, marginTop: '0.15rem'},\n+  checkboxWrapper: {display: 'flex', alignItems: 'flex-start', width: '13rem', marginBottom: '0.5rem'},\n+  checkboxLabel: {\n+    color: colors.primary,\n+    fontFamily: 'Montserrat',\n+    fontSize: '14px',\n+    fontWeight: 400,\n+    paddingLeft: '0.25rem',\n+    paddingRight: '0.5rem'\n+  },\n+  checkboxAreaContainer: {\n+    justifyContent: 'flex-start',\n+    flexWrap: 'wrap',\n+    height: '9rem',\n+    width: '26rem'\n+  }\n+});\n+\n+export interface Props {\n+  profile: Profile;\n+  onPreviousClick?: Function;\n+  onCancelClick?: Function;\n+  onSubmit: Function;\n+  enableCaptcha: boolean;\n+  enablePrevious: boolean;\n+}\n+\n+interface State {\n+  captcha: boolean;\n+  captchaToken: string;\n+  errors: Array<string>;\n+  loading: boolean;\n+  profile: Profile;\n+}\n+\n+export class DemographicSurvey extends React.Component<Props, State> {\n+  private captchaRef = React.createRef<ReCAPTCHA>();\n+  constructor(props: any) {\n+    super(props);\n+    this.state = {\n+      captcha: false,\n+      captchaToken: '',\n+      errors: [],\n+      loading: false,\n+      profile: {...this.props.profile},\n+    };\n+  }\n+\n+  createOptionCheckbox(optionKey: string, optionObject: any) {\n+    const {profile: {demographicSurvey}} = this.props;\n+    const initialValue = demographicSurvey && demographicSurvey[optionKey] && demographicSurvey[optionKey].includes(optionObject.value);\n+\n+    return <CheckBox label={optionObject.label} data-test-id={'checkbox-' + optionObject.value.toString()}\n+                     style={styles.checkbox} key={optionObject.value.toString()}\n+                     checked={initialValue}\n+                     wrapperStyle={styles.checkboxWrapper} labelStyle={styles.checkboxLabel}\n+                     onChange={(value) => this.updateList(optionKey, optionObject.value)}\n+    />;\n+  }\n+\n+  captureCaptchaResponse(token) {\n+    this.setState({captchaToken: token, captcha: true});\n+  }\n+\n+  updateList(key, value) {\n+    // Toggle Includes removes the element if it already exists and adds if not\n+    const attributeList = toggleIncludes(value, this.props.profile.demographicSurvey[key] || []);\n+    this.updateDemographicAttribute(key, attributeList);\n+  }\n+\n+  updateDemographicAttribute(attribute, value) {\n+    this.setState(fp.set(['profile', 'demographicSurvey', attribute], value));\n+  }\n+\n+  validateDemographicSurvey(demographicSurvey) {\n+    const validationCheck = {\n+      lgbtqIdentity: {\n+        length: {\n+          maximum: 255,\n+          tooLong: 'is too long for our system. Please reduce to 255 or fewer characters.'", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3NzMxOQ==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394377319", "bodyText": "type-safety nit: errors is not an array, so it should be more like Object.keys(errors).length > 0", "author": "gjuggler", "createdAt": "2020-03-18T14:14:31Z", "path": "ui/src/app/pages/profile/demographics-survey.tsx", "diffHunk": "@@ -0,0 +1,276 @@\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {CheckBox, RadioButton} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {TextColumn} from 'app/components/text-column';\n+import {AouTitle} from 'app/components/text-wrappers';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {DropDownSection, Section, TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import colors from 'app/styles/colors';\n+import {reactStyles, toggleIncludes} from 'app/utils';\n+import {serverConfigStore} from 'app/utils/navigation';\n+\n+import {environment} from 'environments/environment';\n+import {Profile} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import ReCAPTCHA from 'react-google-recaptcha';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  checkbox: {height: 17, width: 17, marginTop: '0.15rem'},\n+  checkboxWrapper: {display: 'flex', alignItems: 'flex-start', width: '13rem', marginBottom: '0.5rem'},\n+  checkboxLabel: {\n+    color: colors.primary,\n+    fontFamily: 'Montserrat',\n+    fontSize: '14px',\n+    fontWeight: 400,\n+    paddingLeft: '0.25rem',\n+    paddingRight: '0.5rem'\n+  },\n+  checkboxAreaContainer: {\n+    justifyContent: 'flex-start',\n+    flexWrap: 'wrap',\n+    height: '9rem',\n+    width: '26rem'\n+  }\n+});\n+\n+export interface Props {\n+  profile: Profile;\n+  onPreviousClick?: Function;\n+  onCancelClick?: Function;\n+  onSubmit: Function;\n+  enableCaptcha: boolean;\n+  enablePrevious: boolean;\n+}\n+\n+interface State {\n+  captcha: boolean;\n+  captchaToken: string;\n+  errors: Array<string>;\n+  loading: boolean;\n+  profile: Profile;\n+}\n+\n+export class DemographicSurvey extends React.Component<Props, State> {\n+  private captchaRef = React.createRef<ReCAPTCHA>();\n+  constructor(props: any) {\n+    super(props);\n+    this.state = {\n+      captcha: false,\n+      captchaToken: '',\n+      errors: [],\n+      loading: false,\n+      profile: {...this.props.profile},\n+    };\n+  }\n+\n+  createOptionCheckbox(optionKey: string, optionObject: any) {\n+    const {profile: {demographicSurvey}} = this.props;\n+    const initialValue = demographicSurvey && demographicSurvey[optionKey] && demographicSurvey[optionKey].includes(optionObject.value);\n+\n+    return <CheckBox label={optionObject.label} data-test-id={'checkbox-' + optionObject.value.toString()}\n+                     style={styles.checkbox} key={optionObject.value.toString()}\n+                     checked={initialValue}\n+                     wrapperStyle={styles.checkboxWrapper} labelStyle={styles.checkboxLabel}\n+                     onChange={(value) => this.updateList(optionKey, optionObject.value)}\n+    />;\n+  }\n+\n+  captureCaptchaResponse(token) {\n+    this.setState({captchaToken: token, captcha: true});\n+  }\n+\n+  updateList(key, value) {\n+    // Toggle Includes removes the element if it already exists and adds if not\n+    const attributeList = toggleIncludes(value, this.props.profile.demographicSurvey[key] || []);\n+    this.updateDemographicAttribute(key, attributeList);\n+  }\n+\n+  updateDemographicAttribute(attribute, value) {\n+    this.setState(fp.set(['profile', 'demographicSurvey', attribute], value));\n+  }\n+\n+  validateDemographicSurvey(demographicSurvey) {\n+    const validationCheck = {\n+      lgbtqIdentity: {\n+        length: {\n+          maximum: 255,\n+          tooLong: 'is too long for our system. Please reduce to 255 or fewer characters.'\n+        }\n+      },\n+    };\n+    return validate(demographicSurvey, validationCheck);\n+  }\n+\n+  render() {\n+    const {profile: {demographicSurvey}, captcha, captchaToken, loading} = this.state;\n+    const {requireInstitutionalVerification} = serverConfigStore.getValue();\n+\n+    const errors = this.validateDemographicSurvey(demographicSurvey);\n+\n+    return <div style={{marginTop: '1rem', paddingLeft: '3rem', width: '26rem'}}>\n+      <TextColumn>\n+        <div style={{fontSize: 28, fontWeight: 400, marginBottom: '.8rem'}}>Optional Demographics Survey</div>\n+        <div style={{fontSize: 16, marginBottom: '.5rem'}}>\n+          Please complete Step {requireInstitutionalVerification ? '3 of 3' : '2 of 2'}\n+        </div>\n+        <div>\n+          <label style={{fontWeight: 600}}>Answering these questions is optional.</label> <AouTitle/> will\n+          use this information to measure our success at reaching diverse researchers.\n+          We will not share your individual answers.\n+        </div>\n+      </TextColumn>\n+\n+      {/*Race section*/}\n+      <Section header='Race' subHeader='Select all that apply'>\n+        <FlexColumn style={styles.checkboxAreaContainer}>\n+          {AccountCreationOptions.race.map((race) => {\n+            return this.createOptionCheckbox('race', race);\n+          })}\n+        </FlexColumn>\n+      </Section>\n+\n+      {/*Ethnicity section*/}\n+      <DropDownSection data-test-id='dropdown-ethnicity'\n+                       header='Ethnicity' options={AccountCreationOptions.ethnicity}\n+                       value={!!demographicSurvey ? demographicSurvey.ethnicity : null}\n+                       onChange={(e) => this.updateDemographicAttribute('ethnicity', e)}/>\n+\n+      {/*Gender Identity section*/}\n+      <Section header='Gender Identity' subHeader='Select all that apply'>\n+        <FlexColumn style={{...styles.checkboxAreaContainer, height: '5rem'}}>\n+          {AccountCreationOptions.genderIdentity.map((genderIdentity) => {\n+            return this.createOptionCheckbox('genderIdentityList', genderIdentity);\n+          })}\n+        </FlexColumn>\n+      </Section>\n+\n+      <Section header='Do you identify as lesbian, gay, bisexual, transgender, queer (LGBTQ),\n+or another sexual and/or gender minority?'>\n+        <FlexColumn>\n+          <FlexRow style={{alignItems: 'baseline'}}>\n+            <RadioButton data-test-id='radio-lgbtq-yes' id='radio-lgbtq-yes' onChange={\n+              (e) => this.updateDemographicAttribute('identifiesAsLgbtq', true)}\n+                         checked={!!demographicSurvey ? demographicSurvey.identifiesAsLgbtq === true : false}\n+                         style={{marginRight: '0.5rem'}}/>\n+            <label htmlFor='radio-lgbtq-yes' style={{paddingRight: '3rem', color: colors.primary}}>Yes</label>\n+          </FlexRow>\n+          <FlexRow style={{alignItems: 'baseline'}}>\n+            <RadioButton data-test-id='radio-lgbtq-no' id='radio-lgbtq-no' onChange={(e) => this.updateDemographicAttribute('identifiesAsLgbtq', false)}\n+                         checked={!!demographicSurvey ? demographicSurvey.identifiesAsLgbtq === false : false}\n+                         style={{marginRight: '0.5rem'}}/>\n+            <label htmlFor='radio-lgbtq-no' style={{color: colors.primary}}>No</label>\n+          </FlexRow>\n+        </FlexColumn>\n+        <label></label>\n+        <TextInputWithLabel labelText='If yes, please tell us about your LGBTQ+ identity'\n+                            value={!!demographicSurvey ? demographicSurvey.lgbtqIdentity : ''} inputName='lgbtqIdentity'\n+                            containerStyle={{width: '26rem', marginTop: '0.5rem'}} inputStyle={{width: '26rem'}}\n+                            onChange={(value) => this.updateDemographicAttribute('lgbtqIdentity', value)}\n+                            disabled={!!demographicSurvey ? !demographicSurvey.identifiesAsLgbtq : true}/>\n+      </Section>\n+\n+      {/*Sex at birth section*/}\n+      <Section header='Sex at birth' subHeader='Select all that apply'>\n+        <FlexColumn style={{...styles.checkboxAreaContainer, height: '5rem'}}>\n+          {AccountCreationOptions.sexAtBirth.map((sexAtBirth) => {\n+            return this.createOptionCheckbox('sexAtBirth', sexAtBirth);\n+          })}\n+        </FlexColumn>\n+      </Section>\n+\n+      {/*Year of birth section*/}\n+      <DropDownSection header='Year of Birth' options={AccountCreationOptions.Years}\n+                       value={!!demographicSurvey ? demographicSurvey.yearOfBirth : null}\n+                       onChange={(e) => this.updateDemographicAttribute('yearOfBirth', e)}\n+      />\n+      {/*Disability section*/}\n+      <Section header='Do you have a physical or cognitive disability?'>\n+        <FlexColumn>\n+          <FlexRow style={{alignItems: 'baseline'}}>\n+            <RadioButton id='radio-disability-yes' onChange={\n+              (e) => this.updateDemographicAttribute('disability', true)}\n+                         checked={!!demographicSurvey ? demographicSurvey.disability === true : false}\n+                         style={{marginRight: '0.5rem'}}/>\n+            <label htmlFor='radio-disability-yes' style={{paddingRight: '3rem', color: colors.primary}}>Yes</label>\n+          </FlexRow>\n+          <FlexRow style={{alignItems: 'baseline'}}>\n+            <RadioButton id='radio-disability-no' onChange={(e) => this.updateDemographicAttribute('disability', false)}\n+                         checked={!!demographicSurvey ? demographicSurvey.disability === false : false}\n+                         style={{marginRight: '0.5rem'}}/>\n+            <label htmlFor='radio-disability-no' style={{color: colors.primary}}>No</label>\n+          </FlexRow>\n+        </FlexColumn>\n+      </Section>\n+      {/*Education section*/}\n+      <DropDownSection header='Highest Level of Education Completed'\n+                       options={AccountCreationOptions.levelOfEducation}\n+                       value={!!demographicSurvey ? demographicSurvey.education : null}\n+                       onChange={\n+                         (e) => this.updateDemographicAttribute('education', e)}/>\n+      {environment.enableCaptcha && this.props.enableCaptcha && <div style={{paddingTop: '1rem'}}>\n+        <ReCAPTCHA sitekey={environment.captchaSiteKey}\n+                   ref = {this.captchaRef}\n+                   onChange={(value) => this.captureCaptchaResponse(value)}/>\n+      </div>}\n+      <FormSection style={{paddingBottom: '1rem'}}>\n+        {this.props.enablePrevious && <Button type='secondary' style={{marginRight: '1rem'}} disabled={loading}\n+                onClick={() => this.props.onPreviousClick(this.state.profile)}>\n+          Previous\n+        </Button>}\n+        {!this.props.enablePrevious && <Button\n+            type={'secondary'}\n+            style={{marginRight: '1rem'}}\n+            disabled={loading}\n+            onClick={() => this.props.onCancelClick(this.state.profile)}>\n+          Cancel\n+        </Button>}\n+        <TooltipTrigger content={errors && <React.Fragment>\n+          <div>Please review the following: </div>\n+          <ul>\n+            {Object.keys(errors).map((key) => <li key={errors[key][0]}>{errors[key][0]}</li>)}\n+          </ul>\n+        </React.Fragment>}>\n+          <Button type='primary'\n+                  disabled={\n+                    loading\n+                    || (errors && errors.length > 0)", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3ODE2OA==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394378168", "bodyText": "Warning: there's going to be some rebase pain when updating to account for my PR #3257", "author": "gjuggler", "createdAt": "2020-03-18T14:15:43Z", "path": "ui/src/app/pages/profile/demographics-survey.tsx", "diffHunk": "@@ -0,0 +1,276 @@\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {CheckBox, RadioButton} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {TextColumn} from 'app/components/text-column';\n+import {AouTitle} from 'app/components/text-wrappers';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {DropDownSection, Section, TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import colors from 'app/styles/colors';\n+import {reactStyles, toggleIncludes} from 'app/utils';\n+import {serverConfigStore} from 'app/utils/navigation';\n+\n+import {environment} from 'environments/environment';\n+import {Profile} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import ReCAPTCHA from 'react-google-recaptcha';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  checkbox: {height: 17, width: 17, marginTop: '0.15rem'},\n+  checkboxWrapper: {display: 'flex', alignItems: 'flex-start', width: '13rem', marginBottom: '0.5rem'},\n+  checkboxLabel: {\n+    color: colors.primary,\n+    fontFamily: 'Montserrat',\n+    fontSize: '14px',\n+    fontWeight: 400,\n+    paddingLeft: '0.25rem',\n+    paddingRight: '0.5rem'\n+  },\n+  checkboxAreaContainer: {\n+    justifyContent: 'flex-start',\n+    flexWrap: 'wrap',\n+    height: '9rem',\n+    width: '26rem'\n+  }\n+});\n+\n+export interface Props {\n+  profile: Profile;\n+  onPreviousClick?: Function;\n+  onCancelClick?: Function;\n+  onSubmit: Function;\n+  enableCaptcha: boolean;\n+  enablePrevious: boolean;\n+}\n+\n+interface State {\n+  captcha: boolean;\n+  captchaToken: string;\n+  errors: Array<string>;\n+  loading: boolean;\n+  profile: Profile;\n+}\n+\n+export class DemographicSurvey extends React.Component<Props, State> {\n+  private captchaRef = React.createRef<ReCAPTCHA>();\n+  constructor(props: any) {\n+    super(props);\n+    this.state = {\n+      captcha: false,\n+      captchaToken: '',\n+      errors: [],\n+      loading: false,\n+      profile: {...this.props.profile},\n+    };\n+  }\n+\n+  createOptionCheckbox(optionKey: string, optionObject: any) {\n+    const {profile: {demographicSurvey}} = this.props;\n+    const initialValue = demographicSurvey && demographicSurvey[optionKey] && demographicSurvey[optionKey].includes(optionObject.value);\n+\n+    return <CheckBox label={optionObject.label} data-test-id={'checkbox-' + optionObject.value.toString()}\n+                     style={styles.checkbox} key={optionObject.value.toString()}\n+                     checked={initialValue}\n+                     wrapperStyle={styles.checkboxWrapper} labelStyle={styles.checkboxLabel}\n+                     onChange={(value) => this.updateList(optionKey, optionObject.value)}\n+    />;\n+  }\n+\n+  captureCaptchaResponse(token) {\n+    this.setState({captchaToken: token, captcha: true});\n+  }\n+\n+  updateList(key, value) {\n+    // Toggle Includes removes the element if it already exists and adds if not\n+    const attributeList = toggleIncludes(value, this.props.profile.demographicSurvey[key] || []);\n+    this.updateDemographicAttribute(key, attributeList);\n+  }\n+\n+  updateDemographicAttribute(attribute, value) {\n+    this.setState(fp.set(['profile', 'demographicSurvey', attribute], value));\n+  }\n+\n+  validateDemographicSurvey(demographicSurvey) {\n+    const validationCheck = {\n+      lgbtqIdentity: {\n+        length: {\n+          maximum: 255,\n+          tooLong: 'is too long for our system. Please reduce to 255 or fewer characters.'\n+        }\n+      },\n+    };\n+    return validate(demographicSurvey, validationCheck);\n+  }\n+\n+  render() {\n+    const {profile: {demographicSurvey}, captcha, captchaToken, loading} = this.state;\n+    const {requireInstitutionalVerification} = serverConfigStore.getValue();\n+\n+    const errors = this.validateDemographicSurvey(demographicSurvey);\n+\n+    return <div style={{marginTop: '1rem', paddingLeft: '3rem', width: '26rem'}}>\n+      <TextColumn>\n+        <div style={{fontSize: 28, fontWeight: 400, marginBottom: '.8rem'}}>Optional Demographics Survey</div>\n+        <div style={{fontSize: 16, marginBottom: '.5rem'}}>\n+          Please complete Step {requireInstitutionalVerification ? '3 of 3' : '2 of 2'}\n+        </div>\n+        <div>\n+          <label style={{fontWeight: 600}}>Answering these questions is optional.</label> <AouTitle/> will\n+          use this information to measure our success at reaching diverse researchers.\n+          We will not share your individual answers.\n+        </div>\n+      </TextColumn>\n+\n+      {/*Race section*/}\n+      <Section header='Race' subHeader='Select all that apply'>\n+        <FlexColumn style={styles.checkboxAreaContainer}>\n+          {AccountCreationOptions.race.map((race) => {\n+            return this.createOptionCheckbox('race', race);\n+          })}\n+        </FlexColumn>\n+      </Section>\n+\n+      {/*Ethnicity section*/}\n+      <DropDownSection data-test-id='dropdown-ethnicity'\n+                       header='Ethnicity' options={AccountCreationOptions.ethnicity}\n+                       value={!!demographicSurvey ? demographicSurvey.ethnicity : null}\n+                       onChange={(e) => this.updateDemographicAttribute('ethnicity', e)}/>\n+\n+      {/*Gender Identity section*/}\n+      <Section header='Gender Identity' subHeader='Select all that apply'>\n+        <FlexColumn style={{...styles.checkboxAreaContainer, height: '5rem'}}>\n+          {AccountCreationOptions.genderIdentity.map((genderIdentity) => {\n+            return this.createOptionCheckbox('genderIdentityList', genderIdentity);\n+          })}\n+        </FlexColumn>\n+      </Section>\n+\n+      <Section header='Do you identify as lesbian, gay, bisexual, transgender, queer (LGBTQ),\n+or another sexual and/or gender minority?'>\n+        <FlexColumn>\n+          <FlexRow style={{alignItems: 'baseline'}}>\n+            <RadioButton data-test-id='radio-lgbtq-yes' id='radio-lgbtq-yes' onChange={\n+              (e) => this.updateDemographicAttribute('identifiesAsLgbtq', true)}\n+                         checked={!!demographicSurvey ? demographicSurvey.identifiesAsLgbtq === true : false}\n+                         style={{marginRight: '0.5rem'}}/>\n+            <label htmlFor='radio-lgbtq-yes' style={{paddingRight: '3rem', color: colors.primary}}>Yes</label>\n+          </FlexRow>\n+          <FlexRow style={{alignItems: 'baseline'}}>\n+            <RadioButton data-test-id='radio-lgbtq-no' id='radio-lgbtq-no' onChange={(e) => this.updateDemographicAttribute('identifiesAsLgbtq', false)}\n+                         checked={!!demographicSurvey ? demographicSurvey.identifiesAsLgbtq === false : false}\n+                         style={{marginRight: '0.5rem'}}/>\n+            <label htmlFor='radio-lgbtq-no' style={{color: colors.primary}}>No</label>\n+          </FlexRow>\n+        </FlexColumn>\n+        <label></label>\n+        <TextInputWithLabel labelText='If yes, please tell us about your LGBTQ+ identity'\n+                            value={!!demographicSurvey ? demographicSurvey.lgbtqIdentity : ''} inputName='lgbtqIdentity'\n+                            containerStyle={{width: '26rem', marginTop: '0.5rem'}} inputStyle={{width: '26rem'}}\n+                            onChange={(value) => this.updateDemographicAttribute('lgbtqIdentity', value)}\n+                            disabled={!!demographicSurvey ? !demographicSurvey.identifiesAsLgbtq : true}/>\n+      </Section>\n+\n+      {/*Sex at birth section*/}\n+      <Section header='Sex at birth' subHeader='Select all that apply'>\n+        <FlexColumn style={{...styles.checkboxAreaContainer, height: '5rem'}}>\n+          {AccountCreationOptions.sexAtBirth.map((sexAtBirth) => {\n+            return this.createOptionCheckbox('sexAtBirth', sexAtBirth);\n+          })}\n+        </FlexColumn>\n+      </Section>\n+\n+      {/*Year of birth section*/}\n+      <DropDownSection header='Year of Birth' options={AccountCreationOptions.Years}\n+                       value={!!demographicSurvey ? demographicSurvey.yearOfBirth : null}\n+                       onChange={(e) => this.updateDemographicAttribute('yearOfBirth', e)}\n+      />\n+      {/*Disability section*/}\n+      <Section header='Do you have a physical or cognitive disability?'>\n+        <FlexColumn>\n+          <FlexRow style={{alignItems: 'baseline'}}>\n+            <RadioButton id='radio-disability-yes' onChange={\n+              (e) => this.updateDemographicAttribute('disability', true)}\n+                         checked={!!demographicSurvey ? demographicSurvey.disability === true : false}\n+                         style={{marginRight: '0.5rem'}}/>\n+            <label htmlFor='radio-disability-yes' style={{paddingRight: '3rem', color: colors.primary}}>Yes</label>\n+          </FlexRow>\n+          <FlexRow style={{alignItems: 'baseline'}}>\n+            <RadioButton id='radio-disability-no' onChange={(e) => this.updateDemographicAttribute('disability', false)}\n+                         checked={!!demographicSurvey ? demographicSurvey.disability === false : false}\n+                         style={{marginRight: '0.5rem'}}/>\n+            <label htmlFor='radio-disability-no' style={{color: colors.primary}}>No</label>\n+          </FlexRow>\n+        </FlexColumn>\n+      </Section>\n+      {/*Education section*/}\n+      <DropDownSection header='Highest Level of Education Completed'\n+                       options={AccountCreationOptions.levelOfEducation}\n+                       value={!!demographicSurvey ? demographicSurvey.education : null}\n+                       onChange={\n+                         (e) => this.updateDemographicAttribute('education', e)}/>\n+      {environment.enableCaptcha && this.props.enableCaptcha && <div style={{paddingTop: '1rem'}}>\n+        <ReCAPTCHA sitekey={environment.captchaSiteKey}\n+                   ref = {this.captchaRef}\n+                   onChange={(value) => this.captureCaptchaResponse(value)}/>\n+      </div>}\n+      <FormSection style={{paddingBottom: '1rem'}}>\n+        {this.props.enablePrevious && <Button type='secondary' style={{marginRight: '1rem'}} disabled={loading}\n+                onClick={() => this.props.onPreviousClick(this.state.profile)}>\n+          Previous\n+        </Button>}\n+        {!this.props.enablePrevious && <Button\n+            type={'secondary'}\n+            style={{marginRight: '1rem'}}\n+            disabled={loading}\n+            onClick={() => this.props.onCancelClick(this.state.profile)}>\n+          Cancel\n+        </Button>}\n+        <TooltipTrigger content={errors && <React.Fragment>\n+          <div>Please review the following: </div>\n+          <ul>\n+            {Object.keys(errors).map((key) => <li key={errors[key][0]}>{errors[key][0]}</li>)}\n+          </ul>\n+        </React.Fragment>}>\n+          <Button type='primary'\n+                  disabled={\n+                    loading\n+                    || (errors && errors.length > 0)\n+                    || (!environment.enableCaptcha && !this.props.enableCaptcha && !captcha)\n+                  }\n+                  onClick={async() => {\n+                    this.setState({loading: true});\n+                    try {\n+                      const profile = await this.props.onSubmit(this.state.profile, captchaToken);\n+                      // If the submit fails, then profile is null, and the try will apparently not\n+                      // always break in time to prevent these next lines from executing. so we\n+                      // null-check and don't null out the profile if it doesn't exist.\n+                      if (!!profile) {\n+                        this.setState({profile: profile, loading: false});\n+                      } else {\n+                        this.setState({loading: false});\n+                      }\n+                    } catch (error) {\n+                      // TODO: we need to show some user-facing error message when create account fails.", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQzNTE5MQ==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394435191", "bodyText": "\ud83d\ude1e", "author": "als364", "createdAt": "2020-03-18T15:29:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3ODE2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5MTEwNg==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394391106", "bodyText": "A few issues with the props structure here:\n\nNaming nit: use of the term \"state\" within a prop is highly confusing.\nNaming nit: in places where we take an input prop and basically clone it into our state, I've taken to calling the prop 'initialFoo' and the state either 'foo' or 'currentFoo' for clarity. Your call on whether such a change is worthwhile here.\nI don't think we typically use aggressive nesting in props or state like this. Prefer flattening these into two individual top-level props.\nWhat is the intent of 'reload'? Props is effectively the external-facing API of a component, so for things like this it's worth adding a comment describing the intended use. See https://github.com/all-of-us/workbench/blob/master/ui/src/app/pages/login/account-creation/account-creation-tos.tsx#L38 for what I think is a reasonable example of props documentation.", "author": "gjuggler", "createdAt": "2020-03-18T14:32:25Z", "path": "ui/src/app/pages/profile/profile-page.tsx", "diffHunk": "@@ -69,9 +76,22 @@ const validators = {\n   areaOfResearch: required,\n };\n \n+interface ProfilePageProps {\n+  profileState: {", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ0NDU4NA==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394444584", "bodyText": "I think this is like this because we lump them together in the userProfileStore. I don't know enough about how we do global state to know how to disentangle that on the top of my head. I didn't create these - just pulled them out of inline props / state.", "author": "als364", "createdAt": "2020-03-18T15:41:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5MTEwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1MDc0NA==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394450744", "bodyText": "Ah \u2013 I didn't really notice this was just adding types to existing code. Feel free to punt on this to whatever extent you'd like. It would probably be a nice cleanup, but I don't want to create huge amounts of unnecessary effort.", "author": "gjuggler", "createdAt": "2020-03-18T15:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5MTEwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5MTcwNg==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394391706", "bodyText": "nit: please don't use untyped Function \u2013\u00a0prefer something like: \"() => Promise\" to give Typescript more structure around expected params and return type. (I include Promise since usage of this function below includes an 'await' prefix, which suggests we're expecting an async function. Unclear if that's actually the case though.\n^^^ I'd support making this part of the style guide.", "author": "gjuggler", "createdAt": "2020-03-18T14:33:09Z", "path": "ui/src/app/pages/profile/profile-page.tsx", "diffHunk": "@@ -69,9 +76,22 @@ const validators = {\n   areaOfResearch: required,\n };\n \n+interface ProfilePageProps {\n+  profileState: {\n+    profile: Profile;\n+    reload: Function;", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY0NTQ5NQ==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394645495", "bodyText": "This is part of the problem, but: I don't even know what the signature of this thing is supposed to be...", "author": "als364", "createdAt": "2020-03-18T21:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5MTcwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM5MzA3OQ==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394393079", "bodyText": "What is the distinction between these two 'updating' state properties? Worth a comment to help readers distinguish between the two without having to trawl the full class.", "author": "gjuggler", "createdAt": "2020-03-18T14:34:55Z", "path": "ui/src/app/pages/profile/profile-page.tsx", "diffHunk": "@@ -69,9 +76,22 @@ const validators = {\n   areaOfResearch: required,\n };\n \n+interface ProfilePageProps {\n+  profileState: {\n+    profile: Profile;\n+    reload: Function;\n+  };\n+}\n+\n+interface ProfilePageState {\n+  profileEdits: Profile;\n+  updating: boolean;", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwMDU1Mg==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394400552", "bodyText": "Naming nit: similar to above, I'd prefer either 'profile' or 'currentProfile' here. I don't feel strongly though \u2013\u00a0profileEdits feels equivalently clear, but either of the alternatives may align better with other classes.", "author": "gjuggler", "createdAt": "2020-03-18T14:44:41Z", "path": "ui/src/app/pages/profile/profile-page.tsx", "diffHunk": "@@ -69,9 +76,22 @@ const validators = {\n   areaOfResearch: required,\n };\n \n+interface ProfilePageProps {\n+  profileState: {\n+    profile: Profile;\n+    reload: Function;\n+  };\n+}\n+\n+interface ProfilePageState {\n+  profileEdits: Profile;", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwNjM5MA==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394406390", "bodyText": "async seems unnecessary here.", "author": "gjuggler", "createdAt": "2020-03-18T14:52:20Z", "path": "ui/src/app/pages/profile/profile-page.tsx", "diffHunk": "@@ -419,8 +467,21 @@ export const ProfilePage = withUserProfile()(class extends React.Component<\n             </a>\n           </ProfileRegistrationStepStatus>}\n         </div>\n-\n       </div>\n+      {updatingSurvey && <Modal width={850}>\n+        <DemographicSurvey\n+            profile={profileEdits}\n+            onCancelClick={() => {\n+              this.setState({updatingSurvey: false});\n+            }}\n+            onSubmit={async(profileWithUpdatedDemographicSurvey, captchaToken) => {", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwNzE1NQ==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394407155", "bodyText": "Naming nit: the class is DemographicSurvey (singular), but the file is demographics-survey (plural). Please resolve one way or the other.", "author": "gjuggler", "createdAt": "2020-03-18T14:53:15Z", "path": "ui/src/app/pages/profile/demographics-survey.tsx", "diffHunk": "@@ -0,0 +1,276 @@\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {CheckBox, RadioButton} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {TextColumn} from 'app/components/text-column';\n+import {AouTitle} from 'app/components/text-wrappers';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {DropDownSection, Section, TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import colors from 'app/styles/colors';\n+import {reactStyles, toggleIncludes} from 'app/utils';\n+import {serverConfigStore} from 'app/utils/navigation';\n+\n+import {environment} from 'environments/environment';\n+import {Profile} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import ReCAPTCHA from 'react-google-recaptcha';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  checkbox: {height: 17, width: 17, marginTop: '0.15rem'},\n+  checkboxWrapper: {display: 'flex', alignItems: 'flex-start', width: '13rem', marginBottom: '0.5rem'},\n+  checkboxLabel: {\n+    color: colors.primary,\n+    fontFamily: 'Montserrat',\n+    fontSize: '14px',\n+    fontWeight: 400,\n+    paddingLeft: '0.25rem',\n+    paddingRight: '0.5rem'\n+  },\n+  checkboxAreaContainer: {\n+    justifyContent: 'flex-start',\n+    flexWrap: 'wrap',\n+    height: '9rem',\n+    width: '26rem'\n+  }\n+});\n+\n+export interface Props {\n+  profile: Profile;\n+  onPreviousClick?: Function;\n+  onCancelClick?: Function;\n+  onSubmit: Function;\n+  enableCaptcha: boolean;\n+  enablePrevious: boolean;\n+}\n+\n+interface State {\n+  captcha: boolean;\n+  captchaToken: string;\n+  errors: Array<string>;\n+  loading: boolean;\n+  profile: Profile;\n+}\n+\n+export class DemographicSurvey extends React.Component<Props, State> {", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwNzYyNQ==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394407625", "bodyText": "Same comment about non-typed Function annotations. Please declare parameters and return type for each.", "author": "gjuggler", "createdAt": "2020-03-18T14:53:48Z", "path": "ui/src/app/pages/profile/demographics-survey.tsx", "diffHunk": "@@ -0,0 +1,276 @@\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {CheckBox, RadioButton} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {TextColumn} from 'app/components/text-column';\n+import {AouTitle} from 'app/components/text-wrappers';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {DropDownSection, Section, TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import colors from 'app/styles/colors';\n+import {reactStyles, toggleIncludes} from 'app/utils';\n+import {serverConfigStore} from 'app/utils/navigation';\n+\n+import {environment} from 'environments/environment';\n+import {Profile} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import ReCAPTCHA from 'react-google-recaptcha';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  checkbox: {height: 17, width: 17, marginTop: '0.15rem'},\n+  checkboxWrapper: {display: 'flex', alignItems: 'flex-start', width: '13rem', marginBottom: '0.5rem'},\n+  checkboxLabel: {\n+    color: colors.primary,\n+    fontFamily: 'Montserrat',\n+    fontSize: '14px',\n+    fontWeight: 400,\n+    paddingLeft: '0.25rem',\n+    paddingRight: '0.5rem'\n+  },\n+  checkboxAreaContainer: {\n+    justifyContent: 'flex-start',\n+    flexWrap: 'wrap',\n+    height: '9rem',\n+    width: '26rem'\n+  }\n+});\n+\n+export interface Props {\n+  profile: Profile;\n+  onPreviousClick?: Function;", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxMDQwNw==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394410407", "bodyText": "nit: probably worth commenting that this needs to be non-null if enablePrevious is true. (I think this is the case based on my reading of the code.)", "author": "gjuggler", "createdAt": "2020-03-18T14:57:24Z", "path": "ui/src/app/pages/profile/demographics-survey.tsx", "diffHunk": "@@ -0,0 +1,276 @@\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {CheckBox, RadioButton} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {TextColumn} from 'app/components/text-column';\n+import {AouTitle} from 'app/components/text-wrappers';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {DropDownSection, Section, TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import colors from 'app/styles/colors';\n+import {reactStyles, toggleIncludes} from 'app/utils';\n+import {serverConfigStore} from 'app/utils/navigation';\n+\n+import {environment} from 'environments/environment';\n+import {Profile} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import ReCAPTCHA from 'react-google-recaptcha';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  checkbox: {height: 17, width: 17, marginTop: '0.15rem'},\n+  checkboxWrapper: {display: 'flex', alignItems: 'flex-start', width: '13rem', marginBottom: '0.5rem'},\n+  checkboxLabel: {\n+    color: colors.primary,\n+    fontFamily: 'Montserrat',\n+    fontSize: '14px',\n+    fontWeight: 400,\n+    paddingLeft: '0.25rem',\n+    paddingRight: '0.5rem'\n+  },\n+  checkboxAreaContainer: {\n+    justifyContent: 'flex-start',\n+    flexWrap: 'wrap',\n+    height: '9rem',\n+    width: '26rem'\n+  }\n+});\n+\n+export interface Props {\n+  profile: Profile;\n+  onPreviousClick?: Function;", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQzMzQ4MA==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394433480", "bodyText": "this is true, I'll clarify", "author": "als364", "createdAt": "2020-03-18T15:27:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxMDQwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxMDcwMA==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394410700", "bodyText": "AFAICT this state prop is unused \u2013\u00a0please remove if so.", "author": "gjuggler", "createdAt": "2020-03-18T14:57:49Z", "path": "ui/src/app/pages/profile/demographics-survey.tsx", "diffHunk": "@@ -0,0 +1,276 @@\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {CheckBox, RadioButton} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {TextColumn} from 'app/components/text-column';\n+import {AouTitle} from 'app/components/text-wrappers';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {DropDownSection, Section, TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import colors from 'app/styles/colors';\n+import {reactStyles, toggleIncludes} from 'app/utils';\n+import {serverConfigStore} from 'app/utils/navigation';\n+\n+import {environment} from 'environments/environment';\n+import {Profile} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import ReCAPTCHA from 'react-google-recaptcha';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  checkbox: {height: 17, width: 17, marginTop: '0.15rem'},\n+  checkboxWrapper: {display: 'flex', alignItems: 'flex-start', width: '13rem', marginBottom: '0.5rem'},\n+  checkboxLabel: {\n+    color: colors.primary,\n+    fontFamily: 'Montserrat',\n+    fontSize: '14px',\n+    fontWeight: 400,\n+    paddingLeft: '0.25rem',\n+    paddingRight: '0.5rem'\n+  },\n+  checkboxAreaContainer: {\n+    justifyContent: 'flex-start',\n+    flexWrap: 'wrap',\n+    height: '9rem',\n+    width: '26rem'\n+  }\n+});\n+\n+export interface Props {\n+  profile: Profile;\n+  onPreviousClick?: Function;\n+  onCancelClick?: Function;\n+  onSubmit: Function;\n+  enableCaptcha: boolean;\n+  enablePrevious: boolean;\n+}\n+\n+interface State {\n+  captcha: boolean;\n+  captchaToken: string;\n+  errors: Array<string>;", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxNDA1Mw==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394414053", "bodyText": "My understanding of this code is that the modal will close first, then the API request to save the updated profile will be sent? If we want to have a chance to handle an API error before losing the user's input, we should probably wait to hide the modal until we've received a successful API response.", "author": "gjuggler", "createdAt": "2020-03-18T15:02:02Z", "path": "ui/src/app/pages/profile/profile-page.tsx", "diffHunk": "@@ -419,8 +467,21 @@ export const ProfilePage = withUserProfile()(class extends React.Component<\n             </a>\n           </ProfileRegistrationStepStatus>}\n         </div>\n-\n       </div>\n+      {updatingSurvey && <Modal width={850}>\n+        <DemographicSurvey\n+            profile={profileEdits}\n+            onCancelClick={() => {\n+              this.setState({updatingSurvey: false});\n+            }}\n+            onSubmit={async(profileWithUpdatedDemographicSurvey, captchaToken) => {\n+              this.setState({updatingSurvey: false});", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQzOTAyMA==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394439020", "bodyText": "good call.", "author": "als364", "createdAt": "2020-03-18T15:34:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxNDA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1ODYxMQ==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394658611", "bodyText": "alright, I'm going to have the parent handle this so it can do a bunch of z-indexes.", "author": "als364", "createdAt": "2020-03-18T21:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxNDA1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQyNDg4MA==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r394424880", "bodyText": "For any PR, I usually flag any files with notable changes but no additional unit tests.\nAre there any new tests that might be worth adding to profile-page.spec? Given that most of the new functionality is well-encapsulated by demographics-survey, it might be a good use case for Enzyme shallow-rendering, just to test / verify that we've correctly hooked up the component callbacks and are handling API responses, etc.", "author": "gjuggler", "createdAt": "2020-03-18T15:16:04Z", "path": "ui/src/app/pages/profile/profile-page.tsx", "diffHunk": "@@ -8,10 +8,12 @@ import {Button, Clickable} from 'app/components/buttons';\n import { FlexColumn, FlexRow } from 'app/components/flex';", "originalCommit": "80eb6e062fd0b4e014cbec29bc7a58ef3ca4fe51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0MDczNg==", "url": "https://github.com/all-of-us/workbench/pull/3262#discussion_r395640736", "bodyText": "I have now added tests", "author": "als364", "createdAt": "2020-03-20T13:37:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQyNDg4MA=="}], "type": "inlineReview"}, {"oid": "d218fbd2bb2070d27f852683e2b6a809d0b8d7ab", "url": "https://github.com/all-of-us/workbench/commit/d218fbd2bb2070d27f852683e2b6a809d0b8d7ab", "message": "backend", "committedDate": "2020-03-20T13:28:56Z", "type": "commit"}, {"oid": "ce736c5f6e659fd3db0c086399367f50753c76a6", "url": "https://github.com/all-of-us/workbench/commit/ce736c5f6e659fd3db0c086399367f50753c76a6", "message": "factor out demographic survey", "committedDate": "2020-03-20T13:28:56Z", "type": "commit"}, {"oid": "816a3f693ba3ecc15efe2a3f1fef94853b762fff", "url": "https://github.com/all-of-us/workbench/commit/816a3f693ba3ecc15efe2a3f1fef94853b762fff", "message": "shelving", "committedDate": "2020-03-20T13:28:56Z", "type": "commit"}, {"oid": "7e2a46f136ee76549044a0dc581ea1514a44a1d7", "url": "https://github.com/all-of-us/workbench/commit/7e2a46f136ee76549044a0dc581ea1514a44a1d7", "message": "it works", "committedDate": "2020-03-20T13:28:56Z", "type": "commit"}, {"oid": "cc244010e4d6c5999cc36e7a03461c3715a61779", "url": "https://github.com/all-of-us/workbench/commit/cc244010e4d6c5999cc36e7a03461c3715a61779", "message": "fixed spinner", "committedDate": "2020-03-20T13:28:56Z", "type": "commit"}, {"oid": "bdcc100bf4135553bc2bd62d91a0e2bc19ee8f5a", "url": "https://github.com/all-of-us/workbench/commit/bdcc100bf4135553bc2bd62d91a0e2bc19ee8f5a", "message": "no unnecessary await", "committedDate": "2020-03-20T13:28:56Z", "type": "commit"}, {"oid": "b2bb27d98d170243be988df2e6750ec0912733d4", "url": "https://github.com/all-of-us/workbench/commit/b2bb27d98d170243be988df2e6750ec0912733d4", "message": "update demographic-survey-completion-date", "committedDate": "2020-03-20T13:28:56Z", "type": "commit"}, {"oid": "34bb64f821446fc43b465031f62375429c80de0c", "url": "https://github.com/all-of-us/workbench/commit/34bb64f821446fc43b465031f62375429c80de0c", "message": "lint", "committedDate": "2020-03-20T13:28:57Z", "type": "commit"}, {"oid": "bb9eaf2319a66d100fd8446ea3489c0fbc666650", "url": "https://github.com/all-of-us/workbench/commit/bb9eaf2319a66d100fd8446ea3489c0fbc666650", "message": "spotless", "committedDate": "2020-03-20T13:28:57Z", "type": "commit"}, {"oid": "05c2719bfdc0b2bc929f61716ac311d666ffb780", "url": "https://github.com/all-of-us/workbench/commit/05c2719bfdc0b2bc929f61716ac311d666ffb780", "message": "fix tests", "committedDate": "2020-03-20T13:28:57Z", "type": "commit"}, {"oid": "b60ae231b2aa3399406e19078e1cc04378982008", "url": "https://github.com/all-of-us/workbench/commit/b60ae231b2aa3399406e19078e1cc04378982008", "message": "most review comments", "committedDate": "2020-03-20T13:28:57Z", "type": "commit"}, {"oid": "1f4b8f3309fa28cd4d3fbda272f40e4375e36b9a", "url": "https://github.com/all-of-us/workbench/commit/1f4b8f3309fa28cd4d3fbda272f40e4375e36b9a", "message": "cleanup, only one spinner pls", "committedDate": "2020-03-20T13:28:57Z", "type": "commit"}, {"oid": "bf049e1b9182673cc7d16d51df82d99109a72a55", "url": "https://github.com/all-of-us/workbench/commit/bf049e1b9182673cc7d16d51df82d99109a72a55", "message": "fixed tests", "committedDate": "2020-03-20T13:28:57Z", "type": "commit"}, {"oid": "0125c4e6cdfd8834c0cb5badd3943aea2c53230a", "url": "https://github.com/all-of-us/workbench/commit/0125c4e6cdfd8834c0cb5badd3943aea2c53230a", "message": "lint", "committedDate": "2020-03-20T13:28:57Z", "type": "commit"}, {"oid": "0125c4e6cdfd8834c0cb5badd3943aea2c53230a", "url": "https://github.com/all-of-us/workbench/commit/0125c4e6cdfd8834c0cb5badd3943aea2c53230a", "message": "lint", "committedDate": "2020-03-20T13:28:57Z", "type": "forcePushed"}]}