{"pr_number": 3819, "pr_title": "[RW-5305][risk=no] links for audit", "pr_createdAt": "2020-07-22T16:01:25Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3819", "timeline": [{"oid": "9a47212181457c86fa2e8f5bae8bcab6e34bf367", "url": "https://github.com/all-of-us/workbench/commit/9a47212181457c86fa2e8f5bae8bcab6e34bf367", "message": "add links to & from admin pages (except user admin, which isn't loading", "committedDate": "2020-07-21T20:33:22Z", "type": "commit"}, {"oid": "2f879a0a4d916a46029c69fe89cbdb892a4455d1", "url": "https://github.com/all-of-us/workbench/commit/2f879a0a4d916a46029c69fe89cbdb892a4455d1", "message": "Merge branch 'master' into jaycarlton/linksForAudit", "committedDate": "2020-07-22T14:29:32Z", "type": "commit"}, {"oid": "91c658d4bce496a4314a3f8569b8d1aa1e1cf4f2", "url": "https://github.com/all-of-us/workbench/commit/91c658d4bce496a4314a3f8569b8d1aa1e1cf4f2", "message": "more links", "committedDate": "2020-07-22T15:55:25Z", "type": "commit"}, {"oid": "62a843f1b74355eaa1003974efc236f43446ef6d", "url": "https://github.com/all-of-us/workbench/commit/62a843f1b74355eaa1003974efc236f43446ef6d", "message": "lint", "committedDate": "2020-07-22T16:09:00Z", "type": "commit"}, {"oid": "2039743f8c31dcab6d7796c8276af081ee83bf2b", "url": "https://github.com/all-of-us/workbench/commit/2039743f8c31dcab6d7796c8276af081ee83bf2b", "message": "rename", "committedDate": "2020-07-30T21:25:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcwMjg1Mg==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463702852", "bodyText": "nit: Thoughts on using a ternary?\nThis would also eliminate the need for the named function - it may be a bit clearer to inline the check here\n  return fp.isEqual({targetType: 'WORKSPACE', targetProperty: 'namespace'}, {targetType, targetProperty})\n      ? <HideableLinkCell url={ `/admin/workspace-audit/${value}`} content={value}/>\n      : <HideableCell content={value}/>;", "author": "petesantos", "createdAt": "2020-07-31T16:14:28Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -21,26 +22,61 @@ const HideableCell = (props: {content: string}) => {\n       }}>{content}</div>;\n };\n \n+const HideableLinkCell = (props: {url: string, content: string}) => {\n+  const {content, url} = props;\n+  return <a\n+      style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+        border: '1px solid',\n+        boxSizing: 'border-box'}}\n+        href={url}>{content}</a>;\n+};\n+\n const styles = reactStyles({\n   propertyCell: {\n     fontWeight: 600,\n     border: '1px solid'\n   }\n });\n \n-const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n-  const {targetProperty, previousValue, newValue} = props;\n-  return <React.Fragment>\n+const isWorkspaceNamespace = (targetType?: string, targetProperty?: string) => {\n+  return targetType === 'WORKSPACE' && targetProperty === 'namespace';\n+};\n+\n+const PossibleLinkCell = (props: {targetType?: string, targetProperty?: string, value?: string}) => {\n+  const {targetType, targetProperty, value} = props;\n+  if (isWorkspaceNamespace(targetType, targetProperty)) {", "originalCommit": "2039743f8c31dcab6d7796c8276af081ee83bf2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNTE5NQ==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463815195", "bodyText": "My style is generally lots of tiny named functions. I don't really like the ternary operator in any language, or the if statement for  that matter. It usually means I've missed an abstraction somewhere. This bit  is pretty hacky though.", "author": "jaycarlton", "createdAt": "2020-07-31T20:16:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcwMjg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyMjk0MQ==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463822941", "bodyText": "I like tiny functions as well. In JS my personal preference is to in-line them unless I am using them in more than one place.\nAgreed on the conditionals as well. The reason I prefer ternary is because it is a \"this or that\" operator. With if statements it makes it easier for a future developer to add additional conditions and nested conditionals rather than finding that better abstraction. The change from a ternary to a more complex conditional may stick out a bit more and raise a flag for someone - but that may just be me.", "author": "petesantos", "createdAt": "2020-07-31T20:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcwMjg1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcwOTE4OQ==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463709189", "bodyText": "Should there be a ticket on the back end to address this issue?", "author": "petesantos", "createdAt": "2020-07-31T16:27:11Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -21,26 +22,61 @@ const HideableCell = (props: {content: string}) => {\n       }}>{content}</div>;\n };\n \n+const HideableLinkCell = (props: {url: string, content: string}) => {\n+  const {content, url} = props;\n+  return <a\n+      style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+        border: '1px solid',\n+        boxSizing: 'border-box'}}\n+        href={url}>{content}</a>;\n+};\n+\n const styles = reactStyles({\n   propertyCell: {\n     fontWeight: 600,\n     border: '1px solid'\n   }\n });\n \n-const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n-  const {targetProperty, previousValue, newValue} = props;\n-  return <React.Fragment>\n+const isWorkspaceNamespace = (targetType?: string, targetProperty?: string) => {\n+  return targetType === 'WORKSPACE' && targetProperty === 'namespace';\n+};\n+\n+const PossibleLinkCell = (props: {targetType?: string, targetProperty?: string, value?: string}) => {\n+  const {targetType, targetProperty, value} = props;\n+  if (isWorkspaceNamespace(targetType, targetProperty)) {\n+    return <HideableLinkCell url={`/admin/workspace-audit/${value}`} content={value}/>;\n+  } else {\n+    return <HideableCell content={value}/>;\n+  }\n+};\n+\n+function isRealPropertyChange(newValue: string, previousValue: string) {\n+  return fp.isEmpty(newValue) && fp.isEmpty(previousValue);\n+}\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string,\n+  newValue?: string, targetType?: string}) => {\n+  const {targetProperty, previousValue, newValue, targetType} = props;\n+  // On the backend, fields are initialized to null but sometimes re-initialized to", "originalCommit": "2039743f8c31dcab6d7796c8276af081ee83bf2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MTMyNw==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463971327", "bodyText": "It's not really shaped like a single bug or story. Last time I looked at it, I took the position that the audit system just writes down what it takes in. There's no one place to fix it, so it would be a whack-a-mole exercise. Though I am looking to introduce ways to make property management more uniform.", "author": "jaycarlton", "createdAt": "2020-08-01T15:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcwOTE4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxMzc3MA==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463713770", "bodyText": "The name doesn't seem to match up well with the result.\nConsider renaming to something like isUserDrivenChange\nand negating the return value:\n  return !(fp.isEmpty(newValue) && fp.isEmpty(previousValue));", "author": "petesantos", "createdAt": "2020-07-31T16:36:52Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -21,26 +22,61 @@ const HideableCell = (props: {content: string}) => {\n       }}>{content}</div>;\n };\n \n+const HideableLinkCell = (props: {url: string, content: string}) => {\n+  const {content, url} = props;\n+  return <a\n+      style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+        border: '1px solid',\n+        boxSizing: 'border-box'}}\n+        href={url}>{content}</a>;\n+};\n+\n const styles = reactStyles({\n   propertyCell: {\n     fontWeight: 600,\n     border: '1px solid'\n   }\n });\n \n-const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n-  const {targetProperty, previousValue, newValue} = props;\n-  return <React.Fragment>\n+const isWorkspaceNamespace = (targetType?: string, targetProperty?: string) => {\n+  return targetType === 'WORKSPACE' && targetProperty === 'namespace';\n+};\n+\n+const PossibleLinkCell = (props: {targetType?: string, targetProperty?: string, value?: string}) => {\n+  const {targetType, targetProperty, value} = props;\n+  if (isWorkspaceNamespace(targetType, targetProperty)) {\n+    return <HideableLinkCell url={`/admin/workspace-audit/${value}`} content={value}/>;\n+  } else {\n+    return <HideableCell content={value}/>;\n+  }\n+};\n+\n+function isRealPropertyChange(newValue: string, previousValue: string) {", "originalCommit": "2039743f8c31dcab6d7796c8276af081ee83bf2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MTE3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463971175", "bodyText": "Good catch. I was halfway through a rename I think.", "author": "jaycarlton", "createdAt": "2020-08-01T15:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxMzc3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxNDUwMg==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463714502", "bodyText": "nit: remove the assignment - based on renaming the function:\nisUserDrivenChange(newValue, previousValue) ? ... : null\nThis may be a bit easier to read", "author": "petesantos", "createdAt": "2020-07-31T16:38:28Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -21,26 +22,61 @@ const HideableCell = (props: {content: string}) => {\n       }}>{content}</div>;\n };\n \n+const HideableLinkCell = (props: {url: string, content: string}) => {\n+  const {content, url} = props;\n+  return <a\n+      style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+        border: '1px solid',\n+        boxSizing: 'border-box'}}\n+        href={url}>{content}</a>;\n+};\n+\n const styles = reactStyles({\n   propertyCell: {\n     fontWeight: 600,\n     border: '1px solid'\n   }\n });\n \n-const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n-  const {targetProperty, previousValue, newValue} = props;\n-  return <React.Fragment>\n+const isWorkspaceNamespace = (targetType?: string, targetProperty?: string) => {\n+  return targetType === 'WORKSPACE' && targetProperty === 'namespace';\n+};\n+\n+const PossibleLinkCell = (props: {targetType?: string, targetProperty?: string, value?: string}) => {\n+  const {targetType, targetProperty, value} = props;\n+  if (isWorkspaceNamespace(targetType, targetProperty)) {\n+    return <HideableLinkCell url={`/admin/workspace-audit/${value}`} content={value}/>;\n+  } else {\n+    return <HideableCell content={value}/>;\n+  }\n+};\n+\n+function isRealPropertyChange(newValue: string, previousValue: string) {\n+  return fp.isEmpty(newValue) && fp.isEmpty(previousValue);\n+}\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string,\n+  newValue?: string, targetType?: string}) => {\n+  const {targetProperty, previousValue, newValue, targetType} = props;\n+  // On the backend, fields are initialized to null but sometimes re-initialized to\n+  // empty strings. Since it's not a user-driven change, I'm dropping those rows from the output.\n+  const isFalseChange = isRealPropertyChange(newValue, previousValue);", "originalCommit": "2039743f8c31dcab6d7796c8276af081ee83bf2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc2ODE4NA==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463768184", "bodyText": "To keep things consistently in fp-land you could do something like:\n    {fp.flow(\n      fp.toPairs,\n      fp.map(([index, {targetProperty, newValue, previousValue}]) => <PropertyChangeListEntry targetProperty={targetProperty}\n        previousValue={previousValue}\n        newValue={newValue}\n        targetType={header.target.targetType}\n        key={index}/>\n      ))(propertyChanges)\n    }", "author": "petesantos", "createdAt": "2020-07-31T18:33:49Z", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -51,17 +87,28 @@ const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyCha\n     <div style={styles.propertyCell}>Previous Value</div>\n     <div style={styles.propertyCell}>New Value</div>\n     {propertyChanges.map((propertyChange, index) =>\n-        <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+        <PropertyChangeListEntry targetProperty={propertyChange.targetProperty}", "originalCommit": "2039743f8c31dcab6d7796c8276af081ee83bf2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNTUzMg==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463815532", "bodyText": "ooh  nice", "author": "jaycarlton", "createdAt": "2020-07-31T20:17:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc2ODE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MTY2Ng==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463971666", "bodyText": "Mich nicer.", "author": "jaycarlton", "createdAt": "2020-08-01T15:20:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc2ODE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3MzYzNg==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463773636", "bodyText": "The navigateByUrl won't work with the new style routing. The router handles navigation like any other react component - you must mount the component <Navigate>.\nLook at lines 58, 73 and 96 for the pattern.\nThis should be cleaned up on the router side, as it is not ideal at the moment. I can write a hook around that that will make adding navigation easier in function components.", "author": "petesantos", "createdAt": "2020-07-31T18:46:29Z", "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -106,18 +108,36 @@ const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, but\n       Audit\n       </Button>\n     </TooltipTrigger>\n+    <div style={{\n+      margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600\n+    }}>\n     <TooltipTrigger content={'Download actual SQL query for BigQuery Action Audit table. Useful' +\n-    ' for developers or analysts interested in basing other ad hoc queries off' +\n-    ' this audit query in the BigQuery console or bq tool.'}>\n-    <Button style={buttonStyle}\n-            disabled={fp.isEmpty(queryText)}\n-            onClick={() => setDownloadSqlFile(true)}>\n-      Download SQL\n-    </Button>\n-  </TooltipTrigger>\n+      ' for developers or analysts interested in basing other ad hoc queries off' +\n+      ' this audit query in the BigQuery console or bq tool.'}>\n+      <Button style={buttonStyle}\n+              disabled={fp.isEmpty(queryText)}\n+              onClick={() => setDownloadSqlFile(true)}>\n+        Download SQL\n+      </Button>\n+    </TooltipTrigger>\n     <TooltipTrigger content={'BigQuery Console page (use pmi-ops.org account)'}>\n-      <a href={getBigQueryConsoleUrl()}>BigQuery Console</a>\n+      <Button style={buttonStyle}\n+              onClick={() => navigateByUrl(getBigQueryConsoleUrl())}>", "originalCommit": "2039743f8c31dcab6d7796c8276af081ee83bf2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MTgxMw==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463971813", "bodyText": "To be clear, this button navigates to a completely external website. Do I still go through the router for that?\nFor the others, I don't see an example of how to wire onClick to the <Navigate/> element. Do I need to make a new NavigateButton to use this? If so, I can punt and just use an <a/>.", "author": "jaycarlton", "createdAt": "2020-08-01T15:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3MzYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5MTIxMA==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463791210", "bodyText": "TOL: These \"feel\" far away from where they are getting used. What are your thoughts on\n\nSince we have the initialSubject and know the query at this time, running the initial queries in these components and passing the data into the AuditPageComponent\nChanging getAdminPageURL to something like onAdminClick or similar - this may be a bit clearer on where and how this property/function is being used", "author": "petesantos", "createdAt": "2020-07-31T19:27:30Z", "path": "ui/src/app/pages/admin/user-audit.tsx", "diffHunk": "@@ -38,11 +38,17 @@ const getNextAuditPath = (subject: string) => {\n   return `/admin/user-audit/${subject}`;\n };\n \n+// Single-user admin page isn't available yet, so go to the main users list page.\n+const getAdminPageUrl = (subject: string) => {", "originalCommit": "2039743f8c31dcab6d7796c8276af081ee83bf2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxODAzOA==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463818038", "bodyText": "for #1, You'd  need a callback  to fetch  new entries on the next subject. How about if we kick that can one PR down the road? I have another batch of changes  right after this. My thought process  was that the user & workspace pages wouldn't need to make any API calls themselves, and would each only contribute what's  unique about their own query. So if we want to  re-fetch  with another subject or another time range, you'd have to call back to the outer component one or two levels up.\nAre you saying onAdminClick could have the navigation code directly? I think I like that, assuming I can route from point A to point B from code captured at point C. It's \"leaking\" knowledge that we're using  the same router in all three places, but that's OK.", "author": "jaycarlton", "createdAt": "2020-07-31T20:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5MTIxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyMDA2Mw==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463820063", "bodyText": "I am ok kicking  #1 down a bit.\nonAdminClick would handle the navigation - it could still accept a parameter. I think it would be clearer at the top level that this is a function being used in a button.", "author": "petesantos", "createdAt": "2020-07-31T20:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5MTIxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MjI5OA==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463972298", "bodyText": "I started to do this but realized that the pages using the component dont' know the name of the subject except for the very first one. So any method they passed to onClick would need to capture that somehow, and I don't know of a clean way to do that.\nPlus, I might want to use that URL for other purposes as well, though, and pulling the navigate method up repeats that knowledge in two places. The fact that it's a button internally is kind of an implementation detail of the current design.", "author": "jaycarlton", "createdAt": "2020-08-01T15:25:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5MTIxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5MjQwMA==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463792400", "bodyText": "Could the usernameWithoutDomain utility function be used here?", "author": "petesantos", "createdAt": "2020-07-31T19:28:57Z", "path": "ui/src/app/pages/admin/admin-users.tsx", "diffHunk": "@@ -133,17 +133,18 @@ export const AdminUsers = withUserProfile()(class extends React.Component<\n   }\n \n   convertProfilesToFields(profiles: Profile[]) {\n-\n+    const usernameWithoutDomain = p => p.username.substring(0, p.username.indexOf('@'));", "originalCommit": "2039743f8c31dcab6d7796c8276af081ee83bf2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxODIyOQ==", "url": "https://github.com/all-of-us/workbench/pull/3819#discussion_r463818229", "bodyText": "good idea", "author": "jaycarlton", "createdAt": "2020-07-31T20:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5MjQwMA=="}], "type": "inlineReview"}, {"oid": "aa218b424824c74079472f7e031ea9bdad9db6b6", "url": "https://github.com/all-of-us/workbench/commit/aa218b424824c74079472f7e031ea9bdad9db6b6", "message": "fix links to use navigate(). re move workarounds", "committedDate": "2020-08-03T13:55:03Z", "type": "commit"}, {"oid": "62bfb81f0ab6a380d5865e915c6863b02be88049", "url": "https://github.com/all-of-us/workbench/commit/62bfb81f0ab6a380d5865e915c6863b02be88049", "message": "yarn & fix nav", "committedDate": "2020-08-03T14:51:17Z", "type": "commit"}]}