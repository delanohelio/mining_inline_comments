{"pr_number": 3321, "pr_title": "[RW-4691][risk=no] Await authentication before checking disabled status", "pr_createdAt": "2020-03-31T01:26:43Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3321", "timeline": [{"oid": "f66288d7771bca2f40cb3f7993aaa4c30f32e288", "url": "https://github.com/all-of-us/workbench/commit/f66288d7771bca2f40cb3f7993aaa4c30f32e288", "message": "Block disabled check on signin", "committedDate": "2020-03-31T01:18:53Z", "type": "commit"}, {"oid": "2b7db3f05b1c7e8c9b5b0ce4e33556092013253e", "url": "https://github.com/all-of-us/workbench/commit/2b7db3f05b1c7e8c9b5b0ce4e33556092013253e", "message": "better comment", "committedDate": "2020-03-31T01:28:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NDc4OQ==", "url": "https://github.com/all-of-us/workbench/pull/3321#discussion_r400594789", "bodyText": "You just have read my mind \u2013\u00a0I was adding a review comment asking for a comment, then your comment showed up when I refreshed :)\nI'm still a little confused as to how we have confidence that this guard will be called again once the sign-in state is changed. Is this something we handle explicitly somewhere?", "author": "gjuggler", "createdAt": "2020-03-31T01:46:50Z", "path": "ui/src/app/guards/disabled-guard.service.ts", "diffHunk": "@@ -1,16 +1,24 @@\n import {Injectable} from '@angular/core';\n import {ActivatedRouteSnapshot, CanActivate, CanActivateChild, Router, RouterStateSnapshot} from '@angular/router';\n \n+import {SignInService} from 'app/services/sign-in.service';\n import {profileApi} from 'app/services/swagger-fetch-clients';\n import {convertAPIError} from 'app/utils/errors';\n import {ErrorCode} from 'generated/fetch';\n \n @Injectable()\n export class DisabledGuard implements CanActivate, CanActivateChild {\n-  constructor(private router: Router) {}\n+  constructor(private router: Router, private signInService: SignInService) {}\n \n   async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n     try {\n+      // The user is not necessarily authenticated at this point - we have to", "originalCommit": "2b7db3f05b1c7e8c9b5b0ce4e33556092013253e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5ODAxNQ==", "url": "https://github.com/all-of-us/workbench/pull/3321#discussion_r400598015", "bodyText": "The observable here blocks until the state is known, at which point it fires the first event which gets captured by this toPromise. Subsequently, it may fire again I believe if the user sign in state changes again, but we're no longer listening at that point.", "author": "calbach", "createdAt": "2020-03-31T01:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NDc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5ODIwMg==", "url": "https://github.com/all-of-us/workbench/pull/3321#discussion_r400598202", "bodyText": "On initial sign in - we're currently dependent on a full page reload. Therefore signed out -> signed in is not a valid state transition anyways.", "author": "calbach", "createdAt": "2020-03-31T01:59:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NDc4OQ=="}], "type": "inlineReview"}]}