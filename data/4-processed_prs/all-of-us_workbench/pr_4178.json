{"pr_number": 4178, "pr_title": "[RW-5714][risk=no] Preset runtime dropdown", "pr_createdAt": "2020-10-16T14:20:47Z", "pr_url": "https://github.com/all-of-us/workbench/pull/4178", "timeline": [{"oid": "147e868dc55b0c0f2648b37214bc0e21c4cf6ec5", "url": "https://github.com/all-of-us/workbench/commit/147e868dc55b0c0f2648b37214bc0e21c4cf6ec5", "message": "set runtime config type", "committedDate": "2020-10-15T17:36:02Z", "type": "commit"}, {"oid": "eb2ffa3b38d2f4035df446408b1db252298aa232", "url": "https://github.com/all-of-us/workbench/commit/eb2ffa3b38d2f4035df446408b1db252298aa232", "message": "cat owner grade lint roller", "committedDate": "2020-10-15T17:49:18Z", "type": "commit"}, {"oid": "ecbf5a39d913193d9e51c84cf217a341b02a89e2", "url": "https://github.com/all-of-us/workbench/commit/ecbf5a39d913193d9e51c84cf217a341b02a89e2", "message": "always enabled", "committedDate": "2020-10-15T18:20:11Z", "type": "commit"}, {"oid": "9580cbc10261822488c8a9b11acd7af0db27fe78", "url": "https://github.com/all-of-us/workbench/commit/9580cbc10261822488c8a9b11acd7af0db27fe78", "message": "tidying", "committedDate": "2020-10-16T14:18:08Z", "type": "commit"}, {"oid": "5b5f477f30a6270cc629fb5616dcd924764a4d6d", "url": "https://github.com/all-of-us/workbench/commit/5b5f477f30a6270cc629fb5616dcd924764a4d6d", "message": "small lint", "committedDate": "2020-10-16T14:19:08Z", "type": "commit"}, {"oid": "69bdf275b6e8300f51329bd9d45eb07a4b2e216c", "url": "https://github.com/all-of-us/workbench/commit/69bdf275b6e8300f51329bd9d45eb07a4b2e216c", "message": "boot disk size not disk size for gce", "committedDate": "2020-10-16T14:21:53Z", "type": "commit"}, {"oid": "13b140a46010818aa56b49613f0d9afe3cb33afa", "url": "https://github.com/all-of-us/workbench/commit/13b140a46010818aa56b49613f0d9afe3cb33afa", "message": "git commit dash am has failed me for the last time", "committedDate": "2020-10-16T14:22:39Z", "type": "commit"}, {"oid": "bb2a6691b4eb269f5706d783875c5aa6ebb10004", "url": "https://github.com/all-of-us/workbench/commit/bb2a6691b4eb269f5706d783875c5aa6ebb10004", "message": "lol i was wrong", "committedDate": "2020-10-16T14:25:59Z", "type": "commit"}, {"oid": "da8d340ec2e10d49cc38596c8b8573f9ebb5b874", "url": "https://github.com/all-of-us/workbench/commit/da8d340ec2e10d49cc38596c8b8573f9ebb5b874", "message": "angular tests borked", "committedDate": "2020-10-16T14:33:38Z", "type": "commit"}, {"oid": "90ec32374d7f53b7c1a4efc7ca543fcb35053c01", "url": "https://github.com/all-of-us/workbench/commit/90ec32374d7f53b7c1a4efc7ca543fcb35053c01", "message": "type check", "committedDate": "2020-10-16T15:19:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyMjQyNQ==", "url": "https://github.com/all-of-us/workbench/pull/4178#discussion_r506522425", "bodyText": "I'm cool with using regular map but the lodash docs says that they do provide an index? https://lodash.com/docs/4.17.15#map", "author": "ericsong", "createdAt": "2020-10-16T15:04:04Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -157,27 +150,72 @@ export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n                     closeOnClick\n                     content={\n                       <React.Fragment>\n-                        <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n-                        <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n+                        {\n+                          fp.filter(['displayName', 'General Analysis'], runtimePresets)\n+                            // regular .map used here bc fp map won't provide index as an iteratee argument", "originalCommit": "da8d340ec2e10d49cc38596c8b8573f9ebb5b874", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1NTAwMA==", "url": "https://github.com/all-of-us/workbench/pull/4178#discussion_r506555000", "bodyText": "We're not using lodash per se, we're using lodash/fp, which does not provide an index.", "author": "als364", "createdAt": "2020-10-16T15:39:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyMjQyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzMzU2Nw==", "url": "https://github.com/all-of-us/workbench/pull/4178#discussion_r506533567", "bodyText": "I didn't know filter could be used this way where it can be provided with a key/value pair. Is there another lodash function that does the same thing? I was confused because I'm very used to the filter API of .filter[collection, predicate]", "author": "ericsong", "createdAt": "2020-10-16T15:15:44Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -157,27 +150,72 @@ export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n                     closeOnClick\n                     content={\n                       <React.Fragment>\n-                        <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n-                        <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n+                        {\n+                          fp.filter(['displayName', 'General Analysis'], runtimePresets)", "originalCommit": "da8d340ec2e10d49cc38596c8b8573f9ebb5b874", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1NDY2Mg==", "url": "https://github.com/all-of-us/workbench/pull/4178#discussion_r506554662", "bodyText": "There is not another lodash function that does the same thing.", "author": "als364", "createdAt": "2020-10-16T15:38:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzMzU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3MTk2NA==", "url": "https://github.com/all-of-us/workbench/pull/4178#discussion_r506671964", "bodyText": "If you want to keep everything in lodash/fp and get the index you could do something like (pseudo-codish):\nfp.flow(\n  fp.filter(['displayName', 'General Analysis']),\n  fp.toPairs,\n  fp.map(([index, preset]) => {...})\n)(runtimePresets)", "author": "petesantos", "createdAt": "2020-10-16T19:09:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzMzU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwMDkxNA==", "url": "https://github.com/all-of-us/workbench/pull/4178#discussion_r506700914", "bodyText": "Tried that before and it didn't work, works now; probably I just didn't tuple up the arguments before", "author": "als364", "createdAt": "2020-10-16T20:16:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzMzU2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzODgyMA==", "url": "https://github.com/all-of-us/workbench/pull/4178#discussion_r506538820", "bodyText": "Although unlikely to happen, it's possible that this can pull the presetDiskSize from gceConfig and presetMachineName from the dataprocConfig or vice versa.", "author": "ericsong", "createdAt": "2020-10-16T15:21:33Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -157,27 +150,72 @@ export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n                     closeOnClick\n                     content={\n                       <React.Fragment>\n-                        <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n-                        <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n+                        {\n+                          fp.filter(['displayName', 'General Analysis'], runtimePresets)\n+                            // regular .map used here bc fp map won't provide index as an iteratee argument\n+                            .map((preset, i) => {\n+                              return <MenuItem\n+                                  style={styles.presetMenuItem}\n+                                  key={i}\n+                                  onClick={() => {\n+                                    // renaming to avoid shadowing\n+                                    const presetDiskSize =\n+                                        (preset.runtimeTemplate.gceConfig && preset.runtimeTemplate.gceConfig.bootDiskSize)\n+                                        || (preset.runtimeTemplate.dataprocConfig && preset.runtimeTemplate.dataprocConfig.masterDiskSize);\n+                                    const presetMachineName =\n+                                        (preset.runtimeTemplate.gceConfig && preset.runtimeTemplate.gceConfig.machineType)\n+                                        || (preset.runtimeTemplate.dataprocConfig && preset.runtimeTemplate.dataprocConfig.masterMachineType);", "originalCommit": "da8d340ec2e10d49cc38596c8b8573f9ebb5b874", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1NTU0Nw==", "url": "https://github.com/all-of-us/workbench/pull/4178#discussion_r506555547", "bodyText": "oh, that's true, I can make this not happen, but it'll take some lets to do it in a reasonable way", "author": "als364", "createdAt": "2020-10-16T15:39:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzODgyMA=="}], "type": "inlineReview"}, {"oid": "4211d3914c86f9b1945effd33fb844fba913a8d7", "url": "https://github.com/all-of-us/workbench/commit/4211d3914c86f9b1945effd33fb844fba913a8d7", "message": "lint", "committedDate": "2020-10-16T15:42:48Z", "type": "commit"}, {"oid": "a2b1e7d80a0dd0e1972b0e52314d499740ec8b89", "url": "https://github.com/all-of-us/workbench/commit/a2b1e7d80a0dd0e1972b0e52314d499740ec8b89", "message": "make fp nicer", "committedDate": "2020-10-16T20:16:09Z", "type": "commit"}, {"oid": "9cbe33af71fec12f57fd968cab8d88d0df772ec3", "url": "https://github.com/all-of-us/workbench/commit/9cbe33af71fec12f57fd968cab8d88d0df772ec3", "message": "make everything else nicer", "committedDate": "2020-10-16T20:20:07Z", "type": "commit"}, {"oid": "da2c1266a75a4f23ed33d41945f3d294b5e10c1f", "url": "https://github.com/all-of-us/workbench/commit/da2c1266a75a4f23ed33d41945f3d294b5e10c1f", "message": "lint will be the death of me", "committedDate": "2020-10-16T20:35:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1NDc1Mg==", "url": "https://github.com/all-of-us/workbench/pull/4178#discussion_r506754752", "bodyText": "Would invert this predicate, i.e. ![null, Deleted, Running, Stopped].includes(status). The set of valid statuses is unlikely to change over time without a conscious decision on our end - however, the set of invalid statuses might evolve over time and we may not remember to keep this file synchronized.\nThis is also an incorrect usage of the in keyword. x in o checks whether o has key x, so these string checks will never pass, but something like 'includes' in [] will pass.", "author": "calbach", "createdAt": "2020-10-16T22:56:40Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -191,12 +230,24 @@ export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n     <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n       <Button\n         aria-label={currentRuntime ? 'Update' : 'Create'}\n-        disabled={status !== RuntimeStatus.Running || !runtimeChanged}\n+        disabled={\n+          !runtimeChanged\n+          || status in [", "originalCommit": "da2c1266a75a4f23ed33d41945f3d294b5e10c1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4NDk5OA==", "url": "https://github.com/all-of-us/workbench/pull/4178#discussion_r507784998", "bodyText": "i clearly have python on the brain.", "author": "als364", "createdAt": "2020-10-19T14:16:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc1NDc1Mg=="}], "type": "inlineReview"}, {"oid": "c182ebaff854099ae8b45b1053018d50ce39613f", "url": "https://github.com/all-of-us/workbench/commit/c182ebaff854099ae8b45b1053018d50ce39613f", "message": "restate status check", "committedDate": "2020-10-19T14:43:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcyNzI5NA==", "url": "https://github.com/all-of-us/workbench/pull/4178#discussion_r506727294", "bodyText": "If you want to avoid the let you could use fp.cond, returning an object and destructuring out the variables.\nSomething like:\nconst {presetDiskSize, presetMachineName} = fp.cond([\n  [() => !!runtimeTemplate.gceConfig, ({gceConfig: {bootDiskSize, machineType}}) =>({\n    presetDiskSize: bootDiskSize,\n    presetMachineName: machineType\n  })],\n  [() => !!runtimeTemplate.dataprocConfig, ...]\n])(runtimeTemplate)\nThe above example uses on some additional destructuring in the map function signature", "author": "petesantos", "createdAt": "2020-10-16T21:23:07Z", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -157,27 +150,73 @@ export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n                     closeOnClick\n                     content={\n                       <React.Fragment>\n-                        <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n-                        <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n+                        {\n+                          fp.flow(\n+                            fp.filter(['displayName', 'General Analysis']),\n+                            fp.toPairs,\n+                            fp.map(([i, preset]) => {\n+                              return <MenuItem\n+                              style={styles.presetMenuItem}\n+                              key={i}\n+                              onClick={() => {\n+                                // renaming to avoid shadowing\n+                                let presetDiskSize;", "originalCommit": "da2c1266a75a4f23ed33d41945f3d294b5e10c1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA0ODYxOA==", "url": "https://github.com/all-of-us/workbench/pull/4178#discussion_r508048618", "bodyText": "My 2c: I don't want to place a prohibition on let (or non-final Java vars) in the codebase - ultimately the metric to optimize for is readability. Using let instead of const reduces readability, since the reader must consider cognitive overhead of potential reassignment. However, this is not the only dimension to consider: for example, it might be a lot more complicated to assign something like this in a massive single statement.\nMostly this is personal preference - I would consider these kinds of suggestions optional unless the proposed alternative is clearly superior. In this particular case, I found the previous version (let, if, else) easier to read - though it is interesting to see how it would be done in lodash fp / functional style and I don't have a strong objection to doing it this way.", "author": "calbach", "createdAt": "2020-10-19T20:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcyNzI5NA=="}], "type": "inlineReview"}, {"oid": "a967619f55fd47935996dcb10f01ac9fbb81ab2a", "url": "https://github.com/all-of-us/workbench/commit/a967619f55fd47935996dcb10f01ac9fbb81ab2a", "message": "fp dot cond", "committedDate": "2020-10-19T17:06:09Z", "type": "commit"}, {"oid": "8160404236059391a5901d926cabae0c820a7ed2", "url": "https://github.com/all-of-us/workbench/commit/8160404236059391a5901d926cabae0c820a7ed2", "message": "lint lint lint", "committedDate": "2020-10-19T17:37:05Z", "type": "commit"}]}