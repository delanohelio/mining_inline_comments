{"pr_number": 3126, "pr_title": "[risk=no][RW-4438] Use actual query instead of Java stream over all table rows", "pr_createdAt": "2020-02-13T03:39:11Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3126", "timeline": [{"oid": "f615d91e3b0c3057864e33b27b5690ffbddb2cc8", "url": "https://github.com/all-of-us/workbench/commit/f615d91e3b0c3057864e33b27b5690ffbddb2cc8", "message": "initial stab", "committedDate": "2020-02-13T03:35:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MTU2NA==", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r378661564", "bodyText": "Driving by but is it necessary to add this intermediate object? I think the interface we had, getCountByStatusMap(), works well. We just need to change the implementation to speed it up.\nThe computeProjectCountByStatus2() call below should work and that gets us most of the way there. All getCountByStatusMap() would have to do is convert the result from computeProjectCountByStatus2() to match the existing interface.", "author": "ericsong", "createdAt": "2020-02-13T05:45:43Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/BillingProjectBufferEntryDao.java", "diffHunk": "@@ -40,6 +44,29 @@\n     return DaoUtils.getAttributeToCountMap(findAll(), DbBillingProjectBufferEntry::getStatusEnum);\n   }\n \n+  @Query(value = \"select status, count(billing_project_buffer_entry.billing_project_buffer_entry_id) as num_projects\\n\"\n+      + \"    from billing_project_buffer_entry\\n\"\n+      + \"group by status\\n\"\n+      + \"order by status;\", nativeQuery = true)\n+//  List<BillingProjectBufferEntryStatusToCountResult> computeProjectCountByStatus();\n+   BillingProjectBufferEntryStatusToCountResult[] computeProjectCountByStatus();", "originalCommit": "f615d91e3b0c3057864e33b27b5690ffbddb2cc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg4Njg0NQ==", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r378886845", "bodyText": "That was a guess based on. the debugger output when it tried to convert internally.\nI don't know how to capture the query result safely without a new POJO or entity. Like, that's what I'm supposed to get from. packages. like this I thought. If I'm having to. cast from. object and then. manually call a constructor with parameters the same names as my columns, then. I want to shop for another framework.  Ideally I could just make an Immutable for it.\nBut if that works, it should help.", "author": "jaycarlton", "createdAt": "2020-02-13T14:17:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MTU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1OTYyOQ==", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r378959629", "bodyText": "@jaycarlton If you would like to catch the query output in an object but don't want to have to annotate another entity... you can use a Projection interface. It allows you to project a subset of properties from your dao into another object that isn't your actual entity.\nProjection interface example here: https://github.com/all-of-us/workbench/blob/freemabd/address-comments/common-api/src/main/java/org/pmiops/workbench/cdr/model/DbMenuOption.java#L3-L3\nUsage example here: https://github.com/all-of-us/workbench/blob/freemabd/address-comments/common-api/src/main/java/org/pmiops/workbench/cdr/dao/CBCriteriaDao.java#L238-L238", "author": "freemabd", "createdAt": "2020-02-13T16:08:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MTU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk2NzMxNA==", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r378967314", "bodyText": "oo, this is neat! thanks @freemabd\nAlso, another comment, I think its best to avoid using native queries where possible. Native queries will run the query as is against the underlying database. This would be OK if we used the same database everywhere but I believe our tests use some in memory database (H2?).\nI have had issues where native queries work in production and fail in tests and vice versa.\nWriting HQL will let hibernate figure out the right way to generate the query based on what database is currently in use. Caveat is that you don't have access to all the SQL tools that MySQL provides but HQL should suffice for most cases.", "author": "ericsong", "createdAt": "2020-02-13T16:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MTU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk2OTQ2Mg==", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r378969462", "bodyText": "Great points. Was going to try going up a level. in abstraction after getting something working. It'll be good to start a set of Hibernate, SQL, and data model guidelines.", "author": "jaycarlton", "createdAt": "2020-02-13T16:23:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MTU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk3MzkyNQ==", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r378973925", "bodyText": "Projection interface works! Much nicer. No annotatitons even.", "author": "jaycarlton", "createdAt": "2020-02-13T16:30:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2MTU2NA=="}], "type": "inlineReview"}, {"oid": "b3db24169970a72af961a4afd33ffb39e46f0166", "url": "https://github.com/all-of-us/workbench/commit/b3db24169970a72af961a4afd33ffb39e46f0166", "message": "use projection interface", "committedDate": "2020-02-13T16:41:57Z", "type": "commit"}, {"oid": "5bc103b9a9e1942a045e25220200da936e7ce176", "url": "https://github.com/all-of-us/workbench/commit/5bc103b9a9e1942a045e25220200da936e7ce176", "message": "spot", "committedDate": "2020-02-13T16:42:16Z", "type": "commit"}, {"oid": "f7add5790a1ac09dc1bf4e67901a78cddbf28c8a", "url": "https://github.com/all-of-us/workbench/commit/f7add5790a1ac09dc1bf4e67901a78cddbf28c8a", "message": "simplify", "committedDate": "2020-02-13T16:53:55Z", "type": "commit"}, {"oid": "7e644eca3d4d1a7183b03d20458808086fe9d09f", "url": "https://github.com/all-of-us/workbench/commit/7e644eca3d4d1a7183b03d20458808086fe9d09f", "message": "Merge branch 'master' into jaycarlton/RW-4438", "committedDate": "2020-02-14T17:15:32Z", "type": "commit"}, {"oid": "28c9d2a801387b20639f76cb86b0144891775313", "url": "https://github.com/all-of-us/workbench/commit/28c9d2a801387b20639f76cb86b0144891775313", "message": "cleanup", "committedDate": "2020-02-14T20:55:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0NDU3Mw==", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r379644573", "bodyText": "One way around this ugliness is a persisted, computed column. Not worth it here, as much as I hate seeing this comparison to null everywhere to essentially build a boolean.", "author": "jaycarlton", "createdAt": "2020-02-14T21:07:14Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java", "diffHunk": "@@ -48,7 +46,21 @@\n \n   Set<DbUser> findByFirstRegistrationCompletionTimeNotNull();\n \n-  default Map<Boolean, Long> getDisabledToCountMap() {\n-    return DaoUtils.getAttributeToCountMap(findAll(), DbUser::getDisabled);\n+  @Query(\n+      \"SELECT dataAccessLevel, disabled, CASE WHEN betaAccessBypassTime IS NOT NULL THEN TRUE ELSE FALSE END AS betaIsBypassed, COUNT(userId) AS userCount \"", "originalCommit": "28c9d2a801387b20639f76cb86b0144891775313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxOTMxMQ==", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r380219311", "bodyText": "Unfortunate, but glad that you were able to get this working.", "author": "freemabd", "createdAt": "2020-02-17T14:41:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0NDU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMjMxOA==", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r380222318", "bodyText": "Are these variable ever used?", "author": "freemabd", "createdAt": "2020-02-17T14:46:47Z", "path": "api/src/test/java/org/pmiops/workbench/billing/BillingProjectBufferServiceTest.java", "diffHunk": "@@ -678,6 +679,26 @@ public void testGetGaugeData() {\n     assertThat(entryStatusBundle.get().getTags()).isNotEmpty();\n   }\n \n+  @Test\n+  public void testGetProjectCountByStatus() {\n+    DbBillingProjectBufferEntry creatingEntry1 = makeSimpleEntry(BufferEntryStatus.CREATING);\n+    DbBillingProjectBufferEntry creatingEntry2 = makeSimpleEntry(BufferEntryStatus.CREATING);\n+    DbBillingProjectBufferEntry errorEntry1 = makeSimpleEntry(BufferEntryStatus.ERROR);", "originalCommit": "28c9d2a801387b20639f76cb86b0144891775313", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyMzY5Mw==", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r380223693", "bodyText": "Shouldn't this test really be in BillingProjectBufferEntryDaoTest? Doesn't seem to test anything in the service layer.", "author": "freemabd", "createdAt": "2020-02-17T14:49:02Z", "path": "api/src/test/java/org/pmiops/workbench/billing/BillingProjectBufferServiceTest.java", "diffHunk": "@@ -678,6 +679,26 @@ public void testGetGaugeData() {\n     assertThat(entryStatusBundle.get().getTags()).isNotEmpty();\n   }\n \n+  @Test\n+  public void testGetProjectCountByStatus() {", "originalCommit": "28c9d2a801387b20639f76cb86b0144891775313", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MzA1OA==", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r380243058", "bodyText": "Can we write a test case for this in WorkspaceDaoTest?", "author": "freemabd", "createdAt": "2020-02-17T15:24:31Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/WorkspaceDao.java", "diffHunk": "@@ -73,11 +69,16 @@ default void updateBillingStatus(long workspaceId, BillingStatus status) {\n   @Query(\"SELECT w.creator FROM DbWorkspace w WHERE w.billingStatus = (:status)\")\n   Set<DbUser> findAllCreatorsByBillingStatus(@Param(\"status\") BillingStatus status);\n \n-  default Map<WorkspaceActiveStatus, Long> getActiveStatusToCountMap() {\n-    return DaoUtils.getAttributeToCountMap(findAll(), DbWorkspace::getWorkspaceActiveStatusEnum);\n-  }\n+  @Query(\n+      \"SELECT activeStatus, dataAccessLevel, COUNT(workspaceId) FROM DbWorkspace \"\n+          + \"GROUP BY activeStatus, dataAccessLevel ORDER BY activeStatus, dataAccessLevel\")\n+  List<ActiveStatusAndDataAccessLevelToCountResult> getActiveStatusAndDataAccessLevelToCount();", "originalCommit": "28c9d2a801387b20639f76cb86b0144891775313", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NDk0Ng==", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r380244946", "bodyText": "Can we write a test class for UserDaoTest and test all methods?", "author": "freemabd", "createdAt": "2020-02-17T15:28:00Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java", "diffHunk": "@@ -48,7 +46,21 @@\n \n   Set<DbUser> findByFirstRegistrationCompletionTimeNotNull();\n \n-  default Map<Boolean, Long> getDisabledToCountMap() {\n-    return DaoUtils.getAttributeToCountMap(findAll(), DbUser::getDisabled);\n+  @Query(\n+      \"SELECT dataAccessLevel, disabled, CASE WHEN betaAccessBypassTime IS NOT NULL THEN TRUE ELSE FALSE END AS betaIsBypassed, COUNT(userId) AS userCount \"\n+          + \"FROM DbUser \"\n+          + \"GROUP BY dataAccessLevel, disabled, CASE WHEN betaAccessBypassTime IS NOT NULL THEN TRUE ELSE FALSE END \"\n+          + \"ORDER BY NULL\")\n+  List<DataAccessLevelDisabledAndBetaBypassedToCountRow>\n+      getDataAccessLevelDisabledAndBetaBypassedToCount();", "originalCommit": "28c9d2a801387b20639f76cb86b0144891775313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQxMTM0Mg==", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r381411342", "bodyText": "Yep. This is my first Dao Test, and the only thing that's tricky is understanding when my autowired dao is cleared between tests.", "author": "jaycarlton", "createdAt": "2020-02-19T17:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NDk0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NjQxNw==", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r380246417", "bodyText": "Can we write a test class for this in DataSetDaoTest and test all the methods?", "author": "freemabd", "createdAt": "2020-02-17T15:30:53Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetDao.java", "diffHunk": "@@ -16,6 +17,20 @@\n   List<DbDataset> findByWorkspaceId(long workspaceId);\n \n   default Map<Boolean, Long> getInvalidToCountMap() {\n-    return DaoUtils.getAttributeToCountMap(findAll(), DbDataset::getInvalid);\n+    final List<InvalidToCountResult> rows = getInvalidToCount();\n+    return rows.stream()\n+        .collect(\n+            ImmutableMap.toImmutableMap(\n+                InvalidToCountResult::getIsInvalid, InvalidToCountResult::getInvalidCount));\n+  }\n+\n+  @Query(\n+      \"SELECT invalid, count(dataSetId) AS invalidCount FROM DbDataset GROUP BY invalid ORDER BY invalid\")\n+  List<InvalidToCountResult> getInvalidToCount();", "originalCommit": "28c9d2a801387b20639f76cb86b0144891775313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1MDk4Nw==", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r381450987", "bodyText": "For scope reasons,  I'm going to just. cover the methods added here for now.", "author": "jaycarlton", "createdAt": "2020-02-19T18:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NjQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0NzgxMg==", "url": "https://github.com/all-of-us/workbench/pull/3126#discussion_r380247812", "bodyText": "Can we write a test class for this in BillingProjectBufferEntryDaoTest and test all the methods?", "author": "freemabd", "createdAt": "2020-02-17T15:33:31Z", "path": "api/src/main/java/org/pmiops/workbench/db/dao/BillingProjectBufferEntryDao.java", "diffHunk": "@@ -28,18 +28,27 @@\n   List<DbBillingProjectBufferEntry> findAllByStatusAndLastStatusChangedTimeLessThan(\n       short status, Timestamp timestamp);\n \n-  DbBillingProjectBufferEntry findFirstByStatusOrderByLastSyncRequestTimeAsc(short status);\n-\n   List<DbBillingProjectBufferEntry> findTop5ByStatusOrderByLastSyncRequestTimeAsc(short status);\n \n   DbBillingProjectBufferEntry findFirstByStatusOrderByCreationTimeAsc(short status);\n \n   Long countByStatus(short status);\n \n   default Map<BufferEntryStatus, Long> getCountByStatusMap() {\n-    return DaoUtils.getAttributeToCountMap(findAll(), DbBillingProjectBufferEntry::getStatusEnum);\n+    return computeProjectCountByStatus().stream()\n+        .collect(\n+            ImmutableMap.toImmutableMap(\n+                StatusToCountResult::getStatusEnum, StatusToCountResult::getNumProjects));\n   }\n \n+  @Query(\n+      value =\n+          \"select status, count(billing_project_buffer_entry_id) as numpNrojects\\n\"\n+              + \"    from DbBillingProjectBufferEntry \\n\"\n+              + \"group by status\\n\"\n+              + \"order by status\")\n+  List<StatusToCountResult> computeProjectCountByStatus();", "originalCommit": "28c9d2a801387b20639f76cb86b0144891775313", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6e742fc5fe510d1b4d5bd0852e9f80bda7477a4f", "url": "https://github.com/all-of-us/workbench/commit/6e742fc5fe510d1b4d5bd0852e9f80bda7477a4f", "message": "merge master", "committedDate": "2020-02-19T16:17:51Z", "type": "commit"}, {"oid": "307513eb035540ef2710ac2acca137ff030fa6cf", "url": "https://github.com/all-of-us/workbench/commit/307513eb035540ef2710ac2acca137ff030fa6cf", "message": "more tests", "committedDate": "2020-02-19T17:47:37Z", "type": "commit"}, {"oid": "e01f4e3fb690cafc3fc268b99bd06c19c0c0a694", "url": "https://github.com/all-of-us/workbench/commit/e01f4e3fb690cafc3fc268b99bd06c19c0c0a694", "message": "fix  test", "committedDate": "2020-02-19T18:52:38Z", "type": "commit"}]}