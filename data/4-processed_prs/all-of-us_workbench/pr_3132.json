{"pr_number": 3132, "pr_title": "[risk=no][RW-4458]create new workspace test", "pr_createdAt": "2020-02-14T19:21:57Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3132", "timeline": [{"oid": "dacabff376b82a2c1dbc417549d35293a49670c6", "url": "https://github.com/all-of-us/workbench/commit/dacabff376b82a2c1dbc417549d35293a49670c6", "message": "create new workspace test", "committedDate": "2020-02-14T19:13:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwOTAxMg==", "url": "https://github.com/all-of-us/workbench/pull/3132#discussion_r379609012", "bodyText": "file rename.", "author": "aweng98", "createdAt": "2020-02-14T19:36:18Z", "path": "e2e/app/elements/button.ts", "diffHunk": "@@ -1,5 +1,5 @@\n import {Page} from 'puppeteer';\n-import * as elementHandler from '../../driver/element-handler';\n+import * as elementHandler from '../../driver/elementHandle-util';", "originalCommit": "dacabff376b82a2c1dbc417549d35293a49670c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwOTExMg==", "url": "https://github.com/all-of-us/workbench/pull/3132#discussion_r379609112", "bodyText": "file move.", "author": "aweng98", "createdAt": "2020-02-14T19:36:33Z", "path": "e2e/app/google-login.ts", "diffHunk": "@@ -1,7 +1,7 @@\n-import {ElementHandle, Page} from 'puppeteer';\n-import {waitForNavigation} from '../services/page-wait';\n+import { ElementHandle, Page } from 'puppeteer';\n+import { waitForNavigation } from '../services/page-wait';\n \n-const configs = require('../config/config');\n+const configs = require('../resources/config');", "originalCommit": "dacabff376b82a2c1dbc417549d35293a49670c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwOTQwMw==", "url": "https://github.com/all-of-us/workbench/pull/3132#discussion_r379609403", "bodyText": "renamed class name to ComponentWebElement", "author": "aweng98", "createdAt": "2020-02-14T19:37:20Z", "path": "e2e/app/workspace-element.ts", "diffHunk": "@@ -23,32 +24,3 @@ exports.SELT_XPATH_QUESTION4 = `//*[starts-with(normalize-space(.), \"4. What are\n // request a review Yes or No radiobutton\n exports.SELT_XPATH_YES = `//*[label[contains(normalize-space(.),\"Would you like to request a review of your research purpose\")]]/following-sibling::*/input[@type=\"radio\"][following-sibling::label[1]/text()=\"Yes\"]`;\n exports.SELT_XPATH_NO = `//*[label[contains(normalize-space(.),\"Would you like to request a review of your research purpose\")]]/following-sibling::*/input[@type=\"radio\"][following-sibling::label[1]/text()=\"No\"]`;\n-\n-export default class ProjectPurposeQuestion extends Widget {", "originalCommit": "dacabff376b82a2c1dbc417549d35293a49670c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwOTgxNQ==", "url": "https://github.com/all-of-us/workbench/pull/3132#discussion_r379609815", "bodyText": "bunch of methods rename to make shorter", "author": "aweng98", "createdAt": "2020-02-14T19:38:22Z", "path": "e2e/app/workspace-page.ts", "diffHunk": "@@ -44,62 +52,62 @@ export default class Workspaces extends authenticatedpage {\n     return await this.puppeteerPage.waitFor(selectors.dataSet, { visible: true });\n   }\n \n-  public element_question1_forProfitPurpose(): ProjectPurposeQuestion {\n-    return new ProjectPurposeQuestion(this.puppeteerPage, 'For-Profit Purpose');\n+  public question1ForProfit(): ComponentWebElement {", "originalCommit": "dacabff376b82a2c1dbc417549d35293a49670c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MjAyMQ==", "url": "https://github.com/all-of-us/workbench/pull/3132#discussion_r379662021", "bodyText": "How come all of these function names are prefixed with question1?", "author": "als364", "createdAt": "2020-02-14T21:53:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwOTgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3NzExMg==", "url": "https://github.com/all-of-us/workbench/pull/3132#discussion_r379677112", "bodyText": "for grouping get-element functions. too many elements on page. naming convention probably will change in future.", "author": "aweng98", "createdAt": "2020-02-14T22:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwOTgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MTYyMQ==", "url": "https://github.com/all-of-us/workbench/pull/3132#discussion_r379661621", "bodyText": "nit: space between closing paren and curly brace", "author": "als364", "createdAt": "2020-02-14T21:52:02Z", "path": "e2e/app/mixin/authenticatedpage.ts", "diffHunk": "@@ -43,17 +43,23 @@ export default abstract class AuthenticatedPage extends BasePage {\n   protected async waitForSpinner() {\n     // wait maximum 1 second for either spinner to show up\n     const selectr1 = '.spinner, svg';\n-    const found = await this.puppeteerPage.waitFor((selector) => {\n+    const spinner = await this.puppeteerPage.waitFor((selector) => {\n       return document.querySelectorAll(selector).length > 0\n     }, {timeout: 1000}, selectr1);\n+    const f = await spinner.jsonValue();\n \n     // wait maximum 60 seconds for spinner disappear if spinner existed\n     const selectr2 = 'svg[style*=\"spin\"], .spinner:empty';\n-    if (found) {\n+\n+    if (f) {\n       await this.puppeteerPage.waitFor((selector) => {\n         return document.querySelectorAll(selector).length === 0\n       }, {timeout: 60000}, selectr2);\n     }\n+    // final 1 second wait for page render to finish\n+    if (f){", "originalCommit": "dacabff376b82a2c1dbc417549d35293a49670c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3NjE3Ng==", "url": "https://github.com/all-of-us/workbench/pull/3132#discussion_r379676176", "bodyText": "fixed", "author": "aweng98", "createdAt": "2020-02-14T22:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MTYyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MTcyOQ==", "url": "https://github.com/all-of-us/workbench/pull/3132#discussion_r379661729", "bodyText": "nit: could this be named something like spinnerValue instead of a single-character name?", "author": "als364", "createdAt": "2020-02-14T21:52:21Z", "path": "e2e/app/mixin/authenticatedpage.ts", "diffHunk": "@@ -43,17 +43,23 @@ export default abstract class AuthenticatedPage extends BasePage {\n   protected async waitForSpinner() {\n     // wait maximum 1 second for either spinner to show up\n     const selectr1 = '.spinner, svg';\n-    const found = await this.puppeteerPage.waitFor((selector) => {\n+    const spinner = await this.puppeteerPage.waitFor((selector) => {\n       return document.querySelectorAll(selector).length > 0\n     }, {timeout: 1000}, selectr1);\n+    const f = await spinner.jsonValue();", "originalCommit": "dacabff376b82a2c1dbc417549d35293a49670c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3NjExOQ==", "url": "https://github.com/all-of-us/workbench/pull/3132#discussion_r379676119", "bodyText": "renamed to jValue.", "author": "aweng98", "createdAt": "2020-02-14T22:37:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MTcyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NDc3NQ==", "url": "https://github.com/all-of-us/workbench/pull/3132#discussion_r379664775", "bodyText": "Does this still debug statement still need to be there?", "author": "als364", "createdAt": "2020-02-14T22:01:06Z", "path": "e2e/driver/AouElement.ts", "diffHunk": "@@ -1,75 +1,115 @@\n-import {ClickOptions, ElementHandle, Page} from 'puppeteer';\n+import { ElementHandle, Page } from 'puppeteer';\n \n export default class AouElement {\n+\n   public eHandle: ElementHandle;\n \n   constructor(handle: ElementHandle) {\n     this.eHandle = handle;\n   }\n \n-  public async getProperty(property: string): Promise<unknown> {\n-    return await (await this.eHandle.getProperty(property)).jsonValue();\n-  }\n-\n-   /**\n-    * Cannot get attribute directly from a ElementHandle.\n-    * If the attribute have property counterparts, use getProperty function.\n-    */\n-  public async getAttribute(page: Page) {\n-    return await page.evaluate(link => link.getAttribute('href'), this.eHandle,);\n+  public async getProp(property: string): Promise<unknown> {\n+    const prop = await this.eHandle.getProperty(property);\n+    console.log(`getProp(${property}) function: ${await prop.jsonValue()}`);\n+    return await prop.jsonValue();\n   }\n \n   /**\n-   * Get the element attribute value.\n-   * @param {Page} page\n-   * @param {ElementHandle} element\n-   * @param {string} attribute\n+   * Get attribute directly from a ElementHandle.\n+   * If the attribute have property counterparts, use getProperty function.\n    */\n-  public async getAttributeAlternative(page: Page, element: ElementHandle, attribute: string) {\n-    const handle = await page.evaluateHandle( (elem, attr) => {\n-      return elem.getAttribute(attr);\n-    }, element, attribute);\n-    return await handle.jsonValue();\n+  public async getAttr(attr: string): Promise<unknown> {\n+    const atr = await this.eHandle.getAttribute(attr);\n+    console.log(`getAttr(${attr}) function: ${atr}`);", "originalCommit": "dacabff376b82a2c1dbc417549d35293a49670c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3NjA2Ng==", "url": "https://github.com/all-of-us/workbench/pull/3132#discussion_r379676066", "bodyText": "I need to see logged info for now until common functions are working consistently. eventually console.log will be all removed.", "author": "aweng98", "createdAt": "2020-02-14T22:37:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NDc3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NDc4NQ==", "url": "https://github.com/all-of-us/workbench/pull/3132#discussion_r379664785", "bodyText": "Does this still debug statement still need to be there?", "author": "als364", "createdAt": "2020-02-14T22:01:08Z", "path": "e2e/driver/AouElement.ts", "diffHunk": "@@ -1,75 +1,115 @@\n-import {ClickOptions, ElementHandle, Page} from 'puppeteer';\n+import { ElementHandle, Page } from 'puppeteer';\n \n export default class AouElement {\n+\n   public eHandle: ElementHandle;\n \n   constructor(handle: ElementHandle) {\n     this.eHandle = handle;\n   }\n \n-  public async getProperty(property: string): Promise<unknown> {\n-    return await (await this.eHandle.getProperty(property)).jsonValue();\n-  }\n-\n-   /**\n-    * Cannot get attribute directly from a ElementHandle.\n-    * If the attribute have property counterparts, use getProperty function.\n-    */\n-  public async getAttribute(page: Page) {\n-    return await page.evaluate(link => link.getAttribute('href'), this.eHandle,);\n+  public async getProp(property: string): Promise<unknown> {\n+    const prop = await this.eHandle.getProperty(property);\n+    console.log(`getProp(${property}) function: ${await prop.jsonValue()}`);", "originalCommit": "dacabff376b82a2c1dbc417549d35293a49670c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NTUyNQ==", "url": "https://github.com/all-of-us/workbench/pull/3132#discussion_r379665525", "bodyText": "Does this still debug statement still need to be there?", "author": "als364", "createdAt": "2020-02-14T22:03:19Z", "path": "e2e/driver/AouElement.ts", "diffHunk": "@@ -1,75 +1,115 @@\n-import {ClickOptions, ElementHandle, Page} from 'puppeteer';\n+import { ElementHandle, Page } from 'puppeteer';\n \n export default class AouElement {\n+\n   public eHandle: ElementHandle;\n \n   constructor(handle: ElementHandle) {\n     this.eHandle = handle;\n   }\n \n-  public async getProperty(property: string): Promise<unknown> {\n-    return await (await this.eHandle.getProperty(property)).jsonValue();\n-  }\n-\n-   /**\n-    * Cannot get attribute directly from a ElementHandle.\n-    * If the attribute have property counterparts, use getProperty function.\n-    */\n-  public async getAttribute(page: Page) {\n-    return await page.evaluate(link => link.getAttribute('href'), this.eHandle,);\n+  public async getProp(property: string): Promise<unknown> {\n+    const prop = await this.eHandle.getProperty(property);\n+    console.log(`getProp(${property}) function: ${await prop.jsonValue()}`);\n+    return await prop.jsonValue();\n   }\n \n   /**\n-   * Get the element attribute value.\n-   * @param {Page} page\n-   * @param {ElementHandle} element\n-   * @param {string} attribute\n+   * Get attribute directly from a ElementHandle.\n+   * If the attribute have property counterparts, use getProperty function.\n    */\n-  public async getAttributeAlternative(page: Page, element: ElementHandle, attribute: string) {\n-    const handle = await page.evaluateHandle( (elem, attr) => {\n-      return elem.getAttribute(attr);\n-    }, element, attribute);\n-    return await handle.jsonValue();\n+  public async getAttr(attr: string): Promise<unknown> {\n+    const atr = await this.eHandle.getAttribute(attr);\n+    console.log(`getAttr(${attr}) function: ${atr}`);\n+    return atr;\n   }\n \n-  public async click(options?: ClickOptions) {\n-    return (await this.eHandle.click(options));\n+  public async click() {\n+    await this.eHandle.asElement().click();\n   }\n \n-  public async isVisible() {\n+  public async focus() {\n+    return Promise.all([\n+      this.eHandle.focus(),\n+      this.eHandle.hover()\n+    ]);\n+  }\n+\n+  public async isVisible(): Promise<boolean> {\n     return (await this.eHandle.asElement().boxModel() !== null);\n   }\n \n-  public async exists() {\n+  public async exists(): Promise<boolean> {\n     return (await this.eHandle.asElement() !== null);\n   }\n \n   public async isCheckbox() {\n-    return (await this.getProperty('type') === 'checkbox')\n+    return (await this.getProp('type') === 'checkbox')\n+  }\n+\n+  public async isButton() {\n+    return (await this.getProp('type') === 'button')\n   }\n \n   public async check() {\n-    if (!!this.isChecked()) {\n-      this.click();\n+    const cValue = await this.isChecked();\n+    if (!cValue) {\n+      console.log('going to check the checkbox');\n+      await this.click();\n     }\n   }\n \n   public async unCheck() {\n-    if (this.isChecked()) {\n-      this.click();\n+    const cValue = await this.isChecked();\n+    if (cValue) {\n+      console.log('going to uncheck the checkbox');", "originalCommit": "dacabff376b82a2c1dbc417549d35293a49670c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NTUzNw==", "url": "https://github.com/all-of-us/workbench/pull/3132#discussion_r379665537", "bodyText": "Does this still debug statement still need to be there?", "author": "als364", "createdAt": "2020-02-14T22:03:24Z", "path": "e2e/driver/AouElement.ts", "diffHunk": "@@ -1,75 +1,115 @@\n-import {ClickOptions, ElementHandle, Page} from 'puppeteer';\n+import { ElementHandle, Page } from 'puppeteer';\n \n export default class AouElement {\n+\n   public eHandle: ElementHandle;\n \n   constructor(handle: ElementHandle) {\n     this.eHandle = handle;\n   }\n \n-  public async getProperty(property: string): Promise<unknown> {\n-    return await (await this.eHandle.getProperty(property)).jsonValue();\n-  }\n-\n-   /**\n-    * Cannot get attribute directly from a ElementHandle.\n-    * If the attribute have property counterparts, use getProperty function.\n-    */\n-  public async getAttribute(page: Page) {\n-    return await page.evaluate(link => link.getAttribute('href'), this.eHandle,);\n+  public async getProp(property: string): Promise<unknown> {\n+    const prop = await this.eHandle.getProperty(property);\n+    console.log(`getProp(${property}) function: ${await prop.jsonValue()}`);\n+    return await prop.jsonValue();\n   }\n \n   /**\n-   * Get the element attribute value.\n-   * @param {Page} page\n-   * @param {ElementHandle} element\n-   * @param {string} attribute\n+   * Get attribute directly from a ElementHandle.\n+   * If the attribute have property counterparts, use getProperty function.\n    */\n-  public async getAttributeAlternative(page: Page, element: ElementHandle, attribute: string) {\n-    const handle = await page.evaluateHandle( (elem, attr) => {\n-      return elem.getAttribute(attr);\n-    }, element, attribute);\n-    return await handle.jsonValue();\n+  public async getAttr(attr: string): Promise<unknown> {\n+    const atr = await this.eHandle.getAttribute(attr);\n+    console.log(`getAttr(${attr}) function: ${atr}`);\n+    return atr;\n   }\n \n-  public async click(options?: ClickOptions) {\n-    return (await this.eHandle.click(options));\n+  public async click() {\n+    await this.eHandle.asElement().click();\n   }\n \n-  public async isVisible() {\n+  public async focus() {\n+    return Promise.all([\n+      this.eHandle.focus(),\n+      this.eHandle.hover()\n+    ]);\n+  }\n+\n+  public async isVisible(): Promise<boolean> {\n     return (await this.eHandle.asElement().boxModel() !== null);\n   }\n \n-  public async exists() {\n+  public async exists(): Promise<boolean> {\n     return (await this.eHandle.asElement() !== null);\n   }\n \n   public async isCheckbox() {\n-    return (await this.getProperty('type') === 'checkbox')\n+    return (await this.getProp('type') === 'checkbox')\n+  }\n+\n+  public async isButton() {\n+    return (await this.getProp('type') === 'button')\n   }\n \n   public async check() {\n-    if (!!this.isChecked()) {\n-      this.click();\n+    const cValue = await this.isChecked();\n+    if (!cValue) {\n+      console.log('going to check the checkbox');\n+      await this.click();\n     }\n   }\n \n   public async unCheck() {\n-    if (this.isChecked()) {\n-      this.click();\n+    const cValue = await this.isChecked();\n+    if (cValue) {\n+      console.log('going to uncheck the checkbox');\n+      await this.click();\n     }\n   }\n \n-  public async isDisabled() {\n-    return await this.getProperty('disabled');\n+  public async isDisabled(): Promise<boolean> {\n+    return await this.getProp('disabled') === true;\n+  }\n+\n+  public async isReadOnly(): Promise<boolean> {\n+    return await this.getProp('readOnly') === true;\n+  }\n+\n+  public async value(): Promise<string> {\n+    const p = await this.getProp('value');\n+    if (typeof p === 'undefined') { return p; } else { return ''; }\n+  }\n+\n+  public async isChecked(): Promise<boolean> {\n+    const checkedProp = await this.getProp('checked');\n+    console.log('isChecked function returned: ' + checkedProp);", "originalCommit": "dacabff376b82a2c1dbc417549d35293a49670c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "48643ee49bbd27f74972d510d99d8fc93f94e875", "url": "https://github.com/all-of-us/workbench/commit/48643ee49bbd27f74972d510d99d8fc93f94e875", "message": "pr feedback", "committedDate": "2020-02-14T22:38:45Z", "type": "commit"}]}