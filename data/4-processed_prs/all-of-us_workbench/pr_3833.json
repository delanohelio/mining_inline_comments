{"pr_number": 3833, "pr_title": "[no ticket][risk=no] Puppeteer: modal clickButton function with optional waitFor parameters", "pr_createdAt": "2020-07-27T18:56:02Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3833", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUwODk4MA==", "url": "https://github.com/all-of-us/workbench/pull/3833#discussion_r464508980", "bodyText": "promisesArray needs the spread operator, otherwise the Promise.all will resolve after button.click", "author": "petesantos", "createdAt": "2020-08-03T16:02:31Z", "path": "e2e/app/component/modal.ts", "diffHunk": "@@ -39,10 +39,26 @@ export default class Modal extends Container {\n     return modalText.toString();\n   }\n \n-  async clickButton(buttonLabel: LinkText): Promise<void> {\n+  /**\n+   * Click a button.\n+   * @param {string} buttonLabel The button text label.\n+   * @param waitOptions Wait for navigation or/and modal close after click button.\n+   */\n+  async clickButton(buttonLabel: LinkText, waitOptions: {waitForNav?: boolean, waitForClose?: boolean} = {}): Promise<void> {\n+    const { waitForNav = false, waitForClose = false } = waitOptions;\n     const button = await this.waitForButton(buttonLabel);\n     await button.waitUntilEnabled();\n-    return button.click();\n+    const promisesArray = [];\n+    if (waitForClose) {\n+      promisesArray.push(this.waitUntilClose());\n+    }\n+    if (waitForNav) {\n+      promisesArray.push(this.page.waitForNavigation({waitUntil: ['domcontentloaded', 'networkidle0']}));\n+    }\n+    await Promise.all([\n+      promisesArray,", "originalCommit": "924e3cb7615d75d449a5060670968b8de01c8a9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxMDc3NA==", "url": "https://github.com/all-of-us/workbench/pull/3833#discussion_r464510774", "bodyText": "nit: Would setting the default/false values in the signature work, simplifying the code a bit?", "author": "petesantos", "createdAt": "2020-08-03T16:05:42Z", "path": "e2e/app/component/modal.ts", "diffHunk": "@@ -39,10 +39,26 @@ export default class Modal extends Container {\n     return modalText.toString();\n   }\n \n-  async clickButton(buttonLabel: LinkText): Promise<void> {\n+  /**\n+   * Click a button.\n+   * @param {string} buttonLabel The button text label.\n+   * @param waitOptions Wait for navigation or/and modal close after click button.\n+   */\n+  async clickButton(buttonLabel: LinkText, waitOptions: {waitForNav?: boolean, waitForClose?: boolean} = {}): Promise<void> {\n+    const { waitForNav = false, waitForClose = false } = waitOptions;", "originalCommit": "924e3cb7615d75d449a5060670968b8de01c8a9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxNzA2Mg==", "url": "https://github.com/all-of-us/workbench/pull/3833#discussion_r464517062", "bodyText": "Did anyone use the waitUntilClosed parameter / should this continue to be passed through?", "author": "petesantos", "createdAt": "2020-08-03T16:16:40Z", "path": "e2e/app/page/cohort-criteria-modal.ts", "diffHunk": "@@ -123,12 +123,8 @@ export default class CohortCriteriaModal extends Modal {\n   /**\n    * Click FINISH button.\n    */\n-  async clickFinishButton(opt: {waitUntilClosed?: boolean} = {}): Promise<void> {\n-    const { waitUntilClosed = true } = opt\n-    await this.clickButton(LinkText.Finish);\n-    if (waitUntilClosed) {\n-      await this.waitUntilClose();\n-    }\n+  async clickFinishButton(): Promise<void> {", "originalCommit": "924e3cb7615d75d449a5060670968b8de01c8a9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyMDM3Mg==", "url": "https://github.com/all-of-us/workbench/pull/3833#discussion_r464520372", "bodyText": "TOL - without the context of this change I am not sure why the additional code is no longer needed", "author": "petesantos", "createdAt": "2020-08-03T16:22:33Z", "path": "e2e/app/page/conceptset-page.ts", "diffHunk": "@@ -35,11 +35,7 @@ export default class ConceptsetPage extends AuthenticatedPage {\n   async openCopyToWorkspaceModal(conceptName: string): Promise<ConceptsetCopyModal> {\n     const ellipsis = this.getEllipsisMenu(conceptName);\n     await ellipsis.clickAction(EllipsisMenuAction.CopyToAnotherWorkspace, {waitForNav: false});\n-    const modal = new ConceptsetCopyModal(this.page);\n-    await modal.waitUntilVisible();\n-    await modal.getDestinationTextbox();\n-    await modal.getNameTextbox();\n-    return modal;\n+    return new ConceptsetCopyModal(this.page);", "originalCommit": "924e3cb7615d75d449a5060670968b8de01c8a9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMjIzMw==", "url": "https://github.com/all-of-us/workbench/pull/3833#discussion_r464532233", "bodyText": "What are your thoughts on an alternative approach - something like:\n    await Promise.all( fp.flow(\n      fp.filter('shouldWait'),\n      fp.map(({waitFn}) => waitFn()),\n      fp.concat([button.click()])\n    )([\n      {shouldWait: waitForNav, waitFn: () => this.page.waitForNavigation({waitUntil: ['domcontentloaded', 'networkidle0']})}, \n      {shouldWait: waitForClose, waitFn: () => this.waitUntilClose()}\n      ])\n\u00a0\u00a0)\nThis will prevent the need for creating and mutating the array an also eliminates the imperative conditionals. If you want to add a new option later it would just be an addition to the array.", "author": "petesantos", "createdAt": "2020-08-03T16:44:22Z", "path": "e2e/app/component/modal.ts", "diffHunk": "@@ -39,10 +39,26 @@ export default class Modal extends Container {\n     return modalText.toString();\n   }\n \n-  async clickButton(buttonLabel: LinkText): Promise<void> {\n+  /**\n+   * Click a button.\n+   * @param {string} buttonLabel The button text label.\n+   * @param waitOptions Wait for navigation or/and modal close after click button.\n+   */\n+  async clickButton(buttonLabel: LinkText, waitOptions: {waitForNav?: boolean, waitForClose?: boolean} = {}): Promise<void> {\n+    const { waitForNav = false, waitForClose = false } = waitOptions;\n     const button = await this.waitForButton(buttonLabel);\n     await button.waitUntilEnabled();\n-    return button.click();\n+    const promisesArray = [];\n+    if (waitForClose) {\n+      promisesArray.push(this.waitUntilClose());\n+    }\n+    if (waitForNav) {\n+      promisesArray.push(this.page.waitForNavigation({waitUntil: ['domcontentloaded', 'networkidle0']}));\n+    }\n+    await Promise.all([\n+      promisesArray,", "originalCommit": "924e3cb7615d75d449a5060670968b8de01c8a9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "70ea0ba4adfe04cf4c9db61e1353f88ae3c202fe", "url": "https://github.com/all-of-us/workbench/commit/70ea0ba4adfe04cf4c9db61e1353f88ae3c202fe", "message": "dialog button with optional waitFor parameters", "committedDate": "2020-08-03T21:39:03Z", "type": "commit"}, {"oid": "8857ba12b955a2ded82b5f1ca684d5575e9ab9d3", "url": "https://github.com/all-of-us/workbench/commit/8857ba12b955a2ded82b5f1ca684d5575e9ab9d3", "message": "minor", "committedDate": "2020-08-03T21:39:03Z", "type": "commit"}, {"oid": "4e68deac823116211f4bc141eeaa93fe272cebe5", "url": "https://github.com/all-of-us/workbench/commit/4e68deac823116211f4bc141eeaa93fe272cebe5", "message": "PR feedback", "committedDate": "2020-08-03T21:39:03Z", "type": "commit"}, {"oid": "b6f3db3fca58e5c683ce2c222ad310e9ca110fd4", "url": "https://github.com/all-of-us/workbench/commit/b6f3db3fca58e5c683ce2c222ad310e9ca110fd4", "message": "PR feedback", "committedDate": "2020-08-03T21:39:03Z", "type": "commit"}, {"oid": "b6f3db3fca58e5c683ce2c222ad310e9ca110fd4", "url": "https://github.com/all-of-us/workbench/commit/b6f3db3fca58e5c683ce2c222ad310e9ca110fd4", "message": "PR feedback", "committedDate": "2020-08-03T21:39:03Z", "type": "forcePushed"}]}