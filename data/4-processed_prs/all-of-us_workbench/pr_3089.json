{"pr_number": 3089, "pr_title": "[RW-4160][risk=no] Institution API+CRUD", "pr_createdAt": "2020-02-04T22:58:58Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3089", "timeline": [{"oid": "bf5cb659209da82cd9083e280b66dfca7587ff5c", "url": "https://github.com/all-of-us/workbench/commit/bf5cb659209da82cd9083e280b66dfca7587ff5c", "message": "RW-4160 Institution DB and API", "committedDate": "2020-02-04T18:02:30Z", "type": "commit"}, {"oid": "a3dacc222eb04d3b9e44376252baac77b9a4b61c", "url": "https://github.com/all-of-us/workbench/commit/a3dacc222eb04d3b9e44376252baac77b9a4b61c", "message": "Squash a day's worth of responses to review comments:\n\nrename to dbId\n\nconvert to sets where possible\n\nhashcode, equals, splatfix\n\ntest improvements and a bug fix\n\nMake findOneByApiId Optional\n\nlongName -> displayNAme\n\nremove unnecessary setters/getters\n\ntighten the Swagger a bit\n\nthis doesn't need to be a provider\n\npush NotFoundException up to Controller level\n\nbetter pattern for nulls\n\nsilly NotNull\n\napiId -> shortName\n\nupdated organizationTypeOtherText description\n\nuse assertThat().isEmpty()\n\norElse\n\nlint", "committedDate": "2020-02-04T18:02:35Z", "type": "commit"}, {"oid": "fc812b27195e089d7b8cdb1678a910f842d42d4a", "url": "https://github.com/all-of-us/workbench/commit/fc812b27195e089d7b8cdb1678a910f842d42d4a", "message": "liquibase", "committedDate": "2020-02-04T20:24:33Z", "type": "commit"}, {"oid": "0704b96521a37764ff0ef857ac0c4d1f50718de0", "url": "https://github.com/all-of-us/workbench/commit/0704b96521a37764ff0ef857ac0c4d1f50718de0", "message": "short -> tinyint", "committedDate": "2020-02-04T20:36:50Z", "type": "commit"}, {"oid": "0ecd1a254b3933c44a88d1036acdd98b60a77de6", "url": "https://github.com/all-of-us/workbench/commit/0ecd1a254b3933c44a88d1036acdd98b60a77de6", "message": "TIL Controllers need to live in the api package for Spring to find them", "committedDate": "2020-02-04T22:02:12Z", "type": "commit"}, {"oid": "7f38d7b3222ace411fa53756332cea8a9b1e62af", "url": "https://github.com/all-of-us/workbench/commit/7f38d7b3222ace411fa53756332cea8a9b1e62af", "message": "@AuthorityRequired({Authority.INSTITUTION_ADMIN})", "committedDate": "2020-02-04T22:29:46Z", "type": "commit"}, {"oid": "235acbc008c873bd4cdff1d2a496a87e10f822fb", "url": "https://github.com/all-of-us/workbench/commit/235acbc008c873bd4cdff1d2a496a87e10f822fb", "message": "fill in TODOs", "committedDate": "2020-02-04T22:33:48Z", "type": "commit"}, {"oid": "fbc5437add5f9e562656595a9e6222a46c79af12", "url": "https://github.com/all-of-us/workbench/commit/fbc5437add5f9e562656595a9e6222a46c79af12", "message": "TIL: All Controllers must be located in the `org.pmiops.workbench.api` package.", "committedDate": "2020-02-05T01:11:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMjEzOA==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375012138", "bodyText": "For checking Optionals", "author": "jmthibault79", "createdAt": "2020-02-05T01:13:33Z", "path": "api/build.gradle", "diffHunk": "@@ -470,6 +470,7 @@ dependencies {\n   testCompile \"com.google.appengine:appengine-api-stubs:${GAE_VERSION}\"\n   testCompile \"com.google.appengine:appengine-tools-sdk:${GAE_VERSION}\"\n   testCompile 'com.google.truth:truth:0.42'\n+  testCompile 'com.google.truth.extensions:truth-java8-extension:1.0.1'", "originalCommit": "235acbc008c873bd4cdff1d2a496a87e10f822fb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMjIzMA==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375012230", "bodyText": "All of these are arbitrarily 80.  Your thoughts?", "author": "jmthibault79", "createdAt": "2020-02-05T01:13:59Z", "path": "api/db/changelog/db.changelog-125-institution-tables.xml", "diffHunk": "@@ -0,0 +1,61 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<databaseChangeLog\n+  xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog/1.9\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog/1.9\n+                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd\">\n+  <changeSet author=\"thibault\" id=\"changelog-125-institution-tables\">\n+\n+    <createTable tableName=\"institution\">\n+      <column name=\"institution_id\" type=\"bigint\" autoIncrement=\"true\">\n+        <constraints primaryKey=\"true\" nullable=\"false\"/>\n+      </column>\n+      <column name=\"short_name\" type=\"VARCHAR(80)\">", "originalCommit": "235acbc008c873bd4cdff1d2a496a87e10f822fb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMjk2OQ==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375012969", "bodyText": "generated these because we use them in Sets", "author": "jmthibault79", "createdAt": "2020-02-05T01:16:46Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailAddress.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_address\")\n+public class DbInstitutionEmailAddress {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_address_id\")\n+  private long institutionEmailAddressId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_address\", nullable = false)\n+  private String emailAddress;\n+\n+  public DbInstitutionEmailAddress() {}\n+\n+  public DbInstitutionEmailAddress(DbInstitution institution, String emailAddress) {\n+    this.institution = institution;\n+    this.emailAddress = emailAddress;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailAddress() {\n+    return emailAddress;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {", "originalCommit": "fbc5437add5f9e562656595a9e6222a46c79af12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxODczOA==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375418738", "bodyText": "Nice, i typically always implement equals/hashcode for all jpa model objects, but sometimes object equality is enough.", "author": "freemabd", "createdAt": "2020-02-05T18:05:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMjk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMzkxNw==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375013917", "bodyText": "5 and 6 are unrelated to this PR: making educated guesses here, for completeness", "author": "jmthibault79", "createdAt": "2020-02-05T01:20:18Z", "path": "api/src/main/resources/workbench.yaml", "diffHunk": "@@ -2454,6 +2541,9 @@ definitions:\n   #   3) ACCESS_CONTROL_ADMIN: This is actually basically a user admin authority, for people\n   #      to perform actions on a user's enabled status and manual verification.\n   #   4) FEATURED_WORKSPACE_ADMIN: Allows a user to publish workspaces\n+  #   5) COMMUNICATIONS_ADMIN: Allows a user to post a Status Alert banner", "originalCommit": "fbc5437add5f9e562656595a9e6222a46c79af12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29", "url": "https://github.com/all-of-us/workbench/commit/af0c354fff03b8c734393663d489e7f8af5f7b29", "message": "Don't need INSTITUTION_ADMIN Authority for GET", "committedDate": "2020-02-05T15:34:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTIxMg==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375419212", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return emailAddress.equals(that.emailAddress);\n          \n          \n            \n                return institutionEmailAddressId == that.institutionEmailAddressId \n          \n          \n            \n                       && institution.equals(that.institution)\n          \n          \n            \n                       && emailAddress.equals(that.emailAddress);", "author": "freemabd", "createdAt": "2020-02-05T18:06:46Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailAddress.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_address\")\n+public class DbInstitutionEmailAddress {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_address_id\")\n+  private long institutionEmailAddressId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_address\", nullable = false)\n+  private String emailAddress;\n+\n+  public DbInstitutionEmailAddress() {}\n+\n+  public DbInstitutionEmailAddress(DbInstitution institution, String emailAddress) {\n+    this.institution = institution;\n+    this.emailAddress = emailAddress;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailAddress() {\n+    return emailAddress;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof DbInstitutionEmailAddress)) {\n+      return false;\n+    }\n+\n+    DbInstitutionEmailAddress that = (DbInstitutionEmailAddress) o;\n+\n+    if (institutionEmailAddressId != that.institutionEmailAddressId) {\n+      return false;\n+    }\n+    if (!institution.equals(that.institution)) {\n+      return false;\n+    }\n+    return emailAddress.equals(that.emailAddress);", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTY4Nw==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375419687", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return result;\n          \n          \n            \n                return Objects.hash(\n          \n          \n            \n                       institutionEmailAddressId,\n          \n          \n            \n                       institution,\n          \n          \n            \n                       emailAddress);", "author": "freemabd", "createdAt": "2020-02-05T18:07:47Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailAddress.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_address\")\n+public class DbInstitutionEmailAddress {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_address_id\")\n+  private long institutionEmailAddressId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_address\", nullable = false)\n+  private String emailAddress;\n+\n+  public DbInstitutionEmailAddress() {}\n+\n+  public DbInstitutionEmailAddress(DbInstitution institution, String emailAddress) {\n+    this.institution = institution;\n+    this.emailAddress = emailAddress;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailAddress() {\n+    return emailAddress;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof DbInstitutionEmailAddress)) {\n+      return false;\n+    }\n+\n+    DbInstitutionEmailAddress that = (DbInstitutionEmailAddress) o;\n+\n+    if (institutionEmailAddressId != that.institutionEmailAddressId) {\n+      return false;\n+    }\n+    if (!institution.equals(that.institution)) {\n+      return false;\n+    }\n+    return emailAddress.equals(that.emailAddress);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = (int) (institutionEmailAddressId ^ (institutionEmailAddressId >>> 32));\n+    result = 31 * result + institution.hashCode();\n+    result = 31 * result + emailAddress.hashCode();\n+    return result;", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTk5NA==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375419994", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return result;\n          \n          \n            \n                return Objects.hash(\n          \n          \n            \n                       institutionEmailDomainId,\n          \n          \n            \n                       institution,\n          \n          \n            \n                       emailDomain);", "author": "freemabd", "createdAt": "2020-02-05T18:08:25Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailDomain.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_domain\")\n+public class DbInstitutionEmailDomain {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_domain_id\")\n+  private long institutionEmailDomainId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_domain\", nullable = false)\n+  private String emailDomain;\n+\n+  public DbInstitutionEmailDomain() {}\n+\n+  public DbInstitutionEmailDomain(DbInstitution institution, String emailDomain) {\n+    this.institution = institution;\n+    this.emailDomain = emailDomain;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailDomain() {\n+    return emailDomain;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof DbInstitutionEmailDomain)) {\n+      return false;\n+    }\n+\n+    DbInstitutionEmailDomain that = (DbInstitutionEmailDomain) o;\n+\n+    if (institutionEmailDomainId != that.institutionEmailDomainId) {\n+      return false;\n+    }\n+    if (!institution.equals(that.institution)) {\n+      return false;\n+    }\n+    return emailDomain.equals(that.emailDomain);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = (int) (institutionEmailDomainId ^ (institutionEmailDomainId >>> 32));\n+    result = 31 * result + institution.hashCode();\n+    result = 31 * result + emailDomain.hashCode();\n+    return result;", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMDMwOQ==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375420309", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return emailDomain.equals(that.emailDomain);\n          \n          \n            \n                return institutionEmailDomainId == that.institutionEmailDomainId\n          \n          \n            \n                       && institution.equals(that.institution)\n          \n          \n            \n                       && emailDomain.equals(that.emailDomain);", "author": "freemabd", "createdAt": "2020-02-05T18:08:59Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailDomain.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_domain\")\n+public class DbInstitutionEmailDomain {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_domain_id\")\n+  private long institutionEmailDomainId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_domain\", nullable = false)\n+  private String emailDomain;\n+\n+  public DbInstitutionEmailDomain() {}\n+\n+  public DbInstitutionEmailDomain(DbInstitution institution, String emailDomain) {\n+    this.institution = institution;\n+    this.emailDomain = emailDomain;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailDomain() {\n+    return emailDomain;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof DbInstitutionEmailDomain)) {\n+      return false;\n+    }\n+\n+    DbInstitutionEmailDomain that = (DbInstitutionEmailDomain) o;\n+\n+    if (institutionEmailDomainId != that.institutionEmailDomainId) {\n+      return false;\n+    }\n+    if (!institution.equals(that.institution)) {\n+      return false;\n+    }\n+    return emailDomain.equals(that.emailDomain);", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMDczMg==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375420732", "bodyText": "I think we decided as a team to not use wildcards in import statements. Assuming your using Intellij? Setting for this.", "author": "freemabd", "createdAt": "2020-02-05T18:09:46Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbStorageEnums.java", "diffHunk": "@@ -4,17 +4,7 @@\n import com.google.common.collect.ImmutableBiMap;\n import org.pmiops.workbench.db.model.DbBillingProjectBufferEntry.BufferEntryStatus;\n import org.pmiops.workbench.db.model.DbWorkspace.BillingMigrationStatus;\n-import org.pmiops.workbench.model.AnnotationType;\n-import org.pmiops.workbench.model.Authority;\n-import org.pmiops.workbench.model.BillingAccountType;\n-import org.pmiops.workbench.model.BillingStatus;\n-import org.pmiops.workbench.model.CohortStatus;\n-import org.pmiops.workbench.model.Degree;\n-import org.pmiops.workbench.model.EmailVerificationStatus;\n-import org.pmiops.workbench.model.ReviewStatus;\n-import org.pmiops.workbench.model.SpecificPopulationEnum;\n-import org.pmiops.workbench.model.WorkspaceAccessLevel;\n-import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.model.*;", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMTE0MA==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375421140", "bodyText": "Why are using Provider and not injecting the dao directly? Injecting the dao directly should be sufficient.", "author": "freemabd", "createdAt": "2020-02-05T18:10:38Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.pmiops.workbench.institution;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailAddressDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailDomainDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class InstitutionServiceImpl implements InstitutionService {\n+\n+  private final Provider<InstitutionDao> institutionDaoProvider;\n+  private final Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider;\n+  private final Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider;\n+\n+  @Autowired\n+  InstitutionServiceImpl(\n+      Provider<InstitutionDao> institutionDaoProvider,\n+      Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider,\n+      Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider) {", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMTkzOA==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375511938", "bodyText": "Out of ignorance.  Updated.", "author": "jmthibault79", "createdAt": "2020-02-05T21:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMTE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMjE4MQ==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375422181", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDaoProvider.get().save(dbClass);\n          \n          \n            \n                dbClass = institutionDaoProvider.get().save(dbClass);\n          \n      \n    \n    \n  \n\nSpring recommends that you should use the return object as it may be different altogether: https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/CrudRepository.html#save-S-", "author": "freemabd", "createdAt": "2020-02-05T18:12:38Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.pmiops.workbench.institution;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailAddressDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailDomainDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class InstitutionServiceImpl implements InstitutionService {\n+\n+  private final Provider<InstitutionDao> institutionDaoProvider;\n+  private final Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider;\n+  private final Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider;\n+\n+  @Autowired\n+  InstitutionServiceImpl(\n+      Provider<InstitutionDao> institutionDaoProvider,\n+      Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider,\n+      Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider) {\n+    this.institutionDaoProvider = institutionDaoProvider;\n+    this.institutionEmailDomainDaoProvider = institutionEmailDomainDaoProvider;\n+    this.institutionEmailAddressDaoProvider = institutionEmailAddressDaoProvider;\n+  }\n+\n+  @Override\n+  public List<Institution> getInstitutions() {\n+    return StreamSupport.stream(institutionDaoProvider.get().findAll().spliterator(), false)\n+        .map(this::toModelClass)\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  public Optional<Institution> getInstitution(final String id) {\n+    return getDbInstitution(id).map(this::toModelClass);\n+  }\n+\n+  @Override\n+  public Institution createInstitution(final Institution institutionToCreate) {\n+    return toModelClass(saveInstitution(institutionToCreate, new DbInstitution()));\n+  }\n+\n+  @Override\n+  public boolean deleteInstitution(final String id) {\n+    return getDbInstitution(id)\n+        .map(\n+            dbInst -> {\n+              institutionDaoProvider.get().delete(dbInst);\n+              return true;\n+            })\n+        .orElse(false);\n+  }\n+\n+  @Override\n+  public Optional<Institution> updateInstitution(\n+      final String id, final Institution institutionToUpdate) {\n+    return getDbInstitution(id)\n+        .map(dbInst -> toModelClass(saveInstitution(institutionToUpdate, dbInst)));\n+  }\n+\n+  private Optional<DbInstitution> getDbInstitution(String id) {\n+    return institutionDaoProvider.get().findOneByShortName(id);\n+  }\n+\n+  private DbInstitution saveInstitution(final Institution modelClass, final DbInstitution dbClass) {\n+    dbClass.setShortName(modelClass.getShortName());\n+    dbClass.setDisplayName(modelClass.getDisplayName());\n+    dbClass.setOrganizationTypeEnum(\n+        DbStorageEnums.organizationTypeToStorage(modelClass.getOrganizationTypeEnum()));\n+    dbClass.setOrganizationTypeOtherText(modelClass.getOrganizationTypeOtherText());\n+\n+    // save so the domain and address DAOs have something to reference\n+    institutionDaoProvider.get().save(dbClass);", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ3MTk0NQ==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375471945", "bodyText": "wow, yikes", "author": "jmthibault79", "createdAt": "2020-02-05T19:48:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMjE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMzQ1Mw==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375423453", "bodyText": "May want to use the saved Iterable here as well, before setting email domains below.", "author": "freemabd", "createdAt": "2020-02-05T18:15:03Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.pmiops.workbench.institution;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailAddressDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailDomainDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class InstitutionServiceImpl implements InstitutionService {\n+\n+  private final Provider<InstitutionDao> institutionDaoProvider;\n+  private final Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider;\n+  private final Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider;\n+\n+  @Autowired\n+  InstitutionServiceImpl(\n+      Provider<InstitutionDao> institutionDaoProvider,\n+      Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider,\n+      Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider) {\n+    this.institutionDaoProvider = institutionDaoProvider;\n+    this.institutionEmailDomainDaoProvider = institutionEmailDomainDaoProvider;\n+    this.institutionEmailAddressDaoProvider = institutionEmailAddressDaoProvider;\n+  }\n+\n+  @Override\n+  public List<Institution> getInstitutions() {\n+    return StreamSupport.stream(institutionDaoProvider.get().findAll().spliterator(), false)\n+        .map(this::toModelClass)\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  public Optional<Institution> getInstitution(final String id) {\n+    return getDbInstitution(id).map(this::toModelClass);\n+  }\n+\n+  @Override\n+  public Institution createInstitution(final Institution institutionToCreate) {\n+    return toModelClass(saveInstitution(institutionToCreate, new DbInstitution()));\n+  }\n+\n+  @Override\n+  public boolean deleteInstitution(final String id) {\n+    return getDbInstitution(id)\n+        .map(\n+            dbInst -> {\n+              institutionDaoProvider.get().delete(dbInst);\n+              return true;\n+            })\n+        .orElse(false);\n+  }\n+\n+  @Override\n+  public Optional<Institution> updateInstitution(\n+      final String id, final Institution institutionToUpdate) {\n+    return getDbInstitution(id)\n+        .map(dbInst -> toModelClass(saveInstitution(institutionToUpdate, dbInst)));\n+  }\n+\n+  private Optional<DbInstitution> getDbInstitution(String id) {\n+    return institutionDaoProvider.get().findOneByShortName(id);\n+  }\n+\n+  private DbInstitution saveInstitution(final Institution modelClass, final DbInstitution dbClass) {\n+    dbClass.setShortName(modelClass.getShortName());\n+    dbClass.setDisplayName(modelClass.getDisplayName());\n+    dbClass.setOrganizationTypeEnum(\n+        DbStorageEnums.organizationTypeToStorage(modelClass.getOrganizationTypeEnum()));\n+    dbClass.setOrganizationTypeOtherText(modelClass.getOrganizationTypeOtherText());\n+\n+    // save so the domain and address DAOs have something to reference\n+    institutionDaoProvider.get().save(dbClass);\n+\n+    final InstitutionEmailDomainDao domainDao = institutionEmailDomainDaoProvider.get();\n+    domainDao.deleteAllByInstitution(dbClass);\n+\n+    Optional.ofNullable(modelClass.getEmailDomains())\n+        .ifPresent(\n+            domains -> {\n+              Set<DbInstitutionEmailDomain> dbDomains =\n+                  domains.stream()\n+                      .map(domain -> new DbInstitutionEmailDomain(dbClass, domain))\n+                      .collect(Collectors.toSet());\n+              domainDao.save(dbDomains);", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMzYyMg==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375423622", "bodyText": "Another save here.", "author": "freemabd", "createdAt": "2020-02-05T18:15:24Z", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.pmiops.workbench.institution;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailAddressDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailDomainDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class InstitutionServiceImpl implements InstitutionService {\n+\n+  private final Provider<InstitutionDao> institutionDaoProvider;\n+  private final Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider;\n+  private final Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider;\n+\n+  @Autowired\n+  InstitutionServiceImpl(\n+      Provider<InstitutionDao> institutionDaoProvider,\n+      Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider,\n+      Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider) {\n+    this.institutionDaoProvider = institutionDaoProvider;\n+    this.institutionEmailDomainDaoProvider = institutionEmailDomainDaoProvider;\n+    this.institutionEmailAddressDaoProvider = institutionEmailAddressDaoProvider;\n+  }\n+\n+  @Override\n+  public List<Institution> getInstitutions() {\n+    return StreamSupport.stream(institutionDaoProvider.get().findAll().spliterator(), false)\n+        .map(this::toModelClass)\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  public Optional<Institution> getInstitution(final String id) {\n+    return getDbInstitution(id).map(this::toModelClass);\n+  }\n+\n+  @Override\n+  public Institution createInstitution(final Institution institutionToCreate) {\n+    return toModelClass(saveInstitution(institutionToCreate, new DbInstitution()));\n+  }\n+\n+  @Override\n+  public boolean deleteInstitution(final String id) {\n+    return getDbInstitution(id)\n+        .map(\n+            dbInst -> {\n+              institutionDaoProvider.get().delete(dbInst);\n+              return true;\n+            })\n+        .orElse(false);\n+  }\n+\n+  @Override\n+  public Optional<Institution> updateInstitution(\n+      final String id, final Institution institutionToUpdate) {\n+    return getDbInstitution(id)\n+        .map(dbInst -> toModelClass(saveInstitution(institutionToUpdate, dbInst)));\n+  }\n+\n+  private Optional<DbInstitution> getDbInstitution(String id) {\n+    return institutionDaoProvider.get().findOneByShortName(id);\n+  }\n+\n+  private DbInstitution saveInstitution(final Institution modelClass, final DbInstitution dbClass) {\n+    dbClass.setShortName(modelClass.getShortName());\n+    dbClass.setDisplayName(modelClass.getDisplayName());\n+    dbClass.setOrganizationTypeEnum(\n+        DbStorageEnums.organizationTypeToStorage(modelClass.getOrganizationTypeEnum()));\n+    dbClass.setOrganizationTypeOtherText(modelClass.getOrganizationTypeOtherText());\n+\n+    // save so the domain and address DAOs have something to reference\n+    institutionDaoProvider.get().save(dbClass);\n+\n+    final InstitutionEmailDomainDao domainDao = institutionEmailDomainDaoProvider.get();\n+    domainDao.deleteAllByInstitution(dbClass);\n+\n+    Optional.ofNullable(modelClass.getEmailDomains())\n+        .ifPresent(\n+            domains -> {\n+              Set<DbInstitutionEmailDomain> dbDomains =\n+                  domains.stream()\n+                      .map(domain -> new DbInstitutionEmailDomain(dbClass, domain))\n+                      .collect(Collectors.toSet());\n+              domainDao.save(dbDomains);\n+              dbClass.setEmailDomains(dbDomains);\n+            });\n+\n+    final InstitutionEmailAddressDao addrDao = institutionEmailAddressDaoProvider.get();\n+    addrDao.deleteAllByInstitution(dbClass);\n+\n+    Optional.ofNullable(modelClass.getEmailAddresses())\n+        .ifPresent(\n+            addresses -> {\n+              Set<DbInstitutionEmailAddress> dbAddrs =\n+                  addresses.stream()\n+                      .map(address -> new DbInstitutionEmailAddress(dbClass, address))\n+                      .collect(Collectors.toSet());\n+              addrDao.save(dbAddrs);", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNDMzNA==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375424334", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDao.save(testInst);\n          \n          \n            \n                testInst = institutionDao.save(testInst);", "author": "freemabd", "createdAt": "2020-02-05T18:16:40Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+\n+  @Test\n+  public void testDao() {\n+    final DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n+    institutionDao.save(testInst);", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNTE2Mg==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375425162", "bodyText": "I would add an annotation for\n@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)\nThis will clean all spring context and in-memory db changes between tests.", "author": "freemabd", "createdAt": "2020-02-05T18:18:15Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionDaoTest {", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNzk5Nw==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375427997", "bodyText": "Would it make sense to have separate tests for save, findOneByShortName , findAll and delete? Instead of having everything in one test. Also, does it makes sense to add a method for data setup that runs between each test? Something like:\n@Before\n public void setUp() {\nfinal DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n institutionDao.save(testInst);\n}", "author": "freemabd", "createdAt": "2020-02-05T18:23:49Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+\n+  @Test\n+  public void testDao() {", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyOTQ4OQ==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375429489", "bodyText": "@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)", "author": "freemabd", "createdAt": "2020-02-05T18:26:48Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailAddressDaoTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionEmailAddressDaoTest {", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyOTcwMg==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375429702", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDao.save(testInst);\n          \n          \n            \n                testInst = institutionDao.save(testInst);", "author": "freemabd", "createdAt": "2020-02-05T18:27:12Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailAddressDaoTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionEmailAddressDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+  @Autowired InstitutionEmailAddressDao institutionEmailAddressDao;\n+\n+  @Test\n+  public void testDao() {\n+    final DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n+    institutionDao.save(testInst);", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyOTg3OA==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375429878", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDao.save(otherInst);\n          \n          \n            \n                otherInst = institutionDao.save(otherInst);", "author": "freemabd", "createdAt": "2020-02-05T18:27:34Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailAddressDaoTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionEmailAddressDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+  @Autowired InstitutionEmailAddressDao institutionEmailAddressDao;\n+\n+  @Test\n+  public void testDao() {\n+    final DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n+    institutionDao.save(testInst);\n+    assertThat(institutionDao.findAll()).hasSize(1);\n+\n+    final DbInstitution otherInst = new DbInstitution(\"NIH\", \"The National Institute of Health\");\n+    institutionDao.save(otherInst);", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMDU2OA==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375430568", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDao.save(testInst);\n          \n          \n            \n                testInst = institutionDao.save(testInst);", "author": "freemabd", "createdAt": "2020-02-05T18:28:55Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+\n+  @Test\n+  public void testDao() {\n+    final DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n+    institutionDao.save(testInst);\n+    assertThat(institutionDao.findOneByShortName(\"Broad\")).isEqualTo(Optional.of(testInst));\n+    assertThat(institutionDao.findAll()).hasSize(1);\n+\n+    // update existing entity, don't change size\n+\n+    testInst.setShortName(\"Verily\");\n+    institutionDao.save(testInst);", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMDc0MA==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375430740", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDao.save(testInst);\n          \n          \n            \n                testInst = institutionDao.save(testInst);", "author": "freemabd", "createdAt": "2020-02-05T18:29:14Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+\n+  @Test\n+  public void testDao() {\n+    final DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n+    institutionDao.save(testInst);\n+    assertThat(institutionDao.findOneByShortName(\"Broad\")).isEqualTo(Optional.of(testInst));\n+    assertThat(institutionDao.findAll()).hasSize(1);\n+\n+    // update existing entity, don't change size\n+\n+    testInst.setShortName(\"Verily\");\n+    institutionDao.save(testInst);\n+    assertThat(institutionDao.findAll()).hasSize(1);\n+    assertThat(institutionDao.findOneByShortName(\"Verily\")).isEqualTo(Optional.of(testInst));\n+\n+    testInst.setDisplayName(\"Yea, Verily\");\n+    institutionDao.save(testInst);", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMDk0Mg==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375430942", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDao.save(otherInst);\n          \n          \n            \n                otherInst = institutionDao.save(otherInst);", "author": "freemabd", "createdAt": "2020-02-05T18:29:34Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+\n+  @Test\n+  public void testDao() {\n+    final DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n+    institutionDao.save(testInst);\n+    assertThat(institutionDao.findOneByShortName(\"Broad\")).isEqualTo(Optional.of(testInst));\n+    assertThat(institutionDao.findAll()).hasSize(1);\n+\n+    // update existing entity, don't change size\n+\n+    testInst.setShortName(\"Verily\");\n+    institutionDao.save(testInst);\n+    assertThat(institutionDao.findAll()).hasSize(1);\n+    assertThat(institutionDao.findOneByShortName(\"Verily\")).isEqualTo(Optional.of(testInst));\n+\n+    testInst.setDisplayName(\"Yea, Verily\");\n+    institutionDao.save(testInst);\n+    assertThat(institutionDao.findAll()).hasSize(1);\n+    assertThat(institutionDao.findOneByShortName(\"Verily\")).isEqualTo(Optional.of(testInst));\n+\n+    final DbInstitution otherInst = new DbInstitution(\"VUMC\", \"Vanderbilt\");\n+    institutionDao.save(otherInst);", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMTI4Ng==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375431286", "bodyText": "@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)", "author": "freemabd", "createdAt": "2020-02-05T18:30:15Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailDomainDaoTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionEmailDomainDaoTest {", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMTY2Nw==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375431667", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDao.save(testInst);\n          \n          \n            \n                testInst = institutionDao.save(testInst);", "author": "freemabd", "createdAt": "2020-02-05T18:30:56Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailDomainDaoTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionEmailDomainDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+  @Autowired InstitutionEmailDomainDao institutionEmailDomainDao;\n+\n+  @Test\n+  public void testDao() {\n+    final DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n+    institutionDao.save(testInst);", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMTc4NQ==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375431785", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDao.save(otherInst);\n          \n          \n            \n                otherInst = institutionDao.save(otherInst);", "author": "freemabd", "createdAt": "2020-02-05T18:31:10Z", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailDomainDaoTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionEmailDomainDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+  @Autowired InstitutionEmailDomainDao institutionEmailDomainDao;\n+\n+  @Test\n+  public void testDao() {\n+    final DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n+    institutionDao.save(testInst);\n+    assertThat(institutionDao.findAll()).hasSize(1);\n+\n+    final DbInstitution otherInst = new DbInstitution(\"NIH\", \"The National Institute of Health\");\n+    institutionDao.save(otherInst);", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMzAzOA==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375433038", "bodyText": "@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)", "author": "freemabd", "createdAt": "2020-02-05T18:33:47Z", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.pmiops.workbench.institution;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionServiceTest {", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNDc3Ng==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375434776", "bodyText": "Again it feels like this test could benefit from a setup method that separates data setup from the test itself:\n@Before\npublic void setUp() {\n}\nAnd separating test cases for create, find, modify and delete make it clear and easier to update tests when needed.", "author": "freemabd", "createdAt": "2020-02-05T18:37:31Z", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.pmiops.workbench.institution;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionServiceTest {\n+  @Autowired private InstitutionService service;\n+\n+  @TestConfiguration\n+  @Import({InstitutionServiceImpl.class})\n+  static class Configuration {}\n+\n+  @Test\n+  public void test_InstitutionCRUD() {", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzMzg5Mw==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375533893", "bodyText": "yeah, great idea", "author": "jmthibault79", "createdAt": "2020-02-05T22:03:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNDc3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1MDIzNg==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375450236", "bodyText": "If you don't have a test config you can just remove it and move the @Import({InstitutionServiceImpl.class}) under @DataJpaTest", "author": "freemabd", "createdAt": "2020-02-05T19:07:29Z", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.pmiops.workbench.institution;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionServiceTest {\n+  @Autowired private InstitutionService service;\n+\n+  @TestConfiguration\n+  @Import({InstitutionServiceImpl.class})\n+  static class Configuration {}", "originalCommit": "af0c354fff03b8c734393663d489e7f8af5f7b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "17c22ee7195aa2fc4de090a2c85c6fb46b1f5225", "url": "https://github.com/all-of-us/workbench/commit/17c22ee7195aa2fc4de090a2c85c6fb46b1f5225", "message": "Update equals\n\nCo-Authored-By: Brian Freeman <brian.d.freeman@gmail.com>", "committedDate": "2020-02-05T19:40:25Z", "type": "commit"}, {"oid": "be9e4ab5068286075d0f59bdac1ad618df842aed", "url": "https://github.com/all-of-us/workbench/commit/be9e4ab5068286075d0f59bdac1ad618df842aed", "message": "Update hash\n\nCo-Authored-By: Brian Freeman <brian.d.freeman@gmail.com>", "committedDate": "2020-02-05T19:40:42Z", "type": "commit"}, {"oid": "b51cc992cda806d19f5c006ea20c15a07e189ef8", "url": "https://github.com/all-of-us/workbench/commit/b51cc992cda806d19f5c006ea20c15a07e189ef8", "message": "Update hash\n\nCo-Authored-By: Brian Freeman <brian.d.freeman@gmail.com>", "committedDate": "2020-02-05T19:40:58Z", "type": "commit"}, {"oid": "78e87c2dcc7a3f467f66b8c16590f66c1b9d1121", "url": "https://github.com/all-of-us/workbench/commit/78e87c2dcc7a3f467f66b8c16590f66c1b9d1121", "message": "Update equals\n\nCo-Authored-By: Brian Freeman <brian.d.freeman@gmail.com>", "committedDate": "2020-02-05T19:41:22Z", "type": "commit"}, {"oid": "ff53afbd85b10886604159ad71a114bcf847dbeb", "url": "https://github.com/all-of-us/workbench/commit/ff53afbd85b10886604159ad71a114bcf847dbeb", "message": "desplatify", "committedDate": "2020-02-05T19:45:39Z", "type": "commit"}, {"oid": "8ae34ccb38ffa3bf09d450ddb0fcb1115caceb53", "url": "https://github.com/all-of-us/workbench/commit/8ae34ccb38ffa3bf09d450ddb0fcb1115caceb53", "message": "these don't need to be providers", "committedDate": "2020-02-05T19:47:56Z", "type": "commit"}, {"oid": "ffe77f040ff1e5d5288f4fe81dd32ceda4ab4707", "url": "https://github.com/all-of-us/workbench/commit/ffe77f040ff1e5d5288f4fe81dd32ceda4ab4707", "message": "use the saved object after saving in the DAO, not the original\nlint", "committedDate": "2020-02-05T20:09:21Z", "type": "commit"}, {"oid": "317766427aa28a38449b491ee99567c290530bcd", "url": "https://github.com/all-of-us/workbench/commit/317766427aa28a38449b491ee99567c290530bcd", "message": "fix", "committedDate": "2020-02-05T20:14:14Z", "type": "commit"}, {"oid": "5fd3d25966d47afa0ff6b5cde01800dd001c5cdc", "url": "https://github.com/all-of-us/workbench/commit/5fd3d25966d47afa0ff6b5cde01800dd001c5cdc", "message": "better save() behavior", "committedDate": "2020-02-05T20:47:48Z", "type": "commit"}, {"oid": "0371760a9e10766fb386b703dda5471032e112d4", "url": "https://github.com/all-of-us/workbench/commit/0371760a9e10766fb386b703dda5471032e112d4", "message": "lint", "committedDate": "2020-02-05T20:48:42Z", "type": "commit"}, {"oid": "853af2b757cb5193b2963de4a5eb6935c3d0098e", "url": "https://github.com/all-of-us/workbench/commit/853af2b757cb5193b2963de4a5eb6935c3d0098e", "message": "DirtiesContext", "committedDate": "2020-02-05T21:03:26Z", "type": "commit"}, {"oid": "8bfbba15a3760b9a78d6c9ea2524c389c9c0003e", "url": "https://github.com/all-of-us/workbench/commit/8bfbba15a3760b9a78d6c9ea2524c389c9c0003e", "message": "fix save as set", "committedDate": "2020-02-05T21:13:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMzM3OA==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375513378", "bodyText": "Sorry.. i was meaning that you could remove these 2 if statements and replace with the return suggestion", "author": "freemabd", "createdAt": "2020-02-05T21:19:28Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailAddress.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import java.util.Objects;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_address\")\n+public class DbInstitutionEmailAddress {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_address_id\")\n+  private long institutionEmailAddressId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_address\", nullable = false)\n+  private String emailAddress;\n+\n+  public DbInstitutionEmailAddress() {}\n+\n+  public DbInstitutionEmailAddress(DbInstitution institution, String emailAddress) {\n+    this.institution = institution;\n+    this.emailAddress = emailAddress;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailAddress() {\n+    return emailAddress;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof DbInstitutionEmailAddress)) {\n+      return false;\n+    }\n+\n+    DbInstitutionEmailAddress that = (DbInstitutionEmailAddress) o;\n+\n+    if (institutionEmailAddressId != that.institutionEmailAddressId) {", "originalCommit": "8bfbba15a3760b9a78d6c9ea2524c389c9c0003e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzMjQ5Mg==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375532492", "bodyText": "So basically, you would replace\nif (institutionEmailAddressId != that.institutionEmailAddressId) {\nreturn false;\n}\nif (!institution.equals(that.institution)) {\nreturn false;\n}\nreturn emailAddress.equals(that.emailAddress);\nwith\nreturn institutionEmailAddressId == that.institutionEmailAddressId\n        && institution.equals(that.institution)\n        && emailAddress.equals(that.emailAddress);", "author": "freemabd", "createdAt": "2020-02-05T22:00:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMzM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzMzc4OA==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375533788", "bodyText": "Yes of course.  Merged these on autopilot.  Fixed now.", "author": "jmthibault79", "createdAt": "2020-02-05T22:03:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMzM3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMzY1Ng==", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375513656", "bodyText": "Same here, you can remove these 2 if statements", "author": "freemabd", "createdAt": "2020-02-05T21:20:06Z", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailDomain.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import java.util.Objects;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_domain\")\n+public class DbInstitutionEmailDomain {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_domain_id\")\n+  private long institutionEmailDomainId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_domain\", nullable = false)\n+  private String emailDomain;\n+\n+  public DbInstitutionEmailDomain() {}\n+\n+  public DbInstitutionEmailDomain(DbInstitution institution, String emailDomain) {\n+    this.institution = institution;\n+    this.emailDomain = emailDomain;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailDomain() {\n+    return emailDomain;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof DbInstitutionEmailDomain)) {\n+      return false;\n+    }\n+\n+    DbInstitutionEmailDomain that = (DbInstitutionEmailDomain) o;\n+\n+    if (institutionEmailDomainId != that.institutionEmailDomainId) {", "originalCommit": "8bfbba15a3760b9a78d6c9ea2524c389c9c0003e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "763b09c0a4d10d22948eeb99538967becc417bf3", "url": "https://github.com/all-of-us/workbench/commit/763b09c0a4d10d22948eeb99538967becc417bf3", "message": "can use `hasValue()` for Optional checking", "committedDate": "2020-02-05T21:20:56Z", "type": "commit"}, {"oid": "07c89aed746eb5367ab5c6aa3f0580ab2c1eb246", "url": "https://github.com/all-of-us/workbench/commit/07c89aed746eb5367ab5c6aa3f0580ab2c1eb246", "message": "more sensible equals", "committedDate": "2020-02-05T21:33:38Z", "type": "commit"}, {"oid": "fb6b4386bd7f519638960a13316b53fe90947713", "url": "https://github.com/all-of-us/workbench/commit/fb6b4386bd7f519638960a13316b53fe90947713", "message": "split up tests\nmissed a few ID -> shortName renamings", "committedDate": "2020-02-05T22:01:41Z", "type": "commit"}, {"oid": "c6c76d2aa4335e55d4bf49a5ad32298006fdba3b", "url": "https://github.com/all-of-us/workbench/commit/c6c76d2aa4335e55d4bf49a5ad32298006fdba3b", "message": "lambda all the things", "committedDate": "2020-02-05T22:13:16Z", "type": "commit"}]}