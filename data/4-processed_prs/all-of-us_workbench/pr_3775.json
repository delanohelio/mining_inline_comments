{"pr_number": 3775, "pr_title": "[RW-2719][risk=no] Convert root CB component to React", "pr_createdAt": "2020-07-13T15:10:50Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3775", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcyOTk4MA==", "url": "https://github.com/all-of-us/workbench/pull/3775#discussion_r453729980", "bodyText": "We can use FlexRowWrap here", "author": "NehaBroad", "createdAt": "2020-07-13T15:22:11Z", "path": "ui/src/app/cohort-search/cohort-search/cohort-search.component.tsx", "diffHunk": "@@ -0,0 +1,224 @@\n+import {Component} from '@angular/core';\n+import * as React from 'react';\n+\n+import {CBModal} from 'app/cohort-search/modal/modal.component';\n+import {ListOverview} from 'app/cohort-search/overview/overview.component';\n+import {SearchGroupList} from 'app/cohort-search/search-group-list/search-group-list.component';\n+import {idsInUse, searchRequestStore} from 'app/cohort-search/search-state.service';\n+import {mapRequest, parseCohortDefinition} from 'app/cohort-search/utils';\n+import {Button} from 'app/components/buttons';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {cohortsApi} from 'app/services/swagger-fetch-clients';\n+import {ReactWrapperBase, withCurrentWorkspace} from 'app/utils';\n+import {currentCohortStore, queryParamsStore} from 'app/utils/navigation';\n+import {WorkspaceData} from 'app/utils/workspace-data';\n+import {Cohort, SearchRequest} from 'generated/fetch';\n+\n+function colStyle(percentage: string) {\n+  return {\n+    flex: `0 0 ${percentage}%`,\n+    maxWidth: `${percentage}%`,\n+    minHeight: '1px',\n+    padding: '0 0.5rem',\n+    position: 'relative',\n+    width: '100%'\n+  } as React.CSSProperties;\n+}\n+\n+interface Props {\n+  setCohortChanged: (cohortChanged: boolean) => void;\n+  setUpdatingCohort: (updatingCohort: boolean) => void;\n+  setShowWarningModal: (showWarningModal: () => Promise<boolean>) => void;\n+  workspace: WorkspaceData;\n+}\n+\n+interface State {\n+  loading: boolean;\n+  overview: boolean;\n+  criteria: SearchRequest;\n+  updateCount: number;\n+  cohort: Cohort;\n+  minHeight: string;\n+  modalPromise: Promise<boolean> | null;\n+  modalOpen: boolean;\n+  updateGroupListsCount: number;\n+  cohortChanged: boolean;\n+  searchContext: any;\n+}\n+\n+export const CohortSearch = withCurrentWorkspace() (\n+  class extends React.Component<Props, State> {\n+    private subscription;\n+    resolve: Function;\n+    searchWrapper: HTMLDivElement;\n+\n+    constructor(props: any) {\n+      super(props);\n+      this.state = {\n+        loading: false,\n+        overview: false,\n+        criteria: {includes: [], excludes: [], dataFilters: []},\n+        updateCount: 0,\n+        cohort: undefined,\n+        minHeight: '10rem',\n+        modalPromise:  null,\n+        modalOpen: false,\n+        updateGroupListsCount: 0,\n+        cohortChanged: false,\n+        searchContext: undefined\n+      };\n+      this.showWarningModal = this.showWarningModal.bind(this);\n+    }\n+\n+    componentDidMount() {\n+      const {workspace: {id, namespace}} = this.props;\n+      this.subscription = queryParamsStore.subscribe(params => {\n+        /* If a cohort id is given in the route, we initialize state with\n+         * it */\n+        const cohortId = params.cohortId;\n+        if (cohortId) {\n+          this.setState({loading: true});\n+          cohortsApi().getCohort(namespace, id, cohortId).then(cohort => {\n+            this.setState({cohort, loading: false});\n+            currentCohortStore.next(cohort);\n+            if (cohort.criteria) {\n+              searchRequestStore.next(parseCohortDefinition(cohort.criteria));\n+            }\n+          });\n+        } else {\n+          this.setState({cohort: {criteria: `{'includes':[],'excludes':[],'dataFilters':[]}`, name: '', type: ''}});\n+        }\n+      });\n+\n+      this.subscription.add(searchRequestStore.subscribe(sr => {\n+        const cohortChanged = !!this.state.cohort && this.state.cohort.criteria !== JSON.stringify(mapRequest(sr));\n+        this.props.setCohortChanged(cohortChanged);\n+        this.setState({\n+          criteria: sr,\n+          overview: sr.includes.length > 0 || sr.excludes.length > 0,\n+          cohortChanged,\n+          updateGroupListsCount: this.state.updateGroupListsCount + 1\n+        });\n+      }));\n+      this.updateWrapperDimensions();\n+      this.props.setShowWarningModal(this.showWarningModal);\n+    }\n+\n+    componentWillUnmount() {\n+      this.subscription.unsubscribe();\n+      idsInUse.next(new Set());\n+      currentCohortStore.next(undefined);\n+      searchRequestStore.next({includes: [], excludes: [], dataFilters: []} as SearchRequest);\n+    }\n+\n+    async showWarningModal() {\n+      this.setState({modalOpen: true});\n+      return await new Promise<boolean>((resolve => this.resolve = resolve));\n+    }\n+\n+    getModalResponse(res: boolean) {\n+      this.setState({modalOpen: false});\n+      this.resolve(res);\n+    }\n+\n+    updateWrapperDimensions() {\n+      const {top} = this.searchWrapper.getBoundingClientRect();\n+      this.searchWrapper.style.minHeight = `${window.innerHeight - top - 24}px`;\n+    }\n+\n+    updateRequest = () => {\n+      // timeout prevents Angular 'Expression changed after checked' error\n+      setTimeout(() => this.setState({updateCount: this.state.updateCount + 1}));\n+    }\n+\n+    render() {\n+      const {cohort, cohortChanged, criteria, loading, modalOpen, overview, searchContext, updateCount, updateGroupListsCount} = this.state;\n+      return <React.Fragment>\n+        <div ref={el => this.searchWrapper = el} style={{padding: '1rem 1rem 2rem'}}>\n+        <div style={{display: 'flex', flexWrap: 'wrap', margin: '0 -0.5rem'}}>\n+          <div style={colStyle('66.66667')}>\n+            <div style={{display: 'flex', flexWrap: 'wrap', margin: '0 -0.5rem'}}>", "originalCommit": "02aa17b94d9a85d015020abda4d34fd4a820bca2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1MDc5NQ==", "url": "https://github.com/all-of-us/workbench/pull/3775#discussion_r453750795", "bodyText": "Nice, didn't know these were here.", "author": "dolbeew", "createdAt": "2020-07-13T15:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcyOTk4MA=="}], "type": "inlineReview"}, {"oid": "0a27ea634b027b357da7fb5680f2505c76d4a13c", "url": "https://github.com/all-of-us/workbench/commit/0a27ea634b027b357da7fb5680f2505c76d4a13c", "message": "RW-2719 use flex component", "committedDate": "2020-07-13T15:49:21Z", "type": "forcePushed"}, {"oid": "3419128ca71c82d752da1610d86dd037aa98d2c6", "url": "https://github.com/all-of-us/workbench/commit/3419128ca71c82d752da1610d86dd037aa98d2c6", "message": "RW-2719 use flex component", "committedDate": "2020-07-13T16:54:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwMzE2MA==", "url": "https://github.com/all-of-us/workbench/pull/3775#discussion_r453803160", "bodyText": "Question: Whats await new Promise((resolve => this.resolve = resolve)); used for", "author": "NehaBroad", "createdAt": "2020-07-13T17:13:54Z", "path": "ui/src/app/cohort-search/cohort-search/cohort-search.component.tsx", "diffHunk": "@@ -0,0 +1,225 @@\n+import {Component} from '@angular/core';\n+import * as React from 'react';\n+\n+import {CBModal} from 'app/cohort-search/modal/modal.component';\n+import {ListOverview} from 'app/cohort-search/overview/overview.component';\n+import {SearchGroupList} from 'app/cohort-search/search-group-list/search-group-list.component';\n+import {idsInUse, searchRequestStore} from 'app/cohort-search/search-state.service';\n+import {mapRequest, parseCohortDefinition} from 'app/cohort-search/utils';\n+import {Button} from 'app/components/buttons';\n+import {FlexRowWrap} from 'app/components/flex';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {cohortsApi} from 'app/services/swagger-fetch-clients';\n+import {ReactWrapperBase, withCurrentWorkspace} from 'app/utils';\n+import {currentCohortStore, queryParamsStore} from 'app/utils/navigation';\n+import {WorkspaceData} from 'app/utils/workspace-data';\n+import {Cohort, SearchRequest} from 'generated/fetch';\n+\n+function colStyle(percentage: string) {\n+  return {\n+    flex: `0 0 ${percentage}%`,\n+    maxWidth: `${percentage}%`,\n+    minHeight: '1px',\n+    padding: '0 0.5rem',\n+    position: 'relative',\n+    width: '100%'\n+  } as React.CSSProperties;\n+}\n+\n+interface Props {\n+  setCohortChanged: (cohortChanged: boolean) => void;\n+  setUpdatingCohort: (updatingCohort: boolean) => void;\n+  setShowWarningModal: (showWarningModal: () => Promise<boolean>) => void;\n+  workspace: WorkspaceData;\n+}\n+\n+interface State {\n+  loading: boolean;\n+  overview: boolean;\n+  criteria: SearchRequest;\n+  updateCount: number;\n+  cohort: Cohort;\n+  minHeight: string;\n+  modalPromise: Promise<boolean> | null;\n+  modalOpen: boolean;\n+  updateGroupListsCount: number;\n+  cohortChanged: boolean;\n+  searchContext: any;\n+}\n+\n+export const CohortSearch = withCurrentWorkspace() (\n+  class extends React.Component<Props, State> {\n+    private subscription;\n+    resolve: Function;\n+    searchWrapper: HTMLDivElement;\n+\n+    constructor(props: any) {\n+      super(props);\n+      this.state = {\n+        loading: false,\n+        overview: false,\n+        criteria: {includes: [], excludes: [], dataFilters: []},\n+        updateCount: 0,\n+        cohort: undefined,\n+        minHeight: '10rem',\n+        modalPromise:  null,\n+        modalOpen: false,\n+        updateGroupListsCount: 0,\n+        cohortChanged: false,\n+        searchContext: undefined\n+      };\n+      this.showWarningModal = this.showWarningModal.bind(this);\n+    }\n+\n+    componentDidMount() {\n+      const {workspace: {id, namespace}} = this.props;\n+      this.subscription = queryParamsStore.subscribe(params => {\n+        /* If a cohort id is given in the route, we initialize state with\n+         * it */\n+        const cohortId = params.cohortId;\n+        if (cohortId) {\n+          this.setState({loading: true});\n+          cohortsApi().getCohort(namespace, id, cohortId).then(cohort => {\n+            this.setState({cohort, loading: false});\n+            currentCohortStore.next(cohort);\n+            if (cohort.criteria) {\n+              searchRequestStore.next(parseCohortDefinition(cohort.criteria));\n+            }\n+          });\n+        } else {\n+          this.setState({cohort: {criteria: `{'includes':[],'excludes':[],'dataFilters':[]}`, name: '', type: ''}});\n+        }\n+      });\n+\n+      this.subscription.add(searchRequestStore.subscribe(sr => {\n+        const cohortChanged = !!this.state.cohort && this.state.cohort.criteria !== JSON.stringify(mapRequest(sr));\n+        this.props.setCohortChanged(cohortChanged);\n+        this.setState({\n+          criteria: sr,\n+          overview: sr.includes.length > 0 || sr.excludes.length > 0,\n+          cohortChanged,\n+          updateGroupListsCount: this.state.updateGroupListsCount + 1\n+        });\n+      }));\n+      this.updateWrapperDimensions();\n+      this.props.setShowWarningModal(this.showWarningModal);\n+    }\n+\n+    componentWillUnmount() {\n+      this.subscription.unsubscribe();\n+      idsInUse.next(new Set());\n+      currentCohortStore.next(undefined);\n+      searchRequestStore.next({includes: [], excludes: [], dataFilters: []} as SearchRequest);\n+    }\n+\n+    async showWarningModal() {\n+      this.setState({modalOpen: true});\n+      return await new Promise<boolean>((resolve => this.resolve = resolve));", "originalCommit": "3419128ca71c82d752da1610d86dd037aa98d2c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MTYwNw==", "url": "https://github.com/all-of-us/workbench/pull/3775#discussion_r453881607", "bodyText": "Yeah, this is the unsaved changes warning and is definitely a little tricky.\nSo the promise is what gets returned to the canDeactivate guard if there are unsaved changes to the cohort. this.resolve handles the response from the the user through the modal and determines whether to complete or cancel the navigation to the new route.", "author": "dolbeew", "createdAt": "2020-07-13T19:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwMzE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwNDkzOQ==", "url": "https://github.com/all-of-us/workbench/pull/3775#discussion_r453804939", "bodyText": "can sr ever be null? also can we use more meaningful variable searchRequest or something?", "author": "NehaBroad", "createdAt": "2020-07-13T17:16:47Z", "path": "ui/src/app/cohort-search/cohort-search/cohort-search.component.tsx", "diffHunk": "@@ -0,0 +1,225 @@\n+import {Component} from '@angular/core';\n+import * as React from 'react';\n+\n+import {CBModal} from 'app/cohort-search/modal/modal.component';\n+import {ListOverview} from 'app/cohort-search/overview/overview.component';\n+import {SearchGroupList} from 'app/cohort-search/search-group-list/search-group-list.component';\n+import {idsInUse, searchRequestStore} from 'app/cohort-search/search-state.service';\n+import {mapRequest, parseCohortDefinition} from 'app/cohort-search/utils';\n+import {Button} from 'app/components/buttons';\n+import {FlexRowWrap} from 'app/components/flex';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {cohortsApi} from 'app/services/swagger-fetch-clients';\n+import {ReactWrapperBase, withCurrentWorkspace} from 'app/utils';\n+import {currentCohortStore, queryParamsStore} from 'app/utils/navigation';\n+import {WorkspaceData} from 'app/utils/workspace-data';\n+import {Cohort, SearchRequest} from 'generated/fetch';\n+\n+function colStyle(percentage: string) {\n+  return {\n+    flex: `0 0 ${percentage}%`,\n+    maxWidth: `${percentage}%`,\n+    minHeight: '1px',\n+    padding: '0 0.5rem',\n+    position: 'relative',\n+    width: '100%'\n+  } as React.CSSProperties;\n+}\n+\n+interface Props {\n+  setCohortChanged: (cohortChanged: boolean) => void;\n+  setUpdatingCohort: (updatingCohort: boolean) => void;\n+  setShowWarningModal: (showWarningModal: () => Promise<boolean>) => void;\n+  workspace: WorkspaceData;\n+}\n+\n+interface State {\n+  loading: boolean;\n+  overview: boolean;\n+  criteria: SearchRequest;\n+  updateCount: number;\n+  cohort: Cohort;\n+  minHeight: string;\n+  modalPromise: Promise<boolean> | null;\n+  modalOpen: boolean;\n+  updateGroupListsCount: number;\n+  cohortChanged: boolean;\n+  searchContext: any;\n+}\n+\n+export const CohortSearch = withCurrentWorkspace() (\n+  class extends React.Component<Props, State> {\n+    private subscription;\n+    resolve: Function;\n+    searchWrapper: HTMLDivElement;\n+\n+    constructor(props: any) {\n+      super(props);\n+      this.state = {\n+        loading: false,\n+        overview: false,\n+        criteria: {includes: [], excludes: [], dataFilters: []},\n+        updateCount: 0,\n+        cohort: undefined,\n+        minHeight: '10rem',\n+        modalPromise:  null,\n+        modalOpen: false,\n+        updateGroupListsCount: 0,\n+        cohortChanged: false,\n+        searchContext: undefined\n+      };\n+      this.showWarningModal = this.showWarningModal.bind(this);\n+    }\n+\n+    componentDidMount() {\n+      const {workspace: {id, namespace}} = this.props;\n+      this.subscription = queryParamsStore.subscribe(params => {\n+        /* If a cohort id is given in the route, we initialize state with\n+         * it */\n+        const cohortId = params.cohortId;\n+        if (cohortId) {\n+          this.setState({loading: true});\n+          cohortsApi().getCohort(namespace, id, cohortId).then(cohort => {\n+            this.setState({cohort, loading: false});\n+            currentCohortStore.next(cohort);\n+            if (cohort.criteria) {\n+              searchRequestStore.next(parseCohortDefinition(cohort.criteria));\n+            }\n+          });\n+        } else {\n+          this.setState({cohort: {criteria: `{'includes':[],'excludes':[],'dataFilters':[]}`, name: '', type: ''}});\n+        }\n+      });\n+\n+      this.subscription.add(searchRequestStore.subscribe(sr => {\n+        const cohortChanged = !!this.state.cohort && this.state.cohort.criteria !== JSON.stringify(mapRequest(sr));\n+        this.props.setCohortChanged(cohortChanged);\n+        this.setState({\n+          criteria: sr,\n+          overview: sr.includes.length > 0 || sr.excludes.length > 0,", "originalCommit": "3419128ca71c82d752da1610d86dd037aa98d2c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4NDA2MQ==", "url": "https://github.com/all-of-us/workbench/pull/3775#discussion_r453884061", "bodyText": "It should never be null. The initial value is set to {includes: [], excludes: [], dataFilters: []} in the store, basically an empty search request object. I renamed the variable to 'searchRequest.'", "author": "dolbeew", "createdAt": "2020-07-13T19:33:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwNDkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwNjgzMw==", "url": "https://github.com/all-of-us/workbench/pull/3775#discussion_r453806833", "bodyText": "What happens if this api throws an error", "author": "NehaBroad", "createdAt": "2020-07-13T17:19:58Z", "path": "ui/src/app/cohort-search/cohort-search/cohort-search.component.tsx", "diffHunk": "@@ -0,0 +1,225 @@\n+import {Component} from '@angular/core';\n+import * as React from 'react';\n+\n+import {CBModal} from 'app/cohort-search/modal/modal.component';\n+import {ListOverview} from 'app/cohort-search/overview/overview.component';\n+import {SearchGroupList} from 'app/cohort-search/search-group-list/search-group-list.component';\n+import {idsInUse, searchRequestStore} from 'app/cohort-search/search-state.service';\n+import {mapRequest, parseCohortDefinition} from 'app/cohort-search/utils';\n+import {Button} from 'app/components/buttons';\n+import {FlexRowWrap} from 'app/components/flex';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {cohortsApi} from 'app/services/swagger-fetch-clients';\n+import {ReactWrapperBase, withCurrentWorkspace} from 'app/utils';\n+import {currentCohortStore, queryParamsStore} from 'app/utils/navigation';\n+import {WorkspaceData} from 'app/utils/workspace-data';\n+import {Cohort, SearchRequest} from 'generated/fetch';\n+\n+function colStyle(percentage: string) {\n+  return {\n+    flex: `0 0 ${percentage}%`,\n+    maxWidth: `${percentage}%`,\n+    minHeight: '1px',\n+    padding: '0 0.5rem',\n+    position: 'relative',\n+    width: '100%'\n+  } as React.CSSProperties;\n+}\n+\n+interface Props {\n+  setCohortChanged: (cohortChanged: boolean) => void;\n+  setUpdatingCohort: (updatingCohort: boolean) => void;\n+  setShowWarningModal: (showWarningModal: () => Promise<boolean>) => void;\n+  workspace: WorkspaceData;\n+}\n+\n+interface State {\n+  loading: boolean;\n+  overview: boolean;\n+  criteria: SearchRequest;\n+  updateCount: number;\n+  cohort: Cohort;\n+  minHeight: string;\n+  modalPromise: Promise<boolean> | null;\n+  modalOpen: boolean;\n+  updateGroupListsCount: number;\n+  cohortChanged: boolean;\n+  searchContext: any;\n+}\n+\n+export const CohortSearch = withCurrentWorkspace() (\n+  class extends React.Component<Props, State> {\n+    private subscription;\n+    resolve: Function;\n+    searchWrapper: HTMLDivElement;\n+\n+    constructor(props: any) {\n+      super(props);\n+      this.state = {\n+        loading: false,\n+        overview: false,\n+        criteria: {includes: [], excludes: [], dataFilters: []},\n+        updateCount: 0,\n+        cohort: undefined,\n+        minHeight: '10rem',\n+        modalPromise:  null,\n+        modalOpen: false,\n+        updateGroupListsCount: 0,\n+        cohortChanged: false,\n+        searchContext: undefined\n+      };\n+      this.showWarningModal = this.showWarningModal.bind(this);\n+    }\n+\n+    componentDidMount() {\n+      const {workspace: {id, namespace}} = this.props;\n+      this.subscription = queryParamsStore.subscribe(params => {\n+        /* If a cohort id is given in the route, we initialize state with\n+         * it */\n+        const cohortId = params.cohortId;\n+        if (cohortId) {\n+          this.setState({loading: true});\n+          cohortsApi().getCohort(namespace, id, cohortId).then(cohort => {\n+            this.setState({cohort, loading: false});", "originalCommit": "3419128ca71c82d752da1610d86dd037aa98d2c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkwNDY1MQ==", "url": "https://github.com/all-of-us/workbench/pull/3775#discussion_r453904651", "bodyText": "Good point. Currently just leaves a blank page. I've added handling to the call and a message to show if the call fails.", "author": "dolbeew", "createdAt": "2020-07-13T20:13:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwNjgzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwOTE5NA==", "url": "https://github.com/all-of-us/workbench/pull/3775#discussion_r453809194", "bodyText": "Can we add more test like for search request with include/exclude?", "author": "NehaBroad", "createdAt": "2020-07-13T17:23:44Z", "path": "ui/src/app/cohort-search/cohort-search/cohort-search.component.spec.tsx", "diffHunk": "@@ -0,0 +1,19 @@\n+import {shallow} from 'enzyme';\n+import * as React from 'react';\n+\n+import {currentWorkspaceStore, queryParamsStore} from 'app/utils/navigation';\n+import {workspaceDataStub} from 'testing/stubs/workspaces-api-stub';\n+import {CohortSearch} from './cohort-search.component';\n+\n+describe('CohortSearch', () => {\n+  beforeEach(() => {\n+    currentWorkspaceStore.next(workspaceDataStub);\n+    queryParamsStore.next({\n+      cohortId: 'test-id'\n+    });\n+  });\n+  it('should render', () => {\n+    const wrapper = shallow(<CohortSearch setCohortChanged={() => {}} setShowWarningModal={() => {}} setUpdatingCohort={() => {}}/>);\n+    expect(wrapper).toBeTruthy();\n+  });\n+});", "originalCommit": "3419128ca71c82d752da1610d86dd037aa98d2c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwNTYxOA==", "url": "https://github.com/all-of-us/workbench/pull/3775#discussion_r454405618", "bodyText": "Probably could use more still, but I added one to check that the number of groups matches the length of the includes/excludes array.", "author": "dolbeew", "createdAt": "2020-07-14T14:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwOTE5NA=="}], "type": "inlineReview"}, {"oid": "16e5908cea5923177ccc7676d75eb7d83c30f784", "url": "https://github.com/all-of-us/workbench/commit/16e5908cea5923177ccc7676d75eb7d83c30f784", "message": "RW-2719 initial react conversion", "committedDate": "2020-07-14T14:43:20Z", "type": "commit"}, {"oid": "36b845ba6a2823d7ddc462cfadb44e56bfbed6ae", "url": "https://github.com/all-of-us/workbench/commit/36b845ba6a2823d7ddc462cfadb44e56bfbed6ae", "message": "RW-2719 remove angular wrappers from children", "committedDate": "2020-07-14T14:43:20Z", "type": "commit"}, {"oid": "87a14660023e2264fbc5ca72e0665fc8a8a22693", "url": "https://github.com/all-of-us/workbench/commit/87a14660023e2264fbc5ca72e0665fc8a8a22693", "message": "RW-2719 move cohort builder route to react router", "committedDate": "2020-07-14T14:43:20Z", "type": "commit"}, {"oid": "2decc3060f77ffdabc229beeef2dc523e5e1ba03", "url": "https://github.com/all-of-us/workbench/commit/2decc3060f77ffdabc229beeef2dc523e5e1ba03", "message": "RW-2719 convert styles", "committedDate": "2020-07-14T14:43:20Z", "type": "commit"}, {"oid": "78f76941d07c59df0c668e7a232f19da34709674", "url": "https://github.com/all-of-us/workbench/commit/78f76941d07c59df0c668e7a232f19da34709674", "message": "RW-2719 workaraound for unsaved changes guard", "committedDate": "2020-07-14T14:43:20Z", "type": "commit"}, {"oid": "339f1427512d42d21c1a126ed0a87815ad14677e", "url": "https://github.com/all-of-us/workbench/commit/339f1427512d42d21c1a126ed0a87815ad14677e", "message": "RW-2719 revert react-router changes", "committedDate": "2020-07-14T14:43:20Z", "type": "commit"}, {"oid": "3a7e5fef350ae26eff2cc8d5a3c2489f62bb1793", "url": "https://github.com/all-of-us/workbench/commit/3a7e5fef350ae26eff2cc8d5a3c2489f62bb1793", "message": "RW-2719 fix ui tests", "committedDate": "2020-07-14T14:43:20Z", "type": "commit"}, {"oid": "eb3085744abbde1302cb8290a593f2ff136e9c18", "url": "https://github.com/all-of-us/workbench/commit/eb3085744abbde1302cb8290a593f2ff136e9c18", "message": "RW-2719 put back div ids for puppeteer", "committedDate": "2020-07-14T14:43:20Z", "type": "commit"}, {"oid": "3af79844229ac1f0f5171f59ff6aa568c7bfe2ec", "url": "https://github.com/all-of-us/workbench/commit/3af79844229ac1f0f5171f59ff6aa568c7bfe2ec", "message": "RW-2719 use flex component", "committedDate": "2020-07-14T14:43:20Z", "type": "commit"}, {"oid": "c3df93387a5de6896e6ea9b95fb405a0c42da0e7", "url": "https://github.com/all-of-us/workbench/commit/c3df93387a5de6896e6ea9b95fb405a0c42da0e7", "message": "RW-2719 pr feedback", "committedDate": "2020-07-14T14:43:20Z", "type": "commit"}, {"oid": "d5407d8409dc5ab45a0cadb944ec5fd44cc2e206", "url": "https://github.com/all-of-us/workbench/commit/d5407d8409dc5ab45a0cadb944ec5fd44cc2e206", "message": "RW-2719 add additional test", "committedDate": "2020-07-14T14:43:20Z", "type": "commit"}, {"oid": "d5407d8409dc5ab45a0cadb944ec5fd44cc2e206", "url": "https://github.com/all-of-us/workbench/commit/d5407d8409dc5ab45a0cadb944ec5fd44cc2e206", "message": "RW-2719 add additional test", "committedDate": "2020-07-14T14:43:20Z", "type": "forcePushed"}]}