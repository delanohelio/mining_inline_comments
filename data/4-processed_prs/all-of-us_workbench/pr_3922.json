{"pr_number": 3922, "pr_title": "[RW-5275] use Java 8 OffsetTimestamp for date-time types", "pr_createdAt": "2020-08-26T13:58:42Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3922", "timeline": [{"oid": "65230b3a1e9d5738a6c84d0bf28c3867b267597e", "url": "https://github.com/all-of-us/workbench/commit/65230b3a1e9d5738a6c84d0bf28c3867b267597e", "message": "squashed", "committedDate": "2020-08-26T16:06:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI3NzIwNw==", "url": "https://github.com/all-of-us/workbench/pull/3922#discussion_r479277207", "bodyText": "from our offline conversation: please add a version of this with a tolerance, and a basic test for all methods here which don't yet have one", "author": "jmthibault79", "createdAt": "2020-08-28T13:15:30Z", "path": "api/src/test/java/org/pmiops/workbench/utils/TemporalAssertions.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.pmiops.workbench.utils;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+\n+public class TemporalAssertions {\n+\n+  private static final double TIME_TOLERANCE_MILLIS = 100.0;\n+\n+  public static void assertTimeWithinTolerance(OffsetDateTime actual, OffsetDateTime expected) {", "originalCommit": "ac4315e176ba3d3c22d62f1df9b334037ac6bfcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6d45f953204a829fe34d3922db8cd50fd479fd68", "url": "https://github.com/all-of-us/workbench/commit/6d45f953204a829fe34d3922db8cd50fd479fd68", "message": "squashed", "committedDate": "2020-08-31T22:49:51Z", "type": "commit"}, {"oid": "568501e291de3386198fce5802a4728f4d315543", "url": "https://github.com/all-of-us/workbench/commit/568501e291de3386198fce5802a4728f4d315543", "message": "cleanup", "committedDate": "2020-08-31T22:49:51Z", "type": "commit"}, {"oid": "fb7ff98cbd7409530ec7b0370a0de099da7e8c6f", "url": "https://github.com/all-of-us/workbench/commit/fb7ff98cbd7409530ec7b0370a0de099da7e8c6f", "message": "remove mapper change", "committedDate": "2020-08-31T22:49:52Z", "type": "commit"}, {"oid": "7af37e3842be393508ca43a5aaf9f278c3b4357c", "url": "https://github.com/all-of-us/workbench/commit/7af37e3842be393508ca43a5aaf9f278c3b4357c", "message": "fixup timestamp format", "committedDate": "2020-08-31T22:49:52Z", "type": "commit"}, {"oid": "0cc037491ed0bf67aa5c900b2c6dbcc59de82d94", "url": "https://github.com/all-of-us/workbench/commit/0cc037491ed0bf67aa5c900b2c6dbcc59de82d94", "message": "test cases", "committedDate": "2020-08-31T22:49:52Z", "type": "commit"}, {"oid": "c5363b80ab4d2b57e937771b6dbf922d58579e6e", "url": "https://github.com/all-of-us/workbench/commit/c5363b80ab4d2b57e937771b6dbf922d58579e6e", "message": "test coverage and enhancements", "committedDate": "2020-08-31T22:49:52Z", "type": "commit"}, {"oid": "c5363b80ab4d2b57e937771b6dbf922d58579e6e", "url": "https://github.com/all-of-us/workbench/commit/c5363b80ab4d2b57e937771b6dbf922d58579e6e", "message": "test coverage and enhancements", "committedDate": "2020-08-31T22:49:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2OTgwNQ==", "url": "https://github.com/all-of-us/workbench/pull/3922#discussion_r481369805", "bodyText": "make this a minus to show explicitly that the problem is the tolerance delta rather than being \"larger than max\"", "author": "jmthibault79", "createdAt": "2020-09-01T19:07:01Z", "path": "api/src/test/java/org/pmiops/workbench/utils/TemporalAssertionsTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.pmiops.workbench.utils;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.pmiops.workbench.utils.TemporalAssertions.DEFAULT_TOLERANCE;\n+import static org.pmiops.workbench.utils.TemporalAssertions.MAX_SUPPORTED_INSTANT;\n+import static org.pmiops.workbench.utils.TemporalAssertions.MIN_SUPPORTED_INSTANT;\n+import static org.pmiops.workbench.utils.TemporalAssertions.assertTimeWithinTolerance;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import org.junit.Test;\n+\n+public class TemporalAssertionsTest {\n+\n+  private static final Instant EXPECTED_TIME = Instant.parse(\"2010-06-30T01:20:00.00Z\");\n+  private static final Duration DELTA_WITHIN_TOLERANCE = DEFAULT_TOLERANCE.dividedBy(2);\n+  private static final Duration DELTA_OUTSIDE_TOLERANCE = DEFAULT_TOLERANCE.multipliedBy(2);\n+\n+  @Test\n+  public void testZeroTime() {\n+    assertTimeWithinTolerance(0, 0);\n+    assertTimeWithinTolerance(Instant.ofEpochMilli(0), Instant.ofEpochMilli(0));\n+  }\n+\n+  @Test\n+  public void testInstant_smallDifference() {\n+    assertTimeWithinTolerance(EXPECTED_TIME.plus(DELTA_WITHIN_TOLERANCE), EXPECTED_TIME);\n+    assertTimeWithinTolerance(\n+        EXPECTED_TIME.plus(DELTA_WITHIN_TOLERANCE),\n+        EXPECTED_TIME,\n+        DEFAULT_TOLERANCE.multipliedBy(10));\n+    assertThrows(\n+        AssertionError.class,\n+        () ->\n+            assertTimeWithinTolerance(EXPECTED_TIME.plus(DELTA_OUTSIDE_TOLERANCE), EXPECTED_TIME));\n+  }\n+\n+  @Test\n+  public void testLong() {\n+    assertTimeWithinTolerance(1_598_550_909_000L, 1_598_550_909_000L);\n+  }\n+\n+  @Test\n+  public void testOffsetDateTime() {\n+    final OffsetDateTime expected = OffsetDateTime.ofInstant(EXPECTED_TIME, ZoneOffset.UTC);\n+    final AssertionError exception =\n+        assertThrows(\n+            AssertionError.class,\n+            () -> assertTimeWithinTolerance(expected.plus(DELTA_OUTSIDE_TOLERANCE), expected));\n+    assertThat(exception.getMessage()).contains(\"outside tolerance\");\n+\n+    assertTimeWithinTolerance(expected.plus(DELTA_WITHIN_TOLERANCE), expected);\n+    assertTimeWithinTolerance(expected.plusSeconds(3), expected, Duration.ofSeconds(4));\n+  }\n+\n+  @Test\n+  public void testMaximumDateTime() {\n+    assertTimeWithinTolerance(MIN_SUPPORTED_INSTANT, MIN_SUPPORTED_INSTANT);\n+    assertTimeWithinTolerance(\n+        MAX_SUPPORTED_INSTANT.plus(DELTA_WITHIN_TOLERANCE), MAX_SUPPORTED_INSTANT);\n+    assertThrows(\n+        AssertionError.class,\n+        () ->\n+            assertTimeWithinTolerance(\n+                MIN_SUPPORTED_INSTANT.plus(DELTA_OUTSIDE_TOLERANCE), MIN_SUPPORTED_INSTANT));\n+\n+    assertTimeWithinTolerance(MAX_SUPPORTED_INSTANT, MAX_SUPPORTED_INSTANT);\n+    assertTimeWithinTolerance(\n+        MAX_SUPPORTED_INSTANT.minus(DELTA_WITHIN_TOLERANCE), MAX_SUPPORTED_INSTANT);\n+    assertThrows(\n+        AssertionError.class,\n+        () ->\n+            assertTimeWithinTolerance(\n+                MAX_SUPPORTED_INSTANT.plus(DELTA_OUTSIDE_TOLERANCE), MAX_SUPPORTED_INSTANT));", "originalCommit": "c5363b80ab4d2b57e937771b6dbf922d58579e6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQyMTE3NA==", "url": "https://github.com/all-of-us/workbench/pull/3922#discussion_r481421174", "bodyText": "Nice catch.", "author": "jaycarlton", "createdAt": "2020-09-01T20:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2OTgwNQ=="}], "type": "inlineReview"}, {"oid": "a20afa118bfccd601f05727951e2f6fe89cf5dbe", "url": "https://github.com/all-of-us/workbench/commit/a20afa118bfccd601f05727951e2f6fe89cf5dbe", "message": "Merge branch 'master' into jaycarlton/java8timeSwagger", "committedDate": "2020-09-01T20:36:37Z", "type": "commit"}, {"oid": "925ebf2380821f4fb1e5198f34f94c6d8c759970", "url": "https://github.com/all-of-us/workbench/commit/925ebf2380821f4fb1e5198f34f94c6d8c759970", "message": "rename", "committedDate": "2020-09-01T20:43:24Z", "type": "commit"}]}