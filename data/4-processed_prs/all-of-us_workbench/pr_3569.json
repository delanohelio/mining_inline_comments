{"pr_number": 3569, "pr_title": "[RW-3942][risk=low] Leverage new readonly user in developer CLI tooling (2/2)", "pr_createdAt": "2020-05-11T23:52:23Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3569", "timeline": [{"oid": "4ceefaf9a3e1c600d64f6e9963639f49a7a0e2a0", "url": "https://github.com/all-of-us/workbench/commit/4ceefaf9a3e1c600d64f6e9963639f49a7a0e2a0", "message": "Add readonly user and support specifying a DB user for CLI access", "committedDate": "2020-05-11T19:23:25Z", "type": "commit"}, {"oid": "274adc284e6519fd8658fa0ca3cc6cbf4eca89ee", "url": "https://github.com/all-of-us/workbench/commit/274adc284e6519fd8658fa0ca3cc6cbf4eca89ee", "message": "PR feedback", "committedDate": "2020-05-11T19:23:28Z", "type": "commit"}, {"oid": "653975d731ce803473d47d871e1ddfdc3cce8372", "url": "https://github.com/all-of-us/workbench/commit/653975d731ce803473d47d871e1ddfdc3cce8372", "message": "update binlogs cmd", "committedDate": "2020-05-11T19:23:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzMTgwNw==", "url": "https://github.com/all-of-us/workbench/pull/3569#discussion_r423431807", "bodyText": "For later, if we're thinking of a \"break glass\" mode in certain responses, maybe this is one of those. I wonder if there's a way to capture/log a justification when signing in as root.", "author": "jaycarlton", "createdAt": "2020-05-12T02:52:40Z", "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2022,20 +2022,42 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(\n-    \"--root\",\n-    ->(opts, _) { opts.root = true },\n-    \"Connect as root\")\n+    \"--db-user [user]\",\n+    ->(opts, v) { opts.db_user = v },\n+    \"Optional database user to connect as, defaults to 'dev-readonly'. \" +\n+    \"To perform mutations use 'workbench'. Avoid using 'root' unless \" +", "originalCommit": "653975d731ce803473d47d871e1ddfdc3cce8372", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzMTk3MA==", "url": "https://github.com/all-of-us/workbench/pull/3569#discussion_r423431970", "bodyText": "nit: to catch blank strings too you can do db_user.to_s.empty?.", "author": "jaycarlton", "createdAt": "2020-05-12T02:53:18Z", "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2022,20 +2022,42 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(\n-    \"--root\",\n-    ->(opts, _) { opts.root = true },\n-    \"Connect as root\")\n+    \"--db-user [user]\",\n+    ->(opts, v) { opts.db_user = v },\n+    \"Optional database user to connect as, defaults to 'dev-readonly'. \" +\n+    \"To perform mutations use 'workbench'. Avoid using 'root' unless \" +\n+    \"absolutely necessary.\")\n   gcc = GcloudContextV2.new(op)\n   op.parse.validate\n   gcc.validate\n+\n+  if op.opts.db_user.nil?", "originalCommit": "653975d731ce803473d47d871e1ddfdc3cce8372", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4MjIyOQ==", "url": "https://github.com/all-of-us/workbench/pull/3569#discussion_r423482229", "bodyText": "done", "author": "calbach", "createdAt": "2020-05-12T06:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzMTk3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzMjE3MA==", "url": "https://github.com/all-of-us/workbench/pull/3569#discussion_r423432170", "bodyText": "nit: Rubocop's style guide prefers parenthesis when there are arguments.", "author": "jaycarlton", "createdAt": "2020-05-12T02:54:10Z", "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2022,20 +2022,42 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(\n-    \"--root\",\n-    ->(opts, _) { opts.root = true },\n-    \"Connect as root\")\n+    \"--db-user [user]\",\n+    ->(opts, v) { opts.db_user = v },\n+    \"Optional database user to connect as, defaults to 'dev-readonly'. \" +\n+    \"To perform mutations use 'workbench'. Avoid using 'root' unless \" +\n+    \"absolutely necessary.\")\n   gcc = GcloudContextV2.new(op)\n   op.parse.validate\n   gcc.validate\n+\n+  if op.opts.db_user.nil?\n+    op.opts.db_user = \"dev-readonly\"\n+  end\n+\n   env = read_db_vars(gcc)\n+  user_to_password = {\n+    \"dev-readonly\" => env[\"DEV_READONLY_DB_PASSWORD\"],\n+    \"workbench\" => env[\"WORKBENCH_DB_PASSWORD\"],\n+    \"root\" => env[\"MYSQL_ROOT_PASSWORD\"]\n+  }\n+  unless user_to_password.has_key? op.opts.db_user", "originalCommit": "653975d731ce803473d47d871e1ddfdc3cce8372", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4MjE4Nw==", "url": "https://github.com/all-of-us/workbench/pull/3569#discussion_r423482187", "bodyText": "Did we decide to follow that style guide? This file uses them somewhat interchangeably, but I'll make the change since I tend to prefer parens", "author": "calbach", "createdAt": "2020-05-12T06:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzMjE3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzMjY5Nw==", "url": "https://github.com/all-of-us/workbench/pull/3569#discussion_r423432697", "bodyText": "does mysql not let them know that during startup?", "author": "jaycarlton", "createdAt": "2020-05-12T02:56:21Z", "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2022,20 +2022,42 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(\n-    \"--root\",\n-    ->(opts, _) { opts.root = true },\n-    \"Connect as root\")\n+    \"--db-user [user]\",\n+    ->(opts, v) { opts.db_user = v },\n+    \"Optional database user to connect as, defaults to 'dev-readonly'. \" +\n+    \"To perform mutations use 'workbench'. Avoid using 'root' unless \" +\n+    \"absolutely necessary.\")\n   gcc = GcloudContextV2.new(op)\n   op.parse.validate\n   gcc.validate\n+\n+  if op.opts.db_user.nil?\n+    op.opts.db_user = \"dev-readonly\"\n+  end\n+\n   env = read_db_vars(gcc)\n+  user_to_password = {\n+    \"dev-readonly\" => env[\"DEV_READONLY_DB_PASSWORD\"],\n+    \"workbench\" => env[\"WORKBENCH_DB_PASSWORD\"],\n+    \"root\" => env[\"MYSQL_ROOT_PASSWORD\"]\n+  }\n+  unless user_to_password.has_key? op.opts.db_user\n+    Common.new.error(\n+      \"invalid --db-user provided, wanted one of #{user_to_password.keys}, got '#{op.opts.db_user}'\")\n+    exit 1\n+  end\n+  db_password = user_to_password[op.opts.db_user]\n+\n   CloudSqlProxyContext.new(gcc.project).run do\n-    password = op.opts.root ? env[\"MYSQL_ROOT_PASSWORD\"] : env[\"WORKBENCH_DB_PASSWORD\"]\n-    user = op.opts.root ? \"root\" : env[\"WORKBENCH_DB_USER\"]\n+    if op.opts.db_user == \"dev-readonly\"\n+      common.status \"\"\n+      common.status \"Database session will be read-only; use --db-user to change this\"", "originalCommit": "653975d731ce803473d47d871e1ddfdc3cce8372", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4MDIwNg==", "url": "https://github.com/all-of-us/workbench/pull/3569#discussion_r423480206", "bodyText": "You requested this..\n\nCan you put a prominent notice right above here that the session is or isn't read-only?\n\n#3550 (comment)\nThe MySQL CLI is printed when you are launching the command, which includes the database user. However, this is somewhat buried in the startup logs and is not at all obvious. The CLI prompt does not give any indication of a readonly session, since there is nothing special about the session itself - this is just a property of the user.", "author": "calbach", "createdAt": "2020-05-12T06:01:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzMjY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzMzA3NA==", "url": "https://github.com/all-of-us/workbench/pull/3569#discussion_r423433074", "bodyText": "nit: if we add another readonly user, we'll need to adjust this. Maybe make an array of read only users and check inclusion in it. But again, I wonder if this blurb is redundant.", "author": "jaycarlton", "createdAt": "2020-05-12T02:57:55Z", "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2022,20 +2022,42 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(\n-    \"--root\",\n-    ->(opts, _) { opts.root = true },\n-    \"Connect as root\")\n+    \"--db-user [user]\",\n+    ->(opts, v) { opts.db_user = v },\n+    \"Optional database user to connect as, defaults to 'dev-readonly'. \" +\n+    \"To perform mutations use 'workbench'. Avoid using 'root' unless \" +\n+    \"absolutely necessary.\")\n   gcc = GcloudContextV2.new(op)\n   op.parse.validate\n   gcc.validate\n+\n+  if op.opts.db_user.nil?\n+    op.opts.db_user = \"dev-readonly\"\n+  end\n+\n   env = read_db_vars(gcc)\n+  user_to_password = {\n+    \"dev-readonly\" => env[\"DEV_READONLY_DB_PASSWORD\"],\n+    \"workbench\" => env[\"WORKBENCH_DB_PASSWORD\"],\n+    \"root\" => env[\"MYSQL_ROOT_PASSWORD\"]\n+  }\n+  unless user_to_password.has_key? op.opts.db_user\n+    Common.new.error(\n+      \"invalid --db-user provided, wanted one of #{user_to_password.keys}, got '#{op.opts.db_user}'\")\n+    exit 1\n+  end\n+  db_password = user_to_password[op.opts.db_user]\n+\n   CloudSqlProxyContext.new(gcc.project).run do\n-    password = op.opts.root ? env[\"MYSQL_ROOT_PASSWORD\"] : env[\"WORKBENCH_DB_PASSWORD\"]\n-    user = op.opts.root ? \"root\" : env[\"WORKBENCH_DB_USER\"]\n+    if op.opts.db_user == \"dev-readonly\"", "originalCommit": "653975d731ce803473d47d871e1ddfdc3cce8372", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "163a4bcb035a02da824c266fc864ae1a01776afa", "url": "https://github.com/all-of-us/workbench/commit/163a4bcb035a02da824c266fc864ae1a01776afa", "message": "pr fixes", "committedDate": "2020-05-12T17:07:10Z", "type": "commit"}]}