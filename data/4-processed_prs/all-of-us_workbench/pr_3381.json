{"pr_number": 3381, "pr_title": "[no ticket][risk=no] Puppeteer test framework improvement", "pr_createdAt": "2020-04-10T20:11:53Z", "pr_url": "https://github.com/all-of-us/workbench/pull/3381", "timeline": [{"oid": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "url": "https://github.com/all-of-us/workbench/commit/ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "message": "small improvement", "committedDate": "2020-04-10T20:10:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMzAwNQ==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406923005", "bodyText": "tslint: don't need await when return is used.", "author": "aweng98", "createdAt": "2020-04-10T20:12:53Z", "path": "e2e/app/aou-elements/base-element.ts", "diffHunk": "@@ -158,16 +158,31 @@ export default class BaseElement {\n   }\n \n   async click(options?: ClickOptions): Promise<void> {\n-    await this.element.asElement().click(options);\n+    return this.element.asElement().click(options);", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMzM5Nw==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406923397", "bodyText": "Make waitUntilEnabled method more flexible.", "author": "aweng98", "createdAt": "2020-04-10T20:14:01Z", "path": "e2e/app/aou-elements/button.ts", "diffHunk": "@@ -27,12 +27,23 @@ export default class Button extends BaseElement {\n   /**\n    * Wait until button is clickable (enabled).\n    */\n-  async waitUntilEnabled(): Promise<unknown> {\n-    const retrievedValue = await this.page.waitForFunction((e) => {\n-      const style = window.getComputedStyle(e);\n-      return style.getPropertyValue('cursor') === 'pointer';\n-    }, {}, this.element);\n-    return await retrievedValue.jsonValue();\n+  async waitUntilEnabled(selector?: string): Promise<unknown> {\n+    // works with either a xpath selector or a Element", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMzgzMg==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406923832", "bodyText": "consolidate all enum into one file enums.ts.", "author": "aweng98", "createdAt": "2020-04-10T20:15:15Z", "path": "e2e/app/authenticated-page.ts", "diffHunk": "@@ -1,43 +1,16 @@\n import {Page} from 'puppeteer';\n+import {pageUrl, sideNavLink} from 'resources/enums';\n import {clrIconXpath} from './aou-elements/xpath-defaults';\n import {findIcon} from './aou-elements/xpath-finder';\n import BasePage from './base-page';\n import {performance} from 'perf_hooks';\n \n-const configs = require('resources/workbench-config');\n \n const selectors = {\n   signedInIndicator: 'body#body div',\n   logo: 'img[src=\"/assets/images/all-of-us-logo.svg\"]'\n };\n \n-export enum PageUrl {\n-  HOME = configs.uiBaseUrl,\n-  WORKSPACES = configs.uiBaseUrl + configs.workspacesUrlPath,\n-  ADMIN = configs.uiBaseUrl + configs.adminUrlPath,\n-}\n-\n-export enum SideNavLink {\n-  HOME = 'Home',\n-  ADMIN = 'Admin',\n-  USER_ADMIN = 'User Admin',\n-  PROFILE = 'Profile',\n-  SIGN_OUT = 'Sign Out',\n-  CONTACT_US = 'Contact Us',\n-  USER_SUPPORT = 'User Support',\n-  YOUR_WORKSPACES = 'Your Workspaces',\n-  FEATURED_WORKSPACES = 'Featured Workspaces',\n-}\n-\n-export enum SideNavLinkIcon {\n-  HOME = 'home',\n-  ADMIN = 'user',\n-  CONTACT_US = 'envelope',\n-  USER_SUPPORT = 'help',\n-  YOUR_WORKSPACES = 'applications',\n-  FEATURED_WORKSPACES = 'star',\n-}\n-", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNjE3Ng==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406926176", "bodyText": "renamed to workspaceAction, it is in new file enums.ts", "author": "aweng98", "createdAt": "2020-04-10T20:22:23Z", "path": "e2e/app/workspace-card.ts", "diffHunk": "@@ -1,14 +1,7 @@\n-import {ElementHandle, JSHandle, Page} from 'puppeteer';\n+import {ElementHandle, Page} from 'puppeteer';\n+import {workspaceAccessLevel, workspaceAction} from 'resources/enums';\n import BaseElement from './aou-elements/base-element';\n-const _ = require('lodash');\n-\n-\n-export const LINK_LABEL = {\n-  DUPLICATE: 'Duplicate',\n-  DELETE: 'Delete',\n-  EDIT: 'Edit',\n-  SHARE: 'Share',\n-};", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NTY0NQ==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406985645", "bodyText": "Note: existing issue, but this is a bit of a jump based on UX conventions. I don't know that this necessarily applies for all buttons in the application. Is there not a more explicit \"disabled\" property you can look for?", "author": "calbach", "createdAt": "2020-04-10T23:46:11Z", "path": "e2e/app/aou-elements/button.ts", "diffHunk": "@@ -27,12 +27,23 @@ export default class Button extends BaseElement {\n   /**\n    * Wait until button is clickable (enabled).\n    */\n-  async waitUntilEnabled(): Promise<unknown> {\n-    const retrievedValue = await this.page.waitForFunction((e) => {\n-      const style = window.getComputedStyle(e);\n-      return style.getPropertyValue('cursor') === 'pointer';\n-    }, {}, this.element);\n-    return await retrievedValue.jsonValue();\n+  async waitUntilEnabled(selector?: string): Promise<unknown> {\n+    // works with either a xpath selector or a Element\n+    if (selector === undefined) {\n+      const retrievedValue = await this.page.waitForFunction((e) => {\n+        const style = window.getComputedStyle(e);\n+        return style.getPropertyValue('cursor') === 'pointer';", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwODc3Mw==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r407008773", "bodyText": "I checked, I didn't find other ways. I am not certain about every button because I have not used or seen all buttons, but so far it is true for every button that I have used in automation tests. There is a isDisabled() method that checks for disabled property but I cannot use it for button.", "author": "aweng98", "createdAt": "2020-04-11T02:59:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NTY0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NTgxNw==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406985817", "bodyText": "What is actually held by this value? Is there a reason to return it from this method?", "author": "calbach", "createdAt": "2020-04-10T23:47:26Z", "path": "e2e/app/aou-elements/button.ts", "diffHunk": "@@ -27,12 +27,23 @@ export default class Button extends BaseElement {\n   /**\n    * Wait until button is clickable (enabled).\n    */\n-  async waitUntilEnabled(): Promise<unknown> {\n-    const retrievedValue = await this.page.waitForFunction((e) => {\n-      const style = window.getComputedStyle(e);\n-      return style.getPropertyValue('cursor') === 'pointer';\n-    }, {}, this.element);\n-    return await retrievedValue.jsonValue();\n+  async waitUntilEnabled(selector?: string): Promise<unknown> {\n+    // works with either a xpath selector or a Element\n+    if (selector === undefined) {\n+      const retrievedValue = await this.page.waitForFunction((e) => {\n+        const style = window.getComputedStyle(e);\n+        return style.getPropertyValue('cursor') === 'pointer';\n+      }, { polling: 'mutation' }, this.element);\n+      return retrievedValue.jsonValue();", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5NzY0Mw==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406997643", "bodyText": "It would be a boolean value. But I think Promise<void> is a better decision. I updated code and comment.", "author": "aweng98", "createdAt": "2020-04-11T01:07:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NTgxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NjAxNg==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406986016", "bodyText": "It is more standard to name a boolean variable for the truthy state. Here I would probably call this checked", "author": "calbach", "createdAt": "2020-04-10T23:48:25Z", "path": "e2e/app/aou-elements/checkbox.ts", "diffHunk": "@@ -57,4 +57,18 @@ export default class Checkbox extends BaseElement {\n     }\n   }\n \n+  /**\n+   * Toggle checkbox state.\n+   * @param {boolean} onOrOff\n+   */\n+  async toggle(onOrOff?: boolean): Promise<void> {", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5Nzc3Mw==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406997773", "bodyText": "\ud83d\udc4dDone", "author": "aweng98", "createdAt": "2020-04-11T01:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NjAxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NjI5OQ==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406986299", "bodyText": "It would be useful to describe the return value. Or, if the return value is irrelevant here (feels like it might be), just use Promise<void>", "author": "calbach", "createdAt": "2020-04-10T23:49:50Z", "path": "e2e/app/aou-elements/select-component.ts", "diffHunk": "@@ -9,16 +9,40 @@ export default class SelectComponent {\n     this.nodeLevel = nodeLevel || 1;\n   }\n \n-  async select(textValue: string): Promise<string> {\n-    await this.open(2); // with 2 retries\n-    const selector = this.dropdownXpath() + `//li[contains(normalize-space(text()), \"${textValue}\")]`;\n-    const selectValue = await this.page.waitForXPath(selector, { visible: true });\n-    const selectElement = new BaseElement(this.page, selectValue);\n-    const textContent = await selectElement.getTextContent();\n-    await selectValue.click();\n-    // need to make sure dropdown is disappeared, so it cannot interfere with clicking on elements below.\n-    await this.waitUntilDropdownClosed();\n-    return textContent;\n+  /**\n+   * Select an option in a Select element.\n+   * @param textValue\n+   * @param {number} retries Default retry count is 2.", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTM2NQ==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406999365", "bodyText": "Promise<void> is better. \ud83d\udc4d", "author": "aweng98", "createdAt": "2020-04-11T01:23:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NjI5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NjQzMg==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406986432", "bodyText": "please remove this space before the --", "author": "calbach", "createdAt": "2020-04-10T23:50:35Z", "path": "e2e/app/aou-elements/select-component.ts", "diffHunk": "@@ -28,19 +52,22 @@ export default class SelectComponent {\n     return await innerText.jsonValue();\n   }\n \n-  // open Select dropdown with retries\n-  private async open(retries: number): Promise<void> {\n+  /**\n+   * Open Select dropdown.\n+   * @param {number} retries Retry count. Default is 1.\n+   */\n+  private async open(retries: number = 1): Promise<void> {\n     const click = async () => {\n+      retries --;", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTQ2NQ==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406999465", "bodyText": "\ud83d\udc4d", "author": "aweng98", "createdAt": "2020-04-11T01:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NjQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NjY3Nw==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406986677", "bodyText": "<= 0 is more idiot-proof, I generally suggest using this predicate instead.\nExample: someone passes in retries=-1 by accident: the current approach will result in effectively infinite retries. Sure - it's unlikely someone is going to do that, but in general it's good to set yourself up to avoid compounding bugs like this.\nBetter example: Rereading your code, passing retries=0, which is a more realistic input, also triggers infinite retries.", "author": "calbach", "createdAt": "2020-04-10T23:52:10Z", "path": "e2e/app/aou-elements/select-component.ts", "diffHunk": "@@ -28,19 +52,22 @@ export default class SelectComponent {\n     return await innerText.jsonValue();\n   }\n \n-  // open Select dropdown with retries\n-  private async open(retries: number): Promise<void> {\n+  /**\n+   * Open Select dropdown.\n+   * @param {number} retries Retry count. Default is 1.\n+   */\n+  private async open(retries: number = 1): Promise<void> {\n     const click = async () => {\n+      retries --;\n       const is = await this.isOpen();\n       if (!is) {\n         await this.toggleOpenClose();\n       } else {\n         return;\n       }\n-      if (retries < 0) {\n+      if (retries === 0) {", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTYzOQ==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406999639", "bodyText": "yes, you're correct. Done. and how about I rename variable name here to tryCount as well?", "author": "aweng98", "createdAt": "2020-04-11T01:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NjY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4ODEzMQ==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406988131", "bodyText": "I typically interpret retries=1 to mean you'll retry it once. Currently it seems to mean \"retry 0 times\".", "author": "calbach", "createdAt": "2020-04-11T00:00:04Z", "path": "e2e/app/aou-elements/select-component.ts", "diffHunk": "@@ -28,19 +52,22 @@ export default class SelectComponent {\n     return await innerText.jsonValue();\n   }\n \n-  // open Select dropdown with retries\n-  private async open(retries: number): Promise<void> {\n+  /**\n+   * Open Select dropdown.\n+   * @param {number} retries Retry count. Default is 1.\n+   */\n+  private async open(retries: number = 1): Promise<void> {", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwOTg1Mg==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r407009852", "bodyText": "I see, variable name retries is bit misleading. retries == 1 meant for execute once. how about rename to tryCount?", "author": "aweng98", "createdAt": "2020-04-11T03:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4ODEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1NjgzOA==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r407756838", "bodyText": "I'm not sure what to believe anymore,  looks like I implemented this a similar way to you :)\n\n  \n    \n      workbench/ui/src/app/utils/retry.tsx\n    \n    \n         Line 8\n      in\n      81a1fc6\n    \n    \n    \n    \n\n        \n          \n           export async function fetchAbortableRetry<T>(fetchFn: () => Promise<T>, timeoutMillis: number, maxRetries: number): Promise<T> { \n        \n    \n  \n\n\nHow about maxAttempts?", "author": "calbach", "createdAt": "2020-04-13T22:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4ODEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4ODQzMg==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406988432", "bodyText": "Why?", "author": "calbach", "createdAt": "2020-04-11T00:02:10Z", "path": "e2e/resources/enums.ts", "diffHunk": "@@ -0,0 +1,43 @@\n+// @ts-nocheck", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMDAzNQ==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r407000035", "bodyText": "I was getting typescript error before but I couldn't figure out why. strange, now no more error without ts-nocheck.", "author": "aweng98", "createdAt": "2020-04-11T01:29:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4ODQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4ODgxNQ==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406988815", "bodyText": "What's the rationale for moving to this file? I'm not sure I like putting all enums into a file named enums. It doesn't really carry much logical significance to group them all here - to me it feels a bit similar to putting all the classes in a file named classes.ts. I think I prefer how it was before.", "author": "calbach", "createdAt": "2020-04-11T00:04:09Z", "path": "e2e/resources/enums.ts", "diffHunk": "@@ -0,0 +1,43 @@\n+// @ts-nocheck\n+\n+export enum workspaceAccessLevel {", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTY2Ng==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r407001666", "bodyText": "It feels right and logical to group them together for me. I didn't realize before my enum variable name were in Pascal-case and upper-case until I grouped together. Now I see them clearly and led me to use same naming convention. If you don't strongly object, I'd like to keep them in one file.", "author": "aweng98", "createdAt": "2020-04-11T01:46:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4ODgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2MTAzMw==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r407761033", "bodyText": "If you feel very strongly I won't block, but I don't think this organization makes sense. These being enums is an implementation detail.\nI'd suggest at least splitting this into two files: workspaces.ts/workspace-utils.ts and navigation.ts. Alternatively, rename this file to something that pertains to the logical grouping of these enums: maybe something like page-identifiers or labels?", "author": "calbach", "createdAt": "2020-04-13T22:40:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4ODgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4ODk1NA==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406988954", "bodyText": "Interesting, I did not realize you could just inject a require statement like this. Could you add a comment about why this is necessary and what the format of the data expected is?", "author": "calbach", "createdAt": "2020-04-11T00:05:08Z", "path": "e2e/resources/enums.ts", "diffHunk": "@@ -0,0 +1,43 @@\n+// @ts-nocheck\n+\n+export enum workspaceAccessLevel {\n+   OWNER = 'OWNER',\n+   READER = 'READER',\n+   WRITER = 'WRITER',\n+}\n+\n+export enum workspaceAction {\n+   DUPLICATE  = 'Duplicate',\n+   DELETE = 'Delete',\n+   EDIT = 'Edit',\n+   SHARE = 'Share',\n+}\n+\n+const configs = require('../resources/workbench-config');", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAxMDM3MQ==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r407010371", "bodyText": "I needed it to get workbench-configs configs, like for HOME = configs.uiBaseUrl", "author": "aweng98", "createdAt": "2020-04-11T03:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4ODk1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1ODcyNA==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r407758724", "bodyText": "Why aren't you able to just use import like in the other files?", "author": "calbach", "createdAt": "2020-04-13T22:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4ODk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4OTAzMQ==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406989031", "bodyText": "Is this really plural? Below the code seems to reference properties on it directly, indicating config would be a better name", "author": "calbach", "createdAt": "2020-04-11T00:05:36Z", "path": "e2e/resources/enums.ts", "diffHunk": "@@ -0,0 +1,43 @@\n+// @ts-nocheck\n+\n+export enum workspaceAccessLevel {\n+   OWNER = 'OWNER',\n+   READER = 'READER',\n+   WRITER = 'WRITER',\n+}\n+\n+export enum workspaceAction {\n+   DUPLICATE  = 'Duplicate',\n+   DELETE = 'Delete',\n+   EDIT = 'Edit',\n+   SHARE = 'Share',\n+}\n+\n+const configs = require('../resources/workbench-config');", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMTcyMA==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r407001720", "bodyText": "config is better. \ud83d\udc4d", "author": "aweng98", "createdAt": "2020-04-11T01:46:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4OTAzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4OTE2Ng==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406989166", "bodyText": "slice is exclusive, so I think the -1 is not correct here", "author": "calbach", "createdAt": "2020-04-11T00:06:35Z", "path": "e2e/resources/fake-user.ts", "diffHunk": "@@ -15,3 +15,14 @@ export const fakeUser = {\n   state: faker.address.stateAbbr(),\n   country: 'U.S.A'\n };\n+\n+export const makeString = (charLimit?: number) => {\n+  let loremStr = faker.lorem.paragraphs();\n+  if (charLimit === undefined) {\n+    return loremStr;\n+  }\n+  if (loremStr.length > charLimit) {\n+    loremStr = loremStr.slice(0, charLimit - 1);", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5NzczMA==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r407797730", "bodyText": "you're right. should be loremStr = loremStr.slice(0, charLimit);", "author": "aweng98", "createdAt": "2020-04-14T00:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4OTE2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4OTI5Nw==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r406989297", "bodyText": "If you're exporting enums, I'd keep them capitalized as they were previously.", "author": "calbach", "createdAt": "2020-04-11T00:07:18Z", "path": "e2e/resources/enums.ts", "diffHunk": "@@ -0,0 +1,43 @@\n+// @ts-nocheck\n+\n+export enum workspaceAccessLevel {\n+   OWNER = 'OWNER',\n+   READER = 'READER',\n+   WRITER = 'WRITER',\n+}\n+\n+export enum workspaceAction {\n+   DUPLICATE  = 'Duplicate',\n+   DELETE = 'Delete',\n+   EDIT = 'Edit',\n+   SHARE = 'Share',\n+}\n+\n+const configs = require('../resources/workbench-config');\n+\n+export enum pageUrl {", "originalCommit": "ba7e6fa5a18306f881ddcb844bcdc35ad58b86a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwMjcyMg==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r407002722", "bodyText": "all capitalized now", "author": "aweng98", "createdAt": "2020-04-11T01:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4OTI5Nw=="}], "type": "inlineReview"}, {"oid": "3c452f3ee57e5da283e80aa0716aef92bc69ee68", "url": "https://github.com/all-of-us/workbench/commit/3c452f3ee57e5da283e80aa0716aef92bc69ee68", "message": "PR feedback", "committedDate": "2020-04-11T16:14:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1ODUyNg==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r407758526", "bodyText": "The casing should be like upper-camel: WorkspaceAccessLevel", "author": "calbach", "createdAt": "2020-04-13T22:33:01Z", "path": "e2e/resources/enums.ts", "diffHunk": "@@ -0,0 +1,41 @@\n+export const config = require('resources/workbench-config');\n+\n+export enum WORKSPACE_ACCESS_LEVEL {", "originalCommit": "3c452f3ee57e5da283e80aa0716aef92bc69ee68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4MTAwOA==", "url": "https://github.com/all-of-us/workbench/pull/3381#discussion_r407781008", "bodyText": "Done. renamed all enum names to upper-camel casing.", "author": "aweng98", "createdAt": "2020-04-13T23:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc1ODUyNg=="}], "type": "inlineReview"}, {"oid": "ac78f25f7fdccb3088cd7e1ebeb4fc695a2ce4dc", "url": "https://github.com/all-of-us/workbench/commit/ac78f25f7fdccb3088cd7e1ebeb4fc695a2ce4dc", "message": "PR feedback", "committedDate": "2020-04-14T01:18:06Z", "type": "commit"}, {"oid": "2b9d3eeb033226d3be2738072f4077151493ee8b", "url": "https://github.com/all-of-us/workbench/commit/2b9d3eeb033226d3be2738072f4077151493ee8b", "message": "rename retries parameter to maxAttempts", "committedDate": "2020-04-14T01:26:04Z", "type": "commit"}]}