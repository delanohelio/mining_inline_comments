{"pr_number": 341, "pr_title": "Improve moderation commands", "pr_createdAt": "2020-02-28T02:12:38Z", "pr_url": "https://github.com/PGMDev/PGM/pull/341", "timeline": [{"oid": "462b38e045ef9a80c0444f6b54cb465648a8c95e", "url": "https://github.com/PGMDev/PGM/commit/462b38e045ef9a80c0444f6b54cb465648a8c95e", "message": "Improve moderation commands\n* Add temp-ban prefix to broadcast\n* Broadcast silent punishments to admin chat\n* Ban username in addition to IP when using /ipban\n* Disallow sending messages to muted players\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-02-28T02:17:50Z", "type": "forcePushed"}, {"oid": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0", "url": "https://github.com/PGMDev/PGM/commit/f2cb32af4a39416d37e2e7d101304f54e0d1d1d0", "message": "Add mutes, alts, and baninfo commands\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-03-06T09:14:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyODc1Mg==", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389128752", "bodyText": "I'm pretty sure we can use a Duration here, and have a duration parser", "author": "Pablete1234", "createdAt": "2020-03-06T20:30:24Z", "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -187,48 +215,46 @@ public void kick(\n \n   @Command(\n       aliases = {\"ban\", \"permban\", \"pb\"},\n-      usage = \"<player> <reason> -s (silent)\",\n-      desc = \"Ban a player from the server forever\",\n+      usage = \"<player> <reason> -s (silent) -t (time)\",\n+      desc = \"Ban an online player from the server\",\n+      flags = \"s\",\n       perms = Permissions.BAN)\n   public void ban(\n       CommandSender sender,\n       Player target,\n       Match match,\n       @Text String reason,\n-      @Switch('s') boolean silent) {\n-    MatchPlayer targetMatchPlayer = match.getPlayer(target);\n-    Component senderName = formatPunisherName(sender, match);\n-    if (punish(PunishmentType.BAN, targetMatchPlayer, sender, reason, silent)) {\n-      banPlayer(target, reason, senderName, null);\n-      target.kickPlayer(formatPunishmentScreen(PunishmentType.BAN, senderName, reason, null));\n-    }\n-  }\n+      @Switch('s') boolean silent,\n+      @Switch('t') String length)", "originalCommit": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyOTI0OA==", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389129248", "bodyText": "same here", "author": "Pablete1234", "createdAt": "2020-03-06T20:31:41Z", "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -281,6 +307,290 @@ public void ipBan(\n     }\n   }\n \n+  @Command(\n+      aliases = {\"offlineban\", \"offban\", \"ob\"},\n+      usage = \"<player> <reason> -t (length)\",\n+      desc = \"Ban an offline player from the server\",\n+      flags = \"t\",\n+      perms = Permissions.BAN)\n+  public void offlineBan(\n+      CommandSender sender,\n+      MatchManager manager,\n+      String target,\n+      @Text String reason,\n+      @Switch('t') String length)", "originalCommit": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyOTUxNQ==", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389129515", "bodyText": "Personally i'd rename target to targetPl, and keep this as target", "author": "Pablete1234", "createdAt": "2020-03-06T20:32:28Z", "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -281,6 +307,290 @@ public void ipBan(\n     }\n   }\n \n+  @Command(\n+      aliases = {\"offlineban\", \"offban\", \"ob\"},\n+      usage = \"<player> <reason> -t (length)\",\n+      desc = \"Ban an offline player from the server\",\n+      flags = \"t\",\n+      perms = Permissions.BAN)\n+  public void offlineBan(\n+      CommandSender sender,\n+      MatchManager manager,\n+      String target,\n+      @Text String reason,\n+      @Switch('t') String length)\n+      throws CommandException {\n+    Duration duration = parseBanLength(length);\n+    boolean tempBan = !duration.isZero();\n+\n+    banPlayer(\n+        target,\n+        reason,\n+        formatPunisherName(sender, manager.getMatch(sender)),\n+        tempBan ? Instant.now().plus(duration) : null);\n+    broadcastPunishment(\n+        tempBan ? PunishmentType.TEMP_BAN : PunishmentType.BAN,\n+        manager.getMatch(sender),\n+        sender,\n+        new PersonalizedText(target).color(ChatColor.DARK_AQUA),\n+        reason,\n+        true,\n+        duration);\n+  }\n+\n+  @Command(\n+      aliases = {\"alts\", \"listalts\"},\n+      usage = \"[target] (page)\",\n+      desc = \"List online players on the same IP\",\n+      perms = Permissions.STAFF)\n+  public void alts(\n+      Audience audience,\n+      CommandSender sender,\n+      MatchManager manager,\n+      @Fallback(Type.NULL) Player target,\n+      @Default(\"1\") int page)\n+      throws CommandException {\n+    if (target != null) {\n+      MatchPlayer targetMP = manager.getPlayer(target);", "originalCommit": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEzMDE4Mg==", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389130182", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  usage = \"[target] (page)\",\n          \n          \n            \n                  usage = \"[target] [page]\",", "author": "Pablete1234", "createdAt": "2020-03-06T20:34:02Z", "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -281,6 +307,290 @@ public void ipBan(\n     }\n   }\n \n+  @Command(\n+      aliases = {\"offlineban\", \"offban\", \"ob\"},\n+      usage = \"<player> <reason> -t (length)\",\n+      desc = \"Ban an offline player from the server\",\n+      flags = \"t\",\n+      perms = Permissions.BAN)\n+  public void offlineBan(\n+      CommandSender sender,\n+      MatchManager manager,\n+      String target,\n+      @Text String reason,\n+      @Switch('t') String length)\n+      throws CommandException {\n+    Duration duration = parseBanLength(length);\n+    boolean tempBan = !duration.isZero();\n+\n+    banPlayer(\n+        target,\n+        reason,\n+        formatPunisherName(sender, manager.getMatch(sender)),\n+        tempBan ? Instant.now().plus(duration) : null);\n+    broadcastPunishment(\n+        tempBan ? PunishmentType.TEMP_BAN : PunishmentType.BAN,\n+        manager.getMatch(sender),\n+        sender,\n+        new PersonalizedText(target).color(ChatColor.DARK_AQUA),\n+        reason,\n+        true,\n+        duration);\n+  }\n+\n+  @Command(\n+      aliases = {\"alts\", \"listalts\"},\n+      usage = \"[target] (page)\",", "originalCommit": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEzMDY5NA==", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389130694", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  usage = \"[player] -u (if input is UUID)\",\n          \n          \n            \n                  usage = \"[player]\",", "author": "Pablete1234", "createdAt": "2020-03-06T20:35:27Z", "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -281,6 +307,290 @@ public void ipBan(\n     }\n   }\n \n+  @Command(\n+      aliases = {\"offlineban\", \"offban\", \"ob\"},\n+      usage = \"<player> <reason> -t (length)\",\n+      desc = \"Ban an offline player from the server\",\n+      flags = \"t\",\n+      perms = Permissions.BAN)\n+  public void offlineBan(\n+      CommandSender sender,\n+      MatchManager manager,\n+      String target,\n+      @Text String reason,\n+      @Switch('t') String length)\n+      throws CommandException {\n+    Duration duration = parseBanLength(length);\n+    boolean tempBan = !duration.isZero();\n+\n+    banPlayer(\n+        target,\n+        reason,\n+        formatPunisherName(sender, manager.getMatch(sender)),\n+        tempBan ? Instant.now().plus(duration) : null);\n+    broadcastPunishment(\n+        tempBan ? PunishmentType.TEMP_BAN : PunishmentType.BAN,\n+        manager.getMatch(sender),\n+        sender,\n+        new PersonalizedText(target).color(ChatColor.DARK_AQUA),\n+        reason,\n+        true,\n+        duration);\n+  }\n+\n+  @Command(\n+      aliases = {\"alts\", \"listalts\"},\n+      usage = \"[target] (page)\",\n+      desc = \"List online players on the same IP\",\n+      perms = Permissions.STAFF)\n+  public void alts(\n+      Audience audience,\n+      CommandSender sender,\n+      MatchManager manager,\n+      @Fallback(Type.NULL) Player target,\n+      @Default(\"1\") int page)\n+      throws CommandException {\n+    if (target != null) {\n+      MatchPlayer targetMP = manager.getPlayer(target);\n+      List<MatchPlayer> alts = getAltAccounts(target, manager);\n+      if (alts.isEmpty()) {\n+        sender.sendMessage(\n+            new PersonalizedTranslatable(\n+                    \"moderation.commands.noAlts\", targetMP.getStyledName(NameStyle.FANCY))\n+                .getPersonalizedText()\n+                .color(ChatColor.RED));\n+      } else {\n+        sender.sendMessage(formatAltAccountList(targetMP, alts));\n+      }\n+    } else {\n+      List<Component> altAccounts = Lists.newArrayList();\n+      List<MatchPlayer> accountedFor = Lists.newArrayList();\n+\n+      for (Player player : Bukkit.getOnlinePlayers()) {\n+        MatchPlayer targetMP = manager.getPlayer(player);\n+        List<MatchPlayer> alts = getAltAccounts(player, manager);\n+\n+        if (alts.isEmpty() || accountedFor.contains(targetMP)) {\n+          continue;\n+        } else {\n+          altAccounts.add(formatAltAccountList(targetMP, alts));\n+          accountedFor.add(targetMP);\n+          accountedFor.addAll(alts);\n+        }\n+      }\n+\n+      int perPage = 8;\n+      int pages = (altAccounts.size() + perPage - 1) / perPage;\n+\n+      Component pageNum =\n+          new PersonalizedTranslatable(\n+                  \"command.paginatedResult.page\",\n+                  new PersonalizedText(Integer.toString(page)).color(ChatColor.DARK_AQUA),\n+                  new PersonalizedText(Integer.toString(pages)).color(ChatColor.DARK_AQUA))\n+              .getPersonalizedText()\n+              .color(ChatColor.GRAY);\n+\n+      Component headerText =\n+          new PersonalizedTranslatable(\"moderation.alts.header\")\n+              .getPersonalizedText()\n+              .color(ChatColor.DARK_AQUA);\n+\n+      Component header =\n+          new PersonalizedText(\n+              headerText,\n+              new PersonalizedText(\" (\").color(ChatColor.GRAY),\n+              new PersonalizedText(Integer.toString(altAccounts.size())).color(ChatColor.DARK_AQUA),\n+              new PersonalizedText(\") \u00bb Page \").color(ChatColor.GRAY),\n+              pageNum);\n+\n+      Component formattedHeader =\n+          new PersonalizedText(\n+              ComponentUtils.horizontalLineHeading(\n+                  ComponentRenderers.toLegacyText(header, sender), ChatColor.BLUE));\n+\n+      new PrettyPaginatedComponentResults<Component>(formattedHeader, perPage) {\n+        @Override\n+        public Component format(Component data, int index) {\n+          return data;\n+        }\n+\n+        @Override\n+        public Component formatEmpty() throws CommandException {\n+          throw new CommandException(\"No alternate accounts found!\");\n+        }\n+      }.display(audience, altAccounts, page);\n+    }\n+  }\n+\n+  @Command(\n+      aliases = {\"baninfo\", \"lookup\", \"l\"},\n+      usage = \"[player] -u (if input is UUID)\",", "originalCommit": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxMjUwMg==", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389212502", "bodyText": "The command should automatically detect if the input is a player name or UUID", "author": "TheMolkaPL", "createdAt": "2020-03-07T01:20:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEzMDY5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEzMTI0MQ==", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389131241", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void banInfo(CommandSender sender, String target, @Switch('u') boolean uuid)\n          \n          \n            \n              public void banInfo(CommandSender sender, String target)", "author": "Pablete1234", "createdAt": "2020-03-06T20:36:39Z", "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -281,6 +307,290 @@ public void ipBan(\n     }\n   }\n \n+  @Command(\n+      aliases = {\"offlineban\", \"offban\", \"ob\"},\n+      usage = \"<player> <reason> -t (length)\",\n+      desc = \"Ban an offline player from the server\",\n+      flags = \"t\",\n+      perms = Permissions.BAN)\n+  public void offlineBan(\n+      CommandSender sender,\n+      MatchManager manager,\n+      String target,\n+      @Text String reason,\n+      @Switch('t') String length)\n+      throws CommandException {\n+    Duration duration = parseBanLength(length);\n+    boolean tempBan = !duration.isZero();\n+\n+    banPlayer(\n+        target,\n+        reason,\n+        formatPunisherName(sender, manager.getMatch(sender)),\n+        tempBan ? Instant.now().plus(duration) : null);\n+    broadcastPunishment(\n+        tempBan ? PunishmentType.TEMP_BAN : PunishmentType.BAN,\n+        manager.getMatch(sender),\n+        sender,\n+        new PersonalizedText(target).color(ChatColor.DARK_AQUA),\n+        reason,\n+        true,\n+        duration);\n+  }\n+\n+  @Command(\n+      aliases = {\"alts\", \"listalts\"},\n+      usage = \"[target] (page)\",\n+      desc = \"List online players on the same IP\",\n+      perms = Permissions.STAFF)\n+  public void alts(\n+      Audience audience,\n+      CommandSender sender,\n+      MatchManager manager,\n+      @Fallback(Type.NULL) Player target,\n+      @Default(\"1\") int page)\n+      throws CommandException {\n+    if (target != null) {\n+      MatchPlayer targetMP = manager.getPlayer(target);\n+      List<MatchPlayer> alts = getAltAccounts(target, manager);\n+      if (alts.isEmpty()) {\n+        sender.sendMessage(\n+            new PersonalizedTranslatable(\n+                    \"moderation.commands.noAlts\", targetMP.getStyledName(NameStyle.FANCY))\n+                .getPersonalizedText()\n+                .color(ChatColor.RED));\n+      } else {\n+        sender.sendMessage(formatAltAccountList(targetMP, alts));\n+      }\n+    } else {\n+      List<Component> altAccounts = Lists.newArrayList();\n+      List<MatchPlayer> accountedFor = Lists.newArrayList();\n+\n+      for (Player player : Bukkit.getOnlinePlayers()) {\n+        MatchPlayer targetMP = manager.getPlayer(player);\n+        List<MatchPlayer> alts = getAltAccounts(player, manager);\n+\n+        if (alts.isEmpty() || accountedFor.contains(targetMP)) {\n+          continue;\n+        } else {\n+          altAccounts.add(formatAltAccountList(targetMP, alts));\n+          accountedFor.add(targetMP);\n+          accountedFor.addAll(alts);\n+        }\n+      }\n+\n+      int perPage = 8;\n+      int pages = (altAccounts.size() + perPage - 1) / perPage;\n+\n+      Component pageNum =\n+          new PersonalizedTranslatable(\n+                  \"command.paginatedResult.page\",\n+                  new PersonalizedText(Integer.toString(page)).color(ChatColor.DARK_AQUA),\n+                  new PersonalizedText(Integer.toString(pages)).color(ChatColor.DARK_AQUA))\n+              .getPersonalizedText()\n+              .color(ChatColor.GRAY);\n+\n+      Component headerText =\n+          new PersonalizedTranslatable(\"moderation.alts.header\")\n+              .getPersonalizedText()\n+              .color(ChatColor.DARK_AQUA);\n+\n+      Component header =\n+          new PersonalizedText(\n+              headerText,\n+              new PersonalizedText(\" (\").color(ChatColor.GRAY),\n+              new PersonalizedText(Integer.toString(altAccounts.size())).color(ChatColor.DARK_AQUA),\n+              new PersonalizedText(\") \u00bb Page \").color(ChatColor.GRAY),\n+              pageNum);\n+\n+      Component formattedHeader =\n+          new PersonalizedText(\n+              ComponentUtils.horizontalLineHeading(\n+                  ComponentRenderers.toLegacyText(header, sender), ChatColor.BLUE));\n+\n+      new PrettyPaginatedComponentResults<Component>(formattedHeader, perPage) {\n+        @Override\n+        public Component format(Component data, int index) {\n+          return data;\n+        }\n+\n+        @Override\n+        public Component formatEmpty() throws CommandException {\n+          throw new CommandException(\"No alternate accounts found!\");\n+        }\n+      }.display(audience, altAccounts, page);\n+    }\n+  }\n+\n+  @Command(\n+      aliases = {\"baninfo\", \"lookup\", \"l\"},\n+      usage = \"[player] -u (if input is UUID)\",\n+      desc = \"Lookup baninfo about a player\",\n+      perms = Permissions.STAFF)\n+  public void banInfo(CommandSender sender, String target, @Switch('u') boolean uuid)", "originalCommit": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEzMjA0MQ==", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389132041", "bodyText": "Make name or UUID toggle based on the format, not based on a flag.\nMinecraft usernames must be between 3 and 16 characters, if it's over 16, it's guaranteed to be a UUID (possibly with, possibly without dashes)", "author": "Pablete1234", "createdAt": "2020-03-06T20:38:24Z", "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -281,6 +307,290 @@ public void ipBan(\n     }\n   }\n \n+  @Command(\n+      aliases = {\"offlineban\", \"offban\", \"ob\"},\n+      usage = \"<player> <reason> -t (length)\",\n+      desc = \"Ban an offline player from the server\",\n+      flags = \"t\",\n+      perms = Permissions.BAN)\n+  public void offlineBan(\n+      CommandSender sender,\n+      MatchManager manager,\n+      String target,\n+      @Text String reason,\n+      @Switch('t') String length)\n+      throws CommandException {\n+    Duration duration = parseBanLength(length);\n+    boolean tempBan = !duration.isZero();\n+\n+    banPlayer(\n+        target,\n+        reason,\n+        formatPunisherName(sender, manager.getMatch(sender)),\n+        tempBan ? Instant.now().plus(duration) : null);\n+    broadcastPunishment(\n+        tempBan ? PunishmentType.TEMP_BAN : PunishmentType.BAN,\n+        manager.getMatch(sender),\n+        sender,\n+        new PersonalizedText(target).color(ChatColor.DARK_AQUA),\n+        reason,\n+        true,\n+        duration);\n+  }\n+\n+  @Command(\n+      aliases = {\"alts\", \"listalts\"},\n+      usage = \"[target] (page)\",\n+      desc = \"List online players on the same IP\",\n+      perms = Permissions.STAFF)\n+  public void alts(\n+      Audience audience,\n+      CommandSender sender,\n+      MatchManager manager,\n+      @Fallback(Type.NULL) Player target,\n+      @Default(\"1\") int page)\n+      throws CommandException {\n+    if (target != null) {\n+      MatchPlayer targetMP = manager.getPlayer(target);\n+      List<MatchPlayer> alts = getAltAccounts(target, manager);\n+      if (alts.isEmpty()) {\n+        sender.sendMessage(\n+            new PersonalizedTranslatable(\n+                    \"moderation.commands.noAlts\", targetMP.getStyledName(NameStyle.FANCY))\n+                .getPersonalizedText()\n+                .color(ChatColor.RED));\n+      } else {\n+        sender.sendMessage(formatAltAccountList(targetMP, alts));\n+      }\n+    } else {\n+      List<Component> altAccounts = Lists.newArrayList();\n+      List<MatchPlayer> accountedFor = Lists.newArrayList();\n+\n+      for (Player player : Bukkit.getOnlinePlayers()) {\n+        MatchPlayer targetMP = manager.getPlayer(player);\n+        List<MatchPlayer> alts = getAltAccounts(player, manager);\n+\n+        if (alts.isEmpty() || accountedFor.contains(targetMP)) {\n+          continue;\n+        } else {\n+          altAccounts.add(formatAltAccountList(targetMP, alts));\n+          accountedFor.add(targetMP);\n+          accountedFor.addAll(alts);\n+        }\n+      }\n+\n+      int perPage = 8;\n+      int pages = (altAccounts.size() + perPage - 1) / perPage;\n+\n+      Component pageNum =\n+          new PersonalizedTranslatable(\n+                  \"command.paginatedResult.page\",\n+                  new PersonalizedText(Integer.toString(page)).color(ChatColor.DARK_AQUA),\n+                  new PersonalizedText(Integer.toString(pages)).color(ChatColor.DARK_AQUA))\n+              .getPersonalizedText()\n+              .color(ChatColor.GRAY);\n+\n+      Component headerText =\n+          new PersonalizedTranslatable(\"moderation.alts.header\")\n+              .getPersonalizedText()\n+              .color(ChatColor.DARK_AQUA);\n+\n+      Component header =\n+          new PersonalizedText(\n+              headerText,\n+              new PersonalizedText(\" (\").color(ChatColor.GRAY),\n+              new PersonalizedText(Integer.toString(altAccounts.size())).color(ChatColor.DARK_AQUA),\n+              new PersonalizedText(\") \u00bb Page \").color(ChatColor.GRAY),\n+              pageNum);\n+\n+      Component formattedHeader =\n+          new PersonalizedText(\n+              ComponentUtils.horizontalLineHeading(\n+                  ComponentRenderers.toLegacyText(header, sender), ChatColor.BLUE));\n+\n+      new PrettyPaginatedComponentResults<Component>(formattedHeader, perPage) {\n+        @Override\n+        public Component format(Component data, int index) {\n+          return data;\n+        }\n+\n+        @Override\n+        public Component formatEmpty() throws CommandException {\n+          throw new CommandException(\"No alternate accounts found!\");\n+        }\n+      }.display(audience, altAccounts, page);\n+    }\n+  }\n+\n+  @Command(\n+      aliases = {\"baninfo\", \"lookup\", \"l\"},\n+      usage = \"[player] -u (if input is UUID)\",\n+      desc = \"Lookup baninfo about a player\",\n+      perms = Permissions.STAFF)\n+  public void banInfo(CommandSender sender, String target, @Switch('u') boolean uuid)\n+      throws CommandException {\n+    BanEntry ban = Bukkit.getBanList(BanList.Type.NAME).getBanEntry(target);", "originalCommit": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEzMzA0Mg==", "url": "https://github.com/PGMDev/PGM/pull/341#discussion_r389133042", "bodyText": "Switch this one arround to:\nif (ban == null ||\n    (ban.getExpiration() != null && ban.getExpiration.toInstant().isBefore(Instant.now())) { \n   throw CommandEx...;\n}\n\nIt will make the rest of the command not be indented by one and probably easier to read", "author": "Pablete1234", "createdAt": "2020-03-06T20:40:47Z", "path": "core/src/main/java/tc/oc/pgm/community/commands/ModerationCommands.java", "diffHunk": "@@ -281,6 +307,290 @@ public void ipBan(\n     }\n   }\n \n+  @Command(\n+      aliases = {\"offlineban\", \"offban\", \"ob\"},\n+      usage = \"<player> <reason> -t (length)\",\n+      desc = \"Ban an offline player from the server\",\n+      flags = \"t\",\n+      perms = Permissions.BAN)\n+  public void offlineBan(\n+      CommandSender sender,\n+      MatchManager manager,\n+      String target,\n+      @Text String reason,\n+      @Switch('t') String length)\n+      throws CommandException {\n+    Duration duration = parseBanLength(length);\n+    boolean tempBan = !duration.isZero();\n+\n+    banPlayer(\n+        target,\n+        reason,\n+        formatPunisherName(sender, manager.getMatch(sender)),\n+        tempBan ? Instant.now().plus(duration) : null);\n+    broadcastPunishment(\n+        tempBan ? PunishmentType.TEMP_BAN : PunishmentType.BAN,\n+        manager.getMatch(sender),\n+        sender,\n+        new PersonalizedText(target).color(ChatColor.DARK_AQUA),\n+        reason,\n+        true,\n+        duration);\n+  }\n+\n+  @Command(\n+      aliases = {\"alts\", \"listalts\"},\n+      usage = \"[target] (page)\",\n+      desc = \"List online players on the same IP\",\n+      perms = Permissions.STAFF)\n+  public void alts(\n+      Audience audience,\n+      CommandSender sender,\n+      MatchManager manager,\n+      @Fallback(Type.NULL) Player target,\n+      @Default(\"1\") int page)\n+      throws CommandException {\n+    if (target != null) {\n+      MatchPlayer targetMP = manager.getPlayer(target);\n+      List<MatchPlayer> alts = getAltAccounts(target, manager);\n+      if (alts.isEmpty()) {\n+        sender.sendMessage(\n+            new PersonalizedTranslatable(\n+                    \"moderation.commands.noAlts\", targetMP.getStyledName(NameStyle.FANCY))\n+                .getPersonalizedText()\n+                .color(ChatColor.RED));\n+      } else {\n+        sender.sendMessage(formatAltAccountList(targetMP, alts));\n+      }\n+    } else {\n+      List<Component> altAccounts = Lists.newArrayList();\n+      List<MatchPlayer> accountedFor = Lists.newArrayList();\n+\n+      for (Player player : Bukkit.getOnlinePlayers()) {\n+        MatchPlayer targetMP = manager.getPlayer(player);\n+        List<MatchPlayer> alts = getAltAccounts(player, manager);\n+\n+        if (alts.isEmpty() || accountedFor.contains(targetMP)) {\n+          continue;\n+        } else {\n+          altAccounts.add(formatAltAccountList(targetMP, alts));\n+          accountedFor.add(targetMP);\n+          accountedFor.addAll(alts);\n+        }\n+      }\n+\n+      int perPage = 8;\n+      int pages = (altAccounts.size() + perPage - 1) / perPage;\n+\n+      Component pageNum =\n+          new PersonalizedTranslatable(\n+                  \"command.paginatedResult.page\",\n+                  new PersonalizedText(Integer.toString(page)).color(ChatColor.DARK_AQUA),\n+                  new PersonalizedText(Integer.toString(pages)).color(ChatColor.DARK_AQUA))\n+              .getPersonalizedText()\n+              .color(ChatColor.GRAY);\n+\n+      Component headerText =\n+          new PersonalizedTranslatable(\"moderation.alts.header\")\n+              .getPersonalizedText()\n+              .color(ChatColor.DARK_AQUA);\n+\n+      Component header =\n+          new PersonalizedText(\n+              headerText,\n+              new PersonalizedText(\" (\").color(ChatColor.GRAY),\n+              new PersonalizedText(Integer.toString(altAccounts.size())).color(ChatColor.DARK_AQUA),\n+              new PersonalizedText(\") \u00bb Page \").color(ChatColor.GRAY),\n+              pageNum);\n+\n+      Component formattedHeader =\n+          new PersonalizedText(\n+              ComponentUtils.horizontalLineHeading(\n+                  ComponentRenderers.toLegacyText(header, sender), ChatColor.BLUE));\n+\n+      new PrettyPaginatedComponentResults<Component>(formattedHeader, perPage) {\n+        @Override\n+        public Component format(Component data, int index) {\n+          return data;\n+        }\n+\n+        @Override\n+        public Component formatEmpty() throws CommandException {\n+          throw new CommandException(\"No alternate accounts found!\");\n+        }\n+      }.display(audience, altAccounts, page);\n+    }\n+  }\n+\n+  @Command(\n+      aliases = {\"baninfo\", \"lookup\", \"l\"},\n+      usage = \"[player] -u (if input is UUID)\",\n+      desc = \"Lookup baninfo about a player\",\n+      perms = Permissions.STAFF)\n+  public void banInfo(CommandSender sender, String target, @Switch('u') boolean uuid)\n+      throws CommandException {\n+    BanEntry ban = Bukkit.getBanList(BanList.Type.NAME).getBanEntry(target);\n+\n+    if (ban != null) {", "originalCommit": "f2cb32af4a39416d37e2e7d101304f54e0d1d1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8229c32e3e41d6489757937b9c7bf30195f8f715", "url": "https://github.com/PGMDev/PGM/commit/8229c32e3e41d6489757937b9c7bf30195f8f715", "message": "Improve moderation commands\n* Add temp-ban prefix to broadcast\n* Broadcast silent punishments to admin chat\n* Ban username in addition to IP when using /ipban\n* Disallow sending messages to muted players\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-03-12T01:02:15Z", "type": "commit"}, {"oid": "46c8f33e8d66d14b3d2b1b9598de0545264d88e4", "url": "https://github.com/PGMDev/PGM/commit/46c8f33e8d66d14b3d2b1b9598de0545264d88e4", "message": "Reformat punishment broadcasts\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-03-12T01:02:16Z", "type": "commit"}, {"oid": "fe00dfc9423c771f5d125e3236fa0d057cbf390a", "url": "https://github.com/PGMDev/PGM/commit/fe00dfc9423c771f5d125e3236fa0d057cbf390a", "message": "Remove username ban for /ipban\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-03-12T01:02:16Z", "type": "commit"}, {"oid": "ded5c321e71acebd04ed13f32370b9e2dd4ab767", "url": "https://github.com/PGMDev/PGM/commit/ded5c321e71acebd04ed13f32370b9e2dd4ab767", "message": "Combine tempban and ban into one command\n* Also updated punishment broadcast format\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-03-12T01:02:16Z", "type": "commit"}, {"oid": "c7ea28cf77c6ebc83a14db4fc92afdb43d8124fc", "url": "https://github.com/PGMDev/PGM/commit/c7ea28cf77c6ebc83a14db4fc92afdb43d8124fc", "message": "Update punishment broadcast format\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-03-12T01:02:16Z", "type": "commit"}, {"oid": "959838206d765e3bf2aa4954a7b09650eefc72ef", "url": "https://github.com/PGMDev/PGM/commit/959838206d765e3bf2aa4954a7b09650eefc72ef", "message": "Add mutes, alts, and baninfo commands\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-03-12T01:02:16Z", "type": "commit"}, {"oid": "e1b06101097a110a27f826db364d7c833bc0e5de", "url": "https://github.com/PGMDev/PGM/commit/e1b06101097a110a27f826db364d7c833bc0e5de", "message": "Clean up improvements\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-03-12T01:02:17Z", "type": "commit"}, {"oid": "8fc01102d11531015be4c20183e4973ddb4c94a7", "url": "https://github.com/PGMDev/PGM/commit/8fc01102d11531015be4c20183e4973ddb4c94a7", "message": "Remove unused ModerationCommands class.\n* Also improved reports formatting header\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-03-12T01:02:17Z", "type": "commit"}, {"oid": "8fc01102d11531015be4c20183e4973ddb4c94a7", "url": "https://github.com/PGMDev/PGM/commit/8fc01102d11531015be4c20183e4973ddb4c94a7", "message": "Remove unused ModerationCommands class.\n* Also improved reports formatting header\n\nSigned-off-by: applenick <applenick@users.noreply.github.com>", "committedDate": "2020-03-12T01:02:17Z", "type": "forcePushed"}]}