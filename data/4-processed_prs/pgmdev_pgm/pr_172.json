{"pr_number": 172, "pr_title": "Map tags", "pr_createdAt": "2020-01-01T03:03:32Z", "pr_url": "https://github.com/PGMDev/PGM/pull/172", "timeline": [{"oid": "c4a32834b3cda8af94c2becc3e993064b6518959", "url": "https://github.com/PGMDev/PGM/commit/c4a32834b3cda8af94c2becc3e993064b6518959", "message": "Begin implementing map tags\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T03:01:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzI0NQ==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362303245", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                this.name = checkNotNull(name).toLowerCase(Locale.US);\n          \n          \n            \n                this.name = checkNotNull(name).toLowerCase(Locale.ROOT);", "author": "Pablete1234", "createdAt": "2020-01-01T05:10:58Z", "path": "src/main/java/tc/oc/pgm/maptag/MapTag.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.Locale;\n+import java.util.Objects;\n+\n+public class MapTag implements Comparable<MapTag> {\n+  public static final char SYMBOL = '#';\n+\n+  private final String name;\n+\n+  protected MapTag(String name) {\n+    this.name = checkNotNull(name).toLowerCase(Locale.US);", "originalCommit": "c4a32834b3cda8af94c2becc3e993064b6518959", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzMyNg==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362303326", "bodyText": "Maybe call this #worldgen ?", "author": "Pablete1234", "createdAt": "2020-01-01T05:13:50Z", "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Aleksander Jagie\u0142\u0142o <themolkapl@gmail.com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.function.Predicate;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+\n+public interface StandardMapTags {\n+  StandardMapTag _4TEAMS = create(\"4teams\", TeamModule.class, team -> team.getTeams().size() == 4);\n+  StandardMapTag BLITZ = create(\"blitz\", BlitzModule.class, blitz -> !blitz.isDisabled(null));\n+  StandardMapTag CLASSES = create(\"classes\", ClassModule.class);\n+  StandardMapTag CORE = create(\"core\", CoreModule.class);\n+  StandardMapTag CP = create(\"cp\", ControlPointModule.class);\n+  StandardMapTag CRAFTING =\n+      create(\"crafting\", CraftingModule.class, crafting -> !crafting.getCustomRecipes().isEmpty());\n+  StandardMapTag DESTROYABLE = create(\"destroyable\", DestroyableModule.class);\n+  StandardMapTag EVENTEAMS =\n+      create(\"eventeams\", TeamModule.class, team -> team.shouldRequireEven().orElse(false));\n+  StandardMapTag FFA = create(\"ffa\", FreeForAllModule.class);\n+  StandardMapTag FLAG = create(\"flag\", FlagModule.class);\n+  StandardMapTag FRIENDLYFIRE =\n+      create(\"friendlyfire\", InfoModule.class, info -> info.getMapInfo().friendlyFire);\n+  StandardMapTag INTERNAL = create(\"internal\", InternalModule.class);\n+  StandardMapTag INSTANTTNT =\n+      create(\"instanttnt\", TNTModule.class, tnt -> tnt.getProperties().instantIgnite);\n+  StandardMapTag NO_HUNGER = create(\"nohunger\", HungerModule.class);\n+  StandardMapTag RAGE = create(\"rage\", RageModule.class);\n+  StandardMapTag RFW = create(\"rfw\", LaneModule.class);\n+  StandardMapTag SCOREBOX =\n+      create(\"scorebox\", ScoreModule.class, score -> !score.getScoreBoxFactories().isEmpty());\n+  StandardMapTag TEAMS = create(\"teams\", TeamModule.class);\n+  StandardMapTag TDM =\n+      create(\n+          \"tdm\",\n+          ScoreModule.class,\n+          score -> score.getConfig().deathScore != 0 || score.getConfig().killScore != 0);\n+  StandardMapTag TIMELIMIT =\n+      create(\"timelimit\", TimeLimitModule.class, timeLimit -> timeLimit.getTimeLimit().isPresent());\n+  StandardMapTag VANILLAWORLD =\n+      create(\"vanillaworld\", TerrainModule.class, terrain -> terrain.getOptions().vanilla);", "originalCommit": "c4a32834b3cda8af94c2becc3e993064b6518959", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMyODU1Mg==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362328552", "bodyText": "Isn't vanillaworld more user friendly?", "author": "TheMolkaPL", "createdAt": "2020-01-01T15:16:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMzNDY0Ng==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362334646", "bodyText": "i'm not sure, if i didn't know all the tags and i had to guess, i don't think i would've ever guessed vanillaworld to find a map that had vanilla world generation", "author": "Pablete1234", "createdAt": "2020-01-01T17:36:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMzNTUxMA==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362335510", "bodyText": "Actually none of maps in maps.oc.tc repo uses this feature. I'll make it longer and call it #vanillaworldgen.", "author": "TheMolkaPL", "createdAt": "2020-01-01T17:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzMzNA==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362303334", "bodyText": "no one calls them destroyables, #monument ?", "author": "Pablete1234", "createdAt": "2020-01-01T05:14:37Z", "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Aleksander Jagie\u0142\u0142o <themolkapl@gmail.com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.function.Predicate;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+\n+public interface StandardMapTags {\n+  StandardMapTag _4TEAMS = create(\"4teams\", TeamModule.class, team -> team.getTeams().size() == 4);\n+  StandardMapTag BLITZ = create(\"blitz\", BlitzModule.class, blitz -> !blitz.isDisabled(null));\n+  StandardMapTag CLASSES = create(\"classes\", ClassModule.class);\n+  StandardMapTag CORE = create(\"core\", CoreModule.class);\n+  StandardMapTag CP = create(\"cp\", ControlPointModule.class);\n+  StandardMapTag CRAFTING =\n+      create(\"crafting\", CraftingModule.class, crafting -> !crafting.getCustomRecipes().isEmpty());\n+  StandardMapTag DESTROYABLE = create(\"destroyable\", DestroyableModule.class);", "originalCommit": "c4a32834b3cda8af94c2becc3e993064b6518959", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMyODYxMA==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362328610", "bodyText": "DTE (Destroy The Enemy) uses destroyables to define islands. If we aren't calling them #destroyable I would go for #dtm instead.", "author": "TheMolkaPL", "createdAt": "2020-01-01T15:18:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMzNDU3Mw==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362334573", "bodyText": "You have #core and #wool, basically missing #monument, otherwise, rename them all to #dtc, #ctw, #dtm, but those names may be a more cryptic for users.\nDestroy the enemy is just a type of map that uses a big monument, but it's still a monument. Code-wise they're called destroyables, but they're only called that to the user when it's destroy the enemy, and never on any other monument map (eg: warlock, snowy wars).", "author": "Pablete1234", "createdAt": "2020-01-01T17:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzM5MA==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362303390", "bodyText": "Sounds misleading, maybe #autotnt or #autoignote ?", "author": "Pablete1234", "createdAt": "2020-01-01T05:16:06Z", "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Aleksander Jagie\u0142\u0142o <themolkapl@gmail.com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.function.Predicate;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+\n+public interface StandardMapTags {\n+  StandardMapTag _4TEAMS = create(\"4teams\", TeamModule.class, team -> team.getTeams().size() == 4);\n+  StandardMapTag BLITZ = create(\"blitz\", BlitzModule.class, blitz -> !blitz.isDisabled(null));\n+  StandardMapTag CLASSES = create(\"classes\", ClassModule.class);\n+  StandardMapTag CORE = create(\"core\", CoreModule.class);\n+  StandardMapTag CP = create(\"cp\", ControlPointModule.class);\n+  StandardMapTag CRAFTING =\n+      create(\"crafting\", CraftingModule.class, crafting -> !crafting.getCustomRecipes().isEmpty());\n+  StandardMapTag DESTROYABLE = create(\"destroyable\", DestroyableModule.class);\n+  StandardMapTag EVENTEAMS =\n+      create(\"eventeams\", TeamModule.class, team -> team.shouldRequireEven().orElse(false));\n+  StandardMapTag FFA = create(\"ffa\", FreeForAllModule.class);\n+  StandardMapTag FLAG = create(\"flag\", FlagModule.class);\n+  StandardMapTag FRIENDLYFIRE =\n+      create(\"friendlyfire\", InfoModule.class, info -> info.getMapInfo().friendlyFire);\n+  StandardMapTag INTERNAL = create(\"internal\", InternalModule.class);\n+  StandardMapTag INSTANTTNT =\n+      create(\"instanttnt\", TNTModule.class, tnt -> tnt.getProperties().instantIgnite);", "originalCommit": "c4a32834b3cda8af94c2becc3e993064b6518959", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzQ4Mg==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362303482", "bodyText": "Even tho there's an xml difference between control points and hills, i think #hill may  be more user-friendly?", "author": "Pablete1234", "createdAt": "2020-01-01T05:19:30Z", "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Aleksander Jagie\u0142\u0142o <themolkapl@gmail.com>\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import java.util.function.Predicate;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+\n+public interface StandardMapTags {\n+  StandardMapTag _4TEAMS = create(\"4teams\", TeamModule.class, team -> team.getTeams().size() == 4);\n+  StandardMapTag BLITZ = create(\"blitz\", BlitzModule.class, blitz -> !blitz.isDisabled(null));\n+  StandardMapTag CLASSES = create(\"classes\", ClassModule.class);\n+  StandardMapTag CORE = create(\"core\", CoreModule.class);\n+  StandardMapTag CP = create(\"cp\", ControlPointModule.class);", "originalCommit": "c4a32834b3cda8af94c2becc3e993064b6518959", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMyODY4Ng==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362328686", "bodyText": "How about #ctp instead?", "author": "TheMolkaPL", "createdAt": "2020-01-01T15:19:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMzNDQyMg==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362334422", "bodyText": "Yeah i think #ctp would be nice", "author": "Pablete1234", "createdAt": "2020-01-01T17:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjMwMzQ4Mg=="}], "type": "inlineReview"}, {"oid": "f15b386ac09ad85d788e3ff804ea5f5565465f1e", "url": "https://github.com/PGMDev/PGM/commit/f15b386ac09ad85d788e3ff804ea5f5565465f1e", "message": "Match maptag regex pattern\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T15:29:00Z", "type": "commit"}, {"oid": "ec29f1857b9d38863c4ece32e917777b68e541e2", "url": "https://github.com/PGMDev/PGM/commit/ec29f1857b9d38863c4ece32e917777b68e541e2", "message": "Fix standard maptag order\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T15:30:37Z", "type": "commit"}, {"oid": "ec29f1857b9d38863c4ece32e917777b68e541e2", "url": "https://github.com/PGMDev/PGM/commit/ec29f1857b9d38863c4ece32e917777b68e541e2", "message": "Fix standard maptag order\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T15:30:37Z", "type": "forcePushed"}, {"oid": "1e6bb85f0c97d02464c4aa38be22bba07283d0db", "url": "https://github.com/PGMDev/PGM/commit/1e6bb85f0c97d02464c4aa38be22bba07283d0db", "message": "Create MapTagSet\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T16:44:55Z", "type": "commit"}, {"oid": "0505808829d7722ddac2da7d05eb78d360651dc5", "url": "https://github.com/PGMDev/PGM/commit/0505808829d7722ddac2da7d05eb78d360651dc5", "message": "Parse custom map tags in XML\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T16:45:15Z", "type": "commit"}, {"oid": "a6f69fc30bdfe53c1c9d7bcb7046994752dc955d", "url": "https://github.com/PGMDev/PGM/commit/a6f69fc30bdfe53c1c9d7bcb7046994752dc955d", "message": "Fix formatting\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T16:48:21Z", "type": "commit"}, {"oid": "ca1b334875f5fb0137c95c2742c0ccf13d10af9d", "url": "https://github.com/PGMDev/PGM/commit/ca1b334875f5fb0137c95c2742c0ccf13d10af9d", "message": "Collect defined standard map tags\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T17:10:44Z", "type": "commit"}, {"oid": "c1d64dcefa3237d2c0950581da170094e781f38a", "url": "https://github.com/PGMDev/PGM/commit/c1d64dcefa3237d2c0950581da170094e781f38a", "message": "Rename few standard map tags\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T17:59:44Z", "type": "commit"}, {"oid": "0d9186d5a88d98b0f3126ba9f3ffb91b4b317b61", "url": "https://github.com/PGMDev/PGM/commit/0d9186d5a88d98b0f3126ba9f3ffb91b4b317b61", "message": "Allow any class in StandardMapTags.collect\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T18:05:09Z", "type": "commit"}, {"oid": "bbaf6ee3ee519eef4e6c31789bafba9df89cf28b", "url": "https://github.com/PGMDev/PGM/commit/bbaf6ee3ee519eef4e6c31789bafba9df89cf28b", "message": "Remove license headers lol\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T18:35:10Z", "type": "commit"}, {"oid": "bbaf6ee3ee519eef4e6c31789bafba9df89cf28b", "url": "https://github.com/PGMDev/PGM/commit/bbaf6ee3ee519eef4e6c31789bafba9df89cf28b", "message": "Remove license headers lol\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T18:35:10Z", "type": "forcePushed"}, {"oid": "384e06aa66474dce050a7187f40e50c1d16c9fc6", "url": "https://github.com/PGMDev/PGM/commit/384e06aa66474dce050a7187f40e50c1d16c9fc6", "message": "Registry for StandardMapTags\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T20:55:17Z", "type": "commit"}, {"oid": "384e06aa66474dce050a7187f40e50c1d16c9fc6", "url": "https://github.com/PGMDev/PGM/commit/384e06aa66474dce050a7187f40e50c1d16c9fc6", "message": "Registry for StandardMapTags\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T20:55:17Z", "type": "forcePushed"}, {"oid": "d477d6e15f43153a383c3063790628612fd727a5", "url": "https://github.com/PGMDev/PGM/commit/d477d6e15f43153a383c3063790628612fd727a5", "message": "Append standard map tags into MapPersistentContext\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T21:18:12Z", "type": "commit"}, {"oid": "b95ef6f67c7da97787a685012ae31000e18006a5", "url": "https://github.com/PGMDev/PGM/commit/b95ef6f67c7da97787a685012ae31000e18006a5", "message": "Rename #ctp to #controlpoint\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T21:25:31Z", "type": "commit"}, {"oid": "b95ef6f67c7da97787a685012ae31000e18006a5", "url": "https://github.com/PGMDev/PGM/commit/b95ef6f67c7da97787a685012ae31000e18006a5", "message": "Rename #ctp to #controlpoint\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T21:25:31Z", "type": "forcePushed"}, {"oid": "2b7f9c4a164c5446b89370e9de1c0f20d7be87a4", "url": "https://github.com/PGMDev/PGM/commit/2b7f9c4a164c5446b89370e9de1c0f20d7be87a4", "message": "Fix newline formatting\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T21:32:34Z", "type": "commit"}, {"oid": "d6c52c3f6821bb9dacc76e5b7c1666a399651f20", "url": "https://github.com/PGMDev/PGM/commit/d6c52c3f6821bb9dacc76e5b7c1666a399651f20", "message": "Don't clone immutable MapTagSet\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T21:41:39Z", "type": "commit"}, {"oid": "7c1cd28e14dff9b0952f0f4e9a6b18ee8d513138", "url": "https://github.com/PGMDev/PGM/commit/7c1cd28e14dff9b0952f0f4e9a6b18ee8d513138", "message": "Print maptag in the /mapinfo command\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-01T22:30:25Z", "type": "commit"}, {"oid": "a2cecd355b3894b8d4e22f712716f503d197b428", "url": "https://github.com/PGMDev/PGM/commit/a2cecd355b3894b8d4e22f712716f503d197b428", "message": "Filter maps in the /maplist command\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-02T02:30:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM2MTAxMA==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362361010", "bodyText": "I'm not sure if this should be called directly from onEnable(). Static initializers in interfaces aren't possible.\nRelated: https://github.com/TheMolkaPL/PGM-1/blob/a2cecd355b3894b8d4e22f712716f503d197b428/src/main/java/tc/oc/pgm/maptag/StandardMapTags.java#L41", "author": "TheMolkaPL", "createdAt": "2020-01-02T02:50:46Z", "path": "src/main/java/tc/oc/pgm/PGMImpl.java", "diffHunk": "@@ -265,6 +268,8 @@ public void onEnable() {\n     MapLoader mapLoader = new MapLoader(this, logger, registry);\n     mapLibrary = new MapLibrary(logger);\n \n+    StandardMapTags.registerDefaults(logger);", "originalCommit": "a2cecd355b3894b8d4e22f712716f503d197b428", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM2MTY2Mw==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362361663", "bodyText": "This method isn't called after I put a space in the parameters. The expected behavior is that this should suggest maptags in each parameter. /maps #tdm #<-- it's not suggesting here\n@Electroid Any ideas how I can fix this?", "author": "TheMolkaPL", "createdAt": "2020-01-02T02:58:08Z", "path": "src/main/java/tc/oc/pgm/commands/provider/MapTagsConditionProvider.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package tc.oc.pgm.commands.provider;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import app.ashcon.intake.argument.ArgumentException;\n+import app.ashcon.intake.argument.CommandArgs;\n+import app.ashcon.intake.argument.Namespace;\n+import app.ashcon.intake.parametric.Provider;\n+import app.ashcon.intake.parametric.ProvisionException;\n+import java.lang.annotation.Annotation;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import tc.oc.pgm.map.MapLibrary;\n+import tc.oc.pgm.map.PGMMap;\n+import tc.oc.pgm.maptag.MapTag;\n+import tc.oc.pgm.maptag.MapTagSet;\n+import tc.oc.pgm.maptag.MapTagsCondition;\n+\n+public class MapTagsConditionProvider implements Provider<MapTagsCondition> {\n+\n+  private static final String PREFIX = Character.toString(MapTag.SYMBOL);\n+  private static final String NEGATION = \"!\";\n+\n+  private final MapLibrary mapLibrary;\n+\n+  public MapTagsConditionProvider(MapLibrary mapLibrary) {\n+    this.mapLibrary = checkNotNull(mapLibrary);\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return \"maptags\";\n+  }\n+\n+  @Nullable\n+  @Override\n+  public MapTagsCondition get(CommandArgs args, List<? extends Annotation> list)\n+      throws ArgumentException, ProvisionException {\n+    Map<MapTag, Boolean> mapTags = new HashMap<>();\n+    while (args.hasNext()) {\n+      String query = args.next().toLowerCase(Locale.ROOT);\n+      boolean allow = true;\n+\n+      if (query.startsWith(NEGATION)) {\n+        query = query.substring(NEGATION.length());\n+        allow = false;\n+      }\n+\n+      if (!query.startsWith(PREFIX)) {\n+        continue;\n+      }\n+      query = query.substring(PREFIX.length());\n+\n+      if (!query.isEmpty()) {\n+        mapTags.put(MapTag.forName(query), allow);\n+      }\n+    }\n+\n+    return new MapTagsCondition(mapTags);\n+  }\n+\n+  @Override\n+  public List<String> getSuggestions(\n+      String prefix, Namespace namespace, List<? extends Annotation> modifiers) {", "originalCommit": "a2cecd355b3894b8d4e22f712716f503d197b428", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY3MjgyNg==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362672826", "bodyText": "This issue seems to be deeper. I'll leave it as it is for now.", "author": "TheMolkaPL", "createdAt": "2020-01-02T23:55:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjM2MTY2Mw=="}], "type": "inlineReview"}, {"oid": "73406e3f7d8bf70763322a261c2b2d8da237bde3", "url": "https://github.com/PGMDev/PGM/commit/73406e3f7d8bf70763322a261c2b2d8da237bde3", "message": "Rename #tdm to #deathmatch\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-02T14:24:11Z", "type": "commit"}, {"oid": "3e174f42803b48ad5e20d965711e843f9765b8f7", "url": "https://github.com/PGMDev/PGM/commit/3e174f42803b48ad5e20d965711e843f9765b8f7", "message": "Maptag command parsing improvements\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-02T14:47:28Z", "type": "commit"}, {"oid": "3223ba321202297111faf7f125b2d2673f4611aa", "url": "https://github.com/PGMDev/PGM/commit/3223ba321202297111faf7f125b2d2673f4611aa", "message": "Refactor page header\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-02T15:03:07Z", "type": "commit"}, {"oid": "32c2d58eb9ee34a3b1667a2346f279abdab06e17", "url": "https://github.com/PGMDev/PGM/commit/32c2d58eb9ee34a3b1667a2346f279abdab06e17", "message": "Don't print empty edition components\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-02T18:13:02Z", "type": "commit"}, {"oid": "cbb9c485d7d49479d62e769636a612a5fe4b5fd9", "url": "https://github.com/PGMDev/PGM/commit/cbb9c485d7d49479d62e769636a612a5fe4b5fd9", "message": "Make IRegistry extend Iterator\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-03T11:46:02Z", "type": "commit"}, {"oid": "ccf9b23e30d7e74f2dc8d1c73b3b1294bb2c383d", "url": "https://github.com/PGMDev/PGM/commit/ccf9b23e30d7e74f2dc8d1c73b3b1294bb2c383d", "message": "Registration may not be successful\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-03T11:47:18Z", "type": "commit"}, {"oid": "7e43a1ac21398cc0a520d523388cd672c7006f7d", "url": "https://github.com/PGMDev/PGM/commit/7e43a1ac21398cc0a520d523388cd672c7006f7d", "message": "Rename ID to key in IRegistry\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-03T11:52:33Z", "type": "commit"}, {"oid": "cb126130f5cf521c954a7aaa2eddde355e839ce9", "url": "https://github.com/PGMDev/PGM/commit/cb126130f5cf521c954a7aaa2eddde355e839ce9", "message": "Change StandardMapTags to a class\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-03T12:07:57Z", "type": "commit"}, {"oid": "d92799eba0d01ab7f0d5ef29d310aa2efbf5ac3a", "url": "https://github.com/PGMDev/PGM/commit/d92799eba0d01ab7f0d5ef29d310aa2efbf5ac3a", "message": "Rename #rfw to #raceforwool\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-03T12:26:03Z", "type": "commit"}, {"oid": "d9eb19bda0b52cd25822d4144a2930ea120d3e22", "url": "https://github.com/PGMDev/PGM/commit/d9eb19bda0b52cd25822d4144a2930ea120d3e22", "message": "Follow namespaced key standard\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-03T13:36:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg5NTI0MA==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362895240", "bodyText": "Should probs just put it on the tag component in case it wants to be later reused, instead of making a \"decorator-like\" method", "author": "Pablete1234", "createdAt": "2020-01-03T17:36:19Z", "path": "src/main/java/tc/oc/pgm/commands/MapCommands.java", "diffHunk": "@@ -81,12 +72,26 @@ public void map(Audience audience, CommandSender sender, @Text PGMMap map) {\n     MapInfo mapInfo = map.getInfo();\n     audience.sendMessage(mapInfo.getFormattedMapTitle());\n \n-    Component edition =\n-        new PersonalizedText(\n-            mapInfoLabel(\"command.map.mapInfo.edition\"),\n-            new PersonalizedText(mapInfo.getLocalizedEdition(), ChatColor.GOLD));\n-\n-    audience.sendMessage(edition);\n+    audience.sendMessage(\n+        map.getPersistentContext()\n+            .getMapTags()\n+            .createComponent(\n+                (mapTag, component) -> {\n+                  component.clickEvent(\n+                      ClickEvent.Action.RUN_COMMAND, \"/maplist \" + mapTag.toString());\n+                  component.hoverEvent(\n+                      HoverEvent.Action.SHOW_TEXT,\n+                      new PersonalizedTranslatable(\n+                              \"command.map.mapInfo.mapTag.hover\", mapTag.toString())\n+                          .render());\n+                })", "originalCommit": "d9eb19bda0b52cd25822d4144a2930ea120d3e22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxMTcyNA==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362911724", "bodyText": "How should I call the translation key then?", "author": "TheMolkaPL", "createdAt": "2020-01-03T18:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg5NTI0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg5OTAxNg==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362899016", "bodyText": "Why is this no longer an interface? would save line space with the public static final default", "author": "Pablete1234", "createdAt": "2020-01-03T17:47:07Z", "path": "src/main/java/tc/oc/pgm/maptag/StandardMapTags.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package tc.oc.pgm.maptag;\n+\n+import static com.google.common.base.Preconditions.*;\n+\n+import com.google.common.collect.ImmutableSet;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Comparator;\n+import java.util.LinkedHashMap;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.function.Predicate;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import tc.oc.pgm.api.registry.IRegistry;\n+import tc.oc.pgm.api.registry.Registry;\n+import tc.oc.pgm.blitz.BlitzModule;\n+import tc.oc.pgm.classes.ClassModule;\n+import tc.oc.pgm.controlpoint.ControlPointModule;\n+import tc.oc.pgm.core.CoreModule;\n+import tc.oc.pgm.crafting.CraftingModule;\n+import tc.oc.pgm.destroyable.DestroyableModule;\n+import tc.oc.pgm.ffa.FreeForAllModule;\n+import tc.oc.pgm.flag.FlagModule;\n+import tc.oc.pgm.hunger.HungerModule;\n+import tc.oc.pgm.map.MapModule;\n+import tc.oc.pgm.map.MapModuleContext;\n+import tc.oc.pgm.modules.InfoModule;\n+import tc.oc.pgm.modules.InternalModule;\n+import tc.oc.pgm.modules.LaneModule;\n+import tc.oc.pgm.rage.RageModule;\n+import tc.oc.pgm.score.ScoreModule;\n+import tc.oc.pgm.teams.TeamModule;\n+import tc.oc.pgm.terrain.TerrainModule;\n+import tc.oc.pgm.timelimit.TimeLimitModule;\n+import tc.oc.pgm.tnt.TNTModule;\n+import tc.oc.pgm.wool.WoolModule;\n+import tc.oc.pgm.worldborder.WorldBorderModule;\n+import tc.oc.util.logging.ClassLogger;\n+\n+public final class StandardMapTags {", "originalCommit": "d9eb19bda0b52cd25822d4144a2930ea120d3e22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxMDA5MQ==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362910091", "bodyText": "It allows to make private static methods and load the registry in static initalizer block.", "author": "TheMolkaPL", "createdAt": "2020-01-03T18:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg5OTAxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxMTg4OQ==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362911889", "bodyText": "Couldn't you just add a boolean LOADED = someLoadingLogicMethod();, wich will basically be your static \"initializer block\" ? (the method always returns true)", "author": "Pablete1234", "createdAt": "2020-01-03T18:27:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg5OTAxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxNDkwMg==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362914902", "bodyText": "Yes, but it exposes those static methods which should be kept private.", "author": "TheMolkaPL", "createdAt": "2020-01-03T18:36:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg5OTAxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxODY1OA==", "url": "https://github.com/PGMDev/PGM/pull/172#discussion_r362918658", "bodyText": "You can prevent the method from running by checking for LOADED's value on the initializer method, but yeah, it starts to be a bit of a hack", "author": "Pablete1234", "createdAt": "2020-01-03T18:48:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg5OTAxNg=="}], "type": "inlineReview"}, {"oid": "3a1c810f63512429c0df8a534aa57bbc20c54e65", "url": "https://github.com/PGMDev/PGM/commit/3a1c810f63512429c0df8a534aa57bbc20c54e65", "message": "Clickable option in createComponent\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-03T20:05:50Z", "type": "commit"}, {"oid": "d94a9d667ea1ee2dcb5c5c95c1c152c3ced19ba1", "url": "https://github.com/PGMDev/PGM/commit/d94a9d667ea1ee2dcb5c5c95c1c152c3ced19ba1", "message": "Use MapTagSet, not List\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-03T20:07:17Z", "type": "commit"}, {"oid": "2909011c358ce4a7863d50db7ef714c6907ef502", "url": "https://github.com/PGMDev/PGM/commit/2909011c358ce4a7863d50db7ef714c6907ef502", "message": "Allow to instantiate StandardMapTag from outside\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-03T20:57:04Z", "type": "commit"}, {"oid": "3eeb03b00300b33e30cb2908cbaaeb9c5c3d1ed4", "url": "https://github.com/PGMDev/PGM/commit/3eeb03b00300b33e30cb2908cbaaeb9c5c3d1ed4", "message": "Define maptags in each module class\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-04T01:28:04Z", "type": "commit"}, {"oid": "dc6fcd1a37e1f29b6f1f15a830bf1f07ea4263c6", "url": "https://github.com/PGMDev/PGM/commit/dc6fcd1a37e1f29b6f1f15a830bf1f07ea4263c6", "message": "Add missing newline in FlagModule\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-04T01:34:17Z", "type": "commit"}, {"oid": "87b5068ffcedd07314de77c049e3de73864d77a3", "url": "https://github.com/PGMDev/PGM/commit/87b5068ffcedd07314de77c049e3de73864d77a3", "message": "Merge branch 'master' into maptags", "committedDate": "2020-01-04T01:34:46Z", "type": "commit"}, {"oid": "63199c2dc42c4c69408df8b0cc33c2bdd88fd376", "url": "https://github.com/PGMDev/PGM/commit/63199c2dc42c4c69408df8b0cc33c2bdd88fd376", "message": "Simplify map searching\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-04T01:51:01Z", "type": "commit"}, {"oid": "f20bc65ec961dc804febe98a3df3e4f6e8b0ff25", "url": "https://github.com/PGMDev/PGM/commit/f20bc65ec961dc804febe98a3df3e4f6e8b0ff25", "message": "Show correct amount of pages\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-04T01:53:55Z", "type": "commit"}, {"oid": "ab9c722e1062b12dd389c3fadf51bb8986f1f7f7", "url": "https://github.com/PGMDev/PGM/commit/ab9c722e1062b12dd389c3fadf51bb8986f1f7f7", "message": "Replace MapTagSet with java.util.Set in MapModules\n\nRIP generics :<\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-04T16:13:33Z", "type": "commit"}, {"oid": "ba6841de1f2805c6b4ed80979494b3df192152c0", "url": "https://github.com/PGMDev/PGM/commit/ba6841de1f2805c6b4ed80979494b3df192152c0", "message": "Get rid of MapTagSet completly\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-04T16:20:18Z", "type": "commit"}, {"oid": "02b14c453dcf28c329d73e4f8454b860e7ada628", "url": "https://github.com/PGMDev/PGM/commit/02b14c453dcf28c329d73e4f8454b860e7ada628", "message": "Fix timelimit map tag always being loaded\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-04T17:02:49Z", "type": "commit"}, {"oid": "5b81cdbb15a372cb576f5481c9bfc7b6d4bd91e6", "url": "https://github.com/PGMDev/PGM/commit/5b81cdbb15a372cb576f5481c9bfc7b6d4bd91e6", "message": "Create helper method to create component for tags\n\nBecause we don't have MapTagSet anymore\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-04T17:03:59Z", "type": "commit"}, {"oid": "b5d293c086654bea4aa9bd891c4fa48bf96167a8", "url": "https://github.com/PGMDev/PGM/commit/b5d293c086654bea4aa9bd891c4fa48bf96167a8", "message": "Append map tags in JSON server ping response\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-04T17:04:40Z", "type": "commit"}, {"oid": "a79d9c4abe71f250f396e12638d9271c55cfbb2b", "url": "https://github.com/PGMDev/PGM/commit/a79d9c4abe71f250f396e12638d9271c55cfbb2b", "message": "Define <T> of MapModule in each its implementation\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-04T21:41:00Z", "type": "commit"}, {"oid": "16b8bf5a2daa93aa2a19809293afe5909fe9e7bf", "url": "https://github.com/PGMDev/PGM/commit/16b8bf5a2daa93aa2a19809293afe5909fe9e7bf", "message": "Fix generic types\n\nSigned-off-by: TheMolkaPL <themolkapl@gmail.com>", "committedDate": "2020-01-04T21:50:09Z", "type": "commit"}]}