{"pr_number": 3777, "pr_title": "CAMEL-2983 - resteasy component", "pr_createdAt": "2020-04-24T19:33:10Z", "pr_url": "https://github.com/apache/camel/pull/3777", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk5OTY3Nw==", "url": "https://github.com/apache/camel/pull/3777#discussion_r414999677", "bodyText": "Looks like this is from test period debug :)", "author": "dmvolod", "createdAt": "2020-04-25T06:58:22Z", "path": "components/camel-resteasy/src/test/java/org/apache/camel/component/resteasy/test/ResteasyConsumerTest.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy.test;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Files;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.camel.component.resteasy.test.beans.Customer;\n+import org.apache.camel.component.resteasy.test.beans.CustomerList;\n+import org.apache.camel.component.resteasy.test.beans.CustomerService;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.junit.InSequence;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.jboss.shrinkwrap.resolver.api.maven.Maven;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+public class ResteasyConsumerTest {\n+\n+    @ArquillianResource\n+    URI baseUri;\n+\n+    @Deployment\n+    public static Archive<?> createTestArchive() {\n+        \n+        return ShrinkWrap.create(WebArchive.class, \"test.war\")\n+                .addClasses(Customer.class, CustomerService.class, CustomerList.class)\n+                .addPackage(\"org.apache.camel.component.resteasy\")\n+                .addPackage(\"org.apache.camel.component.resteasy.servlet\")\n+                .addAsLibraries(Maven.resolver().loadPomFromFile(\"pom.xml\")\n+                        .importRuntimeAndTestDependencies().resolve().withTransitivity().asFile())\n+                .addAsWebInfResource(new File(\"src/test/resources/contexts/basicConsumer.xml\"), \"applicationContext.xml\")\n+                .addAsWebInfResource(\"web.xml\");\n+\n+    }\n+\n+    private Response createCustomer(Customer customer) {\n+        Client client = ClientBuilder.newBuilder().build();\n+        WebTarget target = client.target(baseUri.toString() + \"customer/createCustomer\");\n+        Response response = target.request(MediaType.APPLICATION_JSON)\n+                .post(Entity.entity(customer, MediaType.APPLICATION_JSON_TYPE));\n+\n+        Assert.assertEquals(200, response.getStatus());\n+        return response;\n+    }\n+\n+    private Response deleteCustomer(int id) {\n+        Client client = ClientBuilder.newBuilder().build();\n+        WebTarget target = client.target(baseUri.toString() + \"customer/deleteCustomer?id=\" + id);\n+        Response response = target.request().delete();\n+\n+        Assert.assertEquals(200, response.getStatus());\n+\n+        return response;\n+    }\n+\n+    private Customer getCustomer(int id) {\n+        Client client = ClientBuilder.newBuilder().build();\n+        WebTarget target = client.target(baseUri.toString() + \"customer/getCustomer?id=\" + id);\n+        Response response = target.request().get();\n+\n+        Assert.assertEquals(200, response.getStatus());\n+\n+        return response.readEntity(Customer.class);\n+    }\n+\n+    @Test\n+    @InSequence(1)\n+    public void testGetAll() throws Exception {\n+        String expectedUser1 = \"{\\\"name\\\":\\\"Roman\\\",\\\"surname\\\":\\\"Jakubco\\\",\\\"id\\\":1}\";\n+        String expectedUser2 = \"{\\\"name\\\":\\\"Camel\\\",\\\"surname\\\":\\\"Rider\\\",\\\"id\\\":2}\";\n+\n+        Client client = ClientBuilder.newBuilder().build();\n+        WebTarget target = client.target(baseUri.toString() + \"customer/getAll\");\n+        Response response = target.request().get();\n+\n+        Assert.assertEquals(200, response.getStatus());\n+\n+        String users = response.readEntity(String.class);\n+        Assert.assertTrue(users.contains(expectedUser1));\n+        Assert.assertTrue(users.contains(expectedUser2));\n+\n+        File file = new File(\"target/test/consumerTest/all.txt\");\n+        byte[] encoded = Files.readAllBytes(file.toPath());\n+        String responseBody = new String(encoded);\n+\n+        Assert.assertTrue(responseBody.contains(expectedUser1));\n+        Assert.assertTrue(responseBody.contains(expectedUser2));\n+    }\n+\n+    @Test\n+    public void testGet() throws Exception {\n+        Customer customer = getCustomer(2);\n+\n+        Assert.assertEquals(new Customer(\"Camel\", \"Rider\", 2), customer);\n+\n+        File file = new File(\"target/test/consumerTest/get.txt\");\n+        byte[] encoded = Files.readAllBytes(file.toPath());\n+        String responseBody = new String(encoded);\n+\n+        Assert.assertEquals(\"{\\\"name\\\":\\\"Camel\\\",\\\"surname\\\":\\\"Rider\\\",\\\"id\\\":2}\", responseBody);\n+    }\n+\n+    @Test\n+    public void testPost() throws Exception {\n+\n+        String expectedResponse = \"Customer added : Customer{name='TestCreate', surname='TestCreate', id=3}\";\n+        int customerId = 3;\n+\n+        Customer customer = new Customer(\"TestCreate\", \"TestCreate\", customerId);\n+        Response response = createCustomer(customer);\n+        System.out.println(response.readEntity(String.class));", "originalCommit": "03a1cd73cc052474ff2df4f28b5d3d940d33b3bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAwOTcyOA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415009728", "bodyText": "nice catch :)", "author": "onderson", "createdAt": "2020-04-25T08:02:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk5OTY3Nw=="}], "type": "inlineReview"}, {"oid": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "url": "https://github.com/apache/camel/commit/6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "message": "CAMEL-2933 - resteasy component", "committedDate": "2020-04-25T08:23:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYwOTI2Ng==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415609266", "bodyText": "There are some commented out dependencies and properties, would it make sense to clean them out?", "author": "omarsmak", "createdAt": "2020-04-27T08:20:47Z", "path": "components/camel-resteasy/pom.xml", "diffHunk": "@@ -0,0 +1,313 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.3.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-resteasy</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Camel :: Resteasy</name>\n+    <description>Camel Resteasy support</description>\n+\n+    <!--\n+    <properties>", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgxMzMxOA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415813318", "bodyText": "+1", "author": "oscerd", "createdAt": "2020-04-27T13:29:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYwOTI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYxMTU0MA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415611540", "bodyText": "Somewhat the documentation description looks missing though", "author": "omarsmak", "createdAt": "2020-04-27T08:23:52Z", "path": "docs/components/modules/ROOT/pages/resteasy-component.adoc", "diffHunk": "@@ -0,0 +1,152 @@\n+[[resteasy-component]]\n+= Resteasy Component\n+//THIS FILE IS COPIED: EDIT THE SOURCE FILE:\n+:page-source: components/camel-resteasy/src/main/docs/resteasy-component.adoc\n+:docTitle: Resteasy\n+:artifactId: camel-resteasy\n+:description: Defines the Resteasy Endpoint.\n+:since: 3.3\n+:supportLevel: Stable\n+:component-header: Only consumer is supported\n+\n+*Since Camel {since}*\n+\n+*{component-header}*\n+", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYxNDk3Ng==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415614976", "bodyText": "This should be ok, it has been introduced from a @djencks PR", "author": "oscerd", "createdAt": "2020-04-27T08:28:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYxMTU0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYxMTcyOQ==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415611729", "bodyText": "Samples as well", "author": "omarsmak", "createdAt": "2020-04-27T08:24:05Z", "path": "docs/components/modules/ROOT/pages/resteasy-component.adoc", "diffHunk": "@@ -0,0 +1,152 @@\n+[[resteasy-component]]\n+= Resteasy Component\n+//THIS FILE IS COPIED: EDIT THE SOURCE FILE:\n+:page-source: components/camel-resteasy/src/main/docs/resteasy-component.adoc\n+:docTitle: Resteasy\n+:artifactId: camel-resteasy\n+:description: Defines the Resteasy Endpoint.\n+:since: 3.3\n+:supportLevel: Stable\n+:component-header: Only consumer is supported\n+\n+*Since Camel {since}*\n+\n+*{component-header}*\n+\n+=== Options\n+\n+// component options: START\n+The Resteasy component supports 22 options, which are listed below.\n+\n+\n+\n+[width=\"100%\",cols=\"2,5,^1,2\",options=\"header\"]\n+|===\n+| Name | Description | Default | Type\n+| *bridgeErrorHandler* (consumer) | Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored. | false | boolean\n+| *httpRegistry* (consumer) | Sets httpRegistry which can be externalized to be used by camel |  | HttpRegistry\n+| *proxyConsumersClasses* (consumer) | Sets the proxy class for consumer enpoints |  | String\n+| *allowJavaSerializedObject* (advanced) | Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk. | false | boolean\n+| *basicPropertyBinding* (advanced) | Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities | false | boolean\n+| *clientConnectionManager* (advanced) | To use a custom and shared HttpClientConnectionManager to manage connections. If this has been configured then this is always used for all endpoints created by this component. |  | HttpClientConnectionManager\n+| *connectionsPerRoute* (advanced) | The maximum number of connections per route. | 20 | int\n+| *connectionTimeToLive* (advanced) | The time for connection to live, the time unit is millisecond, the default value is always keep alive. |  | long\n+| *httpBinding* (advanced) | To use a custom HttpBinding to control the mapping between Camel message and HttpClient. |  | HttpBinding\n+| *httpClientConfigurer* (advanced) | To use the custom HttpClientConfigurer to perform configuration of the HttpClient that will be used. |  | HttpClientConfigurer\n+| *httpConfiguration* (advanced) | To use the shared HttpConfiguration as base configuration. |  | HttpConfiguration\n+| *httpContext* (advanced) | To use a custom org.apache.http.protocol.HttpContext when executing requests. |  | HttpContext\n+| *maxTotalConnections* (advanced) | The maximum number of connections. | 200 | int\n+| *headerFilterStrategy* (filter) | To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter header to and from Camel message. |  | HeaderFilterStrategy\n+| *sslContextParameters* (security) | To configure security using SSLContextParameters. Important: Only one instance of org.apache.camel.support.jsse.SSLContextParameters is supported per HttpComponent. If you need to use 2 or more different instances, you need to define a new HttpComponent per instance you need. |  | SSLContextParameters\n+| *useGlobalSslContextParameters* (security) | Enable usage of global SSL context parameters. | false | boolean\n+| *x509HostnameVerifier* (security) | To use a custom X509HostnameVerifier such as DefaultHostnameVerifier or NoopHostnameVerifier. |  | HostnameVerifier\n+| *connectionRequestTimeout* (timeout) | The timeout in milliseconds used when requesting a connection from the connection manager. A timeout value of zero is interpreted as an infinite timeout. A timeout value of zero is interpreted as an infinite timeout. A negative value is interpreted as undefined (system default). | -1 | int\n+| *connectTimeout* (timeout) | Determines the timeout in milliseconds until a connection is established. A timeout value of zero is interpreted as an infinite timeout. A timeout value of zero is interpreted as an infinite timeout. A negative value is interpreted as undefined (system default). | -1 | int\n+| *socketTimeout* (timeout) | Defines the socket timeout in milliseconds, which is the timeout for waiting for data or, put differently, a maximum period inactivity between two consecutive data packets). A timeout value of zero is interpreted as an infinite timeout. A negative value is interpreted as undefined (system default). | -1 | int\n+| *cookieStore* (producer) | To use a custom org.apache.http.client.CookieStore. By default the org.apache.http.impl.client.BasicCookieStore is used which is an in-memory only cookie store. Notice if bridgeEndpoint=true then the cookie store is forced to be a noop cookie store as cookie shouldn't be stored as we are just bridging (eg acting as a proxy). |  | CookieStore\n+| *lazyStartProducer* (producer) | Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing. | false | boolean\n+|===\n+// component options: END\n+\n+\n+// endpoint options: START\n+The Resteasy endpoint is configured using URI syntax:\n+\n+----\n+resteasy:contextPath\n+----\n+\n+with the following path and query parameters:\n+\n+=== Path Parameters (1 parameters):\n+\n+\n+[width=\"100%\",cols=\"2,5,^1,2\",options=\"header\"]\n+|===\n+| Name | Description | Default | Type\n+| *httpUri* | *Required* The url of the HTTP endpoint to call. |  | URI\n+|===\n+\n+\n+=== Query Parameters (72 parameters):\n+\n+\n+[width=\"100%\",cols=\"2,5,^1,2\",options=\"header\"]\n+|===\n+| Name | Description | Default | Type\n+| *httpBinding* (common) | To use a custom HttpBinding to control the mapping between Camel message and HttpClient. |  | HttpBinding\n+| *chunked* (consumer) | If this option is false the Servlet will disable the HTTP streaming and set the content-length header on the response | true | boolean\n+| *disableStreamCache* (common) | Determines whether or not the raw input stream from Servlet is cached or not (Camel will read the stream into a in memory/overflow to file, Stream caching) cache. By default Camel will cache the Servlet input stream to support reading it multiple times to ensure it Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream, such as streaming it directly to a file or other persistent store. DefaultHttpBinding will copy the request input stream into a stream cache and put it into message body if this option is false to support reading the stream multiple times. If you use Servlet to bridge/proxy an endpoint then consider enabling this option to improve performance, in case you do not need to read the message payload multiple times. The http producer will by default cache the response body stream. If setting this option to true, then the producers will not cache the response body stream but use the response stream as-is as the message body. | false | boolean\n+| *async* (consumer) | Configure the consumer to work in async mode | false | boolean\n+| *bridgeErrorHandler* (consumer) | Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored. | false | boolean\n+| *camelProxy* (consumer) | Sets the flag to use camel for proxying without resteasy interfaces |  | Boolean\n+| *headerFilterStrategy* (consumer) | To use a custom HeaderFilterStrategy to filter header to and from Camel message. |  | HeaderFilterStrategy\n+| *httpMethodRestrict* (consumer) | Used to only allow consuming if the HttpMethod matches, such as GET/POST/PUT etc. Multiple methods can be specified separated by comma. |  | String\n+| *matchOnUriPrefix* (consumer) | Whether or not the consumer should try to find a target consumer by matching the URI prefix if no exact match is found. | false | boolean\n+| *muteException* (consumer) | If enabled and an Exchange failed processing on the consumer side the response's body won't contain the exception's stack trace. | false | boolean\n+| *password* (consumer) | Sets the password |  | String\n+| *proxy* (consumer) | Sets the flag to use the endpoint as proxy |  | Boolean\n+| *proxyClientClass* (consumer) | Sets the resteasy proxyClientClass |  | String\n+| *proxyMethod* (consumer) | Sets the proxy method defined in an interface |  | String\n+| *responseBufferSize* (consumer) | To use a custom buffer size on the javax.servlet.ServletResponse. |  | Integer\n+| *restEasyHttpBindingRef* (consumer) | Sets the restEasyHttpBinding if you have a customised one registered in the context |  | ResteasyHttpBinding\n+| *resteasyMethod* (consumer) | Sets the resteasy method to process the request |  | String\n+| *servletName* (consumer) | Sets the servlet name |  | String\n+| *throwExceptionOnFailure* (consumer) | ets the flag to propogate the exception | false | boolean\n+| *transferException* (consumer) | If enabled and an Exchange failed processing on the consumer side, and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type. On the producer side the exception will be deserialized and thrown as is, instead of the HttpOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk. | false | boolean\n+| *username* (consumer) | Sets the username |  | String\n+| *eagerCheckContentAvailable* (consumer) | Whether to eager check whether the HTTP requests has content if the content-length header is 0 or not present. This can be turned on in case HTTP clients do not send streamed data. | false | boolean\n+| *exceptionHandler* (consumer) | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored. |  | ExceptionHandler\n+| *exchangePattern* (consumer) | Sets the exchange pattern when the consumer creates an exchange. The value can be one of: InOnly, InOut, InOptionalOut |  | ExchangePattern\n+| *optionsEnabled* (consumer) | Specifies whether to enable HTTP OPTIONS for this Servlet consumer. By default OPTIONS is turned off. | false | boolean\n+| *traceEnabled* (consumer) | Specifies whether to enable HTTP TRACE for this Servlet consumer. By default TRACE is turned off. | false | boolean\n+| *basicPropertyBinding* (advanced) | Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities | false | boolean\n+| *clientBuilder* (advanced) | Provide access to the http client request parameters used on new RequestConfig instances used by producers or consumers of this endpoint. |  | HttpClientBuilder\n+| *clientConnectionManager* (advanced) | To use a custom HttpClientConnectionManager to manage connections |  | HttpClientConnectionManager\n+| *connectionsPerRoute* (advanced) | The maximum number of connections per route. | 20 | int\n+| *httpClient* (advanced) | Sets a custom HttpClient to be used by the producer |  | HttpClient\n+| *httpClientConfigurer* (advanced) | Register a custom configuration strategy for new HttpClient instances created by producers or consumers such as to configure authentication mechanisms etc. |  | HttpClientConfigurer\n+| *httpClientOptions* (advanced) | To configure the HttpClient using the key/values from the Map. |  | Map\n+| *httpContext* (advanced) | To use a custom HttpContext instance |  | HttpContext\n+| *mapHttpMessageBody* (advanced) | If this option is true then IN exchange Body of the exchange will be mapped to HTTP body. Setting this to false will avoid the HTTP mapping. | true | boolean\n+| *mapHttpMessageFormUrlEncoded Body* (advanced) | If this option is true then IN exchange Form Encoded body of the exchange will be mapped to HTTP. Setting this to false will avoid the HTTP Form Encoded body mapping. | true | boolean\n+| *mapHttpMessageHeaders* (advanced) | If this option is true then IN exchange Headers of the exchange will be mapped to HTTP headers. Setting this to false will avoid the HTTP Headers mapping. | true | boolean\n+| *maxTotalConnections* (advanced) | The maximum number of connections. | 200 | int\n+| *synchronous* (advanced) | Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported). | false | boolean\n+| *useSystemProperties* (advanced) | To use System Properties as fallback for configuration | false | boolean\n+| *sslContextParameters* (security) | To configure security using SSLContextParameters. Important: Only one instance of org.apache.camel.util.jsse.SSLContextParameters is supported per HttpComponent. If you need to use 2 or more different instances, you need to define a new HttpComponent per instance you need. |  | SSLContextParameters\n+| *x509HostnameVerifier* (security) | To use a custom X509HostnameVerifier such as DefaultHostnameVerifier or NoopHostnameVerifier |  | HostnameVerifier\n+| *bridgeEndpoint* (producer) | If the option is true, HttpProducer will ignore the Exchange.HTTP_URI header, and use the endpoint's URI for request. You may also set the option throwExceptionOnFailure to be false to let the HttpProducer send all the fault response back. | false | boolean\n+| *clearExpiredCookies* (producer) | Whether to clear expired cookies before sending the HTTP request. This ensures the cookies store does not keep growing by adding new cookies which is newer removed when they are expired. | true | boolean\n+| *connectionClose* (producer) | Specifies whether a Connection Close header must be added to HTTP Request. By default connectionClose is false. | false | boolean\n+| *copyHeaders* (producer) | If this option is true then IN exchange headers will be copied to OUT exchange headers according to copy strategy. Setting this to false, allows to only include the headers from the HTTP response (not propagating IN headers). | true | boolean\n+| *customHostHeader* (producer) | To use custom host header for producer. When not set in query will be ignored. When set will override host header derived from url. |  | String\n+| *httpMethod* (producer) | Configure the HTTP method to use. The HttpMethod header cannot override this option if set. The value can be one of: GET, POST, PUT, DELETE, HEAD, OPTIONS, TRACE, PATCH |  | HttpMethods\n+| *ignoreResponseBody* (producer) | If this option is true, The http producer won't read response body and cache the input stream | false | boolean\n+| *lazyStartProducer* (producer) | Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing. | false | boolean\n+| *preserveHostHeader* (producer) | If the option is true, HttpProducer will set the Host header to the value contained in the current exchange Host header, useful in reverse proxy applications where you want the Host header received by the downstream server to reflect the URL called by the upstream client, this allows applications which use the Host header to generate accurate URL's for a proxied service | false | boolean\n+| *cookieHandler* (producer) | Configure a cookie handler to maintain a HTTP session |  | CookieHandler\n+| *cookieStore* (producer) | To use a custom CookieStore. By default the BasicCookieStore is used which is an in-memory only cookie store. Notice if bridgeEndpoint=true then the cookie store is forced to be a noop cookie store as cookie shouldn't be stored as we are just bridging (eg acting as a proxy). If a cookieHandler is set then the cookie store is also forced to be a noop cookie store as cookie handling is then performed by the cookieHandler. |  | CookieStore\n+| *deleteWithBody* (producer) | Whether the HTTP DELETE should include the message body or not. By default HTTP DELETE do not include any HTTP body. However in some rare cases users may need to be able to include the message body. | false | boolean\n+| *getWithBody* (producer) | Whether the HTTP GET should include the message body or not. By default HTTP GET do not include any HTTP body. However in some rare cases users may need to be able to include the message body. | false | boolean\n+| *okStatusCodeRange* (producer) | The status codes which are considered a success response. The values are inclusive. Multiple ranges can be defined, separated by comma, e.g. 200-204,209,301-304. Each range must be a single number or from-to with the dash included. | 200-299 | String\n+| *proxyAuthDomain* (proxy) | Proxy authentication domain to use with NTML |  | String\n+| *proxyAuthHost* (proxy) | Proxy authentication host |  | String\n+| *proxyAuthMethod* (proxy) | Proxy authentication method to use. The value can be one of: Basic, Digest, NTLM |  | String\n+| *proxyAuthPassword* (proxy) | Proxy authentication password |  | String\n+| *proxyAuthPort* (proxy) | Proxy authentication port |  | int\n+| *proxyAuthScheme* (proxy) | Proxy authentication scheme to use. The value can be one of: http, https |  | String\n+| *proxyAuthUsername* (proxy) | Proxy authentication username |  | String\n+| *proxyHost* (proxy) | Proxy hostname to use |  | String\n+| *proxyPort* (proxy) | Proxy port to use |  | int\n+| *authDomain* (security) | Authentication domain to use with NTML |  | String\n+| *authenticationPreemptive* (security) | If this option is true, camel-http sends preemptive basic authentication to the server. | false | boolean\n+| *authHost* (security) | Authentication host to use with NTML |  | String\n+| *authMethod* (security) | Authentication methods allowed to use as a comma separated list of values Basic, Digest or NTLM. |  | String\n+| *authMethodPriority* (security) | Which authentication method to prioritize to use, either as Basic, Digest or NTLM. The value can be one of: Basic, Digest, NTLM |  | String\n+| *authPassword* (security) | Authentication password |  | String\n+| *authUsername* (security) | Authentication username |  | String\n+|===\n+// endpoint options: END\n+\n+=== Samples", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzNTUzNQ==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415835535", "bodyText": "Can we avoid JAXB? Or at least get rid of this old clunky glassfish thingy. There are some newer JAXB JARs, see in core/camel-xml-jaxb.", "author": "davsclaus", "createdAt": "2020-04-27T13:57:49Z", "path": "components/camel-resteasy/pom.xml", "diffHunk": "@@ -0,0 +1,313 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.3.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-resteasy</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Camel :: Resteasy</name>\n+    <description>Camel Resteasy support</description>\n+\n+    <!--\n+    <properties>\n+        <resteasy-version>4.4.1.Final</resteasy-version>    \n+        <version.org.eclipse.jetty>9.4.17.v20190418</version.org.eclipse.jetty>\n+        <arquillian-version>1.4.1.Final</arquillian-version>\n+        <shrinkwrap-resolver-version>2.2.6</shrinkwrap-resolver-version>\n+        <shrinkwrap-version>1.2.6</shrinkwrap-version>    \n+    </properties>\n+    -->\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.jboss.arquillian</groupId>\n+                <artifactId>arquillian-bom</artifactId>\n+                <version>${arquillian-version}</version>\n+                <scope>import</scope>\n+                <type>pom</type>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.jboss.resteasy</groupId>\n+                <artifactId>resteasy-bom</artifactId>\n+                <version>${resteasy-version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.jboss.resteasy</groupId>\n+                <artifactId>resteasy-core</artifactId>\n+                <version>${resteasy-version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>javax.servlet</groupId>\n+                <artifactId>javax.servlet-api</artifactId>\n+                <version>${javax-servlet-api-version}</version>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+        <!-- resteasy dependencies -->\n+        <dependency>\n+            <groupId>org.jboss.resteasy</groupId>\n+            <artifactId>resteasy-core-spi</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jboss.resteasy</groupId>\n+            <artifactId>resteasy-spring</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jboss.resteasy</groupId>\n+            <artifactId>resteasy-servlet-initializer</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jboss.resteasy</groupId>\n+            <artifactId>resteasy-client</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jboss.resteasy</groupId>\n+            <artifactId>resteasy-validator-provider</artifactId>\n+        </dependency>\n+        \n+        <!-- smx dependencies -->\n+        <!--dependency>\n+            <groupId>org.apache.servicemix.bundles</groupId>\n+            <artifactId>org.apache.servicemix.bundles.reflections</artifactId>\n+            <version>${reflections-bundle-version}</version>\n+        </dependency-->\n+\n+        <!-- camel dependencies -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-http-common</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-http</artifactId>\n+        </dependency>\n+\n+        <!-- common dependencies -->\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+        </dependency>\n+\n+        <!-- jboss jaxb/jaxrs dependencies needed by resteasy -->\n+        <dependency>\n+            <groupId>org.jboss.spec.javax.ws.rs</groupId>\n+            <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>\n+            <version>${jboss-jaxrs-api_2.1_spec-version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jboss.spec.javax.xml.bind</groupId>\n+            <artifactId>jboss-jaxb-api_2.3_spec</artifactId>\n+            <version>${jboss-jaxb-api_2.3_spec-version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.glassfish</groupId>\n+            <artifactId>jakarta.el</artifactId>\n+            <version>${jakarta.el-version}</version>\n+        </dependency>\n+        <dependency>", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzNTk3Mw==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415835973", "bodyText": "Can we avoid this old EL that nobody ever uses - some old clunk from J2EE days", "author": "davsclaus", "createdAt": "2020-04-27T13:58:21Z", "path": "components/camel-resteasy/pom.xml", "diffHunk": "@@ -0,0 +1,313 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.3.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-resteasy</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Camel :: Resteasy</name>\n+    <description>Camel Resteasy support</description>\n+\n+    <!--\n+    <properties>\n+        <resteasy-version>4.4.1.Final</resteasy-version>    \n+        <version.org.eclipse.jetty>9.4.17.v20190418</version.org.eclipse.jetty>\n+        <arquillian-version>1.4.1.Final</arquillian-version>\n+        <shrinkwrap-resolver-version>2.2.6</shrinkwrap-resolver-version>\n+        <shrinkwrap-version>1.2.6</shrinkwrap-version>    \n+    </properties>\n+    -->\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.jboss.arquillian</groupId>\n+                <artifactId>arquillian-bom</artifactId>\n+                <version>${arquillian-version}</version>\n+                <scope>import</scope>\n+                <type>pom</type>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.jboss.resteasy</groupId>\n+                <artifactId>resteasy-bom</artifactId>\n+                <version>${resteasy-version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.jboss.resteasy</groupId>\n+                <artifactId>resteasy-core</artifactId>\n+                <version>${resteasy-version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>javax.servlet</groupId>\n+                <artifactId>javax.servlet-api</artifactId>\n+                <version>${javax-servlet-api-version}</version>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+        <!-- resteasy dependencies -->\n+        <dependency>\n+            <groupId>org.jboss.resteasy</groupId>\n+            <artifactId>resteasy-core-spi</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jboss.resteasy</groupId>\n+            <artifactId>resteasy-spring</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jboss.resteasy</groupId>\n+            <artifactId>resteasy-servlet-initializer</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jboss.resteasy</groupId>\n+            <artifactId>resteasy-client</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jboss.resteasy</groupId>\n+            <artifactId>resteasy-validator-provider</artifactId>\n+        </dependency>\n+        \n+        <!-- smx dependencies -->\n+        <!--dependency>\n+            <groupId>org.apache.servicemix.bundles</groupId>\n+            <artifactId>org.apache.servicemix.bundles.reflections</artifactId>\n+            <version>${reflections-bundle-version}</version>\n+        </dependency-->\n+\n+        <!-- camel dependencies -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-http-common</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-http</artifactId>\n+        </dependency>\n+\n+        <!-- common dependencies -->\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+        </dependency>\n+\n+        <!-- jboss jaxb/jaxrs dependencies needed by resteasy -->\n+        <dependency>\n+            <groupId>org.jboss.spec.javax.ws.rs</groupId>\n+            <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>\n+            <version>${jboss-jaxrs-api_2.1_spec-version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jboss.spec.javax.xml.bind</groupId>\n+            <artifactId>jboss-jaxb-api_2.3_spec</artifactId>\n+            <version>${jboss-jaxb-api_2.3_spec-version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.glassfish</groupId>", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzNzExNg==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415837116", "bodyText": "Use {} placeholders in logger and not + concat", "author": "davsclaus", "createdAt": "2020-04-27T13:59:48Z", "path": "components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.spi.HeaderFilterStrategy;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.jboss.resteasy.client.jaxrs.ResteasyWebTarget;\n+import org.jboss.resteasy.client.jaxrs.internal.BasicAuthentication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The default Resteasy binding implementation\n+ */\n+public class DefaultResteasyHttpBinding implements ResteasyHttpBinding {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultResteasyHttpBinding.class);\n+\n+    private HeaderFilterStrategy headerFilterStrategy;\n+\n+    public HeaderFilterStrategy getHeaderFilterStrategy() {\n+        return headerFilterStrategy;\n+    }\n+\n+    @Override\n+    public void setHeaderFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {\n+        this.headerFilterStrategy = headerFilterStrategy;\n+    }\n+\n+    @Override\n+    public Response populateResteasyRequestFromExchangeAndExecute(String uri, Exchange exchange, Map<String, String> parameters) {\n+        Client client = ClientBuilder.newBuilder().build();\n+        String body = exchange.getIn().getBody(String.class);\n+\n+        LOG.debug(\"Body in producer: \" + body);", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzNzY2OA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415837668", "bodyText": "This forces the body to be string based. Wonder if we should in the future support inputstream and byte[] too", "author": "davsclaus", "createdAt": "2020-04-27T14:00:33Z", "path": "components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.spi.HeaderFilterStrategy;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.jboss.resteasy.client.jaxrs.ResteasyWebTarget;\n+import org.jboss.resteasy.client.jaxrs.internal.BasicAuthentication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The default Resteasy binding implementation\n+ */\n+public class DefaultResteasyHttpBinding implements ResteasyHttpBinding {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultResteasyHttpBinding.class);\n+\n+    private HeaderFilterStrategy headerFilterStrategy;\n+\n+    public HeaderFilterStrategy getHeaderFilterStrategy() {\n+        return headerFilterStrategy;\n+    }\n+\n+    @Override\n+    public void setHeaderFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {\n+        this.headerFilterStrategy = headerFilterStrategy;\n+    }\n+\n+    @Override\n+    public Response populateResteasyRequestFromExchangeAndExecute(String uri, Exchange exchange, Map<String, String> parameters) {\n+        Client client = ClientBuilder.newBuilder().build();\n+        String body = exchange.getIn().getBody(String.class);", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NTE2Mw==", "url": "https://github.com/apache/camel/pull/3777#discussion_r417145163", "bodyText": "might be improved later maybe??", "author": "onderson", "createdAt": "2020-04-29T08:22:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzNzY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxNTUxOA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r426515518", "bodyText": "https://issues.apache.org/jira/browse/CAMEL-15039", "author": "onderson", "createdAt": "2020-05-18T10:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzNzY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODUwNw==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415838507", "bodyText": "Hmm I would rather have no surprise, and that we have a autoMethod=Basic you configure on the endpoint or component.", "author": "davsclaus", "createdAt": "2020-04-27T14:01:34Z", "path": "components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.spi.HeaderFilterStrategy;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.jboss.resteasy.client.jaxrs.ResteasyWebTarget;\n+import org.jboss.resteasy.client.jaxrs.internal.BasicAuthentication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The default Resteasy binding implementation\n+ */\n+public class DefaultResteasyHttpBinding implements ResteasyHttpBinding {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultResteasyHttpBinding.class);\n+\n+    private HeaderFilterStrategy headerFilterStrategy;\n+\n+    public HeaderFilterStrategy getHeaderFilterStrategy() {\n+        return headerFilterStrategy;\n+    }\n+\n+    @Override\n+    public void setHeaderFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {\n+        this.headerFilterStrategy = headerFilterStrategy;\n+    }\n+\n+    @Override\n+    public Response populateResteasyRequestFromExchangeAndExecute(String uri, Exchange exchange, Map<String, String> parameters) {\n+        Client client = ClientBuilder.newBuilder().build();\n+        String body = exchange.getIn().getBody(String.class);\n+\n+        LOG.debug(\"Body in producer: \" + body);\n+\n+        String mediaType = exchange.getIn().getHeader(Exchange.CONTENT_TYPE, String.class);\n+\n+        WebTarget target = client.target(uri);\n+\n+        LOG.debug(\"Populate Resteasy request from exchange body: {} using media type {}\", body, mediaType);\n+\n+        Invocation.Builder builder;\n+        if (mediaType != null) {\n+            builder = target.request(mediaType);\n+        } else {\n+            builder = target.request();\n+        }\n+\n+\n+        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {\n+            String key = entry.getKey();\n+            Object value = entry.getValue();\n+            if (headerFilterStrategy != null\n+                    && !headerFilterStrategy.applyFilterToCamelHeaders(key, value, exchange)) {\n+                builder.header(key, value);\n+                LOG.debug(\"Populate Resteasy request from exchange header: {} value: {}\", key, value);\n+            }\n+        }\n+\n+        if (parameters.get(\"username\") != null && parameters.get(\"password\") != null) {\n+            target.register(new BasicAuthentication(parameters.get(\"username\"), parameters.get(\"password\")));\n+        }\n+        LOG.debug(\"Basic authentication was applied\");\n+        String method = parameters.get(\"method\");\n+\n+        if (method.equals(\"GET\")) {\n+            return builder.get();\n+        }\n+        if (method.equals(\"POST\")) {\n+            return  builder.post(Entity.entity(body, mediaType));\n+        }\n+        if (method.equals(\"PUT\")) {\n+            return  builder.put(Entity.entity(body, mediaType));\n+        }\n+        if (method.equals(\"DELETE\")) {\n+            return  builder.delete();\n+        }\n+        if (method.equals(\"OPTIONS\")) {\n+            return  builder.options();\n+        }\n+        if (method.equals(\"TRACE\")) {\n+            return  builder.trace();\n+        }\n+        if (method.equals(\"HEAD\")) {\n+            return  builder.head();\n+        }\n+\n+        // maybe throw exception because not method was correct\n+        throw new IllegalArgumentException(\"Method '\" + method + \"' is not supported method\");\n+    }\n+\n+\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    @Override\n+    public void populateProxyResteasyRequestAndExecute(String uri, Exchange exchange, Map<String, String> parameters) {\n+        Client client = ClientBuilder.newBuilder().build();\n+\n+        WebTarget target = client.target(uri);\n+\n+        if (parameters.get(\"username\") != null && parameters.get(\"password\") != null) {\n+            target.register(new BasicAuthentication(parameters.get(\"username\"), parameters.get(\"password\")));", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MzM3Mw==", "url": "https://github.com/apache/camel/pull/3777#discussion_r417143373", "bodyText": "not sure if i got this one right? this might be something i am missing. can you please give a little bit more details?", "author": "onderson", "createdAt": "2020-04-29T08:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0MzQ0NQ==", "url": "https://github.com/apache/camel/pull/3777#discussion_r418443445", "bodyText": "You just assume username/password requires basic auth. But they may just be query parameters for something else. Instead we should have an option to turn on authentication first. And so only do this if that option is turned on.", "author": "davsclaus", "createdAt": "2020-05-01T07:15:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxNTMzNA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r426515334", "bodyText": "done", "author": "onderson", "createdAt": "2020-05-18T10:08:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODUwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODk2MA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415838960", "bodyText": "Dont load classes via Class.forName. What is this proxyClassName use-case?", "author": "davsclaus", "createdAt": "2020-04-27T14:02:06Z", "path": "components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.spi.HeaderFilterStrategy;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.jboss.resteasy.client.jaxrs.ResteasyWebTarget;\n+import org.jboss.resteasy.client.jaxrs.internal.BasicAuthentication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The default Resteasy binding implementation\n+ */\n+public class DefaultResteasyHttpBinding implements ResteasyHttpBinding {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DefaultResteasyHttpBinding.class);\n+\n+    private HeaderFilterStrategy headerFilterStrategy;\n+\n+    public HeaderFilterStrategy getHeaderFilterStrategy() {\n+        return headerFilterStrategy;\n+    }\n+\n+    @Override\n+    public void setHeaderFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {\n+        this.headerFilterStrategy = headerFilterStrategy;\n+    }\n+\n+    @Override\n+    public Response populateResteasyRequestFromExchangeAndExecute(String uri, Exchange exchange, Map<String, String> parameters) {\n+        Client client = ClientBuilder.newBuilder().build();\n+        String body = exchange.getIn().getBody(String.class);\n+\n+        LOG.debug(\"Body in producer: \" + body);\n+\n+        String mediaType = exchange.getIn().getHeader(Exchange.CONTENT_TYPE, String.class);\n+\n+        WebTarget target = client.target(uri);\n+\n+        LOG.debug(\"Populate Resteasy request from exchange body: {} using media type {}\", body, mediaType);\n+\n+        Invocation.Builder builder;\n+        if (mediaType != null) {\n+            builder = target.request(mediaType);\n+        } else {\n+            builder = target.request();\n+        }\n+\n+\n+        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {\n+            String key = entry.getKey();\n+            Object value = entry.getValue();\n+            if (headerFilterStrategy != null\n+                    && !headerFilterStrategy.applyFilterToCamelHeaders(key, value, exchange)) {\n+                builder.header(key, value);\n+                LOG.debug(\"Populate Resteasy request from exchange header: {} value: {}\", key, value);\n+            }\n+        }\n+\n+        if (parameters.get(\"username\") != null && parameters.get(\"password\") != null) {\n+            target.register(new BasicAuthentication(parameters.get(\"username\"), parameters.get(\"password\")));\n+        }\n+        LOG.debug(\"Basic authentication was applied\");\n+        String method = parameters.get(\"method\");\n+\n+        if (method.equals(\"GET\")) {\n+            return builder.get();\n+        }\n+        if (method.equals(\"POST\")) {\n+            return  builder.post(Entity.entity(body, mediaType));\n+        }\n+        if (method.equals(\"PUT\")) {\n+            return  builder.put(Entity.entity(body, mediaType));\n+        }\n+        if (method.equals(\"DELETE\")) {\n+            return  builder.delete();\n+        }\n+        if (method.equals(\"OPTIONS\")) {\n+            return  builder.options();\n+        }\n+        if (method.equals(\"TRACE\")) {\n+            return  builder.trace();\n+        }\n+        if (method.equals(\"HEAD\")) {\n+            return  builder.head();\n+        }\n+\n+        // maybe throw exception because not method was correct\n+        throw new IllegalArgumentException(\"Method '\" + method + \"' is not supported method\");\n+    }\n+\n+\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    @Override\n+    public void populateProxyResteasyRequestAndExecute(String uri, Exchange exchange, Map<String, String> parameters) {\n+        Client client = ClientBuilder.newBuilder().build();\n+\n+        WebTarget target = client.target(uri);\n+\n+        if (parameters.get(\"username\") != null && parameters.get(\"password\") != null) {\n+            target.register(new BasicAuthentication(parameters.get(\"username\"), parameters.get(\"password\")));\n+        }\n+\n+        if (LOG.isTraceEnabled()) {\n+            LOG.trace(\"Basic authentication was applied\");\n+        }\n+\n+        Class realClazz;\n+        Object object = null;\n+        try {\n+            realClazz = Class.forName(parameters.get(\"proxyClassName\"));", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExOTEyNA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r417119124", "bodyText": "i think it is to support proxy framework which is part of resteasy\nhttps://docs.jboss.org/resteasy/docs/4.5.3.Final/userguide/html/RESTEasy_Client_Framework.html#proxies", "author": "onderson", "createdAt": "2020-04-29T07:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MjY5Mg==", "url": "https://github.com/apache/camel/pull/3777#discussion_r417142692", "bodyText": "yes i am aware of the efforts of removing reflections and not sure this feature what to do about this feature, either removing or dropping might be fine as this is a feature in resteasy.", "author": "onderson", "createdAt": "2020-04-29T08:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NDU0NA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r418444544", "bodyText": "So is this mandatory? Do I really need to write a class with annotations to call a remote HTTP REST service?", "author": "davsclaus", "createdAt": "2020-05-01T07:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2NzkxMg==", "url": "https://github.com/apache/camel/pull/3777#discussion_r419167912", "bodyText": "in earlier versions the client framework was a bit limited in resteasy. there are other ways but looks like this is one of the prior methods considering API support coming from resteasy's history. to consider adding / removing such features, engagement with resteasy community might be good but can be said of being not strong ATM", "author": "onderson", "createdAt": "2020-05-03T22:14:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxNTEyNA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r426515124", "bodyText": "https://issues.apache.org/jira/browse/CAMEL-15040", "author": "onderson", "createdAt": "2020-05-18T10:07:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzODk2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg0MTQwOQ==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415841409", "bodyText": "Dont ignore exception, but log via logger or fail fast or something", "author": "davsclaus", "createdAt": "2020-04-27T14:05:16Z", "path": "components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/servlet/ResteasyCamelServlet.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy.servlet;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Proxy;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.ExchangePattern;\n+import org.apache.camel.component.resteasy.DefaultHttpRegistry;\n+import org.apache.camel.component.resteasy.HttpRegistry;\n+import org.apache.camel.component.resteasy.ResteasyComponent;\n+import org.apache.camel.component.resteasy.ResteasyConstants;\n+import org.apache.camel.component.resteasy.ResteasyEndpoint;\n+import org.apache.camel.http.common.HttpConsumer;\n+import org.apache.camel.http.common.HttpHelper;\n+import org.apache.camel.http.common.HttpMessage;\n+import org.apache.camel.support.DefaultExchange;\n+import org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class extending HttpServletDispatcher from Resteasy and representing servlet used as Camel Consumer. This servlet\n+ * needs to be used in application if you want to use Camel Resteasy consumer in your camel routes.\n+ */\n+public class ResteasyCamelServlet extends HttpServletDispatcher {\n+\n+    private static final long serialVersionUID = 1L;\n+    \n+    private static final Logger LOG = LoggerFactory.getLogger(ResteasyCamelServlet.class);\n+\n+    private HttpRegistry httpRegistry;\n+\n+    private String servletName;\n+\n+    private final ConcurrentMap<String, HttpConsumer> consumers = new ConcurrentHashMap<String, HttpConsumer>();\n+\n+\n+    /**\n+     * Init method for ResteasyCamelServlet, which registering servlets to HttpRegistry and it is also registering\n+     * proxy classes to Resteasy dispatcher\n+     *\n+     * @param servletConfig configuration of the servlet\n+     * @throws ServletException exception thrown from the super method\n+     */\n+    @SuppressWarnings(\"rawtypes\")\n+    @Override\n+    public void init(ServletConfig servletConfig) throws ServletException {\n+        super.init(servletConfig);\n+\n+        String name = servletConfig.getServletName();\n+        if (httpRegistry == null) {\n+            httpRegistry = DefaultHttpRegistry.getHttpRegistry(name);\n+            ResteasyCamelServlet existing = httpRegistry.getCamelServlet(name);\n+            if (existing != null) {\n+                String msg = \"Duplicate ServletName detected: \" + name + \". Existing: \" + existing + \" This: \" + this.toString()\n+                        + \". Its advised to use unique ServletName per Camel application.\";\n+                // always log so people can see it easier\n+                LOG.info(msg);\n+            }\n+            httpRegistry.register(this);\n+        }\n+\n+\n+        for (Map.Entry<String, HttpConsumer> entry : consumers.entrySet()) {\n+            String proxyClasses = ((ResteasyComponent)getServletEndpoint(entry.getValue()).getComponent()).getProxyConsumersClasses();\n+            if (proxyClasses != null) {\n+                String[] classes = proxyClasses.split(\",\");\n+                LOG.debug(\"Proxy classes defined in the component {}\", Arrays.asList(classes));\n+\n+                for (String clazz : classes) {\n+                    try {\n+                        Class realClazz = Class.forName(clazz);\n+                        // Create dynamic proxy class implementing interface\n+                        InvocationHandler handler = new ResteasyInvocationHandler();\n+                        Object  proxy = Proxy.newProxyInstance(realClazz.getClassLoader(), new Class[]{realClazz}, handler);\n+\n+                        // register new created proxy to the resteasy registry\n+                        getDispatcher().getRegistry().addSingletonResource(proxy);\n+                    } catch (ClassNotFoundException e) {\n+                        e.printStackTrace();", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg0MzUwOQ==", "url": "https://github.com/apache/camel/pull/3777#discussion_r415843509", "bodyText": "is it consumer only or was there also a producer?", "author": "davsclaus", "createdAt": "2020-04-27T14:07:52Z", "path": "components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/ResteasyEndpoint.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import org.apache.camel.Consumer;\n+import org.apache.camel.Processor;\n+import org.apache.camel.Producer;\n+import org.apache.camel.component.http.HttpClientConfigurer;\n+import org.apache.camel.component.http.HttpEndpoint;\n+import org.apache.camel.spi.HeaderFilterStrategy;\n+import org.apache.camel.spi.HeaderFilterStrategyAware;\n+import org.apache.camel.spi.UriEndpoint;\n+import org.apache.camel.spi.UriParam;\n+import org.apache.http.conn.HttpClientConnectionManager;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+\n+/**\n+ * Defines the Resteasy Endpoint.\n+ * It contains a list of properties for Resteasy endpoint including {@link org.apache.camel.component.resteasy.ResteasyHttpBinding},\n+ * and {@link HeaderFilterStrategy}.\n+ *\n+ */\n+@UriEndpoint(firstVersion = \"3.3.0\", scheme = \"resteasy\",  extendsScheme = \"http\", \n+        title = \"Resteasy\", syntax = \"resteasy:contextPath\", consumerOnly = true, label = \"rest\")", "originalCommit": "6c3e0edcdd1fd511cdbf1258dd7a884a003ce571", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExOTkyNw==", "url": "https://github.com/apache/camel/pull/3777#discussion_r417119927", "bodyText": "there is a producer. to be amended.", "author": "onderson", "createdAt": "2020-04-29T07:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg0MzUwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NTA3OA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r418445078", "bodyText": "This will read the entire stream into memory.\nCamel has a stream caching feature. Maybe we should revisit this later.", "author": "davsclaus", "createdAt": "2020-05-01T07:22:37Z", "path": "components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/servlet/ResteasyServletInputStreamCopier.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy.servlet;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import javax.servlet.ReadListener;\n+import javax.servlet.ServletInputStream;\n+\n+/**\n+ * Class for copying input stream from HttpRequest\n+ */\n+public class ResteasyServletInputStreamCopier extends ServletInputStream {\n+    \n+    private InputStream input;\n+    private ByteArrayOutputStream copy;\n+\n+    public ResteasyServletInputStreamCopier(InputStream inputStream) {\n+        /* create a new input stream from the cached request body */\n+        this.input = inputStream;\n+        this.copy = new ByteArrayOutputStream();", "originalCommit": "369b23ca99d7b849acf559101fc485738cdbac29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxNDU2NQ==", "url": "https://github.com/apache/camel/pull/3777#discussion_r426514565", "bodyText": "https://issues.apache.org/jira/browse/CAMEL-15042", "author": "onderson", "createdAt": "2020-05-18T10:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NTA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NjA3NA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r418446074", "bodyText": "What do you use spring for?", "author": "davsclaus", "createdAt": "2020-05-01T07:27:13Z", "path": "components/camel-resteasy/pom.xml", "diffHunk": "@@ -0,0 +1,287 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.3.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-resteasy</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Camel :: Resteasy</name>\n+    <description>Camel Resteasy support</description>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.jboss.arquillian</groupId>\n+                <artifactId>arquillian-bom</artifactId>\n+                <version>${arquillian-version}</version>\n+                <scope>import</scope>\n+                <type>pom</type>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.jboss.resteasy</groupId>\n+                <artifactId>resteasy-bom</artifactId>\n+                <version>${resteasy-version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.jboss.resteasy</groupId>\n+                <artifactId>resteasy-core</artifactId>\n+                <version>${resteasy-version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>javax.servlet</groupId>\n+                <artifactId>javax.servlet-api</artifactId>\n+                <version>${javax-servlet-api-version}</version>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+        <!-- resteasy dependencies -->\n+        <dependency>\n+            <groupId>org.jboss.resteasy</groupId>\n+            <artifactId>resteasy-core-spi</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jboss.resteasy</groupId>\n+            <artifactId>resteasy-spring</artifactId>", "originalCommit": "369b23ca99d7b849acf559101fc485738cdbac29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2NzM1Nw==", "url": "https://github.com/apache/camel/pull/3777#discussion_r419167357", "bodyText": "to be scoped as test", "author": "onderson", "createdAt": "2020-05-03T22:08:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NjA3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NjE4NQ==", "url": "https://github.com/apache/camel/pull/3777#discussion_r418446185", "bodyText": "Its a bit shame to use arquillian for testing but its good for those WAR archives. But the project is dead just mind that.", "author": "davsclaus", "createdAt": "2020-05-01T07:27:46Z", "path": "components/camel-resteasy/pom.xml", "diffHunk": "@@ -0,0 +1,287 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.3.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-resteasy</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Camel :: Resteasy</name>\n+    <description>Camel Resteasy support</description>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.jboss.arquillian</groupId>\n+                <artifactId>arquillian-bom</artifactId>", "originalCommit": "369b23ca99d7b849acf559101fc485738cdbac29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE2NjYwNw==", "url": "https://github.com/apache/camel/pull/3777#discussion_r419166607", "bodyText": "the reason of using arquillian was that the support on test-runtime was better explained and was easier to use. before in the tests, it was wildfly. maybe, it could have been used in testing but thought that style would be wildfly specific. maybe we can park it and track it to enhance with another JIRA.", "author": "onderson", "createdAt": "2020-05-03T22:00:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NjE4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUxNDI3OA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r426514278", "bodyText": "https://issues.apache.org/jira/browse/CAMEL-15038", "author": "onderson", "createdAt": "2020-05-18T10:06:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NjE4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NjQzNA==", "url": "https://github.com/apache/camel/pull/3777#discussion_r418446434", "bodyText": "Can you avoid using this - Camel has api for working with exceptions. We should avoid adding a 3rd party JAR just to use a single api which we have ourselves or easily can write a few lines of code.", "author": "davsclaus", "createdAt": "2020-05-01T07:28:56Z", "path": "components/camel-resteasy/src/main/java/org/apache/camel/component/resteasy/DefaultResteasyHttpBinding.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.resteasy;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.spi.HeaderFilterStrategy;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.commons.lang3.exception.ExceptionUtils;", "originalCommit": "369b23ca99d7b849acf559101fc485738cdbac29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "159eb7539de625840e9f67881f6fb5d27363bce9", "url": "https://github.com/apache/camel/commit/159eb7539de625840e9f67881f6fb5d27363bce9", "message": "CAMEL-2933 - remove exceptionutils", "committedDate": "2020-05-05T09:15:28Z", "type": "forcePushed"}, {"oid": "51a917f49800180e4b3a2e70e207eccf673678ac", "url": "https://github.com/apache/camel/commit/51a917f49800180e4b3a2e70e207eccf673678ac", "message": "CAMEL-2933 - move some servlet classes to http-common and use registry interface and defaulthttpregistry from that dependency", "committedDate": "2020-05-06T15:11:08Z", "type": "forcePushed"}, {"oid": "31bf0a2800de7bca6df8463d48ba71d60d6a63e4", "url": "https://github.com/apache/camel/commit/31bf0a2800de7bca6df8463d48ba71d60d6a63e4", "message": "CAMEL-2933 - add basicAuth endpoint param", "committedDate": "2020-05-07T09:49:10Z", "type": "forcePushed"}, {"oid": "231fc044fe61154dde0c3e74e9abd1accf555b41", "url": "https://github.com/apache/camel/commit/231fc044fe61154dde0c3e74e9abd1accf555b41", "message": "CAMEL-2933 - add basicAuth endpoint param", "committedDate": "2020-05-07T16:12:39Z", "type": "forcePushed"}, {"oid": "7493e216e2fccec709ae36bee32e2241a113be05", "url": "https://github.com/apache/camel/commit/7493e216e2fccec709ae36bee32e2241a113be05", "message": "CAMEL-2933 - regen", "committedDate": "2020-05-09T08:33:10Z", "type": "forcePushed"}, {"oid": "438b4b3ddfd9e9d62061b29e5e2dd1f4aa05eddd", "url": "https://github.com/apache/camel/commit/438b4b3ddfd9e9d62061b29e5e2dd1f4aa05eddd", "message": "CAMEL-15041 - rename options with more descriptive ones and regen", "committedDate": "2020-05-16T12:49:13Z", "type": "forcePushed"}, {"oid": "85f41d486f6ed4619feefbb5ba0b43de3145749f", "url": "https://github.com/apache/camel/commit/85f41d486f6ed4619feefbb5ba0b43de3145749f", "message": "update resteasy-component.adoc", "committedDate": "2020-05-18T10:30:09Z", "type": "forcePushed"}, {"oid": "2ee60fa34e6fb954a1c885dcd354721e5a1b600f", "url": "https://github.com/apache/camel/commit/2ee60fa34e6fb954a1c885dcd354721e5a1b600f", "message": "CAMEL-2983 - camel-resteasy component", "committedDate": "2020-05-18T10:36:03Z", "type": "commit"}, {"oid": "2ee60fa34e6fb954a1c885dcd354721e5a1b600f", "url": "https://github.com/apache/camel/commit/2ee60fa34e6fb954a1c885dcd354721e5a1b600f", "message": "CAMEL-2983 - camel-resteasy component", "committedDate": "2020-05-18T10:36:03Z", "type": "forcePushed"}]}