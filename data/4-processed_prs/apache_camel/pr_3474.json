{"pr_number": 3474, "pr_title": "CAMEL-14385: add a camel-cron component", "pr_createdAt": "2020-01-10T12:33:16Z", "pr_url": "https://github.com/apache/camel/pull/3474", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIzMzcyNw==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365233727", "bodyText": "We can remove those I believe", "author": "oscerd", "createdAt": "2020-01-10T13:31:02Z", "path": "components/camel-cron/src/test/resources/log4j2.properties", "diffHunk": "@@ -0,0 +1,33 @@\n+## ---------------------------------------------------------------------------\n+## Licensed to the Apache Software Foundation (ASF) under one or more\n+## contributor license agreements.  See the NOTICE file distributed with\n+## this work for additional information regarding copyright ownership.\n+## The ASF licenses this file to You under the Apache License, Version 2.0\n+## (the \"License\"); you may not use this file except in compliance with\n+## the License.  You may obtain a copy of the License at\n+##\n+##      http://www.apache.org/licenses/LICENSE-2.0\n+##\n+## Unless required by applicable law or agreed to in writing, software\n+## distributed under the License is distributed on an \"AS IS\" BASIS,\n+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+## See the License for the specific language governing permissions and\n+## limitations under the License.\n+## ---------------------------------------------------------------------------\n+\n+appender.file.type = File\n+appender.file.name = file\n+appender.file.fileName = target/camel-cron-test.log\n+appender.file.layout.type = PatternLayout\n+appender.file.layout.pattern = %d [%-15.15t] %-5p %-30.30c{1} - %m%n\n+appender.stdout.type = Console\n+appender.stdout.name = stdout\n+appender.stdout.layout.type = PatternLayout\n+appender.stdout.layout.pattern = %d [%-15.15t] %-5p %-30.30c{1} - %m%n\n+rootLogger.level = INFO\n+rootLogger.appenderRef.file.ref = file\n+\n+#rootLogger.appenderRef.stdout.ref = stdout", "originalCommit": "b477cf03e80f01c2f210df95bba5052fd6d25cc8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxMTkzMA==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365511930", "bodyText": "camel-spring also has some cron support via spring as they have cron built-in, so we could also add this there too", "author": "davsclaus", "createdAt": "2020-01-11T09:56:10Z", "path": "components/camel-cron/src/main/docs/cron-component.adoc", "diffHunk": "@@ -0,0 +1,135 @@\n+[[cron-component]]\n+= Cron Component\n+\n+*Since Camel 3.1*\n+\n+// HEADER START\n+*Only consumer is supported*\n+// HEADER END\n+\n+The Cron component is a generic interface component that allows triggering events at specific time interval\n+specified using the Unix cron syntax (e.g. `0/2 * * * * ?` to trigger an event every two seconds).\n+\n+Being an interface component, the Cron component does not contain a default implementation, instead it requires that the users plug\n+the implementation of their choice.\n+\n+The following standard Camel components support the Cron endpoints:\n+\n+- Quartz", "originalCommit": "e4e7ce015b228c0864e5994e5e3e55ffeddbd914", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxMjAzNA==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365512034", "bodyText": "I am not a fan of this, cant we move this to doStart so its initialized there?", "author": "davsclaus", "createdAt": "2020-01-11T09:58:41Z", "path": "components/camel-cron/src/main/java/org/apache/camel/component/cron/CronComponent.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.cron;\n+\n+import java.util.Map;\n+\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.RuntimeCamelException;\n+import org.apache.camel.component.cron.api.CamelCronConfiguration;\n+import org.apache.camel.component.cron.api.CamelCronService;\n+import org.apache.camel.spi.Metadata;\n+import org.apache.camel.spi.annotations.Component;\n+import org.apache.camel.support.DefaultComponent;\n+import org.apache.camel.util.ObjectHelper;\n+\n+/**\n+ * The Camel cron component.\n+ */\n+@Component(\"cron\")\n+public class CronComponent extends DefaultComponent {\n+\n+    @Metadata(label = \"advanced\")\n+    private String cronService;\n+\n+    private CamelCronService service;\n+\n+    public CronComponent() {\n+    }\n+\n+    @Override\n+    public Endpoint createEndpoint(String uri, String remaining, Map<String, Object> properties) throws Exception {\n+        initCamelCronService();\n+\n+        CamelCronConfiguration configuration = new CamelCronConfiguration();\n+        configuration.setName(remaining);\n+        setProperties(configuration, properties);\n+        validate(configuration);\n+\n+        Endpoint delegate = this.service.createEndpoint(configuration);\n+        CronEndpoint cronEndpoint = new CronEndpoint(uri, this, delegate, configuration);\n+\n+        if (properties.size() > 0) {\n+            // Additional endpoint properties present\n+            setProperties(cronEndpoint, properties);\n+        }\n+\n+        return cronEndpoint;\n+    }\n+\n+    /**\n+     * Lazy creation of the CamelCronService\n+     */\n+    public synchronized void initCamelCronService() {", "originalCommit": "e4e7ce015b228c0864e5994e5e3e55ffeddbd914", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxMjA3Mw==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365512073", "bodyText": "Ah okay spotted this, we should fix so this option is not shown for components that are consumer only. Will fix this in camel itself.", "author": "davsclaus", "createdAt": "2020-01-11T09:59:37Z", "path": "components/camel-cron/src/main/docs/cron-component.adoc", "diffHunk": "@@ -0,0 +1,135 @@\n+[[cron-component]]\n+= Cron Component\n+\n+*Since Camel 3.1*\n+\n+// HEADER START\n+*Only consumer is supported*\n+// HEADER END\n+\n+The Cron component is a generic interface component that allows triggering events at specific time interval\n+specified using the Unix cron syntax (e.g. `0/2 * * * * ?` to trigger an event every two seconds).\n+\n+Being an interface component, the Cron component does not contain a default implementation, instead it requires that the users plug\n+the implementation of their choice.\n+\n+The following standard Camel components support the Cron endpoints:\n+\n+- Quartz\n+\n+The Cron component is also supported in **Camel K**, which can use the Kubernetes scheduler to trigger the routes when required by the cron expression.\n+Camel K does not require additional libraries to be plugged when using cron expressions compatible with Kubernetes cron syntax.\n+\n+Maven users will need to add the following dependency to their `pom.xml`\n+for this component:\n+\n+[source,xml]\n+------------------------------------------------------------\n+<dependency>\n+    <groupId>org.apache.camel</groupId>\n+    <artifactId>camel-cron</artifactId>\n+    <version>x.x.x</version>\n+    <!-- use the same version as your Camel core version -->\n+</dependency>\n+------------------------------------------------------------\n+\n+Additional libraries may be needed in order to plug a specific implementation.\n+\n+== Options\n+\n+\n+// component options: START\n+The Cron component supports 4 options, which are listed below.\n+\n+\n+\n+[width=\"100%\",cols=\"2,5,^1,2\",options=\"header\"]\n+|===\n+| Name | Description | Default | Type\n+| *cronService* (advanced) | The id of the CamelCronService to use when multiple implementations are provided |  | String\n+| *basicPropertyBinding* (advanced) | Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities | false | boolean\n+| *lazyStartProducer* (producer) | Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing. | false | boolean", "originalCommit": "e4e7ce015b228c0864e5994e5e3e55ffeddbd914", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxMjE2NA==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365512164", "bodyText": "What makes it require camel-core, we should ideally only depend on camel-support", "author": "davsclaus", "createdAt": "2020-01-11T10:01:52Z", "path": "components/camel-cron/pom.xml", "diffHunk": "@@ -0,0 +1,84 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.1.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-cron</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Camel :: Cron</name>\n+    <description>Camel Cron Component</description>\n+\n+    <properties>\n+    </properties>\n+\n+    <dependencies>\n+\n+        <!-- requires camel-core -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>", "originalCommit": "e4e7ce015b228c0864e5994e5e3e55ffeddbd914", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxMjE4MQ==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365512181", "bodyText": "You need also to do\nconfigureConsumer(consumer)", "author": "davsclaus", "createdAt": "2020-01-11T10:02:25Z", "path": "components/camel-cron/src/main/java/org/apache/camel/component/cron/CronEndpoint.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.cron;\n+\n+import org.apache.camel.Component;\n+import org.apache.camel.Consumer;\n+import org.apache.camel.DelegateEndpoint;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.ExchangePattern;\n+import org.apache.camel.Processor;\n+import org.apache.camel.Producer;\n+import org.apache.camel.component.cron.api.CamelCronConfiguration;\n+import org.apache.camel.spi.ExceptionHandler;\n+import org.apache.camel.spi.UriEndpoint;\n+import org.apache.camel.spi.UriParam;\n+import org.apache.camel.support.DefaultEndpoint;\n+\n+@UriEndpoint(firstVersion = \"3.1.0\", scheme = \"cron\", title = \"Cron\", syntax = \"cron:name\", consumerOnly = true, label = \"scheduling\")\n+public class CronEndpoint extends DefaultEndpoint implements DelegateEndpoint {\n+\n+    private Endpoint delegate;\n+\n+    @UriParam\n+    private CamelCronConfiguration configuration;\n+\n+    public CronEndpoint(String endpointUri, Component component, Endpoint delegate, CamelCronConfiguration configuration) {\n+        super(endpointUri, component);\n+        this.delegate = delegate;\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public Endpoint getEndpoint() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public Producer createProducer() throws Exception {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Consumer createConsumer(Processor processor) throws Exception {\n+        return delegate.createConsumer(processor);", "originalCommit": "e4e7ce015b228c0864e5994e5e3e55ffeddbd914", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxMjI3MA==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365512270", "bodyText": "Ah yeah we may need to do this on other delegate endpoints (create a jira ticket)", "author": "davsclaus", "createdAt": "2020-01-11T10:04:26Z", "path": "components/camel-cron/src/main/java/org/apache/camel/component/cron/CronEndpoint.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.cron;\n+\n+import org.apache.camel.Component;\n+import org.apache.camel.Consumer;\n+import org.apache.camel.DelegateEndpoint;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.ExchangePattern;\n+import org.apache.camel.Processor;\n+import org.apache.camel.Producer;\n+import org.apache.camel.component.cron.api.CamelCronConfiguration;\n+import org.apache.camel.spi.ExceptionHandler;\n+import org.apache.camel.spi.UriEndpoint;\n+import org.apache.camel.spi.UriParam;\n+import org.apache.camel.support.DefaultEndpoint;\n+\n+@UriEndpoint(firstVersion = \"3.1.0\", scheme = \"cron\", title = \"Cron\", syntax = \"cron:name\", consumerOnly = true, label = \"scheduling\")\n+public class CronEndpoint extends DefaultEndpoint implements DelegateEndpoint {\n+\n+    private Endpoint delegate;\n+\n+    @UriParam\n+    private CamelCronConfiguration configuration;\n+\n+    public CronEndpoint(String endpointUri, Component component, Endpoint delegate, CamelCronConfiguration configuration) {\n+        super(endpointUri, component);\n+        this.delegate = delegate;\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public Endpoint getEndpoint() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public Producer createProducer() throws Exception {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Consumer createConsumer(Processor processor) throws Exception {\n+        return delegate.createConsumer(processor);\n+    }\n+\n+    public CamelCronConfiguration getConfiguration() {\n+        return configuration;\n+    }\n+\n+    @Override\n+    public void setSynchronous(boolean synchronous) {", "originalCommit": "e4e7ce015b228c0864e5994e5e3e55ffeddbd914", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxMjM4Mw==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365512383", "bodyText": "In Camel we have FactoryFinder as our way of loading these kind of stuff. It made it work in OSGi too. However maybe service loader is okay in these modern cloud days.", "author": "davsclaus", "createdAt": "2020-01-11T10:07:21Z", "path": "components/camel-cron/src/main/java/org/apache/camel/component/cron/CronHelper.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.cron;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.TreeMap;\n+\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.component.cron.api.CamelCronService;\n+import org.apache.camel.support.CamelContextHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class CronHelper {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CronHelper.class);\n+\n+    private CronHelper() {\n+    }\n+\n+    /**\n+     * Helper to lookup/create an instance of {@link CamelCronService}\n+     */\n+    public static CamelCronService resolveCamelCronService(CamelContext context, String name) {\n+        // Lookup the registry first\n+        CamelCronService service = ObjectHelper.isEmpty(name)\n+                ? CamelContextHelper.findByType(context, CamelCronService.class)\n+                : CamelContextHelper.lookup(context, name, CamelCronService.class);\n+\n+        if (service != null) {\n+            // If the service is bound to the registry we assume it is already\n+            // configured so let's return it as it is.\n+            return service;\n+        }\n+\n+        // Fallback to service loader", "originalCommit": "e4e7ce015b228c0864e5994e5e3e55ffeddbd914", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY4Njk3NQ==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365686975", "bodyText": "Wonder if after we get https://issues.apache.org/jira/browse/CAMEL-14389 done we should start using the type-safe dsl for scenario like this one as it would ease refactoring/deprecations", "author": "lburgazzoli", "createdAt": "2020-01-13T08:38:47Z", "path": "components/camel-quartz/src/main/java/org/apache/camel/component/quartz/cron/CamelQuartzCronService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.quartz.cron;\n+\n+import java.util.Collections;\n+\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.CamelContextAware;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.component.cron.api.CamelCronConfiguration;\n+import org.apache.camel.component.cron.api.CamelCronService;\n+import org.apache.camel.component.quartz.QuartzComponent;\n+import org.apache.camel.util.URISupport;\n+\n+/**\n+ * Allows the camel-quartz component to be used as implementation for camel-cron endpoints.\n+ */\n+public class CamelQuartzCronService implements CamelCronService, CamelContextAware {\n+\n+    private CamelContext context;\n+\n+    @Override\n+    public Endpoint createEndpoint(CamelCronConfiguration configuration) throws Exception {\n+        String schedule = convertSchedule(configuration.getSchedule());\n+\n+        String uriPath = \"quartz://\" + configuration.getName();\n+        String query = URISupport.createQueryString(Collections.singletonMap(\"cron\", schedule));\n+        String uri = uriPath + \"?\" + query;\n+\n+        QuartzComponent quartz = context.getComponent(\"quartz\", QuartzComponent.class);\n+        return quartz.createEndpoint(uri);", "originalCommit": "e4e7ce015b228c0864e5994e5e3e55ffeddbd914", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY4NzU3NQ==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365687575", "bodyText": "Maybe we should implement DelegateEndpoint", "author": "lburgazzoli", "createdAt": "2020-01-13T08:40:33Z", "path": "components/camel-cron/src/main/java/org/apache/camel/component/cron/CronComponent.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.cron;\n+\n+import java.util.Map;\n+\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.RuntimeCamelException;\n+import org.apache.camel.component.cron.api.CamelCronConfiguration;\n+import org.apache.camel.component.cron.api.CamelCronService;\n+import org.apache.camel.spi.Metadata;\n+import org.apache.camel.spi.annotations.Component;\n+import org.apache.camel.support.DefaultComponent;\n+import org.apache.camel.util.ObjectHelper;\n+\n+/**\n+ * The Camel cron component.\n+ */\n+@Component(\"cron\")\n+public class CronComponent extends DefaultComponent {", "originalCommit": "e4e7ce015b228c0864e5994e5e3e55ffeddbd914", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxNzM2MQ==", "url": "https://github.com/apache/camel/pull/3474#discussion_r365717361", "bodyText": "You mean.. providing kinda DelegateEndpointSupport?", "author": "nicolaferraro", "createdAt": "2020-01-13T09:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY4NzU3NQ=="}], "type": "inlineReview"}, {"oid": "594b2bf66559a783df840797499e1ecf0acde55a", "url": "https://github.com/apache/camel/commit/594b2bf66559a783df840797499e1ecf0acde55a", "message": "CAMEL-14385: add a camel-cron component", "committedDate": "2020-01-13T10:10:19Z", "type": "commit"}, {"oid": "f21734bb6ea6511de9674e5307875eda8d045f6d", "url": "https://github.com/apache/camel/commit/f21734bb6ea6511de9674e5307875eda8d045f6d", "message": "CAMEL-14385: update docs and manifests for camel-cron component", "committedDate": "2020-01-13T10:10:19Z", "type": "commit"}, {"oid": "778693c14f694d17c499e5a90246a1e1d3716876", "url": "https://github.com/apache/camel/commit/778693c14f694d17c499e5a90246a1e1d3716876", "message": "CAMEL-14385: add more tests", "committedDate": "2020-01-13T10:10:19Z", "type": "commit"}, {"oid": "ec06556ea00f74fa21fc9619770e1ad2ee9f233a", "url": "https://github.com/apache/camel/commit/ec06556ea00f74fa21fc9619770e1ad2ee9f233a", "message": "CAMEL-14385: remove commented config", "committedDate": "2020-01-13T10:10:19Z", "type": "commit"}, {"oid": "7b1a1a6cc433cb5684e263f8c90a09a76e6b2383", "url": "https://github.com/apache/camel/commit/7b1a1a6cc433cb5684e263f8c90a09a76e6b2383", "message": "CAMEL-14385: moving initialization to doStart", "committedDate": "2020-01-13T10:10:19Z", "type": "commit"}, {"oid": "57b25adb43a25f7b4ac4873646583972adf43768", "url": "https://github.com/apache/camel/commit/57b25adb43a25f7b4ac4873646583972adf43768", "message": "CAMEL-14385: support cron component in camel-spring", "committedDate": "2020-01-13T10:10:20Z", "type": "commit"}, {"oid": "93c107741cbdc95ee21a3daba701119963296db4", "url": "https://github.com/apache/camel/commit/93c107741cbdc95ee21a3daba701119963296db4", "message": "CAMEL-14385: fix configure consumer", "committedDate": "2020-01-13T10:10:20Z", "type": "commit"}, {"oid": "987c45c5a7ee794ecfb50bcdae97fa166cf22ba3", "url": "https://github.com/apache/camel/commit/987c45c5a7ee794ecfb50bcdae97fa166cf22ba3", "message": "CAMEL-14385: switch to factory finder", "committedDate": "2020-01-13T10:10:21Z", "type": "commit"}, {"oid": "987c45c5a7ee794ecfb50bcdae97fa166cf22ba3", "url": "https://github.com/apache/camel/commit/987c45c5a7ee794ecfb50bcdae97fa166cf22ba3", "message": "CAMEL-14385: switch to factory finder", "committedDate": "2020-01-13T10:10:21Z", "type": "forcePushed"}]}