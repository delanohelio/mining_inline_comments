{"pr_number": 4712, "pr_title": "Fix the disabled test and some minor cleanups", "pr_createdAt": "2020-12-02T17:32:53Z", "pr_url": "https://github.com/apache/camel/pull/4712", "timeline": [{"oid": "146e4ad70212799bd1fe115e42ab4aa8522f12a9", "url": "https://github.com/apache/camel/commit/146e4ad70212799bd1fe115e42ab4aa8522f12a9", "message": "fix the disabled test and some minor cleanups", "committedDate": "2020-12-02T17:30:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4ODQ3Mw==", "url": "https://github.com/apache/camel/pull/4712#discussion_r534388473", "bodyText": "I think that if 15 will be increased to 16 (or larger number) test will still pass.", "author": "DenisIstomin", "createdAt": "2020-12-02T18:27:27Z", "path": "components/camel-azure-storage-blob/src/test/java/org/apache/camel/component/azure/storage/blob/integration/BlobConsumerITTest.java", "diffHunk": "@@ -128,42 +132,35 @@ void testBatchFilePolling() throws InterruptedException, IOException {\n             exchange.getIn().setHeader(BlobConstants.BLOB_NAME, \"test_batch_blob_2\");\n         });\n \n-        // test output stream based\n-        final MockEndpoint mockEndpoint = getMockEndpoint(\"mock:resultBatch\");\n-        mockEndpoint.expectedMessageCount(2);\n-        mockEndpoint.assertIsSatisfied(100);\n+        MockEndpoint.assertIsSatisfied(context());\n \n         final BlobInputStream blobInputStream = mockEndpoint.getExchanges().get(0).getIn().getBody(BlobInputStream.class);\n         final BlobInputStream blobInputStream2 = mockEndpoint.getExchanges().get(1).getIn().getBody(BlobInputStream.class);\n \n         assertNotNull(blobInputStream, \"BlobInputStream must be set\");\n         assertNotNull(blobInputStream2, \"BlobInputStream must be set\");\n \n-        final String bufferedText = new BufferedReader(new InputStreamReader(blobInputStream)).readLine();\n-        final String bufferedText2 = new BufferedReader(new InputStreamReader(blobInputStream2)).readLine();\n+        final String bufferedText = context().getTypeConverter().convertTo(String.class, blobInputStream);\n+        final String bufferedText2 = context().getTypeConverter().convertTo(String.class, blobInputStream2);\n \n         assertEquals(\"Block Batch Blob 1\", bufferedText);\n         assertEquals(\"Block Batch Blob 2\", bufferedText2);\n \n-        // test file based\n-        final MockEndpoint mockEndpointFile = getMockEndpoint(\"mock:resultBatchFile\");\n-        mockEndpointFile.expectedMessageCount(2);\n-        mockEndpointFile.assertIsSatisfied(100);\n-\n         final File file = mockEndpointFile.getExchanges().get(0).getIn().getBody(File.class);\n         final File file2 = mockEndpointFile.getExchanges().get(1).getIn().getBody(File.class);\n \n         assertNotNull(file, \"File must be set\");\n         assertNotNull(file2, \"File must be set\");\n \n-        assertEquals(\"Block Batch Blob 1\", FileUtils.readFileToString(file, Charset.defaultCharset()));\n-        assertEquals(\"Block Batch Blob 2\", FileUtils.readFileToString(file2, Charset.defaultCharset()));\n+        assertEquals(\"Block Batch Blob 1\", context().getTypeConverter().convertTo(String.class, file));\n+        assertEquals(\"Block Batch Blob 2\", context().getTypeConverter().convertTo(String.class, file2));\n     }\n \n     @Test\n-    @Disabled(\"This test should be fixed to use mock:resultRegex endpoint instead of mock:resultBatch\")\n-    void testRegexPolling() throws InterruptedException {\n-        Pattern pattern = Pattern.compile(regex);\n+    void testRegexPolling() throws Exception {\n+        // test regex based\n+        final MockEndpoint mockEndpoint = getMockEndpoint(\"mock:resultRegex\");\n+        mockEndpoint.expectedMessageCount(15);", "originalCommit": "146e4ad70212799bd1fe115e42ab4aa8522f12a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1NjY4MQ==", "url": "https://github.com/apache/camel/pull/4712#discussion_r534456681", "bodyText": "Thanks for your feedback. It should be fixed now.", "author": "bvahdat", "createdAt": "2020-12-02T20:21:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4ODQ3Mw=="}], "type": "inlineReview"}, {"oid": "b53abc63bbfb86e9f7dd9ab2adb123fb4fef838f", "url": "https://github.com/apache/camel/commit/b53abc63bbfb86e9f7dd9ab2adb123fb4fef838f", "message": "fix the test using the idempotentConsumer EIP", "committedDate": "2020-12-02T20:20:32Z", "type": "commit"}]}