{"pr_number": 3646, "pr_title": "Resolves camel-14728. master branch; Rearrange website source to better use Antora capabilities and reduce\u2026", "pr_createdAt": "2020-03-18T01:49:28Z", "pr_url": "https://github.com/apache/camel/pull/3646", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyMDkzNA==", "url": "https://github.com/apache/camel/pull/3646#discussion_r394120934", "bodyText": "There is something in your change that is causing all the types of these EIPs to be wrong, eg the Integer -> String. And so on.", "author": "davsclaus", "createdAt": "2020-03-18T05:58:04Z", "path": "core/camel-core-engine/src/main/docs/modules/eips/pages/hystrixConfiguration-eip.adoc", "diffHunk": "@@ -10,34 +10,34 @@ The Hystrix Configuration EIP supports 31 options which are listed below:\n | Name | Description | Default | Type\n | *groupKey* | Sets the group key to use. The default value is CamelHystrix. | CamelHystrix | String\n | *threadPoolKey* | Sets the thread pool key to use. Will by default use the same value as groupKey has been configured to use. | CamelHystrix | String\n-| *circuitBreakerEnabled* | Whether to use a HystrixCircuitBreaker or not. If false no circuit-breaker logic will be used and all requests permitted. This is similar in effect to circuitBreakerForceClosed() except that continues tracking metrics and knowing whether it should be open/closed, this property results in not even instantiating a circuit-breaker. | true | Boolean\n-| *circuitBreakerError ThresholdPercentage* | Error percentage threshold (as whole number such as 50) at which point the circuit breaker will trip open and reject requests. It will stay tripped for the duration defined in circuitBreakerSleepWindowInMilliseconds; The error percentage this is compared against comes from HystrixCommandMetrics.getHealthCounts(). | 50 | Integer\n-| *circuitBreakerForceClosed* | If true the HystrixCircuitBreaker#allowRequest() will always return true to allow requests regardless of the error percentage from HystrixCommandMetrics.getHealthCounts(). The circuitBreakerForceOpen() property takes precedence so if it set to true this property does nothing. | false | Boolean\n-| *circuitBreakerForceOpen* | If true the HystrixCircuitBreaker.allowRequest() will always return false, causing the circuit to be open (tripped) and reject all requests. This property takes precedence over circuitBreakerForceClosed(); | false | Boolean\n-| *circuitBreakerRequestVolume Threshold* | Minimum number of requests in the metricsRollingStatisticalWindowInMilliseconds() that must exist before the HystrixCircuitBreaker will trip. If below this number the circuit will not trip regardless of error percentage. | 20 | Integer\n-| *circuitBreakerSleepWindow InMilliseconds* | The time in milliseconds after a HystrixCircuitBreaker trips open that it should wait before trying requests again. | 5000 | Integer\n-| *executionIsolationSemaphore MaxConcurrentRequests* | Number of concurrent requests permitted to HystrixCommand.run(). Requests beyond the concurrent limit will be rejected. Applicable only when executionIsolationStrategy == SEMAPHORE. | 20 | Integer\n+| *circuitBreakerEnabled* | Whether to use a HystrixCircuitBreaker or not. If false no circuit-breaker logic will be used and all requests permitted. This is similar in effect to circuitBreakerForceClosed() except that continues tracking metrics and knowing whether it should be open/closed, this property results in not even instantiating a circuit-breaker. | true | String\n+| *circuitBreakerErrorThreshold Percentage* | Error percentage threshold (as whole number such as 50) at which point the circuit breaker will trip open and reject requests. It will stay tripped for the duration defined in circuitBreakerSleepWindowInMilliseconds; The error percentage this is compared against comes from HystrixCommandMetrics.getHealthCounts(). | 50 | String\n+| *circuitBreakerForceClosed* | If true the HystrixCircuitBreaker#allowRequest() will always return true to allow requests regardless of the error percentage from HystrixCommandMetrics.getHealthCounts(). The circuitBreakerForceOpen() property takes precedence so if it set to true this property does nothing. | false | String\n+| *circuitBreakerForceOpen* | If true the HystrixCircuitBreaker.allowRequest() will always return false, causing the circuit to be open (tripped) and reject all requests. This property takes precedence over circuitBreakerForceClosed(); | false | String\n+| *circuitBreakerRequestVolume Threshold* | Minimum number of requests in the metricsRollingStatisticalWindowInMilliseconds() that must exist before the HystrixCircuitBreaker will trip. If below this number the circuit will not trip regardless of error percentage. | 20 | String\n+| *circuitBreakerSleepWindowIn Milliseconds* | The time in milliseconds after a HystrixCircuitBreaker trips open that it should wait before trying requests again. | 5000 | String", "originalCommit": "97105d825d1d8ab85becfc5331c64b60f7b1cd43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQzMzgxMQ==", "url": "https://github.com/apache/camel/pull/3646#discussion_r394433811", "bodyText": "Perhaps you could suggest what might be causing this: checking the (generated) json source for one of these the type is being copied from json to adoc accurately:\n    \"circuitBreakerEnabled\": { \"kind\": \"attribute\", \"displayName\": \"Circuit Breaker Enabled\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false, \"defaultValue\": \"true\", \"description\": \"Whether to use a HystrixCircuitBreaker or not. If false no circuit-breaker logic will be used and all requests permitted. This is similar in effect to circuitBreakerForceClosed() except that continues tracking metrics and knowing whether it should be open\\/closed, this property results in not even instantiating a circuit-breaker.\" },\n\nAFAICT I didn't touch any part of the code or build that could possibly affect the json generation.", "author": "djencks", "createdAt": "2020-03-18T15:27:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyMDkzNA=="}], "type": "inlineReview"}, {"oid": "6d694f21d3ef031a96b0b436dec8382592090d0a", "url": "https://github.com/apache/camel/commit/6d694f21d3ef031a96b0b436dec8382592090d0a", "message": "Rearrange website source to better use Antora capabilities and reduce duplicate pages.", "committedDate": "2020-03-18T18:21:59Z", "type": "commit"}, {"oid": "6d694f21d3ef031a96b0b436dec8382592090d0a", "url": "https://github.com/apache/camel/commit/6d694f21d3ef031a96b0b436dec8382592090d0a", "message": "Rearrange website source to better use Antora capabilities and reduce duplicate pages.", "committedDate": "2020-03-18T18:21:59Z", "type": "forcePushed"}]}