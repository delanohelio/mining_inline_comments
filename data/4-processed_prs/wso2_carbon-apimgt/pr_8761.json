{"pr_number": 8761, "pr_title": "fixing #8362", "pr_createdAt": "2020-06-16T08:30:19Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8761", "timeline": [{"oid": "5a06a03ff583356d6fa37765615c955b4610e4a0", "url": "https://github.com/wso2/carbon-apimgt/commit/5a06a03ff583356d6fa37765615c955b4610e4a0", "message": "fixing #8362", "committedDate": "2020-06-16T08:20:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxMzc2Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8761#discussion_r443313766", "bodyText": "shouldn't the subscription call happen if api.lifeCycleStatus.toLowerCase() !== 'prototyped') ?", "author": "kavishkafernando", "createdAt": "2020-06-22T04:40:42Z", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/ApiConsole/TryOutController.jsx", "diffHunk": "@@ -124,39 +124,52 @@ function TryOutController(props) {\n         let keys;\n         let selectedKeyTypes = 'PRODUCTION';\n         let accessToken;\n-        const promiseSubscriptions = restApi.getSubscriptions(apiID);\n-        promiseSubscriptions.then((subscriptionsResponse) => {\n-            if (subscriptionsResponse !== null) {\n-                subscriptionsList = subscriptionsResponse.obj.list.filter((item) => item.status === 'UNBLOCKED'\n-                || item.status === 'PROD_ONLY_BLOCKED');\n+        if (!api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped') {", "originalCommit": "5a06a03ff583356d6fa37765615c955b4610e4a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4MzA0MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8761#discussion_r445983041", "bodyText": "fixed issues", "author": "hasuniea", "createdAt": "2020-06-26T05:59:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxMzc2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxNTI5NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8761#discussion_r443315295", "bodyText": "shouldn't the subscription call happen if api.lifeCycleStatus.toLowerCase() !== 'prototyped') ?", "author": "kavishkafernando", "createdAt": "2020-06-22T04:48:30Z", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Details/ApiConsole/TryOutController.jsx", "diffHunk": "@@ -169,77 +182,68 @@ function TryOutController(props) {\n                     }\n                     setSelectedKeyType(selectedKeyType, false);\n                 }\n-            } else {\n-                setSelectedApplication(newSelectedApplication);\n-                setSubscriptions(subscriptionsList);\n-                setKeys(keys);\n-                setSelectedEnvironment(selectedEnvironment, false);\n-                if (selectedKeyType === 'PRODUCTION') {\n-                    setProductionAccessToken(accessToken);\n-                } else {\n-                    setSandboxAccessToken(accessToken);\n-                }\n-                setSelectedKeyType(selectedKeyType, false);\n-            }\n-        }).catch((error) => {\n-            if (process.env.NODE_ENV !== 'production') {\n-                console.error(error);\n-            }\n-            const { status } = error;\n-            if (status === 404) {\n-                setNotFound(true);\n-            }\n-        });\n-        const promisedKeyManagers = restApi.getKeyManagers();\n-        promisedKeyManagers\n-            .then((response) => {\n-                const responseKeyManagerList = [];\n-                response.body.list.map((item) => responseKeyManagerList.push(item));\n-                setKeyManagers(responseKeyManagerList);\n-            })\n-            .catch((error) => {\n+            }).catch((error) => {\n                 if (process.env.NODE_ENV !== 'production') {\n-                    console.log(error);\n+                    console.error(error);\n                 }\n                 const { status } = error;\n                 if (status === 404) {\n                     setNotFound(true);\n                 }\n             });\n+            const promisedKeyManagers = restApi.getKeyManagers();\n+            promisedKeyManagers\n+                .then((response) => {\n+                    const responseKeyManagerList = [];\n+                    response.body.list.map((item) => responseKeyManagerList.push(item));\n+                    setKeyManagers(responseKeyManagerList);\n+                })\n+                .catch((error) => {\n+                    if (process.env.NODE_ENV !== 'production') {\n+                        console.log(error);\n+                    }\n+                    const { status } = error;\n+                    if (status === 404) {\n+                        setNotFound(true);\n+                    }\n+                });\n+        }\n     }, []);\n \n \n     /**\n      * Generate access token\n      * */\n     function generateAccessToken() {\n-        setIsUpdating(true);\n-        const applicationPromise = Application.get(selectedApplication);\n-        applicationPromise\n-            .then((application) => application.generateToken(\n-                selectedKeyManager,\n-                selectedKeyType,\n-                3600,\n-                scopes,\n-            ))\n-            .then((response) => {\n-                console.log('token generated successfully ' + response);\n-                setShowToken(false);\n-                if (selectedKeyType === 'PRODUCTION') {\n-                    setProductionAccessToken(response.accessToken);\n-                } else {\n-                    setSandboxAccessToken(response.accessToken);\n-                }\n-                setIsUpdating(false);\n-            })\n-            .catch((error) => {\n-                console.error(error);\n-                const { status } = error;\n-                if (status === 404) {\n-                    setNotFound(true);\n-                }\n-                setIsUpdating(false);\n-            });\n+        if (!api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped') {", "originalCommit": "5a06a03ff583356d6fa37765615c955b4610e4a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4MzE1MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8761#discussion_r445983151", "bodyText": "fixed issue.", "author": "hasuniea", "createdAt": "2020-06-26T06:00:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMxNTI5NQ=="}], "type": "inlineReview"}, {"oid": "c8ca7586d1fdc2c4203f90a7ffaec0f782c0c7fa", "url": "https://github.com/wso2/carbon-apimgt/commit/c8ca7586d1fdc2c4203f90a7ffaec0f782c0c7fa", "message": "adding testKey improvements", "committedDate": "2020-06-25T10:45:16Z", "type": "commit"}, {"oid": "fea7851599d37e200fdde4e88a5c2e2eab3881a9", "url": "https://github.com/wso2/carbon-apimgt/commit/fea7851599d37e200fdde4e88a5c2e2eab3881a9", "message": "fixing prototype state issue", "committedDate": "2020-06-26T05:57:49Z", "type": "commit"}, {"oid": "25fc86a94b997dd540ec92f850bcdf09b0164c18", "url": "https://github.com/wso2/carbon-apimgt/commit/25fc86a94b997dd540ec92f850bcdf09b0164c18", "message": "removed logs", "committedDate": "2020-06-26T07:28:21Z", "type": "commit"}, {"oid": "27933d3acfd80bff82074810077ec9679c0351be", "url": "https://github.com/wso2/carbon-apimgt/commit/27933d3acfd80bff82074810077ec9679c0351be", "message": "fixing loging issues", "committedDate": "2020-06-26T07:41:27Z", "type": "commit"}, {"oid": "b3c637c881ef3074513bb7fead6e41ff21dda32e", "url": "https://github.com/wso2/carbon-apimgt/commit/b3c637c881ef3074513bb7fead6e41ff21dda32e", "message": "fixing merge conflicts", "committedDate": "2020-06-26T09:15:10Z", "type": "commit"}]}