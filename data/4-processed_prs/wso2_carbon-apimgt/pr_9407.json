{"pr_number": 9407, "pr_title": "Add Listing page fixes for Service Catalog", "pr_createdAt": "2020-11-20T07:14:39Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/9407", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5MTczMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529591733", "bodyText": "Let's use useIntl  hook instead of this old style injectIntl HOC here\nimport { useIntl } from 'react-intl';", "author": "tmkasun", "createdAt": "2020-11-24T14:35:43Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Delete.jsx", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useState } from 'react';\n+import { FormattedMessage, injectIntl, useIntl } from 'react-intl';\n+import PropTypes from 'prop-types';\n+import Button from '@material-ui/core/Button';\n+import Icon from '@material-ui/core/Icon';\n+import Alert from 'AppComponents/Shared/Alert';\n+import ConfirmDialog from 'AppComponents/Shared/ConfirmDialog';\n+import ServiceCatalog from 'AppData/ServiceCatalog';\n+\n+/**\n+* Service Catalog service delete\n+* @param {any} props Props for delete function.\n+* @returns {any} Returns the rendered UI for service delete.\n+*/\n+function Delete(props) {\n+    const intl = useIntl();\n+    const [open, setOpen] = useState(false);\n+    const toggleOpen = () => {\n+        setOpen(!open);\n+    };\n+    const { serviceName, serviceId, getData } = props;\n+\n+    const deleteService = () => {\n+        const deleteServicePromise = ServiceCatalog.deleteService(serviceId);\n+        deleteServicePromise.then(() => {\n+            Alert.info(intl.formatMessage({\n+                id: 'ServiceCatalog.Listing.Delete.service.deleted.successfully',\n+                defaultMessage: 'Service deleted successfully!',\n+            }));\n+            // Reload the services list\n+            getData();\n+        }).catch(() => {\n+            Alert.error(intl.formatMessage({\n+                defaultMessage: 'Error while deleting service',\n+                id: 'ServiceCatalog.Listing.Delete.error.delete',\n+            }));\n+        });\n+    };\n+\n+    const runAction = (confirm) => {\n+        if (confirm) {\n+            deleteService();\n+        }\n+        setOpen(!open);\n+    };\n+\n+    return (\n+        <>\n+            <Button onClick={toggleOpen}>\n+                <Icon>delete_forever</Icon>\n+            </Button>\n+            <ConfirmDialog\n+                key='key-dialog'\n+                labelCancel={(\n+                    <FormattedMessage\n+                        id='ServiceCatalog.Listing.Delete.cancel'\n+                        defaultMessage='Cancel'\n+                    />\n+                )}\n+                title={(\n+                    <FormattedMessage\n+                        id='ServiceCatalog.Listing.Delete.confirm'\n+                        defaultMessage='Confirm Delete'\n+                    />\n+                )}\n+                message={(\n+                    <FormattedMessage\n+                        id='ServiceCatalog.Listing.Delete.ok.confirm'\n+                        defaultMessage='Are you sure you want to delete the service {service} ?'\n+                        values={{ service: serviceName }}\n+                    />\n+                )}\n+                labelOk={(\n+                    <FormattedMessage\n+                        id='ServiceCatalog.Listing.Delete.ok.yes'\n+                        defaultMessage='Yes'\n+                    />\n+                )}\n+                callback={runAction}\n+                open={open}\n+            />\n+        </>\n+    );\n+}\n+Delete.propTypes = {\n+    classes: PropTypes.shape({}).isRequired,\n+    serviceName: PropTypes.string.isRequired,\n+    serviceId: PropTypes.string.isRequired,\n+    getData: PropTypes.shape({}).isRequired,\n+    intl: PropTypes.shape({}).isRequired,\n+};\n+\n+export default injectIntl(Delete);", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1MjYxNA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r530252614", "bodyText": "Fixed with a9d9f33", "author": "tharikaGitHub", "createdAt": "2020-11-25T10:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5MTczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY5NTA3OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529695079", "bodyText": "With this useIntl Usage of injectIntl is redundant and hasn't used the props passed from this HOC(Higher-order component) also.So shall we remove the injectIntl thinngs", "author": "tmkasun", "createdAt": "2020-11-24T16:10:48Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Delete.jsx", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useState } from 'react';\n+import { FormattedMessage, injectIntl, useIntl } from 'react-intl';\n+import PropTypes from 'prop-types';\n+import Button from '@material-ui/core/Button';\n+import Icon from '@material-ui/core/Icon';\n+import Alert from 'AppComponents/Shared/Alert';\n+import ConfirmDialog from 'AppComponents/Shared/ConfirmDialog';\n+import ServiceCatalog from 'AppData/ServiceCatalog';\n+\n+/**\n+* Service Catalog service delete\n+* @param {any} props Props for delete function.\n+* @returns {any} Returns the rendered UI for service delete.\n+*/\n+function Delete(props) {\n+    const intl = useIntl();", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1Mjc4OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r530252789", "bodyText": "Fixed with a9d9f33", "author": "tharikaGitHub", "createdAt": "2020-11-25T10:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY5NTA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyMDUyMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529720522", "bodyText": "This set of properties (or in short props) are the parameters that external component can engage with this Delete component, In other words, this act as the interface for this Delete component(if we look at it in OOP corner)\nIe : if Delete is a class serviceName, serviceId, getData are like constructor arguments.\nDelete(serviceName, serviceId, getData)\nSo my point here is, For this Delete component getData kind of function property is not appropriate.\nUsually, the component states are event-driven like, onChange, onClose, onSubmit, etc so it's better to have an event handler like onDelete and implement the onDelete handler in parent component.\nDelete component should ask for user content and if the user confirms the action it should trigger the onDelete handler", "author": "tmkasun", "createdAt": "2020-11-24T16:42:03Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Delete.jsx", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useState } from 'react';\n+import { FormattedMessage, injectIntl, useIntl } from 'react-intl';\n+import PropTypes from 'prop-types';\n+import Button from '@material-ui/core/Button';\n+import Icon from '@material-ui/core/Icon';\n+import Alert from 'AppComponents/Shared/Alert';\n+import ConfirmDialog from 'AppComponents/Shared/ConfirmDialog';\n+import ServiceCatalog from 'AppData/ServiceCatalog';\n+\n+/**\n+* Service Catalog service delete\n+* @param {any} props Props for delete function.\n+* @returns {any} Returns the rendered UI for service delete.\n+*/\n+function Delete(props) {\n+    const intl = useIntl();\n+    const [open, setOpen] = useState(false);\n+    const toggleOpen = () => {\n+        setOpen(!open);\n+    };\n+    const { serviceName, serviceId, getData } = props;", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1MzEwNA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r530253104", "bodyText": "Fixed with 56c6c22", "author": "tharikaGitHub", "createdAt": "2020-11-25T10:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyMDUyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyMjY0MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529722641", "bodyText": "Please avoid using injectIntl", "author": "tmkasun", "createdAt": "2020-11-24T16:45:03Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Edit.jsx", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer, useState, useEffect } from 'react';\n+import { FormattedMessage, injectIntl, useIntl } from 'react-intl';", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1NDE0NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r530254144", "bodyText": "Fixed with a9d9f33", "author": "tharikaGitHub", "createdAt": "2020-11-25T10:10:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyMjY0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyNjEyNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529726127", "bodyText": "Similar to above Delete component, Here also we can make this Edit component controlled by its parent by exposing an onEdit kind of handler. IMO we don't need getData  here", "author": "tmkasun", "createdAt": "2020-11-24T16:50:01Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Edit.jsx", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer, useState, useEffect } from 'react';\n+import { FormattedMessage, injectIntl, useIntl } from 'react-intl';\n+import PropTypes from 'prop-types';\n+import Button from '@material-ui/core/Button';\n+import Icon from '@material-ui/core/Icon';\n+import Alert from 'AppComponents/Shared/Alert';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import Dialog from '@material-ui/core/Dialog';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import { makeStyles } from '@material-ui/core/styles';\n+import ServiceCatalog from 'AppData/ServiceCatalog';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+\n+const useStyles = makeStyles((theme) => ({\n+    mandatoryStar: {\n+        color: theme.palette.error.main,\n+        marginLeft: theme.spacing(0.1),\n+    },\n+}));\n+\n+/**\n+ * Reducer\n+ * @param {JSON} state State.\n+ * @returns {Promise} Promised state.\n+ */\n+function reducer(state, { field, value }) {\n+    switch (field) {\n+        case 'name':\n+            return { ...state, [field]: value, displayName: value };\n+        case 'serviceUrl':\n+            return { ...state, [field]: value };\n+        case 'definitionType':\n+            return { ...state, [field]: value };\n+        default:\n+            return state;\n+    }\n+}\n+\n+/**\n+* Service Catalog service edit\n+* @param {any} props Props for edit function.\n+* @returns {any} Returns the rendered UI for service edit.\n+*/\n+function Edit(props) {\n+    const intl = useIntl();\n+    const classes = useStyles();\n+    const { getData, dataRow } = props;", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1NDM5NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r530254394", "bodyText": "Fixed with 56c6c22", "author": "tharikaGitHub", "createdAt": "2020-11-25T10:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyNjEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMDIwOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529730208", "bodyText": "I think this initialState state is not needed in this component", "author": "tmkasun", "createdAt": "2020-11-24T16:55:29Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Edit.jsx", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer, useState, useEffect } from 'react';\n+import { FormattedMessage, injectIntl, useIntl } from 'react-intl';\n+import PropTypes from 'prop-types';\n+import Button from '@material-ui/core/Button';\n+import Icon from '@material-ui/core/Icon';\n+import Alert from 'AppComponents/Shared/Alert';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import Dialog from '@material-ui/core/Dialog';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import { makeStyles } from '@material-ui/core/styles';\n+import ServiceCatalog from 'AppData/ServiceCatalog';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+\n+const useStyles = makeStyles((theme) => ({\n+    mandatoryStar: {\n+        color: theme.palette.error.main,\n+        marginLeft: theme.spacing(0.1),\n+    },\n+}));\n+\n+/**\n+ * Reducer\n+ * @param {JSON} state State.\n+ * @returns {Promise} Promised state.\n+ */\n+function reducer(state, { field, value }) {\n+    switch (field) {\n+        case 'name':\n+            return { ...state, [field]: value, displayName: value };\n+        case 'serviceUrl':\n+            return { ...state, [field]: value };\n+        case 'definitionType':\n+            return { ...state, [field]: value };\n+        default:\n+            return state;\n+    }\n+}\n+\n+/**\n+* Service Catalog service edit\n+* @param {any} props Props for edit function.\n+* @returns {any} Returns the rendered UI for service edit.\n+*/\n+function Edit(props) {\n+    const intl = useIntl();\n+    const classes = useStyles();\n+    const { getData, dataRow } = props;\n+    const [open, setOpen] = useState(false);\n+    const [schemaTypeList, setSchemaTypeList] = useState([]);\n+    const [serviceTypeList, setServiceTypeList] = useState([]);\n+    const toggleOpen = () => {\n+        setOpen(!open);\n+    };\n+    const [initialState, setInitialState] = useState(dataRow);", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1NDc3Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r530254773", "bodyText": "Fixed with d8b527b", "author": "tharikaGitHub", "createdAt": "2020-11-25T10:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMDIwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMTY0MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529731641", "bodyText": "Since there are no dependencies for this effect(dependency list) , This effect is only triggered after initial component mout, So calling setInitialState inside this effect is the same as\nexecuting below line\n const [initialState, setInitialState] = useState(dataRow);", "author": "tmkasun", "createdAt": "2020-11-24T16:57:24Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Edit.jsx", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer, useState, useEffect } from 'react';\n+import { FormattedMessage, injectIntl, useIntl } from 'react-intl';\n+import PropTypes from 'prop-types';\n+import Button from '@material-ui/core/Button';\n+import Icon from '@material-ui/core/Icon';\n+import Alert from 'AppComponents/Shared/Alert';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import Dialog from '@material-ui/core/Dialog';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import { makeStyles } from '@material-ui/core/styles';\n+import ServiceCatalog from 'AppData/ServiceCatalog';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+\n+const useStyles = makeStyles((theme) => ({\n+    mandatoryStar: {\n+        color: theme.palette.error.main,\n+        marginLeft: theme.spacing(0.1),\n+    },\n+}));\n+\n+/**\n+ * Reducer\n+ * @param {JSON} state State.\n+ * @returns {Promise} Promised state.\n+ */\n+function reducer(state, { field, value }) {\n+    switch (field) {\n+        case 'name':\n+            return { ...state, [field]: value, displayName: value };\n+        case 'serviceUrl':\n+            return { ...state, [field]: value };\n+        case 'definitionType':\n+            return { ...state, [field]: value };\n+        default:\n+            return state;\n+    }\n+}\n+\n+/**\n+* Service Catalog service edit\n+* @param {any} props Props for edit function.\n+* @returns {any} Returns the rendered UI for service edit.\n+*/\n+function Edit(props) {\n+    const intl = useIntl();\n+    const classes = useStyles();\n+    const { getData, dataRow } = props;\n+    const [open, setOpen] = useState(false);\n+    const [schemaTypeList, setSchemaTypeList] = useState([]);\n+    const [serviceTypeList, setServiceTypeList] = useState([]);\n+    const toggleOpen = () => {\n+        setOpen(!open);\n+    };\n+    const [initialState, setInitialState] = useState(dataRow);\n+\n+    const [state, dispatch] = useReducer(reducer, initialState);\n+\n+    const {\n+        id,\n+        name,\n+        serviceUrl,\n+        definitionType,\n+    } = state;\n+\n+    useEffect(() => {\n+        setInitialState(dataRow);\n+        const settingPromise = ServiceCatalog.getSettings();\n+        // Take from settings when backend API is implemented\n+        settingPromise.then(() => {\n+            setSchemaTypeList(['OAS2', 'OAS3', 'WSDL1', 'WSDL2', 'GRAPHQL_SDL', 'ASYNC_API']);\n+            setServiceTypeList(['OAS2', 'OAS3', 'WSDL1', 'WSDL2', 'GRAPHQL_SDL', 'ASYNC_API']);\n+        }).catch(() => {\n+            Alert.error(intl.formatMessage({\n+                defaultMessage: 'Error while retrieving service and schema types',\n+                id: 'ServiceCatalog.Listing.Edit.error.retrieve.service.schema.types',\n+            }));\n+        });\n+    }, []);", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1NDkwNg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r530254906", "bodyText": "Fixed with d8b527b", "author": "tharikaGitHub", "createdAt": "2020-11-25T10:12:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMTY0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMjQ1Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529732453", "bodyText": "Can't we extract mock values from OAS definition, Or shall we move this to API data level so that we know once the REST API is ready it's only that API file we need to change in order to wire the actual API", "author": "tmkasun", "createdAt": "2020-11-24T16:58:34Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Edit.jsx", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer, useState, useEffect } from 'react';\n+import { FormattedMessage, injectIntl, useIntl } from 'react-intl';\n+import PropTypes from 'prop-types';\n+import Button from '@material-ui/core/Button';\n+import Icon from '@material-ui/core/Icon';\n+import Alert from 'AppComponents/Shared/Alert';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import Dialog from '@material-ui/core/Dialog';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import { makeStyles } from '@material-ui/core/styles';\n+import ServiceCatalog from 'AppData/ServiceCatalog';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+\n+const useStyles = makeStyles((theme) => ({\n+    mandatoryStar: {\n+        color: theme.palette.error.main,\n+        marginLeft: theme.spacing(0.1),\n+    },\n+}));\n+\n+/**\n+ * Reducer\n+ * @param {JSON} state State.\n+ * @returns {Promise} Promised state.\n+ */\n+function reducer(state, { field, value }) {\n+    switch (field) {\n+        case 'name':\n+            return { ...state, [field]: value, displayName: value };\n+        case 'serviceUrl':\n+            return { ...state, [field]: value };\n+        case 'definitionType':\n+            return { ...state, [field]: value };\n+        default:\n+            return state;\n+    }\n+}\n+\n+/**\n+* Service Catalog service edit\n+* @param {any} props Props for edit function.\n+* @returns {any} Returns the rendered UI for service edit.\n+*/\n+function Edit(props) {\n+    const intl = useIntl();\n+    const classes = useStyles();\n+    const { getData, dataRow } = props;\n+    const [open, setOpen] = useState(false);\n+    const [schemaTypeList, setSchemaTypeList] = useState([]);\n+    const [serviceTypeList, setServiceTypeList] = useState([]);\n+    const toggleOpen = () => {\n+        setOpen(!open);\n+    };\n+    const [initialState, setInitialState] = useState(dataRow);\n+\n+    const [state, dispatch] = useReducer(reducer, initialState);\n+\n+    const {\n+        id,\n+        name,\n+        serviceUrl,\n+        definitionType,\n+    } = state;\n+\n+    useEffect(() => {\n+        setInitialState(dataRow);\n+        const settingPromise = ServiceCatalog.getSettings();\n+        // Take from settings when backend API is implemented\n+        settingPromise.then(() => {\n+            setSchemaTypeList(['OAS2', 'OAS3', 'WSDL1', 'WSDL2', 'GRAPHQL_SDL', 'ASYNC_API']);", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4NjI1NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r530286255", "bodyText": "Fixed with 532eb14", "author": "tharikaGitHub", "createdAt": "2020-11-25T11:00:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMjQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMzg0OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529733849", "bodyText": "This switch can be simplified as below\n     .\n     .\n        case 'serviceUrl':\n        case 'definitionType':\n            return { ...state, [field]: value };\nbecause in both cases return { ...state, [field]: value }; return statements are same", "author": "tmkasun", "createdAt": "2020-11-24T17:00:28Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Edit.jsx", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer, useState, useEffect } from 'react';\n+import { FormattedMessage, injectIntl, useIntl } from 'react-intl';\n+import PropTypes from 'prop-types';\n+import Button from '@material-ui/core/Button';\n+import Icon from '@material-ui/core/Icon';\n+import Alert from 'AppComponents/Shared/Alert';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import Dialog from '@material-ui/core/Dialog';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import { makeStyles } from '@material-ui/core/styles';\n+import ServiceCatalog from 'AppData/ServiceCatalog';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+\n+const useStyles = makeStyles((theme) => ({\n+    mandatoryStar: {\n+        color: theme.palette.error.main,\n+        marginLeft: theme.spacing(0.1),\n+    },\n+}));\n+\n+/**\n+ * Reducer\n+ * @param {JSON} state State.\n+ * @returns {Promise} Promised state.\n+ */\n+function reducer(state, { field, value }) {\n+    switch (field) {\n+        case 'name':\n+            return { ...state, [field]: value, displayName: value };\n+        case 'serviceUrl':", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4NjQxOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r530286418", "bodyText": "Fixed with 532eb14", "author": "tharikaGitHub", "createdAt": "2020-11-25T11:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczMzg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczNTY5Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529735692", "bodyText": "can we set name and displayName  fields with the same value all the time, like are they both get changed at the same time always ?", "author": "tmkasun", "createdAt": "2020-11-24T17:03:10Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Edit.jsx", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer, useState, useEffect } from 'react';\n+import { FormattedMessage, injectIntl, useIntl } from 'react-intl';\n+import PropTypes from 'prop-types';\n+import Button from '@material-ui/core/Button';\n+import Icon from '@material-ui/core/Icon';\n+import Alert from 'AppComponents/Shared/Alert';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import Dialog from '@material-ui/core/Dialog';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import { makeStyles } from '@material-ui/core/styles';\n+import ServiceCatalog from 'AppData/ServiceCatalog';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+\n+const useStyles = makeStyles((theme) => ({\n+    mandatoryStar: {\n+        color: theme.palette.error.main,\n+        marginLeft: theme.spacing(0.1),\n+    },\n+}));\n+\n+/**\n+ * Reducer\n+ * @param {JSON} state State.\n+ * @returns {Promise} Promised state.\n+ */\n+function reducer(state, { field, value }) {\n+    switch (field) {\n+        case 'name':\n+            return { ...state, [field]: value, displayName: value };", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwOTkwNA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r530909904", "bodyText": "Fixed with 9306aa9", "author": "tharikaGitHub", "createdAt": "2020-11-26T10:01:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczNTY5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczNzQzMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529737430", "bodyText": "As mention above I think it's better to invoke a onEdit function here and pass this promise updateServicePromise object to it, So it can handle what to do in case of a failure or success save", "author": "tmkasun", "createdAt": "2020-11-24T17:05:42Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Edit.jsx", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer, useState, useEffect } from 'react';\n+import { FormattedMessage, injectIntl, useIntl } from 'react-intl';\n+import PropTypes from 'prop-types';\n+import Button from '@material-ui/core/Button';\n+import Icon from '@material-ui/core/Icon';\n+import Alert from 'AppComponents/Shared/Alert';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import Dialog from '@material-ui/core/Dialog';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import { makeStyles } from '@material-ui/core/styles';\n+import ServiceCatalog from 'AppData/ServiceCatalog';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+\n+const useStyles = makeStyles((theme) => ({\n+    mandatoryStar: {\n+        color: theme.palette.error.main,\n+        marginLeft: theme.spacing(0.1),\n+    },\n+}));\n+\n+/**\n+ * Reducer\n+ * @param {JSON} state State.\n+ * @returns {Promise} Promised state.\n+ */\n+function reducer(state, { field, value }) {\n+    switch (field) {\n+        case 'name':\n+            return { ...state, [field]: value, displayName: value };\n+        case 'serviceUrl':\n+            return { ...state, [field]: value };\n+        case 'definitionType':\n+            return { ...state, [field]: value };\n+        default:\n+            return state;\n+    }\n+}\n+\n+/**\n+* Service Catalog service edit\n+* @param {any} props Props for edit function.\n+* @returns {any} Returns the rendered UI for service edit.\n+*/\n+function Edit(props) {\n+    const intl = useIntl();\n+    const classes = useStyles();\n+    const { getData, dataRow } = props;\n+    const [open, setOpen] = useState(false);\n+    const [schemaTypeList, setSchemaTypeList] = useState([]);\n+    const [serviceTypeList, setServiceTypeList] = useState([]);\n+    const toggleOpen = () => {\n+        setOpen(!open);\n+    };\n+    const [initialState, setInitialState] = useState(dataRow);\n+\n+    const [state, dispatch] = useReducer(reducer, initialState);\n+\n+    const {\n+        id,\n+        name,\n+        serviceUrl,\n+        definitionType,\n+    } = state;\n+\n+    useEffect(() => {\n+        setInitialState(dataRow);\n+        const settingPromise = ServiceCatalog.getSettings();\n+        // Take from settings when backend API is implemented\n+        settingPromise.then(() => {\n+            setSchemaTypeList(['OAS2', 'OAS3', 'WSDL1', 'WSDL2', 'GRAPHQL_SDL', 'ASYNC_API']);\n+            setServiceTypeList(['OAS2', 'OAS3', 'WSDL1', 'WSDL2', 'GRAPHQL_SDL', 'ASYNC_API']);\n+        }).catch(() => {\n+            Alert.error(intl.formatMessage({\n+                defaultMessage: 'Error while retrieving service and schema types',\n+                id: 'ServiceCatalog.Listing.Edit.error.retrieve.service.schema.types',\n+            }));\n+        });\n+    }, []);\n+\n+    const handleChange = (e) => {\n+        dispatch({ field: e.target.name, value: e.target.value });\n+    };\n+\n+    /**\n+     * Function for updating a given service entry\n+     */\n+    function doneEditing() {\n+        const updateServicePromise = ServiceCatalog.updateService(id, state);\n+        updateServicePromise.then(() => {\n+            Alert.info(intl.formatMessage({\n+                id: 'ServiceCatalog.Listing.Delete.service.updated.successfully',\n+                defaultMessage: 'Service updated successfully!',\n+            }));\n+            // Reload the services list\n+            getData();", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTczOTIyOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529739229", "bodyText": "I think this prop will prevent closing the dialog box with the escape key, Shall we allow this action ? it's ok to allow users to close the edit box if they don't want to make any change after looking at it or want to discard the changed if they want", "author": "tmkasun", "createdAt": "2020-11-24T17:08:27Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Edit.jsx", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer, useState, useEffect } from 'react';\n+import { FormattedMessage, injectIntl, useIntl } from 'react-intl';\n+import PropTypes from 'prop-types';\n+import Button from '@material-ui/core/Button';\n+import Icon from '@material-ui/core/Icon';\n+import Alert from 'AppComponents/Shared/Alert';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import Dialog from '@material-ui/core/Dialog';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import { makeStyles } from '@material-ui/core/styles';\n+import ServiceCatalog from 'AppData/ServiceCatalog';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+\n+const useStyles = makeStyles((theme) => ({\n+    mandatoryStar: {\n+        color: theme.palette.error.main,\n+        marginLeft: theme.spacing(0.1),\n+    },\n+}));\n+\n+/**\n+ * Reducer\n+ * @param {JSON} state State.\n+ * @returns {Promise} Promised state.\n+ */\n+function reducer(state, { field, value }) {\n+    switch (field) {\n+        case 'name':\n+            return { ...state, [field]: value, displayName: value };\n+        case 'serviceUrl':\n+            return { ...state, [field]: value };\n+        case 'definitionType':\n+            return { ...state, [field]: value };\n+        default:\n+            return state;\n+    }\n+}\n+\n+/**\n+* Service Catalog service edit\n+* @param {any} props Props for edit function.\n+* @returns {any} Returns the rendered UI for service edit.\n+*/\n+function Edit(props) {\n+    const intl = useIntl();\n+    const classes = useStyles();\n+    const { getData, dataRow } = props;\n+    const [open, setOpen] = useState(false);\n+    const [schemaTypeList, setSchemaTypeList] = useState([]);\n+    const [serviceTypeList, setServiceTypeList] = useState([]);\n+    const toggleOpen = () => {\n+        setOpen(!open);\n+    };\n+    const [initialState, setInitialState] = useState(dataRow);\n+\n+    const [state, dispatch] = useReducer(reducer, initialState);\n+\n+    const {\n+        id,\n+        name,\n+        serviceUrl,\n+        definitionType,\n+    } = state;\n+\n+    useEffect(() => {\n+        setInitialState(dataRow);\n+        const settingPromise = ServiceCatalog.getSettings();\n+        // Take from settings when backend API is implemented\n+        settingPromise.then(() => {\n+            setSchemaTypeList(['OAS2', 'OAS3', 'WSDL1', 'WSDL2', 'GRAPHQL_SDL', 'ASYNC_API']);\n+            setServiceTypeList(['OAS2', 'OAS3', 'WSDL1', 'WSDL2', 'GRAPHQL_SDL', 'ASYNC_API']);\n+        }).catch(() => {\n+            Alert.error(intl.formatMessage({\n+                defaultMessage: 'Error while retrieving service and schema types',\n+                id: 'ServiceCatalog.Listing.Edit.error.retrieve.service.schema.types',\n+            }));\n+        });\n+    }, []);\n+\n+    const handleChange = (e) => {\n+        dispatch({ field: e.target.name, value: e.target.value });\n+    };\n+\n+    /**\n+     * Function for updating a given service entry\n+     */\n+    function doneEditing() {\n+        const updateServicePromise = ServiceCatalog.updateService(id, state);\n+        updateServicePromise.then(() => {\n+            Alert.info(intl.formatMessage({\n+                id: 'ServiceCatalog.Listing.Delete.service.updated.successfully',\n+                defaultMessage: 'Service updated successfully!',\n+            }));\n+            // Reload the services list\n+            getData();\n+        }).catch(() => {\n+            Alert.error(intl.formatMessage({\n+                defaultMessage: 'Error while updating service',\n+                id: 'ServiceCatalog.Listing.Edit.error.update',\n+            }));\n+        });\n+        setOpen(!open);\n+    }\n+\n+    return (\n+        <>\n+            <Button onClick={toggleOpen}>\n+                <Icon>edit</Icon>\n+            </Button>\n+            <Dialog\n+                open={open}\n+                disableBackdropClick\n+                disableEscapeKeyDown", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0MTU1NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529741555", "bodyText": "Shall we use selector positioning to avoid misplaced dropdown positioning\nexample\nSelectProps={{\n                    MenuProps: {\n                        anchorOrigin: {\n                            vertical: \"bottom\",\n                            horizontal: \"left\"\n                        },\n                        getContentAnchorEl: null\n                    }\n                }}", "author": "tmkasun", "createdAt": "2020-11-24T17:11:56Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Edit.jsx", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer, useState, useEffect } from 'react';\n+import { FormattedMessage, injectIntl, useIntl } from 'react-intl';\n+import PropTypes from 'prop-types';\n+import Button from '@material-ui/core/Button';\n+import Icon from '@material-ui/core/Icon';\n+import Alert from 'AppComponents/Shared/Alert';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import Dialog from '@material-ui/core/Dialog';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import { makeStyles } from '@material-ui/core/styles';\n+import ServiceCatalog from 'AppData/ServiceCatalog';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+\n+const useStyles = makeStyles((theme) => ({\n+    mandatoryStar: {\n+        color: theme.palette.error.main,\n+        marginLeft: theme.spacing(0.1),\n+    },\n+}));\n+\n+/**\n+ * Reducer\n+ * @param {JSON} state State.\n+ * @returns {Promise} Promised state.\n+ */\n+function reducer(state, { field, value }) {\n+    switch (field) {\n+        case 'name':\n+            return { ...state, [field]: value, displayName: value };\n+        case 'serviceUrl':\n+            return { ...state, [field]: value };\n+        case 'definitionType':\n+            return { ...state, [field]: value };\n+        default:\n+            return state;\n+    }\n+}\n+\n+/**\n+* Service Catalog service edit\n+* @param {any} props Props for edit function.\n+* @returns {any} Returns the rendered UI for service edit.\n+*/\n+function Edit(props) {\n+    const intl = useIntl();\n+    const classes = useStyles();\n+    const { getData, dataRow } = props;\n+    const [open, setOpen] = useState(false);\n+    const [schemaTypeList, setSchemaTypeList] = useState([]);\n+    const [serviceTypeList, setServiceTypeList] = useState([]);\n+    const toggleOpen = () => {\n+        setOpen(!open);\n+    };\n+    const [initialState, setInitialState] = useState(dataRow);\n+\n+    const [state, dispatch] = useReducer(reducer, initialState);\n+\n+    const {\n+        id,\n+        name,\n+        serviceUrl,\n+        definitionType,\n+    } = state;\n+\n+    useEffect(() => {\n+        setInitialState(dataRow);\n+        const settingPromise = ServiceCatalog.getSettings();\n+        // Take from settings when backend API is implemented\n+        settingPromise.then(() => {\n+            setSchemaTypeList(['OAS2', 'OAS3', 'WSDL1', 'WSDL2', 'GRAPHQL_SDL', 'ASYNC_API']);\n+            setServiceTypeList(['OAS2', 'OAS3', 'WSDL1', 'WSDL2', 'GRAPHQL_SDL', 'ASYNC_API']);\n+        }).catch(() => {\n+            Alert.error(intl.formatMessage({\n+                defaultMessage: 'Error while retrieving service and schema types',\n+                id: 'ServiceCatalog.Listing.Edit.error.retrieve.service.schema.types',\n+            }));\n+        });\n+    }, []);\n+\n+    const handleChange = (e) => {\n+        dispatch({ field: e.target.name, value: e.target.value });\n+    };\n+\n+    /**\n+     * Function for updating a given service entry\n+     */\n+    function doneEditing() {\n+        const updateServicePromise = ServiceCatalog.updateService(id, state);\n+        updateServicePromise.then(() => {\n+            Alert.info(intl.formatMessage({\n+                id: 'ServiceCatalog.Listing.Delete.service.updated.successfully',\n+                defaultMessage: 'Service updated successfully!',\n+            }));\n+            // Reload the services list\n+            getData();\n+        }).catch(() => {\n+            Alert.error(intl.formatMessage({\n+                defaultMessage: 'Error while updating service',\n+                id: 'ServiceCatalog.Listing.Edit.error.update',\n+            }));\n+        });\n+        setOpen(!open);\n+    }\n+\n+    return (\n+        <>\n+            <Button onClick={toggleOpen}>\n+                <Icon>edit</Icon>\n+            </Button>\n+            <Dialog\n+                open={open}\n+                disableBackdropClick\n+                disableEscapeKeyDown\n+                maxWidth='sm'\n+                fullWidth\n+                aria-labelledby='confirmation-dialog-title'\n+            >\n+                <DialogTitle id='confirmation-dialog-title'>\n+                    <FormattedMessage\n+                        id='ServiceCatalog.Listing.Edit.service'\n+                        defaultMessage='Edit Service'\n+                    />\n+                </DialogTitle>\n+                <DialogContent>\n+                    <TextField\n+                        name='name'\n+                        label={(\n+                            <>\n+                                <FormattedMessage\n+                                    id='ServiceCatalog.Listing.Edit.service.name.label'\n+                                    defaultMessage='Service'\n+                                />\n+                                <sup className={classes.mandatoryStar}>*</sup>\n+                            </>\n+                        )}\n+                        value={name}\n+                        variant='outlined'\n+                        fullWidth\n+                        helperText={(\n+                            <FormattedMessage\n+                                id='ServiceCatalog.Listing.Edit.service.name.helper.text'\n+                                defaultMessage='Name of the service'\n+                            />\n+                        )}\n+                        onChange={handleChange}\n+                    />\n+                </DialogContent>\n+                <DialogContent>\n+                    <TextField\n+                        name='serviceUrl'\n+                        label={(\n+                            <>\n+                                <FormattedMessage\n+                                    id='ServiceCatalog.Listing.Edit.service.url.label'\n+                                    defaultMessage='Service URL'\n+                                />\n+                                <sup className={classes.mandatoryStar}>*</sup>\n+                            </>\n+                        )}\n+                        value={serviceUrl}\n+                        fullWidth\n+                        variant='outlined'\n+                        helperText={(\n+                            <FormattedMessage\n+                                id='ServiceCatalog.Listing.Edit.service.url.text'\n+                                defaultMessage='URL of the Service'\n+                            />\n+                        )}\n+                        onChange={handleChange}\n+                    />\n+                </DialogContent>\n+                <Grid container spacing={0}>\n+                    <Grid item md={6}>\n+                        <DialogContent>\n+                            <TextField\n+                                name='definitionType'\n+                                select", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0NDcxMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529744713", "bodyText": "I think having multiple <DialogContent>s inside a dialog is wrong, If you need to add a padding(spacing) between two elements use Grid spacing", "author": "tmkasun", "createdAt": "2020-11-24T17:16:36Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Edit.jsx", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer, useState, useEffect } from 'react';\n+import { FormattedMessage, injectIntl, useIntl } from 'react-intl';\n+import PropTypes from 'prop-types';\n+import Button from '@material-ui/core/Button';\n+import Icon from '@material-ui/core/Icon';\n+import Alert from 'AppComponents/Shared/Alert';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import Dialog from '@material-ui/core/Dialog';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import { makeStyles } from '@material-ui/core/styles';\n+import ServiceCatalog from 'AppData/ServiceCatalog';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+\n+const useStyles = makeStyles((theme) => ({\n+    mandatoryStar: {\n+        color: theme.palette.error.main,\n+        marginLeft: theme.spacing(0.1),\n+    },\n+}));\n+\n+/**\n+ * Reducer\n+ * @param {JSON} state State.\n+ * @returns {Promise} Promised state.\n+ */\n+function reducer(state, { field, value }) {\n+    switch (field) {\n+        case 'name':\n+            return { ...state, [field]: value, displayName: value };\n+        case 'serviceUrl':\n+            return { ...state, [field]: value };\n+        case 'definitionType':\n+            return { ...state, [field]: value };\n+        default:\n+            return state;\n+    }\n+}\n+\n+/**\n+* Service Catalog service edit\n+* @param {any} props Props for edit function.\n+* @returns {any} Returns the rendered UI for service edit.\n+*/\n+function Edit(props) {\n+    const intl = useIntl();\n+    const classes = useStyles();\n+    const { getData, dataRow } = props;\n+    const [open, setOpen] = useState(false);\n+    const [schemaTypeList, setSchemaTypeList] = useState([]);\n+    const [serviceTypeList, setServiceTypeList] = useState([]);\n+    const toggleOpen = () => {\n+        setOpen(!open);\n+    };\n+    const [initialState, setInitialState] = useState(dataRow);\n+\n+    const [state, dispatch] = useReducer(reducer, initialState);\n+\n+    const {\n+        id,\n+        name,\n+        serviceUrl,\n+        definitionType,\n+    } = state;\n+\n+    useEffect(() => {\n+        setInitialState(dataRow);\n+        const settingPromise = ServiceCatalog.getSettings();\n+        // Take from settings when backend API is implemented\n+        settingPromise.then(() => {\n+            setSchemaTypeList(['OAS2', 'OAS3', 'WSDL1', 'WSDL2', 'GRAPHQL_SDL', 'ASYNC_API']);\n+            setServiceTypeList(['OAS2', 'OAS3', 'WSDL1', 'WSDL2', 'GRAPHQL_SDL', 'ASYNC_API']);\n+        }).catch(() => {\n+            Alert.error(intl.formatMessage({\n+                defaultMessage: 'Error while retrieving service and schema types',\n+                id: 'ServiceCatalog.Listing.Edit.error.retrieve.service.schema.types',\n+            }));\n+        });\n+    }, []);\n+\n+    const handleChange = (e) => {\n+        dispatch({ field: e.target.name, value: e.target.value });\n+    };\n+\n+    /**\n+     * Function for updating a given service entry\n+     */\n+    function doneEditing() {\n+        const updateServicePromise = ServiceCatalog.updateService(id, state);\n+        updateServicePromise.then(() => {\n+            Alert.info(intl.formatMessage({\n+                id: 'ServiceCatalog.Listing.Delete.service.updated.successfully',\n+                defaultMessage: 'Service updated successfully!',\n+            }));\n+            // Reload the services list\n+            getData();\n+        }).catch(() => {\n+            Alert.error(intl.formatMessage({\n+                defaultMessage: 'Error while updating service',\n+                id: 'ServiceCatalog.Listing.Edit.error.update',\n+            }));\n+        });\n+        setOpen(!open);\n+    }\n+\n+    return (\n+        <>\n+            <Button onClick={toggleOpen}>\n+                <Icon>edit</Icon>\n+            </Button>\n+            <Dialog\n+                open={open}\n+                disableBackdropClick\n+                disableEscapeKeyDown\n+                maxWidth='sm'\n+                fullWidth\n+                aria-labelledby='confirmation-dialog-title'\n+            >\n+                <DialogTitle id='confirmation-dialog-title'>\n+                    <FormattedMessage\n+                        id='ServiceCatalog.Listing.Edit.service'\n+                        defaultMessage='Edit Service'\n+                    />\n+                </DialogTitle>\n+                <DialogContent>\n+                    <TextField\n+                        name='name'\n+                        label={(\n+                            <>\n+                                <FormattedMessage\n+                                    id='ServiceCatalog.Listing.Edit.service.name.label'\n+                                    defaultMessage='Service'\n+                                />\n+                                <sup className={classes.mandatoryStar}>*</sup>\n+                            </>\n+                        )}\n+                        value={name}\n+                        variant='outlined'\n+                        fullWidth\n+                        helperText={(\n+                            <FormattedMessage\n+                                id='ServiceCatalog.Listing.Edit.service.name.helper.text'\n+                                defaultMessage='Name of the service'\n+                            />\n+                        )}\n+                        onChange={handleChange}\n+                    />\n+                </DialogContent>\n+                <DialogContent>", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0NDkzMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529744933", "bodyText": "MUI Doc", "author": "tmkasun", "createdAt": "2020-11-24T17:16:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0NDcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ3NzUxNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r532477517", "bodyText": "Fixed with 07b6f26", "author": "tharikaGitHub", "createdAt": "2020-11-30T10:05:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0NDcxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0NTUwMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529745500", "bodyText": "injectIntl  \ud83d\ude03", "author": "tmkasun", "createdAt": "2020-11-24T17:17:49Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Edit.jsx", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer, useState, useEffect } from 'react';\n+import { FormattedMessage, injectIntl, useIntl } from 'react-intl';\n+import PropTypes from 'prop-types';\n+import Button from '@material-ui/core/Button';\n+import Icon from '@material-ui/core/Icon';\n+import Alert from 'AppComponents/Shared/Alert';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import Dialog from '@material-ui/core/Dialog';\n+import Grid from '@material-ui/core/Grid';\n+import TextField from '@material-ui/core/TextField';\n+import { makeStyles } from '@material-ui/core/styles';\n+import ServiceCatalog from 'AppData/ServiceCatalog';\n+import MenuItem from '@material-ui/core/MenuItem';\n+import ListItemText from '@material-ui/core/ListItemText';\n+\n+const useStyles = makeStyles((theme) => ({\n+    mandatoryStar: {\n+        color: theme.palette.error.main,\n+        marginLeft: theme.spacing(0.1),\n+    },\n+}));\n+\n+/**\n+ * Reducer\n+ * @param {JSON} state State.\n+ * @returns {Promise} Promised state.\n+ */\n+function reducer(state, { field, value }) {\n+    switch (field) {\n+        case 'name':\n+            return { ...state, [field]: value, displayName: value };\n+        case 'serviceUrl':\n+            return { ...state, [field]: value };\n+        case 'definitionType':\n+            return { ...state, [field]: value };\n+        default:\n+            return state;\n+    }\n+}\n+\n+/**\n+* Service Catalog service edit\n+* @param {any} props Props for edit function.\n+* @returns {any} Returns the rendered UI for service edit.\n+*/\n+function Edit(props) {\n+    const intl = useIntl();\n+    const classes = useStyles();\n+    const { getData, dataRow } = props;\n+    const [open, setOpen] = useState(false);\n+    const [schemaTypeList, setSchemaTypeList] = useState([]);\n+    const [serviceTypeList, setServiceTypeList] = useState([]);\n+    const toggleOpen = () => {\n+        setOpen(!open);\n+    };\n+    const [initialState, setInitialState] = useState(dataRow);\n+\n+    const [state, dispatch] = useReducer(reducer, initialState);\n+\n+    const {\n+        id,\n+        name,\n+        serviceUrl,\n+        definitionType,\n+    } = state;\n+\n+    useEffect(() => {\n+        setInitialState(dataRow);\n+        const settingPromise = ServiceCatalog.getSettings();\n+        // Take from settings when backend API is implemented\n+        settingPromise.then(() => {\n+            setSchemaTypeList(['OAS2', 'OAS3', 'WSDL1', 'WSDL2', 'GRAPHQL_SDL', 'ASYNC_API']);\n+            setServiceTypeList(['OAS2', 'OAS3', 'WSDL1', 'WSDL2', 'GRAPHQL_SDL', 'ASYNC_API']);\n+        }).catch(() => {\n+            Alert.error(intl.formatMessage({\n+                defaultMessage: 'Error while retrieving service and schema types',\n+                id: 'ServiceCatalog.Listing.Edit.error.retrieve.service.schema.types',\n+            }));\n+        });\n+    }, []);\n+\n+    const handleChange = (e) => {\n+        dispatch({ field: e.target.name, value: e.target.value });\n+    };\n+\n+    /**\n+     * Function for updating a given service entry\n+     */\n+    function doneEditing() {\n+        const updateServicePromise = ServiceCatalog.updateService(id, state);\n+        updateServicePromise.then(() => {\n+            Alert.info(intl.formatMessage({\n+                id: 'ServiceCatalog.Listing.Delete.service.updated.successfully',\n+                defaultMessage: 'Service updated successfully!',\n+            }));\n+            // Reload the services list\n+            getData();\n+        }).catch(() => {\n+            Alert.error(intl.formatMessage({\n+                defaultMessage: 'Error while updating service',\n+                id: 'ServiceCatalog.Listing.Edit.error.update',\n+            }));\n+        });\n+        setOpen(!open);\n+    }\n+\n+    return (\n+        <>\n+            <Button onClick={toggleOpen}>\n+                <Icon>edit</Icon>\n+            </Button>\n+            <Dialog\n+                open={open}\n+                disableBackdropClick\n+                disableEscapeKeyDown\n+                maxWidth='sm'\n+                fullWidth\n+                aria-labelledby='confirmation-dialog-title'\n+            >\n+                <DialogTitle id='confirmation-dialog-title'>\n+                    <FormattedMessage\n+                        id='ServiceCatalog.Listing.Edit.service'\n+                        defaultMessage='Edit Service'\n+                    />\n+                </DialogTitle>\n+                <DialogContent>\n+                    <TextField\n+                        name='name'\n+                        label={(\n+                            <>\n+                                <FormattedMessage\n+                                    id='ServiceCatalog.Listing.Edit.service.name.label'\n+                                    defaultMessage='Service'\n+                                />\n+                                <sup className={classes.mandatoryStar}>*</sup>\n+                            </>\n+                        )}\n+                        value={name}\n+                        variant='outlined'\n+                        fullWidth\n+                        helperText={(\n+                            <FormattedMessage\n+                                id='ServiceCatalog.Listing.Edit.service.name.helper.text'\n+                                defaultMessage='Name of the service'\n+                            />\n+                        )}\n+                        onChange={handleChange}\n+                    />\n+                </DialogContent>\n+                <DialogContent>\n+                    <TextField\n+                        name='serviceUrl'\n+                        label={(\n+                            <>\n+                                <FormattedMessage\n+                                    id='ServiceCatalog.Listing.Edit.service.url.label'\n+                                    defaultMessage='Service URL'\n+                                />\n+                                <sup className={classes.mandatoryStar}>*</sup>\n+                            </>\n+                        )}\n+                        value={serviceUrl}\n+                        fullWidth\n+                        variant='outlined'\n+                        helperText={(\n+                            <FormattedMessage\n+                                id='ServiceCatalog.Listing.Edit.service.url.text'\n+                                defaultMessage='URL of the Service'\n+                            />\n+                        )}\n+                        onChange={handleChange}\n+                    />\n+                </DialogContent>\n+                <Grid container spacing={0}>\n+                    <Grid item md={6}>\n+                        <DialogContent>\n+                            <TextField\n+                                name='definitionType'\n+                                select\n+                                label={(\n+                                    <>\n+                                        <FormattedMessage\n+                                            id='ServiceCatalog.Listing.Edit.service.type.label'\n+                                            defaultMessage='Service Type'\n+                                        />\n+                                        <sup className={classes.mandatoryStar}>*</sup>\n+                                    </>\n+                                )}\n+                                value={definitionType}\n+                                fullWidth\n+                                variant='outlined'\n+                                helperText={(\n+                                    <FormattedMessage\n+                                        id='ServiceCatalog.Listing.Edit.service.type.text'\n+                                        defaultMessage='Type of the Service'\n+                                    />\n+                                )}\n+                                onChange={handleChange}\n+                            >\n+                                {serviceTypeList.map((service) => (\n+                                    <MenuItem\n+                                        id={service}\n+                                        key={service}\n+                                        value={service}\n+                                    >\n+                                        <ListItemText primary={service} />\n+                                    </MenuItem>\n+                                ))}\n+                            </TextField>\n+                        </DialogContent>\n+                    </Grid>\n+                    <Grid item md={6}>\n+                        <DialogContent>\n+                            <TextField\n+                                name='definitionType'\n+                                select\n+                                label={(\n+                                    <>\n+                                        <FormattedMessage\n+                                            id='ServiceCatalog.Listing.Edit.schema.type.label'\n+                                            defaultMessage='Schema Type'\n+                                        />\n+                                        <sup className={classes.mandatoryStar}>*</sup>\n+                                    </>\n+                                )}\n+                                value={definitionType}\n+                                fullWidth\n+                                variant='outlined'\n+                                helperText={(\n+                                    <FormattedMessage\n+                                        id='ServiceCatalog.Listing.Edit.schema.type.text'\n+                                        defaultMessage='Schema Type of the Service'\n+                                    />\n+                                )}\n+                                onChange={handleChange}\n+                            >\n+                                {schemaTypeList.map((schema) => (\n+                                    <MenuItem\n+                                        id={schema}\n+                                        key={schema}\n+                                        value={schema}\n+                                    >\n+                                        <ListItemText primary={schema} />\n+                                    </MenuItem>\n+                                ))}\n+                            </TextField>\n+                        </DialogContent>\n+                    </Grid>\n+                </Grid>\n+                <DialogActions>\n+                    <Button onClick={toggleOpen} color='primary'>\n+                        <FormattedMessage\n+                            id='ServiceCatalog.Listing.Edit.cancel.btn'\n+                            defaultMessage='Cancel'\n+                        />\n+                    </Button>\n+                    <Button\n+                        onClick={doneEditing}\n+                        color='primary'\n+                        variant='contained'\n+                    >\n+                        <FormattedMessage\n+                            id='ServiceCatalog.Listing.Edit.update.btn'\n+                            defaultMessage='Update'\n+                        />\n+                    </Button>\n+                </DialogActions>\n+            </Dialog>\n+        </>\n+    );\n+}\n+Edit.propTypes = {\n+    classes: PropTypes.shape({}).isRequired,\n+    dataRow: PropTypes.shape({\n+        id: PropTypes.string.isRequired,\n+        displayName: PropTypes.string.isRequired,\n+        name: PropTypes.string.isRequired,\n+        definitionType: PropTypes.string.isRequired,\n+        serviceUrl: PropTypes.string.isRequired,\n+    }).isRequired,\n+    getData: PropTypes.shape({}).isRequired,\n+    intl: PropTypes.shape({}).isRequired,\n+};\n+\n+export default injectIntl(Edit);", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0OTI0Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529749247", "bodyText": "Shall we move this styles callback to a separate file outside the component , I'm referring to the object that we pass to the makeStyles higher-order hook\nI:e\ntheme) => ({\n    contentInside: {\n        padding: theme.spacing(3),\n        paddingTop: theme.spacing(2),\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3),\n        '& > div[class^=\"MuiPaper-root-\"]': {\n            boxShadow: 'none',\n            backgroundColor: 'transparent',\n        },\n    },\n    serviceNameLink: {\n        display: 'flex',\n        alignItems: 'center',\n        '& span': {\n            marginLeft: theme.spacing(),\n        },\n        '& span.material-icons': {\n            marginLeft: 0,\n            color: '#444',\n            marginRight: theme.spacing(),\n            fontSize: 18,\n        },\n    },\n    buttonStyle: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        marginRight: theme.spacing(2),\n    },\n    textStyle: {\n        fontSize: 11,\n    },\n    content: {\n        display: 'flex',\n        flex: 1,\n        flexDirection: 'column',\n        paddingBottom: theme.spacing(3),\n    },\n    helpDiv: {\n        marginTop: theme.spacing(0.5),\n    },\n    helpIcon: {\n        fontSize: 20,\n    },\n    horizontalDivider: {\n        marginTop: theme.spacing(3),\n        borderTop: '0px',\n        width: '100%',\n    },\n    serviceNameStyle: {\n        color: theme.palette.primary.main,\n    },\n    tableStyle: {\n        marginTop: theme.spacing(4),\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        '& > td[class^=MUIDataTableBodyCell-cellHide-]': {\n            display: 'none',\n        },\n        '& .MUIDataTableBodyCell-cellHide-793': {\n            display: 'none',\n        },\n        '& td': {\n            wordBreak: 'break-word',\n        },\n        '& th': {\n            minWidth: '150px',\n        },\n    },\n}\nThere are multiple benefits with this\n\nIt would reduce the number of lines in the component \ud83d\ude09\nIn case someone needs to customize the styling of this component they could override just the styles .js file and get it done, Just like overriding a css. Fewer conflicts in that way\nIf later (after a release) someone wants to pass callback function to makeStyles call then they could do it with overriding the styles js no need to override the entire component", "author": "tmkasun", "createdAt": "2020-11-24T17:23:22Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Onboarding.jsx", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React from 'react';\n+import { FormattedMessage } from 'react-intl';\n+import { makeStyles } from '@material-ui/core/styles';\n+import Typography from '@material-ui/core/Typography';\n+import OpenInNewIcon from '@material-ui/icons/OpenInNew';\n+import Grid from '@material-ui/core/Grid';\n+import Button from '@material-ui/core/Button';\n+import Help from '@material-ui/icons/Help';\n+import Tooltip from '@material-ui/core/Tooltip';\n+import Configurations from 'Config';\n+\n+const useStyles = makeStyles((theme) => ({\n+    root: {", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1MDczOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529750738", "bodyText": "Same as below, Let's move this to a separate styles file", "author": "tmkasun", "createdAt": "2020-11-24T17:25:28Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Listing.jsx", "diffHunk": "@@ -17,22 +17,62 @@\n  */\n \n import React from 'react';\n+import { Link } from 'react-router-dom';\n import PropTypes from 'prop-types';\n-import { FormattedMessage, injectIntl } from 'react-intl';\n import { withStyles } from '@material-ui/core/styles';\n+import Button from '@material-ui/core/Button';\n+import Box from '@material-ui/core/Box';\n import Typography from '@material-ui/core/Typography';\n+import MUIDataTable from 'mui-datatables';\n+import { FormattedMessage, injectIntl } from 'react-intl';\n+import { Progress } from 'AppComponents/Shared';\n+import ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\n+import Alert from 'AppComponents/Shared/Alert';\n+import ServiceCatalog from 'AppData/ServiceCatalog';\n+import Onboarding from 'AppComponents/ServiceCatalog/Listing/Onboarding';\n+import Delete from 'AppComponents/ServiceCatalog/Listing/Delete';\n+import Edit from 'AppComponents/ServiceCatalog/Listing/Edit';\n import Grid from '@material-ui/core/Grid';\n-import Button from '@material-ui/core/Button';\n import Help from '@material-ui/icons/Help';\n import Tooltip from '@material-ui/core/Tooltip';\n-import Configurations from 'Config';\n \n const styles = (theme) => ({", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1MjE0Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529752143", "bodyText": "\ud83d\ude28  no class components please, Shall we make this a function component.", "author": "tmkasun", "createdAt": "2020-11-24T17:27:27Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Listing.jsx", "diffHunk": "@@ -41,152 +81,272 @@ const styles = (theme) => ({\n         fontSize: 20,\n     },\n     horizontalDivider: {\n-        marginTop: theme.spacing(4),\n+        marginTop: theme.spacing(3),\n         borderTop: '0px',\n         width: '100%',\n     },\n-    preview: {\n-        height: theme.spacing(18),\n-        marginBottom: theme.spacing(5),\n-        marginTop: theme.spacing(10),\n-    },\n-    spacing: {\n-        paddingTop: theme.spacing(5),\n-        paddingBottom: theme.spacing(5),\n-        paddingLeft: theme.spacing(10),\n-        paddingRight: theme.spacing(10),\n+    serviceNameStyle: {\n+        color: theme.palette.primary.main,\n     },\n-    buttonStyle: {\n-        color: theme.custom.buttonText,\n-        borderColor: theme.custom.buttonBorder,\n+    tableStyle: {\n+        marginTop: theme.spacing(4),\n+        marginLeft: 'auto',\n+        marginRight: 'auto',\n+        '& > td[class^=MUIDataTableBodyCell-cellHide-]': {\n+            display: 'none',\n+        },\n+        '& .MUIDataTableBodyCell-cellHide-793': {\n+            display: 'none',\n+        },\n+        '& td': {\n+            wordBreak: 'break-word',\n+        },\n+        '& th': {\n+            minWidth: '150px',\n+        },\n     },\n });\n \n /**\n- * Service Catalog On boarding\n+ * Listing for service catalog entries\n  *\n- * @param {*} props\n- * @returns\n+ * @class Listing\n+ * @extends {React.Component}\n  */\n-function Listing(props) {\n-    const {\n-        classes,\n-    } = props;\n+class Listing extends React.Component {", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1MzI3NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529753274", "bodyText": "This is the problem with class components, wrapper hell \ud83d\ude22\n\n. . . If you look at a typical React application in React DevTools, you will likely find a \u201cwrapper hell\u201d of components surrounded by layers of providers, consumers, higher-order components, render props, and other abstractions.\n\n~source", "author": "tmkasun", "createdAt": "2020-11-24T17:29:11Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Listing.jsx", "diffHunk": "@@ -41,152 +81,272 @@ const styles = (theme) => ({\n         fontSize: 20,\n     },\n     horizontalDivider: {\n-        marginTop: theme.spacing(4),\n+        marginTop: theme.spacing(3),\n         borderTop: '0px',\n         width: '100%',\n     },\n-    preview: {\n-        height: theme.spacing(18),\n-        marginBottom: theme.spacing(5),\n-        marginTop: theme.spacing(10),\n-    },\n-    spacing: {\n-        paddingTop: theme.spacing(5),\n-        paddingBottom: theme.spacing(5),\n-        paddingLeft: theme.spacing(10),\n-        paddingRight: theme.spacing(10),\n+    serviceNameStyle: {\n+        color: theme.palette.primary.main,\n     },\n-    buttonStyle: {\n-        color: theme.custom.buttonText,\n-        borderColor: theme.custom.buttonBorder,\n+    tableStyle: {\n+        marginTop: theme.spacing(4),\n+        marginLeft: 'auto',\n+        marginRight: 'auto',\n+        '& > td[class^=MUIDataTableBodyCell-cellHide-]': {\n+            display: 'none',\n+        },\n+        '& .MUIDataTableBodyCell-cellHide-793': {\n+            display: 'none',\n+        },\n+        '& td': {\n+            wordBreak: 'break-word',\n+        },\n+        '& th': {\n+            minWidth: '150px',\n+        },\n     },\n });\n \n /**\n- * Service Catalog On boarding\n+ * Listing for service catalog entries\n  *\n- * @param {*} props\n- * @returns\n+ * @class Listing\n+ * @extends {React.Component}\n  */\n-function Listing(props) {\n-    const {\n-        classes,\n-    } = props;\n+class Listing extends React.Component {\n+    /**\n+     * @inheritdoc\n+     * @param {*} props properties\n+     * @memberof Listing\n+     */\n+    constructor(props) {\n+        super(props);\n+        this.state = {\n+            serviceList: null,\n+            notFound: true,\n+            loading: true,\n+        };\n+    }\n+\n+    componentDidMount() {\n+        this.getData();\n+    }\n \n-    return (\n-        <div className={classes.root}>\n-            <Grid container direction='row' spacing={10}>\n-                <Grid item md={11}>\n-                    <Typography className={classes.heading} variant='h4'>\n-                        <FormattedMessage\n-                            id='ServiceCatalog.Listing.Listing.heading'\n-                            defaultMessage='Service Catalog'\n-                        />\n-                    </Typography>\n-                </Grid>\n-                <Grid item md={1}>\n-                    <Tooltip\n-                        placement='right'\n-                        title={(\n-                            <FormattedMessage\n-                                id='ServiceCatalog.Listing.Listing.help.tooltip'\n-                                defaultMessage='The Service Catalog enables API-first Integration'\n-                            />\n-                        )}\n-                    >\n-                        <div className={classes.helpDiv}>\n-                            <Help className={classes.helpIcon} />\n+    // Get Services\n+    getData = () => {\n+        const { intl } = this.props;\n+        const promisedServices = ServiceCatalog.searchServices();\n+        promisedServices.then((data) => {\n+            const { body } = data;\n+            const { list } = body;\n+            this.setState({ serviceList: list, notFound: false });\n+        }).catch(() => {\n+            Alert.error(intl.formatMessage({\n+                defaultMessage: 'Error While Loading Services',\n+                id: 'ServiceCatalog.Listing.Listing.error.loading',\n+            }));\n+        }).finally(() => {\n+            this.setState({ loading: false });\n+        });\n+    };\n+\n+    /**\n+     *\n+     *\n+     * @returns\n+     * @memberof Listing\n+     */\n+    render() {\n+        const {\n+            intl, classes,\n+        } = this.props;\n+        const { loading } = this.state;\n+        const columns = [\n+            {\n+                name: 'id',\n+                options: {\n+                    display: 'excluded',\n+                    filter: false,\n+                },\n+            },\n+            {\n+                name: 'name',\n+                label: intl.formatMessage({\n+                    id: 'ServiceCatalog.Listing.Listing.name',\n+                    defaultMessage: 'Service',\n+                }),\n+                options: {\n+                    customBodyRender: (value, tableMeta, updateValue, tableViewObj = this) => {\n+                        if (tableMeta.rowData) {\n+                            const artifact = tableViewObj.state.serviceList[tableMeta.rowIndex];\n+                            const serviceName = tableMeta.rowData[1];\n+                            if (artifact) {\n+                                return (\n+                                    <div className={classes.serviceNameStyle}>\n+                                        <span>{serviceName}</span>\n+                                    </div>\n+                                );\n+                            }\n+                        }\n+                        return <span />;\n+                    },\n+                    sort: false,\n+                    filter: false,\n+                },\n+            },\n+            {\n+                name: 'serviceUrl',\n+                label: intl.formatMessage({\n+                    id: 'ServiceCatalog.Listing.Listing.service.url',\n+                    defaultMessage: 'Service URL',\n+                }),\n+                options: {\n+                    sort: false,\n+                },\n+            },\n+            {\n+                name: 'definitionType',\n+                label: intl.formatMessage({\n+                    id: 'ServiceCatalog.Listing.Listing.service.type',\n+                    defaultMessage: 'Service Type',\n+                }),\n+                options: {\n+                    sort: false,\n+                },\n+            },\n+            {\n+                name: 'definitionType',\n+                label: intl.formatMessage({\n+                    id: 'ServiceCatalog.Listing.Listing.schema.type',\n+                    defaultMessage: 'Schema Type',\n+                }),\n+                options: {\n+                    sort: false,\n+                },\n+            },\n+            {\n+                name: 'version',\n+                label: intl.formatMessage({\n+                    id: 'ServiceCatalog.Listing.Listing.version',\n+                    defaultMessage: 'Version',\n+                }),\n+                options: {\n+                    sort: false,\n+                },\n+            },\n+            {\n+                name: 'usage',\n+                label: intl.formatMessage({\n+                    id: 'ServiceCatalog.Listing.Listing.usage',\n+                    defaultMessage: 'No. Of APIs',\n+                }),\n+                options: {\n+                    sort: false,\n+                },\n+            },\n+            {\n+                options: {\n+                    customBodyRender: (value, tableMeta, updateValue, tableViewObj = this) => {\n+                        if (tableMeta.rowData) {\n+                            const dataRow = tableViewObj.state.serviceList[tableMeta.rowIndex];\n+                            return (\n+                                <Box display='flex' flexDirection='row'>\n+                                    <Link>\n+                                        <Button color='primary' variant='outlined' className={classes.buttonStyle}>\n+                                            <Typography className={classes.textStyle}>\n+                                                <FormattedMessage\n+                                                    id='ServiceCatalog.Listing.Listing.create.api'\n+                                                    defaultMessage='Create API'\n+                                                />\n+                                            </Typography>\n+                                        </Button>\n+                                    </Link>\n+                                    <Edit dataRow={dataRow} getData={this.getData} />\n+                                    <Delete serviceName={dataRow.name} serviceId={dataRow.id} getData={this.getData} />\n+                                </Box>\n+                            );\n+                        }\n+                        return false;\n+                    },\n+                    sort: false,\n+                    name: 'actions',\n+                    label: '',\n+                },\n+            },\n+        ];\n+        const {\n+            serviceList, notFound,\n+        } = this.state;\n+        const options = {\n+            filterType: 'dropdown',\n+            selectableRows: 'none',\n+            title: false,\n+            filter: false,\n+            sort: false,\n+            print: false,\n+            download: false,\n+            viewColumns: false,\n+            customToolbar: false,\n+            rowsPerPageOptions: [5, 10, 25, 50, 100],\n+        };\n+        if (loading || !serviceList) {\n+            return <Progress per={90} message='Loading Services ...' />;\n+        }\n+        if (notFound) {\n+            return <ResourceNotFound />;\n+        }\n+        if (serviceList.length === 0) {\n+            return (\n+                <Onboarding />\n+            );\n+        }\n+\n+        return (\n+            <>\n+                <div className={classes.content}>\n+                    <div className={classes.contentInside}>\n+                        <Grid container direction='row' spacing={10}>\n+                            <Grid item md={11}>\n+                                <Typography className={classes.heading} variant='h4'>\n+                                    <FormattedMessage\n+                                        id='ServiceCatalog.Listing.Listing.heading'\n+                                        defaultMessage='Service Catalog'\n+                                    />\n+                                </Typography>\n+                            </Grid>\n+                            <Grid item md={1}>\n+                                <Tooltip\n+                                    placement='right'\n+                                    title={(\n+                                        <FormattedMessage\n+                                            id='ServiceCatalog.Listing.Listing.help.tooltip'\n+                                            defaultMessage='The Service Catalog enables API-first Integration'\n+                                        />\n+                                    )}\n+                                >\n+                                    <div className={classes.helpDiv}>\n+                                        <Help className={classes.helpIcon} />\n+                                    </div>\n+                                </Tooltip>\n+                            </Grid>\n+                        </Grid>\n+                        <hr className={classes.horizontalDivider} />\n+                        <div className={classes.tableStyle}>\n+                            <MUIDataTable title='' data={serviceList} columns={columns} options={options} />\n                         </div>\n-                    </Tooltip>\n-                </Grid>\n-            </Grid>\n-            <hr className={classes.horizontalDivider} />\n-            <Grid container direction='row'>\n-                <Grid item md={2} />\n-                <Grid item md={4}>\n-                    <div align='center'>\n-                        <img\n-                            className={classes.preview}\n-                            src={Configurations.app.context + '/site/public/images/wso2-intg-service-icon.svg'}\n-                            alt='Get Started'\n-                        />\n-                    </div>\n-                    <Typography className={classes.heading} variant='h4' align='center'>\n-                        <FormattedMessage\n-                            id='ServiceCatalog.Listing.Listing.Heading1'\n-                            defaultMessage='Learn to write your first'\n-                        />\n-                    </Typography>\n-                    <Typography align='center'>\n-                        <FormattedMessage\n-                            id='ServiceCatalog.Listing.Listing.Heading1.subHeading'\n-                            defaultMessage='Integration Service'\n-                        />\n-                    </Typography>\n-                    <Typography align='center' className={classes.spacing}>\n-                        <FormattedMessage\n-                            id='ServiceCatalog.Listing.Listing.description1'\n-                            defaultMessage={'From creating and publishing an API to securing, rate-limiting, addresses'\n-                            + ' all aspects of API Management.'}\n-                        />\n-                    </Typography>\n-                    <div align='center'>\n-                        <Button className={classes.buttonStyle} variant='outlined'>\n-                            <Typography className={classes.heading} variant='h6'>\n-                                <FormattedMessage\n-                                    id='ServiceCatalog.Listing.Listing.get.started'\n-                                    defaultMessage='Get Started'\n-                                />\n-                            </Typography>\n-                        </Button>\n                     </div>\n-                </Grid>\n-                <Grid item md={4}>\n-                    <div align='center'>\n-                        <img\n-                            className={classes.preview}\n-                            src={Configurations.app.context + '/site/public/images/wso2-intg-service-sample-icon.svg'}\n-                            alt='Add Sample Service'\n-                        />\n-                    </div>\n-                    <Typography className={classes.heading} variant='h4' align='center'>\n-                        <FormattedMessage\n-                            id='ServiceCatalog.Listing.Listing.Heading2'\n-                            defaultMessage='Add a sample'\n-                        />\n-                    </Typography>\n-                    <Typography align='center'>\n-                        <FormattedMessage\n-                            id='ServiceCatalog.Listing.Listing.Heading2.subHeading'\n-                            defaultMessage='Integration Service'\n-                        />\n-                    </Typography>\n-                    <Typography align='center' className={classes.spacing}>\n-                        <FormattedMessage\n-                            id='ServiceCatalog.Listing.Listing.description2'\n-                            defaultMessage={'From creating and publishing an API to securing, rate-limiting, addresses'\n-                            + ' all aspects of API Management.'}\n-                        />\n-                    </Typography>\n-                    <div align='center'>\n-                        <Button className={classes.buttonStyle} variant='outlined'>\n-                            <Typography className={classes.heading} variant='h6'>\n-                                <FormattedMessage\n-                                    id='ServiceCatalog.Listing.Listing.add.sample.service'\n-                                    defaultMessage='Add Sample Service'\n-                                />\n-                            </Typography>\n-                        </Button>\n-                    </div>\n-                </Grid>\n-                <Grid item md={2} />\n-            </Grid>\n-        </div>\n-    );\n+                </div>\n+            </>\n+        );\n+    }\n }\n \n+export default injectIntl(withStyles(styles, { withTheme: true })(Listing));", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1NTAyOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529755028", "bodyText": "this last then callback has no effect at all \ud83d\ude03  , I mean this is equal passing just promisedServices without attaching that then callback", "author": "tmkasun", "createdAt": "2020-11-24T17:31:45Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/data/ServiceCatalog.js", "diffHunk": "@@ -98,7 +98,7 @@ class ServiceCatalog {\n             // return client.apis['Services'].searchServices();\n             return MockResponses.searchServices();\n         });\n-        return promisedServices.then(response => response.body);\n+        return promisedServices.then(response => response);", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1NjQzMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9407#discussion_r529756433", "bodyText": "Let's try to avoid this library when the table view is quite simple, Otherwise, this adds unnecessary complexity to code", "author": "tmkasun", "createdAt": "2020-11-24T17:34:01Z", "path": "features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/ServiceCatalog/Listing/Listing.jsx", "diffHunk": "@@ -17,22 +17,62 @@\n  */\n \n import React from 'react';\n+import { Link } from 'react-router-dom';\n import PropTypes from 'prop-types';\n-import { FormattedMessage, injectIntl } from 'react-intl';\n import { withStyles } from '@material-ui/core/styles';\n+import Button from '@material-ui/core/Button';\n+import Box from '@material-ui/core/Box';\n import Typography from '@material-ui/core/Typography';\n+import MUIDataTable from 'mui-datatables';", "originalCommit": "32caaccdb22c1ae1cf4f0dae6f492b829e873fbd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f2bc6f4dcdee49172b13624c8ee8c3c38b5a7ca2", "url": "https://github.com/wso2/carbon-apimgt/commit/f2bc6f4dcdee49172b13624c8ee8c3c38b5a7ca2", "message": "Service Catalog Listing UI Implementation Part 1", "committedDate": "2020-11-25T05:47:04Z", "type": "commit"}, {"oid": "2355af98adc2fef2b287f18fb11654fedd478a8e", "url": "https://github.com/wso2/carbon-apimgt/commit/2355af98adc2fef2b287f18fb11654fedd478a8e", "message": "Add review fixes for onboarding dashboard", "committedDate": "2020-11-25T05:47:04Z", "type": "commit"}, {"oid": "d1e2c0259828535558aaa663856a5d0b93da931b", "url": "https://github.com/wso2/carbon-apimgt/commit/d1e2c0259828535558aaa663856a5d0b93da931b", "message": "Add listing page fixes for service catalog", "committedDate": "2020-11-25T05:47:04Z", "type": "commit"}, {"oid": "3be1f949ce53ef417fd218e74793076e34daf21c", "url": "https://github.com/wso2/carbon-apimgt/commit/3be1f949ce53ef417fd218e74793076e34daf21c", "message": "Add delete functionality to service listing page", "committedDate": "2020-11-25T05:47:04Z", "type": "commit"}, {"oid": "85b05c89ab7422288e3872897fbf8f590db20345", "url": "https://github.com/wso2/carbon-apimgt/commit/85b05c89ab7422288e3872897fbf8f590db20345", "message": "Change table styling", "committedDate": "2020-11-25T05:47:04Z", "type": "commit"}, {"oid": "1b482ebc154c3b3e5623101465b731efb8688ffb", "url": "https://github.com/wso2/carbon-apimgt/commit/1b482ebc154c3b3e5623101465b731efb8688ffb", "message": "Change search functionality in listing UI", "committedDate": "2020-11-25T05:47:04Z", "type": "commit"}, {"oid": "247d98bebc13ea6f296a80d8995c9a09a7f2b4d6", "url": "https://github.com/wso2/carbon-apimgt/commit/247d98bebc13ea6f296a80d8995c9a09a7f2b4d6", "message": "Add service editting functionality for service catalog", "committedDate": "2020-11-25T05:47:04Z", "type": "commit"}, {"oid": "0eaf55193927cb2105cee974ae9e0742500542c2", "url": "https://github.com/wso2/carbon-apimgt/commit/0eaf55193927cb2105cee974ae9e0742500542c2", "message": "Add form validation for edit UI", "committedDate": "2020-11-25T05:47:04Z", "type": "commit"}, {"oid": "0eaf55193927cb2105cee974ae9e0742500542c2", "url": "https://github.com/wso2/carbon-apimgt/commit/0eaf55193927cb2105cee974ae9e0742500542c2", "message": "Add form validation for edit UI", "committedDate": "2020-11-25T05:47:04Z", "type": "forcePushed"}, {"oid": "a9d9f33a89aa8d840fac45a19758fa7270787f7c", "url": "https://github.com/wso2/carbon-apimgt/commit/a9d9f33a89aa8d840fac45a19758fa7270787f7c", "message": "Remove injectIntl calls", "committedDate": "2020-11-25T06:50:53Z", "type": "commit"}, {"oid": "56c6c22eb83606fd6816a62432d941fba1aceafb", "url": "https://github.com/wso2/carbon-apimgt/commit/56c6c22eb83606fd6816a62432d941fba1aceafb", "message": "Move onEdit and onDelete calls to parent component", "committedDate": "2020-11-25T09:56:38Z", "type": "commit"}, {"oid": "d8b527be8560a9a77836a6779d10a25200879647", "url": "https://github.com/wso2/carbon-apimgt/commit/d8b527be8560a9a77836a6779d10a25200879647", "message": "Remove initial state from Edit view", "committedDate": "2020-11-25T10:07:00Z", "type": "commit"}, {"oid": "532eb141892926576a6141bd54892204ae4af1b1", "url": "https://github.com/wso2/carbon-apimgt/commit/532eb141892926576a6141bd54892204ae4af1b1", "message": "Add review fixes", "committedDate": "2020-11-25T10:59:23Z", "type": "commit"}, {"oid": "9306aa9f2c49628eb9971450e3b4cf051bab017e", "url": "https://github.com/wso2/carbon-apimgt/commit/9306aa9f2c49628eb9971450e3b4cf051bab017e", "message": "Add display name field to the edit dialog", "committedDate": "2020-11-26T10:00:49Z", "type": "commit"}, {"oid": "03a3e5c2909b753763fcde4c99a23ab11b2db9f1", "url": "https://github.com/wso2/carbon-apimgt/commit/03a3e5c2909b753763fcde4c99a23ab11b2db9f1", "message": "Update edit window", "committedDate": "2020-11-27T06:33:12Z", "type": "commit"}, {"oid": "07b6f26cf83d2651ab4ce4e82968a338e75952cd", "url": "https://github.com/wso2/carbon-apimgt/commit/07b6f26cf83d2651ab4ce4e82968a338e75952cd", "message": "Remove multiple DialogContent elements", "committedDate": "2020-11-30T10:04:24Z", "type": "commit"}, {"oid": "710a6cf0f9ce29f30959c1c8b5d8393d32c848c4", "url": "https://github.com/wso2/carbon-apimgt/commit/710a6cf0f9ce29f30959c1c8b5d8393d32c848c4", "message": "Change columns of the listing table", "committedDate": "2020-11-30T10:23:21Z", "type": "commit"}, {"oid": "e51a3e330d01a9de4bcad60d5a882254306d58ca", "url": "https://github.com/wso2/carbon-apimgt/commit/e51a3e330d01a9de4bcad60d5a882254306d58ca", "message": "Change Listing class component to a functional component", "committedDate": "2020-11-30T12:52:40Z", "type": "commit"}]}