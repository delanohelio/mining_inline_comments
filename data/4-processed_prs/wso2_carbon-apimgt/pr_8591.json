{"pr_number": 8591, "pr_title": "[Admin Portal Revamp] Bot Detection - Email Configuration", "pr_createdAt": "2020-05-28T07:22:31Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8591", "timeline": [{"oid": "6fbb8397d7bd9ee765531d8a98359df506de7f6e", "url": "https://github.com/wso2/carbon-apimgt/commit/6fbb8397d7bd9ee765531d8a98359df506de7f6e", "message": "Email configuration for bot detection alert", "committedDate": "2020-05-27T04:46:09Z", "type": "commit"}, {"oid": "41b051b387cde97ab81e5a0a9c7e43253eed53f6", "url": "https://github.com/wso2/carbon-apimgt/commit/41b051b387cde97ab81e5a0a9c7e43253eed53f6", "message": "Merge branch 'admin_portal_revamp' of https://github.com/wso2/carbon-apimgt into admin-portal-conv-email-config", "committedDate": "2020-05-28T07:08:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzMTgwNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8591#discussion_r432031807", "bodyText": "I think it's not worth having a reducer, just to keep a single state variable (name='email'), Shall we use useState instead? It will make the code cleaner WDYT ? \ud83d\ude03", "author": "tmkasun", "createdAt": "2020-05-28T18:18:49Z", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin_new/source/src/app/components/BotDetection/EmailConfig/AddEmail.jsx", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer } from 'react';\n+import API from 'AppData/api';\n+import PropTypes from 'prop-types';\n+import Joi from '@hapi/joi';\n+import TextField from '@material-ui/core/TextField';\n+import DialogContentText from '@material-ui/core/DialogContentText';\n+import { FormattedMessage } from 'react-intl';\n+import { makeStyles } from '@material-ui/core/styles';\n+import FormDialogBase from 'AppComponents/AdminPages/Addons/FormDialogBase';\n+import Alert from 'AppComponents/Shared/Alert';\n+\n+const useStyles = makeStyles((theme) => ({\n+    error: {\n+        color: theme.palette.error.dark,\n+    },\n+}));\n+\n+/**\n+ * Reducer\n+ * @param {JSON} state State\n+ * @returns {Promise}.\n+ */\n+function reducer(state, { field, value }) {\n+    return {\n+        ...state,\n+        [field]: value,\n+    };\n+}\n+\n+/**\n+ * Render a pop-up dialog to add an email address\n+ * @param {JSON} props .\n+ * @returns {JSX}.\n+ */\n+function AddEmail(props) {\n+    const {\n+        updateList, icon, triggerButtonText, title, emailList,\n+    } = props;\n+    const classes = useStyles();\n+    const initialState = {\n+        email: '',\n+\n+    };\n+\n+    const [state, dispatch] = useReducer(reducer, initialState);", "originalCommit": "41b051b387cde97ab81e5a0a9c7e43253eed53f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzMjQ4NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8591#discussion_r432032485", "bodyText": "no dispatchers, not reducers simple\nconst [email, setEmail] = useState();\n\nand use the setEmail function in onChange handler", "author": "tmkasun", "createdAt": "2020-05-28T18:20:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzMTgwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA0NzkyOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8591#discussion_r433047928", "bodyText": "Fixed with commit: 814f599", "author": "chathuranga95", "createdAt": "2020-06-01T05:30:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzMTgwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzMzA5NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8591#discussion_r432033094", "bodyText": "Why we dispatch an empty event and empty value here ???\ndispatch('', '');\n\nto clear the things up ? if so why ?", "author": "tmkasun", "createdAt": "2020-05-28T18:21:10Z", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin_new/source/src/app/components/BotDetection/EmailConfig/AddEmail.jsx", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer } from 'react';\n+import API from 'AppData/api';\n+import PropTypes from 'prop-types';\n+import Joi from '@hapi/joi';\n+import TextField from '@material-ui/core/TextField';\n+import DialogContentText from '@material-ui/core/DialogContentText';\n+import { FormattedMessage } from 'react-intl';\n+import { makeStyles } from '@material-ui/core/styles';\n+import FormDialogBase from 'AppComponents/AdminPages/Addons/FormDialogBase';\n+import Alert from 'AppComponents/Shared/Alert';\n+\n+const useStyles = makeStyles((theme) => ({\n+    error: {\n+        color: theme.palette.error.dark,\n+    },\n+}));\n+\n+/**\n+ * Reducer\n+ * @param {JSON} state State\n+ * @returns {Promise}.\n+ */\n+function reducer(state, { field, value }) {\n+    return {\n+        ...state,\n+        [field]: value,\n+    };\n+}\n+\n+/**\n+ * Render a pop-up dialog to add an email address\n+ * @param {JSON} props .\n+ * @returns {JSX}.\n+ */\n+function AddEmail(props) {\n+    const {\n+        updateList, icon, triggerButtonText, title, emailList,\n+    } = props;\n+    const classes = useStyles();\n+    const initialState = {\n+        email: '',\n+\n+    };\n+\n+    const [state, dispatch] = useReducer(reducer, initialState);\n+    const { email } = state;\n+\n+    const onChange = (e) => {\n+        dispatch({ field: e.target.name, value: e.target.value });\n+    };\n+\n+    const validateEmail = (value) => {\n+        const schema = Joi.string().email().empty();\n+        const validationError = schema.validate(value).error;\n+\n+        if (validationError) {\n+            const errorType = validationError.details[0].type;\n+            if (errorType === 'any.empty') {\n+                return 'Email is empty';\n+            }\n+            if (errorType === 'string.email') {\n+                return 'Invalid Email';\n+            }\n+        } else {\n+            const existingSameEmails = emailList.filter((obj) => obj.email === email);\n+            if (existingSameEmails.length > 0) {\n+                return 'Same email exists';\n+            } else {\n+                return false;\n+            }\n+        }\n+        return false;\n+    };\n+\n+    const formSaveCallback = () => {\n+        const validationErrors = validateEmail(email);\n+        if (validationErrors) {\n+            Alert.error(validationErrors);\n+            return false;\n+        }\n+\n+        const restApi = new API();\n+        const promiseAPICall = restApi.addBotDetectionNotifyingEmail(email);\n+        return promiseAPICall.then(() => {\n+            return (\n+                <FormattedMessage\n+                    id='AdminPages.BotDetection.Add.form.add.successful'\n+                    defaultMessage='Email added successfully'\n+                />\n+            );\n+        })\n+            .catch((error) => {\n+                const { response } = error;\n+                if (response.body) {\n+                    throw response.body.description;\n+                }\n+            })\n+            .finally(() => {\n+                dispatch('', '');", "originalCommit": "41b051b387cde97ab81e5a0a9c7e43253eed53f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA0ODA5MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8591#discussion_r433048091", "bodyText": "This is an unnecessary line of code and removed with commit: 814f599", "author": "chathuranga95", "createdAt": "2020-06-01T05:31:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzMzA5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzMzg2Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8591#discussion_r432033867", "bodyText": "Shall we use a separate EmptyBox kind of component to show a message when there are no elements ?", "author": "tmkasun", "createdAt": "2020-05-28T18:22:37Z", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin_new/source/src/app/components/BotDetection/EmailConfig/ListEmails.jsx", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useState } from 'react';\n+import API from 'AppData/api';\n+import { useIntl, FormattedMessage } from 'react-intl';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import Typography from '@material-ui/core/Typography';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import ListBase from 'AppComponents/AdminPages/Addons/ListBase';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import Link from '@material-ui/core/Link';\n+import Configurations from 'Config';\n+import DeleteEmail from 'AppComponents/BotDetection/EmailConfig/DeleteEmail';\n+import AddEmails from 'AppComponents/BotDetection/EmailConfig/AddEmail';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import InlineProgress from 'AppComponents/AdminPages/Addons/InlineProgress';\n+\n+/**\n+ * Render a list\n+ * @returns {JSX} Header AppBar components.\n+ */\n+export default function ListEmails() {\n+    const intl = useIntl();\n+    const [emailList, setEmailList] = useState([]);\n+    const [isAnalyticsEnabled, setIsAnalyticsEnabled] = useState();\n+    const restApi = new API();\n+\n+    restApi.getAnalyticsEnabled().then((result) => {\n+        setIsAnalyticsEnabled(result.body.analyticsEnabled);\n+    });\n+\n+    /**\n+     * API call to get all emails\n+     * @returns {Promise}.\n+     */\n+    function apiCall() {\n+        return restApi\n+            .botDetectionNotifyingEmailsGet()\n+            .then((result) => {\n+                setEmailList(result.body);\n+                return result.body;\n+            })\n+            .catch((error) => {\n+                throw error;\n+            });\n+    }\n+\n+    const columProps = [\n+        { name: 'uuid', options: { display: false } },\n+        {\n+            name: 'email',\n+            label: intl.formatMessage({\n+                id: 'AdminPages.BotDetection.Email.List.table.header.email',\n+                defaultMessage: 'Email',\n+            }),\n+            options: {\n+                sort: true,\n+            },\n+        },\n+    ];\n+    const addButtonProps = {\n+        triggerButtonText: intl.formatMessage({\n+            id: 'AdminPages.BotDetection.Email.List.addButtonProps.triggerButtonText',\n+            defaultMessage: 'Add Email',\n+        }),\n+        /* This title is what as the title of the popup dialog box */\n+        title: intl.formatMessage({\n+            id: 'AdminPages.BotDetection.Email.List.addButtonProps.title',\n+            defaultMessage: 'Add Email',\n+        }),\n+        emailList,\n+    };\n+    const searchProps = {\n+        searchPlaceholder: intl.formatMessage({\n+            id: 'AdminPages.BotDetection.Email.List.search.default',\n+            defaultMessage: 'Search by Email',\n+        }),\n+        active: true,\n+    };\n+    const pageProps = {\n+        help: (\n+            <HelpBase>\n+                <List component='nav' aria-label='main mailbox folders'>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={\n+                                Configurations.app.docUrl\n+                                + 'learn/api-security/threat-protection/bot-detection/'\n+                                + '#enabling-email-notifications-for-bot-detection'\n+                            }\n+                        >\n+                            <ListItemText\n+                                primary={(\n+                                    <FormattedMessage\n+                                        id='AdminPages.BotDetection.Email.List.help.link.one'\n+                                        defaultMessage='Enabling email notifications for bot detection'\n+                                    />\n+                                )}\n+                            />\n+                        </Link>\n+                    </ListItem>\n+                    <ListItem button>\n+                        <ListItemIcon>\n+                            <DescriptionIcon />\n+                        </ListItemIcon>\n+                        <Link\n+                            target='_blank'\n+                            href={\n+                                Configurations.app.docUrl\n+                                + 'learn/api-security/threat-protection/bot-detection/'\n+                                + '#viewing-bot-detection-data-via-the-admin-portal'\n+                            }\n+                        >\n+                            <ListItemText\n+                                primary={(\n+                                    <FormattedMessage\n+                                        id='AdminPages.BotDetection.Email.List.help.link.two'\n+                                        defaultMessage='Viewing bot detection data via the Admin Portal'\n+                                    />\n+                                )}\n+                            />\n+                        </Link>\n+                    </ListItem>\n+                </List>\n+            </HelpBase>\n+        ),\n+        pageStyle: 'half',\n+        title: intl.formatMessage({\n+            id: 'AdminPages.BotDetection.Email.List.title',\n+            defaultMessage: 'Emails',\n+        }),\n+    };\n+    const emptyBoxProps = {\n+        content: (\n+            <Typography variant='body2' color='textSecondary' component='p'>\n+                <FormattedMessage\n+                    id='AdminPages.BotDetection.Email.List.empty.content'\n+                    values={{\n+                        breakingLine: <br />,\n+                    }}\n+                    defaultMessage={\n+                        'After a Publisher publishes APIs in the API Developer Portal, '\n+                        + 'hackers can invoke the APIs without an access token by scanning the '\n+                        + 'open ports of a system. Therefore, WSO2 API Manager has a '\n+                        + 'bot detection mechanism in place to prevent such attacks by '\n+                        + 'identifying who tried to enter and invoke resources without proper '\n+                        + 'authorization. WSO2 API Manager\\'s bot detection mechanism traces and '\n+                        + 'logs details of such unauthorized API calls and sends notifications '\n+                        + 'in this regard via emails. Thereby this helps Publishers to protect '\n+                        + 'their data from bot attackers and improve the security of their data.'\n+                        + '{breakingLine}{breakingLine}'\n+                        + 'You can add, delete and see the list of registered emails here.'\n+                    }\n+                />\n+            </Typography>\n+        ),\n+        title: (\n+            <Typography gutterBottom variant='h5' component='h2'>\n+                <FormattedMessage\n+                    id='AdminPages.BotDetection.Email.List.empty.title'\n+                    defaultMessage='Notification receiving Emails'\n+                />\n+            </Typography>\n+        ),\n+    };\n+\n+    const analyticsDisabledEmptyBoxProps = {\n+        content: (\n+            <Typography variant='body2' color='textSecondary' component='p'>\n+                <FormattedMessage\n+                    id='AdminPages.BotDetection.Email.List.analytics.disabled.empty.content'\n+                    values={{\n+                        breakingLine: <br />,\n+                    }}\n+                    defaultMessage={\n+                        'If you enable WSO2 API Manager Analytics with WSO2 API Manager, '\n+                    + 'you can enable email notifications for all unauthorized API calls that '\n+                    + 'you receive and also view the bot detection data easily via the Admin Portal.'\n+                    + '{breakingLine}{breakingLine}'\n+                    + 'Follow documentations on help to enable Analytics and get started.'\n+                    }\n+                />\n+            </Typography>\n+        ),\n+        title: (\n+            <Typography gutterBottom variant='h5' component='h2'>\n+                <FormattedMessage\n+                    id='AdminPages.BotDetection.Email.List.analytics.disabled.empty.title'\n+                    defaultMessage='Analytics disabled!'\n+                />\n+            </Typography>\n+        ),\n+    };\n+\n+    if (isAnalyticsEnabled === undefined) {\n+        return (\n+            <ContentBase pageStyle='paperLess'>\n+                <InlineProgress />\n+            </ContentBase>\n+        );\n+    }\n+\n+    return (isAnalyticsEnabled ? (\n+        <ListBase\n+            columProps={columProps}\n+            pageProps={pageProps}\n+            addButtonProps={addButtonProps}\n+            searchProps={searchProps}\n+            emptyBoxProps={emptyBoxProps}\n+            apiCall={apiCall}\n+            EditComponent={AddEmails}\n+            DeleteComponent={DeleteEmail}\n+        />\n+    )\n+        : (\n+            <ListBase\n+                pageProps={pageProps}\n+                emptyBoxProps={analyticsDisabledEmptyBoxProps}", "originalCommit": "41b051b387cde97ab81e5a0a9c7e43253eed53f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA3MjU4MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8591#discussion_r433072580", "bodyText": "Fixed this and other occurrence with commit: 8c5e0ad", "author": "chathuranga95", "createdAt": "2020-06-01T07:00:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzMzg2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzNTMwOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8591#discussion_r432035308", "bodyText": "Please don't use callback functions? no need to use callbacks with promises, We have used this pattern back then but realize there is no use of passing call back function as an argument to a function which returns a Promise object because addBotDetectionNotifyingEmail function callee have complete freedom to append any number of success (then) and failure (catch) handlers \ud83d\ude03", "author": "tmkasun", "createdAt": "2020-05-28T18:25:16Z", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin_new/source/src/app/data/api.js", "diffHunk": "@@ -505,8 +505,55 @@ class API extends Resource {\n     }\n \n     /**\n-     * Mock api call with delay\n-     * todo: Replace with the rest api when available\n+     * Get list of emails configured at Bot Detection --> Configure Emails\n+     */\n+    botDetectionNotifyingEmailsGet() {\n+        return this.client.then((client) => {\n+            return client.apis['default'].get_botData_getEmailList(\n+                this._requestMetaData(),\n+            );\n+        });\n+    }\n+\n+    addBotDetectionNotifyingEmail(email, callback = null) {", "originalCommit": "41b051b387cde97ab81e5a0a9c7e43253eed53f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1MjQ0Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8591#discussion_r433052443", "bodyText": "Fixed all occurrences with commit: 5138aa2", "author": "chathuranga95", "createdAt": "2020-06-01T05:49:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzNTMwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzNTUxOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8591#discussion_r432035519", "bodyText": "This is not required IMO", "author": "tmkasun", "createdAt": "2020-05-28T18:25:38Z", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin_new/source/src/app/data/api.js", "diffHunk": "@@ -505,8 +505,55 @@ class API extends Resource {\n     }\n \n     /**\n-     * Mock api call with delay\n-     * todo: Replace with the rest api when available\n+     * Get list of emails configured at Bot Detection --> Configure Emails\n+     */\n+    botDetectionNotifyingEmailsGet() {\n+        return this.client.then((client) => {\n+            return client.apis['default'].get_botData_getEmailList(\n+                this._requestMetaData(),\n+            );\n+        });\n+    }\n+\n+    addBotDetectionNotifyingEmail(email, callback = null) {\n+        const promiseAddEmail = this.client.then((client) => {\n+            const data = {\n+                email: email,\n+            };\n+            const payload = {\n+                body: data,\n+                'Content-Type': 'application/json',\n+            };\n+            return client.apis['default'].post_botData_addEmail(\n+                payload,\n+                this._requestMetaData(),\n+            );\n+        });\n+\n+        if (callback) {\n+            return promiseAddEmail.then(callback);\n+        } else {\n+            return promiseAddEmail;", "originalCommit": "41b051b387cde97ab81e5a0a9c7e43253eed53f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1MjUyNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8591#discussion_r433052527", "bodyText": "Fixed all occurrences with commit: 5138aa2", "author": "chathuranga95", "createdAt": "2020-06-01T05:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzNTUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzNTY2Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8591#discussion_r432035662", "bodyText": "Same here, Not required", "author": "tmkasun", "createdAt": "2020-05-28T18:25:53Z", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin_new/source/src/app/data/api.js", "diffHunk": "@@ -505,8 +505,55 @@ class API extends Resource {\n     }\n \n     /**\n-     * Mock api call with delay\n-     * todo: Replace with the rest api when available\n+     * Get list of emails configured at Bot Detection --> Configure Emails\n+     */\n+    botDetectionNotifyingEmailsGet() {\n+        return this.client.then((client) => {\n+            return client.apis['default'].get_botData_getEmailList(\n+                this._requestMetaData(),\n+            );\n+        });\n+    }\n+\n+    addBotDetectionNotifyingEmail(email, callback = null) {\n+        const promiseAddEmail = this.client.then((client) => {\n+            const data = {\n+                email: email,\n+            };\n+            const payload = {\n+                body: data,\n+                'Content-Type': 'application/json',\n+            };\n+            return client.apis['default'].post_botData_addEmail(\n+                payload,\n+                this._requestMetaData(),\n+            );\n+        });\n+\n+        if (callback) {\n+            return promiseAddEmail.then(callback);\n+        } else {\n+            return promiseAddEmail;\n+        }\n+    }\n+\n+    deleteBotDetectionNotifyingEmail(id, callback = null) {\n+        const promiseDeleteEmail = this.client.then((client) => {\n+            return client.apis['default'].delete_botData_deleteEmail(\n+                { uuid: id },\n+                this._requestMetaData(),\n+            );\n+        });\n+\n+        if (callback) {\n+            return promiseDeleteEmail.then(callback);\n+        } else {", "originalCommit": "41b051b387cde97ab81e5a0a9c7e43253eed53f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA1MjU4MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8591#discussion_r433052581", "bodyText": "Fixed all occurrences with commit: 5138aa2", "author": "chathuranga95", "createdAt": "2020-06-01T05:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzNTY2Mg=="}], "type": "inlineReview"}, {"oid": "814f59930b3d3e7e8507a02109f852c3906e686a", "url": "https://github.com/wso2/carbon-apimgt/commit/814f59930b3d3e7e8507a02109f852c3906e686a", "message": "Use useState() instead of reducer", "committedDate": "2020-06-01T05:29:33Z", "type": "commit"}, {"oid": "5138aa2a7e1b1611004d5260e67730dc11da6bb8", "url": "https://github.com/wso2/carbon-apimgt/commit/5138aa2a7e1b1611004d5260e67730dc11da6bb8", "message": "Remove unncessary callbacks", "committedDate": "2020-06-01T05:48:38Z", "type": "commit"}, {"oid": "8c5e0ad8207b54190c0c22e247b8be47943105d4", "url": "https://github.com/wso2/carbon-apimgt/commit/8c5e0ad8207b54190c0c22e247b8be47943105d4", "message": "Display Card component when content is empty", "committedDate": "2020-06-01T06:59:28Z", "type": "commit"}]}