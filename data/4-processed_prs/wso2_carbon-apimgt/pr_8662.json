{"pr_number": 8662, "pr_title": "Add Manage Alerts to new Admin Portal", "pr_createdAt": "2020-06-04T10:01:51Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8662", "timeline": [{"oid": "39c834d80582263da1d03da8d74134d4ca3b6d03", "url": "https://github.com/wso2/carbon-apimgt/commit/39c834d80582263da1d03da8d74134d4ca3b6d03", "message": "Add Manage Alerts", "committedDate": "2020-06-04T09:50:27Z", "type": "commit"}, {"oid": "5b7366b1f7177f06f7e3b29e2ea0b5a90a5d7ef8", "url": "https://github.com/wso2/carbon-apimgt/commit/5b7366b1f7177f06f7e3b29e2ea0b5a90a5d7ef8", "message": "Fix validate message", "committedDate": "2020-06-04T10:34:09Z", "type": "commit"}, {"oid": "2ac2849c0fcaccad3b7c1b7e4ac61e0c1ef1263d", "url": "https://github.com/wso2/carbon-apimgt/commit/2ac2849c0fcaccad3b7c1b7e4ac61e0c1ef1263d", "message": "Merge branch 'master' of https://github.com/wso2/carbon-apimgt into admin-portal-conv-alerts", "committedDate": "2020-06-04T10:43:16Z", "type": "commit"}, {"oid": "014e45500734525102085fcd815f8cd8caba9acf", "url": "https://github.com/wso2/carbon-apimgt/commit/014e45500734525102085fcd815f8cd8caba9acf", "message": "Add Manage Alerts Icon", "committedDate": "2020-06-04T10:45:42Z", "type": "commit"}, {"oid": "6cdd4e5f45fa1a640a9cfc13cb751980b28862c1", "url": "https://github.com/wso2/carbon-apimgt/commit/6cdd4e5f45fa1a640a9cfc13cb751980b28862c1", "message": "Fix Analytics Disable message", "committedDate": "2020-06-04T12:49:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NTE3OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8662#discussion_r435675179", "bodyText": "why we need to use lambda here ? component accept just component class/function, they have a separate prop for render function", "author": "tmkasun", "createdAt": "2020-06-05T03:49:24Z", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/Base/RouteMenuMapping.jsx", "diffHunk": "@@ -229,6 +231,15 @@ const RouteMenuMapping = (intl) => [\n             },\n         ],\n     },\n+    {\n+        id: intl.formatMessage({\n+            id: 'Base.RouteMenuMapping.manage.alerts',\n+            defaultMessage: 'Manage Alerts',\n+        }),\n+        path: '/analytics/manage-alerts',\n+        component: () => <ManageAlerts />,", "originalCommit": "6cdd4e5f45fa1a640a9cfc13cb751980b28862c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyNzQ4Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8662#discussion_r435727482", "bodyText": "Fixed with commit: cb1fd45", "author": "chathuranga95", "createdAt": "2020-06-05T07:04:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NTE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NTUyOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8662#discussion_r435675529", "bodyText": "Shall we use <Box mt={1}> to do this ?", "author": "tmkasun", "createdAt": "2020-06-05T03:50:53Z", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/ManageAlerts/ManageAlerts.jsx", "diffHunk": "@@ -0,0 +1,585 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, injectIntl } from 'react-intl';\n+import { Link } from 'react-router-dom';\n+import Joi from '@hapi/joi';\n+import { withStyles } from '@material-ui/core';\n+import Button from '@material-ui/core/Button';\n+import Card from '@material-ui/core/Card';\n+import CardContent from '@material-ui/core/CardContent';\n+import Checkbox from '@material-ui/core/Checkbox';\n+import CircularProgress from '@material-ui/core/CircularProgress';\n+import Dialog from '@material-ui/core/Dialog';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import Grid from '@material-ui/core/Grid';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import Typography from '@material-ui/core/Typography';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import Alert from 'AppComponents/Shared/Alert';\n+import API from 'AppData/api';\n+import Configurations from 'Config';\n+import ChipInput from 'material-ui-chip-input';\n+import PropTypes from 'prop-types';\n+\n+const styles = (theme) => ({\n+    alertsWrapper: {\n+        padding: theme.spacing(2),\n+        '& span, & h5, & label, & input, & td, & li': {\n+            color: theme.palette.getContrastText(theme.palette.background.paper),\n+        },\n+    },\n+    manageAlertHeading: {\n+        marginBottom: theme.spacing(),\n+    },\n+    chipInput: {\n+        width: '100%',\n+        marginTop: theme.spacing(2),\n+        marginBottom: theme.spacing(2),\n+    },\n+    alertConfigDialog: {\n+        width: '60%',\n+    },\n+    configDialogHeading: {\n+        fontWeight: '600',\n+    },\n+    btnContainer: {\n+        marginTop: theme.spacing(),", "originalCommit": "6cdd4e5f45fa1a640a9cfc13cb751980b28862c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyNzY0MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/8662#discussion_r435727640", "bodyText": "Fixed with commit: ad2be95", "author": "chathuranga95", "createdAt": "2020-06-05T07:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NTUyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NTg5Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8662#discussion_r435675897", "bodyText": "Shall we first destructure these bodies and use them\ni:e\nconst [supportedAlerts, subscribedAlerts] = response;", "author": "tmkasun", "createdAt": "2020-06-05T03:52:33Z", "path": "features/apimgt/org.wso2.carbon.apimgt.admin.feature/src/main/resources/admin/source/src/app/components/ManageAlerts/ManageAlerts.jsx", "diffHunk": "@@ -0,0 +1,585 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useEffect, useState } from 'react';\n+import { FormattedMessage, injectIntl } from 'react-intl';\n+import { Link } from 'react-router-dom';\n+import Joi from '@hapi/joi';\n+import { withStyles } from '@material-ui/core';\n+import Button from '@material-ui/core/Button';\n+import Card from '@material-ui/core/Card';\n+import CardContent from '@material-ui/core/CardContent';\n+import Checkbox from '@material-ui/core/Checkbox';\n+import CircularProgress from '@material-ui/core/CircularProgress';\n+import Dialog from '@material-ui/core/Dialog';\n+import DialogActions from '@material-ui/core/DialogActions';\n+import DialogContent from '@material-ui/core/DialogContent';\n+import DialogTitle from '@material-ui/core/DialogTitle';\n+import Grid from '@material-ui/core/Grid';\n+import List from '@material-ui/core/List';\n+import ListItem from '@material-ui/core/ListItem';\n+import ListItemIcon from '@material-ui/core/ListItemIcon';\n+import ListItemText from '@material-ui/core/ListItemText';\n+import Typography from '@material-ui/core/Typography';\n+import DescriptionIcon from '@material-ui/icons/Description';\n+import ContentBase from 'AppComponents/AdminPages/Addons/ContentBase';\n+import HelpBase from 'AppComponents/AdminPages/Addons/HelpBase';\n+import Alert from 'AppComponents/Shared/Alert';\n+import API from 'AppData/api';\n+import Configurations from 'Config';\n+import ChipInput from 'material-ui-chip-input';\n+import PropTypes from 'prop-types';\n+\n+const styles = (theme) => ({\n+    alertsWrapper: {\n+        padding: theme.spacing(2),\n+        '& span, & h5, & label, & input, & td, & li': {\n+            color: theme.palette.getContrastText(theme.palette.background.paper),\n+        },\n+    },\n+    manageAlertHeading: {\n+        marginBottom: theme.spacing(),\n+    },\n+    chipInput: {\n+        width: '100%',\n+        marginTop: theme.spacing(2),\n+        marginBottom: theme.spacing(2),\n+    },\n+    alertConfigDialog: {\n+        width: '60%',\n+    },\n+    configDialogHeading: {\n+        fontWeight: '600',\n+    },\n+    btnContainer: {\n+        marginTop: theme.spacing(),\n+    },\n+    listItem: {\n+        marginLeft: theme.spacing(1),\n+    },\n+});\n+\n+/**\n+ * Alerts management component.\n+ *\n+ * @param {any} props The Input props.\n+ * @return {any} HTML representation of the component.\n+ * */\n+const ManageAlerts = (props) => {\n+    const {\n+        classes,\n+        intl,\n+    } = props;\n+    const [emails, setEmailsList] = useState([]);\n+    const [supportedAlerts, setSupportedAlerts] = useState();\n+    const [subscribedAlerts, setSubscribedAlerts] = useState([]);\n+    const [isAnalyticsEnabled, setAnalyticsEnabled] = useState(false);\n+    const [isInProgress, setInProgress] = useState({ subscribing: false, unSubscribing: false });\n+    const [unsubscribeAll, setUnsubscribeAll] = useState(false);\n+    const api = new API();\n+\n+    const alertIdMapping = {\n+        1: {\n+            name: intl.formatMessage({\n+                id: 'Manage.Alerts.abnormal.response.time.name',\n+                defaultMessage: 'Abnormal Response Time',\n+            }),\n+            displayName: 'AbnormalResponseTime',\n+            description: intl.formatMessage({\n+                id: 'Manage.Alerts.abnormal.response.time.description',\n+                defaultMessage: 'This alert gets triggered if the response time of a particular API '\n+                + 'is higher than the predefined value. These alerts could be treated as an indication '\n+                + 'of a slow WSO2 API Manager runtime or a slow backend.',\n+            }),\n+        },\n+        2: {\n+            name: intl.formatMessage({\n+                id: 'Manage.Alerts.abnormal.backend.time.name',\n+                defaultMessage: 'Abnormal Backend Time',\n+            }),\n+            displayName: 'AbnormalBackendTime',\n+            description: intl.formatMessage({\n+                id: 'Manage.Alerts.abnormal.backend.time.description',\n+                defaultMessage: 'This alert gets triggered if the backend time corresponding to a '\n+                + 'particular API is higher than the predefined value. These alerts could be treated '\n+                + 'as an indication of a slow backend. In technical terms, if the backend time of a '\n+                + 'particular API of a tenant lies outside the predefined value, an alert will be sent out.',\n+            }),\n+        },\n+        3: {\n+            name: intl.formatMessage({\n+                id: 'Manage.Alerts.abnormal.request.count.name',\n+                defaultMessage: 'Abnormal Request Count',\n+            }),\n+            displayName: 'AbnormalRequestsPerMin',\n+            description: intl.formatMessage({\n+                id: 'Manage.Alerts.abnormal.request.count.description',\n+                defaultMessage: 'This alert is triggered if there is a sudden spike the request count within '\n+                + 'a period of one minute by default for a particular API for an application. '\n+                + 'These alerts could be treated as an indication of a possible high traffic, '\n+                + 'suspicious activity, possible malfunction of the client application, etc.',\n+            }),\n+        },\n+        4: {\n+            name: intl.formatMessage({\n+                id: 'Manage.Alerts.abnormal.request.access.name',\n+                defaultMessage: 'Abnormal Resource Access',\n+            }),\n+            displayName: 'AbnormalRequestPattern',\n+            description: intl.formatMessage({\n+                id: 'Manage.Alerts.abnormal.request.access.description',\n+                defaultMessage: 'This alert is triggered if there is a change in the resource access pattern '\n+                + 'of a user of a particular application. These alerts could be treated as an indication of a '\n+                + 'suspicious activity made by a user over your application.',\n+            }),\n+        },\n+        5: {\n+            name: intl.formatMessage({\n+                id: 'Manage.Alerts.unseen.source.ip.address.name',\n+                defaultMessage: 'Unseen Source IP Access',\n+            }),\n+            displayName: 'UnusualIPAccess',\n+            description: intl.formatMessage({\n+                id: 'Manage.Alerts.unseen.source.ip.address.description',\n+                defaultMessage: 'This alert is triggered if there is either a change in the request source IP '\n+                + 'for a particular application by a user or if the request is from an IP used before a '\n+                + 'time period of 30 days (default). These alerts could be treated as an indication of a '\n+                + 'suspicious activity made by a user over an application.',\n+            }),\n+        },\n+        6: {\n+            name: intl.formatMessage({\n+                id: 'Manage.Alerts.tier.crossing.name',\n+                defaultMessage: 'Tier Crossing',\n+            }),\n+            displayName: 'FrequentTierLimitHitting',\n+            description: intl.formatMessage({\n+                id: 'Manage.Alerts.tier.crossing.description',\n+                defaultMessage: 'This alert is triggered if at least one of the two cases below are '\n+                + 'satisfied; if a particular application gets throttled out for hitting the '\n+                + 'subscribed tier limit of that application more than 10 times (by default) '\n+                + 'within an hour (by default) or if a particular user of an application gets '\n+                + 'throttled out for hitting the subscribed tier limit of a particular API more '\n+                + 'than 10 times (by default) within a day (by default)',\n+            }),\n+        },\n+        7: {\n+            name: intl.formatMessage({\n+                id: 'Manage.Alerts.health.availability.name',\n+                defaultMessage: 'Health Availability',\n+            }),\n+            displayName: 'ApiHealthMonitor',\n+            description: intl.formatMessage({\n+                id: 'Manage.Alerts.health.availability.description',\n+                defaultMessage: 'This alert gets triggered if at least one of the two cases below are '\n+                + 'satisfied; Response time of an API greater than Threshold response time value defined '\n+                + 'for that particular API or Response status code is in between 500 and 600 (By Default)',\n+            }),\n+        },\n+    };\n+\n+    /**\n+     * Checks whether the provided alert is aubscribed.\n+     *\n+     * @param {number} alertId : The id of the alert.\n+     * @return {boolean} True if the alert is subscribed. False otherwise.\n+     * */\n+    const isAlertSubscribed = (alertId) => {\n+        return subscribedAlerts.some((alert) => { return alert.id === alertId; });\n+    };\n+\n+    /**\n+     * Handles the alert type select event.\n+     *\n+     * @param {obj} alert : The selected alert.\n+     * */\n+    const handleCheckAlert = (alert) => {\n+        const alertId = alert.id;\n+        let tmpSubscribedAlerts = [...subscribedAlerts];\n+        if (isAlertSubscribed(alertId)) {\n+            tmpSubscribedAlerts = tmpSubscribedAlerts.filter((sub) => {\n+                return sub.id !== alertId;\n+            });\n+        } else {\n+            const newAlert = { id: alertId, name: alertIdMapping[alertId].displayName };\n+            tmpSubscribedAlerts.push(newAlert);\n+        }\n+        setSubscribedAlerts(tmpSubscribedAlerts);\n+    };\n+\n+    const validateEmail = (value) => {\n+        const schema = Joi.string().email().empty();\n+        const validationError = schema.validate(value).error;\n+\n+        if (validationError) {\n+            const errorType = validationError.details[0].type;\n+            if (errorType === 'string.email') {\n+                return 'Invalid Email: ' + value;\n+            }\n+        }\n+        return false;\n+    };\n+\n+    const validateEmailList = (values) => {\n+        for (const email in values) {\n+            if (validateEmail(values[email])) {\n+                return validateEmail(values[email]);\n+            }\n+        }\n+        return false;\n+    };\n+\n+    /**\n+     * Handles the add email event.\n+     *\n+     * @param {string} email The email address that is being added.\n+     * */\n+    const handleAddEmail = (email) => {\n+        setEmailsList(email);\n+    };\n+\n+    /**\n+     * Handles the email deletion event.\n+     *\n+     * @param {string} email : The email that is being deleted.\n+     * */\n+    const handleEmailDeletion = (email) => {\n+        const newEmails = emails.filter((oldEmail) => {\n+            return oldEmail !== email;\n+        });\n+        setEmailsList(newEmails);\n+    };\n+\n+    useEffect(() => {\n+        const supportedAlertsPromise = api.getSupportedAlertTypes();\n+        const subscribedAlertsPromise = api.getSubscribedAlertTypesByUser();\n+        Promise.all([supportedAlertsPromise, subscribedAlertsPromise]).then((response) => {\n+            if (response[0].status === 204 || response[1].status === 204) {\n+                setAnalyticsEnabled(false);\n+            } else {\n+                setAnalyticsEnabled(true);\n+                setSubscribedAlerts(response[1].body.alerts);", "originalCommit": "6cdd4e5f45fa1a640a9cfc13cb751980b28862c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyNzc2Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8662#discussion_r435727767", "bodyText": "Fixed with commit: 3dde61d", "author": "chathuranga95", "createdAt": "2020-06-05T07:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NTg5Nw=="}], "type": "inlineReview"}, {"oid": "cb1fd45e6fbcb1c4166f90d86ef8f0c9366450f7", "url": "https://github.com/wso2/carbon-apimgt/commit/cb1fd45e6fbcb1c4166f90d86ef8f0c9366450f7", "message": "Remove lambda functions", "committedDate": "2020-06-05T06:46:02Z", "type": "commit"}, {"oid": "ad2be95172c14f083670b0910b54a6435b9f97bc", "url": "https://github.com/wso2/carbon-apimgt/commit/ad2be95172c14f083670b0910b54a6435b9f97bc", "message": "Add Box component to wrap buttons", "committedDate": "2020-06-05T06:59:02Z", "type": "commit"}, {"oid": "3dde61d37eba0356fd044756c4ccc61a48686a13", "url": "https://github.com/wso2/carbon-apimgt/commit/3dde61d37eba0356fd044756c4ccc61a48686a13", "message": "Destructure variables", "committedDate": "2020-06-05T07:03:32Z", "type": "commit"}]}