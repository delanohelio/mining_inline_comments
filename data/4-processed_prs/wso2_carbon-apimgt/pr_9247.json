{"pr_number": 9247, "pr_title": "fix disable default keymanager not able to see apis", "pr_createdAt": "2020-08-26T09:54:19Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/9247", "timeline": [{"oid": "2a54cfee1b94830717bdcdb37ea9323059974c9a", "url": "https://github.com/wso2/carbon-apimgt/commit/2a54cfee1b94830717bdcdb37ea9323059974c9a", "message": "fix disable default keymanager not able to see apis", "committedDate": "2020-08-26T12:04:36Z", "type": "forcePushed"}, {"oid": "c307906be16ed14006f1952130ee783dd0531b16", "url": "https://github.com/wso2/carbon-apimgt/commit/c307906be16ed14006f1952130ee783dd0531b16", "message": "fix disable default keymanager not able to see apis", "committedDate": "2020-08-26T18:05:23Z", "type": "commit"}, {"oid": "c307906be16ed14006f1952130ee783dd0531b16", "url": "https://github.com/wso2/carbon-apimgt/commit/c307906be16ed14006f1952130ee783dd0531b16", "message": "fix disable default keymanager not able to see apis", "committedDate": "2020-08-26T18:05:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4NDY1OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478184659", "bodyText": "wrong header", "author": "chamilaadhi", "createdAt": "2020-08-27T06:36:27Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ScopesDAO.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ *  Copyright (c) 2005-2011, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "originalCommit": "c307906be16ed14006f1952130ee783dd0531b16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIzMjAwNA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478232004", "bodyText": "formatting issue", "author": "dushaniw", "createdAt": "2020-08-27T08:03:03Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -912,19 +910,32 @@ private void addLocalScopes(APIIdentifier apiIdentifier, int tenantId, Set<URITe\n             throws APIManagementException {\n \n         String tenantDomain = APIUtil.getTenantDomainFromTenantId(tenantId);\n-        KeyManager keyManager = KeyManagerHolder.getKeyManagerInstance(tenantDomain);\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n         //Get the local scopes set to register for the API from URI templates\n         Set<Scope> scopesToRegister = getScopesToRegisterFromURITemplates(apiIdentifier, tenantId, uriTemplates);\n         //Register scopes\n+        scopesDAO.addScopes(scopesToRegister, tenantId);\n         for (Scope scope : scopesToRegister) {\n-            String scopeKey = scope.getKey();\n-            // Check if key already registered in KM. Scope Key may be already registered for a different version.\n-            if (!keyManager.isScopeExists(scopeKey)) {\n-                //register scope in KM\n-                keyManager.registerScope(scope);\n-            } else {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Scope: \" + scopeKey + \" already registered in KM. Skipping registering scope.\");\n+            for (Map.Entry<String, KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()) {\n+                KeyManager keyManager = keyManagerDtoEntry.getValue().getKeyManager();\n+                if (keyManager != null) {\n+                    String scopeKey = scope.getKey();\n+                    try{", "originalCommit": "c307906be16ed14006f1952130ee783dd0531b16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIzMjY1Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478232657", "bodyText": "formatting issue", "author": "dushaniw", "createdAt": "2020-08-27T08:04:16Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -912,19 +910,32 @@ private void addLocalScopes(APIIdentifier apiIdentifier, int tenantId, Set<URITe\n             throws APIManagementException {\n \n         String tenantDomain = APIUtil.getTenantDomainFromTenantId(tenantId);\n-        KeyManager keyManager = KeyManagerHolder.getKeyManagerInstance(tenantDomain);\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n         //Get the local scopes set to register for the API from URI templates\n         Set<Scope> scopesToRegister = getScopesToRegisterFromURITemplates(apiIdentifier, tenantId, uriTemplates);\n         //Register scopes\n+        scopesDAO.addScopes(scopesToRegister, tenantId);\n         for (Scope scope : scopesToRegister) {\n-            String scopeKey = scope.getKey();\n-            // Check if key already registered in KM. Scope Key may be already registered for a different version.\n-            if (!keyManager.isScopeExists(scopeKey)) {\n-                //register scope in KM\n-                keyManager.registerScope(scope);\n-            } else {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Scope: \" + scopeKey + \" already registered in KM. Skipping registering scope.\");\n+            for (Map.Entry<String, KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()) {\n+                KeyManager keyManager = keyManagerDtoEntry.getValue().getKeyManager();\n+                if (keyManager != null) {\n+                    String scopeKey = scope.getKey();\n+                    try{\n+                        // Check if key already registered in KM. Scope Key may be already registered for a different\n+                        // version.\n+                        if (!keyManager.isScopeExists(scopeKey)) {\n+                            //register scope in KM\n+                            keyManager.registerScope(scope);\n+                        } else {\n+                            if (log.isDebugEnabled()) {\n+                                log.debug(\"Scope: \" + scopeKey + \" already registered in KM. Skipping registering scope.\");\n+                            }\n+                        }\n+                    }catch (APIManagementException e){", "originalCommit": "c307906be16ed14006f1952130ee783dd0531b16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIzNDA4NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478234085", "bodyText": "will need to update the method description with new changes.", "author": "dushaniw", "createdAt": "2020-08-27T08:06:49Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AbstractAPIManager.java", "diffHunk": "@@ -1596,14 +1599,7 @@ protected String getTenantDomainFromUrl(String url) {\n     @Override\n     public boolean isScopeKeyExist(String scopeKey, int tenantid) throws APIManagementException {\n \n-        String tenantDomain = APIUtil.getTenantDomainFromTenantId(tenantid);\n-        if (!apiMgtDAO.isSharedScopeExists(scopeKey, tenantid)) {\n-            return KeyManagerHolder.getKeyManagerInstance(tenantDomain).isScopeExists(scopeKey);\n-        }\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Scope name: \" + scopeKey + \" exists as a shared scope in tenant: \" + tenantDomain);\n-        }\n-        return true;\n+        return scopesDAO.isScopeExist(scopeKey, tenantid);", "originalCommit": "c307906be16ed14006f1952130ee783dd0531b16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIzODc3Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478238777", "bodyText": "formatting issue. space between methods.", "author": "dushaniw", "createdAt": "2020-08-27T08:15:30Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ScopesDAO.java", "diffHunk": "@@ -0,0 +1,294 @@\n+/*\n+ *  Copyright (c) 2005-2011, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.ExceptionCodes;\n+import org.wso2.carbon.apimgt.api.model.Scope;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ *  This class used to manage Scopes related dao operations.\n+ */\n+public class ScopesDAO {\n+\n+    private static final Log log = LogFactory.getLog(ScopesDAO.class);\n+    private static final ScopesDAO INSTANCE = new ScopesDAO();\n+\n+    public static ScopesDAO getInstance() {\n+\n+        return INSTANCE;\n+    }\n+\n+    private ScopesDAO() {\n+\n+    }\n+\n+    public boolean addScopes(Set<Scope> scopeSet, int tenantId) throws APIManagementException {\n+\n+        if (scopeSet == null || scopeSet.isEmpty()) {\n+            return false;\n+        }\n+        try (Connection connection = APIMgtDBUtil.getConnection()) {\n+            connection.setAutoCommit(false);\n+            try {\n+                for (Scope scope : scopeSet) {\n+                    if (!isScopeExist(connection, scope.getKey(), tenantId)) {\n+                        try (PreparedStatement preparedStatement = connection\n+                                .prepareStatement(SQLConstants.INSERT_SCOPE_SQL)) {\n+                            preparedStatement.setString(1, scope.getKey());\n+                            preparedStatement.setString(2, scope.getName());\n+                            preparedStatement.setString(3, scope.getDescription());\n+                            preparedStatement.setInt(4, tenantId);\n+                            preparedStatement.setString(5, APIConstants.DEFAULT_SCOPE_TYPE);\n+                            preparedStatement.executeUpdate();\n+                            addScopeBindings(connection, scope, tenantId);\n+                        }\n+                    }\n+                }\n+                connection.commit();\n+                return true;\n+            } catch (SQLException e) {\n+                log.error(\"Error while saving scopes into db\", e);\n+                connection.rollback();\n+                throw new APIManagementException(\"Error while saving scopes into db\", e, ExceptionCodes.INTERNAL_ERROR);\n+            }\n+        } catch (SQLException e) {\n+            throw new APIManagementException(\"Error while retrieving database connection\", e,\n+                    ExceptionCodes.INTERNAL_ERROR);\n+        }\n+    }\n+\n+    public boolean updateScope(Scope scope, int tenantId) throws APIManagementException {\n+\n+        try (Connection connection = APIMgtDBUtil.getConnection()) {\n+            connection.setAutoCommit(false);\n+            try (PreparedStatement preparedStatement = connection.prepareStatement(SQLConstants.UPDATE_SCOPE_SQL)) {\n+                preparedStatement.setString(1, scope.getName());\n+                preparedStatement.setString(2, scope.getDescription());\n+                preparedStatement.setString(3, scope.getKey());\n+                preparedStatement.setInt(4, tenantId);\n+                preparedStatement.executeUpdate();\n+                deleteScopeBindings(connection, scope.getKey(), tenantId);\n+                addScopeBindings(connection, scope, tenantId);\n+                connection.commit();\n+                return true;\n+            } catch (SQLException e) {\n+                log.error(\"Error while updating scopes into db\", e);\n+                connection.rollback();\n+                throw new APIManagementException(\"Error while updating scopes into db\", e,\n+                        ExceptionCodes.INTERNAL_ERROR);\n+            }\n+        } catch (SQLException e) {\n+            throw new APIManagementException(\"Error while retrieving database connection\", e,\n+                    ExceptionCodes.INTERNAL_ERROR);\n+        }\n+    }\n+\n+    public boolean deleteScope(String scopeName, int tenantId) throws APIManagementException {\n+\n+        try (Connection connection = APIMgtDBUtil.getConnection()) {\n+            connection.setAutoCommit(false);\n+            try (PreparedStatement preparedStatement = connection.prepareStatement(SQLConstants.DELETE_SCOPE_SQL)) {\n+                preparedStatement.setString(1, scopeName);\n+                preparedStatement.setInt(2, tenantId);\n+                preparedStatement.executeUpdate();\n+                connection.commit();\n+                return true;\n+            } catch (SQLException e) {\n+                log.error(\"Error while deleting scopes from db\", e);\n+                connection.rollback();\n+                throw new APIManagementException(\"Error while deleting scopes from db\", e,\n+                        ExceptionCodes.INTERNAL_ERROR);\n+            }\n+        } catch (SQLException e) {\n+            throw new APIManagementException(\"Error while retrieving database connection\", e,\n+                    ExceptionCodes.INTERNAL_ERROR);\n+        }\n+    }\n+\n+    public boolean deleteScopes(Set<String> scopes, int tenantId) throws APIManagementException {\n+\n+        try (Connection connection = APIMgtDBUtil.getConnection()) {\n+            connection.setAutoCommit(false);\n+            try (PreparedStatement preparedStatement = connection.prepareStatement(SQLConstants.DELETE_SCOPE_SQL)) {\n+                for (String scope : scopes) {\n+                    preparedStatement.setString(1, scope);\n+                    preparedStatement.setInt(2, tenantId);\n+                    preparedStatement.addBatch();\n+                }\n+                preparedStatement.executeBatch();\n+                connection.commit();\n+                return true;\n+            } catch (SQLException e) {\n+                log.error(\"Error while deleting scopes from db\", e);\n+                connection.rollback();\n+                throw new APIManagementException(\"Error while deleting scopes from db\", e,\n+                        ExceptionCodes.INTERNAL_ERROR);\n+            }\n+        } catch (SQLException e) {\n+            throw new APIManagementException(\"Error while retrieving database connection\", e,\n+                    ExceptionCodes.INTERNAL_ERROR);\n+        }\n+    }\n+\n+    public Scope getScope(String name, int tenantId) throws APIManagementException {\n+\n+        try (Connection connection = APIMgtDBUtil.getConnection()) {\n+            try (PreparedStatement preparedStatement = connection.prepareStatement(SQLConstants.GET_SCOPE_SQL)) {\n+                preparedStatement.setString(1, name);\n+                preparedStatement.setInt(2, tenantId);\n+                try (ResultSet resultSet = preparedStatement.executeQuery()) {\n+                    if (resultSet.next()) {\n+                        String displayName = resultSet.getString(\"DISPLAY_NAME\");\n+                        String description = resultSet.getString(\"DESCRIPTION\");\n+                        Scope scope = new Scope();\n+                        scope.setName(displayName);\n+                        scope.setDescription(description);\n+                        scope.setKey(name);\n+                        scope.setRoles(String.join(\",\", getScopeBindings(connection, name, tenantId)));\n+                        return scope;\n+                    }\n+                }\n+            } catch (SQLException e) {\n+                log.error(\"Error while deleting scopes from db\", e);\n+                throw new APIManagementException(\"Error while deleting scopes from db\", e,\n+                        ExceptionCodes.INTERNAL_ERROR);\n+            }\n+        } catch (SQLException e) {\n+            throw new APIManagementException(\"Error while retrieving database connection\", e,\n+                    ExceptionCodes.INTERNAL_ERROR);\n+        }\n+        return null;\n+    }\n+    private boolean isScopeExist(Connection connection,String scopeKey, int tenantId) throws APIManagementException {", "originalCommit": "c307906be16ed14006f1952130ee783dd0531b16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0ODEyMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478248121", "bodyText": "same formatting issue with try{ and catch{", "author": "dushaniw", "createdAt": "2020-08-27T08:30:45Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -989,10 +1000,20 @@ private void addURITemplates(int apiId, API api, int tenantId) throws APIManagem\n \n         String tenantDomain = APIUtil.getTenantDomainFromTenantId(tenantId);\n         apiMgtDAO.addURITemplates(apiId, api, tenantId);\n-        KeyManagerHolder.getKeyManagerInstance(tenantDomain).attachResourceScopes(api, api.getUriTemplates());\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n+        for (Map.Entry<String, KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()) {\n+            KeyManager keyManager = keyManagerDtoEntry.getValue().getKeyManager();\n+            if (keyManager != null) {\n+                try{", "originalCommit": "c307906be16ed14006f1952130ee783dd0531b16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI1MDY5MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478250691", "bodyText": "formatting issue with try, catch and log.error +", "author": "dushaniw", "createdAt": "2020-08-27T08:35:06Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -1002,21 +1023,32 @@ private void addURITemplates(int apiId, API api, int tenantId) throws APIManagem\n      */\n     private void registerOrUpdateResourceInKeyManager(API api, String tenantDomain) throws APIManagementException {\n         //get new key manager instance for  resource registration.\n-        KeyManager keyManager = KeyManagerHolder.getKeyManagerInstance(tenantDomain);\n-        Map registeredResource = keyManager.getResourceByApiId(api.getId().toString());\n-        if (registeredResource == null) {\n-            boolean isNewResourceRegistered = keyManager.registerNewResource(api, null);\n-            if (!isNewResourceRegistered) {\n-                handleException(\"APIResource registration is failed while adding the API- \" + api.getId().getApiName()\n-                        + \"-\" + api.getId().getVersion());\n-            }\n-        } else {\n-            //update APIResource.\n-            String resourceId = (String) registeredResource.get(\"resourceId\");\n-            if (resourceId == null) {\n-                handleException(\"APIResource update is failed because of empty resourceID.\");\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n+        for (Map.Entry<String, KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()) {\n+            KeyManager keyManager = keyManagerDtoEntry.getValue().getKeyManager();\n+            if (keyManager != null) {\n+                try{\n+                    Map registeredResource = keyManager.getResourceByApiId(api.getId().toString());\n+                    if (registeredResource == null) {\n+                        boolean isNewResourceRegistered = keyManager.registerNewResource(api, null);\n+                        if (!isNewResourceRegistered) {\n+                            log.warn(\"APIResource registration is failed while adding the API- \" +\n+                                    api.getId().getApiName()\n+                                    + \"-\" + api.getId().getVersion() + \" into KeyManager : \" +\n+                                    keyManagerDtoEntry.getKey());\n+                        }\n+                    } else {\n+                        //update APIResource.\n+                        String resourceId = (String) registeredResource.get(\"resourceId\");\n+                        if (resourceId == null) {\n+                            handleException(\"APIResource update is failed because of empty resourceID.\");\n+                        }\n+                        keyManager.updateRegisteredResource(api, registeredResource);\n+                    }\n+                }catch (APIManagementException e){\n+                    log.error(\"API Resource Registration failed in KeyManager \"+keyManagerDtoEntry.getKey(),e);", "originalCommit": "c307906be16ed14006f1952130ee783dd0531b16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NjU3Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478266573", "bodyText": "same formatting issue with try and catch and log.error", "author": "dushaniw", "createdAt": "2020-08-27T09:01:07Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -4229,20 +4275,20 @@ public void deleteAPI(APIIdentifier identifier, String apiUuid) throws APIManage\n             }\n \n             cleanUpPendingAPIStateChangeTask(apiId);\n-            //Run cleanup task for workflow\n-            /*\n-            WorkflowExecutor apiStateChangeWFExecutor = WorkflowExecutorFactory.getInstance().\n-                    getWorkflowExecutor(WorkflowConstants.WF_TYPE_AM_API_STATE);\n-\n-            WorkflowDTO wfDTO = apiMgtDAO.retrieveWorkflowFromInternalReference(Integer.toString(apiId),\n-                    WorkflowConstants.WF_TYPE_AM_API_STATE);\n-            if(wfDTO != null && WorkflowStatus.CREATED == wfDTO.getStatus()){\n-                apiStateChangeWFExecutor.cleanUpPendingTask(wfDTO.getExternalWorkflowReference());\n-            }\n-            */\n-            KeyManager keyManager = KeyManagerHolder.getKeyManagerInstance(tenantDomain);\n+\n             if (identifier.toString() != null) {\n-                keyManager.deleteRegisteredResourceByAPIId(identifier.toString());\n+                Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n+                for (Map.Entry<String, KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()) {\n+                    KeyManager keyManager = keyManagerDtoEntry.getValue().getKeyManager();\n+                    if (keyManager != null) {\n+                        try{", "originalCommit": "c307906be16ed14006f1952130ee783dd0531b16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NzgyNg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478267826", "bodyText": "same formatting issue", "author": "dushaniw", "createdAt": "2020-08-27T09:03:20Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -4274,19 +4320,31 @@ private void deleteAPI(API api) throws APIManagementException {\n         // Get the URI Templates for the given API to detach the resources scopes from\n         Set<URITemplate> uriTemplates = apiMgtDAO.getURITemplatesOfAPI(apiIdentifier);\n         // Detach all the resource scopes from the API resources in KM\n-        KeyManagerHolder.getKeyManagerInstance(tenantDomain).detachResourceScopes(api, uriTemplates);\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Resource scopes are successfully detached for the API : \" + apiIdentifier\n-                    + \" from KeyManager.\");\n-        }\n-        // remove the local scopes from the KM\n-        for (String localScope : localScopeKeysToDelete) {\n-            KeyManagerHolder.getKeyManagerInstance(tenantDomain).deleteScope(localScope);\n-        }\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Local scopes are successfully deleted for the API : \" + apiIdentifier\n-                    + \" from KeyManager.\");\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n+        for (Map.Entry<String, KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()) {\n+            KeyManager keyManager = keyManagerDtoEntry.getValue().getKeyManager();\n+            if (keyManager != null) {\n+                try{", "originalCommit": "c307906be16ed14006f1952130ee783dd0531b16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MzkyMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478273920", "bodyText": "shouldnt we throw the exception?", "author": "dushaniw", "createdAt": "2020-08-27T09:13:49Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -8588,9 +8646,24 @@ public boolean isSharedScopeNameExists(String scopeName, String tenantDomain) th\n     @Override\n     public String addSharedScope(Scope scope, String tenantDomain) throws APIManagementException {\n \n-        KeyManagerHolder.getKeyManagerInstance(tenantDomain).registerScope(scope);\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Adding shared scope mapping: \" + scope.getKey());\n+        Set<Scope> scopeSet = new HashSet<>();\n+        scopeSet.add(scope);\n+        int tenantId = APIUtil.getTenantIdFromTenantDomain(tenantDomain);\n+        scopesDAO.addScopes(scopeSet, tenantId);\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n+        for (Map.Entry<String, KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()) {\n+            KeyManager keyManager = keyManagerDtoEntry.getValue().getKeyManager();\n+            if (keyManager != null) {\n+                try{\n+                    keyManager.registerScope(scope);\n+                }catch (APIManagementException e){\n+                    log.error(\"Error occured while registering Scope in KeyManager \" + keyManagerDtoEntry.getKey(), e);", "originalCommit": "c307906be16ed14006f1952130ee783dd0531b16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0Mjc0Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478342742", "bodyText": "no since we have multiple keymanagers we only log the exception", "author": "tharindu1st", "createdAt": "2020-08-27T11:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MzkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0NzAzMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478347032", "bodyText": "okay. got it. yet what if it fails on all the keymanagers?", "author": "dushaniw", "createdAt": "2020-08-27T11:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MzkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM1OTEyNg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478359126", "bodyText": "we can store published key managers in database, @bhathiya ?", "author": "tharindu1st", "createdAt": "2020-08-27T11:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3MzkyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NTY0MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478275640", "bodyText": "shouldnt we set the name (display name) as well ?", "author": "dushaniw", "createdAt": "2020-08-27T09:16:43Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -8611,16 +8684,14 @@ public String addSharedScope(Scope scope, String tenantDomain) throws APIManagem\n         //Get all shared scopes\n         List<Scope> allSharedScopes = ApiMgtDAO.getInstance().getAllSharedScopes(tenantDomain);\n         //Get all scopes from KM\n-        Map<String, Scope> allScopes = KeyManagerHolder.getKeyManagerInstance(tenantDomain).getAllScopes();\n-        //Set name, roles and description to shared scopes\n+        List<Scope> allScopes = scopesDAO.getScopes(APIUtil.getTenantIdFromTenantDomain(tenantDomain));\n         for (Scope scope : allSharedScopes) {\n-            if (!allScopes.containsKey(scope.getKey())) {\n-                log.error(\"No matching scope found in authorization server for shared scope name: \" + scope.getKey());\n-            } else {\n-                Scope kmScope = allScopes.get(scope.getKey());\n-                scope.setName(kmScope.getName());\n-                scope.setRoles(kmScope.getRoles());\n-                scope.setDescription(kmScope.getDescription());\n+            for (Scope tempScope : allScopes) {\n+                if (scope.getKey().equals(tempScope.getKey())) {\n+                    scope.setDescription(tempScope.getDescription());", "originalCommit": "c307906be16ed14006f1952130ee783dd0531b16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NjkyMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478276922", "bodyText": "same here. formatting issues.\nShouldnt we throw the exception?", "author": "dushaniw", "createdAt": "2020-08-27T09:18:52Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -8679,8 +8750,20 @@ public void deleteSharedScope(String scopeName, String tenantDomain) throws APIM\n         if (log.isDebugEnabled()) {\n             log.debug(\"Deleting shared scope \" + scopeName);\n         }\n-        KeyManagerHolder.getKeyManagerInstance(tenantDomain).deleteScope(scopeName);\n-        ApiMgtDAO.getInstance().deleteSharedScope(scopeName, tenantDomain);\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n+        for (Map.Entry<String,KeyManagerDto> keyManagerEntry : tenantKeyManagers.entrySet()){\n+            KeyManager keyManager = keyManagerEntry.getValue().getKeyManager();\n+            if (keyManager != null){\n+                try{\n+                    keyManager.deleteScope(scopeName);\n+                }catch (APIManagementException e){\n+                    log.error(\"Error while Deleting Shared Scope \" + scopeName + \" from KeyManager \" +\n+                            keyManagerEntry.getKey(), e);", "originalCommit": "c307906be16ed14006f1952130ee783dd0531b16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM0NjIxNQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478346215", "bodyText": "no, since we have multiple key managers we only log the exception.\n@bhathiya  in here if we store key manager which we publish scope. we can iterate only those key managers and remove it.\nwdyt ?", "author": "tharindu1st", "createdAt": "2020-08-27T11:28:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NjkyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NzI0OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478277249", "bodyText": "same here. formatting issues.\nShouldnt we throw the exception?", "author": "dushaniw", "createdAt": "2020-08-27T09:19:17Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -8693,7 +8776,20 @@ public void deleteSharedScope(String scopeName, String tenantDomain) throws APIM\n     @Override\n     public void updateSharedScope(Scope sharedScope, String tenantDomain) throws APIManagementException {\n \n-        KeyManagerHolder.getKeyManagerInstance(tenantDomain).updateScope(sharedScope);\n+        int tenantId = APIUtil.getTenantIdFromTenantDomain(tenantDomain);\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n+        for (Map.Entry<String, KeyManagerDto> keyManagerEntry : tenantKeyManagers.entrySet()) {\n+            KeyManager keyManager = keyManagerEntry.getValue().getKeyManager();\n+            if (keyManager != null) {\n+                try{\n+                    keyManager.updateScope(sharedScope);\n+                }catch (APIManagementException e){", "originalCommit": "c307906be16ed14006f1952130ee783dd0531b16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NzQ0NA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r478277444", "bodyText": "formatting issues near {", "author": "dushaniw", "createdAt": "2020-08-27T09:19:39Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -8705,7 +8801,13 @@ public void updateSharedScope(Scope sharedScope, String tenantDomain) throws API\n     @Override\n     public void validateSharedScopes(Set<Scope> scopes, String tenantDomain) throws APIManagementException {\n \n-        KeyManagerHolder.getKeyManagerInstance(tenantDomain).validateScopes(scopes);\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n+        for (Map.Entry<String,KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()){", "originalCommit": "c307906be16ed14006f1952130ee783dd0531b16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6105dd4030baab19d1fb6cb54899625c04abedc9", "url": "https://github.com/wso2/carbon-apimgt/commit/6105dd4030baab19d1fb6cb54899625c04abedc9", "message": "fix review comments", "committedDate": "2020-08-27T11:49:21Z", "type": "commit"}, {"oid": "793184195d4062e7954747d14421eb0c9215665a", "url": "https://github.com/wso2/carbon-apimgt/commit/793184195d4062e7954747d14421eb0c9215665a", "message": "add scopes retriaval restapi for retrive scopes for Basic auth", "committedDate": "2020-08-31T07:56:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAyMDk4Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480020982", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            try{\n          \n          \n            \n                            try {", "author": "dushaniw", "createdAt": "2020-08-31T09:55:19Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -8588,9 +8648,24 @@ public boolean isSharedScopeNameExists(String scopeName, String tenantDomain) th\n     @Override\n     public String addSharedScope(Scope scope, String tenantDomain) throws APIManagementException {\n \n-        KeyManagerHolder.getKeyManagerInstance(tenantDomain).registerScope(scope);\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Adding shared scope mapping: \" + scope.getKey());\n+        Set<Scope> scopeSet = new HashSet<>();\n+        scopeSet.add(scope);\n+        int tenantId = APIUtil.getTenantIdFromTenantDomain(tenantDomain);\n+        addScopes(scopeSet, tenantId);\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n+        for (Map.Entry<String, KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()) {\n+            KeyManager keyManager = keyManagerDtoEntry.getValue().getKeyManager();\n+            if (keyManager != null) {\n+                try{", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAyMTA3NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480021075", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }catch (APIManagementException e){\n          \n          \n            \n                            } catch (APIManagementException e){", "author": "dushaniw", "createdAt": "2020-08-31T09:55:32Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -8588,9 +8648,24 @@ public boolean isSharedScopeNameExists(String scopeName, String tenantDomain) th\n     @Override\n     public String addSharedScope(Scope scope, String tenantDomain) throws APIManagementException {\n \n-        KeyManagerHolder.getKeyManagerInstance(tenantDomain).registerScope(scope);\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Adding shared scope mapping: \" + scope.getKey());\n+        Set<Scope> scopeSet = new HashSet<>();\n+        scopeSet.add(scope);\n+        int tenantId = APIUtil.getTenantIdFromTenantDomain(tenantDomain);\n+        addScopes(scopeSet, tenantId);\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n+        for (Map.Entry<String, KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()) {\n+            KeyManager keyManager = keyManagerDtoEntry.getValue().getKeyManager();\n+            if (keyManager != null) {\n+                try{\n+                    keyManager.registerScope(scope);\n+                }catch (APIManagementException e){", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAyNDE3OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480024178", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        log.debug(\"Scope \" + resourceScope + \" Didn't have roles\");\n          \n          \n            \n                                        log.debug(\"Scope \" + resourceScope + \" didn't have roles\");", "author": "dushaniw", "createdAt": "2020-08-31T10:02:24Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/basicauth/BasicAuthCredentialValidator.java", "diffHunk": "@@ -308,46 +193,49 @@ public boolean validateScopes(String username, OpenAPI openAPI, MessageContext s\n         String apiContext = (String) synCtx.getProperty(RESTConstants.REST_API_CONTEXT);\n         String apiVersion = (String) synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION);\n         String apiElectedResource = (String) synCtx.getProperty(APIConstants.API_ELECTED_RESOURCE);\n-\n-        String[] userRoles = userRoleList;\n+        String tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n         org.apache.axis2.context.MessageContext axis2MessageContext = ((Axis2MessageContext) synCtx)\n                 .getAxis2MessageContext();\n         String httpMethod = (String) axis2MessageContext.getProperty(APIConstants.DigestAuthConstants.HTTP_METHOD);\n         String resourceKey = apiContext + \":\" + apiVersion + \":\" + apiElectedResource + \":\" + httpMethod;\n+        Map<String, Scope> scopeMap = apiKeyValidator.retrieveScopes(tenantDomain);\n         String resourceCacheKey = resourceKey + \":\" + username;\n \n         if (gatewayKeyCacheEnabled && getGatewayBasicAuthResourceCache().get(resourceCacheKey) != null) {\n             return true;\n         }\n \n         if (openAPI != null) {\n-            String resourceRoles = null;\n             // retrieve the user roles related to the scope of the API resource\n             List<String> resourceScopes = OpenAPIUtils.getScopesOfResource(openAPI, synCtx);\n             List<String> resourceRolesList = new ArrayList<>();\n             if (resourceScopes != null && resourceScopes.size() > 0) {\n                 for (String resourceScope : resourceScopes) {\n-                    String roles = OpenAPIUtils.getRolesOfScope(openAPI, synCtx, resourceScope);\n-                    if (StringUtils.isNotEmpty(roles)) {\n-                        resourceRolesList.add(roles);\n+                    Scope scope = scopeMap.get(resourceScope);\n+                    if (scope != null) {\n+                        if (scope.getRoles().isEmpty()) {\n+                            log.debug(\"Scope \" + resourceScope + \" Didn't have roles\");", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAyNjA1MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480026051", "bodyText": "Isn't it necessary to add to gateway key cache before returning ?", "author": "dushaniw", "createdAt": "2020-08-31T10:06:34Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/basicauth/BasicAuthCredentialValidator.java", "diffHunk": "@@ -308,46 +193,49 @@ public boolean validateScopes(String username, OpenAPI openAPI, MessageContext s\n         String apiContext = (String) synCtx.getProperty(RESTConstants.REST_API_CONTEXT);\n         String apiVersion = (String) synCtx.getProperty(RESTConstants.SYNAPSE_REST_API_VERSION);\n         String apiElectedResource = (String) synCtx.getProperty(APIConstants.API_ELECTED_RESOURCE);\n-\n-        String[] userRoles = userRoleList;\n+        String tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n         org.apache.axis2.context.MessageContext axis2MessageContext = ((Axis2MessageContext) synCtx)\n                 .getAxis2MessageContext();\n         String httpMethod = (String) axis2MessageContext.getProperty(APIConstants.DigestAuthConstants.HTTP_METHOD);\n         String resourceKey = apiContext + \":\" + apiVersion + \":\" + apiElectedResource + \":\" + httpMethod;\n+        Map<String, Scope> scopeMap = apiKeyValidator.retrieveScopes(tenantDomain);\n         String resourceCacheKey = resourceKey + \":\" + username;\n \n         if (gatewayKeyCacheEnabled && getGatewayBasicAuthResourceCache().get(resourceCacheKey) != null) {\n             return true;\n         }\n \n         if (openAPI != null) {\n-            String resourceRoles = null;\n             // retrieve the user roles related to the scope of the API resource\n             List<String> resourceScopes = OpenAPIUtils.getScopesOfResource(openAPI, synCtx);\n             List<String> resourceRolesList = new ArrayList<>();\n             if (resourceScopes != null && resourceScopes.size() > 0) {\n                 for (String resourceScope : resourceScopes) {\n-                    String roles = OpenAPIUtils.getRolesOfScope(openAPI, synCtx, resourceScope);\n-                    if (StringUtils.isNotEmpty(roles)) {\n-                        resourceRolesList.add(roles);\n+                    Scope scope = scopeMap.get(resourceScope);\n+                    if (scope != null) {\n+                        if (scope.getRoles().isEmpty()) {\n+                            log.debug(\"Scope \" + resourceScope + \" Didn't have roles\");\n+                            return true;", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1NTU0Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480055543", "bodyText": "since this was a memory map no need to cache it", "author": "tharindu1st", "createdAt": "2020-08-31T11:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAyNjA1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAzMzU4Nw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480033587", "bodyText": "instead 2nd for loop can't we check\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            for (String operationRole : operationRoles) {\n          \n          \n            \n                               if (operationRoles.contains(role)) {\n          \n          \n            \n                               }", "author": "dushaniw", "createdAt": "2020-08-31T10:22:48Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/handlers/security/basicauth/BasicAuthCredentialValidator.java", "diffHunk": "@@ -367,27 +255,35 @@ public boolean validateScopes(String username, OpenAPI openAPI, MessageContext s\n         } else if (APIConstants.GRAPHQL_API.equals(synCtx.getProperty(APIConstants.API_TYPE))) {\n             HashMap<String, String> operationScopeMappingList = (HashMap<String, String>) synCtx\n                     .getProperty(APIConstants.SCOPE_OPERATION_MAPPING);\n-            HashMap<String, ArrayList<String>> scopeRoleMappingList = (HashMap<String, ArrayList<String>>) synCtx\n-                    .getProperty(APIConstants.SCOPE_ROLE_MAPPING);\n             String[] operationList = ((String) synCtx.getProperty(APIConstants.API_ELECTED_RESOURCE)).split(\",\");\n             for (String operation : operationList) {\n                 String operationScope = operationScopeMappingList.get(operation);\n                 if (operationScope != null) {\n-                    ArrayList<String> operationRoles = scopeRoleMappingList.get(operationScope);\n-                    boolean userHasOperationRole = false;\n-                    for (String role : userRoles) {\n-                        for (String operationRole : operationRoles) {\n-                            if (operationRole.equals(role)) {\n-                                userHasOperationRole = true;\n-                                break;\n+                    if (scopeMap.containsKey(operationScope)) {\n+                        List<String> operationRoles = scopeMap.get(operationScope).getRoles();\n+                        boolean userHasOperationRole = false;\n+                        if (operationRoles.isEmpty()) {\n+                            userHasOperationRole = true;\n+                        } else {\n+                            for (String role : userRoleList) {\n+                                for (String operationRole : operationRoles) {", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAzNzY5NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480037695", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }else if (EventType.SCOPE_UPDATE.toString().equals(eventType)) {\n          \n          \n            \n                    } else if (EventType.SCOPE_UPDATE.toString().equals(eventType)) {", "author": "dushaniw", "createdAt": "2020-08-31T10:32:37Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -196,6 +198,15 @@ private void handleNotificationMessage(String eventType, long timestamp, String\n         } else if (EventType.APPLICATION_DELETE.toString().equals(eventType)) {\n             ApplicationEvent event = new Gson().fromJson(eventJson, ApplicationEvent.class);\n             ServiceReferenceHolder.getInstance().getKeyManagerDataService().removeApplication(event);\n+        } else if (EventType.SCOPE_CREATE.toString().equals(eventType)) {\n+            ScopeEvent event = new Gson().fromJson(eventJson,ScopeEvent.class);\n+            ServiceReferenceHolder.getInstance().getKeyManagerDataService().addScope(event);\n+        }else if (EventType.SCOPE_UPDATE.toString().equals(eventType)) {", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAzNzgyMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480037821", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }else if (EventType.SCOPE_DELETE.toString().equals(eventType)) {\n          \n          \n            \n                    } else if (EventType.SCOPE_DELETE.toString().equals(eventType)) {", "author": "dushaniw", "createdAt": "2020-08-31T10:32:55Z", "path": "components/apimgt/org.wso2.carbon.apimgt.gateway/src/main/java/org/wso2/carbon/apimgt/gateway/listeners/GatewayJMSMessageListener.java", "diffHunk": "@@ -196,6 +198,15 @@ private void handleNotificationMessage(String eventType, long timestamp, String\n         } else if (EventType.APPLICATION_DELETE.toString().equals(eventType)) {\n             ApplicationEvent event = new Gson().fromJson(eventJson, ApplicationEvent.class);\n             ServiceReferenceHolder.getInstance().getKeyManagerDataService().removeApplication(event);\n+        } else if (EventType.SCOPE_CREATE.toString().equals(eventType)) {\n+            ScopeEvent event = new Gson().fromJson(eventJson,ScopeEvent.class);\n+            ServiceReferenceHolder.getInstance().getKeyManagerDataService().addScope(event);\n+        }else if (EventType.SCOPE_UPDATE.toString().equals(eventType)) {\n+            ScopeEvent event = new Gson().fromJson(eventJson,ScopeEvent.class);\n+            ServiceReferenceHolder.getInstance().getKeyManagerDataService().addScope(event);\n+        }else if (EventType.SCOPE_DELETE.toString().equals(eventType)) {", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0MDUwMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480040503", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            \" in Key Manager\");\n          \n          \n            \n                                            \" in Key Manager \" + keyManagerDtoEntry.getKey() + \".\");", "author": "dushaniw", "createdAt": "2020-08-31T10:39:23Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -1644,10 +1678,24 @@ private void updateAPIResources(API api, int tenantId) throws APIManagementExcep\n         // Update the resource scopes of the API in KM.\n         // Need to remove the old local scopes and register new local scopes and, update the resource scope mappings\n         // using the updated URI templates of the API.\n-        KeyManagerHolder.getKeyManagerInstance(tenantDomain).updateResourceScopes(api, oldLocalScopeKeys, newLocalScopes,\n-                oldURITemplates, uriTemplates);\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Successfully updated the resource scopes of API: \" + apiIdentifier + \" in Key Manager\");\n+        deleteScopes(oldLocalScopeKeys, tenantId);\n+        addScopes(newLocalScopes, tenantId);\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n+        for (Map.Entry<String, KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()) {\n+            KeyManager keyManager = keyManagerDtoEntry.getValue().getKeyManager();\n+            if (keyManager != null) {\n+                try {\n+                    keyManager.updateResourceScopes(api, oldLocalScopeKeys, newLocalScopes, oldURITemplates,\n+                            uriTemplates);\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Successfully updated the resource scopes of API: \" + apiIdentifier +\n+                                \" in Key Manager\");", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0MTIxMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480041212", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }catch (APIManagementException e){\n          \n          \n            \n                            }catch (APIManagementException e) {", "author": "dushaniw", "createdAt": "2020-08-31T10:41:05Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -8588,9 +8648,24 @@ public boolean isSharedScopeNameExists(String scopeName, String tenantDomain) th\n     @Override\n     public String addSharedScope(Scope scope, String tenantDomain) throws APIManagementException {\n \n-        KeyManagerHolder.getKeyManagerInstance(tenantDomain).registerScope(scope);\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Adding shared scope mapping: \" + scope.getKey());\n+        Set<Scope> scopeSet = new HashSet<>();\n+        scopeSet.add(scope);\n+        int tenantId = APIUtil.getTenantIdFromTenantDomain(tenantDomain);\n+        addScopes(scopeSet, tenantId);\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n+        for (Map.Entry<String, KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()) {\n+            KeyManager keyManager = keyManagerDtoEntry.getValue().getKeyManager();\n+            if (keyManager != null) {\n+                try{\n+                    keyManager.registerScope(scope);\n+                }catch (APIManagementException e){", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0MTQ2Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480041462", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }catch (APIManagementException e){\n          \n          \n            \n                            } catch (APIManagementException e) {", "author": "dushaniw", "createdAt": "2020-08-31T10:41:39Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -8588,9 +8648,24 @@ public boolean isSharedScopeNameExists(String scopeName, String tenantDomain) th\n     @Override\n     public String addSharedScope(Scope scope, String tenantDomain) throws APIManagementException {\n \n-        KeyManagerHolder.getKeyManagerInstance(tenantDomain).registerScope(scope);\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Adding shared scope mapping: \" + scope.getKey());\n+        Set<Scope> scopeSet = new HashSet<>();\n+        scopeSet.add(scope);\n+        int tenantId = APIUtil.getTenantIdFromTenantDomain(tenantDomain);\n+        addScopes(scopeSet, tenantId);\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n+        for (Map.Entry<String, KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()) {\n+            KeyManager keyManager = keyManagerDtoEntry.getValue().getKeyManager();\n+            if (keyManager != null) {\n+                try{\n+                    keyManager.registerScope(scope);\n+                }catch (APIManagementException e){", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0MjYwMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480042601", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (scopes != null){\n          \n          \n            \n                    if (scopes != null) {", "author": "dushaniw", "createdAt": "2020-08-31T10:43:20Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -8913,4 +9018,53 @@ private JSONObject getSecurityAuditConfigurationProperties(String tenantDomain)\n         }\n         return removedReusedResources;\n     }\n+    private void addScopes(Set<Scope> scopes, int tenantId) throws APIManagementException {\n+        if (scopes != null){", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0NzQyMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480047420", "bodyText": "shouldn't we also delete the local scopes from AM_SCOPES ?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            deleteScopes(localScopeKeysToDelete, tenantId);", "author": "dushaniw", "createdAt": "2020-08-31T10:51:33Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -4274,19 +4322,31 @@ private void deleteAPI(API api) throws APIManagementException {\n         // Get the URI Templates for the given API to detach the resources scopes from\n         Set<URITemplate> uriTemplates = apiMgtDAO.getURITemplatesOfAPI(apiIdentifier);\n         // Detach all the resource scopes from the API resources in KM\n-        KeyManagerHolder.getKeyManagerInstance(tenantDomain).detachResourceScopes(api, uriTemplates);\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Resource scopes are successfully detached for the API : \" + apiIdentifier\n-                    + \" from KeyManager.\");\n-        }\n-        // remove the local scopes from the KM\n-        for (String localScope : localScopeKeysToDelete) {\n-            KeyManagerHolder.getKeyManagerInstance(tenantDomain).deleteScope(localScope);\n-        }\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Local scopes are successfully deleted for the API : \" + apiIdentifier\n-                    + \" from KeyManager.\");\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n+        for (Map.Entry<String, KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()) {\n+            KeyManager keyManager = keyManagerDtoEntry.getValue().getKeyManager();\n+            if (keyManager != null) {\n+                try {\n+                    keyManager.detachResourceScopes(api, uriTemplates);\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Resource scopes are successfully detached for the API : \" + apiIdentifier\n+                                + \" from KeyManager :\" + keyManagerDtoEntry.getKey() + \".\");\n+                    }\n+                    // remove the local scopes from the KM\n+                    for (String localScope : localScopeKeysToDelete) {\n+                        keyManager.deleteScope(localScope);\n+                    }\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Local scopes are successfully deleted for the API : \" + apiIdentifier\n+                                + \" from KeyManager : \" + keyManagerDtoEntry.getKey() + \".\");\n+                    }\n+                } catch (APIManagementException e) {\n+                    log.error(\"Error while Detach and Delete Scope from KeyManager \" + keyManagerDtoEntry.getKey());\n+                }\n+            }\n         }\n+", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0OTU1MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480049550", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    tenantDomain,scope.getKey(),scope.getName(),scope.getDescription());\n          \n          \n            \n            tenantDomain, scope.getKey(), scope.getName(), scope.getDescription());", "author": "dushaniw", "createdAt": "2020-08-31T10:56:55Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -8913,4 +9018,53 @@ private JSONObject getSecurityAuditConfigurationProperties(String tenantDomain)\n         }\n         return removedReusedResources;\n     }\n+    private void addScopes(Set<Scope> scopes, int tenantId) throws APIManagementException {\n+        if (scopes != null){\n+            scopesDAO.addScopes(scopes, tenantId);\n+            for (Scope scope : scopes) {\n+                ScopeEvent scopeEvent = new ScopeEvent(UUID.randomUUID().toString(),\n+                        System.currentTimeMillis(), APIConstants.EventType.SCOPE_CREATE.name(), tenantId,\n+                        tenantDomain,scope.getKey(),scope.getName(),scope.getDescription());", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1MDM2OQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480050369", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (StringUtils.isNotEmpty(scope.getRoles())&& scope.getRoles().trim().length()>0){\n          \n          \n            \n                            if (StringUtils.isNotEmpty(scope.getRoles()) && scope.getRoles().trim().length() > 0) {", "author": "dushaniw", "createdAt": "2020-08-31T10:57:48Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -8913,4 +9018,53 @@ private JSONObject getSecurityAuditConfigurationProperties(String tenantDomain)\n         }\n         return removedReusedResources;\n     }\n+    private void addScopes(Set<Scope> scopes, int tenantId) throws APIManagementException {\n+        if (scopes != null){\n+            scopesDAO.addScopes(scopes, tenantId);\n+            for (Scope scope : scopes) {\n+                ScopeEvent scopeEvent = new ScopeEvent(UUID.randomUUID().toString(),\n+                        System.currentTimeMillis(), APIConstants.EventType.SCOPE_CREATE.name(), tenantId,\n+                        tenantDomain,scope.getKey(),scope.getName(),scope.getDescription());\n+                if (StringUtils.isNotEmpty(scope.getRoles())&& scope.getRoles().trim().length()>0){", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1ODg0NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480058845", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new APIManagementException(\"Error while deleting scopes from db\", e,\n          \n          \n            \n                            throw new APIManagementException(\"Error while retrieving scopes from db\", e,", "author": "dushaniw", "createdAt": "2020-08-31T11:08:55Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ScopesDAO.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.apimgt.impl.dao;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.apimgt.api.APIManagementException;\n+import org.wso2.carbon.apimgt.api.ExceptionCodes;\n+import org.wso2.carbon.apimgt.api.model.Scope;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.dao.constants.SQLConstants;\n+import org.wso2.carbon.apimgt.impl.utils.APIMgtDBUtil;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ *  This class used to manage Scopes related dao operations.\n+ */\n+public class ScopesDAO {\n+\n+    private static final Log log = LogFactory.getLog(ScopesDAO.class);\n+    private static final ScopesDAO INSTANCE = new ScopesDAO();\n+\n+    public static ScopesDAO getInstance() {\n+\n+        return INSTANCE;\n+    }\n+\n+    private ScopesDAO() {\n+\n+    }\n+\n+    public boolean addScopes(Set<Scope> scopeSet, int tenantId) throws APIManagementException {\n+\n+        if (scopeSet == null || scopeSet.isEmpty()) {\n+            return false;\n+        }\n+        try (Connection connection = APIMgtDBUtil.getConnection()) {\n+            connection.setAutoCommit(false);\n+            try {\n+                for (Scope scope : scopeSet) {\n+                    if (!isScopeExist(connection, scope.getKey(), tenantId)) {\n+                        try (PreparedStatement preparedStatement = connection\n+                                .prepareStatement(SQLConstants.INSERT_SCOPE_SQL)) {\n+                            preparedStatement.setString(1, scope.getKey());\n+                            preparedStatement.setString(2, scope.getName());\n+                            preparedStatement.setString(3, scope.getDescription());\n+                            preparedStatement.setInt(4, tenantId);\n+                            preparedStatement.setString(5, APIConstants.DEFAULT_SCOPE_TYPE);\n+                            preparedStatement.executeUpdate();\n+                            addScopeBindings(connection, scope, tenantId);\n+                        }\n+                    }\n+                }\n+                connection.commit();\n+                return true;\n+            } catch (SQLException e) {\n+                log.error(\"Error while saving scopes into db\", e);\n+                connection.rollback();\n+                throw new APIManagementException(\"Error while saving scopes into db\", e, ExceptionCodes.INTERNAL_ERROR);\n+            }\n+        } catch (SQLException e) {\n+            throw new APIManagementException(\"Error while retrieving database connection\", e,\n+                    ExceptionCodes.INTERNAL_ERROR);\n+        }\n+    }\n+\n+    public boolean updateScope(Scope scope, int tenantId) throws APIManagementException {\n+\n+        try (Connection connection = APIMgtDBUtil.getConnection()) {\n+            connection.setAutoCommit(false);\n+            try (PreparedStatement preparedStatement = connection.prepareStatement(SQLConstants.UPDATE_SCOPE_SQL)) {\n+                preparedStatement.setString(1, scope.getName());\n+                preparedStatement.setString(2, scope.getDescription());\n+                preparedStatement.setString(3, scope.getKey());\n+                preparedStatement.setInt(4, tenantId);\n+                preparedStatement.executeUpdate();\n+                deleteScopeBindings(connection, scope.getKey(), tenantId);\n+                addScopeBindings(connection, scope, tenantId);\n+                connection.commit();\n+                return true;\n+            } catch (SQLException e) {\n+                log.error(\"Error while updating scopes into db\", e);\n+                connection.rollback();\n+                throw new APIManagementException(\"Error while updating scopes into db\", e,\n+                        ExceptionCodes.INTERNAL_ERROR);\n+            }\n+        } catch (SQLException e) {\n+            throw new APIManagementException(\"Error while retrieving database connection\", e,\n+                    ExceptionCodes.INTERNAL_ERROR);\n+        }\n+    }\n+\n+    public boolean deleteScope(String scopeName, int tenantId) throws APIManagementException {\n+\n+        try (Connection connection = APIMgtDBUtil.getConnection()) {\n+            connection.setAutoCommit(false);\n+            try (PreparedStatement preparedStatement = connection.prepareStatement(SQLConstants.DELETE_SCOPE_SQL)) {\n+                preparedStatement.setString(1, scopeName);\n+                preparedStatement.setInt(2, tenantId);\n+                preparedStatement.executeUpdate();\n+                connection.commit();\n+                return true;\n+            } catch (SQLException e) {\n+                log.error(\"Error while deleting scopes from db\", e);\n+                connection.rollback();\n+                throw new APIManagementException(\"Error while deleting scopes from db\", e,\n+                        ExceptionCodes.INTERNAL_ERROR);\n+            }\n+        } catch (SQLException e) {\n+            throw new APIManagementException(\"Error while retrieving database connection\", e,\n+                    ExceptionCodes.INTERNAL_ERROR);\n+        }\n+    }\n+\n+    public boolean deleteScopes(Set<String> scopes, int tenantId) throws APIManagementException {\n+\n+        try (Connection connection = APIMgtDBUtil.getConnection()) {\n+            connection.setAutoCommit(false);\n+            try (PreparedStatement preparedStatement = connection.prepareStatement(SQLConstants.DELETE_SCOPE_SQL)) {\n+                for (String scope : scopes) {\n+                    preparedStatement.setString(1, scope);\n+                    preparedStatement.setInt(2, tenantId);\n+                    preparedStatement.addBatch();\n+                }\n+                preparedStatement.executeBatch();\n+                connection.commit();\n+                return true;\n+            } catch (SQLException e) {\n+                log.error(\"Error while deleting scopes from db\", e);\n+                connection.rollback();\n+                throw new APIManagementException(\"Error while deleting scopes from db\", e,\n+                        ExceptionCodes.INTERNAL_ERROR);\n+            }\n+        } catch (SQLException e) {\n+            throw new APIManagementException(\"Error while retrieving database connection\", e,\n+                    ExceptionCodes.INTERNAL_ERROR);\n+        }\n+    }\n+\n+    public Scope getScope(String name, int tenantId) throws APIManagementException {\n+\n+        try (Connection connection = APIMgtDBUtil.getConnection()) {\n+            try (PreparedStatement preparedStatement = connection.prepareStatement(SQLConstants.GET_SCOPE_SQL)) {\n+                preparedStatement.setString(1, name);\n+                preparedStatement.setInt(2, tenantId);\n+                try (ResultSet resultSet = preparedStatement.executeQuery()) {\n+                    if (resultSet.next()) {\n+                        String displayName = resultSet.getString(\"DISPLAY_NAME\");\n+                        String description = resultSet.getString(\"DESCRIPTION\");\n+                        Scope scope = new Scope();\n+                        scope.setName(displayName);\n+                        scope.setDescription(description);\n+                        scope.setKey(name);\n+                        scope.setRoles(String.join(\",\", getScopeBindings(connection, name, tenantId)));\n+                        return scope;\n+                    }\n+                }\n+            } catch (SQLException e) {\n+                log.error(\"Error while deleting scopes from db\", e);\n+                throw new APIManagementException(\"Error while deleting scopes from db\", e,", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2ODE3OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480068178", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                title: ApplicationKeyMapping List\n          \n          \n            \n                title: Scopes List", "author": "dushaniw", "createdAt": "2020-08-31T11:27:41Z", "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/resources/api.yaml", "diffHunk": "@@ -832,6 +856,43 @@ definitions:\n       keyManager:\n         type: string\n \n+  #-----------------------------------------------------\n+  # The Scopes List resource\n+  #-----------------------------------------------------\n+  ScopesList:\n+    title: ApplicationKeyMapping List", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2ODMyMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480068321", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      Number of ApplicationKeyMappings returned.\n          \n          \n            \n                      Number of Scopes returned.", "author": "dushaniw", "createdAt": "2020-08-31T11:28:05Z", "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/resources/api.yaml", "diffHunk": "@@ -832,6 +856,43 @@ definitions:\n       keyManager:\n         type: string\n \n+  #-----------------------------------------------------\n+  # The Scopes List resource\n+  #-----------------------------------------------------\n+  ScopesList:\n+    title: ApplicationKeyMapping List\n+    properties:\n+      count:\n+        type: integer\n+        description: |\n+          Number of ApplicationKeyMappings returned.", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2ODgwOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480068809", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              # The Application Key Mapping resource\n          \n          \n            \n              # The Scope resource", "author": "dushaniw", "createdAt": "2020-08-31T11:29:19Z", "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/resources/api.yaml", "diffHunk": "@@ -832,6 +856,43 @@ definitions:\n       keyManager:\n         type: string\n \n+  #-----------------------------------------------------\n+  # The Scopes List resource\n+  #-----------------------------------------------------\n+  ScopesList:\n+    title: ApplicationKeyMapping List\n+    properties:\n+      count:\n+        type: integer\n+        description: |\n+          Number of ApplicationKeyMappings returned.\n+        example: 1\n+      list:\n+        type: array\n+        items:\n+          $ref: '#/definitions/Scope'\n+      pagination:\n+        $ref: '#/definitions/Pagination'\n+  #-----------------------------------------------------\n+  # The Application Key Mapping resource", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2OTE4MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480069180", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"description\" : \"Number of ApplicationKeyMappings returned.\\n\"\n          \n          \n            \n                      \"description\" : \"Number of Scopes returned.\\n\"", "author": "dushaniw", "createdAt": "2020-08-31T11:30:12Z", "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/swagger.json", "diffHunk": "@@ -1018,6 +1052,44 @@\n         }\n       }\n     },\n+    \"ScopesList\" : {\n+      \"properties\" : {\n+        \"count\" : {\n+          \"type\" : \"integer\",\n+          \"example\" : 1,\n+          \"description\" : \"Number of ApplicationKeyMappings returned.\\n\"", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA2OTMzNA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480069334", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"title\" : \"ApplicationKeyMapping List\"\n          \n          \n            \n                  \"title\" : \"Scopes List\"", "author": "dushaniw", "createdAt": "2020-08-31T11:30:31Z", "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/swagger.json", "diffHunk": "@@ -1018,6 +1052,44 @@\n         }\n       }\n     },\n+    \"ScopesList\" : {\n+      \"properties\" : {\n+        \"count\" : {\n+          \"type\" : \"integer\",\n+          \"example\" : 1,\n+          \"description\" : \"Number of ApplicationKeyMappings returned.\\n\"\n+        },\n+        \"list\" : {\n+          \"type\" : \"array\",\n+          \"items\" : {\n+            \"$ref\" : \"#/definitions/Scope\"\n+          }\n+        },\n+        \"pagination\" : {\n+          \"$ref\" : \"#/definitions/Pagination\"\n+        }\n+      },\n+      \"title\" : \"ApplicationKeyMapping List\"", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNDk1OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480324958", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n          \n          \n            \n                            log.debug(\"Ignoring the event as the tenant \" + event.getTenantDomain() + \" is not loaded\");", "author": "bhathiya", "createdAt": "2020-08-31T18:56:14Z", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/service/KeyManagerDataServiceImpl.java", "diffHunk": "@@ -270,6 +272,43 @@ public void removeAPIPolicy(APIPolicyEvent event) {\n         store.removeApiPolicy(getAPIPolicyFromAPIPolicyEvent(event));\n     }\n \n+    @Override\n+    public void addScope(ScopeEvent event) {\n+\n+        Scope scope = new Scope();\n+        scope.setName(event.getName());\n+        scope.setRoles(event.getRoles());\n+        scope.setDisplayName(event.getDisplayName());\n+        scope.setDescription(event.getDescription());\n+        scope.setTimeStamp(event.getTimeStamp());\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNTI2MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480325260", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n          \n          \n            \n                            log.debug(\"Ignoring the event as the tenant \" + event.getTenantDomain() + \" is not loaded\");", "author": "bhathiya", "createdAt": "2020-08-31T18:56:47Z", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/service/KeyManagerDataServiceImpl.java", "diffHunk": "@@ -270,6 +272,43 @@ public void removeAPIPolicy(APIPolicyEvent event) {\n         store.removeApiPolicy(getAPIPolicyFromAPIPolicyEvent(event));\n     }\n \n+    @Override\n+    public void addScope(ScopeEvent event) {\n+\n+        Scope scope = new Scope();\n+        scope.setName(event.getName());\n+        scope.setRoles(event.getRoles());\n+        scope.setDisplayName(event.getDisplayName());\n+        scope.setDescription(event.getDescription());\n+        scope.setTimeStamp(event.getTimeStamp());\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");\n+            }\n+            return;\n+        }\n+        store.addOrUpdateScope(scope);\n+    }\n+\n+    @Override\n+    public void deleteScope(ScopeEvent event) {\n+\n+        Scope scope = new Scope();\n+        scope.setName(event.getName());\n+        scope.setTimeStamp(event.getTimeStamp());\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the Event due to tenant \" + event.getTenantDomain() + \" not loaded\");", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4ODQxOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r482688419", "bodyText": "still missing the is part everywhere.", "author": "bhathiya", "createdAt": "2020-09-03T03:56:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNTI2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNzQ3Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480327473", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        scopes = (new Gson().fromJson(responseString, ScopesList.class)).getList();\n          \n          \n            \n                        scopes = new Gson().fromJson(responseString, ScopesList.class).getList();", "author": "bhathiya", "createdAt": "2020-08-31T19:00:43Z", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/model/impl/SubscriptionDataLoaderImpl.java", "diffHunk": "@@ -374,6 +376,25 @@ public ApiPolicy getAPIPolicy(String policyName, String tenantDomain) throws Dat\n         return apiPolicy;\n     }\n \n+    @Override\n+    public List<Scope> loadAllScopes(String tenantDomain) throws DataLoadingException {\n+        String scopesEp = APIConstants.SubscriptionValidationResources.SCOPES;\n+        List<Scope> scopes = new ArrayList<>();\n+        String responseString;\n+        try {\n+            responseString = invokeService(scopesEp, tenantDomain);\n+        } catch (IOException e) {\n+            String msg = \"Error while executing the http client \" + scopesEp;\n+            log.error(msg, e);\n+            throw new DataLoadingException(msg, e);\n+        }\n+        if (responseString != null && !responseString.isEmpty()) {\n+            scopes = (new Gson().fromJson(responseString, ScopesList.class)).getList();", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyNzY0OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480327648", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String msg = \"Error while executing the http client \" + scopesEp;\n          \n          \n            \n                        String msg = \"Error while executing the HTTP client \" + scopesEp;", "author": "bhathiya", "createdAt": "2020-08-31T19:01:04Z", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/model/impl/SubscriptionDataLoaderImpl.java", "diffHunk": "@@ -374,6 +376,25 @@ public ApiPolicy getAPIPolicy(String policyName, String tenantDomain) throws Dat\n         return apiPolicy;\n     }\n \n+    @Override\n+    public List<Scope> loadAllScopes(String tenantDomain) throws DataLoadingException {\n+        String scopesEp = APIConstants.SubscriptionValidationResources.SCOPES;\n+        List<Scope> scopes = new ArrayList<>();\n+        String responseString;\n+        try {\n+            responseString = invokeService(scopesEp, tenantDomain);\n+        } catch (IOException e) {\n+            String msg = \"Error while executing the http client \" + scopesEp;", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyOTc4Mw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480329783", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                log.error(\"Error while Attaching Resource to scope in KeyManager \" + keyManagerDtoEntry.getKey(),\n          \n          \n            \n                                log.error(\"Error while Attaching Resource to scope in Key Manager \" + keyManagerDtoEntry.getKey(),", "author": "bhathiya", "createdAt": "2020-08-31T19:05:23Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -989,10 +1002,20 @@ private void addURITemplates(int apiId, API api, int tenantId) throws APIManagem\n \n         String tenantDomain = APIUtil.getTenantDomainFromTenantId(tenantId);\n         apiMgtDAO.addURITemplates(apiId, api, tenantId);\n-        KeyManagerHolder.getKeyManagerInstance(tenantDomain).attachResourceScopes(api, api.getUriTemplates());\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n+        for (Map.Entry<String, KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()) {\n+            KeyManager keyManager = keyManagerDtoEntry.getValue().getKeyManager();\n+            if (keyManager != null) {\n+                try {\n+                    keyManager.attachResourceScopes(api, api.getUriTemplates());\n+                } catch (APIManagementException e) {\n+                    log.error(\"Error while Attaching Resource to scope in KeyManager \" + keyManagerDtoEntry.getKey(),", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMDY4MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480330680", "bodyText": "Please change all occurrences of \"KeyManager\" in logs and messages to \"Key Manager\".", "author": "bhathiya", "createdAt": "2020-08-31T19:06:57Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -1002,21 +1025,32 @@ private void addURITemplates(int apiId, API api, int tenantId) throws APIManagem\n      */\n     private void registerOrUpdateResourceInKeyManager(API api, String tenantDomain) throws APIManagementException {\n         //get new key manager instance for  resource registration.\n-        KeyManager keyManager = KeyManagerHolder.getKeyManagerInstance(tenantDomain);\n-        Map registeredResource = keyManager.getResourceByApiId(api.getId().toString());\n-        if (registeredResource == null) {\n-            boolean isNewResourceRegistered = keyManager.registerNewResource(api, null);\n-            if (!isNewResourceRegistered) {\n-                handleException(\"APIResource registration is failed while adding the API- \" + api.getId().getApiName()\n-                        + \"-\" + api.getId().getVersion());\n-            }\n-        } else {\n-            //update APIResource.\n-            String resourceId = (String) registeredResource.get(\"resourceId\");\n-            if (resourceId == null) {\n-                handleException(\"APIResource update is failed because of empty resourceID.\");\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n+        for (Map.Entry<String, KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()) {\n+            KeyManager keyManager = keyManagerDtoEntry.getValue().getKeyManager();\n+            if (keyManager != null) {\n+                try {\n+                    Map registeredResource = keyManager.getResourceByApiId(api.getId().toString());\n+                    if (registeredResource == null) {\n+                        boolean isNewResourceRegistered = keyManager.registerNewResource(api, null);\n+                        if (!isNewResourceRegistered) {\n+                            log.warn(\"APIResource registration is failed while adding the API- \" +\n+                                    api.getId().getApiName()\n+                                    + \"-\" + api.getId().getVersion() + \" into KeyManager : \" +\n+                                    keyManagerDtoEntry.getKey());\n+                        }\n+                    } else {\n+                        //update APIResource.\n+                        String resourceId = (String) registeredResource.get(\"resourceId\");\n+                        if (resourceId == null) {\n+                            handleException(\"APIResource update is failed because of empty resourceID.\");\n+                        }\n+                        keyManager.updateRegisteredResource(api, registeredResource);\n+                    }\n+                } catch (APIManagementException e) {\n+                    log.error(\"API Resource Registration failed in KeyManager \" + keyManagerDtoEntry.getKey(), e);", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTA2Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r480331062", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    log.error(\"Error while registering Scope \" + scopeKey + \"in KeyManager \" +\n          \n          \n            \n                                    log.error(\"Error while registering scope \" + scopeKey + \" in Key Manager \" +", "author": "bhathiya", "createdAt": "2020-08-31T19:07:41Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java", "diffHunk": "@@ -912,22 +911,36 @@ private void addLocalScopes(APIIdentifier apiIdentifier, int tenantId, Set<URITe\n             throws APIManagementException {\n \n         String tenantDomain = APIUtil.getTenantDomainFromTenantId(tenantId);\n-        KeyManager keyManager = KeyManagerHolder.getKeyManagerInstance(tenantDomain);\n+        Map<String, KeyManagerDto> tenantKeyManagers = KeyManagerHolder.getTenantKeyManagers(tenantDomain);\n         //Get the local scopes set to register for the API from URI templates\n         Set<Scope> scopesToRegister = getScopesToRegisterFromURITemplates(apiIdentifier, tenantId, uriTemplates);\n         //Register scopes\n         for (Scope scope : scopesToRegister) {\n-            String scopeKey = scope.getKey();\n-            // Check if key already registered in KM. Scope Key may be already registered for a different version.\n-            if (!keyManager.isScopeExists(scopeKey)) {\n-                //register scope in KM\n-                keyManager.registerScope(scope);\n-            } else {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Scope: \" + scopeKey + \" already registered in KM. Skipping registering scope.\");\n+            for (Map.Entry<String, KeyManagerDto> keyManagerDtoEntry : tenantKeyManagers.entrySet()) {\n+                KeyManager keyManager = keyManagerDtoEntry.getValue().getKeyManager();\n+                if (keyManager != null) {\n+                    String scopeKey = scope.getKey();\n+                    try {\n+                        // Check if key already registered in KM. Scope Key may be already registered for a different\n+                        // version.\n+                        if (!keyManager.isScopeExists(scopeKey)) {\n+                            //register scope in KM\n+                            keyManager.registerScope(scope);\n+                        } else {\n+                            if (log.isDebugEnabled()) {\n+                                log.debug(\"Scope: \" + scopeKey +\n+                                        \" already registered in KM. Skipping registering scope.\");\n+                            }\n+                        }\n+                    } catch (APIManagementException e) {\n+                        log.error(\"Error while registering Scope \" + scopeKey + \"in KeyManager \" +", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNTkyOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r481735929", "bodyText": "shouldn't this is 'get all scopes of a tenant'?", "author": "isharac", "createdAt": "2020-09-02T05:41:56Z", "path": "components/apimgt/org.wso2.carbon.apimgt.internal.service/src/main/resources/api.yaml", "diffHunk": "@@ -350,6 +350,30 @@ paths:\n           description: Unexpected error\n           schema:\n             $ref: '#/definitions/Error'\n+  /scopes:\n+    get:\n+      summary: Get all scopes.", "originalCommit": "793184195d4062e7954747d14421eb0c9215665a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c61b84ab8b73400efc05c9420a4abe9b02b69337", "url": "https://github.com/wso2/carbon-apimgt/commit/c61b84ab8b73400efc05c9420a4abe9b02b69337", "message": "fix review comments", "committedDate": "2020-09-03T04:32:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNDIwMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9247#discussion_r482704202", "bodyText": "here too", "author": "bhathiya", "createdAt": "2020-09-03T04:57:30Z", "path": "components/apimgt/org.wso2.carbon.apimgt.keymgt/src/main/java/org/wso2/carbon/apimgt/keymgt/service/KeyManagerDataServiceImpl.java", "diffHunk": "@@ -270,6 +272,43 @@ public void removeAPIPolicy(APIPolicyEvent event) {\n         store.removeApiPolicy(getAPIPolicyFromAPIPolicyEvent(event));\n     }\n \n+    @Override\n+    public void addScope(ScopeEvent event) {\n+\n+        Scope scope = new Scope();\n+        scope.setName(event.getName());\n+        scope.setRoles(event.getRoles());\n+        scope.setDisplayName(event.getDisplayName());\n+        scope.setDescription(event.getDescription());\n+        scope.setTimeStamp(event.getTimeStamp());\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the event as the tenant \" + event.getTenantDomain() + \" is not loaded\");\n+            }\n+            return;\n+        }\n+        store.addOrUpdateScope(scope);\n+    }\n+\n+    @Override\n+    public void deleteScope(ScopeEvent event) {\n+\n+        Scope scope = new Scope();\n+        scope.setName(event.getName());\n+        scope.setTimeStamp(event.getTimeStamp());\n+        SubscriptionDataStore store = SubscriptionDataHolder.getInstance()\n+                .getTenantSubscriptionStore(event.getTenantDomain());\n+        if (store == null) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ignoring the event as the tenant \" + event.getTenantDomain() + \" not loaded\");", "originalCommit": "c61b84ab8b73400efc05c9420a4abe9b02b69337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d2d95c3a5ec25dbe1703f96b8310b7b0461a1312", "url": "https://github.com/wso2/carbon-apimgt/commit/d2d95c3a5ec25dbe1703f96b8310b7b0461a1312", "message": "fix review comments", "committedDate": "2020-09-03T05:00:02Z", "type": "commit"}, {"oid": "d2d95c3a5ec25dbe1703f96b8310b7b0461a1312", "url": "https://github.com/wso2/carbon-apimgt/commit/d2d95c3a5ec25dbe1703f96b8310b7b0461a1312", "message": "fix review comments", "committedDate": "2020-09-03T05:00:02Z", "type": "forcePushed"}]}