{"pr_number": 8512, "pr_title": "Custom Rate Limiting Policies UI", "pr_createdAt": "2020-05-15T10:54:48Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/8512", "timeline": [{"oid": "ca475e0733de7e84341a7b98c70607e969bab0e2", "url": "https://github.com/wso2/carbon-apimgt/commit/ca475e0733de7e84341a7b98c70607e969bab0e2", "message": "List custom throttling Policies", "committedDate": "2020-05-14T08:37:08Z", "type": "commit"}, {"oid": "bf14a0ca94d8b43a6dc2b1322368aed175f323b6", "url": "https://github.com/wso2/carbon-apimgt/commit/bf14a0ca94d8b43a6dc2b1322368aed175f323b6", "message": "Delete custom throttling Policies", "committedDate": "2020-05-14T09:20:49Z", "type": "commit"}, {"oid": "07f217f45df33550655349b9270c89233d040cc1", "url": "https://github.com/wso2/carbon-apimgt/commit/07f217f45df33550655349b9270c89233d040cc1", "message": "Add custom throttling Policies", "committedDate": "2020-05-15T10:46:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczMDg0NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8512#discussion_r425730845", "bodyText": "Since this is a hardcoded sample value, Can't we use a pre-formatted value hardcoded here, Otherwise adding a new dependency just for formatting this is not worth it, isn't it?", "author": "tmkasun", "createdAt": "2020-05-15T11:10:32Z", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin_new/source/src/app/components/Throttling/Custom/AddEdit.jsx", "diffHunk": "@@ -0,0 +1,337 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer, useState } from 'react';\n+import PropTypes from 'prop-types';\n+import TextField from '@material-ui/core/TextField';\n+import { FormattedMessage, injectIntl } from 'react-intl';\n+import { makeStyles } from '@material-ui/core/styles';\n+import FormDialogBase from 'AppComponents/AdminPages/Addons/FormDialogBase';\n+import { Typography } from '@material-ui/core';\n+import API from 'AppData/api';\n+import Alert from 'AppComponents/Shared/Alert';\n+import MonacoEditor from 'react-monaco-editor';\n+import sqlFormatter from 'sql-formatter';\n+\n+const useStyles = makeStyles((theme) => ({\n+    error: {\n+        color: theme.palette.error.dark,\n+    },\n+    dialog: {\n+        minWidth: theme.spacing(150),\n+\n+    },\n+    siddhiQueryHeading: {\n+        marginTop: theme.spacing(2),\n+        marginBottom: theme.spacing(1),\n+    },\n+    showSampleButton: {\n+        marginTop: theme.spacing(2),\n+    },\n+}));\n+\n+const sampleSiddhiQuery = \"FROM RequestStream SELECT userId, ( userId == 'admin@carbon.super' ) \"\n++ \"AS isEligible , str:concat('admin@carbon.super','') as throttleKey \"\n++ 'INSERT INTO EligibilityStream; FROM EligibilityStream[isEligible==true]#throttler:timeBatch(1 min) '", "originalCommit": "07f217f45df33550655349b9270c89233d040cc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczMzg4MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8512#discussion_r425733881", "bodyText": "I initially had a pre-formatted value here. But since we are using sql formatter to format the siddhi query received from the GET custom policy request I used that same formatter to format this text as well. This dependency is not only used to format this text its used to format the siddhi query received from the GET policy call as well.", "author": "kavishkafernando", "createdAt": "2020-05-15T11:17:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczMDg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczMTU4Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/8512#discussion_r425731586", "bodyText": "Since siddhi is not 100% equal to SQL, this formatter could fail with some siddhi queries don't we need to handle such situations ?", "author": "tmkasun", "createdAt": "2020-05-15T11:12:08Z", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin_new/source/src/app/components/Throttling/Custom/AddEdit.jsx", "diffHunk": "@@ -0,0 +1,337 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer, useState } from 'react';\n+import PropTypes from 'prop-types';\n+import TextField from '@material-ui/core/TextField';\n+import { FormattedMessage, injectIntl } from 'react-intl';\n+import { makeStyles } from '@material-ui/core/styles';\n+import FormDialogBase from 'AppComponents/AdminPages/Addons/FormDialogBase';\n+import { Typography } from '@material-ui/core';\n+import API from 'AppData/api';\n+import Alert from 'AppComponents/Shared/Alert';\n+import MonacoEditor from 'react-monaco-editor';\n+import sqlFormatter from 'sql-formatter';\n+\n+const useStyles = makeStyles((theme) => ({\n+    error: {\n+        color: theme.palette.error.dark,\n+    },\n+    dialog: {\n+        minWidth: theme.spacing(150),\n+\n+    },\n+    siddhiQueryHeading: {\n+        marginTop: theme.spacing(2),\n+        marginBottom: theme.spacing(1),\n+    },\n+    showSampleButton: {\n+        marginTop: theme.spacing(2),\n+    },\n+}));\n+\n+const sampleSiddhiQuery = \"FROM RequestStream SELECT userId, ( userId == 'admin@carbon.super' ) \"\n++ \"AS isEligible , str:concat('admin@carbon.super','') as throttleKey \"\n++ 'INSERT INTO EligibilityStream; FROM EligibilityStream[isEligible==true]#throttler:timeBatch(1 min) '\n++ 'SELECT throttleKey, (count(userId) >= 5) as isThrottled, expiryTimeStamp group by throttleKey '\n++ 'INSERT ALL EVENTS into ResultStream;';\n+const formattedSampleSiddhiQuery = sqlFormatter.format(sampleSiddhiQuery);\n+\n+let initialState = {\n+    policyName: '',\n+    description: '',\n+    keyTemplate: '',\n+    siddhiQuery: formattedSampleSiddhiQuery,\n+};\n+\n+\n+/**\n+ * Reducer\n+ * @param {JSON} state The second number.\n+ * @returns {Promise}\n+ */\n+function reducer(state, newValue) {\n+    const { field, value } = newValue;\n+    switch (field) {\n+        case 'policyName':\n+            return { ...state, [field]: value };\n+        case 'description':\n+            return { ...state, [field]: value };\n+        case 'keyTemplate':\n+            return { ...state, [field]: value };\n+        case 'siddhiQuery':\n+            return { ...state, [field]: value };\n+        default:\n+            return newValue;\n+    }\n+}\n+\n+/**\n+ * Render a list\n+ * @returns {JSX} Header AppBar components.\n+ */\n+function AddEdit(props) {\n+    const classes = useStyles();\n+    const {\n+        updateList, icon, triggerButtonText, title, dataRow,\n+    } = props;\n+    const [state, dispatch] = useReducer(reducer, initialState);\n+    const {\n+        policyName, description, keyTemplate, siddhiQuery,\n+    } = state;\n+    const [validationError, setValidationError] = useState([]);\n+    const [editMode, setIsEditMode] = useState(false);\n+    const restApi = new API();\n+\n+    const onChange = (e) => {\n+        dispatch({ field: e.target.name, value: e.target.value });\n+    };\n+\n+    const siddhiQueryOnChange = (newValue) => {\n+        dispatch({ field: 'siddhiQuery', value: newValue });\n+    };\n+\n+    const validate = (fieldName, value) => {\n+        let error = '';\n+        switch (fieldName) {\n+            case 'policyName':\n+                error = value === '' ? (fieldName + ' is Empty') : '';\n+                setValidationError({ policyName: error });\n+                break;\n+            case 'keyTemplate':\n+                if (value === '') {\n+                    error = (fieldName + ' is Empty');\n+                } else if (value.indexOf(' ') !== -1) {\n+                    error = 'Invalid Key Template';\n+                } else {\n+                    error = false;\n+                }\n+                setValidationError({ keyTemplate: error });\n+                break;\n+            case 'siddhiQuery':\n+                error = value === '' ? (fieldName + ' is Empty') : '';\n+                setValidationError({ siddhiQuery: error });\n+                break;\n+            default:\n+                break;\n+        }\n+        return error;\n+    };\n+\n+    const getAllFormErrors = () => {\n+        let errorText = '';\n+        const policyNameErrors = validate('policyName', policyName);\n+        const keyTemplateErrors = validate('keyTemplate', keyTemplate);\n+        const siddhiQueryErrors = validate('siddhiQuery', siddhiQuery);\n+\n+        errorText += policyNameErrors + keyTemplateErrors + siddhiQueryErrors;\n+\n+        return errorText;\n+    };\n+\n+    const formSaveCallback = () => {\n+        const formErrors = getAllFormErrors();\n+        if (formErrors !== '' && formErrors !== 'false') {\n+            Alert.error(formErrors);\n+            return (false);\n+        }\n+\n+        let promisedAddCustomPolicy;\n+        if (state.siddhiQuery.indexOf('\\n') !== -1) {\n+            const siddhiQueryValue = state.siddhiQuery.split('\\n').join(' ');\n+            delete (state.siddhiQuery);\n+            state.siddhiQuery = siddhiQueryValue;\n+        }\n+        const customPolicy = state;\n+\n+        if (dataRow) {\n+            const { policyId } = dataRow;\n+            promisedAddCustomPolicy = restApi.updateCustomPolicy(policyId,\n+                customPolicy);\n+            promisedAddCustomPolicy = new Promise((resolve, reject) => {\n+                promisedAddCustomPolicy\n+                    .then(() => {\n+                        resolve(\n+                            <FormattedMessage\n+                                id='Throttling.Application.Policy.policy.edit.success'\n+                                defaultMessage='Application Rate Limiting Policy edited successfully.'\n+                            />,\n+                        );\n+                    })\n+                    .catch((error) => {\n+                        const { response } = error;\n+                        if (response.body) {\n+                            reject(response.body.description);\n+                        }\n+                    })\n+                    .finally(() => {\n+                        updateList();\n+                    });\n+            });\n+        } else {\n+            promisedAddCustomPolicy = restApi.addCustomPolicy(\n+                customPolicy,\n+            );\n+            promisedAddCustomPolicy = new Promise((resolve, reject) => {\n+                promisedAddCustomPolicy\n+                    .then(() => {\n+                        resolve(\n+                            <FormattedMessage\n+                                id='Throttling.Application.Policy.policy.add.success'\n+                                defaultMessage='Custom Policy added successfully.'\n+                            />,\n+                        );\n+                    })\n+                    .catch((error) => {\n+                        const { response } = error;\n+                        if (response.body) {\n+                            reject(response.body.description);\n+                        }\n+                    })\n+                    .finally(() => {\n+                        updateList();\n+                    });\n+            });\n+        }\n+        return (promisedAddCustomPolicy);\n+    };\n+\n+    const dialogOpenCallback = () => {\n+        if (dataRow) {\n+            setIsEditMode(true);\n+            const { policyId } = dataRow;\n+            restApi.customPolicyGet(policyId).then((result) => {\n+                const formattedSiddhiQuery = sqlFormatter.format(result.body.siddhiQuery);", "originalCommit": "07f217f45df33550655349b9270c89233d040cc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0NzI5MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/8512#discussion_r425747291", "bodyText": "//TODO: Switch to ACE editor and give the siddhi g4 grammar to antlr plugin. This will by default support siddhi", "author": "kavishkafernando", "createdAt": "2020-05-15T11:47:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczMTU4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczMjIzMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/8512#discussion_r425732232", "bodyText": "Please use React suspense to defer the loading of this large package.", "author": "tmkasun", "createdAt": "2020-05-15T11:13:29Z", "path": "features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin_new/source/src/app/components/Throttling/Custom/AddEdit.jsx", "diffHunk": "@@ -0,0 +1,337 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import React, { useReducer, useState } from 'react';\n+import PropTypes from 'prop-types';\n+import TextField from '@material-ui/core/TextField';\n+import { FormattedMessage, injectIntl } from 'react-intl';\n+import { makeStyles } from '@material-ui/core/styles';\n+import FormDialogBase from 'AppComponents/AdminPages/Addons/FormDialogBase';\n+import { Typography } from '@material-ui/core';\n+import API from 'AppData/api';\n+import Alert from 'AppComponents/Shared/Alert';\n+import MonacoEditor from 'react-monaco-editor';", "originalCommit": "07f217f45df33550655349b9270c89233d040cc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc0NjcwMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/8512#discussion_r425746703", "bodyText": "Fixed", "author": "kavishkafernando", "createdAt": "2020-05-15T11:45:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczMjIzMg=="}], "type": "inlineReview"}, {"oid": "a7bba3c1cda760249e0bf9c219697ffa39f5d7a1", "url": "https://github.com/wso2/carbon-apimgt/commit/a7bba3c1cda760249e0bf9c219697ffa39f5d7a1", "message": "use React suspense to defer the loading of MonacoEditor", "committedDate": "2020-05-15T11:44:27Z", "type": "commit"}]}