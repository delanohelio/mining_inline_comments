{"pr_number": 9464, "pr_title": "Restructuring functionalities to Import an API/API Product with new schemas with relevant DTOs for APICTL", "pr_createdAt": "2020-12-03T07:00:22Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/9464", "timeline": [{"oid": "3f7cd0a78436775c1a8005acd7b61f85a6de2823", "url": "https://github.com/wso2/carbon-apimgt/commit/3f7cd0a78436775c1a8005acd7b61f85a6de2823", "message": "Import APIs with relevant DTOs from APICTL", "committedDate": "2020-12-02T19:36:31Z", "type": "commit"}, {"oid": "14529b92cbe5b5f9b9b14542fc267aae6c26e6f4", "url": "https://github.com/wso2/carbon-apimgt/commit/14529b92cbe5b5f9b9b14542fc267aae6c26e6f4", "message": "Add import function to importexport service", "committedDate": "2020-12-02T19:36:31Z", "type": "commit"}, {"oid": "00b135102819c06699c0d1a4b0e685bd47a3e9de", "url": "https://github.com/wso2/carbon-apimgt/commit/00b135102819c06699c0d1a4b0e685bd47a3e9de", "message": "Fix thumbnail export failure", "committedDate": "2020-12-02T19:36:31Z", "type": "commit"}, {"oid": "6a5acab466d36768b6a50f081ad5bb099773e840", "url": "https://github.com/wso2/carbon-apimgt/commit/6a5acab466d36768b6a50f081ad5bb099773e840", "message": "Improve error handling when importing an API", "committedDate": "2020-12-02T19:36:31Z", "type": "commit"}, {"oid": "25e874fb170da852fedd6417af6220c364ff5f42", "url": "https://github.com/wso2/carbon-apimgt/commit/25e874fb170da852fedd6417af6220c364ff5f42", "message": "Import API Products with relevant DTOs from APICTL", "committedDate": "2020-12-02T19:36:31Z", "type": "commit"}, {"oid": "dd77f8c8805497de12979bee47650aa82535064e", "url": "https://github.com/wso2/carbon-apimgt/commit/dd77f8c8805497de12979bee47650aa82535064e", "message": "Remove swagger from GraphQL API export", "committedDate": "2020-12-02T19:36:31Z", "type": "commit"}, {"oid": "fa99e6df89e3ec3f1bbafd74cf499192717271a2", "url": "https://github.com/wso2/carbon-apimgt/commit/fa99e6df89e3ec3f1bbafd74cf499192717271a2", "message": "Rename the directory Meta-Information to Definitions in API/API Product export", "committedDate": "2020-12-02T19:36:31Z", "type": "commit"}, {"oid": "b8840f14c9e400ce6a1d29ccd90b07e5a92b7e54", "url": "https://github.com/wso2/carbon-apimgt/commit/b8840f14c9e400ce6a1d29ccd90b07e5a92b7e54", "message": "Replace unwanted characters in doc directory name", "committedDate": "2020-12-02T19:36:31Z", "type": "commit"}, {"oid": "435be42773bfad0c9861843a4ca88350aff1f383", "url": "https://github.com/wso2/carbon-apimgt/commit/435be42773bfad0c9861843a4ca88350aff1f383", "message": "Remove the necessity of having the thumbnail name as 'icon' during import", "committedDate": "2020-12-02T19:36:31Z", "type": "commit"}, {"oid": "8c2510b8bb9020486fc730ccd71630e7051e0e01", "url": "https://github.com/wso2/carbon-apimgt/commit/8c2510b8bb9020486fc730ccd71630e7051e0e01", "message": "Improve exceptions in import and preprocess endpoint security", "committedDate": "2020-12-02T19:36:31Z", "type": "commit"}, {"oid": "cec069c0eefb240cdc00f0ff8faecb7208eb9ed8", "url": "https://github.com/wso2/carbon-apimgt/commit/cec069c0eefb240cdc00f0ff8faecb7208eb9ed8", "message": "Fix provider issues identified from APICTL integration tests", "committedDate": "2020-12-03T03:01:34Z", "type": "commit"}, {"oid": "c9c20b7dda24131ae87b8e533bb903c61cfa1d09", "url": "https://github.com/wso2/carbon-apimgt/commit/c9c20b7dda24131ae87b8e533bb903c61cfa1d09", "message": "Restructure exception messages during import/export", "committedDate": "2020-12-03T03:15:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA5Nzg1NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#discussion_r535097855", "bodyText": "Do we need to pass token scopes to interface", "author": "tharindu1st", "createdAt": "2020-12-03T10:55:17Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/importexport/ImportExportAPI.java", "diffHunk": "@@ -31,36 +34,62 @@\n     /**\n      * Used to export API artifact\n      *\n-     * @param apiId UUID of API.\n-     * @param name name of API.\n-     * @param version version of API.\n-     * @param providerName provider of API.\n+     * @param apiId          UUID of API.\n+     * @param name           name of API.\n+     * @param version        version of API.\n+     * @param providerName   provider of API.\n      * @param preserveStatus Preserve API status on export\n-     * @param format Format of output documents. Can be YAML or JSON\n-     * @param preserveDocs Preserve documentation on Export.\n+     * @param format         Format of output documents. Can be YAML or JSON\n+     * @param preserveDocs   Preserve documentation on Export.\n      * @return API artifact.\n      * @throws APIManagementException\n      * @throws APIImportExportException\n      */\n     public File exportAPI(String apiId, String name, String version, String providerName, boolean preserveStatus,\n-                          ExportFormat format, boolean preserveDocs)\n-            throws APIManagementException, APIImportExportException;\n+            ExportFormat format, boolean preserveDocs) throws APIManagementException, APIImportExportException;\n \n     /**\n      * Used to export API product artifact.\n      *\n-     * @param apiId UUID of API.\n-     * @param name name of API.\n-     * @param version version of API.\n-     * @param providerName provider of API.\n-     * @param format Format of output documents. Can be YAML or JSON\n+     * @param apiId          UUID of API.\n+     * @param name           name of API.\n+     * @param version        version of API.\n+     * @param providerName   provider of API.\n+     * @param format         Format of output documents. Can be YAML or JSON\n      * @param preserveStatus Preserve API status on export\n-     * @param preserveDocs Preserve documentation on Export.\n+     * @param preserveDocs   Preserve documentation on Export.\n      * @return APIProduct Artifact.\n      * @throws APIManagementException\n      * @throws APIImportExportException\n      */\n-    public File exportApiProduct(String apiId, String name, String version, String providerName, ExportFormat format,\n-                                 boolean preserveStatus, boolean preserveDocs)\n-            throws APIManagementException, APIImportExportException;\n+    public File exportAPIProduct(String apiId, String name, String version, String providerName, ExportFormat format,\n+            boolean preserveStatus, boolean preserveDocs) throws APIManagementException, APIImportExportException;\n+\n+    /**\n+     * Used to import an API artifact.\n+     *\n+     * @param fileInputStream  Input stream from the REST request\n+     *                         (This will not be null when importing dependent APIs with API Products)\n+     * @param preserveProvider Decision to keep or replace the provider\n+     * @param overwrite        Whether to update the API or not\n+     * @throws APIImportExportException If there is an error in importing an API\n+     * @@return Imported API\n+     */\n+    public API importAPI(InputStream fileInputStream, Boolean preserveProvider, Boolean overwrite, String[] tokenScopes)\n+            throws APIManagementException;\n+\n+    /**\n+     * Used to import an API Product artifact.\n+     *\n+     * @param fileInputStream     Input stream from the REST request\n+     *                            (This will not be null when importing dependent APIs with API Products)\n+     * @param preserveProvider    User choice to keep or replace the API Product provider\n+     * @param importAPIs          Whether to import the dependent APIs or not.\n+     * @param overwriteAPIProduct Whether to update the API Product or not. This is used when updating already existing API Products.\n+     * @param overwriteAPIs       Whether to update the dependent APIs or not. This is used when updating already existing dependent APIs of an API Product.\n+     * @@return Imported API Product\n+     */\n+    public APIProduct importAPIProduct(InputStream fileInputStream, Boolean preserveProvider,\n+            Boolean overwriteAPIProduct, Boolean overwriteAPIs, Boolean importAPIs, String[] tokenScopes)", "originalCommit": "c9c20b7dda24131ae87b8e533bb903c61cfa1d09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwOTk0Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#discussion_r535809942", "bodyText": "The token scopes have been used in the updateApi function in PublisherCommonUtils.java. Earlier, the code segment related to this function was in the ApisApiServiceImpl.java. The token scopes are required when deciding whether a particular user can update a particular field of an API.", "author": "wasuradananjith", "createdAt": "2020-12-04T03:31:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA5Nzg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjcxMDM0OA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#discussion_r566710348", "bodyText": "Wrong exception is mentioned here", "author": "npamudika", "createdAt": "2021-01-29T10:06:12Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/importexport/ImportExportAPI.java", "diffHunk": "@@ -31,36 +34,62 @@\n     /**\n      * Used to export API artifact\n      *\n-     * @param apiId UUID of API.\n-     * @param name name of API.\n-     * @param version version of API.\n-     * @param providerName provider of API.\n+     * @param apiId          UUID of API.\n+     * @param name           name of API.\n+     * @param version        version of API.\n+     * @param providerName   provider of API.\n      * @param preserveStatus Preserve API status on export\n-     * @param format Format of output documents. Can be YAML or JSON\n-     * @param preserveDocs Preserve documentation on Export.\n+     * @param format         Format of output documents. Can be YAML or JSON\n+     * @param preserveDocs   Preserve documentation on Export.\n      * @return API artifact.\n      * @throws APIManagementException\n      * @throws APIImportExportException\n      */\n     public File exportAPI(String apiId, String name, String version, String providerName, boolean preserveStatus,\n-                          ExportFormat format, boolean preserveDocs)\n-            throws APIManagementException, APIImportExportException;\n+            ExportFormat format, boolean preserveDocs) throws APIManagementException, APIImportExportException;\n \n     /**\n      * Used to export API product artifact.\n      *\n-     * @param apiId UUID of API.\n-     * @param name name of API.\n-     * @param version version of API.\n-     * @param providerName provider of API.\n-     * @param format Format of output documents. Can be YAML or JSON\n+     * @param apiId          UUID of API.\n+     * @param name           name of API.\n+     * @param version        version of API.\n+     * @param providerName   provider of API.\n+     * @param format         Format of output documents. Can be YAML or JSON\n      * @param preserveStatus Preserve API status on export\n-     * @param preserveDocs Preserve documentation on Export.\n+     * @param preserveDocs   Preserve documentation on Export.\n      * @return APIProduct Artifact.\n      * @throws APIManagementException\n      * @throws APIImportExportException\n      */\n-    public File exportApiProduct(String apiId, String name, String version, String providerName, ExportFormat format,\n-                                 boolean preserveStatus, boolean preserveDocs)\n-            throws APIManagementException, APIImportExportException;\n+    public File exportAPIProduct(String apiId, String name, String version, String providerName, ExportFormat format,\n+            boolean preserveStatus, boolean preserveDocs) throws APIManagementException, APIImportExportException;\n+\n+    /**\n+     * Used to import an API artifact.\n+     *\n+     * @param fileInputStream  Input stream from the REST request\n+     *                         (This will not be null when importing dependent APIs with API Products)\n+     * @param preserveProvider Decision to keep or replace the provider\n+     * @param overwrite        Whether to update the API or not\n+     * @throws APIImportExportException If there is an error in importing an API", "originalCommit": "c9c20b7dda24131ae87b8e533bb903c61cfa1d09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg3NTc5MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#discussion_r566875790", "bodyText": "Fixed via eb9b718", "author": "wasuradananjith", "createdAt": "2021-01-29T14:53:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjcxMDM0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjcxMDg0Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#discussion_r566710846", "bodyText": "Missing values in the java docs. Please add.", "author": "npamudika", "createdAt": "2021-01-29T10:07:06Z", "path": "components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/importexport/ImportExportAPI.java", "diffHunk": "@@ -31,36 +34,62 @@\n     /**\n      * Used to export API artifact\n      *\n-     * @param apiId UUID of API.\n-     * @param name name of API.\n-     * @param version version of API.\n-     * @param providerName provider of API.\n+     * @param apiId          UUID of API.\n+     * @param name           name of API.\n+     * @param version        version of API.\n+     * @param providerName   provider of API.\n      * @param preserveStatus Preserve API status on export\n-     * @param format Format of output documents. Can be YAML or JSON\n-     * @param preserveDocs Preserve documentation on Export.\n+     * @param format         Format of output documents. Can be YAML or JSON\n+     * @param preserveDocs   Preserve documentation on Export.\n      * @return API artifact.\n      * @throws APIManagementException\n      * @throws APIImportExportException\n      */\n     public File exportAPI(String apiId, String name, String version, String providerName, boolean preserveStatus,\n-                          ExportFormat format, boolean preserveDocs)\n-            throws APIManagementException, APIImportExportException;\n+            ExportFormat format, boolean preserveDocs) throws APIManagementException, APIImportExportException;\n \n     /**\n      * Used to export API product artifact.\n      *\n-     * @param apiId UUID of API.\n-     * @param name name of API.\n-     * @param version version of API.\n-     * @param providerName provider of API.\n-     * @param format Format of output documents. Can be YAML or JSON\n+     * @param apiId          UUID of API.\n+     * @param name           name of API.\n+     * @param version        version of API.\n+     * @param providerName   provider of API.\n+     * @param format         Format of output documents. Can be YAML or JSON\n      * @param preserveStatus Preserve API status on export\n-     * @param preserveDocs Preserve documentation on Export.\n+     * @param preserveDocs   Preserve documentation on Export.\n      * @return APIProduct Artifact.\n      * @throws APIManagementException\n      * @throws APIImportExportException\n      */\n-    public File exportApiProduct(String apiId, String name, String version, String providerName, ExportFormat format,\n-                                 boolean preserveStatus, boolean preserveDocs)\n-            throws APIManagementException, APIImportExportException;\n+    public File exportAPIProduct(String apiId, String name, String version, String providerName, ExportFormat format,\n+            boolean preserveStatus, boolean preserveDocs) throws APIManagementException, APIImportExportException;\n+\n+    /**\n+     * Used to import an API artifact.\n+     *\n+     * @param fileInputStream  Input stream from the REST request\n+     *                         (This will not be null when importing dependent APIs with API Products)\n+     * @param preserveProvider Decision to keep or replace the provider\n+     * @param overwrite        Whether to update the API or not\n+     * @throws APIImportExportException If there is an error in importing an API\n+     * @@return Imported API\n+     */\n+    public API importAPI(InputStream fileInputStream, Boolean preserveProvider, Boolean overwrite, String[] tokenScopes)\n+            throws APIManagementException;\n+\n+    /**\n+     * Used to import an API Product artifact.\n+     *\n+     * @param fileInputStream     Input stream from the REST request\n+     *                            (This will not be null when importing dependent APIs with API Products)\n+     * @param preserveProvider    User choice to keep or replace the API Product provider\n+     * @param importAPIs          Whether to import the dependent APIs or not.\n+     * @param overwriteAPIProduct Whether to update the API Product or not. This is used when updating already existing API Products.\n+     * @param overwriteAPIs       Whether to update the dependent APIs or not. This is used when updating already existing dependent APIs of an API Product.\n+     * @@return Imported API Product\n+     */", "originalCommit": "c9c20b7dda24131ae87b8e533bb903c61cfa1d09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg3NTkyMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#discussion_r566875920", "bodyText": "Fixed via eb9b718", "author": "wasuradananjith", "createdAt": "2021-01-29T14:53:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjcxMDg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjcxMTU4MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#discussion_r566711581", "bodyText": "Missing @param and @throws", "author": "npamudika", "createdAt": "2021-01-29T10:08:12Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApiProductsApiServiceImpl.java", "diffHunk": "@@ -726,77 +676,65 @@ public Response apiProductsGet(Integer limit, Integer offset, String query, Stri\n         return null;\n     }\n \n-    @Override public Response apiProductsPost(APIProductDTO body, MessageContext messageContext) {\n-        String provider = null;\n-        try {\n-            APIProvider apiProvider = RestApiCommonUtil.getLoggedInUserProvider();\n-            String username = RestApiCommonUtil.getLoggedInUsername();\n-            // if not add product\n-            provider = body.getProvider();\n-            String context = body.getContext();\n-            if (!StringUtils.isBlank(provider) && !provider.equals(username)) {\n-                if (!APIUtil.hasPermission(username, Permissions.APIM_ADMIN)) {\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"User \" + username + \" does not have admin permission (\"\n-                                + Permissions.APIM_ADMIN + \") hence provider (\" + provider\n-                                + \") overridden with current user (\" + username + \")\");\n-                    }\n-                    provider = username;\n-                }\n-            } else {\n-                // Set username in case provider is null or empty\n-                provider = username;\n-            }\n-\n-            List<String> tiersFromDTO = body.getPolicies();\n-            Set<Tier> definedTiers = apiProvider.getTiers();\n-            List<String> invalidTiers = RestApiUtil.getInvalidTierNames(definedTiers, tiersFromDTO);\n-            if (!invalidTiers.isEmpty()) {\n-                RestApiUtil.handleBadRequest(\n-                        \"Specified tier(s) \" + Arrays.toString(invalidTiers.toArray()) + \" are invalid\", log);\n-            }\n-            if (body.getAdditionalProperties() != null) {\n-                String errorMessage = RestApiPublisherUtils\n-                        .validateAdditionalProperties(body.getAdditionalProperties());\n-                if (!errorMessage.isEmpty()) {\n-                    RestApiUtil.handleBadRequest(errorMessage, log);\n-                }\n-            }\n-            if (body.getVisibility() == null) {\n-                //set the default visibility to PUBLIC\n-                body.setVisibility(VisibilityEnum.PUBLIC);\n-            }\n+    /**\n+     * Import an API Product by uploading an archive file. All relevant API Product data will be included upon the creation of\n+     * the API Product. Depending on the choice of the user, provider of the imported API Product will be preserved or modified.\n+     *\n+     * @param fileInputStream       UploadedInputStream input stream from the REST request\n+     * @param fileDetail            File details as Attachment\n+     * @param preserveProvider      User choice to keep or replace the API Product provider\n+     * @param importAPIs            Whether to import the dependent APIs or not.\n+     * @param overwriteAPIProduct   Whether to update the API Product or not. This is used when updating already existing API Products.\n+     * @param overwriteAPIs         Whether to update the dependent APIs or not. This is used when updating already existing dependent APIs of an API Product.\n+     * @return API Product import response", "originalCommit": "c9c20b7dda24131ae87b8e533bb903c61cfa1d09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Njg3NTk5MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9464#discussion_r566875990", "bodyText": "Fixed via eb9b718", "author": "wasuradananjith", "createdAt": "2021-01-29T14:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjcxMTU4MQ=="}], "type": "inlineReview"}]}