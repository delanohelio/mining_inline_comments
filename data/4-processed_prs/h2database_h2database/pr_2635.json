{"pr_number": 2635, "pr_title": "Implements the REGEXP_SUBSTR function, modeled on the same function a\u2026", "pr_createdAt": "2020-05-20T13:02:40Z", "pr_url": "https://github.com/h2database/h2database/pull/2635", "timeline": [{"oid": "4dc7b144bacd5fd93329e599bbb817c3026e1f7c", "url": "https://github.com/h2database/h2database/commit/4dc7b144bacd5fd93329e599bbb817c3026e1f7c", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T13:03:21Z", "type": "forcePushed"}, {"oid": "e23b3b7b0920b0d65d587001338fcf447c96fbeb", "url": "https://github.com/h2database/h2database/commit/e23b3b7b0920b0d65d587001338fcf447c96fbeb", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T13:03:47Z", "type": "forcePushed"}, {"oid": "37114aa7babbe2e298bb88c0e2e4d5905e0597f3", "url": "https://github.com/h2database/h2database/commit/37114aa7babbe2e298bb88c0e2e4d5905e0597f3", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T13:21:48Z", "type": "forcePushed"}, {"oid": "dac8b07425523e45dc43869d663dd682ebe25f4c", "url": "https://github.com/h2database/h2database/commit/dac8b07425523e45dc43869d663dd682ebe25f4c", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T13:22:42Z", "type": "forcePushed"}, {"oid": "8f5d69ccc0b379d4c7642b0adebc81794a4ccdc5", "url": "https://github.com/h2database/h2database/commit/8f5d69ccc0b379d4c7642b0adebc81794a4ccdc5", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T13:44:11Z", "type": "forcePushed"}, {"oid": "98617920d837f968f16f4df1c2cd5e9c94ab5411", "url": "https://github.com/h2database/h2database/commit/98617920d837f968f16f4df1c2cd5e9c94ab5411", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T13:45:18Z", "type": "forcePushed"}, {"oid": "2979a6d15f87d4bbe1ff41439c09dbfed7a7c828", "url": "https://github.com/h2database/h2database/commit/2979a6d15f87d4bbe1ff41439c09dbfed7a7c828", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T13:46:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMDcxNA==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428020714", "bodyText": "Please, use better names.", "author": "katzyn", "createdAt": "2020-05-20T13:42:27Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,34 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value v0, Value v1, Value v2, Value v3, Value v4, Value v5) {", "originalCommit": "dac8b07425523e45dc43869d663dd682ebe25f4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzOTI3NQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428039275", "bodyText": "Whoops, completely overlooked this.", "author": "vetler", "createdAt": "2020-05-20T14:04:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMDcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxNTAwMg==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428215002", "bodyText": "84284b7", "author": "vetler", "createdAt": "2020-05-20T18:18:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMDcxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMTQwNg==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428021406", "bodyText": "Use int data type for both variables.", "author": "katzyn", "createdAt": "2020-05-20T13:43:18Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,34 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value v0, Value v1, Value v2, Value v3, Value v4, Value v5) {\n+        Value result;\n+        String regexp = v1.getString();\n+        Integer position = v2 != null ? v2.getInt() - 1 : 0;\n+        Integer requestedOccurrence = v3 != null ? v3.getInt() : 1;", "originalCommit": "dac8b07425523e45dc43869d663dd682ebe25f4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxNDk2NQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428214965", "bodyText": "84284b7", "author": "vetler", "createdAt": "2020-05-20T18:18:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMTQwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMjI3Nw==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428022277", "bodyText": "substring is a slow operation, it looks like m.find(position) (for the first occurrence) can be used instead.", "author": "katzyn", "createdAt": "2020-05-20T13:44:26Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,34 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value v0, Value v1, Value v2, Value v3, Value v4, Value v5) {\n+        Value result;\n+        String regexp = v1.getString();\n+        Integer position = v2 != null ? v2.getInt() - 1 : 0;\n+        Integer requestedOccurrence = v3 != null ? v3.getInt() : 1;\n+        String regexpMode = v4 != null ? v4.getString() : null;\n+        int subexpression = v5 != null ? v5.getInt() : 0;\n+        int flags = makeRegexpFlags(regexpMode, false);\n+        try {\n+            Matcher m = Pattern.compile(regexp, flags).matcher(v0.getString().substring(position));", "originalCommit": "dac8b07425523e45dc43869d663dd682ebe25f4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1NjEyMQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428056121", "bodyText": "bf1cd34", "author": "vetler", "createdAt": "2020-05-20T14:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMjI3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNTQ5Mg==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428025492", "bodyText": "This loop can return NULL quickly without iteration over all remaining occurrences.", "author": "katzyn", "createdAt": "2020-05-20T13:48:21Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,34 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value v0, Value v1, Value v2, Value v3, Value v4, Value v5) {\n+        Value result;\n+        String regexp = v1.getString();\n+        Integer position = v2 != null ? v2.getInt() - 1 : 0;\n+        Integer requestedOccurrence = v3 != null ? v3.getInt() : 1;\n+        String regexpMode = v4 != null ? v4.getString() : null;\n+        int subexpression = v5 != null ? v5.getInt() : 0;\n+        int flags = makeRegexpFlags(regexpMode, false);\n+        try {\n+            Matcher m = Pattern.compile(regexp, flags).matcher(v0.getString().substring(position));\n+\n+            boolean found = false;\n+            for(int occurrence = 0; occurrence < requestedOccurrence; occurrence++) {\n+                found = m.find();\n+            }\n+\n+            if (!found) {\n+                result = ValueNull.INSTANCE;\n+            }", "originalCommit": "2979a6d15f87d4bbe1ff41439c09dbfed7a7c828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA2Mjg0Nw==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428062847", "bodyText": "eb836c0\nAborts the loop when next occurrance is not found, but keeps the !found test out of the loop. Not possible to move find(position) inside the loop, as this resets the search.", "author": "vetler", "createdAt": "2020-05-20T14:34:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNTQ5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMDE2Mw==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428030163", "bodyText": "Are you sure about nullIfParameterIsNull = false here? If so, you need to add explicit checks for ValueNull.INSTANCE for all parameters, add some logic for NULL arguments and describe it in documentation.", "author": "katzyn", "createdAt": "2020-05-20T13:53:59Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -313,6 +314,7 @@\n         addFunction(\"TRANSLATE\", TRANSLATE, 3, Value.VARCHAR);\n         addFunction(\"QUOTE_IDENT\", QUOTE_IDENT, 1, Value.VARCHAR);\n         addFunction(\"REGEXP_LIKE\", REGEXP_LIKE, VAR_ARGS, Value.BOOLEAN);\n+        addFunction(\"REGEXP_SUBSTR\", REGEXP_SUBSTR, VAR_ARGS, Value.VARCHAR, false, true, true, false);", "originalCommit": "2979a6d15f87d4bbe1ff41439c09dbfed7a7c828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MDYyOQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428040629", "bodyText": "The issue was that one of the parameters should be able to be NULL (flagsString) - see test SQL.\nWill add explicit tests instead, as you suggest, unless there are simpler ways to handle this? This code is still new to me.", "author": "vetler", "createdAt": "2020-05-20T14:06:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMDE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NTQ5OA==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428045498", "bodyText": "@katzyn Is it possible to distinguish between the casees where parameters have not been set, or have been explicitly set to NULL?", "author": "vetler", "createdAt": "2020-05-20T14:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMDE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNTE1MA==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428115150", "bodyText": "null means not set, ValueNull.INSTANCE means passed SQL NULL value.", "author": "katzyn", "createdAt": "2020-05-20T15:42:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMDE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxNDkxNQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428214915", "bodyText": "84284b7", "author": "vetler", "createdAt": "2020-05-20T18:18:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMDE2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMTYzNQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428031635", "bodyText": "It may throw IndexOutOfBoundsException and this exception needs to be caught.", "author": "katzyn", "createdAt": "2020-05-20T13:55:45Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,34 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value v0, Value v1, Value v2, Value v3, Value v4, Value v5) {\n+        Value result;\n+        String regexp = v1.getString();\n+        Integer position = v2 != null ? v2.getInt() - 1 : 0;\n+        Integer requestedOccurrence = v3 != null ? v3.getInt() : 1;\n+        String regexpMode = v4 != null ? v4.getString() : null;\n+        int subexpression = v5 != null ? v5.getInt() : 0;\n+        int flags = makeRegexpFlags(regexpMode, false);\n+        try {\n+            Matcher m = Pattern.compile(regexp, flags).matcher(v0.getString().substring(position));\n+\n+            boolean found = false;\n+            for(int occurrence = 0; occurrence < requestedOccurrence; occurrence++) {\n+                found = m.find();\n+            }\n+\n+            if (!found) {\n+                result = ValueNull.INSTANCE;\n+            }\n+            else {\n+                result = ValueVarchar.get(m.group(subexpression));", "originalCommit": "2979a6d15f87d4bbe1ff41439c09dbfed7a7c828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1OTk3NA==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428059974", "bodyText": "6530ab6", "author": "vetler", "createdAt": "2020-05-20T14:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzMTYzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNDg2MA==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428034860", "bodyText": "values are limited\nsymbols cause exception\ncould be used\nflags override first\n'ic' is equivalent", "author": "katzyn", "createdAt": "2020-05-20T13:59:23Z", "path": "h2/src/docsrc/help/help.csv", "diffHunk": "@@ -5108,6 +5108,34 @@ Later flags overrides first ones, for example 'ic' equivalent to case sensitive\n REGEXP_LIKE('Hello    World', '[A-Z ]*', 'i')\n \"\n \n+\"Functions (String)\",\"REGEXP_SUBSTR\",\"\n+@h2@ REGEXP_SUBSTR(inputString, regexString [, position, occurrence, flagsString, group])\n+\",\"\n+Matches string to a regular expression and returns the matched substring.\n+For details, see the java.util.regex.Pattern and related functionality.\n+\n+The parameter position specifies where in inputString the match should start. Occurrence indicates\n+which occurrence of pattern in inputString to search for.\n+\n+Flags values limited to 'i', 'c', 'n', 'm'. Other symbols causes exception.\n+Multiple symbols could be uses in one flagsString parameter (like 'im').\n+Later flags overrides first ones, for example 'ic' equivalent to case sensitive matching 'c'.", "originalCommit": "2979a6d15f87d4bbe1ff41439c09dbfed7a7c828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1MDA2OQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428050069", "bodyText": "c4ea4dc", "author": "vetler", "createdAt": "2020-05-20T14:18:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNDg2MA=="}], "type": "inlineReview"}, {"oid": "f49e77bda115e7ffe05968548d26c9a7035b83e0", "url": "https://github.com/h2database/h2database/commit/f49e77bda115e7ffe05968548d26c9a7035b83e0", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T14:01:41Z", "type": "forcePushed"}, {"oid": "84284b7ef69b4648df83da863d60a750830084e9", "url": "https://github.com/h2database/h2database/commit/84284b7ef69b4648df83da863d60a750830084e9", "message": "fixup! fixup! Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-20T18:14:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwOTQxNQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428409415", "bodyText": "Please, add test cases for both exceptions.", "author": "katzyn", "createdAt": "2020-05-21T02:20:44Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,42 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n+            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+        String regexp = regexpArg.getString();\n+\n+        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+            return ValueNull.INSTANCE;\n+        }\n+\n+        int position = positionArg != null ? positionArg.getInt() - 1 : 0;\n+        int requestedOccurrence = occurrenceArg != null ? occurrenceArg.getInt() : 1;\n+        String regexpMode = regexpModeArg != null ? regexpModeArg.getString() : null;\n+        int subexpression = subexpressoinArg != null && subexpressoinArg != ValueNull.INSTANCE ? subexpressoinArg.getInt() : 0;\n+        int flags = makeRegexpFlags(regexpMode, false);\n+        try {\n+            Matcher m = Pattern.compile(regexp, flags).matcher(inputString.getString());\n+\n+            boolean found = m.find(position);\n+            for(int occurrence = 1; occurrence < requestedOccurrence && found; occurrence++) {\n+                found = m.find();\n+            }\n+\n+            if (!found) {\n+                return ValueNull.INSTANCE;\n+            }\n+            else {\n+                return ValueVarchar.get(m.group(subexpression));\n+            }\n+        } catch (PatternSyntaxException e) {\n+            throw DbException.get(ErrorCode.LIKE_ESCAPE_ERROR_1, e, regexp);\n+        }\n+        catch (IndexOutOfBoundsException e) {\n+            return ValueNull.INSTANCE;\n+        }", "originalCommit": "84284b7ef69b4648df83da863d60a750830084e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ3MzA3Nw==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428473077", "bodyText": "33b1736", "author": "vetler", "createdAt": "2020-05-21T06:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwOTQxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMDA5Ng==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428410096", "bodyText": "Add an empty line at the end of this file, H2 doesn't require it, but GitHub, git gui, and some other tools show a warning mark.", "author": "katzyn", "createdAt": "2020-05-21T02:23:41Z", "path": "h2/src/test/org/h2/test/scripts/functions/string/regexp-substr.sql", "diffHunk": "@@ -0,0 +1,71 @@\n+-- Copyright 2004-2020 H2 Group. Multiple-Licensed under the MPL 2.0,\n+-- and the EPL 1.0 (https://h2database.com/html/license.html).\n+-- Initial Developer: H2 Group\n+--\n+\n+-- case insensitive matches upper case\n+CALL REGEXP_SUBSTR('A', '[a-z]', 1, 1, 'i');\n+>> A\n+\n+-- case sensitive does not match upper case\n+CALL REGEXP_SUBSTR('A', '[a-z]', 1, 1, 'c');\n+>> null\n+\n+-- match string from position at string index 3\n+CALL REGEXP_SUBSTR('help helpful', 'help.*', 3);\n+>> helpful\n+\n+-- match string from position at string index 6\n+CALL REGEXP_SUBSTR('help helpful helping', 'help.*', 7);\n+>> helping\n+\n+-- should return first occurrence\n+CALL REGEXP_SUBSTR('helpful helping', 'help\\w*', 1, 1);\n+>> helpful\n+\n+-- should return second occurrence\n+CALL REGEXP_SUBSTR('helpful helping', 'help\\w*', 1, 2);\n+>> helping\n+\n+-- should return third occurrence\n+CALL REGEXP_SUBSTR('help helpful helping', 'help\\w*', 1, 3);\n+>> helping\n+\n+-- should return first occurrence, after string at index 3\n+CALL REGEXP_SUBSTR('help helpful helping', 'help\\w*', 3, 1);\n+>> helpful\n+\n+-- should first matching group\n+CALL REGEXP_SUBSTR('help helpful helping', '(help\\w*)', 1, 1, NULL, 1);\n+>> help\n+\n+-- should second occurrence of first group\n+CALL REGEXP_SUBSTR('help helpful helping', '(help\\w*)', 1, 2, NULL, 1);\n+>> helpful\n+\n+-- should second group\n+CALL REGEXP_SUBSTR('2020-10-01', '(\\d{4})-(\\d{2})-(\\d{2})', 1, 1, NULL, 2);\n+>> 10\n+\n+-- should third group\n+CALL REGEXP_SUBSTR('2020-10-01', '(\\d{4})-(\\d{2})-(\\d{2})', 1, 1, NULL, 3);\n+>> 01\n+\n+CALL REGEXP_SUBSTR('2020-10-01', '\\d{4}');\n+>> 2020\n+\n+-- Test variants of passing NULL, which should always result in NULL result\n+CALL REGEXP_SUBSTR('2020-10-01', NULL);\n+>> null\n+\n+CALL REGEXP_SUBSTR(NULL, NULL);\n+>> null\n+\n+CALL REGEXP_SUBSTR('2020-10-01', '\\d{4}', NULL);\n+>> null\n+\n+CALL REGEXP_SUBSTR('2020-10-01', '\\d{4}', 1, NULL);\n+>> null\n+\n+CALL REGEXP_SUBSTR('2020-10-01', '\\d{4}', 1, 1, NULL, NULL);\n+>> null", "originalCommit": "84284b7ef69b4648df83da863d60a750830084e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ3MzA0Ng==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428473046", "bodyText": "33b1736", "author": "vetler", "createdAt": "2020-05-21T06:38:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMDA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTM1Mw==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428411353", "bodyText": "inputString == ValueNull.INSTANCE?", "author": "katzyn", "createdAt": "2020-05-21T02:28:56Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,42 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n+            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+        String regexp = regexpArg.getString();\n+\n+        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+            return ValueNull.INSTANCE;\n+        }", "originalCommit": "84284b7ef69b4648df83da863d60a750830084e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ3MzAyMQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428473021", "bodyText": "33b1736", "author": "vetler", "createdAt": "2020-05-21T06:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMTM1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMjAxMQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428412011", "bodyText": "subexpressoinArg can't be ValueNull.INSTANCE here, and this parameter has a typo in its name, should be subexpressionArg.\n(regexpModeArg can, but ValueNull.INSTANCE.getString() simply returns null.)", "author": "katzyn", "createdAt": "2020-05-21T02:31:58Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,42 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n+            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+        String regexp = regexpArg.getString();\n+\n+        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+            return ValueNull.INSTANCE;\n+        }\n+\n+        int position = positionArg != null ? positionArg.getInt() - 1 : 0;\n+        int requestedOccurrence = occurrenceArg != null ? occurrenceArg.getInt() : 1;\n+        String regexpMode = regexpModeArg != null ? regexpModeArg.getString() : null;\n+        int subexpression = subexpressoinArg != null && subexpressoinArg != ValueNull.INSTANCE ? subexpressoinArg.getInt() : 0;", "originalCommit": "84284b7ef69b4648df83da863d60a750830084e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ3Mjk3NQ==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428472975", "bodyText": "33b1736", "author": "vetler", "createdAt": "2020-05-21T06:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMjAxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMjYzOA==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428412638", "bodyText": "String values are treated in special way in Oracle compatibility mode, so ValueVarchar.get() needs to know the mode.\n            else {\n                return ValueVarchar.get(m.group(subexpression), session);\n            }\nSession should be passed to this method.", "author": "katzyn", "createdAt": "2020-05-21T02:34:44Z", "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,6 +1540,42 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n         return result;\n     }\n \n+    private Value regexpSubstr(Value inputString, Value regexpArg, Value positionArg, \n+            Value occurrenceArg, Value regexpModeArg, Value subexpressoinArg) {\n+        String regexp = regexpArg.getString();\n+\n+        if (regexpArg == ValueNull.INSTANCE || positionArg == ValueNull.INSTANCE \n+            || occurrenceArg == ValueNull.INSTANCE || subexpressoinArg == ValueNull.INSTANCE) {\n+            return ValueNull.INSTANCE;\n+        }\n+\n+        int position = positionArg != null ? positionArg.getInt() - 1 : 0;\n+        int requestedOccurrence = occurrenceArg != null ? occurrenceArg.getInt() : 1;\n+        String regexpMode = regexpModeArg != null ? regexpModeArg.getString() : null;\n+        int subexpression = subexpressoinArg != null && subexpressoinArg != ValueNull.INSTANCE ? subexpressoinArg.getInt() : 0;\n+        int flags = makeRegexpFlags(regexpMode, false);\n+        try {\n+            Matcher m = Pattern.compile(regexp, flags).matcher(inputString.getString());\n+\n+            boolean found = m.find(position);\n+            for(int occurrence = 1; occurrence < requestedOccurrence && found; occurrence++) {\n+                found = m.find();\n+            }\n+\n+            if (!found) {\n+                return ValueNull.INSTANCE;\n+            }\n+            else {\n+                return ValueVarchar.get(m.group(subexpression));\n+            }", "originalCommit": "84284b7ef69b4648df83da863d60a750830084e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ3MjkyNg==", "url": "https://github.com/h2database/h2database/pull/2635#discussion_r428472926", "bodyText": "33b1736", "author": "vetler", "createdAt": "2020-05-21T06:38:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMjYzOA=="}], "type": "inlineReview"}, {"oid": "bea8a665fe965c82063a4549bfc99d57567e01d1", "url": "https://github.com/h2database/h2database/commit/bea8a665fe965c82063a4549bfc99d57567e01d1", "message": "fixup! Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-21T06:37:14Z", "type": "forcePushed"}, {"oid": "33b1736ae681ba2a6d67f15a856755666477694d", "url": "https://github.com/h2database/h2database/commit/33b1736ae681ba2a6d67f15a856755666477694d", "message": "fixup! Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-21T06:38:08Z", "type": "forcePushed"}, {"oid": "f589a191290e62e4b1d8dcde0c4d10d78a8fdc69", "url": "https://github.com/h2database/h2database/commit/f589a191290e62e4b1d8dcde0c4d10d78a8fdc69", "message": "Fix wording and typos in documentation for regexp-functions", "committedDate": "2020-05-21T06:57:03Z", "type": "forcePushed"}, {"oid": "cd77e0a9e5f961de5eeda4a05858f2de8bd0533c", "url": "https://github.com/h2database/h2database/commit/cd77e0a9e5f961de5eeda4a05858f2de8bd0533c", "message": "Implements the REGEXP_SUBSTR function, modeled on the same function as defined in Oracle 18", "committedDate": "2020-05-21T07:00:10Z", "type": "commit"}, {"oid": "caccceb0082cfd511c0f257b35b078343f3cdb45", "url": "https://github.com/h2database/h2database/commit/caccceb0082cfd511c0f257b35b078343f3cdb45", "message": "Fix wording and typos in documentation for regexp-functions", "committedDate": "2020-05-21T07:00:15Z", "type": "commit"}, {"oid": "caccceb0082cfd511c0f257b35b078343f3cdb45", "url": "https://github.com/h2database/h2database/commit/caccceb0082cfd511c0f257b35b078343f3cdb45", "message": "Fix wording and typos in documentation for regexp-functions", "committedDate": "2020-05-21T07:00:15Z", "type": "forcePushed"}]}