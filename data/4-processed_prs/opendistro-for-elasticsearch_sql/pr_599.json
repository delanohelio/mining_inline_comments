{"pr_number": 599, "pr_title": "Support trigonometric functions acos, asin, atan, atan2, cos, cot, degrees, radians, sin, tan", "pr_createdAt": "2020-07-20T19:55:09Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/599", "timeline": [{"oid": "ac267b396e4c1e33628f0c9b2470ed2b8a9bdcea", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ac267b396e4c1e33628f0c9b2470ed2b8a9bdcea", "message": "support trigonometric functions acos, asin, atan, atan2, cos, cot, degrees, radians, sin, tan", "committedDate": "2020-07-18T00:47:26Z", "type": "commit"}, {"oid": "61e60b6964728783bd5f875a0fbfe4dddb1a5722", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/61e60b6964728783bd5f875a0fbfe4dddb1a5722", "message": "Merge branch 'develop' into math4\n\n# Conflicts:\n#\tcore/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/DSL.java\n#\tcore/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java\n#\tcore/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunctionTest.java\n#\tppl/src/main/antlr/OpenDistroPPLParser.g4\n#\tsql/src/main/antlr/OpenDistroSQLParser.g4", "committedDate": "2020-07-20T19:36:35Z", "type": "commit"}, {"oid": "9d32a734f0ee9e9a87b04312fdae160f5c637f9a", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/9d32a734f0ee9e9a87b04312fdae160f5c637f9a", "message": "updated doc", "committedDate": "2020-07-20T20:53:03Z", "type": "commit"}, {"oid": "004de1e799a9e9b4170da63190146f261231a11b", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/004de1e799a9e9b4170da63190146f261231a11b", "message": "added sql comparison test cases", "committedDate": "2020-07-21T17:16:20Z", "type": "commit"}, {"oid": "ac98ce0826543136b9739051e0ba04f637e4b6bb", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ac98ce0826543136b9739051e0ba04f637e4b6bb", "message": "added integ test cases in ppl", "committedDate": "2020-07-21T17:47:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3MzkzOQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/599#discussion_r458373939", "bodyText": "Could you document this special case?", "author": "dai-chen", "createdAt": "2020-07-21T20:39:35Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java", "diffHunk": "@@ -429,6 +439,154 @@ private static FunctionResolver truncate() {\n             .build());\n   }\n \n+  /**\n+   * Definition of acos(x) function.\n+   * Calculates the arc cosine of x, that is, the value whose cosine is x.\n+   * Returns NULL if x is not in the range -1 to 1.\n+   * The supported signature of acos function is\n+   * INTEGER/LONG/FLOAT/DOUBLE -> DOUBLE\n+   */\n+  private static FunctionResolver acos() {\n+    FunctionName functionName = BuiltinFunctionName.ACOS.getName();\n+    return new FunctionResolver(\n+        functionName,\n+        singleArgumentFunction(functionName, v -> v < -1 || v > 1 ? null : Math.acos(v)));\n+  }\n+\n+  /**\n+   * Definition of asin(x) function.\n+   * Calculates the arc sine of x, that is, the value whose sine is x.\n+   * Returns NULL if x is not in the range -1 to 1.\n+   * The supported signature of asin function is\n+   * INTEGER/LONG/FLOAT/DOUBLE -> DOUBLE\n+   */\n+  private static FunctionResolver asin() {\n+    FunctionName functionName = BuiltinFunctionName.ASIN.getName();\n+    return new FunctionResolver(\n+        functionName,\n+        singleArgumentFunction(functionName, v -> v < -1 || v > 1 ? null : Math.asin(v)));\n+  }\n+\n+  /**\n+   * Definition of atan(x) and atan(y, x) function.\n+   * atan(x) calculates the arc tangent of x, that is, the value whose tangent is x.\n+   * atan(y, x) calculates the arc tangent of y / x, except that the signs of both arguments\n+   * are used to determine the quadrant of the result.\n+   * The supported signature of atan function is\n+   * (x: INTEGER/LONG/FLOAT/DOUBLE, y: INTEGER/LONG/FLOAT/DOUBLE) -> DOUBLE\n+   */\n+  private static FunctionResolver atan() {\n+    FunctionName functionName = BuiltinFunctionName.ATAN.getName();\n+    return new FunctionResolver(functionName,\n+        new ImmutableMap.Builder<FunctionSignature, FunctionBuilder>()\n+            .put(\n+                new FunctionSignature(functionName, Arrays.asList(ExprCoreType.DOUBLE)),\n+                unaryOperator(\n+                    functionName, Math::atan, ExprValueUtils::getDoubleValue, ExprCoreType.DOUBLE))\n+            .put(\n+                new FunctionSignature(\n+                    functionName, Arrays.asList(ExprCoreType.DOUBLE, ExprCoreType.DOUBLE)),\n+                doubleArgFunc(functionName,\n+                    Math::atan2, ExprValueUtils::getDoubleValue, ExprValueUtils::getDoubleValue,\n+                    ExprCoreType.DOUBLE))\n+            .build());\n+  }\n+\n+  /**\n+   * Definition of atan2(y, x) function.\n+   * Calculates the arc tangent of y / x, except that the signs of both arguments\n+   * are used to determine the quadrant of the result.\n+   * The supported signature of atan2 function is\n+   * (x: INTEGER/LONG/FLOAT/DOUBLE, y: INTEGER/LONG/FLOAT/DOUBLE) -> DOUBLE\n+   */\n+  private static FunctionResolver atan2() {\n+    FunctionName functionName = BuiltinFunctionName.ATAN2.getName();\n+    return new FunctionResolver(functionName,\n+        new ImmutableMap.Builder<FunctionSignature, FunctionBuilder>()\n+            .put(\n+                new FunctionSignature(\n+                    functionName, Arrays.asList(ExprCoreType.DOUBLE, ExprCoreType.DOUBLE)),\n+                doubleArgFunc(functionName,\n+                    Math::atan2, ExprValueUtils::getDoubleValue, ExprValueUtils::getDoubleValue,\n+                    ExprCoreType.DOUBLE))\n+            .build());\n+  }\n+\n+  /**\n+   * Definition of cos(x) function.\n+   * Calculates the cosine of X, where X is given in radians\n+   * The supported signature of cos function is\n+   * INTEGER/LONG/FLOAT/DOUBLE -> DOUBLE\n+   */\n+  private static FunctionResolver cos() {\n+    FunctionName functionName = BuiltinFunctionName.COS.getName();\n+    return new FunctionResolver(functionName, singleArgumentFunction(functionName, Math::cos));\n+  }\n+\n+  /**\n+   * Definition of cot(x) function.\n+   * Calculates the cotangent of x\n+   * The supported signature of cot function is\n+   * INTEGER/LONG/FLOAT/DOUBLE -> DOUBLE\n+   */\n+  private static FunctionResolver cot() {\n+    FunctionName functionName = BuiltinFunctionName.COT.getName();\n+    return new FunctionResolver(\n+        functionName,\n+        singleArgumentFunction(functionName, v -> {\n+          if (v == 0) {\n+            throw new ArithmeticException(String.format(\"Out of range value for cot(%s)\", v));\n+          }", "originalCommit": "ac98ce0826543136b9739051e0ba04f637e4b6bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM4MTQxNg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/599#discussion_r458381416", "bodyText": "Done, thanks!", "author": "chloe-zh", "createdAt": "2020-07-21T20:54:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3MzkzOQ=="}], "type": "inlineReview"}, {"oid": "6e65b9946148a70b96711db98963f5e221a6233e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6e65b9946148a70b96711db98963f5e221a6233e", "message": "update", "committedDate": "2020-07-21T20:53:48Z", "type": "commit"}, {"oid": "97bd3ec70808f1d9a0d9a2d18abff0a6ef4c3c96", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/97bd3ec70808f1d9a0d9a2d18abff0a6ef4c3c96", "message": "Merge remote-tracking branch 'upstream/develop' into math4\n\n# Conflicts:\n#\tcore/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunction.java\n#\tcore/src/test/java/com/amazon/opendistroforelasticsearch/sql/expression/operator/arthmetic/MathematicalFunctionTest.java\n#\tinteg-test/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/MathematicalFunctionIT.java\n#\tinteg-test/src/test/resources/correctness/expressions/functions.txt\n#\tppl/src/main/antlr/OpenDistroPPLParser.g4\n#\tsql/src/main/antlr/OpenDistroSQLParser.g4", "committedDate": "2020-07-22T17:23:01Z", "type": "commit"}]}