{"pr_number": 436, "pr_title": "Add support of Resolved Expression", "pr_createdAt": "2020-04-21T22:15:35Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436", "timeline": [{"oid": "7aadc56e7c9f489487f4a0e4f5d0770d09b7a389", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/7aadc56e7c9f489487f4a0e4f5d0770d09b7a389", "message": "update", "committedDate": "2020-04-20T20:34:57Z", "type": "commit"}, {"oid": "1a492de27fa080938b8b8c5c95602448a7083021", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/1a492de27fa080938b8b8c5c95602448a7083021", "message": "update ut", "committedDate": "2020-04-21T04:51:00Z", "type": "commit"}, {"oid": "0a6aae95203cb2f8de26b00d3b1d2d277a18a7a4", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0a6aae95203cb2f8de26b00d3b1d2d277a18a7a4", "message": "add more ut", "committedDate": "2020-04-21T22:04:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUzMzE3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r412533175", "bodyText": "One of the two STRING should be STRUCT? Probably JDK EnumSet could be good use here if order doesn't matter.", "author": "dai-chen", "createdAt": "2020-04-21T22:24:45Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprType.java", "diffHunk": "@@ -29,4 +32,7 @@\n     ARRAY,\n \n     MISSING;\n+\n+    public static List<ExprType> NUMBERS = Arrays.asList(DOUBLE, FLOAT, LONG, INTEGER);\n+    public static List<ExprType> VALID = Arrays.asList(DOUBLE, FLOAT, LONG, INTEGER, BOOLEAN, STRING, STRING, ARRAY);", "originalCommit": "0a6aae95203cb2f8de26b00d3b1d2d277a18a7a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2Mjg2Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r412662866", "bodyText": "sure, seem no where to use it now. remove now.", "author": "penghuo", "createdAt": "2020-04-22T04:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUzMzE3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0Mzg3Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r412543872", "bodyText": "Missed JavaDoc here.", "author": "dai-chen", "createdAt": "2020-04-21T22:48:35Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/data/model/ExprType.java", "diffHunk": "@@ -15,6 +15,9 @@\n \n package com.amazon.opendistroforelasticsearch.sql.data.model;\n \n+import java.util.Arrays;\n+import java.util.List;\n+\n public enum ExprType {", "originalCommit": "0a6aae95203cb2f8de26b00d3b1d2d277a18a7a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MzAwMA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r412663000", "bodyText": "added.", "author": "penghuo", "createdAt": "2020-04-22T04:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0Mzg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NTU3MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r412545570", "bodyText": "The generic type name could be more clear? For example, Environment<Symbol, Value> or <Name, Value> etc.", "author": "dai-chen", "createdAt": "2020-04-21T22:52:32Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/env/Environment.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.env;\n+\n+/**\n+ * The definition of the environment.\n+ */\n+public interface Environment<T, R> {", "originalCommit": "0a6aae95203cb2f8de26b00d3b1d2d277a18a7a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2Mzc3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r412663775", "bodyText": "Done. preferred <Expr, Value>, because there is no symbol concept defined.", "author": "penghuo", "createdAt": "2020-04-22T04:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NTU3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2MjU5OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r412562598", "bodyText": "Since exception is thrown if function name or #args unmatched, I think we can also throw exception for param types directly?", "author": "dai-chen", "createdAt": "2020-04-21T23:33:35Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionSignature.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.amazon.opendistroforelasticsearch.sql.expression.function;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+import java.util.List;\n+\n+/**\n+ * Function signature is composed by function name and arguments list.\n+ */\n+@Getter\n+@RequiredArgsConstructor\n+@EqualsAndHashCode\n+public class FunctionSignature {\n+    private final FunctionName functionName;\n+    private final List<ExprType> paramTypeList;\n+\n+    /**\n+     * Check the function signature match or not.\n+     *\n+     * @return 0: exactly match, Integer.MAX: not match, by widening rule small number means better match.", "originalCommit": "0a6aae95203cb2f8de26b00d3b1d2d277a18a7a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1MDkxMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r413050913", "bodyText": "Good point. Done.", "author": "penghuo", "createdAt": "2020-04-22T14:50:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2MjU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2MzY1NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r412563654", "bodyText": "So we just need the closest signature which means the PriorityQueue could be replaced by a FunctionSignature and an integer as its similarity?", "author": "dai-chen", "createdAt": "2020-04-21T23:36:23Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionResolver.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.amazon.opendistroforelasticsearch.sql.expression.function;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Singular;\n+\n+import java.util.AbstractMap;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.PriorityQueue;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The Function Resolver hold the overload {@link FunctionExpressionBuilder} implementation.\n+ * is composed by {@link FunctionName} which identified the function name\n+ * and a map of {@link FunctionSignature} and {@link FunctionExpressionBuilder}\n+ * to represent the overloaded implementation\n+ */\n+@Builder\n+@RequiredArgsConstructor\n+public class FunctionResolver {\n+    @Getter\n+    private final FunctionName functionName;\n+    @Singular(\"functionBundle\")\n+    private final Map<FunctionSignature, FunctionExpressionBuilder> functionBundle;\n+\n+    /**\n+     * Resolve the {@link FunctionExpressionBuilder} by using input {@link FunctionSignature}.\n+     * If found the {@link FunctionExpressionBuilder} exactly match the input {@link FunctionSignature}, return it.\n+     * If applying the widening rule, found the most match one, return it.\n+     * If nothing found, throw {@link ExpressionEvaluationException}\n+     */\n+    public FunctionExpressionBuilder resolve(FunctionSignature unresolvedSignature) {\n+        PriorityQueue<Map.Entry<Integer, FunctionSignature>> functionMatchQueue = new PriorityQueue<>(\n+                Comparator.comparing(Map.Entry::getKey));\n+\n+        for (FunctionSignature functionSignature : functionBundle.keySet()) {\n+            int matchingDegree = unresolvedSignature.match(functionSignature);\n+            if (matchingDegree == 0) {\n+                return functionBundle.get(functionSignature);\n+            } else if (matchingDegree != Integer.MAX_VALUE) {\n+                functionMatchQueue.add(new AbstractMap.SimpleEntry<>(matchingDegree, functionSignature));\n+            }\n+        }\n+\n+        if (functionMatchQueue.isEmpty()) {\n+            throw new ExpressionEvaluationException(\n+                    String.format(\"%s function expected %s, but get %s\", functionName,\n+                            formatFunctions(functionBundle.keySet()),\n+                            formatTypes(unresolvedSignature.getParamTypeList())\n+                    ));\n+        } else {\n+            return functionBundle.get(functionMatchQueue.peek().getValue());", "originalCommit": "0a6aae95203cb2f8de26b00d3b1d2d277a18a7a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ5ODE3MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r413498170", "bodyText": "Done.", "author": "penghuo", "createdAt": "2020-04-23T04:22:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2MzY1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2NjMwNw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r412566307", "bodyText": "Better to have some doc for T, U, R's meaning.", "author": "dai-chen", "createdAt": "2020-04-21T23:43:22Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/scalar/OperatorUtils.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.scalar;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.FunctionExpression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.env.Environment;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionExpressionBuilder;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionName;\n+import lombok.experimental.UtilityClass;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+@UtilityClass\n+public class OperatorUtils {\n+    public static <T, R> FunctionExpressionBuilder binaryOperator(FunctionName functionName,\n+                                                                  BiFunction<T, T, R> function,\n+                                                                  Function<ExprValue, T> observer,\n+                                                                  ExprType returnType) {\n+        return binaryOperator(functionName, function, observer, observer, returnType);\n+    }\n+\n+    public static <T, U, R> FunctionExpressionBuilder binaryOperator(FunctionName functionName,", "originalCommit": "0a6aae95203cb2f8de26b00d3b1d2d277a18a7a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMDAzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r413110031", "bodyText": "Sure. Done.", "author": "penghuo", "createdAt": "2020-04-22T16:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2NjMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3MDcyNA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r412570724", "bodyText": "Is it better to use IMPOSSIBLE_WIDENING?", "author": "dai-chen", "createdAt": "2020-04-21T23:55:03Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/FunctionSignature.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.amazon.opendistroforelasticsearch.sql.expression.function;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+\n+import java.util.List;\n+\n+/**\n+ * Function signature is composed by function name and arguments list.\n+ */\n+@Getter\n+@RequiredArgsConstructor\n+@EqualsAndHashCode\n+public class FunctionSignature {\n+    private final FunctionName functionName;\n+    private final List<ExprType> paramTypeList;\n+\n+    /**\n+     * Check the function signature match or not.\n+     *\n+     * @return 0: exactly match, Integer.MAX: not match, by widening rule small number means better match.\n+     */\n+    public int match(FunctionSignature functionSignature) {\n+        if (!functionName.equals(functionSignature.getFunctionName())) {\n+            throw new ExpressionEvaluationException(\n+                    String.format(\"expression name: %s and %s doesn't match\",\n+                            functionName,\n+                            functionSignature.getFunctionName()));\n+        }\n+        List<ExprType> functionTypeList = functionSignature.getParamTypeList();\n+        if (paramTypeList.size() != functionTypeList.size()) {\n+            throw new ExpressionEvaluationException(\n+                    String.format(\"%s expression expected %d argument, but actually are %d\",\n+                            functionName,\n+                            paramTypeList.size(),\n+                            functionTypeList.size()));\n+        }\n+        int matchDegree = 0;\n+        for (int i = 0; i < paramTypeList.size(); i++) {\n+            ExprType paramType = paramTypeList.get(i);\n+            ExprType funcType = functionTypeList.get(i);\n+            int match = WideningTypeRule.distance(paramType, funcType);\n+            if (match == Integer.MAX_VALUE) {", "originalCommit": "0a6aae95203cb2f8de26b00d3b1d2d277a18a7a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1MTMxMQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r413051311", "bodyText": "Done.", "author": "penghuo", "createdAt": "2020-04-22T14:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3MDcyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3MTA3Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r412571076", "bodyText": "\"but distance(FLOAT, INTEGER) =\" impossible?", "author": "dai-chen", "createdAt": "2020-04-21T23:55:59Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/function/WideningTypeRule.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.function;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.exception.ExpressionEvaluationException;\n+import com.google.common.collect.ImmutableMap;\n+import lombok.experimental.UtilityClass;\n+\n+import java.util.Map;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprType.ARRAY;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprType.BOOLEAN;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprType.DOUBLE;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprType.LONG;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprType.MISSING;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprType.STRING;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprType.STRUCT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.model.ExprType.UNKNOWN;\n+\n+/**\n+ * The definition of widening type rule for expression value.\n+ * ExprType     Widens to data types\n+ * INTEGER      LONG, FLOAT, DOUBLE\n+ * LONG         FLOAT, DOUBLE\n+ * FLOAT        DOUBLE\n+ * DOUBLE       DOUBLE\n+ * STRING       STRING\n+ * BOOLEAN      BOOLEAN\n+ * ARRAY        ARRAY\n+ * STRUCT       STRUCT\n+ */\n+@UtilityClass\n+public class WideningTypeRule {\n+    public static final int IMPOSSIBLE_WIDENING = Integer.MAX_VALUE;\n+    public static final int TYPE_EQUAL = 0;\n+\n+    private static final Map<ExprType, ExprType> typeToWidenParent;\n+\n+    static {\n+        ImmutableMap.Builder<ExprType, ExprType> builder = new ImmutableMap.Builder<>();\n+        builder.put(INTEGER, LONG);\n+        builder.put(LONG, FLOAT);\n+        builder.put(FLOAT, DOUBLE);\n+        builder.put(DOUBLE, UNKNOWN);\n+        builder.put(STRING, UNKNOWN);\n+        builder.put(BOOLEAN, UNKNOWN);\n+        builder.put(ARRAY, UNKNOWN);\n+        builder.put(STRUCT, UNKNOWN);\n+        builder.put(MISSING, UNKNOWN);\n+        typeToWidenParent = builder.build();\n+    }\n+\n+    /**\n+     * The widening distance is calculated from the leaf to root.\n+     * e.g. distance(INTEGER, FLOAT) = 2, but distance(FLOAT, INTEGER) =", "originalCommit": "0a6aae95203cb2f8de26b00d3b1d2d277a18a7a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA3NDY2Mw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r413074663", "bodyText": "Done.", "author": "penghuo", "createdAt": "2020-04-22T15:17:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3MTA3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3ODA0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r412578042", "bodyText": "Just a question, do we handle NULL or MISSING somewhere? Not sure about SPL spec but both are following some rules to propagate during evaluation in SQL and PartiQL spec.", "author": "dai-chen", "createdAt": "2020-04-22T00:15:45Z", "path": "core/src/main/java/com/amazon/opendistroforelasticsearch/sql/expression/scalar/OperatorUtils.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.expression.scalar;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValueUtils;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.FunctionExpression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.env.Environment;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionExpressionBuilder;\n+import com.amazon.opendistroforelasticsearch.sql.expression.function.FunctionName;\n+import lombok.experimental.UtilityClass;\n+\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+@UtilityClass\n+public class OperatorUtils {\n+    public static <T, R> FunctionExpressionBuilder binaryOperator(FunctionName functionName,\n+                                                                  BiFunction<T, T, R> function,\n+                                                                  Function<ExprValue, T> observer,\n+                                                                  ExprType returnType) {\n+        return binaryOperator(functionName, function, observer, observer, returnType);\n+    }\n+\n+    public static <T, U, R> FunctionExpressionBuilder binaryOperator(FunctionName functionName,\n+                                                                     BiFunction<T, U, R> function,\n+                                                                     Function<ExprValue, T> observer1,\n+                                                                     Function<ExprValue, U> observer2,\n+                                                                     ExprType returnType) {\n+        return arguments -> new FunctionExpression(functionName, arguments) {\n+            @Override\n+            public ExprValue valueOf(Environment<Expression, ExprValue> env) {\n+                ExprValue arg1 = arguments.get(0).valueOf(env);\n+                ExprValue arg2 = arguments.get(1).valueOf(env);\n+                return ExprValueUtils.fromObjectValue(\n+                        function.apply(observer1.apply(arg1), observer2.apply(arg2)));", "originalCommit": "0a6aae95203cb2f8de26b00d3b1d2d277a18a7a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ5ODA2NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/436#discussion_r413498064", "bodyText": "Thanks for this important call out. Add support for null value and missing value. Update the description doc accordingly.", "author": "penghuo", "createdAt": "2020-04-23T04:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU3ODA0Mg=="}], "type": "inlineReview"}, {"oid": "f78f79de915555f33a435881270260a3004e1ec4", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f78f79de915555f33a435881270260a3004e1ec4", "message": "support missing and null value", "committedDate": "2020-04-23T04:20:21Z", "type": "commit"}, {"oid": "40d1e903f99b73c3cb5c47c31fa16f2a7ff0ab7f", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/40d1e903f99b73c3cb5c47c31fa16f2a7ff0ab7f", "message": "update doc and BuiltinFunctionRepository interface", "committedDate": "2020-04-23T14:49:47Z", "type": "commit"}]}