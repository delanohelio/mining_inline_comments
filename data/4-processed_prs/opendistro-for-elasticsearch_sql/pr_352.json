{"pr_number": 352, "pr_title": "Add the expression support post processing", "pr_createdAt": "2020-01-23T00:24:58Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/352", "timeline": [{"oid": "e8096980a017aef3a3318f113d161e3dc48f1686", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e8096980a017aef3a3318f113d161e3dc48f1686", "message": "update", "committedDate": "2020-01-13T18:47:01Z", "type": "commit"}, {"oid": "200f6039341b468d6d42b0a18804e60a4ea98269", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/200f6039341b468d6d42b0a18804e60a4ea98269", "message": "update", "committedDate": "2020-01-13T21:26:00Z", "type": "commit"}, {"oid": "caf3846bf43db7311b8a70d1bea67693eae44711", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/caf3846bf43db7311b8a70d1bea67693eae44711", "message": "update", "committedDate": "2020-01-13T23:48:42Z", "type": "commit"}, {"oid": "e865ef5a155f75e26dae2badad52e39bd1002311", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e865ef5a155f75e26dae2badad52e39bd1002311", "message": "update", "committedDate": "2020-01-14T14:50:14Z", "type": "commit"}, {"oid": "8ffd52b0a349d37da62f90db81a9bd4a08c510b7", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8ffd52b0a349d37da62f90db81a9bd4a08c510b7", "message": "add post processing logic for aggregation query", "committedDate": "2020-01-14T16:10:53Z", "type": "commit"}, {"oid": "4cf0118f742ff528768d0d586736641286aeecf1", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/4cf0118f742ff528768d0d586736641286aeecf1", "message": "expression update", "committedDate": "2020-01-16T18:16:55Z", "type": "commit"}, {"oid": "8bdf58ccf2a745617e1095201169320a67a48c5e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8bdf58ccf2a745617e1095201169320a67a48c5e", "message": "pass test", "committedDate": "2020-01-17T00:18:29Z", "type": "commit"}, {"oid": "38858724270d5127bbff0b1f275df33c9a8638cd", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/38858724270d5127bbff0b1f275df33c9a8638cd", "message": "Merge branch 'master' into expression-support", "committedDate": "2020-01-17T00:51:24Z", "type": "commit"}, {"oid": "4094410a7bde2ec1c44d21b94b2b2c64a149261b", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/4094410a7bde2ec1c44d21b94b2b2c64a149261b", "message": "update", "committedDate": "2020-01-17T16:20:24Z", "type": "commit"}, {"oid": "6a55145705110816b4b6f5dc7df55745508ab934", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6a55145705110816b4b6f5dc7df55745508ab934", "message": "Merge branch 'master' into expression-support", "committedDate": "2020-01-22T18:26:11Z", "type": "commit"}, {"oid": "656c9956b1ca777d197ed78ba7a21f4f9dbad7ea", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/656c9956b1ca777d197ed78ba7a21f4f9dbad7ea", "message": "update", "committedDate": "2020-01-22T22:15:13Z", "type": "commit"}, {"oid": "92497d0409ae423ef3fbe6a047fddfbf64499f15", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/92497d0409ae423ef3fbe6a047fddfbf64499f15", "message": "add tan", "committedDate": "2020-01-23T00:12:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5MTM5MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/352#discussion_r370391390", "bodyText": "Any specific reason only ABS() and Tan2() were tested against with String values?", "author": "davidcui1225", "createdAt": "2020-01-23T22:35:12Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/sql/unittest/expression/core/UnaryExpressionTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.unittest.expression.core;\n+\n+import com.amazon.opendistroforelasticsearch.sql.expression.core.operator.ScalarOperation;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.expression.core.ExpressionFactory.literal;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValueFactory.doubleValue;\n+import static com.amazon.opendistroforelasticsearch.sql.expression.model.ExprValueFactory.stringValue;\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class UnaryExpressionTest extends ExpressionTest {\n+\n+    @Rule\n+    public ExpectedException exceptionRule = ExpectedException.none();\n+\n+    @Test\n+    public void absShouldPass() {\n+        assertEquals(2.0d, apply(ScalarOperation.ABS, literal(doubleValue(-2d))));\n+    }\n+\n+    @Test\n+    public void asinShouldPass() {\n+        assertEquals(0.1001674211615598d, apply(ScalarOperation.ASIN, literal(doubleValue(0.1d))));\n+    }\n+\n+    @Test\n+    public void atanShouldPass() {\n+        assertEquals(1.1071487177940904d, apply(ScalarOperation.ATAN, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void tanShouldPass() {\n+        assertEquals(-2.185039863261519, apply(ScalarOperation.TAN, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void atan2ShouldPass() {\n+        assertEquals(1.1071487177940904d,\n+                     apply(ScalarOperation.ATAN2, literal(doubleValue(2d)), literal(doubleValue(1d))));\n+    }\n+\n+    @Test\n+    public void cbrtShouldPass() {\n+        assertEquals(1.2599210498948732d,\n+                     apply(ScalarOperation.CBRT, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void ceilShouldPass() {\n+        assertEquals(3.0d,\n+                     apply(ScalarOperation.CEIL, literal(doubleValue(2.1d))));\n+    }\n+\n+    @Test\n+    public void floorShouldPass() {\n+        assertEquals(2.0d,\n+                     apply(ScalarOperation.FLOOR, literal(doubleValue(2.1d))));\n+    }\n+\n+    @Test\n+    public void cosShouldPass() {\n+        assertEquals(-0.4161468365471424d,\n+                     apply(ScalarOperation.COS, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void coshShouldPass() {\n+        assertEquals(3.7621956910836314d,\n+                     apply(ScalarOperation.COSH, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void expShouldPass() {\n+        assertEquals(7.38905609893065d,\n+                     apply(ScalarOperation.EXP, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void lnShouldPass() {\n+        assertEquals(0.6931471805599453d,\n+                     apply(ScalarOperation.LN, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void logShouldPass() {\n+        assertEquals(0.6931471805599453d,\n+                     apply(ScalarOperation.LOG, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void log2ShouldPass() {\n+        assertEquals(1.0d,\n+                     apply(ScalarOperation.LOG2, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void log10ShouldPass() {\n+        assertEquals(0.3010299956639812,\n+                     apply(ScalarOperation.LOG10, literal(doubleValue(2d))));\n+    }\n+\n+    @Test\n+    public void absWithStringShouldThrowException() {", "originalCommit": "92497d0409ae423ef3fbe6a047fddfbf64499f15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0MjY4Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/352#discussion_r370742686", "bodyText": "ideally all the type should been tested. the purpose of the test is to verify the error message is as expected.", "author": "penghuo", "createdAt": "2020-01-24T17:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5MTM5MA=="}], "type": "inlineReview"}]}