{"pr_number": 429, "pr_title": "[PPL] Create ANTLR parser and implement basic syntax - Phase0", "pr_createdAt": "2020-04-14T04:44:17Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429", "timeline": [{"oid": "8a44cfc3e1246d3f39012aa5e476f5e5717a01c4", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8a44cfc3e1246d3f39012aa5e476f5e5717a01c4", "message": "m", "committedDate": "2020-04-06T18:25:14Z", "type": "commit"}, {"oid": "204bb818b31ba0e2726f2cfc9c7b3a27e4994515", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/204bb818b31ba0e2726f2cfc9c7b3a27e4994515", "message": "Merge branch 'feature/ppl' of github.com:opendistro-for-elasticsearch/sql into ppl-parser", "committedDate": "2020-04-09T04:45:46Z", "type": "commit"}, {"oid": "3bfdb2844147556cd37a51a325f1f599ec9b4ab5", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3bfdb2844147556cd37a51a325f1f599ec9b4ab5", "message": "Added antlr files", "committedDate": "2020-04-09T17:10:56Z", "type": "commit"}, {"oid": "c2f63c040031556f3ad154c09ae996c9b34b55ec", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c2f63c040031556f3ad154c09ae996c9b34b55ec", "message": "Merge remote-tracking branch 'upstream/feature/ppl' into ppl-parser", "committedDate": "2020-04-10T01:05:24Z", "type": "commit"}, {"oid": "084f380ec79e76c8665e780f40e921564ba33b8d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/084f380ec79e76c8665e780f40e921564ba33b8d", "message": "Added wildcard", "committedDate": "2020-04-12T00:40:23Z", "type": "commit"}, {"oid": "8c45b24b366fb80b3aa67e5dd68ede0f3d765d83", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8c45b24b366fb80b3aa67e5dd68ede0f3d765d83", "message": "Implemented parser for commands of simple syntax", "committedDate": "2020-04-14T04:31:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5NTI2NQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408195265", "bodyText": "why ppl need the org.elasticsearch as the dependency?", "author": "penghuo", "createdAt": "2020-04-14T14:46:40Z", "path": "ppl/build.gradle", "diffHunk": "@@ -25,6 +25,9 @@ dependencies {\n     antlr \"org.antlr:antlr4:4.7.1\"\n \n     compile \"org.antlr:antlr4-runtime:4.7.1\"\n+    compile group: 'com.google.guava', name: 'guava', version:'15.0'\n+    compile group: 'org.elasticsearch', name: 'elasticsearch', version:\"${es_version}\"\n+    compile group: 'org.elasticsearch', name: 'elasticsearch-x-content', version:\"${es_version}\"", "originalCommit": "8c45b24b366fb80b3aa67e5dd68ede0f3d765d83", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5NjU2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408196569", "bodyText": "Remove unused imports", "author": "penghuo", "createdAt": "2020-04-14T14:48:19Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/NodeVisitor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.node;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Literal;", "originalCommit": "8c45b24b366fb80b3aa67e5dd68ede0f3d765d83", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3OTg4MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408279881", "bodyText": "done, thanks!", "author": "chloe-zh", "createdAt": "2020-04-14T16:39:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5NjU2OQ=="}], "type": "inlineReview"}, {"oid": "6b542eb5496b0034f8506a8b15e53071d56686ad", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6b542eb5496b0034f8506a8b15e53071d56686ad", "message": "addressed comments", "committedDate": "2020-04-14T16:39:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzMTIxOA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408331218", "bodyText": "Just a reminder, we may want to avoid those issues regarding index name in SQL since the very beginning of this project, such as index name with dot or colon (some user reported CloudWatch generates such index).", "author": "dai-chen", "createdAt": "2020-04-14T18:01:03Z", "path": "ppl/src/main/antlr/OpenDistroPPLParser.g4", "diffHunk": "@@ -26,32 +26,31 @@ pplStatement\n     : searchCommand (PIPE commands)*\n     ;\n \n-\n /** commands */\n commands\n     : whereCommand | fieldsCommand | renameCommand | statsCommand | dedupCommand | sortCommand | evalCommand\n     ;\n \n searchCommand\n-    : (SEARCH)? fromClause                                          #searchWithoutFilter\n-    | (SEARCH)? fromClause logicalExpression                        #searchFromClauseLogicExpr\n-    | (SEARCH)? logicalExpression fromClause                        #searchLogicExprFromClause\n+    : (SEARCH)? fromClause                                          #searchFrom", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4NTg5OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410385899", "bodyText": "Yes that's a good point. Thanks for your reminder. I've added these special cases now. They are refracted in tableSource item in the parser file.", "author": "chloe-zh", "createdAt": "2020-04-17T18:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzMTIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzMjY5MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408332691", "bodyText": "Could you add JavaDoc for all public classes to document their abstractions and responsibilities?", "author": "dai-chen", "createdAt": "2020-04-14T18:03:32Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/node/AbstractNodeVisitor.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.node;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.AggregateFunction;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.And;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.AttributeList;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.AttributeReference;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.EqualTo;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Function;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.In;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Literal;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Map;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Not;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Or;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.UnresolvedAttribute;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Aggregation;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Filter;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Project;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Relation;\n+\n+public class AbstractNodeVisitor<T> implements NodeVisitor<T> {", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4NjIzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410386235", "bodyText": "Sure will do, thanks!", "author": "chloe-zh", "createdAt": "2020-04-17T18:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzMjY5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzNzQ1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408337452", "bodyText": "Np: using static import can make this class cleaner.", "author": "dai-chen", "createdAt": "2020-04-14T18:11:35Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.parser;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParserBaseVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Map;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Aggregation;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Filter;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.LogicalPlan;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Project;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Relation;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.stream.Collectors;\n+import lombok.RequiredArgsConstructor;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+@RequiredArgsConstructor\n+public class AstBuilder extends OpenDistroPPLParserBaseVisitor<LogicalPlan> {\n+    private final AstExpressionBuilder expressionBuilder;\n+\n+    @Override\n+    public LogicalPlan visitPplStatement(OpenDistroPPLParser.PplStatementContext ctx) {", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MDE0OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410480148", "bodyText": "Yes that's what I would like to do but the IDEA was not able to automatically add them as the static methods. I will manually replace them", "author": "chloe-zh", "createdAt": "2020-04-17T21:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzNzQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzOTk3Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408339976", "bodyText": "Is this necessary? I assume parser has handled this?", "author": "dai-chen", "createdAt": "2020-04-14T18:15:59Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.parser;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParserBaseVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.AggregateFunction;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.And;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.AttributeList;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.DataType;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.EqualTo;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Function;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.In;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Literal;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Not;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Or;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.UnresolvedAttribute;\n+import java.util.stream.Collectors;\n+\n+public class AstExpressionBuilder extends OpenDistroPPLParserBaseVisitor<Expression> {\n+    /** Logical expression excluding boolean, eval, comparison */\n+    @Override\n+    public Expression visitLogicalNot(OpenDistroPPLParser.LogicalNotContext ctx) {\n+        return new Not(visit(ctx.logicalExpression()));\n+    }\n+\n+    @Override\n+    public Expression visitLogicalOr(OpenDistroPPLParser.LogicalOrContext ctx) {\n+        return new Or(visit(ctx.left), visit(ctx.right));\n+    }\n+\n+    @Override\n+    public Expression visitLogicalAnd(OpenDistroPPLParser.LogicalAndContext ctx) {\n+        return new And(visit(ctx.left), visit(ctx.right));\n+    }\n+\n+\n+    /** Eval expression */\n+    @Override\n+    public Expression visitEvalExpression(OpenDistroPPLParser.EvalExpressionContext ctx) {\n+        Expression field = visit(ctx.fieldExpression());\n+        Expression evalFunctionCall = visit(ctx.evalFunctionCall());\n+        return new EqualTo(field, evalFunctionCall);\n+    }\n+\n+    /** Comparison expression */\n+    @Override\n+    public Expression visitCompareExpr(OpenDistroPPLParser.CompareExprContext ctx) {\n+        Expression field = visit(ctx.left);\n+        Expression value = visit(ctx.right);\n+        String operator = ctx.comparisonOperator().getText();\n+        switch (operator.replaceAll(\"\\\\s\",\"\")) {", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MDUwNA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410480504", "bodyText": "Yeah makes sense, I overthought the cases. I will remove it. Thanks!", "author": "chloe-zh", "createdAt": "2020-04-17T21:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzOTk3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MDMyMg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408340322", "bodyText": "Why not just remove it from grammar?", "author": "dai-chen", "createdAt": "2020-04-14T18:16:38Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilder.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.parser;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParserBaseVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.AggregateFunction;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.And;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.AttributeList;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.DataType;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.EqualTo;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Function;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.In;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Literal;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Not;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Or;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.UnresolvedAttribute;\n+import java.util.stream.Collectors;\n+\n+public class AstExpressionBuilder extends OpenDistroPPLParserBaseVisitor<Expression> {\n+    /** Logical expression excluding boolean, eval, comparison */\n+    @Override\n+    public Expression visitLogicalNot(OpenDistroPPLParser.LogicalNotContext ctx) {\n+        return new Not(visit(ctx.logicalExpression()));\n+    }\n+\n+    @Override\n+    public Expression visitLogicalOr(OpenDistroPPLParser.LogicalOrContext ctx) {\n+        return new Or(visit(ctx.left), visit(ctx.right));\n+    }\n+\n+    @Override\n+    public Expression visitLogicalAnd(OpenDistroPPLParser.LogicalAndContext ctx) {\n+        return new And(visit(ctx.left), visit(ctx.right));\n+    }\n+\n+\n+    /** Eval expression */\n+    @Override\n+    public Expression visitEvalExpression(OpenDistroPPLParser.EvalExpressionContext ctx) {\n+        Expression field = visit(ctx.fieldExpression());\n+        Expression evalFunctionCall = visit(ctx.evalFunctionCall());\n+        return new EqualTo(field, evalFunctionCall);\n+    }\n+\n+    /** Comparison expression */\n+    @Override\n+    public Expression visitCompareExpr(OpenDistroPPLParser.CompareExprContext ctx) {\n+        Expression field = visit(ctx.left);\n+        Expression value = visit(ctx.right);\n+        String operator = ctx.comparisonOperator().getText();\n+        switch (operator.replaceAll(\"\\\\s\",\"\")) {\n+            case \"==\":\n+            case \"=\":\n+                return new EqualTo(field, value);\n+            default:\n+                throw new UnsupportedOperationException(String.format(\"unsupported operator [%s]\", operator));", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MTM3Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410481372", "bodyText": "This was a temporary solution here, because we still have a couple of binary operators to add. I will finish them in next PR, which is to supplement all the optional arguments in commands of phase0.", "author": "chloe-zh", "createdAt": "2020-04-17T21:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MDMyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMTI2Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410521262", "bodyText": "Got it. Thanks!", "author": "dai-chen", "createdAt": "2020-04-18T00:09:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MDMyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MzE1OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408343158", "bodyText": "return left and right? And same for other getChild().", "author": "dai-chen", "createdAt": "2020-04-14T18:21:27Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/And.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.AbstractNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.NodeVisitor;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+@Getter\n+@ToString\n+@EqualsAndHashCode\n+@RequiredArgsConstructor\n+public class And extends Expression {\n+    private final Expression left;\n+    private final Expression right;\n+\n+    @Override\n+    public List<Expression> getChild() {\n+        return ImmutableList.of();", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5ODAyOA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410498028", "bodyText": "Yes exactly, will do. Thanks!", "author": "chloe-zh", "createdAt": "2020-04-17T22:24:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MzE1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NTA3OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408345079", "bodyText": "I see a pattern for all accept methods. We can think about how to make it clean.", "author": "dai-chen", "createdAt": "2020-04-14T18:24:32Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/AggregateFunction.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.AbstractNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.NodeVisitor;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+@Getter\n+@ToString\n+@EqualsAndHashCode\n+@RequiredArgsConstructor\n+public class AggregateFunction extends Expression {\n+    private final Expression funcName;\n+    private final Expression field;\n+\n+    @Override\n+    public List<Expression> getChild() {\n+        return ImmutableList.of();\n+    }\n+\n+    @Override\n+    public <R> R accept(NodeVisitor<R> nodeVisitor) {\n+        if (nodeVisitor instanceof AbstractNodeVisitor) {\n+            return ((AbstractNodeVisitor<R>) nodeVisitor).visitAggregateFunction(this);\n+        } else {\n+            return nodeVisitor.visitChildren(this);\n+        }", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NjU5MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408346590", "bodyText": "The class is already annotated by @Getter?", "author": "dai-chen", "createdAt": "2020-04-14T18:27:05Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.AbstractNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.NodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Expression;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@Getter\n+@ToString\n+@EqualsAndHashCode\n+public class Aggregation extends LogicalPlan {\n+    @Getter", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4Njk4OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410486989", "bodyText": "Removed, thanks!", "author": "chloe-zh", "createdAt": "2020-04-17T21:50:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NjU5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NzU5MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r408347590", "bodyText": "Please add JavaDoc for generic type too.", "author": "dai-chen", "createdAt": "2020-04-14T18:28:46Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/HasInput.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical;\n+\n+public interface HasInput<T, R> {", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4OTk5Mw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410489993", "bodyText": "Ok will do, thanks!", "author": "chloe-zh", "createdAt": "2020-04-17T21:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NzU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2MTg5OA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411461898", "bodyText": "could we make the node Immutable by using the context to maintain the current parent command?", "author": "penghuo", "createdAt": "2020-04-20T15:15:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NzU5MA=="}], "type": "inlineReview"}, {"oid": "46bb1dc41b5154bd4274c2dc9b0c2b63b8582a24", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/46bb1dc41b5154bd4274c2dc9b0c2b63b8582a24", "message": "Enabled parsing nested fields and arrays in field", "committedDate": "2020-04-16T22:00:14Z", "type": "commit"}, {"oid": "80b06294773f7013a2f51b72ebce3c71f54257f8", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/80b06294773f7013a2f51b72ebce3c71f54257f8", "message": "Added unit tests for nested fields", "committedDate": "2020-04-17T18:00:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2NDcxMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410464713", "bodyText": "should it be \"Keyword\" instead of \"KeyWord\"", "author": "zhongnansu", "createdAt": "2020-04-17T20:54:19Z", "path": "ppl/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstExpressionBuilderTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.parser;\n+\n+import java.util.Collections;\n+import org.junit.Test;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.agg;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.aggregate;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.and;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.doubleLiteral;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.equalTo;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.filter;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.function;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.in;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.intLiteral;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.not;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.or;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.project;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.relation;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.stringLiteral;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.unresolvedAttr;\n+\n+public class AstExpressionBuilderTest extends AstBuilderTest{\n+\n+    @Test\n+    public void testLogicalNotExpr() {\n+        assertEqual(\"source=t not a=1\",\n+                filter(\n+                        relation(\"t\"),\n+                        not(\n+                                equalTo(unresolvedAttr(\"a\"), intLiteral(1))\n+                        )\n+                ));\n+    }\n+\n+    @Test\n+    public void testLogicalOrExpr() {\n+        assertEqual(\"source=t a=1 or b=2\",\n+                filter(\n+                        relation(\"t\"),\n+                        or(\n+                                equalTo(unresolvedAttr(\"a\"), intLiteral(1)),\n+                                equalTo(unresolvedAttr(\"b\"), intLiteral(2))\n+                        )\n+                ));\n+    }\n+\n+    @Test\n+    public void testLogicalAndExpr() {\n+        assertEqual(\"source=t a=1 and b=2\",\n+                filter(\n+                        relation(\"t\"),\n+                        and(\n+                                equalTo(unresolvedAttr(\"a\"), intLiteral(1)),\n+                                equalTo(unresolvedAttr(\"b\"), intLiteral(2))\n+                        )\n+                ));\n+    }\n+\n+    @Test\n+    public void testLogicalAndExprWithoutKeyWordAnd() {", "originalCommit": "6b542eb5496b0034f8506a8b15e53071d56686ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5MDIyMQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r410490221", "bodyText": "Will do, thanks!", "author": "chloe-zh", "createdAt": "2020-04-17T21:59:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ2NDcxMw=="}], "type": "inlineReview"}, {"oid": "ddf9c5a0dd4fc45dab4737cbd122396ddce87b6f", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/ddf9c5a0dd4fc45dab4737cbd122396ddce87b6f", "message": "Added Java doc for classes", "committedDate": "2020-04-17T21:30:08Z", "type": "commit"}, {"oid": "17a8503378d37e5ba5d76ef0a888aedd909d3ea4", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/17a8503378d37e5ba5d76ef0a888aedd909d3ea4", "message": "Replaced the imported parser with static methods in the parser", "committedDate": "2020-04-17T21:49:03Z", "type": "commit"}, {"oid": "784df880868ef82a3062bbded3b28a5a3d8412f0", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/784df880868ef82a3062bbded3b28a5a3d8412f0", "message": "Addressed comments", "committedDate": "2020-04-17T22:01:36Z", "type": "commit"}, {"oid": "c251f030006ab69ee24a1aa8c7b1d905d2701703", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c251f030006ab69ee24a1aa8c7b1d905d2701703", "message": "Addressed comments", "committedDate": "2020-04-17T22:22:36Z", "type": "commit"}, {"oid": "3a92f1169381a911bde9adb31a9e0aa28700be24", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3a92f1169381a911bde9adb31a9e0aa28700be24", "message": "Addressed comments", "committedDate": "2020-04-18T01:58:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2MDkxMA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411460910", "bodyText": "change LogicalPlan to UnresolvedPlan. In case all the object is from literal query string which is not resolved with env yet.", "author": "penghuo", "createdAt": "2020-04-20T15:14:34Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/LogicalPlan.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.Node;\n+\n+public abstract class LogicalPlan implements Node<LogicalPlan>, HasInput<LogicalPlan, LogicalPlan> {", "originalCommit": "c251f030006ab69ee24a1aa8c7b1d905d2701703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2MDU0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411560549", "bodyText": "Ok will do", "author": "chloe-zh", "createdAt": "2020-04-20T17:30:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2MDkxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MTE2MA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411471160", "bodyText": "Why we want to different SearchFromFilter and SearchFilterFrom?", "author": "penghuo", "createdAt": "2020-04-20T15:27:22Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilder.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.parser;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParserBaseVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Map;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Aggregation;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Filter;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.LogicalPlan;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Project;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.Relation;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import lombok.RequiredArgsConstructor;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.DedupCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.EvalCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.FieldsCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.FromClauseContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.PplStatementContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.RenameCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.SearchFilterFromContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.SearchFromContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.SearchFromFilterContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.SortCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.StatsCommandContext;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.antlr.parser.OpenDistroPPLParser.WhereCommandContext;\n+\n+/**\n+ * Class of walking the AST\n+ * Refines the visit path and build the LogicalPlan and Expression nodes interface\n+ */\n+@RequiredArgsConstructor\n+public class AstBuilder extends OpenDistroPPLParserBaseVisitor<LogicalPlan> {\n+    private final AstExpressionBuilder expressionBuilder;\n+\n+    @Override\n+    public LogicalPlan visitPplStatement(PplStatementContext ctx) {\n+        LogicalPlan search = visit(ctx.searchCommand());\n+        LogicalPlan reduce = ctx.commands().stream().map(this::visit).reduce(search, (r, e) -> e.withInput(r));\n+        return reduce;\n+    }\n+\n+    /** Search command */\n+    @Override\n+    public LogicalPlan visitSearchFrom(SearchFromContext ctx) {\n+        return visitFromClause(ctx.fromClause());\n+    }\n+\n+    @Override\n+    public LogicalPlan visitSearchFromFilter(SearchFromFilterContext ctx) {\n+        return new Filter(visitExpression(ctx.logicalExpression())).withInput(visit(ctx.fromClause()));\n+    }\n+\n+    @Override\n+    public LogicalPlan visitSearchFilterFrom(SearchFilterFromContext ctx) {\n+        return new Filter(visitExpression(ctx.logicalExpression())).withInput(visit(ctx.fromClause()));\n+    }", "originalCommit": "c251f030006ab69ee24a1aa8c7b1d905d2701703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2MDQxMg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411560412", "bodyText": "It was only the matter of the order in grammar file", "author": "chloe-zh", "createdAt": "2020-04-20T17:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MTE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MjI3OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411472279", "bodyText": "what is the difference between constant and literal", "author": "penghuo", "createdAt": "2020-04-20T15:28:43Z", "path": "ppl/src/main/antlr/OpenDistroPPLParser.g4", "diffHunk": "@@ -283,32 +300,16 @@ valueList\n     : LT_PRTHS literalValue (COMMA literalValue)* RT_PRTHS\n     ;\n \n-fullColumnName\n-    : simpleId DOT_ID*\n-    ;\n-\n constant", "originalCommit": "c251f030006ab69ee24a1aa8c7b1d905d2701703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2MDIzMw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411560233", "bodyText": "The constant includes literal, and also includes negative constants and Boolean constants. It is used as an argument in functions. We could say the constant is more like used in the mathematical situation", "author": "chloe-zh", "createdAt": "2020-04-20T17:29:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MjI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3ODM4Mg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411478382", "bodyText": "I think funcName is just Name instead of Expression.", "author": "penghuo", "createdAt": "2020-04-20T15:36:18Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/expression/Function.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.AbstractNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.NodeVisitor;\n+import java.util.Arrays;\n+import java.util.List;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+\n+/**\n+ * Expression node of scalar function\n+ * Params include function name (@funcName) and function arguments (@funcArgs)\n+ */\n+@Getter\n+@ToString\n+@EqualsAndHashCode\n+@RequiredArgsConstructor\n+public class Function extends Expression {\n+    private final Expression funcName;", "originalCommit": "c251f030006ab69ee24a1aa8c7b1d905d2701703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU1ODQ1Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411558457", "bodyText": "Ok yes that sounds better", "author": "chloe-zh", "createdAt": "2020-04-20T17:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3ODM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MDc5MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411480791", "bodyText": "could u add test case for qualified index name, \"log.2020.04.20.\"", "author": "penghuo", "createdAt": "2020-04-20T15:39:22Z", "path": "ppl/src/test/java/com/amazon/opendistroforelasticsearch/sql/ppl/parser/AstBuilderTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.parser;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.antlr.PPLSyntaxParser;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.Node;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.junit.Test;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.agg;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.aggregate;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.equalTo;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.filter;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.function;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.intLiteral;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.map;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.project;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.relation;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.stringLiteral;\n+import static com.amazon.opendistroforelasticsearch.sql.ppl.plans.dsl.DSL.unresolvedAttr;\n+import static org.junit.Assert.assertEquals;\n+\n+public class AstBuilderTest {", "originalCommit": "c251f030006ab69ee24a1aa8c7b1d905d2701703", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU1ODEwMg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r411558102", "bodyText": "Ok sure, one question: shall we unquote the (single/double/backticks) quoted identifiers in this module?", "author": "chloe-zh", "createdAt": "2020-04-20T17:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MDc5MQ=="}], "type": "inlineReview"}, {"oid": "412f6f05349a36433d8f9697b21591295de0a3ac", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/412f6f05349a36433d8f9697b21591295de0a3ac", "message": "changed LogicalPlan to UnresolvedPlan; added test for index name with dots; changed the funcName to String in Function expression", "committedDate": "2020-04-20T18:03:35Z", "type": "commit"}, {"oid": "5430902214ce490e7f4b21371ed9dd5ca903af05", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/5430902214ce490e7f4b21371ed9dd5ca903af05", "message": "Merge branch 'feature/ppl' of github.com:opendistro-for-elasticsearch/sql into ppl-parser", "committedDate": "2020-04-20T20:01:15Z", "type": "commit"}, {"oid": "bd56129da5bede67cdaca9ee743c57e4304481bb", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/bd56129da5bede67cdaca9ee743c57e4304481bb", "message": "Reverted nest", "committedDate": "2020-04-21T19:33:53Z", "type": "commit"}, {"oid": "9489e4166b66a0ce8f3682bc195b314477a5d8a5", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/9489e4166b66a0ce8f3682bc195b314477a5d8a5", "message": "Removed constant and replaced it with literalValue in antlr parser", "committedDate": "2020-04-21T19:45:13Z", "type": "commit"}, {"oid": "a898546c411297b33e149ce4249ae7376a1db5ac", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/a898546c411297b33e149ce4249ae7376a1db5ac", "message": "Simplified the accept methods", "committedDate": "2020-04-22T06:22:37Z", "type": "commit"}, {"oid": "daf4767ec7586c8892dd54580f3658058ff268ed", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/daf4767ec7586c8892dd54580f3658058ff268ed", "message": "Update", "committedDate": "2020-04-22T19:14:05Z", "type": "commit"}, {"oid": "acb157508ae78ee1fa08975d7bbbbfc36aa45576", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/acb157508ae78ee1fa08975d7bbbbfc36aa45576", "message": "Added builder pattern", "committedDate": "2020-04-23T08:44:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkyOTMwNg==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/429#discussion_r413929306", "bodyText": "lombok has Buiilder annotation, could you use it?", "author": "penghuo", "createdAt": "2020-04-23T16:09:23Z", "path": "ppl/src/main/java/com/amazon/opendistroforelasticsearch/sql/ppl/plans/logical/Aggregation.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *   You may not use this file except in compliance with the License.\n+ *   A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   or in the \"license\" file accompanying this file. This file is distributed\n+ *   on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *   express or implied. See the License for the specific language governing\n+ *   permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical;\n+\n+import com.amazon.opendistroforelasticsearch.sql.ppl.node.AbstractNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.ppl.plans.logical.builder.UnresolvedPlanBuilder;\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import lombok.AllArgsConstructor;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+/**\n+ * Logical plan node of Aggregation, the interface for building aggregation actions in queries\n+ */\n+@Getter\n+@Setter\n+@ToString\n+@EqualsAndHashCode(callSuper = false)\n+@AllArgsConstructor\n+public class Aggregation extends UnresolvedPlan {", "originalCommit": "acb157508ae78ee1fa08975d7bbbbfc36aa45576", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2cc689bbf0177d0cea7e6a90a9b45302e5edfdd5", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/2cc689bbf0177d0cea7e6a90a9b45302e5edfdd5", "message": "Rolled back to remove builder", "committedDate": "2020-04-23T18:06:10Z", "type": "commit"}, {"oid": "42609bcc4ac80ae121a22115702e5622a823fe0a", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/42609bcc4ac80ae121a22115702e5622a823fe0a", "message": "update", "committedDate": "2020-04-23T19:31:49Z", "type": "commit"}, {"oid": "092adbfbb4b647dffddacca21efa39d8ec601c33", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/092adbfbb4b647dffddacca21efa39d8ec601c33", "message": "Revert \"Added builder pattern\"\n\nThis reverts commit acb15750", "committedDate": "2020-04-23T19:33:08Z", "type": "commit"}, {"oid": "e8c2eff609a8f831ccc215bccd6271aecd059cd8", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/e8c2eff609a8f831ccc215bccd6271aecd059cd8", "message": "update", "committedDate": "2020-04-23T19:58:36Z", "type": "commit"}, {"oid": "0c78efa4c6617f6f94bb62ee3f98152989b33f41", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0c78efa4c6617f6f94bb62ee3f98152989b33f41", "message": "Merge remote-tracking branch 'upstream/feature/ppl' into ppl-parser", "committedDate": "2020-04-23T20:33:48Z", "type": "commit"}]}