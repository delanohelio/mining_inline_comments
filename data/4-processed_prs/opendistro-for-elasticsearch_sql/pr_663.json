{"pr_number": 663, "pr_title": "Expression pushdown optimization", "pr_createdAt": "2020-08-05T21:12:19Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663", "timeline": [{"oid": "5198a38b2cc5fc6643dd4bfee240547779549dcd", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/5198a38b2cc5fc6643dd4bfee240547779549dcd", "message": "Test serializer", "committedDate": "2020-07-20T15:29:53Z", "type": "commit"}, {"oid": "75005eb7382ec2590e61d5ee2c6a845e5081d8a8", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/75005eb7382ec2590e61d5ee2c6a845e5081d8a8", "message": "Merge branch 'develop' into expression-pushdown-optimization", "committedDate": "2020-07-30T23:20:52Z", "type": "commit"}, {"oid": "705397b12a35ae6c65aa5ce39478389f58253c52", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/705397b12a35ae6c65aa5ce39478389f58253c52", "message": "Add JDK serializer impl", "committedDate": "2020-07-31T00:02:13Z", "type": "commit"}, {"oid": "defdd08a12f331edec92c2749c612677b5394f6e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/defdd08a12f331edec92c2749c612677b5394f6e", "message": "Add UT", "committedDate": "2020-07-31T17:31:26Z", "type": "commit"}, {"oid": "6a51c26942d3477d845543a5f7f377b7f397f4bc", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6a51c26942d3477d845543a5f7f377b7f397f4bc", "message": "Support boolean literal", "committedDate": "2020-07-31T21:57:52Z", "type": "commit"}, {"oid": "24a44238e0ea056668bc4a80c98126b4964186a4", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/24a44238e0ea056668bc4a80c98126b4964186a4", "message": "Add UT for comparison expression", "committedDate": "2020-07-31T22:04:29Z", "type": "commit"}, {"oid": "2283de19ba8c6395f714a65d20de10ee3b29546a", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/2283de19ba8c6395f714a65d20de10ee3b29546a", "message": "Add UT for function expression", "committedDate": "2020-07-31T22:10:04Z", "type": "commit"}, {"oid": "bd377270e1ac5440d24e66720804cbb8567ce47d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/bd377270e1ac5440d24e66720804cbb8567ce47d", "message": "Add UT for multiple fields", "committedDate": "2020-07-31T22:16:27Z", "type": "commit"}, {"oid": "8e4364b6ff3fab6c0f9450637e9941714920c48d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8e4364b6ff3fab6c0f9450637e9941714920c48d", "message": "Use expr value factory", "committedDate": "2020-08-03T20:15:56Z", "type": "commit"}, {"oid": "5e42d86bdc588e46acd19d4f1f03f1527240e511", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/5e42d86bdc588e46acd19d4f1f03f1527240e511", "message": "Add comments", "committedDate": "2020-08-03T23:55:23Z", "type": "commit"}, {"oid": "1614040dfc25499c32e8448390a8fbd518657d80", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/1614040dfc25499c32e8448390a8fbd518657d80", "message": "Merge branch 'develop' into expression-pushdown-optimization", "committedDate": "2020-08-03T23:55:55Z", "type": "commit"}, {"oid": "cca0479ae69839d559c6f5479a8b58b67170828b", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/cca0479ae69839d559c6f5479a8b58b67170828b", "message": "Test coverage", "committedDate": "2020-08-04T15:50:35Z", "type": "commit"}, {"oid": "de03a5806d8eed5e1bac80270b74a35436d7b96e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/de03a5806d8eed5e1bac80270b74a35436d7b96e", "message": "Refactor package and class", "committedDate": "2020-08-04T21:14:02Z", "type": "commit"}, {"oid": "f77a7399457e2a4336c284643bf22e78aa07d152", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f77a7399457e2a4336c284643bf22e78aa07d152", "message": "Add UT for script factory and leaf factory", "committedDate": "2020-08-04T21:25:39Z", "type": "commit"}, {"oid": "c95c2e1db8b0aeb29a19a28a55a0a2f6ff10c619", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/c95c2e1db8b0aeb29a19a28a55a0a2f6ff10c619", "message": "Add support for date doc value", "committedDate": "2020-08-05T00:17:06Z", "type": "commit"}, {"oid": "3193fdcc8befbde1fcd5979cba1b5e9e21b105de", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/3193fdcc8befbde1fcd5979cba1b5e9e21b105de", "message": "More UT", "committedDate": "2020-08-05T00:41:24Z", "type": "commit"}, {"oid": "f29b402fde847ed0794f231a8e09f425cee9f9f3", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f29b402fde847ed0794f231a8e09f425cee9f9f3", "message": "Refactor edge case UT", "committedDate": "2020-08-05T15:17:45Z", "type": "commit"}, {"oid": "8bb9405fe4f195211996de1169fa0f5500e35f9e", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8bb9405fe4f195211996de1169fa0f5500e35f9e", "message": "Add UT for value factory", "committedDate": "2020-08-05T16:11:55Z", "type": "commit"}, {"oid": "0c0b0d54aad0f83898e97fd0fd3bbce7778bfbf3", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0c0b0d54aad0f83898e97fd0fd3bbce7778bfbf3", "message": "Add UT for serializer error case", "committedDate": "2020-08-05T16:18:59Z", "type": "commit"}, {"oid": "45bf93d368bb48572d847914964f7b9ab6212a6d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/45bf93d368bb48572d847914964f7b9ab6212a6d", "message": "Fix checkstyle", "committedDate": "2020-08-05T16:48:31Z", "type": "commit"}, {"oid": "8ccd3845e3431eb63c54939f491580b1c06f2919", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/8ccd3845e3431eb63c54939f491580b1c06f2919", "message": "Add expression visitor and UT", "committedDate": "2020-08-05T21:37:16Z", "type": "commit"}, {"oid": "4d0c97b642b58a1c32b6de878e3dde47ddec3108", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/4d0c97b642b58a1c32b6de878e3dde47ddec3108", "message": "Use expression visitor in script engine", "committedDate": "2020-08-05T21:52:36Z", "type": "commit"}, {"oid": "f839f8fea18e54891bb030b6794135aa22ac1016", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f839f8fea18e54891bb030b6794135aa22ac1016", "message": "Add UT for visitor", "committedDate": "2020-08-05T22:48:13Z", "type": "commit"}, {"oid": "0bac7b589a60f2de473bbe6924e5c6095f5911d1", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0bac7b589a60f2de473bbe6924e5c6095f5911d1", "message": "Push down query", "committedDate": "2020-08-05T23:10:44Z", "type": "commit"}, {"oid": "da2ece36b77c8d02fe31cd532851e4d138612c15", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/da2ece36b77c8d02fe31cd532851e4d138612c15", "message": "Handle text keyword", "committedDate": "2020-08-06T01:36:14Z", "type": "commit"}, {"oid": "81acd11a2ef184d7d8605e0a48acd048854a3a12", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/81acd11a2ef184d7d8605e0a48acd048854a3a12", "message": "Cast long/double doc value to int/float", "committedDate": "2020-08-06T16:56:48Z", "type": "commit"}, {"oid": "0ddcab4cf0638b5f03a275ac8e0c5c60e53c017a", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/0ddcab4cf0638b5f03a275ac8e0c5c60e53c017a", "message": "Don't push down if illegal state exception thrown", "committedDate": "2020-08-06T17:44:40Z", "type": "commit"}, {"oid": "6d259fc3007a9e48258d0ab229a7b10f1a147119", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/6d259fc3007a9e48258d0ab229a7b10f1a147119", "message": "Fix broken IT due to field type change", "committedDate": "2020-08-06T18:16:40Z", "type": "commit"}, {"oid": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/154358a1b3e0a5a3a93c9abcdcccda482b087fc3", "message": "Prepare PR", "committedDate": "2020-08-06T20:19:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyMjUwNw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r466722507", "bodyText": "Add some comments? Why not construct the different value based on Type?", "author": "penghuo", "createdAt": "2020-08-06T22:37:46Z", "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/data/value/ElasticsearchExprValueFactory.java", "diffHunk": "@@ -121,6 +124,49 @@ private ExprValue construct(String field, JsonNode value) {\n     }\n   }\n \n+  /**\n+   * Construct ExprValue from field and its value object. Throw exception if trying\n+   * to construct from field of unsupported type.\n+   *\n+   * @param field   field name\n+   * @param value   value object\n+   * @return        ExprValue\n+   */\n+  public ExprValue construct(String field, Object value) {\n+    if (value == null) {\n+      return nullValue();\n+    }\n+\n+    ExprType type = type(field);\n+    if (type.equals(INTEGER)) {\n+      return constructInteger((Integer) value);\n+    } else if (type.equals(LONG)) {\n+      return constructLong((Long) value);\n+    } else if (type.equals(FLOAT)) {\n+      return constructFloat((Float) value);\n+    } else if (type.equals(DOUBLE)) {\n+      return constructDouble((Double) value);\n+    } else if (type.equals(STRING)) {\n+      return constructString((String) value);\n+    } else if (type.equals(BOOLEAN)) {\n+      return constructBoolean((Boolean) value);\n+    } else if (type.equals(TIMESTAMP)) {\n+      if (value instanceof Number) {\n+        return constructTimestamp((Long) value);\n+      } else if (value instanceof Instant) {\n+        return constructTimestamp((Instant) value);\n+      } else {\n+        return constructTimestamp(String.valueOf(value));\n+      }\n+    } else if (ES_TEXT.isCompatible(type)) {\n+      return new ElasticsearchExprTextValue((String) value);", "originalCommit": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczOTQ5Ng==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r466739496", "bodyText": "Sure, will add a new ExprValue class to differentiate text and multi-field.", "author": "dai-chen", "createdAt": "2020-08-06T23:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyMjUwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyNjE1NA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r466726154", "bodyText": "What happen if there are multiple filter, e.g. source=index | filter a = 1 | filter b = 1", "author": "penghuo", "createdAt": "2020-08-06T22:48:33Z", "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/storage/ElasticsearchIndex.java", "diffHunk": "@@ -87,6 +92,20 @@ public PhysicalPlan implement(LogicalPlan plan) {\n      * index scan.\n      */\n     return plan.accept(new DefaultImplementor<ElasticsearchIndexScan>() {\n+          @Override\n+          public PhysicalPlan visitFilter(LogicalFilter node, ElasticsearchIndexScan context) {", "originalCommit": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczOTcxNw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r466739717", "bodyText": "Good point. Will double check and add PPL IT (ex. where | fields | where) to make sure this can be handled properly. Thanks!", "author": "dai-chen", "createdAt": "2020-08-06T23:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyNjE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODU3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r467338577", "bodyText": "Added logic to handle multiple filter operator pushdown and UT/IT to test. We may need to improve our planner soon since current index scan operator assumes all push down is around original data source. I guess if we do where | stats | where, the result would be wrong.", "author": "dai-chen", "createdAt": "2020-08-08T00:40:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyNjE1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyNjg4OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r466726889", "bodyText": "our expression -> core engine expression?", "author": "penghuo", "createdAt": "2020-08-06T22:50:44Z", "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/storage/script/ExpressionScriptEngine.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.elasticsearch.storage.script;\n+\n+import com.amazon.opendistroforelasticsearch.sql.elasticsearch.storage.script.filter.ExpressionFilterScriptFactory;\n+import com.amazon.opendistroforelasticsearch.sql.elasticsearch.storage.serialization.ExpressionSerializer;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import lombok.RequiredArgsConstructor;\n+import org.elasticsearch.script.FilterScript;\n+import org.elasticsearch.script.ScriptContext;\n+import org.elasticsearch.script.ScriptEngine;\n+\n+/**\n+ * Custom expression script engine that supports using our expression code in DSL", "originalCommit": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3NTUyNw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r467275527", "bodyText": "Done!", "author": "dai-chen", "createdAt": "2020-08-07T21:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyNjg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyNzI2Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r466727267", "bodyText": "we ourserlves?", "author": "penghuo", "createdAt": "2020-08-06T22:51:55Z", "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/storage/script/filter/ExpressionFilterScript.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.elasticsearch.storage.script.filter;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.type.ElasticsearchDataType.ES_TEXT_KEYWORD;\n+import static java.util.stream.Collectors.toMap;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprBooleanValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprTupleValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.value.ElasticsearchExprValueFactory;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ExpressionNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ReferenceExpression;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.time.chrono.ChronoZonedDateTime;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import lombok.EqualsAndHashCode;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.elasticsearch.SpecialPermission;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.script.FilterScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+/**\n+ * Expression script executor that executes the expression on each document\n+ * and determine if the document is supposed to be filtered out or not.\n+ */\n+@EqualsAndHashCode(callSuper = false)\n+class ExpressionFilterScript extends FilterScript {\n+\n+  /**\n+   * Expression to execute.\n+   */\n+  private final Expression expression;\n+\n+  public ExpressionFilterScript(Expression expression,\n+                                SearchLookup lookup,\n+                                LeafReaderContext context,\n+                                Map<String, Object> params) {\n+    super(params, lookup, context);\n+    this.expression = expression;\n+  }\n+\n+  @Override\n+  public boolean execute() {\n+    // Check we ourselves are not being called by unprivileged code.", "originalCommit": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI3NjA2Nw==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r467276067", "bodyText": "Done!", "author": "dai-chen", "createdAt": "2020-08-07T21:24:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyNzI2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczMTIzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r466731235", "bodyText": "Missing handling?", "author": "penghuo", "createdAt": "2020-08-06T23:04:15Z", "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/storage/script/filter/ExpressionFilterScript.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.elasticsearch.storage.script.filter;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.type.ElasticsearchDataType.ES_TEXT_KEYWORD;\n+import static java.util.stream.Collectors.toMap;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprBooleanValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprTupleValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.value.ElasticsearchExprValueFactory;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ExpressionNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ReferenceExpression;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.time.chrono.ChronoZonedDateTime;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import lombok.EqualsAndHashCode;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.elasticsearch.SpecialPermission;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.script.FilterScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+/**\n+ * Expression script executor that executes the expression on each document\n+ * and determine if the document is supposed to be filtered out or not.\n+ */\n+@EqualsAndHashCode(callSuper = false)\n+class ExpressionFilterScript extends FilterScript {\n+\n+  /**\n+   * Expression to execute.\n+   */\n+  private final Expression expression;\n+\n+  public ExpressionFilterScript(Expression expression,\n+                                SearchLookup lookup,\n+                                LeafReaderContext context,\n+                                Map<String, Object> params) {\n+    super(params, lookup, context);\n+    this.expression = expression;\n+  }\n+\n+  @Override\n+  public boolean execute() {\n+    // Check we ourselves are not being called by unprivileged code.\n+    SpecialPermission.check();\n+\n+    return AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> {\n+      Set<ReferenceExpression> fields = extractFields(expression);\n+      ElasticsearchExprValueFactory valueFactory = buildValueFactory(fields);\n+      Map<String, ExprValue> valueEnv = buildValueEnv(fields, valueFactory);\n+      ExprValue result = evaluateExpression(valueEnv);\n+      return (Boolean) result.value();\n+    });\n+  }\n+\n+  private Set<ReferenceExpression> extractFields(Expression expr) {\n+    Set<ReferenceExpression> fields = new HashSet<>();\n+    expr.accept(new ExpressionNodeVisitor<Object, Set<ReferenceExpression>>() {\n+      @Override\n+      public Object visitReference(ReferenceExpression node, Set<ReferenceExpression> context) {\n+        context.add(node);\n+        return null;\n+      }\n+    }, fields);\n+    return fields;\n+  }\n+\n+  private ElasticsearchExprValueFactory buildValueFactory(Set<ReferenceExpression> fields) {\n+    Map<String, ExprType> typeEnv = fields.stream()\n+                                          .collect(toMap(\n+                                              ReferenceExpression::getAttr,\n+                                              ReferenceExpression::type));\n+    return new ElasticsearchExprValueFactory(typeEnv);\n+  }\n+\n+  private Map<String, ExprValue> buildValueEnv(Set<ReferenceExpression> fields,\n+                                               ElasticsearchExprValueFactory valueFactory) {\n+    Map<String, ExprValue> valueEnv = new HashMap<>();\n+    for (ReferenceExpression field : fields) {\n+      String fieldName = field.getAttr();\n+      ExprValue exprValue = valueFactory.construct(fieldName, getDocValue(field));\n+      valueEnv.put(fieldName, exprValue);\n+    }\n+    return valueEnv;\n+  }\n+\n+  private Object getDocValue(ReferenceExpression field) {\n+    String fieldName = getDocValueName(field);\n+    ScriptDocValues<?> docValue = getDoc().get(fieldName);\n+    if (docValue == null || docValue.isEmpty()) {\n+      return null;\n+    }\n+\n+    Object value = docValue.get(0);\n+    if (value instanceof ChronoZonedDateTime) {\n+      return ((ChronoZonedDateTime<?>) value).toInstant();\n+    }\n+    return castNumberToFieldType(value, field.type());\n+  }\n+\n+  /**\n+   * Text field doesn't have doc value (exception thrown even when you call \"get\")\n+   * Limitation: assume inner field name is always \"keyword\".\n+   */\n+  private String getDocValueName(ReferenceExpression field) {\n+    String fieldName = field.getAttr();\n+    if (field.type() == ES_TEXT_KEYWORD) {\n+      fieldName += \".keyword\";\n+    }\n+    return fieldName;\n+  }\n+\n+  /**\n+   * DocValue only support long and double so cast to integer and float if needed.\n+   * The doc value must be Long and Double for expr type Long/Integer and Double/Float respectively.\n+   * Otherwise there must be bugs in our engine that causes the mismatch.\n+   */\n+  private Object castNumberToFieldType(Object value, ExprType type) {\n+    if (type == INTEGER) {\n+      return ((Long) value).intValue();\n+    } else if (type == FLOAT) {\n+      return ((Double) value).floatValue();\n+    } else {\n+      return value;\n+    }\n+  }\n+\n+  private ExprValue evaluateExpression(Map<String, ExprValue> valueEnv) {\n+    ExprTupleValue tupleValue = ExprTupleValue.fromExprValueMap(valueEnv);\n+    ExprValue result = expression.valueOf(tupleValue.bindingTuples());\n+\n+    if (result.isNull()) {", "originalCommit": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0MDAyMQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r466740021", "bodyText": "Since no missing concept in JAVA, will add a MISSING constant in value factory. And will add test case for null field.", "author": "dai-chen", "createdAt": "2020-08-06T23:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczMTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxNDQyMA==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r467314420", "bodyText": "I added missing value check here. But I found that there seems no way to differentiate null and missing in doc value. I tried the following index. Both null_field and missing_field in 2nd doc gives a script doc value object with empty list inside. Will confirm and come back to this later.\nPUT null_and_missing/_doc/1\n{\n  \"null_field\": \"abc\",\n  \"missing_field\": 456\n}\n\nPUT null_and_missing/_doc/2\n{\n  \"null_field\": null\n}", "author": "dai-chen", "createdAt": "2020-08-07T22:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczMTIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczMjM1OQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r466732359", "bodyText": "NP, Could we impl BindingTuple and encapsulate these logic in that to achive the same concept of valueEnv.", "author": "penghuo", "createdAt": "2020-08-06T23:07:40Z", "path": "elasticsearch/src/main/java/com/amazon/opendistroforelasticsearch/sql/elasticsearch/storage/script/filter/ExpressionFilterScript.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ *    Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *    Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *    You may not use this file except in compliance with the License.\n+ *    A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *    or in the \"license\" file accompanying this file. This file is distributed\n+ *    on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *    express or implied. See the License for the specific language governing\n+ *    permissions and limitations under the License.\n+ *\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.sql.elasticsearch.storage.script.filter;\n+\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.FLOAT;\n+import static com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType.INTEGER;\n+import static com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.type.ElasticsearchDataType.ES_TEXT_KEYWORD;\n+import static java.util.stream.Collectors.toMap;\n+\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprBooleanValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprTupleValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.model.ExprValue;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprCoreType;\n+import com.amazon.opendistroforelasticsearch.sql.data.type.ExprType;\n+import com.amazon.opendistroforelasticsearch.sql.elasticsearch.data.value.ElasticsearchExprValueFactory;\n+import com.amazon.opendistroforelasticsearch.sql.expression.Expression;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ExpressionNodeVisitor;\n+import com.amazon.opendistroforelasticsearch.sql.expression.ReferenceExpression;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.time.chrono.ChronoZonedDateTime;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import lombok.EqualsAndHashCode;\n+import org.apache.lucene.index.LeafReaderContext;\n+import org.elasticsearch.SpecialPermission;\n+import org.elasticsearch.index.fielddata.ScriptDocValues;\n+import org.elasticsearch.script.FilterScript;\n+import org.elasticsearch.search.lookup.SearchLookup;\n+\n+/**\n+ * Expression script executor that executes the expression on each document\n+ * and determine if the document is supposed to be filtered out or not.\n+ */\n+@EqualsAndHashCode(callSuper = false)\n+class ExpressionFilterScript extends FilterScript {\n+\n+  /**\n+   * Expression to execute.\n+   */\n+  private final Expression expression;\n+\n+  public ExpressionFilterScript(Expression expression,\n+                                SearchLookup lookup,\n+                                LeafReaderContext context,\n+                                Map<String, Object> params) {\n+    super(params, lookup, context);\n+    this.expression = expression;\n+  }\n+\n+  @Override\n+  public boolean execute() {\n+    // Check we ourselves are not being called by unprivileged code.\n+    SpecialPermission.check();\n+\n+    return AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> {\n+      Set<ReferenceExpression> fields = extractFields(expression);\n+      ElasticsearchExprValueFactory valueFactory = buildValueFactory(fields);\n+      Map<String, ExprValue> valueEnv = buildValueEnv(fields, valueFactory);", "originalCommit": "154358a1b3e0a5a3a93c9abcdcccda482b087fc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0MDE0MQ==", "url": "https://github.com/opendistro-for-elasticsearch/sql/pull/663#discussion_r466740141", "bodyText": "Sure, will add a new Environment class to encapsulate the map data structure. Thanks!", "author": "dai-chen", "createdAt": "2020-08-06T23:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczMjM1OQ=="}], "type": "inlineReview"}, {"oid": "f6eafcb9c5497925481b18bd2725a811d6af9923", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/f6eafcb9c5497925481b18bd2725a811d6af9923", "message": "Address PR comments", "committedDate": "2020-08-07T22:26:59Z", "type": "commit"}, {"oid": "af8beb3c988bf091b9f697ab135ecc08ecc6f4c8", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/af8beb3c988bf091b9f697ab135ecc08ecc6f4c8", "message": "Address PR comments", "committedDate": "2020-08-08T00:30:05Z", "type": "commit"}, {"oid": "59529304fc2e04d650e0faa41035020f095a725d", "url": "https://github.com/opendistro-for-elasticsearch/sql/commit/59529304fc2e04d650e0faa41035020f095a725d", "message": "Merge branch 'develop' into expression-pushdown-optimization", "committedDate": "2020-08-11T15:30:37Z", "type": "commit"}]}