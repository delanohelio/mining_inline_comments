{"pr_number": 4025, "pr_title": "Make serialisation in FileManager::saveToFile thread-safe", "pr_createdAt": "2020-03-04T12:00:16Z", "pr_url": "https://github.com/bisq-network/bisq/pull/4025", "timeline": [{"oid": "18f75869a2cfa4a66ee243648e8881591f4aff36", "url": "https://github.com/bisq-network/bisq/commit/18f75869a2cfa4a66ee243648e8881591f4aff36", "message": "Make 'fromProto' static methods return most specific type\n\nMinor change for consistency: narrow the signature of some remaining\nsuch methods, which have return type 'PersistableEnvelope'.\n\n(This excludes some other cases with return type 'NetworkEnvelope'.)", "committedDate": "2020-03-03T16:54:48Z", "type": "commit"}, {"oid": "6487f92d84257d80b4b6795c53ab7380378f7e18", "url": "https://github.com/bisq-network/bisq/commit/6487f92d84257d80b4b6795c53ab7380378f7e18", "message": "Make serialisation in FileManager::saveToFile thread-safe\n\nAdd toProtoMessageSynchronized() default method to PersistableEnvelope,\nwhich performs (blocking) protobuf serialisation in the user thread,\nregardless of the calling thread. This should prevent data races like\nthe ConcurrentModificationException observed in #3752, under the\nreasonable assumption that shared persistable objects are only mutated\nin the user thread.\n\nAlso add a ThreadedPersistableEnvelope sub-interface overriding the\ndefault method above, to let objects which are expensive to serialise\n(like DaoStateStore) be selectively serialised in the 'save-file-task-X'\nthread as before, but directly synchronised with each mutating op. As\nmost objects are cheap to serialise, this avoids a noticeable perf drop\nwithout having to track down every mutating method for each store.\n\nIn all cases but one, classes implementing ThreadedPersistableEnvelope\nare stores like TradeStatistic2Store, with a single ConcurrentHashMap\nfield. These require no further serialisation, since the map entries are\nimmutable, so the only mutating operations are map.put(..) calls which\nare already synchronised with map reads. (Even if map.values().stream()\nsees updates @ different keys happen out-of-order, it should be benign.)\n\nThe remaining case is DaoStateStore, which is only ever reset or\nmodified via a single persist(..) call with a cloned DaoState instance\nand hash chain from DaoStateSnapshotService, so there is no aliasing\nrisk from the various DAO state mutations done in DaoStateService and\nelsewhere.\n\nThis should fix #3752.", "committedDate": "2020-03-04T07:10:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMjY3OQ==", "url": "https://github.com/bisq-network/bisq/pull/4025#discussion_r389422679", "bodyText": "I find the method name a bit confusing as it is only synchronized in ThreadedPersistableEnvelope but here we use mapping to userThread. I would recommend using toPersistableMessage as stated above.", "author": "ManfredKarrer", "createdAt": "2020-03-09T00:24:21Z", "path": "common/src/main/java/bisq/common/proto/persistable/PersistableEnvelope.java", "diffHunk": "@@ -18,9 +18,23 @@\n package bisq.common.proto.persistable;\n \n import bisq.common.Envelope;\n+import bisq.common.UserThread;\n+\n+import com.google.protobuf.Message;\n+\n+import com.google.common.util.concurrent.Futures;\n+\n+import java.util.concurrent.FutureTask;\n \n /**\n  * Interface for the outside envelope object persisted to disk.\n  */\n public interface PersistableEnvelope extends Envelope {\n+\n+    default Message toProtoMessageSynchronized() {", "originalCommit": "6487f92d84257d80b4b6795c53ab7380378f7e18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMjk1Ng==", "url": "https://github.com/bisq-network/bisq/pull/4025#discussion_r389422956", "bodyText": "Maybe its better to use a specific interface here as well like in ThreadedPersistableEnvelope? Might make it more explicit that we alter the basic non-thread-safe but fast behaviour. We could use then toPersistableMessage as method name for all 3 cases and the interface marks which style is actually used. Would make it also a bit more distinct from the generic toProtoMessage method and shows its only relevant for persisting an envelope.", "author": "ManfredKarrer", "createdAt": "2020-03-09T00:27:37Z", "path": "common/src/main/java/bisq/common/proto/persistable/PersistableEnvelope.java", "diffHunk": "@@ -18,9 +18,23 @@\n package bisq.common.proto.persistable;\n \n import bisq.common.Envelope;\n+import bisq.common.UserThread;\n+\n+import com.google.protobuf.Message;\n+\n+import com.google.common.util.concurrent.Futures;\n+\n+import java.util.concurrent.FutureTask;\n \n /**\n  * Interface for the outside envelope object persisted to disk.\n  */\n public interface PersistableEnvelope extends Envelope {\n+", "originalCommit": "6487f92d84257d80b4b6795c53ab7380378f7e18", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9e9fc6ab5723a3bbce66ebba9670dc0b76b00991", "url": "https://github.com/bisq-network/bisq/commit/9e9fc6ab5723a3bbce66ebba9670dc0b76b00991", "message": "Rename toProtoMessageSynchronized to toPersistableMessage\n\nMake PersistableEnvelope method name less confusing, as it is only\nsynchronised in ThreadedPersistableEnvelope.", "committedDate": "2020-03-10T02:36:52Z", "type": "commit"}, {"oid": "91fa07343c1f23cba16937a58f0f67f7cebe2bd5", "url": "https://github.com/bisq-network/bisq/commit/91fa07343c1f23cba16937a58f0f67f7cebe2bd5", "message": "Add UserThreadMappedPersistableEnvelope for greater explicitness\n\nMake the default toPersistableMessage() method of PersistableEnvelope\nsimply delegate to Proto.toProtoMessage for speed, so that stores can\nexplicitly implement (Threaded|UserThreadMapped)PersistableEnvelope if\nthey actually need concurrency control.\n\nAs part of this, make PeerList implement PersistableEnvelope directly\ninstead of extending PersistableList, as it is non-critical & cloned on\nthe user thread prior to storage anyway, so doesn't need be thread-safe.\nIn this way, only PaymentAccountList & small DAO-related stores extend\nPersistableList, so they can all be made user-thread-mapped.\n\nAfter this change, the only concrete store classes not implementing\n(Threaded|UserThreadMapped)PersistableEnvelope are:\n\n  AccountAgeWitness, BlindVotePayload, ProposalPayload, SignedWitness,\n  TradeStatistics2, NavigationPath & PeerList\n\nThe first five appear to erroneously implement PersistableEnvelope and\ncan be cleaned up in a separate commit. The last two are non-critical.\n\n(Make NavigationPath.path an immutable list, for slightly better thread\nsafety anyway - that way it will never be observed half-constructed.)", "committedDate": "2020-03-10T04:05:33Z", "type": "commit"}, {"oid": "9ab649ec058b4d621a2db0923bb46c70a41df70c", "url": "https://github.com/bisq-network/bisq/commit/9ab649ec058b4d621a2db0923bb46c70a41df70c", "message": "Restore type hierarchy of MeritList & VoteWithProposalTxIdList\n\nProvide UserThreadMappedPersistableList subclass for persistable lists\nwhich need to implement UserThreadMappedPersistableEnvelope, instead of\nputting the interface on the base class.\n\nMake the (non-storage) classes MeritList and VoteWithProposalTxIdList\nkeep the original PersistableList superclass, deriving the remaining\nsubclasses of PersistableList from the new class instead. In this way,\nfurther persistence-related changes are less likely to inadvertently\nalter the behaviour of those two consensus-critical classes.\n\nRemoving the superfluous PersistableEnvelope interface from the two\nclasses (via the base class) will be done in a separate PR.", "committedDate": "2020-03-22T06:12:57Z", "type": "commit"}]}