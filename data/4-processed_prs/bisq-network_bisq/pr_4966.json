{"pr_number": 4966, "pr_title": "Prevent excessive api calls", "pr_createdAt": "2020-12-17T17:33:47Z", "pr_url": "https://github.com/bisq-network/bisq/pull/4966", "timeline": [{"oid": "dc6144d337ae57d7d8c445f04758585acd7c3136", "url": "https://github.com/bisq-network/bisq/commit/dc6144d337ae57d7d8c445f04758585acd7c3136", "message": "Refactor BtcWalletService to let api override fee rates\n\nBtcWalletService was changed to allow the api to override tx fee\nrates from the sendbsq and sendbtc methods.  The api methods will\nstill be able to use the network fee service and custom tx fee rate\npreference, and set / unset the custom tx fee rate preference, but\nthe change will permit the addition of an optional txFeeRate parameter\nto the sendbsq and sendbtc methods (todo).  A few other minor changes\n(style and removal of never thrown ex spec) were also made to this class.\n\nTwo BtcWalletService methods were refactored.\n\n- The redundant (was always true) boolean isSendTx argument was removed\n  from the completePreparedVoteRevealTx method signature.\n\n- The redundant (was always true) boolean useCustomTxFee was removed\n  from the completePreparedBsqTx method signature.\n\n- The completePreparedSendBsqTx method was overloaded with a 2nd parameter\n  (Coin txFeePerVbyte) to allow api to override fee service and custom\n  tx fee rate when sending BSQ or BTC.\n\n- The completePreparedBsqTx method was overloaded with a 3rd parameter\n  (Coin txFeePerVbyte) to allow api to override fee service and custom\n  tx fee rate when sending BSQ or BTC.\n\nThe following line was deleted from the completePreparedBsqTx method\nbecause txFeePerVbyte is now an argument:\n\n\tCoin txFeePerVbyte = useCustomTxFee ? getTxFeeForWithdrawalPerVbyte() : feeService.getTxFeePerVbyte();\n\nThis useCustomTxFee value was always true, and redudant here because\ngetTxFeeForWithdrawalPerVbyte() returns feeService.getTxFeePerVbyte()\nor the custom fee rate preference. i.e.,\n\nCoin txFeePerVbyte = useCustomTxFee ? getTxFeeForWithdrawalPerVbyte() : feeService.getTxFeePerVbyte();\n\n\tis equivalent to\n\nCoin txFeePerVbyte = getTxFeeForWithdrawalPerVbyte();\n\nLockupTxService, UnlockTxService, BsqSendView, and BsqTransferService\nwere adjusted to this BtcWalletService refactoring.", "committedDate": "2020-12-04T17:17:24Z", "type": "commit"}, {"oid": "900d498ee1a0f94f8db3644fba8f1c2ac0789162", "url": "https://github.com/bisq-network/bisq/commit/900d498ee1a0f94f8db3644fba8f1c2ac0789162", "message": "Merge branch 'master' into 02-refactor-completePreparedSendBsqTx", "committedDate": "2020-12-04T17:22:45Z", "type": "commit"}, {"oid": "159d4cc6f505a178b5ab304888a276a35098c1b1", "url": "https://github.com/bisq-network/bisq/commit/159d4cc6f505a178b5ab304888a276a35098c1b1", "message": "Add optional txFeeRate parameter to api sendbsq\n\nIf present in the sendbsq command, the parameter will override the fee\nservice and custom fee rate setting for the BSQ transaction.\n\nAlso changed the sendbsq grpc return type to a lightweight TX proto wrapper.\n\nBesides some small refactoring in the CLI, all the changes are\nadjustments for this new sendbsq parameter and its new grpc return value.", "committedDate": "2020-12-04T20:17:37Z", "type": "commit"}, {"oid": "2842070afd73b5e0950af2159a9c91cf870f69f9", "url": "https://github.com/bisq-network/bisq/commit/2842070afd73b5e0950af2159a9c91cf870f69f9", "message": "Merge branch 'master' into 03-add-txFeeRate-param", "committedDate": "2020-12-08T22:04:27Z", "type": "commit"}, {"oid": "6c9f0c252d061bd713e4bd6c399e8473c5649f91", "url": "https://github.com/bisq-network/bisq/commit/6c9f0c252d061bd713e4bd6c399e8473c5649f91", "message": "Add new api method 'sendbtc' and test\n\nTakes an address, amount, and optional txfeerate param,\nreturns a lightweight TxInfo proto.\n\nAlso overloaded two BtcWalletService methods to allow sendbtc\nto pass in the tx fee rate -- overriding the fee service and\ncustom fee rate setting.", "committedDate": "2020-12-09T00:12:02Z", "type": "commit"}, {"oid": "144c5a82cc8299bb766b18fb0e66902bab908fe4", "url": "https://github.com/bisq-network/bisq/commit/144c5a82cc8299bb766b18fb0e66902bab908fe4", "message": "Merge branch 'master' into 04-add-sendbtc-impl", "committedDate": "2020-12-09T13:44:17Z", "type": "commit"}, {"oid": "bd66008062027b3677c276f5bbf99a8d1b2bc9d2", "url": "https://github.com/bisq-network/bisq/commit/bd66008062027b3677c276f5bbf99a8d1b2bc9d2", "message": "Support tx memo field for btc withdrawals from api\n\n- Added optional memo parameter to the api's sendbtc and\n  withdrawfunds commands.\n\n- Removed the @Nullable annotation was removed because protobuf\n  does not support null.\n\n- Visibility in two wallet check methods were changed from private\n  to pkg protected so the CoreTradeService could use them.\n\n- Adjusted affected tests.  (Asserting the memo field was set on a\n  transaction cannot be checked from apitest yet.)", "committedDate": "2020-12-09T19:51:56Z", "type": "commit"}, {"oid": "478c8f4eb23c510a06e0fdde1be9342684005902", "url": "https://github.com/bisq-network/bisq/commit/478c8f4eb23c510a06e0fdde1be9342684005902", "message": "Remove unused imports", "committedDate": "2020-12-09T20:38:20Z", "type": "commit"}, {"oid": "259bad629a76848f818cf7c9d9f89eaa51c1e674", "url": "https://github.com/bisq-network/bisq/commit/259bad629a76848f818cf7c9d9f89eaa51c1e674", "message": "Merge branch 'master' into 05-use-memo-tx-field", "committedDate": "2020-12-10T14:59:28Z", "type": "commit"}, {"oid": "150e2f685126e7ab7f7501d3f212ce5fa58452fd", "url": "https://github.com/bisq-network/bisq/commit/150e2f685126e7ab7f7501d3f212ce5fa58452fd", "message": "Use Bisq's UserThread.executor in gRPC server", "committedDate": "2020-12-11T21:33:19Z", "type": "commit"}, {"oid": "6aa385e494eb8fa870257c76e078108607503d03", "url": "https://github.com/bisq-network/bisq/commit/6aa385e494eb8fa870257c76e078108607503d03", "message": "Append nullable withdrawalTxId field to Trade proto message\n\nThe withdrawalTxId field will be set in TradeManager#onWithdrawRequest\nupon successful trade completion and withdrawal of funds.\n\nPersisting withdrawalTxId will allow the api and ui to find the withdrawalTxId\nfor a completed trade after the seller withdraws funds to an external wallet.\nIn turn, the withdrawal tx's memo field will be accessible in a new (todo)\napi getTx(txID) api method.\n\nChanged:\n\n- Appended field 'string withdrawal_tx_id = 40' to pb.proto's Trade message.\n\n- Added nullable 'String withdrawalTxId' to Trade entity class.\n\n- Added trade.setWithdrawalTxId(transaction.getTxId().toString()) in\n  TradeManager#onWithdrawRequest's callback.", "committedDate": "2020-12-12T15:01:55Z", "type": "commit"}, {"oid": "5522d0c53e96312a75dbb88da72bec8480c97bc8", "url": "https://github.com/bisq-network/bisq/commit/5522d0c53e96312a75dbb88da72bec8480c97bc8", "message": "Add new api method gettransaction\n\nThis change was prompted by the recent changes in the main branch to\nallow a tx memo field to be set from the UI and API.\n\nThis and the prior PR address the API's need to be able to fetch a\ntx (with a memo).  The API can now get a completed trade's withdrawal\ntxid and pass it as a gettransaction parameter.\n\nSee previous PR \"Append nullable withdrawalTxId field to Trade\".\n\n\thttps://github.com/bisq-network/bisq/pull/4937\n\nA summary of changes by file:\n\ngrpc.proto\n\n- Added withdrawalTxId field to existing TradeInfo proto & wrapper.\n- Reordered fields in TradeInfo proto.\n- Added new fields to be displayed by TxInfo proto in CLI.\n- Fixed typo: unsetTxFeeRatePreference -> UnsetTxFeeRatePreference.\n- Added new GetTransaction rpc.\n\nGrpcWalletsService - Added new getTransaction gRPC boilerplate.\n\nCoreWalletsService - Added new getTransaction implementation.\n\nTxInfo - Added the new fields for displaying a tx summary from CLI.\nThis is not intended to be more than a brief summary;  a block explorer\nor bitcoin-core client should be used to see the complete definition.\n\nTradeInfo - Added the new withdrawalTxId field defined in grpc.proto.\n\nCliMain - Added new 'case gettransaction'.\n\nTransactionFormat - Formats a TxInfo sent from the server to CLI.\n\nColumnHeaderConstants - Added console headers used by TransactionFormat.\n\nTradeFormat - Displays a completed trade's WithdrawalTxId if present.\n\nApitest - Adjusted affected tests: assert tx memo is persisted and\ntest gettransaction.", "committedDate": "2020-12-14T18:01:03Z", "type": "commit"}, {"oid": "a0f1c22d196364ea0b0063109dea50e4a782f5ed", "url": "https://github.com/bisq-network/bisq/commit/a0f1c22d196364ea0b0063109dea50e4a782f5ed", "message": "Merge branch 'master' into 08-scratch", "committedDate": "2020-12-14T18:02:21Z", "type": "commit"}, {"oid": "0384642f32c8ffbdb8ec68c93cbc067e1de73008", "url": "https://github.com/bisq-network/bisq/commit/0384642f32c8ffbdb8ec68c93cbc067e1de73008", "message": "Adjust create TransferwiseAccount test\n\nAs per commit 88f26f93241af698ae689bf081205d0f9dc929fa,\ndo not autofill all currencies by default but keep all unselected.", "committedDate": "2020-12-14T18:03:35Z", "type": "commit"}, {"oid": "4be87a6281961242dcb9689db869bc4641840b40", "url": "https://github.com/bisq-network/bisq/commit/4be87a6281961242dcb9689db869bc4641840b40", "message": "Disable method test to avoid repetition", "committedDate": "2020-12-14T18:12:39Z", "type": "commit"}, {"oid": "a341173412c4892991df6beb148763f194091ecf", "url": "https://github.com/bisq-network/bisq/commit/a341173412c4892991df6beb148763f194091ecf", "message": "Merge branch 'master' into 09-scratch", "committedDate": "2020-12-15T14:13:37Z", "type": "commit"}, {"oid": "e6c6d3b8d3a5095690ea498980b71d19b7eb9252", "url": "https://github.com/bisq-network/bisq/commit/e6c6d3b8d3a5095690ea498980b71d19b7eb9252", "message": "Add new CoreApiExceptionHandler to gRPC services\n\nThis change reduces gRPC service error handling duplication by moving\nit into a @Singleton encapsulating everything needed to wrap\nan expected or unexpected core api exception into a gRPC\nStatusRuntimeException before sending it to the client.  It also\nfixes some boilerpate classes were gRPC error handling was missing.", "committedDate": "2020-12-16T16:34:21Z", "type": "commit"}, {"oid": "1cd47fd0aa0a3622cda925058c1ad140ddd877d9", "url": "https://github.com/bisq-network/bisq/commit/1cd47fd0aa0a3622cda925058c1ad140ddd877d9", "message": "Merge branch 'master' into 09-refactor-grpc-error-handling", "committedDate": "2020-12-16T16:45:29Z", "type": "commit"}, {"oid": "c60605f75c98e2632c2c80e30f5a824b9eb1c0ad", "url": "https://github.com/bisq-network/bisq/commit/c60605f75c98e2632c2c80e30f5a824b9eb1c0ad", "message": "Fix class level comment", "committedDate": "2020-12-16T17:26:12Z", "type": "commit"}, {"oid": "f7c1103848f33d1fada78a030c221f0f5fb4b01a", "url": "https://github.com/bisq-network/bisq/commit/f7c1103848f33d1fada78a030c221f0f5fb4b01a", "message": "Rename gRPC exception handler class", "committedDate": "2020-12-16T17:42:23Z", "type": "commit"}, {"oid": "2572e8641dfd252845df1665c6a2a8c37d4dbe45", "url": "https://github.com/bisq-network/bisq/commit/2572e8641dfd252845df1665c6a2a8c37d4dbe45", "message": "Create grpc interceptor pkg, move auth interceptor into it", "committedDate": "2020-12-16T18:30:40Z", "type": "commit"}, {"oid": "fa9ffa1fb2c10d40f9107cff84bac9c40e982800", "url": "https://github.com/bisq-network/bisq/commit/fa9ffa1fb2c10d40f9107cff84bac9c40e982800", "message": "Put arguments on separate lines", "committedDate": "2020-12-16T18:35:12Z", "type": "commit"}, {"oid": "2148a4d9587f5da8e2d965182c5b4a86c6bc34fa", "url": "https://github.com/bisq-network/bisq/commit/2148a4d9587f5da8e2d965182c5b4a86c6bc34fa", "message": "Prevent excessive api calls\n\nThis change provides a gRPC CallRateMeteringInterceptor to help protect\nthe server and network against being overloaded by CLI scripting mistakes.\n\nAn interceptor instance can be configured on a gRPC service to set\nindividual method call rate limits on one or more of the the service's\nmethods. For example, the GrpcOffersService could be configured with\nthis interceptor to set the createoffer rate limit to 5/hour, and\nthe takeoffer call rate limit could be set to 20/day.  Whenever a\ncall rate limit is exceeded, the gRPC call is aborted and the client\nrecieves a \"rate limit exceeded\" error.\n\nBelow is a simple example showing how to set rate limits for one method\nin GrpcVersionService.\n\n    final ServerInterceptor[] interceptors() {\n        return new ServerInterceptor[]{\n                new CallRateMeteringInterceptor(new HashMap<>() {{\n                    put(\"getVersion\", new GrpcCallRateMeter(2, SECONDS));\n                }})\n        };\n    }\n\nIt specifies a CLI can execute getversion 2 times / second.\n\nThis is not a throttling mechansim, there is no blocking nor locking\nto slow call rates.  When call rates are exceeded, calls are\nsimply aborted.", "committedDate": "2020-12-17T15:33:45Z", "type": "commit"}, {"oid": "89e218787893e0a975d7b7b084a2e82da7e95633", "url": "https://github.com/bisq-network/bisq/commit/89e218787893e0a975d7b7b084a2e82da7e95633", "message": "Change long to int, tidy up error msg", "committedDate": "2020-12-17T17:12:04Z", "type": "commit"}, {"oid": "a5ed17e43f541fc80f5a873460379263ff52d538", "url": "https://github.com/bisq-network/bisq/commit/a5ed17e43f541fc80f5a873460379263ff52d538", "message": "Add license comment, stop & toString methods, and make isRunning transient", "committedDate": "2020-12-19T16:14:06Z", "type": "commit"}, {"oid": "b307593c82a86c047b9b3c21551af5ed59c088c1", "url": "https://github.com/bisq-network/bisq/commit/b307593c82a86c047b9b3c21551af5ed59c088c1", "message": "Make CallRateMeteringInterceptor configurable via json\n\nThis adds a GrpcServiceRateMeteringConfig class that can read and\nwrite rate metering interceptor config files, and configure\na gRPC rate metering service interceptor at startup.\n\nThis seems excessive, but we need to be able to test and tune\nmethod rate metering without having to change hard coded, default\ninterceptor rate meters.", "committedDate": "2020-12-19T18:32:40Z", "type": "commit"}, {"oid": "5de910a03d73ad9e17c36ec3a952bfcff2786407", "url": "https://github.com/bisq-network/bisq/commit/5de910a03d73ad9e17c36ec3a952bfcff2786407", "message": "Add unit test dependencies to daemon subproject", "committedDate": "2020-12-19T18:40:27Z", "type": "commit"}, {"oid": "455ed67f9bc4d1ec94a736c83adcf4e813d30bd6", "url": "https://github.com/bisq-network/bisq/commit/455ed67f9bc4d1ec94a736c83adcf4e813d30bd6", "message": "Add GrpcServiceRateMeteringConfigTest", "committedDate": "2020-12-19T18:41:55Z", "type": "commit"}, {"oid": "830a5f009a78c9eb59e29cb8ba5cb585241de867", "url": "https://github.com/bisq-network/bisq/commit/830a5f009a78c9eb59e29cb8ba5cb585241de867", "message": "Add license note", "committedDate": "2020-12-19T18:43:44Z", "type": "commit"}, {"oid": "9f679deb085e827dbc1aba08c81136830457efc0", "url": "https://github.com/bisq-network/bisq/commit/9f679deb085e827dbc1aba08c81136830457efc0", "message": "Add license note and toString method", "committedDate": "2020-12-19T18:47:20Z", "type": "commit"}, {"oid": "bb8d2ae7c42a1533612101479abd85b007dd4e5f", "url": "https://github.com/bisq-network/bisq/commit/bb8d2ae7c42a1533612101479abd85b007dd4e5f", "message": "Inject Config into CoreApi", "committedDate": "2020-12-19T18:50:00Z", "type": "commit"}, {"oid": "ea97a801e5c40706c394923497c160166413e592", "url": "https://github.com/bisq-network/bisq/commit/ea97a801e5c40706c394923497c160166413e592", "message": "Don't cancel gRPC call if an interceptor does not meter all methods", "committedDate": "2020-12-19T19:31:41Z", "type": "commit"}, {"oid": "87f75ee10ca4caec5387c64102359eec8a38fd59", "url": "https://github.com/bisq-network/bisq/commit/87f75ee10ca4caec5387c64102359eec8a38fd59", "message": "Configure GrpcVersionService's rate metering interceptor\n\nThis change demonstrates how a method call rate metering interceptor\nis configured for a gRPC service.  GrpcVersionService uses a custom\nrate metering interceptor, or none.  A commented out, 'default'\ninterceptor is defined as a usage example.", "committedDate": "2020-12-19T19:41:26Z", "type": "commit"}, {"oid": "56a5c7938df2f63b166e7c7eba509abdc19ad576", "url": "https://github.com/bisq-network/bisq/commit/56a5c7938df2f63b166e7c7eba509abdc19ad576", "message": "Add ApiTestConfig option --callRateMeteringConfigPath\n\nPoints to a call rate metering interceptor configuration file.\n\nTest cases can build a config file, and the test harness will\ninstall it into a daemon's appDataDir before startup.\nThe installed config file will be used to configure gRPC\nservice rate metering interceptors.", "committedDate": "2020-12-19T19:54:44Z", "type": "commit"}, {"oid": "d5657e97604d8766905f6b05b64e8d9f83c78c2a", "url": "https://github.com/bisq-network/bisq/commit/d5657e97604d8766905f6b05b64e8d9f83c78c2a", "message": "Install call rate metering config file before startup\n\nCopy the config file at --callRateMeteringConfigPath to each daemon's\nappDataDir, where it will be detected at server startup.", "committedDate": "2020-12-19T20:04:40Z", "type": "commit"}, {"oid": "fabd7c8776437eb1adaaf372cefe755ff92c89fd", "url": "https://github.com/bisq-network/bisq/commit/fabd7c8776437eb1adaaf372cefe755ff92c89fd", "message": "Refactor testcase superclasses to support rate metering configs", "committedDate": "2020-12-19T20:08:53Z", "type": "commit"}, {"oid": "abc39402b5490e84040f6bc984d782bc67fafd35", "url": "https://github.com/bisq-network/bisq/commit/abc39402b5490e84040f6bc984d782bc67fafd35", "message": "Test CallRateMeteringInterceptor", "committedDate": "2020-12-19T20:31:02Z", "type": "commit"}, {"oid": "a3eb4ed59acc88cf46e306bb3a50f7b79cc4aa14", "url": "https://github.com/bisq-network/bisq/commit/a3eb4ed59acc88cf46e306bb3a50f7b79cc4aa14", "message": "Remove unused import", "committedDate": "2020-12-19T20:37:24Z", "type": "commit"}, {"oid": "672eb79f95147fcb1dcae83148c9a081e717ac2a", "url": "https://github.com/bisq-network/bisq/commit/672eb79f95147fcb1dcae83148c9a081e717ac2a", "message": "Revert \"Append nullable withdrawalTxId field to Trade proto message\"\n\nThis reverts commit 6aa385e494eb8fa870257c76e078108607503d03.", "committedDate": "2020-12-21T18:05:54Z", "type": "commit"}, {"oid": "bdde24a46322e4c55561ef46fb8bce295d960c35", "url": "https://github.com/bisq-network/bisq/commit/bdde24a46322e4c55561ef46fb8bce295d960c35", "message": "Ajust TradeInfo to reverting 6aa385e494eb8fa870257c76e078108607503d03", "committedDate": "2020-12-21T18:10:43Z", "type": "commit"}, {"oid": "64c2ac51699461c4ce5af65b4a93b62a06bc4b2d", "url": "https://github.com/bisq-network/bisq/commit/64c2ac51699461c4ce5af65b4a93b62a06bc4b2d", "message": "Adjust grpc.proto to reverting 6aa385e494eb8fa870257c76e078108607503d03", "committedDate": "2020-12-21T18:17:52Z", "type": "commit"}, {"oid": "97dcac2a2d94ce768933c433c5ccfe8d966871f2", "url": "https://github.com/bisq-network/bisq/commit/97dcac2a2d94ce768933c433c5ccfe8d966871f2", "message": "Adjust TradeFormat to reverting 6aa385e494eb8fa870257c76e078108607503d03", "committedDate": "2020-12-21T18:19:10Z", "type": "commit"}, {"oid": "3a770f4bc0ba94297ba03712c06a0e0206f59f19", "url": "https://github.com/bisq-network/bisq/commit/3a770f4bc0ba94297ba03712c06a0e0206f59f19", "message": "Adjust TakeSellBTCOfferTest to reverting 6aa385e494eb8fa870257c76e078108607503d03", "committedDate": "2020-12-21T18:22:05Z", "type": "commit"}, {"oid": "4aa4270ed925e59a09608d4ef411408246c0d406", "url": "https://github.com/bisq-network/bisq/commit/4aa4270ed925e59a09608d4ef411408246c0d406", "message": "Adjust TradeTest to reverting 6aa385e494eb8fa870257c76e078108607503d03", "committedDate": "2020-12-21T18:23:23Z", "type": "commit"}, {"oid": "1507a2c791294f3e8efaf39f12a62af8f5724f4c", "url": "https://github.com/bisq-network/bisq/commit/1507a2c791294f3e8efaf39f12a62af8f5724f4c", "message": "Resolve file conflict w/ master", "committedDate": "2020-12-21T18:31:07Z", "type": "commit"}, {"oid": "8ee3a1599cc6e1dae63a908610171e0fa9f25f50", "url": "https://github.com/bisq-network/bisq/commit/8ee3a1599cc6e1dae63a908610171e0fa9f25f50", "message": "Merge branch '08-gettransaction' into 09-refactor-grpc-error-handling\n\nAdjust to reverting 6aa385e.", "committedDate": "2020-12-21T18:35:15Z", "type": "commit"}, {"oid": "27efc5f3c2ac5bd42d2f7363dc9ea4164c0ee19a", "url": "https://github.com/bisq-network/bisq/commit/27efc5f3c2ac5bd42d2f7363dc9ea4164c0ee19a", "message": "Merge branch '09-refactor-grpc-error-handling' into 10-callrate-interceptor\n\nAdjust to reverting to reverting 6aa385e, and fix test file conflict.", "committedDate": "2020-12-21T18:44:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0NzEyNQ==", "url": "https://github.com/bisq-network/bisq/pull/4966#discussion_r547247125", "bodyText": "This should probably be a log.warn as it's not an error but rather expected when the rate limit is exceeded. Might consider changing the method name as well for the same reason.", "author": "sqrrm", "createdAt": "2020-12-22T12:21:52Z", "path": "daemon/src/main/java/bisq/daemon/grpc/interceptor/CallRateMeteringInterceptor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package bisq.daemon.grpc.interceptor;\n+\n+import io.grpc.Metadata;\n+import io.grpc.ServerCall;\n+import io.grpc.ServerCallHandler;\n+import io.grpc.ServerInterceptor;\n+import io.grpc.StatusRuntimeException;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static io.grpc.Status.FAILED_PRECONDITION;\n+import static io.grpc.Status.PERMISSION_DENIED;\n+import static java.lang.String.format;\n+\n+@Slf4j\n+public final class CallRateMeteringInterceptor implements ServerInterceptor {\n+\n+    // Maps the gRPC server method names to rate meters.  This allows one interceptor\n+    // instance to handle rate metering for any or all the methods in a Grpc*Service.\n+    protected final Map<String, GrpcCallRateMeter> serviceCallRateMeters;\n+\n+    public CallRateMeteringInterceptor(Map<String, GrpcCallRateMeter> serviceCallRateMeters) {\n+        this.serviceCallRateMeters = serviceCallRateMeters;\n+    }\n+\n+    @Override\n+    public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> serverCall,\n+                                                                 Metadata headers,\n+                                                                 ServerCallHandler<ReqT, RespT> serverCallHandler) {\n+        Optional<Map.Entry<String, GrpcCallRateMeter>> rateMeterKV = getRateMeterKV(serverCall);\n+        rateMeterKV.ifPresentOrElse(\n+                (kv) -> checkRateMeterAndMaybeCloseCall(kv, serverCall),\n+                () -> handleInterceptorConfigErrorAndCloseCall(serverCall));\n+\n+        // We leave it to the gRPC framework to clean up if the server call was closed\n+        // above.  But we still have to invoke startCall here because the method must\n+        // return a ServerCall.Listener<RequestT>.\n+        return serverCallHandler.startCall(serverCall, headers);\n+    }\n+\n+    private void checkRateMeterAndMaybeCloseCall(Map.Entry<String, GrpcCallRateMeter> rateMeterKV,\n+                                                 ServerCall<?, ?> serverCall) {\n+        String methodName = rateMeterKV.getKey();\n+        GrpcCallRateMeter rateMeter = rateMeterKV.getValue();\n+\n+        // The service method's rate meter doesn't start running until the 1st call.\n+        if (!rateMeter.isRunning())\n+            rateMeter.start();\n+\n+        rateMeter.incrementCallsCount();\n+\n+        if (rateMeter.isCallRateExceeded())\n+            handlePermissionDeniedErrorAndCloseCall(methodName, rateMeter, serverCall);\n+        else\n+            log.info(rateMeter.getCallsCountProgress(methodName));\n+    }\n+\n+    private void handleInterceptorConfigErrorAndCloseCall(ServerCall<?, ?> serverCall)\n+            throws StatusRuntimeException {\n+        String methodName = getRateMeterKey(serverCall);\n+        String msg = format(\"%s's rate metering interceptor is incorrectly configured;\"\n+                        + \"  its rate meter cannot be found \",\n+                methodName);\n+        log.error(StringUtils.capitalize(msg) + \".\");\n+        serverCall.close(FAILED_PRECONDITION.withDescription(msg), new Metadata());\n+    }\n+\n+    private void handlePermissionDeniedErrorAndCloseCall(String methodName,\n+                                                         GrpcCallRateMeter rateMeter,\n+                                                         ServerCall<?, ?> serverCall)\n+            throws StatusRuntimeException {\n+        String msg = getDefaultRateExceededError(methodName, rateMeter);\n+        log.error(StringUtils.capitalize(msg) + \".\");", "originalCommit": "2148a4d9587f5da8e2d965182c5b4a86c6bc34fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NzY0OQ==", "url": "https://github.com/bisq-network/bisq/pull/4966#discussion_r547467649", "bodyText": "Fixed in commit 01546ad.", "author": "ghubstan", "createdAt": "2020-12-22T19:29:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0NzEyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI2MDk2OQ==", "url": "https://github.com/bisq-network/bisq/pull/4966#discussion_r547260969", "bodyText": "I find this a bit odd. I think it makes more sense to set the time window in seconds and just have a int with number of seconds in the time window.", "author": "sqrrm", "createdAt": "2020-12-22T12:52:55Z", "path": "daemon/src/main/java/bisq/daemon/grpc/interceptor/GrpcCallRateMeter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package bisq.daemon.grpc.interceptor;\n+\n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static java.lang.String.format;\n+\n+@Slf4j\n+public final class GrpcCallRateMeter {\n+\n+    @Getter\n+    private final long allowedCallsPerTimeUnit;\n+    @Getter\n+    private final TimeUnit timeUnit;", "originalCommit": "2148a4d9587f5da8e2d965182c5b4a86c6bc34fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2Njc0MQ==", "url": "https://github.com/bisq-network/bisq/pull/4966#discussion_r547466741", "bodyText": "Fixed in commit 01546ad.  The rate meter can still use a DAYS and HOURS TimeUnit, though I supposed most method rate meters will restrict calls on a per second basis.", "author": "ghubstan", "createdAt": "2020-12-22T19:27:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI2MDk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI2MjUxMw==", "url": "https://github.com/bisq-network/bisq/pull/4966#discussion_r547262513", "bodyText": "My expectation is to have a moving time window with the rate limit. The way it's done now I can send double the max amount if I send all at the end of the first period and then continues at the beginning of the second period.", "author": "sqrrm", "createdAt": "2020-12-22T12:56:06Z", "path": "daemon/src/main/java/bisq/daemon/grpc/interceptor/GrpcCallRateMeter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package bisq.daemon.grpc.interceptor;\n+\n+import bisq.common.Timer;\n+import bisq.common.UserThread;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.annotation.Nullable;\n+\n+import static java.lang.String.format;\n+\n+@Slf4j\n+public final class GrpcCallRateMeter {\n+\n+    @Getter\n+    private final long allowedCallsPerTimeUnit;\n+    @Getter\n+    private final TimeUnit timeUnit;\n+\n+    @Getter\n+    private long callsCount = 0;\n+\n+    @Getter\n+    private boolean isRunning;\n+\n+    @Nullable\n+    private Timer timer;\n+\n+    public GrpcCallRateMeter(long allowedCallsPerTimeUnit, TimeUnit timeUnit) {\n+        this.allowedCallsPerTimeUnit = allowedCallsPerTimeUnit;\n+        this.timeUnit = timeUnit;\n+    }\n+\n+    public void start() {\n+        if (timer != null)\n+            timer.stop();\n+\n+        timer = UserThread.runPeriodically(() -> callsCount = 0, 1, timeUnit);", "originalCommit": "2148a4d9587f5da8e2d965182c5b4a86c6bc34fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NDUwMw==", "url": "https://github.com/bisq-network/bisq/pull/4966#discussion_r547464503", "bodyText": "I rewrote the rate meter class in commit 01546ad.  There is a running call count over the current time window, instead of using this timer (oops).", "author": "ghubstan", "createdAt": "2020-12-22T19:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI2MjUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3NDYzNw==", "url": "https://github.com/bisq-network/bisq/pull/4966#discussion_r547274637", "bodyText": "Not sure this is right unless it's only supposed to work on *nix.", "author": "sqrrm", "createdAt": "2020-12-22T13:22:12Z", "path": "daemon/src/main/java/bisq/daemon/grpc/interceptor/GrpcServiceRateMeteringConfig.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * This file is part of Bisq.\n+ *\n+ * Bisq is free software: you can redistribute it and/or modify it\n+ * under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or (at\n+ * your option) any later version.\n+ *\n+ * Bisq is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n+ * License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package bisq.daemon.grpc.interceptor;\n+\n+import io.grpc.ServerInterceptor;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.nio.file.Paths;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import static bisq.common.file.FileUtil.deleteFileIfExists;\n+import static bisq.common.file.FileUtil.renameFile;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.lang.String.format;\n+import static java.lang.System.getProperty;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.nio.file.Files.readAllBytes;\n+\n+@VisibleForTesting\n+@Slf4j\n+public class GrpcServiceRateMeteringConfig {\n+\n+    public static final String RATE_METERS_CONFIG_FILENAME = \"ratemeters.json\";\n+\n+    private static final String KEY_GRPC_SERVICE_CLASS_NAME = \"grpcServiceClassName\";\n+    private static final String KEY_METHOD_RATE_METERS = \"methodRateMeters\";\n+    private static final String KEY_ALLOWED_CALL_PER_TIME_UNIT = \"allowedCallsPerTimeUnit\";\n+    private static final String KEY_TIME_UNIT = \"timeUnit\";\n+\n+    private static final Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+\n+    private final List<Map<String, GrpcCallRateMeter>> methodRateMeters;\n+    private final String grpcServiceClassName;\n+\n+    public GrpcServiceRateMeteringConfig(String grpcServiceClassName) {\n+        this(grpcServiceClassName, new ArrayList<>());\n+    }\n+\n+    public GrpcServiceRateMeteringConfig(String grpcServiceClassName,\n+                                         List<Map<String, GrpcCallRateMeter>> methodRateMeters) {\n+        this.grpcServiceClassName = grpcServiceClassName;\n+        this.methodRateMeters = methodRateMeters;\n+    }\n+\n+    public GrpcServiceRateMeteringConfig addMethodCallRateMeter(String methodName,\n+                                                                int maxCalls,\n+                                                                TimeUnit timeUnit) {\n+        methodRateMeters.add(new LinkedHashMap<>() {{\n+            put(methodName, new GrpcCallRateMeter(maxCalls, timeUnit));\n+        }});\n+        return this;\n+    }\n+\n+    public boolean isConfigForGrpcService(Class<?> clazz) {\n+        return isConfigForGrpcService(clazz.getSimpleName());\n+    }\n+\n+    public boolean isConfigForGrpcService(String grpcServiceClassSimpleName) {\n+        return this.grpcServiceClassName.equals(grpcServiceClassSimpleName);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"GrpcServiceRateMeteringConfig{\" + \"\\n\" +\n+                \"  grpcServiceClassName='\" + grpcServiceClassName + '\\'' + \"\\n\" +\n+                \", methodRateMeters=\" + methodRateMeters + \"\\n\" +\n+                '}';\n+    }\n+\n+    public static Optional<ServerInterceptor> getCustomRateMeteringInterceptor(File installationDir,\n+                                                                               Class<?> grpcServiceClass) {\n+        File configFile = new File(installationDir, RATE_METERS_CONFIG_FILENAME);\n+        return configFile.exists()\n+                ? toServerInterceptor(configFile, grpcServiceClass)\n+                : Optional.empty();\n+    }\n+\n+    public static Optional<ServerInterceptor> toServerInterceptor(File configFile, Class<?> grpcServiceClass) {\n+        // From a global rate metering config file, create a specific gRPC service\n+        // interceptor configuration in the form of an interceptor constructor argument,\n+        // a map<method-name, rate-meter>.\n+        // Transforming json into the List<Map<String, GrpcCallRateMeter>> is a bit\n+        // convoluted due to Gson's loss of generic type information during deserialization.\n+        Optional<GrpcServiceRateMeteringConfig> grpcServiceConfig = getAllDeserializedConfigs(configFile)\n+                .stream().filter(x -> x.isConfigForGrpcService(grpcServiceClass)).findFirst();\n+        if (grpcServiceConfig.isPresent()) {\n+            Map<String, GrpcCallRateMeter> serviceCallRateMeters = new HashMap<>();\n+            for (Map<String, GrpcCallRateMeter> methodToRateMeterMap : grpcServiceConfig.get().methodRateMeters) {\n+                Map.Entry<String, GrpcCallRateMeter> entry = methodToRateMeterMap.entrySet().stream().findFirst().orElseThrow(()\n+                        -> new IllegalStateException(\"Gson deserialized a method rate meter configuration into an empty map.\"));\n+                serviceCallRateMeters.put(entry.getKey(), entry.getValue());\n+            }\n+            return Optional.of(new CallRateMeteringInterceptor(serviceCallRateMeters));\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static List<Map<String, GrpcCallRateMeter>> getMethodRateMetersMap(Map<String, Object> gsonMap) {\n+        List<Map<String, GrpcCallRateMeter>> rateMeters = new ArrayList<>();\n+        // Each gsonMap is a Map<String, Object> with a single entry:\n+        // {getVersion={allowedCallsPerTimeUnit=8.0, timeUnit=SECONDS, callsCount=0.0, isRunning=false}}\n+        // Convert it to a multiple entry Map<String, GrpcCallRateMeter>, where the key\n+        // is a method name.\n+        for (Map<String, Object> singleEntryRateMeterMap : (List<Map<String, Object>>) gsonMap.get(KEY_METHOD_RATE_METERS)) {\n+            log.debug(\"Gson's single entry {} {}<String, Object> = {}\",\n+                    gsonMap.get(KEY_GRPC_SERVICE_CLASS_NAME),\n+                    singleEntryRateMeterMap.getClass().getSimpleName(),\n+                    singleEntryRateMeterMap);\n+            Map.Entry<String, Object> entry = singleEntryRateMeterMap.entrySet().stream().findFirst().orElseThrow(()\n+                    -> new IllegalStateException(\"Gson deserialized a method rate meter configuration into an empty map.\"));\n+            String methodName = entry.getKey();\n+            GrpcCallRateMeter rateMeter = getGrpcCallRateMeter(entry);\n+            rateMeters.add(new LinkedHashMap<>() {{\n+                put(methodName, rateMeter);\n+            }});\n+        }\n+        return rateMeters;\n+    }\n+\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    public static List<GrpcServiceRateMeteringConfig> deserialize(File configFile) {\n+        verifyConfigFile(configFile);\n+        List<GrpcServiceRateMeteringConfig> serviceMethodConfigurations = new ArrayList<>();\n+        // Gson cannot deserialize a json string to List<GrpcServiceRateMeteringConfig>\n+        // so easily for us, so we do it here before returning the list of configurations.\n+        List rawConfigList = gson.fromJson(toJson(configFile), ArrayList.class);\n+        // Gson gave us a list of maps with keys grpcServiceClassName, methodRateMeters:\n+        //          String grpcServiceClassName\n+        //          List<Map> methodRateMeters\n+        for (Object rawConfig : rawConfigList) {\n+            Map<String, Object> gsonMap = (Map<String, Object>) rawConfig;\n+            String grpcServiceClassName = (String) gsonMap.get(KEY_GRPC_SERVICE_CLASS_NAME);\n+            List<Map<String, GrpcCallRateMeter>> rateMeters = getMethodRateMetersMap(gsonMap);\n+            serviceMethodConfigurations.add(new GrpcServiceRateMeteringConfig(grpcServiceClassName, rateMeters));\n+        }\n+        return serviceMethodConfigurations;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static GrpcCallRateMeter getGrpcCallRateMeter(Map.Entry<String, Object> gsonEntry) {\n+        Map<String, Object> valueMap = (Map<String, Object>) gsonEntry.getValue();\n+        int allowedCallsPerTimeUnit = ((Number) valueMap.get(KEY_ALLOWED_CALL_PER_TIME_UNIT)).intValue();\n+        TimeUnit timeUnit = TimeUnit.valueOf((String) valueMap.get(KEY_TIME_UNIT));\n+        return new GrpcCallRateMeter(allowedCallsPerTimeUnit, timeUnit);\n+    }\n+\n+    private static void verifyConfigFile(File configFile) {\n+        if (configFile == null)\n+            throw new IllegalStateException(\"Cannot read null json config file.\");\n+\n+        if (!configFile.exists())\n+            throw new IllegalStateException(format(\"cannot find json config file %s\", configFile.getAbsolutePath()));\n+    }\n+\n+    private static String toJson(File configFile) {\n+        try {\n+            return new String(readAllBytes(Paths.get(configFile.getAbsolutePath())));\n+        } catch (IOException ex) {\n+            throw new IllegalStateException(format(\"Cannot read json string from file %s.\",\n+                    configFile.getAbsolutePath()));\n+        }\n+    }\n+\n+    private static List<GrpcServiceRateMeteringConfig> allDeserializedConfigs;\n+\n+    private static List<GrpcServiceRateMeteringConfig> getAllDeserializedConfigs(File configFile) {\n+        // We deserialize once, not for each gRPC service wanting an interceptor.\n+        if (allDeserializedConfigs == null)\n+            allDeserializedConfigs = deserialize(configFile);\n+\n+        return allDeserializedConfigs;\n+    }\n+\n+    @VisibleForTesting\n+    public static class Builder {\n+        private final List<GrpcServiceRateMeteringConfig> rateMeterConfigs = new ArrayList<>();\n+\n+        public void addCallRateMeter(String grpcServiceClassName,\n+                                     String methodName,\n+                                     int maxCalls,\n+                                     TimeUnit timeUnit) {\n+            log.info(\"Adding call rate metering definition {}.{} ({}/{}).\",\n+                    grpcServiceClassName,\n+                    methodName,\n+                    maxCalls,\n+                    StringUtils.chop(timeUnit.name().toLowerCase()));\n+            rateMeterConfigs.stream().filter(c -> c.isConfigForGrpcService(grpcServiceClassName))\n+                    .findFirst().ifPresentOrElse(\n+                    (config) -> config.addMethodCallRateMeter(methodName, maxCalls, timeUnit),\n+                    () -> rateMeterConfigs.add(new GrpcServiceRateMeteringConfig(grpcServiceClassName)\n+                            .addMethodCallRateMeter(methodName, maxCalls, timeUnit)));\n+        }\n+\n+        public File build() {\n+            File tmpFile = serializeRateMeterDefinitions();\n+            File configFile = new File(\"/tmp/ratemeters.json\");", "originalCommit": "b307593c82a86c047b9b3c21551af5ed59c088c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2MDM4Nw==", "url": "https://github.com/bisq-network/bisq/pull/4966#discussion_r547460387", "bodyText": "It is only supposed to work on *nix but I changed line 233 to\nFile configFile = Paths.get(getProperty(\"java.io.tmpdir\"), \"ratemeters.json\").toFile();\n(Commit 01546ad)", "author": "ghubstan", "createdAt": "2020-12-22T19:20:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI3NDYzNw=="}], "type": "inlineReview"}, {"oid": "01546ad11d97ca19f283c80a881f073ef40e55bf", "url": "https://github.com/bisq-network/bisq/commit/01546ad11d97ca19f283c80a881f073ef40e55bf", "message": "Use a simpler, time windowing call rate meter\n\nRewrote the GrpcCallRateMeter class and adjusted afected classes.\n\nThese changes were requested in PR review\nhttps://github.com/bisq-network/bisq/pull/4966#pullrequestreview-557040093", "committedDate": "2020-12-22T19:14:49Z", "type": "commit"}, {"oid": "d61521276fde4aaf50cd9995c5c5a069c7d74a2b", "url": "https://github.com/bisq-network/bisq/commit/d61521276fde4aaf50cd9995c5c5a069c7d74a2b", "message": "Remove unused local var", "committedDate": "2020-12-22T19:30:37Z", "type": "commit"}, {"oid": "0d4ed952e727a2bb86d91c341050c9ac78f2e458", "url": "https://github.com/bisq-network/bisq/commit/0d4ed952e727a2bb86d91c341050c9ac78f2e458", "message": "Remove redundant callCount field\n\nThe size of the timestamp queue is the call count", "committedDate": "2020-12-22T20:00:01Z", "type": "commit"}, {"oid": "c8ef4141e3b0e47a4ae595632d9aa615efe41e8a", "url": "https://github.com/bisq-network/bisq/commit/c8ef4141e3b0e47a4ae595632d9aa615efe41e8a", "message": "Fix comment", "committedDate": "2020-12-22T21:33:18Z", "type": "commit"}, {"oid": "63564760a8bb8be0ec94a423901ee5f4d72887c4", "url": "https://github.com/bisq-network/bisq/commit/63564760a8bb8be0ec94a423901ee5f4d72887c4", "message": "Support more fine grained rate metering\n\nWe need to be able to define call rate meters for time spans not limited\nto TimeUnit intervals of 1 SECOND, 1 HOUR, or 1 DAY.  This change allows\nmore flexibility, e.g., 10 per 5 seconds, 10 per 5 hrs, 100 per 7 days.", "committedDate": "2020-12-23T00:11:04Z", "type": "commit"}, {"oid": "b8c5a2965938096dd25cca64457e4528f3e3d92c", "url": "https://github.com/bisq-network/bisq/commit/b8c5a2965938096dd25cca64457e4528f3e3d92c", "message": "Disable CallRateMeteringInterceptorTest and run it from test suite\n\nThis will reduce the entire apitest suite's exec time", "committedDate": "2020-12-23T01:03:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNTY0Mg==", "url": "https://github.com/bisq-network/bisq/pull/4966#discussion_r547925642", "bodyText": "allowedCallsPerTimeUnit is a bit misleading as it's really allowedCallsPerTimeWindow.", "author": "sqrrm", "createdAt": "2020-12-23T12:03:43Z", "path": "daemon/src/main/java/bisq/daemon/grpc/interceptor/GrpcCallRateMeter.java", "diffHunk": "@@ -1,95 +1,92 @@\n-/*\n- * This file is part of Bisq.\n- *\n- * Bisq is free software: you can redistribute it and/or modify it\n- * under the terms of the GNU Affero General Public License as published by\n- * the Free Software Foundation, either version 3 of the License, or (at\n- * your option) any later version.\n- *\n- * Bisq is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n- * License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n- */\n-\n package bisq.daemon.grpc.interceptor;\n \n-import bisq.common.Timer;\n-import bisq.common.UserThread;\n-\n import org.apache.commons.lang3.StringUtils;\n \n+import java.util.ArrayDeque;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n \n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n-import javax.annotation.Nullable;\n-\n import static java.lang.String.format;\n+import static java.lang.System.currentTimeMillis;\n \n @Slf4j\n-public final class GrpcCallRateMeter {\n+public class GrpcCallRateMeter {\n \n     @Getter\n     private final int allowedCallsPerTimeUnit;\n     @Getter\n     private final TimeUnit timeUnit;\n     @Getter\n-    private int callsCount = 0;\n+    private final int numTimeUnits;\n+\n     @Getter\n-    private transient boolean isRunning;\n+    private transient final long timeUnitIntervalInMilliseconds;\n \n-    @Nullable\n-    private Timer timer;\n+    private transient final ArrayDeque<Long> callTimestamps;\n \n     public GrpcCallRateMeter(int allowedCallsPerTimeUnit, TimeUnit timeUnit) {", "originalCommit": "b8c5a2965938096dd25cca64457e4528f3e3d92c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4NjQzNA==", "url": "https://github.com/bisq-network/bisq/pull/4966#discussion_r547986434", "bodyText": "Fixed in commit 10727fc.", "author": "ghubstan", "createdAt": "2020-12-23T14:31:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNTY0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNjk0OA==", "url": "https://github.com/bisq-network/bisq/pull/4966#discussion_r547926948", "bodyText": "isAllowed() indicates it's just checking if something is allowed, this method i changing the state of the class. I would prefer something call(successCallback, failCallback) or checkAndIncrement()", "author": "sqrrm", "createdAt": "2020-12-23T12:06:53Z", "path": "daemon/src/main/java/bisq/daemon/grpc/interceptor/GrpcCallRateMeter.java", "diffHunk": "@@ -1,95 +1,92 @@\n-/*\n- * This file is part of Bisq.\n- *\n- * Bisq is free software: you can redistribute it and/or modify it\n- * under the terms of the GNU Affero General Public License as published by\n- * the Free Software Foundation, either version 3 of the License, or (at\n- * your option) any later version.\n- *\n- * Bisq is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public\n- * License for more details.\n- *\n- * You should have received a copy of the GNU Affero General Public License\n- * along with Bisq. If not, see <http://www.gnu.org/licenses/>.\n- */\n-\n package bisq.daemon.grpc.interceptor;\n \n-import bisq.common.Timer;\n-import bisq.common.UserThread;\n-\n import org.apache.commons.lang3.StringUtils;\n \n+import java.util.ArrayDeque;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n \n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n-import javax.annotation.Nullable;\n-\n import static java.lang.String.format;\n+import static java.lang.System.currentTimeMillis;\n \n @Slf4j\n-public final class GrpcCallRateMeter {\n+public class GrpcCallRateMeter {\n \n     @Getter\n     private final int allowedCallsPerTimeUnit;\n     @Getter\n     private final TimeUnit timeUnit;\n     @Getter\n-    private int callsCount = 0;\n+    private final int numTimeUnits;\n+\n     @Getter\n-    private transient boolean isRunning;\n+    private transient final long timeUnitIntervalInMilliseconds;\n \n-    @Nullable\n-    private Timer timer;\n+    private transient final ArrayDeque<Long> callTimestamps;\n \n     public GrpcCallRateMeter(int allowedCallsPerTimeUnit, TimeUnit timeUnit) {\n-        this.allowedCallsPerTimeUnit = allowedCallsPerTimeUnit;\n-        this.timeUnit = timeUnit;\n-    }\n-\n-    public void start() {\n-        stop();\n-        timer = UserThread.runPeriodically(() -> callsCount = 0, 1, timeUnit);\n-        isRunning = true;\n+        this(allowedCallsPerTimeUnit, timeUnit, 1);\n     }\n \n-    public void stop() {\n-        if (timer != null)\n-            timer.stop();\n-\n-        isRunning = false;\n+    public GrpcCallRateMeter(int allowedCallsPerTimeUnit, TimeUnit timeUnit, int numTimeUnits) {\n+        this.allowedCallsPerTimeUnit = allowedCallsPerTimeUnit;\n+        this.timeUnit = timeUnit;\n+        this.numTimeUnits = numTimeUnits;\n+        this.timeUnitIntervalInMilliseconds = timeUnit.toMillis(1) * numTimeUnits;\n+        this.callTimestamps = new ArrayDeque<>();\n     }\n \n-    public void incrementCallsCount() {\n-        callsCount++;\n+    public boolean isAllowed() {", "originalCommit": "b8c5a2965938096dd25cca64457e4528f3e3d92c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4NjQ4NQ==", "url": "https://github.com/bisq-network/bisq/pull/4966#discussion_r547986485", "bodyText": "Fixed in commit 10727fc.", "author": "ghubstan", "createdAt": "2020-12-23T14:31:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNjk0OA=="}], "type": "inlineReview"}, {"oid": "10727fc0830330e004351cd0567b994173a5d5c5", "url": "https://github.com/bisq-network/bisq/commit/10727fc0830330e004351cd0567b994173a5d5c5", "message": "Fix GrpcCallRateMeter method and variable name\n\n- Change method isAllowed() -> checkAndIncrement().\n\n- Change variable allowedCallsPerTimeUnit -> allowedCallsPerTimeWindow.", "committedDate": "2020-12-23T14:30:16Z", "type": "commit"}]}