{"pr_number": 5892, "pr_title": "Migrate notifcation job to work manager api", "pr_createdAt": "2020-04-16T20:14:39Z", "pr_url": "https://github.com/nextcloud/android/pull/5892", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0NjQxNA==", "url": "https://github.com/nextcloud/android/pull/5892#discussion_r409946414", "bodyText": "Issue found: ComplexMethod - 11/10 - [doWork] at /src/src/main/java/com/nextcloud/client/jobs/NotificationWork.kt:91:18", "author": "nextcloud-android-bot", "createdAt": "2020-04-17T01:50:01Z", "path": "src/main/java/com/nextcloud/client/jobs/NotificationWork.kt", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+* Nextcloud application\n+*\n+* @author Mario Danic\n+* @author Chris Narkiewicz\n+* Copyright (C) 2017-2018 Mario Danic <mario@lovelyhq.com>\n+* Copyright (C) 2020 Chris Narkiewicz <hello@ezaquarii.com>\n+*\n+* This program is free software: you can redistribute it and/or modify\n+* it under the terms of the GNU General Public License as published by\n+* the Free Software Foundation, either version 3 of the License, or\n+* at your option) any later version.\n+*\n+* This program is distributed in the hope that it will be useful,\n+* but WITHOUT ANY WARRANTY; without even the implied warranty of\n+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+* GNU General Public License for more details.\n+*\n+* You should have received a copy of the GNU General Public License\n+* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+package com.nextcloud.client.jobs\n+\n+import android.accounts.AuthenticatorException\n+import android.accounts.OperationCanceledException\n+import android.app.Activity\n+import android.app.NotificationManager\n+import android.app.PendingIntent\n+import android.content.BroadcastReceiver\n+import android.content.Context\n+import android.content.Intent\n+import android.graphics.BitmapFactory\n+import android.media.RingtoneManager\n+import android.os.Build\n+import android.text.TextUtils\n+import android.util.Base64\n+import android.util.Log\n+import androidx.core.app.NotificationCompat\n+import androidx.core.app.NotificationManagerCompat\n+import androidx.work.Worker\n+import androidx.work.WorkerParameters\n+import com.google.gson.Gson\n+import com.nextcloud.client.account.User\n+import com.nextcloud.client.account.UserAccountManager\n+import com.owncloud.android.R\n+import com.owncloud.android.datamodel.DecryptedPushMessage\n+import com.owncloud.android.lib.common.OwnCloudClient\n+import com.owncloud.android.lib.common.OwnCloudClientManagerFactory\n+import com.owncloud.android.lib.common.operations.RemoteOperation\n+import com.owncloud.android.lib.common.utils.Log_OC\n+import com.owncloud.android.lib.resources.notifications.DeleteNotificationRemoteOperation\n+import com.owncloud.android.lib.resources.notifications.GetNotificationRemoteOperation\n+import com.owncloud.android.lib.resources.notifications.models.Notification\n+import com.owncloud.android.ui.activity.FileDisplayActivity\n+import com.owncloud.android.ui.activity.NotificationsActivity\n+import com.owncloud.android.ui.notifications.NotificationUtils\n+import com.owncloud.android.utils.PushUtils\n+import com.owncloud.android.utils.ThemeUtils\n+import dagger.android.AndroidInjection\n+import org.apache.commons.httpclient.HttpMethod\n+import org.apache.commons.httpclient.HttpStatus\n+import org.apache.commons.httpclient.methods.DeleteMethod\n+import org.apache.commons.httpclient.methods.GetMethod\n+import org.apache.commons.httpclient.methods.PutMethod\n+import org.apache.commons.httpclient.methods.Utf8PostMethod\n+import java.io.IOException\n+import java.security.GeneralSecurityException\n+import java.security.PrivateKey\n+import java.security.SecureRandom\n+import javax.crypto.Cipher\n+import javax.inject.Inject\n+\n+class NotificationWork constructor(\n+    private val context: Context,\n+    params: WorkerParameters,\n+    private val notificationManager: NotificationManager,\n+    private val accountManager: UserAccountManager\n+) : Worker(context, params) {\n+\n+    companion object {\n+        const val TAG = \"NotificationJob\"\n+        const val KEY_NOTIFICATION_ACCOUNT = \"KEY_NOTIFICATION_ACCOUNT\"\n+        const val KEY_NOTIFICATION_SUBJECT = \"subject\"\n+        const val KEY_NOTIFICATION_SIGNATURE = \"signature\"\n+        private const val KEY_NOTIFICATION_ACTION_LINK = \"KEY_NOTIFICATION_ACTION_LINK\"\n+        private const val KEY_NOTIFICATION_ACTION_TYPE = \"KEY_NOTIFICATION_ACTION_TYPE\"\n+        private const val PUSH_NOTIFICATION_ID = \"PUSH_NOTIFICATION_ID\"\n+        private const val NUMERIC_NOTIFICATION_ID = \"NUMERIC_NOTIFICATION_ID\"\n+    }\n+\n+    override fun doWork(): Result {", "originalCommit": "75414e3799c939d84c0d4bbc94a83c5d0bc9d847", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0NjQxOA==", "url": "https://github.com/nextcloud/android/pull/5892#discussion_r409946418", "bodyText": "Issue found: LongMethod - 71/60 - [sendNotification] at /src/src/main/java/com/nextcloud/client/jobs/NotificationWork.kt:133:17", "author": "nextcloud-android-bot", "createdAt": "2020-04-17T01:50:01Z", "path": "src/main/java/com/nextcloud/client/jobs/NotificationWork.kt", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+* Nextcloud application\n+*\n+* @author Mario Danic\n+* @author Chris Narkiewicz\n+* Copyright (C) 2017-2018 Mario Danic <mario@lovelyhq.com>\n+* Copyright (C) 2020 Chris Narkiewicz <hello@ezaquarii.com>\n+*\n+* This program is free software: you can redistribute it and/or modify\n+* it under the terms of the GNU General Public License as published by\n+* the Free Software Foundation, either version 3 of the License, or\n+* at your option) any later version.\n+*\n+* This program is distributed in the hope that it will be useful,\n+* but WITHOUT ANY WARRANTY; without even the implied warranty of\n+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+* GNU General Public License for more details.\n+*\n+* You should have received a copy of the GNU General Public License\n+* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+package com.nextcloud.client.jobs\n+\n+import android.accounts.AuthenticatorException\n+import android.accounts.OperationCanceledException\n+import android.app.Activity\n+import android.app.NotificationManager\n+import android.app.PendingIntent\n+import android.content.BroadcastReceiver\n+import android.content.Context\n+import android.content.Intent\n+import android.graphics.BitmapFactory\n+import android.media.RingtoneManager\n+import android.os.Build\n+import android.text.TextUtils\n+import android.util.Base64\n+import android.util.Log\n+import androidx.core.app.NotificationCompat\n+import androidx.core.app.NotificationManagerCompat\n+import androidx.work.Worker\n+import androidx.work.WorkerParameters\n+import com.google.gson.Gson\n+import com.nextcloud.client.account.User\n+import com.nextcloud.client.account.UserAccountManager\n+import com.owncloud.android.R\n+import com.owncloud.android.datamodel.DecryptedPushMessage\n+import com.owncloud.android.lib.common.OwnCloudClient\n+import com.owncloud.android.lib.common.OwnCloudClientManagerFactory\n+import com.owncloud.android.lib.common.operations.RemoteOperation\n+import com.owncloud.android.lib.common.utils.Log_OC\n+import com.owncloud.android.lib.resources.notifications.DeleteNotificationRemoteOperation\n+import com.owncloud.android.lib.resources.notifications.GetNotificationRemoteOperation\n+import com.owncloud.android.lib.resources.notifications.models.Notification\n+import com.owncloud.android.ui.activity.FileDisplayActivity\n+import com.owncloud.android.ui.activity.NotificationsActivity\n+import com.owncloud.android.ui.notifications.NotificationUtils\n+import com.owncloud.android.utils.PushUtils\n+import com.owncloud.android.utils.ThemeUtils\n+import dagger.android.AndroidInjection\n+import org.apache.commons.httpclient.HttpMethod\n+import org.apache.commons.httpclient.HttpStatus\n+import org.apache.commons.httpclient.methods.DeleteMethod\n+import org.apache.commons.httpclient.methods.GetMethod\n+import org.apache.commons.httpclient.methods.PutMethod\n+import org.apache.commons.httpclient.methods.Utf8PostMethod\n+import java.io.IOException\n+import java.security.GeneralSecurityException\n+import java.security.PrivateKey\n+import java.security.SecureRandom\n+import javax.crypto.Cipher\n+import javax.inject.Inject\n+\n+class NotificationWork constructor(\n+    private val context: Context,\n+    params: WorkerParameters,\n+    private val notificationManager: NotificationManager,\n+    private val accountManager: UserAccountManager\n+) : Worker(context, params) {\n+\n+    companion object {\n+        const val TAG = \"NotificationJob\"\n+        const val KEY_NOTIFICATION_ACCOUNT = \"KEY_NOTIFICATION_ACCOUNT\"\n+        const val KEY_NOTIFICATION_SUBJECT = \"subject\"\n+        const val KEY_NOTIFICATION_SIGNATURE = \"signature\"\n+        private const val KEY_NOTIFICATION_ACTION_LINK = \"KEY_NOTIFICATION_ACTION_LINK\"\n+        private const val KEY_NOTIFICATION_ACTION_TYPE = \"KEY_NOTIFICATION_ACTION_TYPE\"\n+        private const val PUSH_NOTIFICATION_ID = \"PUSH_NOTIFICATION_ID\"\n+        private const val NUMERIC_NOTIFICATION_ID = \"NUMERIC_NOTIFICATION_ID\"\n+    }\n+\n+    override fun doWork(): Result {\n+        val subject = inputData.getString(KEY_NOTIFICATION_SUBJECT) ?: \"\"\n+        val signature = inputData.getString(KEY_NOTIFICATION_SIGNATURE) ?: \"\"\n+        if (!TextUtils.isEmpty(subject) && !TextUtils.isEmpty(signature)) {\n+            @Suppress(\"TooGenericExceptionCaught\") // legacy code\n+            try {\n+                val base64DecodedSubject = Base64.decode(subject, Base64.DEFAULT)\n+                val base64DecodedSignature = Base64.decode(signature, Base64.DEFAULT)\n+                val privateKey = PushUtils.readKeyFromFile(false) as PrivateKey\n+                try {\n+                    val signatureVerification = PushUtils.verifySignature(context,\n+                        accountManager,\n+                        base64DecodedSignature,\n+                        base64DecodedSubject)\n+                    if (signatureVerification != null && signatureVerification.isSignatureValid) {\n+                        val cipher = Cipher.getInstance(\"RSA/None/PKCS1Padding\")\n+                        cipher.init(Cipher.DECRYPT_MODE, privateKey)\n+                        val decryptedSubject = cipher.doFinal(base64DecodedSubject)\n+                        val gson = Gson()\n+                        val decryptedPushMessage = gson.fromJson(String(decryptedSubject),\n+                            DecryptedPushMessage::class.java)\n+                        if (decryptedPushMessage.delete) {\n+                            notificationManager.cancel(decryptedPushMessage.nid)\n+                        } else if (decryptedPushMessage.deleteAll) {\n+                            notificationManager.cancelAll()\n+                        } else {\n+                            val user = accountManager.getUser(signatureVerification.getAccount().name)\n+                                .orElseThrow { RuntimeException() }\n+                            fetchCompleteNotification(user, decryptedPushMessage)\n+                        }\n+                    }\n+                } catch (e1: GeneralSecurityException) {\n+                    Log.d(TAG, \"Error decrypting message ${e1.javaClass.name} ${e1.localizedMessage}\")\n+                }\n+            } catch (exception: Exception) {\n+                Log.d(TAG, \"Something went very wrong\" + exception.localizedMessage)\n+            }\n+        }\n+        return Result.success()\n+    }\n+\n+    private fun sendNotification(notification: Notification, user: User) {", "originalCommit": "75414e3799c939d84c0d4bbc94a83c5d0bc9d847", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0NjQyMw==", "url": "https://github.com/nextcloud/android/pull/5892#discussion_r409946423", "bodyText": "Issue found: NestedBlockDepth - 5/4 - [doWork] at /src/src/main/java/com/nextcloud/client/jobs/NotificationWork.kt:91:18", "author": "nextcloud-android-bot", "createdAt": "2020-04-17T01:50:02Z", "path": "src/main/java/com/nextcloud/client/jobs/NotificationWork.kt", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+* Nextcloud application\n+*\n+* @author Mario Danic\n+* @author Chris Narkiewicz\n+* Copyright (C) 2017-2018 Mario Danic <mario@lovelyhq.com>\n+* Copyright (C) 2020 Chris Narkiewicz <hello@ezaquarii.com>\n+*\n+* This program is free software: you can redistribute it and/or modify\n+* it under the terms of the GNU General Public License as published by\n+* the Free Software Foundation, either version 3 of the License, or\n+* at your option) any later version.\n+*\n+* This program is distributed in the hope that it will be useful,\n+* but WITHOUT ANY WARRANTY; without even the implied warranty of\n+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+* GNU General Public License for more details.\n+*\n+* You should have received a copy of the GNU General Public License\n+* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+package com.nextcloud.client.jobs\n+\n+import android.accounts.AuthenticatorException\n+import android.accounts.OperationCanceledException\n+import android.app.Activity\n+import android.app.NotificationManager\n+import android.app.PendingIntent\n+import android.content.BroadcastReceiver\n+import android.content.Context\n+import android.content.Intent\n+import android.graphics.BitmapFactory\n+import android.media.RingtoneManager\n+import android.os.Build\n+import android.text.TextUtils\n+import android.util.Base64\n+import android.util.Log\n+import androidx.core.app.NotificationCompat\n+import androidx.core.app.NotificationManagerCompat\n+import androidx.work.Worker\n+import androidx.work.WorkerParameters\n+import com.google.gson.Gson\n+import com.nextcloud.client.account.User\n+import com.nextcloud.client.account.UserAccountManager\n+import com.owncloud.android.R\n+import com.owncloud.android.datamodel.DecryptedPushMessage\n+import com.owncloud.android.lib.common.OwnCloudClient\n+import com.owncloud.android.lib.common.OwnCloudClientManagerFactory\n+import com.owncloud.android.lib.common.operations.RemoteOperation\n+import com.owncloud.android.lib.common.utils.Log_OC\n+import com.owncloud.android.lib.resources.notifications.DeleteNotificationRemoteOperation\n+import com.owncloud.android.lib.resources.notifications.GetNotificationRemoteOperation\n+import com.owncloud.android.lib.resources.notifications.models.Notification\n+import com.owncloud.android.ui.activity.FileDisplayActivity\n+import com.owncloud.android.ui.activity.NotificationsActivity\n+import com.owncloud.android.ui.notifications.NotificationUtils\n+import com.owncloud.android.utils.PushUtils\n+import com.owncloud.android.utils.ThemeUtils\n+import dagger.android.AndroidInjection\n+import org.apache.commons.httpclient.HttpMethod\n+import org.apache.commons.httpclient.HttpStatus\n+import org.apache.commons.httpclient.methods.DeleteMethod\n+import org.apache.commons.httpclient.methods.GetMethod\n+import org.apache.commons.httpclient.methods.PutMethod\n+import org.apache.commons.httpclient.methods.Utf8PostMethod\n+import java.io.IOException\n+import java.security.GeneralSecurityException\n+import java.security.PrivateKey\n+import java.security.SecureRandom\n+import javax.crypto.Cipher\n+import javax.inject.Inject\n+\n+class NotificationWork constructor(\n+    private val context: Context,\n+    params: WorkerParameters,\n+    private val notificationManager: NotificationManager,\n+    private val accountManager: UserAccountManager\n+) : Worker(context, params) {\n+\n+    companion object {\n+        const val TAG = \"NotificationJob\"\n+        const val KEY_NOTIFICATION_ACCOUNT = \"KEY_NOTIFICATION_ACCOUNT\"\n+        const val KEY_NOTIFICATION_SUBJECT = \"subject\"\n+        const val KEY_NOTIFICATION_SIGNATURE = \"signature\"\n+        private const val KEY_NOTIFICATION_ACTION_LINK = \"KEY_NOTIFICATION_ACTION_LINK\"\n+        private const val KEY_NOTIFICATION_ACTION_TYPE = \"KEY_NOTIFICATION_ACTION_TYPE\"\n+        private const val PUSH_NOTIFICATION_ID = \"PUSH_NOTIFICATION_ID\"\n+        private const val NUMERIC_NOTIFICATION_ID = \"NUMERIC_NOTIFICATION_ID\"\n+    }\n+\n+    override fun doWork(): Result {", "originalCommit": "75414e3799c939d84c0d4bbc94a83c5d0bc9d847", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0NjQyOA==", "url": "https://github.com/nextcloud/android/pull/5892#discussion_r409946428", "bodyText": "Issue found: ComplexMethod - 16/10 - [onReceive] at /src/src/main/java/com/nextcloud/client/jobs/NotificationWork.kt:236:22", "author": "nextcloud-android-bot", "createdAt": "2020-04-17T01:50:03Z", "path": "src/main/java/com/nextcloud/client/jobs/NotificationWork.kt", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+* Nextcloud application\n+*\n+* @author Mario Danic\n+* @author Chris Narkiewicz\n+* Copyright (C) 2017-2018 Mario Danic <mario@lovelyhq.com>\n+* Copyright (C) 2020 Chris Narkiewicz <hello@ezaquarii.com>\n+*\n+* This program is free software: you can redistribute it and/or modify\n+* it under the terms of the GNU General Public License as published by\n+* the Free Software Foundation, either version 3 of the License, or\n+* at your option) any later version.\n+*\n+* This program is distributed in the hope that it will be useful,\n+* but WITHOUT ANY WARRANTY; without even the implied warranty of\n+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+* GNU General Public License for more details.\n+*\n+* You should have received a copy of the GNU General Public License\n+* along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+package com.nextcloud.client.jobs\n+\n+import android.accounts.AuthenticatorException\n+import android.accounts.OperationCanceledException\n+import android.app.Activity\n+import android.app.NotificationManager\n+import android.app.PendingIntent\n+import android.content.BroadcastReceiver\n+import android.content.Context\n+import android.content.Intent\n+import android.graphics.BitmapFactory\n+import android.media.RingtoneManager\n+import android.os.Build\n+import android.text.TextUtils\n+import android.util.Base64\n+import android.util.Log\n+import androidx.core.app.NotificationCompat\n+import androidx.core.app.NotificationManagerCompat\n+import androidx.work.Worker\n+import androidx.work.WorkerParameters\n+import com.google.gson.Gson\n+import com.nextcloud.client.account.User\n+import com.nextcloud.client.account.UserAccountManager\n+import com.owncloud.android.R\n+import com.owncloud.android.datamodel.DecryptedPushMessage\n+import com.owncloud.android.lib.common.OwnCloudClient\n+import com.owncloud.android.lib.common.OwnCloudClientManagerFactory\n+import com.owncloud.android.lib.common.operations.RemoteOperation\n+import com.owncloud.android.lib.common.utils.Log_OC\n+import com.owncloud.android.lib.resources.notifications.DeleteNotificationRemoteOperation\n+import com.owncloud.android.lib.resources.notifications.GetNotificationRemoteOperation\n+import com.owncloud.android.lib.resources.notifications.models.Notification\n+import com.owncloud.android.ui.activity.FileDisplayActivity\n+import com.owncloud.android.ui.activity.NotificationsActivity\n+import com.owncloud.android.ui.notifications.NotificationUtils\n+import com.owncloud.android.utils.PushUtils\n+import com.owncloud.android.utils.ThemeUtils\n+import dagger.android.AndroidInjection\n+import org.apache.commons.httpclient.HttpMethod\n+import org.apache.commons.httpclient.HttpStatus\n+import org.apache.commons.httpclient.methods.DeleteMethod\n+import org.apache.commons.httpclient.methods.GetMethod\n+import org.apache.commons.httpclient.methods.PutMethod\n+import org.apache.commons.httpclient.methods.Utf8PostMethod\n+import java.io.IOException\n+import java.security.GeneralSecurityException\n+import java.security.PrivateKey\n+import java.security.SecureRandom\n+import javax.crypto.Cipher\n+import javax.inject.Inject\n+\n+class NotificationWork constructor(\n+    private val context: Context,\n+    params: WorkerParameters,\n+    private val notificationManager: NotificationManager,\n+    private val accountManager: UserAccountManager\n+) : Worker(context, params) {\n+\n+    companion object {\n+        const val TAG = \"NotificationJob\"\n+        const val KEY_NOTIFICATION_ACCOUNT = \"KEY_NOTIFICATION_ACCOUNT\"\n+        const val KEY_NOTIFICATION_SUBJECT = \"subject\"\n+        const val KEY_NOTIFICATION_SIGNATURE = \"signature\"\n+        private const val KEY_NOTIFICATION_ACTION_LINK = \"KEY_NOTIFICATION_ACTION_LINK\"\n+        private const val KEY_NOTIFICATION_ACTION_TYPE = \"KEY_NOTIFICATION_ACTION_TYPE\"\n+        private const val PUSH_NOTIFICATION_ID = \"PUSH_NOTIFICATION_ID\"\n+        private const val NUMERIC_NOTIFICATION_ID = \"NUMERIC_NOTIFICATION_ID\"\n+    }\n+\n+    override fun doWork(): Result {\n+        val subject = inputData.getString(KEY_NOTIFICATION_SUBJECT) ?: \"\"\n+        val signature = inputData.getString(KEY_NOTIFICATION_SIGNATURE) ?: \"\"\n+        if (!TextUtils.isEmpty(subject) && !TextUtils.isEmpty(signature)) {\n+            @Suppress(\"TooGenericExceptionCaught\") // legacy code\n+            try {\n+                val base64DecodedSubject = Base64.decode(subject, Base64.DEFAULT)\n+                val base64DecodedSignature = Base64.decode(signature, Base64.DEFAULT)\n+                val privateKey = PushUtils.readKeyFromFile(false) as PrivateKey\n+                try {\n+                    val signatureVerification = PushUtils.verifySignature(context,\n+                        accountManager,\n+                        base64DecodedSignature,\n+                        base64DecodedSubject)\n+                    if (signatureVerification != null && signatureVerification.isSignatureValid) {\n+                        val cipher = Cipher.getInstance(\"RSA/None/PKCS1Padding\")\n+                        cipher.init(Cipher.DECRYPT_MODE, privateKey)\n+                        val decryptedSubject = cipher.doFinal(base64DecodedSubject)\n+                        val gson = Gson()\n+                        val decryptedPushMessage = gson.fromJson(String(decryptedSubject),\n+                            DecryptedPushMessage::class.java)\n+                        if (decryptedPushMessage.delete) {\n+                            notificationManager.cancel(decryptedPushMessage.nid)\n+                        } else if (decryptedPushMessage.deleteAll) {\n+                            notificationManager.cancelAll()\n+                        } else {\n+                            val user = accountManager.getUser(signatureVerification.getAccount().name)\n+                                .orElseThrow { RuntimeException() }\n+                            fetchCompleteNotification(user, decryptedPushMessage)\n+                        }\n+                    }\n+                } catch (e1: GeneralSecurityException) {\n+                    Log.d(TAG, \"Error decrypting message ${e1.javaClass.name} ${e1.localizedMessage}\")\n+                }\n+            } catch (exception: Exception) {\n+                Log.d(TAG, \"Something went very wrong\" + exception.localizedMessage)\n+            }\n+        }\n+        return Result.success()\n+    }\n+\n+    private fun sendNotification(notification: Notification, user: User) {\n+        val randomId = SecureRandom()\n+        val file = notification.subjectRichParameters[\"file\"]\n+        val intent: Intent\n+        if (file == null) {\n+            intent = Intent(context, NotificationsActivity::class.java)\n+        } else {\n+            intent = Intent(context, FileDisplayActivity::class.java)\n+            intent.action = Intent.ACTION_VIEW\n+            intent.putExtra(FileDisplayActivity.KEY_FILE_ID, file.id)\n+        }\n+        intent.putExtra(KEY_NOTIFICATION_ACCOUNT, user.accountName)\n+        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n+        val pendingIntent = PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_ONE_SHOT)\n+        val pushNotificationId = randomId.nextInt()\n+        val notificationBuilder = NotificationCompat.Builder(context, NotificationUtils.NOTIFICATION_CHANNEL_PUSH)\n+            .setSmallIcon(R.drawable.notification_icon)\n+            .setLargeIcon(BitmapFactory.decodeResource(context.resources, R.drawable.notification_icon))\n+            .setColor(ThemeUtils.primaryColor(user.toPlatformAccount(), false, context))\n+            .setShowWhen(true)\n+            .setSubText(user.accountName)\n+            .setContentTitle(notification.getSubject())\n+            .setContentText(notification.getMessage())\n+            .setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION))\n+            .setAutoCancel(true)\n+            .setVisibility(NotificationCompat.VISIBILITY_PRIVATE)\n+            .setContentIntent(pendingIntent)\n+        // Remove\n+        if (notification.getActions().isEmpty()) {\n+            val disableDetection = Intent(context, NotificationReceiver::class.java)\n+            disableDetection.putExtra(NUMERIC_NOTIFICATION_ID, notification.getNotificationId())\n+            disableDetection.putExtra(PUSH_NOTIFICATION_ID, pushNotificationId)\n+            disableDetection.putExtra(KEY_NOTIFICATION_ACCOUNT, user.accountName)\n+            val disableIntent = PendingIntent.getBroadcast(context, pushNotificationId, disableDetection,\n+                PendingIntent.FLAG_CANCEL_CURRENT)\n+            notificationBuilder.addAction(NotificationCompat.Action(R.drawable.ic_close,\n+                context.getString(R.string.remove_push_notification), disableIntent))\n+        } else { // Actions\n+            for (action in notification.getActions()) {\n+                val actionIntent = Intent(context, NotificationReceiver::class.java)\n+                actionIntent.putExtra(NUMERIC_NOTIFICATION_ID, notification.getNotificationId())\n+                actionIntent.putExtra(PUSH_NOTIFICATION_ID, pushNotificationId)\n+                actionIntent.putExtra(KEY_NOTIFICATION_ACCOUNT, user.accountName)\n+                actionIntent.putExtra(KEY_NOTIFICATION_ACTION_LINK, action.link)\n+                actionIntent.putExtra(KEY_NOTIFICATION_ACTION_TYPE, action.type)\n+                val actionPendingIntent = PendingIntent.getBroadcast(context, randomId.nextInt(),\n+                    actionIntent,\n+                    PendingIntent.FLAG_CANCEL_CURRENT)\n+                var icon: Int\n+                icon = if (action.primary) {\n+                    R.drawable.ic_check_circle\n+                } else {\n+                    R.drawable.ic_check_circle_outline\n+                }\n+                notificationBuilder.addAction(NotificationCompat.Action(icon, action.label, actionPendingIntent))\n+            }\n+        }\n+        notificationBuilder.setPublicVersion(\n+            NotificationCompat.Builder(context, NotificationUtils.NOTIFICATION_CHANNEL_PUSH)\n+                .setSmallIcon(R.drawable.notification_icon)\n+                .setLargeIcon(BitmapFactory.decodeResource(context.resources, R.drawable.notification_icon))\n+                .setColor(ThemeUtils.primaryColor(user.toPlatformAccount(), false, context))\n+                .setShowWhen(true)\n+                .setSubText(user.accountName)\n+                .setContentTitle(context.getString(R.string.new_notification))\n+                .setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION))\n+                .setAutoCancel(true)\n+                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\n+                .setContentIntent(pendingIntent).build())\n+        val notificationManager = NotificationManagerCompat.from(context)\n+        notificationManager.notify(notification.getNotificationId(), notificationBuilder.build())\n+    }\n+\n+    private fun fetchCompleteNotification(account: User, decryptedPushMessage: DecryptedPushMessage) {\n+        val optionalUser = accountManager.getUser(account.accountName)\n+        if (!optionalUser.isPresent) {\n+            Log_OC.e(this, \"Account may not be null\")\n+            return\n+        }\n+        val user = optionalUser.get()\n+        @Suppress(\"TooGenericExceptionCaught\") // legacy code\n+        try {\n+            val client = OwnCloudClientManagerFactory.getDefaultSingleton()\n+                .getClientFor(user.toOwnCloudAccount(), context)\n+            val result = GetNotificationRemoteOperation(decryptedPushMessage.nid)\n+                .execute(client)\n+            if (result.isSuccess) {\n+                val notification = result.notificationData[0]\n+                sendNotification(notification, account)\n+            }\n+        } catch (e: Exception) {\n+            Log_OC.e(this, \"Error creating account\", e)\n+        }\n+    }\n+\n+    class NotificationReceiver : BroadcastReceiver() {\n+        @Inject\n+        var accountManager: UserAccountManager? = null\n+\n+        override fun onReceive(context: Context, intent: Intent) {", "originalCommit": "75414e3799c939d84c0d4bbc94a83c5d0bc9d847", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "603f485d00781a4384d13313af68daafc43f2fd2", "url": "https://github.com/nextcloud/android/commit/603f485d00781a4384d13313af68daafc43f2fd2", "message": "WIP\n\nSigned-off-by: Chris Narkiewicz <hello@ezaquarii.com>", "committedDate": "2020-04-28T12:35:00Z", "type": "forcePushed"}, {"oid": "77287ec25f5ac32acc24d42e6352c53c968df8a2", "url": "https://github.com/nextcloud/android/commit/77287ec25f5ac32acc24d42e6352c53c968df8a2", "message": "Migrate NotificationJob to WorkManager API\n\nSigned-off-by: Chris Narkiewicz <hello@ezaquarii.com>", "committedDate": "2020-04-28T12:40:34Z", "type": "forcePushed"}, {"oid": "cd9fb499d4836774fcdd147eb693d9ab9e274e4f", "url": "https://github.com/nextcloud/android/commit/cd9fb499d4836774fcdd147eb693d9ab9e274e4f", "message": "Migrate NotificationJob to WorkManager API\n\nSigned-off-by: Chris Narkiewicz <hello@ezaquarii.com>", "committedDate": "2020-04-28T20:04:51Z", "type": "forcePushed"}, {"oid": "57ac50788e4c0e53b81971e07a673e7b67f869ba", "url": "https://github.com/nextcloud/android/commit/57ac50788e4c0e53b81971e07a673e7b67f869ba", "message": "Migrate NotificationJob to WorkManager API\n\nSigned-off-by: Chris Narkiewicz <hello@ezaquarii.com>", "committedDate": "2020-04-28T20:31:08Z", "type": "commit"}, {"oid": "57ac50788e4c0e53b81971e07a673e7b67f869ba", "url": "https://github.com/nextcloud/android/commit/57ac50788e4c0e53b81971e07a673e7b67f869ba", "message": "Migrate NotificationJob to WorkManager API\n\nSigned-off-by: Chris Narkiewicz <hello@ezaquarii.com>", "committedDate": "2020-04-28T20:31:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNjM1Ng==", "url": "https://github.com/nextcloud/android/pull/5892#discussion_r417316356", "bodyText": "I noticed that Android Studio started doing this wonky formatting recently. So far I was just fixing it by hand, but maybe we should think about digging into the projects' style config.", "author": "ezaquarii", "createdAt": "2020-04-29T13:32:21Z", "path": "src/main/java/com/nextcloud/client/jobs/BackgroundJobFactory.kt", "diffHunk": "@@ -160,4 +163,13 @@ class BackgroundJobFactory @Inject constructor(\n             clock\n         )\n     }\n+\n+    private fun createNotificationWork(context: Context, params: WorkerParameters): NotificationWork {\n+        return NotificationWork(\n+            context,\n+            params,\n+            notificationManager,\n+            accountManager\n+                               )", "originalCommit": "c753ccc669237c670f55986ad86c5ea58020ea73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMzOTMxOA==", "url": "https://github.com/nextcloud/android/pull/5892#discussion_r417339318", "bodyText": "I opened a new issue for this, so we can merge this PR.", "author": "tobiasKaminsky", "createdAt": "2020-04-29T14:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNjM1Ng=="}], "type": "inlineReview"}, {"oid": "cf996c34af3cb2d2238ea3ae65b00be6fce59dcc", "url": "https://github.com/nextcloud/android/commit/cf996c34af3cb2d2238ea3ae65b00be6fce59dcc", "message": "add missing work manager function to create notification work\n\nSigned-off-by: tobiasKaminsky <tobias@kaminsky.me>", "committedDate": "2020-04-29T14:04:11Z", "type": "commit"}, {"oid": "cf996c34af3cb2d2238ea3ae65b00be6fce59dcc", "url": "https://github.com/nextcloud/android/commit/cf996c34af3cb2d2238ea3ae65b00be6fce59dcc", "message": "add missing work manager function to create notification work\n\nSigned-off-by: tobiasKaminsky <tobias@kaminsky.me>", "committedDate": "2020-04-29T14:04:11Z", "type": "forcePushed"}]}