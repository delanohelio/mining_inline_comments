{"pr_number": 2980, "pr_title": "SONARJAVA-3393 SONARJAVA-3406 AssertJ assertion chain simplifications", "pr_createdAt": "2020-06-03T10:09:55Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/2980", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5NDA0MA==", "url": "https://github.com/SonarSource/sonar-java/pull/2980#discussion_r435894040", "bodyText": "When there are several assertion predicates, it's faster to read and understand when there's only one predicate per line like this:\nassertThat(getObject())\n  .isEqualTo(null)\n  .isNotEqualTo(getObject()); // Noncompliant", "author": "alban-auzeill", "createdAt": "2020-06-05T12:40:18Z", "path": "java-checks-test-sources/src/main/java/checks/AssertJChainSimplificationCheckTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package checks;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatObject;\n+\n+public class AssertJChainSimplificationCheckTest {\n+\n+  private Object getObject() {\n+    return new Object();\n+  }\n+\n+  private boolean getBoolean() {\n+    return true;\n+  }\n+\n+  void edgeCases() {\n+    Object x = \"x\", y = \"y\";\n+\n+    assertThat((x == y)).isTrue(); // Noncompliant\n+    assertThat((((((x == y)))))).isTrue(); // Noncompliant\n+    assertThat((x).equals(y)).isTrue(); // Noncompliant\n+    assertThat(x != (null)).isFalse(); // Noncompliant\n+    assertThat(((x).equals(((y))))).isTrue(); // Noncompliant\n+  }\n+\n+  void objectRelatedAssertionChains() {\n+    Comparable x = getBoolean();\n+    Object y = getObject();\n+\n+    assertThat(getObject()).isEqualTo(null); // Noncompliant [[sc=29;ec=38]] {{Use isNull() instead}}\n+    assertThat(getObject()).isNotEqualTo(null); // Noncompliant {{Use isNotNull() instead}}\n+    assertThat(getObject()).isEqualTo(null).isNotEqualTo(getObject()); // Noncompliant", "originalCommit": "d442e1d848957c9590de96040e6c06b3599ba429", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5NzQyMg==", "url": "https://github.com/SonarSource/sonar-java/pull/2980#discussion_r435897422", "bodyText": "A comment is not enough, we need a real test case \ud83d\ude09", "author": "alban-auzeill", "createdAt": "2020-06-05T12:46:40Z", "path": "java-checks-test-sources/src/main/java/checks/AssertJChainSimplificationCheckTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package checks;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatObject;\n+\n+public class AssertJChainSimplificationCheckTest {\n+\n+  private Object getObject() {\n+    return new Object();\n+  }\n+\n+  private boolean getBoolean() {\n+    return true;\n+  }\n+\n+  void edgeCases() {\n+    Object x = \"x\", y = \"y\";\n+\n+    assertThat((x == y)).isTrue(); // Noncompliant\n+    assertThat((((((x == y)))))).isTrue(); // Noncompliant\n+    assertThat((x).equals(y)).isTrue(); // Noncompliant\n+    assertThat(x != (null)).isFalse(); // Noncompliant\n+    assertThat(((x).equals(((y))))).isTrue(); // Noncompliant\n+  }\n+\n+  void objectRelatedAssertionChains() {\n+    Comparable x = getBoolean();\n+    Object y = getObject();\n+\n+    assertThat(getObject()).isEqualTo(null); // Noncompliant [[sc=29;ec=38]] {{Use isNull() instead}}\n+    assertThat(getObject()).isNotEqualTo(null); // Noncompliant {{Use isNotNull() instead}}\n+    assertThat(getObject()).isEqualTo(null).isNotEqualTo(getObject()); // Noncompliant\n+    assertThat(getObject()).as(\"some message)\").isEqualTo(getObject()).withFailMessage(\"another message)\").isNotEqualTo(null).as(\"a third message\"); // Noncompliant [[sc=108;ec=120]]\n+    assertThat(new Object()).isEqualTo(null) // Noncompliant\n+      .isNotEqualTo(null); // Noncompliant\n+\n+    assertThat(getBoolean()).isEqualTo(true); // Noncompliant {{Use isTrue() instead}}\n+    assertThat(getBoolean()).isEqualTo(false); // Noncompliant {{Use isFalse() instead}}\n+    assertThat(x.equals(y)).isTrue(); // Noncompliant [[sc=29;ec=35;secondary=58]] {{Use assertThat(actual).isEqualTo(expected) instead}}\n+    assertThat(x.equals(y)).isFalse(); // Noncompliant {{Use assertThat(actual).isNotEqualTo(expected) instead}}\n+    assertThat(x == y).isTrue(); // Noncompliant {{Use assertThat(actual).isSameAs(expected) instead}}\n+    assertThat(x == y).isFalse(); // Noncompliant {{Use assertThat(actual).isNotSameAs(expected) instead}}\n+    assertThat(x != y).isTrue(); // Noncompliant {{Use assertThat(actual).isNotSameAs(expected) instead}}\n+    assertThat(x != y).isFalse(); // Noncompliant {{Use assertThat(actual).isSameAs(expected) instead}}\n+    assertThat(x == null).isTrue(); // Noncompliant {{Use assertThat(actual).isNull() instead}}\n+    assertThat(x != null).isTrue(); // Noncompliant {{Use assertThat(actual).isNotNull() instead}}\n+    assertThat(null == x).isFalse(); // Noncompliant {{Use assertThat(actual).isNotNull() instead}}\n+    assertThat(x != null).isFalse(); // Noncompliant {{Use assertThat(actual).isNull() instead}}\n+    assertThat(x.toString()).isEqualTo(y); // Noncompliant {{Use assertThat(actual).hasToString(expectedString) instead}}\n+    assertThat(x.hashCode()).isEqualTo(y.hashCode()); // Noncompliant {{Use assertThat(actual).hasSameHashCodeAs(expected) instead}}\n+    assertThat(getObject() instanceof String).isTrue(); // Noncompliant {{Use assertThat(actual).isInstanceOf(ExpectedClass.class) instead}}\n+    assertThat(getObject() instanceof String).isFalse(); // Noncompliant {{Use assertThat(actual).isNotInstanceOf(ExpectedClass.class) instead}}\n+\n+    assertThat(x.compareTo(y)).isEqualTo(0); // Noncompliant {{Use assertThat(actual).isEqualByComparingTo(expected) instead}}\n+    assertThat(x.compareTo(y)).isNotEqualTo(0); // Noncompliant {{Use assertThat(actual).isNotEqualByComparingTo(expected) instead}}\n+    assertThat(x.compareTo(y)).as(\"message\").isNotEqualTo(0); // Noncompliant\n+    assertThat(x.compareTo(y)).isNotEqualTo(0).isNotEqualTo(-1); // Compliant as we have >1 context-dependant predicate\n+    assertThat(x.compareTo(y)).isNotEqualTo(0).isNotEqualTo(null).isNotEqualTo(-1); // Noncompliant [[sc=48;ec=60]] - but only raise issue on the 'null' check\n+\n+    assertThat(x.compareTo(y)).isZero(); // Noncompliant {{Use assertThat(actual).isEqualByComparingTo(expected) instead}}\n+    assertThat(x.compareTo(y)).isNotZero(); // Noncompliant {{Use assertThat(actual).isNotEqualByComparingTo(expected) instead}}\n+    assertThat(x.compareTo(y)).isGreaterThan(-1); // Noncompliant {{Use assertThat(actual).isGreaterThanOrEqualTo(expected) instead}}\n+    assertThat(x.compareTo(y)).isGreaterThan(0); // Noncompliant {{Use assertThat(actual).isGreaterThan(expected) instead}}\n+    assertThat(x.compareTo(y)).isGreaterThanOrEqualTo(0); // Noncompliant {{Use assertThat(actual).isGreaterThanOrEqualTo(expected) instead}}\n+    assertThat(x.compareTo(y)).isGreaterThanOrEqualTo(1); // Noncompliant {{Use assertThat(actual).isGreaterThan(expected) instead}}\n+    assertThat(x.compareTo(y)).isLessThan(1); // Noncompliant {{Use assertThat(actual).isLessThanOrEqualTo(expected) instead}}\n+    assertThat(x.compareTo(y)).isLessThan(0); // Noncompliant {{Use assertThat(actual).isLessThan(expected) instead}}\n+    assertThat(x.compareTo(y)).isLessThanOrEqualTo(0); // Noncompliant {{Use assertThat(actual).isLessThanOrEqualTo(expected) instead}}\n+    assertThat(x.compareTo(y)).isLessThanOrEqualTo(-1); // Noncompliant {{Use assertThat(actual).isLessThan(expected) instead}}\n+    assertThat(x.compareTo(y)).isNegative(); // Noncompliant {{Use assertThat(actual).isLessThan(expected) instead}}\n+    assertThat(x.compareTo(y)).isNotNegative(); // Noncompliant {{Use assertThat(actual).isGreaterThanOrEqualTo(expected) instead}}\n+    assertThat(x.compareTo(y)).isPositive(); // Noncompliant {{Use assertThat(actual).isGreaterThan(expected) instead}}\n+    assertThat(x.compareTo(y)).isNotPositive(); // Noncompliant {{Use assertThat(actual).isLessThanOrEqualTo(expected) instead}}\n+\n+    assertThat(x.compareTo(y)).isOne(); // Compliant\n+\n+    //assertThatObject();", "originalCommit": "d442e1d848957c9590de96040e6c06b3599ba429", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNjcyNA==", "url": "https://github.com/SonarSource/sonar-java/pull/2980#discussion_r435926724", "bodyText": "I would only support method with one and only one parameter by using .addParametersMatcher(MethodMatchers.ANY) instead of .withAnyParameters()", "author": "alban-auzeill", "createdAt": "2020-06-05T13:38:28Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertJChainSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5838\")\n+public class AssertJChainSimplificationCheck extends AbstractMethodDetection {\n+  private static final String ABSTRACT_ASSERT = \"org.assertj.core.api.AbstractAssert\";\n+  private static final List<String> ASSERTION_MESSAGE_NAMES = Arrays.asList(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\");\n+\n+  private static final MethodMatchers ASSERTION_PREDICATES = MethodMatchers.create().ofSubTypes(ABSTRACT_ASSERT)\n+    .name(name -> !ASSERTION_MESSAGE_NAMES.contains(name)).withAnyParameters().build();\n+\n+  private static final MethodMatchers ASSERTIONS_SUBJECT_METHODS = MethodMatchers.create().ofTypes(\n+    \"org.assertj.core.api.Assertions\",\n+    \"org.assertj.core.api.AssertionsForInterfaceTypes\",\n+    \"org.assertj.core.api.AssertionsForClassTypes\")\n+    .names(\"assertThat\", \"assertThatObject\").withAnyParameters().build();", "originalCommit": "d442e1d848957c9590de96040e6c06b3599ba429", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2MTk1Nw==", "url": "https://github.com/SonarSource/sonar-java/pull/2980#discussion_r436461957", "bodyText": "I think we can directly use static fields of AssertJChainSimplificationIndex bellow without the need for the above intermediate variables.", "author": "alban-auzeill", "createdAt": "2020-06-08T05:21:14Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertJChainSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5838\")\n+public class AssertJChainSimplificationCheck extends AbstractMethodDetection {\n+  private static final String ABSTRACT_ASSERT = \"org.assertj.core.api.AbstractAssert\";\n+  private static final List<String> ASSERTION_MESSAGE_NAMES = Arrays.asList(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\");\n+\n+  private static final MethodMatchers ASSERTION_PREDICATES = MethodMatchers.create().ofSubTypes(ABSTRACT_ASSERT)\n+    .name(name -> !ASSERTION_MESSAGE_NAMES.contains(name)).withAnyParameters().build();\n+\n+  private static final MethodMatchers ASSERTIONS_SUBJECT_METHODS = MethodMatchers.create().ofTypes(\n+    \"org.assertj.core.api.Assertions\",\n+    \"org.assertj.core.api.AssertionsForInterfaceTypes\",\n+    \"org.assertj.core.api.AssertionsForClassTypes\")\n+    .names(\"assertThat\", \"assertThatObject\").withAnyParameters().build();\n+\n+  /**\n+   * @see AssertJChainSimplificationIndex#CONTEXT_FREE_SIMPLIFIERS\n+   */\n+  private static final Map<String, List<SimplifierWithoutContext>> CONTEXT_FREE_SIMPLIFIERS = AssertJChainSimplificationIndex.CONTEXT_FREE_SIMPLIFIERS;\n+\n+  /**\n+   * @see AssertJChainSimplificationIndex#SIMPLIFIERS_WITH_CONTEXT\n+   */\n+  private static final Map<String, List<SimplifierWithContext>> SIMPLIFIERS_WITH_CONTEXT = AssertJChainSimplificationIndex.SIMPLIFIERS_WITH_CONTEXT;", "originalCommit": "d442e1d848957c9590de96040e6c06b3599ba429", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ2OTg2NA==", "url": "https://github.com/SonarSource/sonar-java/pull/2980#discussion_r436469864", "bodyText": "When I read ASSERTION_PREDICATES, I think about methods like: isNull, isEqualTo, contains, ...\nBut I don't have in mind methods that validate nothing but change the assertion context like: extracting, usingComparator, filteredOn, ...\nThis rule needs to be aware of methods that change the assertion context because simplifications are not possible in their presence. The current implementation of the rule works fine because of the bellow limitation related to predicates.size() > 1, but it's not enough explicit and seems to be accidental.\nMy recommendations would be:\n\nRename ASSERTION_PREDICATES by something that express what it does, matching all kind of assert methods except message descriptions\nAdd to the comment line 83, an example having a method changing the assertion context\nAdd test cases with methods changing the assertion context", "author": "alban-auzeill", "createdAt": "2020-06-08T05:53:12Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertJChainSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5838\")\n+public class AssertJChainSimplificationCheck extends AbstractMethodDetection {\n+  private static final String ABSTRACT_ASSERT = \"org.assertj.core.api.AbstractAssert\";\n+  private static final List<String> ASSERTION_MESSAGE_NAMES = Arrays.asList(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\");\n+\n+  private static final MethodMatchers ASSERTION_PREDICATES = MethodMatchers.create().ofSubTypes(ABSTRACT_ASSERT)\n+    .name(name -> !ASSERTION_MESSAGE_NAMES.contains(name)).withAnyParameters().build();", "originalCommit": "d442e1d848957c9590de96040e6c06b3599ba429", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ3NTkxNQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2980#discussion_r436475915", "bodyText": "subsequentMethodInvocation bypasses methods that do not match ASSERTION_PREDICATES.\nASSERTION_PREDICATES only matches on method having ofSubTypes(ABSTRACT_ASSERT).\nSo some methods not having this subtype could be ignored by this rule and the proposed simplification could be wrong in those cases.\nIt's safer to collect all methods that follow assertThat using consecutiveMethodInvocation and filter:\nkeeping all methods except those matching:\n   ofSubTypes(ABSTRACT_ASSERT).names(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\")\n\ninstead of\nkeeping all methods matching:\n  ofSubTypes(ABSTRACT_ASSERT).names(name -> !ASSERTION_MESSAGE_NAMES.contains(name))", "author": "alban-auzeill", "createdAt": "2020-06-08T06:15:07Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertJChainSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5838\")\n+public class AssertJChainSimplificationCheck extends AbstractMethodDetection {\n+  private static final String ABSTRACT_ASSERT = \"org.assertj.core.api.AbstractAssert\";\n+  private static final List<String> ASSERTION_MESSAGE_NAMES = Arrays.asList(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\");\n+\n+  private static final MethodMatchers ASSERTION_PREDICATES = MethodMatchers.create().ofSubTypes(ABSTRACT_ASSERT)\n+    .name(name -> !ASSERTION_MESSAGE_NAMES.contains(name)).withAnyParameters().build();\n+\n+  private static final MethodMatchers ASSERTIONS_SUBJECT_METHODS = MethodMatchers.create().ofTypes(\n+    \"org.assertj.core.api.Assertions\",\n+    \"org.assertj.core.api.AssertionsForInterfaceTypes\",\n+    \"org.assertj.core.api.AssertionsForClassTypes\")\n+    .names(\"assertThat\", \"assertThatObject\").withAnyParameters().build();\n+\n+  /**\n+   * @see AssertJChainSimplificationIndex#CONTEXT_FREE_SIMPLIFIERS\n+   */\n+  private static final Map<String, List<SimplifierWithoutContext>> CONTEXT_FREE_SIMPLIFIERS = AssertJChainSimplificationIndex.CONTEXT_FREE_SIMPLIFIERS;\n+\n+  /**\n+   * @see AssertJChainSimplificationIndex#SIMPLIFIERS_WITH_CONTEXT\n+   */\n+  private static final Map<String, List<SimplifierWithContext>> SIMPLIFIERS_WITH_CONTEXT = AssertJChainSimplificationIndex.SIMPLIFIERS_WITH_CONTEXT;\n+\n+  @Override\n+  protected MethodMatchers getMethodInvocationMatchers() {\n+    return ASSERTIONS_SUBJECT_METHODS;\n+  }\n+\n+  @Override\n+  protected void onMethodInvocationFound(MethodInvocationTree subjectMit) {\n+    List<MethodInvocationTree> predicates = new ArrayList<>();\n+    Optional<MethodInvocationTree> nextPredicate = MethodTreeUtils.subsequentMethodInvocation(subjectMit, ASSERTION_PREDICATES);\n+\n+    while (nextPredicate.isPresent()) {\n+      predicates.add(nextPredicate.get());\n+      nextPredicate = MethodTreeUtils.subsequentMethodInvocation(nextPredicate.get(), ASSERTION_PREDICATES);\n+    }", "originalCommit": "d442e1d848957c9590de96040e6c06b3599ba429", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5NTM1Mw==", "url": "https://github.com/SonarSource/sonar-java/pull/2980#discussion_r436495353", "bodyText": "When the secondary location message is empty, SonarQube seems buggy, it's not possible to navigate to a secondary location. Here, it's the \"assertion subject\". Or we can probably highlight only the subjectMit's first argument as \"actual value\".\nOr we can also completely remove the secondary location so we can hard code reportIssue in checkPredicatesForSimplification and get rid of the BiConsumer<MethodInvocationTree, String> reportingMethod", "author": "alban-auzeill", "createdAt": "2020-06-08T07:09:39Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertJChainSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiFunction;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5838\")\n+public class AssertJChainSimplificationCheck extends AbstractMethodDetection {\n+  private static final String ABSTRACT_ASSERT = \"org.assertj.core.api.AbstractAssert\";\n+  private static final List<String> ASSERTION_MESSAGE_NAMES = Arrays.asList(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\");\n+\n+  private static final MethodMatchers ASSERTION_PREDICATES = MethodMatchers.create().ofSubTypes(ABSTRACT_ASSERT)\n+    .name(name -> !ASSERTION_MESSAGE_NAMES.contains(name)).withAnyParameters().build();\n+\n+  private static final MethodMatchers ASSERTIONS_SUBJECT_METHODS = MethodMatchers.create().ofTypes(\n+    \"org.assertj.core.api.Assertions\",\n+    \"org.assertj.core.api.AssertionsForInterfaceTypes\",\n+    \"org.assertj.core.api.AssertionsForClassTypes\")\n+    .names(\"assertThat\", \"assertThatObject\").withAnyParameters().build();\n+\n+  /**\n+   * @see AssertJChainSimplificationIndex#CONTEXT_FREE_SIMPLIFIERS\n+   */\n+  private static final Map<String, List<SimplifierWithoutContext>> CONTEXT_FREE_SIMPLIFIERS = AssertJChainSimplificationIndex.CONTEXT_FREE_SIMPLIFIERS;\n+\n+  /**\n+   * @see AssertJChainSimplificationIndex#SIMPLIFIERS_WITH_CONTEXT\n+   */\n+  private static final Map<String, List<SimplifierWithContext>> SIMPLIFIERS_WITH_CONTEXT = AssertJChainSimplificationIndex.SIMPLIFIERS_WITH_CONTEXT;\n+\n+  @Override\n+  protected MethodMatchers getMethodInvocationMatchers() {\n+    return ASSERTIONS_SUBJECT_METHODS;\n+  }\n+\n+  @Override\n+  protected void onMethodInvocationFound(MethodInvocationTree subjectMit) {\n+    List<MethodInvocationTree> predicates = new ArrayList<>();\n+    Optional<MethodInvocationTree> nextPredicate = MethodTreeUtils.subsequentMethodInvocation(subjectMit, ASSERTION_PREDICATES);\n+\n+    while (nextPredicate.isPresent()) {\n+      predicates.add(nextPredicate.get());\n+      nextPredicate = MethodTreeUtils.subsequentMethodInvocation(nextPredicate.get(), ASSERTION_PREDICATES);\n+    }\n+\n+    boolean wasIssueRaised = checkPredicatesForSimplification(\n+      predicates, CONTEXT_FREE_SIMPLIFIERS, SimplifierWithoutContext::simplify,\n+      (predicate, replacement) -> reportIssue(ExpressionUtils.methodName(predicate),\n+        String.format(\"Use %s instead\", replacement)));\n+\n+    // We do not continue when we have already raised an issue to avoid potentially conflicting issue reports. If we\n+    // have more than one predicate we also avoid continuing to avoid FP on cases such as:\n+    // assertThat(Integer.valueOf(1).compareTo(2)).isGreaterThan(1).isLessThan(10)\n+    if (wasIssueRaised || predicates.size() > 1) {\n+      return;\n+    }\n+\n+    checkPredicatesForSimplification(\n+      predicates, SIMPLIFIERS_WITH_CONTEXT, (simplifier, predicate) -> simplifier.simplify(subjectMit, predicate),\n+      (predicate, replacement) -> reportIssue(ExpressionUtils.methodName(predicate),\n+        String.format(\"Use %s instead\", replacement),\n+        Collections.singletonList(\n+          new JavaFileScannerContext.Location(\"\", subjectMit)),", "originalCommit": "d442e1d848957c9590de96040e6c06b3599ba429", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU4MzQ3Mw==", "url": "https://github.com/SonarSource/sonar-java/pull/2980#discussion_r436583473", "bodyText": "What was our final agreement in regards to the message here? Is it fine to leave the message blank? (I think that makes sense, although we should investigate the SQ issue at the same time).", "author": "johann-beleites-sonarsource", "createdAt": "2020-06-08T09:57:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5NTM1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwMTg1NQ==", "url": "https://github.com/SonarSource/sonar-java/pull/2980#discussion_r436501855", "bodyText": "The paragraph <h2>Noncompliant Code Example</h2> is missing. It's because it should be h2. Noncompliant Code Example and not h2. Noncompliant Solution in the RSPEC.", "author": "alban-auzeill", "createdAt": "2020-06-08T07:25:21Z", "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5838_java.html", "diffHunk": "@@ -0,0 +1,78 @@\n+<p>AssertJ contains many assertions methods specific to common types. Both versions will test the same things, but the dedicated one will provide a\n+better error message, simplifying the debugging process.</p>\n+<p>This rule reports an issue when an assertion can be simplified to a dedicated one.</p>\n+<p>The array below gives a non-exhaustive list of assertion reported by the rule. Code behaving similarly, or with a negation will also be\n+reported.</p>\n+<table>\n+  <tbody>\n+    <tr>\n+      <th>Original</th>\n+      <th>Dedicated</th>\n+    </tr>\n+    <tr>\n+      <th>&nbsp;Related to Object </th>\n+      <th>&nbsp;</th>\n+    </tr>\n+    <tr>\n+      <td><code>assertThat(getObject()).isEqualTo(null)</code></td>\n+      <td><code>assertThat(getObject()).isNull()</code></td>\n+    </tr>\n+    <tr>\n+      <td><code>assertThat(getBoolean()).isEqualTo(true)</code></td>\n+      <td><code>assertThat(getBoolean()).isTrue()</code></td>\n+    </tr>\n+    <tr>\n+      <td><code>assertThat(getBoolean()).isEqualTo(false)</code></td>\n+      <td><code>assertThat(getBoolean()).isFalse()</code></td>\n+    </tr>\n+    <tr>\n+      <td><code>assertThat(x.equals(y)).isTrue()</code></td>\n+      <td><code>assertThat(x).isEqualTo(y)</code></td>\n+    </tr>\n+    <tr>\n+      <td><code>assertThat(x == y).isTrue()</code></td>\n+      <td><code>assertThat(x).isSameAs(y)</code></td>\n+    </tr>\n+    <tr>\n+      <td><code>assertThat(x == null).isTrue()</code></td>\n+      <td><code>assertThat(x).isNull()</code></td>\n+    </tr>\n+    <tr>\n+      <td><code>assertThat(x.toString()).isEqualTo(y)</code></td>\n+      <td><code>assertThat(x).hasToString(y)</code></td>\n+    </tr>\n+    <tr>\n+      <td><code>assertThat(x.hashCode()).isEqualTo(y.hashCode())</code></td>\n+      <td><code>assertThat(x).hasSameHashCodeAs(y));</code></td>\n+    </tr>\n+    <tr>\n+      <td><code>assertThat(getObject() instanceof MyClass).isTrue()</code></td>\n+      <td><code>assertThat(getObject()).isInstanceOf(MyClass.class)</code></td>\n+    </tr>\n+    <tr>\n+      <td><code>assertThat(x.compareTo(y)).isEqualTo(0)</code></td>\n+      <td><code>assertThat(x).isEqualByComparingTo(y)</code></td>\n+    </tr>\n+    <tr>\n+      <td><code>assertThat(x &gt;= y).isGreaterThanOrEqualTo(0)</code></td>\n+      <td><code>assertThat(x).isGreaterThanOrEqualTo(y)</code></td>\n+    </tr>\n+    <tr>\n+      <td><code>assertThat(x &gt; y).isPositive()</code></td>\n+      <td><code>assertThat(x).isGreaterThan(y)</code></td>\n+    </tr>\n+    <tr>\n+      <td><code>assertThat(x &lt;= y).isNotPositive()</code></td>\n+      <td><code>assertThat(x).isLessThanOrEqualTo(y)</code></td>\n+    </tr>\n+    <tr>\n+      <td><code>assertThat(x &lt; y).isTrue(0)</code></td>\n+      <td><code>assertThat(x).isLessThan(y)</code></td>\n+    </tr>\n+  </tbody>\n+</table>", "originalCommit": "d442e1d848957c9590de96040e6c06b3599ba429", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwMzQ3Nw==", "url": "https://github.com/SonarSource/sonar-java/pull/2980#discussion_r436503477", "bodyText": "This file contains a lot of Noncompliant test cases compared to the number of Compliant. We need to also add a good proportion to Compliant cases to assert that we don't raise issues on compliant code.", "author": "alban-auzeill", "createdAt": "2020-06-08T07:28:50Z", "path": "java-checks-test-sources/src/main/java/checks/AssertJChainSimplificationCheckTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package checks;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatObject;\n+\n+public class AssertJChainSimplificationCheckTest {\n+\n+  private Object getObject() {\n+    return new Object();\n+  }\n+\n+  private boolean getBoolean() {\n+    return true;\n+  }\n+\n+  void edgeCases() {\n+    Object x = \"x\", y = \"y\";\n+\n+    assertThat((x == y)).isTrue(); // Noncompliant\n+    assertThat((((((x == y)))))).isTrue(); // Noncompliant\n+    assertThat((x).equals(y)).isTrue(); // Noncompliant\n+    assertThat(x != (null)).isFalse(); // Noncompliant\n+    assertThat(((x).equals(((y))))).isTrue(); // Noncompliant\n+  }\n+\n+  void objectRelatedAssertionChains() {\n+    Comparable x = getBoolean();\n+    Object y = getObject();\n+\n+    assertThat(getObject()).isEqualTo(null); // Noncompliant [[sc=29;ec=38]] {{Use isNull() instead}}\n+    assertThat(getObject()).isNotEqualTo(null); // Noncompliant {{Use isNotNull() instead}}\n+    assertThat(getObject()).isEqualTo(null).isNotEqualTo(getObject()); // Noncompliant\n+    assertThat(getObject()).as(\"some message)\").isEqualTo(getObject()).withFailMessage(\"another message)\").isNotEqualTo(null).as(\"a third message\"); // Noncompliant [[sc=108;ec=120]]\n+    assertThat(new Object()).isEqualTo(null) // Noncompliant\n+      .isNotEqualTo(null); // Noncompliant\n+\n+    assertThat(getBoolean()).isEqualTo(true); // Noncompliant {{Use isTrue() instead}}\n+    assertThat(getBoolean()).isEqualTo(false); // Noncompliant {{Use isFalse() instead}}\n+    assertThat(x.equals(y)).isTrue(); // Noncompliant [[sc=29;ec=35;secondary=58]] {{Use assertThat(actual).isEqualTo(expected) instead}}\n+    assertThat(x.equals(y)).isFalse(); // Noncompliant {{Use assertThat(actual).isNotEqualTo(expected) instead}}\n+    assertThat(x == y).isTrue(); // Noncompliant {{Use assertThat(actual).isSameAs(expected) instead}}\n+    assertThat(x == y).isFalse(); // Noncompliant {{Use assertThat(actual).isNotSameAs(expected) instead}}\n+    assertThat(x != y).isTrue(); // Noncompliant {{Use assertThat(actual).isNotSameAs(expected) instead}}\n+    assertThat(x != y).isFalse(); // Noncompliant {{Use assertThat(actual).isSameAs(expected) instead}}\n+    assertThat(x == null).isTrue(); // Noncompliant {{Use assertThat(actual).isNull() instead}}\n+    assertThat(x != null).isTrue(); // Noncompliant {{Use assertThat(actual).isNotNull() instead}}\n+    assertThat(null == x).isFalse(); // Noncompliant {{Use assertThat(actual).isNotNull() instead}}\n+    assertThat(x != null).isFalse(); // Noncompliant {{Use assertThat(actual).isNull() instead}}\n+    assertThat(x.toString()).isEqualTo(y); // Noncompliant {{Use assertThat(actual).hasToString(expectedString) instead}}\n+    assertThat(x.hashCode()).isEqualTo(y.hashCode()); // Noncompliant {{Use assertThat(actual).hasSameHashCodeAs(expected) instead}}\n+    assertThat(getObject() instanceof String).isTrue(); // Noncompliant {{Use assertThat(actual).isInstanceOf(ExpectedClass.class) instead}}\n+    assertThat(getObject() instanceof String).isFalse(); // Noncompliant {{Use assertThat(actual).isNotInstanceOf(ExpectedClass.class) instead}}\n+\n+    assertThat(x.compareTo(y)).isEqualTo(0); // Noncompliant {{Use assertThat(actual).isEqualByComparingTo(expected) instead}}\n+    assertThat(x.compareTo(y)).isNotEqualTo(0); // Noncompliant {{Use assertThat(actual).isNotEqualByComparingTo(expected) instead}}\n+    assertThat(x.compareTo(y)).as(\"message\").isNotEqualTo(0); // Noncompliant\n+    assertThat(x.compareTo(y)).isNotEqualTo(0).isNotEqualTo(-1); // Compliant as we have >1 context-dependant predicate\n+    assertThat(x.compareTo(y)).isNotEqualTo(0).isNotEqualTo(null).isNotEqualTo(-1); // Noncompliant [[sc=48;ec=60]] - but only raise issue on the 'null' check\n+\n+    assertThat(x.compareTo(y)).isZero(); // Noncompliant {{Use assertThat(actual).isEqualByComparingTo(expected) instead}}\n+    assertThat(x.compareTo(y)).isNotZero(); // Noncompliant {{Use assertThat(actual).isNotEqualByComparingTo(expected) instead}}\n+    assertThat(x.compareTo(y)).isGreaterThan(-1); // Noncompliant {{Use assertThat(actual).isGreaterThanOrEqualTo(expected) instead}}\n+    assertThat(x.compareTo(y)).isGreaterThan(0); // Noncompliant {{Use assertThat(actual).isGreaterThan(expected) instead}}\n+    assertThat(x.compareTo(y)).isGreaterThanOrEqualTo(0); // Noncompliant {{Use assertThat(actual).isGreaterThanOrEqualTo(expected) instead}}\n+    assertThat(x.compareTo(y)).isGreaterThanOrEqualTo(1); // Noncompliant {{Use assertThat(actual).isGreaterThan(expected) instead}}\n+    assertThat(x.compareTo(y)).isLessThan(1); // Noncompliant {{Use assertThat(actual).isLessThanOrEqualTo(expected) instead}}\n+    assertThat(x.compareTo(y)).isLessThan(0); // Noncompliant {{Use assertThat(actual).isLessThan(expected) instead}}\n+    assertThat(x.compareTo(y)).isLessThanOrEqualTo(0); // Noncompliant {{Use assertThat(actual).isLessThanOrEqualTo(expected) instead}}\n+    assertThat(x.compareTo(y)).isLessThanOrEqualTo(-1); // Noncompliant {{Use assertThat(actual).isLessThan(expected) instead}}\n+    assertThat(x.compareTo(y)).isNegative(); // Noncompliant {{Use assertThat(actual).isLessThan(expected) instead}}\n+    assertThat(x.compareTo(y)).isNotNegative(); // Noncompliant {{Use assertThat(actual).isGreaterThanOrEqualTo(expected) instead}}\n+    assertThat(x.compareTo(y)).isPositive(); // Noncompliant {{Use assertThat(actual).isGreaterThan(expected) instead}}\n+    assertThat(x.compareTo(y)).isNotPositive(); // Noncompliant {{Use assertThat(actual).isLessThanOrEqualTo(expected) instead}}\n+\n+    assertThat(x.compareTo(y)).isOne(); // Compliant\n+\n+    //assertThatObject();\n+\n+  }", "originalCommit": "d442e1d848957c9590de96040e6c06b3599ba429", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "112d830510d28103d070ec13778f061adac4b52b", "url": "https://github.com/SonarSource/sonar-java/commit/112d830510d28103d070ec13778f061adac4b52b", "message": "SONARJAVA-3393 First logic implementation for AssertJ assertion chain simplification rule.", "committedDate": "2020-06-09T12:09:52Z", "type": "commit"}, {"oid": "5f46a5df0993d41ba212de3cd6fb80757acbdc9d", "url": "https://github.com/SonarSource/sonar-java/commit/5f46a5df0993d41ba212de3cd6fb80757acbdc9d", "message": "SONARJAVA-3393 Improved documentation.", "committedDate": "2020-06-09T12:09:52Z", "type": "commit"}, {"oid": "34e9b6d60a1c17424612b62be9cf9e5c3aea6235", "url": "https://github.com/SonarSource/sonar-java/commit/34e9b6d60a1c17424612b62be9cf9e5c3aea6235", "message": "SONARJAVA-3406 Implemented rules related to Object.", "committedDate": "2020-06-09T12:09:52Z", "type": "commit"}, {"oid": "da7aac05e7a203395e711099b46099effe4673e6", "url": "https://github.com/SonarSource/sonar-java/commit/da7aac05e7a203395e711099b46099effe4673e6", "message": "SONARJAVA-3393 SONARJAVA-3406 Restructured code for S5838 for improved maintainability. Improved code quality, added rule metadata.", "committedDate": "2020-06-09T12:12:20Z", "type": "commit"}, {"oid": "618e68dec4142a09dc34a6296eda63bca9fd0e1d", "url": "https://github.com/SonarSource/sonar-java/commit/618e68dec4142a09dc34a6296eda63bca9fd0e1d", "message": "Fixed bug which caused ruling tests to fail.", "committedDate": "2020-06-09T12:12:20Z", "type": "commit"}, {"oid": "9d7ced620233c6dbfc73115a3b28c820f4d3cb9e", "url": "https://github.com/SonarSource/sonar-java/commit/9d7ced620233c6dbfc73115a3b28c820f4d3cb9e", "message": "Added edge case test", "committedDate": "2020-06-09T12:12:20Z", "type": "commit"}, {"oid": "ab89194bb108cd97418d18aafe7a7a064ad289c8", "url": "https://github.com/SonarSource/sonar-java/commit/ab89194bb108cd97418d18aafe7a7a064ad289c8", "message": "formatting 1", "committedDate": "2020-06-09T12:13:48Z", "type": "commit"}, {"oid": "f360e23cf94b5fb58f781d09fb39e522644ead92", "url": "https://github.com/SonarSource/sonar-java/commit/f360e23cf94b5fb58f781d09fb39e522644ead92", "message": "removed obsolete TODO comment", "committedDate": "2020-06-09T12:13:48Z", "type": "commit"}, {"oid": "d25d12b1ae4cf58016e9f10b5e881606497a0921", "url": "https://github.com/SonarSource/sonar-java/commit/d25d12b1ae4cf58016e9f10b5e881606497a0921", "message": "SONARJAVA-3393 added assertThatObject/1 support, improved test coverage, removed unecessary logic.", "committedDate": "2020-06-09T12:13:48Z", "type": "commit"}, {"oid": "3f2fa32617b7d9a971cbf85f4a108f442a54bd40", "url": "https://github.com/SonarSource/sonar-java/commit/3f2fa32617b7d9a971cbf85f4a108f442a54bd40", "message": "Removed unused import", "committedDate": "2020-06-09T12:13:48Z", "type": "commit"}, {"oid": "2d7a00cdeab556fce0d32bed5fe3b29dd6b10bcc", "url": "https://github.com/SonarSource/sonar-java/commit/2d7a00cdeab556fce0d32bed5fe3b29dd6b10bcc", "message": "SONARJAVA-3406 added ruling findings", "committedDate": "2020-06-09T12:13:48Z", "type": "commit"}, {"oid": "c744953be41d4b98ed6bebbbb66b8cb1a096876f", "url": "https://github.com/SonarSource/sonar-java/commit/c744953be41d4b98ed6bebbbb66b8cb1a096876f", "message": "Improved various small aspects of the business logic, description and testing.", "committedDate": "2020-06-09T12:13:48Z", "type": "commit"}, {"oid": "bd51a9626eb2de6036b2c5689adc17e30cb8dfb4", "url": "https://github.com/SonarSource/sonar-java/commit/bd51a9626eb2de6036b2c5689adc17e30cb8dfb4", "message": "SONARJAVA-3393 Added message to secondary location as at least SonarQube 7.9 seems to have trouble displaying the secondary location otherwise.", "committedDate": "2020-06-09T12:13:48Z", "type": "commit"}, {"oid": "d7048c9a17a0d3adf97d314fd44cad3ca5667690", "url": "https://github.com/SonarSource/sonar-java/commit/d7048c9a17a0d3adf97d314fd44cad3ca5667690", "message": "Improved wording of message.", "committedDate": "2020-06-09T12:13:48Z", "type": "commit"}, {"oid": "d7048c9a17a0d3adf97d314fd44cad3ca5667690", "url": "https://github.com/SonarSource/sonar-java/commit/d7048c9a17a0d3adf97d314fd44cad3ca5667690", "message": "Improved wording of message.", "committedDate": "2020-06-09T12:13:48Z", "type": "forcePushed"}]}