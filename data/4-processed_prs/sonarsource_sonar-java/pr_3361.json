{"pr_number": 3361, "pr_title": "SONARJAVA-3637 document property", "pr_createdAt": "2020-12-17T15:53:06Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3361", "timeline": [{"oid": "6aee98485d446076c07a89498b9989e0064e33e5", "url": "https://github.com/SonarSource/sonar-java/commit/6aee98485d446076c07a89498b9989e0064e33e5", "message": "SONARJAVA-3637 document property", "committedDate": "2020-12-17T15:51:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTcwOTEzMQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3361#discussion_r545709131", "bodyText": "The first sentence is quite long and complicated. Maybe it will be better to split it in two.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If it is your case, and you are **NOT** using Maven or Gradle, you will need to set the property `sonar.java.jdkHome` manually (see below) to specify which JDK classes the analyzer must refer to during the analysis. Not setting this property, while it would have been required, usually leads to inconsistent or even impossible to fix issues being reported, especially in relation with native JDK classes.\n          \n          \n            \n            If it is your case, and you are **NOT** using Maven or Gradle, you will need to set the property `sonar.java.jdkHome` manually (see below). By doing this you'll specify which JDK classes the analyzer must refer to during the analysis. Not setting this property, while it would have been required, usually leads to inconsistent or even impossible to fix issues being reported, especially in relation with native JDK classes.", "author": "margarita-nedzelska-sonarsource", "createdAt": "2020-12-18T09:30:58Z", "path": "sonar-java-plugin/src/main/resources/static/documentation.md", "diffHunk": "@@ -35,6 +35,13 @@ Key | Value\n [[warning]]\n | Android users, Jack doesn't provide the required `.class` files.\n \n+## Project's specific JDK\n+\n+In some situations, you might have to analyze a project built with a different version of Java than the one executing the analysis. The most common case is to run the analysis with **Java 11**, while the project itself uses **Java 8** or before for its build. This case is normally automatically handled when using Maven or Gradle, as well as with any flavor of SonarLint.\n+\n+If it is your case, and you are **NOT** using Maven or Gradle, you will need to set the property `sonar.java.jdkHome` manually (see below) to specify which JDK classes the analyzer must refer to during the analysis. Not setting this property, while it would have been required, usually leads to inconsistent or even impossible to fix issues being reported, especially in relation with native JDK classes.", "originalCommit": "6aee98485d446076c07a89498b9989e0064e33e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e9696f78a6f8c5b76a065e5a2551a493e609dc19", "url": "https://github.com/SonarSource/sonar-java/commit/e9696f78a6f8c5b76a065e5a2551a493e609dc19", "message": "update\n\nCo-authored-by: margarita-nedzelska-sonarsource <70522623+margarita-nedzelska-sonarsource@users.noreply.github.com>", "committedDate": "2020-12-18T09:38:10Z", "type": "commit"}]}