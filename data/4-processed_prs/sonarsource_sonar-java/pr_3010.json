{"pr_number": 3010, "pr_title": "SONARJAVA-3410 S5838: Optional-related rules for AssertJ chain simplification", "pr_createdAt": "2020-06-12T15:07:24Z", "pr_url": "https://github.com/SonarSource/sonar-java/pull/3010", "timeline": [{"oid": "4644a55baada40ed9e29bc56396a191dfd95f822", "url": "https://github.com/SonarSource/sonar-java/commit/4644a55baada40ed9e29bc56396a191dfd95f822", "message": "SONARJAVA-3410 Implemented Optional-related rules.", "committedDate": "2020-06-12T13:11:14Z", "type": "commit"}, {"oid": "be41e1a29331520210cd6e9a35b0cf99cd8bc7e4", "url": "https://github.com/SonarSource/sonar-java/commit/be41e1a29331520210cd6e9a35b0cf99cd8bc7e4", "message": "Merge branch 'master' into SONARJAVA-3410-OptionalRelatedRules", "committedDate": "2020-06-12T14:37:49Z", "type": "commit"}, {"oid": "3c60f3e33e5d0468487fa13b303c7823e97e177e", "url": "https://github.com/SonarSource/sonar-java/commit/3c60f3e33e5d0468487fa13b303c7823e97e177e", "message": "Fixed small merge error.", "committedDate": "2020-06-12T14:40:09Z", "type": "commit"}, {"oid": "73939844099789bfad224da32edccec017c5bf43", "url": "https://github.com/SonarSource/sonar-java/commit/73939844099789bfad224da32edccec017c5bf43", "message": "SONARJAVA-3410 added missing ruling findings.", "committedDate": "2020-06-12T15:04:56Z", "type": "commit"}, {"oid": "222f37cdc363cd2a5afe912f6277ebfb7c3d364e", "url": "https://github.com/SonarSource/sonar-java/commit/222f37cdc363cd2a5afe912f6277ebfb7c3d364e", "message": "Replaced string literals with constants", "committedDate": "2020-06-12T15:06:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MjYyOA==", "url": "https://github.com/SonarSource/sonar-java/pull/3010#discussion_r439492628", "bodyText": "The name is misleading, it does not target only Strings.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-06-12T15:36:00Z", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertJChainSimplificationIndex.java", "diffHunk": "@@ -260,8 +294,12 @@ private AssertJChainSimplificationIndex() {\n       .addWithoutParametersMatcher().build();\n     public static final MethodMatchers INDEX_OF_STRING = MethodMatchers.create().ofTypes(JAVA_LANG_STRING)\n       .names(\"indexOf\").addParametersMatcher(JAVA_LANG_STRING).build();\n-    public static final MethodMatchers IS_EMPTY = MethodMatchers.create().ofTypes(JAVA_LANG_STRING, JAVA_UTIL_COLLECTION, JAVA_UTIL_MAP)\n-      .names(AssertJChainSimplificationIndex.IS_EMPTY).addWithoutParametersMatcher().build();\n+    public static final MethodMatchers IS_EMPTY_STRING = MethodMatchers.create().ofTypes(JAVA_LANG_STRING, JAVA_UTIL_COLLECTION, JAVA_UTIL_MAP)", "originalCommit": "222f37cdc363cd2a5afe912f6277ebfb7c3d364e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxNTE3NA==", "url": "https://github.com/SonarSource/sonar-java/pull/3010#discussion_r439515174", "bodyText": "Do we really want to propose isNotEmpty() here?\nSame for the others, I feel that we should stick to one variant.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-06-12T16:15:25Z", "path": "java-checks-test-sources/src/main/java/checks/AssertJChainSimplificationCheckTest.java", "diffHunk": "@@ -305,6 +310,17 @@ void pathRelatedAssertionChains() {\n     assertThat(getPath().isAbsolute()).isFalse(); // Noncompliant\t{{Use assertThat(actual).isRelative() instead}}\n   }\n \n+  void optionalRelatedAssertionChains() {\n+    assertThat(Optional.empty().isPresent()).isTrue(); // Noncompliant {{Use assertThat(actual).isPresent() or assertThat(actual).isNotEmpty() instead}}", "originalCommit": "222f37cdc363cd2a5afe912f6277ebfb7c3d364e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNTE2NQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3010#discussion_r439525165", "bodyText": "I considered that as well but then went with both as I felt like different phrasings might make sense in different contexts. Maybe you've established to always use isPresent() and isEmpty(), then suggesting only isNotPresent() seems a little unfitting. But perhaps someone else usually uses isPresent() and isNotPresent() throughout their code, then suggesting isEmpty() would seem off. That's why I went for including both, especially as the docs don't seem to suggest one more than the other. WDYT?", "author": "johann-beleites-sonarsource", "createdAt": "2020-06-12T16:33:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxNTE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwODM3MA==", "url": "https://github.com/SonarSource/sonar-java/pull/3010#discussion_r440008370", "bodyText": "I see, it's true that it works fine for all other cases, there is just this one that sounds strange when you look at it separately, but as a whole, it makes sense to propose both.", "author": "quentin-jaquier-sonarsource", "createdAt": "2020-06-15T08:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxNTE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0MzgyNQ==", "url": "https://github.com/SonarSource/sonar-java/pull/3010#discussion_r440043825", "bodyText": "I see, I agree that isNotEmpty() seems like the least intuitive method of those. I have one more thought that came to mind: what do you think of the fact that for collections AssertJ offers isEmpty() and isNotEmpty(). So there might be a natural tendency to those methods for some users over is(Not)Present(). Should that be something to consider here?", "author": "johann-beleites-sonarsource", "createdAt": "2020-06-15T09:23:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxNTE3NA=="}], "type": "inlineReview"}, {"oid": "696ff2da92d2642d87327b0d1d3e395342625784", "url": "https://github.com/SonarSource/sonar-java/commit/696ff2da92d2642d87327b0d1d3e395342625784", "message": "SONARJAVA-3410 Improved messages, naming and updated rule description.", "committedDate": "2020-06-15T11:41:58Z", "type": "commit"}]}