{"pr_number": 3968, "pr_title": "NXP-28993: Don't swallow exceptions during tests", "pr_createdAt": "2020-04-24T08:30:23Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3968", "timeline": [{"oid": "7500469cac7207c2d26aeac5e8422b0c6d8b4831", "url": "https://github.com/nuxeo/nuxeo/commit/7500469cac7207c2d26aeac5e8422b0c6d8b4831", "message": "NXP-28993: Cleanup / Format", "committedDate": "2020-04-24T08:27:25Z", "type": "commit"}, {"oid": "883750e2d7b82b3fc62983fe7a4bcd6421bde1ab", "url": "https://github.com/nuxeo/nuxeo/commit/883750e2d7b82b3fc62983fe7a4bcd6421bde1ab", "message": "NXP-28993: Don't swallow exceptions during tests", "committedDate": "2020-04-24T08:38:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMjc2Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3968#discussion_r414522762", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.trace(\"Invoke {} on features: {}\", () -> id, () -> formatFeatures(holders));\n          \n          \n            \n                    log.trace(\"Invoke: {} on features: {}\", () -> id, () -> formatFeatures(holders));", "author": "ataillefer", "createdAt": "2020-04-24T12:04:12Z", "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/FeaturesRunner.java", "diffHunk": "@@ -167,42 +179,108 @@ public URL getTargetTestResource(String name) throws IOException {\n     }\n \n     protected void initialize() throws Exception {\n+        log.trace(\"Invoke initialize on features\");\n         for (RunnerFeature each : getFeatures()) {\n             each.initialize(this);\n         }\n     }\n \n     protected void beforeRun() {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.beforeRun(FeaturesRunner.this));\n+        apply(\"beforeRun\", FORWARD, holder -> holder.feature.beforeRun(FeaturesRunner.this));\n     }\n \n     protected void beforeMethodRun(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.beforeMethodRun(FeaturesRunner.this, method, test));\n+        apply(\"beforeMethodRun\", FORWARD, holder -> holder.feature.beforeMethodRun(FeaturesRunner.this, method, test));\n     }\n \n     protected void afterMethodRun(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.afterMethodRun(FeaturesRunner.this, method, test));\n+        apply(\"afterMethodRun\", FORWARD, holder -> holder.feature.afterMethodRun(FeaturesRunner.this, method, test));\n     }\n \n     protected void afterRun() {\n-        loader.apply(Direction.BACKWARD, holder -> holder.feature.afterRun(FeaturesRunner.this));\n+        apply(\"afterRun\", BACKWARD, holder -> holder.feature.afterRun(FeaturesRunner.this));\n     }\n \n     protected void start() {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.start(FeaturesRunner.this));\n+        apply(\"start\", FORWARD, holder -> holder.feature.start(FeaturesRunner.this));\n     }\n \n     protected void stop() {\n-        loader.apply(Direction.BACKWARD, holder -> holder.feature.stop(FeaturesRunner.this));\n+        apply(\"stop\", BACKWARD, holder -> holder.feature.stop(FeaturesRunner.this));\n     }\n \n     protected void beforeSetup(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.beforeSetup(FeaturesRunner.this, method, test));\n+        apply(\"beforeSetup\", FORWARD, holder -> holder.feature.beforeSetup(FeaturesRunner.this, method, test));\n         injector.injectMembers(underTest);\n     }\n \n     protected void afterTeardown(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.BACKWARD, holder -> holder.feature.afterTeardown(FeaturesRunner.this, method, test));\n+        apply(\"afterTeardown\", BACKWARD, holder -> holder.feature.afterTeardown(FeaturesRunner.this, method, test));\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    protected void apply(String id, Direction direction, ThrowableConsumer<FeaturesLoader.Holder, Exception> consumer) {\n+        apply(id, direction == FORWARD ? loader.holders() : loader.reversedHolders(), consumer);\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    protected void apply(String id, Collection<FeaturesLoader.Holder> holders,\n+            ThrowableConsumer<FeaturesLoader.Holder, Exception> consumer) {\n+        log.trace(\"Invoke {} on features: {}\", () -> id, () -> formatFeatures(holders));", "originalCommit": "883750e2d7b82b3fc62983fe7a4bcd6421bde1ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMzYwNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3968#discussion_r414523607", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            log.debug(\"Error while invoking {} on feature: {}\", id, each.type);\n          \n          \n            \n                            log.debug(\"Error while invoking: {} on feature: {}\", id, each.type);", "author": "ataillefer", "createdAt": "2020-04-24T12:05:46Z", "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/FeaturesRunner.java", "diffHunk": "@@ -167,42 +179,108 @@ public URL getTargetTestResource(String name) throws IOException {\n     }\n \n     protected void initialize() throws Exception {\n+        log.trace(\"Invoke initialize on features\");\n         for (RunnerFeature each : getFeatures()) {\n             each.initialize(this);\n         }\n     }\n \n     protected void beforeRun() {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.beforeRun(FeaturesRunner.this));\n+        apply(\"beforeRun\", FORWARD, holder -> holder.feature.beforeRun(FeaturesRunner.this));\n     }\n \n     protected void beforeMethodRun(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.beforeMethodRun(FeaturesRunner.this, method, test));\n+        apply(\"beforeMethodRun\", FORWARD, holder -> holder.feature.beforeMethodRun(FeaturesRunner.this, method, test));\n     }\n \n     protected void afterMethodRun(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.afterMethodRun(FeaturesRunner.this, method, test));\n+        apply(\"afterMethodRun\", FORWARD, holder -> holder.feature.afterMethodRun(FeaturesRunner.this, method, test));\n     }\n \n     protected void afterRun() {\n-        loader.apply(Direction.BACKWARD, holder -> holder.feature.afterRun(FeaturesRunner.this));\n+        apply(\"afterRun\", BACKWARD, holder -> holder.feature.afterRun(FeaturesRunner.this));\n     }\n \n     protected void start() {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.start(FeaturesRunner.this));\n+        apply(\"start\", FORWARD, holder -> holder.feature.start(FeaturesRunner.this));\n     }\n \n     protected void stop() {\n-        loader.apply(Direction.BACKWARD, holder -> holder.feature.stop(FeaturesRunner.this));\n+        apply(\"stop\", BACKWARD, holder -> holder.feature.stop(FeaturesRunner.this));\n     }\n \n     protected void beforeSetup(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.beforeSetup(FeaturesRunner.this, method, test));\n+        apply(\"beforeSetup\", FORWARD, holder -> holder.feature.beforeSetup(FeaturesRunner.this, method, test));\n         injector.injectMembers(underTest);\n     }\n \n     protected void afterTeardown(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.BACKWARD, holder -> holder.feature.afterTeardown(FeaturesRunner.this, method, test));\n+        apply(\"afterTeardown\", BACKWARD, holder -> holder.feature.afterTeardown(FeaturesRunner.this, method, test));\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    protected void apply(String id, Direction direction, ThrowableConsumer<FeaturesLoader.Holder, Exception> consumer) {\n+        apply(id, direction == FORWARD ? loader.holders() : loader.reversedHolders(), consumer);\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    protected void apply(String id, Collection<FeaturesLoader.Holder> holders,\n+            ThrowableConsumer<FeaturesLoader.Holder, Exception> consumer) {\n+        log.trace(\"Invoke {} on features: {}\", () -> id, () -> formatFeatures(holders));\n+        Supplier<String> msg = () -> String.format(\"Error while invoking %s on features: %s\", id,\n+                formatFeatures(holders));\n+        var errors = new ArrayList<Throwable>();\n+        for (FeaturesLoader.Holder each : holders) {\n+            try {\n+                consumer.accept(each);\n+            } catch (AssumptionViolatedException cause) {\n+                log.debug(\"Test ignore by feature: {}\", each.type);\n+                throw cause;\n+            } catch (InterruptedException cause) {\n+                Thread.currentThread().interrupt();\n+                throw new AssertionError(msg.get(), cause);\n+            } catch (Throwable cause) { // NOSONAR\n+                log.debug(\"Error while invoking {} on feature: {}\", id, each.type);", "originalCommit": "883750e2d7b82b3fc62983fe7a4bcd6421bde1ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "590ef9480d8870459773808cecd872a801db39af", "url": "https://github.com/nuxeo/nuxeo/commit/590ef9480d8870459773808cecd872a801db39af", "message": "NXP-28993: Don't swallow exceptions during tests", "committedDate": "2020-04-24T12:36:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwMDY1Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3968#discussion_r414600656", "bodyText": "Typo", "author": "efge", "createdAt": "2020-04-24T14:02:42Z", "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/FeaturesRunner.java", "diffHunk": "@@ -133,7 +145,7 @@ public URL getTargetTestResource(String name) throws IOException {\n         if (annotation != null) {\n             configs.add(annotation);\n         }\n-        loader.apply(Direction.BACKWARD, holder -> {\n+        apply(\"getAnnontation\", BACKWARD, holder -> {", "originalCommit": "590ef9480d8870459773808cecd872a801db39af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwMjg2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3968#discussion_r414602863", "bodyText": "Could you also just rethrow immediately Error, like out of memory or stack overflow, instead of wrapping it?", "author": "efge", "createdAt": "2020-04-24T14:05:56Z", "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/FeaturesRunner.java", "diffHunk": "@@ -167,42 +179,108 @@ public URL getTargetTestResource(String name) throws IOException {\n     }\n \n     protected void initialize() throws Exception {\n+        log.trace(\"Invoke initialize on features\");\n         for (RunnerFeature each : getFeatures()) {\n             each.initialize(this);\n         }\n     }\n \n     protected void beforeRun() {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.beforeRun(FeaturesRunner.this));\n+        apply(\"beforeRun\", FORWARD, holder -> holder.feature.beforeRun(FeaturesRunner.this));\n     }\n \n     protected void beforeMethodRun(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.beforeMethodRun(FeaturesRunner.this, method, test));\n+        apply(\"beforeMethodRun\", FORWARD, holder -> holder.feature.beforeMethodRun(FeaturesRunner.this, method, test));\n     }\n \n     protected void afterMethodRun(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.afterMethodRun(FeaturesRunner.this, method, test));\n+        apply(\"afterMethodRun\", FORWARD, holder -> holder.feature.afterMethodRun(FeaturesRunner.this, method, test));\n     }\n \n     protected void afterRun() {\n-        loader.apply(Direction.BACKWARD, holder -> holder.feature.afterRun(FeaturesRunner.this));\n+        apply(\"afterRun\", BACKWARD, holder -> holder.feature.afterRun(FeaturesRunner.this));\n     }\n \n     protected void start() {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.start(FeaturesRunner.this));\n+        apply(\"start\", FORWARD, holder -> holder.feature.start(FeaturesRunner.this));\n     }\n \n     protected void stop() {\n-        loader.apply(Direction.BACKWARD, holder -> holder.feature.stop(FeaturesRunner.this));\n+        apply(\"stop\", BACKWARD, holder -> holder.feature.stop(FeaturesRunner.this));\n     }\n \n     protected void beforeSetup(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.beforeSetup(FeaturesRunner.this, method, test));\n+        apply(\"beforeSetup\", FORWARD, holder -> holder.feature.beforeSetup(FeaturesRunner.this, method, test));\n         injector.injectMembers(underTest);\n     }\n \n     protected void afterTeardown(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.BACKWARD, holder -> holder.feature.afterTeardown(FeaturesRunner.this, method, test));\n+        apply(\"afterTeardown\", BACKWARD, holder -> holder.feature.afterTeardown(FeaturesRunner.this, method, test));\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    protected void apply(String id, Direction direction, ThrowableConsumer<FeaturesLoader.Holder, Exception> consumer) {\n+        apply(id, direction == FORWARD ? loader.holders() : loader.reversedHolders(), consumer);\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    protected void apply(String id, Collection<FeaturesLoader.Holder> holders,\n+            ThrowableConsumer<FeaturesLoader.Holder, Exception> consumer) {\n+        log.trace(\"Invoke: {} on features: {}\", () -> id, () -> formatFeatures(holders));\n+        Supplier<String> msg = () -> String.format(\"Error while invoking %s on features: %s\", id,\n+                formatFeatures(holders));\n+        var errors = new ArrayList<Throwable>();\n+        for (FeaturesLoader.Holder each : holders) {\n+            try {\n+                consumer.accept(each);\n+            } catch (AssumptionViolatedException cause) {\n+                log.debug(\"Test ignored by the feature: {}\", each.type);\n+                throw cause;\n+            } catch (InterruptedException cause) {\n+                Thread.currentThread().interrupt();\n+                throw new AssertionError(msg.get(), cause);\n+            } catch (Throwable cause) { // NOSONAR", "originalCommit": "590ef9480d8870459773808cecd872a801db39af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwNTA2NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3968#discussion_r414605064", "bodyText": "I know it's a PITA but I really think InterruptedException should be dealt with specially here to reset the interrupted status.", "author": "efge", "createdAt": "2020-04-24T14:08:59Z", "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/FeaturesRunner.java", "diffHunk": "@@ -167,42 +179,108 @@ public URL getTargetTestResource(String name) throws IOException {\n     }\n \n     protected void initialize() throws Exception {\n+        log.trace(\"Invoke initialize on features\");\n         for (RunnerFeature each : getFeatures()) {\n             each.initialize(this);\n         }\n     }\n \n     protected void beforeRun() {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.beforeRun(FeaturesRunner.this));\n+        apply(\"beforeRun\", FORWARD, holder -> holder.feature.beforeRun(FeaturesRunner.this));\n     }\n \n     protected void beforeMethodRun(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.beforeMethodRun(FeaturesRunner.this, method, test));\n+        apply(\"beforeMethodRun\", FORWARD, holder -> holder.feature.beforeMethodRun(FeaturesRunner.this, method, test));\n     }\n \n     protected void afterMethodRun(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.afterMethodRun(FeaturesRunner.this, method, test));\n+        apply(\"afterMethodRun\", FORWARD, holder -> holder.feature.afterMethodRun(FeaturesRunner.this, method, test));\n     }\n \n     protected void afterRun() {\n-        loader.apply(Direction.BACKWARD, holder -> holder.feature.afterRun(FeaturesRunner.this));\n+        apply(\"afterRun\", BACKWARD, holder -> holder.feature.afterRun(FeaturesRunner.this));\n     }\n \n     protected void start() {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.start(FeaturesRunner.this));\n+        apply(\"start\", FORWARD, holder -> holder.feature.start(FeaturesRunner.this));\n     }\n \n     protected void stop() {\n-        loader.apply(Direction.BACKWARD, holder -> holder.feature.stop(FeaturesRunner.this));\n+        apply(\"stop\", BACKWARD, holder -> holder.feature.stop(FeaturesRunner.this));\n     }\n \n     protected void beforeSetup(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.beforeSetup(FeaturesRunner.this, method, test));\n+        apply(\"beforeSetup\", FORWARD, holder -> holder.feature.beforeSetup(FeaturesRunner.this, method, test));\n         injector.injectMembers(underTest);\n     }\n \n     protected void afterTeardown(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.BACKWARD, holder -> holder.feature.afterTeardown(FeaturesRunner.this, method, test));\n+        apply(\"afterTeardown\", BACKWARD, holder -> holder.feature.afterTeardown(FeaturesRunner.this, method, test));\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    protected void apply(String id, Direction direction, ThrowableConsumer<FeaturesLoader.Holder, Exception> consumer) {\n+        apply(id, direction == FORWARD ? loader.holders() : loader.reversedHolders(), consumer);\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    protected void apply(String id, Collection<FeaturesLoader.Holder> holders,\n+            ThrowableConsumer<FeaturesLoader.Holder, Exception> consumer) {\n+        log.trace(\"Invoke: {} on features: {}\", () -> id, () -> formatFeatures(holders));\n+        Supplier<String> msg = () -> String.format(\"Error while invoking %s on features: %s\", id,\n+                formatFeatures(holders));\n+        var errors = new ArrayList<Throwable>();\n+        for (FeaturesLoader.Holder each : holders) {\n+            try {\n+                consumer.accept(each);\n+            } catch (AssumptionViolatedException cause) {\n+                log.debug(\"Test ignored by the feature: {}\", each.type);\n+                throw cause;\n+            } catch (InterruptedException cause) {\n+                Thread.currentThread().interrupt();\n+                throw new AssertionError(msg.get(), cause);\n+            } catch (Throwable cause) { // NOSONAR\n+                log.debug(\"Error while invoking: {} on feature: {}\", id, each.type);\n+                errors.add(cause);\n+            }\n+        }\n+        if (!errors.isEmpty()) {\n+            var exception = new AssertionError(msg.get());\n+            errors.forEach(exception::addSuppressed);\n+            throw exception;\n+        }\n+    }\n+\n+    private String formatFeatures(Collection<FeaturesLoader.Holder> holders) {\n+        return holders.stream().map(h -> h.type.getName()).collect(Collectors.joining(\", \", \"[\", \"]\"));\n+    }\n+\n+    public void evaluateRunnable(ThrowableRunnable<Throwable> runnable, ThrowableRunnable<Throwable> finisher)\n+            throws Throwable {\n+        Throwable error = null;\n+        try {\n+            runnable.run();\n+        } catch (Throwable t) {", "originalCommit": "590ef9480d8870459773808cecd872a801db39af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwNjM4MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3968#discussion_r414606381", "bodyText": "each -> holder ? (I know this is old code)", "author": "efge", "createdAt": "2020-04-24T14:10:44Z", "path": "modules/runtime/nuxeo-runtime-test/src/main/java/org/nuxeo/runtime/test/runner/FeaturesRunner.java", "diffHunk": "@@ -167,42 +179,108 @@ public URL getTargetTestResource(String name) throws IOException {\n     }\n \n     protected void initialize() throws Exception {\n+        log.trace(\"Invoke initialize on features\");\n         for (RunnerFeature each : getFeatures()) {\n             each.initialize(this);\n         }\n     }\n \n     protected void beforeRun() {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.beforeRun(FeaturesRunner.this));\n+        apply(\"beforeRun\", FORWARD, holder -> holder.feature.beforeRun(FeaturesRunner.this));\n     }\n \n     protected void beforeMethodRun(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.beforeMethodRun(FeaturesRunner.this, method, test));\n+        apply(\"beforeMethodRun\", FORWARD, holder -> holder.feature.beforeMethodRun(FeaturesRunner.this, method, test));\n     }\n \n     protected void afterMethodRun(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.afterMethodRun(FeaturesRunner.this, method, test));\n+        apply(\"afterMethodRun\", FORWARD, holder -> holder.feature.afterMethodRun(FeaturesRunner.this, method, test));\n     }\n \n     protected void afterRun() {\n-        loader.apply(Direction.BACKWARD, holder -> holder.feature.afterRun(FeaturesRunner.this));\n+        apply(\"afterRun\", BACKWARD, holder -> holder.feature.afterRun(FeaturesRunner.this));\n     }\n \n     protected void start() {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.start(FeaturesRunner.this));\n+        apply(\"start\", FORWARD, holder -> holder.feature.start(FeaturesRunner.this));\n     }\n \n     protected void stop() {\n-        loader.apply(Direction.BACKWARD, holder -> holder.feature.stop(FeaturesRunner.this));\n+        apply(\"stop\", BACKWARD, holder -> holder.feature.stop(FeaturesRunner.this));\n     }\n \n     protected void beforeSetup(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.FORWARD, holder -> holder.feature.beforeSetup(FeaturesRunner.this, method, test));\n+        apply(\"beforeSetup\", FORWARD, holder -> holder.feature.beforeSetup(FeaturesRunner.this, method, test));\n         injector.injectMembers(underTest);\n     }\n \n     protected void afterTeardown(final FrameworkMethod method, final Object test) {\n-        loader.apply(Direction.BACKWARD, holder -> holder.feature.afterTeardown(FeaturesRunner.this, method, test));\n+        apply(\"afterTeardown\", BACKWARD, holder -> holder.feature.afterTeardown(FeaturesRunner.this, method, test));\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    protected void apply(String id, Direction direction, ThrowableConsumer<FeaturesLoader.Holder, Exception> consumer) {\n+        apply(id, direction == FORWARD ? loader.holders() : loader.reversedHolders(), consumer);\n+    }\n+\n+    /**\n+     * @since 11.1\n+     */\n+    protected void apply(String id, Collection<FeaturesLoader.Holder> holders,\n+            ThrowableConsumer<FeaturesLoader.Holder, Exception> consumer) {\n+        log.trace(\"Invoke: {} on features: {}\", () -> id, () -> formatFeatures(holders));\n+        Supplier<String> msg = () -> String.format(\"Error while invoking %s on features: %s\", id,\n+                formatFeatures(holders));\n+        var errors = new ArrayList<Throwable>();\n+        for (FeaturesLoader.Holder each : holders) {", "originalCommit": "590ef9480d8870459773808cecd872a801db39af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8480cb0dff06bb03e3e2c9e788022c67783e0c73", "url": "https://github.com/nuxeo/nuxeo/commit/8480cb0dff06bb03e3e2c9e788022c67783e0c73", "message": "NXP-28993: Don't swallow exceptions during tests", "committedDate": "2020-04-24T15:58:16Z", "type": "forcePushed"}, {"oid": "5a285aa41abcae4d34177026b237238f138f5715", "url": "https://github.com/nuxeo/nuxeo/commit/5a285aa41abcae4d34177026b237238f138f5715", "message": "NXP-28993: Don't swallow exceptions during tests", "committedDate": "2020-04-24T16:21:30Z", "type": "forcePushed"}, {"oid": "3556426f700cf45724e987c6fd00393e325d8c3c", "url": "https://github.com/nuxeo/nuxeo/commit/3556426f700cf45724e987c6fd00393e325d8c3c", "message": "NXP-28993: Don't swallow exceptions during tests", "committedDate": "2020-04-24T16:23:18Z", "type": "commit"}, {"oid": "3556426f700cf45724e987c6fd00393e325d8c3c", "url": "https://github.com/nuxeo/nuxeo/commit/3556426f700cf45724e987c6fd00393e325d8c3c", "message": "NXP-28993: Don't swallow exceptions during tests", "committedDate": "2020-04-24T16:23:18Z", "type": "forcePushed"}]}