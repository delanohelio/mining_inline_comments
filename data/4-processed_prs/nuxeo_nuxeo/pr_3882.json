{"pr_number": 3882, "pr_title": "fix-NXP-19849-explorer-multiple-contribs", "pr_createdAt": "2020-04-01T13:12:44Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3882", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwNDE2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r401704163", "bodyText": "Could be simplified to:\nString id = ei.getId();\ncomps.computeIfPresent(id, (k,v) -> v + 1);\ncomps.computeIfAbsent(id, k -> Integer.valueOf(0));", "author": "kevinleturc", "createdAt": "2020-04-01T15:27:47Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/SnapshotPersister.java", "diffHunk": "@@ -302,8 +303,16 @@ public void persistComponent(DistributionSnapshot snapshot, ComponentInfo ci, Co\n         for (ExtensionPointInfo epi : ci.getExtensionPoints()) {\n             createExtensionPointDoc(snapshot, session, label, epi, componentDoc);\n         }\n+        Map<String, Integer> comps = new HashMap<String, Integer>();\n         for (ExtensionInfo ei : ci.getExtensions()) {\n-            createContributionDoc(snapshot, session, label, ei, componentDoc);\n+            // handle multiple contributions to the same extension point\n+            String id = ei.getId();\n+            if (comps.containsKey(id)) {\n+                comps.put(id, comps.get(id) + 1);\n+            } else {\n+                comps.put(id, Integer.valueOf(0));\n+            }", "originalCommit": "88eabbeefcad092f239936ed34b6300e0e8cd568", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTEwMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r401725101", "bodyText": "done, thanks, any suggestion about the similar change in RuntimeSnapshot?", "author": "atchertchian", "createdAt": "2020-04-01T15:55:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwNDE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMxOTU4Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r402319586", "bodyText": "Not really as you need to change the id in one of the two cases.", "author": "kevinleturc", "createdAt": "2020-04-02T13:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwNDE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA3MTcyNg==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403071726", "bodyText": "FYI @kevinleturc see my review for simpler code here", "author": "efge", "createdAt": "2020-04-03T15:05:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwNDE2Mw=="}], "type": "inlineReview"}, {"oid": "d0fa2adadb9bd84641b83efcd8d0afe55b98003f", "url": "https://github.com/nuxeo/nuxeo/commit/d0fa2adadb9bd84641b83efcd8d0afe55b98003f", "message": "NXP-19849: order contribs so that it matches order in the original XML file", "committedDate": "2020-04-02T14:18:22Z", "type": "forcePushed"}, {"oid": "0c59ae5a422b768f0edb2dfffa3cb6ae97ef5a80", "url": "https://github.com/nuxeo/nuxeo/commit/0c59ae5a422b768f0edb2dfffa3cb6ae97ef5a80", "message": "NXP-19849: remove dupe test deployment, already handled by RepositoryElasticSearchFeature", "committedDate": "2020-04-02T16:10:35Z", "type": "forcePushed"}, {"oid": "92f76f93ef885b11e341639c7becc6949158af20", "url": "https://github.com/nuxeo/nuxeo/commit/92f76f93ef885b11e341639c7becc6949158af20", "message": "NXP-19849: remove dupe test deployment, already handled by RepositoryElasticSearchFeature", "committedDate": "2020-04-02T16:14:06Z", "type": "commit"}, {"oid": "d3354a2c1401f3f7f90be8ac4224cb71c7b5d279", "url": "https://github.com/nuxeo/nuxeo/commit/d3354a2c1401f3f7f90be8ac4224cb71c7b5d279", "message": "NXP-19849: cleanup deprecated test dependencies", "committedDate": "2020-04-02T16:14:06Z", "type": "commit"}, {"oid": "c9914c4474a79d963c3f6cfca7ee6ea4204ca7db", "url": "https://github.com/nuxeo/nuxeo/commit/c9914c4474a79d963c3f6cfca7ee6ea4204ca7db", "message": "NXP-19849: add explicit tests for the test runtime being introspected and persisted", "committedDate": "2020-04-02T16:14:06Z", "type": "commit"}, {"oid": "4e3b401539c7839a2361e49e6ce9c96a2b047c4a", "url": "https://github.com/nuxeo/nuxeo/commit/4e3b401539c7839a2361e49e6ce9c96a2b047c4a", "message": "NXP-19849: make changes revealed/needed by tests", "committedDate": "2020-04-02T16:14:06Z", "type": "commit"}, {"oid": "8f010f40ef424099c27fe078c3a9b1d57f201121", "url": "https://github.com/nuxeo/nuxeo/commit/8f010f40ef424099c27fe078c3a9b1d57f201121", "message": "NXP-19849: order contribs so that it matches order in the original XML file", "committedDate": "2020-04-02T16:14:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA1NjM1Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403056353", "bodyText": "Integer -> int", "author": "efge", "createdAt": "2020-04-03T14:43:57Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/ExtensionInfoDocAdapter.java", "diffHunk": "@@ -41,21 +41,27 @@\n \n public class ExtensionInfoDocAdapter extends BaseNuxeoArtifactDocAdapter implements ExtensionInfo {\n \n-    public static ExtensionInfoDocAdapter create(ExtensionInfo xi, CoreSession session, String containerPath) {\n+    public static ExtensionInfoDocAdapter create(ExtensionInfo xi, Integer index, CoreSession session,", "originalCommit": "e039164f873c719e99abf5b448164c5a2c1a9f32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA1Njc0OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403056749", "bodyText": "\"-\" + index is enough", "author": "efge", "createdAt": "2020-04-03T14:44:32Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/adapters/ExtensionInfoDocAdapter.java", "diffHunk": "@@ -41,21 +41,27 @@\n \n public class ExtensionInfoDocAdapter extends BaseNuxeoArtifactDocAdapter implements ExtensionInfo {\n \n-    public static ExtensionInfoDocAdapter create(ExtensionInfo xi, CoreSession session, String containerPath) {\n+    public static ExtensionInfoDocAdapter create(ExtensionInfo xi, Integer index, CoreSession session,\n+            String containerPath) {\n \n         DocumentModel doc = session.createDocumentModel(TYPE_NAME);\n \n-        String name = computeDocumentName(\"contrib-\" + xi.getId());\n+        String id = xi.getId();\n+        if (index > 0) {\n+            id += \"-\" + String.valueOf(index);", "originalCommit": "e039164f873c719e99abf5b448164c5a2c1a9f32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2MDgwOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403060809", "bodyText": "You should make the map a Map<String, AtomicInteger> then do\n                 if (comps.containsKey(id)) {\n                     int num = comps.get(id).incrementAndGet();\n                     id += \"-\" + num;\n                 } else {\n                     comps.put(id, new AtomicInteger());\n                 }", "author": "efge", "createdAt": "2020-04-03T14:50:34Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -170,8 +170,18 @@ protected void index() {\n                     extensionPoints.put(epi.getId(), epi);\n                 }\n \n+                Map<String, Integer> comps = new HashMap<String, Integer>();\n                 for (ExtensionInfo ei : cInfo.getExtensions()) {\n-                    contributions.put(ei.getId(), ei);\n+                    // handle multiple contributions to the same extension point\n+                    String id = ei.getId();\n+                    if (comps.containsKey(id)) {\n+                        Integer num = comps.get(id);\n+                        comps.put(id, num + 1);\n+                        id += \"-\" + String.valueOf(num + 1);\n+                    } else {\n+                        comps.put(id, Integer.valueOf(0));\n+                    }", "originalCommit": "e039164f873c719e99abf5b448164c5a2c1a9f32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2MTI0MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403061240", "bodyText": "new HashMap<>() (you should configure your IDE to warn you about this)", "author": "efge", "createdAt": "2020-04-03T14:51:11Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/RuntimeSnapshot.java", "diffHunk": "@@ -170,8 +170,18 @@ protected void index() {\n                     extensionPoints.put(epi.getId(), epi);\n                 }\n \n+                Map<String, Integer> comps = new HashMap<String, Integer>();", "originalCommit": "e039164f873c719e99abf5b448164c5a2c1a9f32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4MjA3OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403082079", "bodyText": "thanks, well i did import the eclipse formaters from this repo, are they being updated?", "author": "atchertchian", "createdAt": "2020-04-03T15:21:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2MTI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5NzkzMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403097931", "bodyText": "found the warn setup (outside of shared confs), please tell if i can setup eclipse to avoid adding these on its own!", "author": "atchertchian", "createdAt": "2020-04-03T15:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2MTI0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2MzE0OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403063148", "bodyText": "Integer -> int", "author": "efge", "createdAt": "2020-04-03T14:53:44Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/ExtensionInfoImpl.java", "diffHunk": "@@ -56,8 +56,12 @@\n \n     protected Object[] contribution;\n \n-    public ExtensionInfoImpl(ComponentInfoImpl component, String xpoint) {\n-        id = component.getId() + \"--\" + xpoint;\n+    public ExtensionInfoImpl(ComponentInfoImpl component, String xpoint, Integer index) {", "originalCommit": "e039164f873c719e99abf5b448164c5a2c1a9f32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NTMxMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403065310", "bodyText": "Simplify also, use AtomicInteger in the map then do just:\n                comps.computeIfAbsent(id, k -> new AtomicInteger(-1)).incrementAndGet();\n                ExtensionInfoImpl xtinfo = new ExtensionInfoImpl(component, xt.getExtensionPoint(), comps.get(id).get());\n\n(no need for computeIfPresent with this)", "author": "efge", "createdAt": "2020-04-03T14:56:40Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/introspection/ServerInfo.java", "diffHunk": "@@ -353,8 +353,13 @@ public static ServerInfo build(String name, String version) {\n             }\n \n             if (ri.getExtensions() != null) {\n+                Map<String, Integer> comps = new HashMap<String, Integer>();\n                 for (Extension xt : ri.getExtensions()) {\n-                    ExtensionInfoImpl xtinfo = new ExtensionInfoImpl(component, xt.getExtensionPoint());\n+                    // handle multiple contributions to the same extension point\n+                    String id = xt.getExtensionPoint();\n+                    comps.computeIfPresent(id, (k, v) -> v + 1);\n+                    comps.computeIfAbsent(id, k -> Integer.valueOf(0));\n+                    ExtensionInfoImpl xtinfo = new ExtensionInfoImpl(component, xt.getExtensionPoint(), comps.get(id));", "originalCommit": "e039164f873c719e99abf5b448164c5a2c1a9f32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NTgyOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403065829", "bodyText": "Same as above", "author": "efge", "createdAt": "2020-04-03T14:57:25Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/SnapshotPersister.java", "diffHunk": "@@ -305,8 +306,13 @@ public void persistComponent(DistributionSnapshot snapshot, ComponentInfo ci, Co\n         for (ExtensionPointInfo epi : ci.getExtensionPoints()) {\n             createExtensionPointDoc(snapshot, session, label, epi, componentDoc);\n         }\n+        Map<String, Integer> comps = new HashMap<String, Integer>();\n         for (ExtensionInfo ei : ci.getExtensions()) {\n-            createContributionDoc(snapshot, session, label, ei, componentDoc);\n+            // handle multiple contributions to the same extension point\n+            String id = ei.getId();\n+            comps.computeIfPresent(id, (k, v) -> v + 1);\n+            comps.computeIfAbsent(id, k -> Integer.valueOf(0));", "originalCommit": "e039164f873c719e99abf5b448164c5a2c1a9f32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NjEwMw==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403066103", "bodyText": "Integer -> int", "author": "efge", "createdAt": "2020-04-03T14:57:49Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/SnapshotPersister.java", "diffHunk": "@@ -315,8 +321,8 @@ public void persistComponent(DistributionSnapshot snapshot, ComponentInfo ci, Co\n     }\n \n     protected DocumentModel createContributionDoc(DistributionSnapshot snapshot, CoreSession session, String label,\n-            ExtensionInfo ei, DocumentModel parent) {\n-        return ExtensionInfoDocAdapter.create(ei, session, parent.getPathAsString()).getDoc();\n+            ExtensionInfo ei, Integer index, DocumentModel parent) {", "originalCommit": "e039164f873c719e99abf5b448164c5a2c1a9f32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NjQwMw==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403066403", "bodyText": "Not sure why you'd need to wrap point=\"queues\"", "author": "efge", "createdAt": "2020-04-03T14:58:16Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/resources/apidoc-works-test-contrib.xml", "diffHunk": "@@ -1,11 +1,22 @@\n <?xml version=\"1.0\"?>\n <component name=\"org.nuxeo.apidoc.test.works\" version=\"1.0\">\n \n-  <extension target=\"org.nuxeo.ecm.core.work.service\" point=\"queues\">\n+  <extension target=\"org.nuxeo.ecm.core.work.service\"\n+    point=\"queues\">", "originalCommit": "e039164f873c719e99abf5b448164c5a2c1a9f32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwODczOA==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403108738", "bodyText": "maybe i fixed the formatter in the meantime (?)", "author": "atchertchian", "createdAt": "2020-04-03T16:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NjQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2NzE2Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403067166", "bodyText": "You should make the constant start with a space to avoid + \" \"  in all uses.", "author": "efge", "createdAt": "2020-04-03T14:59:11Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/api/QueryHelper.java", "diffHunk": "@@ -32,6 +32,11 @@ private QueryHelper() {\n \n     public static final String NOT_DELETED = NXQL.ECM_ISTRASHED + \" = 0\";\n \n+    /**\n+     * @since 11.1\n+     */\n+    public static final String ORDER_BY_POS = \"ORDER BY ecm:pos\";", "originalCommit": "8f010f40ef424099c27fe078c3a9b1d57f201121", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2ODE0MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403068141", "bodyText": "Second comment is probably useless, the usage is obvious.", "author": "efge", "createdAt": "2020-04-03T15:00:38Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/TestSnapshotPersist.java", "diffHunk": "@@ -15,169 +15,219 @@\n  *\n  * Contributors:\n  *     Thierry Delprat\n+ *     Anahide Tchertchian\n  */\n package org.nuxeo.apidoc.test;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n \n+import java.io.ByteArrayInputStream;\n import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n import java.util.Collections;\n+import java.util.Comparator;\n import java.util.List;\n \n import javax.inject.Inject;\n \n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n+import org.apache.commons.lang.SystemUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.ComparisonFailure;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.nuxeo.apidoc.api.BundleGroupFlatTree;\n import org.nuxeo.apidoc.api.BundleGroupTreeHelper;\n-import org.nuxeo.apidoc.api.BundleInfo;\n-import org.nuxeo.apidoc.api.ComponentInfo;\n-import org.nuxeo.apidoc.api.ExtensionInfo;\n-import org.nuxeo.apidoc.api.ExtensionPointInfo;\n-import org.nuxeo.apidoc.api.ServiceInfo;\n+import org.nuxeo.apidoc.api.NuxeoArtifact;\n+import org.nuxeo.apidoc.api.OperationInfo;\n import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.common.utils.FileUtils;\n import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.runtime.api.Framework;\n import org.nuxeo.runtime.test.runner.Features;\n import org.nuxeo.runtime.test.runner.FeaturesRunner;\n \n @RunWith(FeaturesRunner.class)\n @Features({ RuntimeSnaphotFeature.class })\n public class TestSnapshotPersist {\n \n-    private static final Log log = LogFactory.getLog(TestSnapshotPersist.class);\n+    // helper for quicker update when running tests locally\n+    // public static final boolean UPDATE_REFERENCE_FILES_ON_FAILURE = true;", "originalCommit": "c9914c4474a79d963c3f6cfca7ee6ea4204ca7db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA2OTE3Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403069172", "bodyText": "Collections.sort(ops, Comparator.comparing(OperationInfo::getId))", "author": "efge", "createdAt": "2020-04-03T15:02:10Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/TestSnapshotPersist.java", "diffHunk": "@@ -15,169 +15,219 @@\n  *\n  * Contributors:\n  *     Thierry Delprat\n+ *     Anahide Tchertchian\n  */\n package org.nuxeo.apidoc.test;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n \n+import java.io.ByteArrayInputStream;\n import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n import java.util.Collections;\n+import java.util.Comparator;\n import java.util.List;\n \n import javax.inject.Inject;\n \n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n+import org.apache.commons.lang.SystemUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.ComparisonFailure;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.nuxeo.apidoc.api.BundleGroupFlatTree;\n import org.nuxeo.apidoc.api.BundleGroupTreeHelper;\n-import org.nuxeo.apidoc.api.BundleInfo;\n-import org.nuxeo.apidoc.api.ComponentInfo;\n-import org.nuxeo.apidoc.api.ExtensionInfo;\n-import org.nuxeo.apidoc.api.ExtensionPointInfo;\n-import org.nuxeo.apidoc.api.ServiceInfo;\n+import org.nuxeo.apidoc.api.NuxeoArtifact;\n+import org.nuxeo.apidoc.api.OperationInfo;\n import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.common.utils.FileUtils;\n import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.runtime.api.Framework;\n import org.nuxeo.runtime.test.runner.Features;\n import org.nuxeo.runtime.test.runner.FeaturesRunner;\n \n @RunWith(FeaturesRunner.class)\n @Features({ RuntimeSnaphotFeature.class })\n public class TestSnapshotPersist {\n \n-    private static final Log log = LogFactory.getLog(TestSnapshotPersist.class);\n+    // helper for quicker update when running tests locally\n+    // public static final boolean UPDATE_REFERENCE_FILES_ON_FAILURE = true;\n+    public static final boolean UPDATE_REFERENCE_FILES_ON_FAILURE = false;\n \n     @Inject\n     protected CoreSession session;\n \n     @Inject\n     protected SnapshotManager snapshotManager;\n \n-    protected String dumpSnapshot(DistributionSnapshot snap) {\n-        StringBuilder sb = new StringBuilder();\n+    @Test\n+    public void testSnapshot() throws IOException {\n+        DistributionSnapshot snapshot = snapshotManager.getRuntimeSnapshot();\n+        checkDistributionSnapshot(snapshot);\n+    }\n \n-        BundleGroupTreeHelper bgth = new BundleGroupTreeHelper(snap);\n+    @Test\n+    public void testPersist() throws IOException {\n+        DistributionSnapshot snapshot = snapshotManager.persistRuntimeSnapshot(session);\n+        assertNotNull(snapshot);\n+        checkDistributionSnapshot(snapshot);\n+\n+        DistributionSnapshot persisted = snapshotManager.getSnapshot(snapshot.getKey(), session);\n+        assertNotNull(persisted);\n+        checkDistributionSnapshot(persisted);\n+    }\n+\n+    protected void checkDistributionSnapshot(DistributionSnapshot snapshot) throws IOException {\n+        checkBundleGroups(snapshot);\n+        checkBundles(snapshot);\n+        checkComponents(snapshot);\n+        checkServices(snapshot);\n+        checkExtensionPoints(snapshot);\n+        checkContributions(snapshot);\n+        checkOperations(snapshot);\n+    }\n+\n+    protected void checkBundleGroups(DistributionSnapshot snapshot) throws IOException {\n+        StringBuilder sb = new StringBuilder();\n+        BundleGroupTreeHelper bgth = new BundleGroupTreeHelper(snapshot);\n         List<BundleGroupFlatTree> tree = bgth.getBundleGroupTree();\n         for (BundleGroupFlatTree info : tree) {\n-            String pad = \" \";\n-            for (int i = 0; i <= info.getLevel(); i++) {\n-                pad += \" \";\n-            }\n-            sb.append(pad)\n-            .append(\"- \")\n-            .append(info.getGroup().getName())\n-            .append(\"(\")\n-            .append(info.getGroup().getId())\n-            .append(\")\");\n-            sb.append(\" *** \");\n-            sb.append(info.getGroup().getHierarchyPath());\n-            sb.append(\"\\n\");\n+            sb.append(String.format(\"%s- %s (%s) *** %s\\n\", //\n+                    StringUtils.repeat(\"  \", info.getLevel()), //\n+                    info.getGroup().getName(), //\n+                    info.getGroup().getId(), //\n+                    info.getGroup().getHierarchyPath()) //\n+            );\n         }\n+        checkContentEquals(\"apidoc_snapshot/bundlegroups.txt\", sb.toString());\n+    }\n \n-        List<String> bids = snap.getBundleIds();\n-        List<String> cids = snap.getComponentIds();\n-        List<String> sids = snap.getServiceIds();\n-        List<String> epids = snap.getExtensionPointIds();\n-        List<String> exids = snap.getContributionIds();\n+    protected String represent(NuxeoArtifact artifact) {\n+        return String.format(\"%s: %s *** %s\\n\", //\n+                artifact.getArtifactType(), //\n+                artifact.getId(), //\n+                artifact.getHierarchyPath() //\n+        );\n+    }\n \n+    protected void checkBundles(DistributionSnapshot snapshot) throws IOException {\n+        List<String> bids = snapshot.getBundleIds();\n         Collections.sort(bids);\n-        Collections.sort(cids);\n-        Collections.sort(sids);\n-        Collections.sort(epids);\n-        Collections.sort(exids);\n \n+        StringBuilder sb = new StringBuilder();\n         for (String bid : bids) {\n-            sb.append(\"bundle : \").append(bid);\n-            BundleInfo bi = snap.getBundle(bid);\n-            sb.append(\" *** \");\n-            sb.append(bi.getHierarchyPath());\n-            sb.append(\"\\n\");\n+            sb.append(represent(snapshot.getBundle(bid)));\n         }\n \n+        checkContentEquals(\"apidoc_snapshot/bundles.txt\", sb.toString());\n+    }\n+\n+    protected void checkComponents(DistributionSnapshot snapshot) throws IOException {\n+        List<String> cids = snapshot.getComponentIds();\n+        Collections.sort(cids);\n+\n+        StringBuilder sb = new StringBuilder();\n         for (String cid : cids) {\n-            sb.append(\"component : \").append(cid);\n-            sb.append(\" *** \");\n-            ComponentInfo ci = snap.getComponent(cid);\n-            sb.append(ci.getHierarchyPath());\n-            sb.append(\"\\n\");\n+            sb.append(represent(snapshot.getComponent(cid)));\n         }\n \n+        checkContentEquals(\"apidoc_snapshot/components.txt\", sb.toString());\n+    }\n+\n+    protected void checkServices(DistributionSnapshot snapshot) throws IOException {\n+        List<String> sids = snapshot.getServiceIds();\n+        Collections.sort(sids);\n+\n+        StringBuilder sb = new StringBuilder();\n         for (String sid : sids) {\n-            sb.append(\"service : \").append(sid);\n-            sb.append(\" *** \");\n-            ServiceInfo si = snap.getService(sid);\n-            sb.append(si.getHierarchyPath());\n-            sb.append(\"\\n\");\n+            sb.append(represent(snapshot.getService(sid)));\n         }\n \n+        checkContentEquals(\"apidoc_snapshot/services.txt\", sb.toString());\n+    }\n+\n+    protected void checkExtensionPoints(DistributionSnapshot snapshot) throws IOException {\n+        List<String> epids = snapshot.getExtensionPointIds();\n+        Collections.sort(epids);\n+\n+        StringBuilder sb = new StringBuilder();\n         for (String epid : epids) {\n-            sb.append(\"extensionPoint : \").append(epid);\n-            sb.append(\" *** \");\n-            ExtensionPointInfo epi = snap.getExtensionPoint(epid);\n-            sb.append(epi.getHierarchyPath());\n-            sb.append(\"\\n\");\n+            sb.append(represent(snapshot.getExtensionPoint(epid)));\n         }\n \n+        checkContentEquals(\"apidoc_snapshot/extensionpoints.txt\", sb.toString());\n+    }\n+\n+    protected void checkContributions(DistributionSnapshot snapshot) throws IOException {\n+        List<String> exids = snapshot.getContributionIds();\n+        Collections.sort(exids);\n+\n+        StringBuilder sb = new StringBuilder();\n         for (String exid : exids) {\n-            sb.append(\"contribution : \").append(exid);\n-            sb.append(\" *** \");\n-            ExtensionInfo exi = snap.getContribution(exid);\n-            sb.append(exi.getHierarchyPath());\n-            sb.append(\"\\n\");\n+            sb.append(represent(snapshot.getContribution(exid)));\n         }\n-        return sb.toString();\n+\n+        checkContentEquals(\"apidoc_snapshot/contributions.txt\", sb.toString());\n     }\n \n-    @Test\n-    public void testPersist() throws Exception {\n-        DistributionSnapshot runtimeSnapshot = snapshotManager.getRuntimeSnapshot();\n-        String rtDump = dumpSnapshot(runtimeSnapshot);\n-\n-        DistributionSnapshot persistent = snapshotManager.persistRuntimeSnapshot(session);\n-        assertNotNull(persistent);\n-\n-        persistent = snapshotManager.getSnapshot(runtimeSnapshot.getKey(), session);\n-        assertNotNull(persistent);\n-\n-        // DocumentModelList docs = session.query(\"select * from NXBundle\");\n-        // for (DocumentModel doc : docs) {\n-        // log.info(\"Bundle : \" + doc.getTitle() + \" --- \" +\n-        // doc.getPathAsString());\n-        // }\n-        String pDump = dumpSnapshot(persistent);\n-\n-        // String[] rtDumpLines = rtDump.trim().split(\"\\n\");\n-        // String[] pDumpLines = pDump.trim().split(\"\\n\");\n-        // assertEquals(rtDumpLines.length, pDumpLines.length);\n-        // for (int i = 0; i < rtDumpLines.length; i++) {\n-        // assertEquals(rtDumpLines[i], pDumpLines[i]);\n-        // }\n-        assertEquals(rtDump, pDump);\n+    protected void checkOperations(DistributionSnapshot snapshot) throws IOException {\n+        List<OperationInfo> ops = snapshot.getOperations();\n+        Collections.sort(ops, new Comparator<OperationInfo>() {", "originalCommit": "c9914c4474a79d963c3f6cfca7ee6ea4204ca7db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA3MDQwMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403070402", "bodyText": "ops.forEach(op -> sb.append(represent(op)))", "author": "efge", "createdAt": "2020-04-03T15:03:56Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/TestSnapshotPersist.java", "diffHunk": "@@ -15,169 +15,219 @@\n  *\n  * Contributors:\n  *     Thierry Delprat\n+ *     Anahide Tchertchian\n  */\n package org.nuxeo.apidoc.test;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n \n+import java.io.ByteArrayInputStream;\n import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n import java.util.Collections;\n+import java.util.Comparator;\n import java.util.List;\n \n import javax.inject.Inject;\n \n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n+import org.apache.commons.lang.SystemUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.ComparisonFailure;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.nuxeo.apidoc.api.BundleGroupFlatTree;\n import org.nuxeo.apidoc.api.BundleGroupTreeHelper;\n-import org.nuxeo.apidoc.api.BundleInfo;\n-import org.nuxeo.apidoc.api.ComponentInfo;\n-import org.nuxeo.apidoc.api.ExtensionInfo;\n-import org.nuxeo.apidoc.api.ExtensionPointInfo;\n-import org.nuxeo.apidoc.api.ServiceInfo;\n+import org.nuxeo.apidoc.api.NuxeoArtifact;\n+import org.nuxeo.apidoc.api.OperationInfo;\n import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.common.utils.FileUtils;\n import org.nuxeo.ecm.core.api.CoreSession;\n-import org.nuxeo.ecm.core.api.DocumentModel;\n-import org.nuxeo.runtime.api.Framework;\n import org.nuxeo.runtime.test.runner.Features;\n import org.nuxeo.runtime.test.runner.FeaturesRunner;\n \n @RunWith(FeaturesRunner.class)\n @Features({ RuntimeSnaphotFeature.class })\n public class TestSnapshotPersist {\n \n-    private static final Log log = LogFactory.getLog(TestSnapshotPersist.class);\n+    // helper for quicker update when running tests locally\n+    // public static final boolean UPDATE_REFERENCE_FILES_ON_FAILURE = true;\n+    public static final boolean UPDATE_REFERENCE_FILES_ON_FAILURE = false;\n \n     @Inject\n     protected CoreSession session;\n \n     @Inject\n     protected SnapshotManager snapshotManager;\n \n-    protected String dumpSnapshot(DistributionSnapshot snap) {\n-        StringBuilder sb = new StringBuilder();\n+    @Test\n+    public void testSnapshot() throws IOException {\n+        DistributionSnapshot snapshot = snapshotManager.getRuntimeSnapshot();\n+        checkDistributionSnapshot(snapshot);\n+    }\n \n-        BundleGroupTreeHelper bgth = new BundleGroupTreeHelper(snap);\n+    @Test\n+    public void testPersist() throws IOException {\n+        DistributionSnapshot snapshot = snapshotManager.persistRuntimeSnapshot(session);\n+        assertNotNull(snapshot);\n+        checkDistributionSnapshot(snapshot);\n+\n+        DistributionSnapshot persisted = snapshotManager.getSnapshot(snapshot.getKey(), session);\n+        assertNotNull(persisted);\n+        checkDistributionSnapshot(persisted);\n+    }\n+\n+    protected void checkDistributionSnapshot(DistributionSnapshot snapshot) throws IOException {\n+        checkBundleGroups(snapshot);\n+        checkBundles(snapshot);\n+        checkComponents(snapshot);\n+        checkServices(snapshot);\n+        checkExtensionPoints(snapshot);\n+        checkContributions(snapshot);\n+        checkOperations(snapshot);\n+    }\n+\n+    protected void checkBundleGroups(DistributionSnapshot snapshot) throws IOException {\n+        StringBuilder sb = new StringBuilder();\n+        BundleGroupTreeHelper bgth = new BundleGroupTreeHelper(snapshot);\n         List<BundleGroupFlatTree> tree = bgth.getBundleGroupTree();\n         for (BundleGroupFlatTree info : tree) {\n-            String pad = \" \";\n-            for (int i = 0; i <= info.getLevel(); i++) {\n-                pad += \" \";\n-            }\n-            sb.append(pad)\n-            .append(\"- \")\n-            .append(info.getGroup().getName())\n-            .append(\"(\")\n-            .append(info.getGroup().getId())\n-            .append(\")\");\n-            sb.append(\" *** \");\n-            sb.append(info.getGroup().getHierarchyPath());\n-            sb.append(\"\\n\");\n+            sb.append(String.format(\"%s- %s (%s) *** %s\\n\", //\n+                    StringUtils.repeat(\"  \", info.getLevel()), //\n+                    info.getGroup().getName(), //\n+                    info.getGroup().getId(), //\n+                    info.getGroup().getHierarchyPath()) //\n+            );\n         }\n+        checkContentEquals(\"apidoc_snapshot/bundlegroups.txt\", sb.toString());\n+    }\n \n-        List<String> bids = snap.getBundleIds();\n-        List<String> cids = snap.getComponentIds();\n-        List<String> sids = snap.getServiceIds();\n-        List<String> epids = snap.getExtensionPointIds();\n-        List<String> exids = snap.getContributionIds();\n+    protected String represent(NuxeoArtifact artifact) {\n+        return String.format(\"%s: %s *** %s\\n\", //\n+                artifact.getArtifactType(), //\n+                artifact.getId(), //\n+                artifact.getHierarchyPath() //\n+        );\n+    }\n \n+    protected void checkBundles(DistributionSnapshot snapshot) throws IOException {\n+        List<String> bids = snapshot.getBundleIds();\n         Collections.sort(bids);\n-        Collections.sort(cids);\n-        Collections.sort(sids);\n-        Collections.sort(epids);\n-        Collections.sort(exids);\n \n+        StringBuilder sb = new StringBuilder();\n         for (String bid : bids) {\n-            sb.append(\"bundle : \").append(bid);\n-            BundleInfo bi = snap.getBundle(bid);\n-            sb.append(\" *** \");\n-            sb.append(bi.getHierarchyPath());\n-            sb.append(\"\\n\");\n+            sb.append(represent(snapshot.getBundle(bid)));\n         }\n \n+        checkContentEquals(\"apidoc_snapshot/bundles.txt\", sb.toString());\n+    }\n+\n+    protected void checkComponents(DistributionSnapshot snapshot) throws IOException {\n+        List<String> cids = snapshot.getComponentIds();\n+        Collections.sort(cids);\n+\n+        StringBuilder sb = new StringBuilder();\n         for (String cid : cids) {\n-            sb.append(\"component : \").append(cid);\n-            sb.append(\" *** \");\n-            ComponentInfo ci = snap.getComponent(cid);\n-            sb.append(ci.getHierarchyPath());\n-            sb.append(\"\\n\");\n+            sb.append(represent(snapshot.getComponent(cid)));\n         }\n \n+        checkContentEquals(\"apidoc_snapshot/components.txt\", sb.toString());\n+    }\n+\n+    protected void checkServices(DistributionSnapshot snapshot) throws IOException {\n+        List<String> sids = snapshot.getServiceIds();\n+        Collections.sort(sids);\n+\n+        StringBuilder sb = new StringBuilder();\n         for (String sid : sids) {\n-            sb.append(\"service : \").append(sid);\n-            sb.append(\" *** \");\n-            ServiceInfo si = snap.getService(sid);\n-            sb.append(si.getHierarchyPath());\n-            sb.append(\"\\n\");\n+            sb.append(represent(snapshot.getService(sid)));\n         }\n \n+        checkContentEquals(\"apidoc_snapshot/services.txt\", sb.toString());\n+    }\n+\n+    protected void checkExtensionPoints(DistributionSnapshot snapshot) throws IOException {\n+        List<String> epids = snapshot.getExtensionPointIds();\n+        Collections.sort(epids);\n+\n+        StringBuilder sb = new StringBuilder();\n         for (String epid : epids) {\n-            sb.append(\"extensionPoint : \").append(epid);\n-            sb.append(\" *** \");\n-            ExtensionPointInfo epi = snap.getExtensionPoint(epid);\n-            sb.append(epi.getHierarchyPath());\n-            sb.append(\"\\n\");\n+            sb.append(represent(snapshot.getExtensionPoint(epid)));\n         }\n \n+        checkContentEquals(\"apidoc_snapshot/extensionpoints.txt\", sb.toString());\n+    }\n+\n+    protected void checkContributions(DistributionSnapshot snapshot) throws IOException {\n+        List<String> exids = snapshot.getContributionIds();\n+        Collections.sort(exids);\n+\n+        StringBuilder sb = new StringBuilder();\n         for (String exid : exids) {\n-            sb.append(\"contribution : \").append(exid);\n-            sb.append(\" *** \");\n-            ExtensionInfo exi = snap.getContribution(exid);\n-            sb.append(exi.getHierarchyPath());\n-            sb.append(\"\\n\");\n+            sb.append(represent(snapshot.getContribution(exid)));\n         }\n-        return sb.toString();\n+\n+        checkContentEquals(\"apidoc_snapshot/contributions.txt\", sb.toString());\n     }\n \n-    @Test\n-    public void testPersist() throws Exception {\n-        DistributionSnapshot runtimeSnapshot = snapshotManager.getRuntimeSnapshot();\n-        String rtDump = dumpSnapshot(runtimeSnapshot);\n-\n-        DistributionSnapshot persistent = snapshotManager.persistRuntimeSnapshot(session);\n-        assertNotNull(persistent);\n-\n-        persistent = snapshotManager.getSnapshot(runtimeSnapshot.getKey(), session);\n-        assertNotNull(persistent);\n-\n-        // DocumentModelList docs = session.query(\"select * from NXBundle\");\n-        // for (DocumentModel doc : docs) {\n-        // log.info(\"Bundle : \" + doc.getTitle() + \" --- \" +\n-        // doc.getPathAsString());\n-        // }\n-        String pDump = dumpSnapshot(persistent);\n-\n-        // String[] rtDumpLines = rtDump.trim().split(\"\\n\");\n-        // String[] pDumpLines = pDump.trim().split(\"\\n\");\n-        // assertEquals(rtDumpLines.length, pDumpLines.length);\n-        // for (int i = 0; i < rtDumpLines.length; i++) {\n-        // assertEquals(rtDumpLines[i], pDumpLines[i]);\n-        // }\n-        assertEquals(rtDump, pDump);\n+    protected void checkOperations(DistributionSnapshot snapshot) throws IOException {\n+        List<OperationInfo> ops = snapshot.getOperations();\n+        Collections.sort(ops, new Comparator<OperationInfo>() {\n+            @Override\n+            public int compare(OperationInfo arg0, OperationInfo arg1) {\n+                return arg0.getId().compareTo(arg1.getId());\n+            }\n+        });\n \n+        StringBuilder sb = new StringBuilder();\n+        for (OperationInfo op : ops) {\n+            sb.append(represent(op));", "originalCommit": "c9914c4474a79d963c3f6cfca7ee6ea4204ca7db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ed485431be78fc33d5db9e32f2589e1b155d9888", "url": "https://github.com/nuxeo/nuxeo/commit/ed485431be78fc33d5db9e32f2589e1b155d9888", "message": "NXP-19849: order contribs so that it matches order in the original XML file", "committedDate": "2020-04-03T15:38:43Z", "type": "forcePushed"}, {"oid": "8033a39575170ba1e83f35b6cb2ac42a7e70860d", "url": "https://github.com/nuxeo/nuxeo/commit/8033a39575170ba1e83f35b6cb2ac42a7e70860d", "message": "NXP-19849: handle multiple contributions to the same extension point in the same component", "committedDate": "2020-04-03T16:09:53Z", "type": "commit"}, {"oid": "3db25078152a1d12a1653ad1cd65518501532c07", "url": "https://github.com/nuxeo/nuxeo/commit/3db25078152a1d12a1653ad1cd65518501532c07", "message": "NXP-19849: order contribs so that it matches order in the original XML file", "committedDate": "2020-04-03T16:09:53Z", "type": "commit"}, {"oid": "3db25078152a1d12a1653ad1cd65518501532c07", "url": "https://github.com/nuxeo/nuxeo/commit/3db25078152a1d12a1653ad1cd65518501532c07", "message": "NXP-19849: order contribs so that it matches order in the original XML file", "committedDate": "2020-04-03T16:09:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3NDQ1MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3882#discussion_r403974451", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Features({ RuntimeSnaphotFeature.class })\n          \n          \n            \n            @Features(RuntimeSnaphotFeature.class)", "author": "troger", "createdAt": "2020-04-06T10:06:24Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/TestExportImport.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (C) Copyright 2006-2016 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Thierry Delprat\n+ */\n+package org.nuxeo.apidoc.test;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.apidoc.snapshot.DistributionSnapshot;\n+import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+@RunWith(FeaturesRunner.class)\n+@Features({ RuntimeSnaphotFeature.class })", "originalCommit": "3db25078152a1d12a1653ad1cd65518501532c07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "58f3fcb18036f527443176280e523df820fcb2b3", "url": "https://github.com/nuxeo/nuxeo/commit/58f3fcb18036f527443176280e523df820fcb2b3", "message": "NXP-19849: cleanup", "committedDate": "2020-04-06T10:16:59Z", "type": "commit"}]}