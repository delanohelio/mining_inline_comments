{"pr_number": 4133, "pr_title": "NXP-29050 explorer security // hide current distrib", "pr_createdAt": "2020-06-09T16:28:57Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4133", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwNTAyNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r437905025", "bodyText": "Should we make doLogin static too? I think it could be interesting to have the same kind of method (static or not) for doLogin and doLogout, wdyt?", "author": "kevinleturc", "createdAt": "2020-06-10T07:10:14Z", "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/explorer/AbstractExplorerTest.java", "diffHunk": "@@ -53,24 +57,40 @@\n  */\n public abstract class AbstractExplorerTest extends AbstractTest {\n \n+    protected static String READER_USERNAME = TEST_USERNAME;\n+\n+    protected static String MANAGER_USERNAME = \"apidocmanager\";\n+\n+    public static LoginPage getLoginPageStatic() {\n+        return get(NUXEO_URL + \"/logout\", LoginPage.class);\n+    }\n+\n     protected void doLogin() {\n-        getLoginPage().login(TEST_USERNAME, TEST_PASSWORD);\n+        getLoginPageStatic().login(TEST_USERNAME, TEST_PASSWORD);\n+    }\n+\n+    protected static void loginAsAdmin() {\n+        getLoginPageStatic().login(ADMINISTRATOR, ADMINISTRATOR);\n     }\n \n-    protected void doLogout() {\n+    protected static void doLogout() {\n         // logout avoiding JS error check\n         driver.get(NUXEO_URL + \"/logout\");\n     }", "originalCommit": "c5c86ef58edc7359abbe8abdc2cfc62fd05979e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyMTAwMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r437921000", "bodyText": "Well i initially made it static, and then made it unstatic to override it in the ApidocManager test extending the admin one...", "author": "atchertchian", "createdAt": "2020-06-10T07:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwNTAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0NzY4Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r438247686", "bodyText": "Will rework this anyway but in the current code logics, the doLogin is interesting to override (while logout does not depend on the user)", "author": "atchertchian", "createdAt": "2020-06-10T16:15:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwNTAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwNjU4NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r437906584", "bodyText": "Could it be interesting to have a RestHelper#createUserIfDoesntExist and the equivalent for the group?", "author": "kevinleturc", "createdAt": "2020-06-10T07:13:28Z", "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/explorer/ITExplorerApidocManagerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.functionaltests.explorer;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.nuxeo.apidoc.security.SecurityHelper;\n+import org.nuxeo.functionaltests.RestHelper;\n+import org.nuxeo.functionaltests.explorer.pages.DistribAdminPage;\n+import org.nuxeo.functionaltests.explorer.pages.ExplorerHomePage;\n+import org.nuxeo.functionaltests.explorer.pages.UploadFragment;\n+\n+/**\n+ * Tests features for {@link SecurityHelper#APIDOC_MANAGERS_GROUP} members.\n+ *\n+ * @since 11.1\n+ */\n+public class ITExplorerApidocManagerTest extends ITExplorerAdminTest {\n+\n+    @Override\n+    @Before\n+    public void before() {\n+        if (!RestHelper.groupExists(SecurityHelper.DEFAULT_APIDOC_MANAGERS_GROUP)) {\n+            RestHelper.createGroup(SecurityHelper.DEFAULT_APIDOC_MANAGERS_GROUP, \"Apidoc Managers\");\n+        }\n+        if (!RestHelper.userExists(MANAGER_USERNAME)) {\n+            RestHelper.createUser(MANAGER_USERNAME, TEST_PASSWORD, null, null, null, null,\n+                    SecurityHelper.DEFAULT_APIDOC_MANAGERS_GROUP);\n+        }", "originalCommit": "c5c86ef58edc7359abbe8abdc2cfc62fd05979e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyMjA5Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r437922097", "bodyText": "Indeed, i finally made that change because it was fed up of adding and removing the line \"RestHelper.removeUser\" whenever i ended tests abruptly locally (typically killing FF).\nI can do this change if you want.", "author": "atchertchian", "createdAt": "2020-06-10T07:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwNjU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyNzI2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r438027263", "bodyText": "done with createUserIfItDoesNotExist, same for groups", "author": "atchertchian", "createdAt": "2020-06-10T10:37:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwNjU4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwOTU0Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r437909546", "bodyText": "Why don't we need a privileged session anymore? Maybe we should move doPrivileged in createRoot?", "author": "kevinleturc", "createdAt": "2020-06-10T07:19:37Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/repository/SnapshotPersister.java", "diffHunk": "@@ -69,33 +77,49 @@\n     /** @since 11.1 */\n     public static final String PACKAGE_ROOT_NAME = \"Packages\";\n \n-    public static final String Read_Grp = \"Everyone\";\n-\n-    public static final String Write_Grp = \"members\";\n+    /** @since 11.1 */\n+    public static final String ROOT_TYE_NAME = \"Workspace\";\n \n     public DocumentModel getSubRoot(CoreSession session, DocumentModel root, String name) {\n-\n         DocumentRef rootRef = new PathRef(root.getPathAsString() + name);\n         if (session.exists(rootRef)) {\n             return session.getDocument(rootRef);\n         }\n-        UnrestrictedRootCreator creator = new UnrestrictedRootCreator(session, root.getPathAsString(), name, false);\n-        creator.runUnrestricted();\n-        // flush caches\n-        session.save();\n-        return session.getDocument(creator.getRootRef());\n+        return createRoot(session, root.getPathAsString(), name, false);", "originalCommit": "c5c86ef58edc7359abbe8abdc2cfc62fd05979e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyMzEwMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r437923101", "bodyText": "Because the root should be created with the necessary permissions to create subfolders now, i explained this change in the jira ticket.", "author": "atchertchian", "createdAt": "2020-06-10T07:41:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwOTU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxMDUyMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r437910521", "bodyText": "Could it be interesting to throw a NuxeoException with an HTTP bad request status?", "author": "kevinleturc", "createdAt": "2020-06-10T07:21:24Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "diffHunk": "@@ -104,6 +100,9 @@\n \n     @Override\n     public DistributionSnapshot getRuntimeSnapshot() {\n+        if (isSiteMode()) {\n+            throw new RuntimeException(\"Live runtime cannot be snapshotted.\");", "originalCommit": "c5c86ef58edc7359abbe8abdc2cfc62fd05979e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyNDY0MA==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r437924640", "bodyText": "I indeed hesitated with NuxeoException, but it's from core-api, and this is not really a core issue. I would have picked a (Nuxeo)RuntimeException if there was one, otherwise maybe it makes sense to create a specific ApidocException, wdyt?\nAnd this is low level now, so i don't see why we'd want to link this to HTTP unless that's a common practice in that kind of use case (?)", "author": "atchertchian", "createdAt": "2020-06-10T07:44:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxMDUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAzNTE0OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r438035149", "bodyText": "We use NuxeoException for our generic runtime exception if it's in the available dependencies. In the pure runtime, we have our RuntimeServiceException", "author": "efge", "createdAt": "2020-06-10T10:54:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxMDUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAzODc5Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r438038797", "bodyText": "I thought this method could be called on an HTTP request if it's not the case no need to have an HTTP status indeed.\nThe ApidocException could be interesting if we want to do something with it. If it's just about not using the generic RuntimeException, the RuntimeServiceException should be fine.", "author": "kevinleturc", "createdAt": "2020-06-10T11:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxMDUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI0ODA2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r438248068", "bodyText": "alright, will throw another exception, will do this after i'm done with ftest of site mode (taking more time than i expected, still wip_", "author": "atchertchian", "createdAt": "2020-06-10T16:15:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxMDUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxMTcxNg==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r437911716", "bodyText": "Shouldn't we remove the key == null constraint? Because we throw an exception if the site mode is not enabled which change a bit the behavior of this method.", "author": "kevinleturc", "createdAt": "2020-06-10T07:23:45Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-core/src/main/java/org/nuxeo/apidoc/snapshot/SnapshotManagerComponent.java", "diffHunk": "@@ -116,11 +115,11 @@ public DistributionSnapshot getRuntimeSnapshot() {\n \n     @Override\n     public DistributionSnapshot getSnapshot(String key, CoreSession session) {\n-        if (key == null || RUNTIME.equals(key) || RUNTIME_ADM.equals(key)) {\n+        if (key == null || RuntimeSnapshot.LIVE_ALIASES.contains(key)) {", "originalCommit": "c5c86ef58edc7359abbe8abdc2cfc62fd05979e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyNTA0Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r437925047", "bodyText": "I'm ok with that \ud83d\udc4d , this use case makes things a bit too complicated indeed", "author": "atchertchian", "createdAt": "2020-06-10T07:44:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxMTcxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxMjUzMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r437912531", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                SnapshotManager manager;\n          \n          \n            \n                protected SnapshotManager manager;", "author": "kevinleturc", "createdAt": "2020-06-10T07:25:19Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/TestBrowseSiteMode.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.test;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeSnaphotFeature.class)\n+public class TestBrowseSiteMode {\n+\n+    @Inject\n+    SnapshotManager manager;", "originalCommit": "c5c86ef58edc7359abbe8abdc2cfc62fd05979e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxNzQyNQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r437917425", "bodyText": "You can do something like below:\n            return snaps.stream()\n                        .filter(s -> s.getVersion().equals(finalDistributionId))\n                        .findFirst()\n                        .map(distribution -> ctx.newObject(RedirectResource.TYPE, finalDistributionId,\n                                distribution.getKey()))\n                        .orElseGet(() -> ctx.newObject(Resource404.TYPE));", "author": "kevinleturc", "createdAt": "2020-06-10T07:34:35Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-webengine/src/main/java/org/nuxeo/apidoc/browse/Distribution.java", "diffHunk": "@@ -175,61 +184,67 @@ public Resource getLatest() {\n                                                                                .startsWith(\"nuxeo platform\"))\n                                                            .findFirst();\n \n-        String latest = ApiBrowserConstants.DISTRIBUTION_ALIAS_CURRENT;\n+        String latest = SnapshotManager.DISTRIBUTION_ALIAS_CURRENT;\n         if (distribution.isPresent()) {\n             latest = distribution.get().getKey();\n         }\n-        return ctx.newObject(\"redirectWO\", ApiBrowserConstants.DISTRIBUTION_ALIAS_LATEST, latest);\n+        return ctx.newObject(RedirectResource.TYPE, SnapshotManager.DISTRIBUTION_ALIAS_LATEST, latest);\n     }\n \n     @Path(\"{distributionId}\")\n     public Resource viewDistribution(@PathParam(\"distributionId\") String distributionId) {\n-        if (distributionId == null || \"\".equals(distributionId)) {\n+        if (StringUtils.isBlank(distributionId)) {\n             return this;\n         }\n+        if (isSiteMode() && RuntimeSnapshot.LIVE_ALIASES.contains(distributionId)) {\n+            return ctx.newObject(Resource404.TYPE);\n+        }\n \n         List<DistributionSnapshot> snaps = getSnapshotManager().listPersistentSnapshots((ctx.getCoreSession()));\n         if (distributionId.matches(VERSION_REGEX.toString())) {\n             String finalDistributionId = distributionId;\n-            String distribution = snaps.stream()\n-                                       .filter(s -> s.getVersion().equals(finalDistributionId))\n-                                       .findFirst()\n-                                       .map(DistributionSnapshot::getKey)\n-                                       .orElse(ApiBrowserConstants.DISTRIBUTION_ALIAS_CURRENT);\n-\n-            return ctx.newObject(\"redirectWO\", finalDistributionId, distribution);\n+            Optional<DistributionSnapshot> distribution = snaps.stream()\n+                                                               .filter(s -> s.getVersion().equals(finalDistributionId))\n+                                                               .findFirst();\n+            if (distribution.isPresent()) {\n+                return ctx.newObject(RedirectResource.TYPE, finalDistributionId, distribution.get().getKey());\n+            } else {\n+                return ctx.newObject(Resource404.TYPE);\n+            }", "originalCommit": "c5c86ef58edc7359abbe8abdc2cfc62fd05979e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "969b782ab43f8ec60fc259e53d66299fada6f909", "url": "https://github.com/nuxeo/nuxeo/commit/969b782ab43f8ec60fc259e53d66299fada6f909", "message": "NXP-29050: split ftests to easily test site mode", "committedDate": "2020-06-10T10:17:46Z", "type": "forcePushed"}, {"oid": "6f505ced57acfc01f8f853f1c81c3848bd09bb43", "url": "https://github.com/nuxeo/nuxeo/commit/6f505ced57acfc01f8f853f1c81c3848bd09bb43", "message": "NXP-29050: review API and UI logics to properly hide/protect live distrib", "committedDate": "2020-06-10T11:14:10Z", "type": "forcePushed"}, {"oid": "1a6342715b22e30e97f84f6b9e9991dba88ce592", "url": "https://github.com/nuxeo/nuxeo/commit/1a6342715b22e30e97f84f6b9e9991dba88ce592", "message": "NXP-29050: review API and UI logics to properly hide/protect live distrib", "committedDate": "2020-06-10T16:13:29Z", "type": "forcePushed"}, {"oid": "b745c8ccbda35bb07c82cde8dbf6f194bf9829e2", "url": "https://github.com/nuxeo/nuxeo/commit/b745c8ccbda35bb07c82cde8dbf6f194bf9829e2", "message": "NXP-29050: review API and UI to properly hide/protect live distrib", "committedDate": "2020-06-11T17:29:40Z", "type": "forcePushed"}, {"oid": "d0c54834ccdded4d6ae73b2d3a62ef58c3195332", "url": "https://github.com/nuxeo/nuxeo/commit/d0c54834ccdded4d6ae73b2d3a62ef58c3195332", "message": "NXP-29050: review API and UI to properly hide/protect live distrib", "committedDate": "2020-06-12T16:23:51Z", "type": "forcePushed"}, {"oid": "cf6e5476a906cbc9eb2cd4815565be26439c290a", "url": "https://github.com/nuxeo/nuxeo/commit/cf6e5476a906cbc9eb2cd4815565be26439c290a", "message": "NXP-29050: review API and UI to properly hide/protect live distrib", "committedDate": "2020-06-12T16:49:26Z", "type": "forcePushed"}, {"oid": "f354781ef7f293d950471f75ef1954795e4311e5", "url": "https://github.com/nuxeo/nuxeo/commit/f354781ef7f293d950471f75ef1954795e4311e5", "message": "NXP-29050: review API and UI to properly hide/protect live distrib", "committedDate": "2020-06-15T10:53:58Z", "type": "forcePushed"}, {"oid": "51d3ce84d5f8c6a25156417575a5403a32cca03e", "url": "https://github.com/nuxeo/nuxeo/commit/51d3ce84d5f8c6a25156417575a5403a32cca03e", "message": "NXP-29050: review API and UI to properly hide/protect live distrib", "committedDate": "2020-06-15T12:32:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDc0MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r440300741", "bodyText": "I think it would be better to keep the open() method as is and have another openAndCheck404 (or other name) for clarity when reading. The fact that the true means \"check 404\" is not very clear.", "author": "efge", "createdAt": "2020-06-15T16:30:38Z", "path": "ftests/nuxeo-platform-explorer-ftests/src/test/java/org/nuxeo/functionaltests/explorer/ITExplorerTest.java", "diffHunk": "@@ -79,15 +79,14 @@ public void testLoginLogout() {\n      */\n     @Test\n     public void testDistribAdminPage() {\n-        open(DistribAdminPage.URL);\n-        assertEquals(\"\", driver.getTitle());\n-        assertEquals(\"\", driver.getPageSource());\n+        open(DistribAdminPage.URL, true);", "originalCommit": "59b56a6b6433b540f3a01f4dac9aca43ba00900a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwNTI2NA==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r440305264", "bodyText": "You must close the stream, so this should be in a try-with-resources.\nCheck other callers of getReferenceStream as well, they're wrong too I think.", "author": "efge", "createdAt": "2020-06-15T16:38:34Z", "path": "ftests/nuxeo-platform-explorer-ftests/explorer-ftests-base/src/main/java/org/nuxeo/functionaltests/explorer/testing/AbstractExplorerTest.java", "diffHunk": "@@ -277,17 +277,12 @@ protected void switchBackToPreviousWindow() {\n         }\n     }\n \n-    public static String getReferencePath(String path) throws IOException {\n-        URL fileUrl = Thread.currentThread().getContextClassLoader().getResource(path);\n-        if (fileUrl == null) {\n-            throw new IllegalStateException(\"File not found: \" + path);\n-        }\n-        return FileUtils.getFilePathFromUrl(fileUrl);\n+    public static String getReferenceContent(Path path) throws IOException {\n+        return IOUtils.toString(getReferenceStream(path), StandardCharsets.UTF_8).trim();", "originalCommit": "9a09b6c8ed490b27b19bc0d6d45f8a20ce62d506", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNTM2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r440315368", "bodyText": "\"true\" is simpler :)", "author": "efge", "createdAt": "2020-06-15T16:55:52Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/TestBrowseSiteMode.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.test;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.runtime.RuntimeServiceException;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeSnaphotFeature.class)\n+public class TestBrowseSiteMode {\n+\n+    @Inject\n+    protected SnapshotManager manager;\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Before\n+    public void setSiteMode() {\n+        Framework.getRuntime().setProperty(SnapshotManager.PROPERTY_SITE_MODE, Boolean.toString(true));", "originalCommit": "51d3ce84d5f8c6a25156417575a5403a32cca03e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMzIwOA==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r442113208", "bodyText": "UTF_8 could be statically imported if it gives us a one-line declaration.", "author": "kevinleturc", "createdAt": "2020-06-18T10:01:46Z", "path": "ftests/nuxeo-platform-explorer-ftests/explorer-ftests-base/src/main/java/org/nuxeo/functionaltests/explorer/testing/AbstractExplorerDownloadTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.functionaltests.explorer.testing;\n+\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.nuxeo.ecm.core.io.impl.DWord;\n+import org.nuxeo.functionaltests.drivers.FirefoxDriverProvider;\n+import org.nuxeo.functionaltests.proxy.ProxyManager;\n+import org.nuxeo.runtime.api.Framework;\n+import org.openqa.selenium.Proxy;\n+import org.openqa.selenium.firefox.FirefoxDriver;\n+import org.openqa.selenium.firefox.FirefoxProfile;\n+import org.openqa.selenium.remote.CapabilityType;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n+\n+import net.jsourcerer.webdriver.jserrorcollector.JavaScriptError;\n+\n+/**\n+ * Abstract explorer test with download FF features and associated helpers.\n+ *\n+ * @since 11.1\n+ */\n+public abstract class AbstractExplorerDownloadTest extends AbstractExplorerTest {\n+\n+    public static File downloadDir;\n+\n+    public static String SAMPLE_BUNDLE_GROUP = \"apidoc\";\n+\n+    /**\n+     * Updates the firefox profile to ease up testing of downloaded distribution.\n+     * <p>\n+     * See NXP-20646 for download solution.\n+     */\n+    @BeforeClass\n+    public static void initFirefoxDriver() throws Exception {\n+        assumeTrue(driver instanceof FirefoxDriver);\n+\n+        // quit existing: will recreate one\n+        quitDriver();\n+\n+        proxyManager = new ProxyManager();\n+        Proxy proxy = proxyManager.startProxy();\n+        if (proxy != null) {\n+            proxy.setNoProxy(\"\");\n+        }\n+        DesiredCapabilities dc = DesiredCapabilities.firefox();\n+        dc.setCapability(CapabilityType.PROXY, proxy);\n+        FirefoxProfile profile = FirefoxDriverProvider.getProfile();\n+        JavaScriptError.addExtension(profile);\n+\n+        // specific profile part\n+        downloadDir = Framework.createTempDirectory(\"webdriver-explorer-admin\").toFile();\n+        profile.setPreference(\"browser.download.dir\", downloadDir.toString());\n+        profile.setPreference(\"browser.download.folderList\", 2);\n+        profile.setPreference(\"browser.download.useDownloadDir\", true);\n+        profile.setPreference(\"browser.helperApps.neverAsk.saveToDisk\", \"application/zip\");\n+\n+        dc.setCapability(FirefoxDriver.PROFILE, profile);\n+        driver = new FirefoxDriver(dc);\n+    }\n+\n+    @AfterClass\n+    public static void cleanupDownloadDir() throws Exception {\n+        FileUtils.deleteDirectory(downloadDir);\n+    }\n+\n+    protected static File createSampleZip(boolean addMarker) throws IOException {\n+        String sourceDirPath = \"data/sample_export\";\n+        File zip = new File(downloadDir, \"distrib-apidoc.zip\");\n+        FileUtils.deleteQuietly(zip);\n+        Path p = Files.createFile(Paths.get(zip.getPath()));\n+        try (ZipOutputStream zs = new ZipOutputStream(Files.newOutputStream(p))) {\n+            if (addMarker) {\n+                ZipEntry zipEntry = new ZipEntry(\".nuxeo-archive\");\n+                zs.putNextEntry(zipEntry);\n+                zs.closeEntry();\n+            }\n+            // read paths from reference file as NuxeoArchiveReader requires a given order and extra info\n+            Path epath = Paths.get(sourceDirPath, \"entries.txt\");\n+            List<String> lines = IOUtils.readLines(AbstractExplorerTest.getReferenceStream(epath),\n+                    StandardCharsets.UTF_8);", "originalCommit": "51d3ce84d5f8c6a25156417575a5403a32cca03e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2OTM2Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r442169367", "bodyText": "honestly i feel like that kind of refinement is too much for ftests, but i can do it if it's important to you", "author": "atchertchian", "createdAt": "2020-06-18T11:53:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMzIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE4MjIwMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r442182200", "bodyText": "Not at all, more a suggestion to share things than a request to edit the code.", "author": "kevinleturc", "createdAt": "2020-06-18T12:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMzIwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMzg4OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r442113888", "bodyText": "I think readLines doesn't close the InputStream for us like the other methods could do, it could be interesting to check it.", "author": "kevinleturc", "createdAt": "2020-06-18T10:03:01Z", "path": "ftests/nuxeo-platform-explorer-ftests/explorer-ftests-base/src/main/java/org/nuxeo/functionaltests/explorer/testing/AbstractExplorerDownloadTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.functionaltests.explorer.testing;\n+\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.nuxeo.ecm.core.io.impl.DWord;\n+import org.nuxeo.functionaltests.drivers.FirefoxDriverProvider;\n+import org.nuxeo.functionaltests.proxy.ProxyManager;\n+import org.nuxeo.runtime.api.Framework;\n+import org.openqa.selenium.Proxy;\n+import org.openqa.selenium.firefox.FirefoxDriver;\n+import org.openqa.selenium.firefox.FirefoxProfile;\n+import org.openqa.selenium.remote.CapabilityType;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n+\n+import net.jsourcerer.webdriver.jserrorcollector.JavaScriptError;\n+\n+/**\n+ * Abstract explorer test with download FF features and associated helpers.\n+ *\n+ * @since 11.1\n+ */\n+public abstract class AbstractExplorerDownloadTest extends AbstractExplorerTest {\n+\n+    public static File downloadDir;\n+\n+    public static String SAMPLE_BUNDLE_GROUP = \"apidoc\";\n+\n+    /**\n+     * Updates the firefox profile to ease up testing of downloaded distribution.\n+     * <p>\n+     * See NXP-20646 for download solution.\n+     */\n+    @BeforeClass\n+    public static void initFirefoxDriver() throws Exception {\n+        assumeTrue(driver instanceof FirefoxDriver);\n+\n+        // quit existing: will recreate one\n+        quitDriver();\n+\n+        proxyManager = new ProxyManager();\n+        Proxy proxy = proxyManager.startProxy();\n+        if (proxy != null) {\n+            proxy.setNoProxy(\"\");\n+        }\n+        DesiredCapabilities dc = DesiredCapabilities.firefox();\n+        dc.setCapability(CapabilityType.PROXY, proxy);\n+        FirefoxProfile profile = FirefoxDriverProvider.getProfile();\n+        JavaScriptError.addExtension(profile);\n+\n+        // specific profile part\n+        downloadDir = Framework.createTempDirectory(\"webdriver-explorer-admin\").toFile();\n+        profile.setPreference(\"browser.download.dir\", downloadDir.toString());\n+        profile.setPreference(\"browser.download.folderList\", 2);\n+        profile.setPreference(\"browser.download.useDownloadDir\", true);\n+        profile.setPreference(\"browser.helperApps.neverAsk.saveToDisk\", \"application/zip\");\n+\n+        dc.setCapability(FirefoxDriver.PROFILE, profile);\n+        driver = new FirefoxDriver(dc);\n+    }\n+\n+    @AfterClass\n+    public static void cleanupDownloadDir() throws Exception {\n+        FileUtils.deleteDirectory(downloadDir);\n+    }\n+\n+    protected static File createSampleZip(boolean addMarker) throws IOException {\n+        String sourceDirPath = \"data/sample_export\";\n+        File zip = new File(downloadDir, \"distrib-apidoc.zip\");\n+        FileUtils.deleteQuietly(zip);\n+        Path p = Files.createFile(Paths.get(zip.getPath()));\n+        try (ZipOutputStream zs = new ZipOutputStream(Files.newOutputStream(p))) {\n+            if (addMarker) {\n+                ZipEntry zipEntry = new ZipEntry(\".nuxeo-archive\");\n+                zs.putNextEntry(zipEntry);\n+                zs.closeEntry();\n+            }\n+            // read paths from reference file as NuxeoArchiveReader requires a given order and extra info\n+            Path epath = Paths.get(sourceDirPath, \"entries.txt\");\n+            List<String> lines = IOUtils.readLines(AbstractExplorerTest.getReferenceStream(epath),", "originalCommit": "51d3ce84d5f8c6a25156417575a5403a32cca03e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExNDc1OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r442114758", "bodyText": "Maybe the same thing than readLines, we probably need to close the InputStream.", "author": "kevinleturc", "createdAt": "2020-06-18T10:04:41Z", "path": "ftests/nuxeo-platform-explorer-ftests/explorer-ftests-base/src/main/java/org/nuxeo/functionaltests/explorer/testing/AbstractExplorerDownloadTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.functionaltests.explorer.testing;\n+\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.nuxeo.ecm.core.io.impl.DWord;\n+import org.nuxeo.functionaltests.drivers.FirefoxDriverProvider;\n+import org.nuxeo.functionaltests.proxy.ProxyManager;\n+import org.nuxeo.runtime.api.Framework;\n+import org.openqa.selenium.Proxy;\n+import org.openqa.selenium.firefox.FirefoxDriver;\n+import org.openqa.selenium.firefox.FirefoxProfile;\n+import org.openqa.selenium.remote.CapabilityType;\n+import org.openqa.selenium.remote.DesiredCapabilities;\n+\n+import net.jsourcerer.webdriver.jserrorcollector.JavaScriptError;\n+\n+/**\n+ * Abstract explorer test with download FF features and associated helpers.\n+ *\n+ * @since 11.1\n+ */\n+public abstract class AbstractExplorerDownloadTest extends AbstractExplorerTest {\n+\n+    public static File downloadDir;\n+\n+    public static String SAMPLE_BUNDLE_GROUP = \"apidoc\";\n+\n+    /**\n+     * Updates the firefox profile to ease up testing of downloaded distribution.\n+     * <p>\n+     * See NXP-20646 for download solution.\n+     */\n+    @BeforeClass\n+    public static void initFirefoxDriver() throws Exception {\n+        assumeTrue(driver instanceof FirefoxDriver);\n+\n+        // quit existing: will recreate one\n+        quitDriver();\n+\n+        proxyManager = new ProxyManager();\n+        Proxy proxy = proxyManager.startProxy();\n+        if (proxy != null) {\n+            proxy.setNoProxy(\"\");\n+        }\n+        DesiredCapabilities dc = DesiredCapabilities.firefox();\n+        dc.setCapability(CapabilityType.PROXY, proxy);\n+        FirefoxProfile profile = FirefoxDriverProvider.getProfile();\n+        JavaScriptError.addExtension(profile);\n+\n+        // specific profile part\n+        downloadDir = Framework.createTempDirectory(\"webdriver-explorer-admin\").toFile();\n+        profile.setPreference(\"browser.download.dir\", downloadDir.toString());\n+        profile.setPreference(\"browser.download.folderList\", 2);\n+        profile.setPreference(\"browser.download.useDownloadDir\", true);\n+        profile.setPreference(\"browser.helperApps.neverAsk.saveToDisk\", \"application/zip\");\n+\n+        dc.setCapability(FirefoxDriver.PROFILE, profile);\n+        driver = new FirefoxDriver(dc);\n+    }\n+\n+    @AfterClass\n+    public static void cleanupDownloadDir() throws Exception {\n+        FileUtils.deleteDirectory(downloadDir);\n+    }\n+\n+    protected static File createSampleZip(boolean addMarker) throws IOException {\n+        String sourceDirPath = \"data/sample_export\";\n+        File zip = new File(downloadDir, \"distrib-apidoc.zip\");\n+        FileUtils.deleteQuietly(zip);\n+        Path p = Files.createFile(Paths.get(zip.getPath()));\n+        try (ZipOutputStream zs = new ZipOutputStream(Files.newOutputStream(p))) {\n+            if (addMarker) {\n+                ZipEntry zipEntry = new ZipEntry(\".nuxeo-archive\");\n+                zs.putNextEntry(zipEntry);\n+                zs.closeEntry();\n+            }\n+            // read paths from reference file as NuxeoArchiveReader requires a given order and extra info\n+            Path epath = Paths.get(sourceDirPath, \"entries.txt\");\n+            List<String> lines = IOUtils.readLines(AbstractExplorerTest.getReferenceStream(epath),\n+                    StandardCharsets.UTF_8);\n+            for (Iterator<String> lineIter = lines.iterator(); lineIter.hasNext();) {\n+                String path = lineIter.next();\n+                if (StringUtils.isEmpty(path)) {\n+                    continue;\n+                }\n+                ZipEntry entry = new ZipEntry(path);\n+                if (path.endsWith(\"/\")) {\n+                    // directory entry case\n+                    entry.setExtra(new DWord(Integer.valueOf(lineIter.next())).getBytes());\n+                    zs.putNextEntry(entry);\n+                } else {\n+                    zs.putNextEntry(entry);\n+                    Path ppath = Paths.get(sourceDirPath, path);\n+                    IOUtils.copy(AbstractExplorerTest.getReferenceStream(ppath), zs);", "originalCommit": "51d3ce84d5f8c6a25156417575a5403a32cca03e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExOTQ5Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r442119497", "bodyText": "Following the comment on nuxeo-jsf-ui, this block should go to the nuxeo root pom.", "author": "kevinleturc", "createdAt": "2020-06-18T10:13:00Z", "path": "ftests/nuxeo-platform-explorer-ftests/pom.xml", "diffHunk": "@@ -8,54 +8,24 @@\n     <version>11.2-SNAPSHOT</version>\n   </parent>\n \n-  <artifactId>nuxeo-platform-explorer-ftests</artifactId>\n-  <name>Marketplace Platform Explorer - Webdriver Functionnal Tests</name>\n+  <artifactId>nuxeo-explorer-ftests-parent</artifactId>\n+  <name>Explorer - Functional Tests Parent</name>\n+  <packaging>pom</packaging>\n \n-  <dependencies>\n-    <dependency>\n-      <groupId>org.nuxeo.packages</groupId>\n-      <artifactId>nuxeo-platform-explorer-package</artifactId>\n-      <type>zip</type>\n-      <scope>test</scope>\n-    </dependency>\n-  </dependencies>\n+  <modules>\n+    <module>explorer-ftests-base</module>\n+    <module>explorer-ftests-nomode</module>\n+    <module>explorer-ftests-sitemode</module>\n+  </modules>\n \n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.nuxeo.build</groupId>\n-        <artifactId>ant-assembly-maven-plugin</artifactId>\n-        <executions>\n-          <execution>\n-            <id>start-tomcat</id>\n-            <phase>pre-integration-test</phase>\n-            <goals>\n-              <goal>build</goal>\n-            </goals>\n-            <configuration>\n-              <targets>\n-                <target>prepare-packages</target>\n-                <target>prepare-environment</target>\n-                <target>start</target>\n-              </targets>\n-            </configuration>\n-          </execution>\n-          <execution>\n-            <id>stop-tomcat</id>\n-            <phase>post-integration-test</phase>\n-            <goals>\n-              <goal>build</goal>\n-            </goals>\n-            <configuration>\n-              <targets>\n-                <target>stop</target>\n-                <target>cleanup-environment</target>\n-              </targets>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n-    </plugins>\n-  </build>\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.nuxeo.ftests</groupId>\n+        <artifactId>nuxeo-explorer-ftests-base</artifactId>\n+        <version>${nuxeo.platform.version}</version>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>", "originalCommit": "51d3ce84d5f8c6a25156417575a5403a32cca03e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEyMjQwMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r442122402", "bodyText": "This assertion is present in the two tests, does it deserve to be moved to @Before?", "author": "kevinleturc", "createdAt": "2020-06-18T10:18:05Z", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/TestBrowseSiteMode.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.apidoc.test;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.apidoc.snapshot.SnapshotManager;\n+import org.nuxeo.ecm.core.api.CoreSession;\n+import org.nuxeo.runtime.RuntimeServiceException;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeSnaphotFeature.class)\n+public class TestBrowseSiteMode {\n+\n+    @Inject\n+    protected SnapshotManager manager;\n+\n+    @Inject\n+    protected CoreSession session;\n+\n+    @Before\n+    public void setSiteMode() {\n+        Framework.getRuntime().setProperty(SnapshotManager.PROPERTY_SITE_MODE, Boolean.toString(true));\n+    }\n+\n+    @Test\n+    public void testIntrospection() {\n+        assertTrue(manager.isSiteMode());\n+        try {\n+            manager.getRuntimeSnapshot();\n+            fail(\"Should have raised a runtime exception\");\n+        } catch (RuntimeServiceException e) {\n+            // ok\n+        }\n+    }\n+\n+    @Test\n+    public void testGetSnapshot() {\n+        assertTrue(manager.isSiteMode());", "originalCommit": "51d3ce84d5f8c6a25156417575a5403a32cca03e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NDEyNw==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r442244127", "bodyText": "I initially merged these tests within TestBrowse.java, and split it when i saw that the Framework.getRuntime().setProperty call was valid for all subsequent tests once called, so i found it simpler to split the tests.\nI'd rather find a good way to keep the runtime props clean (in before/after methods if that's the best, but it does not seem as clean as doing so at the RuntimeFeature level...): the check on site mode changes the behaviour of some calls, which is what these tests demonstrate: i'm not primarily checking that site mode is activated, i'm really checking that the subsequent calls do change the behaviour when site mode is activated.\nI'm afraid moving this check to another method will make that demonstration unclear.\nDoes that make sense please?", "author": "atchertchian", "createdAt": "2020-06-18T13:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEyMjQwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MTc2Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/4133#discussion_r442691763", "bodyText": "It does \ud83d\udc4d .", "author": "kevinleturc", "createdAt": "2020-06-19T07:57:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEyMjQwMg=="}], "type": "inlineReview"}, {"oid": "9c3c5472f1a16cb74819b9f959544331ff131c5e", "url": "https://github.com/nuxeo/nuxeo/commit/9c3c5472f1a16cb74819b9f959544331ff131c5e", "message": "NXP-28949/NXP-29125: add documentation for configuration properties, remove uselss fallback on nuxeo.conf variables", "committedDate": "2020-06-18T12:37:17Z", "type": "commit"}, {"oid": "40b70be1552e9ba2004f236d0f6473ff33e132c1", "url": "https://github.com/nuxeo/nuxeo/commit/40b70be1552e9ba2004f236d0f6473ff33e132c1", "message": "NXP-29219: add RestHelper API to create user/group only if it does not exist.\n\nUseful locally when using specific user names anyway, as some errors might trigger the cleanup not to be called (closing FF window abruptly for instance)", "committedDate": "2020-06-18T12:37:27Z", "type": "commit"}, {"oid": "f2316a1bb39b2250884c29ba2472850fc505fad3", "url": "https://github.com/nuxeo/nuxeo/commit/f2316a1bb39b2250884c29ba2472850fc505fad3", "message": "NXP-29219: rework Explorer security model", "committedDate": "2020-06-18T12:37:33Z", "type": "commit"}, {"oid": "11c1985f63e78c8f852cc1a782685cbc1b728813", "url": "https://github.com/nuxeo/nuxeo/commit/11c1985f63e78c8f852cc1a782685cbc1b728813", "message": "NXP-29050: define better constants for explorer distribution aliases", "committedDate": "2020-06-18T12:37:40Z", "type": "commit"}, {"oid": "25accca059847b3a6055e1af9fb7b4994d467bc8", "url": "https://github.com/nuxeo/nuxeo/commit/25accca059847b3a6055e1af9fb7b4994d467bc8", "message": "NXP-29050: split explorer ftests to easily test site mode", "committedDate": "2020-06-18T12:37:47Z", "type": "commit"}, {"oid": "25293931b70f37533b1a7d4d10915926ea917648", "url": "https://github.com/nuxeo/nuxeo/commit/25293931b70f37533b1a7d4d10915926ea917648", "message": "NXP-29050: make ftest click more robust", "committedDate": "2020-06-18T13:15:00Z", "type": "forcePushed"}, {"oid": "440a23f412644d4e4751bf696ab32824d2ef1601", "url": "https://github.com/nuxeo/nuxeo/commit/440a23f412644d4e4751bf696ab32824d2ef1601", "message": "NXP-29050: adapt test resources lookup", "committedDate": "2020-06-18T15:39:08Z", "type": "commit"}, {"oid": "451d4b7339fb3a833782029f4364479de8f7a1ed", "url": "https://github.com/nuxeo/nuxeo/commit/451d4b7339fb3a833782029f4364479de8f7a1ed", "message": "NXP-29050: add explorer ftests for site mode", "committedDate": "2020-06-18T15:39:08Z", "type": "commit"}, {"oid": "3bd5dbeca04101d24f7d4b8c64395f7006a2f416", "url": "https://github.com/nuxeo/nuxeo/commit/3bd5dbeca04101d24f7d4b8c64395f7006a2f416", "message": "NXP-29050: review API and UI to properly hide/protect live distrib", "committedDate": "2020-06-18T15:39:08Z", "type": "commit"}, {"oid": "07d18caf17947f5ef0ec60b95668d6af78b810d9", "url": "https://github.com/nuxeo/nuxeo/commit/07d18caf17947f5ef0ec60b95668d6af78b810d9", "message": "NXP-29050: make ftest click more robust", "committedDate": "2020-06-18T15:39:08Z", "type": "commit"}, {"oid": "07d18caf17947f5ef0ec60b95668d6af78b810d9", "url": "https://github.com/nuxeo/nuxeo/commit/07d18caf17947f5ef0ec60b95668d6af78b810d9", "message": "NXP-29050: make ftest click more robust", "committedDate": "2020-06-18T15:39:08Z", "type": "forcePushed"}]}