{"pr_number": 3716, "pr_title": "feature-NXP-28581-remove-automation-client", "pr_createdAt": "2020-02-03T05:10:34Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3716", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA0NjkzMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3716#discussion_r374046932", "bodyText": "Why not using TransactionalFeature#nextTransation()?", "author": "troger", "createdAt": "2020-02-03T11:16:36Z", "path": "nuxeo-services/login/nuxeo-platform-login-token/src/test/java/org/nuxeo/ecm/tokenauth/TestAnonymousTokenAuthenticator.java", "diffHunk": "@@ -53,51 +56,58 @@\n @RunWith(FeaturesRunner.class)\n @Features({ TokenAuthenticationServiceFeature.class, EmbeddedAutomationServerFeature.class })\n @Deploy(\"org.nuxeo.ecm.platform.login.token.test:OSGI-INF/test-token-authentication-anonymous-contrib.xml\")\n-@RepositoryConfig(init = TokenAuthenticationRepositoryInit.class, cleanup = Granularity.METHOD)\n public class TestAnonymousTokenAuthenticator {\n \n+    protected static final String TOKEN_HEADER = \"X-Authentication-Token\";\n+\n     @Inject\n     protected HotDeployer deployer;\n \n     @Inject\n-    protected CoreSession session;\n+    protected ServletContainerFeature servletContainerFeature;\n \n     @Inject\n-    protected HttpAutomationClient automationClient;\n+    protected TokenAuthenticationService tokenAuthenticationService;\n+\n+    protected CloseableHttpClient client = HttpClients.createDefault();\n+\n+    protected void nextTransaction() {\n+        TransactionHelper.commitOrRollbackTransaction();\n+        TransactionHelper.startTransaction();\n+    }", "originalCommit": "2583ec0f41a813efdcc4b59fbad5d81f6edbc502", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA0NzQ1NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3716#discussion_r374047454", "bodyText": "Same, use TransactionalFeature#nextTransaction.", "author": "troger", "createdAt": "2020-02-03T11:17:50Z", "path": "nuxeo-services/login/nuxeo-platform-login-token/src/test/java/org/nuxeo/ecm/tokenauth/TestTokenAuthenticator.java", "diffHunk": "@@ -53,70 +58,64 @@\n  */\n @RunWith(FeaturesRunner.class)\n @Features({ TokenAuthenticationServiceFeature.class, EmbeddedAutomationServerFeature.class })\n-@RepositoryConfig(init = TokenAuthenticationRepositoryInit.class, cleanup = Granularity.METHOD)\n public class TestTokenAuthenticator {\n \n+    protected static final String TOKEN_HEADER = \"X-Authentication-Token\";\n+\n     @Inject\n-    protected CoreSession session;\n+    protected ServletContainerFeature servletContainerFeature;\n \n     @Inject\n-    protected HttpAutomationClient automationClient;\n+    protected TokenAuthenticationService tokenAuthenticationService;\n+\n+    @Inject\n+    protected UserManager userManager;\n+\n+    protected CloseableHttpClient client = HttpClients.createDefault();\n+\n+    @Before\n+    public void setUp() {\n+        DocumentModel user = userManager.getBareUserModel();\n+        user.setPropertyValue(userManager.getUserIdField(), \"joe\");\n+        userManager.createUser(user);\n+    }\n+\n+    protected void nextTransaction() {\n+        TransactionHelper.commitOrRollbackTransaction();\n+        TransactionHelper.startTransaction();\n+    }", "originalCommit": "2583ec0f41a813efdcc4b59fbad5d81f6edbc502", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA2MjU0OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3716#discussion_r374062548", "bodyText": "why not checking the assertion on error to fail the test like  : assertEquals(\"NuxeoDrive.TearDownIntegrationTests operation should not be callable by a non administrator.\", error);  ?", "author": "ThierryCasanova", "createdAt": "2020-02-03T11:55:56Z", "path": "addons/nuxeo-drive-server/nuxeo-drive-operations/src/test/java/org/nuxeo/drive/operations/TestIntegrationTestOperations.java", "diffHunk": "@@ -206,32 +184,22 @@ public void testIntegrationTestsSetupAndTearDown() throws IOException {\n         // ----------------------------------------------------------------------\n         String sarahCredentials = testUserCrendentialsArray[0];\n         String sarahPassword = sarahCredentials.substring(sarahCredentials.indexOf(':') + 1);\n-        Session unauthorizedSession = automationClient.getSession(\"drivesarah\", sarahPassword);\n-        try {\n-            unauthorizedSession.newRequest(NuxeoDriveSetupIntegrationTests.ID)\n-                               .set(\"userNames\", \"john,bob\")\n-                               .set(\"permission\", \"ReadWrite\")\n-                               .execute();\n-            fail(\"NuxeoDrive.SetupIntegrationTests operation should not be callable by a non administrator.\");\n-        } catch (Exception e) {\n-            // Expected\n-        }\n-\n+        service = getAutomationServiceFor(\"drivesarah\", sarahPassword);\n+        getOperationError(NuxeoDriveSetupIntegrationTests.ID, Map.of( //\n+                \"userNames\", \"john,bob\", //\n+                \"permission\", \"ReadWrite\"), SC_NOT_FOUND);\n         // ----------------------------------------------------------------------\n         // Try to tear down the integration tests environment as an unauthorized\n         // user => should fail\n         // ----------------------------------------------------------------------\n-        try {\n-            unauthorizedSession.newRequest(NuxeoDriveTearDownIntegrationTests.ID).execute();\n-            fail(\"NuxeoDrive.TearDownIntegrationTests operation should not be callable by a non administrator.\");\n-        } catch (Exception e) {\n-            // Expected\n-        }\n+        getOperationError(NuxeoDriveTearDownIntegrationTests.ID, null, Map.of(), SC_NOT_FOUND);", "originalCommit": "2583ec0f41a813efdcc4b59fbad5d81f6edbc502", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5NDc3NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3716#discussion_r374094774", "bodyText": "What do you think of the following?\nmap.put(\"context\", requireNonNullElseGet(contextParams, Collections::emptyMap);", "author": "kevinleturc", "createdAt": "2020-02-03T13:16:28Z", "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/main/java/org/nuxeo/ecm/restapi/test/BaseAutomationTest.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Florent Guillaume\n+ */\n+package org.nuxeo.ecm.restapi.test;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.apache.http.HttpStatus.SC_NO_CONTENT;\n+import static org.apache.http.HttpStatus.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n+import org.nuxeo.ecm.core.api.Blob;\n+import org.nuxeo.ecm.core.api.NuxeoException;\n+import org.nuxeo.jaxrs.test.CloseableClientResponse;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.sun.jersey.api.client.WebResource;\n+import com.sun.jersey.multipart.BodyPart;\n+import com.sun.jersey.multipart.FormDataMultiPart;\n+import com.sun.jersey.multipart.MultiPart;\n+import com.sun.jersey.multipart.file.StreamDataBodyPart;\n+\n+/**\n+ * @since 11.1\n+ */\n+public abstract class BaseAutomationTest extends BaseTest {\n+\n+    @Before\n+    public void init() {\n+        service = getAutomationServiceFor(\"Administrator\", \"Administrator\");\n+    }\n+\n+    protected String getAutomationUrl() {\n+        return getBaseURL() + \"/automation/\";\n+    }\n+\n+    protected WebResource getAutomationServiceFor(String username, String password) {\n+        return getServiceFor(getAutomationUrl(), username, password);\n+    }\n+\n+    protected <T> T getOperationResponse(String operationId, Class<T> valueType) {\n+        return getOperationResponse(operationId, null, null, null, null, valueType);\n+    }\n+\n+    protected <T> T getOperationResponse(String operationId, TypeReference<T> valueType) {\n+        return getOperationResponse(operationId, null, null, null, null, valueType);\n+    }\n+\n+    protected String getOperationResponse(String operationId, Map<String, Object> params) {\n+        return getOperationResponse(operationId, null, params, null, null);\n+    }\n+\n+    protected <T> T getOperationResponse(String operationId, Map<String, Object> params, Class<T> valueType) {\n+        return getOperationResponse(operationId, null, params, null, null, valueType);\n+    }\n+\n+    protected <T> T getOperationResponse(String operationId, Map<String, Object> params, TypeReference<T> valueType) {\n+        return getOperationResponse(operationId, null, params, null, null, valueType);\n+    }\n+\n+    protected <T> T getOperationResponse(String operationId, Object input, Map<String, Object> params,\n+            Class<T> valueType) {\n+        return getOperationResponse(operationId, input, params, null, null, valueType);\n+    }\n+\n+    protected <T> T getOperationResponse(String operationId, Object input, Map<String, Object> params,\n+            TypeReference<T> valueType) {\n+        return getOperationResponse(operationId, input, params, null, null, valueType);\n+    }\n+\n+    protected boolean getOperationBoolean(String operationId, Map<String, Object> params) {\n+        JsonNode node = getOperationResponse(operationId, null, params, null, null, JsonNode.class);\n+        assertEquals(\"boolean\", node.get(\"entity-type\").asText());\n+        return node.get(\"value\").asBoolean();\n+    }\n+\n+    protected String getOperationResponse(String operationId, Object input, Map<String, Object> params,\n+            Map<String, Object> contextParams, Map<String, String> headers) {\n+        Function<InputStream, String> bodyReader = stream -> {\n+            try {\n+                return IOUtils.toString(stream, UTF_8);\n+            } catch (IOException e) {\n+                throw new NuxeoException(e);\n+            }\n+        };\n+        return getOperationResponse(operationId, input, params, contextParams, headers, bodyReader);\n+    }\n+\n+    protected <T> T getOperationResponse(String operationId, Object input, Map<String, Object> params,\n+            Map<String, Object> contextParams, Map<String, String> headers, Class<T> valueType) {\n+        Function<InputStream, T> bodyReader = stream -> {\n+            try {\n+                return mapper.readValue(stream, valueType);\n+            } catch (IOException e) {\n+                throw new NuxeoException(e);\n+            }\n+        };\n+        return getOperationResponse(operationId, input, params, contextParams, headers, bodyReader);\n+    }\n+\n+    protected <T> T getOperationResponse(String operationId, Object input, Map<String, Object> params,\n+            Map<String, Object> contextParams, Map<String, String> headers, TypeReference<T> valueType) {\n+        Function<InputStream, T> bodyReader = stream -> {\n+            try {\n+                return mapper.readValue(stream, valueType);\n+            } catch (IOException e) {\n+                throw new NuxeoException(e);\n+            }\n+        };\n+        return getOperationResponse(operationId, input, params, contextParams, headers, bodyReader);\n+    }\n+\n+    protected <T> T getOperationResponse(String operationId, Object input, Map<String, Object> params,\n+            Map<String, Object> contextParams, Map<String, String> headers, Function<InputStream, T> bodyReader) {\n+        headers = headers == null ? new HashMap<>() : new HashMap<>(headers);\n+        headers.put(\"Content-Type\", MediaType.APPLICATION_JSON);\n+        String schemas = null;\n+        String acceptedType = MediaType.APPLICATION_JSON + \", */*\";\n+        String data = getAutomationBody(input, params, contextParams);\n+        try (MultiPart mp = getAutomationMultiPart(input, data);\n+                CloseableClientResponse response = getResponse(RequestType.POST, operationId, data, null, mp, schemas,\n+                        headers, acceptedType); //\n+                InputStream stream = response.getEntityInputStream()) {\n+            int status = response.getStatus();\n+            if (status == SC_NO_CONTENT) {\n+                return null;\n+            } else {\n+                assertEquals(SC_OK, status);\n+                return bodyReader.apply(stream);\n+            }\n+        } catch (IOException e) {\n+            throw new NuxeoException(e);\n+        }\n+    }\n+\n+    protected String getOperationError(String operationId, Map<String, Object> params, int expectedStatus) {\n+        return getOperationError(operationId, null, params, null, null, expectedStatus);\n+    }\n+\n+    protected String getOperationError(String operationId, String input, Map<String, Object> params,\n+            int expectedStatus) {\n+        return getOperationError(operationId, input, params, null, null, expectedStatus);\n+    }\n+\n+    protected String getOperationError(String operationId, String input, Map<String, Object> params,\n+            Map<String, Object> contextParams, Map<String, String> headers, int expectedStatus) {\n+        headers = headers == null ? new HashMap<>() : new HashMap<>(headers);\n+        headers.put(\"Content-Type\", MediaType.APPLICATION_JSON);\n+        String schemas = null;\n+        String acceptedType = MediaType.APPLICATION_JSON + \", */*\";\n+        String data = getAutomationBody(input, params, contextParams);\n+        try (CloseableClientResponse response = getResponse(RequestType.POST, operationId, data, null, null, schemas,\n+                headers, acceptedType); //\n+                InputStream stream = response.getEntityInputStream()) {\n+            assertEquals(expectedStatus, response.getStatus());\n+            JsonNode node = mapper.readTree(stream);\n+            if (node == null) {\n+                return null;\n+            }\n+            JsonNode messageNode = node.get(\"message\");\n+            return messageNode == null ? null : messageNode.asText();\n+        } catch (IOException e) {\n+            throw new NuxeoException(e);\n+        }\n+    }\n+\n+    protected String getAutomationBody(Object input, Map<String, Object> params, Map<String, Object> contextParams) {\n+        Map<String, Object> map = new HashMap<>();\n+        if (input instanceof String) {\n+            map.put(\"input\", input);\n+        }\n+        if (params == null) {\n+            params = Collections.emptyMap();\n+        }\n+        map.put(\"params\", params);\n+        if (contextParams == null) {\n+            contextParams = Collections.emptyMap();\n+        }\n+        map.put(\"context\", contextParams);", "originalCommit": "2583ec0f41a813efdcc4b59fbad5d81f6edbc502", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5OTEyMw==", "url": "https://github.com/nuxeo/nuxeo/pull/3716#discussion_r377199123", "bodyText": "In the end I use params == null ? Map.of() : params", "author": "efge", "createdAt": "2020-02-10T17:12:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5NDc3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5NzA3OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3716#discussion_r374097079", "bodyText": "Shouldn't schemas be passed within the headers?", "author": "kevinleturc", "createdAt": "2020-02-03T13:21:29Z", "path": "nuxeo-features/rest-api/nuxeo-rest-api-test/src/main/java/org/nuxeo/ecm/restapi/test/BaseTest.java", "diffHunk": "@@ -155,16 +155,25 @@ protected CloseableClientResponse getResponse(RequestType requestType, String pa\n     protected CloseableClientResponse getResponse(RequestType requestType, String path, String data,\n             MultivaluedMap<String, String> queryParams, MultiPart mp, Map<String, String> headers,\n             String... acceptedTypes) {\n+        return getResponse(requestType, path, data, queryParams, mp, \"dublincore\", headers, acceptedTypes);\n+    }\n+\n+    protected CloseableClientResponse getResponse(RequestType requestType, String path, String data,\n+            MultivaluedMap<String, String> queryParams, MultiPart mp, String schemas, Map<String, String> headers,", "originalCommit": "2583ec0f41a813efdcc4b59fbad5d81f6edbc502", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5OTI5OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3716#discussion_r377199298", "bodyText": "This code is now gone", "author": "efge", "createdAt": "2020-02-10T17:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5NzA3OQ=="}], "type": "inlineReview"}, {"oid": "02b30a518025ab1c4ddd0073ea94d62781be8a87", "url": "https://github.com/nuxeo/nuxeo/commit/02b30a518025ab1c4ddd0073ea94d62781be8a87", "message": "NXP-28581: remove dependency on nuxeo-automation-client", "committedDate": "2020-02-09T00:52:18Z", "type": "forcePushed"}, {"oid": "f24a581233196a286af4a4be91a26f7104caface", "url": "https://github.com/nuxeo/nuxeo/commit/f24a581233196a286af4a4be91a26f7104caface", "message": "NXP-28581: remove dependency on nuxeo-automation-client", "committedDate": "2020-02-09T19:57:23Z", "type": "forcePushed"}, {"oid": "617aa7fbb65b2acf17767103490d6af250686989", "url": "https://github.com/nuxeo/nuxeo/commit/617aa7fbb65b2acf17767103490d6af250686989", "message": "NXP-28581: remove dependency on nuxeo-automation-client", "committedDate": "2020-02-10T14:58:14Z", "type": "forcePushed"}, {"oid": "d51a96c79f53132ba1c88db3d704e0a2cfe68192", "url": "https://github.com/nuxeo/nuxeo/commit/d51a96c79f53132ba1c88db3d704e0a2cfe68192", "message": "NXP-28581: remove dependency on nuxeo-automation-client", "committedDate": "2020-02-10T16:07:48Z", "type": "forcePushed"}, {"oid": "e4e963d0f8e9ffea9757894180957944c7d643d6", "url": "https://github.com/nuxeo/nuxeo/commit/e4e963d0f8e9ffea9757894180957944c7d643d6", "message": "NXP-28581: remove dependency on nuxeo-automation-client", "committedDate": "2020-02-10T22:31:40Z", "type": "commit"}, {"oid": "1ad5b3e26080a71e53e697ad95466b7de3fcbfdb", "url": "https://github.com/nuxeo/nuxeo/commit/1ad5b3e26080a71e53e697ad95466b7de3fcbfdb", "message": "NXP-28646: remove nuxeo-automation-client", "committedDate": "2020-02-10T22:31:41Z", "type": "commit"}, {"oid": "1ad5b3e26080a71e53e697ad95466b7de3fcbfdb", "url": "https://github.com/nuxeo/nuxeo/commit/1ad5b3e26080a71e53e697ad95466b7de3fcbfdb", "message": "NXP-28646: remove nuxeo-automation-client", "committedDate": "2020-02-10T22:31:41Z", "type": "forcePushed"}]}