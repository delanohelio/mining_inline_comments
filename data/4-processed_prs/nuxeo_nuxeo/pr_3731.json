{"pr_number": 3731, "pr_title": "improvement-NXP-28633-Allow-a-Nuxeo-Operation-to-subscribe-a-user-to-a-given-notifications", "pr_createdAt": "2020-02-07T20:19:48Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3731", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE4OTk3MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3731#discussion_r377189971", "bodyText": "I tend to keep this when there is also an empty line separating the class declaration from the first field.", "author": "NourNuxeo", "createdAt": "2020-02-10T16:57:08Z", "path": "nuxeo-features/nuxeo-platform-notification/nuxeo-platform-notification-core/src/test/java/org/nuxeo/ecm/platform/ec/notification/operations/SubscribeAndUnsubscribeTest.java", "diffHunk": "@@ -87,92 +78,85 @@ public void setUp() {\n             listDocs.add(testFile);\n         }\n         listDocModel = new DocumentModelListImpl(listDocs);\n-        ctx = new OperationContext(coreSession);\n-    }\n-\n-    @After\n-    public void closeOperationContext() {\n-        ctx.close();\n     }\n \n     @Test\n     public void testSubscribeAndUnsubscribeOperations() throws OperationException {\n-        OperationChain chain = new OperationChain(\"test-chain\");\n-        chain.add(SubscribeOperation.ID);\n-        ctx.setInput(listDocModel);\n-        String username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertTrue(docSubscriptions.isEmpty());\n-        }\n-\n-        // subscribe all documents\n-        listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertEquals(4, docSubscriptions.size());\n-            assertTrue(docSubscriptions.contains(\"Creation\"));\n-            assertTrue(docSubscriptions.contains(\"Modification\"));\n-            assertTrue(docSubscriptions.contains(\"Workflow Change\"));\n-            assertTrue(docSubscriptions.contains(\"Approbation review started\"));\n-        }\n-\n-        chain = new OperationChain(\"test-chain\");\n-        chain.add(UnsubscribeOperation.ID);\n-        ctx.clear();\n-        ctx.setInput(listDocModel);\n-        username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n-\n-        // unsubscribe all documents\n-        listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertTrue(docSubscriptions.isEmpty());\n+        try (OperationContext ctx = new OperationContext(coreSession)) {\n+            OperationChain chain = new OperationChain(\"test-chain\");\n+            chain.add(SubscribeOperation.ID);\n+            ctx.setInput(listDocModel);\n+            String username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertTrue(docSubscriptions.isEmpty());\n+            }\n+\n+            // subscribe all documents\n+            listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertEquals(4, docSubscriptions.size());\n+                assertTrue(docSubscriptions.contains(\"Creation\"));\n+                assertTrue(docSubscriptions.contains(\"Modification\"));\n+                assertTrue(docSubscriptions.contains(\"Workflow Change\"));\n+                assertTrue(docSubscriptions.contains(\"Approbation review started\"));\n+            }\n+\n+            chain = new OperationChain(\"test-chain\");\n+            chain.add(UnsubscribeOperation.ID);\n+            ctx.clear();\n+            ctx.setInput(listDocModel);\n+            username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n+\n+            // unsubscribe all documents\n+            listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertTrue(docSubscriptions.isEmpty());\n+            }\n         }\n     }\n \n     @Test\n     public void testSelectiveSubscribeAndUnsubscribeOperations() throws OperationException {\n-        Map<String, Object> params = new HashMap<>();\n-        params.put(\"notifications\", new StringList(new ArrayList<String>() {private static final long serialVersionUID = 1L;\n-\n-        { add(\"Creation\"); }}));\n-\n-        OperationChain chain = new OperationChain(\"test-chain\");\n-        chain.add(SubscribeOperation.ID).from(params);\n-        ctx.setInput(listDocModel);\n-        String username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertTrue(docSubscriptions.isEmpty());\n-        }\n-\n-        // subscribe all documents\n-        listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertEquals(1, docSubscriptions.size());\n-            assertTrue(docSubscriptions.contains(\"Creation\"));\n-        }\n-\n-        chain = new OperationChain(\"test-chain\");\n-        chain.add(UnsubscribeOperation.ID).from(params);\n-        ctx.clear();\n-        ctx.setInput(listDocModel);\n-        username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n-\n-        // unsubscribe all documents\n-        listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n-\n-        for (DocumentModel doc : listDocModel) {\n-            List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n-            assertTrue(docSubscriptions.isEmpty());\n+        try (OperationContext ctx = new OperationContext(coreSession)) {\n+            Map<String, Object> params = Map.of(\"notifications\", List.of(\"Creation\"));\n+            OperationChain chain = new OperationChain(\"test-chain\");\n+            chain.add(SubscribeOperation.ID).from(params);\n+            ctx.setInput(listDocModel);\n+            String username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertTrue(docSubscriptions.isEmpty());\n+            }\n+\n+            // subscribe all documents\n+            listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertEquals(1, docSubscriptions.size());\n+                assertTrue(docSubscriptions.contains(\"Creation\"));\n+            }\n+\n+            chain = new OperationChain(\"test-chain\");\n+            chain.add(UnsubscribeOperation.ID).from(params);\n+            ctx.clear();\n+            ctx.setInput(listDocModel);\n+            username = NotificationConstants.USER_PREFIX + ctx.getPrincipal().getName();\n+\n+            // unsubscribe all documents\n+            listDocModel = (DocumentModelList) automationService.run(ctx, chain);\n+\n+            for (DocumentModel doc : listDocModel) {\n+                List<?> docSubscriptions = doc.getAdapter(SubscriptionAdapter.class).getUserSubscriptions(username);\n+                assertTrue(docSubscriptions.isEmpty());\n+            }\n         }\n     }\n-", "originalCommit": "1ac7fa65802cbef1e85ddda9960d3af1bb57c99c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5MjA0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3731#discussion_r377192045", "bodyText": "I get a different result when I format this (one liner)", "author": "NourNuxeo", "createdAt": "2020-02-10T17:00:30Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-features/src/main/resources/OSGI-INF/operations-contrib.xml", "diffHunk": "@@ -6,7 +6,7 @@\n   <documentation>@author Bogdan Stefanescu (bs@nuxeo.com)</documentation>\n \n   <extension target=\"org.nuxeo.ecm.core.operation.OperationServiceComponent\"\n-    point=\"operations\">\n+             point=\"operations\">", "originalCommit": "1ac7fa65802cbef1e85ddda9960d3af1bb57c99c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "398c5b05a2e5b1f00b5fa5d0873f7ed721dfab38", "url": "https://github.com/nuxeo/nuxeo/commit/398c5b05a2e5b1f00b5fa5d0873f7ed721dfab38", "message": "NXP-28633: Cleanup / Format", "committedDate": "2020-02-10T17:20:52Z", "type": "commit"}, {"oid": "23741626f21320bca39af1e5b87a69a5148cd975", "url": "https://github.com/nuxeo/nuxeo/commit/23741626f21320bca39af1e5b87a69a5148cd975", "message": "NXP-28633: Allow a Nuxeo Operation to subscribe a user to a given notifications", "committedDate": "2020-02-10T17:20:52Z", "type": "commit"}, {"oid": "23741626f21320bca39af1e5b87a69a5148cd975", "url": "https://github.com/nuxeo/nuxeo/commit/23741626f21320bca39af1e5b87a69a5148cd975", "message": "NXP-28633: Allow a Nuxeo Operation to subscribe a user to a given notifications", "committedDate": "2020-02-10T17:20:52Z", "type": "forcePushed"}]}