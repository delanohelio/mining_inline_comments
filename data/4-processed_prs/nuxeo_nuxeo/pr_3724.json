{"pr_number": 3724, "pr_title": "fix-NXP-28484-comment-rest-update", "pr_createdAt": "2020-02-05T16:10:30Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/3724", "timeline": [{"oid": "d43f109d6590e887c28080a293836ff26b82b934", "url": "https://github.com/nuxeo/nuxeo/commit/d43f109d6590e887c28080a293836ff26b82b934", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-05T16:15:54Z", "type": "forcePushed"}, {"oid": "1cda0b9a861f9f03d91ed6bf3b258f3c1596b404", "url": "https://github.com/nuxeo/nuxeo/commit/1cda0b9a861f9f03d91ed6bf3b258f3c1596b404", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-06T09:26:24Z", "type": "forcePushed"}, {"oid": "fd37a93943a6e9162a729a5e990911365234f513", "url": "https://github.com/nuxeo/nuxeo/commit/fd37a93943a6e9162a729a5e990911365234f513", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-06T16:38:23Z", "type": "forcePushed"}, {"oid": "61be093c3382a35eeb08bf6cf99225e6389603b5", "url": "https://github.com/nuxeo/nuxeo/commit/61be093c3382a35eeb08bf6cf99225e6389603b5", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-07T10:19:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMTE3NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376331174", "bodyText": "Is there a reason/preference to use schema check instead a document type, i mean ANNOTATION_DOC_TYPE.equals(doc.getType())", "author": "RSalem07", "createdAt": "2020-02-07T10:54:06Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment-api/src/main/java/org/nuxeo/ecm/platform/comment/api/CommentAdapterFactory.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ *  Contributors:\n+ *      Kevin Leturc <kleturc@nuxeo.com>\n+ */\n+\n+package org.nuxeo.ecm.platform.comment.api;\n+\n+import static org.nuxeo.ecm.platform.comment.api.AnnotationConstants.ANNOTATION_SCHEMA;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_SCHEMA;\n+\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.adapter.DocumentAdapterFactory;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class CommentAdapterFactory implements DocumentAdapterFactory {\n+\n+    @Override\n+    public Comment getAdapter(DocumentModel doc, Class<?> itf) {\n+        if (doc.getDocumentType().hasSchema(ANNOTATION_SCHEMA)) {\n+            return new AnnotationImpl(doc);\n+        } else if (doc.getDocumentType().hasSchema(COMMENT_SCHEMA)) {\n+            return new CommentImpl(doc);\n+        }", "originalCommit": "61be093c3382a35eeb08bf6cf99225e6389603b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2Mzk5Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376463997", "bodyText": "This is the pattern I saw in other adapter.", "author": "kevinleturc", "createdAt": "2020-02-07T15:50:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMTE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2NDI5OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376464298", "bodyText": "I think this is done this way to let user customize the document type without breaking the adapter mechanism for it.", "author": "kevinleturc", "createdAt": "2020-02-07T15:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMTE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMzA2Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376333062", "bodyText": "Worth extracting documentModel.getRef() in a var.", "author": "troger", "createdAt": "2020-02-07T10:58:19Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -95,37 +99,72 @@\n     }\n \n     @Override\n-    public DocumentModel getThreadForComment(DocumentModel comment) {\n-        DocumentRef topLevelDocRef = getTopLevelCommentAncestor(comment.getCoreSession(), comment.getRef());\n-        return comment.getCoreSession().getDocument(topLevelDocRef);\n+    public DocumentRef getTopLevelDocumentRef(CoreSession s, DocumentRef commentRef) {\n+        return CoreInstance.doPrivileged(s, session -> {\n+            if (!session.exists(commentRef)) {\n+                throw new CommentNotFoundException(String.format(\"The comment %s does not exist.\", commentRef));\n+            }\n+\n+            DocumentModel commentDocModel = session.getDocument(commentRef);\n+            DocumentModel documentModel = getTopLevelDocument(session, commentDocModel);\n+\n+            NuxeoPrincipal principal = s.getPrincipal();\n+            if (!session.hasPermission(principal, documentModel.getRef(), SecurityConstants.READ)) {", "originalCommit": "61be093c3382a35eeb08bf6cf99225e6389603b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMzc5NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376333794", "bodyText": "Shouldn't we use CoreSession session for the argument and s for the privileged session.\n=> Consistency with all other methods in the platform where we use session for the CoreSession arg.", "author": "troger", "createdAt": "2020-02-07T11:00:09Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -95,37 +99,72 @@\n     }\n \n     @Override\n-    public DocumentModel getThreadForComment(DocumentModel comment) {\n-        DocumentRef topLevelDocRef = getTopLevelCommentAncestor(comment.getCoreSession(), comment.getRef());\n-        return comment.getCoreSession().getDocument(topLevelDocRef);\n+    public DocumentRef getTopLevelDocumentRef(CoreSession s, DocumentRef commentRef) {", "originalCommit": "61be093c3382a35eeb08bf6cf99225e6389603b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2NzgzNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376467837", "bodyText": "Let's do this change now on AbstractCommentManager/TreeCommentManager only.", "author": "kevinleturc", "createdAt": "2020-02-07T15:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMzc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMzk5Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376333997", "bodyText": "Extract it before the doPrivileged block so that we know directly it's the initial principal?", "author": "troger", "createdAt": "2020-02-07T11:00:41Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/AbstractCommentManager.java", "diffHunk": "@@ -95,37 +99,72 @@\n     }\n \n     @Override\n-    public DocumentModel getThreadForComment(DocumentModel comment) {\n-        DocumentRef topLevelDocRef = getTopLevelCommentAncestor(comment.getCoreSession(), comment.getRef());\n-        return comment.getCoreSession().getDocument(topLevelDocRef);\n+    public DocumentRef getTopLevelDocumentRef(CoreSession s, DocumentRef commentRef) {\n+        return CoreInstance.doPrivileged(s, session -> {\n+            if (!session.exists(commentRef)) {\n+                throw new CommentNotFoundException(String.format(\"The comment %s does not exist.\", commentRef));\n+            }\n+\n+            DocumentModel commentDocModel = session.getDocument(commentRef);\n+            DocumentModel documentModel = getTopLevelDocument(session, commentDocModel);\n+\n+            NuxeoPrincipal principal = s.getPrincipal();", "originalCommit": "61be093c3382a35eeb08bf6cf99225e6389603b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwODczMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376408731", "bodyText": "is this property will be removed in the future, my question is related to fact that in some commit (more in the cleanup one) you use @Deprecated(since = \"11.1\", forRemoval = true)", "author": "RSalem07", "createdAt": "2020-02-07T14:10:49Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment-api/src/main/java/org/nuxeo/ecm/platform/comment/api/CommentImpl.java", "diffHunk": "@@ -20,136 +20,243 @@\n \n package org.nuxeo.ecm.platform.comment.api;\n \n+import static org.nuxeo.common.utils.DateUtils.toCalendar;\n+import static org.nuxeo.common.utils.DateUtils.toInstant;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_ANCESTOR_IDS_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_AUTHOR_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_CREATION_DATE_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_DOC_TYPE;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_MODIFICATION_DATE_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_PARENT_ID_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_TEXT_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.ExternalEntityConstants.EXTERNAL_ENTITY_FACET;\n+import static org.nuxeo.ecm.platform.comment.api.ExternalEntityConstants.EXTERNAL_ENTITY_ID_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.ExternalEntityConstants.EXTERNAL_ENTITY_ORIGIN_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.ExternalEntityConstants.EXTERNAL_ENTITY_PROPERTY;\n+\n import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.Calendar;\n import java.util.Collection;\n import java.util.HashSet;\n-import java.util.Objects;\n \n import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.impl.SimpleDocumentModel;\n \n /**\n  * @since 10.3\n  */\n public class CommentImpl implements Comment, ExternalEntity {\n \n+    /**\n+     * @deprecated since 11.1, not used due to {@link #docModel} usage\n+     */\n+    @Deprecated(since = \"11.1\")\n     protected String id;\n \n+    /**\n+     * @deprecated since 11.1, not used due to {@link #docModel} usage\n+     */\n+    @Deprecated(since = \"11.1\")\n     protected String parentId;\n ", "originalCommit": "61be093c3382a35eeb08bf6cf99225e6389603b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNTIxNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376425217", "bodyText": "IMO, everything we deprecate is to be removed, forRemoval or not.", "author": "troger", "createdAt": "2020-02-07T14:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwODczMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3NjcxMA==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376476710", "bodyText": "Indeed, will remove the introduced forRemoval.\nWe will soon try to rewrite coding style in order to take into account such things.", "author": "kevinleturc", "createdAt": "2020-02-07T16:13:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwODczMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMDY2Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376410666", "bodyText": "i am wondering in the case of backward compatibility where a customer call new CommentImpl ().setId(\"anyId\")  and later in his code c.getId() will be null (java comment on #getId -> // don't fail when docModel is SimpleDocumentModel)", "author": "RSalem07", "createdAt": "2020-02-07T14:14:53Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment-api/src/main/java/org/nuxeo/ecm/platform/comment/api/CommentImpl.java", "diffHunk": "@@ -20,136 +20,243 @@\n \n package org.nuxeo.ecm.platform.comment.api;\n \n+import static org.nuxeo.common.utils.DateUtils.toCalendar;\n+import static org.nuxeo.common.utils.DateUtils.toInstant;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_ANCESTOR_IDS_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_AUTHOR_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_CREATION_DATE_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_DOC_TYPE;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_MODIFICATION_DATE_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_PARENT_ID_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_TEXT_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.ExternalEntityConstants.EXTERNAL_ENTITY_FACET;\n+import static org.nuxeo.ecm.platform.comment.api.ExternalEntityConstants.EXTERNAL_ENTITY_ID_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.ExternalEntityConstants.EXTERNAL_ENTITY_ORIGIN_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.ExternalEntityConstants.EXTERNAL_ENTITY_PROPERTY;\n+\n import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.Calendar;\n import java.util.Collection;\n import java.util.HashSet;\n-import java.util.Objects;\n \n import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.nuxeo.ecm.core.api.DocumentModel;\n+import org.nuxeo.ecm.core.api.impl.SimpleDocumentModel;\n \n /**\n  * @since 10.3\n  */\n public class CommentImpl implements Comment, ExternalEntity {\n \n+    /**\n+     * @deprecated since 11.1, not used due to {@link #docModel} usage\n+     */\n+    @Deprecated(since = \"11.1\")\n     protected String id;\n \n+    /**\n+     * @deprecated since 11.1, not used due to {@link #docModel} usage\n+     */\n+    @Deprecated(since = \"11.1\")\n     protected String parentId;\n \n+    /**\n+     * @deprecated since 11.1, not used due to {@link #docModel} usage\n+     */\n+    @Deprecated(since = \"11.1\")\n     protected Collection<String> ancestorIds = new HashSet<>();\n \n+    /**\n+     * @deprecated since 11.1, not used due to {@link #docModel} usage\n+     */\n+    @Deprecated(since = \"11.1\")\n     protected String author;\n \n+    /**\n+     * @deprecated since 11.1, not used due to {@link #docModel} usage\n+     */\n+    @Deprecated(since = \"11.1\")\n     protected String text;\n \n+    /**\n+     * @deprecated since 11.1, not used due to {@link #docModel} usage\n+     */\n+    @Deprecated(since = \"11.1\")\n     protected Instant creationDate;\n \n+    /**\n+     * @deprecated since 11.1, not used due to {@link #docModel} usage\n+     */\n+    @Deprecated(since = \"11.1\")\n     protected Instant modificationDate;\n \n+    /**\n+     * @deprecated since 11.1, not used due to {@link #docModel} usage\n+     */\n+    @Deprecated(since = \"11.1\")\n     protected String entityId;\n \n+    /**\n+     * @deprecated since 11.1, not used due to {@link #docModel} usage\n+     */\n+    @Deprecated(since = \"11.1\")\n     protected String origin;\n \n+    /**\n+     * @deprecated since 11.1, not used due to {@link #docModel} usage\n+     */\n+    @Deprecated(since = \"11.1\")\n     protected String entity;\n \n+    /**\n+     * {@link DocumentModel} storing the {@link Comment} metadata.\n+     * \n+     * @since 11.1\n+     */\n+    protected DocumentModel docModel;\n+\n+    /**\n+     * @since 11.1\n+     */\n+    public CommentImpl() {\n+        this(SimpleDocumentModel.ofType(COMMENT_DOC_TYPE));\n+    }\n+\n+    /**\n+     * Constructor for the document adapter factory.\n+     *\n+     * @since 11.1\n+     */\n+    protected CommentImpl(DocumentModel docModel) {\n+        this.docModel = docModel;\n+        this.docModel.detach(true);\n+    }\n+\n     @Override\n     public String getId() {\n-        return id;\n+        try {\n+            return docModel.getId();\n+        } catch (UnsupportedOperationException e) {\n+            // don't fail when docModel is SimpleDocumentModel\n+            return null;\n+        }\n     }\n \n     @Override\n+    @Deprecated(since = \"11.1\")\n     public void setId(String id) {\n-        this.id = id;\n+        // not used", "originalCommit": "61be093c3382a35eeb08bf6cf99225e6389603b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1Mjg0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376452845", "bodyText": "I think about it too, except from a test I don't see any valid usage, that's why I didn't provide backward.", "author": "kevinleturc", "createdAt": "2020-02-07T15:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMDY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0NDQ2NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376444464", "bodyText": "i think optionalSet(jn, COMMENT_CREATION_DATE_FIELD, s -> comment.setCreationDate(s == null ? null : Instant.parse(s))); can be replaced by optionalSet(jn, COMMENT_CREATION_DATE_FIELD, s -> comment.setCreationDate(Instant.parse(s))); as the optionalSet checks the jn.has(key) which\n public boolean has(String fieldName) {\n        return this.get(fieldName) != null;\n    }\n\nand i am wondering if we can find / replace the method name  it makes us think to the java.util.Optional -> setIfExists, setIfDefined", "author": "RSalem07", "createdAt": "2020-02-07T15:16:25Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/CommentJsonReader.java", "diffHunk": "@@ -59,27 +60,23 @@ protected Comment readEntity(JsonNode jn) {\n \n     protected static Comment fillCommentEntity(JsonNode jn, Comment comment) {\n         // don't read id from given JsonNode, if needed it is read from path\n-        comment.setParentId(jn.get(COMMENT_PARENT_ID_FIELD).textValue());\n-        comment.setText(jn.get(COMMENT_TEXT_FIELD).textValue());\n-\n-        JsonNode creationDateNode = jn.get(COMMENT_CREATION_DATE_FIELD);\n-        Instant creationDate = creationDateNode != null && !creationDateNode.isNull()\n-                ? Instant.parse(creationDateNode.textValue())\n-                : null;\n-        comment.setCreationDate(creationDate);\n-\n-        JsonNode modificationDateNode = jn.get(COMMENT_MODIFICATION_DATE_FIELD);\n-        Instant modificationDate = modificationDateNode != null && !modificationDateNode.isNull()\n-                ? Instant.parse(modificationDateNode.textValue())\n-                : null;\n-        comment.setModificationDate(modificationDate);\n-\n-        if (jn.has(EXTERNAL_ENTITY_ID_FIELD)) {\n+        optionalSet(jn, COMMENT_PARENT_ID_FIELD, comment::setParentId);\n+        optionalSet(jn, COMMENT_TEXT_FIELD, comment::setText);\n+        optionalSet(jn, COMMENT_CREATION_DATE_FIELD, s -> comment.setCreationDate(s == null ? null : Instant.parse(s)));\n+        optionalSet(jn, COMMENT_MODIFICATION_DATE_FIELD,", "originalCommit": "61be093c3382a35eeb08bf6cf99225e6389603b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MzE1MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376453151", "bodyText": "But s can be null. this.get(fieldName) returns a JsonNode that won't be null if the key exists, but its value can be null.", "author": "troger", "createdAt": "2020-02-07T15:31:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0NDQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1NTAwMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376455002", "bodyText": "Indeed @troger, that's what we found in the javadoc of the method you pasted @RSalem07\n    /**\n     * Method that allows checking whether this node is JSON Object node\n     * and contains value for specified property. If this is the case\n     * (including properties with explicit null values), returns true;\n     * otherwise returns false.\n     *<p>\n     * This method is equivalent to:\n     *<pre>\n     *   node.get(fieldName) != null\n     *</pre>\n     * (since return value of get() is node, not value node contains)\n     *<p>\n     * NOTE: when explicit <code>null</code> values are added, this\n     * method will return <code>true</code> for such properties.\n     *\n     * @param fieldName Name of element to check\n     * \n     * @return True if this node is a JSON Object node, and has a property\n     *   entry with specified name (with any value, including null value)\n     */\n    public boolean has(String fieldName) {\n        return get(fieldName) != null;\n    }", "author": "kevinleturc", "createdAt": "2020-02-07T15:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0NDQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1NTk3OQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376455979", "bodyText": "yep i checked too after the thomas comment", "author": "RSalem07", "createdAt": "2020-02-07T15:36:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0NDQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1NjU2Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376456562", "bodyText": "@kevinleturc and what about the name, wdyt:\n\nand i am wondering if we can find / replace the method name it makes us think to the java.util.Optional -> setIfExists, setIfDefined\n\ni mean perhaps replace it by setIfExists ...", "author": "RSalem07", "createdAt": "2020-02-07T15:37:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0NDQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1NzU3OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376457578", "bodyText": "Was thinking about it, yes why not for setIfExists", "author": "kevinleturc", "createdAt": "2020-02-07T15:39:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ0NDQ2NA=="}], "type": "inlineReview"}, {"oid": "f5713cd65906b1fcf797a8c664b905f8740ccd8e", "url": "https://github.com/nuxeo/nuxeo/commit/f5713cd65906b1fcf797a8c664b905f8740ccd8e", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-07T16:00:54Z", "type": "forcePushed"}, {"oid": "c80f6eafc7905dc8b0dedaa54d37abbd863bcf2c", "url": "https://github.com/nuxeo/nuxeo/commit/c80f6eafc7905dc8b0dedaa54d37abbd863bcf2c", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-07T16:01:14Z", "type": "forcePushed"}, {"oid": "3ed64259cc9adc59324d337bee2481532785ae8b", "url": "https://github.com/nuxeo/nuxeo/commit/3ed64259cc9adc59324d337bee2481532785ae8b", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-07T16:30:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NjQ0Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376956443", "bodyText": "I am wondering if we can call directly the getTopLevelDocument as if i am not wrong do the same things", "author": "RSalem07", "createdAt": "2020-02-10T09:47:39Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/CommentManagerImpl.java", "diffHunk": "@@ -139,16 +138,29 @@ public CommentManagerImpl(CommentServiceConfig config) {\n     public DocumentModel createComment(DocumentModel docModel, String comment, String author) {\n         try (CloseableCoreSession session = CoreInstance.openCoreSessionSystem(docModel.getRepositoryName())) {\n             DocumentModel commentDM = session.createDocumentModel(COMMENT_DOC_TYPE);\n-            commentDM.setPropertyValue(CommentsConstants.COMMENT_TEXT, comment);\n-            commentDM.setPropertyValue(CommentsConstants.COMMENT_AUTHOR, author);\n-            commentDM.setPropertyValue(CommentsConstants.COMMENT_CREATION_DATE, Calendar.getInstance());\n+            commentDM.setPropertyValue(COMMENT_TEXT_PROPERTY, comment);\n+            commentDM.setPropertyValue(COMMENT_AUTHOR_PROPERTY, author);\n+            commentDM.setPropertyValue(COMMENT_CREATION_DATE_PROPERTY, Calendar.getInstance());\n             commentDM = internalCreateComment(session, docModel, commentDM, null);\n             session.save();\n \n             return commentDM;\n         }\n     }\n \n+    @Override\n+    public DocumentModel getThreadForComment(DocumentModel comment) throws CommentSecurityException {\n+        List<DocumentModel> threads = getDocumentsForComment(comment);\n+        if (threads.size() > 0) {\n+            DocumentModel thread = threads.get(0);\n+            while (thread.getType().equals(\"Post\") || thread.getType().equals(COMMENT_DOC_TYPE)) {\n+                thread = getThreadForComment(thread);\n+            }\n+            return thread;\n+        }\n+        return null;\n+    }", "originalCommit": "3ed64259cc9adc59324d337bee2481532785ae8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwMTQ0NQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r378201445", "bodyText": "Probably, as the subject is complex, I would rather go back to the original code where we know its limits. That's why I rollbacked it.", "author": "kevinleturc", "createdAt": "2020-02-12T11:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NjQ0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2MTk1NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376961954", "bodyText": "Is there a reason to remove this version of the thread comment calculation and go back to the recursion once. As discussed initially the idea was to avoid using the recursive algo", "author": "RSalem07", "createdAt": "2020-02-10T09:57:07Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/PropertyCommentManager.java", "diffHunk": "@@ -428,37 +442,38 @@ protected String getCommentContainerPath(CoreSession session, String commentedDo\n         });\n     }\n \n+    // former top level document method\n     protected DocumentRef getAncestorRef(CoreSession session, DocumentModel documentModel) {\n-        DocumentModel ancestorComment = getThreadForComment(session, documentModel);\n-        return ancestorComment.getRef();\n+        if (!documentModel.hasSchema(COMMENT_SCHEMA)) {\n+            return documentModel.getRef();\n+        }\n+        // thread is the higher comment in a succession of replies\n+        DocumentModel thread = getThreadForComment(session, documentModel);\n+        return new IdRef((String) thread.getPropertyValue(COMMENT_PARENT_ID_PROPERTY));\n     }\n \n     protected DocumentModel getThreadForComment(CoreSession s, DocumentModel comment) throws CommentSecurityException {\n         NuxeoPrincipal principal = s.getPrincipal();\n         return CoreInstance.doPrivileged(s, session -> {\n-            // Fetch the document in a case where it is not associated to an open session\n-            DocumentModel documentModel = session.getDocument(comment.getRef());\n-            while (documentModel.hasSchema(COMMENT_SCHEMA) || HIDDEN_FOLDER_TYPE.equals(documentModel.getType())) {\n-                documentModel = session.getDocument(\n-                        new IdRef((String) documentModel.getPropertyValue(COMMENT_PARENT_ID)));\n+            DocumentModel thread = comment;\n+            DocumentModel parent = s.getDocument(\n+                    new IdRef((String) thread.getPropertyValue(COMMENT_PARENT_ID_PROPERTY)));\n+            if (parent.hasSchema(COMMENT_SCHEMA)) {\n+                thread = getThreadForComment(parent);", "originalCommit": "3ed64259cc9adc59324d337bee2481532785ae8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAwNjYyMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r377006622", "bodyText": "Yes, by reading it again, I wasn't able to say easily if the behavior has changed or not. After a moment of analysis, I though behavior has changed and as the class is deprecated I rollbacked.", "author": "kevinleturc", "createdAt": "2020-02-10T11:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2MTk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3MDY4MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r376970681", "bodyText": "perhaps i am missing something, but if i remember when i did the work on comments, reviews that i had suggests to put session as a parameter in the lambda", "author": "RSalem07", "createdAt": "2020-02-10T10:13:40Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment/src/main/java/org/nuxeo/ecm/platform/comment/impl/TreeCommentManager.java", "diffHunk": "@@ -107,132 +111,143 @@\n      * Counts how many comments where made by a specific user on a specific document.\n      */\n     protected static final String QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR_AND_AUTHOR = //\n-            QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR + \" AND \" + COMMENT_AUTHOR + \" = '%s'\";\n-\n-    /** @since 11.1 **/\n-    public static final String COMMENT_RELATED_TEXT_ID = \"commentRelatedTextId_%s\";\n+            QUERY_GET_COMMENTS_UUID_BY_COMMENT_ANCESTOR + \" AND \" + COMMENT_AUTHOR_PROPERTY + \" = '%s'\";\n \n     @Override\n-    public List<DocumentModel> getComments(CoreSession s, DocumentModel docModel) {\n+    public List<DocumentModel> getComments(CoreSession session, DocumentModel docModel) {\n         // Check permissions\n-        checkReadCommentPermissions(s, docModel.getRef());\n-        return CoreInstance.doPrivileged(s, session -> {\n-            PageProvider<DocumentModel> pageProvider = getCommentsPageProvider(session, docModel, null, null, true);\n+        checkReadCommentPermissions(session, docModel.getRef());\n+        return CoreInstance.doPrivileged(session, s -> {", "originalCommit": "3ed64259cc9adc59324d337bee2481532785ae8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAwNzUxOQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r377007519", "bodyText": "Indeed, @troger suggested to inverse the logic because we're used to have session as the user session. We did only the change on the non deprecated class.", "author": "kevinleturc", "createdAt": "2020-02-10T11:29:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3MDY4MQ=="}], "type": "inlineReview"}, {"oid": "a5947a7d091bf26b609e4ca718f5d4061e82ae1a", "url": "https://github.com/nuxeo/nuxeo/commit/a5947a7d091bf26b609e4ca718f5d4061e82ae1a", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-10T16:27:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE0MTkyNw==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r377141927", "bodyText": "3 constants are announced in the comment but you only introduce 2. I guess \"schema\" can be removed from the comment or it would be declared like: f098976#diff-405a1bb1a9676b44379522114af2d70fR57 ?", "author": "NourNuxeo", "createdAt": "2020-02-10T15:42:15Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment-api/src/main/java/org/nuxeo/ecm/platform/comment/api/AnnotationConstants.java", "diffHunk": "@@ -28,13 +28,39 @@ private AnnotationConstants() {\n         // utility class\n     }\n \n+    // --------------------------------------------\n+    // Document type, schema and property constants\n+    // --------------------------------------------\n+\n     public static final String ANNOTATION_DOC_TYPE = \"Annotation\";\n \n     public static final String ANNOTATION_XPATH_PROPERTY = \"annotation:xpath\";", "originalCommit": "f09897626983c670011fad2e4d70b7639692c0f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5NjE4Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r377196182", "bodyText": "I've the schema now \ud83d\ude09", "author": "kevinleturc", "createdAt": "2020-02-10T17:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE0MTkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE0NjM2NA==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r377146364", "bodyText": "No Javadoc ?", "author": "NourNuxeo", "createdAt": "2020-02-10T15:49:00Z", "path": "nuxeo-common/src/main/java/org/nuxeo/common/utils/DateUtils.java", "diffHunk": "@@ -131,13 +133,29 @@ public static final DateTimeFormatter robustOfPattern(String pattern) {\n                                              .withZone(ZoneOffset.UTC);\n     }\n \n+    public static Calendar toCalendar(Instant instant) {", "originalCommit": "3ed64259cc9adc59324d337bee2481532785ae8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwNDU3Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r377204576", "bodyText": "No because the signature is explicit and the class was introduced in 11.1", "author": "kevinleturc", "createdAt": "2020-02-10T17:23:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE0NjM2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE0NjczMg==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r377146732", "bodyText": "Same question as for 3ed6425#diff-6320fcbbad5b8f7ec8bccf28b24fb434R136", "author": "NourNuxeo", "createdAt": "2020-02-10T15:49:34Z", "path": "nuxeo-common/src/main/java/org/nuxeo/common/utils/DateUtils.java", "diffHunk": "@@ -131,13 +133,29 @@ public static final DateTimeFormatter robustOfPattern(String pattern) {\n                                              .withZone(ZoneOffset.UTC);\n     }\n \n+    public static Calendar toCalendar(Instant instant) {\n+        if (instant == null) {\n+            return null;\n+        }\n+        // an Instant is on UTC by definition\n+        var zdt = ZonedDateTime.ofInstant(instant, ZoneOffset.UTC);\n+        return GregorianCalendar.from(zdt);\n+    }\n+\n     public static Date toDate(ZonedDateTime zdt) {\n         if (zdt == null) {\n             return null;\n         }\n         return Date.from(zdt.toInstant());\n     }\n \n+    public static Instant toInstant(Calendar calendar) {", "originalCommit": "3ed64259cc9adc59324d337bee2481532785ae8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwNDU5OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r377204598", "bodyText": "No because the signature is explicit and the class was introduced in 11.1", "author": "kevinleturc", "createdAt": "2020-02-10T17:23:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE0NjczMg=="}], "type": "inlineReview"}, {"oid": "e5ed18f4577dfda69a10b7f43d8f457fdc16d4fe", "url": "https://github.com/nuxeo/nuxeo/commit/e5ed18f4577dfda69a10b7f43d8f457fdc16d4fe", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-10T17:22:21Z", "type": "forcePushed"}, {"oid": "1fa4974d89e21e5222cc14a44e590c568ea15d63", "url": "https://github.com/nuxeo/nuxeo/commit/1fa4974d89e21e5222cc14a44e590c568ea15d63", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-11T08:21:08Z", "type": "forcePushed"}, {"oid": "711052031938d42ea85f4b0439225ac2840a6fdd", "url": "https://github.com/nuxeo/nuxeo/commit/711052031938d42ea85f4b0439225ac2840a6fdd", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-12T11:42:40Z", "type": "forcePushed"}, {"oid": "1ae5a88663dbd2f81edd208cbc0ccfa9e9ede781", "url": "https://github.com/nuxeo/nuxeo/commit/1ae5a88663dbd2f81edd208cbc0ccfa9e9ede781", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-13T09:55:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3MzA0Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r378773042", "bodyText": "Maybe I would stick with a sentence starting with a verb like the other methods.", "author": "NourNuxeo", "createdAt": "2020-02-13T10:27:20Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment-api/src/main/java/org/nuxeo/ecm/platform/comment/api/Comment.java", "diffHunk": "@@ -126,4 +132,10 @@\n      * @param modificationDate the modification date\n      */\n     void setModificationDate(Instant modificationDate);\n+\n+    /**\n+     * @return the document model backing this pojo", "originalCommit": "1ae5a88663dbd2f81edd208cbc0ccfa9e9ede781", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMzODk3MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r379338971", "bodyText": "Sure \ud83d\udc4d", "author": "kevinleturc", "createdAt": "2020-02-14T09:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3MzA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM1MjA4OA==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r379352088", "bodyText": "I put both, like other methods.", "author": "kevinleturc", "createdAt": "2020-02-14T10:18:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3MzA0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwMTY2MQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r378801661", "bodyText": "just realized it was added in the last commit instead of rework constants location", "author": "NourNuxeo", "createdAt": "2020-02-13T11:23:32Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment-api/src/main/java/org/nuxeo/ecm/platform/comment/api/AnnotationConstants.java", "diffHunk": "@@ -34,14 +34,17 @@ private AnnotationConstants() {\n \n     public static final String ANNOTATION_DOC_TYPE = \"Annotation\";\n \n+    /** @since 11.1 */\n+    public static final String ANNOTATION_SCHEMA = \"annotation\";\n+", "originalCommit": "1ae5a88663dbd2f81edd208cbc0ccfa9e9ede781", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMzNzM1Nw==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r379337357", "bodyText": "Will fix it, thanks.", "author": "kevinleturc", "createdAt": "2020-02-14T09:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwMTY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM0NzM0Mw==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r379347343", "bodyText": "In fact this is not a rework, the annotation schema wasn't defined previously, it was introduced by these changes.", "author": "kevinleturc", "createdAt": "2020-02-14T10:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwMTY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM0OTg4MA==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r379349880", "bodyText": "Okay ! Got confused as the comment came first !", "author": "NourNuxeo", "createdAt": "2020-02-14T10:14:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwMTY2MQ=="}], "type": "inlineReview"}, {"oid": "da61d9a6c26e50b048512d236794d892c54f43b9", "url": "https://github.com/nuxeo/nuxeo/commit/da61d9a6c26e50b048512d236794d892c54f43b9", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-14T10:06:49Z", "type": "forcePushed"}, {"oid": "45653328f61107929bf34c603f55d318dad387a1", "url": "https://github.com/nuxeo/nuxeo/commit/45653328f61107929bf34c603f55d318dad387a1", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-14T10:18:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM2MjYwMw==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r379362603", "bodyText": "unused ?", "author": "NourNuxeo", "createdAt": "2020-02-14T10:40:42Z", "path": "nuxeo-features/nuxeo-platform-comment/nuxeo-platform-comment-api/src/main/java/org/nuxeo/ecm/platform/comment/api/CommentImpl.java", "diffHunk": "@@ -20,136 +20,243 @@\n \n package org.nuxeo.ecm.platform.comment.api;\n \n+import static org.nuxeo.common.utils.DateUtils.toCalendar;\n+import static org.nuxeo.common.utils.DateUtils.toInstant;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_ANCESTOR_IDS_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_AUTHOR_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_CREATION_DATE_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_DOC_TYPE;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_MODIFICATION_DATE_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_PARENT_ID_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.CommentConstants.COMMENT_TEXT_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.ExternalEntityConstants.EXTERNAL_ENTITY_FACET;\n+import static org.nuxeo.ecm.platform.comment.api.ExternalEntityConstants.EXTERNAL_ENTITY_ID_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.ExternalEntityConstants.EXTERNAL_ENTITY_ORIGIN_PROPERTY;\n+import static org.nuxeo.ecm.platform.comment.api.ExternalEntityConstants.EXTERNAL_ENTITY_PROPERTY;\n+\n import java.time.Instant;\n+import java.util.Arrays;", "originalCommit": "45653328f61107929bf34c603f55d318dad387a1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3NzEwMQ==", "url": "https://github.com/nuxeo/nuxeo/pull/3724#discussion_r379377101", "bodyText": "this import is unused", "author": "RSalem07", "createdAt": "2020-02-14T11:14:07Z", "path": "nuxeo-core/nuxeo-core-api/src/main/java/org/nuxeo/ecm/core/api/impl/SimpleDocumentModel.java", "diffHunk": "@@ -23,12 +23,14 @@\n import static org.nuxeo.ecm.core.schema.types.ComplexTypeImpl.canonicalXPath;\n \n import java.io.Serializable;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;", "originalCommit": "7063a72e12dfb6aaf95bee39db115f43202865dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "714af584f35e81dfab8c373d0331d9e0bc7b6a9a", "url": "https://github.com/nuxeo/nuxeo/commit/714af584f35e81dfab8c373d0331d9e0bc7b6a9a", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-14T12:36:31Z", "type": "forcePushed"}, {"oid": "ac1d51592a4598e80a47f99b0d7b53948ae291ae", "url": "https://github.com/nuxeo/nuxeo/commit/ac1d51592a4598e80a47f99b0d7b53948ae291ae", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-14T12:39:33Z", "type": "forcePushed"}, {"oid": "f44117796b33eae984623ac4df010afee6a67bc5", "url": "https://github.com/nuxeo/nuxeo/commit/f44117796b33eae984623ac4df010afee6a67bc5", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-17T09:32:53Z", "type": "forcePushed"}, {"oid": "20f532ac06a313b209b3606faa7752ef9ef61567", "url": "https://github.com/nuxeo/nuxeo/commit/20f532ac06a313b209b3606faa7752ef9ef61567", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-19T09:49:02Z", "type": "forcePushed"}, {"oid": "7303375cb49a9c494b9dd509f6f2f537a7fecfbd", "url": "https://github.com/nuxeo/nuxeo/commit/7303375cb49a9c494b9dd509f6f2f537a7fecfbd", "message": "NXP-28597: Cleanup / Format", "committedDate": "2020-02-19T10:00:24Z", "type": "commit"}, {"oid": "5ed86e49bc59777846638944f0feae16cd321758", "url": "https://github.com/nuxeo/nuxeo/commit/5ed86e49bc59777846638944f0feae16cd321758", "message": "NXP-28597: Implements facet APIs", "committedDate": "2020-02-19T10:00:27Z", "type": "commit"}, {"oid": "0df8fd5ea5434cdaad067e6a7262ecf52f3ebb68", "url": "https://github.com/nuxeo/nuxeo/commit/0df8fd5ea5434cdaad067e6a7262ecf52f3ebb68", "message": "NXP-28484: Cleanup / Format", "committedDate": "2020-02-19T10:00:27Z", "type": "commit"}, {"oid": "83005bd30360568da961c675f047c15e49057686", "url": "https://github.com/nuxeo/nuxeo/commit/83005bd30360568da961c675f047c15e49057686", "message": "NXP-28484: Rework constants location", "committedDate": "2020-02-19T10:00:28Z", "type": "commit"}, {"oid": "f21a483e610db95e664621ce9b25d3b77342f153", "url": "https://github.com/nuxeo/nuxeo/commit/f21a483e610db95e664621ce9b25d3b77342f153", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-19T10:00:28Z", "type": "commit"}, {"oid": "f21a483e610db95e664621ce9b25d3b77342f153", "url": "https://github.com/nuxeo/nuxeo/commit/f21a483e610db95e664621ce9b25d3b77342f153", "message": "NXP-28484: Allow to partially update comments/annotations through REST", "committedDate": "2020-02-19T10:00:28Z", "type": "forcePushed"}]}