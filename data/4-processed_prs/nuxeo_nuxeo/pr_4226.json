{"pr_number": 4226, "pr_title": "NXP-29389: Don't crash when deserializing a non valid date regarding DST", "pr_createdAt": "2020-07-24T12:25:49Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4226", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyNDExMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4226#discussion_r460024110", "bodyText": "timeZone.toTimeZone() in a var?", "author": "ataillefer", "createdAt": "2020-07-24T12:34:05Z", "path": "addons-core/nuxeo-core-storage-marklogic/src/main/java/org/nuxeo/ecm/core/storage/marklogic/MarkLogicHelper.java", "diffHunk": "@@ -47,13 +49,23 @@\n     public static final String SCHEMA_MARKLOGIC_DELIMITER = \"__\";\n \n     public static String serializeCalendar(Calendar cal) {\n-        return DateTime.now().withMillis(cal.getTimeInMillis()).toString(DATE_TIME_FORMATTER);\n+        return serializeCalendar(cal, DateTimeZone.getDefault());\n+    }\n+\n+    // exists for tests\n+    protected static String serializeCalendar(Calendar cal, DateTimeZone timeZone) {\n+        return DateTime.now().withMillis(cal.getTimeInMillis()).toString(DATE_TIME_FORMATTER.withZone(timeZone));\n     }\n \n     public static Calendar deserializeCalendar(String calString) {\n-        DateTime dateTime = DATE_TIME_FORMATTER.parseDateTime(calString);\n-        Calendar cal = Calendar.getInstance();\n-        cal.setTime(dateTime.toDate());\n+        return deserializeCalendar(calString, DateTimeZone.getDefault());\n+    }\n+\n+    // exists for tests\n+    protected static Calendar deserializeCalendar(String calString, DateTimeZone timeZone) {\n+        LocalDateTime dateTime = DATE_TIME_FORMATTER.parseLocalDateTime(calString);\n+        Calendar cal = Calendar.getInstance(timeZone.toTimeZone());\n+        cal.setTime(dateTime.toDate(timeZone.toTimeZone()));", "originalCommit": "6071a71a5a03bd1a8a458cca365108e32c3d4f44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNDg0Ng==", "url": "https://github.com/nuxeo/nuxeo/pull/4226#discussion_r460034846", "bodyText": "Static imports for all the Calendar. constants and DateTimeZone.UTC maybe?", "author": "efge", "createdAt": "2020-07-24T12:56:07Z", "path": "addons-core/nuxeo-core-storage-marklogic/src/test/java/org/nuxeo/ecm/core/storage/marklogic/TestMarkLogicHelper.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Kevin Leturc\n+ */\n+package org.nuxeo.ecm.core.storage.marklogic;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Calendar;\n+\n+import org.joda.time.DateTimeZone;\n+import org.junit.Test;\n+\n+/**\n+ * @since 10.10-HF\n+ */\n+public class TestMarkLogicHelper {\n+\n+    private static final DateTimeZone EUROPE_PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    @Test\n+    public void testSerializeCalendar() {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.set(2020, Calendar.JULY, 24, 12, 59, 34);\n+        calendar.set(Calendar.MILLISECOND, 459);\n+\n+        String calendarString = MarkLogicHelper.serializeCalendar(calendar);\n+        assertEquals(\"2020-07-24T12:59:34.459\", calendarString);\n+    }\n+\n+    @Test\n+    public void testSerializeCalendarUTC() {\n+        Calendar calendar = Calendar.getInstance(DateTimeZone.UTC.toTimeZone());\n+        calendar.set(2020, Calendar.JULY, 24, 12, 59, 34);\n+        calendar.set(Calendar.MILLISECOND, 459);", "originalCommit": "6071a71a5a03bd1a8a458cca365108e32c3d4f44", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "12e946244bbc7053ccab6d71c44927d9d64b8e37", "url": "https://github.com/nuxeo/nuxeo/commit/12e946244bbc7053ccab6d71c44927d9d64b8e37", "message": "NXP-29389: Don't crash when deserializing a non valid date regarding DST", "committedDate": "2020-07-24T13:17:04Z", "type": "forcePushed"}, {"oid": "cf90ebec8bf639787de5fe9677e435cead7518a5", "url": "https://github.com/nuxeo/nuxeo/commit/cf90ebec8bf639787de5fe9677e435cead7518a5", "message": "NXP-29389: Don't crash when deserializing a non valid date regarding DST", "committedDate": "2020-08-06T10:19:59Z", "type": "commit"}, {"oid": "cf90ebec8bf639787de5fe9677e435cead7518a5", "url": "https://github.com/nuxeo/nuxeo/commit/cf90ebec8bf639787de5fe9677e435cead7518a5", "message": "NXP-29389: Don't crash when deserializing a non valid date regarding DST", "committedDate": "2020-08-06T10:19:59Z", "type": "forcePushed"}]}