{"pr_number": 4083, "pr_title": "fix-NXP-29157-skip-aggregates-10.10", "pr_createdAt": "2020-05-27T14:02:08Z", "pr_url": "https://github.com/nuxeo/nuxeo/pull/4083", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1OTgwMg==", "url": "https://github.com/nuxeo/nuxeo/pull/4083#discussion_r431359802", "bodyText": "This part doesn't seem tested in this PR. This is automation-client so I can understand if it's too complex.\nCan this be \"aggregates\" instead of \"aggregations\" for consistency?", "author": "efge", "createdAt": "2020-05-27T18:36:08Z", "path": "nuxeo-features/nuxeo-automation/nuxeo-automation-client/src/main/java/org/nuxeo/ecm/automation/client/jaxrs/spi/marshallers/DocumentsMarshaller.java", "diffHunk": "@@ -92,6 +92,8 @@ protected Documents readPaginableDocuments(JsonParser jp) throws IOException {\n                 docs.setCurrentPageIndex(jp.getIntValue());\n             } else if (\"entries\".equals(key)) {\n                 readDocumentEntries(jp, docs);\n+            } else if (\"aggregations\".equals(key)) {", "originalCommit": "9cfb0dd0f2528dbefe25ccd7085760f2c1e4dcf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0NjU1Mg==", "url": "https://github.com/nuxeo/nuxeo/pull/4083#discussion_r431446552", "bodyText": "TBH this is just so I can check whether the skipAggregates flag is working since our automation client returns pageable documents which did not include any aggregates information and I couldn't get it to return a \"raw\" JsonNode like I did with the HttpAutomationClient in master.", "author": "nelsonsilva", "createdAt": "2020-05-27T21:15:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1OTgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY4MDg2OA==", "url": "https://github.com/nuxeo/nuxeo/pull/4083#discussion_r431680868", "bodyText": "Can't change it to \"aggregates\" as it would break the REST API. This has been called \"aggregations\" since the beginning \ud83e\udd37\u200d\u2642\ufe0f", "author": "nelsonsilva", "createdAt": "2020-05-28T08:50:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1OTgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2MjAwMA==", "url": "https://github.com/nuxeo/nuxeo/pull/4083#discussion_r431362000", "bodyText": "Please add a newline.", "author": "efge", "createdAt": "2020-05-27T18:40:17Z", "path": "nuxeo-features/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/test/java/org/nuxeo/elasticsearch/test/rest/AutomationESDocumentsTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * (C) Copyright 20202 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.nuxeo.elasticsearch.test.rest;\n+\n+import javax.inject.Inject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.nuxeo.ecm.automation.client.Session;\n+import org.nuxeo.ecm.automation.client.model.PaginableDocuments;\n+import org.nuxeo.ecm.automation.core.util.Properties;\n+import org.nuxeo.ecm.automation.core.operations.services.DocumentPageProviderOperation;\n+import org.nuxeo.ecm.automation.test.EmbeddedAutomationServerFeature;\n+import org.nuxeo.ecm.core.test.annotations.Granularity;\n+import org.nuxeo.ecm.core.test.annotations.RepositoryConfig;\n+import org.nuxeo.ecm.platform.query.api.PageProvider;\n+import org.nuxeo.ecm.restapi.test.RestServerInit;\n+import org.nuxeo.elasticsearch.test.RepositoryElasticSearchFeature;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @since 11.1\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features({EmbeddedAutomationServerFeature.class, RepositoryElasticSearchFeature.class})\n+@Deploy(\"org.nuxeo.elasticsearch.core.test:elasticsearch-test-contrib.xml\")\n+@Deploy(\"org.nuxeo.elasticsearch.core.test:pageprovider-test-contrib.xml\")\n+@Deploy(\"org.nuxeo.elasticsearch.core.test:pageprovider2-test-contrib.xml\")\n+@Deploy(\"org.nuxeo.elasticsearch.core.test:pageprovider2-coretype-test-contrib.xml\")\n+@RepositoryConfig(cleanup = Granularity.METHOD, init = RestServerInit.class)\n+public class AutomationESDocumentsTest {\n+\n+    @Inject\n+    protected Session session;\n+\n+    @Test\n+    public void iCanPerformESQLPageProviderOperationOnRepository() throws Exception {\n+        Properties namedParameters = new Properties();\n+        namedParameters.put(\"defaults:dc_nature_agg\", \"[\\\"article\\\"]\");\n+        PaginableDocuments docs = (PaginableDocuments) session.newRequest(DocumentPageProviderOperation.ID)\n+                .set(\"namedParameters\", namedParameters)\n+                .set(\"providerName\", \"default_search\")\n+                .execute();\n+        assertEquals(docs.getPageSize(), 20);\n+        assertEquals(docs.getResultsCount(), 11);\n+    }\n+\n+    @Test\n+    public void iCanSkipAggregatesOnESQLPageProviderOperationOnRepository() throws Exception {\n+        PaginableDocuments docs = (PaginableDocuments) session.newRequest(DocumentPageProviderOperation.ID)\n+                .set(\"providerName\", \"aggregates_1\")\n+                .execute();\n+        assertTrue(docs.hasAggregates());\n+\n+        docs = (PaginableDocuments) session.newRequest(DocumentPageProviderOperation.ID)\n+                .setHeader(PageProvider.SKIP_AGGREGATES_PROP, \"true\")\n+                .set(\"providerName\", \"aggregates_1\")\n+                .execute();\n+        assertFalse(docs.hasAggregates());\n+    }\n+}", "originalCommit": "9cfb0dd0f2528dbefe25ccd7085760f2c1e4dcf6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b347f932ae57435a113b5702ffc67fb2f92a3abf", "url": "https://github.com/nuxeo/nuxeo/commit/b347f932ae57435a113b5702ffc67fb2f92a3abf", "message": "NXP-29157: allow skipping aggregations with http header", "committedDate": "2020-05-28T08:45:15Z", "type": "forcePushed"}, {"oid": "77d38f22d755af5977a4259d9b250532877e36c6", "url": "https://github.com/nuxeo/nuxeo/commit/77d38f22d755af5977a4259d9b250532877e36c6", "message": "NXP-29157: allow skipping aggregations with http header", "committedDate": "2020-05-28T08:49:17Z", "type": "forcePushed"}, {"oid": "3e7bc35d4d6e66d721bf8384275d81f4b180e812", "url": "https://github.com/nuxeo/nuxeo/commit/3e7bc35d4d6e66d721bf8384275d81f4b180e812", "message": "NXP-29157: allow skipping aggregations with http header", "committedDate": "2020-05-28T08:51:10Z", "type": "forcePushed"}, {"oid": "e46baae805c7157f8deffad78a542a2b545025bd", "url": "https://github.com/nuxeo/nuxeo/commit/e46baae805c7157f8deffad78a542a2b545025bd", "message": "NXP-29157: allow skipping aggregations with http header", "committedDate": "2020-05-28T09:10:07Z", "type": "commit"}, {"oid": "e46baae805c7157f8deffad78a542a2b545025bd", "url": "https://github.com/nuxeo/nuxeo/commit/e46baae805c7157f8deffad78a542a2b545025bd", "message": "NXP-29157: allow skipping aggregations with http header", "committedDate": "2020-05-28T09:10:07Z", "type": "forcePushed"}]}