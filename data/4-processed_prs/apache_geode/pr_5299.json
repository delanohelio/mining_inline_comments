{"pr_number": 5299, "pr_title": "GEODE-8200: enhance GfshRule to specify a working dir", "pr_createdAt": "2020-06-24T21:06:00Z", "pr_url": "https://github.com/apache/geode/pull/5299", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIyNjMzNA==", "url": "https://github.com/apache/geode/pull/5299#discussion_r445226334", "bodyText": "For code readability, it is better to have some meaningful names for the ports. Before the code change, it is easy to identify the purpose of a port with the gfsh option in the code. Now it is not that straight forward to tell ports[0] is locator port. port[2] is JMX port and ports[1] is HTTP port, unless you see to the definition of startLocatorCommand.", "author": "jchen21", "createdAt": "2020-06-24T23:29:24Z", "path": "geode-assembly/src/upgradeTest/java/org/apache/geode/management/DeploymentManagementUpgradeTest.java", "diffHunk": "@@ -55,16 +84,16 @@ public static void beforeClass() throws Exception {\n \n   @Test\n   public void newLocatorCanReadOldConfigurationData() throws IOException {\n-    File workingDir = tempFolder.newFolder();\n     int[] ports = AvailablePortHelper.getRandomAvailableTCPPorts(3);\n-    oldGfsh.execute(\"start locator --name=test --port=\" + ports[0] + \" --http-service-port=\"\n-        + ports[1] + \" --dir=\" + workingDir.getAbsolutePath() + \" --J=-Dgemfire.jmx-manager-port=\"\n-        + ports[2],\n-        \"deploy --jar=\" + clusterJar.getAbsolutePath(),\n-        \"shutdown --include-locators\");\n+    GfshExecution execute =\n+        GfshScript.of(startLocatorCommand(\"test\", ports[0], ports[2], ports[1], 0))", "originalCommit": "4aee19b5f06ba214b46f186df065f66f9e71f11e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ffdc11291671dc1b055069d296c44ab5c96701e7", "url": "https://github.com/apache/geode/commit/ffdc11291671dc1b055069d296c44ab5c96701e7", "message": "rework LocatorWithCustomLogConfigAcceptanceTest and ServerWithCustomLogConfigAcceptanceTest", "committedDate": "2020-06-25T05:27:17Z", "type": "forcePushed"}, {"oid": "536d59f6ea8eb088f6619bd7495a90a3ca6654ed", "url": "https://github.com/apache/geode/commit/536d59f6ea8eb088f6619bd7495a90a3ca6654ed", "message": "GEODE-8200: enhance GfshRule to specify a working dir\n\n* improve some backward compatibility test to cover more versions.", "committedDate": "2020-06-25T14:42:30Z", "type": "commit"}, {"oid": "536d59f6ea8eb088f6619bd7495a90a3ca6654ed", "url": "https://github.com/apache/geode/commit/536d59f6ea8eb088f6619bd7495a90a3ca6654ed", "message": "GEODE-8200: enhance GfshRule to specify a working dir\n\n* improve some backward compatibility test to cover more versions.", "committedDate": "2020-06-25T14:42:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5MTY5MA==", "url": "https://github.com/apache/geode/pull/5299#discussion_r445691690", "bodyText": "These new static methods don't really fit well in GfshRule. I think you should probably move them to two new classes (probably not a rule) named something like ServerCommandBuilder and LocatorCommandBuilder, and explode the parameters to each have their own setter type method:\nString startServerCommand = new ServerCommandBuilder()\n    .withPort(port)\n    .withLocator(locatorPort)\n    .create(name);", "author": "kirklund", "createdAt": "2020-06-25T16:37:51Z", "path": "geode-junit/src/main/java/org/apache/geode/test/junit/rules/gfsh/GfshRule.java", "diffHunk": "@@ -199,4 +220,23 @@ private void stopMembers(GfshExecution gfshExecution) {\n     }\n     execute(GfshScript.of(stopMemberScripts).withName(\"Stop-Members\"));\n   }\n+\n+  public static String startServerCommand(String name, int port, int connectedLocatorPort) {", "originalCommit": "536d59f6ea8eb088f6619bd7495a90a3ca6654ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5MzE2OA==", "url": "https://github.com/apache/geode/pull/5299#discussion_r445693168", "bodyText": "There are actually a couple existing classes like this that we could move to geode-junit and make any necessary changes:\ngeode-core/src/integrationTest/java/org/apache/geode/distributed/LocatorCommand.java\ngeode-core/src/integrationTest/java/org/apache/geode/distributed/ServerCommand.java", "author": "kirklund", "createdAt": "2020-06-25T16:40:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5MTY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5NTEyNA==", "url": "https://github.com/apache/geode/pull/5299#discussion_r445695124", "bodyText": "We could commit what you have ready and then make further changes. I'll go ahead and approve and let you decide.", "author": "kirklund", "createdAt": "2020-06-25T16:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5MTY5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcwNTA4OQ==", "url": "https://github.com/apache/geode/pull/5299#discussion_r445705089", "bodyText": "Thanks! I will merge this now and we can make improvements on it when we get to consolidating all these methods into one place.", "author": "jinmeiliao", "createdAt": "2020-06-25T16:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5MTY5MA=="}], "type": "inlineReview"}]}