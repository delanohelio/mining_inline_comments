{"pr_number": 4743, "pr_title": "GEODE-7808: standardize on use of HostAndPort to form client-side connections", "pr_createdAt": "2020-02-28T00:46:15Z", "pr_url": "https://github.com/apache/geode/pull/4743", "timeline": [{"oid": "2f7a825042781c167390f805d3aa15b59992e723", "url": "https://github.com/apache/geode/commit/2f7a825042781c167390f805d3aa15b59992e723", "message": "Squashed merge of feature/GEODE-7808\n\nremoved HostAddress\nrenamed LocatorAddress to HostAndPort\nmodified TcpClient methods to take a HostAndPort argument instead of\nInetAddress\nmodified SocketCreator to take a HostAndPort argument instead of\nInetAddress", "committedDate": "2020-02-28T00:48:59Z", "type": "commit"}, {"oid": "ccab59dad5789bb77139209eeb313600f88ea6f2", "url": "https://github.com/apache/geode/commit/ccab59dad5789bb77139209eeb313600f88ea6f2", "message": "GEODE-7808 - standardize on use of HostAndPort for connection formation\n\nThis continues a previous PR that passed and was approved for merge.\nThis commit raises up several methods from SocketCreator into the\nTcpSocketCreator interface.  This is an intermediate commit.  A\nsubsequent commit will refactor TcpSocketCreator to separate the client\nand server methods for creating server-sockets and client connections to\nserver-sockets.", "committedDate": "2020-02-28T00:49:50Z", "type": "commit"}, {"oid": "5add2691a27de08d76688949c32d9e7ac129e16a", "url": "https://github.com/apache/geode/commit/5add2691a27de08d76688949c32d9e7ac129e16a", "message": "refactored socket-creators to separate concerns\n\nServerSocketCreator holds methods for non-client comms\nClientSocketCreator holds methods that clients should use for comms\nAdvancedSocketCreator holds methods for people who need to get around\nthe limitations of the other two interfaces", "committedDate": "2020-02-28T00:49:50Z", "type": "commit"}, {"oid": "5add2691a27de08d76688949c32d9e7ac129e16a", "url": "https://github.com/apache/geode/commit/5add2691a27de08d76688949c32d9e7ac129e16a", "message": "refactored socket-creators to separate concerns\n\nServerSocketCreator holds methods for non-client comms\nClientSocketCreator holds methods that clients should use for comms\nAdvancedSocketCreator holds methods for people who need to get around\nthe limitations of the other two interfaces", "committedDate": "2020-02-28T00:49:50Z", "type": "forcePushed"}, {"oid": "e7074e333f5cf3ec73c6b727a260f28237462eb5", "url": "https://github.com/apache/geode/commit/e7074e333f5cf3ec73c6b727a260f28237462eb5", "message": "adding missing interface", "committedDate": "2020-02-28T16:50:10Z", "type": "commit"}, {"oid": "4e182126559239b8ca65859a91f82c4c2499503e", "url": "https://github.com/apache/geode/commit/4e182126559239b8ca65859a91f82c4c2499503e", "message": "move code out of inner-classes into first-class classes", "committedDate": "2020-02-28T18:06:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzMjkxMw==", "url": "https://github.com/apache/geode/pull/4743#discussion_r385932913", "bodyText": "This is a great idea @bschuchardt \u2014not only splitting interfaces for the active/passive roles but splitting out the \"advanced\" methods into their own interface too.", "author": "Bill", "createdAt": "2020-02-28T21:34:45Z", "path": "geode-tcp-server/src/main/java/org/apache/geode/distributed/internal/tcpserver/AdvancedSocketCreator.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.distributed.internal.tcpserver;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+\n+public interface AdvancedSocketCreator {", "originalCommit": "4e182126559239b8ca65859a91f82c4c2499503e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzMzc0Ng==", "url": "https://github.com/apache/geode/pull/4743#discussion_r385933746", "bodyText": "why is this \"connectFor_Client_\" and not merely \"connect\"? I wonder if that distinction (the \"client\" one) was important when this was mushed together with passive socket creation methods and maybe now is less important?\nOh from looking at ServerSocketCreator I think I understand now. Yeah, it has it's own \"connect\" methods. These method signatures seem to be mixing two different concerns and overloading the terms \"client\" and \"server\" to apply to both. I find that confusing\u2026\nUsually when I hear somebody talking about a \"server\" socket I think they are referring to a passive socket (one that is bound to a well-known port). And when I hear them talk about \"client\" sockets I think they are referring to sockets created via (active) connect calls.\nBut our new interfaces are not segregating two kinds of \"sockets\". They're segregating methods for use by clients from methods for use by servers. If I have that right you don't use ServerSocketCreator to create \"server sockets\", rather, servers use it to create all their sockets (actively, passively). And so on for ClientSocketCreator.\nIf this is correct, and obvious to everybody, then just carry on. If it's wrong or not obvious it might be worth some clarification in the class-level comments.", "author": "Bill", "createdAt": "2020-02-28T21:36:51Z", "path": "geode-tcp-server/src/main/java/org/apache/geode/distributed/internal/tcpserver/ClientSocketCreator.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.distributed.internal.tcpserver;\n+\n+import java.io.IOException;\n+import java.net.Socket;\n+\n+public interface ClientSocketCreator {\n+\n+  /**\n+   * Returns true if this socket creator is configured to use SSL by default\n+   */\n+  boolean useSSL();\n+\n+  /**\n+   * After creating a socket connection use this method to initiate the SSL\n+   * handshake. If SSL is not enabled for the socket this method does nothing.\n+   */\n+  void handshakeIfSocketIsSSL(Socket socket, int timeout) throws IOException;\n+\n+  /**\n+   * Create a connection to the given host/port using client-cache defaults for things\n+   * like socket buffer size\n+   */\n+  Socket connectForClient(HostAndPort addr, int connectTimeout) throws IOException;", "originalCommit": "4e182126559239b8ca65859a91f82c4c2499503e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyMTkxMw==", "url": "https://github.com/apache/geode/pull/4743#discussion_r386521913", "bodyText": "renaming to forCluster() in TcpSocketCreator", "author": "bschuchardt", "createdAt": "2020-03-02T17:00:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzMzc0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNDE3MA==", "url": "https://github.com/apache/geode/pull/4743#discussion_r386524170", "bodyText": "also renaming ServerSocketCreator to ClusterSocketCreator and renaming methods.", "author": "bschuchardt", "createdAt": "2020-03-02T17:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzMzc0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkzNTEwMA==", "url": "https://github.com/apache/geode/pull/4743#discussion_r385935100", "bodyText": "get rid of spurious back tick `", "author": "Bill", "createdAt": "2020-02-28T21:40:32Z", "path": "geode-tcp-server/src/main/java/org/apache/geode/distributed/internal/tcpserver/TcpSocketCreator.java", "diffHunk": "@@ -15,34 +15,25 @@\n \n package org.apache.geode.distributed.internal.tcpserver;\n \n-import java.io.IOException;\n-import java.net.InetAddress;\n-import java.net.ServerSocket;\n-import java.net.Socket;\n \n \n /**\n  * Create sockets for TcpServer (and TcpClient).\n  */\n public interface TcpSocketCreator {\n-  boolean useSSL();\n-\n-  ServerSocket createServerSocket(int nport, int backlog) throws IOException;\n-\n-  ServerSocket createServerSocket(int nport, int backlog, InetAddress bindAddr)\n-      throws IOException;\n-\n-  ServerSocket createServerSocketUsingPortRange(InetAddress ba, int backlog,\n-      boolean isBindAddress, boolean useNIO, int tcpBufferSize, int[] tcpPortRange,\n-      boolean sslConnection) throws IOException;\n-\n-  Socket connect(InetAddress inetadd, int port, int timeout,\n-      ConnectionWatcher optionalWatcher, boolean clientSide) throws IOException;\n-\n-  Socket connect(InetAddress inetadd, int port, int timeout,\n-      ConnectionWatcher optionalWatcher, boolean clientSide, int socketBufferSize,\n-      boolean sslConnection) throws IOException;\n-\n-  void handshakeIfSocketIsSSL(Socket socket, int timeout) throws IOException;\n-\n+  /**\n+   * Returns a socket creator for server and peer-to-peer sockets\n+   */\n+  ServerSocketCreator forServer();\n+\n+  /**\n+   * Returns a socket creator for client caches and WAN senders\n+   */\n+  ClientSocketCreator forClient();\n+\n+  /**\n+   * `", "originalCommit": "4e182126559239b8ca65859a91f82c4c2499503e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0MTU2Mg==", "url": "https://github.com/apache/geode/pull/4743#discussion_r385941562", "bodyText": "Only a few methods onSocketCreator are used by this class. Most of them have to do with configuration. The same can be said of use of SocketCreator by the two other sibling classes: SCClientSocketCreator, SCAdvancedSocketCreator. That being the case I wonder if it would be reasonable to make e.g. a SocketConfiguration interface and use that instead here.\nThe only exception I see to this situation is that SCAdvancedSocketCreator.connect calls SocketCreator.configureClientSSLSocket(). But perhaps that method could be moved from SocketCreator to SCAdvancedSocketCreator. That method, in turn, needs some SSL configuration settings, but it should be able to access all those from the SocketConfiguration.", "author": "Bill", "createdAt": "2020-02-28T21:58:05Z", "path": "geode-core/src/main/java/org/apache/geode/internal/net/SCServerSocketCreator.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.net;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+\n+import javax.net.ServerSocketFactory;\n+import javax.net.ssl.SSLParameters;\n+import javax.net.ssl.SSLServerSocket;\n+\n+import org.apache.geode.GemFireConfigException;\n+import org.apache.geode.distributed.internal.tcpserver.ServerSocketCreatorImpl;\n+import org.apache.geode.internal.admin.SSLConfig;\n+import org.apache.geode.net.SSLParameterExtension;\n+\n+class SCServerSocketCreator extends ServerSocketCreatorImpl {\n+  private final SocketCreator coreSocketCreator;\n+\n+  protected SCServerSocketCreator(SocketCreator socketCreator) {", "originalCommit": "4e182126559239b8ca65859a91f82c4c2499503e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0MjIwNw==", "url": "https://github.com/apache/geode/pull/4743#discussion_r385942207", "bodyText": "If you like my suggestion to send in a SocketConfiguration instead of a SocketCreator (to the constructor), here is the method (configureClientSSLSocket) that would have to be hoisted into this class (from SocketCreator).", "author": "Bill", "createdAt": "2020-02-28T22:00:02Z", "path": "geode-core/src/main/java/org/apache/geode/internal/net/SCAdvancedSocketCreator.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.net;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+\n+import javax.net.SocketFactory;\n+\n+import org.apache.geode.GemFireConfigException;\n+import org.apache.geode.SystemConnectException;\n+import org.apache.geode.distributed.internal.tcpserver.AdvancedSocketCreatorImpl;\n+import org.apache.geode.distributed.internal.tcpserver.ConnectionWatcher;\n+import org.apache.geode.distributed.internal.tcpserver.HostAndPort;\n+\n+class SCAdvancedSocketCreator extends AdvancedSocketCreatorImpl {\n+  final SocketCreator coreSocketCreator;\n+\n+  protected SCAdvancedSocketCreator(SocketCreator socketCreator) {\n+    super(socketCreator);\n+    coreSocketCreator = socketCreator;\n+  }\n+\n+  @Override\n+  public void handshakeIfSocketIsSSL(Socket socket, int timeout) throws IOException {\n+    coreSocketCreator.handshakeIfSocketIsSSL(socket, timeout);\n+  }\n+\n+  @Override\n+  public Socket connect(HostAndPort addr, int timeout,\n+      ConnectionWatcher optionalWatcher, boolean allowClientSocketFactory, int socketBufferSize,\n+      boolean useSSL) throws IOException {\n+\n+    coreSocketCreator.printConfig();\n+\n+    if (!useSSL) {\n+      return super.connect(addr, timeout, optionalWatcher, allowClientSocketFactory,\n+          socketBufferSize,\n+          useSSL);\n+    }\n+\n+    // create an SSL connection\n+\n+    Socket socket;\n+    InetSocketAddress sockaddr = addr.getSocketInetAddress();\n+    if (sockaddr.getAddress() == null) {\n+      InetAddress address = InetAddress.getByName(sockaddr.getHostName());\n+      sockaddr = new InetSocketAddress(address, sockaddr.getPort());\n+    }\n+\n+    if (coreSocketCreator.getSslContext() == null) {\n+      throw new GemFireConfigException(\n+          \"SSL not configured correctly, Please look at previous error\");\n+    }\n+    SocketFactory sf = coreSocketCreator.getSslContext().getSocketFactory();\n+    socket = sf.createSocket();\n+\n+    // Optionally enable SO_KEEPALIVE in the OS network protocol.\n+    socket.setKeepAlive(ENABLE_TCP_KEEP_ALIVE);\n+\n+    // If necessary, set the receive buffer size before connecting the\n+    // socket so that large buffers will be allocated on accepted sockets\n+    // (see java.net.Socket.setReceiverBufferSize javadocs for details)\n+    if (socketBufferSize != -1) {\n+      socket.setReceiveBufferSize(socketBufferSize);\n+    }\n+\n+    try {\n+      if (optionalWatcher != null) {\n+        optionalWatcher.beforeConnect(socket);\n+      }\n+      socket.connect(sockaddr, Math.max(timeout, 0));\n+      coreSocketCreator.configureClientSSLSocket(socket, timeout);", "originalCommit": "4e182126559239b8ca65859a91f82c4c2499503e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUyNDgyOQ==", "url": "https://github.com/apache/geode/pull/4743#discussion_r386524829", "bodyText": "The socket configuration is needed by all dependent socket-creators.  We could do the refactor you're suggesting anytime w/o changing the public interface to these services.", "author": "bschuchardt", "createdAt": "2020-03-02T17:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0MjIwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0MjkzNQ==", "url": "https://github.com/apache/geode/pull/4743#discussion_r385942935", "bodyText": "getClientSocketFactory would have to move to SocketConfiguration under my suggestion (above)", "author": "Bill", "createdAt": "2020-02-28T22:02:04Z", "path": "geode-core/src/main/java/org/apache/geode/internal/net/SCAdvancedSocketCreator.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.net;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+\n+import javax.net.SocketFactory;\n+\n+import org.apache.geode.GemFireConfigException;\n+import org.apache.geode.SystemConnectException;\n+import org.apache.geode.distributed.internal.tcpserver.AdvancedSocketCreatorImpl;\n+import org.apache.geode.distributed.internal.tcpserver.ConnectionWatcher;\n+import org.apache.geode.distributed.internal.tcpserver.HostAndPort;\n+\n+class SCAdvancedSocketCreator extends AdvancedSocketCreatorImpl {\n+  final SocketCreator coreSocketCreator;\n+\n+  protected SCAdvancedSocketCreator(SocketCreator socketCreator) {\n+    super(socketCreator);\n+    coreSocketCreator = socketCreator;\n+  }\n+\n+  @Override\n+  public void handshakeIfSocketIsSSL(Socket socket, int timeout) throws IOException {\n+    coreSocketCreator.handshakeIfSocketIsSSL(socket, timeout);\n+  }\n+\n+  @Override\n+  public Socket connect(HostAndPort addr, int timeout,\n+      ConnectionWatcher optionalWatcher, boolean allowClientSocketFactory, int socketBufferSize,\n+      boolean useSSL) throws IOException {\n+\n+    coreSocketCreator.printConfig();\n+\n+    if (!useSSL) {\n+      return super.connect(addr, timeout, optionalWatcher, allowClientSocketFactory,\n+          socketBufferSize,\n+          useSSL);\n+    }\n+\n+    // create an SSL connection\n+\n+    Socket socket;\n+    InetSocketAddress sockaddr = addr.getSocketInetAddress();\n+    if (sockaddr.getAddress() == null) {\n+      InetAddress address = InetAddress.getByName(sockaddr.getHostName());\n+      sockaddr = new InetSocketAddress(address, sockaddr.getPort());\n+    }\n+\n+    if (coreSocketCreator.getSslContext() == null) {\n+      throw new GemFireConfigException(\n+          \"SSL not configured correctly, Please look at previous error\");\n+    }\n+    SocketFactory sf = coreSocketCreator.getSslContext().getSocketFactory();\n+    socket = sf.createSocket();\n+\n+    // Optionally enable SO_KEEPALIVE in the OS network protocol.\n+    socket.setKeepAlive(ENABLE_TCP_KEEP_ALIVE);\n+\n+    // If necessary, set the receive buffer size before connecting the\n+    // socket so that large buffers will be allocated on accepted sockets\n+    // (see java.net.Socket.setReceiverBufferSize javadocs for details)\n+    if (socketBufferSize != -1) {\n+      socket.setReceiveBufferSize(socketBufferSize);\n+    }\n+\n+    try {\n+      if (optionalWatcher != null) {\n+        optionalWatcher.beforeConnect(socket);\n+      }\n+      socket.connect(sockaddr, Math.max(timeout, 0));\n+      coreSocketCreator.configureClientSSLSocket(socket, timeout);\n+      return socket;\n+\n+    } finally {\n+      if (optionalWatcher != null) {\n+        optionalWatcher.afterConnect(socket);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  protected RuntimeException problemCreatingSocketInPortRangeException(String s, IOException e) {\n+    return new GemFireConfigException(s, e);\n+  }\n+\n+  @Override\n+  protected RuntimeException noFreePortException(String reason) {\n+    return new SystemConnectException(reason);\n+  }\n+\n+  @Override\n+  protected Socket createCustomClientSocket(HostAndPort addr) throws IOException {\n+    if (coreSocketCreator.getClientSocketFactory() != null) {", "originalCommit": "4e182126559239b8ca65859a91f82c4c2499503e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ce9ef7c361829bbee2a37e6935c131dcb776c320", "url": "https://github.com/apache/geode/commit/ce9ef7c361829bbee2a37e6935c131dcb776c320", "message": "renaming interfaces and methods to be less confusing", "committedDate": "2020-03-02T19:21:19Z", "type": "commit"}]}