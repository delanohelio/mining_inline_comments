{"pr_number": 5082, "pr_title": "GEODE-8098: Refactor RedisSetCommandsFunctionExecutor", "pr_createdAt": "2020-05-08T22:19:00Z", "pr_url": "https://github.com/apache/geode/pull/5082", "timeline": [{"oid": "05c211086036b486c29b7e99a53a122fec3d4835", "url": "https://github.com/apache/geode/commit/05c211086036b486c29b7e99a53a122fec3d4835", "message": "Create SingleResultRedisFunction", "committedDate": "2020-05-10T03:34:54Z", "type": "forcePushed"}, {"oid": "b13d309d7ae596f85b88e40212ff451c9d356221", "url": "https://github.com/apache/geode/commit/b13d309d7ae596f85b88e40212ff451c9d356221", "message": "Create SingleResultRedisFunction", "committedDate": "2020-05-10T03:48:14Z", "type": "forcePushed"}, {"oid": "fbccace69ba9933d67fb281b5faf2ad430f7c940", "url": "https://github.com/apache/geode/commit/fbccace69ba9933d67fb281b5faf2ad430f7c940", "message": "Refactor", "committedDate": "2020-05-12T20:13:44Z", "type": "commit"}, {"oid": "df96dab50f885277078c1be9c46206fc1c6a15a2", "url": "https://github.com/apache/geode/commit/df96dab50f885277078c1be9c46206fc1c6a15a2", "message": "spA", "committedDate": "2020-05-12T20:13:45Z", "type": "commit"}, {"oid": "0d0285c9c8128bc41640587757375c853c9d7f34", "url": "https://github.com/apache/geode/commit/0d0285c9c8128bc41640587757375c853c9d7f34", "message": "update expected POM", "committedDate": "2020-05-12T20:13:45Z", "type": "commit"}, {"oid": "a3a00ae43a3154d5eb02169bd172ace444e1a98c", "url": "https://github.com/apache/geode/commit/a3a00ae43a3154d5eb02169bd172ace444e1a98c", "message": "Create SingleResultRedisFunction", "committedDate": "2020-05-12T20:23:30Z", "type": "commit"}, {"oid": "cbfa5247df60203da2185b00147c51e15609ae20", "url": "https://github.com/apache/geode/commit/cbfa5247df60203da2185b00147c51e15609ae20", "message": "unchecked suppression", "committedDate": "2020-05-12T20:23:31Z", "type": "commit"}, {"oid": "01452f6e37aceb2985a6a97fd072627942f4918a", "url": "https://github.com/apache/geode/commit/01452f6e37aceb2985a6a97fd072627942f4918a", "message": "get it passing", "committedDate": "2020-05-12T20:23:31Z", "type": "commit"}, {"oid": "095295c23c8084497470a4a4af59e1b7d7c0934a", "url": "https://github.com/apache/geode/commit/095295c23c8084497470a4a4af59e1b7d7c0934a", "message": "merging", "committedDate": "2020-05-12T20:30:49Z", "type": "commit"}, {"oid": "24e8aeba7929b4cbcedb187da928bbb1b201e0b1", "url": "https://github.com/apache/geode/commit/24e8aeba7929b4cbcedb187da928bbb1b201e0b1", "message": "spA", "committedDate": "2020-05-12T20:32:09Z", "type": "commit"}, {"oid": "baccdd23cefb2fe15788cf9b2256f7cc2846f7a1", "url": "https://github.com/apache/geode/commit/baccdd23cefb2fe15788cf9b2256f7cc2846f7a1", "message": "update expected pom", "committedDate": "2020-05-12T20:40:11Z", "type": "commit"}, {"oid": "baccdd23cefb2fe15788cf9b2256f7cc2846f7a1", "url": "https://github.com/apache/geode/commit/baccdd23cefb2fe15788cf9b2256f7cc2846f7a1", "message": "update expected pom", "committedDate": "2020-05-12T20:40:11Z", "type": "forcePushed"}, {"oid": "ceddda6ad753391184b801f39634fd6be20b0e0e", "url": "https://github.com/apache/geode/commit/ceddda6ad753391184b801f39634fd6be20b0e0e", "message": "fix", "committedDate": "2020-05-12T21:11:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5OTczOA==", "url": "https://github.com/apache/geode/pull/5082#discussion_r424199738", "bodyText": "I think Long.valueOf is preferred over new Long. It has the benefit of returning a cached instance of Longs in the range of -128..127 which is probably what we have most of the time in this code.", "author": "dschneider-pivotal", "createdAt": "2020-05-13T06:27:39Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/CommandFunction.java", "diffHunk": "@@ -50,152 +47,115 @@ public static void register() {\n     FunctionService.registerFunction(new CommandFunction(stripedExecutor));\n   }\n \n+\n   @SuppressWarnings(\"unchecked\")\n-  public static ResultCollector execute(Region<?, ?> region,\n-      RedisCommandType command,\n+  public static <T> T execute(RedisCommandType command,\n       ByteArrayWrapper key,\n-      Object commandArguments) {\n-    return FunctionService\n+      Object commandArguments, Region region) {\n+    SingleResultCollector<T> rc = new SingleResultCollector<>();\n+    ResultCollector<T, T> execute = FunctionService\n         .onRegion(region)\n         .withFilter(Collections.singleton(key))\n         .setArguments(new Object[] {command, commandArguments})\n-        .execute(ID);\n+        .withCollector(rc)\n+        .execute(CommandFunction.ID);\n+    return execute.getResult();\n   }\n \n \n   public CommandFunction(StripedExecutor stripedExecutor) {\n     this.stripedExecutor = stripedExecutor;\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n   @Override\n-  public void execute(FunctionContext<Object[]> context) {\n-    RegionFunctionContextImpl regionFunctionContext =\n-        (RegionFunctionContextImpl) context;\n-    ByteArrayWrapper key =\n-        (ByteArrayWrapper) regionFunctionContext.getFilter().iterator().next();\n-    Region localRegion =\n-        regionFunctionContext.getLocalDataSet(regionFunctionContext.getDataSet());\n-    ResultSender resultSender = regionFunctionContext.getResultSender();\n-    Object[] args = context.getArguments();\n-    RedisCommandType command = (RedisCommandType) args[0];\n+  public String getId() {\n+    return ID;\n+  }\n+\n+  @Override\n+  protected Object compute(Region localRegion, ByteArrayWrapper key,\n+      RedisCommandType command, Object[] args) {\n+    Callable<Object> callable;\n     switch (command) {\n       case SADD: {\n         ArrayList<ByteArrayWrapper> membersToAdd = (ArrayList<ByteArrayWrapper>) args[1];\n-        stripedExecutor.execute(key,\n-            () -> RedisSet.sadd(localRegion, key, membersToAdd),\n-            (addedCount) -> resultSender.lastResult(addedCount));\n+        callable = () -> new Long(RedisSet.sadd(localRegion, key, membersToAdd));", "originalCommit": "ceddda6ad753391184b801f39634fd6be20b0e0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MDAwOQ==", "url": "https://github.com/apache/geode/pull/5082#discussion_r424480009", "bodyText": "yea, this is just a relic of me trying to debug stuff and trying dumb ideas...i removed the boxing.", "author": "prettyClouds", "createdAt": "2020-05-13T14:25:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5OTczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwNjUzNg==", "url": "https://github.com/apache/geode/pull/5082#discussion_r424206536", "bodyText": "The old code that returned \"long\" was okay wasn't it? Any reason to change this to Long?", "author": "dschneider-pivotal", "createdAt": "2020-05-13T06:44:54Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSet.java", "diffHunk": "@@ -79,14 +79,18 @@ public static long sadd(Region<ByteArrayWrapper, RedisSet> region,\n     }\n   }\n \n-  public static long srem(Region<ByteArrayWrapper, RedisSet> region,\n+  public static Long srem(Region<ByteArrayWrapper, RedisSet> region,", "originalCommit": "ceddda6ad753391184b801f39634fd6be20b0e0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MDk1Ng==", "url": "https://github.com/apache/geode/pull/5082#discussion_r424480956", "bodyText": "no good reason...reverted.", "author": "prettyClouds", "createdAt": "2020-05-13T14:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwNjUzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwNzM3NQ==", "url": "https://github.com/apache/geode/pull/5082#discussion_r424207375", "bodyText": "remove these blank lines if they are not needed", "author": "dschneider-pivotal", "createdAt": "2020-05-13T06:46:55Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSetCommandsFunctionExecutor.java", "diffHunk": "@@ -50,73 +47,57 @@ public RedisSetCommandsFunctionExecutor(Region<ByteArrayWrapper, RedisSet> regio\n \n   @Override\n   public long sadd(ByteArrayWrapper key, ArrayList<ByteArrayWrapper> membersToAdd) {\n-    ResultCollector<Object[], List<Long>> results = executeFunction(SADD, key, membersToAdd);\n-    return results.getResult().get(0);\n+    return CommandFunction.execute(SADD, key, membersToAdd, region);\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n   @Override\n   public long srem(ByteArrayWrapper key, ArrayList<ByteArrayWrapper> membersToRemove,\n       AtomicBoolean setWasDeleted) {\n-    ResultCollector<Object[], List<Long>> results = executeFunction(SREM, key, membersToRemove);\n-    List<Long> resultList = results.getResult();\n-    long membersRemoved = resultList.get(0);\n-    long wasDeleted = resultList.get(1);\n-    if (wasDeleted != 0) {\n-      setWasDeleted.set(true);\n-    }\n+    Object[] resultList =\n+        CommandFunction.execute(SREM, key, membersToRemove, region);\n+\n+    long membersRemoved = (long) resultList[0];\n+    Boolean wasDeleted = (Boolean) resultList[1];\n+    setWasDeleted.set(wasDeleted);\n     return membersRemoved;\n   }\n \n   @Override\n   public Set<ByteArrayWrapper> smembers(ByteArrayWrapper key) {\n-    ResultCollector<Object[], List<Set<ByteArrayWrapper>>> results =\n-        executeFunction(SMEMBERS, key, null);\n-    return results.getResult().get(0);\n+    return CommandFunction.execute(SMEMBERS, key, null, region);\n   }\n \n   @Override\n   public boolean del(ByteArrayWrapper key) {\n-    ResultCollector<Object[], List<Boolean>> results =\n-        executeFunction(DEL, key, RedisDataType.REDIS_SET);\n-    return results.getResult().get(0);\n+    return CommandFunction.execute(DEL, key, RedisDataType.REDIS_SET, region);\n   }\n \n   @Override\n   public int scard(ByteArrayWrapper key) {\n-    ResultCollector<Object[], List<Integer>> results = executeFunction(SCARD, key, null);\n-    return results.getResult().get(0);\n+    return CommandFunction.execute(SCARD, key, null, region);\n   }\n \n   @Override\n   public boolean sismember(ByteArrayWrapper key, ByteArrayWrapper member) {\n-    ResultCollector<Object[], List<Boolean>> results = executeFunction(SISMEMBER, key, member);\n-    return results.getResult().get(0);\n+    return CommandFunction.execute(SISMEMBER, key, member, region);\n   }\n \n   @Override\n   public Collection<ByteArrayWrapper> srandmember(ByteArrayWrapper key, int count) {\n-    ResultCollector<Object[], List<Collection<ByteArrayWrapper>>> results =\n-        executeFunction(SRANDMEMBER, key, count);\n-    return results.getResult().get(0);\n+    return CommandFunction.execute(SRANDMEMBER, key, count, region);\n   }\n \n   @Override\n   public Collection<ByteArrayWrapper> spop(ByteArrayWrapper key, int popCount) {\n-    ResultCollector<Object[], List<Collection<ByteArrayWrapper>>> results =\n-        executeFunction(SPOP, key, popCount);\n-    return results.getResult().get(0);\n+    return CommandFunction.execute(SPOP, key, popCount, region);\n   }\n \n   @Override\n   public List<Object> sscan(ByteArrayWrapper key, Pattern matchPattern, int count, int cursor) {\n-    ResultCollector<Object[], List<List<Object>>> results =\n-        executeFunction(SSCAN, key, new Object[] {matchPattern, count, cursor});\n-    return results.getResult().get(0);\n+    return CommandFunction.execute(SSCAN, key, new Object[] {matchPattern, count, cursor}, region);\n   }\n \n-  private ResultCollector executeFunction(RedisCommandType command,\n-      ByteArrayWrapper key,\n-      Object commandArguments) {\n-    return CommandFunction.execute(region, command, key, commandArguments);\n-  }\n+", "originalCommit": "ceddda6ad753391184b801f39634fd6be20b0e0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwODgyNg==", "url": "https://github.com/apache/geode/pull/5082#discussion_r424208826", "bodyText": "make this field private?", "author": "dschneider-pivotal", "createdAt": "2020-05-13T06:50:21Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/SingleResultCollector.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.set;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.geode.cache.execute.FunctionException;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.distributed.DistributedMember;\n+\n+public class SingleResultCollector<T> implements ResultCollector<T, T> {\n+  T result;", "originalCommit": "ceddda6ad753391184b801f39634fd6be20b0e0e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwOTUzNw==", "url": "https://github.com/apache/geode/pull/5082#discussion_r424209537", "bodyText": "Should this check to see if result != null and throw an IllegalStateException? If someone accidently uses this and gives it multiple results it seems like an exception would be more helpful than just having the last one win", "author": "dschneider-pivotal", "createdAt": "2020-05-13T06:52:00Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/SingleResultCollector.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.set;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.geode.cache.execute.FunctionException;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.distributed.DistributedMember;\n+\n+public class SingleResultCollector<T> implements ResultCollector<T, T> {\n+  T result;\n+\n+  @Override\n+  public T getResult() throws FunctionException {\n+    return result;\n+  }\n+\n+  @Override\n+  public T getResult(long timeout, TimeUnit unit)\n+      throws FunctionException {\n+    return result;\n+  }\n+\n+  @Override\n+  public void addResult(DistributedMember memberID, T resultOfSingleExecution) {\n+    result = resultOfSingleExecution;", "originalCommit": "ceddda6ad753391184b801f39634fd6be20b0e0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MDM5Mg==", "url": "https://github.com/apache/geode/pull/5082#discussion_r424480392", "bodyText": "yea, that feels much safer.  done", "author": "prettyClouds", "createdAt": "2020-05-13T14:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwOTUzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxMDUzOQ==", "url": "https://github.com/apache/geode/pull/5082#discussion_r424210539", "bodyText": "remove the javadocs on this method that talk about \"the result of...\"", "author": "dschneider-pivotal", "createdAt": "2020-05-13T06:54:08Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/StripedExecutor.java", "diffHunk": "@@ -35,9 +34,7 @@\n    *\n    * @param stripeId defines the \"stripe\"\n    * @param callable the unit of work to do sequentially. May be called after run returns.\n-   * @param resultConsumer is given the result of the callable.\n    */\n-  public <T> void execute(Object stripeId,\n-      Callable<T> callable,\n-      Consumer<T> resultConsumer);\n+  public <T> T execute(Object stripeId,", "originalCommit": "ceddda6ad753391184b801f39634fd6be20b0e0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MDY2NQ==", "url": "https://github.com/apache/geode/pull/5082#discussion_r424480665", "bodyText": "done.", "author": "prettyClouds", "createdAt": "2020-05-13T14:26:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxMDUzOQ=="}], "type": "inlineReview"}, {"oid": "2ccf39fe740da9a3687f8e8f2afa9080e7d652c0", "url": "https://github.com/apache/geode/commit/2ccf39fe740da9a3687f8e8f2afa9080e7d652c0", "message": "responding to PR comments", "committedDate": "2020-05-13T14:24:13Z", "type": "commit"}]}