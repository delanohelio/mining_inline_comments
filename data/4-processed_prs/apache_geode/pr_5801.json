{"pr_number": 5801, "pr_title": "GEODE-8665: validate offline-disk-store command is missing information", "pr_createdAt": "2020-12-02T01:55:50Z", "pr_url": "https://github.com/apache/geode/pull/5801", "timeline": [{"oid": "34e6125f5f95a4d930572f7b36c9fb581a8680f6", "url": "https://github.com/apache/geode/commit/34e6125f5f95a4d930572f7b36c9fb581a8680f6", "message": "Initial fix", "committedDate": "2020-12-02T01:53:39Z", "type": "commit"}, {"oid": "af9cb350efc60ac0be4b4dd18b5344b6239f37d4", "url": "https://github.com/apache/geode/commit/af9cb350efc60ac0be4b4dd18b5344b6239f37d4", "message": "Add a DUnit test", "committedDate": "2020-12-04T22:58:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NzUxOQ==", "url": "https://github.com/apache/geode/pull/5801#discussion_r542497519", "bodyText": "Can there be a case where tc and tlc both are same number (including 0); in that case dead-record-counts are 0; is this valid?", "author": "agingade", "createdAt": "2020-12-14T15:57:24Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java", "diffHunk": "@@ -2225,6 +2225,12 @@ long recoverCrf(OplogEntryIdSet deletedIds, boolean recoverValues, boolean recov\n         if (getParent().isOfflineCompacting()) {\n           getParent().incLiveEntryCount(getRecoveryMap().size());\n         }\n+        long tc = totalCount.get();\n+        long tlc = totalLiveCount.get();\n+        if (getParent().isValidating() && tlc >= 0\n+            && tc > tlc) {", "originalCommit": "af9cb350efc60ac0be4b4dd18b5344b6239f37d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxMjM2OA==", "url": "https://github.com/apache/geode/pull/5801#discussion_r542812368", "bodyText": "Yes. It is valid. It is very common for tc(totalCount) and tlc(totalLiveCount) to be the same value, including 0, which indicates an empty Oplog. When tc and tlc are the same, offline disk store validation will not show any message about  the number of records that would be removed if you compacted the store, since there is no deleted or skipped entry in this case.", "author": "jchen21", "createdAt": "2020-12-14T21:30:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NzUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzMjI1MA==", "url": "https://github.com/apache/geode/pull/5801#discussion_r542832250", "bodyText": "method name should starts with lower case.", "author": "gesterzhou", "createdAt": "2020-12-14T21:49:03Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/ValidateOfflineDiskStoreDUnitTest.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_PORT;\n+import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER;\n+import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_PORT;\n+import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_START;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_FILE;\n+import static org.apache.geode.distributed.ConfigurationProperties.MAX_WAIT_TIME_RECONNECT;\n+import static org.apache.geode.distributed.ConfigurationProperties.MEMBER_TIMEOUT;\n+import static org.apache.geode.internal.AvailablePortHelper.getRandomAvailableTCPPorts;\n+import static org.apache.geode.internal.lang.SystemPropertyHelper.GEODE_PREFIX;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.apache.geode.test.dunit.Disconnect.disconnectAllFromDS;\n+import static org.apache.geode.test.dunit.Invoke.invokeInEveryVM;\n+import static org.apache.geode.test.dunit.VM.getVM;\n+import static org.apache.geode.test.dunit.VM.getVMId;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.PrintStream;\n+import java.io.Serializable;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.IntStream;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.distributed.LocatorLauncher;\n+import org.apache.geode.distributed.ServerLauncher;\n+import org.apache.geode.distributed.internal.InternalLocator;\n+import org.apache.geode.internal.lang.SystemPropertyHelper;\n+import org.apache.geode.management.internal.cli.util.CommandStringBuilder;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTemporaryFolder;\n+\n+public class ValidateOfflineDiskStoreDUnitTest implements Serializable {\n+\n+  @Rule\n+  public transient GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  @Rule\n+  public SerializableTemporaryFolder temporaryFolder = new SerializableTemporaryFolder();\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule(2);\n+\n+  private String locatorName;\n+\n+  private File locatorDir;\n+\n+  private int locatorPort;\n+\n+  private int locatorJmxPort;\n+\n+  private static final LocatorLauncher DUMMY_LOCATOR = mock(LocatorLauncher.class);\n+\n+  private static final AtomicReference<LocatorLauncher> LOCATOR =\n+      new AtomicReference<>(DUMMY_LOCATOR);\n+\n+  private VM server;\n+\n+  private String serverName;\n+\n+  private File serverDir;\n+\n+  private int serverPort;\n+\n+  private String locators;\n+\n+  private static final ServerLauncher DUMMY_SERVER = mock(ServerLauncher.class);\n+\n+  private static final AtomicReference<ServerLauncher> SERVER =\n+      new AtomicReference<>(DUMMY_SERVER);\n+\n+  private final int NUM_ENTRIES = 1000;\n+\n+  private static final String DISK_STORE_NAME = \"testDiskStore\";\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    VM locator = getVM(0);\n+    server = getVM(1);\n+\n+    locatorName = \"locator\";\n+    serverName = \"server\";\n+\n+    locatorDir = temporaryFolder.newFolder(locatorName);\n+\n+    serverDir = temporaryFolder.newFolder(serverName);\n+\n+    int[] port = getRandomAvailableTCPPorts(3);\n+    locatorPort = port[0];\n+    locatorJmxPort = port[1];\n+    serverPort = port[2];\n+\n+    locators = \"localhost[\" + locatorPort + \"]\";\n+\n+    locator.invoke(() -> startLocator(locatorName, locatorDir, locatorPort, locatorJmxPort));\n+\n+    gfsh.connectAndVerify(locatorJmxPort, GfshCommandRule.PortType.jmxManager);\n+\n+    server.invoke(() -> startServer(serverName, serverDir, serverPort, locators));\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    invokeInEveryVM(() -> {\n+      SERVER.getAndSet(DUMMY_SERVER).stop();\n+      LOCATOR.getAndSet(DUMMY_LOCATOR).stop();\n+    });\n+    disconnectAllFromDS();\n+  }\n+\n+  @Test\n+  public void testValidateOfflineDiskStoreInfo() {\n+\n+    createDiskStore();\n+\n+    createRegion();\n+\n+    populateRegions();\n+\n+    AssertRegionSizeAndDiskStore();\n+\n+    server.invoke(ValidateOfflineDiskStoreDUnitTest::stopServer);\n+\n+    server.invoke(() -> {\n+      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+      PrintStream originalSystemOut = System.out;\n+      System.setOut(new PrintStream(byteArrayOutputStream));\n+      validateOfflineDiskStore();\n+      assertThat(byteArrayOutputStream.toString())\n+          .contains(\"Disk store contains \" + NUM_ENTRIES + \" compactable records.\");\n+      System.setOut(originalSystemOut);\n+    });\n+\n+  }\n+\n+  private void validateOfflineDiskStore() throws Exception {\n+    DiskStoreImpl.offlineValidate(DISK_STORE_NAME, new File[] {serverDir});\n+  }\n+\n+  private static void startLocator(String name, File workingDirectory, int locatorPort,\n+      int jmxPort) {\n+    LOCATOR.set(new LocatorLauncher.Builder()\n+        .setMemberName(name)\n+        .setPort(locatorPort)\n+        .setWorkingDirectory(workingDirectory.getAbsolutePath())\n+        .set(JMX_MANAGER, \"true\")\n+        .set(JMX_MANAGER_PORT, String.valueOf(jmxPort))\n+        .set(JMX_MANAGER_START, \"true\")\n+        .set(LOG_FILE, new File(workingDirectory, name + \".log\").getAbsolutePath())\n+        .set(MAX_WAIT_TIME_RECONNECT, \"1000\")\n+        .set(MEMBER_TIMEOUT, \"2000\")\n+        .build());\n+\n+    LOCATOR.get().start();\n+\n+    await().untilAsserted(() -> {\n+      InternalLocator locator = (InternalLocator) LOCATOR.get().getLocator();\n+      assertThat(locator.isSharedConfigurationRunning())\n+          .as(\"Locator shared configuration is running on locator\" + getVMId())\n+          .isTrue();\n+    });\n+  }\n+\n+  private static void startServer(String name, File workingDirectory, int serverPort,\n+      String locators) {\n+\n+    System.setProperty(GEODE_PREFIX + SystemPropertyHelper.PARALLEL_DISK_STORE_RECOVERY,\n+        \"true\");\n+\n+    SERVER.set(new ServerLauncher.Builder()\n+        .setDeletePidFileOnStop(Boolean.TRUE)\n+        .setMemberName(name)\n+        .setWorkingDirectory(workingDirectory.getAbsolutePath())\n+        .setServerPort(serverPort)\n+        .set(HTTP_SERVICE_PORT, \"0\")\n+        .set(LOCATORS, locators)\n+        .set(LOG_FILE, new File(workingDirectory, name + \".log\").getAbsolutePath())\n+        .set(MAX_WAIT_TIME_RECONNECT, \"1000\")\n+        .set(MEMBER_TIMEOUT, \"2000\")\n+        .build());\n+\n+    SERVER.get().start();\n+  }\n+\n+  private static void stopServer() {\n+    SERVER.get().stop();\n+  }\n+\n+  private void AssertRegionSizeAndDiskStore() {", "originalCommit": "af9cb350efc60ac0be4b4dd18b5344b6239f37d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0MDU5MQ==", "url": "https://github.com/apache/geode/pull/5801#discussion_r542840591", "bodyText": "Good catch!", "author": "jchen21", "createdAt": "2020-12-14T21:56:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzMjI1MA=="}], "type": "inlineReview"}, {"oid": "f1b3f122615ff22472353b661936736a1df88c66", "url": "https://github.com/apache/geode/commit/f1b3f122615ff22472353b661936736a1df88c66", "message": "Minor refactor", "committedDate": "2020-12-14T21:56:30Z", "type": "commit"}]}