{"pr_number": 5625, "pr_title": "GEODE-8609: Create a dunit suspect file per VM", "pr_createdAt": "2020-10-14T18:18:11Z", "pr_url": "https://github.com/apache/geode/pull/5625", "timeline": [{"oid": "2cd22023bf22f193cff2ff733610cba2cd40d7fe", "url": "https://github.com/apache/geode/commit/2cd22023bf22f193cff2ff733610cba2cd40d7fe", "message": "GEODE-8609: Create a dunit suspect file per VM\n\n- Create a new `dunit_suspect` log for each VM. The logs will now\n  be named `dunit_suspect-vm<VMID>.log`. The locator VM and the test\n  runner VM will have logs named `dunit_suspect-locator.log` and\n  `dunit_suspect-local.log` respectively.", "committedDate": "2020-10-14T18:08:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwOTE0MQ==", "url": "https://github.com/apache/geode/pull/5625#discussion_r505009141", "bodyText": "This will fail on the first log file with suspect strings, and so will not report suspect strings from the remaining log files. If you move this check after the for loop in closeAndCheckForSuspects(), it will be able to report suspect strings from all log files.", "author": "demery-pivotal", "createdAt": "2020-10-14T22:09:25Z", "path": "geode-dunit/src/main/java/org/apache/geode/test/dunit/internal/DUnitLauncher.java", "diffHunk": "@@ -343,59 +339,120 @@ public static void init(MasterRemote master) {\n     System.setProperty(LAUNCHED_PROPERTY, \"true\");\n   }\n \n+  private static List<File> getDunitSuspectFiles() {\n+    File[] suspectFiles = getDunitSuspectsDir()\n+        .listFiles((dir, name) -> name.startsWith(SUSPECT_FILENAME_PREFIX));\n+\n+    return Arrays.asList(suspectFiles);\n+  }\n+\n+  private static File getDunitSuspectsDir() {\n+    return Paths.get(getWorkspaceDir()).toFile();\n+  }\n+\n+  private static void deleteDunitSuspectFiles() {\n+    getDunitSuspectFiles().forEach(File::delete);\n+  }\n+\n+  private static File createDunitSuspectFile(int vmId, String workingDir) {\n+    String suffix;\n+\n+    switch (vmId) {\n+      case -2:\n+        suffix = \"locator\";\n+        break;\n+      case -1:\n+        suffix = \"local\";\n+        break;\n+      default:\n+        suffix = \"vm\" + vmId;\n+    }\n+\n+    File dunitSuspect = new File(getDunitSuspectsDir(),\n+        String.format(\"%s-%s.log\", SUSPECT_FILENAME_PREFIX, suffix));\n+    dunitSuspect.deleteOnExit();\n+\n+    return dunitSuspect;\n+  }\n+\n+  private static String getWorkspaceDir() {\n+    String workspaceDir = System.getProperty(DUnitLauncher.WORKSPACE_DIR_PARAM);\n+    workspaceDir = workspaceDir == null ? new File(\".\").getAbsolutePath() : workspaceDir;\n+\n+    return workspaceDir;\n+  }\n+\n   public static void closeAndCheckForSuspects() {\n-    if (isLaunched()) {\n-      final List<Pattern> expectedStrings = ExpectedStrings.create(\"dunit\");\n-      final LogConsumer logConsumer = new LogConsumer(true, expectedStrings, \"log4j\", 5);\n+    if (!isLaunched()) {\n+      return;\n+    }\n \n-      final StringBuilder suspectStringBuilder = new StringBuilder();\n+    List<File> suspectFiles = getDunitSuspectFiles();\n \n-      BufferedReader buffReader = null;\n-      FileChannel fileChannel = null;\n-      try {\n-        fileChannel = new FileOutputStream(DUNIT_SUSPECT_FILE, true).getChannel();\n-        buffReader = new BufferedReader(new FileReader(DUNIT_SUSPECT_FILE));\n-      } catch (FileNotFoundException e) {\n-        System.err.println(\"Could not find the suspect string output file: \" + e);\n-        return;\n-      }\n+    if (suspectFiles.isEmpty()) {\n+      throw new IllegalStateException(\"No dunit suspect log files found in '\"\n+          + getDunitSuspectsDir().getAbsolutePath()\n+          + \"' - perhaps a rule that is cleaning up before suspect processing has already run.\");\n+    }\n+\n+    for (File suspect : suspectFiles) {\n+      checkSuspectFile(suspect);\n+    }\n+  }\n+\n+  public static void checkSuspectFile(File suspectFile) {\n+    final List<Pattern> expectedStrings = ExpectedStrings.create(\"dunit\");\n+    final LogConsumer logConsumer = new LogConsumer(true, expectedStrings,\n+        suspectFile.getName(), 5);\n+\n+    final StringBuilder suspectStringBuilder = new StringBuilder();\n+\n+    BufferedReader buffReader;\n+    FileChannel fileChannel;\n+    try {\n+      fileChannel = new FileOutputStream(suspectFile, true).getChannel();\n+      buffReader = new BufferedReader(new FileReader(suspectFile));\n+    } catch (FileNotFoundException e) {\n+      System.err.println(\"Could not find the suspect string output file: \" + e);\n+      return;\n+    }\n+\n+    try {\n+      String line;\n       try {\n-        String line;\n-        try {\n-          while ((line = buffReader.readLine()) != null) {\n-            final StringBuilder builder = logConsumer.consume(line);\n-            if (builder != null) {\n-              suspectStringBuilder.append(builder);\n-            }\n+        while ((line = buffReader.readLine()) != null) {\n+          final StringBuilder builder = logConsumer.consume(line);\n+          if (builder != null) {\n+            suspectStringBuilder.append(builder);\n           }\n-        } catch (IOException e) {\n-          System.err.println(\"Could not read the suspect string output file: \" + e);\n         }\n+      } catch (IOException e) {\n+        System.err.println(\"Could not read the suspect string output file: \" + e);\n+      }\n \n-        try {\n-          fileChannel.truncate(0);\n-        } catch (IOException e) {\n-          System.err.println(\"Could not truncate the suspect string output file: \" + e);\n-        }\n+      try {\n+        fileChannel.truncate(0);\n+      } catch (IOException e) {\n+        System.err.println(\"Could not truncate the suspect string output file: \" + e);\n+      }\n \n-      } finally {\n-        try {\n-          buffReader.close();\n-          fileChannel.close();\n-        } catch (IOException e) {\n-          System.err.println(\"Could not close the suspect string output file: \" + e);\n-        }\n+    } finally {\n+      try {\n+        buffReader.close();\n+        fileChannel.close();\n+      } catch (IOException e) {\n+        System.err.println(\"Could not close the suspect string output file: \" + e);\n       }\n+    }\n \n-      if (suspectStringBuilder.length() != 0) {\n-        System.err.println(\"Suspicious strings were written to the log during this run.\\n\"\n-            + \"Fix the strings or use IgnoredException.addIgnoredException to ignore.\\n\"\n-            + suspectStringBuilder);\n+    if (suspectStringBuilder.length() != 0) {", "originalCommit": "2cd22023bf22f193cff2ff733610cba2cd40d7fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxODY4Nw==", "url": "https://github.com/apache/geode/pull/5625#discussion_r505718687", "bodyText": "Good point! Functionally it's fixed but I will also apply your other suggestion.", "author": "jdeppe-pivotal", "createdAt": "2020-10-15T17:32:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwOTE0MQ=="}], "type": "inlineReview"}, {"oid": "a66864d3d50a8715c0de7c987aa518b7db179f8d", "url": "https://github.com/apache/geode/commit/a66864d3d50a8715c0de7c987aa518b7db179f8d", "message": "Review updates. Add ignored exception to locator VM", "committedDate": "2020-10-15T15:51:27Z", "type": "commit"}, {"oid": "225cb0875b1504d9ffddcfa8990cac1ab397568d", "url": "https://github.com/apache/geode/commit/225cb0875b1504d9ffddcfa8990cac1ab397568d", "message": "Fix failing tests", "committedDate": "2020-10-15T15:55:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2OTE1Mg==", "url": "https://github.com/apache/geode/pull/5625#discussion_r505669152", "bodyText": "An alternative is to create a StringBuilder here and pass it into checkSuspectFile() to collect the suspects. That way the strings can be included in the assertion failure message.", "author": "demery-pivotal", "createdAt": "2020-10-15T16:13:55Z", "path": "geode-dunit/src/main/java/org/apache/geode/test/dunit/internal/DUnitLauncher.java", "diffHunk": "@@ -395,12 +395,18 @@ public static void closeAndCheckForSuspects() {\n           + \"' - perhaps a rule that is cleaning up before suspect processing has already run.\");\n     }\n \n+    boolean ok = true;", "originalCommit": "225cb0875b1504d9ffddcfa8990cac1ab397568d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxOTA2OQ==", "url": "https://github.com/apache/geode/pull/5625#discussion_r505719069", "bodyText": "Good idea - I'll apply that shortly.", "author": "jdeppe-pivotal", "createdAt": "2020-10-15T17:33:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2OTE1Mg=="}], "type": "inlineReview"}, {"oid": "384206da3f595063e0f7c1f5ee5b66820a0dc9ce", "url": "https://github.com/apache/geode/commit/384206da3f595063e0f7c1f5ee5b66820a0dc9ce", "message": "Apply review fixes which also fixed some of the failing tests. Have LogConsumer return Strings instead of StringBuilders", "committedDate": "2020-10-15T19:08:04Z", "type": "commit"}, {"oid": "e031ef5631216b2c5663fe2a3c40b5932fb2fa61", "url": "https://github.com/apache/geode/commit/e031ef5631216b2c5663fe2a3c40b5932fb2fa61", "message": "Bah humbug!", "committedDate": "2020-10-15T20:59:07Z", "type": "commit"}, {"oid": "21a6d23c288e0353c3b7b6eaf9205557807997bc", "url": "https://github.com/apache/geode/commit/21a6d23c288e0353c3b7b6eaf9205557807997bc", "message": "Leaving in the bad regexp which will be addressed by a subsequent Jira", "committedDate": "2020-10-27T19:55:57Z", "type": "commit"}]}