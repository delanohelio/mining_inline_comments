{"pr_number": 4642, "pr_title": "GEODE-7600-4: Further cleanup", "pr_createdAt": "2020-01-28T19:40:24Z", "pr_url": "https://github.com/apache/geode/pull/4642", "timeline": [{"oid": "32a3727c88e70e2070fc4717bc73e16bf3706711", "url": "https://github.com/apache/geode/commit/32a3727c88e70e2070fc4717bc73e16bf3706711", "message": "GEODE-7600-4: Further cleanup\nCleaning the teardown approach\nchange to wait for event history to be correct.\ngetting rid of a timing issue", "committedDate": "2020-01-28T19:36:10Z", "type": "commit"}, {"oid": "5944f6c0eedbe76c4839737e11036c51c2e78da4", "url": "https://github.com/apache/geode/commit/5944f6c0eedbe76c4839737e11036c51c2e78da4", "message": "Getting rid of a debug change.", "committedDate": "2020-01-28T19:49:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA3Mjg3Mw==", "url": "https://github.com/apache/geode/pull/4642#discussion_r372072873", "bodyText": "Part of this fix was to cleanout the teardown code so it would run correctly.", "author": "mhansonp", "createdAt": "2020-01-28T21:39:22Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java", "diffHunk": "@@ -120,24 +119,14 @@ public void setup() {\n \n   @After\n   public void tearDown() {\n-    getSystem();\n-    Invoke.invokeInEveryVM(\"getSystem\", new SerializableRunnable() {\n-      @Override\n-      public void run() {\n-        getSystem();\n-      }\n-    });\n-  }\n-\n-  @Override\n-  public final void postTearDownCacheTestCase() {\n     Invoke.invokeInEveryVM(() -> {\n-      Map<String, Pool> pools = PoolManager.getAll();\n-      assertThat(pools).describedAs(\"found pools remaining after teardown: \" + pools).isEmpty();\n+      if (basicGetCache() != null) {", "originalCommit": "5944f6c0eedbe76c4839737e11036c51c2e78da4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYzNTk3Mg==", "url": "https://github.com/apache/geode/pull/4642#discussion_r372635972", "bodyText": "I learned today that you can just do:\nPoolManager.close()\n\nAnd that'll close all pools.", "author": "kirklund", "createdAt": "2020-01-29T21:20:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA3Mjg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYzOTUxMA==", "url": "https://github.com/apache/geode/pull/4642#discussion_r372639510", "bodyText": "Sweet, next time I will use that...", "author": "mhansonp", "createdAt": "2020-01-29T21:28:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA3Mjg3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA3MzMwMw==", "url": "https://github.com/apache/geode/pull/4642#discussion_r372073303", "bodyText": "This is important to wait so that the server has all the keys so that we don't get invalidates in addition to the Local_Load_Creates", "author": "mhansonp", "createdAt": "2020-01-28T21:40:28Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java", "diffHunk": "@@ -1298,75 +1311,70 @@ public void run2() throws CacheException {\n       CertifiableTestCacheListener<Object, Object> ctl =\n           (CertifiableTestCacheListener<Object, Object>) region.getAttributes()\n               .getCacheListeners()[0];\n+\n       for (int i = 0; i < 10; i++) {\n         Object key = i;\n         ctl.waitForDestroyed(key);\n         Region.Entry entry = region.getEntry(key);\n         assertThat(entry).isNull();\n       }\n-      {\n-        List<CacheEvent<Object, Object>> list = ctl.getEventHistory();\n-        assertThat(10).isEqualTo(list.size());\n-        for (int i = 0; i < 10; i++) {\n-          Object key = i;\n-          EntryEvent ee = (EntryEvent) list.get(i);\n-          assertThat(ee.getKey()).isEqualTo(key);\n-          assertThat(ee.getOldValue()).isNull();\n-          assertThat(Operation.DESTROY).isEqualTo(ee.getOperation());\n-          assertThat(\"destroyCB\" + i).isEqualTo(ee.getCallbackArgument());\n-          assertThat(ee.isOriginRemote()).isTrue();\n-        }\n+\n+      List<CacheEvent<Object, Object>> list = assertForOpCount(name, Operation.DESTROY, 10);\n+\n+      for (int i = 0; i < 10; i++) {\n+        Object key = i;\n+        EntryEvent ee = (EntryEvent) list.get(i);\n+        assertThat(ee.getKey()).isEqualTo(key);\n+        assertThat(ee.getOldValue()).isNull();\n+        assertThat(\"destroyCB\" + i).isEqualTo(ee.getCallbackArgument());\n+        assertThat(ee.isOriginRemote()).isTrue();\n       }\n     });\n+\n     vm2.invoke(\"recreate\", () -> {\n       Region<Object, Object> region = getRootRegion().getSubregion(name);\n       for (int i = 0; i < 10; i++) {\n         Object key = i;\n-        region.create(key, \"create\" + i);\n+        region.create(key, \"recreate\" + i, \"recreateCB\" + i);\n       }\n     });\n \n-    vm1.invoke(\"Verify creates\", () -> {\n+    vm1.invoke(\"Verify Local Load Creates\", () -> {\n       Region<Object, Object> region = getRootRegion().getSubregion(name);\n-      CertifiableTestCacheListener<Object, Object> ctl =\n-          (CertifiableTestCacheListener<Object, Object>) region.getAttributes()\n-              .getCacheListeners()[0];\n-      List<CacheEvent<Object, Object>> list = ctl.getEventHistory();\n-      logger\n-          .info(\"history (should be empty): \" + list);\n-      assertThat(list).isEmpty();\n-      // now see if we can get it from the server\n+\n+      await().untilAsserted(() -> {", "originalCommit": "5944f6c0eedbe76c4839737e11036c51c2e78da4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA3MzQ3Mg==", "url": "https://github.com/apache/geode/pull/4642#discussion_r372073472", "bodyText": "These are no longer necessary.", "author": "mhansonp", "createdAt": "2020-01-28T21:40:51Z", "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/ConnectionPoolDUnitTest.java", "diffHunk": "@@ -333,9 +322,6 @@ public void beforeCreate2(EntryEvent event) throws CacheWriterException {\n       Region<Object, Object> region = getRootRegion().getSubregion(name);\n       region.localDestroyRegion();\n     });\n-", "originalCommit": "5944f6c0eedbe76c4839737e11036c51c2e78da4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}