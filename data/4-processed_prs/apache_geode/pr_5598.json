{"pr_number": 5598, "pr_title": "GEODE-8579: Stop waiting locator-wait-time if all locators are available", "pr_createdAt": "2020-10-06T17:52:30Z", "pr_url": "https://github.com/apache/geode/pull/5598", "timeline": [{"oid": "7aec2e58ad2c7138159652a70ea5bd290a5bb29b", "url": "https://github.com/apache/geode/commit/7aec2e58ad2c7138159652a70ea5bd290a5bb29b", "message": "GEODE-8579: Stop waiting locator-wait-time if all locators are available\n\nIf we can contact all other locators, we should stop waiting for\nlocator-wait-time to elapse.", "committedDate": "2020-10-06T17:51:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyMTAzNQ==", "url": "https://github.com/apache/geode/pull/5598#discussion_r500521035", "bodyText": "better!", "author": "Bill", "createdAt": "2020-10-06T18:46:45Z", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/management/internal/cli/shell/StatusLocatorExitCodeAcceptanceTest.java", "diffHunk": "@@ -57,7 +56,7 @@\n   @BeforeClass\n   public static void startLocator() throws IOException {\n     rootPath = gfshRule.getTemporaryFolder().getRoot().toPath();\n-    locatorPort = getRandomAvailablePort(SOCKET);\n+    locatorPort = AvailablePortHelper.getRandomAvailableTCPPort();", "originalCommit": "7aec2e58ad2c7138159652a70ea5bd290a5bb29b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyMzk0OQ==", "url": "https://github.com/apache/geode/pull/5598#discussion_r500523949", "bodyText": "better (narrower) dependency!", "author": "Bill", "createdAt": "2020-10-06T18:51:46Z", "path": "geode-membership/src/main/java/org/apache/geode/internal/AvailablePort.java", "diffHunk": "@@ -32,7 +32,7 @@\n import java.util.Random;\n \n import org.apache.geode.annotations.Immutable;\n-import org.apache.geode.distributed.internal.DistributionConfig;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfig;", "originalCommit": "7aec2e58ad2c7138159652a70ea5bd290a5bb29b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzOTcxMQ==", "url": "https://github.com/apache/geode/pull/5598#discussion_r500539711", "bodyText": "This is a good test and it's acceptable as-is. I wonder though, if you'd be willing to entertain reducing run-time and increasing determinism by by injecting the (millisecond) time keeper and sleeper into the locator, the way it's done for PrimaryHandler?\nHere is the PR from August that added that injection: #5422\nAs of that PR (and now on develop) there are a couple functional interfaces defined in PrimaryHander that could be hoisted a little higher and used in MembershipLocator for your purposes, i.e. Sleeper, MillisecondProvider.\nWith those injected, this test could control time similar to how PrimaryHandlerTest does.", "author": "Bill", "createdAt": "2020-10-06T19:20:11Z", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/MembershipIntegrationTest.java", "diffHunk": "@@ -272,6 +276,65 @@ public void secondMembershipPausesForLocatorWaitTime()\n     stop(coordinatorLocator, lateJoiningLocator);\n   }\n \n+  @Test\n+  public void locatorsStopWaitingForLocatorWaitTimeIfAllLocatorsContacted()\n+      throws IOException, MemberStartupException, InterruptedException, TimeoutException,\n+      ExecutionException {\n+\n+    final Supplier<ExecutorService> executorServiceSupplier =\n+        () -> LoggingExecutors.newCachedThreadPool(\"membership\", false);\n+\n+    int[] locatorPorts = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n+\n+    int locatorWaitTime = (int) Duration.ofMinutes(5).getSeconds();\n+    final MembershipConfig config =\n+        createMembershipConfig(true, locatorWaitTime, locatorPorts[0], locatorPorts[1]);\n+\n+    CompletableFuture<Membership<MemberIdentifier>> createMembership0 =\n+        launchLocator(executorServiceSupplier, locatorPorts[0], config);\n+\n+    // Assert that membership 0 is waiting for the other locator to start\n+    Thread.sleep(5000);\n+    assertThat(createMembership0.getNow(null)).isNull();\n+\n+    CompletableFuture<Membership<MemberIdentifier>> createMembership1 =\n+        launchLocator(executorServiceSupplier, locatorPorts[1], config);\n+\n+    // Make sure the members are created in less than the locator-wait-time\n+    Membership<MemberIdentifier> membership0 = createMembership0.get(2, TimeUnit.MINUTES);\n+    Membership<MemberIdentifier> membership1 = createMembership1.get(2, TimeUnit.MINUTES);\n+\n+    // Make sure the members see each other in the view\n+    assertThat(membership0.getView().getMembers()).hasSize(2);\n+    assertThat(membership1.getView().getMembers()).hasSize(2);\n+  }", "originalCommit": "7aec2e58ad2c7138159652a70ea5bd290a5bb29b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyODUyMA==", "url": "https://github.com/apache/geode/pull/5598#discussion_r500628520", "bodyText": "Based on your comment I started down this road. But this is a test of the whole membership system, so this will require injecting virtual time into a whole lot of classes, including classes that are doing things like wait(sometimeout) etc. I feel like this needs a little bit more time and careful development to get right, and more than I want to shoehorn into this PR.", "author": "upthewaterspout", "createdAt": "2020-10-06T22:20:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzOTcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NTk4NA==", "url": "https://github.com/apache/geode/pull/5598#discussion_r501145984", "bodyText": "Ok @upthewaterspout. After this PR merges I'll write a ticket to make this improvement. Thanks for trying it though!", "author": "Bill", "createdAt": "2020-10-07T16:24:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzOTcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA1ODAzMA==", "url": "https://github.com/apache/geode/pull/5598#discussion_r502058030", "bodyText": "Here's that new ticket: https://issues.apache.org/jira/browse/GEODE-8589", "author": "Bill", "createdAt": "2020-10-08T22:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzOTcxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0NDcyMg==", "url": "https://github.com/apache/geode/pull/5598#discussion_r500544722", "bodyText": "verified when address cannot be resolved the exception causes exit code 1 (on macos) \u2713", "author": "Bill", "createdAt": "2020-10-06T19:29:32Z", "path": "geode-membership/src/main/java/org/apache/geode/internal/AvailablePort.java", "diffHunk": "@@ -547,12 +548,7 @@ public static void main(String[] args) {\n \n     InetAddress addr = null;\n     if (addrString != null) {\n-      try {\n-        addr = InetAddress.getByName(addrString);\n-      } catch (Exception e) {\n-        e.printStackTrace();\n-        ExitCode.FATAL.doSystemExit();\n-      }\n+      addr = InetAddress.getByName(addrString);", "originalCommit": "7aec2e58ad2c7138159652a70ea5bd290a5bb29b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3MDY2OQ==", "url": "https://github.com/apache/geode/pull/5598#discussion_r500570669", "bodyText": "What symbol does geode-membership bring that geode-memcached is consuming?", "author": "rhoughton-pivot", "createdAt": "2020-10-06T20:18:15Z", "path": "geode-memcached/build.gradle", "diffHunk": "@@ -31,6 +31,7 @@ dependencies {\n   testImplementation('org.mockito:mockito-core')\n   testImplementation(project(':geode-junit'))\n \n+  integrationTestImplementation(project(':geode-membership'))", "originalCommit": "7aec2e58ad2c7138159652a70ea5bd290a5bb29b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3NzUzOA==", "url": "https://github.com/apache/geode/pull/5598#discussion_r500577538", "bodyText": "AvailablePort", "author": "upthewaterspout", "createdAt": "2020-10-06T20:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3MDY2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU4NTMxMA==", "url": "https://github.com/apache/geode/pull/5598#discussion_r500585310", "bodyText": "Wow, shame on me. I didn't catch that there was a file-move by looking at the change summary. #approved", "author": "rhoughton-pivot", "createdAt": "2020-10-06T20:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3MDY2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU4MTIyOQ==", "url": "https://github.com/apache/geode/pull/5598#discussion_r500581229", "bodyText": "It looks like this evaluates to true any time we are able to contact all of the locators, even if one of those locators is part of an existing DS. In other words, if joinedMembersContacted is greater than zero but locatorsContacted is equal to locators.size() it tries to become the coordinator. Is that OK/can that even happen? I don't know enough about this code to say for sure.", "author": "aaronlindsey", "createdAt": "2020-10-06T20:38:41Z", "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/membership/GMSJoinLeave.java", "diffHunk": "@@ -349,9 +349,9 @@ public boolean join() throws MemberStartupException {\n               && state.possibleCoordinator.equals(this.localAddress)) {\n             // if we haven't contacted a member of a cluster maybe this node should\n             // become the coordinator.\n-            if (state.joinedMembersContacted <= 0 && (now >= locatorGiveUpTime) &&\n-                (tries >= minimumRetriesBeforeBecomingCoordinator ||\n-                    state.locatorsContacted >= locators.size())) {\n+            if (state.joinedMembersContacted <= 0 && (now >= locatorGiveUpTime &&\n+                tries >= minimumRetriesBeforeBecomingCoordinator) ||\n+                state.locatorsContacted >= locators.size()) {", "originalCommit": "7aec2e58ad2c7138159652a70ea5bd290a5bb29b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU5NDA2MQ==", "url": "https://github.com/apache/geode/pull/5598#discussion_r500594061", "bodyText": "Gah! Good catch! Let me see if I have any more parenthesis lying around here.", "author": "upthewaterspout", "createdAt": "2020-10-06T21:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU4MTIyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYxNDc2Nw==", "url": "https://github.com/apache/geode/pull/5598#discussion_r500614767", "bodyText": "The new logic in the latest commit makes sense to me.", "author": "aaronlindsey", "createdAt": "2020-10-06T21:46:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU4MTIyOQ=="}], "type": "inlineReview"}, {"oid": "4ea2ce1ba2071ec325cb3c56ebebbea7b5252b06", "url": "https://github.com/apache/geode/commit/4ea2ce1ba2071ec325cb3c56ebebbea7b5252b06", "message": "Review comments - only become coordinator if no members are in the system\n\nWe should only become the coordinator if we have not contacted any joined members.", "committedDate": "2020-10-06T21:14:05Z", "type": "commit"}, {"oid": "86cf8d496e147ded5a7ee8c5593e5eaff97655d6", "url": "https://github.com/apache/geode/commit/86cf8d496e147ded5a7ee8c5593e5eaff97655d6", "message": "Updating RestrictUseOfInetAddressJUnitTest\n\nAvailablePort moved, so is no longer needed as a sanctioned class in this test.", "committedDate": "2020-10-06T22:35:51Z", "type": "commit"}]}