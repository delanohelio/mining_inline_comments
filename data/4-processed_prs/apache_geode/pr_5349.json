{"pr_number": 5349, "pr_title": "GEODE-8333: Fix PUBSUB hang", "pr_createdAt": "2020-07-06T21:34:45Z", "pr_url": "https://github.com/apache/geode/pull/5349", "timeline": [{"oid": "be5e98a817db7c28b8c3553cb993cb65f25c8e41", "url": "https://github.com/apache/geode/commit/be5e98a817db7c28b8c3553cb993cb65f25c8e41", "message": "GEODE-8333: Fix PUBSUB hang\n\nPUBSUB hangs with concurrent publishers and subscribers on multiple\nservers. Changed Publish executor to execute publish on background\nthread. Removed separate separate subscriber group.  Added DUnit test to\nrecreate failure.\n\nCo-authored-by: Murtuza Boxwala <mboxwala@pivotal.io>", "committedDate": "2020-07-22T16:47:26Z", "type": "commit"}, {"oid": "be5e98a817db7c28b8c3553cb993cb65f25c8e41", "url": "https://github.com/apache/geode/commit/be5e98a817db7c28b8c3553cb993cb65f25c8e41", "message": "GEODE-8333: Fix PUBSUB hang\n\nPUBSUB hangs with concurrent publishers and subscribers on multiple\nservers. Changed Publish executor to execute publish on background\nthread. Removed separate separate subscriber group.  Added DUnit test to\nrecreate failure.\n\nCo-authored-by: Murtuza Boxwala <mboxwala@pivotal.io>", "committedDate": "2020-07-22T16:47:26Z", "type": "forcePushed"}, {"oid": "d0a463339c4542f2eb1c7513b9da7cdc0d490f77", "url": "https://github.com/apache/geode/commit/d0a463339c4542f2eb1c7513b9da7cdc0d490f77", "message": "A commandQueue is now used to preserve the order\nin which commands are executed even if a command\nif executed async. Currently the only async command\nis PUBLISH.", "committedDate": "2020-07-22T21:09:23Z", "type": "commit"}, {"oid": "ecea8bbdf966e475d4bb2ef61e1f9cd45af231f7", "url": "https://github.com/apache/geode/commit/ecea8bbdf966e475d4bb2ef61e1f9cd45af231f7", "message": "pubsub dunit now passes", "committedDate": "2020-07-23T21:38:51Z", "type": "commit"}, {"oid": "f6b665614ac21b15a5f5dcbf48b85233bed9e976", "url": "https://github.com/apache/geode/commit/f6b665614ac21b15a5f5dcbf48b85233bed9e976", "message": "now uses the geode waitingPool for background execution of async redis commands", "committedDate": "2020-07-23T23:53:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTkzOQ==", "url": "https://github.com/apache/geode/pull/5349#discussion_r460149939", "bodyText": "Is there a test for this exception?", "author": "ringles", "createdAt": "2020-07-24T16:09:56Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java", "diffHunk": "@@ -191,38 +199,121 @@ public void channelInactive(ChannelHandlerContext ctx) {\n     ctx.close();\n   }\n \n-  private void executeCommand(ChannelHandlerContext ctx, Command command) {\n-    RedisResponse response;\n-\n-    if (!isAuthenticated()) {\n-      response = handleUnAuthenticatedCommand(command);\n-      writeToChannel(response);\n-      return;\n+  private void startAsyncCommandExecution(Command command) {\n+    if (logger.isDebugEnabled()) {\n+      logger.debug(\"Starting execution of async Redis command: {}\", command);\n     }\n+    final long start = redisStats.startCommand(command.getCommandType());\n+    command.setAsyncStartTime(start);\n+    command.execute(this);\n+  }\n \n-    if (command.isUnsupported() && !allowUnsupportedCommands()) {\n-      writeToChannel(\n-          RedisResponse.error(command.getCommandType() + RedisConstants.ERROR_UNSUPPORTED_COMMAND));\n-      return;\n+  public void endAsyncCommandExecution(Command command, ByteBuf response) {\n+    synchronized (commandQueue) {\n+      Command head = takeFromCommandQueue();\n+      if (head != command) {\n+        throw new IllegalStateException(\n+            \"expected \" + command + \" but found \" + head + \" in the queue\");", "originalCommit": "f6b665614ac21b15a5f5dcbf48b85233bed9e976", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2MzE3OA==", "url": "https://github.com/apache/geode/pull/5349#discussion_r460163178", "bodyText": "No. This is basically a check to make sure the implementation is correct. It should never happen if it is.\nSo the only way I could think of getting it to happen under test would be to have a unit test that mocks takeFromCommandQueue to return a bogus command. But I don't see much value in adding that test.", "author": "dschneider-pivotal", "createdAt": "2020-07-24T16:35:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTkzOQ=="}], "type": "inlineReview"}, {"oid": "728832147739278ec8b9847bdf113b4478e59203", "url": "https://github.com/apache/geode/commit/728832147739278ec8b9847bdf113b4478e59203", "message": "fixed a race in which a sync command could cut ahead\nof another command and be executed in the wrong order", "committedDate": "2020-07-24T17:23:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNzA0MA==", "url": "https://github.com/apache/geode/pull/5349#discussion_r460227040", "bodyText": "I think this might read a bit better like this:\n    synchronized (commandQueue) {\n      boolean isEmpty = commandQueue.isEmpty();\n      boolean isAsync = command.getCommandType().isAsync();\n      if (!isEmpty) {\n        commandQueue.offer(command);\n        return;\n      }\n      if (!isAsync) {\n        executeCommand(command);\n      } else {\n        commandQueue.offer(command);\n        startAsyncCommandExecution(command);\n      }\n    }", "author": "jdeppe-pivotal", "createdAt": "2020-07-24T18:43:56Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/netty/ExecutionHandlerContext.java", "diffHunk": "@@ -113,17 +114,19 @@ public ChannelFuture writeToChannel(RedisResponse response) {\n   @Override\n   public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n     Command command = (Command) msg;\n-    try {\n-      if (logger.isDebugEnabled()) {\n-        logger.debug(\"Executing Redis command: {}\", command);\n+    command.setChannelHandlerContext(ctx);", "originalCommit": "728832147739278ec8b9847bdf113b4478e59203", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0Mzc1Ng==", "url": "https://github.com/apache/geode/pull/5349#discussion_r460243756", "bodyText": "Yes, and since isEmpty and isAsync are only used once I ended up changing it to this:\n    synchronized (commandQueue) {\n      if (!commandQueue.isEmpty()) {\n        commandQueue.offer(command);\n        return;\n      }\n      if (command.getCommandType().isAsync()) {\n        commandQueue.offer(command);\n        startAsyncCommandExecution(command);\n        return;\n      }\n      executeCommand(command);\n    }", "author": "dschneider-pivotal", "createdAt": "2020-07-24T19:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNzA0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyODMwNg==", "url": "https://github.com/apache/geode/pull/5349#discussion_r460228306", "bodyText": "I'd prefer to create a RedisResponse so that we keep netty specifics out of the executors.", "author": "jdeppe-pivotal", "createdAt": "2020-07-24T18:46:46Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/PublishExecutor.java", "diffHunk": "@@ -27,12 +30,34 @@\n   @Override\n   public RedisResponse executeCommand(Command command,\n       ExecutionHandlerContext context) {\n-    List<byte[]> args = command.getProcessedCommand();\n-\n-    long publishCount =\n-        context.getPubSub().publish(getDataRegion(context), args.get(1), args.get(2));\n-\n-    return RedisResponse.integer(publishCount);\n+    context.getBackgroundExecutor().submit(new PublishingRunnable(context, command));\n+    return null;\n   }\n \n+  public static class PublishingRunnable implements Runnable {\n+\n+    private final ExecutionHandlerContext context;\n+    private final Command command;\n+\n+    public PublishingRunnable(ExecutionHandlerContext context, Command command) {\n+      this.context = context;\n+      this.command = command;\n+    }\n+\n+    @Override\n+    public void run() {\n+      List<byte[]> args = command.getProcessedCommand();\n+      byte[] channelName = args.get(1);\n+      byte[] message = args.get(2);\n+      try {\n+        long publishCount =\n+            context.getPubSub()\n+                .publish(context.getRegionProvider().getDataRegion(), channelName, message);\n+        ByteBuf response = Coder.getIntegerResponse(context.getByteBufAllocator(), publishCount);", "originalCommit": "728832147739278ec8b9847bdf113b4478e59203", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1MTMzMQ==", "url": "https://github.com/apache/geode/pull/5349#discussion_r460251331", "bodyText": "Done. I also found one other place (in AbstractSubscription) that was not using RedisResponse. I change it also to do so and deleted the old writeToChannel(ByteBuf) which was no longer used after these changes.", "author": "dschneider-pivotal", "createdAt": "2020-07-24T19:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyODMwNg=="}], "type": "inlineReview"}, {"oid": "098a69913daadd9aaa30877ad5b0ac4d503dc989", "url": "https://github.com/apache/geode/commit/098a69913daadd9aaa30877ad5b0ac4d503dc989", "message": "review feedback changes", "committedDate": "2020-07-24T19:35:52Z", "type": "commit"}]}