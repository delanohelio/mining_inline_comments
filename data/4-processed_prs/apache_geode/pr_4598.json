{"pr_number": 4598, "pr_title": "GEODE-7706: throw correct TransactionDataRebalancedException.", "pr_createdAt": "2020-01-16T00:38:13Z", "pr_url": "https://github.com/apache/geode/pull/4598", "timeline": [{"oid": "17f29ba93d9423600c4c0f3b407cc9011766f565", "url": "https://github.com/apache/geode/commit/17f29ba93d9423600c4c0f3b407cc9011766f565", "message": "GEODE-7706: throw correct TransactionDataRebalancedException.", "committedDate": "2020-01-16T00:34:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE4NTM0Ng==", "url": "https://github.com/apache/geode/pull/4598#discussion_r367185346", "bodyText": "Is it worth extracting this string to a constant in the PartitionedRegion class so that it can be consistently referred to?", "author": "DonalEvans", "createdAt": "2020-01-16T01:03:37Z", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "diffHunk": "@@ -439,6 +443,66 @@ public void generatePRIdShouldNotThrowNumberFormatExceptionIfAnErrorOccursWhileR\n         .doesNotThrowAnyException();\n   }\n \n+  @Test\n+  public void getDataRegionForWriteThrowsTransactionExceptionIfNotDataStore() {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    KeyInfo keyInfo = mock(KeyInfo.class);\n+    when(keyInfo.getBucketId()).thenReturn(1);\n+    doReturn(null).when(spyPartitionedRegion).getDataStore();\n+\n+    Throwable caughtException =\n+        catchThrowable(() -> spyPartitionedRegion.getDataRegionForWrite(keyInfo));\n+\n+    assertThat(caughtException).isInstanceOf(TransactionException.class).hasMessage(\n+        \"PartitionedRegion Transactions cannot execute on nodes with local max memory zero\");\n+  }\n+\n+  @Test\n+  public void getDataRegionForWriteThrowsTransactionDataRebalancedExceptionIfGetInitializedBucketThrowsForceReattemptException()\n+      throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    KeyInfo keyInfo = mock(KeyInfo.class);\n+    Object key = new Object();\n+    PartitionedRegionDataStore dataStore = mock(PartitionedRegionDataStore.class);\n+    when(keyInfo.getBucketId()).thenReturn(1);\n+    when(keyInfo.getKey()).thenReturn(key);\n+    when(keyInfo.isCheckPrimary()).thenReturn(true);\n+    doReturn(dataStore).when(spyPartitionedRegion).getDataStore();\n+    doThrow(new ForceReattemptException(\"\")).when(dataStore)\n+        .getInitializedBucketWithKnownPrimaryForId(key, 1);\n+    doReturn(mock(InternalDistributedMember.class)).when(spyPartitionedRegion).createBucket(1, 0,\n+        null);\n+\n+    Throwable caughtException =\n+        catchThrowable(() -> spyPartitionedRegion.getDataRegionForWrite(keyInfo));\n+\n+    assertThat(caughtException).isInstanceOf(TransactionDataRebalancedException.class)\n+        .hasMessage(\"Transactional data moved, due to rebalancing.\");", "originalCommit": "17f29ba93d9423600c4c0f3b407cc9011766f565", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1OTY2MA==", "url": "https://github.com/apache/geode/pull/4598#discussion_r367559660", "bodyText": "Good idea, will make the change next time.", "author": "pivotal-eshu", "createdAt": "2020-01-16T17:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE4NTM0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzNDg5NA==", "url": "https://github.com/apache/geode/pull/4598#discussion_r367534894", "bodyText": "These assertions within the tests can be further simplified by using something like the following:\n    assertThatThrownBy(() -> spyPartitionedRegion.getDataRegionForWrite(keyInfo))\n        .isInstanceOf(TransactionException.class)\n        .hasMessage(\"PartitionedRegion Transactions cannot execute on nodes with local max memory zero\");", "author": "jujoramos", "createdAt": "2020-01-16T16:54:25Z", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "diffHunk": "@@ -439,6 +443,66 @@ public void generatePRIdShouldNotThrowNumberFormatExceptionIfAnErrorOccursWhileR\n         .doesNotThrowAnyException();\n   }\n \n+  @Test\n+  public void getDataRegionForWriteThrowsTransactionExceptionIfNotDataStore() {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    KeyInfo keyInfo = mock(KeyInfo.class);\n+    when(keyInfo.getBucketId()).thenReturn(1);\n+    doReturn(null).when(spyPartitionedRegion).getDataStore();\n+\n+    Throwable caughtException =\n+        catchThrowable(() -> spyPartitionedRegion.getDataRegionForWrite(keyInfo));\n+\n+    assertThat(caughtException).isInstanceOf(TransactionException.class).hasMessage(\n+        \"PartitionedRegion Transactions cannot execute on nodes with local max memory zero\");", "originalCommit": "17f29ba93d9423600c4c0f3b407cc9011766f565", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}