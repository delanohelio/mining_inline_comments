{"pr_number": 5191, "pr_title": "GEODE-8198: Revise docs description of putAll()", "pr_createdAt": "2020-06-01T21:02:38Z", "pr_url": "https://github.com/apache/geode/pull/5191", "timeline": [{"oid": "b94a180460d40ad698a981634e5f43a6ee0897fa", "url": "https://github.com/apache/geode/commit/b94a180460d40ad698a981634e5f43a6ee0897fa", "message": "GEODE-8198: Revise docs description of putAll()", "committedDate": "2020-06-01T20:52:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5MzA4MQ==", "url": "https://github.com/apache/geode/pull/5191#discussion_r433493081", "bodyText": "Actually the order of processing for keys in the map is not guaranteed. But we don't have to mention it.", "author": "gesterzhou", "createdAt": "2020-06-01T21:12:14Z", "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,36 +60,90 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n \n-**Example:**\n+The updates to the cache are done individually in the order in which\n+they were placed in the `Map`.", "originalCommit": "b94a180460d40ad698a981634e5f43a6ee0897fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5MzczNQ==", "url": "https://github.com/apache/geode/pull/5191#discussion_r433493735", "bodyText": "Nice to know.  That info was already in our docs.  Must've been there and incorrect for a long time!  Is the lack of an ordering guarantee also in effect for the other bulk operations?", "author": "karensmolermiller", "createdAt": "2020-06-01T21:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5MzA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5NTc5OQ==", "url": "https://github.com/apache/geode/pull/5191#discussion_r433495799", "bodyText": "Same for removeAll. It depends on what kind of map user is using. For example, if user is using LinkedHashMap, the order of keys will be maintained. But we did not enforce the user to have to use LinkedHashMap. Our API accepts any Map implementation.", "author": "gesterzhou", "createdAt": "2020-06-01T21:18:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5MzA4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5NjM5NA==", "url": "https://github.com/apache/geode/pull/5191#discussion_r433496394", "bodyText": "If you explicitly talking about PR's putAll here, you might have to also have a chapter to talk about DR's putAll. Their behavior are different.", "author": "gesterzhou", "createdAt": "2020-06-01T21:19:23Z", "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,36 +60,90 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n \n-**Example:**\n+The updates to the cache are done individually in the order in which\n+they were placed in the `Map`.\n+For partitioned regions,", "originalCommit": "b94a180460d40ad698a981634e5f43a6ee0897fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMTkyOA==", "url": "https://github.com/apache/geode/pull/5191#discussion_r433511928", "bodyText": "\"Either\" is singular, so \"If either.. is thrown...\"", "author": "davebarnes97", "createdAt": "2020-06-01T21:56:37Z", "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,36 +60,90 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n \n-**Example:**\n+The updates to the cache are done individually in the order in which\n+they were placed in the `Map`.\n+For partitioned regions,\n+multiple events are sent as a single message to the primary buckets\n+and then distributed to the secondary buckets.\n+\n+The design of a client application within a client-server design pattern\n+faces the possibility that a partial operation can occur.\n+Some, all, or none of the specified entries may be completed with `putAll`.\n+If either `ServerOperationException` or `ServerConnectivityException` are", "originalCommit": "b94a180460d40ad698a981634e5f43a6ee0897fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTUyMQ==", "url": "https://github.com/apache/geode/pull/5191#discussion_r433515521", "bodyText": "Line 144-146 looks like duplicate of line 133-135.", "author": "jchen21", "createdAt": "2020-06-01T22:06:03Z", "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,36 +60,90 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n \n-**Example:**\n+The updates to the cache are done individually in the order in which\n+they were placed in the `Map`.\n+For partitioned regions,\n+multiple events are sent as a single message to the primary buckets\n+and then distributed to the secondary buckets.\n+\n+The design of a client application within a client-server design pattern\n+faces the possibility that a partial operation can occur.\n+Some, all, or none of the specified entries may be completed with `putAll`.\n+If either `ServerOperationException` or `ServerConnectivityException` are\n+thrown,\n+it can indicate an incomplete operation.\n \n ``` pre\n-void putAll(String command) throws CacheException \n-{ \n-// Get Entry keys and values into Strings key1, ... keyN and value1, ... valueN \n-  Map map = new LinkedHashMap(); \n-  map.put(key1, value1)); \n-  ...\n-  map.put(keyN, valueN));\n-  this.currRegion.putAll(map); \n+int retry = 0;\n+RuntimeException rte = null;\n+while (retry < 3) {\n+  try {\n+    region.putAll(map);\n+  } catch (ServerOperationException e) {\n+    if (e.getCause() instanceof TimeoutException\n+        || e.getCause() instanceof LowMemoryException) {\n+      // Retry due to transient error.\n+      retry++;\n+    } else {\n+      rte = e;\n+      break;\n+    }\n+  } catch (ServerConnectivityException e) {\n+    // Retry due to transient error.\n+    retry++;\n+  }\n+}\n+\n+if (retry == 3) {\n+  System.out.println(\"3 putAll operations tried, and all failed.\");\n+} else if (rte != null) {\n+  System.out.println(\"putAll failed due to \" + rte);\n+  throw rte;\n }\n ```\n \n+A thrown exception of `ServerConnectivityException` with a cause of\n+`TimeoutException` or `LowMemoryException` can be a transient error.\n+A limited quantity of retries of the `putAll` may result in a completed\n+operation.\n+A repeated timeout may imply that the `read-timeout` value is not\n+long enough to complete the bulk operation;\n+use the `org.apache.geode.cache.client.PoolFactory.setReadTimeout`\n+method to set the `read-timeout` value.\n+\n+Client applications that cannot tolerate partial completion of a `putAll`\n+operation may embed the operation into a transaction.\n+See [Transactions](../../developing/transactions/chapter_overview.html)\n+for details.\n+\n+**Note:**\n+The processing of a map with many entries and/or extra-large data values\n+may affect system performance and cause cache update timeouts,\n+especially if the region uses overflow or persistence to disk.\n+\n+## <a id=\"removeAll_method\" class=\"no-quick-link\"></a>The removeAll Operation\n+\n+The batch operation `Region.removeAll`\n+\n The updates to the cache are done individually in the order in which they were placed in the `Map`. For partitioned regions, multiple events are sent as a single message to the primary buckets and then distributed to the secondary buckets.\n \n **Note:**\n-The processing of maps with very many entries and/or very large data may affect system performance and cause cache update timeouts, especially if the region uses overflow or persistence to disk.\n+The processing of a map with many entries and/or extra-large data values", "originalCommit": "b94a180460d40ad698a981634e5f43a6ee0897fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxOTc5MQ==", "url": "https://github.com/apache/geode/pull/5191#discussion_r434019791", "bodyText": "Purposeful repeat. One of these is for putAll, and the other is for removeAll. Thank for your attention to detail!", "author": "karensmolermiller", "createdAt": "2020-06-02T16:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzMTQwOQ==", "url": "https://github.com/apache/geode/pull/5191#discussion_r433531409", "bodyText": "Here should be ServerOperationException.", "author": "gesterzhou", "createdAt": "2020-06-01T22:54:27Z", "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,36 +60,90 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n \n-**Example:**\n+The updates to the cache are done individually in the order in which\n+they were placed in the `Map`.\n+For partitioned regions,\n+multiple events are sent as a single message to the primary buckets\n+and then distributed to the secondary buckets.\n+\n+The design of a client application within a client-server design pattern\n+faces the possibility that a partial operation can occur.\n+Some, all, or none of the specified entries may be completed with `putAll`.\n+If either `ServerOperationException` or `ServerConnectivityException` are\n+thrown,\n+it can indicate an incomplete operation.\n \n ``` pre\n-void putAll(String command) throws CacheException \n-{ \n-// Get Entry keys and values into Strings key1, ... keyN and value1, ... valueN \n-  Map map = new LinkedHashMap(); \n-  map.put(key1, value1)); \n-  ...\n-  map.put(keyN, valueN));\n-  this.currRegion.putAll(map); \n+int retry = 0;\n+RuntimeException rte = null;\n+while (retry < 3) {\n+  try {\n+    region.putAll(map);\n+  } catch (ServerOperationException e) {\n+    if (e.getCause() instanceof TimeoutException\n+        || e.getCause() instanceof LowMemoryException) {\n+      // Retry due to transient error.\n+      retry++;\n+    } else {\n+      rte = e;\n+      break;\n+    }\n+  } catch (ServerConnectivityException e) {\n+    // Retry due to transient error.\n+    retry++;\n+  }\n+}\n+\n+if (retry == 3) {\n+  System.out.println(\"3 putAll operations tried, and all failed.\");\n+} else if (rte != null) {\n+  System.out.println(\"putAll failed due to \" + rte);\n+  throw rte;\n }\n ```\n \n+A thrown exception of `ServerConnectivityException` with a cause of", "originalCommit": "b94a180460d40ad698a981634e5f43a6ee0897fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzMTk4Mg==", "url": "https://github.com/apache/geode/pull/5191#discussion_r433531982", "bodyText": "could also cause LowMemoryException", "author": "gesterzhou", "createdAt": "2020-06-01T22:56:10Z", "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,36 +60,90 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n \n-**Example:**\n+The updates to the cache are done individually in the order in which\n+they were placed in the `Map`.\n+For partitioned regions,\n+multiple events are sent as a single message to the primary buckets\n+and then distributed to the secondary buckets.\n+\n+The design of a client application within a client-server design pattern\n+faces the possibility that a partial operation can occur.\n+Some, all, or none of the specified entries may be completed with `putAll`.\n+If either `ServerOperationException` or `ServerConnectivityException` are\n+thrown,\n+it can indicate an incomplete operation.\n \n ``` pre\n-void putAll(String command) throws CacheException \n-{ \n-// Get Entry keys and values into Strings key1, ... keyN and value1, ... valueN \n-  Map map = new LinkedHashMap(); \n-  map.put(key1, value1)); \n-  ...\n-  map.put(keyN, valueN));\n-  this.currRegion.putAll(map); \n+int retry = 0;\n+RuntimeException rte = null;\n+while (retry < 3) {\n+  try {\n+    region.putAll(map);\n+  } catch (ServerOperationException e) {\n+    if (e.getCause() instanceof TimeoutException\n+        || e.getCause() instanceof LowMemoryException) {\n+      // Retry due to transient error.\n+      retry++;\n+    } else {\n+      rte = e;\n+      break;\n+    }\n+  } catch (ServerConnectivityException e) {\n+    // Retry due to transient error.\n+    retry++;\n+  }\n+}\n+\n+if (retry == 3) {\n+  System.out.println(\"3 putAll operations tried, and all failed.\");\n+} else if (rte != null) {\n+  System.out.println(\"putAll failed due to \" + rte);\n+  throw rte;\n }\n ```\n \n+A thrown exception of `ServerConnectivityException` with a cause of\n+`TimeoutException` or `LowMemoryException` can be a transient error.\n+A limited quantity of retries of the `putAll` may result in a completed\n+operation.\n+A repeated timeout may imply that the `read-timeout` value is not\n+long enough to complete the bulk operation;\n+use the `org.apache.geode.cache.client.PoolFactory.setReadTimeout`\n+method to set the `read-timeout` value.\n+\n+Client applications that cannot tolerate partial completion of a `putAll`\n+operation may embed the operation into a transaction.\n+See [Transactions](../../developing/transactions/chapter_overview.html)\n+for details.\n+\n+**Note:**\n+The processing of a map with many entries and/or extra-large data values", "originalCommit": "b94a180460d40ad698a981634e5f43a6ee0897fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fb1ccfb57625e227e4a71d7db886c087549a9a7d", "url": "https://github.com/apache/geode/commit/fb1ccfb57625e227e4a71d7db886c087549a9a7d", "message": "GEODE-8198 putAll docs revision to address review comments", "committedDate": "2020-06-02T17:57:06Z", "type": "commit"}, {"oid": "9827524c7d0e92ce9c841ec9dc613641a18a1d51", "url": "https://github.com/apache/geode/commit/9827524c7d0e92ce9c841ec9dc613641a18a1d51", "message": "GEODE-8198: Final edits on docs for putAll()", "committedDate": "2020-06-02T20:21:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1NzYyOQ==", "url": "https://github.com/apache/geode/pull/5191#discussion_r434157629", "bodyText": "should be multiple keys, not multiple events, because there's only one event per putAll. Latter for replicated region, you said \"a single event\".", "author": "gesterzhou", "createdAt": "2020-06-02T20:30:43Z", "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,39 +60,91 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n+For partitioned regions,\n+multiple events are sent as a single message to each primary bucket", "originalCommit": "9827524c7d0e92ce9c841ec9dc613641a18a1d51", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "776975453c5826f03e5440491324084098cd49ba", "url": "https://github.com/apache/geode/commit/776975453c5826f03e5440491324084098cd49ba", "message": "GEODE-8198: Fix a last detail on the revision of docs for putAll", "committedDate": "2020-06-02T20:42:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MDY3Ng==", "url": "https://github.com/apache/geode/pull/5191#discussion_r434170676", "bodyText": "Its key-value(s) (or entries).", "author": "agingade", "createdAt": "2020-06-02T20:56:28Z", "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,39 +60,91 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n+For partitioned regions,\n+multiple keys are sent as a single message to each primary bucket", "originalCommit": "776975453c5826f03e5440491324084098cd49ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MDg2Ng==", "url": "https://github.com/apache/geode/pull/5191#discussion_r434170866", "bodyText": "Its key-value(s) (or entries).", "author": "agingade", "createdAt": "2020-06-02T20:56:48Z", "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,39 +60,91 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n+For partitioned regions,\n+multiple keys are sent as a single message to each primary bucket\n+and then distributed to the secondary buckets.\n+For replicated regions, the keys are sent to one server.", "originalCommit": "776975453c5826f03e5440491324084098cd49ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MTIwNQ==", "url": "https://github.com/apache/geode/pull/5191#discussion_r434171205", "bodyText": "entry - entries", "author": "agingade", "createdAt": "2020-06-02T20:57:26Z", "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,39 +60,91 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n+For partitioned regions,\n+multiple keys are sent as a single message to each primary bucket\n+and then distributed to the secondary buckets.\n+For replicated regions, the keys are sent to one server.\n+After applying all entry updates to that server,", "originalCommit": "776975453c5826f03e5440491324084098cd49ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MzYwNA==", "url": "https://github.com/apache/geode/pull/5191#discussion_r434173604", "bodyText": "The partial update can happen with non-client pattern (calling putAll in embedded application or in function execution)...In that case the application won't see ServerConnectivity or ServerOperation exception, do we want to call that out...", "author": "agingade", "createdAt": "2020-06-02T21:02:13Z", "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,39 +60,91 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n+For partitioned regions,\n+multiple keys are sent as a single message to each primary bucket\n+and then distributed to the secondary buckets.\n+For replicated regions, the keys are sent to one server.\n+After applying all entry updates to that server,\n+that server distributes the event to the other servers that host the region.\n \n-**Example:**\n+The design of a client application within a client-server design pattern", "originalCommit": "776975453c5826f03e5440491324084098cd49ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQzMDI2Ng==", "url": "https://github.com/apache/geode/pull/5191#discussion_r435430266", "bodyText": "I don't want to call that out.  The point of this prose is to clarify what the client app developer needs to know and exceptions that client app needs to catch.", "author": "karensmolermiller", "createdAt": "2020-06-04T17:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MzYwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MjEyMQ==", "url": "https://github.com/apache/geode/pull/5191#discussion_r434252121", "bodyText": "To make the error handling consistent, I modified the sample code.\npublic void testPutAll() throws Exception {\nThrowable throwable = null;\nMap map = new LinkedHashMap();\nRegion region;\n// Retry in case of transient exception.\nfor (int retry = 0; retry < 3; retry++) {\n  throwable = null;\n  try {\n    region.putAll(map);\n  } catch (ServerOperationException e) {\n    throwable = e.getCause();\n    if (!(e.getCause() instanceof TimeoutException || e.getCause() instanceof LowMemoryException)) {\n      // Non transient exception. Skip retry.\n      break;\n    }\n  } catch (ServerConnectivityException e) {\n    throwable = e;\n  }\n}\n\nif (throwable != null) {\n  // Take appropriate action, like throwing the exception or logging the message.\n  System.out.println(\"putAll failed due to \" + throwable);\n  throw new Exception(throwable);\n}\n\n}\nI have shown the sample code to Gester and he is fine with this new code.", "author": "agingade", "createdAt": "2020-06-03T00:55:23Z", "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,39 +60,91 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n+For partitioned regions,\n+multiple keys are sent as a single message to each primary bucket\n+and then distributed to the secondary buckets.\n+For replicated regions, the keys are sent to one server.\n+After applying all entry updates to that server,\n+that server distributes the event to the other servers that host the region.\n \n-**Example:**\n+The design of a client application within a client-server design pattern\n+faces the possibility that a partial operation can occur.\n+Some, all, or none of the specified entries may be completed with `putAll`.\n+If either `ServerOperationException` or `ServerConnectivityException` is\n+thrown,\n+it can indicate an incomplete operation.\n \n ``` pre\n-void putAll(String command) throws CacheException \n-{ \n-// Get Entry keys and values into Strings key1, ... keyN and value1, ... valueN \n-  Map map = new LinkedHashMap(); \n-  map.put(key1, value1)); \n-  ...\n-  map.put(keyN, valueN));\n-  this.currRegion.putAll(map); \n+int retry = 0;\n+RuntimeException rte = null;\n+while (retry < 3) {\n+  try {\n+    region.putAll(map);\n+  } catch (ServerOperationException e) {\n+    if (e.getCause() instanceof TimeoutException\n+        || e.getCause() instanceof LowMemoryException) {\n+      // Retry due to transient error.\n+      retry++;\n+    } else {\n+      rte = e;\n+      break;\n+    }\n+  } catch (ServerConnectivityException e) {\n+    // Retry due to transient error.\n+    retry++;\n+  }\n+}\n+\n+if (retry == 3) {\n+  System.out.println(\"3 putAll operations tried, and all failed.\");\n+} else if (rte != null) {", "originalCommit": "776975453c5826f03e5440491324084098cd49ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f4b64a6181640cc94e0ce5ef7da7ce0bed12c1f", "url": "https://github.com/apache/geode/commit/0f4b64a6181640cc94e0ce5ef7da7ce0bed12c1f", "message": "GEODE-8198: Revise docs for describing putAll\n  - Revised the code example\n  - Removed putAll prose on internal implementation details\n  - Revised wording to clarify", "committedDate": "2020-06-04T20:19:43Z", "type": "commit"}]}