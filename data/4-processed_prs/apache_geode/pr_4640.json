{"pr_number": 4640, "pr_title": "GEODE-7744: Fix Redis startup failure", "pr_createdAt": "2020-01-28T15:39:51Z", "pr_url": "https://github.com/apache/geode/pull/4640", "timeline": [{"oid": "5f729a0d05329d7239087c993598d1ce32342c5b", "url": "https://github.com/apache/geode/commit/5f729a0d05329d7239087c993598d1ce32342c5b", "message": "GEODE-7744: Fix Redis startup failure\n\nAuthored-by: Jens Deppe <jdeppe@pivotal.io>", "committedDate": "2020-01-28T15:38:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg4OTc0MA==", "url": "https://github.com/apache/geode/pull/4640#discussion_r371889740", "bodyText": "Is it possible that the CACHE_SERVICE_CREATE event is already triggered before we call the init method, and then we would just miss it entirely?", "author": "prettyClouds", "createdAt": "2020-01-28T15:53:21Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/GeodeRedisService.java", "diffHunk": "@@ -42,6 +45,13 @@ public void close() {\n     stopRedisServer();\n   }\n \n+  @Override\n+  public void handleEvent(ResourceEvent event, Object resource) {\n+    if (event.equals(ResourceEvent.CACHE_SERVICE_CREATE) && resource == this) {\n+      startRedisServer(cache);\n+    }", "originalCommit": "5f729a0d05329d7239087c993598d1ce32342c5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxMDk3Ng==", "url": "https://github.com/apache/geode/pull/4640#discussion_r372410976", "bodyText": "I've added a different event now.", "author": "jdeppe-pivotal", "createdAt": "2020-01-29T14:24:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg4OTc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg5MTIwMA==", "url": "https://github.com/apache/geode/pull/4640#discussion_r371891200", "bodyText": "Should stopRedisServer be invoked in a similar way, i.e. by listening to the cache lifecycle events?", "author": "prettyClouds", "createdAt": "2020-01-28T15:55:23Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/GeodeRedisService.java", "diffHunk": "@@ -42,6 +45,13 @@ public void close() {\n     stopRedisServer();", "originalCommit": "5f729a0d05329d7239087c993598d1ce32342c5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5d564a1c201ee390701242ee6bab23c468fd3768", "url": "https://github.com/apache/geode/commit/5d564a1c201ee390701242ee6bab23c468fd3768", "message": "Introduce new `ResourceEvent`: `CLUSTER_CONFIGURATION_APPLIED`\n\nAuthored-by: Jens Deppe <jdeppe@pivotal.io>", "committedDate": "2020-01-29T14:22:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjgzMg==", "url": "https://github.com/apache/geode/pull/4640#discussion_r372716832", "bodyText": "Does this actually test that the data structure was persistent? Maybe it would be better to do a restart, or assert on the underlying region type?", "author": "upthewaterspout", "createdAt": "2020-01-30T01:16:36Z", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisUsePersistentRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.test.junit.rules.ServerStarterRule;\n+\n+public class RedisUsePersistentRegionDUnitTest {\n+\n+  @Rule\n+  public final ServerStarterRule server = new ServerStarterRule();\n+\n+  @Test\n+  public void startRedisWithPersistentRegion() throws Exception {", "originalCommit": "5d564a1c201ee390701242ee6bab23c468fd3768", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4NDI2Ng==", "url": "https://github.com/apache/geode/pull/4640#discussion_r372984266", "bodyText": "Done", "author": "jdeppe-pivotal", "createdAt": "2020-01-30T14:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjgzMg=="}], "type": "inlineReview"}, {"oid": "733bc35afcd2cdeb19e3c1a296af0c68a10423b3", "url": "https://github.com/apache/geode/commit/733bc35afcd2cdeb19e3c1a296af0c68a10423b3", "message": "Specific assertion for region persistence\n\nAuthored-by: Jens Deppe <jdeppe@pivotal.io>", "committedDate": "2020-01-30T14:35:14Z", "type": "commit"}]}