{"pr_number": 4938, "pr_title": "GEODE-7852: Add bulk operation / large result tests for SNI gateway", "pr_createdAt": "2020-04-09T22:59:57Z", "pr_url": "https://github.com/apache/geode/pull/4938", "timeline": [{"oid": "4d593a716881bb66b19f7d3ebdd0c2ad6b2b0da9", "url": "https://github.com/apache/geode/commit/4d593a716881bb66b19f7d3ebdd0c2ad6b2b0da9", "message": "rebasing on develop after Bill's revert", "committedDate": "2020-04-10T15:29:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk1ODgxMw==", "url": "https://github.com/apache/geode/pull/4938#discussion_r406958813", "bodyText": "Is this comment correct? When I look at MAXIMUM_CHUNK_SIZE I see it defaults to 100. If that's the value it has then numberOfKeys would be 1000", "author": "Bill", "createdAt": "2020-04-10T21:51:26Z", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIAcceptanceTest.java", "diffHunk": "@@ -58,50 +64,143 @@\n       .file(DOCKER_COMPOSE_PATH.getPath())\n       .build();\n \n-\n-  private String trustStorePath;\n+  private ClientCache cache;\n+  private Region<String, String> region;\n+  private Map<String, String> bulkData;\n \n   @Before\n   public void before() throws IOException, InterruptedException {\n-    trustStorePath =\n+    // start up server/locator processes and initialize the server cache\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+    final String trustStorePath =\n         createTempFileFromResource(ClientSNIAcceptanceTest.class,\n             \"geode-config/truststore.jks\")\n                 .getAbsolutePath();\n-    docker.exec(options(\"-T\"), \"geode\",\n-        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+    // set up client cache properties so it can connect to the server\n+    Properties clientCacheProperties = new Properties();\n+    clientCacheProperties.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n+    clientCacheProperties.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n+    clientCacheProperties.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+\n+    clientCacheProperties.setProperty(SSL_TRUSTSTORE, trustStorePath);\n+    clientCacheProperties.setProperty(SSL_TRUSTSTORE_PASSWORD, \"geode\");\n+    clientCacheProperties.setProperty(SSL_ENDPOINT_IDENTIFICATION_ENABLED, \"true\");\n+    cache = getClientCache(clientCacheProperties);\n+\n+    // the gfsh startup script created a server-side region named \"jellyfish\"\n+    region = cache.<String, String>createClientRegionFactory(ClientRegionShortcut.PROXY)\n+        .create(\"jellyfish\");\n+    bulkData = getBulkDataMap();\n+    region.putAll(bulkData);\n+  }\n+\n+  @After\n+  public void after() {\n+    // preserve this commented code for debugging\n+    // String logs = docker.exec(options(\"-T\"), \"geode\",\n+    // arguments(\"cat\", \"server-dolores/server-dolores.log\"));\n+    // System.out.println(\"server logs------------------------------------------\");\n+    // System.out.println(logs);\n+\n+    if (cache != null) {\n+      cache.close();\n+      cache = null;\n+    }\n+    bulkData = null;\n+    region = null;\n   }\n \n+  // run all tests in one @Test to avoid having to stage a new Docker cluster for each\n   @Test\n+  public void runAllTests() throws Exception {\n+    connectToSNIProxyDocker();\n+    verifyServerAPIs();\n+    query();\n+    getAll();\n+    removeAll();\n+  }\n+\n+  /**\n+   * A basic connectivity test that performs a few simple operations\n+   */\n   public void connectToSNIProxyDocker() {\n-    Properties gemFireProps = new Properties();\n-    gemFireProps.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n-    gemFireProps.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n-    gemFireProps.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+    region.put(\"hello\", \"world\");\n+    assertThat(region.containsKey(\"hello\")).isFalse(); // proxy regions don't store locally\n+    assertThat(region.get(\"hello\")).isEqualTo(\"world\");\n+    region.destroy(\"hello\");\n+    assertThat(region.get(\"hello\")).isNull();\n+  }\n+\n+  /**\n+   * A test of Region query that returns a \"big\" result\n+   */\n+  public void query() throws Exception {\n+    final SelectResults<String> results = region.query(\"SELECT * from /jellyfish\");\n+    assertThat(results).hasSize(bulkData.size());\n+    for (String result : results) {\n+      assertThat(bulkData.containsValue(result)).isTrue();\n+    }\n+  }\n+\n+  /**\n+   * A test of Region bulk getAll\n+   */\n+  public void getAll() {\n+    final Map<String, String> results = region.getAll(bulkData.keySet());\n+    assertThat(results).hasSize(bulkData.size());\n+    for (Map.Entry<String, String> entry : results.entrySet()) {\n+      assertThat(region.containsKey(entry.getKey())).isFalse();\n+      assertThat(bulkData.containsKey(entry.getKey())).isTrue();\n+      assertThat(entry.getValue()).isEqualTo(bulkData.get(entry.getKey()));\n+    }\n+  }\n+\n+  /**\n+   * A test of Region bulk removeAll\n+   */\n+  public void removeAll() {\n+    assertThat(region.sizeOnServer()).isEqualTo(bulkData.size());\n+    region.removeAll(bulkData.keySet());\n+    assertThat(region.sizeOnServer()).isZero();\n+    region.putAll(bulkData);\n+  }\n \n-    gemFireProps.setProperty(SSL_TRUSTSTORE, trustStorePath);\n-    gemFireProps.setProperty(SSL_TRUSTSTORE_PASSWORD, \"geode\");\n-    gemFireProps.setProperty(SSL_ENDPOINT_IDENTIFICATION_ENABLED, \"true\");\n+  /**\n+   * A test of the Region API's methods that directly access the server cache\n+   */\n+  public void verifyServerAPIs() {\n+    assertThat(region.sizeOnServer()).isEqualTo(bulkData.size());\n+    Set<String> keysOnServer = region.keySetOnServer();\n+    for (String entry : bulkData.keySet()) {\n+      assertThat(region.containsKeyOnServer(entry)).isTrue();\n+      assertThat(keysOnServer).contains(entry);\n+    }\n+  }\n+\n+\n+  protected Map<String, String> getBulkDataMap() {\n+    // create a putAll map with enough keys to force a lot of \"chunking\" of the results\n+    int numberOfKeys = BaseCommand.MAXIMUM_CHUNK_SIZE * 10; // 10,000 keys", "originalCommit": "649f0a72fa8aaaed75100818edb3825b4fc2d729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MjI5Ng==", "url": "https://github.com/apache/geode/pull/4938#discussion_r406962296", "bodyText": "oh, yeah.  I had that set to * 100 but lowered it.  I'll fix the comment.  It only needs to be > MAXIMUM_CHUNK_SIZE", "author": "bschuchardt", "createdAt": "2020-04-10T22:03:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk1ODgxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MjU3Nw==", "url": "https://github.com/apache/geode/pull/4938#discussion_r406962577", "bodyText": "ok", "author": "Bill", "createdAt": "2020-04-10T22:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk1ODgxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NjU3Mg==", "url": "https://github.com/apache/geode/pull/4938#discussion_r406966572", "bodyText": "fixed", "author": "bschuchardt", "createdAt": "2020-04-10T22:20:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk1ODgxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MDUyMg==", "url": "https://github.com/apache/geode/pull/4938#discussion_r406960522", "bodyText": "I don't understand why the region should not contain this key?", "author": "Bill", "createdAt": "2020-04-10T21:56:48Z", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIAcceptanceTest.java", "diffHunk": "@@ -58,50 +64,143 @@\n       .file(DOCKER_COMPOSE_PATH.getPath())\n       .build();\n \n-\n-  private String trustStorePath;\n+  private ClientCache cache;\n+  private Region<String, String> region;\n+  private Map<String, String> bulkData;\n \n   @Before\n   public void before() throws IOException, InterruptedException {\n-    trustStorePath =\n+    // start up server/locator processes and initialize the server cache\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+    final String trustStorePath =\n         createTempFileFromResource(ClientSNIAcceptanceTest.class,\n             \"geode-config/truststore.jks\")\n                 .getAbsolutePath();\n-    docker.exec(options(\"-T\"), \"geode\",\n-        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+    // set up client cache properties so it can connect to the server\n+    Properties clientCacheProperties = new Properties();\n+    clientCacheProperties.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n+    clientCacheProperties.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n+    clientCacheProperties.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+\n+    clientCacheProperties.setProperty(SSL_TRUSTSTORE, trustStorePath);\n+    clientCacheProperties.setProperty(SSL_TRUSTSTORE_PASSWORD, \"geode\");\n+    clientCacheProperties.setProperty(SSL_ENDPOINT_IDENTIFICATION_ENABLED, \"true\");\n+    cache = getClientCache(clientCacheProperties);\n+\n+    // the gfsh startup script created a server-side region named \"jellyfish\"\n+    region = cache.<String, String>createClientRegionFactory(ClientRegionShortcut.PROXY)\n+        .create(\"jellyfish\");\n+    bulkData = getBulkDataMap();\n+    region.putAll(bulkData);\n+  }\n+\n+  @After\n+  public void after() {\n+    // preserve this commented code for debugging\n+    // String logs = docker.exec(options(\"-T\"), \"geode\",\n+    // arguments(\"cat\", \"server-dolores/server-dolores.log\"));\n+    // System.out.println(\"server logs------------------------------------------\");\n+    // System.out.println(logs);\n+\n+    if (cache != null) {\n+      cache.close();\n+      cache = null;\n+    }\n+    bulkData = null;\n+    region = null;\n   }\n \n+  // run all tests in one @Test to avoid having to stage a new Docker cluster for each\n   @Test\n+  public void runAllTests() throws Exception {\n+    connectToSNIProxyDocker();\n+    verifyServerAPIs();\n+    query();\n+    getAll();\n+    removeAll();\n+  }\n+\n+  /**\n+   * A basic connectivity test that performs a few simple operations\n+   */\n   public void connectToSNIProxyDocker() {\n-    Properties gemFireProps = new Properties();\n-    gemFireProps.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n-    gemFireProps.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n-    gemFireProps.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+    region.put(\"hello\", \"world\");\n+    assertThat(region.containsKey(\"hello\")).isFalse(); // proxy regions don't store locally\n+    assertThat(region.get(\"hello\")).isEqualTo(\"world\");\n+    region.destroy(\"hello\");\n+    assertThat(region.get(\"hello\")).isNull();\n+  }\n+\n+  /**\n+   * A test of Region query that returns a \"big\" result\n+   */\n+  public void query() throws Exception {\n+    final SelectResults<String> results = region.query(\"SELECT * from /jellyfish\");\n+    assertThat(results).hasSize(bulkData.size());\n+    for (String result : results) {\n+      assertThat(bulkData.containsValue(result)).isTrue();\n+    }\n+  }\n+\n+  /**\n+   * A test of Region bulk getAll\n+   */\n+  public void getAll() {\n+    final Map<String, String> results = region.getAll(bulkData.keySet());\n+    assertThat(results).hasSize(bulkData.size());\n+    for (Map.Entry<String, String> entry : results.entrySet()) {\n+      assertThat(region.containsKey(entry.getKey())).isFalse();", "originalCommit": "649f0a72fa8aaaed75100818edb3825b4fc2d729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MjcwMQ==", "url": "https://github.com/apache/geode/pull/4938#discussion_r406962701", "bodyText": "The local region is a PROXY.  It's empty, so it won't have the key.   I put in that check in case someone accidentally changes the type of region in the client.  It would invalidate a lot of the tests if the client cache was stateful.", "author": "bschuchardt", "createdAt": "2020-04-10T22:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MDUyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MzI0Mg==", "url": "https://github.com/apache/geode/pull/4938#discussion_r406963242", "bodyText": "nice", "author": "Bill", "createdAt": "2020-04-10T22:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MDUyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MTA1Nw==", "url": "https://github.com/apache/geode/pull/4938#discussion_r406961057", "bodyText": "should we be testing clear() also?", "author": "Bill", "createdAt": "2020-04-10T21:58:42Z", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIAcceptanceTest.java", "diffHunk": "@@ -58,50 +64,143 @@\n       .file(DOCKER_COMPOSE_PATH.getPath())\n       .build();\n \n-\n-  private String trustStorePath;\n+  private ClientCache cache;\n+  private Region<String, String> region;\n+  private Map<String, String> bulkData;\n \n   @Before\n   public void before() throws IOException, InterruptedException {\n-    trustStorePath =\n+    // start up server/locator processes and initialize the server cache\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+    final String trustStorePath =\n         createTempFileFromResource(ClientSNIAcceptanceTest.class,\n             \"geode-config/truststore.jks\")\n                 .getAbsolutePath();\n-    docker.exec(options(\"-T\"), \"geode\",\n-        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+    // set up client cache properties so it can connect to the server\n+    Properties clientCacheProperties = new Properties();\n+    clientCacheProperties.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n+    clientCacheProperties.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n+    clientCacheProperties.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+\n+    clientCacheProperties.setProperty(SSL_TRUSTSTORE, trustStorePath);\n+    clientCacheProperties.setProperty(SSL_TRUSTSTORE_PASSWORD, \"geode\");\n+    clientCacheProperties.setProperty(SSL_ENDPOINT_IDENTIFICATION_ENABLED, \"true\");\n+    cache = getClientCache(clientCacheProperties);\n+\n+    // the gfsh startup script created a server-side region named \"jellyfish\"\n+    region = cache.<String, String>createClientRegionFactory(ClientRegionShortcut.PROXY)\n+        .create(\"jellyfish\");\n+    bulkData = getBulkDataMap();\n+    region.putAll(bulkData);\n+  }\n+\n+  @After\n+  public void after() {\n+    // preserve this commented code for debugging\n+    // String logs = docker.exec(options(\"-T\"), \"geode\",\n+    // arguments(\"cat\", \"server-dolores/server-dolores.log\"));\n+    // System.out.println(\"server logs------------------------------------------\");\n+    // System.out.println(logs);\n+\n+    if (cache != null) {\n+      cache.close();\n+      cache = null;\n+    }\n+    bulkData = null;\n+    region = null;\n   }\n \n+  // run all tests in one @Test to avoid having to stage a new Docker cluster for each\n   @Test\n+  public void runAllTests() throws Exception {\n+    connectToSNIProxyDocker();\n+    verifyServerAPIs();\n+    query();\n+    getAll();\n+    removeAll();\n+  }\n+\n+  /**\n+   * A basic connectivity test that performs a few simple operations\n+   */\n   public void connectToSNIProxyDocker() {\n-    Properties gemFireProps = new Properties();\n-    gemFireProps.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n-    gemFireProps.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n-    gemFireProps.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+    region.put(\"hello\", \"world\");\n+    assertThat(region.containsKey(\"hello\")).isFalse(); // proxy regions don't store locally\n+    assertThat(region.get(\"hello\")).isEqualTo(\"world\");\n+    region.destroy(\"hello\");\n+    assertThat(region.get(\"hello\")).isNull();\n+  }\n+\n+  /**\n+   * A test of Region query that returns a \"big\" result\n+   */\n+  public void query() throws Exception {\n+    final SelectResults<String> results = region.query(\"SELECT * from /jellyfish\");\n+    assertThat(results).hasSize(bulkData.size());\n+    for (String result : results) {\n+      assertThat(bulkData.containsValue(result)).isTrue();\n+    }\n+  }\n+\n+  /**\n+   * A test of Region bulk getAll\n+   */\n+  public void getAll() {\n+    final Map<String, String> results = region.getAll(bulkData.keySet());\n+    assertThat(results).hasSize(bulkData.size());\n+    for (Map.Entry<String, String> entry : results.entrySet()) {\n+      assertThat(region.containsKey(entry.getKey())).isFalse();\n+      assertThat(bulkData.containsKey(entry.getKey())).isTrue();\n+      assertThat(entry.getValue()).isEqualTo(bulkData.get(entry.getKey()));\n+    }\n+  }\n+\n+  /**\n+   * A test of Region bulk removeAll\n+   */\n+  public void removeAll() {\n+    assertThat(region.sizeOnServer()).isEqualTo(bulkData.size());\n+    region.removeAll(bulkData.keySet());", "originalCommit": "649f0a72fa8aaaed75100818edb3825b4fc2d729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2Mzk5Ng==", "url": "https://github.com/apache/geode/pull/4938#discussion_r406963996", "bodyText": "clear() doesn't transfer much of any information.  I don't think it belongs in this PR.", "author": "bschuchardt", "createdAt": "2020-04-10T22:09:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NTI2MQ==", "url": "https://github.com/apache/geode/pull/4938#discussion_r406965261", "bodyText": "ok", "author": "Bill", "createdAt": "2020-04-10T22:14:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MTA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MTUyMA==", "url": "https://github.com/apache/geode/pull/4938#discussion_r406961520", "bodyText": "I see you modified toString(). is there a reason why this test is no longer valuable?", "author": "Bill", "createdAt": "2020-04-10T22:00:11Z", "path": "geode-tcp-server/src/test/java/org/apache/geode/distributed/internal/tcpserver/HostAndPortTest.java", "diffHunk": "@@ -93,12 +93,6 @@ public void hashCode_of_SocketAddress() {\n     assertThat(locator1.hashCode()).isEqualTo(host1address.hashCode());\n   }\n \n-  @Test\n-  public void toString_LocatorAddress() {\n-    HostAndPort locator1 = new HostAndPort(\"fakelocalhost\", 8091);\n-    assertThat(locator1.toString()).contains(\"socketInetAddress\");\n-  }", "originalCommit": "649f0a72fa8aaaed75100818edb3825b4fc2d729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NDQ5MA==", "url": "https://github.com/apache/geode/pull/4938#discussion_r406964490", "bodyText": "There's no contract on HostAndPort.toString() to have this string in its result.  I saw the string rep in test output and didn't like how wordy it was.  It's now HostAndPort[hostname:port].", "author": "bschuchardt", "createdAt": "2020-04-10T22:11:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MTUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NTMxMQ==", "url": "https://github.com/apache/geode/pull/4938#discussion_r406965311", "bodyText": "good show", "author": "Bill", "createdAt": "2020-04-10T22:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MTUyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk1ODYwNQ==", "url": "https://github.com/apache/geode/pull/4938#discussion_r406958605", "bodyText": "Should this code just be enabled by default so we have the logs in CI?", "author": "upthewaterspout", "createdAt": "2020-04-10T21:50:41Z", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIAcceptanceTest.java", "diffHunk": "@@ -58,50 +64,143 @@\n       .file(DOCKER_COMPOSE_PATH.getPath())\n       .build();\n \n-\n-  private String trustStorePath;\n+  private ClientCache cache;\n+  private Region<String, String> region;\n+  private Map<String, String> bulkData;\n \n   @Before\n   public void before() throws IOException, InterruptedException {\n-    trustStorePath =\n+    // start up server/locator processes and initialize the server cache\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+    final String trustStorePath =\n         createTempFileFromResource(ClientSNIAcceptanceTest.class,\n             \"geode-config/truststore.jks\")\n                 .getAbsolutePath();\n-    docker.exec(options(\"-T\"), \"geode\",\n-        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+    // set up client cache properties so it can connect to the server\n+    Properties clientCacheProperties = new Properties();\n+    clientCacheProperties.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n+    clientCacheProperties.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n+    clientCacheProperties.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+\n+    clientCacheProperties.setProperty(SSL_TRUSTSTORE, trustStorePath);\n+    clientCacheProperties.setProperty(SSL_TRUSTSTORE_PASSWORD, \"geode\");\n+    clientCacheProperties.setProperty(SSL_ENDPOINT_IDENTIFICATION_ENABLED, \"true\");\n+    cache = getClientCache(clientCacheProperties);\n+\n+    // the gfsh startup script created a server-side region named \"jellyfish\"\n+    region = cache.<String, String>createClientRegionFactory(ClientRegionShortcut.PROXY)\n+        .create(\"jellyfish\");\n+    bulkData = getBulkDataMap();\n+    region.putAll(bulkData);\n+  }\n+\n+  @After\n+  public void after() {\n+    // preserve this commented code for debugging\n+    // String logs = docker.exec(options(\"-T\"), \"geode\",\n+    // arguments(\"cat\", \"server-dolores/server-dolores.log\"));\n+    // System.out.println(\"server logs------------------------------------------\");\n+    // System.out.println(logs);", "originalCommit": "649f0a72fa8aaaed75100818edb3825b4fc2d729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2MTEzMw==", "url": "https://github.com/apache/geode/pull/4938#discussion_r407561133", "bodyText": "done", "author": "bschuchardt", "createdAt": "2020-04-13T16:10:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk1ODYwNQ=="}], "type": "inlineReview"}, {"oid": "e12bf75e667d162e731a67f30bf5e0bb873a7709", "url": "https://github.com/apache/geode/commit/e12bf75e667d162e731a67f30bf5e0bb873a7709", "message": "GEODE-7852: Add client side configuration option to support a SNI proxy\n\nAdding tests for query, putAll, getAll.  Ensuring that a client can\nreceive responses that are streamed through \"chunking\" from the server.\n\nThe test now creates the server cluster and client cache in a class rule\nfor faster execution.", "committedDate": "2020-04-13T18:03:46Z", "type": "commit"}, {"oid": "f64662a6e1c8ced6b2fb6929c99b971ae8eab93f", "url": "https://github.com/apache/geode/commit/f64662a6e1c8ced6b2fb6929c99b971ae8eab93f", "message": "removed useless test of toString method", "committedDate": "2020-04-13T18:03:55Z", "type": "commit"}, {"oid": "dd80530086a83d41a001bbe73537aba7dcc09e3e", "url": "https://github.com/apache/geode/commit/dd80530086a83d41a001bbe73537aba7dcc09e3e", "message": "rebasing on develop after Bill's revert", "committedDate": "2020-04-13T18:03:55Z", "type": "commit"}, {"oid": "2e5aff31a28fe472f34efab00119365b2db89708", "url": "https://github.com/apache/geode/commit/2e5aff31a28fe472f34efab00119365b2db89708", "message": "avoiding Windows lack of Docker support", "committedDate": "2020-04-13T18:03:55Z", "type": "commit"}, {"oid": "b9662f87b430549f09a5beeab1e4a0f79914ac07", "url": "https://github.com/apache/geode/commit/b9662f87b430549f09a5beeab1e4a0f79914ac07", "message": "removing more statics", "committedDate": "2020-04-13T18:03:55Z", "type": "commit"}, {"oid": "636197b3a9241ed0344310086cb4973257214c07", "url": "https://github.com/apache/geode/commit/636197b3a9241ed0344310086cb4973257214c07", "message": "more statics removed", "committedDate": "2020-04-13T18:03:55Z", "type": "commit"}, {"oid": "f8b33c1972974a771aace7a6e6e11866da958ab5", "url": "https://github.com/apache/geode/commit/f8b33c1972974a771aace7a6e6e11866da958ab5", "message": "adding a removeAll test", "committedDate": "2020-04-13T18:03:55Z", "type": "commit"}, {"oid": "629254382e07b7d865ca6472b65b65e3709f3468", "url": "https://github.com/apache/geode/commit/629254382e07b7d865ca6472b65b65e3709f3468", "message": "removing foo/bar from cluster startup script and test", "committedDate": "2020-04-13T18:03:56Z", "type": "commit"}, {"oid": "f7582bd869a763959820dcaeaf6e8598ec05e676", "url": "https://github.com/apache/geode/commit/f7582bd869a763959820dcaeaf6e8598ec05e676", "message": "fixing comment", "committedDate": "2020-04-13T18:03:56Z", "type": "commit"}, {"oid": "cd26491589159d3210207b1486f49dec0f0c5af3", "url": "https://github.com/apache/geode/commit/cd26491589159d3210207b1486f49dec0f0c5af3", "message": "incorporating Dan's new Rule to avoid running on Windows", "committedDate": "2020-04-13T18:03:56Z", "type": "commit"}, {"oid": "cd26491589159d3210207b1486f49dec0f0c5af3", "url": "https://github.com/apache/geode/commit/cd26491589159d3210207b1486f49dec0f0c5af3", "message": "incorporating Dan's new Rule to avoid running on Windows", "committedDate": "2020-04-13T18:03:56Z", "type": "forcePushed"}]}