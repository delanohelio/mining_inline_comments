{"pr_number": 4819, "pr_title": "GEODE-7885: Improve RedisLockService - fix synchronization and memory leak", "pr_createdAt": "2020-03-16T22:08:33Z", "pr_url": "https://github.com/apache/geode/pull/4819", "timeline": [{"oid": "943945fbd5f4537fe65954674cc3f93f2fc7fe68", "url": "https://github.com/apache/geode/commit/943945fbd5f4537fe65954674cc3f93f2fc7fe68", "message": "GEODE-7885: Improve RedisLockService - fix synchronization and memory leak\n\n- RedisLockService was not able to automatically free keys/locks after\n  unlocking since keys were also beging referenced in regions.\n- Fix synchronization while iterating over keySet to avoid\n  ConcurrentModifiactionExceptions.", "committedDate": "2020-03-16T22:03:50Z", "type": "commit"}, {"oid": "b67ce414c08df5ce6cbaf0cbeefcb7b5903fc0b5", "url": "https://github.com/apache/geode/commit/b67ce414c08df5ce6cbaf0cbeefcb7b5903fc0b5", "message": "Fix dependency housekeeping", "committedDate": "2020-03-17T13:56:32Z", "type": "commit"}, {"oid": "6b7d31b6a56a19e6a2c5ac36ca44ab35b3581914", "url": "https://github.com/apache/geode/commit/6b7d31b6a56a19e6a2c5ac36ca44ab35b3581914", "message": "Add test for lock service key leakage", "committedDate": "2020-03-17T18:25:10Z", "type": "commit"}, {"oid": "d5b010a7474ec6989992f06f10d646daba972b63", "url": "https://github.com/apache/geode/commit/d5b010a7474ec6989992f06f10d646daba972b63", "message": "Add test for ConcurrentModificationException", "committedDate": "2020-03-17T20:45:26Z", "type": "commit"}, {"oid": "dec035d4ee645f8835be8ec735dbd6a54948e3ef", "url": "https://github.com/apache/geode/commit/dec035d4ee645f8835be8ec735dbd6a54948e3ef", "message": "spotless", "committedDate": "2020-03-17T21:40:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMzU0Ng==", "url": "https://github.com/apache/geode/pull/4819#discussion_r394003546", "bodyText": "I don't understand this logic. If weakReferencesTolocks.putIfAbsent(lockKey, lock) returns a value, then you already have a reference to the lockKey. OR am I mistaken about this?", "author": "kohlmu-pivotal", "createdAt": "2020-03-17T22:20:22Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisLockService.java", "diffHunk": "@@ -70,29 +71,38 @@ public AutoCloseableLock lock(ByteArrayWrapper key) throws InterruptedException\n       throw new IllegalArgumentException(\"key cannot be null\");\n     }\n \n+    KeyHashIdentifier lockKey = new KeyHashIdentifier(key.toBytes());\n     Lock lock = new ReentrantLock();\n-    Lock oldLock = map.putIfAbsent(key, lock);\n+    Lock oldLock = weakReferencesTolocks.putIfAbsent(lockKey, lock);\n+\n     if (oldLock != null) {\n       lock = oldLock;\n-      // we need to get a reference to the actual key object so that the backing WeakHashMap does\n-      // not clean it up.\n-      for (ByteArrayWrapper keyInSet : map.keySet()) {\n-        if (keyInSet.equals(key)) {\n-          key = keyInSet;\n-          break;\n-        }\n-      }\n+\n+      // we need to get a reference to the actual key object\n+      // so that the backing WeakHashMap does not clean it up\n+      // when garbage collection happens.\n+      lockKey = getReferenceToLockKey(lockKey);", "originalCommit": "dec035d4ee645f8835be8ec735dbd6a54948e3ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM1NDg5Ng==", "url": "https://github.com/apache/geode/pull/4819#discussion_r394354896", "bodyText": "The essence here is that you need to get a reference to the actual key in the map (if you don't it might get GC'd). Consider the first pass through all of this and I'm trying to lock key \"ABC\" and succeed. I have a reference to the key and all is good. If another thread comes to look for key \"ABC\" it will have a different 'key' object. So if we get the lock out of the map but don't also get the actual key then that lock might get GC'd if we don't retain a hard reference to its key.", "author": "jdeppe-pivotal", "createdAt": "2020-03-18T13:43:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMzU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwNjA2NQ==", "url": "https://github.com/apache/geode/pull/4819#discussion_r394406065", "bodyText": "What I was trying to say was... in the java doc for putIfAbsent...\n\nIf the specified key is not already associated with a value (or is mapped\n* to {@code null}) associates it with the given value and returns\n* {@code null}, else returns the current value.\n\nWhich makes the whole loop of iterating over the keySet just extra work.", "author": "kohlmu-pivotal", "createdAt": "2020-03-18T14:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMzU0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQzMzkzMw==", "url": "https://github.com/apache/geode/pull/4819#discussion_r394433933", "bodyText": "Correction... it return the VALUE not the KEY.... ok.... LGTM", "author": "kohlmu-pivotal", "createdAt": "2020-03-18T15:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMzU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNDk4OQ==", "url": "https://github.com/apache/geode/pull/4819#discussion_r394004989", "bodyText": "you can just return keyInSet without having to set it onto referenceToLockKey and return null on line 105", "author": "kohlmu-pivotal", "createdAt": "2020-03-17T22:23:55Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisLockService.java", "diffHunk": "@@ -70,29 +71,38 @@ public AutoCloseableLock lock(ByteArrayWrapper key) throws InterruptedException\n       throw new IllegalArgumentException(\"key cannot be null\");\n     }\n \n+    KeyHashIdentifier lockKey = new KeyHashIdentifier(key.toBytes());\n     Lock lock = new ReentrantLock();\n-    Lock oldLock = map.putIfAbsent(key, lock);\n+    Lock oldLock = weakReferencesTolocks.putIfAbsent(lockKey, lock);\n+\n     if (oldLock != null) {\n       lock = oldLock;\n-      // we need to get a reference to the actual key object so that the backing WeakHashMap does\n-      // not clean it up.\n-      for (ByteArrayWrapper keyInSet : map.keySet()) {\n-        if (keyInSet.equals(key)) {\n-          key = keyInSet;\n-          break;\n-        }\n-      }\n+\n+      // we need to get a reference to the actual key object\n+      // so that the backing WeakHashMap does not clean it up\n+      // when garbage collection happens.\n+      lockKey = getReferenceToLockKey(lockKey);\n     }\n \n     if (!lock.tryLock(timeoutMS, TimeUnit.MILLISECONDS)) {\n-      throw new TimeoutException(\"Couldn't get lock for \" + key.toString());\n+      throw new TimeoutException(\"Couldn't get lock for \" + lockKey.toString());\n     }\n \n-    return new AutoCloseableLock(key, lock);\n+    return new AutoCloseableLock(lockKey, lock);\n   }\n \n-  int getMapSize() {\n-    return map.size();\n+  private KeyHashIdentifier getReferenceToLockKey(KeyHashIdentifier lockKey) {\n+    KeyHashIdentifier referenceToLockKey = null;\n+\n+    synchronized (weakReferencesTolocks) {\n+      for (KeyHashIdentifier keyInSet : weakReferencesTolocks.keySet()) {\n+        if (keyInSet.equals(lockKey)) {\n+          referenceToLockKey = keyInSet;", "originalCommit": "dec035d4ee645f8835be8ec735dbd6a54948e3ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d175f85310acd8581049814824bd426a61401c79", "url": "https://github.com/apache/geode/commit/d175f85310acd8581049814824bd426a61401c79", "message": "Locking is hard to get right", "committedDate": "2020-03-18T04:43:46Z", "type": "commit"}, {"oid": "4f4a86f7cc8aba6f9edb3ecfbb5a887d07209ae5", "url": "https://github.com/apache/geode/commit/4f4a86f7cc8aba6f9edb3ecfbb5a887d07209ae5", "message": "Review updates - move lock creation out of loop", "committedDate": "2020-03-18T15:29:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NDM1OQ==", "url": "https://github.com/apache/geode/pull/4819#discussion_r394454359", "bodyText": "please use real names not two characters...", "author": "kohlmu-pivotal", "createdAt": "2020-03-18T15:53:56Z", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/RedisLockServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;\n+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+\n+public class RedisLockServiceIntegrationTest {\n+\n+  private static final int REDIS_CLIENT_TIMEOUT = 100000;\n+  private static GeodeRedisServer server;\n+  private static GemFireCache cache;\n+  private static Jedis jedis;\n+  private static int port = 6379;\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    CacheFactory cf = new CacheFactory();\n+    cf.set(LOG_LEVEL, \"warn\");", "originalCommit": "d175f85310acd8581049814824bd426a61401c79", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NDc1MA==", "url": "https://github.com/apache/geode/pull/4819#discussion_r394454750", "bodyText": "real names... not 3 character variable names", "author": "kohlmu-pivotal", "createdAt": "2020-03-18T15:54:23Z", "path": "geode-redis/src/main/java/org/apache/geode/redis/GeodeRedisServer.java", "diffHunk": "@@ -507,9 +510,17 @@ private void initializeRedis() {\n     registerLockServiceMBean();\n   }\n \n+  @VisibleForTesting\n+  public RedisLockService getLockService() {\n+    return hashLockService;\n+  }\n+\n   private void registerLockServiceMBean() {\n+    ManagementService sms = SystemManagementService.getManagementService(cache);", "originalCommit": "d175f85310acd8581049814824bd426a61401c79", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}