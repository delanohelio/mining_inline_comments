{"pr_number": 5823, "pr_title": "GEODE-8771: invalidate should acquire the lock before initIndex", "pr_createdAt": "2020-12-08T18:07:16Z", "pr_url": "https://github.com/apache/geode/pull/5823", "timeline": [{"oid": "6879c8b0ec8d5ff32e41455cf62db49a279e165f", "url": "https://github.com/apache/geode/commit/6879c8b0ec8d5ff32e41455cf62db49a279e165f", "message": "GEODE-8771: invalidate should acquire the lock before initIndex", "committedDate": "2020-12-08T18:02:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczNTA3Mw==", "url": "https://github.com/apache/geode/pull/5823#discussion_r538735073", "bodyText": "I would like a name that better describes the intention of the test. It looks as if the concurrent puts and invalidates are important. So maybe something like doesNotHangWhenClearedWithConcurrentPutsAndInvalidates().", "author": "demery-pivotal", "createdAt": "2020-12-08T19:11:35Z", "path": "geode-core/src/integrationTest/java/org/apache/geode/cache/query/partitioned/PRClearIntegrationTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.cache.query.partitioned;\n+\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.EntryNotFoundException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+import org.apache.geode.test.junit.rules.ServerStarterRule;\n+\n+public class PRClearIntegrationTest {\n+\n+  @Rule\n+  public ServerStarterRule server = new ServerStarterRule().withAutoStart();\n+\n+  @Rule\n+  public ExecutorServiceRule executor = new ExecutorServiceRule();\n+\n+  @Test\n+  public void shouldNotHang() throws Exception {", "originalCommit": "6879c8b0ec8d5ff32e41455cf62db49a279e165f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "593fde93d6c07f244f4fb45497051d9bd79c04c3", "url": "https://github.com/apache/geode/commit/593fde93d6c07f244f4fb45497051d9bd79c04c3", "message": "rename", "committedDate": "2020-12-08T21:17:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5NDYxMg==", "url": "https://github.com/apache/geode/pull/5823#discussion_r538894612", "bodyText": "I am not sure I understand why the code change here can fix the hang, and not causing a different type of hang. I do see the two-line comment above. But it does not answer my question. It would be helpful for the reviewers to understand it, if there is some explanation of root cause analysis and the fix in the pull request description or in the JIRA. It will also help for future code maintenance.", "author": "jchen21", "createdAt": "2020-12-08T23:44:54Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/AbstractRegionMap.java", "diffHunk": "@@ -1282,14 +1282,18 @@ public boolean invalidate(EntryEventImpl event, boolean invokeCallbacks, boolean\n     DiskRegion dr = owner.getDiskRegion();\n     boolean ownerIsInitialized = owner.isInitialized();\n \n+    // lock before waitForIndexInit so that we should wait\n+    // till a concurrent clear to finish\n+    lockForCacheModification(owner, event);", "originalCommit": "593fde93d6c07f244f4fb45497051d9bd79c04c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyNzU4NQ==", "url": "https://github.com/apache/geode/pull/5823#discussion_r539527585", "bodyText": "It would bee nice to run a full regression with this change to see if it will cause another hang. Right now I don't think I am fully qualified to explain to you on that.", "author": "jinmeiliao", "createdAt": "2020-12-09T18:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5NDYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0NTMyNQ==", "url": "https://github.com/apache/geode/pull/5823#discussion_r539645325", "bodyText": "@jchen21\nThere is locking mechanism to co-ordinate between cache modification (index maintenance) and index initialization. During index initialization all the cache operations are blocked.\nAs part of index management; clear invokes index re-initialization.\nAlso, during clear no cache operations are allowed; this is co-ordinated through lockForCacheModification (version lock).\nThe hang is observed due to:\nThread1 calling update, which blocks index initialization.\nThread2 calling clear, takes the cache modification lock, this blocks all cache operation; and clear triggers index re-initialization; this is now blocked for thread1 to finish update. But thread1 is waiting for cache modification lock which is held by thread2; resulting in dead-lock.", "author": "agingade", "createdAt": "2020-12-09T21:02:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5NDYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc3ODgzMg==", "url": "https://github.com/apache/geode/pull/5823#discussion_r539778832", "bodyText": "Thanks @agingade ! This is exactly what I was looking for. Your comment is automatically logged in the JIRA, so we have the context in JIRA now. Looking at the code change of #44431 and #45699, where waitForIndexInit() and lockForCacheModification() are introduced respectively, I don't see any side effect of swapping the order of them. So I expect it should be good to fix this hang, as long as Darrel's concern is addressed.", "author": "jchen21", "createdAt": "2020-12-10T01:41:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5NDYxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYwNzU2OA==", "url": "https://github.com/apache/geode/pull/5823#discussion_r539607568", "bodyText": "Since you moved this up to be before \"waitForIndexInit\" is called you need to add a try/finally that started right after lockForCacheModification returns and the finally should be way down past the finally for the try that started right after \"lockWhenRegionIsInitializing\" returns. If you look at the finally for that try you will see it calls releaseCacheModificationLock. This needs to instead be called in your new finally block so that it corresponds to the lockForCacheModification call.\nIt should have probably been done this way already (two finally blocks; one that calls releaseCacheModificationLock and another that calls unlockWhenRegionIsInitializing) but it is needed now because waitForIndexInit can throw an exception because it calls checkCancelInProgress.", "author": "dschneider-pivotal", "createdAt": "2020-12-09T20:03:08Z", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/AbstractRegionMap.java", "diffHunk": "@@ -1282,14 +1282,18 @@ public boolean invalidate(EntryEventImpl event, boolean invokeCallbacks, boolean\n     DiskRegion dr = owner.getDiskRegion();\n     boolean ownerIsInitialized = owner.isInitialized();\n \n+    // lock before waitForIndexInit so that we should wait\n+    // till a concurrent clear to finish\n+    lockForCacheModification(owner, event);", "originalCommit": "593fde93d6c07f244f4fb45497051d9bd79c04c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0ODQ2Ng==", "url": "https://github.com/apache/geode/pull/5823#discussion_r539648466", "bodyText": "Can we add some kind of validation to make sure put/invalidate and clear is performed as expected. By looking at region contents?", "author": "agingade", "createdAt": "2020-12-09T21:08:06Z", "path": "geode-core/src/integrationTest/java/org/apache/geode/cache/query/partitioned/PRClearIntegrationTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.cache.query.partitioned;\n+\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.EntryNotFoundException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+import org.apache.geode.test.junit.rules.ServerStarterRule;\n+\n+public class PRClearIntegrationTest {\n+\n+  @Rule\n+  public ServerStarterRule server = new ServerStarterRule().withAutoStart();\n+\n+  @Rule\n+  public ExecutorServiceRule executor = new ExecutorServiceRule();\n+\n+  @Test\n+  public void doesNotHangWhenClearWithConcurrentPutsAndInvalidates() throws Exception {\n+    InternalCache cache = server.getCache();\n+    Region<Object, Object> region = server.createPartitionRegion(\"regionA\", f -> {\n+    }, f -> f.setTotalNumBuckets(1));\n+    cache.getQueryService().createIndex(\"indexA\", \"r\", \"/regionA r\");\n+    region.put(0, \"value0\");\n+\n+    CompletableFuture<Void> put = executor.runAsync(() -> {\n+      Thread.currentThread().setName(\"put-Thread\");\n+      IntStream.range(0, 10).forEach(i -> region.put(i, \"value\" + i));\n+    });\n+\n+    CompletableFuture<Void> invalidate = executor.runAsync(() -> {\n+      Thread.currentThread().setName(\"invalidate-Thread\");\n+      IntStream.range(0, 10).forEach(i -> {\n+        try {\n+          region.invalidate(i);\n+        } catch (EntryNotFoundException e) {\n+          // ignore\n+        }\n+      });\n+    });\n+\n+    CompletableFuture<Void> clear = executor.runAsync(() -> {\n+      Thread.currentThread().setName(\"Clear-Thread\");\n+      region.clear();\n+    });\n+\n+    put.get(5, TimeUnit.SECONDS);", "originalCommit": "593fde93d6c07f244f4fb45497051d9bd79c04c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY5OTg2Mw==", "url": "https://github.com/apache/geode/pull/5823#discussion_r539699863", "bodyText": "that's not the purpose of this test and if we want to do that, we would make the test far more complicated since it's multi-threading and when we do assert after clear it's not guaranteed this region content is empty.\nI am sure we have plenty of other tests that verifies this.", "author": "jinmeiliao", "createdAt": "2020-12-09T22:35:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0ODQ2Ng=="}], "type": "inlineReview"}, {"oid": "a218b50ed33e6ae7a6ad1eb9b60850dd62623f76", "url": "https://github.com/apache/geode/commit/a218b50ed33e6ae7a6ad1eb9b60850dd62623f76", "message": "put waitForIndexInit in the try block", "committedDate": "2020-12-09T23:20:36Z", "type": "commit"}, {"oid": "a218b50ed33e6ae7a6ad1eb9b60850dd62623f76", "url": "https://github.com/apache/geode/commit/a218b50ed33e6ae7a6ad1eb9b60850dd62623f76", "message": "put waitForIndexInit in the try block", "committedDate": "2020-12-09T23:20:36Z", "type": "forcePushed"}]}