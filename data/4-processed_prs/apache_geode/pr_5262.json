{"pr_number": 5262, "pr_title": "GEODE-8269: Improve test coverage", "pr_createdAt": "2020-06-17T13:39:34Z", "pr_url": "https://github.com/apache/geode/pull/5262", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3ODE1NQ==", "url": "https://github.com/apache/geode/pull/5262#discussion_r441578155", "bodyText": "Can this be a assertThatThrownBy assertion?", "author": "jdeppe-pivotal", "createdAt": "2020-06-17T14:14:13Z", "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/key/ExpireAtExecutorJUnitTest.java", "diffHunk": "@@ -34,30 +37,30 @@\n \n   @Test\n   public void calledWithTooFewCommandArguments_returnsError() {\n-    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n-    commandsAsBytesWithTooFewArguments.add(\"EXPIREAT\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n-    Command command = new Command(commandsAsBytesWithTooFewArguments);\n+    List<byte[]> commandAsBytes = new ArrayList<>();\n+    commandAsBytes.add(\"EXPIREAT\".getBytes());\n+    commandAsBytes.add(\"key\".getBytes());\n+    Command command = new Command(commandAsBytes);\n \n-    RedisResponse response =\n-        new ExpireAtExecutor().executeCommand(command, mockContext());\n+    Throwable thrown = catchThrowable(() -> command.execute(mockContext()));", "originalCommit": "0a12a40eff6dd4a1ea5c6cc2de2cf6be18b501a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxNTY3NA==", "url": "https://github.com/apache/geode/pull/5262#discussion_r441615674", "bodyText": "yeah! good catch.", "author": "sabbey37", "createdAt": "2020-06-17T15:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3ODE1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3OTQxMA==", "url": "https://github.com/apache/geode/pull/5262#discussion_r441579410", "bodyText": "Maybe the same thing, but at least for consistency, assertThat should come from the org.assertj.core.api.Assertions package.", "author": "jdeppe-pivotal", "createdAt": "2020-06-17T14:15:54Z", "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/key/ExpireAtExecutorJUnitTest.java", "diffHunk": "@@ -34,30 +37,30 @@\n \n   @Test\n   public void calledWithTooFewCommandArguments_returnsError() {\n-    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n-    commandsAsBytesWithTooFewArguments.add(\"EXPIREAT\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n-    Command command = new Command(commandsAsBytesWithTooFewArguments);\n+    List<byte[]> commandAsBytes = new ArrayList<>();\n+    commandAsBytes.add(\"EXPIREAT\".getBytes());\n+    commandAsBytes.add(\"key\".getBytes());\n+    Command command = new Command(commandAsBytes);\n \n-    RedisResponse response =\n-        new ExpireAtExecutor().executeCommand(command, mockContext());\n+    Throwable thrown = catchThrowable(() -> command.execute(mockContext()));\n \n-    assertThat(response.toString()).startsWith(\"-ERR The wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).hasMessageContaining(\"wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).isInstanceOf(RedisParametersMismatchException.class);\n   }\n \n   @Test\n   public void calledWithTooManyCommandArguments_returnsError() {\n-    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n-    commandsAsBytesWithTooFewArguments.add(\"EXPIREAT\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"1\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"extra-argument\".getBytes());\n-    Command command = new Command(commandsAsBytesWithTooFewArguments);\n+    List<byte[]> commandsAsBytes = new ArrayList<>();\n+    commandsAsBytes.add(\"EXPIREAT\".getBytes());\n+    commandsAsBytes.add(\"key\".getBytes());\n+    commandsAsBytes.add(\"1\".getBytes());\n+    commandsAsBytes.add(\"extra-argument\".getBytes());\n+    Command command = new Command(commandsAsBytes);\n \n-    RedisResponse response =\n-        new ExpireAtExecutor().executeCommand(command, mockContext());\n+    Throwable thrown = catchThrowable(() -> command.execute(mockContext()));\n \n-    assertThat(response.toString()).startsWith(\"-ERR The wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).hasMessageContaining(\"wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).isInstanceOf(RedisParametersMismatchException.class);", "originalCommit": "0a12a40eff6dd4a1ea5c6cc2de2cf6be18b501a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxNTk2NA==", "url": "https://github.com/apache/geode/pull/5262#discussion_r441615964", "bodyText": "Definitely. Editing those now.", "author": "sabbey37", "createdAt": "2020-06-17T15:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3OTQxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU4MDAxNw==", "url": "https://github.com/apache/geode/pull/5262#discussion_r441580017", "bodyText": "Ditto previous comment.", "author": "jdeppe-pivotal", "createdAt": "2020-06-17T14:16:47Z", "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/key/ExpireExecutorJUnitTest.java", "diffHunk": "@@ -35,42 +37,41 @@\n \n   @Test\n   public void calledWithTooFewCommandArguments_returnsError() {\n-    Executor executor = new ExpireExecutor();\n-    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n-    commandsAsBytesWithTooFewArguments.add(\"EXPIRE\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n+    List<byte[]> commandsAsBytes = new ArrayList<>();\n+    commandsAsBytes.add(\"EXPIRE\".getBytes());\n+    commandsAsBytes.add(\"key\".getBytes());\n+    Command command = new Command(commandsAsBytes);\n \n-    Command command = new Command(commandsAsBytesWithTooFewArguments);\n-    RedisResponse response = executor.executeCommand(command, mockContext());\n+    Throwable thrown = catchThrowable(() -> command.execute(mockContext()));\n \n-    assertThat(response.toString()).startsWith(\"-ERR The wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).hasMessageContaining(\"wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).isInstanceOf(RedisParametersMismatchException.class);", "originalCommit": "0a12a40eff6dd4a1ea5c6cc2de2cf6be18b501a9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU4MDI5OQ==", "url": "https://github.com/apache/geode/pull/5262#discussion_r441580299", "bodyText": "Ditto previous comment", "author": "jdeppe-pivotal", "createdAt": "2020-06-17T14:17:09Z", "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/key/KeysExecutorJUnitTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal.executor.key;\n+\n+import static org.assertj.core.api.AssertionsForClassTypes.catchThrowable;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import org.assertj.core.api.AssertionsForClassTypes;\n+import org.junit.Test;\n+\n+import org.apache.geode.redis.internal.ParameterRequirements.RedisParametersMismatchException;\n+import org.apache.geode.redis.internal.netty.Command;\n+import org.apache.geode.redis.internal.netty.ExecutionHandlerContext;\n+\n+\n+public class KeysExecutorJUnitTest {\n+\n+  @Test\n+  public void calledWithTooFewOptions_returnsError() {\n+    List<byte[]> commandsAsBytes = new ArrayList<>();\n+    commandsAsBytes.add(\"KEYS\".getBytes());\n+    Command command = new Command(commandsAsBytes);\n+\n+    Throwable thrown = catchThrowable(() -> command.execute(mockContext()));\n+\n+    AssertionsForClassTypes.assertThat(thrown).hasMessageContaining(\"wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).isInstanceOf(RedisParametersMismatchException.class);\n+  }\n+\n+  @Test\n+  public void calledWithTooManyOptions_returnsError() {\n+    List<byte[]> commandsAsBytes = new ArrayList<>();\n+    commandsAsBytes.add(\"KEYS\".getBytes());\n+    commandsAsBytes.add(\"*\".getBytes());\n+    commandsAsBytes.add(\"**\".getBytes());\n+    Command command = new Command(commandsAsBytes);\n+\n+    Throwable thrown = catchThrowable(() -> command.execute(mockContext()));\n+\n+    AssertionsForClassTypes.assertThat(thrown).hasMessageContaining(\"wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).isInstanceOf(RedisParametersMismatchException.class);", "originalCommit": "0a12a40eff6dd4a1ea5c6cc2de2cf6be18b501a9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "78f39a5607ccbe657a85cbc94c5e9ab678dbc531", "url": "https://github.com/apache/geode/commit/78f39a5607ccbe657a85cbc94c5e9ab678dbc531", "message": "GEODE-8269: Improve test coverage", "committedDate": "2020-06-17T19:48:57Z", "type": "forcePushed"}, {"oid": "0ca488f1d1e53020b79e663d50fc8ffb93a290f9", "url": "https://github.com/apache/geode/commit/0ca488f1d1e53020b79e663d50fc8ffb93a290f9", "message": "GEODE-8269: Improve test coverage", "committedDate": "2020-06-18T04:09:54Z", "type": "commit"}, {"oid": "0ca488f1d1e53020b79e663d50fc8ffb93a290f9", "url": "https://github.com/apache/geode/commit/0ca488f1d1e53020b79e663d50fc8ffb93a290f9", "message": "GEODE-8269: Improve test coverage", "committedDate": "2020-06-18T04:09:54Z", "type": "forcePushed"}]}