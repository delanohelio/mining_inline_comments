{"pr_number": 1179, "pr_title": "role tags - generated code and schema changes", "pr_createdAt": "2020-11-09T09:57:19Z", "pr_url": "https://github.com/AthenZ/athenz/pull/1179", "timeline": [{"oid": "0b7227cb01856e1b7b194760542437d91df805f4", "url": "https://github.com/AthenZ/athenz/commit/0b7227cb01856e1b7b194760542437d91df805f4", "message": "role tags - generated code and schema changes", "committedDate": "2020-11-09T10:27:00Z", "type": "forcePushed"}, {"oid": "6c00f2ecc92cbc924fb564aed7227525456ae7f5", "url": "https://github.com/AthenZ/athenz/commit/6c00f2ecc92cbc924fb564aed7227525456ae7f5", "message": "role tags - generated code and schema changes", "committedDate": "2020-11-09T12:23:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkyMzE0NQ==", "url": "https://github.com/AthenZ/athenz/pull/1179#discussion_r519923145", "bodyText": "we shouldn't lose coverage in this package. please review jacoco output and additional unit tests.", "author": "havetisyan", "createdAt": "2020-11-09T15:59:28Z", "path": "core/zms/pom.xml", "diffHunk": "@@ -27,7 +27,7 @@\n   <description>Core ZMS Interfaces</description>\n \n   <properties>\n-    <code.coverage.min>1.00</code.coverage.min>\n+    <code.coverage.min>0.99</code.coverage.min>", "originalCommit": "6c00f2ecc92cbc924fb564aed7227525456ae7f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkyNTQ5OQ==", "url": "https://github.com/AthenZ/athenz/pull/1179#discussion_r519925499", "bodyText": "After thinking about this a little bit more, we should make the value as CompoundName. This would give us to have a little bit more flexibility to have .'s in our names - e.g. prod.us-west-2, etc.", "author": "havetisyan", "createdAt": "2020-11-09T16:02:39Z", "path": "core/zms/src/main/rdl/Role.tdl", "diffHunk": "@@ -48,6 +48,7 @@ type RoleMeta Struct {\n     String userAuthorityFilter (optional); //membership filtered based on user authority configured attributes\n     String userAuthorityExpiration (optional); //expiration enforced by a user authority configured attribute\n     Int32 groupExpiryDays (optional); //all groups in the domain roles will have specified max expiry days\n+    Map<SimpleName,SimpleName> tags (optional); //key-value pair tags", "originalCommit": "6c00f2ecc92cbc924fb564aed7227525456ae7f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkyNjY4Nw==", "url": "https://github.com/AthenZ/athenz/pull/1179#discussion_r519926687", "bodyText": "since the table itself is already called role_tags, I don't think we need to specify tag_key/tag_value as column names, just having key/value is sufficient.", "author": "havetisyan", "createdAt": "2020-11-09T16:04:22Z", "path": "servers/zms/schema/updates/update-20201109.sql", "diffHunk": "@@ -0,0 +1,14 @@\n+CREATE TABLE IF NOT EXISTS `zms_server`.`role_tags` (\n+  `role_id` INT UNSIGNED NOT NULL,\n+  `tag_key` VARCHAR(64) NOT NULL,", "originalCommit": "6c00f2ecc92cbc924fb564aed7227525456ae7f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzMzkwMQ==", "url": "https://github.com/AthenZ/athenz/pull/1179#discussion_r519933901", "bodyText": "If this is a map, how are we going to support multiple tags with the same key? I thought we made the index key as role_id+key+value so we can have multiple tags with the same key name -e.g. env=prod,env=stage, etc.", "author": "havetisyan", "createdAt": "2020-11-09T16:14:25Z", "path": "core/zms/src/main/rdl/Role.tdl", "diffHunk": "@@ -48,6 +48,7 @@ type RoleMeta Struct {\n     String userAuthorityFilter (optional); //membership filtered based on user authority configured attributes\n     String userAuthorityExpiration (optional); //expiration enforced by a user authority configured attribute\n     Int32 groupExpiryDays (optional); //all groups in the domain roles will have specified max expiry days\n+    Map<SimpleName,SimpleName> tags (optional); //key-value pair tags", "originalCommit": "6c00f2ecc92cbc924fb564aed7227525456ae7f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzNTY4Mg==", "url": "https://github.com/AthenZ/athenz/pull/1179#discussion_r519935682", "bodyText": "empty strings is the correct value. the client code will skip and treat them as nils", "author": "havetisyan", "createdAt": "2020-11-09T16:16:52Z", "path": "libs/go/zmscli/dump.go", "diffHunk": "@@ -182,7 +182,7 @@ func (cli Zms) dumpRoles(buf *bytes.Buffer, dn string) {\n \tbuf.WriteString(indentLevel1)\n \tbuf.WriteString(\"roles:\\n\")\n \tmembers := true\n-\troles, err := cli.Zms.GetRoles(zms.DomainName(dn), &members)\n+\troles, err := cli.Zms.GetRoles(zms.DomainName(dn), &members, \"\", \"\") //TODO what should be the values here?", "originalCommit": "6c00f2ecc92cbc924fb564aed7227525456ae7f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9ffecaa2b719860216c63adeb74bb5c175095734", "url": "https://github.com/AthenZ/athenz/commit/9ffecaa2b719860216c63adeb74bb5c175095734", "message": "role tags - generated code and schema changes", "committedDate": "2020-11-10T18:46:39Z", "type": "commit"}, {"oid": "875853f70322153c34d412a9a263dbd817cebd4a", "url": "https://github.com/AthenZ/athenz/commit/875853f70322153c34d412a9a263dbd817cebd4a", "message": "role tags implementation", "committedDate": "2020-11-10T21:26:07Z", "type": "forcePushed"}, {"oid": "05b48bcbcb27259322b411706296175b4d59f579", "url": "https://github.com/AthenZ/athenz/commit/05b48bcbcb27259322b411706296175b4d59f579", "message": "role tags implementation", "committedDate": "2020-11-11T18:33:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU4NDA4OQ==", "url": "https://github.com/AthenZ/athenz/pull/1179#discussion_r521584089", "bodyText": "we can't remove functions as that would introduce backward compatibility issues in our java client. So we should also have a function with the original arguments:\npublic Roles getRoles(String domainName, Boolean members) { return getRoles(domainName, members, null, null); }\nFor the Go client we don't have a wrapper so no option but to update your client code as necessary, but for java we have the wrapper thus we always maintain backward compatibility", "author": "havetisyan", "createdAt": "2020-11-11T19:20:09Z", "path": "clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "diffHunk": "@@ -831,13 +831,15 @@ public RoleList getRoleList(String domainName, Integer limit, String skip) {\n      *\n      * @param domainName name of the domain\n      * @param members    include all members for group roles as well\n+     * @param tagKey     query all roles with given tag name\n+     * @param tagValue  query all roles with given tag key and value\n      * @return list of roles\n      * @throws ZMSClientException in case of failure\n      */\n-    public Roles getRoles(String domainName, Boolean members) {\n+    public Roles getRoles(String domainName, Boolean members, String tagKey, String tagValue) {", "originalCommit": "05b48bcbcb27259322b411706296175b4d59f579", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMjc5Mw==", "url": "https://github.com/AthenZ/athenz/pull/1179#discussion_r521602793", "bodyText": "Yes, we should. I also have one outstanding issue in this method where the update role members should also return the result correctly to the processRole method.", "author": "havetisyan", "createdAt": "2020-11-11T19:55:42Z", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "diffHunk": "@@ -557,11 +557,49 @@ boolean processRole(ObjectStoreConnection con, Role originalRole, String domainN\n             processUpdateRoleMembers(con, originalRole, roleMembers, ignoreDeletes,\n                     domainName, roleName, admin, auditRef, auditDetails);\n         }\n-        \n+\n+        //TODO : should we fail unsuccessful operation?\n+        processRoleTags(role, roleName, domainName, originalRole, con);", "originalCommit": "05b48bcbcb27259322b411706296175b4d59f579", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYzNzQwNw==", "url": "https://github.com/AthenZ/athenz/pull/1179#discussion_r521637407", "bodyText": "Noticed that too..\nwill fix it", "author": "dvirguttman", "createdAt": "2020-11-11T21:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMjc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwNjc0OQ==", "url": "https://github.com/AthenZ/athenz/pull/1179#discussion_r521606749", "bodyText": "In this method when we ask for roles without any members, we generate a new list of roles. In that section we need to update to return the tags as well.", "author": "havetisyan", "createdAt": "2020-11-11T20:03:19Z", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "diffHunk": "@@ -2782,10 +2784,28 @@ public RoleList getRoleList(ResourceContext ctx, String domainName, Integer limi\n             }\n         }\n \n+        // filter roles by their tags", "originalCommit": "05b48bcbcb27259322b411706296175b4d59f579", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxNTkyOQ==", "url": "https://github.com/AthenZ/athenz/pull/1179#discussion_r521615929", "bodyText": "This could be a very expensive operation. If a domain has 100 roles (which is not that uncommon), we're going to make 100 sql commands - with just regular latency this will add up quick considerably.\nAny reason why we're not just running a query to get all tags for a domain and then parse the results and update accordingly. The roles are already in a map so we can quickly update each role accordingly.", "author": "havetisyan", "createdAt": "2020-11-11T20:21:31Z", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/store/impl/jdbc/JDBCConnection.java", "diffHunk": "@@ -5746,4 +5755,92 @@ Boolean nullIfDefaultValue(boolean flag, boolean defaultValue) {\n     Integer nullIfDefaultValue(int value, int defaultValue) {\n         return value == defaultValue ? null : value;\n     }\n+    \n+    private void addTagsToRoles(Map<String, Role> roleMap, String domainName) {", "originalCommit": "05b48bcbcb27259322b411706296175b4d59f579", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY3MDk1NA==", "url": "https://github.com/AthenZ/athenz/pull/1179#discussion_r521670954", "bodyText": "This is correct for getRoles.\nBut this method is still needed for getRole..", "author": "dvirguttman", "createdAt": "2020-11-11T22:15:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxNTkyOQ=="}], "type": "inlineReview"}, {"oid": "751b9efc8b1930b6621c0fb9431379913a26a9f0", "url": "https://github.com/AthenZ/athenz/commit/751b9efc8b1930b6621c0fb9431379913a26a9f0", "message": "role tags implementation", "committedDate": "2020-11-12T13:19:58Z", "type": "forcePushed"}, {"oid": "b96d9f0cba1870e8fb62ad39a3d8a2ca8f6942f7", "url": "https://github.com/AthenZ/athenz/commit/b96d9f0cba1870e8fb62ad39a3d8a2ca8f6942f7", "message": "role tags implementation", "committedDate": "2020-11-12T15:07:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwODMwNw==", "url": "https://github.com/AthenZ/athenz/pull/1179#discussion_r522508307", "bodyText": "Why do we have this in the interface? This is only an internal method and should not be in the interface.\nOne other general comment - we never expose the domainId outside of the implementation since that's jdbc specific only thing and the server only deals with names.", "author": "havetisyan", "createdAt": "2020-11-12T23:42:23Z", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/store/ObjectStoreConnection.java", "diffHunk": "@@ -188,4 +188,12 @@\n     boolean updatePrincipal(String principal, int newState);\n \n     List<String> getPrincipals(int queriedState);\n+\n+    boolean insertRoleTags(String roleName, String domainName, Map<String, StringList> roleTags);\n+\n+    boolean deleteRoleTags(String roleName, String domainName, Set<String> tagKeys);\n+\n+    Map<String, Map<String, StringList>> getDomainRoleTags(int domainId);", "originalCommit": "b96d9f0cba1870e8fb62ad39a3d8a2ca8f6942f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY3OTIzMA==", "url": "https://github.com/AthenZ/athenz/pull/1179#discussion_r522679230", "bodyText": "It is in the interface mainly for testing and maybe future use.. but I will change it to package-private and also the method signature to accept domainName.", "author": "dvirguttman", "createdAt": "2020-11-13T06:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwODMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzUyNjkwMQ==", "url": "https://github.com/AthenZ/athenz/pull/1179#discussion_r523526901", "bodyText": "there is no need to add functions in the interface just for testing only. once it's private, we can keep the domain id in the signature - there is no need for the domain name for a private method.", "author": "havetisyan", "createdAt": "2020-11-15T00:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUwODMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxMzI5OA==", "url": "https://github.com/AthenZ/athenz/pull/1179#discussion_r522513298", "bodyText": "No need to call roleTag.get(tagKey) since the previous computeIfAbsent should already return the same value. So we can just say:\nStringList tagValues = roleTag.computeIfAbsent(tagKey, k -> new StringList().setList(new ArrayList<>()));", "author": "havetisyan", "createdAt": "2020-11-12T23:48:46Z", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/store/impl/jdbc/JDBCConnection.java", "diffHunk": "@@ -5746,4 +5758,124 @@ Boolean nullIfDefaultValue(boolean flag, boolean defaultValue) {\n     Integer nullIfDefaultValue(int value, int defaultValue) {\n         return value == defaultValue ? null : value;\n     }\n+\n+    private void addTagsToRoles(Map<String, Role> roleMap, int domainId) {\n+\n+        Map<String, Map<String, StringList>> domainRoleTags = getDomainRoleTags(domainId);\n+        if (domainRoleTags != null) {\n+            for (Map.Entry<String, Role> roleEntry : roleMap.entrySet()) {\n+                Map<String, StringList> roleTag = domainRoleTags.get(roleEntry.getKey());\n+                if (roleTag != null) {\n+                    roleEntry.getValue().setTags(roleTag);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Map<String, StringList>> getDomainRoleTags(int domainId) {\n+        final String caller = \"getRoleTags\";\n+        Map<String, Map<String, StringList>> domainRoleTags = null;\n+\n+        try (PreparedStatement ps = con.prepareStatement(SQL_GET_DOMAIN_ROLE_TAGS)) {\n+            ps.setInt(1, domainId);\n+            try (ResultSet rs = executeQuery(ps, caller)) {\n+                while (rs.next()) {\n+                    String roleName = rs.getString(1);\n+                    String tagKey = rs.getString(2);\n+                    String tagValue = rs.getString(3);\n+                    if (domainRoleTags == null) {\n+                        domainRoleTags = new HashMap<>();\n+                    }\n+                    domainRoleTags.computeIfAbsent(roleName, tags -> new HashMap<>());\n+                    Map<String, StringList> roleTag = domainRoleTags.get(roleName);\n+                    roleTag.computeIfAbsent(tagKey, k -> new StringList().setList(new ArrayList<>()));\n+                    StringList tagValues = roleTag.get(tagKey);", "originalCommit": "b96d9f0cba1870e8fb62ad39a3d8a2ca8f6942f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNTQwMQ==", "url": "https://github.com/AthenZ/athenz/pull/1179#discussion_r522515401", "bodyText": "same as above: No need to call roleTag.get(tagKey) since the previous computeIfAbsent should already return the same value.", "author": "havetisyan", "createdAt": "2020-11-12T23:54:34Z", "path": "servers/zms/src/main/java/com/yahoo/athenz/zms/store/impl/jdbc/JDBCConnection.java", "diffHunk": "@@ -5746,4 +5758,124 @@ Boolean nullIfDefaultValue(boolean flag, boolean defaultValue) {\n     Integer nullIfDefaultValue(int value, int defaultValue) {\n         return value == defaultValue ? null : value;\n     }\n+\n+    private void addTagsToRoles(Map<String, Role> roleMap, int domainId) {\n+\n+        Map<String, Map<String, StringList>> domainRoleTags = getDomainRoleTags(domainId);\n+        if (domainRoleTags != null) {\n+            for (Map.Entry<String, Role> roleEntry : roleMap.entrySet()) {\n+                Map<String, StringList> roleTag = domainRoleTags.get(roleEntry.getKey());\n+                if (roleTag != null) {\n+                    roleEntry.getValue().setTags(roleTag);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, Map<String, StringList>> getDomainRoleTags(int domainId) {\n+        final String caller = \"getRoleTags\";\n+        Map<String, Map<String, StringList>> domainRoleTags = null;\n+\n+        try (PreparedStatement ps = con.prepareStatement(SQL_GET_DOMAIN_ROLE_TAGS)) {\n+            ps.setInt(1, domainId);\n+            try (ResultSet rs = executeQuery(ps, caller)) {\n+                while (rs.next()) {\n+                    String roleName = rs.getString(1);\n+                    String tagKey = rs.getString(2);\n+                    String tagValue = rs.getString(3);\n+                    if (domainRoleTags == null) {\n+                        domainRoleTags = new HashMap<>();\n+                    }\n+                    domainRoleTags.computeIfAbsent(roleName, tags -> new HashMap<>());\n+                    Map<String, StringList> roleTag = domainRoleTags.get(roleName);\n+                    roleTag.computeIfAbsent(tagKey, k -> new StringList().setList(new ArrayList<>()));\n+                    StringList tagValues = roleTag.get(tagKey);\n+                    tagValues.getList().add(tagValue);\n+                }\n+            }\n+        } catch (SQLException ex) {\n+            throw sqlError(ex, caller);\n+        }\n+        return domainRoleTags;\n+    }\n+\n+    @Override\n+    public Map<String, StringList> getRoleTags(String domainName, String roleName) {\n+        final String caller = \"getRoleTags\";\n+        Map<String, StringList> roleTag = null;\n+\n+        try (PreparedStatement ps = con.prepareStatement(SQL_GET_ROLE_TAGS)) {\n+            ps.setString(1, domainName);\n+            ps.setString(2, roleName);\n+            try (ResultSet rs = executeQuery(ps, caller)) {\n+                while (rs.next()) {\n+                    String tagKey = rs.getString(1);\n+                    String tagValue = rs.getString(2);\n+                    if (roleTag == null) {\n+                        roleTag = new HashMap<>();\n+                    }\n+                    roleTag.computeIfAbsent(tagKey, k -> new StringList().setList(new ArrayList<>()));\n+                    StringList tagValues = roleTag.get(tagKey);", "originalCommit": "b96d9f0cba1870e8fb62ad39a3d8a2ca8f6942f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1bbe04d2806903da1abdad92c7aac3435775b722", "url": "https://github.com/AthenZ/athenz/commit/1bbe04d2806903da1abdad92c7aac3435775b722", "message": "role tags implementation", "committedDate": "2020-11-13T10:14:49Z", "type": "commit"}, {"oid": "1bbe04d2806903da1abdad92c7aac3435775b722", "url": "https://github.com/AthenZ/athenz/commit/1bbe04d2806903da1abdad92c7aac3435775b722", "message": "role tags implementation", "committedDate": "2020-11-13T10:14:49Z", "type": "forcePushed"}]}