{"pr_number": 943, "pr_title": "add OAuth authority", "pr_createdAt": "2020-04-22T05:29:14Z", "pr_url": "https://github.com/AthenZ/athenz/pull/943", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5MzM0OQ==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r412793349", "bodyText": "String values are compared using ==, not equals()", "author": "ssunorz", "createdAt": "2020-04-22T08:47:01Z", "path": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/oauth/validator/DefaultOAuthJwtAccessTokenValidator.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Yahoo Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.yahoo.athenz.auth.oauth.validator;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import com.yahoo.athenz.auth.oauth.token.OAuthJwtAccessToken;\n+import com.yahoo.athenz.auth.oauth.token.OAuthJwtAccessTokenException;\n+\n+/**\n+ * Default implementation of OAuthJwtAccessTokenValidator\n+ */\n+public class DefaultOAuthJwtAccessTokenValidator implements OAuthJwtAccessTokenValidator {\n+\n+    private String trustedIssuer = null;\n+    private Set<String> requiredAudiences = null;\n+    private Set<String> requiredScopes = null;\n+    private Map<String, Set<String>> authorizedClientIds = null;\n+\n+    /**\n+     * create DefaultOAuthJwtAccessTokenValidator\n+     * @param  trustedIssuer       trusted issuer (not null, not empty)\n+     * @param  requiredAudiences   required audiences (not null, not empty)\n+     * @param  requiredScopes      required scopes (not null, not empty)\n+     * @param  authorizedClientIds whitelist of authorized client IDs (not null)\n+     */\n+    public DefaultOAuthJwtAccessTokenValidator(String trustedIssuer, Set<String> requiredAudiences, Set<String> requiredScopes, Map<String, Set<String>> authorizedClientIds) {\n+\n+        // args checking\n+        if (trustedIssuer == null || trustedIssuer.isEmpty()) {\n+            throw new IllegalArgumentException(\"trusted issuers must be configured\");\n+        }\n+        if (requiredAudiences == null || requiredAudiences.isEmpty()) {\n+            throw new IllegalArgumentException(\"required audiences must be configured\");\n+        }\n+        if (requiredScopes == null || requiredScopes.isEmpty()) {\n+            throw new IllegalArgumentException(\"required scopes must be configured\");\n+        }\n+        if (authorizedClientIds == null) {\n+            throw new IllegalArgumentException(\"client ID mapping must be configured\");\n+        }\n+\n+        this.trustedIssuer = trustedIssuer;\n+        this.requiredAudiences = requiredAudiences;\n+        this.requiredScopes = requiredScopes;\n+        this.authorizedClientIds = authorizedClientIds;\n+    }\n+\n+    private void verifyIssuer(OAuthJwtAccessToken jwt) throws OAuthJwtAccessTokenException {\n+        String issuer = jwt.getIssuer();\n+        if (!this.trustedIssuer.equals(issuer)) {\n+            // trusted issuer NOT match\n+            throw new OAuthJwtAccessTokenException(\"iss not trusted: got=\" + issuer);\n+        }\n+    }\n+    private void verifyAudiences(OAuthJwtAccessToken jwt) throws OAuthJwtAccessTokenException {\n+        List<String> audiences = jwt.getAudiences();\n+        if (audiences == null || !(new HashSet<>(audiences)).containsAll(this.requiredAudiences)) {\n+            // SOME required audiences NOT found\n+            String got = (audiences == null) ? \"null\" : String.join(\", \", audiences);\n+            throw new OAuthJwtAccessTokenException(\"required aud not found: got=\" + got);\n+        }\n+    }\n+    private void verifyScopes(OAuthJwtAccessToken jwt) throws OAuthJwtAccessTokenException {\n+        List<String> scopes = jwt.getScopes();\n+        if (scopes == null || !(new HashSet<>(scopes)).containsAll(this.requiredScopes)) {\n+            // SOME required scopes NOT found\n+            throw new OAuthJwtAccessTokenException(\"required scope not found: got=\" + jwt.getScope());\n+        }\n+    }\n+    private void verifyCertificateThumbprint(OAuthJwtAccessToken jwt, String certificateThumbprint) throws OAuthJwtAccessTokenException {\n+        String certThumbprint = jwt.getCertificateThumbprint();\n+        if (certificateThumbprint == certThumbprint) {", "originalCommit": "70d39b4244ae41d5d8ba1d7173be8e3093be7a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg1ODI4NA==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r412858284", "bodyText": "It is to skip checking when both is null.\nThe actual equal checking it after that.\nhttps://github.com/yahoo/athenz/blob/70d39b4244ae41d5d8ba1d7173be8e3093be7a56/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/oauth/validator/DefaultOAuthJwtAccessTokenValidator.java#L88-L94", "author": "WindzCUHK", "createdAt": "2020-04-22T10:20:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5MzM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxNzUxNg==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r414917516", "bodyText": "I'd suggesting adding a comment explaining that otherwise it does look suspicious", "author": "havetisyan", "createdAt": "2020-04-24T23:29:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5MzM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwNzYyOA==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r418407628", "bodyText": "added in 9f86ef6", "author": "WindzCUHK", "createdAt": "2020-05-01T04:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5MzM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMDA2OQ==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r414910069", "bodyText": "this is quite an old version of athenz. let's use the latest release.", "author": "havetisyan", "createdAt": "2020-04-24T23:05:31Z", "path": "contributions/authority/auth0/pom.xml", "diffHunk": "@@ -0,0 +1,195 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Copyright 2020 Yahoo Inc.\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+-->\n+<project\n+  xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"\n+>\n+<modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>com.yahoo.athenz</groupId>\n+  <artifactId>athenz_auth_auth0</artifactId>\n+  <packaging>jar</packaging>\n+  <version>1.0.1</version>\n+  <name>athenz_auth_auth0</name>\n+  <description>Athenz Yahoo Server OAuth2 access token implementation for Auth0</description>\n+\n+  <properties>\n+    <athenz.version>1.8.45</athenz.version>", "originalCommit": "70d39b4244ae41d5d8ba1d7173be8e3093be7a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwNzU3Nw==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r418407577", "bodyText": "Thank you for reminding.\nAs it depends on the latest auth_core, I just update to 1.8.60 first.\nbc180c1", "author": "WindzCUHK", "createdAt": "2020-05-01T04:05:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMDA2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMTA3OA==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r414911078", "bodyText": "where/how are we using this example.com/client_id? do we need a such value as default or is the caller expected to always specify a value?", "author": "havetisyan", "createdAt": "2020-04-24T23:08:35Z", "path": "contributions/authority/auth0/src/main/java/com/yahoo/athenz/auth/oauth/auth0/Auth0Jwt.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Yahoo Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.yahoo.athenz.auth.oauth.auth0;\n+\n+import java.util.LinkedHashMap;\n+import com.yahoo.athenz.auth.AuthorityConsts;\n+import com.yahoo.athenz.auth.oauth.token.DefaultOAuthJwtAccessToken;\n+import com.yahoo.athenz.auth.oauth.token.OAuthJwtAccessToken;\n+import com.yahoo.athenz.auth.util.AthenzUtils;\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.Jws;\n+import io.jsonwebtoken.RequiredTypeException;\n+\n+/**\n+ * Custom for Auth0 JWT access token format\n+ */\n+public class Auth0Jwt extends DefaultOAuthJwtAccessToken {\n+\n+    private static String claimClientId = \"https://myapp.example.com/client_id\";", "originalCommit": "70d39b4244ae41d5d8ba1d7173be8e3093be7a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwNzE4Ng==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r418407186", "bodyText": "Auth0 has restriction on custom field format, so we need the \"https://myapp.example.com/\" part as the namespace.\nhttps://auth0.com/docs/api-auth/tutorials/adoption/scope-custom-claims#custom-claims\nAlso, as we enforced the client ID and cnf checking in the new authority class, the claim name should be specified. For the default value, I just use the value can be found in auth0's docs.", "author": "WindzCUHK", "createdAt": "2020-05-01T04:03:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMTA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMTUwNQ==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r414911505", "bodyText": "I would suggest if we have a AthenzUtils.getPrincipal method then that method should already return values in lowercase since that's what Athenz uses everywhere. Then we don't have to remember to call toLowerCase() everywhere.", "author": "havetisyan", "createdAt": "2020-04-24T23:10:05Z", "path": "contributions/authority/auth0/src/main/java/com/yahoo/athenz/auth/oauth/auth0/Auth0Jwt.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Yahoo Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.yahoo.athenz.auth.oauth.auth0;\n+\n+import java.util.LinkedHashMap;\n+import com.yahoo.athenz.auth.AuthorityConsts;\n+import com.yahoo.athenz.auth.oauth.token.DefaultOAuthJwtAccessToken;\n+import com.yahoo.athenz.auth.oauth.token.OAuthJwtAccessToken;\n+import com.yahoo.athenz.auth.util.AthenzUtils;\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.Jws;\n+import io.jsonwebtoken.RequiredTypeException;\n+\n+/**\n+ * Custom for Auth0 JWT access token format\n+ */\n+public class Auth0Jwt extends DefaultOAuthJwtAccessToken {\n+\n+    private static String claimClientId = \"https://myapp.example.com/client_id\";\n+    private static String claimConfirm = \"https://myapp.example.com/cnf\";\n+    private static String userDomain = \"user\";\n+\n+    /**\n+     * Create Auth0 JWT access token object\n+     * @param  jws JWS claims\n+     */\n+    public Auth0Jwt(Jws<Claims> jws) {\n+        super(jws);\n+    }\n+\n+    @Override\n+    public String getSubject() {\n+        String subject = this.body.getSubject();\n+        if (subject == null) {\n+            return null;\n+        }\n+        // normalize as Athenz principal\n+        return (AthenzUtils.getPrincipalName(Auth0Jwt.userDomain, subject.replace('|', '-'))).toLowerCase();", "originalCommit": "70d39b4244ae41d5d8ba1d7173be8e3093be7a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2NTY5NA==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r418565694", "bodyText": "Thank you for suggesting.\nI updated both util methods in 646436c & f8cb9ad.", "author": "WindzCUHK", "createdAt": "2020-05-01T14:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMTUwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMjQyNQ==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r414912425", "bodyText": "we should keep the number of dependencies in auth_core minimal so not sure why we're using this but it doesn't look right.", "author": "havetisyan", "createdAt": "2020-04-24T23:12:53Z", "path": "libs/java/auth_core/pom.xml", "diffHunk": "@@ -48,10 +48,32 @@\n       <artifactId>jaxb-api</artifactId>\n       <version>2.3.1</version>\n     </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+      <version>${jackson.databind.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.jsonwebtoken</groupId>\n+      <artifactId>jjwt-api</artifactId>\n+      <version>${jjwt.version}</version>\n+    </dependency>\n     <dependency>\n       <groupId>io.jsonwebtoken</groupId>\n-      <artifactId>jjwt</artifactId>\n+      <artifactId>jjwt-impl</artifactId>\n       <version>${jjwt.version}</version>\n+      <scope>runtime</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.jsonwebtoken</groupId>\n+      <artifactId>jjwt-jackson</artifactId>\n+      <version>${jjwt.version}</version>\n+      <scope>runtime</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.auth0</groupId>", "originalCommit": "70d39b4244ae41d5d8ba1d7173be8e3093be7a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3MjgxNg==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r418572816", "bodyText": "removed. details: #943 (comment)", "author": "WindzCUHK", "createdAt": "2020-05-01T14:44:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMjQyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMzMyOQ==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r414913329", "bodyText": "seems inconsistent that we lowercase service but not domain?", "author": "havetisyan", "createdAt": "2020-04-24T23:15:41Z", "path": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/CertificateAuthority.java", "diffHunk": "@@ -99,106 +96,22 @@ public Principal authenticate(X509Certificate[] certs, StringBuilder errMsg) {\n             }\n         }\n \n-        // make sure we have at least one valid certificate in our list\n-        \n-        if (certs == null || certs[0] == null) {\n-            reportError(\"CertificateAuthority: No certificate available in request\", errMsg);\n-            return null;\n-        }\n-        \n-        X509Certificate x509Cert = certs[0];\n-        String principalName = Crypto.extractX509CertCommonName(x509Cert);\n-        if (principalName == null || principalName.isEmpty()) {\n-            reportError(\"CertificateAuthority: Certificate principal is empty\", errMsg);\n-            return null;\n-        }\n-\n-        // make sure the principal is not on our excluded list\n-        \n-        if (excludedPrincipalSet != null && excludedPrincipalSet.contains(principalName)) {\n-            reportError(\"CertificateAuthority: Principal is excluded\", errMsg);\n+        // parse certificate\n+        CertificateIdentity certId = null;\n+        try {\n+            certId = this.certificateIdentityParser.parse(certs);\n+        } catch (CertificateIdentityException e) {\n+            this.reportError(\"CertificateAuthority: \" + e.getMessage(), errMsg);\n             return null;\n         }\n-        \n-        // For role cert, the principal information is in the SAN email\n-        \n-        List<String> roles = null;\n-        int idx = principalName.indexOf(\":role.\");\n-        if (idx != -1) {\n-\n-            // check to make sure role certs are allowed for principal\n-\n-            if (excludeRoleCertificates) {\n-                reportError(\"CertificateAuthority: Role Certificates not allowed\", errMsg);\n-                return null;\n-            }\n-\n-            // fist we need to keep the role name in our object\n-            \n-            roles = new ArrayList<>();\n-            roles.add(principalName);\n-            \n-            // now extract the email field\n-            \n-            List<String> emails = Crypto.extractX509CertEmails(x509Cert);\n-            if (emails.isEmpty()) {\n-                reportError(\"CertificateAuthority: Invalid role cert, no email SAN entry\", errMsg);\n-                return null;\n-            }\n-            String email = emails.get(0);\n-            idx = email.indexOf('@');\n-            if (idx == -1) {\n-                reportError(\"CertificateAuthority: Invalid role cert, invalid email SAN entry\", errMsg);\n-                return null;\n-            }\n-            principalName = email.substring(0, idx);\n-        }\n-\n-        // check to see if we have a role certificate where roles\n-        // are presented as URIs in the SAN\n \n-        List<String> uris = Crypto.extractX509CertURIs(x509Cert);\n-        for (String uri : uris) {\n-            if (!uri.toLowerCase().startsWith(ZTS_CERT_ROLE_URI)) {\n-                continue;\n-            }\n-            if (roles == null) {\n-                roles = new ArrayList<>();\n-            }\n-            final String roleUri = uri.substring(ZTS_CERT_ROLE_URI.length());\n-            idx = roleUri.indexOf('/');\n-            if (idx == -1) {\n-                reportError(\"CertificateAuthority: Invalid role cert, invalid uri SAN entry\", errMsg);\n-                return null;\n-            }\n-            roles.add(roleUri.substring(0, idx) + \":role.\" + roleUri.substring(idx + 1));\n-        }\n-\n-        if (excludeRoleCertificates && roles != null) {\n-            reportError(\"CertificateAuthority: Role Certificates not allowed\", errMsg);\n-            return null;\n-        }\n-\n-        // extract domain and service names from the name. We must have\n-        // a valid service identity in the form domain.service\n-\n-        idx = principalName.lastIndexOf('.');\n-        if (idx == -1) {\n-            reportError(\"CertificateAuthority: Principal is not a valid service identity\", errMsg);\n-            return null;\n-        }\n-\n-        String domain = principalName.substring(0, idx);\n-        String name = principalName.substring(idx + 1);\n-        \n-        // all the role members in Athenz are normalized to lower case so we need to make\n-        // sure our principal's name and domain are created with lower case as well\n-        \n-        SimplePrincipal principal = (SimplePrincipal) SimplePrincipal.create(domain.toLowerCase(),\n-                name.toLowerCase(), x509Cert.toString(), this);\n+        // create principal\n+        X509Certificate x509Cert = certId.getX509Certificate();\n+        SimplePrincipal principal = (SimplePrincipal) SimplePrincipal.create(certId.getDomain(), certId.getService().toLowerCase(), x509Cert.toString(), this);", "originalCommit": "70d39b4244ae41d5d8ba1d7173be8e3093be7a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2NjYwMQ==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r418566601", "bodyText": "Thank you for pointing out. CertificateIdentityParser should handle the lowercase. toLowerCase() is not needed here.\nFixed in 2869870 and also removed other unnecessary toLowerCase().", "author": "WindzCUHK", "createdAt": "2020-05-01T14:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMzMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMzk1Nw==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r414913957", "bodyText": "we have :role. defined in AuthortyConsts so we should use that here", "author": "havetisyan", "createdAt": "2020-04-24T23:17:40Z", "path": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/CertificateIdentityParser.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 Yahoo Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.yahoo.athenz.auth.impl;\n+\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import javax.servlet.http.HttpServletRequest;\n+import com.yahoo.athenz.auth.util.AthenzUtils;\n+import com.yahoo.athenz.auth.util.Crypto;\n+\n+/**\n+ * Parser of Athenz identity\n+ */\n+public class CertificateIdentityParser {\n+\n+    /**\n+     * X509Certificate attribute name\n+     */\n+    public static final String JAVAX_CERT_ATTR = \"javax.servlet.request.X509Certificate\";\n+\n+    /**\n+     * Role prefix inside X509Certificate\n+     */\n+    public static final String ZTS_CERT_ROLE_URI = \"athenz://role/\";\n+\n+    public static final String EMPTY_CERT_ERR_MSG = \"No certificate available in request\";\n+\n+    private Set<String> excludedPrincipalSet = null;\n+    private boolean excludeRoleCertificates;\n+\n+    /**\n+     * @param  excludedPrincipalSet    Reject parsing certificate with those principal\n+     * @param  excludeRoleCertificates Reject parsing role certificates\n+     */\n+    public CertificateIdentityParser(Set<String> excludedPrincipalSet, boolean excludeRoleCertificates) {\n+        this.excludedPrincipalSet = excludedPrincipalSet;\n+        this.excludeRoleCertificates = excludeRoleCertificates;\n+    }\n+\n+    /**\n+     * Parse from X509Certificate inside the request.\n+     * @param  request                      HTTPS request\n+     * @return                              CertificateIdentity\n+     * @throws CertificateIdentityException parse error\n+     */\n+    public CertificateIdentity parse(HttpServletRequest request) throws CertificateIdentityException {\n+        X509Certificate[] certs = (X509Certificate[]) request.getAttribute(JAVAX_CERT_ATTR);\n+        return this.parse(certs);\n+    }\n+\n+    /**\n+     * Parse from X509Certificate chain.\n+     * @param  certs                        X509Certificate chain\n+     * @return                              CertificateIdentity\n+     * @throws CertificateIdentityException parse error\n+     */\n+    public CertificateIdentity parse(X509Certificate[] certs) throws CertificateIdentityException {\n+        // make sure we have at least one valid certificate in our list\n+\n+        if (certs == null || certs[0] == null) {\n+            throw new CertificateIdentityException(EMPTY_CERT_ERR_MSG);\n+        }\n+\n+        X509Certificate x509Cert = certs[0];\n+        String principalName = Crypto.extractX509CertCommonName(x509Cert);\n+        if (principalName == null || principalName.isEmpty()) {\n+            throw new CertificateIdentityException(\"Certificate principal is empty\");\n+        }\n+\n+        // make sure the principal is not on our excluded list\n+\n+        if (this.excludedPrincipalSet != null && this.excludedPrincipalSet.contains(principalName)) {\n+            throw new CertificateIdentityException(\"Principal is excluded\");\n+        }\n+\n+        // For role cert, the principal information is in the SAN email\n+\n+        List<String> roles = null;\n+        int idx = principalName.indexOf(\":role.\");", "originalCommit": "70d39b4244ae41d5d8ba1d7173be8e3093be7a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2ODA3Nw==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r418568077", "bodyText": "Updated in 2c5c855, and try to refactor other hard-coded :role. too.\nhard-coded :role. values are preserved in these files, as their context seem to be different.\n./servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSResources.java\n./servers/zts/src/main/java/com/yahoo/athenz/zts/AccessTokenRequest.java\n./servers/zts/src/main/java/com/yahoo/athenz/zts/store/DataStore.java\n*Test.java", "author": "WindzCUHK", "createdAt": "2020-05-01T14:34:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMzk1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxNTQwMQ==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r414915401", "bodyText": "why did we create this class? we already have the SigningKeyResolver without relying on auth0 implementation and it supports both rsa and ec keys. So rather than creating yet another and adding dependency on auth0 library, take a look at the current key resolver and if necessary extend that class.", "author": "havetisyan", "createdAt": "2020-04-24T23:22:39Z", "path": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/oauth/parser/KeyStoreJwkKeyResolver.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Yahoo Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.yahoo.athenz.auth.oauth.parser;\n+\n+import java.net.URL;\n+import java.security.Key;\n+import java.util.concurrent.TimeUnit;\n+import com.auth0.jwk.JwkException;\n+import com.auth0.jwk.JwkProvider;\n+import com.auth0.jwk.JwkProviderBuilder;\n+import com.yahoo.athenz.auth.KeyStore;\n+import com.yahoo.athenz.auth.util.AthenzUtils;\n+import com.yahoo.athenz.auth.util.Crypto;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.JwsHeader;\n+import io.jsonwebtoken.SigningKeyResolver;\n+\n+/**\n+ * KeyResolver that get public key from key store or JWKS URL\n+ * @see <a href=\"https://tools.ietf.org/html/rfc7517\" target=\"_top\">RFC7517</a>\n+ */\n+public class KeyStoreJwkKeyResolver implements SigningKeyResolver {", "originalCommit": "70d39b4244ae41d5d8ba1d7173be8e3093be7a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3MjU3Ng==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r418572576", "bodyText": "As the auth0 class has built-in refresh logic on the JWKS URL, I included the library. However, its behavior is difficult to trace in operation so I updated to depend on the existing JwtsSigningKeyResolver in 591d10e.\nI also made some changes on the JwtsSigningKeyResolver class to support file URL.\nIn addition, as the 2 classes behave differently, I just use weak dependency. Please let me know if extending the class is better.", "author": "WindzCUHK", "createdAt": "2020-05-01T14:44:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxNTQwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxNTcxOQ==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r414915719", "bodyText": "we should probably log these errors otherwise it's very difficult to debug any issues.", "author": "havetisyan", "createdAt": "2020-04-24T23:23:46Z", "path": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/oauth/token/DefaultOAuthJwtAccessToken.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Yahoo Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.yahoo.athenz.auth.oauth.token;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.Jws;\n+import io.jsonwebtoken.RequiredTypeException;\n+\n+/**\n+ * Default implementation of OAuthJwtAccessToken\n+ */\n+public class DefaultOAuthJwtAccessToken implements OAuthJwtAccessToken {\n+\n+    // protected JwsHeader<?> header;\n+    protected Claims body;\n+    protected String signature;\n+\n+    /**\n+     * Create DefaultOAuthJwtAccessToken access token object\n+     * @param  jws JWS claims\n+     */\n+    public DefaultOAuthJwtAccessToken(Jws<Claims> jws) {\n+        // this.header = jws.getHeader();\n+        this.body = jws.getBody();\n+        this.signature = jws.getSignature();\n+    }\n+\n+    @Override\n+    public String getSubject() {\n+        String subject = this.body.getSubject();\n+        if (subject == null) {\n+            return null;\n+        }\n+        return subject.toLowerCase(); // normalize as Athenz principal\n+    }\n+\n+    @Override\n+    public String getIssuer() {\n+        return this.body.getIssuer();\n+    }\n+\n+    @Override\n+    public String getAudience() {\n+        // aud can be string or an array of strings.\n+        return this.body.getAudience();\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<String> getAudiences() {\n+        // https://tools.ietf.org/html/rfc7519#page-9\n+        List<String> audiences;\n+        try {\n+            // returns null if not found\n+            audiences = this.body.get(Claims.AUDIENCE, ArrayList.class);\n+        } catch (RequiredTypeException e) {", "originalCommit": "70d39b4244ae41d5d8ba1d7173be8e3093be7a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3MzA0NA==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r418573044", "bodyText": "added in 24f0203", "author": "WindzCUHK", "createdAt": "2020-05-01T14:45:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxNTcxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxNTkwMA==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r414915900", "bodyText": "lets include a log error entry for this as well.", "author": "havetisyan", "createdAt": "2020-04-24T23:24:23Z", "path": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/oauth/token/DefaultOAuthJwtAccessToken.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Yahoo Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.yahoo.athenz.auth.oauth.token;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.Jws;\n+import io.jsonwebtoken.RequiredTypeException;\n+\n+/**\n+ * Default implementation of OAuthJwtAccessToken\n+ */\n+public class DefaultOAuthJwtAccessToken implements OAuthJwtAccessToken {\n+\n+    // protected JwsHeader<?> header;\n+    protected Claims body;\n+    protected String signature;\n+\n+    /**\n+     * Create DefaultOAuthJwtAccessToken access token object\n+     * @param  jws JWS claims\n+     */\n+    public DefaultOAuthJwtAccessToken(Jws<Claims> jws) {\n+        // this.header = jws.getHeader();\n+        this.body = jws.getBody();\n+        this.signature = jws.getSignature();\n+    }\n+\n+    @Override\n+    public String getSubject() {\n+        String subject = this.body.getSubject();\n+        if (subject == null) {\n+            return null;\n+        }\n+        return subject.toLowerCase(); // normalize as Athenz principal\n+    }\n+\n+    @Override\n+    public String getIssuer() {\n+        return this.body.getIssuer();\n+    }\n+\n+    @Override\n+    public String getAudience() {\n+        // aud can be string or an array of strings.\n+        return this.body.getAudience();\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<String> getAudiences() {\n+        // https://tools.ietf.org/html/rfc7519#page-9\n+        List<String> audiences;\n+        try {\n+            // returns null if not found\n+            audiences = this.body.get(Claims.AUDIENCE, ArrayList.class);\n+        } catch (RequiredTypeException e) {\n+            // found but class mismatch\n+            audiences = Arrays.asList(new String[]{ this.body.getAudience() });\n+        }\n+        return audiences;\n+    }\n+\n+    @Override\n+    public String getClientId() {\n+        return this.body.get(OAuthJwtAccessToken.CLAIM_CLIENT_ID, String.class);\n+    }\n+\n+    @Override\n+    public String getCertificateThumbprint() {\n+        // https://github.com/jwtk/jjwt/issues/404, custom model class not supported\n+        LinkedHashMap<?, ?> certConf = null;\n+        try {\n+            certConf = this.body.get(OAuthJwtAccessToken.CLAIM_CONFIRM, LinkedHashMap.class);\n+            if (certConf == null) {\n+                return null;\n+            }\n+        } catch (RequiredTypeException e) {", "originalCommit": "70d39b4244ae41d5d8ba1d7173be8e3093be7a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3MzA2Mg==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r418573062", "bodyText": "added in 24f0203", "author": "WindzCUHK", "createdAt": "2020-05-01T14:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxNTkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxNjk0MA==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r414916940", "bodyText": "seems to be inefficient to handle just a single string. we can just create a set and add the entry without creating additional objects.", "author": "havetisyan", "createdAt": "2020-04-24T23:27:49Z", "path": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/oauth/util/OAuthAuthorityUtils.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Yahoo Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.yahoo.athenz.auth.oauth.util;\n+\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.servlet.http.HttpServletRequest;\n+import com.yahoo.athenz.auth.oauth.OAuthAuthorityConsts;\n+\n+/**\n+ * Utility class for JwtAuthority\n+ */\n+public class OAuthAuthorityUtils {\n+\n+    /**\n+     * get system properties with JwtAuthority prefix\n+     * @param  key property name\n+     * @param  def default value\n+     * @return     system property value set\n+     */\n+    public static final String getProperty(String key, String def) {\n+        return System.getProperty(OAuthAuthorityConsts.SYSTEM_PROP_PREFIX + key, def);\n+    }\n+\n+    /**\n+     * convert CSV string to Set\n+     * @param  csv       CSV string\n+     * @param  delimiter CSV delimiter\n+     * @return           corresponding Set object of the CSV string, or null if CSV is null or empty\n+     */\n+    public static final Set<String> csvToSet(String csv, String delimiter) {\n+        if (csv == null || csv.isEmpty()) {\n+            return null;\n+        }\n+        if (delimiter == null || delimiter.isEmpty()) {\n+            return new HashSet<>(Arrays.asList(csv));", "originalCommit": "70d39b4244ae41d5d8ba1d7173be8e3093be7a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3MzM5MA==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r418573390", "bodyText": "Thank you for pointing out. fixed: 1e7303e", "author": "WindzCUHK", "createdAt": "2020-05-01T14:46:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxNjk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxODE5Ng==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r414918196", "bodyText": "I think I made a comment earlier about this. it looks like this method already does the to lowercase conversion thus the caller doesn't need to call it again.", "author": "havetisyan", "createdAt": "2020-04-24T23:32:14Z", "path": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/AthenzUtils.java", "diffHunk": "@@ -145,11 +144,45 @@ public static String extractPrincipalDomainName(final String principalName) {\n      * @return service name, null if it's not the expected full principal service name\n      */\n     public static String extractPrincipalServiceName(final String principalName) {\n-        int idx = principalName.lastIndexOf('.');\n+        int idx = principalName.lastIndexOf(AuthorityConsts.ATHENZ_PRINCIPAL_DELIMITER_CHAR);\n         if (idx == -1 || idx == 0 || idx == principalName.length() - 1) {\n             return null;\n         } else {\n             return principalName.substring(idx + 1);\n         }\n     }\n+\n+    /**\n+     * Split principal to domain and service\n+     * @param  name principal\n+     * @return      [domain, service], null if principal in invalid format\n+     */\n+    public static String[] splitPrincipalName(String name) {", "originalCommit": "70d39b4244ae41d5d8ba1d7173be8e3093be7a56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3NDMyOA==", "url": "https://github.com/AthenZ/athenz/pull/943#discussion_r418574328", "bodyText": "agreed. related reply: #943 (comment), #943 (comment)", "author": "WindzCUHK", "createdAt": "2020-05-01T14:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxODE5Ng=="}], "type": "inlineReview"}, {"oid": "c46db96dd408c1d2e2855ebc727898f002fe9673", "url": "https://github.com/AthenZ/athenz/commit/c46db96dd408c1d2e2855ebc727898f002fe9673", "message": "fix dead link", "committedDate": "2020-05-01T03:38:08Z", "type": "commit"}, {"oid": "eb3a9fbe29a3bcd4d93c72296920a46caded9d19", "url": "https://github.com/AthenZ/athenz/commit/eb3a9fbe29a3bcd4d93c72296920a46caded9d19", "message": "update jjwt version", "committedDate": "2020-05-01T03:38:09Z", "type": "commit"}, {"oid": "64fa05a6939acdc20282b5c221e975aad0215ffb", "url": "https://github.com/AthenZ/athenz/commit/64fa05a6939acdc20282b5c221e975aad0215ffb", "message": "remove bouncer", "committedDate": "2020-05-01T03:38:09Z", "type": "commit"}, {"oid": "5dddade74166c15ec173fba081be971c0f705648", "url": "https://github.com/AthenZ/athenz/commit/5dddade74166c15ec173fba081be971c0f705648", "message": "fix whitespace", "committedDate": "2020-05-01T03:38:09Z", "type": "commit"}, {"oid": "5a4b9b78362ec18b776f75042e87985bada4e6b6", "url": "https://github.com/AthenZ/athenz/commit/5a4b9b78362ec18b776f75042e87985bada4e6b6", "message": "add OAuthCertBoundJwtAccessTokenAuthority, refactor CertificateAuthority", "committedDate": "2020-05-01T03:38:09Z", "type": "commit"}, {"oid": "0e95b7666569fa637652dd41d699f3adb9b209cb", "url": "https://github.com/AthenZ/athenz/commit/0e95b7666569fa637652dd41d699f3adb9b209cb", "message": "add auth0 example", "committedDate": "2020-05-01T03:38:09Z", "type": "commit"}, {"oid": "0528d4ce0a8364257dd99e23b33be069000324d1", "url": "https://github.com/AthenZ/athenz/commit/0528d4ce0a8364257dd99e23b33be069000324d1", "message": "extend test case key length", "committedDate": "2020-05-01T03:38:09Z", "type": "commit"}, {"oid": "0528d4ce0a8364257dd99e23b33be069000324d1", "url": "https://github.com/AthenZ/athenz/commit/0528d4ce0a8364257dd99e23b33be069000324d1", "message": "extend test case key length", "committedDate": "2020-05-01T03:38:09Z", "type": "forcePushed"}, {"oid": "9f86ef6dbe61f14b782aa06ebc4cd793536e2be9", "url": "https://github.com/AthenZ/athenz/commit/9f86ef6dbe61f14b782aa06ebc4cd793536e2be9", "message": "add comment", "committedDate": "2020-05-01T03:52:18Z", "type": "commit"}, {"oid": "bc180c1fd6a4627a0c25c79a6f06fd6e555fd6b3", "url": "https://github.com/AthenZ/athenz/commit/bc180c1fd6a4627a0c25c79a6f06fd6e555fd6b3", "message": "update auth core version", "committedDate": "2020-05-01T03:53:53Z", "type": "commit"}, {"oid": "f8cb9ade20c627aff7452c692164192adc8ef654", "url": "https://github.com/AthenZ/athenz/commit/f8cb9ade20c627aff7452c692164192adc8ef654", "message": "AthenzUtils.getPrincipalName() always lower case", "committedDate": "2020-05-01T04:15:14Z", "type": "commit"}, {"oid": "1e7303e7a951ed0e40d7e1c50f00aee49b2701a2", "url": "https://github.com/AthenZ/athenz/commit/1e7303e7a951ed0e40d7e1c50f00aee49b2701a2", "message": "fix single string handling", "committedDate": "2020-05-01T04:59:06Z", "type": "commit"}, {"oid": "646436c85744c31a540118365d29fa0f805e71e5", "url": "https://github.com/AthenZ/athenz/commit/646436c85744c31a540118365d29fa0f805e71e5", "message": "AthenzUtils.splitPrincipalName() always lower case", "committedDate": "2020-05-01T05:04:43Z", "type": "commit"}, {"oid": "2c5c855c65aede5701d2b40b7a9728fa6dc5a79f", "url": "https://github.com/AthenZ/athenz/commit/2c5c855c65aede5701d2b40b7a9728fa6dc5a79f", "message": "refactor all \":role.\" string", "committedDate": "2020-05-01T09:22:18Z", "type": "commit"}, {"oid": "2869870310866661e66bc7c97af916eefedb25ce", "url": "https://github.com/AthenZ/athenz/commit/2869870310866661e66bc7c97af916eefedb25ce", "message": "remove unnecessary to lower", "committedDate": "2020-05-01T09:49:11Z", "type": "commit"}, {"oid": "591d10eb2ea52df6c1199b8eead29c90f77fcbb6", "url": "https://github.com/AthenZ/athenz/commit/591d10eb2ea52df6c1199b8eead29c90f77fcbb6", "message": "use and update existing JwtsSigningKeyResolver", "committedDate": "2020-05-01T14:02:57Z", "type": "commit"}, {"oid": "24f0203141d359c588717b2fe100cc1f56098c12", "url": "https://github.com/AthenZ/athenz/commit/24f0203141d359c588717b2fe100cc1f56098c12", "message": "add debug msg", "committedDate": "2020-05-01T14:25:36Z", "type": "commit"}, {"oid": "5efc8513f851441bc915b9e791a63e56c0473ada", "url": "https://github.com/AthenZ/athenz/commit/5efc8513f851441bc915b9e791a63e56c0473ada", "message": "fix missing import", "committedDate": "2020-05-01T16:55:47Z", "type": "commit"}, {"oid": "5efc8513f851441bc915b9e791a63e56c0473ada", "url": "https://github.com/AthenZ/athenz/commit/5efc8513f851441bc915b9e791a63e56c0473ada", "message": "fix missing import", "committedDate": "2020-05-01T16:55:47Z", "type": "forcePushed"}]}