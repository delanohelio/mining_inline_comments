{"pr_number": 6391, "pr_title": "Convert selected PostgreSQL tests to SqlDataTypeTest", "pr_createdAt": "2020-12-19T22:48:19Z", "pr_url": "https://github.com/trinodb/trino/pull/6391", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5Mzk5NA==", "url": "https://github.com/trinodb/trino/pull/6391#discussion_r546593994", "bodyText": "It is not specific to this PR directly, but a second thought on the mechanism. Why express expected type as spi.type.Type instead a type name. Wouldn't having type names everywhere be more consistent?", "author": "losipiuk", "createdAt": "2020-12-21T09:19:29Z", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -190,11 +190,51 @@ public void testBasicTypes()\n                 .addRoundTrip(\"integer\", \"123456789\", INTEGER)\n                 .addRoundTrip(\"smallint\", \"32456\", SMALLINT, \"SMALLINT '32456'\")\n                 .addRoundTrip(\"tinyint\", \"5\", SMALLINT, \"SMALLINT '5'\")\n-                .addRoundTrip(\"double\", \"123.45\", DOUBLE, \"DOUBLE '123.45'\")\n-                .addRoundTrip(\"real\", \"123.45\", REAL, \"REAL '123.45'\")\n                 .execute(getQueryRunner(), prestoCreateAsSelect(\"test_basic_types\"));\n     }\n \n+    @Test\n+    public void testReal()\n+    {\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"real\", \"NULL\", REAL, \"CAST(NULL AS real)\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwOTg4Ng==", "url": "https://github.com/trinodb/trino/pull/6391#discussion_r546609886", "bodyText": "Type is more explicit (from Presto perspective). Also, it helps avoid having String,String,String,String signature, and helps adding overloads.", "author": "findepi", "createdAt": "2020-12-21T09:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5Mzk5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwODUzMw==", "url": "https://github.com/trinodb/trino/pull/6391#discussion_r546608533", "bodyText": "nit: Any specific reason to use the PostgreSQL specific CAST syntax?", "author": "hashhar", "createdAt": "2020-12-21T09:50:10Z", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -190,11 +190,51 @@ public void testBasicTypes()\n                 .addRoundTrip(\"integer\", \"123456789\", INTEGER)\n                 .addRoundTrip(\"smallint\", \"32456\", SMALLINT, \"SMALLINT '32456'\")\n                 .addRoundTrip(\"tinyint\", \"5\", SMALLINT, \"SMALLINT '5'\")\n-                .addRoundTrip(\"double\", \"123.45\", DOUBLE, \"DOUBLE '123.45'\")\n-                .addRoundTrip(\"real\", \"123.45\", REAL, \"REAL '123.45'\")\n                 .execute(getQueryRunner(), prestoCreateAsSelect(\"test_basic_types\"));\n     }\n \n+    @Test\n+    public void testReal()\n+    {\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"real\", \"NULL\", REAL, \"CAST(NULL AS real)\")\n+                .addRoundTrip(\"real\", \"3.14\", REAL, \"REAL '3.14'\")\n+                .addRoundTrip(\"real\", \"3.1415927\", REAL, \"REAL '3.1415927'\")\n+                .addRoundTrip(\"real\", \"'NaN'::real\", REAL, \"CAST(nan() AS real)\")\n+                .addRoundTrip(\"real\", \"'-Infinity'::real\", REAL, \"CAST(-infinity() AS real)\")\n+                .addRoundTrip(\"real\", \"'+Infinity'::real\", REAL, \"CAST(+infinity() AS real)\")\n+                .execute(getQueryRunner(), postgresCreateAndInsert(\"tpch.postgresql_test_real\"));\n+\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"real\", \"NULL\", REAL, \"CAST(NULL AS real)\")\n+                .addRoundTrip(\"real\", \"3.14\", REAL, \"REAL '3.14'\")\n+                .addRoundTrip(\"real\", \"3.1415927\", REAL, \"REAL '3.1415927'\")\n+                .addRoundTrip(\"real\", \"nan()\", REAL, \"CAST(nan() AS real)\")\n+                .addRoundTrip(\"real\", \"-infinity()\", REAL, \"CAST(-infinity() AS real)\")\n+                .addRoundTrip(\"real\", \"+infinity()\", REAL, \"CAST(+infinity() AS real)\")\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_real\"));\n+    }\n+\n+    @Test\n+    public void testDouble()\n+    {\n+        SqlDataTypeTest.create()\n+                .addRoundTrip(\"double precision\", \"NULL\", DOUBLE, \"CAST(NULL AS double)\")\n+                .addRoundTrip(\"double precision\", \"1.0E100\", DOUBLE, \"1.0E100\")\n+                .addRoundTrip(\"double precision\", \"'NaN'::double precision\", DOUBLE, \"nan()\")\n+                .addRoundTrip(\"double precision\", \"'+Infinity'::double precision\", DOUBLE, \"+infinity()\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYxMDU1Mw==", "url": "https://github.com/trinodb/trino/pull/6391#discussion_r546610553", "bodyText": "Pre-existing. Anyway, the postgresql-specific syntax is heavily advertised in postgresql docs, so why not? The expression as a whole remains postgresql-specific anyway.", "author": "findepi", "createdAt": "2020-12-21T09:54:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYwODUzMw=="}], "type": "inlineReview"}, {"oid": "15b8753a95b7455d40b609642b4e2d60115ee262", "url": "https://github.com/trinodb/trino/commit/15b8753a95b7455d40b609642b4e2d60115ee262", "message": "Add helper class aiding conversion to SqlDataTypeTest", "committedDate": "2020-12-21T09:54:35Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "de81a483b38e91b4110d91e5ea6916901c2e4ed4", "url": "https://github.com/trinodb/trino/commit/de81a483b38e91b4110d91e5ea6916901c2e4ed4", "message": "Convert PostgreSQL testVarbinary to SqlDataTypeTest", "committedDate": "2020-12-21T10:01:40Z", "type": "commit"}, {"oid": "bcffc6e7227960d10b5b75c9263e185b97f324fc", "url": "https://github.com/trinodb/trino/commit/bcffc6e7227960d10b5b75c9263e185b97f324fc", "message": "Convert PostgreSQL decimal test to SqlDataTypeTest", "committedDate": "2020-12-21T10:01:40Z", "type": "commit"}, {"oid": "c664973513661a83ae35b247dc6826c81212d01e", "url": "https://github.com/trinodb/trino/commit/c664973513661a83ae35b247dc6826c81212d01e", "message": "Convert PostgreSQL char test to SqlDataTypeTest", "committedDate": "2020-12-21T10:01:42Z", "type": "commit"}, {"oid": "29208f776a7749c9491da8f7b64076d9f3f90bb5", "url": "https://github.com/trinodb/trino/commit/29208f776a7749c9491da8f7b64076d9f3f90bb5", "message": "Convert PostgreSQL real, double tests to SqlDataTypeTest", "committedDate": "2020-12-21T10:01:42Z", "type": "commit"}, {"oid": "9087c42f0b23c05632ea8f18e75b57f913e400ae", "url": "https://github.com/trinodb/trino/commit/9087c42f0b23c05632ea8f18e75b57f913e400ae", "message": "Fix test class name\n\nThe \"Sql\" infix looks incidental.", "committedDate": "2020-12-21T10:01:43Z", "type": "commit"}, {"oid": "9087c42f0b23c05632ea8f18e75b57f913e400ae", "url": "https://github.com/trinodb/trino/commit/9087c42f0b23c05632ea8f18e75b57f913e400ae", "message": "Fix test class name\n\nThe \"Sql\" infix looks incidental.", "committedDate": "2020-12-21T10:01:43Z", "type": "forcePushed"}]}