{"pr_number": 4699, "pr_title": "Update development practices", "pr_createdAt": "2020-08-05T13:29:27Z", "pr_url": "https://github.com/trinodb/trino/pull/4699", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI0MzM3OQ==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r466243379", "bodyText": "Consider changing It is allowed to declare public members\nto\nIt is allowed to declare public and protected?", "author": "sopel39", "createdAt": "2020-08-06T08:43:56Z", "path": "DEVELOPMENT.md", "diffHunk": "@@ -10,6 +10,11 @@ We recommend you use IntelliJ as your IDE. The code style template for the proje\n * Ensure that all files have the appropriate license header; you can generate the license by running `mvn license:format`.\n * Consider using String formatting (printf style formatting using the Java `Formatter` class): `format(\"Session property %s is invalid: %s\", name, value)` (note that `format()` should always be statically imported). Sometimes, if you only need to append something, consider using the `+` operator.\n * Avoid using the ternary operator except for trivial expressions.\n+* It is allowed to declare public members in private inner classes if they are part of their API.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0MTQ1NQ==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r470541455", "bodyText": "Actually I think it is suggested. Not only allowed. To distinguish public interface of private class from int internal implementation.", "author": "losipiuk", "createdAt": "2020-08-14T10:22:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI0MzM3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI0NDE1OQ==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r466244159", "bodyText": "be more specific maybe.\nUsing ``var`` is allowed when it improves code readability and does not obscure types when reading code from GitHub\n\nHowever, I thought we are more keen on not using vars as it's not clearly obvious when they improve readability", "author": "sopel39", "createdAt": "2020-08-06T08:45:12Z", "path": "DEVELOPMENT.md", "diffHunk": "@@ -16,6 +16,9 @@ interactions, and other internal behavior, which leads to fragile tests.\n They also make it possible to mock complex interfaces or classes, which hides the fact that these classes are not (easily) testable. \n We prefer to write mocks by hand, which forces code to be written in a certain testable style.\n * Use an assertion from Airlift's `Assertions` class if there is one that covers your case rather than writing the assertion by hand. Over time we may move over to more fluent assertions like AssertJ.\n+* Using ``var`` is allowed.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5ODkwNg==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r466298906", "bodyText": "My bad. Once again I forgot not.", "author": "kokosing", "createdAt": "2020-08-06T09:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI0NDE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzNjEzNw==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r467336137", "bodyText": "I disagree with a blanket ban on var. There are situation where it can make the code more readable. E.g., it can help break up long stream() chains and allow assigning meaningful names to intermediate steps without having to introduce convoluted type declarations that don't provide any value.", "author": "martint", "createdAt": "2020-08-08T00:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI0NDE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzUwNTM1OQ==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r467505359", "bodyText": "would \"is discouraged\" better reflect the spirit of the slack conversations?", "author": "findepi", "createdAt": "2020-08-08T21:21:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI0NDE1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcyMzcxNg==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r467723716", "bodyText": "I am fine with this. However, making cases white and black makes it easier to understand. Now, people might start to think about what kind of grey is allowed. To me it is wasted effort.\n@martint Should I add you case as allowed exception?", "author": "kokosing", "createdAt": "2020-08-10T07:15:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI0NDE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI0NjIwMg==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r466246202", "bodyText": "Maybe add some rationale here:\n * Guava immutable collections preserve insertion order which is important for planning and query determinism\n * Guava ``copyOf`` does not make a copy of collection if source collection is also Guava immutable collection.", "author": "sopel39", "createdAt": "2020-08-06T08:48:38Z", "path": "DEVELOPMENT.md", "diffHunk": "@@ -16,6 +16,9 @@ interactions, and other internal behavior, which leads to fragile tests.\n They also make it possible to mock complex interfaces or classes, which hides the fact that these classes are not (easily) testable. \n We prefer to write mocks by hand, which forces code to be written in a certain testable style.\n * Use an assertion from Airlift's `Assertions` class if there is one that covers your case rather than writing the assertion by hand. Over time we may move over to more fluent assertions like AssertJ.\n+* Using ``var`` is allowed.\n+* Prefer using immutable collections from Guava over unmodifiable collections from JDK.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5OTI2OQ==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r466299269", "bodyText": "Guava copyOf\n\nSame for JDK of (like List.of)", "author": "kokosing", "createdAt": "2020-08-06T09:52:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI0NjIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI5OTY2Nw==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r466299667", "bodyText": "which is important for planning and query determinism\n\nI guess they are more reasons behind this.  I mentioned only deterministic iteration.", "author": "kokosing", "createdAt": "2020-08-06T09:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI0NjIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxNjk4Ng==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r466316986", "bodyText": "Same for JDK of (like List.of)\n\nThat's true, but without changing all usages of Guava to JDK, there will be transitions between Guava <-> JDK, which would trigger full copy. So it's either none or nothing in non-testing code", "author": "sopel39", "createdAt": "2020-08-06T10:26:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI0NjIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5ODU4NA==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r466898584", "bodyText": "That is true. But I am not sure if this need to be document. It is kind of obvious that they should not be mixed.", "author": "kokosing", "createdAt": "2020-08-07T08:27:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI0NjIwMg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMTM5NA==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r466401394", "bodyText": "Maybe, we should fill in []?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Information about the development process can be found in the [](./DEVELOPMENT.md).\n          \n          \n            \n            Information about the development process can be found in the [DEVELOPMENT](./DEVELOPMENT.md).", "author": "ebyhr", "createdAt": "2020-08-06T13:12:50Z", "path": "README.md", "diffHunk": "@@ -85,59 +85,4 @@ In the sample configuration, the Hive connector is mounted in the `hive` catalog\n \n ## Development\n \n-### Code Style\n-\n-We recommend you use IntelliJ as your IDE. The code style template for the project can be found in the [codestyle](https://github.com/airlift/codestyle) repository along with our general programming and Java guidelines. In addition to those you should also adhere to the following:\n-\n-* Alphabetize sections in the documentation source files (both in the table of contents files and other regular documentation files). In general, alphabetize methods/variables/sections if such ordering already exists in the surrounding code.\n-* When appropriate, use the stream API. However, note that the stream implementation does not perform well so avoid using it in inner loops or otherwise performance sensitive sections.\n-* Categorize errors when throwing exceptions. For example, PrestoException takes an error code as an argument, `PrestoException(HIVE_TOO_MANY_OPEN_PARTITIONS)`. This categorization lets you generate reports so you can monitor the frequency of various failures.\n-* Ensure that all files have the appropriate license header; you can generate the license by running `mvn license:format`.\n-* Consider using String formatting (printf style formatting using the Java `Formatter` class): `format(\"Session property %s is invalid: %s\", name, value)` (note that `format()` should always be statically imported). Sometimes, if you only need to append something, consider using the `+` operator.\n-* Avoid using the ternary operator except for trivial expressions.\n-* Use an assertion from Airlift's `Assertions` class if there is one that covers your case rather than writing the assertion by hand. Over time we may move over to more fluent assertions like AssertJ.\n-* When writing a Git commit message, follow these [guidelines](https://chris.beams.io/posts/git-commit/).\n-\n-### Additional IDE configuration\n-\n-When using IntelliJ to develop Presto, we recommend starting with all of the default inspections,\n-with some modifications.\n-\n-Enable the following inspections:\n-\n-- ``Java | Internationalization | Implicit usage of platform's default charset``,\n-- ``Java | Control flow issues | Redundant 'else'`` (including ``Report when there are no more statements after the 'if' statement`` option),\n-- ``Java | Class structure | Utility class is not 'final'``,\n-- ``Java | Class structure | Utility class with 'public' constructor``,\n-- ``Java | Class structure | Utility class without 'private' constructor``.\n-\n-Disable the following inspections:\n-\n-- ``Java | Performance | Call to 'Arrays.asList()' with too few arguments``,\n-- ``Java | Abstraction issues | 'Optional' used as field or parameter type``.\n-\n-Enable errorprone ([Error Prone Installation#IDEA](https://errorprone.info/docs/installation#intellij-idea)):\n-- Install ``Error Prone Compiler`` plugin from marketplace,\n-- In ``Java Compiler`` tab, select ``Javac with error-prone`` as the compiler,\n-- Update ``Additional command line parameters`` with ``-XepExcludedPaths:.*/target/generated-(|test-)sources/.* -XepDisableAllChecks -Xep:MissingOverride:ERROR ......`` (for current recommended list of command line parameters, see the top level ``pom.xml``, the definition of the ``errorprone-compiler-presto`` profile.\n-\n-### Building the Web UI\n-\n-The Presto Web UI is composed of several React components and is written in JSX and ES6. This source code is compiled and packaged into browser-compatible Javascript, which is then checked in to the Presto source code (in the `dist` folder). You must have [Node.js](https://nodejs.org/en/download/) and [Yarn](https://yarnpkg.com/en/) installed to execute these commands. To update this folder after making changes, simply run:\n-\n-    yarn --cwd presto-main/src/main/resources/webapp/src install\n-\n-If no Javascript dependencies have changed (i.e., no changes to `package.json`), it is faster to run:\n-\n-    yarn --cwd presto-main/src/main/resources/webapp/src run package\n-\n-To simplify iteration, you can also run in `watch` mode, which automatically re-compiles when changes to source files are detected:\n-\n-    yarn --cwd presto-main/src/main/resources/webapp/src run watch\n-\n-To iterate quickly, simply re-build the project in IntelliJ after packaging is complete. Project resources will be hot-reloaded and changes are reflected on browser refresh.\n-\n-## Writing and Building Documentation\n-\n-More information about the documentation process can be found in the\n-[README file in presto-docs](./presto-docs/README.md).\n+Information about the development process can be found in the [](./DEVELOPMENT.md).", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcyNDYyOQ==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r467724629", "bodyText": "Thanks", "author": "kokosing", "createdAt": "2020-08-10T07:17:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMTM5NA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0MTcwOQ==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r470541709", "bodyText": "s/Avoid using/Do not use", "author": "losipiuk", "createdAt": "2020-08-14T10:22:39Z", "path": "DEVELOPMENT.md", "diffHunk": "@@ -10,6 +10,11 @@ We recommend you use IntelliJ as your IDE. The code style template for the proje\n * Ensure that all files have the appropriate license header; you can generate the license by running `mvn license:format`.\n * Consider using String formatting (printf style formatting using the Java `Formatter` class): `format(\"Session property %s is invalid: %s\", name, value)` (note that `format()` should always be statically imported). Sometimes, if you only need to append something, consider using the `+` operator.\n * Avoid using the ternary operator except for trivial expressions.\n+* It is allowed to declare public members in private inner classes if they are part of their API.\n+* Avoid using mocking libraries like Mockito. These libraries encourage testing specific call sequences,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg4ODc4MQ==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r473888781", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Information about the development process can be found in the [DEVELOPMENT](./DEVELOPMENT.md).\n          \n          \n            \n            See [DEVELOPMENT](./DEVELOPMENT.md) for information about code style, development process & guidelines.", "author": "findepi", "createdAt": "2020-08-20T11:06:16Z", "path": "README.md", "diffHunk": "@@ -85,59 +85,4 @@ In the sample configuration, the Hive connector is mounted in the `hive` catalog\n \n ## Development\n \n-### Code Style\n-\n-We recommend you use IntelliJ as your IDE. The code style template for the project can be found in the [codestyle](https://github.com/airlift/codestyle) repository along with our general programming and Java guidelines. In addition to those you should also adhere to the following:\n-\n-* Alphabetize sections in the documentation source files (both in the table of contents files and other regular documentation files). In general, alphabetize methods/variables/sections if such ordering already exists in the surrounding code.\n-* When appropriate, use the stream API. However, note that the stream implementation does not perform well so avoid using it in inner loops or otherwise performance sensitive sections.\n-* Categorize errors when throwing exceptions. For example, PrestoException takes an error code as an argument, `PrestoException(HIVE_TOO_MANY_OPEN_PARTITIONS)`. This categorization lets you generate reports so you can monitor the frequency of various failures.\n-* Ensure that all files have the appropriate license header; you can generate the license by running `mvn license:format`.\n-* Consider using String formatting (printf style formatting using the Java `Formatter` class): `format(\"Session property %s is invalid: %s\", name, value)` (note that `format()` should always be statically imported). Sometimes, if you only need to append something, consider using the `+` operator.\n-* Avoid using the ternary operator except for trivial expressions.\n-* Use an assertion from Airlift's `Assertions` class if there is one that covers your case rather than writing the assertion by hand. Over time we may move over to more fluent assertions like AssertJ.\n-* When writing a Git commit message, follow these [guidelines](https://chris.beams.io/posts/git-commit/).\n-\n-### Additional IDE configuration\n-\n-When using IntelliJ to develop Presto, we recommend starting with all of the default inspections,\n-with some modifications.\n-\n-Enable the following inspections:\n-\n-- ``Java | Internationalization | Implicit usage of platform's default charset``,\n-- ``Java | Control flow issues | Redundant 'else'`` (including ``Report when there are no more statements after the 'if' statement`` option),\n-- ``Java | Class structure | Utility class is not 'final'``,\n-- ``Java | Class structure | Utility class with 'public' constructor``,\n-- ``Java | Class structure | Utility class without 'private' constructor``.\n-\n-Disable the following inspections:\n-\n-- ``Java | Performance | Call to 'Arrays.asList()' with too few arguments``,\n-- ``Java | Abstraction issues | 'Optional' used as field or parameter type``.\n-\n-Enable errorprone ([Error Prone Installation#IDEA](https://errorprone.info/docs/installation#intellij-idea)):\n-- Install ``Error Prone Compiler`` plugin from marketplace,\n-- In ``Java Compiler`` tab, select ``Javac with error-prone`` as the compiler,\n-- Update ``Additional command line parameters`` with ``-XepExcludedPaths:.*/target/generated-(|test-)sources/.* -XepDisableAllChecks -Xep:MissingOverride:ERROR ......`` (for current recommended list of command line parameters, see the top level ``pom.xml``, the definition of the ``errorprone-compiler-presto`` profile.\n-\n-### Building the Web UI\n-\n-The Presto Web UI is composed of several React components and is written in JSX and ES6. This source code is compiled and packaged into browser-compatible Javascript, which is then checked in to the Presto source code (in the `dist` folder). You must have [Node.js](https://nodejs.org/en/download/) and [Yarn](https://yarnpkg.com/en/) installed to execute these commands. To update this folder after making changes, simply run:\n-\n-    yarn --cwd presto-main/src/main/resources/webapp/src install\n-\n-If no Javascript dependencies have changed (i.e., no changes to `package.json`), it is faster to run:\n-\n-    yarn --cwd presto-main/src/main/resources/webapp/src run package\n-\n-To simplify iteration, you can also run in `watch` mode, which automatically re-compiles when changes to source files are detected:\n-\n-    yarn --cwd presto-main/src/main/resources/webapp/src run watch\n-\n-To iterate quickly, simply re-build the project in IntelliJ after packaging is complete. Project resources will be hot-reloaded and changes are reflected on browser refresh.\n-\n-### Writing and Building Documentation\n-\n-More information about the documentation process can be found in the\n-[README file in presto-docs](./presto-docs/README.md).\n+Information about the development process can be found in the [DEVELOPMENT](./DEVELOPMENT.md).", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg4OTA2OQ==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r473889069", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * It is suggested to declare public members in private inner classes if they are part of their API.\n          \n          \n            \n            * It is suggested to declare members in private inner classes as public if they are part of the class API.", "author": "findepi", "createdAt": "2020-08-20T11:06:52Z", "path": "DEVELOPMENT.md", "diffHunk": "@@ -10,7 +10,15 @@ We recommend you use IntelliJ as your IDE. The code style template for the proje\n * Ensure that all files have the appropriate license header; you can generate the license by running `mvn license:format`.\n * Consider using String formatting (printf style formatting using the Java `Formatter` class): `format(\"Session property %s is invalid: %s\", name, value)` (note that `format()` should always be statically imported). Sometimes, if you only need to append something, consider using the `+` operator.\n * Avoid using the ternary operator except for trivial expressions.\n+* It is suggested to declare public members in private inner classes if they are part of their API.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5MDAxOQ==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r473890019", "bodyText": "indent\nsmall rewording\n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Do not use mocking libraries like Mockito. These libraries encourage testing specific call sequences,\n          \n          \n            \n            interactions, and other internal behavior, which leads to fragile tests.\n          \n          \n            \n            They also make it possible to mock complex interfaces or classes, which hides the fact that these classes are not (easily) testable.\n          \n          \n            \n            We prefer to write mocks by hand, which forces code to be written in a certain testable style.\n          \n          \n            \n            * Do not use mocking libraries. These libraries encourage testing specific call sequences,\n          \n          \n            \n              interactions, and other internal behavior, which we believe leads to fragile tests.\n          \n          \n            \n              They also make it possible to mock complex interfaces or classes, which hides the fact that these classes are not \n          \n          \n            \n              (easily) testable.\n          \n          \n            \n              We prefer to write mocks by hand, which forces code to be written in a certain testable style.", "author": "findepi", "createdAt": "2020-08-20T11:08:29Z", "path": "DEVELOPMENT.md", "diffHunk": "@@ -10,7 +10,15 @@ We recommend you use IntelliJ as your IDE. The code style template for the proje\n * Ensure that all files have the appropriate license header; you can generate the license by running `mvn license:format`.\n * Consider using String formatting (printf style formatting using the Java `Formatter` class): `format(\"Session property %s is invalid: %s\", name, value)` (note that `format()` should always be statically imported). Sometimes, if you only need to append something, consider using the `+` operator.\n * Avoid using the ternary operator except for trivial expressions.\n+* It is suggested to declare public members in private inner classes if they are part of their API.\n+* Do not use mocking libraries like Mockito. These libraries encourage testing specific call sequences,\n+interactions, and other internal behavior, which leads to fragile tests.\n+They also make it possible to mock complex interfaces or classes, which hides the fact that these classes are not (easily) testable.\n+We prefer to write mocks by hand, which forces code to be written in a certain testable style.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTQxMQ==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r479811411", "bodyText": "string format can be crazy slow, so should not be used in performance critical sections of code.", "author": "dain", "createdAt": "2020-08-30T20:19:56Z", "path": "DEVELOPMENT.md", "diffHunk": "@@ -0,0 +1,67 @@\n+## Development\n+\n+### Code Style\n+\n+We recommend you use IntelliJ as your IDE. The code style template for the project can be found in the [codestyle](https://github.com/airlift/codestyle) repository along with our general programming and Java guidelines. In addition to those you should also adhere to the following:\n+\n+* Alphabetize sections in the documentation source files (both in the table of contents files and other regular documentation files). In general, alphabetize methods/variables/sections if such ordering already exists in the surrounding code.\n+* When appropriate, use the stream API. However, note that the stream implementation does not perform well so avoid using it in inner loops or otherwise performance sensitive sections.\n+* Categorize errors when throwing exceptions. For example, PrestoException takes an error code as an argument, `PrestoException(HIVE_TOO_MANY_OPEN_PARTITIONS)`. This categorization lets you generate reports so you can monitor the frequency of various failures.\n+* Ensure that all files have the appropriate license header; you can generate the license by running `mvn license:format`.\n+* Consider using String formatting (printf style formatting using the Java `Formatter` class): `format(\"Session property %s is invalid: %s\", name, value)` (note that `format()` should always be statically imported). Sometimes, if you only need to append something, consider using the `+` operator.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk3ODAyNA==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r479978024", "bodyText": "added.", "author": "kokosing", "createdAt": "2020-08-31T08:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTQxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTcxMA==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r479811710", "bodyText": "Developers should read the development section of the website, which covers thing like development philosophy and contribution process https://prestosql.io/development/", "author": "dain", "createdAt": "2020-08-30T20:23:02Z", "path": "DEVELOPMENT.md", "diffHunk": "@@ -0,0 +1,67 @@\n+## Development", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk3ODA5NA==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r479978094", "bodyText": "added", "author": "kokosing", "createdAt": "2020-08-31T08:31:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTkxNA==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r479811914", "bodyText": "I there an ordering to this section list most important to least, or grouped by category?", "author": "dain", "createdAt": "2020-08-30T20:25:19Z", "path": "DEVELOPMENT.md", "diffHunk": "@@ -0,0 +1,67 @@\n+## Development\n+\n+### Code Style\n+\n+We recommend you use IntelliJ as your IDE. The code style template for the project can be found in the [codestyle](https://github.com/airlift/codestyle) repository along with our general programming and Java guidelines. In addition to those you should also adhere to the following:\n+\n+* Alphabetize sections in the documentation source files (both in the table of contents files and other regular documentation files). In general, alphabetize methods/variables/sections if such ordering already exists in the surrounding code.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk3NzAyMw==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r479977023", "bodyText": "Not yet.", "author": "kokosing", "createdAt": "2020-08-31T08:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NzczNA==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r480287734", "bodyText": "I didn't realize that most of this was moved from somewhere else. You don't need to deal with the organization.", "author": "dain", "createdAt": "2020-08-31T17:46:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjA5Mw==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r479812093", "bodyText": "We should mention somewhere: no abbreviations, slang or inside jokes as this make is harder for non-native english speaker to understand the code.", "author": "dain", "createdAt": "2020-08-30T20:27:24Z", "path": "DEVELOPMENT.md", "diffHunk": "@@ -0,0 +1,67 @@\n+## Development\n+\n+### Code Style", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk3NzM0OA==", "url": "https://github.com/trinodb/trino/pull/4699#discussion_r479977348", "bodyText": "Nice, thanks!", "author": "kokosing", "createdAt": "2020-08-31T08:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjA5Mw=="}], "type": "inlineReview"}, {"oid": "79f2cd21230a2a3e95f94d0311df524a8deef34e", "url": "https://github.com/trinodb/trino/commit/79f2cd21230a2a3e95f94d0311df524a8deef34e", "message": "Put writing and building docs under Development section", "committedDate": "2020-08-31T08:31:58Z", "type": "commit"}, {"oid": "91edeeee42abd55b660e821406a992e7fcad4584", "url": "https://github.com/trinodb/trino/commit/91edeeee42abd55b660e821406a992e7fcad4584", "message": "Move Development section to separate file\n\nMost of the people that go through README.md file are not interested\nabout participating in project but more about using this.", "committedDate": "2020-08-31T08:31:58Z", "type": "commit"}, {"oid": "afd208438a55b7c31d346409baa112e24f8e5288", "url": "https://github.com/trinodb/trino/commit/afd208438a55b7c31d346409baa112e24f8e5288", "message": "Update development practices\n\nAddress:\n - Inline codestyle notes from wiki\n - Immutable collections and Java 9 unmodifiable collections\n - using var\n - stress keeping good quality of test code\n - no abbrevations, slang or inside jokes\n - mention https://prestosql.io/development/", "committedDate": "2020-08-31T10:05:15Z", "type": "commit"}, {"oid": "afd208438a55b7c31d346409baa112e24f8e5288", "url": "https://github.com/trinodb/trino/commit/afd208438a55b7c31d346409baa112e24f8e5288", "message": "Update development practices\n\nAddress:\n - Inline codestyle notes from wiki\n - Immutable collections and Java 9 unmodifiable collections\n - using var\n - stress keeping good quality of test code\n - no abbrevations, slang or inside jokes\n - mention https://prestosql.io/development/", "committedDate": "2020-08-31T10:05:15Z", "type": "forcePushed"}]}