{"pr_number": 3685, "pr_title": "Add presto-ml doc", "pr_createdAt": "2020-05-09T12:57:38Z", "pr_url": "https://github.com/trinodb/trino/pull/3685", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NDE4Mg==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423354182", "bodyText": "same length required as title", "author": "mosabua", "createdAt": "2020-05-11T22:23:39Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NDI1Ng==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423354256", "bodyText": "length", "author": "mosabua", "createdAt": "2020-05-11T22:23:52Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NDQ2NQ==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423354465", "bodyText": "remove \"in Presto\"", "author": "mosabua", "createdAt": "2020-05-11T22:24:21Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NDY5Ng==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423354696", "bodyText": "It enables you to train", "author": "mosabua", "createdAt": "2020-05-11T22:24:59Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NTA4NA==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423355084", "bodyText": "should it be \"classifiers and regressors\" or is an article missing earlier in this sentence?", "author": "mosabua", "createdAt": "2020-05-11T22:25:47Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NTQ2NQ==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423355465", "bodyText": "The machine learning functions are not optimized for distributed processing. The capability to train large data sets is limited by this execution of the final training on a single instance.", "author": "mosabua", "createdAt": "2020-05-11T22:26:49Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NjA0Mw==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423356043", "bodyText": "Also ... ideally keep it to 80 char line length", "author": "mosabua", "createdAt": "2020-05-11T22:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NTQ2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NjI5Mg==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423356292", "bodyText": "empty line after this", "author": "mosabua", "createdAt": "2020-05-11T22:28:55Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1NjUyMQ==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423356521", "bodyText": "technique,", "author": "mosabua", "createdAt": "2020-05-11T22:29:32Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1ODAwOQ==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423358009", "bodyText": "a An ?", "author": "mosabua", "createdAt": "2020-05-11T22:33:21Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1ODYyOQ==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423358629", "bodyText": "In Presto, a feature vector is represented as a map-type value, whose key is an index of each feature, so that it can express a sparse vector.", "author": "mosabua", "createdAt": "2020-05-11T22:35:02Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1ODcyMw==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423358723", "bodyText": "Remove \"in Presto\"", "author": "mosabua", "createdAt": "2020-05-11T22:35:15Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1ODc4Nw==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423358787", "bodyText": "map-type", "author": "mosabua", "createdAt": "2020-05-11T22:35:26Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1OTkxOQ==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423359919", "bodyText": "Confusing sentence.. maybe\nThe interface looks similar to the construction of the SVM model from the sequence of pairs of labels and features implemented in Teradata Aster or BigQuery ML.", "author": "mosabua", "createdAt": "2020-05-11T22:38:26Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MDUxMw==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423360513", "bodyText": "would it make sense to break this in multiple lines?\nlearn_classifier(species,\n                 features(sepal_length, sepal_width, petal_length, petal_width)\n                 )", "author": "mosabua", "createdAt": "2020-05-11T22:40:11Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MTU4Mw==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423361583", "bodyText": "Dont use \"For now\" and \"we\"\nThe trained model can not be saved natively, and needs to be passed in the format of a nested query::", "author": "mosabua", "createdAt": "2020-05-11T22:43:17Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MTcyNA==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423361724", "bodyText": "As a result you need to run the training process..", "author": "mosabua", "createdAt": "2020-05-11T22:43:44Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MjIzNg==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423362236", "bodyText": "You can use learn_libsvm_classifier to control the internal parameters of the model.", "author": "mosabua", "createdAt": "2020-05-11T22:45:07Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MjM3Mg==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423362372", "bodyText": "problem,", "author": "mosabua", "createdAt": "2020-05-11T22:45:28Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MjQyNw==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423362427", "bodyText": "values ?", "author": "mosabua", "createdAt": "2020-05-11T22:45:39Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MjU1NQ==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423362555", "bodyText": "only use ::", "author": "mosabua", "createdAt": "2020-05-11T22:46:01Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MjYzMA==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423362630", "bodyText": "same .. just ::", "author": "mosabua", "createdAt": "2020-05-11T22:46:14Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MjcwMA==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423362700", "bodyText": "remove \"also\"", "author": "mosabua", "createdAt": "2020-05-11T22:46:28Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MjgxMQ==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423362811", "bodyText": "remove \"flexibly\"", "author": "mosabua", "createdAt": "2020-05-11T22:46:49Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+:func:`learn_libsvm_regressor` provides you a way to control the training process flexibly.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzE1MA==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423363150", "bodyText": "model, trained with..", "author": "mosabua", "createdAt": "2020-05-11T22:47:50Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+:func:`learn_libsvm_regressor` provides you a way to control the training process flexibly.\n+\n+Machine Learning Functions\n+--------------------------\n+\n+.. function:: features(double, ...) -> map(bigint, double)\n+\n+    Returns the map representing the feature vector.\n+\n+.. function:: learn_classifier(label, features) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzIzMQ==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423363231", "bodyText": "model, trained", "author": "mosabua", "createdAt": "2020-05-11T22:48:01Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+:func:`learn_libsvm_regressor` provides you a way to control the training process flexibly.\n+\n+Machine Learning Functions\n+--------------------------\n+\n+.. function:: features(double, ...) -> map(bigint, double)\n+\n+    Returns the map representing the feature vector.\n+\n+.. function:: learn_classifier(label, features) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+\n+.. function:: learn_libsvm_classifier(label, features, params) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzMyMg==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423363322", "bodyText": "parameters", "author": "mosabua", "createdAt": "2020-05-11T22:48:18Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+:func:`learn_libsvm_regressor` provides you a way to control the training process flexibly.\n+\n+Machine Learning Functions\n+--------------------------\n+\n+.. function:: features(double, ...) -> map(bigint, double)\n+\n+    Returns the map representing the feature vector.\n+\n+.. function:: learn_classifier(label, features) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+\n+.. function:: learn_libsvm_classifier(label, features, params) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+    You can control the training process by libsvm params.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzQyMA==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423363420", "bodyText": "model, trained...", "author": "mosabua", "createdAt": "2020-05-11T22:48:35Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+:func:`learn_libsvm_regressor` provides you a way to control the training process flexibly.\n+\n+Machine Learning Functions\n+--------------------------\n+\n+.. function:: features(double, ...) -> map(bigint, double)\n+\n+    Returns the map representing the feature vector.\n+\n+.. function:: learn_classifier(label, features) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+\n+.. function:: learn_libsvm_classifier(label, features, params) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+    You can control the training process by libsvm params.\n+\n+.. function:: classify(features, model) -> label\n+\n+    Returns a label predicted by the given classifier SVM model.\n+\n+.. function:: learn_regressor(target, features) -> Regressor\n+\n+    Returns an SVM-based regressor model trained with the given target and feature data sets.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzUxMA==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423363510", "bodyText": "model, trained..", "author": "mosabua", "createdAt": "2020-05-11T22:48:52Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+:func:`learn_libsvm_regressor` provides you a way to control the training process flexibly.\n+\n+Machine Learning Functions\n+--------------------------\n+\n+.. function:: features(double, ...) -> map(bigint, double)\n+\n+    Returns the map representing the feature vector.\n+\n+.. function:: learn_classifier(label, features) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+\n+.. function:: learn_libsvm_classifier(label, features, params) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+    You can control the training process by libsvm params.\n+\n+.. function:: classify(features, model) -> label\n+\n+    Returns a label predicted by the given classifier SVM model.\n+\n+.. function:: learn_regressor(target, features) -> Regressor\n+\n+    Returns an SVM-based regressor model trained with the given target and feature data sets.\n+\n+.. function:: learn_libsvm_regressor(target, features, params) -> Regressor\n+\n+    Returns an SVM-based regressor model trained with the given target and feature data sets.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2MzU3Nw==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423363577", "bodyText": "parameters.", "author": "mosabua", "createdAt": "2020-05-11T22:49:03Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+:func:`learn_libsvm_regressor` provides you a way to control the training process flexibly.\n+\n+Machine Learning Functions\n+--------------------------\n+\n+.. function:: features(double, ...) -> map(bigint, double)\n+\n+    Returns the map representing the feature vector.\n+\n+.. function:: learn_classifier(label, features) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+\n+.. function:: learn_libsvm_classifier(label, features, params) -> Classifier\n+\n+    Returns an SVM-based classifier model trained with the given label and feature data sets.\n+    You can control the training process by libsvm params.\n+\n+.. function:: classify(features, model) -> label\n+\n+    Returns a label predicted by the given classifier SVM model.\n+\n+.. function:: learn_regressor(target, features) -> Regressor\n+\n+    Returns an SVM-based regressor model trained with the given target and feature data sets.\n+\n+.. function:: learn_libsvm_regressor(target, features, params) -> Regressor\n+\n+    Returns an SVM-based regressor model trained with the given target and feature data sets.\n+    You can control the training process by libsvm params.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM2NDA1Nw==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r423364057", "bodyText": "All these functions should be added to the index as well. https://github.com/prestosql/presto/blob/master/presto-docs/src/main/sphinx/functions/list.rst", "author": "mosabua", "createdAt": "2020-05-11T22:50:36Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,151 @@\n+===================\n+Machine Learning Functions\n+===================\n+\n+The machine learning plugin in Presto provides machine learning functionality\n+as an aggregation function. It enables us to train Support Vector Machine (SVM)\n+based classifier and regressor for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+  These machine learning functions are not fully optimized in a distributed manner.\n+  Since the final training process is executed in a single instance, it has a limited capability to train the enormous scale data for now.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+An N-dimensional vector whose elements are numerical values. In Presto, feature\n+vector is represented as a map type value whose key is an index of each\n+feature so that it is capable of expressing a sparse vector.\n+Since classifiers and regressors in Presto can recognize the\n+map type feature vector, there is a function to construct the feature\n+from the existing numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks close to what in\n+Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_. :func:`learn_classifier` constructs the SVM\n+model from the sequence of pairs of labels and features::\n+\n+    SELECT\n+      learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width))\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model. For now, we\n+cannot save the model natively. It needs to be passed in the format of nested query.::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+That means we need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_. If you want to\n+control the internal parameters of the model thoroughly, :func:`learn_libsvm_classifier` would be helpful.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem predicting continuous\n+value, unlike the classification problem. The target must be a numerical value that can\n+be described as :ref:`double`::\n+\n+The following code shows the creation of the model predicting ``sepal_length``\n+from the other 3 features.::\n+\n+    SELECT\n+      learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+    FROM\n+      iris\n+\n+The way to use the model is similar to the classification case.::\n+\n+    SELECT\n+      regress(features(3, 5.1, 1.8), model) predicted_target\n+    FROM (\n+      SELECT\n+        learn_regressor(sepal_length, features(sepal_width, petal_length, petal_width)) as model\n+      FROM iris\n+    ) t;\n+\n+.. code-block:: none\n+\n+     predicted_target\n+    -------------------\n+     6.407376822560477\n+\n+Internally, the model is also trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+:func:`learn_libsvm_regressor` provides you a way to control the training process flexibly.\n+\n+Machine Learning Functions\n+--------------------------", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5MTk5Mw==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r425791993", "bodyText": "I suppose functions/list should be bottom. Could you move this line to before functions/list? (cc: @mosabua)\nOtherwise, the generated page will be like this.", "author": "ebyhr", "createdAt": "2020-05-15T13:13:12Z", "path": "presto-docs/src/main/sphinx/functions.rst", "diffHunk": "@@ -42,3 +42,4 @@ If you are looking for more information about a specific function or operator,\n     functions/session\n     functions/teradata\n     functions/list\n+    functions/ml", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5Mzk2Mg==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r425893962", "bodyText": "yes. Move up please", "author": "mosabua", "createdAt": "2020-05-15T15:52:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5MTk5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5MzA4OA==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r425793088", "bodyText": "CI failured by this line.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            be described as :ref:`double`::\n          \n          \n            \n            be described as ``double``.", "author": "ebyhr", "createdAt": "2020-05-15T13:15:02Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,158 @@\n+==========================\n+Machine Learning Functions\n+==========================\n+\n+The machine learning plugin provides machine learning functionality\n+as an aggregation function. It enables you to train Support Vector Machine (SVM)\n+based classifiers and regressors for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+\n+  The machine learning functions are not optimized for distributed processing.\n+  The capability to train large data sets is limited by this execution of the\n+  final training on a single instance.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique, especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+A N-dimensional vector whose elements are numerical values. In Presto, a\n+feature vector is represented as a map-type value, whose key is an index\n+of each feature, so that it can express a sparse vector.\n+Since classifiers and regressors can recognize the map-type feature\n+vector, there is a function to construct the feature from the existing\n+numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks similar to the\n+construction of the SVM model from the sequence of pairs of labels and features\n+implemented in Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_.\n+The function to train a classification model looks like as follows::\n+\n+    SELECT\n+      learn_classifier(\n+        species,\n+        features(sepal_length, sepal_width, petal_length, petal_width)\n+      )\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model.\n+The trained model can not be saved natively, and needs to be passed in\n+the format of a nested query::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+As a result you need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+You can use :func:`learn_libsvm_classifier` to control the internal parameters of the model.\n+\n+Regression\n+-----------\n+\n+Regression is another type of supervised learning problem, predicting continuous\n+value, unlike the classification problem. The target must be numerical values that can\n+be described as :ref:`double`::", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyMjkwNw==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r426322907", "bodyText": "Oh, good catch. Will fix.", "author": "Lewuathe", "createdAt": "2020-05-18T00:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5MzA4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5Mzk3Nw==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r425793977", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Regression\n          \n          \n            \n            -----------\n          \n          \n            \n            Regression\n          \n          \n            \n            ----------", "author": "ebyhr", "createdAt": "2020-05-15T13:16:24Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,158 @@\n+==========================\n+Machine Learning Functions\n+==========================\n+\n+The machine learning plugin provides machine learning functionality\n+as an aggregation function. It enables you to train Support Vector Machine (SVM)\n+based classifiers and regressors for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+\n+  The machine learning functions are not optimized for distributed processing.\n+  The capability to train large data sets is limited by this execution of the\n+  final training on a single instance.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique, especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+A N-dimensional vector whose elements are numerical values. In Presto, a\n+feature vector is represented as a map-type value, whose key is an index\n+of each feature, so that it can express a sparse vector.\n+Since classifiers and regressors can recognize the map-type feature\n+vector, there is a function to construct the feature from the existing\n+numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------\n+\n+Classification is a type of supervised learning problem to predict the distinct\n+label from the given feature vector. The interface looks similar to the\n+construction of the SVM model from the sequence of pairs of labels and features\n+implemented in Teradata Aster or `BigQuery ML <https://cloud.google.com/bigquery-ml/docs/bigqueryml-intro>`_.\n+The function to train a classification model looks like as follows::\n+\n+    SELECT\n+      learn_classifier(\n+        species,\n+        features(sepal_length, sepal_width, petal_length, petal_width)\n+      )\n+    FROM\n+      iris\n+\n+It returns the trained model in a serialized format.\n+\n+.. code-block:: none\n+\n+                          model\n+    -------------------------------------------------\n+     3c 43 6c 61 73 73 69 66 69 65 72 28 76 61 72 63\n+     68 61 72 29 3e\n+\n+:func:`classify` returns the predicted label by using the trained model.\n+The trained model can not be saved natively, and needs to be passed in\n+the format of a nested query::\n+\n+    SELECT\n+      classify(features(5.9, 3, 5.1, 1.8), model) predicted_label\n+    FROM (\n+      SELECT\n+        learn_classifier(species, features(sepal_length, sepal_width, petal_length, petal_width)) model\n+      FROM\n+        iris\n+    ) t\n+\n+.. code-block:: none\n+\n+     predicted_label\n+    -----------------\n+     Iris-virginica\n+\n+As a result you need to run the training process at the same time when predicting values.\n+Internally, the model is trained by `libsvm <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_.\n+You can use :func:`learn_libsvm_classifier` to control the internal parameters of the model.\n+\n+Regression\n+-----------", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5NDExNg==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r425794116", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Classification\n          \n          \n            \n            ---------------\n          \n          \n            \n            Classification\n          \n          \n            \n            --------------", "author": "ebyhr", "createdAt": "2020-05-15T13:16:38Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,158 @@\n+==========================\n+Machine Learning Functions\n+==========================\n+\n+The machine learning plugin provides machine learning functionality\n+as an aggregation function. It enables you to train Support Vector Machine (SVM)\n+based classifiers and regressors for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+\n+  The machine learning functions are not optimized for distributed processing.\n+  The capability to train large data sets is limited by this execution of the\n+  final training on a single instance.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique, especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+A N-dimensional vector whose elements are numerical values. In Presto, a\n+feature vector is represented as a map-type value, whose key is an index\n+of each feature, so that it can express a sparse vector.\n+Since classifiers and regressors can recognize the map-type feature\n+vector, there is a function to construct the feature from the existing\n+numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;\n+\n+.. code-block:: none\n+\n+           features\n+    -----------------------\n+     {0=1.0, 1=2.0, 2=3.0}\n+\n+The output from :func:`features` can be directly passed to ML functions.\n+\n+Classification\n+---------------", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMjg1NQ==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r425802855", "bodyText": "Some other queries are missing as of column alias and following ;. Could you add it to be consistent in this page?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                SELECT features(1.0, 2.0, 3.0) features;\n          \n          \n            \n                SELECT features(1.0, 2.0, 3.0) as features;", "author": "ebyhr", "createdAt": "2020-05-15T13:30:11Z", "path": "presto-docs/src/main/sphinx/functions/ml.rst", "diffHunk": "@@ -0,0 +1,158 @@\n+==========================\n+Machine Learning Functions\n+==========================\n+\n+The machine learning plugin provides machine learning functionality\n+as an aggregation function. It enables you to train Support Vector Machine (SVM)\n+based classifiers and regressors for the supervised learning problems.\n+\n+.. contents::\n+    :local:\n+    :backlinks: none\n+    :depth: 1\n+\n+.. note::\n+\n+  The machine learning functions are not optimized for distributed processing.\n+  The capability to train large data sets is limited by this execution of the\n+  final training on a single instance.\n+\n+Feature Vector\n+--------------\n+\n+To solve a problem with the machine learning technique, especially as a\n+supervised learning problem, it is necessary to represent the data set\n+with the sequence of pairs of labels and feature vector. A label is a\n+target value you want to predict from the unseen feature and a feature is a\n+A N-dimensional vector whose elements are numerical values. In Presto, a\n+feature vector is represented as a map-type value, whose key is an index\n+of each feature, so that it can express a sparse vector.\n+Since classifiers and regressors can recognize the map-type feature\n+vector, there is a function to construct the feature from the existing\n+numerical values, :func:`features`::\n+\n+    SELECT features(1.0, 2.0, 3.0) features;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5NDU0Mw==", "url": "https://github.com/trinodb/trino/pull/3685#discussion_r425894543", "bodyText": "or even better .. use AS since we try to standardize on uppercase keywords", "author": "mosabua", "createdAt": "2020-05-15T15:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMjg1NQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "754a2f2bb7c3ee7ab9e198e1bb2cf27d6565285a", "url": "https://github.com/trinodb/trino/commit/754a2f2bb7c3ee7ab9e198e1bb2cf27d6565285a", "message": "Add presto-ml doc", "committedDate": "2020-05-18T00:39:05Z", "type": "commit"}, {"oid": "754a2f2bb7c3ee7ab9e198e1bb2cf27d6565285a", "url": "https://github.com/trinodb/trino/commit/754a2f2bb7c3ee7ab9e198e1bb2cf27d6565285a", "message": "Add presto-ml doc", "committedDate": "2020-05-18T00:39:05Z", "type": "forcePushed"}]}