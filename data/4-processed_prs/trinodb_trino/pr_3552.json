{"pr_number": 3552, "pr_title": "Fix planning failure when LATERAL is used on left of join or without join", "pr_createdAt": "2020-04-26T21:25:06Z", "pr_url": "https://github.com/trinodb/trino/pull/3552", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwNTgyMQ==", "url": "https://github.com/trinodb/trino/pull/3552#discussion_r415405821", "bodyText": "would be also good to add catch-all visitNode to avoid being ashamed by NPE next time\nlike 034a787#diff-e7b6201f06648c5aa2d66f8e488cde68R145-R150 ;)", "author": "findepi", "createdAt": "2020-04-26T21:32:51Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -277,6 +277,12 @@ protected RelationPlan visitSampledRelation(SampledRelation node, Void context)\n         return new RelationPlan(planNode, analysis.getScope(node), subPlan.getFieldMappings());\n     }\n \n+    @Override", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwNzAxNg==", "url": "https://github.com/trinodb/trino/pull/3552#discussion_r415407016", "bodyText": "You could use this example failing query to show that not every LATERAL on right of join means \"correlated\":\nSELECT * FROM (VALUES 1) t(a), (SELECT * FROM LATERAL (SELECT a))\nAnd a test with LATERAL in the context of aliased relation\nSELECT * FROM LATERAL (VALUES 1) t(a)", "author": "kasiafi", "createdAt": "2020-04-26T21:39:33Z", "path": "presto-main/src/test/java/io/prestosql/sql/query/TestLateral.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.query;\n+\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+public class TestLateral\n+{\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        assertions = new QueryAssertions();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testUncorrelatedLateral()\n+    {\n+        assertions.assertQuery(\n+                \"SELECT * FROM LATERAL (VALUES 1, 2, 3)\",\n+                \"VALUES 1, 2, 3\");\n+\n+        assertions.assertQuery(\n+                \"SELECT * FROM LATERAL (VALUES 1), (VALUES 'a')\",\n+                \"VALUES (1, 'a')\");\n+\n+        assertions.assertQuery(\n+                \"SELECT * FROM LATERAL (VALUES 1) CROSS JOIN (VALUES 'a')\",\n+                \"VALUES (1, 'a')\");\n+    }", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQzNzIwMA==", "url": "https://github.com/trinodb/trino/pull/3552#discussion_r415437200", "bodyText": "not every LATERAL on right of join means \"correlated\":\nSELECT * FROM (VALUES 1) t(a), (SELECT * FROM LATERAL (SELECT a))\n\nThat one is technically not on the right side of a join, since it's inside a subquery. In fact, it fails with \"a cannot be resolved\", as the column is not in the scope of the subquery.", "author": "martint", "createdAt": "2020-04-27T00:22:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwNzAxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY1NDE2Ng==", "url": "https://github.com/trinodb/trino/pull/3552#discussion_r415654166", "bodyText": "That one is technically not on the right side of a join\n\nYes, I meant this example only for \"documentational\" reasons. Since we now support LATERAL in different contexts, it should be clear which contexts allow using correlated symbols and which don't. Precisely, that it is only possible if LATERAL is right of join, and not when LATERAL is contained inside right of join.", "author": "kasiafi", "createdAt": "2020-04-27T09:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwNzAxNg=="}], "type": "inlineReview"}, {"oid": "9bf3996d626d12b35ab1d8c727f2eebe3e49894f", "url": "https://github.com/trinodb/trino/commit/9bf3996d626d12b35ab1d8c727f2eebe3e49894f", "message": "Support LATERAL in left side of join or without join", "committedDate": "2020-04-27T17:02:25Z", "type": "commit"}, {"oid": "9bf3996d626d12b35ab1d8c727f2eebe3e49894f", "url": "https://github.com/trinodb/trino/commit/9bf3996d626d12b35ab1d8c727f2eebe3e49894f", "message": "Support LATERAL in left side of join or without join", "committedDate": "2020-04-27T17:02:25Z", "type": "forcePushed"}]}