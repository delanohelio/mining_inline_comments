{"pr_number": 5419, "pr_title": "Add JWK to JwtAuthenticator", "pr_createdAt": "2020-10-05T18:38:00Z", "pr_url": "https://github.com/trinodb/trino/pull/5419", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyNzA0NQ==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500627045", "bodyText": "Ec", "author": "lukasz-walkiewicz", "createdAt": "2020-10-06T22:16:21Z", "path": "presto-main/src/test/java/io/prestosql/server/security/jwt/TestJwkDecoder.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.security.jwt;\n+\n+import com.google.common.io.Resources;\n+import io.airlift.security.pem.PemReader;\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.Jws;\n+import io.jsonwebtoken.JwsHeader;\n+import io.jsonwebtoken.Jwts;\n+import io.jsonwebtoken.SignatureAlgorithm;\n+import io.jsonwebtoken.SigningKeyResolver;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.security.Key;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+import java.security.interfaces.RSAPublicKey;\n+import java.time.ZonedDateTime;\n+import java.util.Date;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static io.prestosql.server.security.jwt.JwkDecoder.decodeKeys;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestJwkDecoder\n+{\n+    @Test\n+    public void testReadRsaKeys()\n+    {\n+        Map<String, PublicKey> keys = decodeKeys(\"\" +\n+                \"{\\n\" +\n+                \"  \\\"keys\\\": [\\n\" +\n+                \"    {\\n\" +\n+                \"      \\\"e\\\": \\\"AQAB\\\",\\n\" +\n+                \"      \\\"n\\\": \\\"mvj-0waJ2owQlFWrlC06goLs9PcNehIzCF0QrkdsYZJXOsipcHCFlXBsgQIdTdLvlCzNI07jSYA-zggycYi96lfDX-FYv_CqC8dRLf9TBOPvUgCyFMCFNUTC69hsrEYMR_J79Wj0MIOffiVr6eX-AaCG3KhBMZMh15KCdn3uVrl9coQivy7bk2Uw-aUJ_b26C0gWYj1DnpO4UEEKBk1X-lpeUMh0B_XorqWeq0NYK2pN6CoEIh0UrzYKlGfdnMU1pJJCsNxMiha-Vw3qqxez6oytOV_AswlWvQc7TkSX6cHfqepNskQb7pGxpgQpy9sA34oIxB_S-O7VS7_h0Qh4vQ\\\",\\n\" +\n+                \"      \\\"alg\\\": \\\"RS256\\\",\\n\" +\n+                \"      \\\"use\\\": \\\"sig\\\",\\n\" +\n+                \"      \\\"kty\\\": \\\"RSA\\\",\\n\" +\n+                \"      \\\"kid\\\": \\\"2c6fa6f5950a7ce465fcf247aa0b094828ac952c\\\"\\n\" +\n+                \"    },\\n\" +\n+                \"    {\\n\" +\n+                \"      \\\"kid\\\": \\\"5effa76ef33ecb5e346bd512d7d89b30e47d8e98\\\",\\n\" +\n+                \"      \\\"alg\\\": \\\"RS256\\\",\\n\" +\n+                \"      \\\"n\\\": \\\"teG3wvigoU_KPbPAiEVERFmlGeHWPsnqbEk1pAhz69B0kGHJXU8l8tPHpTw0Gy_M9BJ5WAe9FvXL41xSFbqMGiJ7DIZ32ejlncrf2vGkMl26C5p8OOvuS6ThFjREUzWbV0sYtJL0nNjzmQNCQeb90tDQDZW229ZeUNlM2yN0QRisKlGFSK7uL8X0dRUbXnfgS6eI4mvSAK6tqq3n8IcPA0PxBr-R81rtdG70C2zxlPQ4Wp_MJzjb81d-RPdcYd64loOMhhHFbbfq2bTS9TSn_Y16lYA7gyRGSPhwcsdqOH2qqon7QOiF8gtrvztwd9TpxecPd7mleGGWVFlN6pTQYQ\\\",\\n\" +\n+                \"      \\\"kty\\\": \\\"RSA\\\",\\n\" +\n+                \"      \\\"e\\\": \\\"AQAB\\\",\\n\" +\n+                \"      \\\"use\\\": \\\"sig\\\"\\n\" +\n+                \"    }\\n\" +\n+                \"  ]\\n\" +\n+                \"}\");\n+        assertEquals(keys.size(), 2);\n+        assertTrue(keys.containsKey(\"2c6fa6f5950a7ce465fcf247aa0b094828ac952c\"));\n+        assertTrue(keys.containsKey(\"5effa76ef33ecb5e346bd512d7d89b30e47d8e98\"));\n+    }\n+\n+    @Test\n+    public void testReadEeKey()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNTIwNQ==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500815205", "bodyText": "Where are those methods needed?", "author": "lukasz-walkiewicz", "createdAt": "2020-10-07T08:04:11Z", "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwtAuthenticatorSupportModule.java", "diffHunk": "@@ -29,10 +32,41 @@ protected void setup(Binder binder)\n         configBinder(binder).bindConfig(JwtAuthenticatorConfig.class);\n         install(installModuleIf(\n                 JwtAuthenticatorConfig.class,\n-                config -> config.getKeyFile().startsWith(\"https://\") || config.getKeyFile().startsWith(\"http://\"),\n-                jwkBinder -> {\n-                    httpClientBinder(jwkBinder)\n-                            .bindHttpClient(\"jwk\", null);\n-                }));\n+                JwtAuthenticatorSupportModule::isHttp,\n+                new JwkModule()));\n+        install(installModuleIf(\n+                JwtAuthenticatorConfig.class,\n+                config -> !isHttp(config),\n+                jwkBinder -> jwkBinder.bind(SigningKeyResolver.class).to(FileSigningKeyResolver.class).in(Scopes.SINGLETON)));\n+    }\n+\n+    private static boolean isHttp(JwtAuthenticatorConfig config)\n+    {\n+        return config.getKeyFile().startsWith(\"https://\") || config.getKeyFile().startsWith(\"http://\");\n+    }\n+\n+    private static class JwkModule\n+            implements Module\n+    {\n+        @Override\n+        public void configure(Binder binder)\n+        {\n+            binder.bind(SigningKeyResolver.class).to(JwkSigningKeyResolver.class).in(Scopes.SINGLETON);\n+            binder.bind(JwkService.class).in(Scopes.SINGLETON);\n+            httpClientBinder(binder)\n+                    .bindHttpClient(\"jwk\", ForJwk.class);\n+        }\n+\n+        @Override\n+        public int hashCode()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNTMzNQ==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500815335", "bodyText": "hashCode & equals", "author": "lukasz-walkiewicz", "createdAt": "2020-10-07T08:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNTIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2MDEyOA==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r501860128", "bodyText": "Yes they are needed.  This module can get added by both the web ui and the authentication system, so we need to tell Guice they are the same thing, otherwise you get a duplicate binding error.", "author": "dain", "createdAt": "2020-10-08T16:38:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNTIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwOTkyMA==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r501909920", "bodyText": "Please add a comment.", "author": "kokosing", "createdAt": "2020-10-08T17:59:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNTIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwMTgxNg==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500901816", "bodyText": "typo", "author": "kokosing", "createdAt": "2020-10-07T10:22:19Z", "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwkDecoder.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.security.jwt;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.json.JsonCodec;\n+import io.airlift.log.Logger;\n+\n+import java.math.BigInteger;\n+import java.security.PublicKey;\n+import java.security.interfaces.RSAPublicKey;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static java.util.Base64.getUrlDecoder;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class JwkDecoder\n+{\n+    private static final Logger log = Logger.get(JwkDecoder.class);\n+    private static final JsonCodec<Keys> KEYS_CODEC = JsonCodec.jsonCodec(Keys.class);\n+\n+    private JwkDecoder() {}\n+\n+    public static Map<String, PublicKey> decodeKeys(String jwkJson)\n+    {\n+        Keys keys = KEYS_CODEC.fromJson(jwkJson);\n+        return keys.getKeys().stream()\n+                .map(JwkDecoder::tyrDecodeRsaKey)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .collect(toImmutableMap(JwkRsaPublicKey::getKeyId, Function.identity()));\n+    }\n+\n+    public static Optional<JwkRsaPublicKey> tyrDecodeRsaKey(Map<String, String> properties)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwMzA1Ng==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500903056", "bodyText": "illegal state?", "author": "kokosing", "createdAt": "2020-10-07T10:24:28Z", "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwkService.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.security.jwt;\n+\n+import com.google.common.io.Closer;\n+import io.airlift.concurrent.Threads;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler.StringResponse;\n+import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.annotation.processing.Generated;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.security.PublicKey;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static io.prestosql.server.security.jwt.JwkDecoder.decodeKeys;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class JwkService\n+{\n+    private static final Logger log = Logger.get(JwkService.class);\n+\n+    private final URI address;\n+    private final HttpClient httpClient;\n+    private final Duration refreshDelay;\n+    private final AtomicReference<Map<String, PublicKey>> keys;\n+\n+    @Generated(\"this\")\n+    private Closer closer;\n+\n+    public JwkService(URI address, HttpClient httpClient, Duration refreshDelay)\n+    {\n+        this.address = requireNonNull(address, \"address is null\");\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n+        this.refreshDelay = requireNonNull(refreshDelay, \"refreshDelay is null\");\n+\n+        this.keys = new AtomicReference<>(fetchKeys());\n+    }\n+\n+    @PostConstruct\n+    public synchronized void start()\n+    {\n+        if (closer != null) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2MDUzMg==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r501860532", "bodyText": "Typically our start methods are idempotent, so if already started then it is \"ok\"", "author": "dain", "createdAt": "2020-10-08T16:39:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwMzA1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwMzEyMQ==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500903121", "bodyText": "static imports", "author": "kokosing", "createdAt": "2020-10-07T10:24:35Z", "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwkService.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.security.jwt;\n+\n+import com.google.common.io.Closer;\n+import io.airlift.concurrent.Threads;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler.StringResponse;\n+import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.annotation.processing.Generated;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.security.PublicKey;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static io.prestosql.server.security.jwt.JwkDecoder.decodeKeys;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class JwkService\n+{\n+    private static final Logger log = Logger.get(JwkService.class);\n+\n+    private final URI address;\n+    private final HttpClient httpClient;\n+    private final Duration refreshDelay;\n+    private final AtomicReference<Map<String, PublicKey>> keys;\n+\n+    @Generated(\"this\")\n+    private Closer closer;\n+\n+    public JwkService(URI address, HttpClient httpClient, Duration refreshDelay)\n+    {\n+        this.address = requireNonNull(address, \"address is null\");\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n+        this.refreshDelay = requireNonNull(refreshDelay, \"refreshDelay is null\");\n+\n+        this.keys = new AtomicReference<>(fetchKeys());\n+    }\n+\n+    @PostConstruct\n+    public synchronized void start()\n+    {\n+        if (closer != null) {\n+            return;\n+        }\n+        closer = Closer.create();\n+\n+        ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor(Threads.daemonThreadsNamed(\"JWK loader\"));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwMzcwNQ==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500903705", "bodyText": "illegal state?", "author": "kokosing", "createdAt": "2020-10-07T10:25:32Z", "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwkService.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.security.jwt;\n+\n+import com.google.common.io.Closer;\n+import io.airlift.concurrent.Threads;\n+import io.airlift.http.client.HttpClient;\n+import io.airlift.http.client.Request;\n+import io.airlift.http.client.StringResponseHandler.StringResponse;\n+import io.airlift.log.Logger;\n+import io.airlift.units.Duration;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import javax.annotation.processing.Generated;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.security.PublicKey;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.airlift.http.client.Request.Builder.prepareGet;\n+import static io.airlift.http.client.StringResponseHandler.createStringResponseHandler;\n+import static io.prestosql.server.security.jwt.JwkDecoder.decodeKeys;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class JwkService\n+{\n+    private static final Logger log = Logger.get(JwkService.class);\n+\n+    private final URI address;\n+    private final HttpClient httpClient;\n+    private final Duration refreshDelay;\n+    private final AtomicReference<Map<String, PublicKey>> keys;\n+\n+    @Generated(\"this\")\n+    private Closer closer;\n+\n+    public JwkService(URI address, HttpClient httpClient, Duration refreshDelay)\n+    {\n+        this.address = requireNonNull(address, \"address is null\");\n+        this.httpClient = requireNonNull(httpClient, \"httpClient is null\");\n+        this.refreshDelay = requireNonNull(refreshDelay, \"refreshDelay is null\");\n+\n+        this.keys = new AtomicReference<>(fetchKeys());\n+    }\n+\n+    @PostConstruct\n+    public synchronized void start()\n+    {\n+        if (closer != null) {\n+            return;\n+        }\n+        closer = Closer.create();\n+\n+        ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor(Threads.daemonThreadsNamed(\"JWK loader\"));\n+        closer.register(executorService::shutdownNow);\n+\n+        ScheduledFuture<?> refreshJob = executorService.scheduleWithFixedDelay(\n+                () -> {\n+                    try {\n+                        refreshKeys();\n+                    }\n+                    catch (Exception e) {\n+                        log.error(e, \"Error fetching JWK keys\");\n+                    }\n+                },\n+                refreshDelay.toMillis(),\n+                refreshDelay.toMillis(),\n+                TimeUnit.MILLISECONDS);\n+        closer.register(() -> refreshJob.cancel(true));\n+    }\n+\n+    @PreDestroy\n+    public synchronized void stop()\n+    {\n+        if (closer == null) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2MDYxOA==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r501860618", "bodyText": "same", "author": "dain", "createdAt": "2020-10-08T16:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwMzcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwOTUzMQ==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500909531", "bodyText": "why it named a file? maybe remote file?", "author": "kokosing", "createdAt": "2020-10-07T10:36:25Z", "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwkService.java", "diffHunk": "@@ -53,6 +54,12 @@\n     @Generated(\"this\")\n     private Closer closer;\n \n+    @Inject\n+    public JwkService(JwtAuthenticatorConfig config, @ForJwk HttpClient httpClient)\n+    {\n+        this(URI.create(config.getKeyFile()), httpClient, new Duration(15, TimeUnit.MINUTES));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2MTA3OA==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r501861078", "bodyText": "I am reusing the existing config properties.  So if you set the key file to a URL, we switch from actual files to JWK", "author": "dain", "createdAt": "2020-10-08T16:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkwOTUzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxNDQ4Mw==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r500914483", "bodyText": "It would be nice if that would be closeable.", "author": "kokosing", "createdAt": "2020-10-07T10:45:32Z", "path": "presto-main/src/test/java/io/prestosql/server/ui/TestWebUi.java", "diffHunk": "@@ -438,6 +459,45 @@ public void testJwtAuthenticator()\n         }\n     }\n \n+    @Test\n+    public void testJwtWithJwkAuthenticator()\n+            throws Exception\n+    {\n+        TestingHttpServer jwkServer = createTestingJwkServer();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzNzI3MQ==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r503637271", "bodyText": "Yes it would be nice", "author": "dain", "createdAt": "2020-10-13T02:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkxNDQ4Mw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc1MDcyNw==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r503750727", "bodyText": "installModuleIf takes otherwise parameter", "author": "kokosing", "createdAt": "2020-10-13T08:09:34Z", "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwtAuthenticatorSupportModule.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.server.security.jwt;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+import io.airlift.configuration.AbstractConfigurationAwareModule;\n+import io.jsonwebtoken.SigningKeyResolver;\n+\n+import static io.airlift.configuration.ConditionalModule.installModuleIf;\n+import static io.airlift.configuration.ConfigBinder.configBinder;\n+import static io.airlift.http.client.HttpClientBinder.httpClientBinder;\n+\n+public class JwtAuthenticatorSupportModule\n+        extends AbstractConfigurationAwareModule\n+{\n+    @Override\n+    protected void setup(Binder binder)\n+    {\n+        configBinder(binder).bindConfig(JwtAuthenticatorConfig.class);\n+        install(installModuleIf(\n+                JwtAuthenticatorConfig.class,\n+                JwtAuthenticatorSupportModule::isHttp,\n+                new JwkModule()));\n+        install(installModuleIf(", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5OTE3MA==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r504299170", "bodyText": "Thanks!  I didn't know about that.", "author": "dain", "createdAt": "2020-10-13T22:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc1MDcyNw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NTUwMQ==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r504475501", "bodyText": "fieldName = x", "author": "lukasz-walkiewicz", "createdAt": "2020-10-14T07:56:42Z", "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwkDecoder.java", "diffHunk": "@@ -88,6 +99,45 @@ private JwkDecoder() {}\n         return Optional.of(new JwkRsaPublicKey(keyId, exponent.get(), modulus.get()));\n     }\n \n+    public static Optional<JwkEcPublicKey> tryDecodeEcKey(String keyId, Map<String, String> properties)\n+    {\n+        // alg field is optional so not verified\n+        // use field is optional so not verified\n+\n+        String curveName = properties.get(\"crv\");\n+        if (Strings.isNullOrEmpty(curveName)) {\n+            log.error(\"JWK EC key %s does not contain the required curve field 'crv'\", keyId);\n+            return Optional.empty();\n+        }\n+        String encodedX = properties.get(\"x\");\n+        if (Strings.isNullOrEmpty(encodedX)) {\n+            log.error(\"JWK EC key %s does not contain the required x coordinate field 'x'\", keyId);\n+            return Optional.empty();\n+        }\n+        String encodedY = properties.get(\"y\");\n+        if (Strings.isNullOrEmpty(encodedY)) {\n+            log.error(\"JWK EC key %s does not contain the required y coordinate field 'y'\", keyId);\n+            return Optional.empty();\n+        }\n+\n+        Optional<ECParameterSpec> curve = EcCurve.tryGet(curveName);\n+        if (curve.isEmpty()) {\n+            log.error(\"JWK EC %s curve '%s' is not supported\", keyId, curveName);\n+            return Optional.empty();\n+        }\n+        Optional<BigInteger> x = decodeBigint(keyId, \"modulus\", encodedX);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NzExMA==", "url": "https://github.com/trinodb/trino/pull/5419#discussion_r504477110", "bodyText": "fieldName = y", "author": "lukasz-walkiewicz", "createdAt": "2020-10-14T07:59:13Z", "path": "presto-main/src/main/java/io/prestosql/server/security/jwt/JwkDecoder.java", "diffHunk": "@@ -88,6 +99,45 @@ private JwkDecoder() {}\n         return Optional.of(new JwkRsaPublicKey(keyId, exponent.get(), modulus.get()));\n     }\n \n+    public static Optional<JwkEcPublicKey> tryDecodeEcKey(String keyId, Map<String, String> properties)\n+    {\n+        // alg field is optional so not verified\n+        // use field is optional so not verified\n+\n+        String curveName = properties.get(\"crv\");\n+        if (Strings.isNullOrEmpty(curveName)) {\n+            log.error(\"JWK EC key %s does not contain the required curve field 'crv'\", keyId);\n+            return Optional.empty();\n+        }\n+        String encodedX = properties.get(\"x\");\n+        if (Strings.isNullOrEmpty(encodedX)) {\n+            log.error(\"JWK EC key %s does not contain the required x coordinate field 'x'\", keyId);\n+            return Optional.empty();\n+        }\n+        String encodedY = properties.get(\"y\");\n+        if (Strings.isNullOrEmpty(encodedY)) {\n+            log.error(\"JWK EC key %s does not contain the required y coordinate field 'y'\", keyId);\n+            return Optional.empty();\n+        }\n+\n+        Optional<ECParameterSpec> curve = EcCurve.tryGet(curveName);\n+        if (curve.isEmpty()) {\n+            log.error(\"JWK EC %s curve '%s' is not supported\", keyId, curveName);\n+            return Optional.empty();\n+        }\n+        Optional<BigInteger> x = decodeBigint(keyId, \"modulus\", encodedX);\n+        if (x.isEmpty()) {\n+            return Optional.empty();\n+        }\n+        Optional<BigInteger> y = decodeBigint(keyId, \"exponent\", encodedY);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f1e54e2acdc40e1a27524721b49893543b524354", "url": "https://github.com/trinodb/trino/commit/f1e54e2acdc40e1a27524721b49893543b524354", "message": "Move JWT to separate package", "committedDate": "2020-10-14T19:44:28Z", "type": "commit"}, {"oid": "0831797fb01e15d9fd71c1d909ee8b63461a1d0a", "url": "https://github.com/trinodb/trino/commit/0831797fb01e15d9fd71c1d909ee8b63461a1d0a", "message": "Extract file key loader from JWT authenticator", "committedDate": "2020-10-14T19:44:29Z", "type": "commit"}, {"oid": "ea1712681305be7179a665f20811e3cbffb731a0", "url": "https://github.com/trinodb/trino/commit/ea1712681305be7179a665f20811e3cbffb731a0", "message": "Add JWK service", "committedDate": "2020-10-14T19:44:29Z", "type": "commit"}, {"oid": "f68c017d02e29625be6282051d3facaa25431a1d", "url": "https://github.com/trinodb/trino/commit/f68c017d02e29625be6282051d3facaa25431a1d", "message": "Add JWK to JwtAuthenticator", "committedDate": "2020-10-14T19:44:29Z", "type": "commit"}, {"oid": "2b3b473967f0d4697dd8109a001700b9271815b3", "url": "https://github.com/trinodb/trino/commit/2b3b473967f0d4697dd8109a001700b9271815b3", "message": "Add JWK EC support", "committedDate": "2020-10-14T19:45:33Z", "type": "commit"}, {"oid": "2b3b473967f0d4697dd8109a001700b9271815b3", "url": "https://github.com/trinodb/trino/commit/2b3b473967f0d4697dd8109a001700b9271815b3", "message": "Add JWK EC support", "committedDate": "2020-10-14T19:45:33Z", "type": "forcePushed"}]}