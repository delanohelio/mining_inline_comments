{"pr_number": 4529, "pr_title": "Support parameter in LIMIT clause", "pr_createdAt": "2020-07-21T20:43:14Z", "pr_url": "https://github.com/trinodb/trino/pull/4529", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5MDU5MQ==", "url": "https://github.com/trinodb/trino/pull/4529#discussion_r458490591", "bodyText": "TYPE_MISMATCH is not an appropriate code for this error. Let's go with INVALID_ARGUMENTS", "author": "martint", "createdAt": "2020-07-22T02:05:07Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -2706,24 +2709,47 @@ private boolean analyzeLimit(FetchFirst node)\n             return node.isWithTies();\n         }\n \n-        private boolean analyzeLimit(Limit node)\n+        private boolean analyzeLimit(Limit node, Scope scope)\n         {\n-            if (node.getLimit().equalsIgnoreCase(\"all\")) {\n-                analysis.setLimit(node, OptionalLong.empty());\n+            OptionalLong rowCount;\n+            if (node.getRowCount() instanceof AllRows) {\n+                rowCount = OptionalLong.empty();\n+            }\n+            else if (node.getRowCount() instanceof LongLiteral) {\n+                rowCount = OptionalLong.of(((LongLiteral) node.getRowCount()).getValue());\n             }\n             else {\n-                long rowCount;\n-                try {\n-                    rowCount = Long.parseLong(node.getLimit());\n+                checkState(node.getRowCount() instanceof Parameter, \"unexpected LIMIT rowCount: \" + node.getRowCount().getClass().getSimpleName());\n+                if (analysis.isDescribe()) {\n+                    analyzeExpression(node.getRowCount(), scope);\n+                    analysis.addCoercion(node.getRowCount(), BIGINT, false);\n+                    rowCount = OptionalLong.empty();\n                 }\n-                catch (NumberFormatException e) {\n-                    throw semanticException(TYPE_MISMATCH, node, \"Invalid LIMIT row count: %s\", node.getLimit());\n-                }\n-                if (rowCount < 0) {\n-                    throw semanticException(NUMERIC_VALUE_OUT_OF_RANGE, node, \"LIMIT row count must be greater or equal to 0 (actual value: %s)\", rowCount);\n+                else {\n+                    // validate parameter index\n+                    analyzeExpression(node.getRowCount(), scope);\n+                    Expression providedValue = analysis.getParameters().get(NodeRef.of(node.getRowCount()));\n+                    try {\n+                        rowCount = OptionalLong.of((long) ExpressionInterpreter.evaluateConstantExpression(\n+                                providedValue,\n+                                BIGINT,\n+                                metadata,\n+                                session,\n+                                accessControl,\n+                                analysis.getParameters()));\n+                    }\n+                    catch (VerifyException e) {\n+                        throw semanticException(TYPE_MISMATCH, node, \"Non constant parameter value for LIMIT: %s\", providedValue);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5MDcwNQ==", "url": "https://github.com/trinodb/trino/pull/4529#discussion_r458490705", "bodyText": "What happened to this case?", "author": "martint", "createdAt": "2020-07-22T02:05:32Z", "path": "presto-main/src/test/java/io/prestosql/sql/analyzer/TestAnalyzer.java", "diffHunk": "@@ -513,13 +513,6 @@ public void testFetchFirstWithTiesMissingOrderBy()\n                 .hasErrorCode(MISSING_ORDER_BY);\n     }\n \n-    @Test\n-    public void testLimitInvalidRowCount()\n-    {\n-        assertFails(\"SELECT * FROM t1 LIMIT 987654321098765432109876543210\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3MDM4MQ==", "url": "https://github.com/trinodb/trino/pull/4529#discussion_r458570381", "bodyText": "It doesn't throw PrestoException any more.\nThe row count used to be fetched as text and analysed in the StatementAnalyzer. After this change, a LongLiteral is instantiated in AstBuilder, and ParsingException is thrown.\nSimilarly, negative values now fail in Parser.", "author": "kasiafi", "createdAt": "2020-07-22T06:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5MDcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5MTg1Nw==", "url": "https://github.com/trinodb/trino/pull/4529#discussion_r458491857", "bodyText": "We should do the same for FETCH FIRST and OFFSET, but this can be addressed in a separate PR", "author": "martint", "createdAt": "2020-07-22T02:10:05Z", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -164,8 +164,14 @@ queryNoWith:\n       queryTerm\n       (ORDER BY sortItem (',' sortItem)*)?\n       (OFFSET offset=INTEGER_VALUE (ROW | ROWS)?)?\n-      ((LIMIT limit=(INTEGER_VALUE | ALL)) | (FETCH (FIRST | NEXT) (fetchFirst=INTEGER_VALUE)? (ROW | ROWS) (ONLY | WITH TIES)))?\n-    ;\n+      ((LIMIT limitRowCount) | (FETCH (FIRST | NEXT) (fetchFirst=INTEGER_VALUE)? (ROW | ROWS) (ONLY | WITH TIES)))?", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "342b5c9bdb7fc08b5f6dd8733024adab7cc5a331", "url": "https://github.com/trinodb/trino/commit/342b5c9bdb7fc08b5f6dd8733024adab7cc5a331", "message": "Throw semantic exception when '?' is passed for parameter\n\nUsed to throw NullPointerException", "committedDate": "2020-07-24T11:57:14Z", "type": "commit"}, {"oid": "6f0283d65ee7c12b0035ed3f188144110f9db983", "url": "https://github.com/trinodb/trino/commit/6f0283d65ee7c12b0035ed3f188144110f9db983", "message": "Support LIMIT clause with parameter", "committedDate": "2020-07-24T11:57:14Z", "type": "commit"}, {"oid": "6f0283d65ee7c12b0035ed3f188144110f9db983", "url": "https://github.com/trinodb/trino/commit/6f0283d65ee7c12b0035ed3f188144110f9db983", "message": "Support LIMIT clause with parameter", "committedDate": "2020-07-24T11:57:14Z", "type": "forcePushed"}]}