{"pr_number": 4187, "pr_title": "Support mysql unsigned types", "pr_createdAt": "2020-06-24T03:55:08Z", "pr_url": "https://github.com/trinodb/trino/pull/4187", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2NTk1MA==", "url": "https://github.com/trinodb/trino/pull/4187#discussion_r444765950", "bodyText": "inline", "author": "findepi", "createdAt": "2020-06-24T09:29:03Z", "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/MySqlClient.java", "diffHunk": "@@ -174,6 +178,12 @@ protected String getTableSchemaName(ResultSet resultSet)\n         if (mapping.isPresent()) {\n             return mapping;\n         }\n+\n+        Optional<ColumnMapping> unsignedMapping = getUnsignedMapping(typeHandle);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2NjkxNg==", "url": "https://github.com/trinodb/trino/pull/4187#discussion_r444766916", "bodyText": "Does mysql support user defined types?\nI think it would be better to have a (case-insensitive?) equality condition on type name rather than contains check\nif (jdbcTypeName.equalsIgnoreCase(\"tinyint unsigned\")) {\n\n-- like we do for json", "author": "findepi", "createdAt": "2020-06-24T09:30:43Z", "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/MySqlClient.java", "diffHunk": "@@ -306,6 +316,24 @@ private ColumnMapping jsonColumnMapping()\n                 DISABLE_PUSHDOWN);\n     }\n \n+    private static Optional<ColumnMapping> getUnsignedMapping(JdbcTypeHandle typeHandle)\n+    {\n+        if (typeHandle.getJdbcTypeName().isPresent() &&\n+            typeHandle.getJdbcTypeName().get().toUpperCase(ENGLISH).contains(\"UNSIGNED\")) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2OTY0MA==", "url": "https://github.com/trinodb/trino/pull/4187#discussion_r444769640", "bodyText": "Did you try defining a DataType for them?\nThis could perhaps look like this:\nprivate static DataType<Short> mysqlUnsignedTinyint()\n{\n    return dataType(\"tinyint unsigned\", SMALLINT, Object::toString);\n}\n\nsee testJson for example. In your test you would use mysqlCreateAndInsert runner only, as Presto obviously cannot create these types.", "author": "findepi", "createdAt": "2020-06-24T09:35:38Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlTypeMapping.java", "diffHunk": "@@ -484,6 +485,35 @@ public void testDouble()\n                 .execute(getQueryRunner(), mysqlCreateAndInsert(\"tpch.mysql_test_double\"));\n     }\n \n+    @Test(dataProvider = \"testUnsignedTypesProvider\")\n+    public void testUnsignedTypes(String type, String prestoType, String value)\n+    {\n+        try (TestTable testTable = new TestTable(\n+                mysqlServer::execute,\n+                \"tpch.test_unsigned_types\",\n+                format(\"(d_col %s unsigned)\", type),\n+                singletonList(value))) {\n+            assertQuery(\n+                    \"SELECT d_col FROM \" + testTable.getName(),\n+                    \"VALUES \" + value);\n+            assertQuery(\n+                    sessionWithDecimalMappingAllowOverflow(UNNECESSARY, 8),\n+                    format(\"SELECT column_name, data_type FROM information_schema.columns WHERE table_schema = 'tpch' AND table_schema||'.'||table_name = '%s'\", testTable.getName()),\n+                    format(\"VALUES ('d_col', '%s')\", prestoType));\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[][] testUnsignedTypesProvider()\n+    {\n+        return new Object[][] {\n+                {\"tinyint\", \"smallint\", \"255\"},\n+                {\"smallint\", \"integer\", \"65535\"},\n+                {\"integer\", \"bigint\", \"4294967295\"},\n+                {\"bigint\", \"decimal(20,0)\", \"18446744073709551615\"},", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3MjE5MQ==", "url": "https://github.com/trinodb/trino/pull/4187#discussion_r444772191", "bodyText": "Thanks for the information, it's helpful!\nI will update the unit tests with DateType.", "author": "chhsiao90", "createdAt": "2020-06-24T09:40:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2OTY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc4MTc5Nw==", "url": "https://github.com/trinodb/trino/pull/4187#discussion_r444781797", "bodyText": "Yeah exactly. You can start from this one:\n    @Test\n    public void testUnsignedTypes()\n    {\n        DataType<Short> mysqlUnsignedTinyInt = DataType.dataType(\"TINYINT UNSIGNED\", SmallintType.SMALLINT, Objects::toString);\n        DataType<Integer> mysqlUnsignedSmallInt = DataType.dataType(\"SMALLINT UNSIGNED\", IntegerType.INTEGER, Objects::toString);\n\n        DataTypeTest.create()\n                .addRoundTrip(mysqlUnsignedTinyInt, (short) 255)\n                .addRoundTrip(mysqlUnsignedSmallInt, 65535)\n                .execute(getQueryRunner(), mysqlCreateAndInsert(\"tpch.mysql_test_unsigned_types\"));\n    }", "author": "losipiuk", "createdAt": "2020-06-24T09:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2OTY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc5NjE0MA==", "url": "https://github.com/trinodb/trino/pull/4187#discussion_r444796140", "bodyText": "@chhsiao90, @losipiuk 's suggestion is even better.\nif we do not need to reuse the DataType definitions, we can declare them inline in the test body.", "author": "findepi", "createdAt": "2020-06-24T10:23:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc2OTY0MA=="}], "type": "inlineReview"}, {"oid": "d7ac8ebafe550c8c7c762c1ec323ebe9b9a45a3b", "url": "https://github.com/trinodb/trino/commit/d7ac8ebafe550c8c7c762c1ec323ebe9b9a45a3b", "message": "Support mysql unsigned types\n\nMapping unsigned types to wider type.\n- TINYINT to SMALLINT\n- SMALLINT to INTEGER\n- INTEGER to BIGINT\n- BIGINT to DECIMAL(20,0)", "committedDate": "2020-06-29T01:19:44Z", "type": "commit"}]}