{"pr_number": 5496, "pr_title": "Interface out AccessControlMetadataMetastore", "pr_createdAt": "2020-10-09T15:51:03Z", "pr_url": "https://github.com/trinodb/trino/pull/5496", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NTE0Mw==", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r559465143", "bodyText": "Maybe we pass SqlStandardAccessControlMetadataMetastore here, instead of a function?\nalthough, i see the value of this too", "author": "findepi", "createdAt": "2021-01-18T10:31:47Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -263,45 +261,29 @@ protected RoleGrant computeNext()\n         });\n     }\n \n-    public static boolean isRoleApplicable(SemiTransactionalHiveMetastore metastore, HivePrincipal principal, String role)\n+    public static boolean isRoleApplicable(HivePrincipal principal, String role, Function<HivePrincipal, Set<RoleGrant>> listRoleGrants)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg2ODMyNQ==", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r561868325", "bodyText": "Yeah - it would work. Using Function here was kinda an intermediate step. I squash this with Interface out SqlStandardAccessControlMetadataMetastore", "author": "losipiuk", "createdAt": "2021-01-21T13:11:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NTE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg3MzI5NQ==", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r561873295", "bodyText": "Naa - I take that back. Let's keep the function. Going with SqlStandardAccessControMetastore implies that I need to also pass ConnectoSecurityContext in isRoleApplicable signature. It does not make it substantially simpler", "author": "losipiuk", "createdAt": "2021-01-21T13:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NTE0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NTQ0MA==", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r559465440", "bodyText": "here too, maybe SqlStandardAccessControlMetadataMetastore instead of a function", "author": "findepi", "createdAt": "2021-01-18T10:32:16Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -263,45 +261,29 @@ protected RoleGrant computeNext()\n         });\n     }\n \n-    public static boolean isRoleApplicable(SemiTransactionalHiveMetastore metastore, HivePrincipal principal, String role)\n+    public static boolean isRoleApplicable(HivePrincipal principal, String role, Function<HivePrincipal, Set<RoleGrant>> listRoleGrants)\n     {\n         if (principal.getType() == ROLE && principal.getName().equals(role)) {\n             return true;\n         }\n-        return listApplicableRoles(metastore, principal)\n+        return listApplicableRoleNames(principal, listRoleGrants)\n                 .anyMatch(role::equals);\n     }\n \n-    public static Stream<String> listApplicableRoles(SemiTransactionalHiveMetastore metastore, HivePrincipal principal)\n+    private static Stream<String> listApplicableRoleNames(HivePrincipal principal, Function<HivePrincipal, Set<RoleGrant>> listRoleGrants)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NTUxOA==", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r559465518", "bodyText": "here too, maybe SqlStandardAccessControlMetadataMetastore instead of a function", "author": "findepi", "createdAt": "2021-01-18T10:32:22Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftMetastoreUtil.java", "diffHunk": "@@ -263,45 +261,29 @@ protected RoleGrant computeNext()\n         });\n     }\n \n-    public static boolean isRoleApplicable(SemiTransactionalHiveMetastore metastore, HivePrincipal principal, String role)\n+    public static boolean isRoleApplicable(HivePrincipal principal, String role, Function<HivePrincipal, Set<RoleGrant>> listRoleGrants)\n     {\n         if (principal.getType() == ROLE && principal.getName().equals(role)) {\n             return true;\n         }\n-        return listApplicableRoles(metastore, principal)\n+        return listApplicableRoleNames(principal, listRoleGrants)\n                 .anyMatch(role::equals);\n     }\n \n-    public static Stream<String> listApplicableRoles(SemiTransactionalHiveMetastore metastore, HivePrincipal principal)\n+    private static Stream<String> listApplicableRoleNames(HivePrincipal principal, Function<HivePrincipal, Set<RoleGrant>> listRoleGrants)\n     {\n-        return listApplicableRoles(principal, metastore::listRoleGrants)\n+        return listApplicableRoles(principal, listRoleGrants)\n                 .map(RoleGrant::getRoleName);\n     }\n \n-    public static Stream<HivePrincipal> listEnabledPrincipals(SemiTransactionalHiveMetastore metastore, ConnectorIdentity identity)\n+    public static Stream<HivePrincipal> listEnabledPrincipals(ConnectorIdentity identity, Function<HivePrincipal, Set<RoleGrant>> listRoleGrants)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NjEzMw==", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r559466133", "bodyText": "Are you sure this TODO is actionable? or it is going to stay with us for ever?\nAlso, since you're improving the situation\u00a0here, i don't feel like you need to add a TODO at all", "author": "findepi", "createdAt": "2021-01-18T10:33:25Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/AccessControlMetadataFactory.java", "diffHunk": "@@ -13,9 +13,9 @@\n  */\n package io.prestosql.plugin.hive.security;\n \n-import io.prestosql.plugin.hive.metastore.SemiTransactionalHiveMetastore;\n-\n public interface AccessControlMetadataFactory\n {\n-    AccessControlMetadata create(SemiTransactionalHiveMetastore metastore);\n+    // TODO get rid of SqlStandardAccessControlMetastore. Possibly replace with something generic\n+    // not tied to selected access control implementation. E.g. HiveTransactionHandle.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc2Mjg0MA==", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r562762840", "bodyText": "I will drop it for now. Not sure if it is easily actionable. Without massive refactor.", "author": "losipiuk", "createdAt": "2021-01-22T16:47:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NjEzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NzI3NA==", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r559467274", "bodyText": "That might be silly, but did you consider making SemiTransactionalHiveMetastore implement SqlStandardAccessControlMetadataMetastore directly?", "author": "findepi", "createdAt": "2021-01-18T10:35:23Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/SemiTransactionalHiveSqlStandardAccessControlMetadataMetastore.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.security;\n+\n+import io.prestosql.plugin.hive.authentication.HiveIdentity;\n+import io.prestosql.plugin.hive.metastore.HivePrincipal;\n+import io.prestosql.plugin.hive.metastore.HivePrivilegeInfo;\n+import io.prestosql.plugin.hive.metastore.SemiTransactionalHiveMetastore;\n+import io.prestosql.spi.security.RoleGrant;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class SemiTransactionalHiveSqlStandardAccessControlMetadataMetastore\n+        implements SqlStandardAccessControlMetadataMetastore\n+{\n+    private final SemiTransactionalHiveMetastore hiveMetastore;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc2NDU4NQ==", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r562764585", "bodyText": "Hmm - good point :)", "author": "losipiuk", "createdAt": "2021-01-22T16:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NzI3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc2NTc1Nw==", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r562765757", "bodyText": "It may be a bit constraining if we want to change structure of it. But we can postpone adding an extra delegation layer.", "author": "losipiuk", "createdAt": "2021-01-22T16:52:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ2NzI3NA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTY1MjAzOQ==", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r565652039", "bodyText": "Maybe call this getEnabledPrincipals or streamEnabledPrincipals?\nIt can also be made private.", "author": "jirassimok", "createdAt": "2021-01-27T21:38:14Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/security/SqlStandardAccessControlMetadata.java", "diffHunk": "@@ -218,6 +218,14 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return result.build();\n     }\n \n+    public Stream<HivePrincipal> listEnabledPrincipals(ConnectorIdentity identity)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTY1NzU0Nw==", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r565657547", "bodyText": "IntelliJ says that the implementation of every method in this interface is missing @Override.", "author": "jirassimok", "createdAt": "2021-01-27T21:47:55Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/security/SqlStandardAccessControlMetadataMetastore.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.hive.security;\n+\n+import io.trino.plugin.hive.authentication.HiveIdentity;\n+import io.trino.plugin.hive.metastore.HivePrincipal;\n+import io.trino.plugin.hive.metastore.HivePrivilegeInfo;\n+import io.trino.spi.security.RoleGrant;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public interface SqlStandardAccessControlMetadataMetastore\n+{\n+    Set<String> listRoles();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzkzMjk2MA==", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r567932960", "bodyText": "Why io.trino.plugin.hive.metastore.thrift.ThriftMetastoreUtil#listEnabledPrincipals inlined here?\nuninline?", "author": "findepi", "createdAt": "2021-02-01T15:53:57Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/security/SqlStandardAccessControlMetadata.java", "diffHunk": "@@ -218,6 +218,14 @@ public void revokeTablePrivileges(ConnectorSession session, SchemaTableName sche\n         return result.build();\n     }\n \n+    private Stream<HivePrincipal> getEnabledPrincipals(ConnectorIdentity identity)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODM5ODg3OQ==", "url": "https://github.com/trinodb/trino/pull/5496#discussion_r568398879", "bodyText": "hmm - interesting. Done", "author": "losipiuk", "createdAt": "2021-02-02T08:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzkzMjk2MA=="}], "type": "inlineReview"}, {"oid": "71d12f09d7cca072a819d41075f3022b89eeb2ea", "url": "https://github.com/trinodb/trino/commit/71d12f09d7cca072a819d41075f3022b89eeb2ea", "message": "Interface out SqlStandardAccessControlMetadataMetastore", "committedDate": "2021-02-02T08:13:23Z", "type": "commit"}, {"oid": "53832a3a01f78ed144bdfda518118bb251cef1ec", "url": "https://github.com/trinodb/trino/commit/53832a3a01f78ed144bdfda518118bb251cef1ec", "message": "Interface out SqlStandardAccessControlMetastore", "committedDate": "2021-02-02T08:13:23Z", "type": "commit"}, {"oid": "538720298abc52966fab59b1ab979b1fb75253fc", "url": "https://github.com/trinodb/trino/commit/538720298abc52966fab59b1ab979b1fb75253fc", "message": "Interface out LegacyAccessControlMetastore", "committedDate": "2021-02-02T08:13:23Z", "type": "commit"}, {"oid": "538720298abc52966fab59b1ab979b1fb75253fc", "url": "https://github.com/trinodb/trino/commit/538720298abc52966fab59b1ab979b1fb75253fc", "message": "Interface out LegacyAccessControlMetastore", "committedDate": "2021-02-02T08:13:23Z", "type": "forcePushed"}]}