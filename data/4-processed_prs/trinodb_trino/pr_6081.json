{"pr_number": 6081, "pr_title": "Fix caching for TableHandle in CachingJdbcClient", "pr_createdAt": "2020-11-24T21:23:04Z", "pr_url": "https://github.com/trinodb/trino/pull/6081", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MjA0Mg==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r529892042", "bodyText": "Can you please add a test for that?", "author": "kokosing", "createdAt": "2020-11-24T21:34:10Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -196,7 +196,7 @@ public boolean isLimitGuaranteed(ConnectorSession session)\n             return cachedTableHandle;\n         }\n         Optional<JdbcTableHandle> tableHandle = delegate.getTableHandle(identity, schemaTableName);\n-        if (tableHandle.isEmpty() || cacheMissing) {\n+        if (tableHandle.isPresent() || cacheMissing) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkxNzQ5Mw==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r529917493", "bodyText": "maybe no-one needed this cache after all :)", "author": "findepi", "createdAt": "2020-11-24T22:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MjA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQzOTM5Ng==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530439396", "bodyText": "@kokosing as discussed, test will be delivered in separate pr. Please AC.", "author": "ssheikin", "createdAt": "2020-11-25T15:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MjA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY5NzM1Mw==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530697353", "bodyText": "test is added as separate commit in this pr.", "author": "ssheikin", "createdAt": "2020-11-25T23:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MjA0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc5MzgxNw==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530793817", "bodyText": "Why not to simply mock jdbc client?", "author": "kokosing", "createdAt": "2020-11-26T06:14:55Z", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,175 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();\n+    private static final JdbcIdentity identity = JdbcIdentity.from(session);\n+\n+    private TestingDatabase database;\n+    private CachingJdbcClient cachingJdbcClient;\n+    private JdbcClient dbHacker;\n+    private String schema;\n+\n+    @BeforeMethod\n+    public void setUp()\n+            throws Exception\n+    {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc5NDE2Nw==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530794167", "bodyText": "Also you might want to run this test by single thread", "author": "kokosing", "createdAt": "2020-11-26T06:16:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc5MzgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgxOTM3Ng==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530819376", "bodyText": "To mock it you can use proxy class from guava. Forwarding jdbc client could also be helpful. See how mock connector is implemented.", "author": "kokosing", "createdAt": "2020-11-26T07:28:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc5MzgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0Mjk0NA==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530942944", "bodyText": "Why not to simply mock jdbc client?\n\nGood point, initially I didn't think about this because absence of mockito in dependencies repels from this approach.\nHowever current version shows contrast differences between CachingJdbcClient and usual jdbcClient behaviour in real world scenario without execution time or maintenance overhead.\nI'd left it as is unless you have compelling arguments.", "author": "ssheikin", "createdAt": "2020-11-26T10:54:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc5MzgxNw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2MjY3OQ==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530962679", "bodyText": "it is not a hacker, please simply call it jdbcClient", "author": "kokosing", "createdAt": "2020-11-26T11:27:55Z", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();\n+    private static final JdbcIdentity identity = JdbcIdentity.from(session);\n+\n+    private TestingDatabase database;\n+    private CachingJdbcClient cachingJdbcClient;\n+    private JdbcClient dbHacker;\n+    private String schema;\n+\n+    @BeforeMethod\n+    public void setUp()\n+            throws Exception\n+    {\n+        database = new TestingDatabase();\n+        cachingJdbcClient = createCachingJdbcClient(true);\n+        dbHacker = database.getJdbcClient();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAwMTYwMQ==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r531001601", "bodyText": "I liked this name.", "author": "ssheikin", "createdAt": "2020-11-26T12:39:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2MjY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwODU3NQ==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r531108575", "bodyText": "Renamed, despite it ruined fairy tale about hackers.", "author": "ssheikin", "createdAt": "2020-11-26T15:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2MjY3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2MjkyOA==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530962928", "bodyText": "1 day is not forever", "author": "kokosing", "createdAt": "2020-11-26T11:28:23Z", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3MDUzMg==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530970532", "bodyText": "It is more than life time for test. Please suggest better name.", "author": "ssheikin", "createdAt": "2020-11-26T11:42:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2MjkyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3NDM5Mw==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530974393", "bodyText": "ONE_DAY", "author": "kokosing", "createdAt": "2020-11-26T11:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2MjkyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3Nzk0MA==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530977940", "bodyText": "Actually we are not interested wether it's one day or three or a just a few hours or whatever. The current name hints that it's something that cannot be reached. ONE_DAY says nothing except what is written after =. I'd be glad to change FOREVER to something which better depicts its nature.", "author": "ssheikin", "createdAt": "2020-11-26T11:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2MjkyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2MzEyNw==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530963127", "bodyText": "io.prestosql.testing.TestingConnectorSession#SESSION", "author": "kokosing", "createdAt": "2020-11-26T11:28:44Z", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NDM2OA==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530964368", "bodyText": "Why not to reuse it between tests? Then you can use io.prestosql.testing.AbstractTestQueryFramework#closeAfterClass. Then you can make it concurrent again", "author": "kokosing", "createdAt": "2020-11-26T11:30:59Z", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();\n+    private static final JdbcIdentity identity = JdbcIdentity.from(session);\n+\n+    private TestingDatabase database;\n+    private CachingJdbcClient cachingJdbcClient;\n+    private JdbcClient dbHacker;\n+    private String schema;\n+\n+    @BeforeMethod\n+    public void setUp()\n+            throws Exception\n+    {\n+        database = new TestingDatabase();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk3Mzc4MA==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530973780", "bodyText": "This way each test has etalon data as input. Other failing tests could not interfere with one been executing.\nThis is quite lightweight: a few milliseconds less does not worth developer time to find the actual failing test.", "author": "ssheikin", "createdAt": "2020-11-26T11:47:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NDM2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NTg1Ng==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530965856", "bodyText": "Declare type as View. Instead of using difference please use jdbcClient.getSchemaNames() and just verify that cached schemas do not contain phantom_schema", "author": "kokosing", "createdAt": "2020-11-26T11:33:38Z", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();\n+    private static final JdbcIdentity identity = JdbcIdentity.from(session);\n+\n+    private TestingDatabase database;\n+    private CachingJdbcClient cachingJdbcClient;\n+    private JdbcClient dbHacker;\n+    private String schema;\n+\n+    @BeforeMethod\n+    public void setUp()\n+            throws Exception\n+    {\n+        database = new TestingDatabase();\n+        cachingJdbcClient = createCachingJdbcClient(true);\n+        dbHacker = database.getJdbcClient();\n+        schema = dbHacker.getSchemaNames(identity).iterator().next();\n+    }\n+\n+    private CachingJdbcClient createCachingJdbcClient(boolean cacheMissing)\n+    {\n+        return new CachingJdbcClient(database.getJdbcClient(), FOREVER, cacheMissing);\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    public void tearDown()\n+            throws Exception\n+    {\n+        database.close();\n+    }\n+\n+    @Test\n+    public void testSchemaNamesCached()\n+    {\n+        String phantomSchema = \"phantom_schema\";\n+\n+        dbHacker.createSchema(identity, phantomSchema);\n+        Set<String> cachedSchemas = cachingJdbcClient.getSchemaNames(identity);\n+        dbHacker.dropSchema(identity, phantomSchema);\n+\n+        Sets.SetView<String> actualDbState = difference(cachedSchemas, Set.of(phantomSchema));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMTA2Nw==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r531111067", "bodyText": "This was a way to express test via actualDbState. With contains and doesNotContain there is no sense in this variable at all. However it seems that despite it's less verbose it's still expressive.", "author": "ssheikin", "createdAt": "2020-11-26T15:44:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NTg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NjMwNQ==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530966305", "bodyText": "Please create it every test. I noticed that sometimes it is created and sometimes it is created here. So lets be coherent.", "author": "kokosing", "createdAt": "2020-11-26T11:34:28Z", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();\n+    private static final JdbcIdentity identity = JdbcIdentity.from(session);\n+\n+    private TestingDatabase database;\n+    private CachingJdbcClient cachingJdbcClient;\n+    private JdbcClient dbHacker;\n+    private String schema;\n+\n+    @BeforeMethod\n+    public void setUp()\n+            throws Exception\n+    {\n+        database = new TestingDatabase();\n+        cachingJdbcClient = createCachingJdbcClient(true);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk4NDkyNQ==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530984925", "bodyText": "You are right, however this is a trade-off. This is the only one cachingJdbcClient 'override' of the 'default setup' provided by class fields which are widely used. The same could be said about schema which is not used by testSchemaNamesCached and that's why it's could be more clear to define in each other test method. As the most exaggerated example database is not used by preexisting test methods, and possibly could be included to new methods.\nThere is no difference for Tests clarity if the default value is overriden in test method or just not used in test method.\nI'll left it as is unless you have better arguments.", "author": "ssheikin", "createdAt": "2020-11-26T12:08:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NjMwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NzMwMA==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530967300", "bodyText": "You might want to use io.prestosql.testing.sql.TestTable#randomTableSuffix", "author": "kokosing", "createdAt": "2020-11-26T11:36:07Z", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();\n+    private static final JdbcIdentity identity = JdbcIdentity.from(session);\n+\n+    private TestingDatabase database;\n+    private CachingJdbcClient cachingJdbcClient;\n+    private JdbcClient dbHacker;\n+    private String schema;\n+\n+    @BeforeMethod\n+    public void setUp()\n+            throws Exception\n+    {\n+        database = new TestingDatabase();\n+        cachingJdbcClient = createCachingJdbcClient(true);\n+        dbHacker = database.getJdbcClient();\n+        schema = dbHacker.getSchemaNames(identity).iterator().next();\n+    }\n+\n+    private CachingJdbcClient createCachingJdbcClient(boolean cacheMissing)\n+    {\n+        return new CachingJdbcClient(database.getJdbcClient(), FOREVER, cacheMissing);\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    public void tearDown()\n+            throws Exception\n+    {\n+        database.close();\n+    }\n+\n+    @Test\n+    public void testSchemaNamesCached()\n+    {\n+        String phantomSchema = \"phantom_schema\";", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAwMzM5Ng==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r531003396", "bodyText": "Could you please describe what benefits it will add here?\nI'm not sure that it worth to add additional dependency here.", "author": "ssheikin", "createdAt": "2020-11-26T12:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2NzMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2ODAwOQ==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530968009", "bodyText": "Please apply above comments to all tests below.", "author": "kokosing", "createdAt": "2020-11-26T11:37:26Z", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();\n+    private static final JdbcIdentity identity = JdbcIdentity.from(session);\n+\n+    private TestingDatabase database;\n+    private CachingJdbcClient cachingJdbcClient;\n+    private JdbcClient dbHacker;\n+    private String schema;\n+\n+    @BeforeMethod\n+    public void setUp()\n+            throws Exception\n+    {\n+        database = new TestingDatabase();\n+        cachingJdbcClient = createCachingJdbcClient(true);\n+        dbHacker = database.getJdbcClient();\n+        schema = dbHacker.getSchemaNames(identity).iterator().next();\n+    }\n+\n+    private CachingJdbcClient createCachingJdbcClient(boolean cacheMissing)\n+    {\n+        return new CachingJdbcClient(database.getJdbcClient(), FOREVER, cacheMissing);\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    public void tearDown()\n+            throws Exception\n+    {\n+        database.close();\n+    }\n+\n+    @Test\n+    public void testSchemaNamesCached()\n+    {\n+        String phantomSchema = \"phantom_schema\";\n+\n+        dbHacker.createSchema(identity, phantomSchema);\n+        Set<String> cachedSchemas = cachingJdbcClient.getSchemaNames(identity);\n+        dbHacker.dropSchema(identity, phantomSchema);\n+\n+        Sets.SetView<String> actualDbState = difference(cachedSchemas, Set.of(phantomSchema));\n+        assertThat(dbHacker.getSchemaNames(identity)).containsExactlyInAnyOrderElementsOf(actualDbState);\n+        assertThat(cachingJdbcClient.getSchemaNames(identity)).containsExactlyInAnyOrderElementsOf(cachedSchemas);\n+    }\n+\n+    @Test", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2ODMyMQ==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r530968321", "bodyText": "now please invalidate cache and see it got refreshed after the second call.", "author": "kokosing", "createdAt": "2020-11-26T11:38:04Z", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestCachingJdbcClient.java", "diffHunk": "@@ -14,15 +14,176 @@\n package io.prestosql.plugin.jdbc;\n \n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.airlift.units.Duration;\n+import io.prestosql.spi.connector.ColumnMetadata;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.connector.ConnectorTableMetadata;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n import java.lang.reflect.Method;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n+import static com.google.common.collect.Sets.difference;\n import static io.prestosql.spi.testing.InterfaceTestUtils.assertAllMethodsOverridden;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.util.Collections.emptyList;\n+import static java.util.concurrent.TimeUnit.DAYS;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n+@Test(singleThreaded = true)\n public class TestCachingJdbcClient\n {\n+    private static final Duration FOREVER = Duration.succinctDuration(1, DAYS);\n+    private static final ConnectorSession session = testSessionBuilder().build().toConnectorSession();\n+    private static final JdbcIdentity identity = JdbcIdentity.from(session);\n+\n+    private TestingDatabase database;\n+    private CachingJdbcClient cachingJdbcClient;\n+    private JdbcClient dbHacker;\n+    private String schema;\n+\n+    @BeforeMethod\n+    public void setUp()\n+            throws Exception\n+    {\n+        database = new TestingDatabase();\n+        cachingJdbcClient = createCachingJdbcClient(true);\n+        dbHacker = database.getJdbcClient();\n+        schema = dbHacker.getSchemaNames(identity).iterator().next();\n+    }\n+\n+    private CachingJdbcClient createCachingJdbcClient(boolean cacheMissing)\n+    {\n+        return new CachingJdbcClient(database.getJdbcClient(), FOREVER, cacheMissing);\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    public void tearDown()\n+            throws Exception\n+    {\n+        database.close();\n+    }\n+\n+    @Test\n+    public void testSchemaNamesCached()\n+    {\n+        String phantomSchema = \"phantom_schema\";\n+\n+        dbHacker.createSchema(identity, phantomSchema);\n+        Set<String> cachedSchemas = cachingJdbcClient.getSchemaNames(identity);\n+        dbHacker.dropSchema(identity, phantomSchema);\n+\n+        Sets.SetView<String> actualDbState = difference(cachedSchemas, Set.of(phantomSchema));\n+        assertThat(dbHacker.getSchemaNames(identity)).containsExactlyInAnyOrderElementsOf(actualDbState);\n+        assertThat(cachingJdbcClient.getSchemaNames(identity)).containsExactlyInAnyOrderElementsOf(cachedSchemas);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAwOTQyMw==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r531009423", "bodyText": "There is no good way to do this.\nI'd propose to make private void invalidate.....Cache() methods as public api for cachingJdbcClient.", "author": "ssheikin", "createdAt": "2020-11-26T12:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2ODMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExNjQ4Nw==", "url": "https://github.com/trinodb/trino/pull/6081#discussion_r531116487", "bodyText": "I'm not sure it worth to do in this pr. Let's postpone it.", "author": "ssheikin", "createdAt": "2020-11-26T15:53:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2ODMyMQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "209e15cc1be826f1a6039a5cece24c5ce3ce308b", "url": "https://github.com/trinodb/trino/commit/209e15cc1be826f1a6039a5cece24c5ce3ce308b", "message": "Fix caching for TableHandle in CachingJdbcClient\n\nTableHandle should be cached if there is a value,\nor tableHandle is empty but missing value cashing is expected.", "committedDate": "2020-11-26T15:58:36Z", "type": "commit"}, {"oid": "4f0cb3b5df50ac9cf2e5f89dc10b0ef3f5f4eaa3", "url": "https://github.com/trinodb/trino/commit/4f0cb3b5df50ac9cf2e5f89dc10b0ef3f5f4eaa3", "message": "Implement tests for CachingJdbcClient", "committedDate": "2020-11-26T15:58:36Z", "type": "commit"}, {"oid": "4f0cb3b5df50ac9cf2e5f89dc10b0ef3f5f4eaa3", "url": "https://github.com/trinodb/trino/commit/4f0cb3b5df50ac9cf2e5f89dc10b0ef3f5f4eaa3", "message": "Implement tests for CachingJdbcClient", "committedDate": "2020-11-26T15:58:36Z", "type": "forcePushed"}]}