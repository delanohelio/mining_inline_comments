{"pr_number": 3805, "pr_title": "Improve error message for missing operators", "pr_createdAt": "2020-05-21T06:29:23Z", "pr_url": "https://github.com/trinodb/trino/pull/3805", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNzQ3MA==", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r428537470", "bodyText": "Wasn't the original wording more readable?", "author": "findepi", "createdAt": "2020-05-21T09:11:32Z", "path": "presto-main/src/test/java/io/prestosql/type/TestRowOperators.java", "diffHunk": "@@ -481,7 +481,7 @@ public void testRowComparison()\n         assertFunction(\"row(2, CAST(NULL AS INTEGER)) = row(1, 2)\", BOOLEAN, false);\n         assertFunction(\"row(2, CAST(NULL AS INTEGER)) != row(1, 2)\", BOOLEAN, true);\n         assertInvalidFunction(\"row(TRUE, ARRAY [1, 2], MAP(ARRAY[1, 3], ARRAY[2.0E0, 4.0E0])) > row(TRUE, ARRAY [1, 2], MAP(ARRAY[1, 3], ARRAY[2.0E0, 4.0E0]))\",\n-                TYPE_MISMATCH, \"line 1:64: '>' cannot be applied to row(boolean, array(integer), map(integer, double)), row(boolean, array(integer), map(integer, double))\");\n+                TYPE_MISMATCH, \"line 1:64: Operator does not exist: row(boolean, array(integer), map(integer, double)) > row(boolean, array(integer), map(integer, double))\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcyNTk5Mw==", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r428725993", "bodyText": "I like having the operator in the middle of the types, as it's used in SQL syntax. But we can combine that with the original language. This was inspired by PostgreSQL:\nERROR:  operator does not exist: integer = text", "author": "electrum", "createdAt": "2020-05-21T15:25:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNzQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNjAxNw==", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r428916017", "bodyText": "integer = text looks nice. For complex types (like the one here), it's hard to fish out the actual operator... maybe it's hard no matter what we do though.", "author": "findepi", "createdAt": "2020-05-21T21:09:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNzQ3MA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNjQ4OQ==", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r428916489", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return format(\"Operator '%s'%s cannot be applied to %s\",\n          \n          \n            \n                    return format(\n          \n          \n            \n                        \"Operator '%s'%s cannot be applied to %s\",", "author": "findepi", "createdAt": "2020-05-21T21:10:27Z", "path": "presto-main/src/main/java/io/prestosql/metadata/OperatorNotFoundException.java", "diffHunk": "@@ -52,17 +52,34 @@ public OperatorNotFoundException(OperatorType operatorType, List<? extends Type>\n \n     private static String formatErrorMessage(OperatorType operatorType, List<? extends Type> argumentTypes, Optional<TypeSignature> returnType)\n     {\n-        String operatorString;\n         switch (operatorType) {\n+            case ADD:\n+            case SUBTRACT:\n+            case MULTIPLY:\n+            case DIVIDE:\n+            case MODULUS:\n+            case EQUAL:\n+            case NOT_EQUAL:\n+            case LESS_THAN:\n+            case LESS_THAN_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_THAN_OR_EQUAL:\n+                return format(\"Cannot apply operator: %s %s %s\", argumentTypes.get(0), operatorType.getOperator(), argumentTypes.get(1));\n+            case NEGATION:\n+                return format(\"Cannot negate %s\", argumentTypes.get(0));\n             case BETWEEN:\n                 return format(\"Cannot check if %s is BETWEEN %s and %s\", argumentTypes.get(0), argumentTypes.get(1), argumentTypes.get(2));\n+            case IS_DISTINCT_FROM:\n+                return format(\"Cannot check if %s IS DISTINCT FROM %s\", argumentTypes.get(0), argumentTypes.get(1));\n             case CAST:\n-                operatorString = format(\"%s%s\", operatorType.getOperator(), returnType.map(value -> \" to \" + value).orElse(\"\"));\n-                break;\n-            default:\n-                operatorString = format(\"'%s'%s\", operatorType.getOperator(), returnType.map(value -> \":\" + value).orElse(\"\"));\n+                return format(\"Cannot cast %s to %s\", argumentTypes.get(0), returnType.orElseThrow());\n+            case SUBSCRIPT:\n+                return format(\"Cannot use %s for subscript of %s\", argumentTypes.get(1), argumentTypes.get(0));\n         }\n-        return format(\"%s cannot be applied to %s\", operatorString, Joiner.on(\", \").join(argumentTypes));\n+        return format(\"Operator '%s'%s cannot be applied to %s\",", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNjk2MA==", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r428916960", "bodyText": "Do we have a test case which would hit the returnType.isPresent() case?", "author": "findepi", "createdAt": "2020-05-21T21:11:26Z", "path": "presto-main/src/main/java/io/prestosql/metadata/OperatorNotFoundException.java", "diffHunk": "@@ -52,17 +52,34 @@ public OperatorNotFoundException(OperatorType operatorType, List<? extends Type>\n \n     private static String formatErrorMessage(OperatorType operatorType, List<? extends Type> argumentTypes, Optional<TypeSignature> returnType)\n     {\n-        String operatorString;\n         switch (operatorType) {\n+            case ADD:\n+            case SUBTRACT:\n+            case MULTIPLY:\n+            case DIVIDE:\n+            case MODULUS:\n+            case EQUAL:\n+            case NOT_EQUAL:\n+            case LESS_THAN:\n+            case LESS_THAN_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_THAN_OR_EQUAL:\n+                return format(\"Cannot apply operator: %s %s %s\", argumentTypes.get(0), operatorType.getOperator(), argumentTypes.get(1));\n+            case NEGATION:\n+                return format(\"Cannot negate %s\", argumentTypes.get(0));\n             case BETWEEN:\n                 return format(\"Cannot check if %s is BETWEEN %s and %s\", argumentTypes.get(0), argumentTypes.get(1), argumentTypes.get(2));\n+            case IS_DISTINCT_FROM:\n+                return format(\"Cannot check if %s IS DISTINCT FROM %s\", argumentTypes.get(0), argumentTypes.get(1));\n             case CAST:\n-                operatorString = format(\"%s%s\", operatorType.getOperator(), returnType.map(value -> \" to \" + value).orElse(\"\"));\n-                break;\n-            default:\n-                operatorString = format(\"'%s'%s\", operatorType.getOperator(), returnType.map(value -> \":\" + value).orElse(\"\"));\n+                return format(\"Cannot cast %s to %s\", argumentTypes.get(0), returnType.orElseThrow());\n+            case SUBSCRIPT:\n+                return format(\"Cannot use %s for subscript of %s\", argumentTypes.get(1), argumentTypes.get(0));\n         }\n-        return format(\"%s cannot be applied to %s\", operatorString, Joiner.on(\", \").join(argumentTypes));\n+        return format(\"Operator '%s'%s cannot be applied to %s\",\n+                operatorType.getOperator(),\n+                returnType.map(value -> \":\" + value).orElse(\"\"),", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxMzc4OA==", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r432813788", "bodyText": "I'm not aware of a way for a query to hit any of the other operators here.", "author": "electrum", "createdAt": "2020-05-30T05:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNjk2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxNzYxNg==", "url": "https://github.com/trinodb/trino/pull/3805#discussion_r428917616", "bodyText": "lowercase IS DISTINCT FROM ?\n(you didn't upper cast in the CAST case; and the sentence is still a sentence when you treat \"is distinct from\" as just words)", "author": "findepi", "createdAt": "2020-05-21T21:12:57Z", "path": "presto-main/src/main/java/io/prestosql/metadata/OperatorNotFoundException.java", "diffHunk": "@@ -52,17 +52,34 @@ public OperatorNotFoundException(OperatorType operatorType, List<? extends Type>\n \n     private static String formatErrorMessage(OperatorType operatorType, List<? extends Type> argumentTypes, Optional<TypeSignature> returnType)\n     {\n-        String operatorString;\n         switch (operatorType) {\n+            case ADD:\n+            case SUBTRACT:\n+            case MULTIPLY:\n+            case DIVIDE:\n+            case MODULUS:\n+            case EQUAL:\n+            case NOT_EQUAL:\n+            case LESS_THAN:\n+            case LESS_THAN_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_THAN_OR_EQUAL:\n+                return format(\"Cannot apply operator: %s %s %s\", argumentTypes.get(0), operatorType.getOperator(), argumentTypes.get(1));\n+            case NEGATION:\n+                return format(\"Cannot negate %s\", argumentTypes.get(0));\n             case BETWEEN:\n                 return format(\"Cannot check if %s is BETWEEN %s and %s\", argumentTypes.get(0), argumentTypes.get(1), argumentTypes.get(2));\n+            case IS_DISTINCT_FROM:\n+                return format(\"Cannot check if %s IS DISTINCT FROM %s\", argumentTypes.get(0), argumentTypes.get(1));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8ba7514e4eb4b8ef6815e1f3771b4bfa248cc2bd", "url": "https://github.com/trinodb/trino/commit/8ba7514e4eb4b8ef6815e1f3771b4bfa248cc2bd", "message": "Improve error message for missing operators", "committedDate": "2020-06-25T00:26:11Z", "type": "commit"}, {"oid": "8ba7514e4eb4b8ef6815e1f3771b4bfa248cc2bd", "url": "https://github.com/trinodb/trino/commit/8ba7514e4eb4b8ef6815e1f3771b4bfa248cc2bd", "message": "Improve error message for missing operators", "committedDate": "2020-06-25T00:26:11Z", "type": "forcePushed"}]}