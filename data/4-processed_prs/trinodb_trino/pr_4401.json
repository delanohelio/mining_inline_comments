{"pr_number": 4401, "pr_title": "Add memsql integration smoke tests", "pr_createdAt": "2020-07-09T10:19:55Z", "pr_url": "https://github.com/trinodb/trino/pull/4401", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1NjcxNQ==", "url": "https://github.com/trinodb/trino/pull/4401#discussion_r452156715", "bodyText": "What exactly are we testing here?", "author": "losipiuk", "createdAt": "2020-07-09T11:43:26Z", "path": "presto-memsql/src/test/java/io/prestosql/plugin/memsql/TestMemSqlIntegrationSmokeTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.memsql;\n+\n+import io.prestosql.testing.AbstractTestIntegrationSmokeTest;\n+import io.prestosql.testing.MaterializedResult;\n+import io.prestosql.testing.MaterializedRow;\n+import io.prestosql.testing.QueryRunner;\n+import org.intellij.lang.annotations.Language;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.plugin.memsql.MemSqlQueryRunner.createMemSqlQueryRunner;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static io.prestosql.testing.MaterializedResult.resultBuilder;\n+import static io.prestosql.testing.assertions.Assert.assertEquals;\n+import static io.prestosql.tpch.TpchTable.CUSTOMER;\n+import static io.prestosql.tpch.TpchTable.NATION;\n+import static io.prestosql.tpch.TpchTable.ORDERS;\n+import static io.prestosql.tpch.TpchTable.REGION;\n+import static java.lang.String.format;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestMemSqlIntegrationSmokeTest\n+        extends AbstractTestIntegrationSmokeTest\n+{\n+    protected TestingMemSqlServer memSqlServer;\n+\n+    @Override\n+    protected QueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        memSqlServer = new TestingMemSqlServer();\n+        return createMemSqlQueryRunner(memSqlServer, CUSTOMER, NATION, ORDERS, REGION);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public final void destroy()\n+    {\n+        memSqlServer.close();\n+    }\n+\n+    @Test\n+    public void testDropTable()\n+    {\n+        assertUpdate(\"CREATE TABLE test_drop AS SELECT 123 x\", 1);\n+        assertTrue(getQueryRunner().tableExists(getSession(), \"test_drop\"));\n+\n+        assertUpdate(\"DROP TABLE test_drop\");\n+        assertFalse(getQueryRunner().tableExists(getSession(), \"test_drop\"));\n+    }\n+\n+    @Test\n+    public void testViews()\n+    {\n+        execute(\"CREATE VIEW tpch.test_view AS SELECT * FROM tpch.orders\");\n+        assertQuery(\"SELECT orderkey FROM test_view\", \"SELECT orderkey FROM orders\");\n+        execute(\"DROP VIEW IF EXISTS tpch.test_view\");\n+    }\n+\n+    @Test\n+    public void testInsert()\n+    {\n+        execute(\"CREATE TABLE tpch.test_insert (x bigint, y varchar(100))\");\n+        assertUpdate(\"INSERT INTO test_insert VALUES (123, 'test')\", 1);\n+        assertQuery(\"SELECT * FROM test_insert\", \"SELECT 123 x, 'test' y\");\n+        assertUpdate(\"DROP TABLE test_insert\");\n+    }\n+\n+    @Test\n+    public void testInsertInPresenceOfNotSupportedColumn()\n+    {\n+        execute(\"CREATE TABLE tpch.test_insert_not_supported_column_present(x bigint, y decimal(50,0), z varchar(10))\");\n+        // Check that column y is not supported.\n+        assertQuery(\"SELECT column_name FROM information_schema.columns WHERE table_name = 'test_insert_not_supported_column_present'\", \"VALUES 'x', 'z'\");\n+        assertUpdate(\"INSERT INTO test_insert_not_supported_column_present (x, z) VALUES (123, 'test')\", 1);\n+        assertQuery(\"SELECT x, z FROM test_insert_not_supported_column_present\", \"SELECT 123, 'test'\");\n+        assertUpdate(\"DROP TABLE test_insert_not_supported_column_present\");\n+    }\n+\n+    @Test\n+    public void testNameEscaping()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzODE3OQ==", "url": "https://github.com/trinodb/trino/pull/4401#discussion_r452238179", "bodyText": "see: dbd9288", "author": "sopel39", "createdAt": "2020-07-09T13:58:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1NjcxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1ODY5MQ==", "url": "https://github.com/trinodb/trino/pull/4401#discussion_r452158691", "bodyText": "just tag. Or inline in the IMAGE as memsql/cluster-in-a-box:centos..... We cannot override just tag anyway.", "author": "losipiuk", "createdAt": "2020-07-09T11:47:29Z", "path": "presto-memsql/src/test/java/io/prestosql/plugin/memsql/TestingMemSqlServer.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.memsql;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.testcontainers.containers.JdbcDatabaseContainer;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Set;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class TestingMemSqlServer\n+        extends JdbcDatabaseContainer<TestingMemSqlServer>\n+{\n+    private static final String MEM_SQL_LICENSE = requireNonNull(System.getProperty(\"memsql.license\"), \"memsql.license is not set\");\n+\n+    public static final String IMAGE = \"memsql/cluster-in-a-box\";\n+    public static final String DEFAULT_TAG = \"centos-7.1.4-516dfe4088-1.9.6-1.6.1\";", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5NTM3Mg==", "url": "https://github.com/trinodb/trino/pull/4401#discussion_r452395372", "bodyText": "Move this to be after phoenix. This list should be in the same order as the one below.", "author": "electrum", "createdAt": "2020-07-09T18:01:14Z", "path": ".github/workflows/ci.yml", "diffHunk": "@@ -135,7 +135,7 @@ jobs:\n             !presto-hive,!presto-orc,!presto-parquet,\n             !presto-mongodb,!presto-kafka,!presto-elasticsearch,\n             !presto-redis,\n-            !presto-sqlserver,!presto-postgresql,!presto-mysql,\n+            !presto-sqlserver,!presto-postgresql,!presto-mysql,!presto-memsql,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5NTgzMA==", "url": "https://github.com/trinodb/trino/pull/4401#discussion_r452395830", "bodyText": "This needs to be conditional, otherwise the tests will fail for PRs or forks when the secret is not available.", "author": "electrum", "createdAt": "2020-07-09T18:02:00Z", "path": ".github/workflows/ci.yml", "diffHunk": "@@ -161,6 +161,7 @@ jobs:\n           - \"presto-oracle\"\n           - \"presto-kudu\"\n           - \"presto-phoenix,presto-iceberg,presto-druid\"\n+          - \"presto-memsql -Dmemsql.license=${{ secrets.MemSqlLicense }}", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b56213f31c787523c78d6dea8dabffda4b5b3273", "url": "https://github.com/trinodb/trino/commit/b56213f31c787523c78d6dea8dabffda4b5b3273", "message": "Add memsql integration smoke tests", "committedDate": "2020-07-10T12:15:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2OTYxOA==", "url": "https://github.com/trinodb/trino/pull/4401#discussion_r452969618", "bodyText": "This last one is special and should stay last", "author": "electrum", "createdAt": "2020-07-10T17:12:47Z", "path": ".github/workflows/ci.yml", "diffHunk": "@@ -139,7 +139,8 @@ jobs:\n             !presto-oracle,\n             !presto-kudu,\n             !presto-phoenix,!presto-iceberg,!presto-druid,\n-            !presto-docs,!presto-server,!presto-server-rpm'\n+            !presto-docs,!presto-server,!presto-server-rpm',", "originalCommit": "b56213f31c787523c78d6dea8dabffda4b5b3273", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2OTczMw==", "url": "https://github.com/trinodb/trino/pull/4401#discussion_r452969733", "bodyText": "This should just be -pl presto-memsql", "author": "electrum", "createdAt": "2020-07-10T17:13:03Z", "path": ".github/workflows/ci.yml", "diffHunk": "@@ -173,6 +174,27 @@ jobs:\n       - name: Maven Tests\n         run: ./mvnw test -B -fae -Dair.check.skip-all -pl ${{ matrix.modules }}\n \n+  test-memsql:\n+    runs-on: ubuntu-latest\n+    strategy:\n+      fail-fast: false\n+    steps:\n+      - uses: actions/checkout@v2\n+      - uses: actions/setup-java@v1\n+        with:\n+          java-version: 11\n+      - name: Maven Install\n+        run: |\n+          export MAVEN_OPTS=\"${MAVEN_INSTALL_OPTS}\"\n+          ./bin/retry ./mvnw install ${MAVEN_FAST_INSTALL} -am -pl $(echo '${{ matrix.modules }}' | cut -d' ' -f1)", "originalCommit": "b56213f31c787523c78d6dea8dabffda4b5b3273", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "a3c2221df27604bca0a72881b0a90a3680ce12cb", "url": "https://github.com/trinodb/trino/commit/a3c2221df27604bca0a72881b0a90a3680ce12cb", "message": "Add memsql integration smoke tests", "committedDate": "2020-07-10T19:54:55Z", "type": "forcePushed"}, {"oid": "c5f7819187fb0df21cff702c57fd322472891edf", "url": "https://github.com/trinodb/trino/commit/c5f7819187fb0df21cff702c57fd322472891edf", "message": "Add memsql integration smoke tests", "committedDate": "2020-08-20T12:36:17Z", "type": "forcePushed"}, {"oid": "d0606095f811effef3c4e8b0c39c4da7fccba16e", "url": "https://github.com/trinodb/trino/commit/d0606095f811effef3c4e8b0c39c4da7fccba16e", "message": "Add memsql integration smoke tests", "committedDate": "2020-08-21T10:03:46Z", "type": "commit"}, {"oid": "d0606095f811effef3c4e8b0c39c4da7fccba16e", "url": "https://github.com/trinodb/trino/commit/d0606095f811effef3c4e8b0c39c4da7fccba16e", "message": "Add memsql integration smoke tests", "committedDate": "2020-08-21T10:03:46Z", "type": "forcePushed"}]}