{"pr_number": 3553, "pr_title": "DefaultTraversalVisitor improvements", "pr_createdAt": "2020-04-26T21:30:00Z", "pr_url": "https://github.com/trinodb/trino/pull/3553", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY1NTk0OQ==", "url": "https://github.com/trinodb/trino/pull/3553#discussion_r415655949", "bodyText": "undo", "author": "sopel39", "createdAt": "2020-04-27T09:27:41Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -1228,6 +1228,8 @@ protected Type visitExists(ExistsPredicate node, StackableAstVisitorContext<Cont\n             return setExpressionType(node, BOOLEAN);\n         }\n \n+", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyMjczMw==", "url": "https://github.com/trinodb/trino/pull/3553#discussion_r415722733", "bodyText": "Then object of this class cannot be reused.", "author": "kokosing", "createdAt": "2020-04-27T11:12:11Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/SubqueryPlanner.java", "diffHunk": "@@ -527,31 +527,37 @@ private PlanNode replaceExpressionsWithSymbols(PlanNode planNode, Map<NodeRef<Ex\n     }\n \n     private static class ColumnReferencesExtractor\n-            extends DefaultExpressionTraversalVisitor<Void, ImmutableSet.Builder<NodeRef<Expression>>>\n+            extends DefaultExpressionTraversalVisitor<Void, Void>", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1ODg3OA==", "url": "https://github.com/trinodb/trino/pull/3553#discussion_r415758878", "bodyText": "Yes, and it's not reused (there is no point to).\nThis is consistent with previous such changes: 0a97105", "author": "findepi", "createdAt": "2020-04-27T12:11:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyMjczMw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "293231dc10edbae8875ae037e704ea0fae14ead2", "url": "https://github.com/trinodb/trino/commit/293231dc10edbae8875ae037e704ea0fae14ead2", "message": "Fix visitLateral in DefaultTraversalVisitor\n\nMake it somewhat more consistent with other methods.\n\nActually `DefaultTraversalVisitor` did\n- return null\n- or return result of sub-process (in some cases where only one thing to visit)\n- call to super in this one case", "committedDate": "2020-04-27T12:12:45Z", "type": "commit"}, {"oid": "6b49178fd8a4d021b407a3c0d3534eca13b3372d", "url": "https://github.com/trinodb/trino/commit/6b49178fd8a4d021b407a3c0d3534eca13b3372d", "message": "Avoid DefaultTraversalVisitor in StatementAnalyzer\n\n`DefaultTraversalVisitor` does not provide useful implementation. Also,\nif we used some behavior inherited from `DefaultTraversalVisitor`,\nit would cause a `NullPointerException` in our `process` method were we\nassume `super.process` does not return `null` scope`.", "committedDate": "2020-04-27T12:12:46Z", "type": "commit"}, {"oid": "9c0cf70c6687f86ad1342c2b4da06c7935184c29", "url": "https://github.com/trinodb/trino/commit/9c0cf70c6687f86ad1342c2b4da06c7935184c29", "message": "Avoid DefaultTraversalVisitor in RelationPlanner\n\n`DefaultTraversalVisitor` does not provide useful implementation. Also,\nif we used some behavior inherited from `DefaultTraversalVisitor`,\nit would result in `null` `RelationPlan`, and subsequent\n`NullPointerException`.\n`NullPointerException` in our `process` method were we\nassume `super.process` does not return `null` scope`.", "committedDate": "2020-04-27T12:12:48Z", "type": "commit"}, {"oid": "00e9a6fdce0eebb0f79b4ff738d9d1366c2af666", "url": "https://github.com/trinodb/trino/commit/00e9a6fdce0eebb0f79b4ff738d9d1366c2af666", "message": "Move non-contextual state from Context to field", "committedDate": "2020-04-27T12:12:49Z", "type": "commit"}, {"oid": "425557f92206f9af8988378cf4503a46c17541b8", "url": "https://github.com/trinodb/trino/commit/425557f92206f9af8988378cf4503a46c17541b8", "message": "Fix incorrect visitor result type\n\nThe visitor always returned `null` result, and using `Node` as result\ntype was misleading.", "committedDate": "2020-04-27T12:12:50Z", "type": "commit"}, {"oid": "1d47c537436f7b2996af578bf50af665ead8a2e2", "url": "https://github.com/trinodb/trino/commit/1d47c537436f7b2996af578bf50af665ead8a2e2", "message": "Enforce DefaultTraversalVisitor Void result\n\nDefault implementation provided by `DefaultTraversalVisitor` is suitable\nfor `Void` result. Moreover, `DefaultTraversalVisitor` is useful base\nclass for when traversing a tree (a `Void` result), not when\ntransforming it (non-`Void` result).", "committedDate": "2020-04-27T12:12:51Z", "type": "commit"}, {"oid": "1d47c537436f7b2996af578bf50af665ead8a2e2", "url": "https://github.com/trinodb/trino/commit/1d47c537436f7b2996af578bf50af665ead8a2e2", "message": "Enforce DefaultTraversalVisitor Void result\n\nDefault implementation provided by `DefaultTraversalVisitor` is suitable\nfor `Void` result. Moreover, `DefaultTraversalVisitor` is useful base\nclass for when traversing a tree (a `Void` result), not when\ntransforming it (non-`Void` result).", "committedDate": "2020-04-27T12:12:51Z", "type": "forcePushed"}]}