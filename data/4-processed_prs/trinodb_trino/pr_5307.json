{"pr_number": 5307, "pr_title": "Add support for setting column comment in PostgreSQL", "pr_createdAt": "2020-09-27T06:05:51Z", "pr_url": "https://github.com/trinodb/trino/pull/5307", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5OTA3MQ==", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r495599071", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    stats.getAddColumn().wrap(() -> delegate().setColumnComment(identity, handle, column, comment));\n          \n          \n            \n                    stats.getSetColumnComment().wrap(() -> delegate().setColumnComment(identity, handle, column, comment));", "author": "kokosing", "createdAt": "2020-09-27T18:08:11Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/jmx/StatisticsAwareJdbcClient.java", "diffHunk": "@@ -158,6 +158,12 @@ public PreparedStatement buildSql(ConnectorSession session, Connection connectio\n         return stats.getBuildSql().wrap(() -> delegate().buildSql(session, connection, split, tableHandle, columnHandles));\n     }\n \n+    @Override\n+    public void setColumnComment(JdbcIdentity identity, JdbcTableHandle handle, JdbcColumnHandle column, Optional<String> comment)\n+    {\n+        stats.getAddColumn().wrap(() -> delegate().setColumnComment(identity, handle, column, comment));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5OTEyMg==", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r495599122", "bodyText": "What Optional.empty() means? A null?", "author": "kokosing", "createdAt": "2020-09-27T18:08:57Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/CachingJdbcClient.java", "diffHunk": "@@ -274,6 +274,13 @@ public void dropSchema(JdbcIdentity identity, String schemaName)\n         invalidateSchemasCache();\n     }\n \n+    @Override\n+    public void setColumnComment(JdbcIdentity identity, JdbcTableHandle handle, JdbcColumnHandle column, Optional<String> comment)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1MzUwMQ==", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r495653501", "bodyText": "Yes, it means null.", "author": "ebyhr", "createdAt": "2020-09-28T01:56:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5OTEyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5OTE3NQ==", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r495599175", "bodyText": "orElse(null)?", "author": "kokosing", "createdAt": "2020-09-27T18:09:25Z", "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -510,6 +510,17 @@ private static LongWriteFunction timestampWriteFunction(TimestampType timestampT\n         };\n     }\n \n+    @Override\n+    public void setColumnComment(JdbcIdentity identity, JdbcTableHandle handle, JdbcColumnHandle column, Optional<String> comment)\n+    {\n+        String sql = format(\n+                \"COMMENT ON COLUMN %s.%s IS '%s'\",\n+                quoted(handle.getRemoteTableName()),\n+                quoted(column.getColumnName()),\n+                comment.orElse(\"\"));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY1MzUwMw==", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r495653503", "bodyText": "I think generated sql from orElse(null) will be IS 'null'. My initial local implementation was like this. What do you think about it?\n        String sql = format(\n                \"COMMENT ON COLUMN %s.%s IS %s\",\n                quoted(handle.getRemoteTableName()),\n                quoted(column.getColumnName()),\n                comment.isPresent() ? format(\"'%s'\", comment.get()) : \"NULL\");", "author": "ebyhr", "createdAt": "2020-09-28T01:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5OTE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgwODYxOQ==", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r495808619", "bodyText": "we should not add a four-letter comment (with letters n, u, l, l) unless user explicitly requested that\nyou can think of that String.valueOf(null) returns \"null\" (and not something else)  is Presto's impl details and should not affected user visible behavior.", "author": "findepi", "createdAt": "2020-09-28T09:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5OTE3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5OTQxMg==", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r495599412", "bodyText": "PostgreSQL doesn't store empty comment\n\nThen maybe we should not allow users to set empty comments. Displaying nulls when empty string was set could be misleading.", "author": "kokosing", "createdAt": "2020-09-27T18:12:13Z", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlIntegrationSmokeTest.java", "diffHunk": "@@ -393,12 +393,18 @@ public void testColumnComment()\n     {\n         try (AutoCloseable ignore = withTable(\"tpch.test_column_comment\",\n                 \"(col1 bigint, col2 bigint, col3 bigint)\")) {\n-            execute(\"COMMENT ON COLUMN tpch.test_column_comment.col1 IS 'test comment'\");\n-            execute(\"COMMENT ON COLUMN tpch.test_column_comment.col2 IS ''\"); // it will be NULL, PostgreSQL doesn't store empty comment\n+            assertUpdate(\"COMMENT ON COLUMN tpch.test_column_comment.col1 IS 'test comment'\");\n+            assertUpdate(\"COMMENT ON COLUMN tpch.test_column_comment.col2 IS ''\"); // it will be NULL, PostgreSQL doesn't store empty comment", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYxMDI4Ng==", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r495610286", "bodyText": "PostgreSQL doesn't store empty comment\n\nThen maybe we should not allow users to set empty comments. Displaying nulls when empty string was set could be misleading.\n\narguably this ship has sailed -- we've deliberately followed this path in case of other connectors before.", "author": "findepi", "createdAt": "2020-09-27T20:07:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5OTQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1NTQ1Ng==", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r495855456", "bodyText": "arguably this ship has sailed -- we've deliberately followed this path in case of other connectors before.\n\nWhat postgres do when user do COMMENT ON COLUMN tpch.test_column_comment.col2 IS null?\nIf it fails we should fail as well. I don't want to comment other connector behaviour.", "author": "kokosing", "createdAt": "2020-09-28T10:58:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5OTQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0MTA4Mg==", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r495941082", "bodyText": "PostgreSQL removes a comment in case of IS NULL.\ntpch=# \\d+ tpch.test;\n                          Table \"tpch.test\"\n Column |  Type   | Modifiers | Storage | Stats target | Description\n--------+---------+-----------+---------+--------------+-------------\n c1     | integer |           | plain   |              | foo\n\ntpch=#\ntpch=# comment on column tpch.test.c1 is null;\nCOMMENT\ntpch=#\ntpch=# \\d+ tpch.test;\n                          Table \"tpch.test\"\n Column |  Type   | Modifiers | Storage | Stats target | Description\n--------+---------+-----------+---------+--------------+-------------\n c1     | integer |           | plain   |              |\nhttps://www.postgresql.org/docs/current/sql-comment.html\n\nTo remove a comment, write NULL in place of the text string", "author": "ebyhr", "createdAt": "2020-09-28T13:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5OTQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NzM2OA==", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r495947368", "bodyText": "What does it mean remove a comment? Insert null?\nWhat about\nSELECT d.description IS NULL FROM pg_description d, pg_class c WHERE  d.oid = c.oid AND c.relname = 'test'\n\n?", "author": "kokosing", "createdAt": "2020-09-28T13:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5OTQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3MTc0OQ==", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r495971749", "bodyText": "Yes, it inserts null.\ntpch=# \\pset null (null)\nNull display is \"(null)\".\ntpch=#\ntpch=# comment on column tpch.test.c1 is 'foo';\nCOMMENT\ntpch=#\ntpch=# select c.column_name, c.data_type, pgd.description, pgd.description is null\ntpch-# from pg_catalog.pg_statio_all_tables as st\ntpch-# inner join pg_catalog.pg_description pgd on (pgd.objoid=st.relid)\ntpch-# right outer join information_schema.columns c on (pgd.objsubid=c.ordinal_position and  c.table_schema=st.schemaname and c.table_name=st.relname)\ntpch-# where table_schema = 'tpch' and table_name = 'test';\n column_name | data_type | description | ?column?\n-------------+-----------+-------------+----------\n c1          | integer   | foo         | f\n(1 row)\n\ntpch=#\ntpch=# comment on column tpch.test.c1 is null;\nCOMMENT\ntpch=#\ntpch=# select c.column_name, c.data_type, pgd.description, pgd.description is null\ntpch-# from pg_catalog.pg_statio_all_tables as st\ntpch-# inner join pg_catalog.pg_description pgd on (pgd.objoid=st.relid)\ntpch-# right outer join information_schema.columns c on (pgd.objsubid=c.ordinal_position and  c.table_schema=st.schemaname and c.table_name=st.relname)\ntpch-# where table_schema = 'tpch' and table_name = 'test';\n column_name | data_type | description | ?column?\n-------------+-----------+-------------+----------\n c1          | integer   | (null)      | t\n(Changed query because it didn't return anything)", "author": "ebyhr", "createdAt": "2020-09-28T14:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5OTQxMg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI0MjIwNQ==", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r496242205", "bodyText": "it'd be better to generate explicit COMMENT ... IS NULL when comment.isEmpty()", "author": "findepi", "createdAt": "2020-09-28T21:26:38Z", "path": "presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java", "diffHunk": "@@ -510,6 +510,17 @@ private static LongWriteFunction timestampWriteFunction(TimestampType timestampT\n         };\n     }\n \n+    @Override\n+    public void setColumnComment(JdbcIdentity identity, JdbcTableHandle handle, JdbcColumnHandle column, Optional<String> comment)\n+    {\n+        String sql = format(\n+                \"COMMENT ON COLUMN %s.%s IS '%s'\",", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI0MjQwMA==", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r496242400", "bodyText": "Can you please define issues to cover other JDBC connectors?", "author": "findepi", "createdAt": "2020-09-28T21:27:06Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcClient.java", "diffHunk": "@@ -85,6 +88,11 @@ PreparedStatement buildSql(ConnectorSession session, Connection connection, Jdbc\n \n     boolean isLimitGuaranteed(ConnectorSession session);\n \n+    default void setColumnComment(JdbcIdentity identity, JdbcTableHandle handle, JdbcColumnHandle column, Optional<String> comment)\n+    {\n+        throw new PrestoException(NOT_SUPPORTED, \"This connector does not support setting column comments\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1NTYxMA==", "url": "https://github.com/trinodb/trino/pull/5307#discussion_r496355610", "bodyText": "Filed #5333", "author": "ebyhr", "createdAt": "2020-09-29T03:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI0MjQwMA=="}], "type": "inlineReview"}, {"oid": "fefef10197a66d1d5e980529c4a14e620d9060e2", "url": "https://github.com/trinodb/trino/commit/fefef10197a66d1d5e980529c4a14e620d9060e2", "message": "Add support for setting column comment in PostgreSQL", "committedDate": "2020-09-29T01:24:42Z", "type": "commit"}, {"oid": "fefef10197a66d1d5e980529c4a14e620d9060e2", "url": "https://github.com/trinodb/trino/commit/fefef10197a66d1d5e980529c4a14e620d9060e2", "message": "Add support for setting column comment in PostgreSQL", "committedDate": "2020-09-29T01:24:42Z", "type": "forcePushed"}]}