{"pr_number": 6088, "pr_title": "Fix container startup time measurements when start retried", "pr_createdAt": "2020-11-25T11:39:37Z", "pr_url": "https://github.com/trinodb/trino/pull/6088", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMDg3NA==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530500874", "bodyText": "typo", "author": "losipiuk", "createdAt": "2020-11-25T16:28:27Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -75,7 +77,13 @@\n             .with(Executors.newCachedThreadPool(daemonThreadsNamed(\"docker-container-%d\")));\n \n     private final String logicalName;\n-    private final Stopwatch startupTime = Stopwatch.createUnstarted();\n+\n+    // start is retried, we are recording the last attempt only\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUpCommenceTimeNanos = OptionalLong.empty();\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUFinishTimeNanos = OptionalLong.empty();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDUyMg==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530660522", "bodyText": "thanks, fixed", "author": "findepi", "createdAt": "2020-11-25T21:52:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMDg3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTA4OQ==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530501089", "bodyText": "what is Commence? Use stupid English.", "author": "losipiuk", "createdAt": "2020-11-25T16:28:45Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -75,7 +77,13 @@\n             .with(Executors.newCachedThreadPool(daemonThreadsNamed(\"docker-container-%d\")));\n \n     private final String logicalName;\n-    private final Stopwatch startupTime = Stopwatch.createUnstarted();\n+\n+    // start is retried, we are recording the last attempt only\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUpCommenceTimeNanos = OptionalLong.empty();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyNzI3Mw==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530627273", "bodyText": "Also let names to match the methods", "author": "kokosing", "createdAt": "2020-11-25T20:28:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY1OTU5MA==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530659590", "bodyText": "would `startUpStartUpTime\" be better? that's why i used this word.", "author": "findepi", "createdAt": "2020-11-25T21:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2OTMzNg==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530669336", "bodyText": "startUpBeginTime and startUpEndTime?", "author": "losipiuk", "createdAt": "2020-11-25T22:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY3MTI1Mg==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530671252", "bodyText": "i like my names more. Can it be the day when we learn a new word?\ni can still change if you want to.", "author": "findepi", "createdAt": "2020-11-25T22:19:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxNjQ2Mg==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530916462", "bodyText": "keep them", "author": "losipiuk", "createdAt": "2020-11-26T10:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTA4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyNTkyNQ==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530625925", "bodyText": "why synchronized? AtomicLong?", "author": "kokosing", "createdAt": "2020-11-25T20:25:22Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -152,23 +160,30 @@ public DockerContainer withHealthCheck(Path healthCheckScript)\n                 .withCreateContainerCmdModifier(command -> command.withHealthcheck(cmd));\n     }\n \n-    public Duration getStartupTime()\n+    public synchronized Duration getStartupTime()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY1OTc5Mg==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530659792", "bodyText": "would it be better if i made this atomic?", "author": "findepi", "createdAt": "2020-11-25T21:50:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyNTkyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyNzM1NA==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530627354", "bodyText": "This could be Duration", "author": "kokosing", "createdAt": "2020-11-25T20:28:43Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -75,7 +77,13 @@\n             .with(Executors.newCachedThreadPool(daemonThreadsNamed(\"docker-container-%d\")));\n \n     private final String logicalName;\n-    private final Stopwatch startupTime = Stopwatch.createUnstarted();\n+\n+    // start is retried, we are recording the last attempt only\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUpCommenceTimeNanos = OptionalLong.empty();\n+    @GuardedBy(\"this\")\n+    private OptionalLong lastStartUFinishTimeNanos = OptionalLong.empty();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDk3MA==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530660970", "bodyText": "i am storing actual data on a field and leaving rounding to the getter. I think it's a fair deal.", "author": "findepi", "createdAt": "2020-11-25T21:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYyNzM1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDEyOA==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530660128", "bodyText": "this should also reset lastStartUFinishTimeNanos", "author": "findepi", "createdAt": "2020-11-25T21:51:44Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -152,23 +160,30 @@ public DockerContainer withHealthCheck(Path healthCheckScript)\n                 .withCreateContainerCmdModifier(command -> command.withHealthcheck(cmd));\n     }\n \n-    public Duration getStartupTime()\n+    public synchronized Duration getStartupTime()\n     {\n-        return Duration.succinctNanos(startupTime.elapsed(NANOSECONDS)).convertToMostSuccinctTimeUnit();\n+        checkState(lastStartUpCommenceTimeNanos.isPresent(), \"Container did not commence starting\");\n+        checkState(lastStartUFinishTimeNanos.isPresent(), \"Container not started\");\n+        return Duration.succinctNanos(lastStartUFinishTimeNanos.getAsLong() - lastStartUpCommenceTimeNanos.getAsLong()).convertToMostSuccinctTimeUnit();\n     }\n \n     @Override\n     protected void containerIsStarting(InspectContainerResponse containerInfo)\n     {\n-        this.startupTime.start();\n+        synchronized (this) {\n+            lastStartUpCommenceTimeNanos = OptionalLong.of(System.nanoTime());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDgwMg==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530660802", "bodyText": "good catch, fixed", "author": "findepi", "createdAt": "2020-11-25T21:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2OTk3NQ==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530669975", "bodyText": "why?\nIt shoud verify if lastStartUFinishTimeNanos is empty. Rigth?", "author": "losipiuk", "createdAt": "2020-11-25T22:16:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY3MTAwMA==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530671000", "bodyText": "The whole point is that starts are retried (as per cmt msg  and @kokosing analysis in #6079)", "author": "findepi", "createdAt": "2020-11-25T22:19:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxNjI1NQ==", "url": "https://github.com/trinodb/trino/pull/6088#discussion_r530916255", "bodyText": "Ok - I thought that they are required only if thy do not reach actual \"started\" state.", "author": "losipiuk", "createdAt": "2020-11-26T10:11:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2MDEyOA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "91dbe124132c4fe7eb44163317b526145b47cc29", "url": "https://github.com/trinodb/trino/commit/91dbe124132c4fe7eb44163317b526145b47cc29", "message": "Fix container startup time measurements when start retried", "committedDate": "2020-11-26T14:51:57Z", "type": "commit"}, {"oid": "91dbe124132c4fe7eb44163317b526145b47cc29", "url": "https://github.com/trinodb/trino/commit/91dbe124132c4fe7eb44163317b526145b47cc29", "message": "Fix container startup time measurements when start retried", "committedDate": "2020-11-26T14:51:57Z", "type": "forcePushed"}]}