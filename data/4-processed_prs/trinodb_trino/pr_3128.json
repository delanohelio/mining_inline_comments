{"pr_number": 3128, "pr_title": "Support multiple event listener plugins", "pr_createdAt": "2020-03-17T15:39:08Z", "pr_url": "https://github.com/trinodb/trino/pull/3128", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3NjMxOA==", "url": "https://github.com/trinodb/trino/pull/3128#discussion_r394176318", "bodyText": "This could be extracted as method so you don't need to have uninitialized variable.", "author": "kokosing", "createdAt": "2020-03-18T08:30:38Z", "path": "presto-main/src/main/java/io/prestosql/eventlistener/EventListenerManager.java", "diffHunk": "@@ -55,59 +65,76 @@ public void addEventListenerFactory(EventListenerFactory eventListenerFactory)\n         }\n     }\n \n-    public void loadConfiguredEventListener()\n-            throws Exception\n+    public void loadConfiguredEventListeners()\n     {\n-        File configFile = CONFIG_FILE.getAbsoluteFile();\n-        if (!configFile.exists()) {\n-            return;\n+        checkState(loading.compareAndSet(false, true), \"Event listeners already loaded\");\n+\n+        List<File> configFiles = this.configFiles;\n+        if (configFiles.isEmpty()) {\n+            if (!CONFIG_FILE.exists()) {\n+                return;\n+            }\n+            configFiles = ImmutableList.of(CONFIG_FILE);\n         }\n-\n-        Map<String, String> properties = new HashMap<>(loadProperties(configFile));\n-\n-        String name = properties.remove(NAME_PROPERTY);\n-        checkState(!isNullOrEmpty(name), \"Access control configuration %s does not contain '%s'\", configFile, NAME_PROPERTY);\n-\n-        setConfiguredEventListener(name, properties);\n+        List<EventListener> eventListeners = configFiles.stream()\n+                .map(this::createEventListener)\n+                .collect(toImmutableList());\n+        this.configuredEventListeners.set(eventListeners);\n     }\n \n-    @VisibleForTesting\n-    protected void setConfiguredEventListener(String name, Map<String, String> properties)\n+    private EventListener createEventListener(File configFile)\n     {\n-        requireNonNull(name, \"name is null\");\n-        requireNonNull(properties, \"properties is null\");\n-\n-        log.info(\"-- Loading event listener --\");\n-\n-        EventListenerFactory eventListenerFactory = eventListenerFactories.get(name);\n-        checkState(eventListenerFactory != null, \"Event listener '%s' is not registered\", name);\n-\n-        try (ThreadContextClassLoader ignored = new ThreadContextClassLoader(eventListenerFactory.getClass().getClassLoader())) {\n-            EventListener eventListener = eventListenerFactory.create(ImmutableMap.copyOf(properties));\n-            this.configuredEventListener.set(Optional.of(eventListener));\n+        log.info(\"-- Loading event listener %s --\", configFile);\n+        configFile = configFile.getAbsoluteFile();\n+        Map<String, String> properties;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE3ODE1Ng==", "url": "https://github.com/trinodb/trino/pull/3128#discussion_r394178156", "bodyText": "Undo this rename. We are within the scope of event listener.", "author": "kokosing", "createdAt": "2020-03-18T08:34:13Z", "path": "presto-main/src/main/java/io/prestosql/eventlistener/EventListenerManager.java", "diffHunk": "@@ -13,38 +13,48 @@\n  */\n package io.prestosql.eventlistener;\n \n-import com.google.common.annotations.VisibleForTesting;\n-import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Inject;\n import io.airlift.log.Logger;\n-import io.prestosql.spi.classloader.ThreadContextClassLoader;\n import io.prestosql.spi.eventlistener.EventListener;\n import io.prestosql.spi.eventlistener.EventListenerFactory;\n import io.prestosql.spi.eventlistener.QueryCompletedEvent;\n import io.prestosql.spi.eventlistener.QueryCreatedEvent;\n import io.prestosql.spi.eventlistener.SplitCompletedEvent;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkState;\n import static com.google.common.base.Strings.isNullOrEmpty;\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n import static io.prestosql.util.PropertiesUtil.loadProperties;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class EventListenerManager\n {\n     private static final Logger log = Logger.get(EventListenerManager.class);\n-\n     private static final File CONFIG_FILE = new File(\"etc/event-listener.properties\");\n-    private static final String NAME_PROPERTY = \"event-listener.name\";\n-\n+    private static final String EVENT_LISTENER_NAME_PROPERTY = \"event-listener.name\";", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE4MDYwNA==", "url": "https://github.com/trinodb/trino/pull/3128#discussion_r394180604", "bodyText": "add should add, not replace entire collection.", "author": "kokosing", "createdAt": "2020-03-18T08:39:15Z", "path": "presto-main/src/main/java/io/prestosql/testing/TestingEventListenerManager.java", "diffHunk": "@@ -14,48 +14,58 @@\n package io.prestosql.testing;\n \n import com.google.common.collect.ImmutableMap;\n+import com.google.inject.Inject;\n+import io.prestosql.eventlistener.EventListenerConfig;\n import io.prestosql.eventlistener.EventListenerManager;\n import io.prestosql.spi.eventlistener.EventListener;\n import io.prestosql.spi.eventlistener.EventListenerFactory;\n import io.prestosql.spi.eventlistener.QueryCompletedEvent;\n import io.prestosql.spi.eventlistener.QueryCreatedEvent;\n import io.prestosql.spi.eventlistener.SplitCompletedEvent;\n \n-import java.util.Optional;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n \n public class TestingEventListenerManager\n         extends EventListenerManager\n {\n-    private final AtomicReference<Optional<EventListener>> configuredEventListener = new AtomicReference<>(Optional.empty());\n+    private final AtomicReference<Set<EventListener>> configuredEventListeners = new AtomicReference<>(new HashSet<>());\n+\n+    @Inject\n+    public TestingEventListenerManager(EventListenerConfig config)\n+    {\n+        super(config);\n+    }\n \n     @Override\n     public void addEventListenerFactory(EventListenerFactory eventListenerFactory)\n     {\n-        configuredEventListener.set(Optional.of(eventListenerFactory.create(ImmutableMap.of())));\n+        configuredEventListeners.set(Collections.singleton(eventListenerFactory.create(ImmutableMap.of())));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3c7bd73c7c1971069a63a6881f42dd9796606426", "url": "https://github.com/trinodb/trino/commit/3c7bd73c7c1971069a63a6881f42dd9796606426", "message": "Support multiple event listener plugins", "committedDate": "2020-03-18T19:25:37Z", "type": "commit"}, {"oid": "3c7bd73c7c1971069a63a6881f42dd9796606426", "url": "https://github.com/trinodb/trino/commit/3c7bd73c7c1971069a63a6881f42dd9796606426", "message": "Support multiple event listener plugins", "committedDate": "2020-03-18T19:25:37Z", "type": "forcePushed"}]}