{"pr_number": 2560, "pr_title": "Fix rule for aggregation through outer join pushdown", "pr_createdAt": "2020-01-20T19:33:18Z", "pr_url": "https://github.com/trinodb/trino/pull/2560", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkwNTI0OA==", "url": "https://github.com/trinodb/trino/pull/2560#discussion_r368905248", "bodyText": "is using symbols name is confusing. It seems that if any symbol from source is being used, this method should return true. Please use different name, e.g\nisAggregationOnSymbols", "author": "sopel39", "createdAt": "2020-01-21T09:58:14Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PushAggregationThroughOuterJoin.java", "diffHunk": "@@ -328,15 +321,14 @@ private static boolean groupsOnAllColumns(AggregationNode node, List<Symbol> col\n                 Optional.empty(),\n                 Optional.empty());\n \n-        return Optional.of(new MappedAggregationInfo(aggregationOverNullRow, aggregationsSymbolMapping));\n+        return new MappedAggregationInfo(aggregationOverNullRow, aggregationsSymbolMapping);\n     }\n \n-    private static boolean isUsingSymbols(AggregationNode.Aggregation aggregation, Set<Symbol> sourceSymbols)\n+    private static boolean isUsingSymbols(AggregationNode aggregationNode, PlanNode source)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkwNTkwMQ==", "url": "https://github.com/trinodb/trino/pull/2560#discussion_r368905901", "bodyText": "We want all aggregations to be from outer side exclusively, no?\nShouldn't this be:\n!isUsingSymbols(aggregation, getOuterTable(join))\n\n?\nAlso, didn't previous code deal with mixed aggregations?", "author": "sopel39", "createdAt": "2020-01-21T09:59:33Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PushAggregationThroughOuterJoin.java", "diffHunk": "@@ -120,7 +122,8 @@ public Result apply(AggregationNode aggregation, Captures captures, Context cont\n         if (join.getFilter().isPresent()\n                 || !(join.getType() == JoinNode.Type.LEFT || join.getType() == JoinNode.Type.RIGHT)\n                 || !groupsOnAllColumns(aggregation, getOuterTable(join).getOutputSymbols())\n-                || !isDistinct(context.getLookup().resolve(getOuterTable(join)), context.getLookup()::resolve)) {\n+                || !isDistinct(context.getLookup().resolve(getOuterTable(join)), context.getLookup()::resolve)\n+                || !isUsingSymbols(aggregation, getInnerTable(join))) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzNDY1NQ==", "url": "https://github.com/trinodb/trino/pull/2560#discussion_r368934655", "bodyText": "We want all aggregations to be from outer side exclusively, no?\n\nI'm not sure if the naming here is correct. I just followed the convention. It says \"inner table\" when referring to the right table of LEFT join.\nWe want to push the AggregationNode into the right source of LEFT join or into the left source of RIGHT join.\n\nAlso, didn't previous code deal with mixed aggregations?\n\nIt seemed so, because it only required that some of the Aggregation symbols matched the source. But it failed on mixed aggregations (vide the test cases I added).\nThis PR is just a fix. Further we could extend the rule to remap Aggregations by equi-clauses before pushdown.", "author": "kasiafi", "createdAt": "2020-01-21T10:57:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkwNTkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzNjIzNg==", "url": "https://github.com/trinodb/trino/pull/2560#discussion_r368936236", "bodyText": "I'm not sure if the naming here is correct. I just followed the convention. It says \"inner table\" when referring to the right table of LEFT join.\n\nRight, I confused the names. Thanks", "author": "sopel39", "createdAt": "2020-01-21T11:01:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkwNTkwMQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "21d51040dc5d083f7ad02f846112a0f1836c9715", "url": "https://github.com/trinodb/trino/commit/21d51040dc5d083f7ad02f846112a0f1836c9715", "message": "Fix typo", "committedDate": "2020-02-08T00:14:10Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjczNDQ1Nw==", "url": "https://github.com/trinodb/trino/pull/2560#discussion_r376734457", "bodyText": "this query passes before the change\nnit: stuttered space", "author": "findepi", "createdAt": "2020-02-08T21:06:43Z", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestAggregations.java", "diffHunk": "@@ -89,6 +89,32 @@ public void testAggregationPushdownThroughOuterJoinNotFiringInCorrelatedAggregat\n                 \"VALUES 1\");\n     }\n \n+    /**\n+     * This case tests that Aggregation isn't incorrectly pushed down into inner source of JoinNode\n+     * in the case when it uses symbols from the outer source of JoinNode.\n+     */\n+    @Test\n+    public void testAggregationUsingOuterTableSymbols()\n+    {\n+        assertQuery(\n+                \"SELECT max(r.regionkey * n.nationkey) FROM (SELECT DISTINCT regionkey FROM region) r LEFT JOIN nation n ON n.regionkey = r.regionkey  GROUP BY r.regionkey\",", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjczNDU0MQ==", "url": "https://github.com/trinodb/trino/pull/2560#discussion_r376734541", "bodyText": "This test creates necessary circumstances for the count(*) to be pushed down, but doesn't test it's being pushed. I think some explanation is useful, so do not remove. Reword.", "author": "findepi", "createdAt": "2020-02-08T21:08:36Z", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestAggregations.java", "diffHunk": "@@ -89,6 +89,32 @@ public void testAggregationPushdownThroughOuterJoinNotFiringInCorrelatedAggregat\n                 \"VALUES 1\");\n     }\n \n+    /**\n+     * This case tests that Aggregation isn't incorrectly pushed down into inner source of JoinNode\n+     * in the case when it uses symbols from the outer source of JoinNode.\n+     */\n+    @Test\n+    public void testAggregationUsingOuterTableSymbols()\n+    {\n+        assertQuery(\n+                \"SELECT max(r.regionkey * n.nationkey) FROM (SELECT DISTINCT regionkey FROM region) r LEFT JOIN nation n ON n.regionkey = r.regionkey  GROUP BY r.regionkey\",\n+                \"VALUES 0, 24, 42, 69, 80\");\n+    }\n+\n+    /**\n+     * This case tests that Aggregation count(*) can be successfully pushed down into inner source of JoinNode.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjczNDg2NQ==", "url": "https://github.com/trinodb/trino/pull/2560#discussion_r376734865", "bodyText": "If the aggregation has a hash symbol, it probably comes from the join's outer table (since aggregation is on outer table's outputs). But then, it's an additional output symbol and not grouping key of the aggregation, so the groupsOnAllColumns cannot be satisfied.\nI think this rule doesn't have -- and doesn't have to have -- ambitions to handle hash symbols.\nIt's enough if it detects this situation and bails out.", "author": "findepi", "createdAt": "2020-02-08T21:14:21Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PushAggregationThroughOuterJoin.java", "diffHunk": "@@ -140,6 +140,11 @@ public Result apply(AggregationNode aggregation, Captures captures, Context cont\n                 aggregation.getHashSymbol(),\n                 aggregation.getGroupIdSymbol());\n \n+        ImmutableList.Builder<Symbol> outputSymbols = ImmutableList.<Symbol>builder()\n+                .addAll(getOuterTable(join).getOutputSymbols());\n+        aggregation.getHashSymbol().ifPresent(outputSymbols::add);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9327523eb0df7c8dfc217f960ea8dbdbb090525f", "url": "https://github.com/trinodb/trino/commit/9327523eb0df7c8dfc217f960ea8dbdbb090525f", "message": "Fix rule matching for Aggregation through Join pushdown\n\nFor successful pushdown of AggregationNode into JoinNode's source\nit is required that all symbols used by Aggregations be present\nin that source.\nBefore this change, it was not fully checked and thus an Aggregation\nusing multiple symbols could be incorrectly pushed down\nto a source which didn't provide all the required symbols.\n\nThis change introduces a complete check for required symbols and moves\nthe check to earlier stage of rule application.", "committedDate": "2020-02-09T15:38:57Z", "type": "commit"}, {"oid": "1d5fde7e84a9019e45b9dfaa2b23e24c837cffef", "url": "https://github.com/trinodb/trino/commit/1d5fde7e84a9019e45b9dfaa2b23e24c837cffef", "message": "Do not pushdown Aggregation with multiple grouping sets\n\nBefore this change, the rule PushAggregationThroughOuterJoin\npushed Aggregation into the inner source of Join regardless\nof the number of grouping sets. It was only checked that\ngrouping keys were equal to output symbols of the outer source\nof Join. Pushdown is correct only when there'e a single grouping\nset.\n\nExample of incorrect pushdown:\n- Aggregation\n\tcount(*)\n\tgrouping sets {a}, {b}\n\t- LEFT Join (a=c)\n\t\t- Values (a, b)\n\t\t  \t (1, 2)\n\t\t- Values (c)\n\t\t  \t (1)\nwas incorrectly transformed into\n- LEFT Join (a=c)\n\t- Values (a, b)\n\t  \t (1, 2)\n\t- Aggregation\n\t  \tcount(*)\n\t\tsingle grouping set {c}\n\t\t- Values (c)\n\t\t  \t (1)\n\nThe result before rewrite has 2 rows; after rewrite it is 1 row.\n\nNote: this correctness issue might never occur because\nAggregationNode with multiple grouping sets has a GroupIdNode\nbelow, and so the rule doesn't match.", "committedDate": "2020-02-09T15:38:57Z", "type": "commit"}, {"oid": "ec7b1bcd48aed34b31e12d677490430b00d17f36", "url": "https://github.com/trinodb/trino/commit/ec7b1bcd48aed34b31e12d677490430b00d17f36", "message": "Add check for Aggregation's hash symbol in a rule", "committedDate": "2020-02-09T15:50:53Z", "type": "commit"}, {"oid": "ec7b1bcd48aed34b31e12d677490430b00d17f36", "url": "https://github.com/trinodb/trino/commit/ec7b1bcd48aed34b31e12d677490430b00d17f36", "message": "Add check for Aggregation's hash symbol in a rule", "committedDate": "2020-02-09T15:50:53Z", "type": "forcePushed"}]}