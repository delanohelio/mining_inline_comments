{"pr_number": 5163, "pr_title": "Add WITH RECURSIVE documentation", "pr_createdAt": "2020-09-15T00:16:09Z", "pr_url": "https://github.com/trinodb/trino/pull/5163", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0Nzk3NA==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r489247974", "bodyText": "It is not correct to say that WITH RECURSIVE clause defines a union of relations.\nAfter the words WITH RECURSIVE, there comes a list of queries. Each of those queries is potentially recursive. Some might be actually recursive, some might be not. Each of those queries which are actually recursive, defines a union of two relations.\nWe know that a query in the list is actually recursive when it meets certain conditions, roughly speaking:\n\nit is shaped as union,\nit has a recursive reference to its own name.", "author": "kasiafi", "createdAt": "2020-09-16T08:12:36Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,62 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+\n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It defines a\n+``UNION`` of two relations. The first relation is called the *recursion base*,\n+and the second relation is called the *recursion step*:", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwODIwMg==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r489808202", "bodyText": "Updated .. please verify", "author": "mosabua", "createdAt": "2020-09-16T23:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0Nzk3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1NDM1NQ==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r489254355", "bodyText": "Following what I said before, this is not a full form of WITH RECURSIVE clause. I think it should be mentioned. This is the simplest and, probably, the most common form - it only has a single query in the list.\nAlso, please clean up the multiple dots and surrounding spaces in this code block.", "author": "kasiafi", "createdAt": "2020-09-16T08:23:13Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,62 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+\n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It defines a\n+``UNION`` of two relations. The first relation is called the *recursion base*,\n+and the second relation is called the *recursion step*:\n+\n+.. code-block:: none\n+\n+    WITH RECURSIVE T(n) AS (\n+    <recursion base relation>\n+    UNION (ALL | DISTINCT)\n+    <recursion step relation: SELECT .. FROM ... T...>\n+    )\n+    ... SELECT ... FROM T", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwOTYyMg==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r489809622", "bodyText": "I am not sure how you want this cleaned up. Also could we actually make it an example that replaces the <recursion base relation> with some actual values (or a query).", "author": "mosabua", "createdAt": "2020-09-16T23:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1NDM1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1NDQ0OQ==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r489254449", "bodyText": "It defaults to 10 if I recall correctly.", "author": "kasiafi", "createdAt": "2020-09-16T08:23:23Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,62 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+\n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It defines a\n+``UNION`` of two relations. The first relation is called the *recursion base*,\n+and the second relation is called the *recursion step*:\n+\n+.. code-block:: none\n+\n+    WITH RECURSIVE T(n) AS (\n+    <recursion base relation>\n+    UNION (ALL | DISTINCT)\n+    <recursion step relation: SELECT .. FROM ... T...>\n+    )\n+    ... SELECT ... FROM T\n+\n+Presto supports recursive ``WITH``-queries with a single recursive reference to\n+a ``WITH``-query from within the query. The name ``T`` of the query ``T`` can be\n+mentioned once in the ``FROM`` clause of the recursion step relation.\n+\n+Logically, the recursive query processing is a sequence of actions:\n+\n+- compute the recursion base\n+- compute the recursion step using the precomputed base where the relation name\n+  is mentioned\n+- compute the next step using the previous step\n+- repeat until the recursion converges, which means an empty relation is\n+  obtained\n+- union the base and all the steps, and return it as the result\n+\n+The types of the returned columns are those of the base relation. Therefore it\n+is required that types in the step relation can be coerced to base relation\n+types.\n+\n+The ``RECURSIVE`` clause applies to all queries in the ``WITH`` list, but not\n+all of them must be recursive. If a ``WITH``-query is not shaped according to\n+the rules mentioned above or it does not contain a recursive reference, it is\n+processed like a regular ``WITH``-query. Column aliases are mandatory for all\n+the queries in the recursive ``WITH`` list.\n+\n+The following limitations apply as a result of following the SQL standard and\n+due to implementation choices, in addition to ``WITH`` clause limitations:\n+\n+- only single-element recursive cycles are supported. Like in regular\n+  ``WITH``-queries, references to previous queries in the ``WITH`` list are\n+  allowed. References to following queries are forbidden.\n+- usage of outer joins, set operations, limit clause, and others is not always\n+  allowed in the step relation\n+- recursion depth is fixed, defaults to ``1``, and doesn't depend on the actual\n+  query results", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgxMTMzNQ==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r489811335", "bodyText": "fixed", "author": "mosabua", "createdAt": "2020-09-16T23:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1NDQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1NTM1OQ==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r489255359", "bodyText": "typo?", "author": "kasiafi", "createdAt": "2020-09-16T08:24:57Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,62 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+\n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It defines a\n+``UNION`` of two relations. The first relation is called the *recursion base*,\n+and the second relation is called the *recursion step*:\n+\n+.. code-block:: none\n+\n+    WITH RECURSIVE T(n) AS (\n+    <recursion base relation>\n+    UNION (ALL | DISTINCT)\n+    <recursion step relation: SELECT .. FROM ... T...>\n+    )\n+    ... SELECT ... FROM T\n+\n+Presto supports recursive ``WITH``-queries with a single recursive reference to\n+a ``WITH``-query from within the query. The name ``T`` of the query ``T`` can be\n+mentioned once in the ``FROM`` clause of the recursion step relation.\n+\n+Logically, the recursive query processing is a sequence of actions:\n+\n+- compute the recursion base\n+- compute the recursion step using the precomputed base where the relation name\n+  is mentioned\n+- compute the next step using the previous step\n+- repeat until the recursion converges, which means an empty relation is\n+  obtained\n+- union the base and all the steps, and return it as the result\n+\n+The types of the returned columns are those of the base relation. Therefore it\n+is required that types in the step relation can be coerced to base relation\n+types.\n+\n+The ``RECURSIVE`` clause applies to all queries in the ``WITH`` list, but not\n+all of them must be recursive. If a ``WITH``-query is not shaped according to\n+the rules mentioned above or it does not contain a recursive reference, it is\n+processed like a regular ``WITH``-query. Column aliases are mandatory for all\n+the queries in the recursive ``WITH`` list.\n+\n+The following limitations apply as a result of following the SQL standard and\n+due to implementation choices, in addition to ``WITH`` clause limitations:\n+\n+- only single-element recursive cycles are supported. Like in regular\n+  ``WITH``-queries, references to previous queries in the ``WITH`` list are\n+  allowed. References to following queries are forbidden.\n+- usage of outer joins, set operations, limit clause, and others is not always\n+  allowed in the step relation\n+- recursion depth is fixed, defaults to ``1``, and doesn't depend on the actual\n+  query results\n+\n+You can adjusted by the recursion depth with the session property", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgxMTMxNw==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r489811317", "bodyText": "fixed", "author": "mosabua", "createdAt": "2020-09-16T23:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1NTM1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1NTQ4MQ==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r489255481", "bodyText": "typo?", "author": "kasiafi", "createdAt": "2020-09-16T08:25:07Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,62 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+\n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It defines a\n+``UNION`` of two relations. The first relation is called the *recursion base*,\n+and the second relation is called the *recursion step*:\n+\n+.. code-block:: none\n+\n+    WITH RECURSIVE T(n) AS (\n+    <recursion base relation>\n+    UNION (ALL | DISTINCT)\n+    <recursion step relation: SELECT .. FROM ... T...>\n+    )\n+    ... SELECT ... FROM T\n+\n+Presto supports recursive ``WITH``-queries with a single recursive reference to\n+a ``WITH``-query from within the query. The name ``T`` of the query ``T`` can be\n+mentioned once in the ``FROM`` clause of the recursion step relation.\n+\n+Logically, the recursive query processing is a sequence of actions:\n+\n+- compute the recursion base\n+- compute the recursion step using the precomputed base where the relation name\n+  is mentioned\n+- compute the next step using the previous step\n+- repeat until the recursion converges, which means an empty relation is\n+  obtained\n+- union the base and all the steps, and return it as the result\n+\n+The types of the returned columns are those of the base relation. Therefore it\n+is required that types in the step relation can be coerced to base relation\n+types.\n+\n+The ``RECURSIVE`` clause applies to all queries in the ``WITH`` list, but not\n+all of them must be recursive. If a ``WITH``-query is not shaped according to\n+the rules mentioned above or it does not contain a recursive reference, it is\n+processed like a regular ``WITH``-query. Column aliases are mandatory for all\n+the queries in the recursive ``WITH`` list.\n+\n+The following limitations apply as a result of following the SQL standard and\n+due to implementation choices, in addition to ``WITH`` clause limitations:\n+\n+- only single-element recursive cycles are supported. Like in regular\n+  ``WITH``-queries, references to previous queries in the ``WITH`` list are\n+  allowed. References to following queries are forbidden.\n+- usage of outer joins, set operations, limit clause, and others is not always\n+  allowed in the step relation\n+- recursion depth is fixed, defaults to ``1``, and doesn't depend on the actual\n+  query results\n+\n+You can adjusted by the recursion depth with the session property\n+``max_recursion_depth``. When changing the value consider that the size of the\n+query plan grows is quadratic with recursion depth.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgxMDY0MA==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r489810640", "bodyText": "fixed", "author": "mosabua", "createdAt": "2020-09-16T23:35:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1NTQ4MQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MTk1NA==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r490141954", "bodyText": "I'd say \"define\" or \"introduce\" instead of \"process\".", "author": "kasiafi", "createdAt": "2020-09-17T10:35:00Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,76 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+\n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It can\n+process a list of queries, including recursive processing.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAyNDQyOA==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r491024428", "bodyText": "Done", "author": "mosabua", "createdAt": "2020-09-18T15:24:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0MTk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NzM2NQ==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r490147365", "bodyText": "typo in word \"It\"", "author": "kasiafi", "createdAt": "2020-09-17T10:45:19Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,76 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+\n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It can\n+process a list of queries, including recursive processing.\n+\n+.. warning::\n+\n+    This feature is experimental only. Proceed to use it only if you understand\n+    potential query failures and the impact of the recursion processing on your\n+    workload.\n+\n+The recursive queries are detected automatically on the following criteria:\n+\n+- It defines a ``UNION`` of two relations. The first relation is called the\n+  *recursion base*, and the second relation is called the *recursion step*.\n+- Tt has a recursive reference to its own name.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAyNDYzNA==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r491024634", "bodyText": "fixed", "author": "mosabua", "createdAt": "2020-09-18T15:25:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NzM2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0ODUwMw==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r490148503", "bodyText": "I agree that we could have a real example here, e.g. this one\nWITH RECURSIVE t(n) AS (\nVALUES (1)\nUNION ALL\nSELECT n+1 FROM t WHERE n < 4\n)\nSELECT sum(n) FROM t;\n\nwith the result it returns:\n _col0\n-------\n    10\n(1 row)\n\nand then explain which part of the query is the recursion base, and which is the recursion step", "author": "kasiafi", "createdAt": "2020-09-17T10:47:44Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,76 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+\n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It can\n+process a list of queries, including recursive processing.\n+\n+.. warning::\n+\n+    This feature is experimental only. Proceed to use it only if you understand\n+    potential query failures and the impact of the recursion processing on your\n+    workload.\n+\n+The recursive queries are detected automatically on the following criteria:\n+\n+- It defines a ``UNION`` of two relations. The first relation is called the\n+  *recursion base*, and the second relation is called the *recursion step*.\n+- Tt has a recursive reference to its own name.\n+\n+The following listing shows a simple example, that displays a commonly used\n+form of only one query in the list:\n+\n+.. code-block:: none\n+\n+    WITH RECURSIVE T(n) AS (\n+    <recursion base relation>\n+    UNION (ALL | DISTINCT)\n+    <recursion step relation: SELECT  FROM ... T...>\n+    )\n+    ... SELECT ... FROM T", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA0MDMwOA==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r491040308", "bodyText": "Done", "author": "mosabua", "createdAt": "2020-09-18T15:51:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0ODUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1MzkwNA==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r490153904", "bodyText": "We could move this section above the example so that it introduces the example.\nIt could then be merged with the section:\nThe recursive queries are detected automatically on the following criteria:\n\n- It defines a ``UNION`` of two relations. The first relation is called the\n  *recursion base*, and the second relation is called the *recursion step*.\n- Tt has a recursive reference to its own name.\n\ntogether it could look like this:\nA recursive ``WITH``-query must be shaped as a ``UNON`` of two relations. The first\nrelation is called the *recursion base*, and the second relation is called the *recursion step*.\nPresto supports recursive ``WITH``-queries with a single recursive reference to\na ``WITH``-query from within the query. The name ``T`` of the query ``T`` can be\nmentioned once in the ``FROM`` clause of the recursion step relation.", "author": "kasiafi", "createdAt": "2020-09-17T10:58:47Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,76 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+\n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It can\n+process a list of queries, including recursive processing.\n+\n+.. warning::\n+\n+    This feature is experimental only. Proceed to use it only if you understand\n+    potential query failures and the impact of the recursion processing on your\n+    workload.\n+\n+The recursive queries are detected automatically on the following criteria:\n+\n+- It defines a ``UNION`` of two relations. The first relation is called the\n+  *recursion base*, and the second relation is called the *recursion step*.\n+- Tt has a recursive reference to its own name.\n+\n+The following listing shows a simple example, that displays a commonly used\n+form of only one query in the list:\n+\n+.. code-block:: none\n+\n+    WITH RECURSIVE T(n) AS (\n+    <recursion base relation>\n+    UNION (ALL | DISTINCT)\n+    <recursion step relation: SELECT  FROM ... T...>\n+    )\n+    ... SELECT ... FROM T\n+\n+Presto supports recursive ``WITH``-queries with a single recursive reference to\n+a ``WITH``-query from within the query. The name ``T`` of the query ``T`` can be\n+mentioned once in the ``FROM`` clause of the recursion step relation.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA0MzQ0Mg==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r491043442", "bodyText": "I move it above and left the generic code as well for now.", "author": "mosabua", "createdAt": "2020-09-18T15:56:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1MzkwNA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyMTA5Nw==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r492521097", "bodyText": "I think we don't need this generic example. The other example + explanation is enough.", "author": "kasiafi", "createdAt": "2020-09-22T07:19:54Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,95 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It can define\n+a list of queries to process, including recursive processing of suitable\n+queries.\n+\n+.. warning::\n+\n+    This feature is experimental only. Proceed to use it only if you understand\n+    potential query failures and the impact of the recursion processing on your\n+    workload.\n+\n+.. code-block:: none\n+\n+   WITH RECURSIVE T(n) AS (\n+    <recursion base relation>\n+    UNION (ALL | DISTINCT)\n+    <recursion step relation: SELECT  FROM ... T...>\n+    )\n+    ... SELECT ... FROM T", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MzA0Mg==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r493053042", "bodyText": "ok .. removed", "author": "mosabua", "createdAt": "2020-09-22T21:48:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyMTA5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyMzM1Mg==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r492523352", "bodyText": "t also has the result of the recursion base (1). Without it, the resulting sum is wrong.", "author": "kasiafi", "createdAt": "2020-09-22T07:24:26Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,95 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It can define\n+a list of queries to process, including recursive processing of suitable\n+queries.\n+\n+.. warning::\n+\n+    This feature is experimental only. Proceed to use it only if you understand\n+    potential query failures and the impact of the recursion processing on your\n+    workload.\n+\n+.. code-block:: none\n+\n+   WITH RECURSIVE T(n) AS (\n+    <recursion base relation>\n+    UNION (ALL | DISTINCT)\n+    <recursion step relation: SELECT  FROM ... T...>\n+    )\n+    ... SELECT ... FROM T\n+\n+A recursive ``WITH``-query must be shaped as a ``UNON`` of two relations. The\n+first relation is called the *recursion base*, and the second relation is called\n+the *recursion step*. Presto supports recursive ``WITH``-queries with a single\n+recursive reference to a ``WITH``-query from within the query. The name ``T`` of\n+the query ``T`` can be mentioned once in the ``FROM`` clause of the recursion\n+step relation.\n+\n+The following listing shows a simple example, that displays a commonly used\n+form of only one query in the list:\n+\n+.. code-block:: none\n+\n+    WITH RECURSIVE t(n) AS (\n+        VALUES (1)\n+        UNION ALL\n+        SELECT n+1 FROM t WHERE n < 4\n+    )\n+    SELECT sum(n) FROM t;\n+\n+In the preceding query the simple assignment ``VALUES (1)`` defines the\n+recursion base relation. ``SELECT n+1 FROM t WHERE n < 4`` defines the recursion\n+step relation. The recursion processing performs these steps:\n+\n+- first recursion yields ``1 + 1 = 2``\n+- second recursion uses the result from the first and adds one: ``2 + 1 = 3``\n+- third recursion users the result from the second and adds one again:\n+  ``3 + 1 = 4``\n+- fourth recursion aborts since ``n = 4``\n+- this results in ``t`` having values ``2``, ``3`` and ``4``", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MzI4Nw==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r493053287", "bodyText": "oops... totally forgot about that..", "author": "mosabua", "createdAt": "2020-09-22T21:49:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyMzM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyNTQxMg==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r492525412", "bodyText": "To simplify the example, I suggest that we do just SELECT * FROM t in the final line instead of sum(n).\nThat would clearly show that the resulting table consists of all the intermediate results including the recursion base. It should have one column with rows 1, 2, 3, 4.", "author": "kasiafi", "createdAt": "2020-09-22T07:28:25Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,95 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It can define\n+a list of queries to process, including recursive processing of suitable\n+queries.\n+\n+.. warning::\n+\n+    This feature is experimental only. Proceed to use it only if you understand\n+    potential query failures and the impact of the recursion processing on your\n+    workload.\n+\n+.. code-block:: none\n+\n+   WITH RECURSIVE T(n) AS (\n+    <recursion base relation>\n+    UNION (ALL | DISTINCT)\n+    <recursion step relation: SELECT  FROM ... T...>\n+    )\n+    ... SELECT ... FROM T\n+\n+A recursive ``WITH``-query must be shaped as a ``UNON`` of two relations. The\n+first relation is called the *recursion base*, and the second relation is called\n+the *recursion step*. Presto supports recursive ``WITH``-queries with a single\n+recursive reference to a ``WITH``-query from within the query. The name ``T`` of\n+the query ``T`` can be mentioned once in the ``FROM`` clause of the recursion\n+step relation.\n+\n+The following listing shows a simple example, that displays a commonly used\n+form of only one query in the list:\n+\n+.. code-block:: none\n+\n+    WITH RECURSIVE t(n) AS (\n+        VALUES (1)\n+        UNION ALL\n+        SELECT n+1 FROM t WHERE n < 4\n+    )\n+    SELECT sum(n) FROM t;\n+\n+In the preceding query the simple assignment ``VALUES (1)`` defines the\n+recursion base relation. ``SELECT n+1 FROM t WHERE n < 4`` defines the recursion\n+step relation. The recursion processing performs these steps:\n+\n+- first recursion yields ``1 + 1 = 2``\n+- second recursion uses the result from the first and adds one: ``2 + 1 = 3``\n+- third recursion users the result from the second and adds one again:\n+  ``3 + 1 = 4``\n+- fourth recursion aborts since ``n = 4``\n+- this results in ``t`` having values ``2``, ``3`` and ``4``\n+- the final statement performs the sum operation of these elements with the\n+  final result value ``10``", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1NzA0Ng==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r493057046", "bodyText": "Then we loose the syntax that exposes the n outside as well. Its simple enough to understand now, yet more powerful for users. I will leave it as it stands.", "author": "mosabua", "createdAt": "2020-09-22T21:57:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyNTQxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyNjM0Ng==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r492526346", "bodyText": "I don't think we need this additional explanation. This is all explained in the example above.", "author": "kasiafi", "createdAt": "2020-09-22T07:30:11Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,95 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It can define\n+a list of queries to process, including recursive processing of suitable\n+queries.\n+\n+.. warning::\n+\n+    This feature is experimental only. Proceed to use it only if you understand\n+    potential query failures and the impact of the recursion processing on your\n+    workload.\n+\n+.. code-block:: none\n+\n+   WITH RECURSIVE T(n) AS (\n+    <recursion base relation>\n+    UNION (ALL | DISTINCT)\n+    <recursion step relation: SELECT  FROM ... T...>\n+    )\n+    ... SELECT ... FROM T\n+\n+A recursive ``WITH``-query must be shaped as a ``UNON`` of two relations. The\n+first relation is called the *recursion base*, and the second relation is called\n+the *recursion step*. Presto supports recursive ``WITH``-queries with a single\n+recursive reference to a ``WITH``-query from within the query. The name ``T`` of\n+the query ``T`` can be mentioned once in the ``FROM`` clause of the recursion\n+step relation.\n+\n+The following listing shows a simple example, that displays a commonly used\n+form of only one query in the list:\n+\n+.. code-block:: none\n+\n+    WITH RECURSIVE t(n) AS (\n+        VALUES (1)\n+        UNION ALL\n+        SELECT n+1 FROM t WHERE n < 4\n+    )\n+    SELECT sum(n) FROM t;\n+\n+In the preceding query the simple assignment ``VALUES (1)`` defines the\n+recursion base relation. ``SELECT n+1 FROM t WHERE n < 4`` defines the recursion\n+step relation. The recursion processing performs these steps:\n+\n+- first recursion yields ``1 + 1 = 2``\n+- second recursion uses the result from the first and adds one: ``2 + 1 = 3``\n+- third recursion users the result from the second and adds one again:\n+  ``3 + 1 = 4``\n+- fourth recursion aborts since ``n = 4``\n+- this results in ``t`` having values ``2``, ``3`` and ``4``\n+- the final statement performs the sum operation of these elements with the\n+  final result value ``10``\n+\n+Logically, the recursive query processing is a sequence of actions:\n+\n+- compute the recursion base\n+- compute the recursion step using the precomputed base where the relation name\n+  is mentioned\n+- compute the next step using the previous step\n+- repeat until the recursion converges, which means an empty relation is\n+  obtained\n+- union the base and all the steps, and return it as the result", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1Mzc4Mw==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r493053783", "bodyText": "Ok.. I thought it is helpful.. but the section is getting long .. so I am turfing it.", "author": "mosabua", "createdAt": "2020-09-22T21:50:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyNjM0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUzMDA2NA==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r492530064", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It can define\n          \n          \n            \n            a list of queries to process, including recursive processing of suitable\n          \n          \n            \n            queries.\n          \n          \n            \n            The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It defines\n          \n          \n            \n            a list of named queries, possibly including recursive queries.", "author": "kasiafi", "createdAt": "2020-09-22T07:37:31Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,95 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It can define\n+a list of queries to process, including recursive processing of suitable\n+queries.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1NDU0Mg==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r493054542", "bodyText": "That is too succinct imho .. I changed a bit, but left the process and recursive processing", "author": "mosabua", "createdAt": "2020-09-22T21:51:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUzMDA2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIzMDc2Mg==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r493230762", "bodyText": "The fact is that the queries in the list are not \"queries to process\". They are just predefined named queries that can be used in the main query. They are processed on demand only. That is why I opposed to using the word \"process\".", "author": "kasiafi", "createdAt": "2020-09-23T06:37:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUzMDA2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcwNjc4OA==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r493706788", "bodyText": "Thats getting really into lower level naming .. the fact that they are parsed and evaluated is something I already consider part of processing. I think you mean processing only means when actual data is processed ... so later in the execution. My main concern really is that we say \"recursive queries\" which is not as explicit. Nothing about the written down query is recursive .. it only becomes a recursion when it is processed.  Anyway .. I suggest we leave it as it is.", "author": "mosabua", "createdAt": "2020-09-23T15:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUzMDA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUzMDUzNQ==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r492530535", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            form of only one query in the list:\n          \n          \n            \n            form of single query in the list:", "author": "kasiafi", "createdAt": "2020-09-22T07:38:29Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,95 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It can define\n+a list of queries to process, including recursive processing of suitable\n+queries.\n+\n+.. warning::\n+\n+    This feature is experimental only. Proceed to use it only if you understand\n+    potential query failures and the impact of the recursion processing on your\n+    workload.\n+\n+.. code-block:: none\n+\n+   WITH RECURSIVE T(n) AS (\n+    <recursion base relation>\n+    UNION (ALL | DISTINCT)\n+    <recursion step relation: SELECT  FROM ... T...>\n+    )\n+    ... SELECT ... FROM T\n+\n+A recursive ``WITH``-query must be shaped as a ``UNON`` of two relations. The\n+first relation is called the *recursion base*, and the second relation is called\n+the *recursion step*. Presto supports recursive ``WITH``-queries with a single\n+recursive reference to a ``WITH``-query from within the query. The name ``T`` of\n+the query ``T`` can be mentioned once in the ``FROM`` clause of the recursion\n+step relation.\n+\n+The following listing shows a simple example, that displays a commonly used\n+form of only one query in the list:", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1NDg2Ng==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r493054866", "bodyText": "add a single query to be correct", "author": "mosabua", "createdAt": "2020-09-22T21:52:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUzMDUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUzMDcwMQ==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r492530701", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SELECT n+1 FROM t WHERE n < 4\n          \n          \n            \n                    SELECT n + 1 FROM t WHERE n < 4", "author": "kasiafi", "createdAt": "2020-09-22T07:38:51Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,95 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It can define\n+a list of queries to process, including recursive processing of suitable\n+queries.\n+\n+.. warning::\n+\n+    This feature is experimental only. Proceed to use it only if you understand\n+    potential query failures and the impact of the recursion processing on your\n+    workload.\n+\n+.. code-block:: none\n+\n+   WITH RECURSIVE T(n) AS (\n+    <recursion base relation>\n+    UNION (ALL | DISTINCT)\n+    <recursion step relation: SELECT  FROM ... T...>\n+    )\n+    ... SELECT ... FROM T\n+\n+A recursive ``WITH``-query must be shaped as a ``UNON`` of two relations. The\n+first relation is called the *recursion base*, and the second relation is called\n+the *recursion step*. Presto supports recursive ``WITH``-queries with a single\n+recursive reference to a ``WITH``-query from within the query. The name ``T`` of\n+the query ``T`` can be mentioned once in the ``FROM`` clause of the recursion\n+step relation.\n+\n+The following listing shows a simple example, that displays a commonly used\n+form of only one query in the list:\n+\n+.. code-block:: none\n+\n+    WITH RECURSIVE t(n) AS (\n+        VALUES (1)\n+        UNION ALL\n+        SELECT n+1 FROM t WHERE n < 4", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1NDk0MA==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r493054940", "bodyText": "fixed", "author": "mosabua", "createdAt": "2020-09-22T21:52:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUzMDcwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUzMDg3Nw==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r492530877", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            recursion base relation. ``SELECT n+1 FROM t WHERE n < 4`` defines the recursion\n          \n          \n            \n            recursion base relation. ``SELECT n +  FROM t WHERE n < 4`` defines the recursion", "author": "kasiafi", "createdAt": "2020-09-22T07:39:13Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,95 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It can define\n+a list of queries to process, including recursive processing of suitable\n+queries.\n+\n+.. warning::\n+\n+    This feature is experimental only. Proceed to use it only if you understand\n+    potential query failures and the impact of the recursion processing on your\n+    workload.\n+\n+.. code-block:: none\n+\n+   WITH RECURSIVE T(n) AS (\n+    <recursion base relation>\n+    UNION (ALL | DISTINCT)\n+    <recursion step relation: SELECT  FROM ... T...>\n+    )\n+    ... SELECT ... FROM T\n+\n+A recursive ``WITH``-query must be shaped as a ``UNON`` of two relations. The\n+first relation is called the *recursion base*, and the second relation is called\n+the *recursion step*. Presto supports recursive ``WITH``-queries with a single\n+recursive reference to a ``WITH``-query from within the query. The name ``T`` of\n+the query ``T`` can be mentioned once in the ``FROM`` clause of the recursion\n+step relation.\n+\n+The following listing shows a simple example, that displays a commonly used\n+form of only one query in the list:\n+\n+.. code-block:: none\n+\n+    WITH RECURSIVE t(n) AS (\n+        VALUES (1)\n+        UNION ALL\n+        SELECT n+1 FROM t WHERE n < 4\n+    )\n+    SELECT sum(n) FROM t;\n+\n+In the preceding query the simple assignment ``VALUES (1)`` defines the\n+recursion base relation. ``SELECT n+1 FROM t WHERE n < 4`` defines the recursion", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1NTE1NQ==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r493055155", "bodyText": "added spaces without removing 1", "author": "mosabua", "createdAt": "2020-09-22T21:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUzMDg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUzMjE5NA==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r492532194", "bodyText": "This list lacks \"step 0\" which is computing the recursion base (1).\nMaybe add this in the beginning of the list:\n- recursion base yields ``1``", "author": "kasiafi", "createdAt": "2020-09-22T07:41:45Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,95 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It can define\n+a list of queries to process, including recursive processing of suitable\n+queries.\n+\n+.. warning::\n+\n+    This feature is experimental only. Proceed to use it only if you understand\n+    potential query failures and the impact of the recursion processing on your\n+    workload.\n+\n+.. code-block:: none\n+\n+   WITH RECURSIVE T(n) AS (\n+    <recursion base relation>\n+    UNION (ALL | DISTINCT)\n+    <recursion step relation: SELECT  FROM ... T...>\n+    )\n+    ... SELECT ... FROM T\n+\n+A recursive ``WITH``-query must be shaped as a ``UNON`` of two relations. The\n+first relation is called the *recursion base*, and the second relation is called\n+the *recursion step*. Presto supports recursive ``WITH``-queries with a single\n+recursive reference to a ``WITH``-query from within the query. The name ``T`` of\n+the query ``T`` can be mentioned once in the ``FROM`` clause of the recursion\n+step relation.\n+\n+The following listing shows a simple example, that displays a commonly used\n+form of only one query in the list:\n+\n+.. code-block:: none\n+\n+    WITH RECURSIVE t(n) AS (\n+        VALUES (1)\n+        UNION ALL\n+        SELECT n+1 FROM t WHERE n < 4\n+    )\n+    SELECT sum(n) FROM t;\n+\n+In the preceding query the simple assignment ``VALUES (1)`` defines the\n+recursion base relation. ``SELECT n+1 FROM t WHERE n < 4`` defines the recursion\n+step relation. The recursion processing performs these steps:", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1NTM5Ng==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r493055396", "bodyText": "added", "author": "mosabua", "createdAt": "2020-09-22T21:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUzMjE5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUzMjM4NQ==", "url": "https://github.com/trinodb/trino/pull/5163#discussion_r492532385", "bodyText": "Typo in word uses", "author": "kasiafi", "createdAt": "2020-09-22T07:42:09Z", "path": "presto-docs/src/main/sphinx/sql/select.rst", "diffHunk": "@@ -92,6 +92,95 @@ Additionally, the relations within a ``WITH`` clause can chain::\n     relation is used. This means that if the relation is used more than once and the query\n     is non-deterministic, the results may be different each time.\n \n+WITH RECURSIVE Clause\n+---------------------\n+\n+The ``WITH RECURSIVE`` clause is a variant of the ``WITH`` clause. It can define\n+a list of queries to process, including recursive processing of suitable\n+queries.\n+\n+.. warning::\n+\n+    This feature is experimental only. Proceed to use it only if you understand\n+    potential query failures and the impact of the recursion processing on your\n+    workload.\n+\n+.. code-block:: none\n+\n+   WITH RECURSIVE T(n) AS (\n+    <recursion base relation>\n+    UNION (ALL | DISTINCT)\n+    <recursion step relation: SELECT  FROM ... T...>\n+    )\n+    ... SELECT ... FROM T\n+\n+A recursive ``WITH``-query must be shaped as a ``UNON`` of two relations. The\n+first relation is called the *recursion base*, and the second relation is called\n+the *recursion step*. Presto supports recursive ``WITH``-queries with a single\n+recursive reference to a ``WITH``-query from within the query. The name ``T`` of\n+the query ``T`` can be mentioned once in the ``FROM`` clause of the recursion\n+step relation.\n+\n+The following listing shows a simple example, that displays a commonly used\n+form of only one query in the list:\n+\n+.. code-block:: none\n+\n+    WITH RECURSIVE t(n) AS (\n+        VALUES (1)\n+        UNION ALL\n+        SELECT n+1 FROM t WHERE n < 4\n+    )\n+    SELECT sum(n) FROM t;\n+\n+In the preceding query the simple assignment ``VALUES (1)`` defines the\n+recursion base relation. ``SELECT n+1 FROM t WHERE n < 4`` defines the recursion\n+step relation. The recursion processing performs these steps:\n+\n+- first recursion yields ``1 + 1 = 2``\n+- second recursion uses the result from the first and adds one: ``2 + 1 = 3``\n+- third recursion users the result from the second and adds one again:", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c1055e8fdae4ca30c786fd917c9ad062ec5a0f47", "url": "https://github.com/trinodb/trino/commit/c1055e8fdae4ca30c786fd917c9ad062ec5a0f47", "message": "Add WITH RECURSIVE documentation", "committedDate": "2020-09-22T21:55:14Z", "type": "commit"}, {"oid": "c1055e8fdae4ca30c786fd917c9ad062ec5a0f47", "url": "https://github.com/trinodb/trino/commit/c1055e8fdae4ca30c786fd917c9ad062ec5a0f47", "message": "Add WITH RECURSIVE documentation", "committedDate": "2020-09-22T21:55:14Z", "type": "forcePushed"}]}