{"pr_number": 4730, "pr_title": "Prevent retrieving same value twice in 128-bit multiplication", "pr_createdAt": "2020-08-07T10:54:15Z", "pr_url": "https://github.com/trinodb/trino/pull/4730", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3MzQ4Nw==", "url": "https://github.com/trinodb/trino/pull/4730#discussion_r466973487", "bodyText": "the one below uses & SIGN_INT_MASK) != 0;. I'm not sure which one is faster, but we could unify them one way or another", "author": "sopel39", "createdAt": "2020-08-07T11:07:05Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -728,6 +732,11 @@ public static boolean isStrictlyNegative(long rawLow, long rawHigh)\n         return isNegative(rawLow, rawHigh) && (rawLow != 0 || unpackUnsignedLong(rawHigh) != 0);\n     }\n \n+    private static boolean isNegative(int lastRawHigh)\n+    {\n+        return lastRawHigh >>> 31 == 1;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk4MTIwNg==", "url": "https://github.com/trinodb/trino/pull/4730#discussion_r466981206", "bodyText": "This is extremely difficult to benchmark and might make a difference so I'd leave for now.", "author": "skrzypo987", "createdAt": "2020-08-07T11:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3MzQ4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk4NDIxNw==", "url": "https://github.com/trinodb/trino/pull/4730#discussion_r466984217", "bodyText": "please change it to & SIGN_INT_MASK) != 0 to keep code consistent.", "author": "sopel39", "createdAt": "2020-08-07T11:33:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3MzQ4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NjMyOA==", "url": "https://github.com/trinodb/trino/pull/4730#discussion_r466976328", "bodyText": "there are more places where it could be optimized, e.g: io.prestosql.spi.type.UnscaledDecimal128Arithmetic#multiplyDestructive", "author": "sopel39", "createdAt": "2020-08-07T11:14:24Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/UnscaledDecimal128Arithmetic.java", "diffHunk": "@@ -511,7 +515,7 @@ public static void multiply(Slice left, Slice right, Slice result)\n             }\n         }\n \n-        pack(result, (int) z0, (int) z1, (int) z2, (int) z3, isNegative(left) != isNegative(right));\n+        pack(result, (int) z0, (int) z1, (int) z2, (int) z3, leftNegative != rightNegative);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk4MDc3Ng==", "url": "https://github.com/trinodb/trino/pull/4730#discussion_r466980776", "bodyText": "This is just the beginning.\nI made a heavily-optimised version already but benchmarks went crazy.\nOne step at a time", "author": "skrzypo987", "createdAt": "2020-08-07T11:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NjMyOA=="}], "type": "inlineReview"}, {"oid": "4d6d60ee8d4aa9c0d0ce8d366c0787bee5cfb774", "url": "https://github.com/trinodb/trino/commit/4d6d60ee8d4aa9c0d0ce8d366c0787bee5cfb774", "message": "Prevent retrieving same value twice in 128-bit multiplication\n\nThe most expensive operation in most 128 decimal methods is\ngetting data from heap to stack (local variables).\nIn 128-bit multiplication this is now done as 4 * 32-bit gets\nas opposed to 4 * 32 bit gets + 32 bit get to determine the sign\nof the operands.", "committedDate": "2020-08-07T11:37:52Z", "type": "commit"}, {"oid": "4d6d60ee8d4aa9c0d0ce8d366c0787bee5cfb774", "url": "https://github.com/trinodb/trino/commit/4d6d60ee8d4aa9c0d0ce8d366c0787bee5cfb774", "message": "Prevent retrieving same value twice in 128-bit multiplication\n\nThe most expensive operation in most 128 decimal methods is\ngetting data from heap to stack (local variables).\nIn 128-bit multiplication this is now done as 4 * 32-bit gets\nas opposed to 4 * 32 bit gets + 32 bit get to determine the sign\nof the operands.", "committedDate": "2020-08-07T11:37:52Z", "type": "forcePushed"}]}