{"pr_number": 4866, "pr_title": "Fix AT TIME ZONE for TIMESTAMP", "pr_createdAt": "2020-08-18T02:53:36Z", "pr_url": "https://github.com/trinodb/trino/pull/4866", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4OTE3MQ==", "url": "https://github.com/trinodb/trino/pull/4866#discussion_r471889171", "bodyText": "p is not a variable here", "author": "dain", "createdAt": "2020-08-18T03:15:29Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/AtTimeZone.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timestamp;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.function.LiteralParameter;\n+import io.prestosql.spi.function.LiteralParameters;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlNullable;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.LongTimestamp;\n+import io.prestosql.spi.type.LongTimestampWithTimeZone;\n+import io.prestosql.spi.type.TimeZoneKey;\n+import io.prestosql.spi.type.TimeZoneNotSupportedException;\n+\n+import static io.prestosql.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static io.prestosql.spi.type.DateTimeEncoding.packDateTimeWithZone;\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static io.prestosql.type.DateTimes.PICOSECONDS_PER_MICROSECOND;\n+import static io.prestosql.type.DateTimes.getMicrosOfMilli;\n+import static io.prestosql.type.DateTimes.scaleEpochMicrosToMillis;\n+import static io.prestosql.type.DateTimes.scaleEpochMillisToMicros;\n+import static io.prestosql.util.DateTimeZoneIndex.getChronology;\n+import static java.lang.String.format;\n+\n+@ScalarFunction(value = \"$at_timezone\", hidden = true)\n+public class AtTimeZone\n+{\n+    private AtTimeZone() {}\n+\n+    @LiteralParameters({\"x\", \"sourcePrecision\", \"targetPrecision\"})\n+    @SqlType(\"timestamp(targetPrecision) with time zone\")\n+    public static long shortToShort(\n+            @SqlType(\"timestamp(sourcePrecision)\") long epochMillis,\n+            @SqlType(\"varchar(x)\") Slice zoneId,\n+            @SqlNullable @SqlType(\"timestamp(targetPrecision) with time zone\") Long dummy) // need a dummy value since the type inferencer can't bind type arguments exclusively from return type\n+    {\n+        // p is guaranteed to be <= 3 because the short representation for TIMESTAMP WITH TIMEZONE has a max precision of 3", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4OTUwNg==", "url": "https://github.com/trinodb/trino/pull/4866#discussion_r471889506", "bodyText": "same", "author": "dain", "createdAt": "2020-08-18T03:16:42Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/AtTimeZone.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timestamp;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.function.LiteralParameter;\n+import io.prestosql.spi.function.LiteralParameters;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlNullable;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.LongTimestamp;\n+import io.prestosql.spi.type.LongTimestampWithTimeZone;\n+import io.prestosql.spi.type.TimeZoneKey;\n+import io.prestosql.spi.type.TimeZoneNotSupportedException;\n+\n+import static io.prestosql.spi.StandardErrorCode.INVALID_FUNCTION_ARGUMENT;\n+import static io.prestosql.spi.type.DateTimeEncoding.packDateTimeWithZone;\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static io.prestosql.type.DateTimes.PICOSECONDS_PER_MICROSECOND;\n+import static io.prestosql.type.DateTimes.getMicrosOfMilli;\n+import static io.prestosql.type.DateTimes.scaleEpochMicrosToMillis;\n+import static io.prestosql.type.DateTimes.scaleEpochMillisToMicros;\n+import static io.prestosql.util.DateTimeZoneIndex.getChronology;\n+import static java.lang.String.format;\n+\n+@ScalarFunction(value = \"$at_timezone\", hidden = true)\n+public class AtTimeZone\n+{\n+    private AtTimeZone() {}\n+\n+    @LiteralParameters({\"x\", \"sourcePrecision\", \"targetPrecision\"})\n+    @SqlType(\"timestamp(targetPrecision) with time zone\")\n+    public static long shortToShort(\n+            @SqlType(\"timestamp(sourcePrecision)\") long epochMillis,\n+            @SqlType(\"varchar(x)\") Slice zoneId,\n+            @SqlNullable @SqlType(\"timestamp(targetPrecision) with time zone\") Long dummy) // need a dummy value since the type inferencer can't bind type arguments exclusively from return type\n+    {\n+        // p is guaranteed to be <= 3 because the short representation for TIMESTAMP WITH TIMEZONE has a max precision of 3\n+        return toShort(epochMillis, zoneId.toStringUtf8());\n+    }\n+\n+    @LiteralParameters({\"x\", \"sourcePrecision\", \"targetPrecision\"})\n+    @SqlType(\"timestamp(targetPrecision) with time zone\")\n+    public static long longToShort(\n+            @SqlType(\"timestamp(sourcePrecision)\") LongTimestamp timestamp,\n+            @SqlType(\"varchar(x)\") Slice zoneId,\n+            @SqlNullable @SqlType(\"timestamp(targetPrecision) with time zone\") Long dummy) // need a dummy value since the type inferencer can't bind type arguments exclusively from return type\n+    {\n+        // p is guaranteed to be > 3 and <= 6, so no need to round", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "aa1161d596290e54d1589d9a9fe8ab7bbb410086", "url": "https://github.com/trinodb/trino/commit/aa1161d596290e54d1589d9a9fe8ab7bbb410086", "message": "Fix AT TIME ZONE for TIMESTAMP\n\nAT TIME ZONE converted timestamps to timestamp(3) with time zone. With this\nchange, the precision is preserved.", "committedDate": "2020-08-20T19:43:20Z", "type": "commit"}, {"oid": "aa1161d596290e54d1589d9a9fe8ab7bbb410086", "url": "https://github.com/trinodb/trino/commit/aa1161d596290e54d1589d9a9fe8ab7bbb410086", "message": "Fix AT TIME ZONE for TIMESTAMP\n\nAT TIME ZONE converted timestamps to timestamp(3) with time zone. With this\nchange, the precision is preserved.", "committedDate": "2020-08-20T19:43:20Z", "type": "forcePushed"}]}