{"pr_number": 5074, "pr_title": "tablesample handling code cleanup", "pr_createdAt": "2020-09-03T21:58:46Z", "pr_url": "https://github.com/trinodb/trino/pull/5074", "timeline": [{"oid": "8797e6183a3037c6cb6be3444c68171b9c6a65e3", "url": "https://github.com/trinodb/trino/commit/8797e6183a3037c6cb6be3444c68171b9c6a65e3", "message": "Fix indentation", "committedDate": "2020-09-03T21:21:24Z", "type": "commit"}, {"oid": "5aaf43834e4321a9464f3f246aa143be88007e5f", "url": "https://github.com/trinodb/trino/commit/5aaf43834e4321a9464f3f246aa143be88007e5f", "message": "Extract variable", "committedDate": "2020-09-03T21:39:37Z", "type": "commit"}, {"oid": "042216ecbf0cb89b41e6569e7fc2f49aa5072412", "url": "https://github.com/trinodb/trino/commit/042216ecbf0cb89b41e6569e7fc2f49aa5072412", "message": "Add TABLESAMPLE test", "committedDate": "2020-09-03T21:53:52Z", "type": "commit"}, {"oid": "07eb8b2e2fd4d0f076c5d4853e67d8a5c34a6ad6", "url": "https://github.com/trinodb/trino/commit/07eb8b2e2fd4d0f076c5d4853e67d8a5c34a6ad6", "message": "Reject TABLESAMPLE when ratio expression not a number", "committedDate": "2020-09-03T21:53:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4ODAzNw==", "url": "https://github.com/trinodb/trino/pull/5074#discussion_r483288037", "bodyText": "This is only needed if samplePercentageType != DOUBLE", "author": "dain", "createdAt": "2020-09-03T22:31:40Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1465,29 +1468,38 @@ protected Scope visitSampledRelation(SampledRelation relation, Optional<Scope> s\n                     accessControl,\n                     sqlParser,\n                     TypeProvider.empty(),\n-                    ImmutableList.of(relation.getSamplePercentage()),\n+                    ImmutableList.of(samplePercentage),\n                     analysis.getParameters(),\n                     WarningCollector.NOOP,\n                     analysis.isDescribe())\n                     .getExpressionTypes();\n \n-            ExpressionInterpreter samplePercentageEval = expressionOptimizer(relation.getSamplePercentage(), metadata, session, expressionTypes);\n+            Type samplePercentageType = expressionTypes.get(NodeRef.of(samplePercentage));\n+            if (!typeCoercion.canCoerce(samplePercentageType, DOUBLE)) {\n+                throw semanticException(TYPE_MISMATCH, samplePercentage, \"Sample percentage should be a numeric expression\");\n+            }\n+\n+            ExpressionInterpreter samplePercentageEval = expressionOptimizer(samplePercentage, metadata, session, expressionTypes);\n \n             Object samplePercentageObject = samplePercentageEval.optimize(symbol -> {\n-                throw semanticException(EXPRESSION_NOT_CONSTANT, relation.getSamplePercentage(), \"Sample percentage cannot contain column references\");\n+                throw semanticException(EXPRESSION_NOT_CONSTANT, samplePercentage, \"Sample percentage cannot contain column references\");\n             });\n \n-            if (!(samplePercentageObject instanceof Number)) {\n-                throw semanticException(TYPE_MISMATCH, relation.getSamplePercentage(), \"Sample percentage should evaluate to a numeric expression\");\n+            ResolvedFunction coercion = metadata.getCoercion(samplePercentageType, DOUBLE);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI5NTg2OA==", "url": "https://github.com/trinodb/trino/pull/5074#discussion_r483295868", "bodyText": "Also, this could be done after checking whether the value is null, in which case, you don't need a separate variable for samplePercentageObject. An implicit cast should never produce a null from a non-null value.", "author": "martint", "createdAt": "2020-09-03T22:57:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4ODAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNDg3Mg==", "url": "https://github.com/trinodb/trino/pull/5074#discussion_r483504872", "bodyText": "An implicit cast should never produce a null from a non-null value.\n\nI thought about this, but i didn't want to put this assumption in the code,\non the assumption that less assumptions the easier to read...\ni will rearange if you find this more useful that way", "author": "findepi", "createdAt": "2020-09-04T09:34:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4ODAzNw=="}], "type": "inlineReview"}, {"oid": "e19d0f156b2255e4c90884db90bba646fda581d2", "url": "https://github.com/trinodb/trino/commit/e19d0f156b2255e4c90884db90bba646fda581d2", "message": "Fix TABLESAMPLE with DECIMAL", "committedDate": "2020-09-04T09:36:47Z", "type": "commit"}, {"oid": "e19d0f156b2255e4c90884db90bba646fda581d2", "url": "https://github.com/trinodb/trino/commit/e19d0f156b2255e4c90884db90bba646fda581d2", "message": "Fix TABLESAMPLE with DECIMAL", "committedDate": "2020-09-04T09:36:47Z", "type": "forcePushed"}]}