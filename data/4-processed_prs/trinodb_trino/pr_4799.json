{"pr_number": 4799, "pr_title": "Fix timestamp semantics", "pr_createdAt": "2020-08-13T00:45:54Z", "pr_url": "https://github.com/trinodb/trino/pull/4799", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzMTY5OQ==", "url": "https://github.com/trinodb/trino/pull/4799#discussion_r469631699", "bodyText": "Same here", "author": "martint", "createdAt": "2020-08-13T00:54:24Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/VarcharToTimestampCast.java", "diffHunk": "@@ -159,7 +114,7 @@ private static long castToShortTimestamp(int precision, String value, Function<S\n         return epochSecond * MICROSECONDS_PER_SECOND + rescale(fractionValue, actualPrecision, 6);\n     }\n \n-    private static LongTimestamp castToLongTimestamp(int precision, String value, Function<String, ZoneId> zoneId)\n+    public static LongTimestamp castToLongTimestamp(int precision, String value)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzMTc5NQ==", "url": "https://github.com/trinodb/trino/pull/4799#discussion_r469631795", "bodyText": "Why public? This is supposed to be an implementation detail of this class.", "author": "martint", "createdAt": "2020-08-13T00:54:40Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamp/VarcharToTimestampCast.java", "diffHunk": "@@ -71,47 +57,17 @@ public static long castToShort(@LiteralParameter(\"p\") long precision, ConnectorS\n \n     @LiteralParameters({\"x\", \"p\"})\n     @SqlType(\"timestamp(p)\")\n-    public static LongTimestamp castToLong(@LiteralParameter(\"p\") long precision, ConnectorSession session, @SqlType(\"varchar(x)\") Slice value)\n+    public static LongTimestamp castToLong(@LiteralParameter(\"p\") long precision, @SqlType(\"varchar(x)\") Slice value)\n     {\n-        // This accepts value with or without time zone\n-        if (session.isLegacyTimestamp()) {\n-            try {\n-                return castToLegacyLongTimestamp((int) precision, session.getTimeZoneKey(), trim(value).toStringUtf8());\n-            }\n-            catch (IllegalArgumentException e) {\n-                throw new PrestoException(INVALID_CAST_ARGUMENT, \"Value cannot be cast to timestamp: \" + value.toStringUtf8(), e);\n-            }\n-        }\n-\n         try {\n-            return castToLongTimestamp((int) precision, trim(value).toStringUtf8(), timezone -> ZoneOffset.UTC);\n+            return castToLongTimestamp((int) precision, trim(value).toStringUtf8());\n         }\n         catch (IllegalArgumentException e) {\n             throw new PrestoException(INVALID_CAST_ARGUMENT, \"Value cannot be cast to timestamp: \" + value.toStringUtf8(), e);\n         }\n     }\n \n-    public static long castToLegacyShortTimestamp(int precision, TimeZoneKey timeZoneKey, String value)\n-    {\n-        return castToShortTimestamp(precision, value, timezone -> {\n-            if (timezone == null) {\n-                return timeZoneKey.getZoneId();\n-            }\n-            return ZoneId.of(timezone);\n-        });\n-    }\n-\n-    private static LongTimestamp castToLegacyLongTimestamp(int precision, TimeZoneKey timeZoneKey, String value)\n-    {\n-        return castToLongTimestamp(precision, value, timezone -> {\n-            if (timezone == null) {\n-                return timeZoneKey.getZoneId();\n-            }\n-            return ZoneId.of(timezone);\n-        });\n-    }\n-\n-    private static long castToShortTimestamp(int precision, String value, Function<String, ZoneId> zoneId)\n+    public static long castToShortTimestamp(int precision, String value)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0MTIwNw==", "url": "https://github.com/trinodb/trino/pull/4799#discussion_r469641207", "bodyText": "They replace the old legacy method used in tests.  I will mark both as visible for testing.", "author": "dain", "createdAt": "2020-08-13T01:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzMTc5NQ=="}], "type": "inlineReview"}, {"oid": "e9a6ff9b2855542df08c5a34b895b5ecfa3c8535", "url": "https://github.com/trinodb/trino/commit/e9a6ff9b2855542df08c5a34b895b5ecfa3c8535", "message": "Fix timestamp semantics", "committedDate": "2020-08-13T01:30:42Z", "type": "commit"}, {"oid": "e9a6ff9b2855542df08c5a34b895b5ecfa3c8535", "url": "https://github.com/trinodb/trino/commit/e9a6ff9b2855542df08c5a34b895b5ecfa3c8535", "message": "Fix timestamp semantics", "committedDate": "2020-08-13T01:30:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxMjYwMQ==", "url": "https://github.com/trinodb/trino/pull/4799#discussion_r502312601", "bodyText": "Why this zone in particular?", "author": "findepi", "createdAt": "2020-10-09T09:42:55Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/AbstractTestHiveLocal.java", "diffHunk": "@@ -70,7 +70,8 @@ public void initialize()\n                         .build());\n \n         HiveConfig hiveConfig = new HiveConfig()\n-                .setTimeZone(\"America/Los_Angeles\");\n+                .setParquetTimeZone(\"America/Los_Angeles\")\n+                .setRcfileTimeZone(\"America/Los_Angeles\");", "originalCommit": "e9a6ff9b2855542df08c5a34b895b5ecfa3c8535", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}