{"pr_number": 5028, "pr_title": "File group provider", "pr_createdAt": "2020-08-30T19:52:29Z", "pr_url": "https://github.com/trinodb/trino/pull/5028", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0NzAxOQ==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r479947019", "bodyText": "txt? We usually use json. I think using json make sense here because:\n\nit is coherent with other file based configuration files\nit is much easier to extend it in future\nthere is less parsing code", "author": "kokosing", "createdAt": "2020-08-31T07:29:24Z", "path": "presto-docs/src/main/sphinx/security/group-file.rst", "diffHunk": "@@ -0,0 +1,42 @@\n+==========\n+Group File\n+==========\n+\n+Presto can map user names onto groups for easier access control and\n+resource group management. Group file resolves group membership using\n+a file on the coordinator.\n+\n+Group File Configuration\n+------------------------\n+\n+Enable group file by creating an ``etc/group-provider.properties``\n+file on the coordinator:\n+\n+.. code-block:: none\n+\n+    group-provider.name=file\n+    file.group-file=/path/to/group.txt", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI3MzgwNg==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r487273806", "bodyText": "This is based on the Apache HTTP server format, which is the format we use for password files", "author": "dain", "createdAt": "2020-09-11T20:26:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0NzAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk4MDQ4MA==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r493980480", "bodyText": "We used the Apache password file format since it is a standard format and we could have people use htpasswd, rather than needing to write our own or have detailed instructions on how to create it. I don't think this applies here.\nHowever, I can see the argument that this is a very simple mapping format that we do not expect to change, and using JSON is overkill.", "author": "electrum", "createdAt": "2020-09-24T01:02:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0NzAxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0NzQxMg==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r479947412", "bodyText": "I guess by default it shouldn't refresh, like it is implemented for cases like that.", "author": "kokosing", "createdAt": "2020-08-31T07:30:11Z", "path": "presto-docs/src/main/sphinx/security/group-file.rst", "diffHunk": "@@ -0,0 +1,42 @@\n+==========\n+Group File\n+==========\n+\n+Presto can map user names onto groups for easier access control and\n+resource group management. Group file resolves group membership using\n+a file on the coordinator.\n+\n+Group File Configuration\n+------------------------\n+\n+Enable group file by creating an ``etc/group-provider.properties``\n+file on the coordinator:\n+\n+.. code-block:: none\n+\n+    group-provider.name=file\n+    file.group-file=/path/to/group.txt\n+\n+The following configuration properties are available:\n+\n+==================================== ==============================================\n+Property                             Description\n+==================================== ==============================================\n+``file.group-file``                  Path of the group file.\n+\n+``file.refresh-period``              How often to reload the group file.\n+                                     Defaults to ``1m``.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk4MTEwOA==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r493981108", "bodyText": "My goal is to have this consistent with password file, and people seem to like the refresh.", "author": "dain", "createdAt": "2020-09-24T01:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0NzQxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0Nzc1OQ==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r479947759", "bodyText": "@NotNull", "author": "kokosing", "createdAt": "2020-08-31T07:30:38Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/file/FileGroupConfig.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.file;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.ConfigDescription;\n+import io.airlift.configuration.validation.FileExists;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MinDuration;\n+\n+import java.io.File;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class FileGroupConfig\n+{\n+    private File groupFile;\n+    private Duration refreshPeriod = new Duration(5, SECONDS);\n+\n+    @FileExists\n+    public File getGroupFile()\n+    {\n+        return groupFile;\n+    }\n+\n+    @Config(\"file.group-file\")\n+    @ConfigDescription(\"Location of the file that provides user group membership\")\n+    public FileGroupConfig setGroupFile(File groupFile)\n+    {\n+        this.groupFile = groupFile;\n+        return this;\n+    }\n+\n+    @MinDuration(\"1ms\")", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0ODA1MQ==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r479948051", "bodyText": "I docs you mentioned 1 minute", "author": "kokosing", "createdAt": "2020-08-31T07:31:12Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/file/FileGroupConfig.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.file;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.ConfigDescription;\n+import io.airlift.configuration.validation.FileExists;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MinDuration;\n+\n+import java.io.File;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class FileGroupConfig\n+{\n+    private File groupFile;\n+    private Duration refreshPeriod = new Duration(5, SECONDS);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0OTIwMQ==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r479949201", "bodyText": "Oh. So this is where the default came from. Should we consider changing file based access rules to have this default set as well?", "author": "kokosing", "createdAt": "2020-08-31T07:33:44Z", "path": "presto-docs/src/main/sphinx/security/password-file.rst", "diffHunk": "@@ -27,7 +27,7 @@ The following configuration properties are available:\n ==================================== ==============================================\n Property                             Description\n ==================================== ==============================================\n-``file.password``                    Path of the password file.\n+``file.password-file``                    Path of the password file.\n \n ``file.refresh-period``              How often to reload the password file.\n                                      Defaults to ``1m``.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAxMjg3OA==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r494012878", "bodyText": "Based on feedback from david I changed the docs to 5s, and changed the file group provider to 5s also.", "author": "dain", "createdAt": "2020-09-24T03:12:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0OTIwMQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0Mzg1Mw==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r482643853", "bodyText": "nit: user_3 for uniformity?", "author": "phd3", "createdAt": "2020-09-03T01:46:19Z", "path": "presto-docs/src/main/sphinx/security/group-file.rst", "diffHunk": "@@ -0,0 +1,42 @@\n+==========\n+Group File\n+==========\n+\n+Presto can map user names onto groups for easier access control and\n+resource group management. Group file resolves group membership using\n+a file on the coordinator.\n+\n+Group File Configuration\n+------------------------\n+\n+Enable group file by creating an ``etc/group-provider.properties``\n+file on the coordinator:\n+\n+.. code-block:: none\n+\n+    group-provider.name=file\n+    file.group-file=/path/to/group.txt\n+\n+The following configuration properties are available:\n+\n+==================================== ==============================================\n+Property                             Description\n+==================================== ==============================================\n+``file.group-file``                  Path of the group file.\n+\n+``file.refresh-period``              How often to reload the group file.\n+                                     Defaults to ``1m``.\n+==================================== ==============================================\n+\n+Group Files\n+-----------\n+\n+File Format\n+^^^^^^^^^^^\n+\n+The group file contains a list of groups and members, one per line,\n+separated by a colon. Users are separated by a space.\n+\n+.. code-block:: none\n+\n+    group_name: user_1 user_2 user3", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk4MTEzMg==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r493981132", "bodyText": "Not to bikeshed on the format, but I'd expect this to use commas, like the UNIX /etc/group file format:\ngroup_name:user_1,user_2,user_3\n\nThis would be the same format, minus the group ID and password fields.", "author": "electrum", "createdAt": "2020-09-24T01:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0Mzg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0NDQ0NQ==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r482644445", "bodyText": "nit: indent for the 2nd column", "author": "phd3", "createdAt": "2020-09-03T01:48:39Z", "path": "presto-docs/src/main/sphinx/security/password-file.rst", "diffHunk": "@@ -27,7 +27,7 @@ The following configuration properties are available:\n ==================================== ==============================================\n Property                             Description\n ==================================== ==============================================\n-``file.password``                    Path of the password file.\n+``file.password-file``                    Path of the password file.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0ODM4NQ==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r482648385", "bodyText": "The title \"Group File\" seems a bit confusing to describe the feature. Something like \"File Based Group Provider\" might be more descriptive?", "author": "phd3", "createdAt": "2020-09-03T02:03:10Z", "path": "presto-docs/src/main/sphinx/security/group-file.rst", "diffHunk": "@@ -0,0 +1,42 @@\n+==========\n+Group File", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk4MTM2MA==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r493981360", "bodyText": "I like that name, it's consistent with \"File Based System Access Control\"", "author": "electrum", "createdAt": "2020-09-24T01:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0ODM4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY2MDk1MQ==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r482660951", "bodyText": "\"user and groups\" --> \"users and group\" ?\n(ignore if it's being converted to json parsing)", "author": "phd3", "createdAt": "2020-09-03T02:26:13Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/file/FileGroupProvider.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.file;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Multimap;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.security.GroupProvider;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import static com.google.common.base.Suppliers.memoizeWithExpiration;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static io.prestosql.spi.StandardErrorCode.CONFIGURATION_INVALID;\n+import static io.prestosql.spi.StandardErrorCode.CONFIGURATION_UNAVAILABLE;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+public class FileGroupProvider\n+        implements GroupProvider\n+{\n+    private static final Splitter LINE_SPLITTER = Splitter.on(\":\").limit(2).trimResults();\n+    private static final Splitter GROUP_SPLITTER = Splitter.on(\" \").trimResults();\n+\n+    private final Supplier<Function<String, Set<String>>> userGroupSupplier;\n+\n+    @Inject\n+    public FileGroupProvider(FileGroupConfig config)\n+    {\n+        File file = config.getGroupFile();\n+\n+        userGroupSupplier = memoizeWithExpiration(\n+                () -> loadGroupFile(file),\n+                config.getRefreshPeriod().toMillis(),\n+                MILLISECONDS);\n+    }\n+\n+    @Override\n+    public Set<String> getGroups(String user)\n+    {\n+        requireNonNull(user, \"user is null\");\n+        return userGroupSupplier.get().apply(user);\n+    }\n+\n+    private static Function<String, Set<String>> loadGroupFile(File file)\n+    {\n+        Map<String, Set<String>> groups = loadGroupFile(readGroupFile(file));\n+        return user -> groups.getOrDefault(user, ImmutableSet.of());\n+    }\n+\n+    private static Map<String, Set<String>> loadGroupFile(List<String> lines)\n+    {\n+        Multimap<String, String> userGroups = HashMultimap.create();\n+        for (int lineNumber = 1; lineNumber <= lines.size(); lineNumber++) {\n+            String line = lines.get(lineNumber - 1).trim();\n+            if (line.isEmpty() || line.startsWith(\"#\")) {\n+                continue;\n+            }\n+\n+            List<String> parts = LINE_SPLITTER.splitToList(line);\n+            if (parts.size() != 2) {\n+                throw invalidFile(lineNumber, \"Expected two parts for user and groups\", null);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY2Njk3Ng==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r482666976", "bodyText": "is there a reason to put a GroupProvider implementation in this package? this feature seems to be independent to the password authenticators. Should we create a separate package (or even module like other plugin implementations)?", "author": "phd3", "createdAt": "2020-09-03T02:33:36Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/file/FileGroupProvider.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.file;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk4MjUwNg==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r493982506", "bodyText": "I think they are close to a matched set, and will be commonly used together.  Also, I don't think there is much of a problem since none of these plugins take up. much resources", "author": "dain", "createdAt": "2020-09-24T01:10:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY2Njk3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY2ODUxMw==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r482668513", "bodyText": "passwordFile --> groupFile", "author": "phd3", "createdAt": "2020-09-03T02:39:25Z", "path": "presto-password-authenticators/src/test/java/io/prestosql/plugin/password/file/TestFileGroupConfig.java", "diffHunk": "@@ -0,0 +1,58 @@\n+\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.file;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.airlift.units.Duration;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+import static io.airlift.configuration.testing.ConfigAssertions.assertFullMapping;\n+import static io.airlift.configuration.testing.ConfigAssertions.assertRecordedDefaults;\n+import static io.airlift.configuration.testing.ConfigAssertions.recordDefaults;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class TestFileGroupConfig\n+{\n+    @Test\n+    public void testDefault()\n+    {\n+        assertRecordedDefaults(recordDefaults(FileGroupConfig.class)\n+                .setGroupFile(null)\n+                .setRefreshPeriod(new Duration(5, SECONDS)));\n+    }\n+\n+    @Test\n+    public void testExplicitConfig()\n+            throws IOException\n+    {\n+        Path passwordFile = Files.createTempFile(null, null);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY3MDMxNw==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r482670317", "bodyText": "testGroupProviderFactory? Guice sounds like implementation detail", "author": "phd3", "createdAt": "2020-09-03T02:46:12Z", "path": "presto-password-authenticators/src/test/java/io/prestosql/plugin/password/file/TestFileGroupProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.file;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.io.Resources;\n+import io.prestosql.spi.security.GroupProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestFileGroupProvider\n+{\n+    @Test\n+    public void test()\n+            throws Exception\n+    {\n+        File groupFile = new File(Resources.getResource(\"group.txt\").toURI().getPath());\n+        GroupProvider groupProvider = new FileGroupProvider(new FileGroupConfig().setGroupFile(groupFile));\n+        assertGroupProvider(groupProvider);\n+    }\n+\n+    @Test\n+    public void testGuice()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4NTY5NA==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r482685694", "bodyText": "Should we also add a corresponding plugin class? or are the users expected to write their own plugin that returns this factory?", "author": "phd3", "createdAt": "2020-09-03T03:46:12Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/file/FileGroupProviderFactory.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.file;\n+\n+import com.google.inject.Injector;\n+import com.google.inject.Scopes;\n+import io.airlift.bootstrap.Bootstrap;\n+import io.prestosql.spi.security.GroupProvider;\n+import io.prestosql.spi.security.GroupProviderFactory;\n+\n+import java.util.Map;\n+\n+import static io.airlift.configuration.ConfigBinder.configBinder;\n+\n+public class FileGroupProviderFactory", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5MDI1Nw==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r493990257", "bodyText": "Good catch! I forgot that bit.", "author": "dain", "createdAt": "2020-09-24T01:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4NTY5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5MDg3NA==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r482690874", "bodyText": "we can add omitEmptyStrings to avoid creating mapping for \"empty\" user in case of multiple spaces", "author": "phd3", "createdAt": "2020-09-03T04:06:51Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/file/FileGroupProvider.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.file;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Multimap;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.security.GroupProvider;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import static com.google.common.base.Suppliers.memoizeWithExpiration;\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n+import static io.prestosql.spi.StandardErrorCode.CONFIGURATION_INVALID;\n+import static io.prestosql.spi.StandardErrorCode.CONFIGURATION_UNAVAILABLE;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+public class FileGroupProvider\n+        implements GroupProvider\n+{\n+    private static final Splitter LINE_SPLITTER = Splitter.on(\":\").limit(2).trimResults();\n+    private static final Splitter GROUP_SPLITTER = Splitter.on(\" \").trimResults();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI1MTg0MA==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r495251840", "bodyText": "nit: password --> group in the description", "author": "phd3", "createdAt": "2020-09-25T21:38:22Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/file/FileGroupConfig.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.file;\n+\n+import io.airlift.configuration.Config;\n+import io.airlift.configuration.ConfigDescription;\n+import io.airlift.configuration.validation.FileExists;\n+import io.airlift.units.Duration;\n+import io.airlift.units.MinDuration;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.io.File;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+public class FileGroupConfig\n+{\n+    private File groupFile;\n+    private Duration refreshPeriod = new Duration(5, SECONDS);\n+\n+    @NotNull\n+    @FileExists\n+    public File getGroupFile()\n+    {\n+        return groupFile;\n+    }\n+\n+    @Config(\"file.group-file\")\n+    @ConfigDescription(\"Location of the file that provides user group membership\")\n+    public FileGroupConfig setGroupFile(File groupFile)\n+    {\n+        this.groupFile = groupFile;\n+        return this;\n+    }\n+\n+    @NotNull\n+    @MinDuration(\"1ms\")\n+    public Duration getRefreshPeriod()\n+    {\n+        return refreshPeriod;\n+    }\n+\n+    @Config(\"file.refresh-period\")\n+    @ConfigDescription(\"How often to reload the password file\")", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI1NzQyMA==", "url": "https://github.com/trinodb/trino/pull/5028#discussion_r495257420", "bodyText": "space --> comma (based on the update)", "author": "phd3", "createdAt": "2020-09-25T21:46:34Z", "path": "presto-docs/src/main/sphinx/security/group-file.rst", "diffHunk": "@@ -0,0 +1,42 @@\n+=========================\n+File Based Group Provider\n+=========================\n+\n+Presto can map user names onto groups for easier access control and\n+resource group management. Group file resolves group membership using\n+a file on the coordinator.\n+\n+Group File Configuration\n+------------------------\n+\n+Enable group file by creating an ``etc/group-provider.properties``\n+file on the coordinator:\n+\n+.. code-block:: none\n+\n+    group-provider.name=file\n+    file.group-file=/path/to/group.txt\n+\n+The following configuration properties are available:\n+\n+==================================== ==============================================\n+Property                             Description\n+==================================== ==============================================\n+``file.group-file``                  Path of the group file.\n+\n+``file.refresh-period``              How often to reload the group file.\n+                                     Defaults to ``5s``.\n+==================================== ==============================================\n+\n+Group Files\n+-----------\n+\n+File Format\n+^^^^^^^^^^^\n+\n+The group file contains a list of groups and members, one per line,\n+separated by a colon. Users are separated by a space.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4657403ed2bb1930286b53e904c482ebca1f386e", "url": "https://github.com/trinodb/trino/commit/4657403ed2bb1930286b53e904c482ebca1f386e", "message": "Add file group provider", "committedDate": "2020-09-28T00:28:10Z", "type": "commit"}, {"oid": "4379cbdb2fea0c1c9d1dc5aee1f2996cc08d2f94", "url": "https://github.com/trinodb/trino/commit/4379cbdb2fea0c1c9d1dc5aee1f2996cc08d2f94", "message": "Cleanup file based password authenticator\n\nFix property name in password file docs\nAdd missing config null checks", "committedDate": "2020-09-28T00:28:12Z", "type": "commit"}, {"oid": "4379cbdb2fea0c1c9d1dc5aee1f2996cc08d2f94", "url": "https://github.com/trinodb/trino/commit/4379cbdb2fea0c1c9d1dc5aee1f2996cc08d2f94", "message": "Cleanup file based password authenticator\n\nFix property name in password file docs\nAdd missing config null checks", "committedDate": "2020-09-28T00:28:12Z", "type": "forcePushed"}]}