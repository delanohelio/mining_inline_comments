{"pr_number": 5945, "pr_title": "Populate view owner groups for view access control", "pr_createdAt": "2020-11-13T02:04:48Z", "pr_url": "https://github.com/trinodb/trino/pull/5945", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYzOTU0OQ==", "url": "https://github.com/trinodb/trino/pull/5945#discussion_r522639549", "bodyText": "Can you please provide some test for that?\nIt could be with file based access control and file based group provider, to see if view owner is capable to read from table.", "author": "kokosing", "createdAt": "2020-11-13T04:55:15Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analyzer.java", "diffHunk": "@@ -79,7 +79,7 @@ public Analysis analyze(Statement statement, boolean isDescribe)\n     {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjcxMzc0Nw==", "url": "https://github.com/trinodb/trino/pull/5945#discussion_r522713747", "bodyText": "Do you have an example of how to set this up? I assume we\u2019d need a product test that uses the Hive connector and the group provider, but I don\u2019t know how to do that.", "author": "electrum", "createdAt": "2020-11-13T07:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYzOTU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgwNjc4OA==", "url": "https://github.com/trinodb/trino/pull/5945#discussion_r522806788", "bodyText": "FileGroupProvider ?", "author": "findepi", "createdAt": "2020-11-13T08:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYzOTU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgxMzIwMQ==", "url": "https://github.com/trinodb/trino/pull/5945#discussion_r522813201", "bodyText": "The problem is that FileGroupProvider is defined in presto-password-authenticators while FileBasedSystemAccessControl is defined in presto-plugin-toolkit, that makes this test a bit awkard.\nAnother approach, preferable by me, would be to change DistributedQueryRunner to accept GroupProviders so we could simply mock the group provider in tests like we can do with system level access control. Then you could just run simple query.", "author": "kokosing", "createdAt": "2020-11-13T08:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYzOTU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgxNjU1MA==", "url": "https://github.com/trinodb/trino/pull/5945#discussion_r522816550", "bodyText": "We can extend the DistributedQueryRunner. However, if we cannot test using FileBasedSystemAccessControl and FileGroupProvider other than in product tests, then something is wrong with our non-product tests. Isn't presto-tests supposed to give us such capabilities?", "author": "findepi", "createdAt": "2020-11-13T09:06:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYzOTU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0MTg5NQ==", "url": "https://github.com/trinodb/trino/pull/5945#discussion_r523241895", "bodyText": "We shouldn't need FileBasedSystemAccessControl for a test if we are doing a DistributedQueryRunner since that can also mock the access control. Note that while the code is in presto-plugin-toolkit, it's actually part of the core server in presto-main, unlike FileGroupProvider which is actually a plugin.", "author": "electrum", "createdAt": "2020-11-13T21:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYzOTU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0NTI2Nw==", "url": "https://github.com/trinodb/trino/pull/5945#discussion_r523245267", "bodyText": "That is correct", "author": "kokosing", "createdAt": "2020-11-13T21:36:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYzOTU0OQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM4Mjc1MA==", "url": "https://github.com/trinodb/trino/pull/5945#discussion_r523382750", "bodyText": "Add also a reset method to testing group provider", "author": "kokosing", "createdAt": "2020-11-14T06:11:16Z", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -1198,6 +1198,24 @@ public void testViewColumnAccessControl()\n                 \"Cannot select from columns \\\\[.*\\\\] in table .*.orders.*\",\n                 privilege(getSession().getUser(), \"orders\", SELECT_COLUMN));\n \n+        // verify that groups are set inside access control\n+        executeExclusively(() -> {\n+            try {\n+                // require view owner to be in a group to access table\n+                getQueryRunner().getAccessControl().denyIdentityTable((identity, table) -> identity.getGroups().contains(\"testgroup\") || !table.equals(\"orders\"));\n+                assertThatThrownBy(() -> getQueryRunner().execute(getSession(), \"SELECT * FROM \" + columnAccessViewName))\n+                        .hasMessageMatching(\"Access Denied: View owner does not have sufficient privileges: Cannot select from columns \\\\[.*] in table or view \\\\w+.\\\\w+.orders\");\n+\n+                // verify view can be queried when owner is in group\n+                getQueryRunner().getGroupProvider().setUserGroups(ImmutableMap.of(viewOwnerSession.getUser(), ImmutableSet.of(\"testgroup\")));\n+                getQueryRunner().execute(getSession(), \"SELECT * FROM \" + columnAccessViewName);\n+            }\n+            finally {\n+                getQueryRunner().getAccessControl().reset();\n+                getQueryRunner().getGroupProvider().setUserGroups(ImmutableMap.of());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "3db7856338ab66ca8944a0d4a6a1593a5d358e2c", "url": "https://github.com/trinodb/trino/commit/3db7856338ab66ca8944a0d4a6a1593a5d358e2c", "message": "Populate view owner groups for view access control", "committedDate": "2020-11-16T04:56:08Z", "type": "commit"}, {"oid": "3db7856338ab66ca8944a0d4a6a1593a5d358e2c", "url": "https://github.com/trinodb/trino/commit/3db7856338ab66ca8944a0d4a6a1593a5d358e2c", "message": "Populate view owner groups for view access control", "committedDate": "2020-11-16T04:56:08Z", "type": "forcePushed"}]}