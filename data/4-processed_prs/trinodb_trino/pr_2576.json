{"pr_number": 2576, "pr_title": "Join minor cleanups", "pr_createdAt": "2020-01-22T10:27:25Z", "pr_url": "https://github.com/trinodb/trino/pull/2576", "timeline": [{"oid": "69be9b08086d1bc7ad7fae396f676a22cf4cdb56", "url": "https://github.com/trinodb/trino/commit/69be9b08086d1bc7ad7fae396f676a22cf4cdb56", "message": "Do at least one loop iteration before yielding", "committedDate": "2020-01-22T10:15:42Z", "type": "commit"}, {"oid": "986e0716fa8f98f0977e237fd2553acb63a2cbee", "url": "https://github.com/trinodb/trino/commit/986e0716fa8f98f0977e237fd2553acb63a2cbee", "message": "Remove redundant assignment\n\nProbe positions starts from -1. Therefore\nfirst loop iteration on probe will setup\nrow state correctly.", "committedDate": "2020-01-22T10:16:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4NDQzMA==", "url": "https://github.com/trinodb/trino/pull/2576#discussion_r369484430", "bodyText": "It means currentProbePositionProducedRow is no longer explicitly reset when we move to the next position.\nI think currentProbePositionProducedRow should be reset here or advanceProbePosition (equally non-ideal options), but rather not in the if above.\nAlso, i think the new code is not correct -- in case of spill if it affects current row, currentProbePositionProducedRow will remembered from last row being processed when we re-add the page.", "author": "findepi", "createdAt": "2020-01-22T10:37:55Z", "path": "presto-main/src/main/java/io/prestosql/operator/LookupJoinOperator.java", "diffHunk": "@@ -550,13 +550,14 @@ private void processProbe(LookupSource lookupSource)\n                             break;\n                         }\n                     }\n+                    // reset row join state for next row\n+                    currentProbePositionProducedRow = false;\n+                    statisticsCounter.recordProbe(joinSourcePositions);\n+                    joinSourcePositions = 0;\n                 }\n-                currentProbePositionProducedRow = false;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMjEyOA==", "url": "https://github.com/trinodb/trino/pull/2576#discussion_r369522128", "bodyText": "It means currentProbePositionProducedRow is no longer explicitly reset when we move to the next position.\n\nThere is no point of that since only non actual row (non -1) modifies row state (if (probe.getPosition() >= 0) { condition).\nI wanted to make row state reset consistent (after actual is processed), but also to avoid updating stats for -1 row.\n\nin case of spill if it affects current row, currentProbePositionProducedRow will remembered from last row being processed when we re-add the page.\n\nWhen we add new probe, it's position is set to -1. When we restore row, we explicitly restore row state.", "author": "sopel39", "createdAt": "2020-01-22T12:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4NDQzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4Njg4OA==", "url": "https://github.com/trinodb/trino/pull/2576#discussion_r369486888", "bodyText": "we should move recordProbe (as you did) & leave the others here.\nWhat we should do, however, is reset joinSourcePositions and currentProbePositionProducedRow in the same place (currently not the case). Maybe let's move them all to advanceProbePosition, after joinPosition = probe.getCurrentJoinPosition(lookupSource); line", "author": "findepi", "createdAt": "2020-01-22T10:43:09Z", "path": "presto-main/src/main/java/io/prestosql/operator/LookupJoinOperator.java", "diffHunk": "@@ -550,13 +550,14 @@ private void processProbe(LookupSource lookupSource)\n                             break;\n                         }\n                     }\n+                    // reset row join state for next row\n+                    currentProbePositionProducedRow = false;\n+                    statisticsCounter.recordProbe(joinSourcePositions);\n+                    joinSourcePositions = 0;\n                 }\n-                currentProbePositionProducedRow = false;\n                 if (!advanceProbePosition(lookupSource)) {\n                     break;\n                 }\n-                statisticsCounter.recordProbe(joinSourcePositions);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyNDM2MA==", "url": "https://github.com/trinodb/trino/pull/2576#discussion_r369524360", "bodyText": "What we should do, however, is reset joinSourcePositions and\n\ngood idea.", "author": "sopel39", "createdAt": "2020-01-22T12:11:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4Njg4OA=="}], "type": "inlineReview"}, {"oid": "097e1e183f65b34780d68b746b664d3f4f9fdef6", "url": "https://github.com/trinodb/trino/commit/097e1e183f65b34780d68b746b664d3f4f9fdef6", "message": "Reset row state in advanceProbePosition\n\nEntire row state in consistently\nreset in advanceProbePosition method.\n\nrecordProbe is only called for valid (non -1)\nprobe rows.", "committedDate": "2020-01-22T12:09:48Z", "type": "commit"}, {"oid": "cffc7de6c40ffe1fcc970651c160a4029001641b", "url": "https://github.com/trinodb/trino/commit/cffc7de6c40ffe1fcc970651c160a4029001641b", "message": "Remove redundant assignment", "committedDate": "2020-01-22T12:10:42Z", "type": "commit"}, {"oid": "cffc7de6c40ffe1fcc970651c160a4029001641b", "url": "https://github.com/trinodb/trino/commit/cffc7de6c40ffe1fcc970651c160a4029001641b", "message": "Remove redundant assignment", "committedDate": "2020-01-22T12:10:42Z", "type": "forcePushed"}]}