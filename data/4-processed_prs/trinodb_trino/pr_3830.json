{"pr_number": 3830, "pr_title": "Handle mixed case partition names in sync_partition_metadata", "pr_createdAt": "2020-05-22T23:01:39Z", "pr_url": "https://github.com/trinodb/trino/pull/3830", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUyMjEwNg==", "url": "https://github.com/trinodb/trino/pull/3830#discussion_r429522106", "bodyText": "it should rather be procedure (optional) parameter. Sorry for miscommunication on this.", "author": "findepi", "createdAt": "2020-05-23T07:14:46Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/procedure/SyncPartitionMetadataProcedure.java", "diffHunk": "@@ -144,28 +145,31 @@ private void doSyncPartitionMetadata(ConnectorSession session, String schemaName\n         syncPartitions(partitionsToAdd, partitionsToDrop, syncMode, metastore, session, table);\n     }\n \n-    private static List<FileStatus> listDirectory(FileSystem fileSystem, FileStatus current, List<Column> partitionColumns, int depth)\n+    private static List<FileStatus> listDirectory(ConnectorSession session, FileSystem fileSystem, FileStatus current, List<Column> partitionColumns, int depth)\n     {\n         if (depth == 0) {\n             return ImmutableList.of(current);\n         }\n \n         try {\n             return Stream.of(fileSystem.listStatus(current.getPath()))\n-                    .filter(fileStatus -> isValidPartitionPath(fileStatus, partitionColumns.get(partitionColumns.size() - depth)))\n-                    .flatMap(directory -> listDirectory(fileSystem, directory, partitionColumns, depth - 1).stream())\n+                    .filter(fileStatus -> isValidPartitionPath(session, fileStatus, partitionColumns.get(partitionColumns.size() - depth)))\n+                    .flatMap(directory -> listDirectory(session, fileSystem, directory, partitionColumns, depth - 1).stream())\n                     .collect(toImmutableList());\n         }\n         catch (IOException e) {\n             throw new PrestoException(HIVE_FILESYSTEM_ERROR, e);\n         }\n     }\n \n-    private static boolean isValidPartitionPath(FileStatus file, Column column)\n+    private static boolean isValidPartitionPath(ConnectorSession session, FileStatus file, Column column)\n     {\n-        Path path = file.getPath();\n+        String path = file.getPath().getName();\n+        if (isAllowMixedCasePartitions(session)) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0MDA4MA==", "url": "https://github.com/trinodb/trino/pull/3830#discussion_r429540080", "bodyText": "My bad, I misread the Github issue description.", "author": "aalbu", "createdAt": "2020-05-23T12:04:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUyMjEwNg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2ODA5NA==", "url": "https://github.com/trinodb/trino/pull/3830#discussion_r429568094", "bodyText": "Make this case_sensitive since \u201cinsensitive\u201d is a negative and using negatives for booleans can be confusing. This is my fault since I suggested a bad name when filing the issue.", "author": "electrum", "createdAt": "2020-05-23T18:31:32Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/procedure/SyncPartitionMetadataProcedure.java", "diffHunk": "@@ -94,18 +97,19 @@ public Procedure get()\n                 ImmutableList.of(\n                         new Argument(\"schema_name\", VARCHAR),\n                         new Argument(\"table_name\", VARCHAR),\n-                        new Argument(\"mode\", VARCHAR)),\n+                        new Argument(\"mode\", VARCHAR),\n+                        new Argument(\"case_insensitive\", BOOLEAN, false, FALSE)),", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2ODI1Ng==", "url": "https://github.com/trinodb/trino/pull/3830#discussion_r429568256", "bodyText": "Session is not needed here", "author": "electrum", "createdAt": "2020-05-23T18:33:45Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/procedure/SyncPartitionMetadataProcedure.java", "diffHunk": "@@ -127,7 +131,7 @@ private void doSyncPartitionMetadata(ConnectorSession session, String schemaName\n             FileSystem fileSystem = hdfsEnvironment.getFileSystem(hdfsContext, tableLocation);\n             List<String> partitionsInMetastore = metastore.getPartitionNames(identity, schemaName, tableName)\n                     .orElseThrow(() -> new TableNotFoundException(schemaTableName));\n-            List<String> partitionsInFileSystem = listDirectory(fileSystem, fileSystem.getFileStatus(tableLocation), table.getPartitionColumns(), table.getPartitionColumns().size()).stream()\n+            List<String> partitionsInFileSystem = listDirectory(session, fileSystem, fileSystem.getFileStatus(tableLocation), table.getPartitionColumns(), table.getPartitionColumns().size(), caseInsensitive).stream()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2ODI4NA==", "url": "https://github.com/trinodb/trino/pull/3830#discussion_r429568284", "bodyText": "This looks unused", "author": "electrum", "createdAt": "2020-05-23T18:34:23Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestSyncPartitionMetadata.java", "diffHunk": "@@ -22,13 +22,16 @@\n import io.prestosql.tempto.query.QueryResult;\n import org.testng.annotations.Test;\n \n+import java.sql.SQLException;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4NTU3OA==", "url": "https://github.com/trinodb/trino/pull/3830#discussion_r429585578", "bodyText": "It's used in an assertion below (https://github.com/prestosql/presto/pull/3830/files#diff-6536cdd5dd9e669a967fccf854e75924R124).", "author": "aalbu", "createdAt": "2020-05-23T23:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2ODI4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2ODM4NA==", "url": "https://github.com/trinodb/trino/pull/3830#discussion_r429568384", "bodyText": "This needs updating", "author": "electrum", "createdAt": "2020-05-23T18:35:37Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestSyncPartitionMetadata.java", "diffHunk": "@@ -92,25 +95,56 @@ public void testInvalidSyncMode()\n         cleanup(tableName);\n     }\n \n+    @Test(groups = {HIVE_PARTITIONING, SMOKE})\n+    public void testMixedCasePartitionNames()\n+    {\n+        String tableName = \"test_sync_partition_mixed_case\";\n+        prepare(hdfsClient, hdfsDataSourceWriter, tableName);\n+        String tableLocation = WAREHOUSE_DIRECTORY_PATH + tableName;\n+        HiveDataSource dataSource = createResourceDataSource(tableName, \"io/prestosql/tests/hive/data/single_int_column/data.orc\");\n+        hdfsDataSourceWriter.ensureDataOnHdfs(tableLocation + \"/col_X=g/Col_y=10\", dataSource);\n+        hdfsDataSourceWriter.ensureDataOnHdfs(tableLocation + \"/COL_X=h/col_y=11\", dataSource);\n+\n+        query(\"CALL system.sync_partition_metadata('default', '\" + tableName + \"', 'FULL', true)\");\n+        assertPartitions(tableName, row(\"a\", \"1\"), row(\"f\", \"9\"), row(\"g\", \"10\"), row(\"h\", \"11\"));\n+        assertData(tableName, row(1, \"a\", \"1\"), row(42, \"f\", \"9\"), row(42, \"g\", \"10\"), row(42, \"h\", \"11\"));\n+    }\n+\n+    @Test(groups = {HIVE_PARTITIONING, SMOKE})\n+    public void testConflictingMixedCasePartitionNames()\n+    {\n+        String tableName = \"test_sync_partition_mixed_case\";\n+        prepare(hdfsClient, hdfsDataSourceWriter, tableName);\n+        String tableLocation = WAREHOUSE_DIRECTORY_PATH + tableName;\n+        HiveDataSource dataSource = createResourceDataSource(tableName, \"io/prestosql/tests/hive/data/single_int_column/data.orc\");\n+        // this conflicts with a partition that already exits in the metastore\n+        hdfsDataSourceWriter.ensureDataOnHdfs(tableLocation + \"/COL_X=a/cOl_y=1\", dataSource);\n+\n+        assertThatThrownBy(() -> query(\"CALL system.sync_partition_metadata('default', '\" + tableName + \"', 'ADD', true)\"))\n+                .hasCauseInstanceOf(SQLException.class)\n+                .hasMessageContaining(\"One or more partitions already exist for table 'default.test_sync_partition_mixed_case'\");\n+        assertPartitions(tableName, row(\"a\", \"1\"), row(\"b\", \"2\"));\n+    }\n+\n     private static void prepare(HdfsClient hdfsClient, HdfsDataSourceWriter hdfsDataSourceWriter, String tableName)\n     {\n         query(\"DROP TABLE IF EXISTS \" + tableName);\n \n-        query(\"CREATE TABLE \" + tableName + \" (payload bigint, x varchar, y varchar) WITH (format = 'ORC', partitioned_by = ARRAY[ 'x', 'y' ])\");\n+        query(\"CREATE TABLE \" + tableName + \" (payload bigint, col_x varchar, col_y varchar) WITH (format = 'ORC', partitioned_by = ARRAY[ 'col_x', 'col_y' ])\");\n         query(\"INSERT INTO \" + tableName + \" VALUES (1, 'a', '1'), (2, 'b', '2')\");\n \n         String tableLocation = WAREHOUSE_DIRECTORY_PATH + tableName;\n-        // remove partition x=b/y=2\n-        hdfsClient.delete(tableLocation + \"/x=b/y=2\");\n-        // add partition directory x=f/y=9 with single_int_column/data.orc file\n-        hdfsClient.createDirectory(tableLocation + \"/x=f/y=9\");\n+        // remove partition x=b/col_y=2", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU2ODQzMA==", "url": "https://github.com/trinodb/trino/pull/3830#discussion_r429568430", "bodyText": "Same", "author": "electrum", "createdAt": "2020-05-23T18:36:06Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestSyncPartitionMetadata.java", "diffHunk": "@@ -92,25 +95,56 @@ public void testInvalidSyncMode()\n         cleanup(tableName);\n     }\n \n+    @Test(groups = {HIVE_PARTITIONING, SMOKE})\n+    public void testMixedCasePartitionNames()\n+    {\n+        String tableName = \"test_sync_partition_mixed_case\";\n+        prepare(hdfsClient, hdfsDataSourceWriter, tableName);\n+        String tableLocation = WAREHOUSE_DIRECTORY_PATH + tableName;\n+        HiveDataSource dataSource = createResourceDataSource(tableName, \"io/prestosql/tests/hive/data/single_int_column/data.orc\");\n+        hdfsDataSourceWriter.ensureDataOnHdfs(tableLocation + \"/col_X=g/Col_y=10\", dataSource);\n+        hdfsDataSourceWriter.ensureDataOnHdfs(tableLocation + \"/COL_X=h/col_y=11\", dataSource);\n+\n+        query(\"CALL system.sync_partition_metadata('default', '\" + tableName + \"', 'FULL', true)\");\n+        assertPartitions(tableName, row(\"a\", \"1\"), row(\"f\", \"9\"), row(\"g\", \"10\"), row(\"h\", \"11\"));\n+        assertData(tableName, row(1, \"a\", \"1\"), row(42, \"f\", \"9\"), row(42, \"g\", \"10\"), row(42, \"h\", \"11\"));\n+    }\n+\n+    @Test(groups = {HIVE_PARTITIONING, SMOKE})\n+    public void testConflictingMixedCasePartitionNames()\n+    {\n+        String tableName = \"test_sync_partition_mixed_case\";\n+        prepare(hdfsClient, hdfsDataSourceWriter, tableName);\n+        String tableLocation = WAREHOUSE_DIRECTORY_PATH + tableName;\n+        HiveDataSource dataSource = createResourceDataSource(tableName, \"io/prestosql/tests/hive/data/single_int_column/data.orc\");\n+        // this conflicts with a partition that already exits in the metastore\n+        hdfsDataSourceWriter.ensureDataOnHdfs(tableLocation + \"/COL_X=a/cOl_y=1\", dataSource);\n+\n+        assertThatThrownBy(() -> query(\"CALL system.sync_partition_metadata('default', '\" + tableName + \"', 'ADD', true)\"))\n+                .hasCauseInstanceOf(SQLException.class)\n+                .hasMessageContaining(\"One or more partitions already exist for table 'default.test_sync_partition_mixed_case'\");\n+        assertPartitions(tableName, row(\"a\", \"1\"), row(\"b\", \"2\"));\n+    }\n+\n     private static void prepare(HdfsClient hdfsClient, HdfsDataSourceWriter hdfsDataSourceWriter, String tableName)\n     {\n         query(\"DROP TABLE IF EXISTS \" + tableName);\n \n-        query(\"CREATE TABLE \" + tableName + \" (payload bigint, x varchar, y varchar) WITH (format = 'ORC', partitioned_by = ARRAY[ 'x', 'y' ])\");\n+        query(\"CREATE TABLE \" + tableName + \" (payload bigint, col_x varchar, col_y varchar) WITH (format = 'ORC', partitioned_by = ARRAY[ 'col_x', 'col_y' ])\");\n         query(\"INSERT INTO \" + tableName + \" VALUES (1, 'a', '1'), (2, 'b', '2')\");\n \n         String tableLocation = WAREHOUSE_DIRECTORY_PATH + tableName;\n-        // remove partition x=b/y=2\n-        hdfsClient.delete(tableLocation + \"/x=b/y=2\");\n-        // add partition directory x=f/y=9 with single_int_column/data.orc file\n-        hdfsClient.createDirectory(tableLocation + \"/x=f/y=9\");\n+        // remove partition x=b/col_y=2\n+        hdfsClient.delete(tableLocation + \"/col_x=b/col_y=2\");\n+        // add partition directory x=f/col_y=9 with single_int_column/data.orc file", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MTg3MQ==", "url": "https://github.com/trinodb/trino/pull/3830#discussion_r429591871", "bodyText": "Should this be Locale.getDefault()?", "author": "aalbu", "createdAt": "2020-05-24T01:57:45Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/procedure/SyncPartitionMetadataProcedure.java", "diffHunk": "@@ -144,28 +148,31 @@ private void doSyncPartitionMetadata(ConnectorSession session, String schemaName\n         syncPartitions(partitionsToAdd, partitionsToDrop, syncMode, metastore, session, table);\n     }\n \n-    private static List<FileStatus> listDirectory(FileSystem fileSystem, FileStatus current, List<Column> partitionColumns, int depth)\n+    private static List<FileStatus> listDirectory(ConnectorSession session, FileSystem fileSystem, FileStatus current, List<Column> partitionColumns, int depth, boolean caseInsensitive)\n     {\n         if (depth == 0) {\n             return ImmutableList.of(current);\n         }\n \n         try {\n             return Stream.of(fileSystem.listStatus(current.getPath()))\n-                    .filter(fileStatus -> isValidPartitionPath(fileStatus, partitionColumns.get(partitionColumns.size() - depth)))\n-                    .flatMap(directory -> listDirectory(fileSystem, directory, partitionColumns, depth - 1).stream())\n+                    .filter(fileStatus -> isValidPartitionPath(session, fileStatus, partitionColumns.get(partitionColumns.size() - depth), caseInsensitive))\n+                    .flatMap(directory -> listDirectory(session, fileSystem, directory, partitionColumns, depth - 1, caseInsensitive).stream())\n                     .collect(toImmutableList());\n         }\n         catch (IOException e) {\n             throw new PrestoException(HIVE_FILESYSTEM_ERROR, e);\n         }\n     }\n \n-    private static boolean isValidPartitionPath(FileStatus file, Column column)\n+    private static boolean isValidPartitionPath(ConnectorSession session, FileStatus file, Column column, boolean caseInsensitive)\n     {\n-        Path path = file.getPath();\n+        String path = file.getPath().getName();\n+        if (caseInsensitive) {\n+            path = path.toLowerCase(ENGLISH);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MjAwNw==", "url": "https://github.com/trinodb/trino/pull/3830#discussion_r429592007", "bodyText": "No, we never (or should not) depend on the JVM locale.", "author": "electrum", "createdAt": "2020-05-24T02:01:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MTg3MQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NDI2MA==", "url": "https://github.com/trinodb/trino/pull/3830#discussion_r432494260", "bodyText": "add a case with COL_X=UPPER_CASE that woud verify the value is registered as UPPER_CASE and not upper_case", "author": "findepi", "createdAt": "2020-05-29T13:48:19Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestSyncPartitionMetadata.java", "diffHunk": "@@ -92,25 +93,57 @@ public void testInvalidSyncMode()\n         cleanup(tableName);\n     }\n \n+    @Test(groups = {HIVE_PARTITIONING, SMOKE})\n+    public void testMixedCasePartitionNames()\n+    {\n+        String tableName = \"test_sync_partition_mixed_case\";\n+        prepare(hdfsClient, hdfsDataSourceWriter, tableName);\n+        String tableLocation = WAREHOUSE_DIRECTORY_PATH + tableName;\n+        HiveDataSource dataSource = createResourceDataSource(tableName, \"io/prestosql/tests/hive/data/single_int_column/data.orc\");\n+        hdfsDataSourceWriter.ensureDataOnHdfs(tableLocation + \"/col_x=h/col_Y=11\", dataSource);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "376dad234daefeed7f27fa513e0aa37e267b884a", "url": "https://github.com/trinodb/trino/commit/376dad234daefeed7f27fa513e0aa37e267b884a", "message": "Handle mixed case partition names in sync_partition_metadata", "committedDate": "2020-06-01T02:57:32Z", "type": "commit"}, {"oid": "376dad234daefeed7f27fa513e0aa37e267b884a", "url": "https://github.com/trinodb/trino/commit/376dad234daefeed7f27fa513e0aa37e267b884a", "message": "Handle mixed case partition names in sync_partition_metadata", "committedDate": "2020-06-01T02:57:32Z", "type": "forcePushed"}]}