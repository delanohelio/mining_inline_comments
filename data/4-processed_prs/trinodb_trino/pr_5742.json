{"pr_number": 5742, "pr_title": "Fix rounding in cast from TIME to TIMESTAMP", "pr_createdAt": "2020-10-29T19:19:56Z", "pr_url": "https://github.com/trinodb/trino/pull/5742", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzOTI0OQ==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514539249", "bodyText": "Does rescale round or truncate?\ni checked it truncates, but i'd write this simply as\n// picoFraction is already rounded to whole micros\nlong microFraction = picoFraction / PICOSECONDS_PER_MICROSECOND;", "author": "findepi", "createdAt": "2020-10-29T20:15:20Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/time/TimeToTimestampCast.java", "diffHunk": "@@ -56,23 +57,36 @@ public static LongTimestamp castToLong(\n             ConnectorSession session,\n             @SqlType(\"time(sourcePrecision)\") long time)\n     {\n-        long epochMicros = cast(sourcePrecision, targetPrecision, session, time);\n-        return new LongTimestamp(epochMicros, (int) (time % PICOSECONDS_PER_MICROSECOND));\n+        long epochSeconds = getEpochSeconds(session, time);\n+        long picoFraction = getPicoFraction(sourcePrecision, targetPrecision, time);\n+        long epochMicros = computeEpochMicros(epochSeconds, picoFraction);\n+\n+        int picosOfMicro = (int) (picoFraction % PICOSECONDS_PER_MICROSECOND);\n+        return new LongTimestamp(epochMicros, picosOfMicro);\n     }\n \n-    private static long cast(long sourcePrecision, long targetPrecision, ConnectorSession session, long time)\n+    private static long getEpochSeconds(ConnectorSession session, long time)\n     {\n         // TODO: consider using something more efficient than LocalDate.ofInstant() to compute epochDay\n         long epochDay = LocalDate.ofInstant(session.getStart(), session.getTimeZoneKey().getZoneId())\n                 .toEpochDay();\n \n-        long epochSecond = multiplyExact(epochDay, SECONDS_PER_DAY) + time / PICOSECONDS_PER_SECOND;\n+        return multiplyExact(epochDay, SECONDS_PER_DAY) + time / PICOSECONDS_PER_SECOND;\n+    }\n+\n+    private static long getPicoFraction(long sourcePrecision, long targetPrecision, long time)\n+    {\n         long picoFraction = time % PICOSECONDS_PER_SECOND;\n         if (sourcePrecision > targetPrecision) {\n-            picoFraction = round(picoFraction, (int) (TimeType.MAX_PRECISION - targetPrecision));\n+            picoFraction = round(picoFraction, (int) (12 - targetPrecision));\n         }\n \n-        long microFraction = rescale(picoFraction, TimeType.MAX_PRECISION, 6);\n-        return multiplyExact(epochSecond, MICROSECONDS_PER_SECOND) + microFraction;\n+        return picoFraction;\n+    }\n+\n+    private static long computeEpochMicros(long epochSeconds, long picoFraction)\n+    {\n+        long microFraction = rescale(picoFraction, 12, 6);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MDg5OQ==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514540899", "bodyText": "Mentioning epochMicros and precision as part of the exc msg may help tracing down the problem, should the exception occur anywhere outside of our tests.\nintroducing private void checkArgument(...) may help increase readability.", "author": "findepi", "createdAt": "2020-10-29T20:18:19Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "diffHunk": "@@ -43,7 +45,26 @@ public static SqlTimestamp fromMillis(int precision, long millis)\n \n     public static SqlTimestamp newInstance(int precision, long epochMicros, int picosOfMicro)\n     {\n-        return newInstanceWithRounding(precision, epochMicros, picosOfMicro);\n+        if (precision <= 6) {\n+            if (picosOfMicro != 0) {\n+                throw new IllegalArgumentException(\"Expected picosOfMicro to be 0 for precision <= 6: \" + picosOfMicro);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MTY1OA==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514541658", "bodyText": "since you already know precision <= 6, you can more tersely:\nif (round(epochMicros, 6 - precision) != epochMicros)", "author": "findepi", "createdAt": "2020-10-29T20:19:47Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "diffHunk": "@@ -43,7 +45,26 @@ public static SqlTimestamp fromMillis(int precision, long millis)\n \n     public static SqlTimestamp newInstance(int precision, long epochMicros, int picosOfMicro)\n     {\n-        return newInstanceWithRounding(precision, epochMicros, picosOfMicro);\n+        if (precision <= 6) {\n+            if (picosOfMicro != 0) {\n+                throw new IllegalArgumentException(\"Expected picosOfMicro to be 0 for precision <= 6: \" + picosOfMicro);\n+            }\n+\n+            if (rescale(rescale(epochMicros, 6, precision), precision, 6) != epochMicros) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MjM5MQ==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514542391", "bodyText": "round as above", "author": "findepi", "createdAt": "2020-10-29T20:21:13Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "diffHunk": "@@ -43,7 +45,26 @@ public static SqlTimestamp fromMillis(int precision, long millis)\n \n     public static SqlTimestamp newInstance(int precision, long epochMicros, int picosOfMicro)\n     {\n-        return newInstanceWithRounding(precision, epochMicros, picosOfMicro);\n+        if (precision <= 6) {\n+            if (picosOfMicro != 0) {\n+                throw new IllegalArgumentException(\"Expected picosOfMicro to be 0 for precision <= 6: \" + picosOfMicro);\n+            }\n+\n+            if (rescale(rescale(epochMicros, 6, precision), precision, 6) != epochMicros) {\n+                throw new IllegalArgumentException(format(\"Expected 0s for digits beyond precision %s: epochMicros = %s\", precision, epochMicros));\n+            }\n+        }\n+        else {\n+            if (rescale(rescale(picosOfMicro, 12, precision), precision, 12) != picosOfMicro) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MzIzNA==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514543234", "bodyText": "should the fromMillis above do rounding or checks?\nor maybe we (re)move it, since it is used in tests only", "author": "findepi", "createdAt": "2020-10-29T20:22:57Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "diffHunk": "@@ -43,7 +45,26 @@ public static SqlTimestamp fromMillis(int precision, long millis)\n \n     public static SqlTimestamp newInstance(int precision, long epochMicros, int picosOfMicro)\n     {\n-        return newInstanceWithRounding(precision, epochMicros, picosOfMicro);\n+        if (precision <= 6) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3ODc0Nw==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514578747", "bodyText": "It's supposed to be a convenience method to instantiate a SqlTimestamp of a given precision, including any necessary rounding. The issue with (re)moving it is that it would require making newInstanceWithRounding public, and that's not something I want to be visible.", "author": "martint", "createdAt": "2020-10-29T21:28:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MzIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4NzQwNA==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514587404", "bodyText": "The issue with (re)moving it is that it would require making newInstanceWithRounding public, and that's not something I want to be visible.\n\nfromMillis currently doesn't call newInstanceWithRounding, it calls newInstance\n(perhaps incorectly so?)", "author": "findepi", "createdAt": "2020-10-29T21:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MzIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5ODc3Mw==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514598773", "bodyText": "Oh yeah, I fixed that in my branch and forgot to push :)", "author": "martint", "createdAt": "2020-10-29T22:15:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MzIzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0NTc1Ng==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514545756", "bodyText": "rescale method works great when the rounding is known to be not necessary.\nFor cases when rounding may be necessary, round, floorDiv seem to offer well defined semantics.\nIn this commit you're using the rounding-or-truncation of this method, but i'd change it to expect that value is pre-rounded. (actual check may be too expensive for runtime, idk).\nThis is more relevant when we allow negative numbers here.", "author": "findepi", "createdAt": "2020-10-29T20:27:35Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/Timestamps.java", "diffHunk": "@@ -79,10 +79,6 @@ public static long round(long value, int magnitude)\n      */\n     static long rescale(long value, int fromPrecision, int toPrecision)\n     {\n-        if (value < 0) {\n-            throw new IllegalArgumentException(\"value must be >= 0\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4MDc1MA==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514580750", "bodyText": "rescale method works great when the rounding is known to be not necessary.\n\nCorrect, and that's the exact purpose of this method. The only reason we had this check is to protect against trying to rescale epoch values which can be negative. But it doesn't matter. I'll get rid of the call to rescale as you suggested above and revert this change.", "author": "martint", "createdAt": "2020-10-29T21:32:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0NTc1Ng=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1NjE5OA==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514956198", "bodyText": "\"round down\"\nor \"round towards negative infinity\"", "author": "findepi", "createdAt": "2020-10-30T09:05:20Z", "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestTimestamps.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.type;\n+\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.Timestamps.roundDiv;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestTimestamps\n+{\n+    @Test\n+    public void testRoundDiv()\n+    {\n+        // round towards negative", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NzQ0MQ==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r515257441", "bodyText": "I had it as \"round down\", but that's a little ambiguous - is it \"down\" in magnitude or in the ordering-of-natural-numbers sense? I ended up confusing myself, so I changed it to \"towards negative (direction)\". I can clarify with \"infinity\".", "author": "martint", "createdAt": "2020-10-30T17:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1NjE5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1NjM3MA==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514956370", "bodyText": "\"round up\"", "author": "findepi", "createdAt": "2020-10-30T09:05:42Z", "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestTimestamps.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.type;\n+\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.Timestamps.roundDiv;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestTimestamps\n+{\n+    @Test\n+    public void testRoundDiv()\n+    {\n+        // round towards negative\n+        assertThat(roundDiv(44444, 1)).isEqualTo(44444);\n+        assertThat(roundDiv(44444, 10)).isEqualTo(4444);\n+        assertThat(roundDiv(44444, 100)).isEqualTo(444);\n+        assertThat(roundDiv(44444, 1000)).isEqualTo(44);\n+        assertThat(roundDiv(44444, 10000)).isEqualTo(4);\n+        assertThat(roundDiv(44444, 100000)).isEqualTo(0);\n+\n+        assertThat(roundDiv(-55556, 1)).isEqualTo(-55556);\n+        assertThat(roundDiv(-55556, 10)).isEqualTo(-5556);\n+        assertThat(roundDiv(-55556, 100)).isEqualTo(-556);\n+        assertThat(roundDiv(-55556, 1000)).isEqualTo(-56);\n+        assertThat(roundDiv(-55556, 10000)).isEqualTo(-6);\n+        assertThat(roundDiv(-55556, 100000)).isEqualTo(-1);\n+\n+        // round towards positive", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1NjY3Ng==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514956676", "bodyText": "perhaps add a test with 0 divisor (failure)\nit would be great if negative divisor was rejected too", "author": "findepi", "createdAt": "2020-10-30T09:06:23Z", "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestTimestamps.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.type;\n+\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.Timestamps.roundDiv;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestTimestamps\n+{\n+    @Test\n+    public void testRoundDiv()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1ODgyNw==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514958827", "bodyText": "I dont understand the % here. If the value can >= PICOSECONDS_PER_MILLISECOND,  it seems we're discarding some information without compensating it (with eg epochMillis++ or whatever is appropriate)", "author": "findepi", "createdAt": "2020-10-30T09:10:39Z", "path": "presto-main/src/main/java/io/prestosql/testing/DateTimeTestingUtils.java", "diffHunk": "@@ -63,7 +64,7 @@ public static SqlTimestampWithTimeZone sqlTimestampWithTimeZoneOf(int precision,\n         ZonedDateTime base = ZonedDateTime.of(year, month, day, hour, minute, second, 0, timeZoneKey.getZoneId());\n \n         long epochMillis = base.toEpochSecond() * MILLISECONDS_PER_SECOND + nanoOfSecond / NANOSECONDS_PER_MILLISECOND;\n-        int picosOfMilli = (int) scaleNanosToPicos(nanoOfSecond);\n+        int picosOfMilli = (int) (scaleNanosToPicos(nanoOfSecond) % PICOSECONDS_PER_MILLISECOND);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1OTUyOQ==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r515259529", "bodyText": "Good point. Let me take another look. The current code is broken, regardless.", "author": "martint", "createdAt": "2020-10-30T17:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1ODgyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5ODk5MQ==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r515298991", "bodyText": "The new code is actually correct. It works because of the line above. epochMillis is computed by taking into account nanoOfSecond / NANOSECONDS_PER_MILLISECOND. The remainder is stored in picosOfMilli.\nIt would actually be clearer to do it the other way around. I'll update it.\nlong epochMillis = base.toEpochSecond() * MILLISECONDS_PER_SECOND + nanoOfSecond / NANOSECONDS_PER_MILLISECOND;\nint picosOfMilli = (nanoOfSecond % NANOSECONDS_PER_MILLISECOND) * PICOSECONDS_PER_NANOSECOND;", "author": "martint", "createdAt": "2020-10-30T18:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1ODgyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3MjU1OQ==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r515372559", "bodyText": "yeah, that's so clear that even i can understand. thanks", "author": "findepi", "createdAt": "2020-10-30T20:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1ODgyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1OTUyMA==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514959520", "bodyText": "This could use checkArgument too", "author": "findepi", "createdAt": "2020-10-30T09:12:01Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestamp.java", "diffHunk": "@@ -38,12 +39,24 @@\n \n     public static SqlTimestamp fromMillis(int precision, long millis)\n     {\n-        return newInstance(precision, millis * 1000, 0);\n+        return newInstanceWithRounding(precision, millis * 1000, 0);\n     }\n \n     public static SqlTimestamp newInstance(int precision, long epochMicros, int picosOfMicro)\n     {\n-        return newInstanceWithRounding(precision, epochMicros, picosOfMicro);\n+        if (precision <= 6) {\n+            checkArgument(picosOfMicro == 0, \"Expected picosOfMicro to be 0 for precision %s: %s\", precision, picosOfMicro);\n+            checkArgument(round(epochMicros, 6 - precision) == epochMicros, \"Expected 0s for digits beyond precision %s: epochMicros = %s\", precision, epochMicros);\n+        }\n+        else {\n+            checkArgument(round(picosOfMicro, 12 - precision) == picosOfMicro, \"Expected 0s for digits beyond precision %s: picosOfMicro = %s\", precision, picosOfMicro);\n+        }\n+\n+        if (picosOfMicro < 0 || picosOfMicro > PICOSECONDS_PER_MICROSECOND) {\n+            throw new IllegalArgumentException(\"picosOfMicro is out of range: \" + picosOfMicro);\n+        }", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1OTcxNw==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r515259717", "bodyText": "I avoided that because it would cause boxing of the picosOfMicro value.", "author": "martint", "createdAt": "2020-10-30T17:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1OTUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM2OTc2Mw==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r515369763", "bodyText": "Same reasoning either applies or doesn't apply to other checks above, right?", "author": "findepi", "createdAt": "2020-10-30T20:40:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1OTUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MjgxNA==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r515392814", "bodyText": "Yes, you're right. For some reason, I was thinking that they were in a conditional that was only evaluated sometimes, but that's obviously not the case. I'll revert the changes", "author": "martint", "createdAt": "2020-10-30T21:34:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1OTUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5Mjg4OA==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r515392888", "bodyText": "Yes, you're right. For some reason, I was thinking that they were in a conditional that was only evaluated sometimes, but that's obviously not the case. I'll revert the changes", "author": "martint", "createdAt": "2020-10-30T21:34:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1OTUyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1OTY4MQ==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514959681", "bodyText": "This could use checkArgument too", "author": "findepi", "createdAt": "2020-10-30T09:12:18Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestampWithTimeZone.java", "diffHunk": "@@ -47,7 +48,19 @@ public static SqlTimestampWithTimeZone fromInstant(int precision, Instant instan\n \n     public static SqlTimestampWithTimeZone newInstance(int precision, long epochMillis, int picosOfMilli, TimeZoneKey timeZoneKey)\n     {\n-        return newInstanceWithRounding(precision, epochMillis, picosOfMilli, timeZoneKey);\n+        if (precision <= 3) {\n+            checkArgument(picosOfMilli == 0, \"Expected picosOfMilli to be 0 for precision %s: %s\", precision, picosOfMilli);\n+            checkArgument(round(epochMillis, 3 - precision) == epochMillis, \"Expected 0s for digits beyond precision %s: epochMicros = %s\", precision, epochMillis);\n+        }\n+        else {\n+            checkArgument(round(picosOfMilli, 12 - precision) == picosOfMilli, \"Expected 0s for digits beyond precision %s: picosOfMilli = %s\", precision, picosOfMilli);\n+        }\n+\n+        if (picosOfMilli < 0 || picosOfMilli > PICOSECONDS_PER_MILLISECOND) {\n+            throw new IllegalArgumentException(\"picosOfMilli is out of range: \" + picosOfMilli);\n+        }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk2MDcxNA==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r514960714", "bodyText": "This deletion is part Make construction of SqlTimestamp and SqlTimestampWithTimeZone stricter commit.\nWould it mnake sense toi keep the test, replacing newInstance with newInstanceWithRounding here?", "author": "findepi", "createdAt": "2020-10-30T09:14:22Z", "path": "presto-spi/src/test/java/io/prestosql/spi/type/TestSqlTimestamp.java", "diffHunk": "@@ -40,78 +40,6 @@ public void testBaseline()\n         assertThat(newInstance(12, 0, 0).toString()).isEqualTo(\"1970-01-01 00:00:00.000000000000\");\n     }\n \n-    @Test\n-    public void testPositiveEpoch()\n-    {\n-        // round down\n-        // represents a timestamp of 1970-01-01 00:00:00.111111111111\n-        assertThat(newInstance(0, 111111, 111111).toString()).isEqualTo(\"1970-01-01 00:00:00\");\n-        assertThat(newInstance(1, 111111, 111111).toString()).isEqualTo(\"1970-01-01 00:00:00.1\");\n-        assertThat(newInstance(2, 111111, 111111).toString()).isEqualTo(\"1970-01-01 00:00:00.11\");\n-        assertThat(newInstance(3, 111111, 111111).toString()).isEqualTo(\"1970-01-01 00:00:00.111\");\n-        assertThat(newInstance(4, 111111, 111111).toString()).isEqualTo(\"1970-01-01 00:00:00.1111\");\n-        assertThat(newInstance(5, 111111, 111111).toString()).isEqualTo(\"1970-01-01 00:00:00.11111\");\n-        assertThat(newInstance(6, 111111, 111111).toString()).isEqualTo(\"1970-01-01 00:00:00.111111\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2MTIxOQ==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r515261219", "bodyText": "I didn't want to make that method visible or part of that class' API, so that's why I didn't go that route. I can add tests for fromMillis, instead. There are already tests for roundTo, which exercises this method", "author": "martint", "createdAt": "2020-10-30T17:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk2MDcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3MDkzMQ==", "url": "https://github.com/trinodb/trino/pull/5742#discussion_r515370931", "bodyText": "you can make newInstanceWithRounding package private, visiblefortesting\nanyway, up to you", "author": "findepi", "createdAt": "2020-10-30T20:41:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk2MDcxNA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "4c6a259e3be9ba6d54a2094d0d699c589e04bb87", "url": "https://github.com/trinodb/trino/commit/4c6a259e3be9ba6d54a2094d0d699c589e04bb87", "message": "Rename newInstance to fromInstant\n\nThis is to distinguish between the semantics of newInstance, which is not supposed to do\nany conversions (rounding, etc), with the version that constructs a instance from an Instance\nby applying any necessary rounding.", "committedDate": "2020-11-02T15:39:13Z", "type": "commit"}, {"oid": "e630cecc7f0b3dbd8492b70608468b8bc61bd821", "url": "https://github.com/trinodb/trino/commit/e630cecc7f0b3dbd8492b70608468b8bc61bd821", "message": "Fix roundDiv when factor is 1\n\nFor negative numbers, it will produce a result different\nfrom the original value, which is incorrect.", "committedDate": "2020-11-02T15:39:14Z", "type": "commit"}, {"oid": "4aa3fe8c3b36dacc3efcbbd23cd902d98ad7a4d1", "url": "https://github.com/trinodb/trino/commit/4aa3fe8c3b36dacc3efcbbd23cd902d98ad7a4d1", "message": "Fix rounding in cast from TIME to TIMESTAMP", "committedDate": "2020-11-02T15:39:14Z", "type": "commit"}, {"oid": "ba17097e495544fdb633c327a8c548f5858f54d4", "url": "https://github.com/trinodb/trino/commit/ba17097e495544fdb633c327a8c548f5858f54d4", "message": "Make construction of SqlTimestamp and SqlTimestampWithTimeZone stricter\n\nPreviously, it was applying rounding rules, which ended up masking potential\nproblems in operations that are expected to do proper rounding.", "committedDate": "2020-11-02T15:39:14Z", "type": "commit"}, {"oid": "102b19707c3e086abe7bca8816fa635075d63a55", "url": "https://github.com/trinodb/trino/commit/102b19707c3e086abe7bca8816fa635075d63a55", "message": "Move time->timestamp cast tests to TestTime class\n\nThey were in a separate class for when we had to parameterize the tests\nfor legacy vs new timestamp semantics. That's no longer necessary.", "committedDate": "2020-11-02T15:39:14Z", "type": "commit"}, {"oid": "0b5b73afedc71f0d1f5095b2e4327b1a2268cf24", "url": "https://github.com/trinodb/trino/commit/0b5b73afedc71f0d1f5095b2e4327b1a2268cf24", "message": "Add tests for SqlTimestamp.fromMillis", "committedDate": "2020-11-02T15:39:14Z", "type": "commit"}, {"oid": "1aed95b96c7d3e298baa2e10656fd000eabd487d", "url": "https://github.com/trinodb/trino/commit/1aed95b96c7d3e298baa2e10656fd000eabd487d", "message": "Inline method", "committedDate": "2020-11-02T15:39:14Z", "type": "commit"}, {"oid": "1aed95b96c7d3e298baa2e10656fd000eabd487d", "url": "https://github.com/trinodb/trino/commit/1aed95b96c7d3e298baa2e10656fd000eabd487d", "message": "Inline method", "committedDate": "2020-11-02T15:39:14Z", "type": "forcePushed"}]}