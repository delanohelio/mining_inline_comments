{"pr_number": 2978, "pr_title": "Implement JDBC PreparedStatement.getParameterMetaData", "pr_createdAt": "2020-03-02T07:40:07Z", "pr_url": "https://github.com/trinodb/trino/pull/2978", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NDEyOQ==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r390264129", "bodyText": "Can we add this change in a separate commit ?", "author": "Praveen2112", "createdAt": "2020-03-10T11:58:53Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSetMetaData.java", "diffHunk": "@@ -191,9 +191,14 @@ public boolean isDefinitelyWritable(int column)\n     @Override\n     public String getColumnClassName(int column)\n             throws SQLException\n+    {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwODU1Ng==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r395408556", "bodyText": "Sure, done!", "author": "puchengy", "createdAt": "2020-03-20T01:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NDEyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NjY2MQ==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r390266661", "bodyText": "Where do we use this position details ?", "author": "Praveen2112", "createdAt": "2020-03-10T12:04:22Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ParameterInfo.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import io.prestosql.client.ClientTypeSignature;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ParameterInfo\n+{\n+    private final int position;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMzE5OQ==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r395403199", "bodyText": "This is the information returned by \"DESCRIBE INPUT\" https://prestosql.io/docs/current/sql/describe-input.html should we keep this information?", "author": "puchengy", "createdAt": "2020-03-20T01:28:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NjY2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NzAzNQ==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r390267035", "bodyText": "can we rename it as getParameter", "author": "Praveen2112", "createdAt": "2020-03-10T12:05:14Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ParameterMetaData;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.List;\n+\n+import static io.prestosql.jdbc.ColumnInfo.getType;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoParameterMetaData\n+        implements ParameterMetaData\n+{\n+    private final List<ParameterInfo> parameterInfo;\n+\n+    PrestoParameterMetaData(List<ParameterInfo> parameterInfo)\n+    {\n+        this.parameterInfo = ImmutableList.copyOf(requireNonNull(parameterInfo, \"parameterInfo is null\"));\n+    }\n+\n+    @Override\n+    public int getParameterCount() throws SQLException\n+    {\n+        return parameterInfo.size();\n+    }\n+\n+    @Override\n+    public int isNullable(int param) throws SQLException\n+    {\n+        throw new NotImplementedException(\"ParameterMetaData\", \"isNullable\");\n+    }\n+\n+    @Override\n+    public boolean isSigned(int param) throws SQLException\n+    {\n+        throw new NotImplementedException(\"ParameterMetaData\", \"isSigned\");\n+    }\n+\n+    @Override\n+    public int getPrecision(int param) throws SQLException\n+    {\n+        throw new NotImplementedException(\"ParameterMetaData\", \"getPrecision\");\n+    }\n+\n+    @Override\n+    public int getScale(int param) throws SQLException\n+    {\n+        throw new NotImplementedException(\"ParameterMetaData\", \"getScale\");\n+    }\n+\n+    @Override\n+    public int getParameterType(int param) throws SQLException\n+    {\n+        return getType(parameter(param).getTypeSignature());\n+    }\n+\n+    @Override\n+    public String getParameterTypeName(int param) throws SQLException\n+    {\n+        return parameter(param).getTypeSignature().getRawType();\n+    }\n+\n+    @Override\n+    public String getParameterClassName(int param) throws SQLException\n+    {\n+        int type = getType(parameter(param).getTypeSignature());\n+        if (type == Types.NULL) {\n+            return \"unknown\";\n+        }\n+        return PrestoResultSetMetaData.getTypeClassName(type);\n+    }\n+\n+    @Override\n+    public int getParameterMode(int param) throws SQLException\n+    {\n+        return ParameterMetaData.parameterModeUnknown;\n+    }\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface) throws SQLException\n+    {\n+        if (isWrapperFor(iface)) {\n+            return (T) this;\n+        }\n+        throw new SQLException(\"No wrapper for \" + iface);\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface) throws SQLException\n+    {\n+        return iface.isInstance(this);\n+    }\n+\n+    private ParameterInfo parameter(int column)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMzc0Nw==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r395403747", "bodyText": "Sure, will do", "author": "puchengy", "createdAt": "2020-03-20T01:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NzAzNQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5NzcwMA==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r401597700", "bodyText": "I think the position is not required for us. Instead what if we directly maintain ColumnInfo ? It gives us precision, scale, signed details for a particular column. Can we create something like this\n            ColumnInfo.Builder builder = new ColumnInfo.Builder()\n                    .setCatalogName(\"\") \n                    .setSchemaName(\"\") \n                    .setTableName(\"\") \n                    .setColumnLabel(resultSet.getString(\"Position\"))\n                    .setColumnName(resultSet.getString(\"Position\")) \n                    .setColumnTypeSignature(column.getTypeSignature())\n                    .setNullable(Nullable.UNKNOWN)\n            setTypeInfo(builder, column.getTypeSignature());\n            list.add(builder.build());\n\nWe just need to map the APIs for ColumnInfo when iterating over PrestoParameterMetaData.\n@electrum Your feedback on this approach ?", "author": "Praveen2112", "createdAt": "2020-04-01T13:03:41Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -877,6 +879,21 @@ private static String typedNull(String prestoType)\n         return format(\"CAST(NULL AS %s)\", prestoType);\n     }\n \n+    private static List<ParameterInfo> getDescribeInputParameterInfoList(ResultSet resultSet)\n+            throws SQLException\n+    {\n+        ImmutableList.Builder<ParameterInfo> list = ImmutableList.builder();\n+        while (resultSet.next()) {\n+            String position = resultSet.getString(\"Position\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4MzAxMA==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r401783010", "bodyText": "That sounds like a good approach. It will allow us to add those additional things later if needed.", "author": "electrum", "createdAt": "2020-04-01T17:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5NzcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5ODIxNw==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r401598217", "bodyText": "Can we move SQL keywords to upper case ?", "author": "Praveen2112", "createdAt": "2020-04-01T13:04:28Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -166,6 +168,63 @@ public void testGetMetadata()\n         }\n     }\n \n+    @Test\n+    public void testGetParameterMetaData()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"blackhole\", \"blackhole\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_get_parameterMetaData (\" +\n+                        \"c_boolean boolean, \" +\n+                        \"c_decimal decimal, \" +\n+                        \"c_decimal_2 decimal(10,3),\" +\n+                        \"c_varchar varchar, \" +\n+                        \"c_row row(x integer, y array(integer)), \" +\n+                        \"c_array array(integer), \" +\n+                        \"c_map map(integer, integer))\");\n+            }\n+\n+            try (PreparedStatement statement = connection.prepareStatement(\n+                    \"SELECT ? FROM test_get_parameterMetaData where c_boolean = ? AND c_decimal = ? \" +", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4NDU1Mw==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r401784553", "bodyText": "We need to implement all of these methods, otherwise programs that use the driver will fail. For nullable, it's fine to always return columnNullableUnknown. Using ColumnInfo as @Praveen2112 suggested should make this easier, as we'll have some of this information.", "author": "electrum", "createdAt": "2020-04-01T17:25:20Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ParameterMetaData;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.List;\n+\n+import static io.prestosql.jdbc.ColumnInfo.getType;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoParameterMetaData\n+        implements ParameterMetaData\n+{\n+    private final List<ParameterInfo> parameterInfo;\n+\n+    PrestoParameterMetaData(List<ParameterInfo> parameterInfo)\n+    {\n+        this.parameterInfo = ImmutableList.copyOf(requireNonNull(parameterInfo, \"parameterInfo is null\"));\n+    }\n+\n+    @Override\n+    public int getParameterCount() throws SQLException\n+    {\n+        return parameterInfo.size();\n+    }\n+\n+    @Override\n+    public int isNullable(int param) throws SQLException\n+    {\n+        throw new NotImplementedException(\"ParameterMetaData\", \"isNullable\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0NTA3NQ==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r403645075", "bodyText": "Can we rename this method as getParamerters", "author": "Praveen2112", "createdAt": "2020-04-05T03:52:39Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -877,6 +879,26 @@ private static String typedNull(String prestoType)\n         return format(\"CAST(NULL AS %s)\", prestoType);\n     }\n \n+    private static List<ColumnInfo> getDescribeInputParameterInfoList(ResultSet resultSet)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MDIwNQ==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r439740205", "bodyText": "But would there be any cases where the getArguments would be empty for CHAR or VARCHAR or DECIMAL ?", "author": "Praveen2112", "createdAt": "2020-06-13T13:41:24Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ColumnInfo.java", "diffHunk": "@@ -135,14 +135,18 @@ public static void setTypeInfo(Builder builder, ClientTypeSignature type)\n             case \"char\":\n                 builder.setSigned(false);\n                 builder.setScale(0);\n-                builder.setPrecision(type.getArguments().get(0).getLongLiteral().intValue());\n-                builder.setColumnDisplaySize(type.getArguments().get(0).getLongLiteral().intValue());\n+                if (!type.getArguments().isEmpty()) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5OTMzNA==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r439799334", "bodyText": "Post this PR (#4023) for these types we would get parameters.", "author": "Praveen2112", "createdAt": "2020-06-14T07:10:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MDIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNDAxNw==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r444214017", "bodyText": "This PR is merged with the master so we don't have to check if the arguments in empty or not", "author": "Praveen2112", "createdAt": "2020-06-23T13:15:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MDIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTA2Mw==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r439741063", "bodyText": "can we make it package protected ?", "author": "Praveen2112", "createdAt": "2020-06-13T13:55:49Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSetMetaData.java", "diffHunk": "@@ -191,9 +191,14 @@ public boolean isDefinitelyWritable(int column)\n     @Override\n     public String getColumnClassName(int column)\n             throws SQLException\n+    {\n+        return getType(column(column).getColumnType());\n+    }\n+\n+    protected static String getType(int type)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5OTQxOA==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r439799418", "bodyText": "Can we add VARCHAR type with specific length ?", "author": "Praveen2112", "createdAt": "2020-06-14T07:11:41Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -166,6 +168,67 @@ public void testGetMetadata()\n         }\n     }\n \n+    @Test\n+    public void testGetParameterMetaData()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"blackhole\", \"blackhole\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_get_parameterMetaData (\" +\n+                        \"c_boolean boolean, \" +\n+                        \"c_decimal decimal, \" +\n+                        \"c_decimal_2 decimal(10,3),\" +\n+                        \"c_varchar varchar, \" +\n+                        \"c_row row(x integer, y array(integer)), \" +", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5OTQ0NQ==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r439799445", "bodyText": "It would be better if we add test for scale and precision", "author": "Praveen2112", "createdAt": "2020-06-14T07:12:10Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -166,6 +168,67 @@ public void testGetMetadata()\n         }\n     }\n \n+    @Test\n+    public void testGetParameterMetaData()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"blackhole\", \"blackhole\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_get_parameterMetaData (\" +\n+                        \"c_boolean boolean, \" +\n+                        \"c_decimal decimal, \" +\n+                        \"c_decimal_2 decimal(10,3),\" +\n+                        \"c_varchar varchar, \" +\n+                        \"c_row row(x integer, y array(integer)), \" +\n+                        \"c_array array(integer), \" +\n+                        \"c_map map(integer, integer))\");\n+            }\n+\n+            try (PreparedStatement statement = connection.prepareStatement(\n+                    \"SELECT ? FROM test_get_parameterMetaData WHERE c_boolean = ? AND c_decimal = ? \" +\n+                            \"AND c_decimal_2 = ? AND c_varchar = ? AND c_row = ? AND c_array = ? AND c_map = ?\")) {\n+                ParameterMetaData parameterMetaData = statement.getParameterMetaData();\n+                assertEquals(parameterMetaData.getParameterCount(), 8);\n+\n+                assertEquals(parameterMetaData.getParameterClassName(1), \"unknown\");\n+                assertEquals(parameterMetaData.getParameterType(1), Types.NULL);\n+                assertEquals(parameterMetaData.getParameterTypeName(1), \"unknown\");\n+\n+                assertEquals(parameterMetaData.getParameterClassName(2), Boolean.class.getName());\n+                assertEquals(parameterMetaData.getParameterType(2), Types.BOOLEAN);\n+                assertEquals(parameterMetaData.getParameterTypeName(2), \"boolean\");\n+\n+                assertEquals(parameterMetaData.getParameterClassName(3), BigDecimal.class.getName());\n+                assertEquals(parameterMetaData.getParameterType(3), Types.DECIMAL);\n+                assertEquals(parameterMetaData.getParameterTypeName(3), \"decimal\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3MTUyMg==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r446571522", "bodyText": "I tested the cases for decimal(10,3) and varchar(5) as the rest values are determined by default, thus I don't think they need to be tested.", "author": "puchengy", "createdAt": "2020-06-27T21:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc5OTQ0NQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNTUwMw==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r446615503", "bodyText": "can we move throws SQLException to next line", "author": "Praveen2112", "createdAt": "2020-06-28T07:54:02Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ParameterMetaData;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.List;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoParameterMetaData\n+        implements ParameterMetaData\n+{\n+    private final List<ColumnInfo> parameterInfo;\n+\n+    PrestoParameterMetaData(List<ColumnInfo> parameterInfo)\n+    {\n+        this.parameterInfo = ImmutableList.copyOf(requireNonNull(parameterInfo, \"parameterInfo is null\"));\n+    }\n+\n+    @Override\n+    public int getParameterCount() throws SQLException", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNTc5Nw==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r446615797", "bodyText": "Can we rename it as builder", "author": "Praveen2112", "createdAt": "2020-06-28T07:57:09Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -877,6 +879,26 @@ private static String typedNull(String prestoType)\n         return format(\"CAST(NULL AS %s)\", prestoType);\n     }\n \n+    private static List<ColumnInfo> getParamerters(ResultSet resultSet)\n+            throws SQLException\n+    {\n+        ImmutableList.Builder<ColumnInfo> list = ImmutableList.builder();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNTgyMg==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r446615822", "bodyText": "as columnInfoBuilder", "author": "Praveen2112", "createdAt": "2020-06-28T07:57:21Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -877,6 +879,26 @@ private static String typedNull(String prestoType)\n         return format(\"CAST(NULL AS %s)\", prestoType);\n     }\n \n+    private static List<ColumnInfo> getParamerters(ResultSet resultSet)\n+            throws SQLException\n+    {\n+        ImmutableList.Builder<ColumnInfo> list = ImmutableList.builder();\n+        while (resultSet.next()) {\n+            ClientTypeSignature clientTypeSignature = getClientTypeSignatureFromTypeString(resultSet.getString(\"Type\"));\n+            ColumnInfo.Builder builder = new ColumnInfo.Builder()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNTg5Nw==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r446615897", "bodyText": "Can we import it as static method ?", "author": "Praveen2112", "createdAt": "2020-06-28T07:58:07Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ParameterMetaData;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.List;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoParameterMetaData\n+        implements ParameterMetaData\n+{\n+    private final List<ColumnInfo> parameterInfo;\n+\n+    PrestoParameterMetaData(List<ColumnInfo> parameterInfo)\n+    {\n+        this.parameterInfo = ImmutableList.copyOf(requireNonNull(parameterInfo, \"parameterInfo is null\"));\n+    }\n+\n+    @Override\n+    public int getParameterCount() throws SQLException\n+    {\n+        return parameterInfo.size();\n+    }\n+\n+    @Override\n+    public int isNullable(int param) throws SQLException\n+    {\n+        switch (getParameter(param).getNullable()) {\n+            case NO_NULLS:\n+                return ParameterMetaData.parameterNoNulls;\n+            case NULLABLE:\n+                return ParameterMetaData.parameterNullable;\n+            case UNKNOWN:\n+                return ParameterMetaData.parameterNullableUnknown;\n+            default:\n+                throw new SQLException(format(\"Invaliad Nullable Value %s\", getParameter(param).getNullable()));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isSigned(int param) throws SQLException\n+    {\n+        return getParameter(param).isSigned();\n+    }\n+\n+    @Override\n+    public int getPrecision(int param) throws SQLException\n+    {\n+        return getParameter(param).getPrecision();\n+    }\n+\n+    @Override\n+    public int getScale(int param) throws SQLException\n+    {\n+        return getParameter(param).getScale();\n+    }\n+\n+    @Override\n+    public int getParameterType(int param) throws SQLException\n+    {\n+        return getParameter(param).getColumnType();\n+    }\n+\n+    @Override\n+    public String getParameterTypeName(int param) throws SQLException\n+    {\n+        return getParameter(param).getColumnTypeSignature().getRawType();\n+    }\n+\n+    @Override\n+    public String getParameterClassName(int param) throws SQLException\n+    {\n+        int type = getParameter(param).getColumnType();\n+        if (type == Types.NULL) {\n+            return \"unknown\";\n+        }\n+        return PrestoResultSetMetaData.getType(type);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzMDA3Ng==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r446630076", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return ParameterMetaData.parameterNoNulls;\n          \n          \n            \n                            return parameterNoNulls;\n          \n      \n    \n    \n  \n\nsimilarly for others too", "author": "Praveen2112", "createdAt": "2020-06-28T10:07:35Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ParameterMetaData;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.List;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoParameterMetaData\n+        implements ParameterMetaData\n+{\n+    private final List<ColumnInfo> parameterInfo;\n+\n+    PrestoParameterMetaData(List<ColumnInfo> parameterInfo)\n+    {\n+        this.parameterInfo = ImmutableList.copyOf(requireNonNull(parameterInfo, \"parameterInfo is null\"));\n+    }\n+\n+    @Override\n+    public int getParameterCount() throws SQLException\n+    {\n+        return parameterInfo.size();\n+    }\n+\n+    @Override\n+    public int isNullable(int param) throws SQLException\n+    {\n+        switch (getParameter(param).getNullable()) {\n+            case NO_NULLS:\n+                return ParameterMetaData.parameterNoNulls;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAwNDI4OQ==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r450004289", "bodyText": "Can we move this to getType ?", "author": "Praveen2112", "createdAt": "2020-07-06T06:18:32Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ParameterMetaData;\n+import java.sql.SQLException;\n+import java.sql.Types;\n+import java.util.List;\n+\n+import static io.prestosql.jdbc.PrestoResultSetMetaData.getType;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoParameterMetaData\n+        implements ParameterMetaData\n+{\n+    private final List<ColumnInfo> parameterInfo;\n+\n+    PrestoParameterMetaData(List<ColumnInfo> parameterInfo)\n+    {\n+        this.parameterInfo = ImmutableList.copyOf(requireNonNull(parameterInfo, \"parameterInfo is null\"));\n+    }\n+\n+    @Override\n+    public int getParameterCount()\n+            throws SQLException\n+    {\n+        return parameterInfo.size();\n+    }\n+\n+    @Override\n+    public int isNullable(int param)\n+            throws SQLException\n+    {\n+        switch (getParameter(param).getNullable()) {\n+            case NO_NULLS:\n+                return parameterNoNulls;\n+            case NULLABLE:\n+                return parameterNullable;\n+            case UNKNOWN:\n+                return parameterNullableUnknown;\n+            default:\n+                throw new SQLException(format(\"Invaliad Nullable Value %s\", getParameter(param).getNullable()));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isSigned(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).isSigned();\n+    }\n+\n+    @Override\n+    public int getPrecision(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).getPrecision();\n+    }\n+\n+    @Override\n+    public int getScale(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).getScale();\n+    }\n+\n+    @Override\n+    public int getParameterType(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).getColumnType();\n+    }\n+\n+    @Override\n+    public String getParameterTypeName(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).getColumnTypeSignature().getRawType();\n+    }\n+\n+    @Override\n+    public String getParameterClassName(int param)\n+            throws SQLException\n+    {\n+        int type = getParameter(param).getColumnType();\n+        if (type == Types.NULL) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3MTcyNw==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r450171727", "bodyText": "can you please also bigint, int, tinyint, smallint, float and double?", "author": "kokosing", "createdAt": "2020-07-06T11:58:47Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -166,6 +168,76 @@ public void testGetMetadata()\n         }\n     }\n \n+    @Test\n+    public void testGetParameterMetaData()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"blackhole\", \"blackhole\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_get_parameterMetaData (\" +\n+                        \"c_boolean boolean, \" +\n+                        \"c_decimal decimal, \" +\n+                        \"c_decimal_2 decimal(10,3),\" +\n+                        \"c_varchar varchar, \" +\n+                        \"c_varchar_2 varchar(5), \" +\n+                        \"c_row row(x integer, y array(integer)), \" +\n+                        \"c_array array(integer), \" +\n+                        \"c_map map(integer, integer))\");\n+            }\n+\n+            try (PreparedStatement statement = connection.prepareStatement(", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3MjI1MA==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r450172250", "bodyText": "can you test isNullable, isSigned and getParameterMode?", "author": "kokosing", "createdAt": "2020-07-06T11:59:59Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -166,6 +168,76 @@ public void testGetMetadata()\n         }\n     }\n \n+    @Test\n+    public void testGetParameterMetaData()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"blackhole\", \"blackhole\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_get_parameterMetaData (\" +\n+                        \"c_boolean boolean, \" +\n+                        \"c_decimal decimal, \" +\n+                        \"c_decimal_2 decimal(10,3),\" +\n+                        \"c_varchar varchar, \" +\n+                        \"c_varchar_2 varchar(5), \" +\n+                        \"c_row row(x integer, y array(integer)), \" +\n+                        \"c_array array(integer), \" +\n+                        \"c_map map(integer, integer))\");\n+            }\n+\n+            try (PreparedStatement statement = connection.prepareStatement(\n+                    \"SELECT ? FROM test_get_parameterMetaData WHERE c_boolean = ? AND c_decimal = ? \" +\n+                            \"AND c_decimal_2 = ? AND c_varchar = ? AND c_varchar_2 = ? AND c_row = ? \" +\n+                            \"AND c_array = ? AND c_map = ?\")) {\n+                ParameterMetaData parameterMetaData = statement.getParameterMetaData();\n+                assertEquals(parameterMetaData.getParameterCount(), 9);\n+\n+                assertEquals(parameterMetaData.getParameterClassName(1), \"unknown\");\n+                assertEquals(parameterMetaData.getParameterType(1), Types.NULL);\n+                assertEquals(parameterMetaData.getParameterTypeName(1), \"unknown\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4MTA1OA==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r460681058", "bodyText": "Nit. This is a logical change that should go in separate commit to commits with refactoring like this (extract, renames etc). Refactoring commits should only contain IDE automatic changes.", "author": "kokosing", "createdAt": "2020-07-27T06:53:14Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSetMetaData.java", "diffHunk": "@@ -229,6 +234,8 @@ public String getColumnClassName(int column)\n                 return Clob.class.getName();\n             case Types.ARRAY:\n                 return Array.class.getName();\n+            case Types.NULL:", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzQ0NTUxNw==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r663445517", "bodyText": "@kosinsky thank you for the comment, to make sure I understand what you said, you are suggesting to make handling  NULL cases into a separate commit, correct?", "author": "puchengy", "createdAt": "2021-07-04T04:47:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4MTA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjM1NzM4Ng==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r676357386", "bodyText": "yes. Also please add a test coverage for this.", "author": "kokosing", "createdAt": "2021-07-26T07:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4MTA1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4MTgxNQ==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r460681815", "bodyText": "cherry picked from commit 83718b3b700568c97ba2dd3da6daee4eca5eb24f\n\nWhy do you need to cherry pick? Is this separate repository it pull request? Can you please share the latest no to original commit?", "author": "kokosing", "createdAt": "2020-07-27T06:55:00Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzQ0NTU3MA==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r663445570", "bodyText": "This is a mistake, I will be addressing that. Thanks!", "author": "puchengy", "createdAt": "2021-07-04T04:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4MTgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4MjM3Mw==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r460682373", "bodyText": "Add information about allowed range", "author": "kokosing", "createdAt": "2020-07-27T06:56:19Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoParameterMetaData.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ParameterMetaData;\n+import java.sql.SQLException;\n+import java.util.List;\n+\n+import static io.prestosql.jdbc.PrestoResultSetMetaData.getType;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class PrestoParameterMetaData\n+        implements ParameterMetaData\n+{\n+    private final List<ColumnInfo> parameterInfo;\n+\n+    PrestoParameterMetaData(List<ColumnInfo> parameterInfo)\n+    {\n+        this.parameterInfo = ImmutableList.copyOf(requireNonNull(parameterInfo, \"parameterInfo is null\"));\n+    }\n+\n+    @Override\n+    public int getParameterCount()\n+            throws SQLException\n+    {\n+        return parameterInfo.size();\n+    }\n+\n+    @Override\n+    public int isNullable(int param)\n+            throws SQLException\n+    {\n+        switch (getParameter(param).getNullable()) {\n+            case NO_NULLS:\n+                return parameterNoNulls;\n+            case NULLABLE:\n+                return parameterNullable;\n+            case UNKNOWN:\n+                return parameterNullableUnknown;\n+            default:\n+                throw new SQLException(format(\"Invaliad Nullable Value %s\", getParameter(param).getNullable()));\n+        }\n+    }\n+\n+    @Override\n+    public boolean isSigned(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).isSigned();\n+    }\n+\n+    @Override\n+    public int getPrecision(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).getPrecision();\n+    }\n+\n+    @Override\n+    public int getScale(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).getScale();\n+    }\n+\n+    @Override\n+    public int getParameterType(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).getColumnType();\n+    }\n+\n+    @Override\n+    public String getParameterTypeName(int param)\n+            throws SQLException\n+    {\n+        return getParameter(param).getColumnTypeSignature().getRawType();\n+    }\n+\n+    @Override\n+    public String getParameterClassName(int param)\n+            throws SQLException\n+    {\n+        return getType(getParameter(param).getColumnType());\n+    }\n+\n+    @Override\n+    public int getParameterMode(int param)\n+            throws SQLException\n+    {\n+        return ParameterMetaData.parameterModeUnknown;\n+    }\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface)\n+            throws SQLException\n+    {\n+        if (isWrapperFor(iface)) {\n+            return (T) this;\n+        }\n+        throw new SQLException(\"No wrapper for \" + iface);\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface)\n+            throws SQLException\n+    {\n+        return iface.isInstance(this);\n+    }\n+\n+    private ColumnInfo getParameter(int column)\n+            throws SQLException\n+    {\n+        if ((column <= 0) || (column > parameterInfo.size())) {\n+            throw new SQLException(\"Invalid column index: \" + column);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY5MDYwNA==", "url": "https://github.com/trinodb/trino/pull/2978#discussion_r460690604", "bodyText": "make it static", "author": "kokosing", "createdAt": "2020-07-27T07:16:20Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoResultSetMetaData.java", "diffHunk": "@@ -191,9 +191,14 @@ public boolean isDefinitelyWritable(int column)\n     @Override\n     public String getColumnClassName(int column)\n             throws SQLException\n+    {\n+        return getType(column(column).getColumnType());\n+    }\n+\n+    String getType(int type)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "53497ba40516500a3cfa0ace091116a7e9c7c42f", "url": "https://github.com/trinodb/trino/commit/53497ba40516500a3cfa0ace091116a7e9c7c42f", "message": "Extract getType in TrinoResultSetMetadata", "committedDate": "2021-08-26T03:38:26Z", "type": "commit"}, {"oid": "8742970aa2173b4f2663143f24d5e6aec299cac6", "url": "https://github.com/trinodb/trino/commit/8742970aa2173b4f2663143f24d5e6aec299cac6", "message": "Support Null type in getType in TrinoResultSetMetadata", "committedDate": "2021-08-26T04:08:21Z", "type": "commit"}, {"oid": "2fa37b94fe289bc0af71e37e725fe5ea530987a7", "url": "https://github.com/trinodb/trino/commit/2fa37b94fe289bc0af71e37e725fe5ea530987a7", "message": "Implement getParameterMetaData for PreparedStatement", "committedDate": "2021-08-26T04:51:00Z", "type": "commit"}, {"oid": "2fa37b94fe289bc0af71e37e725fe5ea530987a7", "url": "https://github.com/trinodb/trino/commit/2fa37b94fe289bc0af71e37e725fe5ea530987a7", "message": "Implement getParameterMetaData for PreparedStatement", "committedDate": "2021-08-26T04:51:00Z", "type": "forcePushed"}]}