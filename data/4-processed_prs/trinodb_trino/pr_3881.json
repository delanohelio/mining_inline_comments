{"pr_number": 3881, "pr_title": "Aggregation pushdown in PostgreSQL, base-jdbc", "pr_createdAt": "2020-05-29T15:57:46Z", "pr_url": "https://github.com/trinodb/trino/pull/3881", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1MzQwOA==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441353408", "bodyText": "out of scope: Surely, we need a builder for JdbcTableHandle", "author": "kokosing", "createdAt": "2020-06-17T07:56:08Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -142,9 +142,9 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n                         handle.getCatalogName(),\n                         handle.getSchemaName(),\n                         handle.getTableName(),\n-                        Optional.of(newColumns),\n                         handle.getConstraint(),\n-                        handle.getLimit()),\n+                        handle.getLimit(),\n+                        Optional.of(newColumns)),", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2ODk0Ng==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441368946", "bodyText": "Builder for JdbcTableHandle would free us from modifying call sites, but it would also make it very error-prone.\nHaving to actually modify all the call sites forces me to go thru them and update them (add a condition, pass-thru some field or do nothing).\nI am strongly against adding a builder for this class.", "author": "findepi", "createdAt": "2020-06-17T08:21:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1MzQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxNDQxNw==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r442914417", "bodyText": "Builders can be used full to simulate named arguments. When a methods has too many arguments or arguments with similar types, that can be error prone (e.g, if there are multiple boolean arguments).\nYou can avoid missing callsites by making the builder validate that all required values have been set. This will catch any errors when the tests run (so, obviously, it relies on having good coverage). It's not as good as a compile-time failure, but without named argument support in Java there's not much else we can do.", "author": "martint", "createdAt": "2020-06-19T15:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1MzQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjM3MA==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r443132370", "bodyText": "Sure, but it's very very tempting to have a JdbcTableHandle.builderFrom(JdbcTableHandle handle) method, which totally undermines any safety which we really need here.\nFor this reason, I am convinced not having a builder class is less error-prone that having one for handling JdbcTableHandle transformations.", "author": "findepi", "createdAt": "2020-06-20T13:49:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1MzQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NDEwMQ==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441354101", "bodyText": "copyright", "author": "kokosing", "createdAt": "2020-06-17T07:57:07Z", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestingH2JdbcClient.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package io.prestosql.plugin.jdbc;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2OTI0Nw==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441369247", "bodyText": "build should not be green ... \ud83e\udd14", "author": "findepi", "createdAt": "2020-06-17T08:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NDEwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2OTc2Nw==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441369767", "bodyText": "see now -- my fault", "author": "findepi", "createdAt": "2020-06-17T08:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NDEwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NDc0Mg==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441354742", "bodyText": "I suggest to you to extract all other commits as separate pull request so we could merge them faster.", "author": "kokosing", "createdAt": "2020-06-17T07:58:16Z", "path": "presto-base-jdbc/pom.xml", "diffHunk": "@@ -22,6 +22,11 @@\n             <artifactId>presto-plugin-toolkit</artifactId>", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NTEyMQ==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441355121", "bodyText": "\u2764\ufe0f", "author": "kokosing", "createdAt": "2020-06-17T07:58:55Z", "path": "presto-base-jdbc/pom.xml", "diffHunk": "@@ -22,6 +22,11 @@\n             <artifactId>presto-plugin-toolkit</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>io.prestosql</groupId>\n+            <artifactId>presto-matching</artifactId>", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NTc4MQ==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441355781", "bodyText": "nit: Why you placed it as first? To me it should be second.", "author": "kokosing", "createdAt": "2020-06-17T07:59:57Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcColumnHandle.java", "diffHunk": "@@ -56,19 +58,27 @@ public JdbcColumnHandle(String columnName, JdbcTypeHandle jdbcTypeHandle, Type c\n     @Deprecated\n     @JsonCreator\n     public JdbcColumnHandle(\n+            @JsonProperty(\"expression\") Optional<String> expression,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MTE3Ng==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441371176", "bodyText": "it models expr AS name, so expr can go before name", "author": "findepi", "createdAt": "2020-06-17T08:25:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NTc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NjQwNQ==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441356405", "bodyText": "remove", "author": "kokosing", "createdAt": "2020-06-17T08:00:57Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcExpression.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class JdbcExpression\n+{\n+    private final String expression;\n+    private final JdbcTypeHandle jdbcTypeHandle;\n+//    private final Type prestoType;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NzQwNg==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441357406", "bodyText": "Just JdbcSessionProperties?", "author": "kokosing", "createdAt": "2020-06-17T08:02:40Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadataSessionProperties.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.session.PropertyMetadata;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+\n+import static io.prestosql.spi.session.PropertyMetadata.booleanProperty;\n+\n+public class JdbcMetadataSessionProperties", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MTUwMg==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441371502", "bodyText": "we have a few *SessionProperties classes in base-jdbc already. This one is specific to JdbcMetadata, hence the name", "author": "findepi", "createdAt": "2020-06-17T08:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1NzQwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MTMxNQ==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441361315", "bodyText": "This could be handled differently in different sql engines", "author": "kokosing", "createdAt": "2020-06-17T08:09:38Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/QueryBuilder.java", "diffHunk": "@@ -285,6 +282,33 @@ private String toPredicate(String columnName, String operator, Object value, Jdb\n         return quote(columnName) + \" \" + operator + \" ?\";\n     }\n \n+    private String getGroupBy(Optional<List<List<JdbcColumnHandle>>> groupingSets)\n+    {\n+        if (groupingSets.isEmpty()) {\n+            return \"\";\n+        }\n+\n+        verify(!groupingSets.get().isEmpty());\n+        if (groupingSets.get().size() == 1) {\n+            List<JdbcColumnHandle> groupingSet = getOnlyElement(groupingSets.get());\n+            if (groupingSet.isEmpty()) {\n+                // global aggregation\n+                return \"\";\n+            }\n+            return \" GROUP BY \" + groupingSet.stream()\n+                    .map(JdbcColumnHandle::getColumnName)\n+                    .map(this::quote)\n+                    .collect(joining(\", \"));\n+        }\n+        return \" GROUP BY GROUPING SETS \" +", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MTc1MQ==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441371751", "bodyText": "We can revisit as needed, wdyt?", "author": "findepi", "createdAt": "2020-06-17T08:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MTMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MTgxNg==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441361816", "bodyText": "it would be nice to have unit tests for this class that would test SQL string generation.", "author": "kokosing", "createdAt": "2020-06-17T08:10:24Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/QueryBuilder.java", "diffHunk": "@@ -285,6 +282,33 @@ private String toPredicate(String columnName, String operator, Object value, Jdb\n         return quote(columnName) + \" \" + operator + \" ?\";\n     }\n \n+    private String getGroupBy(Optional<List<List<JdbcColumnHandle>>> groupingSets)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3NzI5MA==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441377290", "bodyText": "We do not have any such tests yet. For example, we have TestJdbcQueryBuilder which is an integration test against H2.", "author": "findepi", "createdAt": "2020-06-17T08:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MTgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2OTE0Mw==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441469143", "bodyText": "added", "author": "findepi", "createdAt": "2020-06-17T11:15:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MTgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MzExNQ==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441363115", "bodyText": "AvgFloatingPointAggregateFunctionRule?", "author": "kokosing", "createdAt": "2020-06-17T08:12:07Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/expression/ImplementAvgFloatingPoint.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc.expression;\n+\n+import io.prestosql.matching.Capture;\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.plugin.jdbc.JdbcColumnHandle;\n+import io.prestosql.plugin.jdbc.JdbcExpression;\n+import io.prestosql.spi.connector.AggregateFunction;\n+import io.prestosql.spi.expression.Variable;\n+\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.base.Verify.verifyNotNull;\n+import static io.prestosql.matching.Capture.newCapture;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.expressionType;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.functionName;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.singleInput;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.variable;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.RealType.REAL;\n+import static java.lang.String.format;\n+\n+/**\n+ * Implements {@code avg(float)}\n+ */\n+public class ImplementAvgFloatingPoint", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3NjEyOA==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441376128", "bodyText": "I decided on \"implement ..\" nomenclature. Considered also \"rewrite\".\nWhat is the advantage of the proposed name?", "author": "findepi", "createdAt": "2020-06-17T08:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MzExNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5NDQxMg==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r442094412", "bodyText": "Implement is an empty word here, does not add any new value.\nThere is a convention of naming implementations in a <flavour><type> way. That way it is easy to understand what it is. We follow this with optimizer rules. Changing this here is unintuitive.", "author": "kokosing", "createdAt": "2020-06-18T09:28:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MzExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MzkxMw==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441363913", "bodyText": "shoudn't this be a default behaviour?", "author": "kokosing", "createdAt": "2020-06-17T08:13:27Z", "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixMetadata.java", "diffHunk": "@@ -391,4 +393,16 @@ private JdbcOutputTableHandle createTable(ConnectorSession session, ConnectorTab\n             throw new PrestoException(PHOENIX_METADATA_ERROR, \"Error creating Phoenix table\", e);\n         }\n     }\n+\n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle table,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupBy)\n+    {\n+        // TODO support aggregation pushdown\n+        return Optional.empty();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MzQ0Mg==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441373442", "bodyText": "it is. However, Phoenix extends JdbcMetadata, so inherits JdbcMetadata behavior, but it does not work for Phoenix case, as it does something special in io.prestosql.plugin.phoenix.PhoenixClient#buildSql.", "author": "findepi", "createdAt": "2020-06-17T08:29:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2MzkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2NDk0OQ==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441364949", "bodyText": "Also we need some smoke tests for aggregation push down added to base jdbc smoke test that could be reused by other connectors. Such test should handle aggregration rewrites that are implemented in base-jdbc module.", "author": "kokosing", "createdAt": "2020-06-17T08:15:12Z", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlIntegrationSmokeTest.java", "diffHunk": "@@ -288,6 +288,34 @@ public void testInsertIntoNotNullColumn()\n         assertUpdate(\"DROP TABLE test_insert_not_null\");\n     }\n \n+    @Test\n+    public void testAggregationPushdown()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3Mzg3MA==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441373870", "bodyText": "There are no rewrites handlded on base-jdbc level. There are rewrite rules provided by base-jdbc, but it's up to specific connector to mix & match them (and test them).", "author": "findepi", "createdAt": "2020-06-17T08:29:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2NDk0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2NTIyNw==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441365227", "bodyText": "put table name to separate line", "author": "kokosing", "createdAt": "2020-06-17T08:15:39Z", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlIntegrationSmokeTest.java", "diffHunk": "@@ -288,6 +288,34 @@ public void testInsertIntoNotNullColumn()\n         assertUpdate(\"DROP TABLE test_insert_not_null\");\n     }\n \n+    @Test\n+    public void testAggregationPushdown()\n+            throws Exception\n+    {\n+        // TODO support aggregation pushdown with GROUPING SETS\n+        // TODO support aggregation over expressions\n+\n+        assertPushedDown(\"SELECT count(*) FROM nation\");\n+        assertPushedDown(\"SELECT count(nationkey) FROM nation\");\n+        assertPushedDown(\"SELECT regionkey, min(nationkey) FROM nation GROUP BY regionkey\");\n+        assertPushedDown(\"SELECT regionkey, max(nationkey) FROM nation GROUP BY regionkey\");\n+        assertPushedDown(\"SELECT regionkey, sum(nationkey) FROM nation GROUP BY regionkey\");\n+        assertPushedDown(\n+                \"SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey\",\n+                \"SELECT regionkey, avg(CAST(nationkey AS double)) FROM nation GROUP BY regionkey\");\n+\n+        try (AutoCloseable ignoreTable = withTable(\"tpch.test_aggregation_pushdown\",", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2NjA3Ng==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441366076", "bodyText": "don't you need to assert here what was pushed down?", "author": "kokosing", "createdAt": "2020-06-17T08:17:08Z", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestIntegrationSmokeTest.java", "diffHunk": "@@ -372,4 +412,27 @@ public void testSelectInformationSchemaColumns()\n         assertQuerySucceeds(\"SELECT * FROM information_schema.columns WHERE table_catalog = '\" + catalog + \"' AND table_name LIKE '%'\");\n         assertQuery(\"SELECT column_name FROM information_schema.columns WHERE table_catalog = 'something_else'\", \"SELECT '' WHERE false\");\n     }\n+\n+    protected void assertPushedDown(String sql)\n+    {\n+        assertPushedDown(sql, sql);\n+    }\n+\n+    protected void assertPushedDown(String actual, String expectedOnH2)\n+    {\n+        assertQuery(actual, expectedOnH2);\n+\n+        transaction(getQueryRunner().getTransactionManager(), getQueryRunner().getAccessControl())\n+                .execute(getSession(), session -> {\n+                    Plan plan = getQueryRunner().createPlan(session, actual, WarningCollector.NOOP);\n+                    assertPlan(\n+                            session,\n+                            getQueryRunner().getMetadata(),\n+                            (node, sourceStats, lookup, ignore, types) -> PlanNodeStatsEstimate.unknown(),\n+                            plan,\n+                            PlanMatchPattern.output(\n+                                    PlanMatchPattern.exchange(\n+                                            PlanMatchPattern.node(TableScanNode.class))));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3NDUzNQ==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r441374535", "bodyText": "i assert that \"everything\" got pushdown and \"yet\" results are correct.", "author": "findepi", "createdAt": "2020-06-17T08:31:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2NjA3Ng=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5MDc0OQ==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r442090749", "bodyText": "remove?", "author": "kokosing", "createdAt": "2020-06-18T09:22:47Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -154,6 +169,97 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n                         .collect(toImmutableList())));\n     }\n \n+    @Override\n+    public Optional<AggregationApplicationResult<ConnectorTableHandle>> applyAggregation(\n+            ConnectorSession session,\n+            ConnectorTableHandle table,\n+            List<AggregateFunction> aggregates,\n+            Map<String, ColumnHandle> assignments,\n+            List<List<ColumnHandle>> groupBy) // TODO rename groupingSets? https://github.com/prestosql/presto/pull/3697#discussion_r429874769\n+    {\n+        if (!isAllowAggregationPushdown(session)) {\n+            return Optional.empty();\n+        }\n+\n+        JdbcTableHandle handle = (JdbcTableHandle) table;\n+\n+        if (handle.getLimit().isPresent()) {\n+            // handle's limit is applied after aggregations, so we cannot apply aggregations if limit is already set\n+            return Optional.empty();\n+        }\n+\n+        if (handle.getGroupingSets().isPresent()) {\n+            // table handle cannot express aggregation on top of aggregation\n+            return Optional.empty();\n+        }\n+\n+        if (groupBy.isEmpty()) {\n+            // TODO illicit, https://github.com/prestosql/presto/pull/3697#discussion_r429866335\n+            groupBy = List.of(List.of());\n+        }\n+\n+        if (groupBy.size() > 1 && !jdbcClient.supportsGroupingSets()) {\n+            return Optional.empty();\n+        }\n+\n+        List<JdbcColumnHandle> columns = jdbcClient.getColumns(session, handle);\n+        Map<String, JdbcColumnHandle> columnByName = columns.stream()\n+                .collect(toImmutableMap(JdbcColumnHandle::getColumnName, identity()));\n+\n+        int syntheticNextIdentifier = 1;\n+\n+        ImmutableList.Builder<JdbcColumnHandle> newColumns = ImmutableList.builder();\n+        ImmutableList.Builder<ConnectorExpression> projections = ImmutableList.builder();\n+        ImmutableList.Builder<Assignment> resultAssignments = ImmutableList.builder();\n+        for (AggregateFunction aggregate : aggregates) {\n+            Optional<JdbcExpression> expression = jdbcClient.implementAggregation(aggregate, assignments);\n+            if (expression.isEmpty()) {\n+                return Optional.empty();\n+            }\n+\n+            while (columnByName.containsKey(SYNTHETIC_COLUMN_NAME_PREFIX + syntheticNextIdentifier)) {\n+                syntheticNextIdentifier++;\n+            }\n+\n+            JdbcColumnHandle newColumn = JdbcColumnHandle.builder()\n+                    .setExpression(Optional.of(expression.get().getExpression()))\n+                    .setColumnName(SYNTHETIC_COLUMN_NAME_PREFIX + syntheticNextIdentifier)\n+                    .setJdbcTypeHandle(expression.get().getJdbcTypeHandle())\n+                    .setColumnType(aggregate.getOutputType())\n+                    .setComment(Optional.of(\"synthetic\"))\n+                    .build();\n+            syntheticNextIdentifier++;\n+\n+            newColumns.add(newColumn);\n+            projections.add(new Variable(newColumn.getColumnName(), aggregate.getOutputType()));\n+            resultAssignments.add(new Assignment(newColumn.getColumnName(), newColumn, aggregate.getOutputType()));\n+        }\n+\n+        // TODO should connector return group by columns afresh?\n+//        groupBy.stream()\n+//                .flatMap(Collection::stream)\n+//                .map(columnHandle -> ((JdbcColumnHandle) columnHandle).getColumnName())\n+//                .distinct()\n+//                .map(groupByColumn -> requireNonNull(columnByName.get(groupByColumn), () -> \"Column not found: \" + groupByColumn))\n+//                .forEach(newColumns::add);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzMDgzMg==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r442130832", "bodyText": "Done", "author": "findepi", "createdAt": "2020-06-18T10:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5MDc0OQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxOTQyMw==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r442919423", "bodyText": "This should be a TODO. There's no reason why it shouldn't be possible to apply filters after a aggregations (i.e., a HAVING clause, or a WHERE clause in an enclosing query)", "author": "martint", "createdAt": "2020-06-19T15:54:46Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -101,6 +109,11 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n     {\n         JdbcTableHandle handle = (JdbcTableHandle) table;\n \n+        if (handle.getGroupingSets().isPresent()) {\n+            // handle's aggregations are applied after constraint, so we cannot apply filter if aggregates is already set", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0MTAyOA==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r443141028", "bodyText": "added TODO", "author": "findepi", "createdAt": "2020-06-20T15:59:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxOTQyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzNzAzOQ==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r442937039", "bodyText": "Why did this switch from StringBuilder to string concatenation?", "author": "martint", "createdAt": "2020-06-19T16:27:59Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/QueryBuilder.java", "diffHunk": "@@ -92,35 +94,32 @@ public PreparedStatement buildSql(\n             String catalog,\n             String schema,\n             String table,\n+            Optional<List<List<JdbcColumnHandle>>> groupingSets,\n             List<JdbcColumnHandle> columns,\n             TupleDomain<ColumnHandle> tupleDomain,\n             Optional<String> additionalPredicate,\n             Function<String, String> sqlFunction)\n             throws SQLException\n     {\n-        StringBuilder sql = new StringBuilder();\n-\n-        sql.append(\"SELECT \");\n-        sql.append(getProjection(columns));\n-\n-        sql.append(\" FROM \");\n-        sql.append(getRelation(catalog, schema, table));\n+        String sql = \"SELECT \" + getProjection(columns);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjU3NQ==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r443132575", "bodyText": "StringBuilder use here was unnecessary and made the code harder to read and work with.", "author": "findepi", "createdAt": "2020-06-20T13:52:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzNzAzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMjY0OQ==", "url": "https://github.com/trinodb/trino/pull/3881#discussion_r443132649", "bodyText": "#4112", "author": "findepi", "createdAt": "2020-06-20T13:53:50Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -111,6 +111,7 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n \n         if (handle.getGroupingSets().isPresent()) {\n             // handle's aggregations are applied after constraint, so we cannot apply filter if aggregates is already set\n+            // TODO (https://github.com/prestosql/presto/issues/4112) allow filter pushdown after aggregation pushdown", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "1fd9b92a0efd6d5804b1d561b936d477dba686b6", "url": "https://github.com/trinodb/trino/commit/1fd9b92a0efd6d5804b1d561b936d477dba686b6", "message": "Introduce TestingH2JdbcClient", "committedDate": "2020-06-20T20:36:40Z", "type": "commit"}, {"oid": "994a385cfb056534b83df82bd5cf4e8cae4d370b", "url": "https://github.com/trinodb/trino/commit/994a385cfb056534b83df82bd5cf4e8cae4d370b", "message": "Distinguish table and relation handles", "committedDate": "2020-06-20T20:36:40Z", "type": "commit"}, {"oid": "068ea373ac4a313c809ba7d7d08a1e70c9c87a87", "url": "https://github.com/trinodb/trino/commit/068ea373ac4a313c809ba7d7d08a1e70c9c87a87", "message": "Distinguish real and synthetic columns", "committedDate": "2020-06-20T20:36:40Z", "type": "commit"}, {"oid": "2120a10462dfbd67d63f7a9a312412866f7d0f1f", "url": "https://github.com/trinodb/trino/commit/2120a10462dfbd67d63f7a9a312412866f7d0f1f", "message": "Make columns last in JdbcTableHandle", "committedDate": "2020-06-20T20:36:40Z", "type": "commit"}, {"oid": "fb41603a4e08a8a249a55a3e008b56cccb282b21", "url": "https://github.com/trinodb/trino/commit/fb41603a4e08a8a249a55a3e008b56cccb282b21", "message": "Mark deprecated methods with @Deprecated", "committedDate": "2020-06-20T20:36:40Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "a76bbf1e24f2ddeea778c1798ba156ce3a34338d", "url": "https://github.com/trinodb/trino/commit/a76bbf1e24f2ddeea778c1798ba156ce3a34338d", "message": "Implement Aggregation pushdown in PostgreSQL", "committedDate": "2020-06-20T20:46:06Z", "type": "commit"}, {"oid": "a76bbf1e24f2ddeea778c1798ba156ce3a34338d", "url": "https://github.com/trinodb/trino/commit/a76bbf1e24f2ddeea778c1798ba156ce3a34338d", "message": "Implement Aggregation pushdown in PostgreSQL", "committedDate": "2020-06-20T20:46:06Z", "type": "forcePushed"}]}