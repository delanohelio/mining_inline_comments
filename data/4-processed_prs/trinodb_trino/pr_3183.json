{"pr_number": 3183, "pr_title": "Record filters and masks", "pr_createdAt": "2020-03-20T19:55:52Z", "pr_url": "https://github.com/trinodb/trino/pull/3183", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyMTQxMg==", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r396021412", "bodyText": "CatalogSchemaTableName or io.prestosql.metadata.QualifiedObjectName instead of using these three?", "author": "kokosing", "createdAt": "2020-03-21T19:25:39Z", "path": "presto-main/src/main/java/io/prestosql/execution/Input.java", "diffHunk": "@@ -30,15 +29,15 @@\n @Immutable\n public final class Input\n {\n-    private final CatalogName catalogName;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3MTQxNA==", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r396771414", "bodyText": "I think that's overkill. QualifiedObjectName is not json-serializable, and CatalogSchemaTableName has a weird structure that just muddles things (it has catalog + schema-table as a nested object)", "author": "martint", "createdAt": "2020-03-23T21:36:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyMTQxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyMTcxNw==", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r396021717", "bodyText": "use null initial values, to make sure it was not yet set, then in setReferencedTables please verify that previous value was null", "author": "kokosing", "createdAt": "2020-03-21T19:29:32Z", "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "diffHunk": "@@ -148,6 +149,7 @@\n \n     private final AtomicReference<Set<Input>> inputs = new AtomicReference<>(ImmutableSet.of());\n     private final AtomicReference<Optional<Output>> output = new AtomicReference<>(Optional.empty());\n+    private final AtomicReference<List<TableInfo>> referencedTables = new AtomicReference<>(ImmutableList.of());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMzY3OA==", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r397423678", "bodyText": "Actually, that doesn't work. There are many paths that don't even call the setInput/setOutput/setReferencedTables methods.", "author": "martint", "createdAt": "2020-03-24T19:57:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyMTcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyMTc2Nw==", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r396021767", "bodyText": "return tables.get(NodeRef.of(table))\n     .getHandle()\n     .orElseThrow(() -> new IllegalArgumentException(format(\"%s is not a table reference\", table)));\n\nPlease be polite for my poor eyesight.", "author": "kokosing", "createdAt": "2020-03-21T19:30:12Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analysis.java", "diffHunk": "@@ -481,17 +488,27 @@ public RelationType getOutputDescriptor(Node node)\n \n     public TableHandle getTableHandle(Table table)\n     {\n-        return tables.get(NodeRef.of(table));\n+        return tables.get(NodeRef.of(table)).getHandle().orElseThrow(() -> new IllegalArgumentException(format(\"%s is not a table reference\", table)));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyMjE2OA==", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r396022168", "bodyText": "toImmutableList()? static import. Apply the same for everywhere below.", "author": "kokosing", "createdAt": "2020-03-21T19:35:06Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analysis.java", "diffHunk": "@@ -738,6 +760,39 @@ public void addColumnMask(Table table, String column, Expression mask)\n         return columnMasks.getOrDefault(NodeRef.of(table), ImmutableMap.of());\n     }\n \n+    public List<TableInfo> getReferencedTables()\n+    {\n+        return tables.entrySet().stream()\n+                .map(entry -> {\n+                    NodeRef<Table> table = entry.getKey();\n+\n+                    List<ColumnInfo> columns = referencedFields.get(table).stream()\n+                            .map(field -> {\n+                                String fieldName = field.getName().get();\n+\n+                                return new ColumnInfo(\n+                                        fieldName,\n+                                        columnMasks.getOrDefault(table, ImmutableMap.of())\n+                                                .getOrDefault(fieldName, ImmutableList.of()).stream()\n+                                                .map(Expression::toString)\n+                                                .collect(Collectors.toList()));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyMjMyNA==", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r396022324", "bodyText": "Do we have tests for event listener? Please add some.", "author": "kokosing", "createdAt": "2020-03-21T19:37:05Z", "path": "presto-main/src/main/java/io/prestosql/dispatcher/FailedDispatchQuery.java", "diffHunk": "@@ -226,6 +226,7 @@ private static QueryInfo immediateFailureQueryInfo(\n                 ImmutableList.of(),", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyMzA4OA==", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r396023088", "bodyText": "There are missing information about accessed:\n\nprocedures (must have)\nfunctions (must have)\nDDL queries\nset session\nSHOW queries\nquery checks\n\nAll these surely should go as separate pull requests.", "author": "kokosing", "createdAt": "2020-03-21T19:46:36Z", "path": "presto-main/src/main/java/io/prestosql/dispatcher/FailedDispatchQuery.java", "diffHunk": "@@ -226,6 +226,7 @@ private static QueryInfo immediateFailureQueryInfo(\n                 ImmutableList.of(),\n                 ImmutableSet.of(),", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3ODYyNQ==", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r396778625", "bodyText": "DDL queries can be inferred from the query type + user + target table. Session properties can be inferred from the session properties in the query + user. Functions and procedures can be added, but I'll do it in a separate PR.", "author": "martint", "createdAt": "2020-03-23T21:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyMzA4OA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1ODI0MA==", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r397058240", "bodyText": "toImmutableList?", "author": "kokosing", "createdAt": "2020-03-24T10:46:06Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analysis.java", "diffHunk": "@@ -738,6 +762,39 @@ public void addColumnMask(Table table, String column, Expression mask)\n         return columnMasks.getOrDefault(NodeRef.of(table), ImmutableMap.of());\n     }\n \n+    public List<TableInfo> getReferencedTables()\n+    {\n+        return tables.entrySet().stream()\n+                .map(entry -> {\n+                    NodeRef<Table> table = entry.getKey();\n+\n+                    List<ColumnInfo> columns = referencedFields.get(table).stream()\n+                            .map(field -> {\n+                                String fieldName = field.getName().get();\n+\n+                                return new ColumnInfo(\n+                                        fieldName,\n+                                        columnMasks.getOrDefault(table, ImmutableMap.of())\n+                                                .getOrDefault(fieldName, ImmutableList.of()).stream()\n+                                                .map(Expression::toString)\n+                                                .collect(toImmutableList()));\n+                            })\n+                            .collect(Collectors.toList());\n+\n+                    TableEntry info = entry.getValue();\n+                    return new TableInfo(\n+                            info.getName().getCatalogName(),\n+                            info.getName().getSchemaName(),\n+                            info.getName().getObjectName(),\n+                            info.getAuthorization(),\n+                            rowFilters.getOrDefault(table, ImmutableList.of()).stream()\n+                                    .map(Expression::toString)\n+                                    .collect(toImmutableList()),\n+                            columns);\n+                })\n+                .collect(Collectors.toList());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1ODI5NQ==", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r397058295", "bodyText": "toImmutableList?", "author": "kokosing", "createdAt": "2020-03-24T10:46:10Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analysis.java", "diffHunk": "@@ -738,6 +762,39 @@ public void addColumnMask(Table table, String column, Expression mask)\n         return columnMasks.getOrDefault(NodeRef.of(table), ImmutableMap.of());\n     }\n \n+    public List<TableInfo> getReferencedTables()\n+    {\n+        return tables.entrySet().stream()\n+                .map(entry -> {\n+                    NodeRef<Table> table = entry.getKey();\n+\n+                    List<ColumnInfo> columns = referencedFields.get(table).stream()\n+                            .map(field -> {\n+                                String fieldName = field.getName().get();\n+\n+                                return new ColumnInfo(\n+                                        fieldName,\n+                                        columnMasks.getOrDefault(table, ImmutableMap.of())\n+                                                .getOrDefault(fieldName, ImmutableList.of()).stream()\n+                                                .map(Expression::toString)\n+                                                .collect(toImmutableList()));\n+                            })\n+                            .collect(Collectors.toList());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1OTAwNg==", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r397059006", "bodyText": "Return Optional<Node>", "author": "kokosing", "createdAt": "2020-03-24T10:47:27Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/RelationId.java", "diffHunk": "@@ -53,6 +53,12 @@ public boolean isAnonymous()\n         return sourceNode == null;\n     }\n \n+    @Nullable\n+    public Node getSourceNode()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1OTM2MA==", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r397059360", "bodyText": "requireNonNulls", "author": "kokosing", "createdAt": "2020-03-24T10:48:04Z", "path": "presto-spi/src/main/java/io/prestosql/spi/eventlistener/TableInfo.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.eventlistener;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.List;\n+\n+public class TableInfo\n+{\n+    private final String catalogName;\n+    private final String schema;\n+    private final String table;\n+    private final String authorization;\n+\n+    private final List<String> filters;\n+    private final List<ColumnInfo> columns;\n+\n+    public TableInfo(String catalogName, String schema, String table, String authorization, List<String> filters, List<ColumnInfo> columns)\n+    {\n+        this.catalogName = catalogName;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1OTU2NA==", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r397059564", "bodyText": "Please copy collections", "author": "kokosing", "createdAt": "2020-03-24T10:48:29Z", "path": "presto-spi/src/main/java/io/prestosql/spi/eventlistener/TableInfo.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.eventlistener;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.List;\n+\n+public class TableInfo\n+{\n+    private final String catalogName;\n+    private final String schema;\n+    private final String table;\n+    private final String authorization;\n+\n+    private final List<String> filters;\n+    private final List<ColumnInfo> columns;\n+\n+    public TableInfo(String catalogName, String schema, String table, String authorization, List<String> filters, List<ColumnInfo> columns)\n+    {\n+        this.catalogName = catalogName;\n+        this.schema = schema;\n+        this.table = table;\n+        this.authorization = authorization;\n+        this.filters = filters;\n+        this.columns = columns;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2MDE4NQ==", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r397060185", "bodyText": "it would be nice to see that filters and masks can be also collected. io.prestosql.connector.MockConnectorFactory could be modified to return some dummy masks and filters.", "author": "kokosing", "createdAt": "2020-03-24T10:49:33Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -250,6 +252,32 @@ public void testNormalQuery()\n         assertEquals(queryCompletedEvent.getStatistics().getTotalRows(), expectedCompletedPositions);\n     }\n \n+    @Test\n+    public void testReferencedTables()\n+            throws Exception\n+    {\n+        // We expect the following events\n+        // QueryCreated: 1, QueryCompleted: 1, Splits: SPLITS_PER_NODE (leaf splits) + LocalExchange[SINGLE] split + Aggregation/Output split\n+        int expectedEvents = 1 + 1 + SPLITS_PER_NODE + 1 + 1;\n+        runQueryAndWaitForEvents(\"SELECT sum(linenumber) FROM lineitem\", expectedEvents);\n+\n+        QueryCompletedEvent event = getOnlyElement(generatedEvents.getQueryCompletedEvents());\n+\n+        List<TableInfo> tables = event.getMetadata().getTables();\n+        assertEquals(tables.size(), 1);\n+\n+        TableInfo table = tables.get(0);\n+        assertEquals(table.getCatalogName(), \"tpch\");\n+        assertEquals(table.getSchema(), \"tiny\");\n+        assertEquals(table.getAuthorization(), \"user\");\n+        assertTrue(table.getFilters().isEmpty());\n+        assertEquals(table.getColumns().size(), 1);\n+\n+        ColumnInfo column = table.getColumns().get(0);\n+        assertEquals(column.getColumn(), \"linenumber\");\n+        assertTrue(column.getMasks().isEmpty());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzMTkxMQ==", "url": "https://github.com/trinodb/trino/pull/3183#discussion_r397431911", "bodyText": "Masks and filters are part of AccessControl, not ConnectorMetadata, unfortunately. There's no infrastructure to replace the default access control in tests with a mock one. That would require some major surgery that I want to keep out of the scope of this PR.", "author": "martint", "createdAt": "2020-03-24T20:13:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2MDE4NQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "c38ec3eb7fdd9a23d33bbcc2bdcad345a5bb5334", "url": "https://github.com/trinodb/trino/commit/c38ec3eb7fdd9a23d33bbcc2bdcad345a5bb5334", "message": "Derive target table from analysis", "committedDate": "2020-03-26T15:58:14Z", "type": "commit"}, {"oid": "3a7177426ec967dd670b5f22a0f02756bd9e84c3", "url": "https://github.com/trinodb/trino/commit/3a7177426ec967dd670b5f22a0f02756bd9e84c3", "message": "Move Output to analyzer package", "committedDate": "2020-03-26T15:58:14Z", "type": "commit"}, {"oid": "0d5e8b383d7ae3ea131d7ee27c747e8c80ae08f3", "url": "https://github.com/trinodb/trino/commit/0d5e8b383d7ae3ea131d7ee27c747e8c80ae08f3", "message": "Unwrap catalog name", "committedDate": "2020-03-26T15:58:14Z", "type": "commit"}, {"oid": "5b1cff6e2410288d497f24d813388395ff29a9c2", "url": "https://github.com/trinodb/trino/commit/5b1cff6e2410288d497f24d813388395ff29a9c2", "message": "Factor out common filter/mask code", "committedDate": "2020-03-26T15:58:14Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "befb22de3f06a81bf2eb09d5f6516b2594e02ab9", "url": "https://github.com/trinodb/trino/commit/befb22de3f06a81bf2eb09d5f6516b2594e02ab9", "message": "Use optional to represent missing node", "committedDate": "2020-03-27T01:05:16Z", "type": "commit"}, {"oid": "16c03550cc1bde93a697d4568fe4e9c479cb5af9", "url": "https://github.com/trinodb/trino/commit/16c03550cc1bde93a697d4568fe4e9c479cb5af9", "message": "Record filter and mask information in query event\n\nIt adds a field to the query metadata event with the following structure:\n\n\"tables\": [\n   {\n      \"catalog\": \"...\",\n      \"schema\": \"...\",\n      \"table\": \"...\",\n      \"authorization\": \"...\",\n\n      \"filters\": [ \"...\", ... ]\n      \"columns\": [\n         {\n             \"column\": \"...\"\n             \"masks\": [ \"...\", ...]\n         },\n         ...\n      ]\n   },\n   ...\n]", "committedDate": "2020-03-27T01:05:49Z", "type": "commit"}, {"oid": "16c03550cc1bde93a697d4568fe4e9c479cb5af9", "url": "https://github.com/trinodb/trino/commit/16c03550cc1bde93a697d4568fe4e9c479cb5af9", "message": "Record filter and mask information in query event\n\nIt adds a field to the query metadata event with the following structure:\n\n\"tables\": [\n   {\n      \"catalog\": \"...\",\n      \"schema\": \"...\",\n      \"table\": \"...\",\n      \"authorization\": \"...\",\n\n      \"filters\": [ \"...\", ... ]\n      \"columns\": [\n         {\n             \"column\": \"...\"\n             \"masks\": [ \"...\", ...]\n         },\n         ...\n      ]\n   },\n   ...\n]", "committedDate": "2020-03-27T01:05:49Z", "type": "forcePushed"}]}