{"pr_number": 3750, "pr_title": "Add large file test for Rubix", "pr_createdAt": "2020-05-15T15:30:53Z", "pr_url": "https://github.com/trinodb/trino/pull/3750", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MjM1MA==", "url": "https://github.com/trinodb/trino/pull/3750#discussion_r425882350", "bodyText": "Do we always have to wait 1s? Would polling for stats in shorter intervals (like 100ms) make sense?", "author": "losipiuk", "createdAt": "2020-05-15T15:33:20Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -196,6 +207,71 @@ public void testCacheRead()\n         assertEquals(getCacheStats().getRemoteReads(), intermittentRemoteReads);\n     }\n \n+    @Test\n+    public void testLargeFile()\n+            throws Exception\n+    {\n+        byte[] randomData = new byte[(int) LARGE_FILE_SIZE.toBytes()];\n+        new Random().nextBytes(randomData);\n+\n+        Path file = getStoragePath(\"large_file\");\n+        try (FSDataOutputStream outputStream = nonCachingFileSystem.create(file)) {\n+            outputStream.write(randomData);\n+        }\n+\n+        long beforeRemoteReads = getCacheStats().getRemoteReads();\n+        long beforeCachedReads = getCacheStats().getCachedReads();\n+\n+        assertTrue(Arrays.equals(randomData, readFileBytes(cachingFileSystem.open(file))));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000L);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg5ODcwNw==", "url": "https://github.com/trinodb/trino/pull/3750#discussion_r425898707", "bodyText": "1s is on safe-side so that it \"should\" work when GC kicks-in for example", "author": "sopel39", "createdAt": "2020-05-15T16:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MjM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk2Mjk4Mg==", "url": "https://github.com/trinodb/trino/pull/3750#discussion_r425962982", "bodyText": "With 100ms I meant polling in a loop. Not wait single interval.", "author": "losipiuk", "createdAt": "2020-05-15T18:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4MjM1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4NTM4Nw==", "url": "https://github.com/trinodb/trino/pull/3750#discussion_r425885387", "bodyText": "intermittent and after name prefixes are poor. Use something more explicit. firstReadCachedRead, secondReadCachedReads?", "author": "losipiuk", "createdAt": "2020-05-15T15:38:26Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -196,6 +207,71 @@ public void testCacheRead()\n         assertEquals(getCacheStats().getRemoteReads(), intermittentRemoteReads);\n     }\n \n+    @Test\n+    public void testLargeFile()\n+            throws Exception\n+    {\n+        byte[] randomData = new byte[(int) LARGE_FILE_SIZE.toBytes()];\n+        new Random().nextBytes(randomData);\n+\n+        Path file = getStoragePath(\"large_file\");\n+        try (FSDataOutputStream outputStream = nonCachingFileSystem.create(file)) {\n+            outputStream.write(randomData);\n+        }\n+\n+        long beforeRemoteReads = getCacheStats().getRemoteReads();\n+        long beforeCachedReads = getCacheStats().getCachedReads();\n+\n+        assertTrue(Arrays.equals(randomData, readFileBytes(cachingFileSystem.open(file))));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000L);\n+        long intermittentRemoteReads = getCacheStats().getRemoteReads();\n+        assertGreaterThan(intermittentRemoteReads, beforeRemoteReads);\n+\n+        assertTrue(Arrays.equals(randomData, readFileBytes(cachingFileSystem.open(file))));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000L);\n+        long afterCachedReads = getCacheStats().getCachedReads();\n+        long afterRemoteReads = getCacheStats().getRemoteReads();\n+        assertGreaterThan(afterCachedReads, beforeCachedReads);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4NTgzNA==", "url": "https://github.com/trinodb/trino/pull/3750#discussion_r425885834", "bodyText": "add comments to assertions so one does not have to reverse engineer the code.", "author": "losipiuk", "createdAt": "2020-05-15T15:39:13Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -196,6 +207,71 @@ public void testCacheRead()\n         assertEquals(getCacheStats().getRemoteReads(), intermittentRemoteReads);\n     }\n \n+    @Test\n+    public void testLargeFile()\n+            throws Exception\n+    {\n+        byte[] randomData = new byte[(int) LARGE_FILE_SIZE.toBytes()];\n+        new Random().nextBytes(randomData);\n+\n+        Path file = getStoragePath(\"large_file\");\n+        try (FSDataOutputStream outputStream = nonCachingFileSystem.create(file)) {\n+            outputStream.write(randomData);\n+        }\n+\n+        long beforeRemoteReads = getCacheStats().getRemoteReads();\n+        long beforeCachedReads = getCacheStats().getCachedReads();\n+\n+        assertTrue(Arrays.equals(randomData, readFileBytes(cachingFileSystem.open(file))));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000L);\n+        long intermittentRemoteReads = getCacheStats().getRemoteReads();\n+        assertGreaterThan(intermittentRemoteReads, beforeRemoteReads);\n+\n+        assertTrue(Arrays.equals(randomData, readFileBytes(cachingFileSystem.open(file))));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000L);\n+        long afterCachedReads = getCacheStats().getCachedReads();\n+        long afterRemoteReads = getCacheStats().getRemoteReads();\n+        assertGreaterThan(afterCachedReads, beforeCachedReads);\n+        assertEquals(afterRemoteReads, intermittentRemoteReads);\n+\n+        // make sure parallel reading of large file works\n+        ExecutorService executorService = newFixedThreadPool(10);\n+        try {\n+            List<Runnable> reads = nCopies(\n+                    10,\n+                    () -> {\n+                        try {\n+                            assertTrue(Arrays.equals(randomData, readFileBytes(cachingFileSystem.open(file))));\n+                        }\n+                        catch (IOException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    });\n+            reads.stream()\n+                    .map(executorService::submit)\n+                    .forEach(future -> {\n+                        try {\n+                            future.get();\n+                        }\n+                        catch (Exception e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    });\n+        }\n+        finally {\n+            executorService.shutdownNow();\n+        }\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000L);\n+        assertGreaterThan(getCacheStats().getCachedReads(), afterCachedReads);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg4Njg0MQ==", "url": "https://github.com/trinodb/trino/pull/3750#discussion_r425886841", "bodyText": "Callable? No need for exception handling.", "author": "losipiuk", "createdAt": "2020-05-15T15:40:51Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -196,6 +207,71 @@ public void testCacheRead()\n         assertEquals(getCacheStats().getRemoteReads(), intermittentRemoteReads);\n     }\n \n+    @Test\n+    public void testLargeFile()\n+            throws Exception\n+    {\n+        byte[] randomData = new byte[(int) LARGE_FILE_SIZE.toBytes()];\n+        new Random().nextBytes(randomData);\n+\n+        Path file = getStoragePath(\"large_file\");\n+        try (FSDataOutputStream outputStream = nonCachingFileSystem.create(file)) {\n+            outputStream.write(randomData);\n+        }\n+\n+        long beforeRemoteReads = getCacheStats().getRemoteReads();\n+        long beforeCachedReads = getCacheStats().getCachedReads();\n+\n+        assertTrue(Arrays.equals(randomData, readFileBytes(cachingFileSystem.open(file))));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000L);\n+        long intermittentRemoteReads = getCacheStats().getRemoteReads();\n+        assertGreaterThan(intermittentRemoteReads, beforeRemoteReads);\n+\n+        assertTrue(Arrays.equals(randomData, readFileBytes(cachingFileSystem.open(file))));\n+\n+        // stats are propagated asynchronously, wait for them\n+        sleep(1000L);\n+        long afterCachedReads = getCacheStats().getCachedReads();\n+        long afterRemoteReads = getCacheStats().getRemoteReads();\n+        assertGreaterThan(afterCachedReads, beforeCachedReads);\n+        assertEquals(afterRemoteReads, intermittentRemoteReads);\n+\n+        // make sure parallel reading of large file works\n+        ExecutorService executorService = newFixedThreadPool(10);\n+        try {\n+            List<Runnable> reads = nCopies(", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "9d02a3891d9d206c08158a985ff7640478c21530", "url": "https://github.com/trinodb/trino/commit/9d02a3891d9d206c08158a985ff7640478c21530", "message": "Add large file test for Rubix", "committedDate": "2020-05-15T19:57:23Z", "type": "commit"}, {"oid": "7041c5c4c76818d12cbeaeb34f84001debf1be33", "url": "https://github.com/trinodb/trino/commit/7041c5c4c76818d12cbeaeb34f84001debf1be33", "message": "Improve testCacheRead test", "committedDate": "2020-05-15T19:57:23Z", "type": "commit"}, {"oid": "7041c5c4c76818d12cbeaeb34f84001debf1be33", "url": "https://github.com/trinodb/trino/commit/7041c5c4c76818d12cbeaeb34f84001debf1be33", "message": "Improve testCacheRead test", "committedDate": "2020-05-15T19:57:23Z", "type": "forcePushed"}]}