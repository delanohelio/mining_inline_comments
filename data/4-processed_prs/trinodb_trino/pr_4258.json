{"pr_number": 4258, "pr_title": "Replace HiveQlTranslation with a non-regex-based parser", "pr_createdAt": "2020-06-29T05:03:00Z", "pr_url": "https://github.com/trinodb/trino/pull/4258", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMzA2Nw==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r446923067", "bodyText": "Please move public static methods at the top before constructor", "author": "kokosing", "createdAt": "2020-06-29T12:13:41Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Lists;\n+import io.prestosql.spi.PrestoException;\n+\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_INVALID_VIEW_DATA;\n+import static java.lang.String.format;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    private final String source;\n+    // Translation methods consume data from the iterator\n+    private final ListIterator<Character> input;\n+    private final StringBuilder output = new StringBuilder();\n+\n+    private HiveQlToPrestoTranslator(String hiveQl)\n+    {\n+        source = hiveQl;\n+        input = Lists.charactersOf(hiveQl).listIterator();\n+    }\n+\n+    /**\n+     * Translate a HiveQL statement to Presto SQL by fixing quoted identifiers\n+     * and string literals. No other translation is included.\n+     *\n+     * <p>Backquotes are replaced with double quotes, including SQL-style\n+     * escapes (`` becomes ` and \" becomes \"\").\n+     *\n+     * <p>Single and double quotes are replaced with single quotes, with\n+     * minimal processing of escape sequences to ensure that the strings end in\n+     * the right place.\n+     */\n+    public static String translateHiveQuotesToPresto(String hiveStatement)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNDYyMw==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r446924623", "bodyText": "such utility could be moved to the very bottom", "author": "kokosing", "createdAt": "2020-06-29T12:16:22Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Lists;\n+import io.prestosql.spi.PrestoException;\n+\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_INVALID_VIEW_DATA;\n+import static java.lang.String.format;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    private final String source;\n+    // Translation methods consume data from the iterator\n+    private final ListIterator<Character> input;\n+    private final StringBuilder output = new StringBuilder();\n+\n+    private HiveQlToPrestoTranslator(String hiveQl)\n+    {\n+        source = hiveQl;\n+        input = Lists.charactersOf(hiveQl).listIterator();\n+    }\n+\n+    /**\n+     * Translate a HiveQL statement to Presto SQL by fixing quoted identifiers\n+     * and string literals. No other translation is included.\n+     *\n+     * <p>Backquotes are replaced with double quotes, including SQL-style\n+     * escapes (`` becomes ` and \" becomes \"\").\n+     *\n+     * <p>Single and double quotes are replaced with single quotes, with\n+     * minimal processing of escape sequences to ensure that the strings end in\n+     * the right place.\n+     */\n+    public static String translateHiveQuotesToPresto(String hiveStatement)\n+    {\n+        HiveQlToPrestoTranslator translator =\n+                new HiveQlToPrestoTranslator(hiveStatement);\n+        return translator.translateQuotedLiterals();\n+    }\n+\n+    private static PrestoException hiveParseError(String message)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNDg1Mg==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r446924852", "bodyText": "This is not much actionable TODO. What is wrong, how can we fix it?", "author": "kokosing", "createdAt": "2020-06-29T12:16:49Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Lists;\n+import io.prestosql.spi.PrestoException;\n+\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_INVALID_VIEW_DATA;\n+import static java.lang.String.format;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    private final String source;\n+    // Translation methods consume data from the iterator\n+    private final ListIterator<Character> input;\n+    private final StringBuilder output = new StringBuilder();\n+\n+    private HiveQlToPrestoTranslator(String hiveQl)\n+    {\n+        source = hiveQl;\n+        input = Lists.charactersOf(hiveQl).listIterator();\n+    }\n+\n+    /**\n+     * Translate a HiveQL statement to Presto SQL by fixing quoted identifiers\n+     * and string literals. No other translation is included.\n+     *\n+     * <p>Backquotes are replaced with double quotes, including SQL-style\n+     * escapes (`` becomes ` and \" becomes \"\").\n+     *\n+     * <p>Single and double quotes are replaced with single quotes, with\n+     * minimal processing of escape sequences to ensure that the strings end in\n+     * the right place.\n+     */\n+    public static String translateHiveQuotesToPresto(String hiveStatement)\n+    {\n+        HiveQlToPrestoTranslator translator =\n+                new HiveQlToPrestoTranslator(hiveStatement);\n+        return translator.translateQuotedLiterals();\n+    }\n+\n+    private static PrestoException hiveParseError(String message)\n+    {\n+        // TODO: This error is wrong.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyMTcxMw==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447021713", "bodyText": "Semantically, the error isn't particularly related to Hive views, so I have two thoughts:\n\n\nRename the class to HiveViewTranslator and leave the error as-is.\n\n\nAdd a new HiveErrorCode, something like HIVE_PARSE_ERROR or HIVE_VIEW_NOT_READABLE.", "author": "jirassimok", "createdAt": "2020-06-29T14:38:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNDg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5NzUyMg==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447097522", "bodyText": "@alexjo2144 What do you think I should do with the error? (see previous comment)", "author": "jirassimok", "createdAt": "2020-06-29T16:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNDg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEwMTc3OA==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447101778", "bodyText": "I think adding a new error code for HIVE_VIEW_TRANSLATION_ERROR or something like that makes sense.", "author": "alexjo2144", "createdAt": "2020-06-29T16:32:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNDg1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNTI2OA==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r446925268", "bodyText": "move this one method above, so methods are defined in the same order as they are used in translateQuotedLiterals", "author": "kokosing", "createdAt": "2020-06-29T12:17:36Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Lists;\n+import io.prestosql.spi.PrestoException;\n+\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_INVALID_VIEW_DATA;\n+import static java.lang.String.format;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    private final String source;\n+    // Translation methods consume data from the iterator\n+    private final ListIterator<Character> input;\n+    private final StringBuilder output = new StringBuilder();\n+\n+    private HiveQlToPrestoTranslator(String hiveQl)\n+    {\n+        source = hiveQl;\n+        input = Lists.charactersOf(hiveQl).listIterator();\n+    }\n+\n+    /**\n+     * Translate a HiveQL statement to Presto SQL by fixing quoted identifiers\n+     * and string literals. No other translation is included.\n+     *\n+     * <p>Backquotes are replaced with double quotes, including SQL-style\n+     * escapes (`` becomes ` and \" becomes \"\").\n+     *\n+     * <p>Single and double quotes are replaced with single quotes, with\n+     * minimal processing of escape sequences to ensure that the strings end in\n+     * the right place.\n+     */\n+    public static String translateHiveQuotesToPresto(String hiveStatement)\n+    {\n+        HiveQlToPrestoTranslator translator =\n+                new HiveQlToPrestoTranslator(hiveStatement);\n+        return translator.translateQuotedLiterals();\n+    }\n+\n+    private static PrestoException hiveParseError(String message)\n+    {\n+        // TODO: This error is wrong.\n+        return new PrestoException(HIVE_INVALID_VIEW_DATA,\n+                format(\"Error translating Hive QL to Presto SQL: %s\",\n+                        message));\n+    }\n+\n+    private String translateQuotedLiterals()\n+    {\n+        // Consume input, passing control to other translation methods when\n+        // their delimiters are encountered.\n+        while (input.hasNext()) {\n+            char c = input.next();\n+            switch (c) {\n+                case '\"':\n+                case '\\'':\n+                    translateString(c);\n+                    break;\n+                case '`':\n+                    translateQuotedIdentifier();\n+                    break;\n+                default:\n+                    output.append(c);\n+                    break;\n+            }\n+        }\n+\n+        return output.toString();\n+    }\n+\n+    /**\n+     * Start with input just after the opening backquote, consume to the\n+     * closing backquote.\n+     */\n+    private void translateQuotedIdentifier()\n+    {\n+        output.append('\"');\n+        while (input.hasNext()) {\n+            char c = input.next();\n+\n+            // The possible outcomes in an identifier are:\n+            // - replace \" with \"\"\n+            // - leave most characters as-is\n+            // - replace `` with `\n+            // - replace ` with \" and end the identifier\n+            if (c == '\"') {\n+                output.append(\"\\\"\\\"\");\n+            }\n+            else if (c != '`') {\n+                output.append(c);\n+            }\n+            else if (input.hasNext() && peek() == '`') {\n+                output.append('`');\n+                input.next();\n+            }\n+            else { // end of identifier\n+                output.append('\"');\n+                return;\n+            }\n+        }\n+\n+        throw hiveParseError(\"unexpected end of input in identifier\");\n+    }\n+\n+    /**\n+     * Call with input just after the opening delimiter (the parameter), end\n+     * with input after closing delimiter.\n+     */\n+    private void translateString(char delimiter)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNjE5Mg==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r446926192", "bodyText": "drop the comment", "author": "kokosing", "createdAt": "2020-06-29T12:19:12Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Lists;\n+import io.prestosql.spi.PrestoException;\n+\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_INVALID_VIEW_DATA;\n+import static java.lang.String.format;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    private final String source;\n+    // Translation methods consume data from the iterator\n+    private final ListIterator<Character> input;\n+    private final StringBuilder output = new StringBuilder();\n+\n+    private HiveQlToPrestoTranslator(String hiveQl)\n+    {\n+        source = hiveQl;\n+        input = Lists.charactersOf(hiveQl).listIterator();\n+    }\n+\n+    /**\n+     * Translate a HiveQL statement to Presto SQL by fixing quoted identifiers\n+     * and string literals. No other translation is included.\n+     *\n+     * <p>Backquotes are replaced with double quotes, including SQL-style\n+     * escapes (`` becomes ` and \" becomes \"\").\n+     *\n+     * <p>Single and double quotes are replaced with single quotes, with\n+     * minimal processing of escape sequences to ensure that the strings end in\n+     * the right place.\n+     */\n+    public static String translateHiveQuotesToPresto(String hiveStatement)\n+    {\n+        HiveQlToPrestoTranslator translator =\n+                new HiveQlToPrestoTranslator(hiveStatement);\n+        return translator.translateQuotedLiterals();\n+    }\n+\n+    private static PrestoException hiveParseError(String message)\n+    {\n+        // TODO: This error is wrong.\n+        return new PrestoException(HIVE_INVALID_VIEW_DATA,\n+                format(\"Error translating Hive QL to Presto SQL: %s\",\n+                        message));\n+    }\n+\n+    private String translateQuotedLiterals()\n+    {\n+        // Consume input, passing control to other translation methods when\n+        // their delimiters are encountered.\n+        while (input.hasNext()) {\n+            char c = input.next();\n+            switch (c) {\n+                case '\"':\n+                case '\\'':\n+                    translateString(c);\n+                    break;\n+                case '`':\n+                    translateQuotedIdentifier();\n+                    break;\n+                default:\n+                    output.append(c);\n+                    break;\n+            }\n+        }\n+\n+        return output.toString();\n+    }\n+\n+    /**\n+     * Start with input just after the opening backquote, consume to the\n+     * closing backquote.\n+     */\n+    private void translateQuotedIdentifier()\n+    {\n+        output.append('\"');\n+        while (input.hasNext()) {\n+            char c = input.next();\n+\n+            // The possible outcomes in an identifier are:\n+            // - replace \" with \"\"\n+            // - leave most characters as-is\n+            // - replace `` with `\n+            // - replace ` with \" and end the identifier\n+            if (c == '\"') {\n+                output.append(\"\\\"\\\"\");\n+            }\n+            else if (c != '`') {\n+                output.append(c);\n+            }\n+            else if (input.hasNext() && peek() == '`') {\n+                output.append('`');\n+                input.next();\n+            }\n+            else { // end of identifier\n+                output.append('\"');\n+                return;\n+            }\n+        }\n+\n+        throw hiveParseError(\"unexpected end of input in identifier\");\n+    }\n+\n+    /**\n+     * Call with input just after the opening delimiter (the parameter), end\n+     * with input after closing delimiter.\n+     */\n+    private void translateString(char delimiter)\n+    {\n+        output.append(\"'\");\n+        while (input.hasNext()) {\n+            char c = input.next();\n+\n+            // The possible outcomes in a string are (assuming \"-quoting):\n+            // - find delimiter and end the string\n+            // - find backslash and treat following character as non-delimiter\n+            // - replace ' with ''\n+            // - leave any other character as-is\n+            if (c == delimiter) {\n+                output.append(\"'\");\n+                return;\n+            }\n+            else if (c == '\\\\') {\n+                if (!input.hasNext()) {\n+                    break; // skip to end-of-input error\n+                }\n+                // Don't handle escape sequences, just drop the backslash.\n+                // (If we want to handle them, make this block a function.)\n+                c = input.next();\n+            }\n+\n+            if (c == '\\'') {\n+                output.append(\"''\");\n+            }\n+            else {\n+                output.append(c);\n+            }\n+        }\n+        throw hiveParseError(\"unexpected end of input in string\");\n+    }\n+\n+    /** Get the next character in the input without consuming it. */", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNjczNw==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r446926737", "bodyText": "I like this much more than regexp based", "author": "kokosing", "createdAt": "2020-06-29T12:20:10Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Lists;\n+import io.prestosql.spi.PrestoException;\n+\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_INVALID_VIEW_DATA;\n+import static java.lang.String.format;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNzg3MA==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r446927870", "bodyText": "I don't think you need to split lines here", "author": "kokosing", "createdAt": "2020-06-29T12:22:04Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Lists;\n+import io.prestosql.spi.PrestoException;\n+\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_INVALID_VIEW_DATA;\n+import static java.lang.String.format;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    private final String source;\n+    // Translation methods consume data from the iterator\n+    private final ListIterator<Character> input;\n+    private final StringBuilder output = new StringBuilder();\n+\n+    private HiveQlToPrestoTranslator(String hiveQl)\n+    {\n+        source = hiveQl;\n+        input = Lists.charactersOf(hiveQl).listIterator();\n+    }\n+\n+    /**\n+     * Translate a HiveQL statement to Presto SQL by fixing quoted identifiers\n+     * and string literals. No other translation is included.\n+     *\n+     * <p>Backquotes are replaced with double quotes, including SQL-style\n+     * escapes (`` becomes ` and \" becomes \"\").\n+     *\n+     * <p>Single and double quotes are replaced with single quotes, with\n+     * minimal processing of escape sequences to ensure that the strings end in\n+     * the right place.\n+     */\n+    public static String translateHiveQuotesToPresto(String hiveStatement)\n+    {\n+        HiveQlToPrestoTranslator translator =\n+                new HiveQlToPrestoTranslator(hiveStatement);\n+        return translator.translateQuotedLiterals();\n+    }\n+\n+    private static PrestoException hiveParseError(String message)\n+    {\n+        // TODO: This error is wrong.\n+        return new PrestoException(HIVE_INVALID_VIEW_DATA,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyMjk1Mw==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447022953", "bodyText": "It was 124 characters, but I can make it fit.", "author": "jirassimok", "createdAt": "2020-06-29T14:39:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyNzg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNTI1OQ==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r446935259", "bodyText": "I would drop such comments", "author": "kokosing", "createdAt": "2020-06-29T12:34:15Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Lists;\n+import io.prestosql.spi.PrestoException;\n+\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_INVALID_VIEW_DATA;\n+import static java.lang.String.format;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    private final String source;\n+    // Translation methods consume data from the iterator\n+    private final ListIterator<Character> input;\n+    private final StringBuilder output = new StringBuilder();\n+\n+    private HiveQlToPrestoTranslator(String hiveQl)\n+    {\n+        source = hiveQl;\n+        input = Lists.charactersOf(hiveQl).listIterator();\n+    }\n+\n+    /**\n+     * Translate a HiveQL statement to Presto SQL by fixing quoted identifiers\n+     * and string literals. No other translation is included.\n+     *\n+     * <p>Backquotes are replaced with double quotes, including SQL-style\n+     * escapes (`` becomes ` and \" becomes \"\").\n+     *\n+     * <p>Single and double quotes are replaced with single quotes, with\n+     * minimal processing of escape sequences to ensure that the strings end in\n+     * the right place.\n+     */\n+    public static String translateHiveQuotesToPresto(String hiveStatement)\n+    {\n+        HiveQlToPrestoTranslator translator =\n+                new HiveQlToPrestoTranslator(hiveStatement);\n+        return translator.translateQuotedLiterals();\n+    }\n+\n+    private static PrestoException hiveParseError(String message)\n+    {\n+        // TODO: This error is wrong.\n+        return new PrestoException(HIVE_INVALID_VIEW_DATA,\n+                format(\"Error translating Hive QL to Presto SQL: %s\",\n+                        message));\n+    }\n+\n+    private String translateQuotedLiterals()\n+    {\n+        // Consume input, passing control to other translation methods when\n+        // their delimiters are encountered.\n+        while (input.hasNext()) {\n+            char c = input.next();\n+            switch (c) {\n+                case '\"':\n+                case '\\'':\n+                    translateString(c);\n+                    break;\n+                case '`':\n+                    translateQuotedIdentifier();\n+                    break;\n+                default:\n+                    output.append(c);\n+                    break;\n+            }\n+        }\n+\n+        return output.toString();\n+    }\n+\n+    /**\n+     * Start with input just after the opening backquote, consume to the\n+     * closing backquote.\n+     */\n+    private void translateQuotedIdentifier()\n+    {\n+        output.append('\"');\n+        while (input.hasNext()) {\n+            char c = input.next();\n+\n+            // The possible outcomes in an identifier are:\n+            // - replace \" with \"\"\n+            // - leave most characters as-is\n+            // - replace `` with `\n+            // - replace ` with \" and end the identifier\n+            if (c == '\"') {\n+                output.append(\"\\\"\\\"\");\n+            }\n+            else if (c != '`') {\n+                output.append(c);\n+            }\n+            else if (input.hasNext() && peek() == '`') {\n+                output.append('`');\n+                input.next();\n+            }\n+            else { // end of identifier\n+                output.append('\"');\n+                return;\n+            }\n+        }\n+\n+        throw hiveParseError(\"unexpected end of input in identifier\");\n+    }\n+\n+    /**\n+     * Call with input just after the opening delimiter (the parameter), end\n+     * with input after closing delimiter.\n+     */", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNzAyOQ==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r446937029", "bodyText": "please use @DataProvider", "author": "kokosing", "createdAt": "2020-06-29T12:37:08Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveQlToPrestoTranslator.java", "diffHunk": "@@ -103,9 +108,88 @@ public void testPredicates()\n                 \"SELECT '''' = '''' OR false\");\n     }\n \n+    /**\n+     * Declare a lot of column name translations, then test combinations of them.\n+     */\n+    @Test\n+    public void testQuotedLiteralCombinations()\n+    {\n+        // Each element of the column lists is {hive, presto}\n+\n+        List<String[]> columns = new ArrayList<>(Arrays.asList(new String[][] {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNzI0OA==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r446937248", "bodyText": "extract this as separate test and please use @DataProvider", "author": "kokosing", "createdAt": "2020-06-29T12:37:27Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveQlToPrestoTranslator.java", "diffHunk": "@@ -103,9 +108,88 @@ public void testPredicates()\n                 \"SELECT '''' = '''' OR false\");\n     }\n \n+    /**\n+     * Declare a lot of column name translations, then test combinations of them.\n+     */\n+    @Test\n+    public void testQuotedLiteralCombinations()\n+    {\n+        // Each element of the column lists is {hive, presto}\n+\n+        List<String[]> columns = new ArrayList<>(Arrays.asList(new String[][] {\n+                // simple literals\n+                {\"unquoted\", \"unquoted\"},\n+                {\"`backquoted`\", \"\\\"backquoted\\\"\"},\n+                {\"`sometable`.`backquoted`\", \"\\\"sometable\\\".\\\"backquoted\\\"\"},\n+                {\"'single quoted'\", \"'single quoted'\"},\n+                {\"\\\"double quoted\\\"\", \"'double quoted'\"},\n+                // empty strings\n+                {\"''\", \"''\"},\n+                {\"\\\"\\\"\", \"''\"},\n+        }));\n+\n+        // For just the simple-looking columns, test three at a time\n+        for (String[] col1 : columns) {\n+            for (String[] col2 : columns) {\n+                for (String[] col3 : columns) {\n+                    String fmt = \"SELECT %s, %s, %s FROM x\";\n+                    assertTranslation(\n+                            format(fmt, col1[0], col2[0], col3[0]),\n+                            format(fmt, col1[1], col2[1], col3[1]));\n+                }\n+            }\n+        }\n+\n+        columns.addAll(Arrays.asList(new String[][] {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMDY5OQ==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447030699", "bodyText": "Personally I'd find this more readable if you flipped the condition so that the final else condition was this un-interesting case and your if conditions specified the more interesting ` and `` cases", "author": "alexjo2144", "createdAt": "2020-06-29T14:50:19Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Lists;\n+import io.prestosql.spi.PrestoException;\n+\n+import java.util.ListIterator;\n+\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_INVALID_VIEW_DATA;\n+import static java.lang.String.format;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    private final String source;\n+    // Translation methods consume data from the iterator\n+    private final ListIterator<Character> input;\n+    private final StringBuilder output = new StringBuilder();\n+\n+    private HiveQlToPrestoTranslator(String hiveQl)\n+    {\n+        source = hiveQl;\n+        input = Lists.charactersOf(hiveQl).listIterator();\n+    }\n+\n+    /**\n+     * Translate a HiveQL statement to Presto SQL by fixing quoted identifiers\n+     * and string literals. No other translation is included.\n+     *\n+     * <p>Backquotes are replaced with double quotes, including SQL-style\n+     * escapes (`` becomes ` and \" becomes \"\").\n+     *\n+     * <p>Single and double quotes are replaced with single quotes, with\n+     * minimal processing of escape sequences to ensure that the strings end in\n+     * the right place.\n+     */\n+    public static String translateHiveQuotesToPresto(String hiveStatement)\n+    {\n+        HiveQlToPrestoTranslator translator =\n+                new HiveQlToPrestoTranslator(hiveStatement);\n+        return translator.translateQuotedLiterals();\n+    }\n+\n+    private static PrestoException hiveParseError(String message)\n+    {\n+        // TODO: This error is wrong.\n+        return new PrestoException(HIVE_INVALID_VIEW_DATA,\n+                format(\"Error translating Hive QL to Presto SQL: %s\",\n+                        message));\n+    }\n+\n+    private String translateQuotedLiterals()\n+    {\n+        // Consume input, passing control to other translation methods when\n+        // their delimiters are encountered.\n+        while (input.hasNext()) {\n+            char c = input.next();\n+            switch (c) {\n+                case '\"':\n+                case '\\'':\n+                    translateString(c);\n+                    break;\n+                case '`':\n+                    translateQuotedIdentifier();\n+                    break;\n+                default:\n+                    output.append(c);\n+                    break;\n+            }\n+        }\n+\n+        return output.toString();\n+    }\n+\n+    /**\n+     * Start with input just after the opening backquote, consume to the\n+     * closing backquote.\n+     */\n+    private void translateQuotedIdentifier()\n+    {\n+        output.append('\"');\n+        while (input.hasNext()) {\n+            char c = input.next();\n+\n+            // The possible outcomes in an identifier are:\n+            // - replace \" with \"\"\n+            // - leave most characters as-is\n+            // - replace `` with `\n+            // - replace ` with \" and end the identifier\n+            if (c == '\"') {\n+                output.append(\"\\\"\\\"\");\n+            }\n+            else if (c != '`') {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1ODMzNA==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447058334", "bodyText": "I think I agree. I had it that way at one point, and I don't remember why I switched it.", "author": "jirassimok", "createdAt": "2020-06-29T15:28:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMDY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1MTY2MA==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447051660", "bodyText": "Use PeekingIterator instead? Then you don't have to store source", "author": "alexjo2144", "createdAt": "2020-06-29T15:18:53Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Lists;\n+import io.prestosql.spi.PrestoException;\n+\n+import java.util.ListIterator;\n+\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_INVALID_VIEW_DATA;\n+import static java.lang.String.format;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    private final String source;\n+    // Translation methods consume data from the iterator\n+    private final ListIterator<Character> input;\n+    private final StringBuilder output = new StringBuilder();\n+\n+    private HiveQlToPrestoTranslator(String hiveQl)\n+    {\n+        source = hiveQl;\n+        input = Lists.charactersOf(hiveQl).listIterator();\n+    }\n+\n+    /**\n+     * Translate a HiveQL statement to Presto SQL by fixing quoted identifiers\n+     * and string literals. No other translation is included.\n+     *\n+     * <p>Backquotes are replaced with double quotes, including SQL-style\n+     * escapes (`` becomes ` and \" becomes \"\").\n+     *\n+     * <p>Single and double quotes are replaced with single quotes, with\n+     * minimal processing of escape sequences to ensure that the strings end in\n+     * the right place.\n+     */\n+    public static String translateHiveQuotesToPresto(String hiveStatement)\n+    {\n+        HiveQlToPrestoTranslator translator =\n+                new HiveQlToPrestoTranslator(hiveStatement);\n+        return translator.translateQuotedLiterals();\n+    }\n+\n+    private static PrestoException hiveParseError(String message)\n+    {\n+        // TODO: This error is wrong.\n+        return new PrestoException(HIVE_INVALID_VIEW_DATA,\n+                format(\"Error translating Hive QL to Presto SQL: %s\",\n+                        message));\n+    }\n+\n+    private String translateQuotedLiterals()\n+    {\n+        // Consume input, passing control to other translation methods when\n+        // their delimiters are encountered.\n+        while (input.hasNext()) {\n+            char c = input.next();\n+            switch (c) {\n+                case '\"':\n+                case '\\'':\n+                    translateString(c);\n+                    break;\n+                case '`':\n+                    translateQuotedIdentifier();\n+                    break;\n+                default:\n+                    output.append(c);\n+                    break;\n+            }\n+        }\n+\n+        return output.toString();\n+    }\n+\n+    /**\n+     * Start with input just after the opening backquote, consume to the\n+     * closing backquote.\n+     */\n+    private void translateQuotedIdentifier()\n+    {\n+        output.append('\"');\n+        while (input.hasNext()) {\n+            char c = input.next();\n+\n+            // The possible outcomes in an identifier are:\n+            // - replace \" with \"\"\n+            // - leave most characters as-is\n+            // - replace `` with `\n+            // - replace ` with \" and end the identifier\n+            if (c == '\"') {\n+                output.append(\"\\\"\\\"\");\n+            }\n+            else if (c != '`') {\n+                output.append(c);\n+            }\n+            else if (input.hasNext() && peek() == '`') {\n+                output.append('`');\n+                input.next();\n+            }\n+            else { // end of identifier\n+                output.append('\"');\n+                return;\n+            }\n+        }\n+\n+        throw hiveParseError(\"unexpected end of input in identifier\");\n+    }\n+\n+    /**\n+     * Call with input just after the opening delimiter (the parameter), end\n+     * with input after closing delimiter.\n+     */\n+    private void translateString(char delimiter)\n+    {\n+        output.append(\"'\");\n+        while (input.hasNext()) {\n+            char c = input.next();\n+\n+            // The possible outcomes in a string are (assuming \"-quoting):\n+            // - find delimiter and end the string\n+            // - find backslash and treat following character as non-delimiter\n+            // - replace ' with ''\n+            // - leave any other character as-is\n+            if (c == delimiter) {\n+                output.append(\"'\");\n+                return;\n+            }\n+            else if (c == '\\\\') {\n+                if (!input.hasNext()) {\n+                    break; // skip to end-of-input error\n+                }\n+                // Don't handle escape sequences, just drop the backslash.\n+                // (If we want to handle them, make this block a function.)\n+                c = input.next();\n+            }\n+\n+            if (c == '\\'') {\n+                output.append(\"''\");\n+            }\n+            else {\n+                output.append(c);\n+            }\n+        }\n+        throw hiveParseError(\"unexpected end of input in string\");\n+    }\n+\n+    /** Get the next character in the input without consuming it. */\n+    private char peek()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2MDc2NA==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447060764", "bodyText": "I spent way too long trying to find a better way to handle the input, and I never found that class. Thanks!", "author": "jirassimok", "createdAt": "2020-06-29T15:31:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1MTY2MA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4MjcwNA==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447082704", "bodyText": "You could make all these methods static, passing input and output through to each. I'm not sure what's cleaner style-wise, just a thought.", "author": "alexjo2144", "createdAt": "2020-06-29T16:02:49Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Iterators;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.PeekingIterator;\n+import io.prestosql.spi.PrestoException;\n+\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_INVALID_VIEW_DATA;\n+import static java.lang.String.format;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    // Translation methods consume data from the iterator\n+    private final PeekingIterator<Character> input;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5NDIwMA==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447094200", "bodyText": "I briefly considered it, but passing state as parameters felt like poor object-oriented design.\nAlternatively, the state and non-static methods could be in a static nested class, which is what we have in some other places, like ResolvedFunctionCallRewriter and ConnectorExpressionTranslator. I started with that, but then it started to seem weird that nearly everything in the top-level class was part of the nested class.", "author": "jirassimok", "createdAt": "2020-06-29T16:20:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4MjcwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxNDYxNA==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r448514614", "bodyText": "You know, passing state as parameters is \"pure functional programming\" which is more in fashion now than \"object oriented programming\" :)", "author": "electrum", "createdAt": "2020-07-01T17:31:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4MjcwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0OTQ2OQ==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r448549469", "bodyText": "Well, yes, but this is also Java.", "author": "jirassimok", "createdAt": "2020-07-01T18:40:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4MjcwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MzQ0Nw==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r448563447", "bodyText": "Northeastern's CS program actually teaches a pure functional Java class before they do object oriented design.", "author": "alexjo2144", "createdAt": "2020-07-01T19:09:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4MjcwNA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE1Njk5Mw==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447156993", "bodyText": "Don't rename the class. This is preventing Git from showing a proper diff for things like testStringLiterals which did not change.", "author": "electrum", "createdAt": "2020-06-29T18:07:03Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterators;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+import io.prestosql.sql.parser.ParsingOptions;\n+import io.prestosql.sql.parser.SqlParser;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import static io.prestosql.plugin.hive.HiveQlToPrestoTranslator.translateHiveQuotesToPresto;\n+import static io.prestosql.testing.assertions.Assert.assertEquals;\n+import static java.lang.String.format;\n+import static java.util.Collections.nCopies;\n+\n+public class TestHiveQlToPrestoTranslator", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxNDUyNA==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447214524", "bodyText": "Oops; fixed.", "author": "jirassimok", "createdAt": "2020-06-29T19:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE1Njk5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE1NzY4Ng==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447157686", "bodyText": "Revert", "author": "electrum", "createdAt": "2020-06-29T18:08:18Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveErrorCode.java", "diffHunk": "@@ -60,11 +60,12 @@\n     HIVE_PARTITION_NOT_READABLE(33, USER_ERROR),\n     HIVE_TABLE_NOT_READABLE(34, USER_ERROR),\n     HIVE_TABLE_DROPPED_DURING_QUERY(35, EXTERNAL),\n-    // HIVE_TOO_MANY_BUCKET_SORT_FILES(36) is deprecated\n+    // HIVE_TOO_MANY_BUCKET_SORT_FILES(36) is deprecatedS", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE1ODExMQ==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447158111", "bodyText": "Let's name this HIVE_VIEW_TRANSLATION_ERROR", "author": "electrum", "createdAt": "2020-06-29T18:09:06Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveErrorCode.java", "diffHunk": "@@ -60,11 +60,12 @@\n     HIVE_PARTITION_NOT_READABLE(33, USER_ERROR),\n     HIVE_TABLE_NOT_READABLE(34, USER_ERROR),\n     HIVE_TABLE_DROPPED_DURING_QUERY(35, EXTERNAL),\n-    // HIVE_TOO_MANY_BUCKET_SORT_FILES(36) is deprecated\n+    // HIVE_TOO_MANY_BUCKET_SORT_FILES(36) is deprecatedS\n     HIVE_CORRUPTED_COLUMN_STATISTICS(37, EXTERNAL),\n     HIVE_EXCEEDED_SPLIT_BUFFERING_LIMIT(38, USER_ERROR),\n     HIVE_UNKNOWN_COLUMN_STATISTIC_TYPE(39, INTERNAL_ERROR),\n-    HIVE_TABLE_LOCK_NOT_ACQUIRED(40, EXTERNAL)\n+    HIVE_TABLE_LOCK_NOT_ACQUIRED(40, EXTERNAL),\n+    HIVE_TRANSLATION_ERROR(41, EXTERNAL),", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE1OTQ3Ng==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447159476", "bodyText": "No need to wrap here", "author": "electrum", "createdAt": "2020-06-29T18:11:34Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterators;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+import io.prestosql.sql.parser.ParsingOptions;\n+import io.prestosql.sql.parser.SqlParser;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import static io.prestosql.plugin.hive.HiveQlToPrestoTranslator.translateHiveQuotesToPresto;\n+import static io.prestosql.testing.assertions.Assert.assertEquals;\n+import static java.lang.String.format;\n+import static java.util.Collections.nCopies;\n+\n+public class TestHiveQlToPrestoTranslator\n+{\n+    private final SqlParser parser = new SqlParser();\n+\n+    // Map Hive names to Presto names\n+    private static Map<String, String> simpleColumnNames =\n+            ImmutableMap.<String, String>builder()\n+                    // simple literals\n+                    .put(\n+                            \"unquoted\",\n+                            \"unquoted\")\n+                    .put(\n+                            \"`backquoted`\",\n+                            \"\\\"backquoted\\\"\")\n+                    .put(\n+                            \"`sometable`.`backquoted`\",\n+                            \"\\\"sometable\\\".\\\"backquoted\\\"\")\n+                    .put(\n+                            \"'single quoted'\",\n+                            \"'single quoted'\")\n+                    .put(\n+                            \"\\\"double quoted\\\"\",\n+                            \"'double quoted'\")\n+                    // empty strings\n+                    .put(\"''\", \"''\")\n+                    .put(\"\\\"\\\"\", \"''\")\n+                    // just quotes\n+                    .put(\"'\\\\''\", \"''''\")\n+                    .put(\"\\\"\\\\\\\"\\\"\", \"'\\\"'\")\n+                    .build();\n+\n+    private static Map<String, String> extendedColumnNames =\n+            ImmutableMap.<String, String>builder()\n+                    .putAll(simpleColumnNames)\n+                    .put(\n+                            \"`id: ``back`\",\n+                            \"\\\"id: `back\\\"\")\n+                    .put(\n+                            \"`id: \\\"double`\",\n+                            \"\\\"id: \\\"\\\"double\\\"\")\n+                    .put(\n+                            \"`id: \\\"\\\"two double`\",\n+                            \"\\\"id: \\\"\\\"\\\"\\\"two double\\\"\")\n+                    .put(\n+                            \"`id: two back`````\",\n+                            \"\\\"id: two back``\\\"\")\n+                    .put(\n+                            \"'single: \\\"double'\",\n+                            \"'single: \\\"double'\")\n+                    .put(\n+                            \"'single: \\\\'single'\",\n+                            \"'single: ''single'\")\n+                    .put(\n+                            \"'single: \\\\'\\\\'two singles'\",\n+                            \"'single: ''''two singles'\")\n+                    .put(\n+                            \"\\\"double: double\\\\\\\"\\\"\",\n+                            \"'double: double\\\"'\")\n+                    .put(\n+                            \"\\\"double: single'\\\"\",\n+                            \"'double: single'''\")\n+                    .put(\n+                            \"\\\"double: two singles''\\\"\",\n+                            \"'double: two singles'''''\")\n+                    .build();\n+\n+    /** Prepare all combinations of {@code n} of the given columns. */\n+    private static Iterator<Object[]> getNColumns(int n, Map<String, String> columns)\n+    {\n+        Stream<String> hiveNames =\n+                Sets.cartesianProduct(nCopies(n, columns.keySet()))\n+                        .stream()\n+                        .map(names -> String.join(\", \", names));\n+\n+        Stream<String> prestoNames =\n+                Lists.cartesianProduct(nCopies(n, List.copyOf(columns.values())))\n+                        .stream()\n+                        .map(names -> String.join(\", \", names));\n+\n+        return Streams.zip(hiveNames, prestoNames, (h, p) -> new Object[]{h, p})\n+                .iterator();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE1OTUyNg==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447159526", "bodyText": "Static import", "author": "electrum", "createdAt": "2020-06-29T18:11:39Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterators;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+import io.prestosql.sql.parser.ParsingOptions;\n+import io.prestosql.sql.parser.SqlParser;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import static io.prestosql.plugin.hive.HiveQlToPrestoTranslator.translateHiveQuotesToPresto;\n+import static io.prestosql.testing.assertions.Assert.assertEquals;\n+import static java.lang.String.format;\n+import static java.util.Collections.nCopies;\n+\n+public class TestHiveQlToPrestoTranslator\n+{\n+    private final SqlParser parser = new SqlParser();\n+\n+    // Map Hive names to Presto names\n+    private static Map<String, String> simpleColumnNames =\n+            ImmutableMap.<String, String>builder()\n+                    // simple literals\n+                    .put(\n+                            \"unquoted\",\n+                            \"unquoted\")\n+                    .put(\n+                            \"`backquoted`\",\n+                            \"\\\"backquoted\\\"\")\n+                    .put(\n+                            \"`sometable`.`backquoted`\",\n+                            \"\\\"sometable\\\".\\\"backquoted\\\"\")\n+                    .put(\n+                            \"'single quoted'\",\n+                            \"'single quoted'\")\n+                    .put(\n+                            \"\\\"double quoted\\\"\",\n+                            \"'double quoted'\")\n+                    // empty strings\n+                    .put(\"''\", \"''\")\n+                    .put(\"\\\"\\\"\", \"''\")\n+                    // just quotes\n+                    .put(\"'\\\\''\", \"''''\")\n+                    .put(\"\\\"\\\\\\\"\\\"\", \"'\\\"'\")\n+                    .build();\n+\n+    private static Map<String, String> extendedColumnNames =\n+            ImmutableMap.<String, String>builder()\n+                    .putAll(simpleColumnNames)\n+                    .put(\n+                            \"`id: ``back`\",\n+                            \"\\\"id: `back\\\"\")\n+                    .put(\n+                            \"`id: \\\"double`\",\n+                            \"\\\"id: \\\"\\\"double\\\"\")\n+                    .put(\n+                            \"`id: \\\"\\\"two double`\",\n+                            \"\\\"id: \\\"\\\"\\\"\\\"two double\\\"\")\n+                    .put(\n+                            \"`id: two back`````\",\n+                            \"\\\"id: two back``\\\"\")\n+                    .put(\n+                            \"'single: \\\"double'\",\n+                            \"'single: \\\"double'\")\n+                    .put(\n+                            \"'single: \\\\'single'\",\n+                            \"'single: ''single'\")\n+                    .put(\n+                            \"'single: \\\\'\\\\'two singles'\",\n+                            \"'single: ''''two singles'\")\n+                    .put(\n+                            \"\\\"double: double\\\\\\\"\\\"\",\n+                            \"'double: double\\\"'\")\n+                    .put(\n+                            \"\\\"double: single'\\\"\",\n+                            \"'double: single'''\")\n+                    .put(\n+                            \"\\\"double: two singles''\\\"\",\n+                            \"'double: two singles'''''\")\n+                    .build();\n+\n+    /** Prepare all combinations of {@code n} of the given columns. */\n+    private static Iterator<Object[]> getNColumns(int n, Map<String, String> columns)\n+    {\n+        Stream<String> hiveNames =\n+                Sets.cartesianProduct(nCopies(n, columns.keySet()))\n+                        .stream()\n+                        .map(names -> String.join(\", \", names));\n+\n+        Stream<String> prestoNames =\n+                Lists.cartesianProduct(nCopies(n, List.copyOf(columns.values())))", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE1OTY1MA==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447159650", "bodyText": "stream() normally go on the same line", "author": "electrum", "createdAt": "2020-06-29T18:11:51Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterators;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n+import com.google.common.collect.Streams;\n+import io.prestosql.sql.parser.ParsingOptions;\n+import io.prestosql.sql.parser.SqlParser;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import static io.prestosql.plugin.hive.HiveQlToPrestoTranslator.translateHiveQuotesToPresto;\n+import static io.prestosql.testing.assertions.Assert.assertEquals;\n+import static java.lang.String.format;\n+import static java.util.Collections.nCopies;\n+\n+public class TestHiveQlToPrestoTranslator\n+{\n+    private final SqlParser parser = new SqlParser();\n+\n+    // Map Hive names to Presto names\n+    private static Map<String, String> simpleColumnNames =\n+            ImmutableMap.<String, String>builder()\n+                    // simple literals\n+                    .put(\n+                            \"unquoted\",\n+                            \"unquoted\")\n+                    .put(\n+                            \"`backquoted`\",\n+                            \"\\\"backquoted\\\"\")\n+                    .put(\n+                            \"`sometable`.`backquoted`\",\n+                            \"\\\"sometable\\\".\\\"backquoted\\\"\")\n+                    .put(\n+                            \"'single quoted'\",\n+                            \"'single quoted'\")\n+                    .put(\n+                            \"\\\"double quoted\\\"\",\n+                            \"'double quoted'\")\n+                    // empty strings\n+                    .put(\"''\", \"''\")\n+                    .put(\"\\\"\\\"\", \"''\")\n+                    // just quotes\n+                    .put(\"'\\\\''\", \"''''\")\n+                    .put(\"\\\"\\\\\\\"\\\"\", \"'\\\"'\")\n+                    .build();\n+\n+    private static Map<String, String> extendedColumnNames =\n+            ImmutableMap.<String, String>builder()\n+                    .putAll(simpleColumnNames)\n+                    .put(\n+                            \"`id: ``back`\",\n+                            \"\\\"id: `back\\\"\")\n+                    .put(\n+                            \"`id: \\\"double`\",\n+                            \"\\\"id: \\\"\\\"double\\\"\")\n+                    .put(\n+                            \"`id: \\\"\\\"two double`\",\n+                            \"\\\"id: \\\"\\\"\\\"\\\"two double\\\"\")\n+                    .put(\n+                            \"`id: two back`````\",\n+                            \"\\\"id: two back``\\\"\")\n+                    .put(\n+                            \"'single: \\\"double'\",\n+                            \"'single: \\\"double'\")\n+                    .put(\n+                            \"'single: \\\\'single'\",\n+                            \"'single: ''single'\")\n+                    .put(\n+                            \"'single: \\\\'\\\\'two singles'\",\n+                            \"'single: ''''two singles'\")\n+                    .put(\n+                            \"\\\"double: double\\\\\\\"\\\"\",\n+                            \"'double: double\\\"'\")\n+                    .put(\n+                            \"\\\"double: single'\\\"\",\n+                            \"'double: single'''\")\n+                    .put(\n+                            \"\\\"double: two singles''\\\"\",\n+                            \"'double: two singles'''''\")\n+                    .build();\n+\n+    /** Prepare all combinations of {@code n} of the given columns. */\n+    private static Iterator<Object[]> getNColumns(int n, Map<String, String> columns)\n+    {\n+        Stream<String> hiveNames =\n+                Sets.cartesianProduct(nCopies(n, columns.keySet()))\n+                        .stream()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE1OTk3NQ==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447159975", "bodyText": "No need to wrap here", "author": "electrum", "createdAt": "2020-06-29T18:12:29Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Iterators;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.PeekingIterator;\n+import io.prestosql.spi.PrestoException;\n+\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_TRANSLATION_ERROR;\n+import static java.lang.String.format;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    // Translation methods consume data from the iterator\n+    private final PeekingIterator<Character> input;\n+    private final StringBuilder output = new StringBuilder();\n+\n+    /**\n+     * Translate a HiveQL statement to Presto SQL by fixing quoted identifiers\n+     * and string literals. No other translation is included.\n+     *\n+     * <p>Backquotes are replaced with double quotes, including SQL-style\n+     * escapes (`` becomes ` and \" becomes \"\").\n+     *\n+     * <p>Single and double quotes are replaced with single quotes, with\n+     * minimal processing of escape sequences to ensure that the strings end in\n+     * the right place.\n+     */\n+    public static String translateHiveQuotesToPresto(String hiveStatement)\n+    {\n+        HiveQlToPrestoTranslator translator =\n+                new HiveQlToPrestoTranslator(hiveStatement);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2MDE3OQ==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447160179", "bodyText": "Static import", "author": "electrum", "createdAt": "2020-06-29T18:12:51Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Iterators;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.PeekingIterator;\n+import io.prestosql.spi.PrestoException;\n+\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_TRANSLATION_ERROR;\n+import static java.lang.String.format;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    // Translation methods consume data from the iterator\n+    private final PeekingIterator<Character> input;\n+    private final StringBuilder output = new StringBuilder();\n+\n+    /**\n+     * Translate a HiveQL statement to Presto SQL by fixing quoted identifiers\n+     * and string literals. No other translation is included.\n+     *\n+     * <p>Backquotes are replaced with double quotes, including SQL-style\n+     * escapes (`` becomes ` and \" becomes \"\").\n+     *\n+     * <p>Single and double quotes are replaced with single quotes, with\n+     * minimal processing of escape sequences to ensure that the strings end in\n+     * the right place.\n+     */\n+    public static String translateHiveQuotesToPresto(String hiveStatement)\n+    {\n+        HiveQlToPrestoTranslator translator =\n+                new HiveQlToPrestoTranslator(hiveStatement);\n+        return translator.translateQuotedLiterals();\n+    }\n+\n+    private HiveQlToPrestoTranslator(String hiveQl)\n+    {\n+        input = Iterators.peekingIterator(Lists.charactersOf(hiveQl).iterator());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2MDY2Ng==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447160666", "bodyText": "\"else\" is redundant here since the above \"if\" returns", "author": "electrum", "createdAt": "2020-06-29T18:13:49Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Iterators;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.PeekingIterator;\n+import io.prestosql.spi.PrestoException;\n+\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_TRANSLATION_ERROR;\n+import static java.lang.String.format;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    // Translation methods consume data from the iterator\n+    private final PeekingIterator<Character> input;\n+    private final StringBuilder output = new StringBuilder();\n+\n+    /**\n+     * Translate a HiveQL statement to Presto SQL by fixing quoted identifiers\n+     * and string literals. No other translation is included.\n+     *\n+     * <p>Backquotes are replaced with double quotes, including SQL-style\n+     * escapes (`` becomes ` and \" becomes \"\").\n+     *\n+     * <p>Single and double quotes are replaced with single quotes, with\n+     * minimal processing of escape sequences to ensure that the strings end in\n+     * the right place.\n+     */\n+    public static String translateHiveQuotesToPresto(String hiveStatement)\n+    {\n+        HiveQlToPrestoTranslator translator =\n+                new HiveQlToPrestoTranslator(hiveStatement);\n+        return translator.translateQuotedLiterals();\n+    }\n+\n+    private HiveQlToPrestoTranslator(String hiveQl)\n+    {\n+        input = Iterators.peekingIterator(Lists.charactersOf(hiveQl).iterator());\n+    }\n+\n+    private String translateQuotedLiterals()\n+    {\n+        // Consume input, passing control to other translation methods when\n+        // their delimiters are encountered.\n+        while (input.hasNext()) {\n+            char c = input.next();\n+            switch (c) {\n+                case '\"':\n+                case '\\'':\n+                    translateString(c);\n+                    break;\n+                case '`':\n+                    translateQuotedIdentifier();\n+                    break;\n+                default:\n+                    output.append(c);\n+                    break;\n+            }\n+        }\n+\n+        return output.toString();\n+    }\n+\n+    private void translateString(char delimiter)\n+    {\n+        output.append(\"'\");\n+        while (input.hasNext()) {\n+            char c = input.next();\n+\n+            // The possible outcomes in a string are (assuming \"-quoting):\n+            // - find delimiter and end the string\n+            // - find backslash and treat following character as non-delimiter\n+            // - replace ' with ''\n+            // - leave any other character as-is\n+            if (c == delimiter) {\n+                output.append(\"'\");\n+                return;\n+            }\n+            else if (c == '\\\\') {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2Mzk0MA==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447163940", "bodyText": "This seems wrong. We should fail if there are escape sequences if we're not going to handle them. Otherwise, we are returning a known invalid result.", "author": "electrum", "createdAt": "2020-06-29T18:20:01Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Iterators;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.PeekingIterator;\n+import io.prestosql.spi.PrestoException;\n+\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_TRANSLATION_ERROR;\n+import static java.lang.String.format;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    // Translation methods consume data from the iterator\n+    private final PeekingIterator<Character> input;\n+    private final StringBuilder output = new StringBuilder();\n+\n+    /**\n+     * Translate a HiveQL statement to Presto SQL by fixing quoted identifiers\n+     * and string literals. No other translation is included.\n+     *\n+     * <p>Backquotes are replaced with double quotes, including SQL-style\n+     * escapes (`` becomes ` and \" becomes \"\").\n+     *\n+     * <p>Single and double quotes are replaced with single quotes, with\n+     * minimal processing of escape sequences to ensure that the strings end in\n+     * the right place.\n+     */\n+    public static String translateHiveQuotesToPresto(String hiveStatement)\n+    {\n+        HiveQlToPrestoTranslator translator =\n+                new HiveQlToPrestoTranslator(hiveStatement);\n+        return translator.translateQuotedLiterals();\n+    }\n+\n+    private HiveQlToPrestoTranslator(String hiveQl)\n+    {\n+        input = Iterators.peekingIterator(Lists.charactersOf(hiveQl).iterator());\n+    }\n+\n+    private String translateQuotedLiterals()\n+    {\n+        // Consume input, passing control to other translation methods when\n+        // their delimiters are encountered.\n+        while (input.hasNext()) {\n+            char c = input.next();\n+            switch (c) {\n+                case '\"':\n+                case '\\'':\n+                    translateString(c);\n+                    break;\n+                case '`':\n+                    translateQuotedIdentifier();\n+                    break;\n+                default:\n+                    output.append(c);\n+                    break;\n+            }\n+        }\n+\n+        return output.toString();\n+    }\n+\n+    private void translateString(char delimiter)\n+    {\n+        output.append(\"'\");\n+        while (input.hasNext()) {\n+            char c = input.next();\n+\n+            // The possible outcomes in a string are (assuming \"-quoting):\n+            // - find delimiter and end the string\n+            // - find backslash and treat following character as non-delimiter\n+            // - replace ' with ''\n+            // - leave any other character as-is\n+            if (c == delimiter) {\n+                output.append(\"'\");\n+                return;\n+            }\n+            else if (c == '\\\\') {\n+                if (!input.hasNext()) {\n+                    break; // skip to end-of-input error\n+                }\n+                // Don't handle escape sequences, just drop the backslash.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxMzM2Mg==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447213362", "bodyText": "That's a good idea. I originally tried to figure out what escape sequences Hive supports, but eventually decided against it and ended up leaving the behavior the same as it was before.\nI could pretty easily cover the common cases if we want, or I suspect Hive uses ...hive.ql.parse.BaseSemanticAnalyzer.unescapeSQLString or something similar so I could try using that (I'd basically just search for the end of the string, pass the whole thing to that function, then escape only single quotes from that output).", "author": "jirassimok", "createdAt": "2020-06-29T19:49:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2Mzk0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMzQyNA==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r447703424", "bodyText": "The first new commit rejects all escape sequences, and the second uses the function I mentioned above to translate all of them. I can squash them or drop the last one depending on what we want to do.", "author": "jirassimok", "createdAt": "2020-06-30T13:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2Mzk0MA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxNzEyOQ==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r448517129", "bodyText": "Move this to be with the other output append, so that it's easy to see the quotes are matching.", "author": "electrum", "createdAt": "2020-07-01T17:36:45Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.PeekingIterator;\n+import io.prestosql.spi.PrestoException;\n+\n+import static com.google.common.collect.Iterators.peekingIterator;\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_VIEW_TRANSLATION_ERROR;\n+import static java.lang.String.format;\n+import static org.apache.hadoop.hive.ql.parse.BaseSemanticAnalyzer.unescapeSQLString;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    // Translation methods consume data from the iterator\n+    private final PeekingIterator<Character> input;\n+    private final StringBuilder output = new StringBuilder();\n+\n+    /**\n+     * Translate a HiveQL statement to Presto SQL by fixing quoted identifiers\n+     * and string literals. No other translation is performed.\n+     *\n+     * <p>Backquotes are replaced with double quotes, including SQL-style\n+     * escapes (`` becomes ` and \" becomes \"\").\n+     *\n+     * <p>Single and double quotes are replaced with single quotes, with\n+     * minimal processing of escape sequences to ensure that the strings end in\n+     * the right place.\n+     */\n+    public static String translateHiveViewToPresto(String hiveStatement)\n+    {\n+        HiveQlToPrestoTranslator translator = new HiveQlToPrestoTranslator(hiveStatement);\n+        return translator.translateQuotedLiterals();\n+    }\n+\n+    private HiveQlToPrestoTranslator(String hiveQl)\n+    {\n+        input = peekingIterator(Lists.charactersOf(hiveQl).iterator());\n+    }\n+\n+    private String translateQuotedLiterals()\n+    {\n+        // Consume input, passing control to other translation methods when\n+        // their delimiters are encountered.\n+        while (input.hasNext()) {\n+            char c = input.next();\n+            switch (c) {\n+                case '\"':\n+                case '\\'':\n+                    translateString(c);\n+                    break;\n+                case '`':\n+                    translateQuotedIdentifier();\n+                    break;\n+                default:\n+                    output.append(c);\n+                    break;\n+            }\n+        }\n+\n+        return output.toString();\n+    }\n+\n+    private void translateString(char delimiter)\n+    {\n+        output.append(\"'\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUxODI3MQ==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r448518271", "bodyText": "No need for format for a simple concatenation\nreturn new PrestoException(HIVE_VIEW_TRANSLATION_ERROR, \"Error translating Hive view to Presto: \" + message);", "author": "electrum", "createdAt": "2020-07-01T17:38:56Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.PeekingIterator;\n+import io.prestosql.spi.PrestoException;\n+\n+import static com.google.common.collect.Iterators.peekingIterator;\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_VIEW_TRANSLATION_ERROR;\n+import static java.lang.String.format;\n+import static org.apache.hadoop.hive.ql.parse.BaseSemanticAnalyzer.unescapeSQLString;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    // Translation methods consume data from the iterator\n+    private final PeekingIterator<Character> input;\n+    private final StringBuilder output = new StringBuilder();\n+\n+    /**\n+     * Translate a HiveQL statement to Presto SQL by fixing quoted identifiers\n+     * and string literals. No other translation is performed.\n+     *\n+     * <p>Backquotes are replaced with double quotes, including SQL-style\n+     * escapes (`` becomes ` and \" becomes \"\").\n+     *\n+     * <p>Single and double quotes are replaced with single quotes, with\n+     * minimal processing of escape sequences to ensure that the strings end in\n+     * the right place.\n+     */\n+    public static String translateHiveViewToPresto(String hiveStatement)\n+    {\n+        HiveQlToPrestoTranslator translator = new HiveQlToPrestoTranslator(hiveStatement);\n+        return translator.translateQuotedLiterals();\n+    }\n+\n+    private HiveQlToPrestoTranslator(String hiveQl)\n+    {\n+        input = peekingIterator(Lists.charactersOf(hiveQl).iterator());\n+    }\n+\n+    private String translateQuotedLiterals()\n+    {\n+        // Consume input, passing control to other translation methods when\n+        // their delimiters are encountered.\n+        while (input.hasNext()) {\n+            char c = input.next();\n+            switch (c) {\n+                case '\"':\n+                case '\\'':\n+                    translateString(c);\n+                    break;\n+                case '`':\n+                    translateQuotedIdentifier();\n+                    break;\n+                default:\n+                    output.append(c);\n+                    break;\n+            }\n+        }\n+\n+        return output.toString();\n+    }\n+\n+    private void translateString(char delimiter)\n+    {\n+        output.append(\"'\");\n+        // Build a copy of the string to pass to Hive's string unescaper\n+        StringBuilder string = new StringBuilder(String.valueOf(delimiter));\n+        while (input.hasNext()) {\n+            char c = input.next();\n+\n+            if (c == delimiter) {\n+                string.append(delimiter);\n+                String unescaped = unescapeSQLString(string.toString());\n+                output.append(unescaped.replace(\"'\", \"''\"));\n+                output.append(\"'\");\n+                return;\n+            }\n+\n+            string.append(c);\n+\n+            if (c == '\\\\') {\n+                if (!input.hasNext()) {\n+                    break; // skip to end-of-input error\n+                }\n+                string.append(input.next());\n+            }\n+        }\n+        throw hiveViewParseError(\"unexpected end of input in string\");\n+    }\n+\n+    private void translateQuotedIdentifier()\n+    {\n+        output.append('\"');\n+        while (input.hasNext()) {\n+            char c = input.next();\n+\n+            // The possible outcomes in an identifier are:\n+            // - replace \" with \"\"\n+            // - leave most characters as-is\n+            // - replace `` with `\n+            // - replace ` with \" and end the identifier\n+            if (c == '\"') {\n+                output.append(\"\\\"\\\"\");\n+            }\n+            else if (c == '`' && input.hasNext() && input.peek() == '`') {\n+                output.append('`');\n+                input.next();\n+            }\n+            else if (c == '`') { // end of identifier\n+                output.append('\"');\n+                return;\n+            }\n+            else {\n+                output.append(c);\n+            }\n+        }\n+\n+        throw hiveViewParseError(\"unexpected end of input in identifier\");\n+    }\n+\n+    private static PrestoException hiveViewParseError(String message)\n+    {\n+        return new PrestoException(HIVE_VIEW_TRANSLATION_ERROR,\n+                format(\"Error translating Hive view to Presto: %s\", message));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMDYxMA==", "url": "https://github.com/trinodb/trino/pull/4258#discussion_r448520610", "bodyText": "Move these comments inline\nif (c == '\"') {\n    // replace \" with \"\"\n}\nelse if (...) {\n    // replace `` with `\n}\nelse if (...) {\n    // end of identifier: replace ` with \" \n}", "author": "electrum", "createdAt": "2020-07-01T17:43:25Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveQlToPrestoTranslator.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.PeekingIterator;\n+import io.prestosql.spi.PrestoException;\n+\n+import static com.google.common.collect.Iterators.peekingIterator;\n+import static io.prestosql.plugin.hive.HiveErrorCode.HIVE_VIEW_TRANSLATION_ERROR;\n+import static java.lang.String.format;\n+import static org.apache.hadoop.hive.ql.parse.BaseSemanticAnalyzer.unescapeSQLString;\n+\n+/**\n+ * Translate statements in Hive QL to Presto SQL.\n+ *\n+ * Only translation of quoted literals is currently included.\n+ */\n+public final class HiveQlToPrestoTranslator\n+{\n+    // Translation methods consume data from the iterator\n+    private final PeekingIterator<Character> input;\n+    private final StringBuilder output = new StringBuilder();\n+\n+    /**\n+     * Translate a HiveQL statement to Presto SQL by fixing quoted identifiers\n+     * and string literals. No other translation is performed.\n+     *\n+     * <p>Backquotes are replaced with double quotes, including SQL-style\n+     * escapes (`` becomes ` and \" becomes \"\").\n+     *\n+     * <p>Single and double quotes are replaced with single quotes, with\n+     * minimal processing of escape sequences to ensure that the strings end in\n+     * the right place.\n+     */\n+    public static String translateHiveViewToPresto(String hiveStatement)\n+    {\n+        HiveQlToPrestoTranslator translator = new HiveQlToPrestoTranslator(hiveStatement);\n+        return translator.translateQuotedLiterals();\n+    }\n+\n+    private HiveQlToPrestoTranslator(String hiveQl)\n+    {\n+        input = peekingIterator(Lists.charactersOf(hiveQl).iterator());\n+    }\n+\n+    private String translateQuotedLiterals()\n+    {\n+        // Consume input, passing control to other translation methods when\n+        // their delimiters are encountered.\n+        while (input.hasNext()) {\n+            char c = input.next();\n+            switch (c) {\n+                case '\"':\n+                case '\\'':\n+                    translateString(c);\n+                    break;\n+                case '`':\n+                    translateQuotedIdentifier();\n+                    break;\n+                default:\n+                    output.append(c);\n+                    break;\n+            }\n+        }\n+\n+        return output.toString();\n+    }\n+\n+    private void translateString(char delimiter)\n+    {\n+        output.append(\"'\");\n+        // Build a copy of the string to pass to Hive's string unescaper\n+        StringBuilder string = new StringBuilder(String.valueOf(delimiter));\n+        while (input.hasNext()) {\n+            char c = input.next();\n+\n+            if (c == delimiter) {\n+                string.append(delimiter);\n+                String unescaped = unescapeSQLString(string.toString());\n+                output.append(unescaped.replace(\"'\", \"''\"));\n+                output.append(\"'\");\n+                return;\n+            }\n+\n+            string.append(c);\n+\n+            if (c == '\\\\') {\n+                if (!input.hasNext()) {\n+                    break; // skip to end-of-input error\n+                }\n+                string.append(input.next());\n+            }\n+        }\n+        throw hiveViewParseError(\"unexpected end of input in string\");\n+    }\n+\n+    private void translateQuotedIdentifier()\n+    {\n+        output.append('\"');\n+        while (input.hasNext()) {\n+            char c = input.next();\n+\n+            // The possible outcomes in an identifier are:", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "4cb7387b129082dafd5b68ded32ed6a7a4c9bef8", "url": "https://github.com/trinodb/trino/commit/4cb7387b129082dafd5b68ded32ed6a7a4c9bef8", "message": "Replace HiveQlTranslation with a non-regex-based parser\n\nSquashed:\n- Use Hive's string unescaping to translate escape sequences in strings", "committedDate": "2020-07-01T23:26:37Z", "type": "commit"}, {"oid": "4cb7387b129082dafd5b68ded32ed6a7a4c9bef8", "url": "https://github.com/trinodb/trino/commit/4cb7387b129082dafd5b68ded32ed6a7a4c9bef8", "message": "Replace HiveQlTranslation with a non-regex-based parser\n\nSquashed:\n- Use Hive's string unescaping to translate escape sequences in strings", "committedDate": "2020-07-01T23:26:37Z", "type": "forcePushed"}]}