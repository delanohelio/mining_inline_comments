{"pr_number": 6345, "pr_title": "Add SQL literals-based type mapping tests", "pr_createdAt": "2020-12-15T12:29:12Z", "pr_url": "https://github.com/trinodb/trino/pull/6345", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0OTE1MA==", "url": "https://github.com/trinodb/trino/pull/6345#discussion_r543349150", "bodyText": "The previous method name was more clear about what it's doing. This one is more generic and also conflicts with String.format.\nIf you do want to rename I'd prefer something like formatAsLiteral.", "author": "hashhar", "createdAt": "2020-12-15T13:40:51Z", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAsSelectDataSetup.java", "diffHunk": "@@ -40,17 +39,20 @@ public CreateAsSelectDataSetup(SqlExecutor sqlExecutor, String tableNamePrefix)\n     public TestTable setupTestTable(List<ColumnSetup> inputs)\n     {\n         List<String> columnValues = inputs.stream()\n-                .map(this::literalInExplicitCast)\n+                .map(this::format)\n                 .collect(toList());\n         Stream<String> columnValuesWithNames = range(0, columnValues.size())\n-                .mapToObj(i -> format(\"%s col_%d\", columnValues.get(i), i));\n+                .mapToObj(i -> String.format(\"%s col_%d\", columnValues.get(i), i));\n         String selectBody = Joiner.on(\",\\n\").join(columnValuesWithNames.iterator());\n         return new TestTable(sqlExecutor, tableNamePrefix, \"AS SELECT \" + selectBody);\n     }\n \n-    private String literalInExplicitCast(ColumnSetup input)\n+    private String format(ColumnSetup input)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyOTEwOQ==", "url": "https://github.com/trinodb/trino/pull/6345#discussion_r543729109", "bodyText": "I renamed because the old name is no longer applicable after the method became more flexible.", "author": "findepi", "createdAt": "2020-12-15T22:20:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0OTE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1MTk3Ng==", "url": "https://github.com/trinodb/trino/pull/6345#discussion_r543351976", "bodyText": "Non-standard inequality for creating empty tables but I like how literal it is.", "author": "hashhar", "createdAt": "2020-12-15T13:44:42Z", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAndInsertDataSetup.java", "diffHunk": "@@ -71,16 +71,26 @@ private void insertRows(TestTable testTable, List<ColumnSetup> inputs)\n \n     private TestTable createTestTable(List<ColumnSetup> inputs)\n     {\n-        return new TestTable(sqlExecutor, tableNamePrefix, \"(\" + columnDefinitions(inputs) + \")\");\n+        return new TestTable(sqlExecutor, tableNamePrefix, tableDefinition(inputs));\n     }\n \n-    private String columnDefinitions(List<ColumnSetup> inputs)\n+    private String tableDefinition(List<ColumnSetup> inputs)\n     {\n-        List<String> columnTypeDefinitions = inputs.stream()\n-                .map(input -> input.getDeclaredType().orElseThrow(() -> new IllegalArgumentException(\"declared type not set\")))\n-                .collect(toList());\n-        Stream<String> columnDefinitions = range(0, columnTypeDefinitions.size())\n-                .mapToObj(i -> format(\"col_%d %s\", i, columnTypeDefinitions.get(i)));\n-        return Joiner.on(\",\\n\").join(columnDefinitions.iterator());\n+        if (inputs.stream().allMatch(input -> input.getDeclaredType().isPresent())) {\n+            return IntStream.range(0, inputs.size())\n+                    .mapToObj(column -> format(\"col_%d %s\", column, inputs.get(column).getDeclaredType().orElseThrow()))\n+                    .collect(joining(\",\\n\", \"(\\n\", \")\"));\n+        }\n+\n+        return IntStream.range(0, inputs.size())\n+                .mapToObj(column -> {\n+                    ColumnSetup input = inputs.get(column);\n+                    if (input.getDeclaredType().isEmpty()) {\n+                        return format(\"%s AS col_%d\", input.getInputLiteral(), column);\n+                    }\n+\n+                    return format(\"CAST(%s AS %s) AS col_%d\", input.getInputLiteral(), input.getDeclaredType().get(), column);\n+                })\n+                .collect(joining(\",\\n\", \"AS\\nSELECT\\n\", \"\\nWHERE 'with no' = 'data'\"));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyOTY2Mw==", "url": "https://github.com/trinodb/trino/pull/6345#discussion_r543729663", "bodyText": "Alas! I used 1=0 too many times. Worn off.\nAlso, using something more unique allows to trace the source of the condition easily.", "author": "findepi", "createdAt": "2020-12-15T22:21:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1MTk3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NjIzMQ==", "url": "https://github.com/trinodb/trino/pull/6345#discussion_r544456231", "bodyText": "orElseThrow no longer needed below.", "author": "losipiuk", "createdAt": "2020-12-16T16:48:17Z", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAsSelectDataSetup.java", "diffHunk": "@@ -40,17 +39,20 @@ public CreateAsSelectDataSetup(SqlExecutor sqlExecutor, String tableNamePrefix)\n     public TestTable setupTestTable(List<ColumnSetup> inputs)\n     {\n         List<String> columnValues = inputs.stream()\n-                .map(this::literalInExplicitCast)\n+                .map(this::format)\n                 .collect(toList());\n         Stream<String> columnValuesWithNames = range(0, columnValues.size())\n-                .mapToObj(i -> format(\"%s col_%d\", columnValues.get(i), i));\n+                .mapToObj(i -> String.format(\"%s col_%d\", columnValues.get(i), i));\n         String selectBody = Joiner.on(\",\\n\").join(columnValuesWithNames.iterator());\n         return new TestTable(sqlExecutor, tableNamePrefix, \"AS SELECT \" + selectBody);\n     }\n \n-    private String literalInExplicitCast(ColumnSetup input)\n+    private String format(ColumnSetup input)\n     {\n-        return format(\n+        if (input.getDeclaredType().isEmpty()) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1OTYwNg==", "url": "https://github.com/trinodb/trino/pull/6345#discussion_r544459606", "bodyText": "Why not just leave this one?", "author": "losipiuk", "createdAt": "2020-12-16T16:52:32Z", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/CreateAndInsertDataSetup.java", "diffHunk": "@@ -71,16 +71,26 @@ private void insertRows(TestTable testTable, List<ColumnSetup> inputs)\n \n     private TestTable createTestTable(List<ColumnSetup> inputs)\n     {\n-        return new TestTable(sqlExecutor, tableNamePrefix, \"(\" + columnDefinitions(inputs) + \")\");\n+        return new TestTable(sqlExecutor, tableNamePrefix, tableDefinition(inputs));\n     }\n \n-    private String columnDefinitions(List<ColumnSetup> inputs)\n+    private String tableDefinition(List<ColumnSetup> inputs)\n     {\n-        List<String> columnTypeDefinitions = inputs.stream()\n-                .map(input -> input.getDeclaredType().orElseThrow(() -> new IllegalArgumentException(\"declared type not set\")))\n-                .collect(toList());\n-        Stream<String> columnDefinitions = range(0, columnTypeDefinitions.size())\n-                .mapToObj(i -> format(\"col_%d %s\", i, columnTypeDefinitions.get(i)));\n-        return Joiner.on(\",\\n\").join(columnDefinitions.iterator());\n+        if (inputs.stream().allMatch(input -> input.getDeclaredType().isPresent())) {\n+            return IntStream.range(0, inputs.size())\n+                    .mapToObj(column -> format(\"col_%d %s\", column, inputs.get(column).getDeclaredType().orElseThrow()))\n+                    .collect(joining(\",\\n\", \"(\\n\", \")\"));\n+        }\n+\n+        return IntStream.range(0, inputs.size())", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1dd234d402c5c178d73aea681faaf69a0ff5bad0", "url": "https://github.com/trinodb/trino/commit/1dd234d402c5c178d73aea681faaf69a0ff5bad0", "message": "Separate data setup from expected results with an interface\n\nAdd `ColumnSetup` interface to abstract data setup from\n`io.prestosql.testing.datatype.DataTypeTest.Input`.", "committedDate": "2020-12-19T00:51:10Z", "type": "commit"}, {"oid": "4da55458875634247865e06454c2a3bb6bafaad8", "url": "https://github.com/trinodb/trino/commit/4da55458875634247865e06454c2a3bb6bafaad8", "message": "Support implicit types in CreateAsSelectDataSetup", "committedDate": "2020-12-19T00:51:10Z", "type": "commit"}, {"oid": "68ff6520dba209241d02033603b8a939d51488d0", "url": "https://github.com/trinodb/trino/commit/68ff6520dba209241d02033603b8a939d51488d0", "message": "Support implicit types in CreateAndInsertDataSetup", "committedDate": "2020-12-19T00:51:10Z", "type": "commit"}, {"oid": "1d814b524dc27df9d85f08affd431b34a9d56361", "url": "https://github.com/trinodb/trino/commit/1d814b524dc27df9d85f08affd431b34a9d56361", "message": "Add QueryAssert #hasOutputTypes and #outputHasType", "committedDate": "2020-12-19T00:51:10Z", "type": "commit"}, {"oid": "b37968455969ad15458d0e3c1f59adc21fafbf5e", "url": "https://github.com/trinodb/trino/commit/b37968455969ad15458d0e3c1f59adc21fafbf5e", "message": "Add SQL literals-based type mapping tests\n\nThis generalizes the approach already used in some existing tests, e.g.\n`TestPostgreSqlTypeMapping.testTimeCoercion`,\n`TestPostgreSqlTypeMapping.testTimestampCoercion`.\n\nIt has some advantages over `testCreateTableAsAndInsertConsistency` used\nthere:\n\n- `SqlDataTypeTest` is meant to be reused, not copied\n- `SqlDataTypeTest` verifies predicate pushdown correctness (something\n  that `DataTypeTest` does but `testCreateTableAsAndInsertConsistency`\n  did not do)\n- `SqlDataTypeTest` supports explicit result type verifications\n- `SqlDataTypeTest` is faster, as saves round trip times, by creating a\n  test table once, and verifying results in bulk\n\nIt has also advantages over existing `DataTypeTest`:\n\n- `SqlDataTypeTest` is based in SQL literals, so supports anything that\n  can be expressed in SQL, including date/time types with picoseconds\n- `SqlDataTypeTest` avoids coupling inserted and expected values, making\n  unifications like `DataType#toPrestoQueryResult` redundant\n- oh, and `SqlDataTypeTest` makes all `DataType` structures redundant.\n  Tests are simple again.", "committedDate": "2020-12-19T00:51:11Z", "type": "commit"}, {"oid": "3b935b60a36128a97fbe8ddfc21fc4d82de1679e", "url": "https://github.com/trinodb/trino/commit/3b935b60a36128a97fbe8ddfc21fc4d82de1679e", "message": "Use SqlDataTypeTest in TestPostgreSqlTypeMapping time/timestamp coercions tests\n\nUse `SqlDataTypeTest` for `TestPostgreSqlTypeMapping.testTimeCoercion`\nand `TestPostgreSqlTypeMapping.testTimestampCoercion`.", "committedDate": "2020-12-19T00:51:11Z", "type": "commit"}, {"oid": "58d7bbb400faf5bef1ac5809d2896c83dc035815", "url": "https://github.com/trinodb/trino/commit/58d7bbb400faf5bef1ac5809d2896c83dc035815", "message": "Use SqlDataTypeTest for TestPostgreSqlTypeMapping.testBasicTypes", "committedDate": "2020-12-19T00:51:11Z", "type": "commit"}, {"oid": "6ed600615d879349a18f61573eddf89d39736d3a", "url": "https://github.com/trinodb/trino/commit/6ed600615d879349a18f61573eddf89d39736d3a", "message": "Join stream elements fluently\n\nMigrate from `Joiner` to `collect(joining())`.", "committedDate": "2020-12-19T00:51:11Z", "type": "commit"}, {"oid": "6ed600615d879349a18f61573eddf89d39736d3a", "url": "https://github.com/trinodb/trino/commit/6ed600615d879349a18f61573eddf89d39736d3a", "message": "Join stream elements fluently\n\nMigrate from `Joiner` to `collect(joining())`.", "committedDate": "2020-12-19T00:51:11Z", "type": "forcePushed"}]}