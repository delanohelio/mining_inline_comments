{"pr_number": 3910, "pr_title": "Run code formatter", "pr_createdAt": "2020-06-03T00:12:18Z", "pr_url": "https://github.com/trinodb/trino/pull/3910", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MTgwOQ==", "url": "https://github.com/trinodb/trino/pull/3910#discussion_r434241809", "bodyText": "First argument should go on the next line", "author": "martint", "createdAt": "2020-06-03T00:14:42Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/JoniRegexpFunctions.java", "diffHunk": "@@ -333,8 +333,8 @@ public static long regexpPosition(@SqlType(\"varchar(x)\") Slice source, @SqlType(\n     @LiteralParameters(\"x\")\n     @SqlType(StandardTypes.INTEGER)\n     public static long regexpPosition(@SqlType(\"varchar(x)\") Slice source,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2MTE5OQ==", "url": "https://github.com/trinodb/trino/pull/3910#discussion_r434261199", "bodyText": "This is not something the code formatter changes. There are many instances of this to fix across the code base and would need to be done separately (not sure how to automate it). But I can fix these by hand as part of this PR if you want.", "author": "electrum", "createdAt": "2020-06-03T01:32:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MTgwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MTkwNg==", "url": "https://github.com/trinodb/trino/pull/3910#discussion_r434241906", "bodyText": "First argument should go on the next line", "author": "martint", "createdAt": "2020-06-03T00:15:01Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/JoniRegexpFunctions.java", "diffHunk": "@@ -344,9 +344,9 @@ public static long regexpPosition(@SqlType(\"varchar(x)\") Slice source,\n     @LiteralParameters(\"x\")\n     @SqlType(StandardTypes.INTEGER)\n     public static long regexpPosition(@SqlType(\"varchar(x)\") Slice source,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MjAwNw==", "url": "https://github.com/trinodb/trino/pull/3910#discussion_r434242007", "bodyText": "First argument should go on the next line", "author": "martint", "createdAt": "2020-06-03T00:15:24Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/Re2JRegexpFunctions.java", "diffHunk": "@@ -129,8 +129,8 @@ public static long regexpPosition(@SqlType(\"varchar(x)\") Slice source, @SqlType(\n     @LiteralParameters(\"x\")\n     @SqlType(StandardTypes.INTEGER)\n     public static long regexpPosition(@SqlType(\"varchar(x)\") Slice source,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MjAyMw==", "url": "https://github.com/trinodb/trino/pull/3910#discussion_r434242023", "bodyText": "First argument should go on the next line", "author": "martint", "createdAt": "2020-06-03T00:15:30Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/Re2JRegexpFunctions.java", "diffHunk": "@@ -140,9 +140,9 @@ public static long regexpPosition(@SqlType(\"varchar(x)\") Slice source,\n     @LiteralParameters(\"x\")\n     @SqlType(StandardTypes.INTEGER)\n     public static long regexpPosition(@SqlType(\"varchar(x)\") Slice source,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MjIxNQ==", "url": "https://github.com/trinodb/trino/pull/3910#discussion_r434242215", "bodyText": "This is less readable than before", "author": "martint", "createdAt": "2020-06-03T00:16:11Z", "path": "presto-main/src/main/java/io/prestosql/sql/gen/JoinCompiler.java", "diffHunk": "@@ -684,10 +684,10 @@ private void generatePositionNotDistinctFromRowWithPageMethod(\n             // At that point, we'll be able to fully deprecate Type.equalTo (and friends) and remove this hack.\n             if (type.getJavaType().equals(Slice.class) && (\n                     type instanceof CharType ||\n-                    type instanceof JsonType ||\n-                    type instanceof DecimalType ||\n-                    type instanceof VarbinaryType ||\n-                    type instanceof VarcharType)) {\n+                            type instanceof JsonType ||\n+                            type instanceof DecimalType ||\n+                            type instanceof VarbinaryType ||\n+                            type instanceof VarcharType)) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI3MDc3Mg==", "url": "https://github.com/trinodb/trino/pull/3910#discussion_r434270772", "bodyText": "I agree, but there doesn't seem be a good way to make this work with the formatter. We could make it something like\n//noinspection PointlessBooleanExpression\nif (type.getJavaType().equals(Slice.class) && (false ||\nBut that seems worse. Do you have a suggestion, or is this simply a comment that you wished the code formatter worked better here?", "author": "electrum", "createdAt": "2020-06-03T02:14:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MjIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI3MzQyNw==", "url": "https://github.com/trinodb/trino/pull/3910#discussion_r434273427", "bodyText": "You could also consider changing the formatter setting Wrapping and Braces > Binary Expressions > Align when multiline\nBut this will result in things like\nreturn this.kind == other.kind &&\n       Objects.equals(this.value, other.value);\nif (base.equalsIgnoreCase(StandardTypes.VARCHAR) &&\n    (parameters.size() == 1) &&\n    parameters.get(0).isLongLiteral() &&\n    parameters.get(0).getLongLiteral() == VarcharType.UNBOUNDED_LENGTH) {\nWe'd need to see if Checkstyle would work with that type of formatting rule.", "author": "electrum", "createdAt": "2020-06-03T02:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MjIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4NzE2NA==", "url": "https://github.com/trinodb/trino/pull/3910#discussion_r434287164", "bodyText": "I don't have a suggestion, but I was hoping there might be a way to tweak the formatter to do something better. Oh well. Let's leave it as you have it now.", "author": "martint", "createdAt": "2020-06-03T03:25:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MjIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MjMzMQ==", "url": "https://github.com/trinodb/trino/pull/3910#discussion_r434242331", "bodyText": "This is less readable than before", "author": "martint", "createdAt": "2020-06-03T00:16:39Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PushDownNegationsExpressionRewriter.java", "diffHunk": "@@ -81,9 +81,9 @@ public Expression rewriteNotExpression(NotExpression node, Void context, Express\n                 checkState(leftType != null && rightType != null, \"missing type for expression\");\n                 if ((typeHasNaN(leftType) || typeHasNaN(rightType)) && (\n                         operator == GREATER_THAN_OR_EQUAL ||\n-                        operator == GREATER_THAN ||\n-                        operator == LESS_THAN_OR_EQUAL ||\n-                        operator == LESS_THAN)) {\n+                                operator == GREATER_THAN ||\n+                                operator == LESS_THAN_OR_EQUAL ||\n+                                operator == LESS_THAN)) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI3MTkzMg==", "url": "https://github.com/trinodb/trino/pull/3910#discussion_r434271932", "bodyText": "Same as above. Another option is to do\nif ((typeHasNaN(leftType) || typeHasNaN(rightType))\n        && (operator == GREATER_THAN_OR_EQUAL ||\n        operator == GREATER_THAN ||\n        operator == LESS_THAN_OR_EQUAL ||\n        operator == LESS_THAN)) {\nOr this could use\nif ((typeHasNaN(leftType) || typeHasNaN(rightType)) && EnumSet.of(\n        GREATER_THAN_OR_EQUAL,\n        GREATER_THAN,\n        LESS_THAN_OR_EQUAL,\n        LESS_THAN)\n        .contains(operator)) {\nBut those don't look like an improvement.", "author": "electrum", "createdAt": "2020-06-03T02:19:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI0MjMzMQ=="}], "type": "inlineReview"}, {"oid": "e85c0e446fe11a3993e0b388426f3781c8874aee", "url": "https://github.com/trinodb/trino/commit/e85c0e446fe11a3993e0b388426f3781c8874aee", "message": "Run code formatter", "committedDate": "2020-06-03T02:19:51Z", "type": "commit"}, {"oid": "e85c0e446fe11a3993e0b388426f3781c8874aee", "url": "https://github.com/trinodb/trino/commit/e85c0e446fe11a3993e0b388426f3781c8874aee", "message": "Run code formatter", "committedDate": "2020-06-03T02:19:51Z", "type": "forcePushed"}]}