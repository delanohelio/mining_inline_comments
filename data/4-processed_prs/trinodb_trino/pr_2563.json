{"pr_number": 2563, "pr_title": "Add error message for MethodTooLargeException", "pr_createdAt": "2020-01-20T21:44:06Z", "pr_url": "https://github.com/trinodb/trino/pull/2563", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MTE0MQ==", "url": "https://github.com/trinodb/trino/pull/2563#discussion_r368771141", "bodyText": "This can be replaced with getRootCause() from Guava's Throwables", "author": "electrum", "createdAt": "2020-01-21T00:59:11Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -2830,6 +2839,16 @@ private OperatorFactory createHashAggregationOperatorFactory(\n         }\n     }\n \n+    private static Throwable getExceptionRootCause(Throwable throwable)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MTQ5MA==", "url": "https://github.com/trinodb/trino/pull/2563#discussion_r368771490", "bodyText": "We can shorten this a bit by only checking the start of the message. Also, we would prefer to format each of the checks on separate lines for readability\n.hasErrorCode(supplier)\n.hasMessageStartingWith(\"Query exceeded maximum columns or filters\")", "author": "electrum", "createdAt": "2020-01-21T01:01:20Z", "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLocalExecutionPlanner.java", "diffHunk": "@@ -56,6 +56,7 @@ public void testCompilerFailure()\n     private void assertFails(@Language(\"SQL\") String sql, ErrorCodeSupplier supplier)\n     {\n         assertPrestoExceptionThrownBy(() -> runner.execute(sql))\n-                .hasErrorCode(supplier);\n+                .hasErrorCode(supplier).hasMessage(\"Query exceeded maximum columns or filters. \" +", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg0NzMwMw==", "url": "https://github.com/trinodb/trino/pull/2563#discussion_r368847303", "bodyText": "Instead of handing in LocalExecutionPlanner why can't we handle these compilation errors in the corresponding compiler class(ExpressionCompiler and PageFunctionCompiler). We might be able to drill down the exact problem also like whether it might be bcoz of filters or projections.", "author": "Praveen2112", "createdAt": "2020-01-21T07:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MTQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI5MjM4OA==", "url": "https://github.com/trinodb/trino/pull/2563#discussion_r369292388", "bodyText": "Good idea, made that change", "author": "nccanter", "createdAt": "2020-01-21T23:07:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MTQ5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MTYxNg==", "url": "https://github.com/trinodb/trino/pull/2563#discussion_r368771616", "bodyText": "Nit: the second sentence should also say \"columns or filters\" as the user might not need to reduce both", "author": "electrum", "createdAt": "2020-01-21T01:01:56Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1305,6 +1307,13 @@ else if (sourceNode instanceof SampleNode) {\n                     return new PhysicalOperation(operatorFactory, outputMappings, context, source);\n                 }\n             }\n+            catch (PrestoException e) {\n+                if (e.getErrorCode() == COMPILER_ERROR.toErrorCode() && getExceptionRootCause(e) instanceof MethodTooLargeException) {\n+                    throw new PrestoException(COMPILER_ERROR,\n+                        \"Query exceeded maximum columns or filters. Please reduce the number of columns and filters referenced and re-run the query.\", e);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg5MzUzOA==", "url": "https://github.com/trinodb/trino/pull/2563#discussion_r368893538", "bodyText": "@electrum \"method too large\" should be an internal- or user- error?", "author": "findepi", "createdAt": "2020-01-21T09:34:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MTYxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwNzYxNg==", "url": "https://github.com/trinodb/trino/pull/2563#discussion_r369107616", "bodyText": "Let\u2019s leave the classification for now. We don\u2019t have specific limits here and it\u2019s not exactly under user control.", "author": "electrum", "createdAt": "2020-01-21T16:30:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MTYxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MjczMA==", "url": "https://github.com/trinodb/trino/pull/2563#discussion_r368772730", "bodyText": "This comparison should use equals() instead of == since we don't want to rely on the identity of the ErrorCode object. (even though they are singletons today and that is likely to be true in the future, it's not enforced or specified anywhere)\nWe do have some places that use == by calling getCode() on both sides, but that's more verbose and not needed when equals works.", "author": "electrum", "createdAt": "2020-01-21T01:08:31Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -1305,6 +1307,13 @@ else if (sourceNode instanceof SampleNode) {\n                     return new PhysicalOperation(operatorFactory, outputMappings, context, source);\n                 }\n             }\n+            catch (PrestoException e) {\n+                if (e.getErrorCode() == COMPILER_ERROR.toErrorCode() && getExceptionRootCause(e) instanceof MethodTooLargeException) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTExMTQ2OQ==", "url": "https://github.com/trinodb/trino/pull/2563#discussion_r369111469", "bodyText": "Done", "author": "nccanter", "createdAt": "2020-01-21T16:36:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MjczMA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "76e484f55432a4ea44f959a4304f8e0e05855b4e", "url": "https://github.com/trinodb/trino/commit/76e484f55432a4ea44f959a4304f8e0e05855b4e", "message": "Add error message for MethodTooLargeException", "committedDate": "2020-01-21T23:29:51Z", "type": "commit"}, {"oid": "76e484f55432a4ea44f959a4304f8e0e05855b4e", "url": "https://github.com/trinodb/trino/commit/76e484f55432a4ea44f959a4304f8e0e05855b4e", "message": "Add error message for MethodTooLargeException", "committedDate": "2020-01-21T23:29:51Z", "type": "forcePushed"}]}