{"pr_number": 5872, "pr_title": "Add scan physical size stats to query completed event", "pr_createdAt": "2020-11-08T22:02:42Z", "pr_url": "https://github.com/trinodb/trino/pull/5872", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4NTU0Mg==", "url": "https://github.com/trinodb/trino/pull/5872#discussion_r519485542", "bodyText": "nit: grammar typo, remove that in ... parent node that with stats?", "author": "phd3", "createdAt": "2020-11-08T22:23:37Z", "path": "presto-main/src/main/java/io/prestosql/event/QueryMonitor.java", "diffHunk": "@@ -339,6 +371,58 @@ private static QueryIOMetadata getQueryIOMetadata(QueryInfo queryInfo)\n         return new QueryIOMetadata(inputs.build(), output);\n     }\n \n+    private static Multimap<QualifiedObjectName, OperatorStats> extractTableScanOperatorStats(QueryInfo queryInfo)\n+    {\n+        // Note: A plan may scan a table multiple times.\n+        ImmutableMultimap.Builder<QualifiedObjectName, OperatorStats> tableScanOperatorStats = ImmutableMultimap.builder();\n+        getAllStages(queryInfo.getOutputStage())\n+                .forEach(stageInfo -> extractTableScanOperatorStats(stageInfo, tableScanOperatorStats));\n+        return tableScanOperatorStats.build();\n+    }\n+\n+    private static void extractTableScanOperatorStats(StageInfo stageInfo, ImmutableMultimap.Builder<QualifiedObjectName, OperatorStats> tableScanOperatorStats)\n+    {\n+        if (stageInfo.getPlan() == null) {\n+            return;\n+        }\n+\n+        // Note: a plan node may be mapped to multiple operators.  For this code it doesn't matter\n+        // since only the table scan operator has physical stats, but be careful for any other use.\n+        Map<PlanNodeId, Collection<OperatorStats>> allOperatorStats = Multimaps.index(stageInfo.getStageStats().getOperatorSummaries(), OperatorStats::getPlanNodeId).asMap();\n+\n+        // Find the operator stats for each table scanned.  Sometimes a table scan is merged with\n+        // other operators, and in that case, use the stats of the nearest parent node that with stats.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1OTAzNw==", "url": "https://github.com/trinodb/trino/pull/5872#discussion_r519559037", "bodyText": "optional suggestion: the name may sound like the method is trying to get stats for TableScanOperator, which might not be true. May be switching the order can help e.g. extractStatsForTableScan?", "author": "phd3", "createdAt": "2020-11-09T05:23:31Z", "path": "presto-main/src/main/java/io/prestosql/event/QueryMonitor.java", "diffHunk": "@@ -339,6 +371,58 @@ private static QueryIOMetadata getQueryIOMetadata(QueryInfo queryInfo)\n         return new QueryIOMetadata(inputs.build(), output);\n     }\n \n+    private static Multimap<QualifiedObjectName, OperatorStats> extractTableScanOperatorStats(QueryInfo queryInfo)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU2MzMyMQ==", "url": "https://github.com/trinodb/trino/pull/5872#discussion_r519563321", "bodyText": "If two inputs for the same table are added with different columns, then this logic will add the same aggregate value for both the inputs right? Should we add a plan node id to Inputinstead and map the stats here appropriately?", "author": "phd3", "createdAt": "2020-11-09T05:40:30Z", "path": "presto-main/src/main/java/io/prestosql/event/QueryMonitor.java", "diffHunk": "@@ -309,15 +322,34 @@ private QueryContext createQueryContext(SessionRepresentation session, Optional<\n \n     private static QueryIOMetadata getQueryIOMetadata(QueryInfo queryInfo)\n     {\n+        Multimap<QualifiedObjectName, OperatorStats> tableOperatorStats = extractTableScanOperatorStats(queryInfo);\n+\n         ImmutableList.Builder<QueryInputMetadata> inputs = ImmutableList.builder();\n         for (Input input : queryInfo.getInputs()) {\n+            // Note: input table may be scanned multiple times", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU4OTY1MA==", "url": "https://github.com/trinodb/trino/pull/5872#discussion_r522589650", "bodyText": "You are right.  This will more difficult...  I added fragment id and plan node id to Input so we can find the exact node in the exact fragment.", "author": "dain", "createdAt": "2020-11-13T03:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU2MzMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU2MzY4Nw==", "url": "https://github.com/trinodb/trino/pull/5872#discussion_r519563687", "bodyText": "should we also add the same logic for IndexSourceScanNode like in InputExtractor?", "author": "phd3", "createdAt": "2020-11-09T05:42:00Z", "path": "presto-main/src/main/java/io/prestosql/event/QueryMonitor.java", "diffHunk": "@@ -339,6 +371,58 @@ private static QueryIOMetadata getQueryIOMetadata(QueryInfo queryInfo)\n         return new QueryIOMetadata(inputs.build(), output);\n     }\n \n+    private static Multimap<QualifiedObjectName, OperatorStats> extractTableScanOperatorStats(QueryInfo queryInfo)\n+    {\n+        // Note: A plan may scan a table multiple times.\n+        ImmutableMultimap.Builder<QualifiedObjectName, OperatorStats> tableScanOperatorStats = ImmutableMultimap.builder();\n+        getAllStages(queryInfo.getOutputStage())\n+                .forEach(stageInfo -> extractTableScanOperatorStats(stageInfo, tableScanOperatorStats));\n+        return tableScanOperatorStats.build();\n+    }\n+\n+    private static void extractTableScanOperatorStats(StageInfo stageInfo, ImmutableMultimap.Builder<QualifiedObjectName, OperatorStats> tableScanOperatorStats)\n+    {\n+        if (stageInfo.getPlan() == null) {\n+            return;\n+        }\n+\n+        // Note: a plan node may be mapped to multiple operators.  For this code it doesn't matter\n+        // since only the table scan operator has physical stats, but be careful for any other use.\n+        Map<PlanNodeId, Collection<OperatorStats>> allOperatorStats = Multimaps.index(stageInfo.getStageStats().getOperatorSummaries(), OperatorStats::getPlanNodeId).asMap();\n+\n+        // Find the operator stats for each table scanned.  Sometimes a table scan is merged with\n+        // other operators, and in that case, use the stats of the nearest parent node that with stats.\n+        stageInfo.getPlan().getRoot().accept(\n+                new PlanVisitor<Void, Collection<OperatorStats>>()\n+                {\n+                    @Override\n+                    protected Void visitPlan(PlanNode node, Collection<OperatorStats> parentStats)\n+                    {\n+                        for (PlanNode child : node.getSources()) {\n+                            child.accept(this, allOperatorStats.getOrDefault(node.getId(), parentStats));\n+                        }\n+                        return null;\n+                    }\n+\n+                    @Override\n+                    public Void visitTableScan(TableScanNode node, Collection<OperatorStats> parentStats)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNDIzMg==", "url": "https://github.com/trinodb/trino/pull/5872#discussion_r524814232", "bodyText": "nit: rename context parameter", "author": "phd3", "createdAt": "2020-11-17T00:54:26Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/InputExtractor.java", "diffHunk": "@@ -75,37 +79,31 @@ private Input createInput(Session session, TableHandle table, Set<Column> column\n         }\n \n         @Override\n-        public Void visitTableScan(TableScanNode node, Void context)\n+        public Void visitTableScan(TableScanNode node, PlanFragmentId fragmentId)\n         {\n-            TableHandle tableHandle = node.getTable();\n-\n-            Set<Column> columns = new HashSet<>();\n-            for (ColumnHandle columnHandle : node.getAssignments().values()) {\n-                columns.add(createColumn(metadata.getColumnMetadata(session, tableHandle, columnHandle)));\n-            }\n-\n-            inputs.add(createInput(session, tableHandle, columns));\n-\n+            processScan(fragmentId, node.getId(), node.getTable(), node.getAssignments());\n             return null;\n         }\n \n         @Override\n-        public Void visitIndexSource(IndexSourceNode node, Void context)\n+        public Void visitIndexSource(IndexSourceNode node, PlanFragmentId fragmentId)\n         {\n-            TableHandle tableHandle = node.getTableHandle();\n+            processScan(fragmentId, node.getId(), node.getTableHandle(), node.getAssignments());\n+            return null;\n+        }\n \n+        private void processScan(PlanFragmentId fragmentId, PlanNodeId planNodeId, TableHandle tableHandle, Map<Symbol, ColumnHandle> assignments)\n+        {\n             Set<Column> columns = new HashSet<>();\n-            for (ColumnHandle columnHandle : node.getAssignments().values()) {\n+            for (ColumnHandle columnHandle : assignments.values()) {\n                 columns.add(createColumn(metadata.getColumnMetadata(session, tableHandle, columnHandle)));\n             }\n \n-            inputs.add(createInput(session, tableHandle, columns));\n-\n-            return null;\n+            inputs.add(createInput(session, tableHandle, columns, fragmentId, planNodeId));\n         }\n \n         @Override\n-        protected Void visitPlan(PlanNode node, Void context)\n+        protected Void visitPlan(PlanNode node, PlanFragmentId context)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyMTY3NA==", "url": "https://github.com/trinodb/trino/pull/5872#discussion_r524821674", "bodyText": "nit: typo with with?", "author": "phd3", "createdAt": "2020-11-17T01:16:53Z", "path": "presto-main/src/main/java/io/prestosql/event/QueryMonitor.java", "diffHunk": "@@ -339,6 +374,71 @@ private static QueryIOMetadata getQueryIOMetadata(QueryInfo queryInfo)\n         return new QueryIOMetadata(inputs.build(), output);\n     }\n \n+    private static Multimap<FragmentNode, OperatorStats> extractStatsForTableScan(QueryInfo queryInfo)\n+    {\n+        // Note: A plan may scan a table multiple times.\n+        ImmutableMultimap.Builder<FragmentNode, OperatorStats> tableScanOperatorStats = ImmutableMultimap.builder();\n+        getAllStages(queryInfo.getOutputStage())\n+                .forEach(stageInfo -> extractStatsForTableScan(stageInfo, tableScanOperatorStats));\n+        return tableScanOperatorStats.build();\n+    }\n+\n+    private static void extractStatsForTableScan(StageInfo stageInfo, ImmutableMultimap.Builder<FragmentNode, OperatorStats> tableScanOperatorStats)\n+    {\n+        final PlanFragment fragment = stageInfo.getPlan();\n+        if (fragment == null) {\n+            return;\n+        }\n+\n+        // Note: a plan node may be mapped to multiple operators.  For this code it doesn't matter\n+        // since only the table scan operator has physical stats, but be careful for any other use.\n+        Map<PlanNodeId, Collection<OperatorStats>> allOperatorStats = Multimaps.index(stageInfo.getStageStats().getOperatorSummaries(), OperatorStats::getPlanNodeId).asMap();\n+\n+        // Find the operator stats for each table scanned.  Sometimes a table scan is merged with\n+        // other operators, and in that case, use the stats of the nearest parent node with with stats.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzMzQwNQ==", "url": "https://github.com/trinodb/trino/pull/5872#discussion_r524833405", "bodyText": "since the reason behind the usage of Multimap below is that the a plannode can correspond to multiple operators, so the comment might be a bit misleading", "author": "phd3", "createdAt": "2020-11-17T01:51:50Z", "path": "presto-main/src/main/java/io/prestosql/event/QueryMonitor.java", "diffHunk": "@@ -339,6 +374,71 @@ private static QueryIOMetadata getQueryIOMetadata(QueryInfo queryInfo)\n         return new QueryIOMetadata(inputs.build(), output);\n     }\n \n+    private static Multimap<FragmentNode, OperatorStats> extractStatsForTableScan(QueryInfo queryInfo)\n+    {\n+        // Note: A plan may scan a table multiple times.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1Nzc5Mg==", "url": "https://github.com/trinodb/trino/pull/5872#discussion_r526457792", "bodyText": "Right... it could be mapped to multiple operators, but each scan would have a different entry.", "author": "dain", "createdAt": "2020-11-18T22:13:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzMzQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzODkyNQ==", "url": "https://github.com/trinodb/trino/pull/5872#discussion_r524838925", "bodyText": "since we're now keying on FragmentNode, we could exclude the \"table scan\" logic here, and just invoke an extractStats method that treats all nodes equally. I think that may be easier to reason about.\nThe visitor can just have\n                    protected Void visitPlan(PlanNode node, Collection<OperatorStats> parentStats)\n                    {\n                        if (parentStats != null) {\n                            tableScanOperatorStats.putAll(new FragmentNode(fragment.getId(), node.getId()), allOperatorStats.getOrDefault(node.getId(), parentStats));\n                        }\n\n                        for (PlanNode child : node.getSources()) {\n                            child.accept(this, allOperatorStats.getOrDefault(node.getId(), parentStats));\n                        }\n                        return null;\n                    }\n\nBut if you'd like to make this method stand-out specifically for table scan stats usecase (and save some bytes), the current implementation seems fine too.", "author": "phd3", "createdAt": "2020-11-17T02:10:17Z", "path": "presto-main/src/main/java/io/prestosql/event/QueryMonitor.java", "diffHunk": "@@ -309,15 +325,34 @@ private QueryContext createQueryContext(SessionRepresentation session, Optional<\n \n     private static QueryIOMetadata getQueryIOMetadata(QueryInfo queryInfo)\n     {\n+        Multimap<FragmentNode, OperatorStats> tableOperatorStats = extractStatsForTableScan(queryInfo);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4Mzg5Mw==", "url": "https://github.com/trinodb/trino/pull/5872#discussion_r526483893", "bodyText": "I like this style better.  I updated to code like the above.", "author": "dain", "createdAt": "2020-11-18T23:09:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgzODkyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0MDM2NA==", "url": "https://github.com/trinodb/trino/pull/5872#discussion_r524840364", "bodyText": "same comment about the comment here: the reason seems to be a plan node corresponding to multiple operators", "author": "phd3", "createdAt": "2020-11-17T02:15:21Z", "path": "presto-main/src/main/java/io/prestosql/event/QueryMonitor.java", "diffHunk": "@@ -309,15 +325,34 @@ private QueryContext createQueryContext(SessionRepresentation session, Optional<\n \n     private static QueryIOMetadata getQueryIOMetadata(QueryInfo queryInfo)\n     {\n+        Multimap<FragmentNode, OperatorStats> tableOperatorStats = extractStatsForTableScan(queryInfo);\n+\n         ImmutableList.Builder<QueryInputMetadata> inputs = ImmutableList.builder();\n         for (Input input : queryInfo.getInputs()) {\n+            // Note: input table may be scanned multiple times\n+            Collection<OperatorStats> inputTableOperatorStats = tableOperatorStats.get(new FragmentNode(input.getFragmentId(), input.getPlanNodeId()));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0Mjg5Mg==", "url": "https://github.com/trinodb/trino/pull/5872#discussion_r524842892", "bodyText": "The logic here seems to be kind of non-trivial to me, I was wondering if it'd be worth adding a unit test (for this or  the caller method). Not sure if there's a straightforward way currently.", "author": "phd3", "createdAt": "2020-11-17T02:23:44Z", "path": "presto-main/src/main/java/io/prestosql/event/QueryMonitor.java", "diffHunk": "@@ -339,6 +374,71 @@ private static QueryIOMetadata getQueryIOMetadata(QueryInfo queryInfo)\n         return new QueryIOMetadata(inputs.build(), output);\n     }\n \n+    private static Multimap<FragmentNode, OperatorStats> extractStatsForTableScan(QueryInfo queryInfo)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4NDEzMw==", "url": "https://github.com/trinodb/trino/pull/5872#discussion_r526484133", "bodyText": "I changed it to the simple form you suggested.", "author": "dain", "createdAt": "2020-11-18T23:10:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg0Mjg5Mg=="}], "type": "inlineReview"}, {"oid": "1a2b48ab3bc1467032f14cfcffc4897b71ef433f", "url": "https://github.com/trinodb/trino/commit/1a2b48ab3bc1467032f14cfcffc4897b71ef433f", "message": "Add scan physical size stats to query completed event", "committedDate": "2020-11-18T23:19:21Z", "type": "commit"}, {"oid": "1a2b48ab3bc1467032f14cfcffc4897b71ef433f", "url": "https://github.com/trinodb/trino/commit/1a2b48ab3bc1467032f14cfcffc4897b71ef433f", "message": "Add scan physical size stats to query completed event", "committedDate": "2020-11-18T23:19:21Z", "type": "forcePushed"}]}