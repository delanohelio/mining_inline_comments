{"pr_number": 2502, "pr_title": "Launch product tests using Java", "pr_createdAt": "2020-01-14T12:48:26Z", "pr_url": "https://github.com/trinodb/trino/pull/2502", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4NjY4OA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366386688", "bodyText": "Can we simply use Module ? There are plenty utilities that work on top of Module", "author": "kokosing", "createdAt": "2020-01-14T14:59:28Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/Extensions.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher;\n+\n+import com.google.inject.Module;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public final class Extensions", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgzNzc0OA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366837748", "bodyText": "It defines the extension points. Currently this is just Module, but this is future-proof.", "author": "findepi", "createdAt": "2020-01-15T11:57:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4NjY4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4NzQ4Nw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366387487", "bodyText": "How does it work? Where do inject? Into EnvironmentUp or EnvironmentOptions?", "author": "kokosing", "createdAt": "2020-01-14T15:00:40Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/EnvironmentUp.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Module;\n+import io.airlift.airline.Command;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentModule;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.Environments;\n+import io.prestosql.tests.product.launcher.env.SelectedEnvironmentProvider;\n+import org.testcontainers.DockerClientFactory;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static io.prestosql.tests.product.launcher.testcontainers.TestcontainersUtil.killContainersReaperContainer;\n+import static java.util.Objects.requireNonNull;\n+\n+@Command(name = \"up\", description = \"start an environment\")\n+public final class EnvironmentUp\n+        implements Runnable\n+{\n+    private static final Logger log = Logger.get(EnvironmentUp.class);\n+\n+    @Inject", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgzODAwMg==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366838002", "bodyText": "this is standard thing in https://github.com/airlift/airline", "author": "findepi", "createdAt": "2020-01-15T11:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4NzQ4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4ODkwMg==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366388902", "bodyText": "Can we have a regular plugin like in Presto or Tempto?", "author": "kokosing", "createdAt": "2020-01-14T15:03:14Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/ExtensionsProvidingCommandFactory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import io.airlift.airline.DefaultCommandFactory;\n+import io.prestosql.tests.product.launcher.Extensions;\n+\n+import java.lang.reflect.Constructor;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class ExtensionsProvidingCommandFactory<T>", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgzODY1Mg==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366838652", "bodyText": "Could be, but i wanted this to be simpler. There is no advantage of using service loader over explicitly provided thing.\nin tempto there was a clear advantage -- if we wanted not to use service loader, we would need to refactor a lot of code (maybe including testng code), or pass information over static fields (:scary:)", "author": "findepi", "createdAt": "2020-01-15T12:00:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4ODkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxODc0MA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367818740", "bodyText": "So if you are passing things explicitly why do you need reflection then?", "author": "kokosing", "createdAt": "2020-01-17T08:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4ODkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg2MTY4NA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367861684", "bodyText": "So if you are passing things explicitly why do you need reflection then?\n\nBecause airline instantiates the command objects.\nWe could fix airline for this. eg instead of binding command class, we could bind command factory directly.\nTbd later. cc @electrum", "author": "findepi", "createdAt": "2020-01-17T10:16:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4ODkwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4OTUzNA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366389534", "bodyText": "TemptoTestRun?", "author": "kokosing", "createdAt": "2020-01-14T15:04:21Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/TestRun.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.github.dockerjava.api.command.InspectContainerResponse;\n+import com.github.dockerjava.api.command.InspectContainerResponse.ContainerState;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Module;\n+import io.airlift.airline.Arguments;\n+import io.airlift.airline.Command;\n+import io.airlift.airline.Option;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentModule;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.Environments;\n+import io.prestosql.tests.product.launcher.env.SelectedEnvironmentProvider;\n+import org.testcontainers.containers.Container;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.Socket;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+@Command(name = \"run\", description = \"Presto product test launcher\")\n+public final class TestRun", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgzOTA4Nw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366839087", "bodyText": "I want to name the class consistently with the command/subcommand it's bound to.", "author": "findepi", "createdAt": "2020-01-15T12:01:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4OTUzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5MDE2OQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366390169", "bodyText": "what about volumes?", "author": "kokosing", "createdAt": "2020-01-14T15:05:29Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environments.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.docker.DockerUtil;\n+import org.testcontainers.DockerClientFactory;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_NETWORK;\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME;\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE;\n+\n+public final class Environments\n+{\n+    private Environments() {}\n+\n+    private static final Logger log = Logger.get(Environments.class);\n+\n+    public static void pruneEnvironment()\n+    {\n+        log.info(\"Shutting down previous containers\");\n+        try (DockerClient dockerClient = DockerClientFactory.lazyClient()) {\n+            DockerUtil.killContainers(\n+                    dockerClient,\n+                    listContainersCmd -> listContainersCmd.withLabelFilter(ImmutableMap.of(PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME, PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE)));\n+            DockerUtil.removeNetworks(", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgzOTMyNA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366839324", "bodyText": "what volumes? i don't create any volumes (yet)", "author": "findepi", "createdAt": "2020-01-15T12:02:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5MDE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5MDc0NQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366390745", "bodyText": "Presto?", "author": "kokosing", "createdAt": "2020-01-14T15:06:28Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/shared/Standard.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.shared;\n+\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.containers.wait.strategy.WaitAllStrategy;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.prestosql.tests.product.launcher.testcontainers.TestcontainersUtil.exposePort;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public final class Standard", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgzOTc4Mg==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r366839782", "bodyText": "first, it's presto + tests, not presto alone\nsecond, it's named after standard.yml this corresponds to.\nthird, please do not rename that file\nfourth, we can rename/refactor later, once we forget we had those yml files.", "author": "findepi", "createdAt": "2020-01-15T12:03:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5MDc0NQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI3NjI1Ng==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367276256", "bodyText": "verify version is not empty", "author": "kokosing", "createdAt": "2020-01-16T08:02:12Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/PathResolver.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher;\n+\n+import com.google.common.base.Suppliers;\n+import com.google.common.io.Resources;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.function.Supplier;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+public final class PathResolver\n+{\n+    public static final String PROJECT_VERSION_PLACEHOLDER = \"${project.version}\";\n+\n+    private final Supplier<String> projectVersion = Suppliers.memoize(this::readProjectVersion);\n+\n+    public File resolvePlaceholders(File path)\n+    {\n+        String result = path.toString();\n+        if (result.contains(PROJECT_VERSION_PLACEHOLDER)) {\n+            result = result.replace(PROJECT_VERSION_PLACEHOLDER, projectVersion.get());\n+        }\n+        return new File(result);\n+    }\n+\n+    private String readProjectVersion()\n+    {\n+        try {\n+            return Resources.toString(Resources.getResource(\"presto-product-tests-launcher-version.txt\"), UTF_8)\n+                    .trim();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NTczMg==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367395732", "bodyText": "Good idea", "author": "findepi", "createdAt": "2020-01-16T12:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI3NjI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI3Nzg2OQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367277869", "bodyText": "I would divide this environment into two: presto (or even singlenode-presto) and tests. Standard is meaningless name. Also I would extract constants for presto-master and tests. Or you could could create Standard out of Presto and Tests?", "author": "kokosing", "createdAt": "2020-01-16T08:07:26Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Standard.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.common;\n+\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.containers.wait.strategy.WaitAllStrategy;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.prestosql.tests.product.launcher.testcontainers.TestcontainersUtil.exposePort;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public final class Standard\n+        implements EnvironmentExtender\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String imagesVersion;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public Standard(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        requireNonNull(environmentOptions, \"environmentOptions is null\");\n+        imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+        checkArgument(serverPackage.getName().endsWith(\".tar.gz\"), \"Currently only server .tar.gz package is supported\");\n+    }\n+\n+    @Override\n+    public void extendEnvironment(Environment.Builder builder)\n+    {\n+        builder.addContainer(\"presto-master\", createPrestoMaster());\n+        builder.addContainer(\"tests\", createTestsContainer());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NTk3MQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367395971", "bodyText": "I am not saying this is a bad idea, but out of scope for this PR.", "author": "findepi", "createdAt": "2020-01-16T12:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI3Nzg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI3ODU2NQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367278565", "bodyText": "Please extract constant for \"/docker/presto-product-tests/conf/presto/etc/config.properties\" as this is going to be a path for all config properties for all presto environments.\nAlso I would move common/standard/config.properties to conf/environment/singlenode/config.properties. It seems to be common, but it is like extending multinode envirnoment where multinode presto config properties is specific to multinode and is stored in docker/presto-product-tests/conf/environment/multinode/multinode-master-config.properties", "author": "kokosing", "createdAt": "2020-01-16T08:09:33Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Standard.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.common;\n+\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.containers.wait.strategy.WaitAllStrategy;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.prestosql.tests.product.launcher.testcontainers.TestcontainersUtil.exposePort;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public final class Standard\n+        implements EnvironmentExtender\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String imagesVersion;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public Standard(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        requireNonNull(environmentOptions, \"environmentOptions is null\");\n+        imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+        checkArgument(serverPackage.getName().endsWith(\".tar.gz\"), \"Currently only server .tar.gz package is supported\");\n+    }\n+\n+    @Override\n+    public void extendEnvironment(Environment.Builder builder)\n+    {\n+        builder.addContainer(\"presto-master\", createPrestoMaster());\n+        builder.addContainer(\"tests\", createTestsContainer());\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    private DockerContainer createPrestoMaster()\n+    {\n+        DockerContainer container = new DockerContainer(\"prestodev/centos7-oj11:\" + imagesVersion)\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(), \"/docker/presto-product-tests\", READ_ONLY)\n+                .withFileSystemBind(pathResolver.resolvePlaceholders(serverPackage).toString(), \"/docker/presto-server.tar.gz\", READ_ONLY)\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"common/standard/config.properties\"), \"/docker/presto-product-tests/conf/presto/etc/config.properties\", READ_ONLY)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NjYzNw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367396637", "bodyText": "Also I would move common/standard/config.properties to conf/environment/singlenode/config.properties. It seems to be common, but\n\nI can't mount a config file that doens't exist, because I am mounting a config volume RO.\nFor good or bad. Bad -- i need default config for presto and for every catalog that we use.\nGood -- we won't accidentally create zero-length empty files that cause subsequent failures.\n\nPlease extract constant for \"/docker/presto-product-tests/conf/presto/etc/config.properties\" as this is going to be a path for all config properties for all presto environments.\n\nGood idea", "author": "findepi", "createdAt": "2020-01-16T12:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI3ODU2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MTU1OQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367281559", "bodyText": "Resources?", "author": "kokosing", "createdAt": "2020-01-16T08:17:55Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerFiles.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.google.common.reflect.ClassPath;\n+import io.airlift.log.Logger;\n+\n+import javax.annotation.PreDestroy;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static java.nio.file.Files.copy;\n+import static java.util.UUID.randomUUID;\n+\n+public final class DockerFiles", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5OTQxNw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367399417", "bodyText": "DockerFiles is more meaningful.\nAlso com.google.common.io.Resources.", "author": "findepi", "createdAt": "2020-01-16T12:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MTU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MTg2Nw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367281867", "bodyText": "Maybe you could use supplier for dockerFilesHostPath that would memoize unpackDockerFilesFromClasspath", "author": "kokosing", "createdAt": "2020-01-16T08:18:44Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerFiles.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.google.common.reflect.ClassPath;\n+import io.airlift.log.Logger;\n+\n+import javax.annotation.PreDestroy;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static java.nio.file.Files.copy;\n+import static java.util.UUID.randomUUID;\n+\n+public final class DockerFiles\n+        implements AutoCloseable\n+{\n+    private static final Logger log = Logger.get(DockerFiles.class);\n+\n+    @GuardedBy(\"this\")\n+    private Path dockerFilesHostPath;\n+    @GuardedBy(\"this\")\n+    private boolean closed;\n+\n+    @PreDestroy\n+    @Override\n+    public synchronized void close()\n+            throws IOException\n+    {\n+        if (closed) {\n+            return;\n+        }\n+        if (dockerFilesHostPath != null) {\n+            deleteRecursively(dockerFilesHostPath, ALLOW_INSECURE);\n+            dockerFilesHostPath = null;\n+        }\n+        closed = true;\n+    }\n+\n+    public synchronized String getDockerFilesHostPath()\n+    {\n+        checkState(!closed, \"Already closed\");\n+        if (dockerFilesHostPath == null) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5OTY1MA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367399650", "bodyText": "unpackDockerFilesFromClasspath has side effects, so it's better used explicitly.", "author": "findepi", "createdAt": "2020-01-16T12:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MTg2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MjEyNg==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367282126", "bodyText": "I would use something time based instead of randomUUID so it is easier to find these files manually (just in case).", "author": "kokosing", "createdAt": "2020-01-16T08:19:28Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerFiles.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.google.common.reflect.ClassPath;\n+import io.airlift.log.Logger;\n+\n+import javax.annotation.PreDestroy;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static java.nio.file.Files.copy;\n+import static java.util.UUID.randomUUID;\n+\n+public final class DockerFiles\n+        implements AutoCloseable\n+{\n+    private static final Logger log = Logger.get(DockerFiles.class);\n+\n+    @GuardedBy(\"this\")\n+    private Path dockerFilesHostPath;\n+    @GuardedBy(\"this\")\n+    private boolean closed;\n+\n+    @PreDestroy\n+    @Override\n+    public synchronized void close()\n+            throws IOException\n+    {\n+        if (closed) {\n+            return;\n+        }\n+        if (dockerFilesHostPath != null) {\n+            deleteRecursively(dockerFilesHostPath, ALLOW_INSECURE);\n+            dockerFilesHostPath = null;\n+        }\n+        closed = true;\n+    }\n+\n+    public synchronized String getDockerFilesHostPath()\n+    {\n+        checkState(!closed, \"Already closed\");\n+        if (dockerFilesHostPath == null) {\n+            dockerFilesHostPath = unpackDockerFilesFromClasspath();\n+            verify(dockerFilesHostPath != null);\n+        }\n+        return dockerFilesHostPath.toString();\n+    }\n+\n+    public String getDockerFilesHostPath(String file)\n+    {\n+        checkArgument(file != null && !file.isEmpty() && !file.startsWith(\"/\"), \"Invalid file: %s\", file);\n+        Path filePath = Paths.get(getDockerFilesHostPath()).resolve(file);\n+        checkArgument(Files.exists(filePath), \"'%s' resolves to '%s', but it does not exist\", file, filePath);\n+        return filePath.toString();\n+    }\n+\n+    private static Path unpackDockerFilesFromClasspath()\n+    {\n+        try {\n+            // Cannot use Files.createTempDirectory() because on Mac by default it uses /var/folders/ which is not visible to Docker for Mac\n+            Path dockerFilesHostPath = Files.createDirectory(Paths.get(\"/tmp/docker-files-\" + randomUUID().toString()));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwMDM0NA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367400344", "bodyText": "You either want to delete them all or none. If you want to delete by time (eg except last day), use find's switch for that", "author": "findepi", "createdAt": "2020-01-16T12:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MjEyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MjQ5Mw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367282493", "bodyText": "just call close or something static that close would call also", "author": "kokosing", "createdAt": "2020-01-16T08:20:28Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerFiles.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.google.common.reflect.ClassPath;\n+import io.airlift.log.Logger;\n+\n+import javax.annotation.PreDestroy;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static java.nio.file.Files.copy;\n+import static java.util.UUID.randomUUID;\n+\n+public final class DockerFiles\n+        implements AutoCloseable\n+{\n+    private static final Logger log = Logger.get(DockerFiles.class);\n+\n+    @GuardedBy(\"this\")\n+    private Path dockerFilesHostPath;\n+    @GuardedBy(\"this\")\n+    private boolean closed;\n+\n+    @PreDestroy\n+    @Override\n+    public synchronized void close()\n+            throws IOException\n+    {\n+        if (closed) {\n+            return;\n+        }\n+        if (dockerFilesHostPath != null) {\n+            deleteRecursively(dockerFilesHostPath, ALLOW_INSECURE);\n+            dockerFilesHostPath = null;\n+        }\n+        closed = true;\n+    }\n+\n+    public synchronized String getDockerFilesHostPath()\n+    {\n+        checkState(!closed, \"Already closed\");\n+        if (dockerFilesHostPath == null) {\n+            dockerFilesHostPath = unpackDockerFilesFromClasspath();\n+            verify(dockerFilesHostPath != null);\n+        }\n+        return dockerFilesHostPath.toString();\n+    }\n+\n+    public String getDockerFilesHostPath(String file)\n+    {\n+        checkArgument(file != null && !file.isEmpty() && !file.startsWith(\"/\"), \"Invalid file: %s\", file);\n+        Path filePath = Paths.get(getDockerFilesHostPath()).resolve(file);\n+        checkArgument(Files.exists(filePath), \"'%s' resolves to '%s', but it does not exist\", file, filePath);\n+        return filePath.toString();\n+    }\n+\n+    private static Path unpackDockerFilesFromClasspath()\n+    {\n+        try {\n+            // Cannot use Files.createTempDirectory() because on Mac by default it uses /var/folders/ which is not visible to Docker for Mac\n+            Path dockerFilesHostPath = Files.createDirectory(Paths.get(\"/tmp/docker-files-\" + randomUUID().toString()));\n+\n+            // Best-effort cleanup\n+            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n+                try {\n+                    deleteRecursively(dockerFilesHostPath, ALLOW_INSECURE);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwMDg1MQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367400851", "bodyText": "I don't understand how this should look like. Please explain.", "author": "findepi", "createdAt": "2020-01-16T12:53:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MjQ5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMDA1MA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367820050", "bodyText": "Nevermind... it is minor.", "author": "kokosing", "createdAt": "2020-01-17T08:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MjQ5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4Mjk5MQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367282991", "bodyText": "just docker? or even without anything. I often modify such files manually (with vim) shorter paths are easier.", "author": "kokosing", "createdAt": "2020-01-16T08:21:54Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerFiles.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.google.common.reflect.ClassPath;\n+import io.airlift.log.Logger;\n+\n+import javax.annotation.PreDestroy;\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.io.MoreFiles.deleteRecursively;\n+import static com.google.common.io.RecursiveDeleteOption.ALLOW_INSECURE;\n+import static java.nio.file.Files.copy;\n+import static java.util.UUID.randomUUID;\n+\n+public final class DockerFiles\n+        implements AutoCloseable\n+{\n+    private static final Logger log = Logger.get(DockerFiles.class);\n+\n+    @GuardedBy(\"this\")\n+    private Path dockerFilesHostPath;\n+    @GuardedBy(\"this\")\n+    private boolean closed;\n+\n+    @PreDestroy\n+    @Override\n+    public synchronized void close()\n+            throws IOException\n+    {\n+        if (closed) {\n+            return;\n+        }\n+        if (dockerFilesHostPath != null) {\n+            deleteRecursively(dockerFilesHostPath, ALLOW_INSECURE);\n+            dockerFilesHostPath = null;\n+        }\n+        closed = true;\n+    }\n+\n+    public synchronized String getDockerFilesHostPath()\n+    {\n+        checkState(!closed, \"Already closed\");\n+        if (dockerFilesHostPath == null) {\n+            dockerFilesHostPath = unpackDockerFilesFromClasspath();\n+            verify(dockerFilesHostPath != null);\n+        }\n+        return dockerFilesHostPath.toString();\n+    }\n+\n+    public String getDockerFilesHostPath(String file)\n+    {\n+        checkArgument(file != null && !file.isEmpty() && !file.startsWith(\"/\"), \"Invalid file: %s\", file);\n+        Path filePath = Paths.get(getDockerFilesHostPath()).resolve(file);\n+        checkArgument(Files.exists(filePath), \"'%s' resolves to '%s', but it does not exist\", file, filePath);\n+        return filePath.toString();\n+    }\n+\n+    private static Path unpackDockerFilesFromClasspath()\n+    {\n+        try {\n+            // Cannot use Files.createTempDirectory() because on Mac by default it uses /var/folders/ which is not visible to Docker for Mac\n+            Path dockerFilesHostPath = Files.createDirectory(Paths.get(\"/tmp/docker-files-\" + randomUUID().toString()));\n+\n+            // Best-effort cleanup\n+            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n+                try {\n+                    deleteRecursively(dockerFilesHostPath, ALLOW_INSECURE);\n+                }\n+                catch (IOException e) {\n+                    log.warn(e, \"Failed to clean up docker files temporary directory '%s'\", dockerFilesHostPath);\n+                }\n+            }));\n+\n+            ClassPath.from(Thread.currentThread().getContextClassLoader())\n+                    .getResources().stream()\n+                    .filter(resourceInfo -> resourceInfo.getResourceName().startsWith(\"docker/presto-product-tests/\"))", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwMTE5Nw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367401197", "bodyText": "right, but\n\ni use /docker as a \"common place to mount various things\", so not a mount point itself\ni want the path to be meaningful as well, do just /docker is not enough", "author": "findepi", "createdAt": "2020-01-16T12:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4Mjk5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwMTQyMQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367401421", "bodyText": "BTW i use /docker/presto-product-tests because we already use this in existing product tests", "author": "findepi", "createdAt": "2020-01-16T12:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4Mjk5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4NTk0OQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367285949", "bodyText": "Is it expensive to open and close DockerClient? Maybe we could have a singleton for that and we would inject dockerClient into DockerUtil or ContainterManager? Instead of passing this variable around.", "author": "kokosing", "createdAt": "2020-01-16T08:28:51Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import com.github.dockerjava.api.command.ListContainersCmd;\n+import com.github.dockerjava.api.command.ListNetworksCmd;\n+import com.github.dockerjava.api.exception.ConflictException;\n+import com.github.dockerjava.api.exception.NotFoundException;\n+import com.github.dockerjava.api.model.Container;\n+import com.github.dockerjava.api.model.Network;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+public final class DockerUtil\n+{\n+    private DockerUtil() {}\n+\n+    public static void killContainers(DockerClient dockerClient, Function<ListContainersCmd, ListContainersCmd> filter)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwMTg5OQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367401899", "bodyText": "It's utility function, so it cannot use a singleton, unless this is a static singleton, which i prefer to avoid (use Guice instead)", "author": "findepi", "createdAt": "2020-01-16T12:56:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4NTk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMDYzOA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367820638", "bodyText": "It's utility function\n\nMy idea was to replace utility class with regular component class (with @Inject constructor etc).", "author": "kokosing", "createdAt": "2020-01-17T08:38:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4NTk0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4NjExNg==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367286116", "bodyText": "log warning?", "author": "kokosing", "createdAt": "2020-01-16T08:29:16Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/docker/DockerUtil.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.docker;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import com.github.dockerjava.api.command.ListContainersCmd;\n+import com.github.dockerjava.api.command.ListNetworksCmd;\n+import com.github.dockerjava.api.exception.ConflictException;\n+import com.github.dockerjava.api.exception.NotFoundException;\n+import com.github.dockerjava.api.model.Container;\n+import com.github.dockerjava.api.model.Network;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+public final class DockerUtil\n+{\n+    private DockerUtil() {}\n+\n+    public static void killContainers(DockerClient dockerClient, Function<ListContainersCmd, ListContainersCmd> filter)\n+    {\n+        while (true) {\n+            ListContainersCmd listContainersCmd = filter.apply(dockerClient.listContainersCmd()\n+                    .withShowAll(true));\n+\n+            List<Container> containers = listContainersCmd.exec();\n+            if (containers.isEmpty()) {\n+                break;\n+            }\n+            for (Container container : containers) {\n+                try {\n+                    dockerClient.removeContainerCmd(container.getId())\n+                            .withForce(true)\n+                            .exec();\n+                }\n+                catch (ConflictException | NotFoundException ignored) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwMjA4Mw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367402083", "bodyText": "this is normal situation: you can't remove a container that you're already removing", "author": "findepi", "createdAt": "2020-01-16T12:56:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4NjExNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMDg4NA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367820884", "bodyText": "Anyway debug logging just in case would nice. Swallowed exceptions are hard to track.", "author": "kokosing", "createdAt": "2020-01-17T08:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4NjExNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4ODA4OQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367288089", "bodyText": "I think you could expose something else that is used for CLI handling. Something where you would use getters and have an option for validation or to inject a logic.", "author": "kokosing", "createdAt": "2020-01-16T08:34:11Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.google.inject.Module;\n+import io.airlift.airline.Option;\n+\n+import java.io.File;\n+\n+public final class EnvironmentOptions\n+{\n+    @Option(name = \"--hadoop-base-image\", title = \"image\", description = \"Hadoop base image\")\n+    public String hadoopBaseImage = System.getenv().getOrDefault(\"HADOOP_BASE_IMAGE\", \"prestodev/hdp2.6-hive\");\n+\n+    @Option(name = \"--image-version\", title = \"version\", description = \"docker images version\")\n+    public String imagesVersion = System.getenv().getOrDefault(\"DOCKER_IMAGES_VERSION\", \"25\");\n+\n+    @Option(name = \"--server-package\", title = \"server-package\", description = \"path to Presto server package\")\n+    public File serverPackage = new File(\"presto-server/target/presto-server-${project.version}.tar.gz\");\n+\n+    @Option(name = \"--jdbc-jar\", title = \"JDBC jar\", description = \"path to Presto JDBC jar\")\n+    public File jdbcJar = new File(\"presto-jdbc/target/presto-jdbc-${project.version}.jar\");\n+\n+    @Option(name = \"--cli-jar\", title = \"CLI jar\", description = \"path to Presto CLI jar\")\n+    public File cliJar = new File(\"presto-cli/target/presto-cli-${project.version}-executable.jar\");\n+\n+    @Option(name = \"--environment\", title = \"environment\", description = \"the name of the environment to start\", required = true)\n+    public String environment;\n+\n+    public Module toModule()\n+    {\n+        return binder -> {\n+            binder.bind(EnvironmentOptions.class).toInstance(this);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwMjI4Mg==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367402282", "bodyText": "I don't understand how this should look like. Please explain.", "author": "findepi", "createdAt": "2020-01-16T12:57:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4ODA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMjUzNQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367822535", "bodyText": "binder.bind(EnvironmentConfiguration.class).toInstance(new EnvironmentConfiguration() {\n   String getImageVersion() \n   {\n          return imagesVersion;\n   }\n....\n});", "author": "kokosing", "createdAt": "2020-01-17T08:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4ODA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg2Mjg2NQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367862865", "bodyText": "binder.bind(EnvironmentConfiguration.class).toInstance(new EnvironmentConfiguration() {\n   String getImageVersion() \n   {\n          return imagesVersion;\n   }\n....\n});\n\n\nI am following Presto pattern wherein i bind Config object directly in Guice.\nI know i could do better, but i don't want to write this boilerplate code.\n(Can be improved later, when the code is not fast changing.)", "author": "findepi", "createdAt": "2020-01-17T10:19:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4ODA4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4ODQyNA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367288424", "bodyText": "EnvironmentsModule? Because it is not specific to any environments but exposes all environment related objects. WDYT?", "author": "kokosing", "createdAt": "2020-01-16T08:35:04Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentModule.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.multibindings.MapBinder;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+\n+import static com.google.inject.multibindings.MapBinder.newMapBinder;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class EnvironmentModule", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwMjU5MA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367402590", "bodyText": "i think it doesn't really matter. i can change if you want me to.", "author": "findepi", "createdAt": "2020-01-16T12:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4ODQyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5MDg3Ng==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367290876", "bodyText": "extract list containers method", "author": "kokosing", "createdAt": "2020-01-16T08:41:06Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environments.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.docker.DockerUtil;\n+import org.testcontainers.DockerClientFactory;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_NETWORK;\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME;\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE;\n+\n+public final class Environments\n+{\n+    private Environments() {}\n+\n+    private static final Logger log = Logger.get(Environments.class);\n+\n+    public static void pruneEnvironment()\n+    {\n+        log.info(\"Shutting down previous containers\");\n+        try (DockerClient dockerClient = DockerClientFactory.lazyClient()) {\n+            DockerUtil.killContainers(\n+                    dockerClient,\n+                    listContainersCmd -> listContainersCmd.withLabelFilter(ImmutableMap.of(PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME, PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE)));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwMzAyNw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367403027", "bodyText": "I don't understand how this should look like. Please explain.", "author": "findepi", "createdAt": "2020-01-16T12:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5MDg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMjkxMg==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367822912", "bodyText": "nevermind.... it is minor", "author": "kokosing", "createdAt": "2020-01-17T08:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5MDg3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5MDk5Mw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367290993", "bodyText": "extract list networks method", "author": "kokosing", "createdAt": "2020-01-16T08:41:26Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environments.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.docker.DockerUtil;\n+import org.testcontainers.DockerClientFactory;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_NETWORK;\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME;\n+import static io.prestosql.tests.product.launcher.env.Environment.PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE;\n+\n+public final class Environments\n+{\n+    private Environments() {}\n+\n+    private static final Logger log = Logger.get(Environments.class);\n+\n+    public static void pruneEnvironment()\n+    {\n+        log.info(\"Shutting down previous containers\");\n+        try (DockerClient dockerClient = DockerClientFactory.lazyClient()) {\n+            DockerUtil.killContainers(\n+                    dockerClient,\n+                    listContainersCmd -> listContainersCmd.withLabelFilter(ImmutableMap.of(PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME, PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE)));\n+            DockerUtil.removeNetworks(\n+                    dockerClient,\n+                    listNetworksCmd -> listNetworksCmd.withNameFilter(PRODUCT_TEST_LAUNCHER_NETWORK));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwMzA3NA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367403074", "bodyText": "Same", "author": "findepi", "createdAt": "2020-01-16T12:59:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5MDk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMjk4MA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367822980", "bodyText": "nevermind.... it is minor", "author": "kokosing", "createdAt": "2020-01-17T08:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5MDk5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5MTcyMw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367291723", "bodyText": "It should be more user friendly.  Or did do some kind of validation and we should not hit the case where there is no environment here.", "author": "kokosing", "createdAt": "2020-01-16T08:43:08Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentFactory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Map;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class EnvironmentFactory\n+{\n+    private final Map<String, EnvironmentProvider> environmentProviders;\n+\n+    @Inject\n+    public EnvironmentFactory(Map<String, EnvironmentProvider> environmentProviders)\n+    {\n+        this.environmentProviders = requireNonNull(environmentProviders, \"environmentProviders is null\");\n+    }\n+\n+    public Environment.Builder get(String environmentName)\n+    {\n+        checkArgument(environmentProviders.containsKey(environmentName), \"No environment with name '%s'\", environmentName);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwMzU2NA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367403564", "bodyText": "Good idea!", "author": "findepi", "createdAt": "2020-01-16T13:00:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5MTcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5MjA5MQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367292091", "bodyText": "\u2764\ufe0f", "author": "kokosing", "createdAt": "2020-01-16T08:44:07Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Hadoop.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.common;\n+\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.testcontainers.SelectedPortWaitStrategy;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+\n+import javax.inject.Inject;\n+\n+import java.time.Duration;\n+\n+import static io.prestosql.tests.product.launcher.testcontainers.TestcontainersUtil.exposePort;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public final class Hadoop\n+        implements EnvironmentExtender\n+{\n+    private final DockerFiles dockerFiles;\n+\n+    private final String hadoopBaseImage;\n+    private final String imagesVersion;\n+\n+    @Inject\n+    public Hadoop(\n+            DockerFiles dockerFiles,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        requireNonNull(environmentOptions, \"environmentOptions is null\");\n+        hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+    }\n+\n+    @Override\n+    public void extendEnvironment(Environment.Builder builder)\n+    {\n+        builder.addContainer(\"hadoop-master\", createHadoopMaster());\n+\n+        builder.configureContainer(\"presto-master\", container -> container\n+                .withFileSystemBind(\n+                        dockerFiles.getDockerFilesHostPath(\"common/hadoop/hive.properties\"),\n+                        \"/docker/presto-product-tests/conf/presto/etc/catalog/hive.properties\",", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5Mzc1Mw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367293753", "bodyText": "what do you think with enabling this by default? I know it was causing some issues with running benchmarks couple years back, but maybe it is not going to make some tests flaky. WDYT?", "author": "kokosing", "createdAt": "2020-01-16T08:47:58Z", "path": "presto-product-tests-launcher/src/main/resources/docker/presto-product-tests/conf/presto/etc/jvm.config", "diffHunk": "@@ -0,0 +1,17 @@\n+-server\n+-Xmx2G\n+-XX:-UseBiasedLocking\n+-XX:+UseG1GC\n+-XX:G1HeapRegionSize=32M\n+-XX:+ExplicitGCInvokesConcurrent\n+-XX:+ExitOnOutOfMemoryError\n+-XX:+UseGCOverheadLimit\n+-XX:+HeapDumpOnOutOfMemoryError\n+-XX:ReservedCodeCacheSize=150M\n+-Djdk.attach.allowAttachSelf=true\n+# jdk.nio.maxCachedBufferSize controls what buffers can be allocated in per-thread \"temporary buffer cache\" (sun.nio.ch.Util). Value of 0 disables the cache.\n+-Djdk.nio.maxCachedBufferSize=0\n+-DHADOOP_USER_NAME=hive\n+-Duser.timezone=Asia/Kathmandu\n+#-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwMzkwMw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367403903", "bodyText": "AFAIR It was causing instability on CI (test flakiness).", "author": "findepi", "createdAt": "2020-01-16T13:01:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5Mzc1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NDcwNw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367294707", "bodyText": "Maybe we should file an issue to test containers to make possible to disable this container at all.", "author": "kokosing", "createdAt": "2020-01-16T08:50:27Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/testcontainers/TestcontainersUtil.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.testcontainers;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import org.testcontainers.DockerClientFactory;\n+\n+public final class TestcontainersUtil\n+{\n+    private TestcontainersUtil() {}\n+\n+    public static void killContainersReaperContainer(DockerClient dockerClient)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwNDIxOQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367404219", "bodyText": "Please do!", "author": "findepi", "createdAt": "2020-01-16T13:01:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NDcwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyNDYyNQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367824625", "bodyText": "Please see:\n\nhttps://www.testcontainers.org/features/configuration/#disabling-ryuk\ntestcontainers/testcontainers-java#1023", "author": "kokosing", "createdAt": "2020-01-17T08:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NDcwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg2NjAyMA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367866020", "bodyText": "https://www.testcontainers.org/features/configuration/#disabling-ryuk\n\n\nThe site says\n\nNote that Testcontainers will continue doing the cleanup at JVM's shutdown, unless you kill -9 your JVM process.\n\nFortunately i didn't see it working as documented :)\n\nTESTCONTAINERS_RYUK_DISABLED environment variable to true.\n\ni can't set the env from within the Java process.\neven if i could, i would be very concerned that the lib could have checked the env value before i set it.", "author": "findepi", "createdAt": "2020-01-17T10:26:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NDcwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NTEwOA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367295108", "bodyText": "ptl -> presto? or presto-test? or prestodev?", "author": "kokosing", "createdAt": "2020-01-16T08:51:22Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.github.dockerjava.api.model.Bind;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.testcontainers.PrintingLogConsumer;\n+import org.testcontainers.containers.Container;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.lifecycle.Startables;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableList;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.shaded.com.google.common.base.Preconditions.checkState;\n+\n+public final class Environment\n+{\n+    private static final Logger log = Logger.get(Environment.class);\n+\n+    public static final String PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME = Environment.class.getName() + \".ptl-started\";\n+    public static final String PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE = \"true\";\n+    public static final String PRODUCT_TEST_LAUNCHER_NETWORK = \"ptl-network\";", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwNDUzNA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367404534", "bodyText": "i write containers names in command line from time to time, eg docker exec -it ptl-presto-master bash, so the shorter the better.\nother option i can consider is pf-", "author": "findepi", "createdAt": "2020-01-16T13:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NTEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMTM3Ng==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367821376", "bodyText": "ptl is meaningless. Please prestodev instead. prestodev-presto-master looks good.", "author": "kokosing", "createdAt": "2020-01-17T08:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NTEwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg2MjI1NQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367862255", "bodyText": "ptl is meaningless. Please prestodev instead. prestodev-presto-master looks good.\n\nptl stands for \"product test launcher\".", "author": "findepi", "createdAt": "2020-01-17T10:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NTEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NTU5OA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367295598", "bodyText": "this seems unused.", "author": "kokosing", "createdAt": "2020-01-16T08:52:31Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/Environment.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.github.dockerjava.api.model.Bind;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.testcontainers.PrintingLogConsumer;\n+import org.testcontainers.containers.Container;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.lifecycle.Startables;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableList;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Consumer;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.shaded.com.google.common.base.Preconditions.checkState;\n+\n+public final class Environment\n+{\n+    private static final Logger log = Logger.get(Environment.class);\n+\n+    public static final String PRODUCT_TEST_LAUNCHER_STARTED_LABEL_NAME = Environment.class.getName() + \".ptl-started\";\n+    public static final String PRODUCT_TEST_LAUNCHER_STARTED_LABEL_VALUE = \"true\";\n+    public static final String PRODUCT_TEST_LAUNCHER_NETWORK = \"ptl-network\";\n+\n+    private final Network network;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwNDk2Nw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367404967", "bodyText": "Done", "author": "findepi", "createdAt": "2020-01-16T13:03:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NTU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NzQ1NA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367297454", "bodyText": "Do you need that?  What is wrong with having dead container? Would it be possible to do launcher up <environment> and then launcher tempto <environemnt> <tempto options>? could we then use such container or could we add a new one to environment? or completely new container that could only use same network?", "author": "kokosing", "createdAt": "2020-01-16T08:56:35Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/EnvironmentUp.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.cli;\n+\n+import com.github.dockerjava.api.DockerClient;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Module;\n+import io.airlift.airline.Command;\n+import io.airlift.log.Logger;\n+import io.prestosql.tests.product.launcher.Extensions;\n+import io.prestosql.tests.product.launcher.LauncherModule;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentModule;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.Environments;\n+import io.prestosql.tests.product.launcher.env.SelectedEnvironmentProvider;\n+import org.testcontainers.DockerClientFactory;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+\n+import static io.prestosql.tests.product.launcher.cli.Commands.runCommand;\n+import static io.prestosql.tests.product.launcher.testcontainers.TestcontainersUtil.killContainersReaperContainer;\n+import static java.util.Objects.requireNonNull;\n+\n+@Command(name = \"up\", description = \"start an environment\")\n+public final class EnvironmentUp\n+        implements Runnable\n+{\n+    private static final Logger log = Logger.get(EnvironmentUp.class);\n+\n+    @Inject\n+    public EnvironmentOptions environmentOptions = new EnvironmentOptions();\n+\n+    private Module additionalEnvironments;\n+\n+    public EnvironmentUp(Extensions extensions)\n+    {\n+        this.additionalEnvironments = requireNonNull(extensions, \"extensions is null\").getAdditionalEnvironments();\n+    }\n+\n+    @Override\n+    public void run()\n+    {\n+        runCommand(\n+                ImmutableList.<Module>builder()\n+                        .add(new LauncherModule())\n+                        .add(new EnvironmentModule(additionalEnvironments))\n+                        .add(environmentOptions.toModule())\n+                        .build(),\n+                EnvironmentUp.Execution.class);\n+    }\n+\n+    public static class Execution\n+            implements Runnable\n+    {\n+        private final SelectedEnvironmentProvider selectedEnvironmentProvider;\n+\n+        @Inject\n+        public Execution(SelectedEnvironmentProvider selectedEnvironmentProvider)\n+        {\n+            this.selectedEnvironmentProvider = requireNonNull(selectedEnvironmentProvider, \"selectedEnvironmentProvider is null\");\n+        }\n+\n+        @Override\n+        public void run()\n+        {\n+            log.info(\"Pruning old environment(s)\");\n+            Environments.pruneEnvironment();\n+\n+            Environment environment = selectedEnvironmentProvider.getEnvironment()\n+                    .removeContainer(\"tests\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwNTQ2Mg==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367405462", "bodyText": "Do you need that? What is wrong with having dead container?\n\nThat start will detect it failed to start and it will fail.\n\nWould it be possible to do launcher up  and then launcher tempto  ?\n\nYes!\nTBD\n\nor completely new container that could only use same network?\n\nthat's the idea", "author": "findepi", "createdAt": "2020-01-16T13:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI5NzQ1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMTU0OQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367301549", "bodyText": "just worker-jvm/ or worker/jvm.config?", "author": "kokosing", "createdAt": "2020-01-16T09:05:51Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/Multinode.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public final class Multinode\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String imagesVersion;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public Multinode(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);\n+\n+        builder.configureContainer(\"presto-master\", container -> {\n+            container\n+                    .withFileSystemBind(\n+                            dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-jvm.config\"),\n+                            \"/docker/presto-product-tests/conf/presto/etc/jvm.config\",\n+                            READ_ONLY)\n+                    .withFileSystemBind(\n+                            dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-config.properties\"),\n+                            \"/docker/presto-product-tests/conf/presto/etc/config.properties\",\n+                            READ_ONLY);\n+        });\n+\n+        builder.addContainer(\"presto-worker\", createPrestoWorker());\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    private DockerContainer createPrestoWorker()\n+    {\n+        DockerContainer container = new DockerContainer(\"prestodev/centos6-oj8:\" + imagesVersion)\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(), \"/docker/presto-product-tests\", READ_ONLY)\n+                .withFileSystemBind(pathResolver.resolvePlaceholders(serverPackage).toString(), \"/docker/presto-server.tar.gz\", READ_ONLY)\n+                .withFileSystemBind(\n+                        dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-worker-jvm.config\"),", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwNTgzMw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367405833", "bodyText": "i don't see benefit of directories with one-two files.\nthe files are manually mounted, so they can have more meaningful names and live in one home dir.", "author": "findepi", "createdAt": "2020-01-16T13:05:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMTU0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMTU3NA==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367301574", "bodyText": "just worker-config?", "author": "kokosing", "createdAt": "2020-01-16T09:05:55Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/environment/Multinode.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.environment;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.tests.product.launcher.PathResolver;\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.env.common.AbstractEnvironmentProvider;\n+import io.prestosql.tests.product.launcher.env.common.Hadoop;\n+import io.prestosql.tests.product.launcher.env.common.Standard;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import javax.inject.Inject;\n+\n+import java.io.File;\n+import java.time.Duration;\n+\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public final class Multinode\n+        extends AbstractEnvironmentProvider\n+{\n+    private final PathResolver pathResolver;\n+    private final DockerFiles dockerFiles;\n+\n+    private final String imagesVersion;\n+    private final File serverPackage;\n+\n+    @Inject\n+    public Multinode(\n+            PathResolver pathResolver,\n+            DockerFiles dockerFiles,\n+            Standard standard,\n+            Hadoop hadoop,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        super(ImmutableList.of(standard, hadoop));\n+        this.pathResolver = requireNonNull(pathResolver, \"pathResolver is null\");\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+        serverPackage = requireNonNull(environmentOptions.serverPackage, \"environmentOptions.serverPackage is null\");\n+    }\n+\n+    @Override\n+    protected void extendEnvironment(Environment.Builder builder)\n+    {\n+        super.extendEnvironment(builder);\n+\n+        builder.configureContainer(\"presto-master\", container -> {\n+            container\n+                    .withFileSystemBind(\n+                            dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-jvm.config\"),\n+                            \"/docker/presto-product-tests/conf/presto/etc/jvm.config\",\n+                            READ_ONLY)\n+                    .withFileSystemBind(\n+                            dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-master-config.properties\"),\n+                            \"/docker/presto-product-tests/conf/presto/etc/config.properties\",\n+                            READ_ONLY);\n+        });\n+\n+        builder.addContainer(\"presto-worker\", createPrestoWorker());\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    private DockerContainer createPrestoWorker()\n+    {\n+        DockerContainer container = new DockerContainer(\"prestodev/centos6-oj8:\" + imagesVersion)\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(), \"/docker/presto-product-tests\", READ_ONLY)\n+                .withFileSystemBind(pathResolver.resolvePlaceholders(serverPackage).toString(), \"/docker/presto-server.tar.gz\", READ_ONLY)\n+                .withFileSystemBind(\n+                        dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-worker-jvm.config\"),\n+                        \"/docker/presto-product-tests/conf/presto/etc/jvm.config\",\n+                        READ_ONLY)\n+                .withFileSystemBind(\n+                        dockerFiles.getDockerFilesHostPath(\"conf/environment/multinode/multinode-worker-config.properties\"),", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwNjI5Ng==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367406296", "bodyText": "i sometimes open a file by its name only. That's why we have eg HivePartitionManager even though a PartitionManager class in .hive package could (in theory) be as unambiguous.", "author": "findepi", "createdAt": "2020-01-16T13:07:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMwMTU3NA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMzM0Mg==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367823342", "bodyText": "common/hadoop/hive.properties\"\n\nwhy not just hadoop or env/hadoop or environment/hadoop?", "author": "kokosing", "createdAt": "2020-01-17T08:46:22Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Hadoop.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.common;\n+\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.DockerContainer;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+import io.prestosql.tests.product.launcher.testcontainers.SelectedPortWaitStrategy;\n+import org.testcontainers.containers.startupcheck.IsRunningStartupCheckStrategy;\n+\n+import javax.inject.Inject;\n+\n+import java.time.Duration;\n+\n+import static io.prestosql.tests.product.launcher.testcontainers.TestcontainersUtil.exposePort;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public final class Hadoop\n+        implements EnvironmentExtender\n+{\n+    public static final String CONTAINER_PRESTO_HIVE_PROPERTIES = \"/docker/presto-product-tests/conf/presto/etc/catalog/hive.properties\";\n+\n+    private final DockerFiles dockerFiles;\n+\n+    private final String hadoopBaseImage;\n+    private final String imagesVersion;\n+\n+    @Inject\n+    public Hadoop(\n+            DockerFiles dockerFiles,\n+            EnvironmentOptions environmentOptions)\n+    {\n+        this.dockerFiles = requireNonNull(dockerFiles, \"dockerFiles is null\");\n+        requireNonNull(environmentOptions, \"environmentOptions is null\");\n+        hadoopBaseImage = requireNonNull(environmentOptions.hadoopBaseImage, \"environmentOptions.hadoopBaseImage is null\");\n+        imagesVersion = requireNonNull(environmentOptions.imagesVersion, \"environmentOptions.imagesVersion is null\");\n+    }\n+\n+    @Override\n+    public void extendEnvironment(Environment.Builder builder)\n+    {\n+        builder.addContainer(\"hadoop-master\", createHadoopMaster());\n+\n+        builder.configureContainer(\"presto-master\", container -> container\n+                .withFileSystemBind(dockerFiles.getDockerFilesHostPath(\"common/hadoop/hive.properties\"), CONTAINER_PRESTO_HIVE_PROPERTIES, READ_ONLY));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg2MzgzMw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367863833", "bodyText": "common/hadoop/hive.properties\"\n\nwhy not just hadoop or env/hadoop or environment/hadoop?\n\nconvention\n- common - this is where all common (reusable env pieces) parts live\n  \\- hadoop - this is where Hadoop's pieces live\n     \\- hive.properties - (obvious meaning)\n\ni use common rather than env or environment because hadoop is not an environment.\nIt's a reusable piece (like a lib code, utility class).\nEnvironments are separate and not meant to be reused.", "author": "findepi", "createdAt": "2020-01-17T10:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyMzM0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyNDkzMw==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367824933", "bodyText": "cmt msg is a bit too long", "author": "kokosing", "createdAt": "2020-01-17T08:50:46Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentModule.java", "diffHunk": "@@ -17,8 +17,10 @@\n import com.google.inject.Module;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyNTMwNg==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367825306", "bodyText": "KerberizedHadoop\nAt some point we should extract Kerberos from Hadoop as it is very useful for other connectors that might have support for Kerberos authentication", "author": "kokosing", "createdAt": "2020-01-17T08:51:38Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Kerberos.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.common;\n+\n+import io.prestosql.tests.product.launcher.docker.DockerFiles;\n+import io.prestosql.tests.product.launcher.env.Environment;\n+import io.prestosql.tests.product.launcher.env.EnvironmentOptions;\n+\n+import javax.inject.Inject;\n+\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_PRESTO_CONFIG_PROPERTIES;\n+import static io.prestosql.tests.product.launcher.env.common.Standard.CONTAINER_TEMPTO_PROFILE_CONFIG;\n+import static io.prestosql.tests.product.launcher.testcontainers.TestcontainersUtil.exposePort;\n+import static java.util.Objects.requireNonNull;\n+import static org.testcontainers.containers.BindMode.READ_ONLY;\n+\n+public class Kerberos", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg2NDIwMQ==", "url": "https://github.com/trinodb/trino/pull/2502#discussion_r367864201", "bodyText": "KerberizedHadoop\n\nfollows kerberos.yml file name.  We can rename for the better once we don't have the yml file anymore.\n\nAt some point we should extract Kerberos from Hadoop as it is very useful for other connectors that might have support for Kerberos authentication\n\ntotally!", "author": "findepi", "createdAt": "2020-01-17T10:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgyNTMwNg=="}], "type": "inlineReview"}, {"oid": "d29b02c7dc98a3bd9c5e7eb40ba86f1c97e12dfa", "url": "https://github.com/trinodb/trino/commit/d29b02c7dc98a3bd9c5e7eb40ba86f1c97e12dfa", "message": "Add product tests Java Launcher", "committedDate": "2020-01-17T10:14:35Z", "type": "commit"}, {"oid": "4752bc13fdd7abd73c58ea81216b7be3d0a4b8d9", "url": "https://github.com/trinodb/trino/commit/4752bc13fdd7abd73c58ea81216b7be3d0a4b8d9", "message": "Convert singlenode environment to Launcher", "committedDate": "2020-01-17T10:14:35Z", "type": "commit"}, {"oid": "413308dcd00376c7ba445f1d84dc3fb7021fdc44", "url": "https://github.com/trinodb/trino/commit/413308dcd00376c7ba445f1d84dc3fb7021fdc44", "message": "Convert singlenode-kerberos-hdfs-no-impersonation environment to Launcher", "committedDate": "2020-01-17T10:14:35Z", "type": "commit"}, {"oid": "413308dcd00376c7ba445f1d84dc3fb7021fdc44", "url": "https://github.com/trinodb/trino/commit/413308dcd00376c7ba445f1d84dc3fb7021fdc44", "message": "Convert singlenode-kerberos-hdfs-no-impersonation environment to Launcher", "committedDate": "2020-01-17T10:14:35Z", "type": "forcePushed"}]}