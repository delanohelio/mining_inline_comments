{"pr_number": 6016, "pr_title": "Make sure redirected table column types match source column types", "pr_createdAt": "2020-11-19T11:50:28Z", "pr_url": "https://github.com/trinodb/trino/pull/6016", "timeline": [{"oid": "f5bf979180adcc4160a19c755848ff63564ca714", "url": "https://github.com/trinodb/trino/commit/f5bf979180adcc4160a19c755848ff63564ca714", "message": "Fix formatting", "committedDate": "2020-11-19T11:44:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzNjQ1MQ==", "url": "https://github.com/trinodb/trino/pull/6016#discussion_r526836451", "bodyText": "Would here be a need in the future to support coercions? the type sets supported by connectors are not the same", "author": "findepi", "createdAt": "2020-11-19T12:29:17Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/ApplyTableScanRedirection.java", "diffHunk": "@@ -97,6 +98,16 @@ public Result apply(TableScanNode scanNode, Captures captures, Context context)\n                     if (destinationColumnHandle == null) {\n                         throw new PrestoException(COLUMN_NOT_FOUND, format(\"Did not find handle for column %s in destination table %s\", destinationColumn, destinationTable));\n                     }\n+\n+                    // validate that redirected types match source types\n+                    Type sourceType = context.getSymbolAllocator().getTypes().get(entry.getKey());\n+                    Type redirectedType = metadata.getColumnMetadata(context.getSession(), destinationTableHandle.get(), destinationColumnHandle).getType();\n+                    if (!sourceType.equals(redirectedType)) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkyNjg2Mg==", "url": "https://github.com/trinodb/trino/pull/6016#discussion_r526926862", "bodyText": "If your target catalog is Hive, then I don't think coercions would be needed as Hive supports most (all?) of Presto types with ORC format. For other targets, some coercion might be needed.", "author": "sopel39", "createdAt": "2020-11-19T14:25:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzNjQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk0ODc4MA==", "url": "https://github.com/trinodb/trino/pull/6016#discussion_r526948780", "bodyText": "Hive supports most (all?) of Presto types with ORC format\n\neg timestamp with time zone or json are not supported", "author": "findepi", "createdAt": "2020-11-19T14:53:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzNjQ1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzNjU4OQ==", "url": "https://github.com/trinodb/trino/pull/6016#discussion_r526836589", "bodyText": "incluide source column handle as well?", "author": "findepi", "createdAt": "2020-11-19T12:29:29Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/ApplyTableScanRedirection.java", "diffHunk": "@@ -97,6 +98,16 @@ public Result apply(TableScanNode scanNode, Captures captures, Context context)\n                     if (destinationColumnHandle == null) {\n                         throw new PrestoException(COLUMN_NOT_FOUND, format(\"Did not find handle for column %s in destination table %s\", destinationColumn, destinationTable));\n                     }\n+\n+                    // validate that redirected types match source types\n+                    Type sourceType = context.getSymbolAllocator().getTypes().get(entry.getKey());\n+                    Type redirectedType = metadata.getColumnMetadata(context.getSession(), destinationTableHandle.get(), destinationColumnHandle).getType();\n+                    if (!sourceType.equals(redirectedType)) {\n+                        throw new PrestoException(\n+                                TYPE_MISMATCH,\n+                                format(\"Redirected type (%s) for column %s does not match source type (%s)\", redirectedType, destinationColumn, sourceType));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk1MjU5MQ==", "url": "https://github.com/trinodb/trino/pull/6016#discussion_r526952591", "bodyText": "Please also mention source and target table. If a query uses multiple tables, knowing which one caused problems may be helpful.", "author": "findepi", "createdAt": "2020-11-19T14:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzNjU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk1MjAxMA==", "url": "https://github.com/trinodb/trino/pull/6016#discussion_r526952010", "bodyText": "Rule tested is not really leveraged much here, because we're not testing the rule application, but rather a failure internally.\nMaybe it would make sense to add .fails(Consumer<Exception> exceptionAssertion) method to Rule tester, next to matches()?\nAltenratively, maybe you do not need rule tester at all, you can just run a query on the query runner after all.", "author": "findepi", "createdAt": "2020-11-19T14:57:42Z", "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestApplyTableScanRedirection.java", "diffHunk": "@@ -116,6 +119,29 @@ public void doesNotFireIfNoTableScan()\n         }\n     }\n \n+    @Test(expectedExceptions = PrestoException.class, expectedExceptionsMessageRegExp = \"Redirected type \\\\(bigint\\\\) for column destination_col_c does not match source type \\\\(varchar\\\\)\")\n+    public void testMismatchedTypes()\n+    {\n+        try (RuleTester ruleTester = defaultRuleTester()) {\n+            // make the mock connector return a table scan on different table\n+            ApplyTableScanRedirect applyTableScanRedirect = getMockApplyRedirect(\n+                    ImmutableMap.of(sourceColumnHandleA, destinationColumnNameC));\n+            MockConnectorFactory mockFactory = createMockFactory(Optional.of(applyTableScanRedirect));\n+\n+            ruleTester.getQueryRunner().createCatalog(MOCK_CATALOG, mockFactory, ImmutableMap.of());\n+\n+            ruleTester.assertThat(new ApplyTableScanRedirection(ruleTester.getMetadata()))\n+                    .on(p -> {\n+                        Symbol column = p.symbol(sourceColumnNameA, VARCHAR);\n+                        return p.tableScan(TEST_TABLE_HANDLE,\n+                                ImmutableList.of(column),\n+                                ImmutableMap.of(column, sourceColumnHandleA));\n+                    })\n+                    .withSession(MOCK_SESSION)\n+                    .matches(anyTree());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "acd9b2849e50788f5e3377b0f0c178b58205f93f", "url": "https://github.com/trinodb/trino/commit/acd9b2849e50788f5e3377b0f0c178b58205f93f", "message": "Make sure redirected table column types match source column types", "committedDate": "2020-11-19T16:33:46Z", "type": "commit"}, {"oid": "acd9b2849e50788f5e3377b0f0c178b58205f93f", "url": "https://github.com/trinodb/trino/commit/acd9b2849e50788f5e3377b0f0c178b58205f93f", "message": "Make sure redirected table column types match source column types", "committedDate": "2020-11-19T16:33:46Z", "type": "forcePushed"}]}