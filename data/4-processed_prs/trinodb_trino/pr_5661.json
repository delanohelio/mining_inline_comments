{"pr_number": 5661, "pr_title": "Fix validation of expressions in ORDER BY for DISTINCT queries", "pr_createdAt": "2020-10-22T19:47:38Z", "pr_url": "https://github.com/trinodb/trino/pull/5661", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0NDEyOA==", "url": "https://github.com/trinodb/trino/pull/5661#discussion_r511544128", "bodyText": "is the check removed because it is too obvious? I think it might be still good to keep it as a \"checkState\" from the method's perspective, thoughts?", "author": "phd3", "createdAt": "2020-10-25T04:06:49Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -2214,9 +2213,22 @@ private Scope computeAndAssignOutputScope(QuerySpecification node, Optional<Scop\n \n             for (SelectItem item : node.getSelect().getSelectItems()) {\n                 if (item instanceof AllColumns) {\n-                    List<Field> itemOutputFields = analysis.getSelectAllResultFields((AllColumns) item);\n-                    checkNotNull(itemOutputFields, \"output fields is null for select item %s\", item);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3NDgxMg==", "url": "https://github.com/trinodb/trino/pull/5661#discussion_r512174812", "bodyText": "No, that was unintentional.", "author": "martint", "createdAt": "2020-10-26T18:20:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0NDEyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0NTMyMg==", "url": "https://github.com/trinodb/trino/pull/5661#discussion_r511545322", "bodyText": "would it make sense to make CanonicalizationAware#canonicalize public so that definition of canonicalization remains in one place?", "author": "phd3", "createdAt": "2020-10-25T04:24:43Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -2259,6 +2271,14 @@ else if (expression instanceof DereferenceExpression) {\n             return createAndAssignScope(node, scope, outputFields.build());\n         }\n \n+        private String canonicalize(Identifier identifier)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0NTMzOQ==", "url": "https://github.com/trinodb/trino/pull/5661#discussion_r511545339", "bodyText": "why do we need to standardize aliases here if getAliases(Select node)  returns CanonicalizationAware  objects anyway?", "author": "phd3", "createdAt": "2020-10-25T04:25:04Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -2214,9 +2213,22 @@ private Scope computeAndAssignOutputScope(QuerySpecification node, Optional<Scop\n \n             for (SelectItem item : node.getSelect().getSelectItems()) {\n                 if (item instanceof AllColumns) {\n-                    List<Field> itemOutputFields = analysis.getSelectAllResultFields((AllColumns) item);\n-                    checkNotNull(itemOutputFields, \"output fields is null for select item %s\", item);\n-                    outputFields.addAll(itemOutputFields);\n+                    AllColumns allColumns = (AllColumns) item;\n+\n+                    List<Field> fields = analysis.getSelectAllResultFields(allColumns);\n+                    for (int i = 0; i < fields.size(); i++) {\n+                        Field field = fields.get(i);\n+\n+                        Optional<String> name;\n+                        if (!allColumns.getAliases().isEmpty()) {\n+                            name = Optional.of(canonicalize(allColumns.getAliases().get(i)));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MDI5NQ==", "url": "https://github.com/trinodb/trino/pull/5661#discussion_r512180295", "bodyText": "Here we need to extract a name (String) from the AST Identifier to assign to the resulting output field. The values returned by getAliases are used for matching purposes. I agree that it looks a bit awkward, but making things more coherent requires a bigger refactor than what this PR is trying to fix.", "author": "martint", "createdAt": "2020-10-26T18:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU0NTMzOQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "8f2da52a959e9daf5ebd5b6fe219f6b2f5431315", "url": "https://github.com/trinodb/trino/commit/8f2da52a959e9daf5ebd5b6fe219f6b2f5431315", "message": "Fix alias derivation for .* expression\n\nThe derived schema was using fully qualified aliases from the underlying tables.\nThis resulted in the following query succeeding, when it should fail due to\ntable t not being visible in the outer query:\n\n    SELECT t.a FROM (SELECT t.* FROM (VALUES 1) t(a))", "committedDate": "2020-10-26T22:11:46Z", "type": "commit"}, {"oid": "599ab0ff6d89d2c00786d274915e713735aa8afd", "url": "https://github.com/trinodb/trino/commit/599ab0ff6d89d2c00786d274915e713735aa8afd", "message": "Fix validation of expressions in ORDER BY for DISTINCT queries\n\nThe validation was only considering syntactic aliases, but it\nshould also consider implied aliases derived from the names\nof the underlying columns.", "committedDate": "2020-10-26T22:13:02Z", "type": "commit"}, {"oid": "599ab0ff6d89d2c00786d274915e713735aa8afd", "url": "https://github.com/trinodb/trino/commit/599ab0ff6d89d2c00786d274915e713735aa8afd", "message": "Fix validation of expressions in ORDER BY for DISTINCT queries\n\nThe validation was only considering syntactic aliases, but it\nshould also consider implied aliases derived from the names\nof the underlying columns.", "committedDate": "2020-10-26T22:13:02Z", "type": "forcePushed"}]}