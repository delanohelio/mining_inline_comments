{"pr_number": 4889, "pr_title": "Refactor ABFS tests to be more extensible", "pr_createdAt": "2020-08-19T21:10:39Z", "pr_url": "https://github.com/trinodb/trino/pull/4889", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "a2b42c13a9b567bb15c0337c78b930e1ddc01af8", "url": "https://github.com/trinodb/trino/commit/a2b42c13a9b567bb15c0337c78b930e1ddc01af8", "message": "Add tests for PrestoAzureConfigurationInitializer", "committedDate": "2020-09-09T15:39:54Z", "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3MzQxNg==", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485973416", "bodyText": "Private helper methods should go after public methods", "author": "electrum", "createdAt": "2020-09-09T23:19:32Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/azure/PrestoAzureConfigurationInitializer.java", "diffHunk": "@@ -36,39 +36,37 @@\n     private final Optional<String> abfsAccessKey;\n     private final Optional<String> abfsStorageAccount;\n \n+    private static Optional<String> dropEmpty(Optional<String> optional)", "originalCommit": "5a65ddf606cb6befe3fc3e68945adb193eef437b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3MzU4OA==", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485973588", "bodyText": "Don't end messages in a period, unless there are multiple sentences", "author": "electrum", "createdAt": "2020-09-09T23:20:07Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/azure/PrestoAzureConfigurationInitializer.java", "diffHunk": "@@ -36,39 +36,37 @@\n     private final Optional<String> abfsAccessKey;\n     private final Optional<String> abfsStorageAccount;\n \n+    private static Optional<String> dropEmpty(Optional<String> optional)\n+    {\n+        return optional.filter(value -> !value.isEmpty());\n+    }\n+\n     @Inject\n-    public PrestoAzureConfigurationInitializer(HiveAzureConfig hiveAzureConfig)\n+    public PrestoAzureConfigurationInitializer(HiveAzureConfig config)\n     {\n-        this.wasbAccessKey = hiveAzureConfig.getWasbAccessKey();\n-        this.wasbStorageAccount = hiveAzureConfig.getWasbStorageAccount();\n+        this.wasbAccessKey = dropEmpty(config.getWasbAccessKey());\n+        this.wasbStorageAccount = dropEmpty(config.getWasbStorageAccount());\n         if (wasbAccessKey.isPresent() || wasbStorageAccount.isPresent()) {\n             checkArgument(\n-                    wasbAccessKey.isPresent() && !wasbAccessKey.get().isEmpty(),\n-                    \"hive.azure.wasb-storage-account is set, but hive.azure.wasb-access-key is not\");\n-            checkArgument(\n-                    wasbStorageAccount.isPresent() && !wasbStorageAccount.get().isEmpty(),\n-                    \"hive.azure.wasb-access-key is set, but hive.azure.wasb-storage-account is not\");\n+                    wasbAccessKey.isPresent() && wasbStorageAccount.isPresent(),\n+                    \"If WASB storage account or access key is set, both must be set.\");", "originalCommit": "5a65ddf606cb6befe3fc3e68945adb193eef437b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NDU5Ng==", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485974596", "bodyText": "This indentation seems off. Probably better not to wrap here", "author": "electrum", "createdAt": "2020-09-09T23:23:11Z", "path": "presto-hive-hadoop2/bin/common.sh", "diffHunk": "@@ -142,3 +142,54 @@ function get_hive_major_version() {\n     fi\n     echo \"${version}\"\n }\n+\n+# $1 = base URI for table names\n+function create_test_tables() {\n+    local table_name table_path\n+    local base_path=\"${1:?create_test_tables requires an argument}\"\n+    base_path=\"${base_path%/}\" # remove trailing slash\n+\n+    table_name=\"presto_test_external_fs\"\n+    table_path=\"$base_path/$table_name/\"\n+    exec_in_hadoop_master_container hadoop fs -mkdir -p \"${table_path}\"\n+    exec_in_hadoop_master_container hadoop fs -copyFromLocal -f /docker/files/test_table.csv{,.gz,.bz2,.lz4} \"${table_path}\"\n+    exec_in_hadoop_master_container /usr/bin/hive -e \"CREATE EXTERNAL TABLE $table_name(t_bigint bigint) LOCATION '${table_path}'\"\n+\n+    table_name=\"presto_test_external_fs_with_header\"\n+    table_path=\"$base_path/$table_name/\"\n+    exec_in_hadoop_master_container hadoop fs -mkdir -p \"${table_path}\"\n+    exec_in_hadoop_master_container hadoop fs -copyFromLocal -f /docker/files/test_table_with_header.csv{,.gz,.bz2,.lz4} \"${table_path}\"\n+    exec_in_hadoop_master_container /usr/bin/hive -e \"\n+        CREATE EXTERNAL TABLE $table_name(t_bigint bigint)\n+        STORED AS TEXTFILE\n+        LOCATION '${table_path}'\n+        TBLPROPERTIES ('skip.header.line.count'='1')\"\n+\n+    table_name=\"presto_test_external_fs_with_header_and_footer\"\n+    table_path=\"$base_path/$table_name/\"\n+    exec_in_hadoop_master_container hadoop fs -mkdir -p \"${table_path}\"\n+    exec_in_hadoop_master_container hadoop fs -copyFromLocal -f /docker/files/test_table_with_header_and_footer.csv{,.gz,.bz2,.lz4} \"${table_path}\"\n+    exec_in_hadoop_master_container /usr/bin/hive -e \"\n+        CREATE EXTERNAL TABLE $table_name(t_bigint bigint)\n+        STORED AS TEXTFILE\n+        LOCATION '${table_path}'\n+        TBLPROPERTIES ('skip.header.line.count'='2', 'skip.footer.line.count'='2')\"\n+}\n+\n+# $1 = basename of core-site.xml template\n+# other arguments are names of variables to substitute in the file\n+function deploy_core_site_xml() {\n+    local template=\"${1:?deploy_core_site_xml expects at least one argument}\"\n+    shift\n+    local args=()\n+    local name value\n+    for name; do\n+        shift\n+        value=\"${!name//\\\\/\\\\\\\\}\" # escape \\ as \\\\\n+        value=\"${value//|/\\\\|}\" # escape | as \\|\n+        args+=(-e \"s|%$name%|$value|g\")\n+    done\n+    exec_in_hadoop_master_container bash -c '\n+        sed \"${@:2}\" \"/docker/files/$1\" > /etc/hadoop/conf/core-site.xml' \\\n+                                    bash \"$template\" \"${args[@]}\"", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyNzcxNg==", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r486727716", "bodyText": "I've fixed the indentation, but the command being given to bash feels harder to follow when the line isn't wrapped.", "author": "jirassimok", "createdAt": "2020-09-11T01:55:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NDU5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NDk4MQ==", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485974981", "bodyText": "Wrap the environment variables to be consistent", "author": "electrum", "createdAt": "2020-09-09T23:24:24Z", "path": "presto-hive-hadoop2/bin/run_hive_abfs_tests.sh", "diffHunk": "@@ -12,43 +12,16 @@ cleanup_hadoop_docker_containers\n start_hadoop_docker_containers\n \n test_directory=\"$(date '+%Y%m%d-%H%M%S')-$(uuidgen | sha1sum | cut -b 1-6)\"\n-test_root=\"abfs://${ABFS_CONTAINER}@${ABFS_ACCOUNT}.dfs.core.windows.net/${test_directory}\"\n \n # insert Azure credentials\n # TODO replace core-site.xml.abfs-template with apply-site-xml-override.sh\n-exec_in_hadoop_master_container cp /docker/files/core-site.xml.abfs-template /etc/hadoop/conf/core-site.xml\n-exec_in_hadoop_master_container sed -i \\\n-    -e \"s|%ABFS_ACCESS_KEY%|${ABFS_ACCESS_KEY}|g\" \\\n-    -e \"s|%ABFS_ACCOUNT%|${ABFS_ACCOUNT}|g\" \\\n-    /etc/hadoop/conf/core-site.xml\n+deploy_core_site_xml core-site.xml.abfs-template ABFS_ACCESS_KEY ABFS_ACCOUNT", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NTQxNw==", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485975417", "bodyText": "I'm not even sure what this comment means. Let's remove it everywhere.", "author": "electrum", "createdAt": "2020-09-09T23:25:51Z", "path": "presto-hive-hadoop2/bin/run_hive_abfs_tests.sh", "diffHunk": "@@ -12,43 +12,16 @@ cleanup_hadoop_docker_containers\n start_hadoop_docker_containers\n \n test_directory=\"$(date '+%Y%m%d-%H%M%S')-$(uuidgen | sha1sum | cut -b 1-6)\"\n-test_root=\"abfs://${ABFS_CONTAINER}@${ABFS_ACCOUNT}.dfs.core.windows.net/${test_directory}\"\n \n # insert Azure credentials\n # TODO replace core-site.xml.abfs-template with apply-site-xml-override.sh", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NjYwNA==", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485976604", "bodyText": "Static import getValidConfigurationMetadata and format like\ngetValidConfigurationMetadata(HiveAzureConfig.class).getAttributes().values().stream()\n        .map(AttributeMetadata::getInjectionPoint)\n        .collect(toMap(InjectionPointMetaData::getProperty, InjectionPointMetaData::getSetter));", "author": "electrum", "createdAt": "2020-09-09T23:29:44Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/azure/TestPrestoAzureConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.azure;\n+\n+import io.airlift.configuration.ConfigurationMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.AttributeMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.InjectionPointMetaData;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.collect.Sets.combinations;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.fail;\n+\n+public class TestPrestoAzureConfigurationInitializer\n+{\n+    /**\n+     * Map from presto config property names to the corresponding\n+     * {@link HiveAzureConfig} setter method. Use via {@link #toConfig}.\n+     */\n+    private static final Map<String, Method> PROPERTY_SETTERS =\n+            ConfigurationMetadata.getValidConfigurationMetadata(HiveAzureConfig.class)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3Njc2Mg==", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485976762", "bodyText": "This is constant so it should be uppercase", "author": "electrum", "createdAt": "2020-09-09T23:30:13Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/azure/TestPrestoAzureConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.azure;\n+\n+import io.airlift.configuration.ConfigurationMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.AttributeMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.InjectionPointMetaData;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.collect.Sets.combinations;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.fail;\n+\n+public class TestPrestoAzureConfigurationInitializer\n+{\n+    /**\n+     * Map from presto config property names to the corresponding\n+     * {@link HiveAzureConfig} setter method. Use via {@link #toConfig}.\n+     */\n+    private static final Map<String, Method> PROPERTY_SETTERS =\n+            ConfigurationMetadata.getValidConfigurationMetadata(HiveAzureConfig.class)\n+                    .getAttributes()\n+                    .values()\n+                    .stream()\n+                    .map(AttributeMetadata::getInjectionPoint)\n+                    .collect(Collectors.toMap(\n+                            InjectionPointMetaData::getProperty,\n+                            InjectionPointMetaData::getSetter));\n+\n+    private static final Set<Set<String>> propertyGroups = Set.of(", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NjgzMQ==", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485976831", "bodyText": "Name it property. There should a space between [] and {", "author": "electrum", "createdAt": "2020-09-09T23:30:27Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/azure/TestPrestoAzureConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.azure;\n+\n+import io.airlift.configuration.ConfigurationMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.AttributeMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.InjectionPointMetaData;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.collect.Sets.combinations;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.fail;\n+\n+public class TestPrestoAzureConfigurationInitializer\n+{\n+    /**\n+     * Map from presto config property names to the corresponding\n+     * {@link HiveAzureConfig} setter method. Use via {@link #toConfig}.\n+     */\n+    private static final Map<String, Method> PROPERTY_SETTERS =\n+            ConfigurationMetadata.getValidConfigurationMetadata(HiveAzureConfig.class)\n+                    .getAttributes()\n+                    .values()\n+                    .stream()\n+                    .map(AttributeMetadata::getInjectionPoint)\n+                    .collect(Collectors.toMap(\n+                            InjectionPointMetaData::getProperty,\n+                            InjectionPointMetaData::getSetter));\n+\n+    private static final Set<Set<String>> propertyGroups = Set.of(\n+            Set.of(\n+                    \"hive.azure.abfs-storage-account\",\n+                    \"hive.azure.abfs-access-key\"),\n+            Set.of(\n+                    \"hive.azure.wasb-storage-account\",\n+                    \"hive.azure.wasb-access-key\"),\n+            Set.of(\n+                    \"hive.azure.adl-client-id\",\n+                    \"hive.azure.adl-credential\",\n+                    \"hive.azure.adl-refresh-url\"));\n+\n+    @DataProvider(parallel = true)\n+    public Iterator<Object[]> propertyGroups()\n+    {\n+        return propertyGroups.stream().map(p -> new Object[]{p}).iterator();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NzM0Ng==", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485977346", "bodyText": "Avoid using var here since the type is not clear.", "author": "electrum", "createdAt": "2020-09-09T23:32:21Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/azure/TestPrestoAzureConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.azure;\n+\n+import io.airlift.configuration.ConfigurationMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.AttributeMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.InjectionPointMetaData;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.collect.Sets.combinations;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.fail;\n+\n+public class TestPrestoAzureConfigurationInitializer\n+{\n+    /**\n+     * Map from presto config property names to the corresponding\n+     * {@link HiveAzureConfig} setter method. Use via {@link #toConfig}.\n+     */\n+    private static final Map<String, Method> PROPERTY_SETTERS =\n+            ConfigurationMetadata.getValidConfigurationMetadata(HiveAzureConfig.class)\n+                    .getAttributes()\n+                    .values()\n+                    .stream()\n+                    .map(AttributeMetadata::getInjectionPoint)\n+                    .collect(Collectors.toMap(\n+                            InjectionPointMetaData::getProperty,\n+                            InjectionPointMetaData::getSetter));\n+\n+    private static final Set<Set<String>> propertyGroups = Set.of(\n+            Set.of(\n+                    \"hive.azure.abfs-storage-account\",\n+                    \"hive.azure.abfs-access-key\"),\n+            Set.of(\n+                    \"hive.azure.wasb-storage-account\",\n+                    \"hive.azure.wasb-access-key\"),\n+            Set.of(\n+                    \"hive.azure.adl-client-id\",\n+                    \"hive.azure.adl-credential\",\n+                    \"hive.azure.adl-refresh-url\"));\n+\n+    @DataProvider(parallel = true)\n+    public Iterator<Object[]> propertyGroups()\n+    {\n+        return propertyGroups.stream().map(p -> new Object[]{p}).iterator();\n+    }\n+\n+    @Test(dataProvider = \"propertyGroups\")\n+    public void testPropertyGroups(Set<String> properties)\n+    {\n+        var config = toConfig(properties);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NzcyMQ==", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485977721", "bodyText": "No need for try/catch since the test will fail anyway if it throws", "author": "electrum", "createdAt": "2020-09-09T23:33:45Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/azure/TestPrestoAzureConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.azure;\n+\n+import io.airlift.configuration.ConfigurationMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.AttributeMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.InjectionPointMetaData;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.collect.Sets.combinations;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.fail;\n+\n+public class TestPrestoAzureConfigurationInitializer\n+{\n+    /**\n+     * Map from presto config property names to the corresponding\n+     * {@link HiveAzureConfig} setter method. Use via {@link #toConfig}.\n+     */\n+    private static final Map<String, Method> PROPERTY_SETTERS =\n+            ConfigurationMetadata.getValidConfigurationMetadata(HiveAzureConfig.class)\n+                    .getAttributes()\n+                    .values()\n+                    .stream()\n+                    .map(AttributeMetadata::getInjectionPoint)\n+                    .collect(Collectors.toMap(\n+                            InjectionPointMetaData::getProperty,\n+                            InjectionPointMetaData::getSetter));\n+\n+    private static final Set<Set<String>> propertyGroups = Set.of(\n+            Set.of(\n+                    \"hive.azure.abfs-storage-account\",\n+                    \"hive.azure.abfs-access-key\"),\n+            Set.of(\n+                    \"hive.azure.wasb-storage-account\",\n+                    \"hive.azure.wasb-access-key\"),\n+            Set.of(\n+                    \"hive.azure.adl-client-id\",\n+                    \"hive.azure.adl-credential\",\n+                    \"hive.azure.adl-refresh-url\"));\n+\n+    @DataProvider(parallel = true)\n+    public Iterator<Object[]> propertyGroups()\n+    {\n+        return propertyGroups.stream().map(p -> new Object[]{p}).iterator();\n+    }\n+\n+    @Test(dataProvider = \"propertyGroups\")\n+    public void testPropertyGroups(Set<String> properties)\n+    {\n+        var config = toConfig(properties);\n+        try {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3ODYzNg==", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r485978636", "bodyText": "While clever, this whole class is hard to read, hard to tell what it's doing, and hard to tell that it's correct. Test code should be a simple and clear as possible. Avoiding redundancy is not a goal. The fact that we're basically writing a framework to reflectively call methods says that this is too complicated.", "author": "electrum", "createdAt": "2020-09-09T23:36:40Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/azure/TestPrestoAzureConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.azure;\n+\n+import io.airlift.configuration.ConfigurationMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.AttributeMetadata;\n+import io.airlift.configuration.ConfigurationMetadata.InjectionPointMetaData;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.google.common.collect.Sets.combinations;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.fail;\n+\n+public class TestPrestoAzureConfigurationInitializer", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NTI1NA==", "url": "https://github.com/trinodb/trino/pull/4889#discussion_r486745254", "bodyText": "Yes, I overdid this a bit.\nMy first thought for how to simplify is to replace PROPERTY_SETTERS with a literal map listing the actual setters. That eliminates the reflection, but leaves most of the other complexity and still has helpful test output (including property names).\nMy second thought is to remove the property names entirely and replace the whole thing with a setup that has tests that look like this:\n@Test\npublic void testAbfsAccessKey() {\n    testPropertyGroup(HiveAzureConfig::setAbfsAccessKey, HiveAzureConfig::setAbfsStorageAccount);\n}\n\nThe class is much easier to follow.\nOn second thought, I'll just go with the second idea. These properties aren't complicated enough that the tests really need to output exactly which properties are set.", "author": "jirassimok", "createdAt": "2020-09-11T03:00:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3ODYzNg=="}], "type": "inlineReview"}, {"oid": "d395e71a24a3035e9f509adedaa8b2507c508a0f", "url": "https://github.com/trinodb/trino/commit/d395e71a24a3035e9f509adedaa8b2507c508a0f", "message": "Clean up PrestoAzureConfigurationInitializer\n\n- Rename 'hiveAzureConfig' parameter to 'config'\n- Add method to convert empty strings to empty optionals\n- Make error messages more uniform", "committedDate": "2020-09-11T00:10:18Z", "type": "commit"}, {"oid": "3ff97f9db2eea5faaa87d74fe51ce4177c743992", "url": "https://github.com/trinodb/trino/commit/3ff97f9db2eea5faaa87d74fe51ce4177c743992", "message": "Fix indentation and line continuations in hive test scripts", "committedDate": "2020-09-11T00:10:22Z", "type": "commit"}, {"oid": "c25aa63a2abfc55a94eef76d7309e202bfb26f4c", "url": "https://github.com/trinodb/trino/commit/c25aa63a2abfc55a94eef76d7309e202bfb26f4c", "message": "Add tests for PrestoAzureConfigurationInitializer", "committedDate": "2020-09-11T03:06:29Z", "type": "forcePushed"}, {"oid": "60ec5d357a3244bf846b3af1ffc957c8961959f9", "url": "https://github.com/trinodb/trino/commit/60ec5d357a3244bf846b3af1ffc957c8961959f9", "message": "Share more setup code between hive test scripts", "committedDate": "2020-09-14T20:35:32Z", "type": "commit"}, {"oid": "c843802bbb92b0a90b0f40e8d20d19d88816c17b", "url": "https://github.com/trinodb/trino/commit/c843802bbb92b0a90b0f40e8d20d19d88816c17b", "message": "Rename ABFS tests as ABFS access key tests", "committedDate": "2020-09-14T20:35:36Z", "type": "commit"}, {"oid": "baf442855b324212544bece9e46cce164db7bdc6", "url": "https://github.com/trinodb/trino/commit/baf442855b324212544bece9e46cce164db7bdc6", "message": "Add superclass for tests using different ABFS authentication methods", "committedDate": "2020-09-14T20:35:36Z", "type": "commit"}, {"oid": "34fa1a12644d866099520cdd026b9217a785918b", "url": "https://github.com/trinodb/trino/commit/34fa1a12644d866099520cdd026b9217a785918b", "message": "Move TestHiveAzureConfig to azure package", "committedDate": "2020-09-14T20:35:36Z", "type": "commit"}, {"oid": "989a130f5f58391397425ea8993a1ecf53562d88", "url": "https://github.com/trinodb/trino/commit/989a130f5f58391397425ea8993a1ecf53562d88", "message": "Add tests for PrestoAzureConfigurationInitializer", "committedDate": "2020-09-14T20:35:36Z", "type": "commit"}, {"oid": "989a130f5f58391397425ea8993a1ecf53562d88", "url": "https://github.com/trinodb/trino/commit/989a130f5f58391397425ea8993a1ecf53562d88", "message": "Add tests for PrestoAzureConfigurationInitializer", "committedDate": "2020-09-14T20:35:36Z", "type": "forcePushed"}]}