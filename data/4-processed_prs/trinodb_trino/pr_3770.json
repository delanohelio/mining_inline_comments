{"pr_number": 3770, "pr_title": "Add Oracle connection pool", "pr_createdAt": "2020-05-18T10:01:00Z", "pr_url": "https://github.com/trinodb/trino/pull/3770", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNDA2Mg==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r426534062", "bodyText": "Can we have an interface for ConnectionProvider and have implementation for for both pooledDataSource and a driver based one and bind them in the run time ?", "author": "Praveen2112", "createdAt": "2020-05-18T10:43:10Z", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConnectorFactory.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.oracle;\n+\n+import io.prestosql.plugin.jdbc.BaseJdbcConfig;\n+import io.prestosql.plugin.jdbc.ConnectionFactory;\n+import io.prestosql.plugin.jdbc.JdbcIdentity;\n+import io.prestosql.plugin.jdbc.credential.CredentialProvider;\n+import oracle.jdbc.OracleConnection;\n+import oracle.jdbc.OracleDriver;\n+import oracle.ucp.jdbc.PoolDataSource;\n+import oracle.ucp.jdbc.PoolDataSourceFactory;\n+\n+import java.sql.Connection;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.util.Objects.requireNonNull;\n+\n+public class OracleConnectorFactory\n+        implements ConnectionFactory\n+{\n+    private final String connectionUrl;\n+    private final boolean connectionPoolEnabled;\n+    private final int connectionPoolMinSize;\n+    private final int connectionPoolMaxSize;\n+    private final Properties connectionProperties;\n+    private final CredentialProvider credentialProvider;\n+\n+    private PoolDataSource pds;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwOTQ2NA==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r426809464", "bodyText": "hi @Praveen2112, I change this factory to be only a pool factory..\nfor driver based I leave the DriverConnectorFactory that is already used..\nthis was a old code from previous PR.\nif you could check this changes.", "author": "eskabetxe", "createdAt": "2020-05-18T18:14:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUzNDA2Mg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3OTQ4OQ==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r429879489", "bodyText": "IMO running whole DistributedQueries is superfluous. It adds a lot of test runtime. TestOraclePoolIntegrationSmokeTest should be enough.", "author": "losipiuk", "createdAt": "2020-05-25T11:16:06Z", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOraclePoolDistributedQueries.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.oracle;\n+\n+import io.prestosql.testing.QueryRunner;\n+import io.prestosql.tpch.TpchTable;\n+\n+public class TestOraclePoolDistributedQueries", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyMzQ1Mg==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430023452", "bodyText": "done", "author": "eskabetxe", "createdAt": "2020-05-25T17:13:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3OTQ4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MDA1Mw==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r429880053", "bodyText": "Please extract separate commit Extract a variable with Oracle JDBC version", "author": "losipiuk", "createdAt": "2020-05-25T11:17:39Z", "path": "presto-oracle/pom.xml", "diffHunk": "@@ -16,13 +16,20 @@\n \n     <properties>\n         <air.main.basedir>${project.parent.basedir}</air.main.basedir>\n+        <dep.oracle.version>19.3.0.0</dep.oracle.version>", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyMzQwOA==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430023408", "bodyText": "done", "author": "eskabetxe", "createdAt": "2020-05-25T17:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MDA1Mw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE5NTY4OQ==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430195689", "bodyText": "Is there a reason to have connection pooling disable by default? I would suggest having true here.", "author": "losipiuk", "createdAt": "2020-05-26T07:01:18Z", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleConfig.java", "diffHunk": "@@ -33,6 +33,9 @@ public void testDefaults()\n                 .setVarcharMaxSize(4000)\n                 .setTimestampDefaultPrecision(6)\n                 .setNumberDefaultScale(10)\n+                .setConnectionPoolEnabled(false)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0Mjc3Ng==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430242776", "bodyText": "none.. changed", "author": "eskabetxe", "createdAt": "2020-05-26T08:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE5NTY4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE5ODM4OA==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430198388", "bodyText": "Inline this back it is no longer needed .", "author": "losipiuk", "createdAt": "2020-05-26T07:07:22Z", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOracleDistributedQueries.java", "diffHunk": "@@ -47,9 +47,13 @@ protected QueryRunner createQueryRunner()\n             throws Exception\n     {\n         this.oracleServer = new TestingOracleServer();\n-        return OracleQueryRunner.createOracleQueryRunner(\n-                oracleServer,\n-                TpchTable.getTables());\n+        return createOracleQueryRunner(oracleServer, TpchTable.getTables());\n+    }\n+\n+    protected QueryRunner createOracleQueryRunner(TestingOracleServer server, Iterable<TpchTable<?>> tables)\n+            throws Exception\n+    {\n+        return OracleQueryRunner.createOracleQueryRunner(server, tables);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0MjgxNQ==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430242815", "bodyText": "done", "author": "eskabetxe", "createdAt": "2020-05-26T08:29:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE5ODM4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwMDMwMg==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430200302", "bodyText": "Please extract abstract BaseOracleIntegrationSmokeTest with all the test changes needed for Oracle, but with createQueryRunner not implemented.\nAnd then derive TestOraclePoolIntegrationSmokeTest and TestOracleIntegrationSmokeTest from it.\nWith that we do not extend non-abstract class. And we can get rid of createOracleQueryRunner.", "author": "losipiuk", "createdAt": "2020-05-26T07:11:20Z", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOraclePoolIntegrationSmokeTest.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.oracle;\n+\n+import io.prestosql.testing.QueryRunner;\n+import io.prestosql.tpch.TpchTable;\n+\n+public class TestOraclePoolIntegrationSmokeTest\n+        extends TestOracleIntegrationSmokeTest", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0NTIxMg==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430245212", "bodyText": "@losipiuk I left the createOracleQueryRunner, so initialization of server and table definition could be on BaseTest as this are equal to both implementations", "author": "eskabetxe", "createdAt": "2020-05-26T08:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwMDMwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwOTU1NQ==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430309555", "bodyText": "rename connectionPool to dataSource", "author": "losipiuk", "createdAt": "2020-05-26T10:23:00Z", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OraclePoolConnectorFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.oracle;\n+\n+import io.prestosql.plugin.jdbc.ConnectionFactory;\n+import io.prestosql.plugin.jdbc.JdbcIdentity;\n+import io.prestosql.plugin.jdbc.credential.CredentialProvider;\n+import oracle.ucp.jdbc.PoolDataSource;\n+import oracle.ucp.jdbc.PoolDataSourceFactory;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+public class OraclePoolConnectorFactory\n+        implements ConnectionFactory\n+{\n+    private final PoolDataSource connectionPool;\n+    private final CredentialProvider credentialProvider;\n+\n+    public OraclePoolConnectorFactory(\n+            String connectionUrl,\n+            Properties connectionProperties,\n+            CredentialProvider credentialProvider,\n+            int connectionPoolMinSize,\n+            int connectionPoolMaxSize)\n+            throws SQLException\n+    {\n+        this.credentialProvider = credentialProvider;\n+        this.connectionPool = PoolDataSourceFactory.getPoolDataSource();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzMjkwMA==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430332900", "bodyText": "done", "author": "eskabetxe", "createdAt": "2020-05-26T11:08:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwOTU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxMDc1Mg==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430310752", "bodyText": "I would suggest adding connectionPool.setValidateConnectionOnBorrow(true);", "author": "losipiuk", "createdAt": "2020-05-26T10:25:19Z", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OraclePoolConnectorFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.oracle;\n+\n+import io.prestosql.plugin.jdbc.ConnectionFactory;\n+import io.prestosql.plugin.jdbc.JdbcIdentity;\n+import io.prestosql.plugin.jdbc.credential.CredentialProvider;\n+import oracle.ucp.jdbc.PoolDataSource;\n+import oracle.ucp.jdbc.PoolDataSourceFactory;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+public class OraclePoolConnectorFactory\n+        implements ConnectionFactory\n+{\n+    private final PoolDataSource connectionPool;\n+    private final CredentialProvider credentialProvider;\n+\n+    public OraclePoolConnectorFactory(\n+            String connectionUrl,\n+            Properties connectionProperties,\n+            CredentialProvider credentialProvider,\n+            int connectionPoolMinSize,\n+            int connectionPoolMaxSize)\n+            throws SQLException\n+    {\n+        this.credentialProvider = credentialProvider;\n+        this.connectionPool = PoolDataSourceFactory.getPoolDataSource();\n+\n+        //Setting connection properties of the data source\n+        this.connectionPool.setConnectionFactoryClassName(\"oracle.jdbc.pool.OracleDataSource\");\n+        this.connectionPool.setURL(connectionUrl);\n+\n+        //Setting pool properties\n+        this.connectionPool.setInitialPoolSize(connectionPoolMinSize);\n+        this.connectionPool.setMinPoolSize(connectionPoolMinSize);\n+        this.connectionPool.setMaxPoolSize(connectionPoolMaxSize);\n+        this.connectionPool.setConnectionProperties(connectionProperties);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzMjk3Nw==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r430332977", "bodyText": "done", "author": "eskabetxe", "createdAt": "2020-05-26T11:08:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxMDc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MjAxNg==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r431392016", "bodyText": "Nit: remove leading space", "author": "electrum", "createdAt": "2020-05-27T19:28:02Z", "path": "presto-oracle/pom.xml", "diffHunk": "@@ -16,13 +16,20 @@\n \n     <properties>\n         <air.main.basedir>${project.parent.basedir}</air.main.basedir>\n+        <dep.oracle.version>19.3.0.0</dep.oracle.version>\n     </properties>\n \n     <dependencies>\n         <dependency>\n             <groupId>com.oracle.ojdbc</groupId>\n             <artifactId>ojdbc8</artifactId>\n-            <version>19.3.0.0</version>\n+            <version>${dep.oracle.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId> com.oracle.ojdbc</groupId>", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMzQ0Mw==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r431423443", "bodyText": "done", "author": "eskabetxe", "createdAt": "2020-05-27T20:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MjAxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MjE5Mg==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r431392192", "bodyText": "Nit: the \"else\" is redundant since the above always returns", "author": "electrum", "createdAt": "2020-05-27T19:28:24Z", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClientModule.java", "diffHunk": "@@ -51,10 +51,20 @@ public static ConnectionFactory connectionFactory(BaseJdbcConfig config, Credent\n         Properties connectionProperties = new Properties();\n         connectionProperties.setProperty(OracleConnection.CONNECTION_PROPERTY_INCLUDE_SYNONYMS, String.valueOf(oracleConfig.isSynonymsEnabled()));\n \n-        return new DriverConnectionFactory(\n-                new OracleDriver(),\n-                config.getConnectionUrl(),\n-                connectionProperties,\n-                credentialProvider);\n+        if (oracleConfig.isConnectionPoolEnabled()) {\n+            return new OraclePoolConnectorFactory(\n+                    config.getConnectionUrl(),\n+                    connectionProperties,\n+                    credentialProvider,\n+                    oracleConfig.getConnectionPoolMinSize(),\n+                    oracleConfig.getConnectionPoolMaxSize());\n+        }\n+        else {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMzQxNg==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r431423416", "bodyText": "done", "author": "eskabetxe", "createdAt": "2020-05-27T20:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MjE5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MzUzNQ==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r431393535", "bodyText": "Can this be 0?", "author": "electrum", "createdAt": "2020-05-27T19:30:47Z", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -95,4 +98,43 @@ public OracleConfig setTimestampDefaultPrecision(int timestampDefaultPrecision)\n         this.timestampDefaultPrecision = timestampDefaultPrecision;\n         return this;\n     }\n+\n+    @NotNull\n+    public boolean isConnectionPoolEnabled()\n+    {\n+        return connectionPoolEnabled;\n+    }\n+\n+    @Config(\"oracle.connection-pool.enabled\")\n+    public OracleConfig setConnectionPoolEnabled(boolean connectionPoolEnabled)\n+    {\n+        this.connectionPoolEnabled = connectionPoolEnabled;\n+        return this;\n+    }\n+\n+    @Min(1)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxOTIzNA==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r431419234", "bodyText": "yes it can..\nhttps://docs.oracle.com/cd/B28359_01/java.111/e10788/optimize.htm#CFHHCICE\nchanged", "author": "eskabetxe", "createdAt": "2020-05-27T20:21:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MzUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NDA4NQ==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r431394085", "bodyText": "Add a validation:\n@AssertTrue(message = \"Pool min size cannot be larger than max size\")\npublic boolean isPoolSizedProperly()\n{\n    return getMaxPoolSize() >= getMinPoolSize();\n}", "author": "electrum", "createdAt": "2020-05-27T19:31:47Z", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -95,4 +98,43 @@ public OracleConfig setTimestampDefaultPrecision(int timestampDefaultPrecision)\n         this.timestampDefaultPrecision = timestampDefaultPrecision;\n         return this;\n     }\n+\n+    @NotNull\n+    public boolean isConnectionPoolEnabled()\n+    {\n+        return connectionPoolEnabled;\n+    }\n+\n+    @Config(\"oracle.connection-pool.enabled\")\n+    public OracleConfig setConnectionPoolEnabled(boolean connectionPoolEnabled)\n+    {\n+        this.connectionPoolEnabled = connectionPoolEnabled;\n+        return this;\n+    }\n+\n+    @Min(1)\n+    public int getConnectionPoolMinSize()\n+    {\n+        return connectionPoolMinSize;\n+    }\n+\n+    @Config(\"oracle.connection-pool.min-size\")\n+    public OracleConfig setConnectionPoolMinSize(int connectionPoolMinSize)\n+    {\n+        this.connectionPoolMinSize = connectionPoolMinSize;\n+        return this;\n+    }\n+\n+    @Min(1)\n+    public int getConnectionPoolMaxSize()\n+    {\n+        return connectionPoolMaxSize;\n+    }\n+\n+    @Config(\"oracle.connection-pool.max-size\")\n+    public OracleConfig setConnectionPoolMaxSize(int connectionPoolMaxSize)\n+    {\n+        this.connectionPoolMaxSize = connectionPoolMaxSize;\n+        return this;\n+    }\n }", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMjg3MQ==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r431422871", "bodyText": "done", "author": "eskabetxe", "createdAt": "2020-05-27T20:29:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NDA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NTkyMA==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r431395920", "bodyText": "Can we use OracleDataSource.class.getName() here?", "author": "electrum", "createdAt": "2020-05-27T19:35:15Z", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OraclePoolConnectorFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.oracle;\n+\n+import io.prestosql.plugin.jdbc.ConnectionFactory;\n+import io.prestosql.plugin.jdbc.JdbcIdentity;\n+import io.prestosql.plugin.jdbc.credential.CredentialProvider;\n+import oracle.ucp.jdbc.PoolDataSource;\n+import oracle.ucp.jdbc.PoolDataSourceFactory;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+public class OraclePoolConnectorFactory\n+        implements ConnectionFactory\n+{\n+    private final PoolDataSource connectionPool;\n+    private final CredentialProvider credentialProvider;\n+\n+    public OraclePoolConnectorFactory(\n+            String connectionUrl,\n+            Properties connectionProperties,\n+            CredentialProvider credentialProvider,\n+            int connectionPoolMinSize,\n+            int connectionPoolMaxSize)\n+            throws SQLException\n+    {\n+        this.credentialProvider = credentialProvider;\n+        this.connectionPool = PoolDataSourceFactory.getPoolDataSource();\n+\n+        //Setting connection properties of the data source\n+        this.connectionPool.setConnectionFactoryClassName(\"oracle.jdbc.pool.OracleDataSource\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMjgzOA==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r431422838", "bodyText": "done", "author": "eskabetxe", "createdAt": "2020-05-27T20:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NTkyMA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1MTA0MA==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r436551040", "bodyText": "nit: add tests for validation constraints", "author": "losipiuk", "createdAt": "2020-06-08T09:00:23Z", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleConfig.java", "diffHunk": "@@ -67,4 +71,49 @@ public OracleConfig setNumberRoundingMode(RoundingMode numberRoundingMode)\n         this.numberRoundingMode = numberRoundingMode;\n         return this;\n     }\n+\n+    @NotNull\n+    public boolean isConnectionPoolEnabled()\n+    {\n+        return connectionPoolEnabled;\n+    }\n+\n+    @Config(\"oracle.connection-pool.enabled\")\n+    public OracleConfig setConnectionPoolEnabled(boolean connectionPoolEnabled)\n+    {\n+        this.connectionPoolEnabled = connectionPoolEnabled;\n+        return this;\n+    }\n+\n+    @Min(0)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMjQyOQ==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r440002429", "bodyText": "done", "author": "eskabetxe", "createdAt": "2020-06-15T08:12:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU1MTA0MA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNjU1NQ==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r440106555", "bodyText": "This is being added in Extract a variable with Oracle JDBC version commit. Does not look intentional.\n(Not sure why would you want to separate this btw, but maybe this was agreed upon)", "author": "findepi", "createdAt": "2020-06-15T11:22:10Z", "path": "presto-oracle/pom.xml", "diffHunk": "@@ -14,13 +14,20 @@\n \n     <properties>\n         <air.main.basedir>${project.parent.basedir}</air.main.basedir>\n+        <dep.oracle.version>19.3.0.0</dep.oracle.version>\n     </properties>\n \n     <dependencies>\n         <dependency>\n             <groupId>com.oracle.ojdbc</groupId>\n             <artifactId>ojdbc8</artifactId>\n-            <version>19.3.0.0</version>\n+            <version>${dep.oracle.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId> com.oracle.ojdbc</groupId>\n+            <artifactId>ucp</artifactId>", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzMTcyNw==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r440131727", "bodyText": "was asked here #3770 (comment)\nI let the new dependency because extracting only the version will lead to a \"why extract the version if only used in one dependency\"", "author": "eskabetxe", "createdAt": "2020-06-15T12:13:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNjU1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5NTI4MQ==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r440195281", "bodyText": "I think that at the time i suggested extracting the commit there was just one use of dep.oracle.version. But maybe I missed the other one.\nAnyway.\n\nEither leave commit which extract variable and only use it for ojdbc8 entry. And then add ucp in followup commit together with pooling implementation.\nOr squash two commits together.\n\nI am slightly toward former one.", "author": "losipiuk", "createdAt": "2020-06-15T13:58:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNjU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNzM2Ng==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r440107366", "bodyText": "the Oracle IntegrationTest cleanups should not be a separate commit\n(we should not add TestOraclePoolIntegrationSmokeTest being a copy of TestOracleIntegrationSmokeTest` and only then  extract common super class)", "author": "findepi", "createdAt": "2020-06-15T11:23:56Z", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/TestOraclePoolIntegrationSmokeTest.java", "diffHunk": "@@ -13,82 +13,16 @@\n  */\n package io.prestosql.plugin.oracle;\n \n-import io.prestosql.testing.AbstractTestIntegrationSmokeTest;\n-import io.prestosql.testing.MaterializedResult;\n import io.prestosql.testing.QueryRunner;\n import io.prestosql.tpch.TpchTable;\n-import org.testcontainers.shaded.com.google.common.collect.ImmutableList;\n-import org.testng.SkipException;\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.Test;\n-\n-import static io.prestosql.spi.type.VarcharType.VARCHAR;\n-import static io.prestosql.testing.assertions.Assert.assertEquals;\n-import static io.prestosql.tpch.TpchTable.*;\n-import static io.prestosql.tpch.TpchTable.REGION;\n-import static org.assertj.core.api.Assertions.assertThat;\n \n public class TestOraclePoolIntegrationSmokeTest\n-        extends AbstractTestIntegrationSmokeTest\n+        extends BaseOracleIntegrationSmokeTest", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzNDE5OQ==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r440134199", "bodyText": "should I squash the 3 commits?", "author": "eskabetxe", "createdAt": "2020-06-15T12:17:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNzM2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5ODY3Mw==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r440198673", "bodyText": "It should be either:\n2 commits:\n\nrafactor tests extractin BaseOracleIntegrationSmokeTest (still with 1 concrete subclass TestOracleIntegrationSmokeTest)\nimplement pooling and add TestOraclePoolIntegrationSmokeTest \n\nOr just 1 commit which refactors tests, add pooling implementation and TestOraclePoolIntegrationSmokeTest alltogether.", "author": "losipiuk", "createdAt": "2020-06-15T14:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNzM2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIxNzg3NA==", "url": "https://github.com/trinodb/trino/pull/3770#discussion_r440217874", "bodyText": "I guess the OracleQueryRunner changes can be treated as a separate commit while other the tests can be a part of Add Oracle connection pool", "author": "Praveen2112", "createdAt": "2020-06-15T14:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNzM2Ng=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "2092bcc8953f1178919de16a4ebb00419336f54f", "url": "https://github.com/trinodb/trino/commit/2092bcc8953f1178919de16a4ebb00419336f54f", "message": "Extract variable with Oracle JDBC version", "committedDate": "2020-07-07T08:48:37Z", "type": "commit"}, {"oid": "39f2211eb3f54fe458a9fef80bdfeae795a13154", "url": "https://github.com/trinodb/trino/commit/39f2211eb3f54fe458a9fef80bdfeae795a13154", "message": "Clean OracleQueryRunner method overload", "committedDate": "2020-07-07T08:48:37Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "0c877859e71286a9c233834690d49ae3e2607da8", "url": "https://github.com/trinodb/trino/commit/0c877859e71286a9c233834690d49ae3e2607da8", "message": "Add Oracle connection pool", "committedDate": "2020-07-07T09:56:08Z", "type": "commit"}, {"oid": "0c877859e71286a9c233834690d49ae3e2607da8", "url": "https://github.com/trinodb/trino/commit/0c877859e71286a9c233834690d49ae3e2607da8", "message": "Add Oracle connection pool", "committedDate": "2020-07-07T09:56:08Z", "type": "forcePushed"}]}