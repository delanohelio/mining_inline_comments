{"pr_number": 3476, "pr_title": "Add project-off rule for IndexJoinNode", "pr_createdAt": "2020-04-18T22:49:35Z", "pr_url": "https://github.com/trinodb/trino/pull/3476", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNjUzMQ==", "url": "https://github.com/trinodb/trino/pull/3476#discussion_r411626531", "bodyText": "Use Java streams instead of Guava Iterables. Since the streams APIs were added to Java, we've been slowly migrating away from Guava's implementation.", "author": "martint", "createdAt": "2020-04-20T19:15:50Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneIndexJoinColumns.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.plan.IndexJoinNode;\n+import io.prestosql.sql.planner.plan.PlanNode;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static io.prestosql.sql.planner.iterative.rule.Util.restrictChildOutputs;\n+import static io.prestosql.sql.planner.plan.Patterns.indexJoin;\n+\n+public class PruneIndexJoinColumns\n+        extends ProjectOffPushDownRule<IndexJoinNode>\n+{\n+    public PruneIndexJoinColumns()\n+    {\n+        super(indexJoin());\n+    }\n+\n+    @Override\n+    protected Optional<PlanNode> pushDownProjectOff(Context context, IndexJoinNode indexJoinNode, Set<Symbol> referencedOutputs)\n+    {\n+        ImmutableSet.Builder<Symbol> probeInputs = ImmutableSet.<Symbol>builder()\n+                .addAll(referencedOutputs)\n+                .addAll(Iterables.transform(indexJoinNode.getCriteria(), IndexJoinNode.EquiJoinClause::getProbe));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNzk2MQ==", "url": "https://github.com/trinodb/trino/pull/3476#discussion_r411627961", "bodyText": "What does \"maker\" mean for the variable name? Was it supposed to be \"marker\" (i.e., a typo)?", "author": "martint", "createdAt": "2020-04-20T19:18:11Z", "path": "presto-main/src/test/java/io/prestosql/sql/planner/assertions/IndexJoinMatcher.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.assertions;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.cost.StatsProvider;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.sql.planner.plan.IndexJoinNode;\n+import io.prestosql.sql.planner.plan.PlanNode;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+import static io.prestosql.sql.planner.assertions.MatchResult.NO_MATCH;\n+import static java.util.Objects.requireNonNull;\n+\n+final class IndexJoinMatcher\n+        implements Matcher\n+{\n+    private final IndexJoinNode.Type type;\n+    private final List<ExpectedValueProvider<IndexJoinNode.EquiJoinClause>> criteria;\n+    private final Optional<PlanTestSymbol> probeHashSymbol;\n+    private final Optional<PlanTestSymbol> indexHashSymbol;\n+\n+    IndexJoinMatcher(\n+            IndexJoinNode.Type type,\n+            List<ExpectedValueProvider<IndexJoinNode.EquiJoinClause>> criteria,\n+            Optional<PlanTestSymbol> probeHashSymbol,\n+            Optional<PlanTestSymbol> indexHashSymbol)\n+    {\n+        this.type = requireNonNull(type, \"type is null\");\n+        this.criteria = requireNonNull(criteria, \"criteria is null\");\n+        this.probeHashSymbol = requireNonNull(probeHashSymbol, \"probeHashSymbol is null\");\n+        this.indexHashSymbol = requireNonNull(indexHashSymbol, \"indexHashSymbol is null\");\n+    }\n+\n+    @Override\n+    public boolean shapeMatches(PlanNode node)\n+    {\n+        if (!(node instanceof IndexJoinNode)) {\n+            return false;\n+        }\n+\n+        IndexJoinNode indexJoinNode = (IndexJoinNode) node;\n+        return indexJoinNode.getType() == type;\n+    }\n+\n+    @Override\n+    public MatchResult detailMatches(PlanNode node, StatsProvider stats, Session session, Metadata metadata, SymbolAliases symbolAliases)\n+    {\n+        checkState(shapeMatches(node), \"Plan testing framework error: shapeMatches returned false in detailMatches in %s\", this.getClass().getName());\n+        IndexJoinNode indexJoinNode = (IndexJoinNode) node;\n+\n+        if (indexJoinNode.getCriteria().size() != criteria.size()) {\n+            return NO_MATCH;\n+        }\n+        Set<IndexJoinNode.EquiJoinClause> actualCriteria = ImmutableSet.copyOf(indexJoinNode.getCriteria());\n+        Set<IndexJoinNode.EquiJoinClause> expectedCriteria = criteria.stream()\n+                .map(maker -> maker.getExpectedValue(symbolAliases))", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "bfce2810848a7abf4b1abe4c7839254ee0e92e06", "url": "https://github.com/trinodb/trino/commit/bfce2810848a7abf4b1abe4c7839254ee0e92e06", "message": "Remove redundant check", "committedDate": "2020-04-20T19:42:29Z", "type": "commit"}, {"oid": "e981c5e2d92b2e7df18d47850de50e1c5ead181b", "url": "https://github.com/trinodb/trino/commit/e981c5e2d92b2e7df18d47850de50e1c5ead181b", "message": "Add project-off rule for IndexJoinNode", "committedDate": "2020-04-20T19:43:53Z", "type": "commit"}, {"oid": "e981c5e2d92b2e7df18d47850de50e1c5ead181b", "url": "https://github.com/trinodb/trino/commit/e981c5e2d92b2e7df18d47850de50e1c5ead181b", "message": "Add project-off rule for IndexJoinNode", "committedDate": "2020-04-20T19:43:53Z", "type": "forcePushed"}]}