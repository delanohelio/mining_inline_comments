{"pr_number": 3627, "pr_title": "Prevent HMS from collecting stats when creating external tables", "pr_createdAt": "2020-05-05T12:12:35Z", "pr_url": "https://github.com/trinodb/trino/pull/3627", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3NTIyOQ==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r420075229", "bodyText": "Is it suitable to external tables only?\n(it's likely, but please mention this in a comment or link to apache/hive repo, to the place where this is being if-d on)", "author": "findepi", "createdAt": "2020-05-05T12:37:42Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1061,6 +1061,9 @@ private static Table buildTableObject(\n \n         if (external) {\n             tableParameters.put(\"EXTERNAL\", \"TRUE\");\n+            // collecting stats (like number of files) at table creation time can cause the the DDL statement to time out\n+            // when the table location contains a large number of files\n+            tableParameters.put(\"DO_NOT_UPDATE_STATS\", \"true\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3Njg2Mg==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r420076862", "bodyText": "Also, do we need to fill tableParameters, or only the EnvironmentContext?", "author": "findepi", "createdAt": "2020-05-05T12:40:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3NTIyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI1Mjg1Mg==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r420252852", "bodyText": "Is it suitable to external tables only?\n\nI tried to restrict to external table creation because managed tables cannot be created in a location that already contains data, so they're not affected by this problem.  Hive doesn't really make a distinction.\n\nAlso, do we need to fill tableParameters, or only the EnvironmentContext?\n\nI was initially using table parameters as a vehicle to inform ThriftHiveMetastore that it needed to make a different call.  But after our offline conversation where you pointed out that we needed to support Hive 1.x, I discovered that the context parameter is ignored in that version, however the table property is honored.", "author": "aalbu", "createdAt": "2020-05-05T16:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3NTIyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3NjE5Nw==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r420076197", "bodyText": "Does it have to be conditional?\nI don't think there is a situation where I would want metastore to collect the basic stats (we update them for managed tables, and for external tables you are now disabling them)", "author": "findepi", "createdAt": "2020-05-05T12:39:18Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftHiveMetastore.java", "diffHunk": "@@ -1064,7 +1065,31 @@ public void alterTable(HiveIdentity identity, String databaseName, String tableN\n                     .stopOnIllegalExceptions()\n                     .run(\"alterTable\", stats.getAlterTable().wrap(() -> {\n                         try (ThriftMetastoreClient client = createMetastoreClient(identity)) {\n-                            client.alterTable(databaseName, tableName, table);\n+                            Map<String, String> tableParameters = table.getParameters();\n+                            String statsParam = \"DO_NOT_UPDATE_STATS\";\n+                            if (\"true\".equals(tableParameters.get(statsParam))) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0OTMzMQ==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r420249331", "bodyText": "I was trying to minimize the number of code paths affected by this change, because I didn't fully understand potential consequences.\nNow that you mention it, we don't need the stats collected by Hive anyway, so it would make sense to make this unconditional.", "author": "aalbu", "createdAt": "2020-05-05T16:38:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3NjE5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3NzQwNw==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r420077407", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    chosenGetTableAlternative,\n          \n          \n            \n                                                    chosenAlterTableAlternative,", "author": "findepi", "createdAt": "2020-05-05T12:41:22Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftHiveMetastore.java", "diffHunk": "@@ -1064,7 +1065,31 @@ public void alterTable(HiveIdentity identity, String databaseName, String tableN\n                     .stopOnIllegalExceptions()\n                     .run(\"alterTable\", stats.getAlterTable().wrap(() -> {\n                         try (ThriftMetastoreClient client = createMetastoreClient(identity)) {\n-                            client.alterTable(databaseName, tableName, table);\n+                            Map<String, String> tableParameters = table.getParameters();\n+                            String statsParam = \"DO_NOT_UPDATE_STATS\";\n+                            if (\"true\".equals(tableParameters.get(statsParam))) {\n+                                EnvironmentContext context = new EnvironmentContext();\n+                                context.setProperties(ImmutableMap.of(statsParam, \"true\"));\n+                                // the DO_NOT_UPDATE_STATS is not supposed to be a persistent parameter\n+                                table.setParameters(tableParameters.entrySet().stream()\n+                                        .filter(entry -> !statsParam.equals(entry.getKey()))\n+                                        .collect(toImmutableMap(Map.Entry::getKey, Map.Entry::getValue)));\n+                                alternativeCall(\n+                                        () -> client,\n+                                        ThriftHiveMetastore::defaultIsValidExceptionalResponse,\n+                                        chosenGetTableAlternative,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEzNTE0Nw==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r420135147", "bodyText": "Copy pasta :)", "author": "aalbu", "createdAt": "2020-05-05T14:04:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3NzQwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3NzYzNQ==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r420077635", "bodyText": "if return is required, use return null (0 looks more meaningful)", "author": "findepi", "createdAt": "2020-05-05T12:41:44Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftHiveMetastore.java", "diffHunk": "@@ -1064,7 +1065,31 @@ public void alterTable(HiveIdentity identity, String databaseName, String tableN\n                     .stopOnIllegalExceptions()\n                     .run(\"alterTable\", stats.getAlterTable().wrap(() -> {\n                         try (ThriftMetastoreClient client = createMetastoreClient(identity)) {\n-                            client.alterTable(databaseName, tableName, table);\n+                            Map<String, String> tableParameters = table.getParameters();\n+                            String statsParam = \"DO_NOT_UPDATE_STATS\";\n+                            if (\"true\".equals(tableParameters.get(statsParam))) {\n+                                EnvironmentContext context = new EnvironmentContext();\n+                                context.setProperties(ImmutableMap.of(statsParam, \"true\"));\n+                                // the DO_NOT_UPDATE_STATS is not supposed to be a persistent parameter\n+                                table.setParameters(tableParameters.entrySet().stream()\n+                                        .filter(entry -> !statsParam.equals(entry.getKey()))\n+                                        .collect(toImmutableMap(Map.Entry::getKey, Map.Entry::getValue)));\n+                                alternativeCall(\n+                                        () -> client,\n+                                        ThriftHiveMetastore::defaultIsValidExceptionalResponse,\n+                                        chosenGetTableAlternative,\n+                                        metastoreClient -> {\n+                                            metastoreClient.alterTableWithEnvironmentContext(databaseName, tableName, table, context);\n+                                            return 0;\n+                                        },\n+                                        metastoreClient -> {\n+                                            metastoreClient.alterTable(databaseName, tableName, table);\n+                                            return 0;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY3OTk0MA==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r420679940", "bodyText": "remove void alterTable(String databaseName, String tableName, Table newTable), it's unused now", "author": "findepi", "createdAt": "2020-05-06T10:09:35Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftMetastoreClient.java", "diffHunk": "@@ -71,6 +72,9 @@ void dropTable(String databaseName, String name, boolean deleteData)\n     void alterTable(String databaseName, String tableName, Table newTable)\n             throws TException;\n \n+    void alterTableWithEnvironmentContext(String databaseName, String tableName, Table newTable, EnvironmentContext context)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY4MDMzOQ==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r420680339", "bodyText": "Add a comment why this assertion matters, so that someone doesn't put an if around this again (like i did).\nE.g. link to the issue.", "author": "findepi", "createdAt": "2020-05-06T10:10:24Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveBasicTableStatistics.java", "diffHunk": "@@ -126,10 +126,8 @@ public void testCreatePartitioned()\n                 \"WHERE n_nationkey <> 23\", tableName));\n \n         try {\n-            if (getHiveVersionMajor() < 3) {\n-                BasicStatistics tableStatistics = getBasicStatisticsForTable(onHive(), tableName);\n-                assertThatStatisticsAreNotPresent(tableStatistics);\n-            }\n+            BasicStatistics tableStatistics = getBasicStatisticsForTable(onHive(), tableName);\n+            assertThatStatisticsAreNotPresent(tableStatistics);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY4MTA2Mg==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r420681062", "bodyText": "Also, can you add a test for CREATE external table?\n(partitioned and not partitioned)", "author": "findepi", "createdAt": "2020-05-06T10:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY4MDMzOQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0NDkyMw==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r423644923", "bodyText": "If i recall correctly, this is required for some, but not all hms versions. If this is the case, please leave some info in the code comment. Same for DO_NOT_UPDATE_STATS env.", "author": "findepi", "createdAt": "2020-05-12T10:58:22Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -947,6 +947,10 @@ public void createTable(ConnectorSession session, ConnectorTableMetadata tableMe\n                     tableProperties.put(CSV_SEPARATOR_KEY, separator.toString());\n                 });\n \n+        // prevent HMS from gathering these stats at table creation, since it can be expensive\n+        tableProperties.put(\"numFiles\", \"-1\");\n+        tableProperties.put(\"totalSize\", \"-1\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0NTkwOA==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r423645908", "bodyText": "maybe:\nhttps://github.com/prestosql/presto/blob/1b457a1188b44828d5aba7eb7e58d9aa45e1df28/presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java#L6469", "author": "findepi", "createdAt": "2020-05-12T11:00:08Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveBasicTableStatistics.java", "diffHunk": "@@ -420,6 +501,24 @@ private static BasicStatistics basicStatisticsFromDescribeResult(QueryResult res\n         return new BasicStatistics(numFiles, numRows, rawDataSize, totalSize);\n     }\n \n+    private static Optional<String> getTableLocation(String tableName)\n+    {\n+        QueryResult describeResult = onHive().executeQuery(format(\"DESCRIBE FORMATTED %s\", tableName));\n+        verify(describeResult.getColumnsCount() == 3, \"describe result is expected to have 3 columns\");\n+        for (List<?> row : describeResult.rows()) {\n+            Optional<String> name = Optional.ofNullable(row.get(0))\n+                    .map(Object::toString)\n+                    .map(String::trim);\n+\n+            if (name.isPresent() && \"Location:\".equals(name.get())) {\n+                return Optional.ofNullable(row.get(1))\n+                        .map(Object::toString)\n+                        .map(String::trim);\n+            }\n+        }\n+        return Optional.empty();\n+    }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0NjI0Mw==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r423646243", "bodyText": "Do we need helperTableName table? can we use nation directly instead?", "author": "findepi", "createdAt": "2020-05-12T11:00:44Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveBasicTableStatistics.java", "diffHunk": "@@ -54,6 +55,41 @@ public void testCreateUnpartitioned()\n         }\n     }\n \n+    @Test\n+    public void testCreateExternalUnpartitioned()\n+    {\n+        String tableName = \"test_basic_statistics_external_unpartitioned_presto\";\n+        String helperTableName = tableName + \"_helper\";\n+\n+        onPresto().executeQuery(format(\"DROP TABLE IF EXISTS %s\", helperTableName));\n+        onPresto().executeQuery(format(\"DROP TABLE IF EXISTS %s\", tableName));\n+        onPresto().executeQuery(format(\"CREATE TABLE %s AS SELECT * FROM nation\", helperTableName));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0Njk5NQ==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r423646995", "bodyText": "Maybe in partitioned table case, we could call sync_partitions procedure and verify again.\n(Unless it wouldn't work in that case, then keep as it is.)", "author": "findepi", "createdAt": "2020-05-12T11:02:13Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveBasicTableStatistics.java", "diffHunk": "@@ -144,6 +180,51 @@ public void testCreatePartitioned()\n         }\n     }\n \n+    @Test\n+    public void testCreateExternalPartitioned()\n+    {\n+        String tableName = \"test_basic_statistics_external_partitioned_presto\";\n+        String helperTableName = tableName + \"_helper\";\n+\n+        onPresto().executeQuery(format(\"DROP TABLE IF EXISTS %s\", helperTableName));\n+        onPresto().executeQuery(format(\"DROP TABLE IF EXISTS %s\", tableName));\n+        onPresto().executeQuery(format(\"\" +\n+                \"CREATE TABLE %s \" +\n+                \"WITH (\" +\n+                \"   partitioned_by = ARRAY['n_regionkey'] \" +\n+                \") \" +\n+                \"AS \" +\n+                \"SELECT n_nationkey, n_name, n_comment, n_regionkey \" +\n+                \"FROM nation \" +\n+                // turns out there are exactly 5 countries in each region\n+                // let's change records count for one of the regions to verify statistics are different\n+                \"WHERE n_nationkey <> 23\", helperTableName));\n+\n+        try {\n+            Optional<String> location = getTableLocation(helperTableName);\n+            if (location.isPresent()) {\n+                onPresto().executeQuery(format(\"\" +\n+                        \"CREATE TABLE %s (\" +\n+                        \"   n_nationkey bigint, \" +\n+                        \"   n_name varchar(25), \" +\n+                        \"   n_comment varchar(152), \" +\n+                        \"   n_regionkey bigint) \" +\n+                        \"WITH (partitioned_by = ARRAY['n_regionkey'], external_location = '%s')\",\n+                        tableName,\n+                        location.get()));\n+            }\n+            else {\n+                fail(\"Could not determine location of managed table\");\n+            }\n+            BasicStatistics statistics = getBasicStatisticsForTable(onHive(), tableName);\n+            assertThatStatisticsAreZero(statistics);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4ODM3MA==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r424988370", "bodyText": "else assertThatStatisticsAreZero ?", "author": "findepi", "createdAt": "2020-05-14T09:12:32Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveBasicTableStatistics.java", "diffHunk": "@@ -184,43 +174,27 @@ public void testCreatePartitioned()\n     public void testCreateExternalPartitioned()\n     {\n         String tableName = \"test_basic_statistics_external_partitioned_presto\";\n-        String helperTableName = tableName + \"_helper\";\n \n-        onPresto().executeQuery(format(\"DROP TABLE IF EXISTS %s\", helperTableName));\n         onPresto().executeQuery(format(\"DROP TABLE IF EXISTS %s\", tableName));\n-        onPresto().executeQuery(format(\"\" +\n-                \"CREATE TABLE %s \" +\n-                \"WITH (\" +\n-                \"   partitioned_by = ARRAY['n_regionkey'] \" +\n-                \") \" +\n-                \"AS \" +\n-                \"SELECT n_nationkey, n_name, n_comment, n_regionkey \" +\n-                \"FROM nation \" +\n-                // turns out there are exactly 5 countries in each region\n-                // let's change records count for one of the regions to verify statistics are different\n-                \"WHERE n_nationkey <> 23\", helperTableName));\n \n         try {\n-            Optional<String> location = getTableLocation(helperTableName);\n-            if (location.isPresent()) {\n-                onPresto().executeQuery(format(\"\" +\n-                        \"CREATE TABLE %s (\" +\n-                        \"   n_nationkey bigint, \" +\n-                        \"   n_name varchar(25), \" +\n-                        \"   n_comment varchar(152), \" +\n-                        \"   n_regionkey bigint) \" +\n-                        \"WITH (partitioned_by = ARRAY['n_regionkey'], external_location = '%s')\",\n-                        tableName,\n-                        location.get()));\n-            }\n-            else {\n-                fail(\"Could not determine location of managed table\");\n+            String tableLocation = getTableLocation(\"nation\");\n+            onPresto().executeQuery(format(\"\" +\n+                    \"CREATE TABLE %s (\" +\n+                    \"   n_nationkey bigint, \" +\n+                    \"   n_name varchar(25), \" +\n+                    \"   n_comment varchar(152), \" +\n+                    \"   n_regionkey bigint) \" +\n+                    \"WITH (partitioned_by = ARRAY['n_regionkey'], external_location = '%s')\",\n+                    tableName,\n+                    tableLocation));\n+            // in Hive 3, DESCRIBE FORMATTED returns 0 for table stats that are actually missing from the metastore\n+            if (getHiveVersionMajor() < 3) {\n+                BasicStatistics tableStatistics = getBasicStatisticsForTable(onHive(), tableName);\n+                assertThatStatisticsAreNotPresent(tableStatistics);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk5MDEwMA==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r424990100", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return onPresto().executeQuery(\"SELECT DISTINCT regexp_replace(\\\"$path\\\", '/[^/]*$', '') FROM \" + tableName).<String>column(1).get(0);\n          \n          \n            \n                    return getOnlyElement(onPresto().executeQuery(\"SELECT DISTINCT regexp_replace(\\\"$path\\\", '/[^/]*$', '') FROM \" + tableName).column(1));\n          \n      \n    \n    \n  \n\n-- fail if there are 2+ results", "author": "findepi", "createdAt": "2020-05-14T09:15:17Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveBasicTableStatistics.java", "diffHunk": "@@ -501,22 +475,9 @@ private static BasicStatistics basicStatisticsFromDescribeResult(QueryResult res\n         return new BasicStatistics(numFiles, numRows, rawDataSize, totalSize);\n     }\n \n-    private static Optional<String> getTableLocation(String tableName)\n+    private static String getTableLocation(String tableName)\n     {\n-        QueryResult describeResult = onHive().executeQuery(format(\"DESCRIBE FORMATTED %s\", tableName));\n-        verify(describeResult.getColumnsCount() == 3, \"describe result is expected to have 3 columns\");\n-        for (List<?> row : describeResult.rows()) {\n-            Optional<String> name = Optional.ofNullable(row.get(0))\n-                    .map(Object::toString)\n-                    .map(String::trim);\n-\n-            if (name.isPresent() && \"Location:\".equals(name.get())) {\n-                return Optional.ofNullable(row.get(1))\n-                        .map(Object::toString)\n-                        .map(String::trim);\n-            }\n-        }\n-        return Optional.empty();\n+        return onPresto().executeQuery(\"SELECT DISTINCT regexp_replace(\\\"$path\\\", '/[^/]*$', '') FROM \" + tableName).<String>column(1).get(0);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk5MTU3Nw==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r424991577", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // set bogus table stats to prevent Hive 2.x from gathering these stats at table creation\n          \n          \n            \n                    // Set bogus table stats to prevent Hive 2.x from gathering these stats at table creation.\n          \n          \n            \n                    // These stats are not useful in itself and can take very long time to collect when creating an\n          \n          \n            \n                    // external table over large data set.", "author": "findepi", "createdAt": "2020-05-14T09:17:38Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -947,7 +947,7 @@ public void createTable(ConnectorSession session, ConnectorTableMetadata tableMe\n                     tableProperties.put(CSV_SEPARATOR_KEY, separator.toString());\n                 });\n \n-        // prevent HMS from gathering these stats at table creation, since it can be expensive\n+        // set bogus table stats to prevent Hive 2.x from gathering these stats at table creation", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk5MTk3Mg==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r424991972", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        // this prevents Hive 3.x from collecting table stats at table creation time\n          \n          \n            \n                                        // This prevents Hive 3.x from collecting basic table stats at table creation time.\n          \n          \n            \n                                        // These stats are not useful in itself and can take very long time to collect when creating an\n          \n          \n            \n                                        // external table over large data set.", "author": "findepi", "createdAt": "2020-05-14T09:18:14Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/ThriftHiveMetastore.java", "diffHunk": "@@ -1066,6 +1066,7 @@ public void alterTable(HiveIdentity identity, String databaseName, String tableN\n                     .run(\"alterTable\", stats.getAlterTable().wrap(() -> {\n                         try (ThriftMetastoreClient client = createMetastoreClient(identity)) {\n                             EnvironmentContext context = new EnvironmentContext();\n+                            // this prevents Hive 3.x from collecting table stats at table creation time", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEwNTY3Nw==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r425105677", "bodyText": "According to my intellij indentation is off here.", "author": "findepi", "createdAt": "2020-05-14T12:43:12Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveBasicTableStatistics.java", "diffHunk": "@@ -144,6 +170,35 @@ public void testCreatePartitioned()\n         }\n     }\n \n+    @Test\n+    public void testCreateExternalPartitioned()\n+    {\n+        String tableName = \"test_basic_statistics_external_partitioned_presto\";\n+\n+        onPresto().executeQuery(format(\"DROP TABLE IF EXISTS %s\", tableName));\n+\n+        try {\n+            String tableLocation = getTableLocation(\"nation\");\n+            onPresto().executeQuery(format(\"\" +\n+                    \"CREATE TABLE %s (\" +", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0NDQ2Ng==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r426644466", "bodyText": "add an assertion for SHOW STATS on presto side (table must not appear as empty)", "author": "findepi", "createdAt": "2020-05-18T13:55:51Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveBasicTableStatistics.java", "diffHunk": "@@ -144,6 +171,33 @@ public void testCreatePartitioned()\n         }\n     }\n \n+    @Test\n+    public void testCreateExternalPartitioned()\n+    {\n+        String tableName = \"test_basic_statistics_external_partitioned_presto\";\n+\n+        onPresto().executeQuery(format(\"DROP TABLE IF EXISTS %s\", tableName));\n+\n+        String tableLocation = getTableLocation(\"nation\");\n+        onPresto().executeQuery(format(\"\" +\n+                \"CREATE TABLE %s (\" +\n+                \"   n_nationkey bigint, \" +\n+                \"   n_name varchar(25), \" +\n+                \"   n_comment varchar(152), \" +\n+                \"   n_regionkey bigint) \" +\n+                \"WITH (partitioned_by = ARRAY['n_regionkey'], external_location = '%s')\",\n+                tableName,\n+                tableLocation));\n+        try {\n+            assertThatTableHasNoStatsFlexible(tableName);\n+            onPresto().executeQuery(format(\"CALL system.sync_partition_metadata('default', '%s', 'FULL')\", tableName));\n+            assertThatTableHasNoStatsFlexible(tableName);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzNjgzNw==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r427136837", "bodyText": "int rowCountIndex = result.tryFindColumnIndex(\"row_count\")\n.orElseThrow", "author": "findepi", "createdAt": "2020-05-19T08:50:57Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveBasicTableStatistics.java", "diffHunk": "@@ -191,15 +204,24 @@ public void testCreateExternalPartitioned()\n         try {\n             assertThatTableHasNoStatsFlexible(tableName);\n             onPresto().executeQuery(format(\"CALL system.sync_partition_metadata('default', '%s', 'FULL')\", tableName));\n-            assertThatTableHasNoStatsFlexible(tableName);\n+            // in Hive 3, syncing partitions causes stats to be populated\n+            if (getHiveVersionMajor() < 3) {\n+                BasicStatistics tableStatistics = getBasicStatisticsForTable(onHive(), tableName);\n+                assertThatStatisticsAreNotPresent(tableStatistics);\n+            }\n+\n+            onPresto().executeQuery(format(\"ANALYZE %s\", tableName));\n             // check that Presto sees the table as non-empty\n             QueryResult result = onPresto().executeQuery(format(\"SHOW STATS FOR %s\", tableName));\n-            result.tryFindColumnIndex(\"row_count\")\n-                    .ifPresent(index -> {\n-                        // the last row has table stats\n-                        List<Object> rowCounts = result.column(index);\n-                        assertThat(rowCounts.get(rowCounts.size() - 1)).isNotNull().isNotEqualTo(0);\n-                    });\n+            Optional<Integer> rowCountIndex = result.tryFindColumnIndex(\"row_count\");\n+            if (rowCountIndex.isPresent()) {\n+                List<Object> rowCounts = result.column(rowCountIndex.get());\n+                // the last row has table stats\n+                assertThat((Double) rowCounts.get(rowCounts.size() - 1)).isNotNull().isGreaterThan(0.0);\n+            }\n+            else {\n+                fail(\"Unable to find column row_count in ANALYZE result\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0MDE5Mw==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r427140193", "bodyText": "remove?\nWe're supposedly testing CREATE TABLE that it doesn't produce bogus stats.", "author": "findepi", "createdAt": "2020-05-19T08:55:46Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveBasicTableStatistics.java", "diffHunk": "@@ -191,15 +204,24 @@ public void testCreateExternalPartitioned()\n         try {\n             assertThatTableHasNoStatsFlexible(tableName);\n             onPresto().executeQuery(format(\"CALL system.sync_partition_metadata('default', '%s', 'FULL')\", tableName));\n-            assertThatTableHasNoStatsFlexible(tableName);\n+            // in Hive 3, syncing partitions causes stats to be populated\n+            if (getHiveVersionMajor() < 3) {\n+                BasicStatistics tableStatistics = getBasicStatisticsForTable(onHive(), tableName);\n+                assertThatStatisticsAreNotPresent(tableStatistics);\n+            }\n+\n+            onPresto().executeQuery(format(\"ANALYZE %s\", tableName));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3ODU0Mg==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r429178542", "bodyText": "nation table is format = 'TEXTFILE', so use this here too\n(you can verify the table format with select count(*) from the table)", "author": "findepi", "createdAt": "2020-05-22T10:52:16Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveBasicTableStatistics.java", "diffHunk": "@@ -54,6 +55,32 @@ public void testCreateUnpartitioned()\n         }\n     }\n \n+    @Test\n+    public void testCreateExternalUnpartitioned()\n+    {\n+        String tableName = \"test_basic_statistics_external_unpartitioned_presto\";\n+\n+        onPresto().executeQuery(format(\"DROP TABLE IF EXISTS %s\", tableName));\n+\n+        try {\n+            String location = getTableLocation(\"nation\", false);\n+            onPresto().executeQuery(format(\"\" +\n+                    \"CREATE TABLE %s (\" +\n+                    \"   n_nationkey bigint, \" +\n+                    \"   n_regionkey bigint, \" +\n+                    \"   n_name varchar(25), \" +\n+                    \"   n_comment varchar(152)) \" +\n+                    \"WITH (external_location = '%s')\",", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4MjEwOQ==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r429182109", "bodyText": "textfile_field_separator = '|' is important too", "author": "findepi", "createdAt": "2020-05-22T11:01:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3ODU0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3OTAzNg==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r429179036", "bodyText": "This is wrong. i checked with show stats for test_basic_statistics_external_unpartitioned_presto; that this indeed reports row count 0, but the table is not empty. It should report NULL", "author": "findepi", "createdAt": "2020-05-22T10:53:29Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveBasicTableStatistics.java", "diffHunk": "@@ -54,6 +55,32 @@ public void testCreateUnpartitioned()\n         }\n     }\n \n+    @Test\n+    public void testCreateExternalUnpartitioned()\n+    {\n+        String tableName = \"test_basic_statistics_external_unpartitioned_presto\";\n+\n+        onPresto().executeQuery(format(\"DROP TABLE IF EXISTS %s\", tableName));\n+\n+        try {\n+            String location = getTableLocation(\"nation\", false);\n+            onPresto().executeQuery(format(\"\" +\n+                    \"CREATE TABLE %s (\" +\n+                    \"   n_nationkey bigint, \" +\n+                    \"   n_regionkey bigint, \" +\n+                    \"   n_name varchar(25), \" +\n+                    \"   n_comment varchar(152)) \" +\n+                    \"WITH (external_location = '%s')\",\n+                    tableName,\n+                    location));\n+            BasicStatistics statistics = getBasicStatisticsForTable(onHive(), tableName);\n+            assertThatStatisticsAreZero(statistics);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4MTM5Mw==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r429181393", "bodyText": "I guess this is actually a pre-existing thing, is it?", "author": "findepi", "createdAt": "2020-05-22T10:59:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3OTAzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3OTMyNw==", "url": "https://github.com/trinodb/trino/pull/3627#discussion_r429179327", "bodyText": "Since we're doing a lot of back and forth to satisfy every supported metastore version, let's move partitioned tables to a separate PR and focus on unpartitioned for now.", "author": "findepi", "createdAt": "2020-05-22T10:54:15Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveBasicTableStatistics.java", "diffHunk": "@@ -144,6 +171,49 @@ public void testCreatePartitioned()\n         }\n     }\n \n+    @Test\n+    public void testCreateExternalPartitioned()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "eb336e5fdf0b152183b228887106257479077139", "url": "https://github.com/trinodb/trino/commit/eb336e5fdf0b152183b228887106257479077139", "message": "Provide empty table stats when creating external tables", "committedDate": "2020-05-23T02:47:05Z", "type": "commit"}, {"oid": "1f0d04176b239dc9bc3b71a554680a1cdb2dbe97", "url": "https://github.com/trinodb/trino/commit/1f0d04176b239dc9bc3b71a554680a1cdb2dbe97", "message": "Prevent HMS from collecting stats when creating tables", "committedDate": "2020-05-23T03:11:51Z", "type": "commit"}, {"oid": "1f0d04176b239dc9bc3b71a554680a1cdb2dbe97", "url": "https://github.com/trinodb/trino/commit/1f0d04176b239dc9bc3b71a554680a1cdb2dbe97", "message": "Prevent HMS from collecting stats when creating tables", "committedDate": "2020-05-23T03:11:51Z", "type": "forcePushed"}]}