{"pr_number": 6243, "pr_title": "Test ResultSet.getString for a DATE", "pr_createdAt": "2020-12-08T09:35:35Z", "pr_url": "https://github.com/trinodb/trino/pull/6243", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE4MDMxOQ==", "url": "https://github.com/trinodb/trino/pull/6243#discussion_r538180319", "bodyText": "#6242", "author": "findepi", "createdAt": "2020-12-08T09:35:51Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -173,63 +173,130 @@ public void testDate()\n     {\n         try (ConnectedStatement connectedStatement = newStatement()) {\n             checkRepresentation(connectedStatement.getStatement(), \"DATE '2018-02-13'\", Types.DATE, (rs, column) -> {\n-                assertEquals(rs.getObject(column), Date.valueOf(LocalDate.of(2018, 2, 13)));\n-                assertEquals(rs.getObject(column, Date.class), Date.valueOf(LocalDate.of(2018, 2, 13)));\n-                assertEquals(rs.getDate(column), Date.valueOf(LocalDate.of(2018, 2, 13)));\n+                LocalDate localDate = LocalDate.of(2018, 2, 13);\n+                Date sqlDate = Date.valueOf(localDate);\n+\n+                assertEquals(rs.getObject(column), sqlDate);\n+                assertEquals(rs.getObject(column, Date.class), sqlDate);\n+                // TODO assertEquals(rs.getObject(column, LocalDate.class), localDate);\n+\n+                assertEquals(rs.getDate(column), sqlDate);\n                 assertThatThrownBy(() -> rs.getTime(column))\n                         .isInstanceOf(IllegalArgumentException.class)\n                         .hasMessage(\"Expected column to be a time type but is date\");\n                 assertThatThrownBy(() -> rs.getTimestamp(column))\n                         .isInstanceOf(IllegalArgumentException.class)\n                         .hasMessage(\"Expected column to be a timestamp type but is date\");\n+\n+                assertEquals(rs.getString(column), localDate.toString());\n             });\n \n             // distant past, but apparently not an uncommon value in practice\n             checkRepresentation(connectedStatement.getStatement(), \"DATE '0001-01-01'\", Types.DATE, (rs, column) -> {\n-                assertEquals(rs.getObject(column), Date.valueOf(LocalDate.of(1, 1, 1)));\n-                assertEquals(rs.getDate(column), Date.valueOf(LocalDate.of(1, 1, 1)));\n+                LocalDate localDate = LocalDate.of(1, 1, 1);\n+                Date sqlDate = Date.valueOf(localDate);\n+\n+                assertEquals(rs.getObject(column), sqlDate);\n+                assertEquals(rs.getObject(column, Date.class), sqlDate);\n+                // TODO assertEquals(rs.getObject(column, LocalDate.class), localDate);\n+\n+                assertEquals(rs.getDate(column), sqlDate);\n+                assertThatThrownBy(() -> rs.getTime(column))\n+                        .isInstanceOf(IllegalArgumentException.class)\n+                        .hasMessage(\"Expected column to be a time type but is date\");\n+                assertThatThrownBy(() -> rs.getTimestamp(column))\n+                        .isInstanceOf(IllegalArgumentException.class)\n+                        .hasMessage(\"Expected column to be a timestamp type but is date\");\n+\n+                assertEquals(rs.getString(column), localDate.toString());\n+            });\n+\n+            // date which midnight does not exist in test JVM zone\n+            checkRepresentation(connectedStatement.getStatement(), \"DATE '1970-01-01'\", Types.DATE, (rs, column) -> {\n+                LocalDate localDate = LocalDate.of(1970, 1, 1);\n+\n+                // TODO (https://github.com/prestosql/presto/issues/6242) this should not fail\n+                assertThatThrownBy(() -> rs.getObject(column))\n+                        .isInstanceOf(SQLException.class)\n+                        .hasMessage(\"Expected value to be a date but is: 1970-01-01\");\n+                // TODO (https://github.com/prestosql/presto/issues/6242) this should not fail\n+                assertThatThrownBy(() -> rs.getObject(column, Date.class))\n+                        .isInstanceOf(SQLException.class)\n+                        .hasMessage(\"Expected value to be a date but is: 1970-01-01\");\n+                // TODO assertEquals(rs.getObject(column, LocalDate.class), localDate);\n+\n+                // TODO (https://github.com/prestosql/presto/issues/6242) this should not fail", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "8496ae47a92eda8e1c7c112d63721daf54b2ec4f", "url": "https://github.com/trinodb/trino/commit/8496ae47a92eda8e1c7c112d63721daf54b2ec4f", "message": "Extract common expressions in assertions", "committedDate": "2020-12-08T15:58:59Z", "type": "commit"}, {"oid": "47d31b9b63aeb5b42cec12d628711a1d8075e424", "url": "https://github.com/trinodb/trino/commit/47d31b9b63aeb5b42cec12d628711a1d8075e424", "message": "Test ResultSet.getString for a DATE", "committedDate": "2020-12-08T15:58:59Z", "type": "commit"}, {"oid": "61606115c942b3f165ba5a964d7a1ece5f79af42", "url": "https://github.com/trinodb/trino/commit/61606115c942b3f165ba5a964d7a1ece5f79af42", "message": "Report proper SQLException for ResultSet.getObject on an unrepresentable DATE", "committedDate": "2020-12-08T16:02:04Z", "type": "commit"}, {"oid": "61606115c942b3f165ba5a964d7a1ece5f79af42", "url": "https://github.com/trinodb/trino/commit/61606115c942b3f165ba5a964d7a1ece5f79af42", "message": "Report proper SQLException for ResultSet.getObject on an unrepresentable DATE", "committedDate": "2020-12-08T16:02:04Z", "type": "forcePushed"}]}