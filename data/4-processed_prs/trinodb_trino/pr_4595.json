{"pr_number": 4595, "pr_title": "More JDBC tests", "pr_createdAt": "2020-07-27T10:44:31Z", "pr_url": "https://github.com/trinodb/trino/pull/4595", "timeline": [{"oid": "c247c8fdcaf841361fd35473762d6f95e72b9e44", "url": "https://github.com/trinodb/trino/commit/c247c8fdcaf841361fd35473762d6f95e72b9e44", "message": "Split test method into multiple", "committedDate": "2020-07-27T10:15:17Z", "type": "commit"}, {"oid": "8ed84506d48aef4f03fdf0827789d8e5eba7b623", "url": "https://github.com/trinodb/trino/commit/8ed84506d48aef4f03fdf0827789d8e5eba7b623", "message": "Reorder tests", "committedDate": "2020-07-27T10:41:31Z", "type": "commit"}, {"oid": "eb07517eec51de161bae6c96786a6ce7481fd087", "url": "https://github.com/trinodb/trino/commit/eb07517eec51de161bae6c96786a6ce7481fd087", "message": "Add initial support for ResultSet#getObject with type", "committedDate": "2020-07-27T10:41:32Z", "type": "commit"}, {"oid": "dd8f4e3a0754054420021653cd0aa7271152958e", "url": "https://github.com/trinodb/trino/commit/dd8f4e3a0754054420021653cd0aa7271152958e", "message": "Test map representation in JDBC ResultSet", "committedDate": "2020-07-27T10:41:58Z", "type": "commit"}, {"oid": "ed6e5fdb29e95841119d93048476b361d35b5fac", "url": "https://github.com/trinodb/trino/commit/ed6e5fdb29e95841119d93048476b361d35b5fac", "message": "Test row representation in JDBC ResultSet", "committedDate": "2020-07-27T10:43:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwMzgxMQ==", "url": "https://github.com/trinodb/trino/pull/4595#discussion_r460803811", "bodyText": "#4594", "author": "findepi", "createdAt": "2020-07-27T10:44:49Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSet.java", "diffHunk": "@@ -246,10 +269,83 @@ public void testObjectTypes()\n         });\n     }\n \n+    @Test\n+    public void testIpAddress()\n+            throws Exception\n+    {\n+        checkRepresentation(\"IPADDRESS '1.2.3.4'\", Types.JAVA_OBJECT, \"1.2.3.4\");\n+    }\n+\n+    @Test\n+    public void testUuid()\n+            throws Exception\n+    {\n+        checkRepresentation(\"UUID '0397e63b-2b78-4b7b-9c87-e085fa225dd8'\", Types.JAVA_OBJECT, \"0397e63b-2b78-4b7b-9c87-e085fa225dd8\");\n+    }\n+\n+    @Test\n+    public void testArray()\n+            throws Exception\n+    {\n+        checkRepresentation(\"ARRAY[1, 2]\", Types.ARRAY, (rs, column) -> assertEquals(rs.getArray(column).getArray(), new int[] {1, 2}));\n+    }\n+\n+    @Test\n+    public void testMap()\n+            throws Exception\n+    {\n+        checkRepresentation(\"map(ARRAY['k1', 'k2'], ARRAY[BIGINT '42', -117])\", Types.JAVA_OBJECT, (rs, column) -> {\n+            assertEquals(rs.getObject(column), ImmutableMap.of(\"k1\", 42L, \"k2\", -117L));\n+            assertEquals(rs.getObject(column, Map.class), ImmutableMap.of(\"k1\", 42L, \"k2\", -117L));\n+        });\n+\n+        // NULL value\n+        checkRepresentation(\"map(ARRAY['k1', 'k2'], ARRAY[42, NULL])\", Types.JAVA_OBJECT, (rs, column) -> {\n+            Map<String, Integer> expected = new HashMap<>();\n+            expected.put(\"k1\", 42);\n+            expected.put(\"k2\", null);\n+            assertEquals(rs.getObject(column), expected);\n+            assertEquals(rs.getObject(column, Map.class), expected);\n+        });\n+    }\n+\n+    @Test\n+    public void testRow()\n+            throws Exception\n+    {\n+        // named row\n+        checkRepresentation(\"CAST(ROW(42, 'Presto') AS ROW(a_bigint bigint, a_varchar varchar(17)))\", Types.JAVA_OBJECT, (rs, column) -> {\n+            assertEquals(rs.getObject(column), ImmutableMap.of(\"a_bigint\", 42L, \"a_varchar\", \"Presto\"));\n+            assertEquals(rs.getObject(column, Map.class), ImmutableMap.of(\"a_bigint\", 42L, \"a_varchar\", \"Presto\"));\n+        });\n+\n+        // partially named row\n+        checkRepresentation(\"CAST(ROW(42, 'Presto') AS ROW(a_bigint bigint, varchar(17)))\", Types.JAVA_OBJECT, (rs, column) -> {\n+            assertEquals(rs.getObject(column), ImmutableMap.of(\"a_bigint\", 42L, \"field1\", \"Presto\"));\n+            assertEquals(rs.getObject(column, Map.class), ImmutableMap.of(\"a_bigint\", 42L, \"field1\", \"Presto\"));\n+        });\n+\n+        // anonymous row\n+        checkRepresentation(\"ROW(42, 'Presto')\", Types.JAVA_OBJECT, (rs, column) -> {\n+            assertEquals(rs.getObject(column), ImmutableMap.of(\"field0\", 42, \"field1\", \"Presto\"));\n+            assertEquals(rs.getObject(column, Map.class), ImmutableMap.of(\"field0\", 42, \"field1\", \"Presto\"));\n+        });\n+\n+        // name collision\n+        checkRepresentation(\"CAST(ROW(42, 'Presto') AS ROW(field1 integer, varchar(17)))\", Types.JAVA_OBJECT, (rs, column) -> {\n+            // TODO (https://github.com/prestosql/presto/issues/4594) both fields should be visible or exception thrown", "originalCommit": "ed6e5fdb29e95841119d93048476b361d35b5fac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM5MDUzMg==", "url": "https://github.com/trinodb/trino/pull/4595#discussion_r461390532", "bodyText": "Can you explain what is the ordering rule and motivation in the commit message?", "author": "kokosing", "createdAt": "2020-07-28T07:57:19Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSet.java", "diffHunk": "@@ -116,13 +116,6 @@ public void testPrimitiveTypes()\n         checkRepresentation(\"cast('foo' as char(5))\", Types.CHAR, \"foo  \");", "originalCommit": "8ed84506d48aef4f03fdf0827789d8e5eba7b623", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzNTAyMg==", "url": "https://github.com/trinodb/trino/pull/4595#discussion_r461435022", "bodyText": "I just wanted to have simple types before composite types.\nAnd standard types before extensions/\"less standard\" types.\nI do not want to make a rule out of that though. (Too many\nrules are not helpful, even if every each of them is sound.)", "author": "findepi", "createdAt": "2020-07-28T09:10:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM5MDUzMg=="}], "type": "inlineReview"}]}