{"pr_number": 4151, "pr_title": "Add support for IN predicate in outer join criteria", "pr_createdAt": "2020-06-22T19:28:08Z", "pr_url": "https://github.com/trinodb/trino/pull/4151", "timeline": [{"oid": "e20a2391aab5a06f070ac7d2de2e20a0dd80794c", "url": "https://github.com/trinodb/trino/commit/e20a2391aab5a06f070ac7d2de2e20a0dd80794c", "message": "Fix incorrect result for inequality join involving NaN\n\nIn the case of NaN, not(a < b) is not equivalent to a >= b.", "committedDate": "2020-06-22T19:19:59Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMDQ2Nw==", "url": "https://github.com/trinodb/trino/pull/4151#discussion_r444020467", "bodyText": "what correlation in IN and inner join?", "author": "kokosing", "createdAt": "2020-06-23T07:34:37Z", "path": "presto-main/src/test/java/io/prestosql/sql/query/TestJoin.java", "diffHunk": "@@ -58,7 +59,106 @@ public void testJoinOnNan()\n     {\n         assertThat(assertions.query(\n                 \"WITH t(x) AS (VALUES if(rand() > 0, nan())) \" + // TODO: remove if(rand() > 0, ...) once https://github.com/prestosql/presto/issues/4119 is fixed\n-                \"SELECT * FROM t t1 JOIN t t2 ON NOT t1.x < t2.x\"))\n-            .matches(\"VALUES (nan(), nan())\");\n+                        \"SELECT * FROM t t1 JOIN t t2 ON NOT t1.x < t2.x\"))\n+                .matches(\"VALUES (nan(), nan())\");\n+    }\n+\n+    @Test\n+    public void testInPredicateInJoinCriteria()\n+    {\n+        assertThat(assertions.query(\"SELECT * FROM (VALUES 1, 2, NULL) t(x) JOIN (VALUES 1, 3, NULL) u(x) ON t.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (1, 3), (1, NULL)\");\n+\n+        assertThat(assertions.query(\"SELECT * FROM (VALUES 1, 2, NULL) t(x) LEFT JOIN (VALUES 1, 3, NULL) u(x) ON t.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (1, 3), (1, NULL), (2, NULL), (NULL, NULL)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) RIGHT JOIN (VALUES 1, 3, NULL) u(x) ON t.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (1, 3), (1, NULL)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) FULL JOIN (VALUES 1, 3, NULL) u(x) ON t.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (1, 3), (1, NULL), (2, NULL), (NULL, NULL)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (2, 1), (NULL, 1)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) LEFT JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (2, 1), (NULL, 1)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) RIGHT JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (2, 1), (NULL, 1), (NULL, 3), (NULL, NULL)\");\n+\n+        assertThat(assertions.query(\n+                \"SELECT * FROM (VALUES 1, 2, NULL) t(x) FULL JOIN (VALUES 1, 3, NULL) u(x) ON u.x IN (VALUES 1)\"))\n+                .matches(\"VALUES (1, 1), (2, 1), (NULL, 1), (NULL, 3), (NULL, NULL)\");\n+\n+        // correlation in join clause not allowed for outer join", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNjkzNg==", "url": "https://github.com/trinodb/trino/pull/4151#discussion_r444436936", "bodyText": "Added a test.", "author": "martint", "createdAt": "2020-06-23T18:51:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMDQ2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMTYxNw==", "url": "https://github.com/trinodb/trino/pull/4151#discussion_r444021617", "bodyText": "else if (dependencies.stream().allMatch(right::canResolve) and then else fail?", "author": "kokosing", "createdAt": "2020-06-23T07:36:25Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -411,15 +409,15 @@ else if (firstDependencies.stream().allMatch(right::canResolve) && secondDepende\n \n         if (node.getType() != INNER) {\n             for (Expression complexExpression : complexJoinExpressions) {\n-                Set<InPredicate> inPredicates = subqueryPlanner.collectInPredicateSubqueries(complexExpression, node);\n-                if (!inPredicates.isEmpty()) {\n-                    InPredicate inPredicate = Iterables.getLast(inPredicates);\n-                    throw semanticException(NOT_SUPPORTED, inPredicate, \"IN with subquery predicate in join condition is not supported\");\n+                Set<QualifiedName> dependencies = SymbolsExtractor.extractNames(complexExpression, analysis.getColumnReferences());\n+\n+                if (dependencies.stream().allMatch(left::canResolve)) {\n+                    leftPlanBuilder = subqueryPlanner.handleSubqueries(leftPlanBuilder, complexExpression, node);\n+                }\n+                else {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQyNzMxNA==", "url": "https://github.com/trinodb/trino/pull/4151#discussion_r444427314", "bodyText": "It doesn't matter. This is for handling uncorrelated subqueries (correlated ones are checked and prevented during analysis, as they are unsupported). This is a best effort to plan the subquery in the branch of the join that involves the operand in the expression. E.g.,\n\nSELECT ... FROM t LEFT JOIN u ON t.x IN (...), we want the subquery to be planned in the t branch\nSELECT ... FROM t LEFT JOIN u ON u.x IN (...), we want the subquery to be planned in the u branch\nSELECT ... FROM t LEFT JOIN u ON t.x + u.x IN (...), handle the subquery in an arbitrary branch. Not much we can do.\n\nI'll add a comment with an explanation.", "author": "martint", "createdAt": "2020-06-23T18:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMTYxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMzY2Mw==", "url": "https://github.com/trinodb/trino/pull/4151#discussion_r444703663", "bodyText": "thanks", "author": "kokosing", "createdAt": "2020-06-24T07:40:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyMTYxNw=="}], "type": "inlineReview"}, {"oid": "b34b893c6ed5a2e80d03f2a20e0c644ed080e581", "url": "https://github.com/trinodb/trino/commit/b34b893c6ed5a2e80d03f2a20e0c644ed080e581", "message": "Add support for IN predicate in outer join criteria", "committedDate": "2020-06-23T18:51:09Z", "type": "commit"}, {"oid": "b34b893c6ed5a2e80d03f2a20e0c644ed080e581", "url": "https://github.com/trinodb/trino/commit/b34b893c6ed5a2e80d03f2a20e0c644ed080e581", "message": "Add support for IN predicate in outer join criteria", "committedDate": "2020-06-23T18:51:09Z", "type": "forcePushed"}]}