{"pr_number": 6208, "pr_title": "Convert array elements to proper representation", "pr_createdAt": "2020-12-04T16:05:19Z", "pr_url": "https://github.com/trinodb/trino/pull/6208", "timeline": [{"oid": "b63fb3cbaa120579557c9424f42e59d7ef57a851", "url": "https://github.com/trinodb/trino/commit/b63fb3cbaa120579557c9424f42e59d7ef57a851", "message": "Use literal expected values in TestJdbcCompatibility\n\nRemove `roundedTimestamp` used for computing expected values, replacing\nit with explicit expected values.", "committedDate": "2020-12-04T21:40:42Z", "type": "commit"}, {"oid": "1c8146cee45a49cf2cdb59bf66d61a4feebb5d2e", "url": "https://github.com/trinodb/trino/commit/1c8146cee45a49cf2cdb59bf66d61a4feebb5d2e", "message": "Fix typo", "committedDate": "2020-12-04T21:41:54Z", "type": "commit"}, {"oid": "d871a60d959bbdd12259dcb584f87b6f0977ae6c", "url": "https://github.com/trinodb/trino/commit/d871a60d959bbdd12259dcb584f87b6f0977ae6c", "message": "Remove excessive use of String.valueOf in ResultSet\n\nIn all changed places the type of the value is known, so its client\nrepresentation is known too.", "committedDate": "2020-12-04T21:41:54Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "27dc861d21e7a47a58f16509dd7f76afd54bb368", "url": "https://github.com/trinodb/trino/commit/27dc861d21e7a47a58f16509dd7f76afd54bb368", "message": "Fix TIME/TIMESTAMP TZ column declaration for result set\n\nThis makes the `ResultSetMetaData` metadata consistent with\n`java.sql.DatabaseMetaData#getColumns` (as implemented in\n`io.prestosql.connector.system.jdbc.ColumnJdbcTable#jdbcDataType`).", "committedDate": "2020-12-05T07:49:36Z", "type": "commit"}, {"oid": "f3261dfeb6711d6ee7d0dde76a764bec683d7fc3", "url": "https://github.com/trinodb/trino/commit/f3261dfeb6711d6ee7d0dde76a764bec683d7fc3", "message": "Add test for SQL Array element type introspection", "committedDate": "2020-12-05T07:49:36Z", "type": "commit"}, {"oid": "d8193862a1e5d9bce7d18b8425dd30cb862d10ad", "url": "https://github.com/trinodb/trino/commit/d8193862a1e5d9bce7d18b8425dd30cb862d10ad", "message": "Use AssertJ for comparing arrays\n\nTestNG's `Assert.assertEquals` behavior to print array toString when\nvalues do not match is not useful.", "committedDate": "2020-12-05T07:49:36Z", "type": "commit"}, {"oid": "98b72c47aadb8f5d46d4b7ef8cfdaaed3f024136", "url": "https://github.com/trinodb/trino/commit/98b72c47aadb8f5d46d4b7ef8cfdaaed3f024136", "message": "Define type conversions in terms of source type name\n\nKeying conversions by source class is not sufficient. Different SQL\ntypes having same client representation (e.g. `String`) need to be\nhandled separately.", "committedDate": "2020-12-05T07:49:36Z", "type": "commit"}, {"oid": "0741dbb04115bf11507244c9271e1f2204009c37", "url": "https://github.com/trinodb/trino/commit/0741dbb04115bf11507244c9271e1f2204009c37", "message": "Add runtime type checks when invoking type conversion", "committedDate": "2020-12-05T07:49:36Z", "type": "commit"}, {"oid": "65936e719fd40adfc8342a3e7f0e94d8e97da742", "url": "https://github.com/trinodb/trino/commit/65936e719fd40adfc8342a3e7f0e94d8e97da742", "message": "Unify ResultSet.getObject logic with type conversions", "committedDate": "2020-12-05T07:49:36Z", "type": "commit"}, {"oid": "f0453aa9beb6fbcf0a2ba4c9b7375655bc4e9d07", "url": "https://github.com/trinodb/trino/commit/f0453aa9beb6fbcf0a2ba4c9b7375655bc4e9d07", "message": "Allow SQLException within convertFromClientRepresentation", "committedDate": "2020-12-05T07:49:36Z", "type": "commit"}, {"oid": "89efdab6cfcb37eba3ed72ccae332cc50f9d1e5d", "url": "https://github.com/trinodb/trino/commit/89efdab6cfcb37eba3ed72ccae332cc50f9d1e5d", "message": "Convert array elements to proper representation", "committedDate": "2020-12-05T07:49:36Z", "type": "commit"}, {"oid": "9225541aef7866cb4427352e5b5456e789df55c2", "url": "https://github.com/trinodb/trino/commit/9225541aef7866cb4427352e5b5456e789df55c2", "message": "Fix product test README examples", "committedDate": "2020-12-05T07:49:37Z", "type": "commit"}, {"oid": "9225541aef7866cb4427352e5b5456e789df55c2", "url": "https://github.com/trinodb/trino/commit/9225541aef7866cb4427352e5b5456e789df55c2", "message": "Fix product test README examples", "committedDate": "2020-12-05T07:49:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3ODIyOQ==", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537678229", "bodyText": "Use literal expected values in TestJdbcCompatibility LGTM", "author": "losipiuk", "createdAt": "2020-12-07T17:12:41Z", "path": "presto-test-jdbc-compatibility-old-driver/src/test/java/io/prestosql/TestJdbcCompatibility.java", "diffHunk": "@@ -146,27 +139,53 @@ public void testSelectTimestampWithTimeZone()\n             throw new SkipException(\"This version reports PARAMETRIC_DATETIME client capability but TIMESTAMP WITH TIME ZONE is not supported\");\n         }\n \n-        String query = format(\"SELECT timestamp '2012-10-31 01:00 %s'\", TESTED_TZ);\n+        String query = \"SELECT timestamp '2012-10-31 01:00 Australia/Eucla'\";", "originalCommit": "b63fb3cbaa120579557c9424f42e59d7ef57a851", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4MjUwOA==", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537682508", "bodyText": "Fix TIME/TIMESTAMP TZ column declaration for result set is backward incompatible. Do we care?", "author": "losipiuk", "createdAt": "2020-12-07T17:18:26Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -562,9 +562,11 @@ public Object getObject(int columnIndex)\n                 // TODO (https://github.com/prestosql/presto/issues/6048) move to convertFromClientRepresentation\n                 return getDate(columnIndex);\n             case Types.TIME:\n+            case Types.TIME_WITH_TIMEZONE:", "originalCommit": "27dc861d21e7a47a58f16509dd7f76afd54bb368", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI4Nzk5NA==", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r538287994", "bodyText": "Yes, it is. I think it's just a bug. I reported this as #6251 for reference.", "author": "findepi", "createdAt": "2020-12-08T12:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4MjUwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4NzMwMg==", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537687302", "bodyText": "can you mechanically change other assertEquals to assertThat.equalsTo?\nA thought - if we want such migration maybe we should create a series of good-first-issue issues to migrate individual modules.", "author": "losipiuk", "createdAt": "2020-12-07T17:24:46Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -632,12 +633,12 @@ public void testArray()\n         try (ConnectedStatement connectedStatement = newStatement()) {\n             checkRepresentation(connectedStatement.getStatement(), \"ARRAY[1, 2]\", Types.ARRAY, (rs, column) -> {\n                 Array array = rs.getArray(column);\n-                assertEquals(array.getArray(), new int[] {1, 2});\n+                assertThat(array.getArray()).isEqualTo(new int[] {1, 2});", "originalCommit": "d8193862a1e5d9bce7d18b8425dd30cb862d10ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4ODUyNA==", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537688524", "bodyText": "hmm: https://joel-costigliola.github.io/assertj/assertj-core-converting-testng-assertions-to-assertj.html", "author": "losipiuk", "createdAt": "2020-12-07T17:26:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4NzMwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI4ODgxMA==", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r538288810", "bodyText": "Let's treat this as a follow up, ok? please file appropriate issues, if we want to go into that direction", "author": "findepi", "createdAt": "2020-12-08T12:01:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4NzMwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMwNTE4Mg==", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r538305182", "bodyText": "Sure - let's discuss offline if that is direction to go.", "author": "losipiuk", "createdAt": "2020-12-08T12:21:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY4NzMwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY5ODI2NA==", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537698264", "bodyText": "can you replace resultTimeZone field with constant and reference the constant also here?", "author": "losipiuk", "createdAt": "2020-12-07T17:40:21Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -125,10 +125,36 @@\n     // Since January 1, 1900 UTC is still December 31, 1899 in other zones, we are adding a 1 year margin.\n     private static final long START_OF_MODERN_ERA_SECONDS = java.time.LocalDate.of(1901, 1, 1).toEpochDay() * SECONDS_PER_DAY;\n \n-    private static final TypeConversions TYPE_CONVERSIONS =\n+    @VisibleForTesting\n+    static final Map<String, Class<?>> DEFAULT_OBJECT_REPRESENTATION = ImmutableMap.<String, Class<?>>builder()\n+            .put(\"decimal\", BigDecimal.class)\n+            .put(\"date\", java.sql.Date.class)\n+            .put(\"time\", java.sql.Time.class)\n+            .put(\"time with time zone\", java.sql.Time.class)\n+            .put(\"timestamp\", java.sql.Timestamp.class)\n+            .put(\"timestamp with time zone\", java.sql.Timestamp.class)\n+            .put(\"interval year to month\", PrestoIntervalYearMonth.class)\n+            .put(\"interval day to second\", PrestoIntervalDayTime.class)\n+            .put(\"map\", Map.class)\n+            .put(\"row\", Row.class)\n+            .build();\n+\n+    @VisibleForTesting\n+    static final TypeConversions TYPE_CONVERSIONS =\n             TypeConversions.builder()\n-                    .add(\"array\", PrestoArray.class, List.class, array -> asList((Object[]) array.getArray()))\n-                    .add(\"row\", Row.class, Map.class, row -> {\n+                    .add(\"decimal\", String.class, BigDecimal.class, AbstractPrestoResultSet::parseBigDecimal)\n+                    .add(\"date\", String.class, Date.class, string -> parseDate(string, DateTimeZone.forID(ZoneId.systemDefault().getId())))", "originalCommit": "65936e719fd40adfc8342a3e7f0e94d8e97da742", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI4OTIxMg==", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r538289212", "bodyText": "resultTimeZone should not be constant because JVM time zone is settable", "author": "findepi", "createdAt": "2020-12-08T12:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY5ODI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY5ODg0NA==", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537698844", "bodyText": "same here", "author": "losipiuk", "createdAt": "2020-12-07T17:41:08Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -125,10 +125,36 @@\n     // Since January 1, 1900 UTC is still December 31, 1899 in other zones, we are adding a 1 year margin.\n     private static final long START_OF_MODERN_ERA_SECONDS = java.time.LocalDate.of(1901, 1, 1).toEpochDay() * SECONDS_PER_DAY;\n \n-    private static final TypeConversions TYPE_CONVERSIONS =\n+    @VisibleForTesting\n+    static final Map<String, Class<?>> DEFAULT_OBJECT_REPRESENTATION = ImmutableMap.<String, Class<?>>builder()\n+            .put(\"decimal\", BigDecimal.class)\n+            .put(\"date\", java.sql.Date.class)\n+            .put(\"time\", java.sql.Time.class)\n+            .put(\"time with time zone\", java.sql.Time.class)\n+            .put(\"timestamp\", java.sql.Timestamp.class)\n+            .put(\"timestamp with time zone\", java.sql.Timestamp.class)\n+            .put(\"interval year to month\", PrestoIntervalYearMonth.class)\n+            .put(\"interval day to second\", PrestoIntervalDayTime.class)\n+            .put(\"map\", Map.class)\n+            .put(\"row\", Row.class)\n+            .build();\n+\n+    @VisibleForTesting\n+    static final TypeConversions TYPE_CONVERSIONS =\n             TypeConversions.builder()\n-                    .add(\"array\", PrestoArray.class, List.class, array -> asList((Object[]) array.getArray()))\n-                    .add(\"row\", Row.class, Map.class, row -> {\n+                    .add(\"decimal\", String.class, BigDecimal.class, AbstractPrestoResultSet::parseBigDecimal)\n+                    .add(\"date\", String.class, Date.class, string -> parseDate(string, DateTimeZone.forID(ZoneId.systemDefault().getId())))\n+                    .add(\"time\", String.class, Time.class, string -> parseTime(string, ZoneId.systemDefault()))", "originalCommit": "65936e719fd40adfc8342a3e7f0e94d8e97da742", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY5OTAyNg==", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537699026", "bodyText": "and here", "author": "losipiuk", "createdAt": "2020-12-07T17:41:24Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -125,10 +125,36 @@\n     // Since January 1, 1900 UTC is still December 31, 1899 in other zones, we are adding a 1 year margin.\n     private static final long START_OF_MODERN_ERA_SECONDS = java.time.LocalDate.of(1901, 1, 1).toEpochDay() * SECONDS_PER_DAY;\n \n-    private static final TypeConversions TYPE_CONVERSIONS =\n+    @VisibleForTesting\n+    static final Map<String, Class<?>> DEFAULT_OBJECT_REPRESENTATION = ImmutableMap.<String, Class<?>>builder()\n+            .put(\"decimal\", BigDecimal.class)\n+            .put(\"date\", java.sql.Date.class)\n+            .put(\"time\", java.sql.Time.class)\n+            .put(\"time with time zone\", java.sql.Time.class)\n+            .put(\"timestamp\", java.sql.Timestamp.class)\n+            .put(\"timestamp with time zone\", java.sql.Timestamp.class)\n+            .put(\"interval year to month\", PrestoIntervalYearMonth.class)\n+            .put(\"interval day to second\", PrestoIntervalDayTime.class)\n+            .put(\"map\", Map.class)\n+            .put(\"row\", Row.class)\n+            .build();\n+\n+    @VisibleForTesting\n+    static final TypeConversions TYPE_CONVERSIONS =\n             TypeConversions.builder()\n-                    .add(\"array\", PrestoArray.class, List.class, array -> asList((Object[]) array.getArray()))\n-                    .add(\"row\", Row.class, Map.class, row -> {\n+                    .add(\"decimal\", String.class, BigDecimal.class, AbstractPrestoResultSet::parseBigDecimal)\n+                    .add(\"date\", String.class, Date.class, string -> parseDate(string, DateTimeZone.forID(ZoneId.systemDefault().getId())))\n+                    .add(\"time\", String.class, Time.class, string -> parseTime(string, ZoneId.systemDefault()))\n+                    .add(\"time with time zone\", String.class, Time.class, AbstractPrestoResultSet::parseTimeWithTimeZone)\n+                    .add(\"timestamp\", String.class, Timestamp.class, string -> parseTimestamp(string, ZoneId.systemDefault()))", "originalCommit": "65936e719fd40adfc8342a3e7f0e94d8e97da742", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcwNjk2Mg==", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537706962", "bodyText": "nit: extract", "author": "losipiuk", "createdAt": "2020-12-07T17:52:29Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -610,21 +612,22 @@ private static Object convertFromClientRepresentation(ClientTypeSignature column\n         switch (columnType.getRawType()) {\n             case \"array\": {\n                 ClientTypeSignature elementType = getOnlyElement(columnType.getArgumentsAsTypeSignatures());\n-                return ((List<?>) value).stream()\n-                        .map(element -> convertFromClientRepresentation(elementType, element))\n-                        .collect(toList());\n+                List<Object> converted = Lists.newArrayListWithExpectedSize(((List<?>) value).size());", "originalCommit": "f0453aa9beb6fbcf0a2ba4c9b7375655bc4e9d07", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcwOTc4NQ==", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r537709785", "bodyText": "is the \"else\" code path needed only for \"plugin types\" ?", "author": "losipiuk", "createdAt": "2020-12-07T17:56:28Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -649,7 +649,10 @@ private static Object convertFromClientRepresentation(ClientTypeSignature column\n             }\n         }\n \n-        // TODO (https://github.com/prestosql/presto/issues/6048) add conversions for decimal, date, time, timestamp, interval\n+        Class<?> defaultRepresentation = DEFAULT_OBJECT_REPRESENTATION.get(columnType.getRawType());\n+        if (defaultRepresentation != null) {\n+            return TYPE_CONVERSIONS.convert(columnType, value, defaultRepresentation);", "originalCommit": "89efdab6cfcb37eba3ed72ccae332cc50f9d1e5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI5MTAxOA==", "url": "https://github.com/trinodb/trino/pull/6208#discussion_r538291018", "bodyText": "No, i did not cover all the builtin types", "author": "findepi", "createdAt": "2020-12-08T12:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcwOTc4NQ=="}], "type": "inlineReview"}]}