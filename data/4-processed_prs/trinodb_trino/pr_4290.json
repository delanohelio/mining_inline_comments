{"pr_number": 4290, "pr_title": "Adding FLUSHING state to tasks and stages", "pr_createdAt": "2020-07-01T06:45:51Z", "pr_url": "https://github.com/trinodb/trino/pull/4290", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1NTU2MQ==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r450255561", "bodyText": "I would also add a sentence from a commit message:\n(at-least one of its tasks is flushing and the non-flushing tasks are finished).", "author": "sopel39", "createdAt": "2020-07-06T14:21:50Z", "path": "presto-main/src/main/java/io/prestosql/execution/StageState.java", "diffHunk": "@@ -43,6 +43,10 @@\n      * Stage is running.\n      */\n     RUNNING(false, false),\n+    /**\n+     * Stage has finished executing and output being consumed.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1NjU5Mw==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r450256593", "bodyText": "Rename it to:\nisRunningOrFlushing", "author": "sopel39", "createdAt": "2020-07-06T14:23:12Z", "path": "presto-main/src/main/java/io/prestosql/execution/StageState.java", "diffHunk": "@@ -112,4 +116,9 @@ public boolean canScheduleMoreTasks()\n         }\n         return true;\n     }\n+\n+    public boolean isRunning()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI1ODM4OA==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r450258388", "bodyText": "make it synchronized", "author": "sopel39", "createdAt": "2020-07-06T14:25:41Z", "path": "presto-main/src/main/java/io/prestosql/execution/SqlStageExecution.java", "diffHunk": "@@ -524,6 +536,12 @@ else if (taskState == TaskState.FINISHED) {\n         }\n     }\n \n+    private boolean isFlushing()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2MjM2Nw==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r450262367", "bodyText": "rename to isRunningOrFlushing", "author": "sopel39", "createdAt": "2020-07-06T14:31:15Z", "path": "presto-main/src/main/java/io/prestosql/execution/TaskState.java", "diffHunk": "@@ -64,4 +68,9 @@ public boolean isDone()\n     {\n         return doneState;\n     }\n+\n+    public boolean isRunning()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2MjY1Ng==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r450262656", "bodyText": "add a sentence from PR description:\nFlushing state signifies that there will be no new drivers,\nthe existing drivers have finished and the output buffer of\nthe task is at-least in a 'no-more-pages' state.", "author": "sopel39", "createdAt": "2020-07-06T14:31:39Z", "path": "presto-main/src/main/java/io/prestosql/execution/TaskState.java", "diffHunk": "@@ -30,6 +30,10 @@\n      * Task is running.\n      */\n     RUNNING(false),\n+    /**\n+     * Task has finished executing and output is left to be consumed", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NDcwMQ==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r450264701", "bodyText": "We shouldn't request revoking from FLUSHING task as no drivers are running which could revoke memory", "author": "sopel39", "createdAt": "2020-07-06T14:34:40Z", "path": "presto-main/src/main/java/io/prestosql/execution/MemoryRevokingScheduler.java", "diffHunk": "@@ -245,7 +245,7 @@ private void requestRevoking(MemoryPool memoryPool, Collection<SqlTask> sqlTasks\n     {\n         AtomicLong remainingBytesToRevokeAtomic = new AtomicLong(remainingBytesToRevoke);\n         sqlTasks.stream()\n-                .filter(task -> task.getTaskStatus().getState() == TaskState.RUNNING)\n+                .filter(task -> task.getTaskStatus().getState().isRunning())", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NTI2Ng==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r450265266", "bodyText": "We can keep == TaskState.RUNNING as FLUSHING tasks have no memory to revoke", "author": "sopel39", "createdAt": "2020-07-06T14:35:17Z", "path": "presto-main/src/main/java/io/prestosql/execution/MemoryRevokingScheduler.java", "diffHunk": "@@ -218,7 +218,7 @@ private boolean memoryRevokingNeeded(MemoryPool memoryPool)\n     private long getMemoryAlreadyBeingRevoked(Collection<SqlTask> sqlTasks, MemoryPool memoryPool)\n     {\n         return sqlTasks.stream()\n-                .filter(task -> task.getTaskStatus().getState() == TaskState.RUNNING)\n+                .filter(task -> task.getTaskStatus().getState().isRunning())", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NjkyNw==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r450266927", "bodyText": "Maybe we should have StageState#isScheduled method instead.", "author": "sopel39", "createdAt": "2020-07-06T14:37:46Z", "path": "presto-main/src/main/java/io/prestosql/execution/StageStateMachine.java", "diffHunk": "@@ -253,7 +259,7 @@ public BasicStageStats getBasicStageStats(Supplier<Iterable<TaskInfo>> taskInfos\n         // information, the stage could finish, and the task states would\n         // never be visible.\n         StageState state = stageState.get();\n-        boolean isScheduled = (state == RUNNING) || state.isDone();\n+        boolean isScheduled = state.isRunning() || state.isDone();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYyODg0OQ==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r451628849", "bodyText": "There is already a scheduled state for a stage - so having isScheduled could lead to ambiguity. Although, by that logic - the variable can be named differently (like begunExecution)", "author": "rohangarg", "createdAt": "2020-07-08T15:22:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NjkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2ODQ0OQ==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r450268449", "bodyText": "please test actual states (if possible) and don't use isRunning(). We need to have test where we validate FLUSHING state happens.", "author": "sopel39", "createdAt": "2020-07-06T14:39:54Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTask.java", "diffHunk": "@@ -114,10 +114,10 @@ public void testEmptyQuery()\n                 createInitialEmptyOutputBuffers(PARTITIONED)\n                         .withNoMoreBufferIds(),\n                 OptionalInt.empty());\n-        assertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING);\n+        assertTrue(taskInfo.getTaskStatus().getState().isRunning());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2OTA1Mg==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r450269052", "bodyText": "please test actual states (if possible) and don't use isRunning(). We need to have test where we validate FLUSHING state happens", "author": "sopel39", "createdAt": "2020-07-06T14:40:43Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTaskExecution.java", "diffHunk": "@@ -177,7 +178,7 @@ public void testSimple(PipelineExecutionStrategy executionStrategy)\n \n             //\n             // test body\n-            assertEquals(taskStateMachine.getState(), TaskState.RUNNING);\n+            assertTrue(taskStateMachine.getState().isRunning());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI3MDE2MA==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r450270160", "bodyText": "We should incorporate check for FLUSHING state into test scenario", "author": "sopel39", "createdAt": "2020-07-06T14:42:17Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTaskExecution.java", "diffHunk": "@@ -279,6 +280,9 @@ public void testSimple(PipelineExecutionStrategy executionStrategy)\n \n             outputBufferConsumer.abort(); // complete the task by calling abort on it\n             TaskState taskState = taskStateMachine.getStateChange(TaskState.RUNNING).get(10, SECONDS);\n+            if (taskState == TaskState.FLUSHING) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc1NzA4Ng==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r450757086", "bodyText": "Please add a test for this. The test could be:\n\nstaring SELECT * FROM large_table LIMIT 1\nNOT fetching results and waiting for SOURCE stage to be cancelled", "author": "sopel39", "createdAt": "2020-07-07T10:12:54Z", "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SqlQueryScheduler.java", "diffHunk": "@@ -419,7 +420,7 @@ else if (partitioningHandle.equals(SCALED_WRITER_DISTRIBUTION)) {\n         }\n         Set<SqlStageExecution> childStages = childStagesBuilder.build();\n         stage.addStateChangeListener(newState -> {\n-            if (newState.isDone()) {\n+            if (newState.isDone() || newState == FLUSHING) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk3MzY1NQ==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r453973655", "bodyText": "Add a comment explaining that to be flushing, there must be at least one flushing task, and all others must be flushing or finished.\nalso replace flushingTasks.size() > 0 with !flushingTasks.isEmpty()", "author": "dain", "createdAt": "2020-07-13T22:17:15Z", "path": "presto-main/src/main/java/io/prestosql/execution/SqlStageExecution.java", "diffHunk": "@@ -524,6 +536,12 @@ else if (taskState == TaskState.FINISHED) {\n         }\n     }\n \n+    private synchronized boolean isFlushing()\n+    {\n+        return flushingTasks.size() > 0", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk3NTEzMw==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r453975133", "bodyText": "I'm not a fan of this method.  In all uses, it seem to be used in an || with some other clause on the state.  Instead, I would just inline this method.", "author": "dain", "createdAt": "2020-07-13T22:19:19Z", "path": "presto-main/src/main/java/io/prestosql/execution/TaskState.java", "diffHunk": "@@ -64,4 +70,9 @@ public boolean isDone()\n     {\n         return doneState;\n     }\n+\n+    public boolean isRunningOrFlushing()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ3MDA2NA==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461470064", "bodyText": "put it above if (finishedTasks.containsAll(allTasks)) { to align it with states order", "author": "sopel39", "createdAt": "2020-07-28T10:09:03Z", "path": "presto-main/src/main/java/io/prestosql/execution/SqlStageExecution.java", "diffHunk": "@@ -228,6 +230,9 @@ public synchronized void schedulingComplete()\n         if (finishedTasks.containsAll(allTasks)) {\n             stateMachine.transitionToFinished();\n         }\n+        if (isFlushing()) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ3MDMwOQ==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461470309", "bodyText": "put it above else if (taskState == TaskState.FINISHED) { to align with states order", "author": "sopel39", "createdAt": "2020-07-28T10:09:32Z", "path": "presto-main/src/main/java/io/prestosql/execution/SqlStageExecution.java", "diffHunk": "@@ -507,15 +512,22 @@ else if (taskState == TaskState.ABORTED) {\n             }\n             else if (taskState == TaskState.FINISHED) {\n                 finishedTasks.add(taskStatus.getTaskId());\n+                flushingTasks.remove(taskStatus.getTaskId());\n+            }\n+            else if (taskState == TaskState.FLUSHING) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ3MTU1Nw==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461471557", "bodyText": "put it above if (finishedTasks.containsAll(allTasks)) { to align with states order", "author": "sopel39", "createdAt": "2020-07-28T10:11:30Z", "path": "presto-main/src/main/java/io/prestosql/execution/SqlStageExecution.java", "diffHunk": "@@ -507,15 +512,22 @@ else if (taskState == TaskState.ABORTED) {\n             }\n             else if (taskState == TaskState.FINISHED) {\n                 finishedTasks.add(taskStatus.getTaskId());\n+                flushingTasks.remove(taskStatus.getTaskId());\n+            }\n+            else if (taskState == TaskState.FLUSHING) {\n+                flushingTasks.add(taskStatus.getTaskId());\n             }\n \n-            if (stageState == StageState.SCHEDULED || stageState == StageState.RUNNING) {\n+            if (stageState == StageState.SCHEDULED || stageState == StageState.RUNNING || stageState == StageState.FLUSHING) {\n                 if (taskState == TaskState.RUNNING) {\n                     stateMachine.transitionToRunning();\n                 }\n                 if (finishedTasks.containsAll(allTasks)) {\n                     stateMachine.transitionToFinished();\n                 }\n+                if (isFlushing()) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ4OTUyMQ==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461489521", "bodyText": "Move\nassertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING);\n\ncheck above sqlTask.updateTask", "author": "sopel39", "createdAt": "2020-07-28T10:47:39Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTask.java", "diffHunk": "@@ -142,13 +142,12 @@ public void testSimpleQuery()\n                 ImmutableList.of(new TaskSource(TABLE_SCAN_NODE_ID, ImmutableSet.of(SPLIT), true)),\n                 createInitialEmptyOutputBuffers(PARTITIONED).withBuffer(OUT, 0).withNoMoreBufferIds(),\n                 OptionalInt.empty());\n-        assertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5MTk1MA==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461491950", "bodyText": "nit: this will wait for 1s if taskInfo.getTaskStatus().getState() is already FLUSHING. You could use:\nsqlTask.getTaskInfo(RUNNING).get(1, SECONDS);\n\ninstead", "author": "sopel39", "createdAt": "2020-07-28T10:52:33Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTask.java", "diffHunk": "@@ -142,13 +142,12 @@ public void testSimpleQuery()\n                 ImmutableList.of(new TaskSource(TABLE_SCAN_NODE_ID, ImmutableSet.of(SPLIT), true)),\n                 createInitialEmptyOutputBuffers(PARTITIONED).withBuffer(OUT, 0).withNoMoreBufferIds(),\n                 OptionalInt.empty());\n-        assertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING);\n \n-        taskInfo = sqlTask.getTaskInfo();\n-        assertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING);\n+        taskInfo = sqlTask.getTaskInfo(taskInfo.getTaskStatus().getState()).get(1, SECONDS);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5MzM0MA==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461493340", "bodyText": "move assertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING); above TaskInfo taskInfo = sqlTask.updateTask(TEST_SESSION,", "author": "sopel39", "createdAt": "2020-07-28T10:55:25Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTask.java", "diffHunk": "@@ -207,10 +206,9 @@ public void testAbort()\n                 ImmutableList.of(new TaskSource(TABLE_SCAN_NODE_ID, ImmutableSet.of(SPLIT), true)),\n                 createInitialEmptyOutputBuffers(PARTITIONED).withBuffer(OUT, 0).withNoMoreBufferIds(),\n                 OptionalInt.empty());\n-        assertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5MzYwMQ==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461493601", "bodyText": "this will wait for 1s if taskInfo.getTaskStatus().getState() is already FLUSHING. You could use:\nsqlTask.getTaskInfo(RUNNING).get(1, SECONDS);\n\ninstead", "author": "sopel39", "createdAt": "2020-07-28T10:56:02Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTask.java", "diffHunk": "@@ -207,10 +206,9 @@ public void testAbort()\n                 ImmutableList.of(new TaskSource(TABLE_SCAN_NODE_ID, ImmutableSet.of(SPLIT), true)),\n                 createInitialEmptyOutputBuffers(PARTITIONED).withBuffer(OUT, 0).withNoMoreBufferIds(),\n                 OptionalInt.empty());\n-        assertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING);\n \n-        taskInfo = sqlTask.getTaskInfo();\n-        assertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING);\n+        taskInfo = sqlTask.getTaskInfo(taskInfo.getTaskStatus().getState()).get(1, SECONDS);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5MzgzMQ==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461493831", "bodyText": "static import should be separate commit", "author": "sopel39", "createdAt": "2020-07-28T10:56:30Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTaskExecution.java", "diffHunk": "@@ -177,7 +180,7 @@ public void testSimple(PipelineExecutionStrategy executionStrategy)\n \n             //\n             // test body\n-            assertEquals(taskStateMachine.getState(), TaskState.RUNNING);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4NjE2Ng==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r462286166", "bodyText": "added that as a separate commit", "author": "rohangarg", "createdAt": "2020-07-29T13:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5MzgzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5NzM4OQ==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461497389", "bodyText": "I think we can simplify it by:\nTaskState taskState = taskStateMachine.getStateChange(taskStateMachine.getState()).get(10, SECONDS);\n\nnot that if getState returns FINISHED, future will complete immediately.", "author": "sopel39", "createdAt": "2020-07-28T11:03:47Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTaskExecution.java", "diffHunk": "@@ -278,7 +282,13 @@ public void testSimple(PipelineExecutionStrategy executionStrategy)\n             }\n \n             outputBufferConsumer.abort(); // complete the task by calling abort on it\n-            TaskState taskState = taskStateMachine.getStateChange(TaskState.RUNNING).get(10, SECONDS);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3MTIyNw==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461771227", "bodyText": "I wanted to do that itself - but the getStateChange method throws an exception if the getState returns FINISHED.\nAlso, if the state is running, the function might return if the task transitions to FLUSHING. And we'd have to run getStateChange again.", "author": "rohangarg", "createdAt": "2020-07-28T18:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5NzM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODI2Mg==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461498262", "bodyText": "why we cannot assert:\nassertEquals(taskStateMachine.getState(), RUNNING);\n\nas in testSimple?", "author": "sopel39", "createdAt": "2020-07-28T11:05:27Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTaskExecution.java", "diffHunk": "@@ -428,7 +438,7 @@ public void testComplex(PipelineExecutionStrategy executionStrategy)\n \n             //\n             // test body\n-            assertEquals(taskStateMachine.getState(), TaskState.RUNNING);\n+            assertTrue(taskStateMachine.getState() == RUNNING || taskStateMachine.getState() == FLUSHING);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3NDYwNg==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461774606", "bodyText": "Yes you are right, I missed that change.", "author": "rohangarg", "createdAt": "2020-07-28T18:08:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODI2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODQ0Mw==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461498443", "bodyText": "this check doesn't make sense if we assert:\nassertTrue(taskStateMachine.getState() == RUNNING || taskStateMachine.getState() == FLUSHING);\n\nabove", "author": "sopel39", "createdAt": "2020-07-28T11:05:50Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTaskExecution.java", "diffHunk": "@@ -474,6 +484,7 @@ public void testComplex(PipelineExecutionStrategy executionStrategy)\n                     // assert that task result is produced\n                     outputBufferConsumer.consume(100 * 5 * 3, ASSERT_WAIT_TIMEOUT);\n                     outputBufferConsumer.assertBufferComplete(ASSERT_WAIT_TIMEOUT);\n+                    assertEquals(taskStateMachine.getStateChange(RUNNING).get(10, SECONDS), FLUSHING);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODYzMg==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461498632", "bodyText": "I think we can simplify it by:\nTaskState taskState = taskStateMachine.getStateChange(taskStateMachine.getState()).get(10, SECONDS);\n\nnot that if getState returns FINISHED, future will complete immediately.", "author": "sopel39", "createdAt": "2020-07-28T11:06:14Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTaskExecution.java", "diffHunk": "@@ -580,7 +591,13 @@ public void testComplex(PipelineExecutionStrategy executionStrategy)\n             }\n \n             outputBufferConsumer.abort(); // complete the task by calling abort on it\n-            TaskState taskState = taskStateMachine.getStateChange(TaskState.RUNNING).get(10, SECONDS);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMjAzOQ==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461502039", "bodyText": "this will wait for 1s if taskInfo.getTaskStatus().getState() is already FLUSHING. You could use:\nsqlTaskManager.getTaskInfo(taskId, RUNNING).get(1, TimeUnit.SECONDS);\n\ninstead", "author": "sopel39", "createdAt": "2020-07-28T11:12:43Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTaskManager.java", "diffHunk": "@@ -111,20 +113,19 @@ public void testSimpleQuery()\n         try (SqlTaskManager sqlTaskManager = createSqlTaskManager(new TaskManagerConfig())) {\n             TaskId taskId = TASK_ID;\n             TaskInfo taskInfo = createTask(sqlTaskManager, taskId, ImmutableSet.of(SPLIT), createInitialEmptyOutputBuffers(PARTITIONED).withBuffer(OUT, 0).withNoMoreBufferIds());\n-            assertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING);\n \n-            taskInfo = sqlTaskManager.getTaskInfo(taskId);\n-            assertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING);\n+            taskInfo = sqlTaskManager.getTaskInfo(taskId, taskInfo.getTaskStatus().getState()).get(1, TimeUnit.SECONDS);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMjg3Nw==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461502877", "bodyText": "ditto", "author": "sopel39", "createdAt": "2020-07-28T11:14:15Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTaskManager.java", "diffHunk": "@@ -191,10 +192,9 @@ public void testAbortResults()\n         try (SqlTaskManager sqlTaskManager = createSqlTaskManager(new TaskManagerConfig())) {\n             TaskId taskId = TASK_ID;\n             TaskInfo taskInfo = createTask(sqlTaskManager, taskId, ImmutableSet.of(SPLIT), createInitialEmptyOutputBuffers(PARTITIONED).withBuffer(OUT, 0).withNoMoreBufferIds());\n-            assertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING);\n \n-            taskInfo = sqlTaskManager.getTaskInfo(taskId);\n-            assertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING);\n+            taskInfo = sqlTaskManager.getTaskInfo(taskId, taskInfo.getTaskStatus().getState()).get(1, TimeUnit.SECONDS);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwNDUwNg==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461504506", "bodyText": "change the order of conditions:\nif (newState == FLUSHING || newState.isDone())", "author": "sopel39", "createdAt": "2020-07-28T11:17:27Z", "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SqlQueryScheduler.java", "diffHunk": "@@ -421,7 +421,7 @@ else if (partitioningHandle.equals(SCALED_WRITER_DISTRIBUTION)) {\n         }\n         Set<SqlStageExecution> childStages = childStagesBuilder.build();\n         stage.addStateChangeListener(newState -> {\n-            if (newState.isDone()) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwNTY1MQ==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461505651", "bodyText": "Do we need distributed runner for this test?", "author": "sopel39", "createdAt": "2020-07-28T11:19:47Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestSqlStageExecution.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.QueryId;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.SessionTestUtils.TEST_SESSION;\n+import static io.prestosql.execution.QueryState.RUNNING;\n+import static io.prestosql.execution.StageState.CANCELED;\n+import static io.prestosql.execution.StageState.FLUSHING;\n+import static io.prestosql.execution.TestQueryRunnerUtil.createQuery;\n+import static io.prestosql.execution.TestQueryRunnerUtil.createQueryRunner;\n+import static io.prestosql.execution.TestQueryRunnerUtil.waitForQueryState;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestSqlStageExecution {\n+\n+    private DistributedQueryRunner queryRunner;\n+\n+    @Test(timeOut = 30_000)\n+    public void testFlushingState()\n+            throws Exception\n+    {\n+        queryRunner = createQueryRunner(ImmutableMap.of(\"node-scheduler.include-coordinator\", \"false\"));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg0Mjk1Ng==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461842956", "bodyText": "No, we don't need a distributed runner for this test. Used it because TestQueryRunnerUtil provided a clean interface for waitForQueryState (without fetching results) - is any existing one with LocalQueryRunner too?", "author": "rohangarg", "createdAt": "2020-07-28T20:02:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwNTY1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwNzA2Ng==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461507066", "bodyText": "put some sleep here to prevent active loop, e.g:\n            MILLISECONDS.sleep(100);", "author": "sopel39", "createdAt": "2020-07-28T11:22:45Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestSqlStageExecution.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.QueryId;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.SessionTestUtils.TEST_SESSION;\n+import static io.prestosql.execution.QueryState.RUNNING;\n+import static io.prestosql.execution.StageState.CANCELED;\n+import static io.prestosql.execution.StageState.FLUSHING;\n+import static io.prestosql.execution.TestQueryRunnerUtil.createQuery;\n+import static io.prestosql.execution.TestQueryRunnerUtil.createQueryRunner;\n+import static io.prestosql.execution.TestQueryRunnerUtil.waitForQueryState;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestSqlStageExecution {\n+\n+    private DistributedQueryRunner queryRunner;\n+\n+    @Test(timeOut = 30_000)\n+    public void testFlushingState()\n+            throws Exception\n+    {\n+        queryRunner = createQueryRunner(ImmutableMap.of(\"node-scheduler.include-coordinator\", \"false\"));\n+        QueryId queryId = createQuery(queryRunner, TEST_SESSION, \"SELECT * FROM tpch.sf1000.lineitem limit 1\");\n+        waitForQueryState(queryRunner, queryId, RUNNING);\n+\n+        QueryInfo queryInfo = queryRunner.getCoordinator().getFullQueryInfo(queryId);\n+        while (queryInfo.getOutputStage().get().getState() != FLUSHING) {\n+            queryInfo = queryRunner.getCoordinator().getFullQueryInfo(queryId); // wait for the query to finish producing results, but don't poll them", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwNzE1MQ==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461507151", "bodyText": "dittto", "author": "sopel39", "createdAt": "2020-07-28T11:22:57Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestSqlStageExecution.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.QueryId;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.SessionTestUtils.TEST_SESSION;\n+import static io.prestosql.execution.QueryState.RUNNING;\n+import static io.prestosql.execution.StageState.CANCELED;\n+import static io.prestosql.execution.StageState.FLUSHING;\n+import static io.prestosql.execution.TestQueryRunnerUtil.createQuery;\n+import static io.prestosql.execution.TestQueryRunnerUtil.createQueryRunner;\n+import static io.prestosql.execution.TestQueryRunnerUtil.waitForQueryState;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestSqlStageExecution {\n+\n+    private DistributedQueryRunner queryRunner;\n+\n+    @Test(timeOut = 30_000)\n+    public void testFlushingState()\n+            throws Exception\n+    {\n+        queryRunner = createQueryRunner(ImmutableMap.of(\"node-scheduler.include-coordinator\", \"false\"));\n+        QueryId queryId = createQuery(queryRunner, TEST_SESSION, \"SELECT * FROM tpch.sf1000.lineitem limit 1\");\n+        waitForQueryState(queryRunner, queryId, RUNNING);\n+\n+        QueryInfo queryInfo = queryRunner.getCoordinator().getFullQueryInfo(queryId);\n+        while (queryInfo.getOutputStage().get().getState() != FLUSHING) {\n+            queryInfo = queryRunner.getCoordinator().getFullQueryInfo(queryId); // wait for the query to finish producing results, but don't poll them\n+        }\n+\n+        while (queryInfo.getOutputStage().get().getSubStages().get(0).getState() != CANCELED) {\n+            queryInfo = queryRunner.getCoordinator().getFullQueryInfo(queryId); // wait for the sub stages to go to cancelled state", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwNzQyNg==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461507426", "bodyText": "could you also pull results here and wait for the query to finish gracefully?", "author": "sopel39", "createdAt": "2020-07-28T11:23:33Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestSqlStageExecution.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.QueryId;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.SessionTestUtils.TEST_SESSION;\n+import static io.prestosql.execution.QueryState.RUNNING;\n+import static io.prestosql.execution.StageState.CANCELED;\n+import static io.prestosql.execution.StageState.FLUSHING;\n+import static io.prestosql.execution.TestQueryRunnerUtil.createQuery;\n+import static io.prestosql.execution.TestQueryRunnerUtil.createQueryRunner;\n+import static io.prestosql.execution.TestQueryRunnerUtil.waitForQueryState;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestSqlStageExecution {\n+\n+    private DistributedQueryRunner queryRunner;\n+\n+    @Test(timeOut = 30_000)\n+    public void testFlushingState()\n+            throws Exception\n+    {\n+        queryRunner = createQueryRunner(ImmutableMap.of(\"node-scheduler.include-coordinator\", \"false\"));\n+        QueryId queryId = createQuery(queryRunner, TEST_SESSION, \"SELECT * FROM tpch.sf1000.lineitem limit 1\");\n+        waitForQueryState(queryRunner, queryId, RUNNING);\n+\n+        QueryInfo queryInfo = queryRunner.getCoordinator().getFullQueryInfo(queryId);\n+        while (queryInfo.getOutputStage().get().getState() != FLUSHING) {\n+            queryInfo = queryRunner.getCoordinator().getFullQueryInfo(queryId); // wait for the query to finish producing results, but don't poll them\n+        }\n+\n+        while (queryInfo.getOutputStage().get().getSubStages().get(0).getState() != CANCELED) {\n+            queryInfo = queryRunner.getCoordinator().getFullQueryInfo(queryId); // wait for the sub stages to go to cancelled state\n+        }\n+\n+        assertEquals(queryInfo.getState(), RUNNING);\n+        assertEquals(queryInfo.getOutputStage().get().getState(), FLUSHING);\n+        assertEquals(queryInfo.getOutputStage().get().getSubStages().size(), 1);\n+        assertEquals(queryInfo.getOutputStage().get().getSubStages().get(0).getState(), CANCELED);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3MzAzOQ==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r461573039", "bodyText": "please update canScheduleMoreTasks method", "author": "sopel39", "createdAt": "2020-07-28T13:20:10Z", "path": "presto-main/src/main/java/io/prestosql/execution/StageState.java", "diffHunk": "@@ -43,6 +43,11 @@\n      * Stage is running.\n      */\n     RUNNING(false, false),\n+    /**", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MDcyOA==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r462340728", "bodyText": "@dain is this a valid transition for grouped execution or there should be additional conditions? I'm thinking that if there are more execution groups, the task should stay in RUNNING state.", "author": "sopel39", "createdAt": "2020-07-29T14:25:41Z", "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskExecution.java", "diffHunk": "@@ -641,6 +641,7 @@ private synchronized void checkTaskCompletion()\n \n         // are there still pages in the output buffer\n         if (!outputBuffer.isFinished()) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5MDY0Ng==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r462390646", "bodyText": "shouldn't that be moved above outputBufferConsumer.consume(300 + 200, ASSERT_WAIT_TIMEOUT); to prevent race condition?\nDoes outputBufferConsumer.assertBufferComplete(ASSERT_WAIT_TIMEOUT); consume all output?", "author": "sopel39", "createdAt": "2020-07-29T15:31:21Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTaskExecution.java", "diffHunk": "@@ -209,6 +212,7 @@ public void testSimple(PipelineExecutionStrategy executionStrategy)\n                     // assert that task result is produced\n                     outputBufferConsumer.consume(300 + 200, ASSERT_WAIT_TIMEOUT);\n                     outputBufferConsumer.assertBufferComplete(ASSERT_WAIT_TIMEOUT);\n+                    assertEquals(taskStateMachine.getStateChange(RUNNING).get(10, SECONDS), FLUSHING);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0MzA3Nw==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r462443077", "bodyText": "Yes, assertBufferComplete makes sure that the buffer is complete. Added the assertions as discussed offline.", "author": "rohangarg", "createdAt": "2020-07-29T16:50:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5MDY0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwOTUwNw==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r462409507", "bodyText": "please use assertEventually", "author": "sopel39", "createdAt": "2020-07-29T15:57:53Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestFlushingStageState.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.QueryId;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.SessionTestUtils.TEST_SESSION;\n+import static io.prestosql.execution.QueryState.RUNNING;\n+import static io.prestosql.execution.StageState.CANCELED;\n+import static io.prestosql.execution.StageState.FLUSHING;\n+import static io.prestosql.execution.TestQueryRunnerUtil.createQuery;\n+import static io.prestosql.execution.TestQueryRunnerUtil.createQueryRunner;\n+import static io.prestosql.execution.TestQueryRunnerUtil.waitForQueryState;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestFlushingStageState\n+{\n+    private DistributedQueryRunner queryRunner;\n+\n+    @Test(timeOut = 30_000)\n+    public void testFlushingState()\n+            throws Exception\n+    {\n+        queryRunner = createQueryRunner(ImmutableMap.of(\"node-scheduler.include-coordinator\", \"false\"));\n+        QueryId queryId = createQuery(queryRunner, TEST_SESSION, \"SELECT * FROM tpch.sf1000.lineitem limit 1\");\n+        waitForQueryState(queryRunner, queryId, RUNNING);\n+\n+        QueryInfo queryInfo = queryRunner.getCoordinator().getFullQueryInfo(queryId);\n+        while (queryInfo.getOutputStage().get().getState() != FLUSHING) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0MzU5Nw==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r462443597", "bodyText": "fixed - also moved the creation of queryRunner to an unbounded setup. I think the test after setup should run within 30sec.", "author": "rohangarg", "createdAt": "2020-07-29T16:51:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwOTUwNw=="}], "type": "inlineReview"}, {"oid": "7fdbb522e4a48a2b1de368b4dbbe3a118ab7848b", "url": "https://github.com/trinodb/trino/commit/7fdbb522e4a48a2b1de368b4dbbe3a118ab7848b", "message": "Add FLUSHING state to tasks and stages", "committedDate": "2020-07-29T16:31:29Z", "type": "commit"}, {"oid": "1304a49136d80e8a7e36783ec1535f085bd6c76a", "url": "https://github.com/trinodb/trino/commit/1304a49136d80e8a7e36783ec1535f085bd6c76a", "message": "Fix imports and cleanup in TestSqlTaskExecution", "committedDate": "2020-07-29T16:39:30Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "d887993088caa0c06332aa05dd1376a931fb7b45", "url": "https://github.com/trinodb/trino/commit/d887993088caa0c06332aa05dd1376a931fb7b45", "message": "Cancel sub stages in FLUSHING state", "committedDate": "2020-07-29T20:07:24Z", "type": "commit"}, {"oid": "d887993088caa0c06332aa05dd1376a931fb7b45", "url": "https://github.com/trinodb/trino/commit/d887993088caa0c06332aa05dd1376a931fb7b45", "message": "Cancel sub stages in FLUSHING state", "committedDate": "2020-07-29T20:07:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg2NTczMQ==", "url": "https://github.com/trinodb/trino/pull/4290#discussion_r462865731", "bodyText": "nit this should be separate commit", "author": "sopel39", "createdAt": "2020-07-30T09:20:09Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestSqlTaskManager.java", "diffHunk": "@@ -110,21 +112,20 @@ public void testSimpleQuery()\n     {\n         try (SqlTaskManager sqlTaskManager = createSqlTaskManager(new TaskManagerConfig())) {\n             TaskId taskId = TASK_ID;\n-            TaskInfo taskInfo = createTask(sqlTaskManager, taskId, ImmutableSet.of(SPLIT), createInitialEmptyOutputBuffers(PARTITIONED).withBuffer(OUT, 0).withNoMoreBufferIds());\n-            assertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING);\n+            createTask(sqlTaskManager, taskId, ImmutableSet.of(SPLIT), createInitialEmptyOutputBuffers(PARTITIONED).withBuffer(OUT, 0).withNoMoreBufferIds());\n \n-            taskInfo = sqlTaskManager.getTaskInfo(taskId);\n-            assertEquals(taskInfo.getTaskStatus().getState(), TaskState.RUNNING);\n+            TaskInfo taskInfo = sqlTaskManager.getTaskInfo(taskId, TaskState.RUNNING).get(1, TimeUnit.SECONDS);\n+            assertEquals(taskInfo.getTaskStatus().getState(), TaskState.FLUSHING);\n \n             BufferResult results = sqlTaskManager.getTaskResults(taskId, OUT, 0, DataSize.of(1, Unit.MEGABYTE)).get();\n-            assertEquals(results.isBufferComplete(), false);\n+            assertFalse(results.isBufferComplete());\n             assertEquals(results.getSerializedPages().size(), 1);\n             assertEquals(results.getSerializedPages().get(0).getPositionCount(), 1);\n \n             for (boolean moreResults = true; moreResults; moreResults = !results.isBufferComplete()) {\n                 results = sqlTaskManager.getTaskResults(taskId, OUT, results.getToken() + results.getSerializedPages().size(), DataSize.of(1, Unit.MEGABYTE)).get();\n             }\n-            assertEquals(results.isBufferComplete(), true);\n+            assertTrue(results.isBufferComplete());", "originalCommit": "7fdbb522e4a48a2b1de368b4dbbe3a118ab7848b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}