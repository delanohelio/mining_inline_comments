{"pr_number": 4472, "pr_title": "Check permission for create table like", "pr_createdAt": "2020-07-16T09:36:08Z", "pr_url": "https://github.com/trinodb/trino/pull/4472", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NDkxMA==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r455664910", "bodyText": "checkCanShowColumns is dedicated for SHOW COLUMNS statement. Notice that raising error: Cannot show columns of table %s for CREATE TABLE could be a bit misleading.\nInstead I would use io.prestosql.security.AccessControl#filterColumns, then in case all columns were filtered you might need to raise some custom AccessDeniedException", "author": "kokosing", "createdAt": "2020-07-16T09:50:09Z", "path": "presto-main/src/main/java/io/prestosql/execution/CreateTableTask.java", "diffHunk": "@@ -161,6 +162,10 @@ else if (element instanceof LikeClause) {\n \n                 TableMetadata likeTableMetadata = metadata.getTableMetadata(session, likeTable);\n \n+                accessControl.checkCanShowColumns(\n+                        session.toSecurityContext(),\n+                        new CatalogSchemaTableName(likeTableName.getCatalogName(), likeTableName.asSchemaTableName()));\n+", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY5ODE4Mg==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r455698182", "bodyText": "If we model after DESCRIBE then it should work like that:\n1.checkCanShowColumns\n2.filterColumns and use only those that are visible\nWDYT?", "author": "skrzypo987", "createdAt": "2020-07-16T10:50:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NDkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczMzg1Mw==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r455733853", "bodyText": "Do you io.prestosql.sql.rewrite.ShowQueriesRewrite.Visitor#visitShowColumns and filterColumns in io.prestosql.metadata.MetadataListing#listTableColumns?\nThat sounds good to me, but I think we might need to have some generic AccessControl::checkCanReferenceTable instead of using visitShowColumns here.\n@electrum, @martint WDYT?", "author": "kokosing", "createdAt": "2020-07-16T12:01:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NDkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMDcyMw==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r461220723", "bodyText": "What would be the semantics of checkCanReferenceTable? That seems to overlap with checking for SELECT permissions, so it'd be error prone if the implementations of both methods are inconsistent with each other.", "author": "martint", "createdAt": "2020-07-27T23:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NDkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMjU3Mg==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r461502572", "bodyText": "What would be the semantics of checkCanReferenceTable?\n\nIMO it should allow to reference table anytime it is not filtered by filterTables. So if user has any privilege to a table or any its columns.\nAs I understand user does not have to have SELECT access to do CREATE TABLE LIKE. For example INSERT could also be good enough here.", "author": "kokosing", "createdAt": "2020-07-28T11:13:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NDkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUxNTAzMw==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r461515033", "bodyText": "One more though. Since we are requiring admin-like privileges for SHOW CREATE TABLE as that could reveal sensitive data (table properties) then maybe we need admin-like privileges here as well. Because here we also could access sensitive data. It is a bit unitive to me, but it is coherent and secure. That way we could simply call checkCanShowCreateTable here and overwrite the error message that table cannot be used in CREATE TABLE LIKE.\n@skrzypo987 @martint What do you think? Then this pull request could become very simple. No need to do filterColumns etc.", "author": "kokosing", "createdAt": "2020-07-28T11:39:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NDkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0NDY5NQ==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r461544695", "bodyText": "This seems reasonable If and only if the LIKE statement can retrieve data that DESCRIBE cannot.", "author": "skrzypo987", "createdAt": "2020-07-28T12:35:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NDkxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3MTk4MA==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r461571980", "bodyText": "This seems reasonable If and only if the LIKE statement can retrieve data that DESCRIBE cannot.\n\nSo this is the case when we are copying table properties. If we are just copying columns then maybe describe is enough, but what about column filtering, it seems needed then.", "author": "kokosing", "createdAt": "2020-07-28T13:18:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NDkxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NTA1NQ==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r455665055", "bodyText": "final", "author": "kokosing", "createdAt": "2020-07-16T09:50:23Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateTableTask.java", "diffHunk": "@@ -77,14 +93,20 @@\n public class TestCreateTableTask\n {\n     private static final String CATALOG_NAME = \"catalog\";\n+    private static ConnectorTableMetadata PARENT_TABLE = new ConnectorTableMetadata(", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2Njg0MA==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r455666840", "bodyText": "reference PARENT_TABLE here", "author": "kokosing", "createdAt": "2020-07-16T09:53:14Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateTableTask.java", "diffHunk": "@@ -186,6 +208,62 @@ public void testCreateWithUnsupportedConnectorThrowsWhenNotNull()\n                 .hasMessage(\"Catalog 'catalog' does not support non-null column for column name 'b'\");\n     }\n \n+    @Test\n+    public void testCreateLike()\n+    {\n+        CreateTable statement = new CreateTable(\n+                QualifiedName.of(\"test_table\"),\n+                List.of(new LikeClause(QualifiedName.of(\"parent_table\"), Optional.empty())),", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NzE5MQ==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r455667191", "bodyText": "reference PARENT_TABLE here", "author": "kokosing", "createdAt": "2020-07-16T09:53:47Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateTableTask.java", "diffHunk": "@@ -186,6 +208,62 @@ public void testCreateWithUnsupportedConnectorThrowsWhenNotNull()\n                 .hasMessage(\"Catalog 'catalog' does not support non-null column for column name 'b'\");\n     }\n \n+    @Test\n+    public void testCreateLike()\n+    {\n+        CreateTable statement = new CreateTable(\n+                QualifiedName.of(\"test_table\"),\n+                List.of(new LikeClause(QualifiedName.of(\"parent_table\"), Optional.empty())),\n+                true,\n+                ImmutableList.of(),\n+                Optional.empty());\n+\n+        new CreateTableTask().internalExecute(statement, metadata, new AllowAllAccessControl(), testSession, List.of());\n+        assertEquals(metadata.getCreateTableCallCount(), 1);\n+\n+        assertThat(metadata.getReceivedTableMetadata().get(0).getColumns())\n+                .isEqualTo(PARENT_TABLE.getColumns());\n+        assertThat(metadata.getReceivedTableMetadata().get(0).getProperties())\n+                .isNotEqualTo(PARENT_TABLE.getProperties());\n+    }\n+\n+    @Test\n+    public void testCreateLikeWithProperties()\n+    {\n+        CreateTable statement = new CreateTable(\n+                QualifiedName.of(\"test_table\"),\n+                List.of(new LikeClause(QualifiedName.of(\"parent_table\"), Optional.of(INCLUDING))),\n+                true,\n+                ImmutableList.of(),\n+                Optional.empty());\n+\n+        new CreateTableTask().internalExecute(statement, metadata, new AllowAllAccessControl(), testSession, List.of());\n+        assertEquals(metadata.getCreateTableCallCount(), 1);\n+\n+        assertThat(metadata.getReceivedTableMetadata().get(0).getColumns())\n+                .isEqualTo(PARENT_TABLE.getColumns());\n+        assertThat(metadata.getReceivedTableMetadata().get(0).getProperties())\n+                .isEqualTo(PARENT_TABLE.getProperties());\n+    }\n+\n+    @Test\n+    public void testCreateLikeDenyPermission()\n+    {\n+        CreateTable statement = new CreateTable(\n+                QualifiedName.of(\"test_table\"),\n+                List.of(new LikeClause(QualifiedName.of(\"parent_table\"), Optional.empty())),", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NzI3NA==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r455667274", "bodyText": "reference PARENT_TABLE here", "author": "kokosing", "createdAt": "2020-07-16T09:53:56Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateTableTask.java", "diffHunk": "@@ -186,6 +208,62 @@ public void testCreateWithUnsupportedConnectorThrowsWhenNotNull()\n                 .hasMessage(\"Catalog 'catalog' does not support non-null column for column name 'b'\");\n     }\n \n+    @Test\n+    public void testCreateLike()\n+    {\n+        CreateTable statement = new CreateTable(\n+                QualifiedName.of(\"test_table\"),\n+                List.of(new LikeClause(QualifiedName.of(\"parent_table\"), Optional.empty())),\n+                true,\n+                ImmutableList.of(),\n+                Optional.empty());\n+\n+        new CreateTableTask().internalExecute(statement, metadata, new AllowAllAccessControl(), testSession, List.of());\n+        assertEquals(metadata.getCreateTableCallCount(), 1);\n+\n+        assertThat(metadata.getReceivedTableMetadata().get(0).getColumns())\n+                .isEqualTo(PARENT_TABLE.getColumns());\n+        assertThat(metadata.getReceivedTableMetadata().get(0).getProperties())\n+                .isNotEqualTo(PARENT_TABLE.getProperties());\n+    }\n+\n+    @Test\n+    public void testCreateLikeWithProperties()\n+    {\n+        CreateTable statement = new CreateTable(\n+                QualifiedName.of(\"test_table\"),\n+                List.of(new LikeClause(QualifiedName.of(\"parent_table\"), Optional.of(INCLUDING))),", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2NzYyNg==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r455667626", "bodyText": "can you assert that there are no properties?", "author": "kokosing", "createdAt": "2020-07-16T09:54:34Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateTableTask.java", "diffHunk": "@@ -186,6 +208,62 @@ public void testCreateWithUnsupportedConnectorThrowsWhenNotNull()\n                 .hasMessage(\"Catalog 'catalog' does not support non-null column for column name 'b'\");\n     }\n \n+    @Test\n+    public void testCreateLike()\n+    {\n+        CreateTable statement = new CreateTable(\n+                QualifiedName.of(\"test_table\"),\n+                List.of(new LikeClause(QualifiedName.of(\"parent_table\"), Optional.empty())),\n+                true,\n+                ImmutableList.of(),\n+                Optional.empty());\n+\n+        new CreateTableTask().internalExecute(statement, metadata, new AllowAllAccessControl(), testSession, List.of());\n+        assertEquals(metadata.getCreateTableCallCount(), 1);\n+\n+        assertThat(metadata.getReceivedTableMetadata().get(0).getColumns())\n+                .isEqualTo(PARENT_TABLE.getColumns());\n+        assertThat(metadata.getReceivedTableMetadata().get(0).getProperties())\n+                .isNotEqualTo(PARENT_TABLE.getProperties());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY2ODIyNA==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r455668224", "bodyText": "verify that tableHandle references PARENT_TABLE", "author": "kokosing", "createdAt": "2020-07-16T09:55:34Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestCreateTableTask.java", "diffHunk": "@@ -260,9 +338,23 @@ public Type fromSqlType(String sqlType)\n         @Override\n         public Optional<TableHandle> getTableHandle(Session session, QualifiedObjectName tableName)\n         {\n+            if (tableName.asSchemaTableName().equals(PARENT_TABLE.getTable())) {\n+                return Optional.of(\n+                        new TableHandle(\n+                                new CatalogName(CATALOG_NAME),\n+                                new TestingTableHandle(tableName.asSchemaTableName()),\n+                                TestingConnectorTransactionHandle.INSTANCE,\n+                                Optional.empty()));\n+            }\n             return Optional.empty();\n         }\n \n+        @Override\n+        public TableMetadata getTableMetadata(Session session, TableHandle tableHandle)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5NDEwMg==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r457894102", "bodyText": "toImmutableList() let's be consistent with the current convention. Consider changing the convention in the separate pull request.", "author": "kokosing", "createdAt": "2020-07-21T07:31:45Z", "path": "presto-main/src/main/java/io/prestosql/execution/CreateTableTask.java", "diffHunk": "@@ -170,8 +182,12 @@ else if (element instanceof LikeClause) {\n                     inheritedProperties = likeTableMetadata.getMetadata().getProperties();\n                 }\n \n-                likeTableMetadata.getColumns().stream()\n-                        .filter(column -> !column.isHidden())\n+                accessControl.filterColumns(\n+                        session.toSecurityContext(),\n+                        tableName.asCatalogSchemaTableName(),\n+                        likeTableMetadata.getColumns().stream()\n+                                .filter(column -> !column.isHidden())\n+                                .collect(toUnmodifiableList()))", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk1NzU0NQ==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r457957545", "bodyText": "Wow. I haven't even noticed. I guess this is the default idea behaviour now.", "author": "skrzypo987", "createdAt": "2020-07-21T09:20:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5NDEwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5NDQzNQ==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r457894435", "bodyText": "What is happening when all columns are filtered? Do you have test for that?", "author": "kokosing", "createdAt": "2020-07-21T07:32:25Z", "path": "presto-main/src/main/java/io/prestosql/execution/CreateTableTask.java", "diffHunk": "@@ -170,8 +182,12 @@ else if (element instanceof LikeClause) {\n                     inheritedProperties = likeTableMetadata.getMetadata().getProperties();\n                 }\n \n-                likeTableMetadata.getColumns().stream()\n-                        .filter(column -> !column.isHidden())\n+                accessControl.filterColumns(", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk1NzgwNw==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r457957807", "bodyText": "No columns are added then. Is that not a desired outcome?", "author": "skrzypo987", "createdAt": "2020-07-21T09:20:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5NDQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzMDE4Nw==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r458030187", "bodyText": "That is the question. I think it is not a desired behavior. Notice wants to access some columns but he has no access to any, so result could be unexpected.\nAlso the more I think about it I think we should consider changing the approach. LIKE existing_table_name is like SELECT * so user wants to access all columns and in case we filter any of them we might need to raise an error.\n@martint What are your thoughts about it? Is CREATE TABLE table_name (LIKE existing_table_name) a ANSI SQL defined behaviour?", "author": "kokosing", "createdAt": "2020-07-21T11:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5NDQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcwMjI0Nw==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r461702247", "bodyText": "Yes, that is ANSI SQL behavior. This is what the spec says regarding permissions:\n2) If a <like clause> is contained in a <table definition>, then the applicable privileges for A shall include SELECT privilege on the table identified in the <like clause>.", "author": "martint", "createdAt": "2020-07-28T16:10:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5NDQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2MDU0MQ==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r462160541", "bodyText": "A shall include SELECT privilege on the table identified\n\nThat translates to having SELECT privilege on all columns.\nSo my suggestion here is to verify two things here:\n\ncheck if user have SELECT privilege on all columns on the table identified in the <like clause>\nif properties are included, then we also need to check if user checkCanShowCreateTable on the table identified in the <like clause> to prevent leakage of sensitive information like storage location\n\n@martint do you agree?", "author": "kokosing", "createdAt": "2020-07-29T09:20:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5NDQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3NTY3Nw==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r464575677", "bodyText": "Yes, that makes sense.", "author": "martint", "createdAt": "2020-08-03T18:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5NDQzNQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5ODUzNQ==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r464298535", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    throw new AccessDeniedException(\"Cannot reference properties of table \" + likeTableName);\n          \n          \n            \n                                    throw new AccessDeniedException(\"Cannot reference columns and properties of table \" + likeTableName);", "author": "kokosing", "createdAt": "2020-08-03T09:27:19Z", "path": "presto-main/src/main/java/io/prestosql/execution/CreateTableTask.java", "diffHunk": "@@ -170,6 +174,26 @@ else if (element instanceof LikeClause) {\n                     inheritedProperties = likeTableMetadata.getMetadata().getProperties();\n                 }\n \n+                if (propertiesOption.orElse(EXCLUDING) == INCLUDING) {\n+                    try {\n+                        accessControl.checkCanShowCreateTable(session.toSecurityContext(), likeTableName);\n+                    }\n+                    catch (AccessDeniedException e) {\n+                        throw new AccessDeniedException(\"Cannot reference properties of table \" + likeTableName);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5ODcyMw==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r464298723", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            likeTableMetadata.getColumns().stream().map(ColumnMetadata::getName).collect(toImmutableSet()));\n          \n          \n            \n                                            likeTableMetadata.getColumns().stream()\n          \n          \n            \n                                                  .map(ColumnMetadata::getName)\n          \n          \n            \n                                                  .collect(toImmutableSet()));", "author": "kokosing", "createdAt": "2020-08-03T09:27:43Z", "path": "presto-main/src/main/java/io/prestosql/execution/CreateTableTask.java", "diffHunk": "@@ -170,6 +174,26 @@ else if (element instanceof LikeClause) {\n                     inheritedProperties = likeTableMetadata.getMetadata().getProperties();\n                 }\n \n+                if (propertiesOption.orElse(EXCLUDING) == INCLUDING) {\n+                    try {\n+                        accessControl.checkCanShowCreateTable(session.toSecurityContext(), likeTableName);\n+                    }\n+                    catch (AccessDeniedException e) {\n+                        throw new AccessDeniedException(\"Cannot reference properties of table \" + likeTableName);\n+                    }\n+                }\n+                else {\n+                    try {\n+                        accessControl.checkCanSelectFromColumns(\n+                                session.toSecurityContext(),\n+                                likeTableName,\n+                                likeTableMetadata.getColumns().stream().map(ColumnMetadata::getName).collect(toImmutableSet()));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMwMDUwMw==", "url": "https://github.com/trinodb/trino/pull/4472#discussion_r464300503", "bodyText": "I think we should check this unconditionally (always). Successful checkCanShowCreateTable does not imply successful checkCanSelectFromColumns.", "author": "kokosing", "createdAt": "2020-08-03T09:30:58Z", "path": "presto-main/src/main/java/io/prestosql/execution/CreateTableTask.java", "diffHunk": "@@ -170,6 +174,26 @@ else if (element instanceof LikeClause) {\n                     inheritedProperties = likeTableMetadata.getMetadata().getProperties();\n                 }\n \n+                if (propertiesOption.orElse(EXCLUDING) == INCLUDING) {\n+                    try {\n+                        accessControl.checkCanShowCreateTable(session.toSecurityContext(), likeTableName);\n+                    }\n+                    catch (AccessDeniedException e) {\n+                        throw new AccessDeniedException(\"Cannot reference properties of table \" + likeTableName);\n+                    }\n+                }\n+                else {\n+                    try {\n+                        accessControl.checkCanSelectFromColumns(", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c3f776a5493181cb6221a4bc34ced7b12d8365f4", "url": "https://github.com/trinodb/trino/commit/c3f776a5493181cb6221a4bc34ced7b12d8365f4", "message": "Decrease visibility of @VisibleForTesting method", "committedDate": "2020-08-03T12:50:27Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "d5e1afe14176db650682e77aa2e32912b526b6fa", "url": "https://github.com/trinodb/trino/commit/d5e1afe14176db650682e77aa2e32912b526b6fa", "message": "Check permission to access columns in CREATE TABLE (LIKE)", "committedDate": "2020-08-03T14:58:01Z", "type": "commit"}, {"oid": "d5e1afe14176db650682e77aa2e32912b526b6fa", "url": "https://github.com/trinodb/trino/commit/d5e1afe14176db650682e77aa2e32912b526b6fa", "message": "Check permission to access columns in CREATE TABLE (LIKE)", "committedDate": "2020-08-03T14:58:01Z", "type": "forcePushed"}]}