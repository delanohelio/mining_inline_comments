{"pr_number": 4104, "pr_title": "Add pushdown for parquet timestamp predicate", "pr_createdAt": "2020-06-19T20:31:27Z", "pr_url": "https://github.com/trinodb/trino/pull/4104", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNDAyNg==", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444134026", "bodyText": "assertThat produces better exc msg than assertTrue(... > ...)", "author": "findepi", "createdAt": "2020-06-23T10:48:48Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -4041,6 +4042,34 @@ public void testPredicatePushDownToTableScan()\n         }\n     }\n \n+    @Test\n+    public void testParquetTimestampPredicatePushdown()\n+    {\n+        assertUpdate(\"CREATE TABLE test_parquet_timestamp_predicate_pushdown (t TIMESTAMP) WITH (format = 'PARQUET')\");\n+        assertUpdate(\"INSERT INTO test_parquet_timestamp_predicate_pushdown VALUES (TIMESTAMP '2012-10-31 01:00')\", 1);\n+\n+        DistributedQueryRunner queryRunner = (DistributedQueryRunner) getQueryRunner();\n+        ResultWithQueryId<MaterializedResult> queryResult = queryRunner.executeWithQueryId(\n+                getSession(),\n+                \"SELECT * FROM test_parquet_timestamp_predicate_pushdown WHERE t < TIMESTAMP '2012-10-31 01:00'\");\n+        assertEquals(getProcessedInputDataSize(queryRunner, queryResult), 0);\n+\n+        queryResult = queryRunner.executeWithQueryId(\n+                getSession(),\n+                \"SELECT * FROM test_parquet_timestamp_predicate_pushdown WHERE t > TIMESTAMP '2012-10-31 01:00'\");\n+        assertEquals(getProcessedInputDataSize(queryRunner, queryResult), 0);\n+\n+        queryResult = queryRunner.executeWithQueryId(\n+                getSession(),\n+                \"SELECT * FROM test_parquet_timestamp_predicate_pushdown WHERE t = TIMESTAMP '2012-10-31 01:00'\");\n+        assertTrue(getProcessedInputDataSize(queryRunner, queryResult) > 0);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNDc2NA==", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444134764", "bodyText": "That's not too long, but would be slightly better to extract QueryInfo fullQueryInfo var", "author": "findepi", "createdAt": "2020-06-23T10:50:19Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -4041,6 +4042,34 @@ public void testPredicatePushDownToTableScan()\n         }\n     }\n \n+    @Test\n+    public void testParquetTimestampPredicatePushdown()\n+    {\n+        assertUpdate(\"CREATE TABLE test_parquet_timestamp_predicate_pushdown (t TIMESTAMP) WITH (format = 'PARQUET')\");\n+        assertUpdate(\"INSERT INTO test_parquet_timestamp_predicate_pushdown VALUES (TIMESTAMP '2012-10-31 01:00')\", 1);\n+\n+        DistributedQueryRunner queryRunner = (DistributedQueryRunner) getQueryRunner();\n+        ResultWithQueryId<MaterializedResult> queryResult = queryRunner.executeWithQueryId(\n+                getSession(),\n+                \"SELECT * FROM test_parquet_timestamp_predicate_pushdown WHERE t < TIMESTAMP '2012-10-31 01:00'\");\n+        assertEquals(getProcessedInputDataSize(queryRunner, queryResult), 0);\n+\n+        queryResult = queryRunner.executeWithQueryId(\n+                getSession(),\n+                \"SELECT * FROM test_parquet_timestamp_predicate_pushdown WHERE t > TIMESTAMP '2012-10-31 01:00'\");\n+        assertEquals(getProcessedInputDataSize(queryRunner, queryResult), 0);\n+\n+        queryResult = queryRunner.executeWithQueryId(\n+                getSession(),\n+                \"SELECT * FROM test_parquet_timestamp_predicate_pushdown WHERE t = TIMESTAMP '2012-10-31 01:00'\");\n+        assertTrue(getProcessedInputDataSize(queryRunner, queryResult) > 0);\n+    }\n+\n+    private long getProcessedInputDataSize(DistributedQueryRunner queryRunner, ResultWithQueryId<MaterializedResult> queryResult)\n+    {\n+        return queryRunner.getCoordinator().getQueryManager().getFullQueryInfo(queryResult.getQueryId()).getQueryStats().getProcessedInputDataSize().toBytes();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzODkwMQ==", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444138901", "bodyText": "Change the min max variables to long, since they cannot be null here (and you do not allow them to be)", "author": "findepi", "createdAt": "2020-06-23T10:58:58Z", "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/TupleDomainParquetPredicate.java", "diffHunk": "@@ -229,6 +231,18 @@ public static Domain getDomain(Type type, long rowCount, Statistics<?> statistic\n             return createDomain(type, hasNullValue, parquetIntegerStatistics);\n         }\n \n+        if (type instanceof TimestampType && statistics instanceof BinaryStatistics) {\n+            BinaryStatistics binaryStatistics = (BinaryStatistics) statistics;\n+            Long max = getTimestampMillis(binaryStatistics.genericGetMax());\n+            Long min = getTimestampMillis(binaryStatistics.genericGetMin());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzOTQ4Mw==", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444139483", "bodyText": "You can make fields and ctor args primitive long", "author": "findepi", "createdAt": "2020-06-23T11:00:18Z", "path": "presto-parquet/src/main/java/io/prestosql/parquet/predicate/ParquetTimestampStatistics.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.parquet.predicate;\n+\n+public class ParquetTimestampStatistics\n+        implements ParquetRangeStatistics<Long>\n+{\n+    private final Long minimum;\n+    private final Long maximum;\n+\n+    public ParquetTimestampStatistics(Long min, Long max)\n+    {\n+        this.minimum = min;\n+        this.maximum = max;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0MDcxNA==", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444140714", "bodyText": "testTimestampMilli -> testTimestampMillis", "author": "findepi", "createdAt": "2020-06-23T11:02:49Z", "path": "presto-parquet/src/test/java/io/prestosql/parquet/TestTupleDomainParquetPredicate.java", "diffHunk": "@@ -315,6 +322,55 @@ public void testDate()\n                 .withMessage(\"Corrupted statistics for column \\\"DateColumn\\\" in Parquet file \\\"testFile\\\": [min: 200, max: 100, num_nulls: 0]\");\n     }\n \n+    @Test\n+    public void testTimestampMilli()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0MDc4OA==", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444140788", "bodyText": "use constant moment", "author": "findepi", "createdAt": "2020-06-23T11:02:58Z", "path": "presto-parquet/src/test/java/io/prestosql/parquet/TestTupleDomainParquetPredicate.java", "diffHunk": "@@ -315,6 +322,55 @@ public void testDate()\n                 .withMessage(\"Corrupted statistics for column \\\"DateColumn\\\" in Parquet file \\\"testFile\\\": [min: 200, max: 100, num_nulls: 0]\");\n     }\n \n+    @Test\n+    public void testTimestampMilli()\n+            throws ParquetCorruptionException\n+    {\n+        Instant now = Instant.now();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0MjE0Ng==", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444142146", "bodyText": "Slice slice = Slices.allocate(12);\nslice.setLong(0, timeOfDayNanos);\nslice.setInt(8, millisToJulianDay(timestamp.toEpochMilli()));\nreturn slice.byteArray();", "author": "findepi", "createdAt": "2020-06-23T11:05:59Z", "path": "presto-parquet/src/test/java/io/prestosql/parquet/TestTupleDomainParquetPredicate.java", "diffHunk": "@@ -315,6 +322,55 @@ public void testDate()\n                 .withMessage(\"Corrupted statistics for column \\\"DateColumn\\\" in Parquet file \\\"testFile\\\": [min: 200, max: 100, num_nulls: 0]\");\n     }\n \n+    @Test\n+    public void testTimestampMilli()\n+            throws ParquetCorruptionException\n+    {\n+        Instant now = Instant.now();\n+        String column = \"timestampColumn\";\n+        ShortTimestampType timestampType = new ShortTimestampType(3);\n+        assertEquals(getDomain(timestampType, 0, null, ID, column, true), all(timestampType));\n+        assertEquals(getDomain(timestampType, 10, timestampColumnStats(now, now), ID, column, true), singleValue(timestampType, now.toEpochMilli()));\n+        assertEquals(\n+                getDomain(timestampType, 10, timestampColumnStats(now.minusSeconds(10), now), ID, column, true),\n+                create(ValueSet.ofRanges(range(timestampType, now.minusSeconds(10).toEpochMilli(), true, now.toEpochMilli(), true)), false));\n+\n+        // ignore corrupted statistics\n+        assertEquals(getDomain(timestampType, 10, timestampColumnStats(now.plusSeconds(10), now), ID, column, false), create(ValueSet.all(timestampType), false));\n+        // fail on corrupted statistics\n+        assertThatExceptionOfType(ParquetCorruptionException.class)\n+                .isThrownBy(() -> getDomain(timestampType, 10, timestampColumnStats(now.plusSeconds(10), now), ID, column, true))\n+                .withMessageMatching(\"Corrupted statistics for column \\\"timestampColumn\\\" in Parquet file \\\"testFile\\\":.*\");\n+    }\n+\n+    private static BinaryStatistics timestampColumnStats(Instant minimum, Instant maximum)\n+    {\n+        BinaryStatistics statistics = new BinaryStatistics();\n+        statistics.setMinMax(Binary.fromConstantByteArray(toParquetEncoding(minimum)), Binary.fromConstantByteArray(toParquetEncoding(maximum)));\n+        return statistics;\n+    }\n+\n+    private static byte[] toParquetEncoding(Instant timestamp)\n+    {\n+        long startOfDay = LocalDate.ofInstant(timestamp, ZoneOffset.UTC).atStartOfDay().toInstant(ZoneOffset.UTC).toEpochMilli();\n+        long timeOfDayNanos = (long) ((timestamp.toEpochMilli() - startOfDay) * Math.pow(10, 6));\n+\n+        ByteBuffer encoding = ByteBuffer.allocate(12).order(ByteOrder.LITTLE_ENDIAN);\n+        encoding.putLong(timeOfDayNanos);\n+        encoding.putInt(millisToJulianDay(timestamp.toEpochMilli()));\n+        byte[] arr = new byte[12];\n+        encoding.position(0).get(arr, 0, 12);\n+        return arr;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0MzE0OQ==", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444143149", "bodyText": "we usually just [TimeUnit.]MILLISECONDS.toDays(timestamp)\navoid unckeched (int) cast\n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (int) (timestamp / MILLIS_IN_DAY) + JULIAN_EPOCH_OFFSET_DAYS;\n          \n          \n            \n                    return toIntExact(MILLISECONDS.toDays(timestamp) + JULIAN_EPOCH_OFFSET_DAYS);", "author": "findepi", "createdAt": "2020-06-23T11:08:05Z", "path": "presto-parquet/src/test/java/io/prestosql/parquet/TestTupleDomainParquetPredicate.java", "diffHunk": "@@ -315,6 +322,55 @@ public void testDate()\n                 .withMessage(\"Corrupted statistics for column \\\"DateColumn\\\" in Parquet file \\\"testFile\\\": [min: 200, max: 100, num_nulls: 0]\");\n     }\n \n+    @Test\n+    public void testTimestampMilli()\n+            throws ParquetCorruptionException\n+    {\n+        Instant now = Instant.now();\n+        String column = \"timestampColumn\";\n+        ShortTimestampType timestampType = new ShortTimestampType(3);\n+        assertEquals(getDomain(timestampType, 0, null, ID, column, true), all(timestampType));\n+        assertEquals(getDomain(timestampType, 10, timestampColumnStats(now, now), ID, column, true), singleValue(timestampType, now.toEpochMilli()));\n+        assertEquals(\n+                getDomain(timestampType, 10, timestampColumnStats(now.minusSeconds(10), now), ID, column, true),\n+                create(ValueSet.ofRanges(range(timestampType, now.minusSeconds(10).toEpochMilli(), true, now.toEpochMilli(), true)), false));\n+\n+        // ignore corrupted statistics\n+        assertEquals(getDomain(timestampType, 10, timestampColumnStats(now.plusSeconds(10), now), ID, column, false), create(ValueSet.all(timestampType), false));\n+        // fail on corrupted statistics\n+        assertThatExceptionOfType(ParquetCorruptionException.class)\n+                .isThrownBy(() -> getDomain(timestampType, 10, timestampColumnStats(now.plusSeconds(10), now), ID, column, true))\n+                .withMessageMatching(\"Corrupted statistics for column \\\"timestampColumn\\\" in Parquet file \\\"testFile\\\":.*\");\n+    }\n+\n+    private static BinaryStatistics timestampColumnStats(Instant minimum, Instant maximum)\n+    {\n+        BinaryStatistics statistics = new BinaryStatistics();\n+        statistics.setMinMax(Binary.fromConstantByteArray(toParquetEncoding(minimum)), Binary.fromConstantByteArray(toParquetEncoding(maximum)));\n+        return statistics;\n+    }\n+\n+    private static byte[] toParquetEncoding(Instant timestamp)\n+    {\n+        long startOfDay = LocalDate.ofInstant(timestamp, ZoneOffset.UTC).atStartOfDay().toInstant(ZoneOffset.UTC).toEpochMilli();\n+        long timeOfDayNanos = (long) ((timestamp.toEpochMilli() - startOfDay) * Math.pow(10, 6));\n+\n+        ByteBuffer encoding = ByteBuffer.allocate(12).order(ByteOrder.LITTLE_ENDIAN);\n+        encoding.putLong(timeOfDayNanos);\n+        encoding.putInt(millisToJulianDay(timestamp.toEpochMilli()));\n+        byte[] arr = new byte[12];\n+        encoding.position(0).get(arr, 0, 12);\n+        return arr;\n+    }\n+\n+    private static final int JULIAN_EPOCH_OFFSET_DAYS = 2_440_588;\n+    private static final long MILLIS_IN_DAY = TimeUnit.DAYS.toMillis(1);\n+\n+    private static int millisToJulianDay(long timestamp)\n+    {\n+        return (int) (timestamp / MILLIS_IN_DAY) + JULIAN_EPOCH_OFFSET_DAYS;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE0MzUxMg==", "url": "https://github.com/trinodb/trino/pull/4104#discussion_r444143512", "bodyText": "Let's reuse io.prestosql.parquet.ParquetTimestampUtils#JULIAN_EPOCH_OFFSET_DAYS\n(package private, @VisibleForTesting)", "author": "findepi", "createdAt": "2020-06-23T11:08:56Z", "path": "presto-parquet/src/test/java/io/prestosql/parquet/TestTupleDomainParquetPredicate.java", "diffHunk": "@@ -315,6 +322,55 @@ public void testDate()\n                 .withMessage(\"Corrupted statistics for column \\\"DateColumn\\\" in Parquet file \\\"testFile\\\": [min: 200, max: 100, num_nulls: 0]\");\n     }\n \n+    @Test\n+    public void testTimestampMilli()\n+            throws ParquetCorruptionException\n+    {\n+        Instant now = Instant.now();\n+        String column = \"timestampColumn\";\n+        ShortTimestampType timestampType = new ShortTimestampType(3);\n+        assertEquals(getDomain(timestampType, 0, null, ID, column, true), all(timestampType));\n+        assertEquals(getDomain(timestampType, 10, timestampColumnStats(now, now), ID, column, true), singleValue(timestampType, now.toEpochMilli()));\n+        assertEquals(\n+                getDomain(timestampType, 10, timestampColumnStats(now.minusSeconds(10), now), ID, column, true),\n+                create(ValueSet.ofRanges(range(timestampType, now.minusSeconds(10).toEpochMilli(), true, now.toEpochMilli(), true)), false));\n+\n+        // ignore corrupted statistics\n+        assertEquals(getDomain(timestampType, 10, timestampColumnStats(now.plusSeconds(10), now), ID, column, false), create(ValueSet.all(timestampType), false));\n+        // fail on corrupted statistics\n+        assertThatExceptionOfType(ParquetCorruptionException.class)\n+                .isThrownBy(() -> getDomain(timestampType, 10, timestampColumnStats(now.plusSeconds(10), now), ID, column, true))\n+                .withMessageMatching(\"Corrupted statistics for column \\\"timestampColumn\\\" in Parquet file \\\"testFile\\\":.*\");\n+    }\n+\n+    private static BinaryStatistics timestampColumnStats(Instant minimum, Instant maximum)\n+    {\n+        BinaryStatistics statistics = new BinaryStatistics();\n+        statistics.setMinMax(Binary.fromConstantByteArray(toParquetEncoding(minimum)), Binary.fromConstantByteArray(toParquetEncoding(maximum)));\n+        return statistics;\n+    }\n+\n+    private static byte[] toParquetEncoding(Instant timestamp)\n+    {\n+        long startOfDay = LocalDate.ofInstant(timestamp, ZoneOffset.UTC).atStartOfDay().toInstant(ZoneOffset.UTC).toEpochMilli();\n+        long timeOfDayNanos = (long) ((timestamp.toEpochMilli() - startOfDay) * Math.pow(10, 6));\n+\n+        ByteBuffer encoding = ByteBuffer.allocate(12).order(ByteOrder.LITTLE_ENDIAN);\n+        encoding.putLong(timeOfDayNanos);\n+        encoding.putInt(millisToJulianDay(timestamp.toEpochMilli()));\n+        byte[] arr = new byte[12];\n+        encoding.position(0).get(arr, 0, 12);\n+        return arr;\n+    }\n+\n+    private static final int JULIAN_EPOCH_OFFSET_DAYS = 2_440_588;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "80ee8a5a62b262114917df45ff260864040f88bd", "url": "https://github.com/trinodb/trino/commit/80ee8a5a62b262114917df45ff260864040f88bd", "message": "Add pushdown for parquet timestamp predicate", "committedDate": "2020-06-23T17:59:04Z", "type": "commit"}, {"oid": "80ee8a5a62b262114917df45ff260864040f88bd", "url": "https://github.com/trinodb/trino/commit/80ee8a5a62b262114917df45ff260864040f88bd", "message": "Add pushdown for parquet timestamp predicate", "committedDate": "2020-06-23T17:59:04Z", "type": "forcePushed"}]}