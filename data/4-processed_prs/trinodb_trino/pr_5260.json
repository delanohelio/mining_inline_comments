{"pr_number": 5260, "pr_title": "Clamp BackgroundHiveSplitLoader concurrency to usable parallelism", "pr_createdAt": "2020-09-22T12:47:42Z", "pr_url": "https://github.com/trinodb/trino/pull/5260", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxNTA5OA==", "url": "https://github.com/trinodb/trino/pull/5260#discussion_r492715098", "bodyText": "What if there are no partitions? Why +1?", "author": "sopel39", "createdAt": "2020-09-22T13:03:22Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveSplitManager.java", "diffHunk": "@@ -229,7 +229,7 @@ public ConnectorSplitSource getSplits(\n                 namenodeStats,\n                 directoryLister,\n                 executor,\n-                splitLoaderConcurrency,\n+                min(splitLoaderConcurrency, partitions.size() + 1), // Avoid over-committing split loader concurrency", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcyNTA3MA==", "url": "https://github.com/trinodb/trino/pull/5260#discussion_r492725070", "bodyText": "Unpartitioned tables still have a sentinel \"UNPARTITIONED\" entry here giving the list a size of 1. The +1 piece here is because I measured a slight improvement with it compared to just partition size, presumably because the hand-off between the file iterator and partition queues and the transition to \"no more splits\" benefits from the extra waiting thread.\nThat said, my testing was done a much older version of presto. Looking through the current BackgroundHiveSplitLoader implementation it appears that it's actually possible to have a greater concurrency than 1 per partition when multiple read paths are present, so that definitely brings the validity of this approach into question.", "author": "pettyjamesm", "createdAt": "2020-09-22T13:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxNTA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc2MTc2Ng==", "url": "https://github.com/trinodb/trino/pull/5260#discussion_r492761766", "bodyText": "Atleast in non-ACID flow, doesn't it suffice to have 1 thread per partition? the HiveFileIterator is created per partition path.", "author": "rohangarg", "createdAt": "2020-09-22T14:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxNTA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc3ODA4Nw==", "url": "https://github.com/trinodb/trino/pull/5260#discussion_r492778087", "bodyText": "@rohangarg looks like you're right- only transactional tables can potentially benefit from more than 1 thread per partition as implemented today. I've updated the PR to use one thread per partition for non-transactional tables.", "author": "pettyjamesm", "createdAt": "2020-09-22T14:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxNTA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ4MDgxNg==", "url": "https://github.com/trinodb/trino/pull/5260#discussion_r493480816", "bodyText": "Unpartitioned tables still have a sentinel \"UNPARTITIONED\" entry here giving the list a size of 1\n\nI'm pretty sure for unpartitioned tables we might want concurrency higher that 2. Imaging multi TB table with lots of partitions. Also bucketed tables are also unpartitioned, right?", "author": "sopel39", "createdAt": "2020-09-23T11:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxNTA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ4NDkyMg==", "url": "https://github.com/trinodb/trino/pull/5260#discussion_r493484922", "bodyText": "Unpartitioned tables can only benefit from a single thread (as implemented today) because of the nature of the iterators they use. The same goes for buckets as far as I can tell although maybe I\u2019m missing something in this implementation. Today, submitting more than one task per partition just increases the number of threads contending for the lock and does not result in any increase in the rate of work being done.", "author": "pettyjamesm", "createdAt": "2020-09-23T11:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxNTA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ5MjA3Nw==", "url": "https://github.com/trinodb/trino/pull/5260#discussion_r493492077", "bodyText": "Today, submitting more than one task per partition just increases the number of threads contending for the lock\n\nIs the lock contention an issue when other threads do not have work to do? In practice only as many threads do processing as there is work and extra threads should not interfere too much, right?\nDo you observe some penalty when there are too many threads?", "author": "sopel39", "createdAt": "2020-09-23T11:47:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxNTA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzUwOTY4OQ==", "url": "https://github.com/trinodb/trino/pull/5260#discussion_r493509689", "bodyText": "The extra threads that perform no work cause two problems:\n\nthey create extra lock contention and will typically fall through to the path that acquires the split loader write lock, locking out tasks that can do work from acquiring the read lock for as long as it takes for all other tasks to release their read lock\nthey take up threads in the cached threadpool executor which could have been used for other table scans or might never have needed to be created at all.\n\nThe second part is the largest general improvement since threads are a heavy resource to create when they\u2019re not needed, but there are worst case scenario\u2019s around the first problem that can stall split loading for long periods of time.", "author": "pettyjamesm", "createdAt": "2020-09-23T12:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxNTA5OA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5Mjk1NA==", "url": "https://github.com/trinodb/trino/pull/5260#discussion_r496092954", "bodyText": "You could static import isTransactionalTable", "author": "electrum", "createdAt": "2020-09-28T16:48:31Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveSplitManager.java", "diffHunk": "@@ -216,6 +217,8 @@ public ConnectorSplitSource getSplits(\n \n         Iterable<HivePartitionMetadata> hivePartitions = getPartitionMetadata(session, metastore, table, tableName, partitions, bucketHandle.map(HiveBucketHandle::toTableBucketProperty));\n \n+        // Only one thread per partition is usable when a table is not transactional\n+        int concurrency = AcidUtils.isTransactionalTable(table.getParameters()) ? splitLoaderConcurrency : min(splitLoaderConcurrency, partitions.size());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwNzQ0MA==", "url": "https://github.com/trinodb/trino/pull/5260#discussion_r496107440", "bodyText": "Done.", "author": "pettyjamesm", "createdAt": "2020-09-28T17:10:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA5Mjk1NA=="}], "type": "inlineReview"}, {"oid": "4c8686a2f7c816873d8d3c5d5f6b4504db7a968f", "url": "https://github.com/trinodb/trino/commit/4c8686a2f7c816873d8d3c5d5f6b4504db7a968f", "message": "Clamp BackgroundHiveSplitLoader concurrency to usable parallelism\n\nAvoids allocation a greater level of concurrency to split loading\nthan can actually be used based on the number of partititions being\nloaded. The effective usable concurrency in split loading can be\nsignificantly lower than the configured split loader concurrency\nvalue when the number of partitions scanned is small and the table\nis not configured to be transactional. In that mode, split loading\nis single threaded within each partition.\n\nThis change makes it feasible to configure a much higher concurrency\nvalue than before without overcommitting threads to loading tasks\nthat don't provide any actual additional parallelism.", "committedDate": "2020-09-28T17:10:41Z", "type": "commit"}, {"oid": "4c8686a2f7c816873d8d3c5d5f6b4504db7a968f", "url": "https://github.com/trinodb/trino/commit/4c8686a2f7c816873d8d3c5d5f6b4504db7a968f", "message": "Clamp BackgroundHiveSplitLoader concurrency to usable parallelism\n\nAvoids allocation a greater level of concurrency to split loading\nthan can actually be used based on the number of partititions being\nloaded. The effective usable concurrency in split loading can be\nsignificantly lower than the configured split loader concurrency\nvalue when the number of partitions scanned is small and the table\nis not configured to be transactional. In that mode, split loading\nis single threaded within each partition.\n\nThis change makes it feasible to configure a much higher concurrency\nvalue than before without overcommitting threads to loading tasks\nthat don't provide any actual additional parallelism.", "committedDate": "2020-09-28T17:10:41Z", "type": "forcePushed"}]}