{"pr_number": 2706, "pr_title": "Allow procedures to have optional arguments with default values", "pr_createdAt": "2020-02-01T21:22:30Z", "pr_url": "https://github.com/trinodb/trino/pull/2706", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0Mzg1Ng==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r373843856", "bodyText": "Formatting nit: we put stream on the same line as the expression\n int optionalArgumentsCount = (int) procedure.getArguments().stream()\n        .filter(...)", "author": "electrum", "createdAt": "2020-02-02T12:55:14Z", "path": "presto-main/src/main/java/io/prestosql/execution/CallTask.java", "diffHunk": "@@ -94,6 +94,13 @@ public String getName()\n             throw semanticException(INVALID_ARGUMENTS, call, \"Named and positional arguments cannot be mixed\");\n         }\n \n+        int optionalArgumentsCount = (int) procedure.getArguments()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0Mzk3NA==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r373843974", "bodyText": "Use toIntExact instead of cast to int, as that makes the intention clear and avoids a warning. (it won't ever be larger, but if it was, we wouldn't want to do a lossy conversion)", "author": "electrum", "createdAt": "2020-02-02T12:56:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0Mzg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0Mzg5Mw==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r373843893", "bodyText": "Same here\nint providedArgumentsCount = (int) procedure.getArguments().stream()\n        .filter(...)", "author": "electrum", "createdAt": "2020-02-02T12:55:41Z", "path": "presto-main/src/main/java/io/prestosql/execution/CallTask.java", "diffHunk": "@@ -115,8 +122,15 @@ else if (i < procedure.getArguments().size()) {\n             }\n         }\n \n-        // verify argument count\n-        if (names.size() < positions.size()) {\n+        // verify provided argument count\n+        int providedArgumentsCount = (int) procedure", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0NDAyMw==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r373844023", "bodyText": "The is prefix is typically reserved for getters (like get but for booleans), not used for fields or parameters, so name this just required.", "author": "electrum", "createdAt": "2020-02-02T12:57:41Z", "path": "presto-spi/src/main/java/io/prestosql/spi/procedure/Procedure.java", "diffHunk": "@@ -92,11 +110,25 @@ public String toString()\n     {\n         private final String name;\n         private final Type type;\n+        private final boolean isRequired;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0NDA0MQ==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r373844041", "bodyText": "Nit: format {} on the same line for intentionally empty methods. We do that so it's clear that the methods are intended to be empty.", "author": "electrum", "createdAt": "2020-02-02T12:58:02Z", "path": "presto-tests/src/test/java/io/prestosql/tests/TestProcedureCreation.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.block.MethodHandleUtil;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.procedure.Procedure;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.lang.String.format;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestProcedureCreation\n+{\n+    @Test\n+    public void shouldThrowExceptionWhenOptionalArgumentIsNotLast()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Optional arguments should follow required ones\",\n+                () -> createTestProcedure(ImmutableList.of(\n+                    new Procedure.Argument(\"name\", VARCHAR, false, null),\n+                    new Procedure.Argument(\"name2\", VARCHAR, true, null))));\n+\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Optional arguments should follow required ones\",\n+                () -> createTestProcedure(ImmutableList.of(\n+                        new Procedure.Argument(\"name\", VARCHAR, true, null),\n+                        new Procedure.Argument(\"name2\", VARCHAR, true, null),\n+                        new Procedure.Argument(\"name3\", VARCHAR, true, null),\n+                        new Procedure.Argument(\"name4\", VARCHAR, false, null),\n+                        new Procedure.Argument(\"name5\", VARCHAR, true, null))));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenArgumentNameRepeates()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Duplicate argument name: 'name'\",\n+                () -> createTestProcedure(ImmutableList.of(\n+                        new Procedure.Argument(\"name\", VARCHAR, false, null),\n+                        new Procedure.Argument(\"name\", VARCHAR, true, null))));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenProcedureIsNonVoid()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Method must return void\",\n+                () -> new Procedure(\n+                        \"schema\",\n+                        \"name\",\n+                        ImmutableList.of(),\n+                        MethodHandleUtil.methodHandle(Procedures.class, \"funWithoutArguments\")));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenMethodHandleIsNull()\n+    {\n+        assertThrows(\n+                NullPointerException.class,\n+                \"methodHandle is null\",\n+                () -> new Procedure(\n+                        \"schema\",\n+                        \"name\",\n+                        ImmutableList.of(),\n+                        null));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenMethodHandleHasVarargs()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Method must have fixed arity\",\n+                () -> new Procedure(\n+                        \"schema\",\n+                        \"name\",\n+                        ImmutableList.of(),\n+                        MethodHandleUtil.methodHandle(Procedures.class, \"funWithVarargs\", String[].class)));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenArgumentCountDoesntMatch()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Method parameter count must match arguments\",\n+                () -> new Procedure(\n+                        \"schema\",\n+                        \"name\",\n+                        ImmutableList.of(\n+                                new Procedure.Argument(\"name\", VARCHAR, true, null),\n+                                new Procedure.Argument(\"name2\", VARCHAR, true, null),\n+                                new Procedure.Argument(\"name3\", VARCHAR, true, null)),\n+                        MethodHandleUtil.methodHandle(Procedures.class, \"fun1\", ConnectorSession.class, Object.class)));\n+    }\n+\n+    private static Procedure createTestProcedure(List<Procedure.Argument> arguments)\n+    {\n+        int argumentsCount = arguments.size();\n+        String functionName = \"fun\" + argumentsCount;\n+\n+        Class<?>[] clazzes = new Class<?>[argumentsCount + 1];\n+        clazzes[0] = ConnectorSession.class;\n+\n+        for (int i = 0; i < argumentsCount; i++) {\n+            clazzes[i + 1] = Object.class;\n+        }\n+\n+        return new Procedure(\n+                \"schema\",\n+                \"name\",\n+                arguments,\n+                MethodHandleUtil.methodHandle(Procedures.class, functionName, clazzes));\n+    }\n+\n+    private static <T extends Throwable> void assertThrows(Class<T> exception, String message, Runnable runnable)\n+    {\n+        try {\n+            runnable.run();\n+            fail(format(\"Expected thrown exception %s with message %s\", exception, message));\n+        }\n+        catch (Throwable t) {\n+            if (t instanceof AssertionError) {\n+                throw t;\n+            }\n+\n+            if (!t.getClass().equals(exception)) {\n+                throw new AssertionError(format(\"Expected exception was %s but actual was %s\", exception, t));\n+            }\n+\n+            if (!t.getMessage().contentEquals(message)) {\n+                throw new AssertionError(format(\"Expected exception message to be %s but was %s\", message, t.getMessage()));\n+            }\n+        }\n+    }\n+\n+    public static class Procedures\n+    {\n+        public void fun0(ConnectorSession session)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwOTMyMg==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r375209322", "bodyText": "bump", "author": "findepi", "createdAt": "2020-02-05T11:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0NDA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg0NDEwNA==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r373844104", "bodyText": "Static import methodHandle as the name stands by itself (the MethodHandleUtil prefix doesn't provide any value and actually detracts from readability)", "author": "electrum", "createdAt": "2020-02-02T12:59:07Z", "path": "presto-tests/src/test/java/io/prestosql/tests/TestProcedureCreation.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.block.MethodHandleUtil;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.procedure.Procedure;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.lang.String.format;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestProcedureCreation\n+{\n+    @Test\n+    public void shouldThrowExceptionWhenOptionalArgumentIsNotLast()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Optional arguments should follow required ones\",\n+                () -> createTestProcedure(ImmutableList.of(\n+                    new Procedure.Argument(\"name\", VARCHAR, false, null),\n+                    new Procedure.Argument(\"name2\", VARCHAR, true, null))));\n+\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Optional arguments should follow required ones\",\n+                () -> createTestProcedure(ImmutableList.of(\n+                        new Procedure.Argument(\"name\", VARCHAR, true, null),\n+                        new Procedure.Argument(\"name2\", VARCHAR, true, null),\n+                        new Procedure.Argument(\"name3\", VARCHAR, true, null),\n+                        new Procedure.Argument(\"name4\", VARCHAR, false, null),\n+                        new Procedure.Argument(\"name5\", VARCHAR, true, null))));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenArgumentNameRepeates()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Duplicate argument name: 'name'\",\n+                () -> createTestProcedure(ImmutableList.of(\n+                        new Procedure.Argument(\"name\", VARCHAR, false, null),\n+                        new Procedure.Argument(\"name\", VARCHAR, true, null))));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenProcedureIsNonVoid()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Method must return void\",\n+                () -> new Procedure(\n+                        \"schema\",\n+                        \"name\",\n+                        ImmutableList.of(),\n+                        MethodHandleUtil.methodHandle(Procedures.class, \"funWithoutArguments\")));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenMethodHandleIsNull()\n+    {\n+        assertThrows(\n+                NullPointerException.class,\n+                \"methodHandle is null\",\n+                () -> new Procedure(\n+                        \"schema\",\n+                        \"name\",\n+                        ImmutableList.of(),\n+                        null));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenMethodHandleHasVarargs()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Method must have fixed arity\",\n+                () -> new Procedure(\n+                        \"schema\",\n+                        \"name\",\n+                        ImmutableList.of(),\n+                        MethodHandleUtil.methodHandle(Procedures.class, \"funWithVarargs\", String[].class)));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenArgumentCountDoesntMatch()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Method parameter count must match arguments\",\n+                () -> new Procedure(\n+                        \"schema\",\n+                        \"name\",\n+                        ImmutableList.of(\n+                                new Procedure.Argument(\"name\", VARCHAR, true, null),\n+                                new Procedure.Argument(\"name2\", VARCHAR, true, null),\n+                                new Procedure.Argument(\"name3\", VARCHAR, true, null)),\n+                        MethodHandleUtil.methodHandle(Procedures.class, \"fun1\", ConnectorSession.class, Object.class)));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE2NzkxNw==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r375167917", "bodyText": "providedArgumentsCount is not a good name, since we count only those provided args which are required\nalso, we miss opportunity to say which required argument is missing.\nmaybe:\nprocedure.getArguments().stream()\n        .filter(Argument::isRequired)\n        .filter(argument -> !names.containsKey(argument.getName()))\n        .findFirst()\n        .ifPresent(argument -> {\n            throw semanticException(INVALID_ARGUMENTS, call, \"No value provided for a required argument: \" + argument.getName());\n        });", "author": "findepi", "createdAt": "2020-02-05T10:16:10Z", "path": "presto-main/src/main/java/io/prestosql/execution/CallTask.java", "diffHunk": "@@ -115,8 +122,13 @@ else if (i < procedure.getArguments().size()) {\n             }\n         }\n \n-        // verify argument count\n-        if (names.size() < positions.size()) {\n+        // verify provided argument count\n+        int providedArgumentsCount = toIntExact(procedure.getArguments().stream()\n+                .filter(Argument::isRequired)\n+                .filter(argument -> names.containsKey(argument.getName()))\n+                .count());\n+\n+        if (providedArgumentsCount < requiredArgumentsCount) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5NjczMg==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r375196732", "bodyText": "Good idea :) That suggests solution to the end-user", "author": "wendigo", "createdAt": "2020-02-05T11:16:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE2NzkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE2OTIyOA==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r375169228", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (arg.isOptional() && !names.containsKey(arg.getName())) {\n          \n          \n            \n                        if (!names.containsKey(arg.getName())) {\n          \n          \n            \n                            verify(arg.isOptional());", "author": "findepi", "createdAt": "2020-02-05T10:18:35Z", "path": "presto-main/src/main/java/io/prestosql/execution/CallTask.java", "diffHunk": "@@ -136,6 +148,16 @@ else if (i < procedure.getArguments().size()) {\n             values[index] = toTypeObjectValue(session, type, value);\n         }\n \n+        // Fill values with optional arguments defaults\n+        for (int i = 0; i < procedure.getArguments().size(); i++) {\n+            Argument arg = procedure.getArguments().get(i);\n+\n+            if (arg.isOptional() && !names.containsKey(arg.getName())) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE2OTM2Mw==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r375169363", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Argument arg = procedure.getArguments().get(i);\n          \n          \n            \n                        Argument argument = procedure.getArguments().get(i);", "author": "findepi", "createdAt": "2020-02-05T10:18:54Z", "path": "presto-main/src/main/java/io/prestosql/execution/CallTask.java", "diffHunk": "@@ -136,6 +148,16 @@ else if (i < procedure.getArguments().size()) {\n             values[index] = toTypeObjectValue(session, type, value);\n         }\n \n+        // Fill values with optional arguments defaults\n+        for (int i = 0; i < procedure.getArguments().size(); i++) {\n+            Argument arg = procedure.getArguments().get(i);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3NDMwOQ==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r375174309", "bodyText": "for (int index = 1; index < arguments.size(); index++) {\n    if (arguments.get(index - 1).isOptional() && arguments.get(index).isRequired()) {\n        throw new IllegalArgumentException(\"Optional arguments should follow required ones\");\n    }\n}", "author": "findepi", "createdAt": "2020-02-05T10:28:35Z", "path": "presto-spi/src/main/java/io/prestosql/spi/procedure/Procedure.java", "diffHunk": "@@ -43,7 +46,22 @@ public Procedure(String schema, String name, List<Argument> arguments, MethodHan\n \n         Set<String> names = new HashSet<>();\n         for (Argument argument : arguments) {\n-            checkArgument(names.add(argument.getName()), \"Duplicate argument name: \" + argument.getName());\n+            checkArgument(names.add(argument.getName()), format(\"Duplicate argument name: '%s'\", argument.getName()));\n+        }\n+\n+        List<Integer> optionalPositions = IntStream.range(0, names.size())\n+                .filter(index -> arguments.get(index).isOptional())\n+                .boxed()\n+                .collect(Collectors.toList());\n+\n+        int optionalArguments = optionalPositions.size();\n+        if (optionalArguments > 0) {\n+            checkArgument(optionalPositions.get(optionalArguments - 1) == arguments.size() - 1, \"Optional arguments should follow required ones\");\n+\n+            // check if optional arguments are last on the list of arguments\n+            for (int i = 0; i < optionalArguments - 2; i++) {\n+                checkArgument(optionalPositions.get(i) + 1 == optionalPositions.get(i + 1), \"Optional arguments should follow required ones\");\n+            }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3NDY4Ng==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r375174686", "bodyText": "inline this one, let's keep ctor number as low as possible", "author": "findepi", "createdAt": "2020-02-05T10:29:19Z", "path": "presto-spi/src/main/java/io/prestosql/spi/procedure/Procedure.java", "diffHunk": "@@ -92,11 +110,25 @@ public String toString()\n     {\n         private final String name;\n         private final Type type;\n+        private final boolean required;\n+        private final Object defaultValue;\n \n         public Argument(String name, Type type)\n+        {\n+            this(name, type, true);\n+        }\n+\n+        public Argument(String name, Type type, boolean required)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3NDg0MA==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r375174840", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public Argument(String name, Type type, boolean required, Object defaultValue)\n          \n          \n            \n                    public Argument(String name, Type type, boolean required, @Nullable Object defaultValue)", "author": "findepi", "createdAt": "2020-02-05T10:29:39Z", "path": "presto-spi/src/main/java/io/prestosql/spi/procedure/Procedure.java", "diffHunk": "@@ -92,11 +110,25 @@ public String toString()\n     {\n         private final String name;\n         private final Type type;\n+        private final boolean required;\n+        private final Object defaultValue;\n \n         public Argument(String name, Type type)\n+        {\n+            this(name, type, true);\n+        }\n+\n+        public Argument(String name, Type type, boolean required)\n+        {\n+            this(name, type, required, null);\n+        }\n+\n+        public Argument(String name, Type type, boolean required, Object defaultValue)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3NTQ3Ng==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r375175476", "bodyText": "@Nullable\n/**\n  * Argument default value in type's stack representation.\n */", "author": "findepi", "createdAt": "2020-02-05T10:30:49Z", "path": "presto-spi/src/main/java/io/prestosql/spi/procedure/Procedure.java", "diffHunk": "@@ -109,6 +141,21 @@ public Type getType()\n             return type;\n         }\n \n+        public boolean isRequired()\n+        {\n+            return required;\n+        }\n+\n+        public boolean isOptional()\n+        {\n+            return !required;\n+        }\n+\n+        public Object getDefaultValue()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3NjgzNQ==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r375176835", "bodyText": "org.assertj.core.api.Assertions#assertThatThrownBy is recommended", "author": "findepi", "createdAt": "2020-02-05T10:33:41Z", "path": "presto-tests/src/test/java/io/prestosql/tests/TestProcedureCreation.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.procedure.Procedure;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static java.lang.String.format;\n+import static org.testng.Assert.fail;\n+\n+@Test(singleThreaded = true)\n+public class TestProcedureCreation\n+{\n+    @Test\n+    public void shouldThrowExceptionWhenOptionalArgumentIsNotLast()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Optional arguments should follow required ones\",\n+                () -> createTestProcedure(ImmutableList.of(\n+                    new Procedure.Argument(\"name\", VARCHAR, false, null),\n+                    new Procedure.Argument(\"name2\", VARCHAR, true, null))));\n+\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Optional arguments should follow required ones\",\n+                () -> createTestProcedure(ImmutableList.of(\n+                        new Procedure.Argument(\"name\", VARCHAR, true, null),\n+                        new Procedure.Argument(\"name2\", VARCHAR, true, null),\n+                        new Procedure.Argument(\"name3\", VARCHAR, true, null),\n+                        new Procedure.Argument(\"name4\", VARCHAR, false, null),\n+                        new Procedure.Argument(\"name5\", VARCHAR, true, null))));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenArgumentNameRepeates()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Duplicate argument name: 'name'\",\n+                () -> createTestProcedure(ImmutableList.of(\n+                        new Procedure.Argument(\"name\", VARCHAR, false, null),\n+                        new Procedure.Argument(\"name\", VARCHAR, true, null))));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenProcedureIsNonVoid()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Method must return void\",\n+                () -> new Procedure(\n+                        \"schema\",\n+                        \"name\",\n+                        ImmutableList.of(),\n+                        methodHandle(Procedures.class, \"funWithoutArguments\")));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenMethodHandleIsNull()\n+    {\n+        assertThrows(\n+                NullPointerException.class,\n+                \"methodHandle is null\",\n+                () -> new Procedure(\n+                        \"schema\",\n+                        \"name\",\n+                        ImmutableList.of(),\n+                        null));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenMethodHandleHasVarargs()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Method must have fixed arity\",\n+                () -> new Procedure(\n+                        \"schema\",\n+                        \"name\",\n+                        ImmutableList.of(),\n+                        methodHandle(Procedures.class, \"funWithVarargs\", String[].class)));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenArgumentCountDoesntMatch()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Method parameter count must match arguments\",\n+                () -> new Procedure(\n+                        \"schema\",\n+                        \"name\",\n+                        ImmutableList.of(\n+                                new Procedure.Argument(\"name\", VARCHAR, true, null),\n+                                new Procedure.Argument(\"name2\", VARCHAR, true, null),\n+                                new Procedure.Argument(\"name3\", VARCHAR, true, null)),\n+                        methodHandle(Procedures.class, \"fun1\", ConnectorSession.class, Object.class)));\n+    }\n+\n+    private static Procedure createTestProcedure(List<Procedure.Argument> arguments)\n+    {\n+        int argumentsCount = arguments.size();\n+        String functionName = \"fun\" + argumentsCount;\n+\n+        Class<?>[] clazzes = new Class<?>[argumentsCount + 1];\n+        clazzes[0] = ConnectorSession.class;\n+\n+        for (int i = 0; i < argumentsCount; i++) {\n+            clazzes[i + 1] = Object.class;\n+        }\n+\n+        return new Procedure(\n+                \"schema\",\n+                \"name\",\n+                arguments,\n+                methodHandle(Procedures.class, functionName, clazzes));\n+    }\n+\n+    private static <T extends Throwable> void assertThrows(Class<T> exception, String message, Runnable runnable)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE3Nzg2MA==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r375177860", "bodyText": "remove requireNonNull, since it's primitive", "author": "findepi", "createdAt": "2020-02-05T10:35:46Z", "path": "presto-spi/src/main/java/io/prestosql/spi/procedure/Procedure.java", "diffHunk": "@@ -92,11 +110,25 @@ public String toString()\n     {\n         private final String name;\n         private final Type type;\n+        private final boolean required;\n+        private final Object defaultValue;\n \n         public Argument(String name, Type type)\n+        {\n+            this(name, type, true);\n+        }\n+\n+        public Argument(String name, Type type, boolean required)\n+        {\n+            this(name, type, required, null);\n+        }\n+\n+        public Argument(String name, Type type, boolean required, Object defaultValue)\n         {\n             this.name = checkNotNullOrEmpty(name, \"name\");\n             this.type = requireNonNull(type, \"type is null\");\n+            this.required = requireNonNull(required, \"required is null\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwNjQ2Nw==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r375206467", "bodyText": "i == index, right?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            int index = positions.get(argument.getName());", "author": "findepi", "createdAt": "2020-02-05T11:39:30Z", "path": "presto-main/src/main/java/io/prestosql/execution/CallTask.java", "diffHunk": "@@ -136,6 +141,17 @@ else if (i < procedure.getArguments().size()) {\n             values[index] = toTypeObjectValue(session, type, value);\n         }\n \n+        // Fill values with optional arguments defaults\n+        for (int i = 0; i < procedure.getArguments().size(); i++) {\n+            Argument argument = procedure.getArguments().get(i);\n+\n+            if (!names.containsKey(argument.getName())) {\n+                verify(argument.isOptional());\n+                int index = positions.get(argument.getName());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwNzEyNA==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r375207124", "bodyText": "Wording can be improved:\n        // check if optional arguments are after required ones\n\nHowever, i feel like the comment can be removed, as the code intent is well documented by the exc msg that we throw.", "author": "findepi", "createdAt": "2020-02-05T11:41:04Z", "path": "presto-spi/src/main/java/io/prestosql/spi/procedure/Procedure.java", "diffHunk": "@@ -43,7 +46,14 @@ public Procedure(String schema, String name, List<Argument> arguments, MethodHan\n \n         Set<String> names = new HashSet<>();\n         for (Argument argument : arguments) {\n-            checkArgument(names.add(argument.getName()), \"Duplicate argument name: \" + argument.getName());\n+            checkArgument(names.add(argument.getName()), format(\"Duplicate argument name: '%s'\", argument.getName()));\n+        }\n+\n+        // check if optional arguments are last on the list of arguments", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwNzU3MA==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r375207570", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertCallFails(\"CALL test_args(123, 4.5, 'hello')\", \"line 1:1: Required procedure argument 'q boolean' is missing\");\n          \n          \n            \n                    assertCallFails(\"CALL test_args(123, 4.5, 'hello')\", \"line 1:1: Required procedure argument 'q' is missing\");", "author": "findepi", "createdAt": "2020-02-05T11:42:13Z", "path": "presto-tests/src/test/java/io/prestosql/tests/TestProcedureCall.java", "diffHunk": "@@ -119,15 +119,45 @@ public void testProcedureCall()\n         assertCallFails(\"CALL test_args(123, 4.5, 'hello', null)\", \"Procedure argument cannot be null: q\");\n \n         assertCallFails(\"CALL test_simple(123)\", \"line 1:1: Too many arguments for procedure\");\n-        assertCallFails(\"CALL test_args(123, 4.5, 'hello')\", \"line 1:1: Too few arguments for procedure\");\n-        assertCallFails(\"CALL test_args(x => 123, y => 4.5, q => true)\", \"line 1:1: Too few arguments for procedure\");\n+        assertCallFails(\"CALL test_args(123, 4.5, 'hello')\", \"line 1:1: Required procedure argument 'q boolean' is missing\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwNzYxNQ==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r375207615", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertCallFails(\"CALL test_args(x => 123, y => 4.5, q => true)\", \"line 1:1: Required procedure argument 'z varchar' is missing\");\n          \n          \n            \n                    assertCallFails(\"CALL test_args(x => 123, y => 4.5, q => true)\", \"line 1:1: Required procedure argument 'z' is missing\");", "author": "findepi", "createdAt": "2020-02-05T11:42:20Z", "path": "presto-tests/src/test/java/io/prestosql/tests/TestProcedureCall.java", "diffHunk": "@@ -119,15 +119,45 @@ public void testProcedureCall()\n         assertCallFails(\"CALL test_args(123, 4.5, 'hello', null)\", \"Procedure argument cannot be null: q\");\n \n         assertCallFails(\"CALL test_simple(123)\", \"line 1:1: Too many arguments for procedure\");\n-        assertCallFails(\"CALL test_args(123, 4.5, 'hello')\", \"line 1:1: Too few arguments for procedure\");\n-        assertCallFails(\"CALL test_args(x => 123, y => 4.5, q => true)\", \"line 1:1: Too few arguments for procedure\");\n+        assertCallFails(\"CALL test_args(123, 4.5, 'hello')\", \"line 1:1: Required procedure argument 'q boolean' is missing\");\n+        assertCallFails(\"CALL test_args(x => 123, y => 4.5, q => true)\", \"line 1:1: Required procedure argument 'z varchar' is missing\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwOTE3MA==", "url": "https://github.com/trinodb/trino/pull/2706#discussion_r375209170", "bodyText": "Any reason not to use org.assertj.core.api.Assertions#assertThatThrownBy directly?\nit wouldn't be longer, yet no help needed:\nassertThatThrownBy(() -> new Procedure(\n        \"schema\",\n        \"name\",\n        ImmutableList.of(),\n        methodHandle(Procedures.class, \"funWithVarargs\", String[].class)))\n        .isInstanceOf(IllegalArgumentException.class)\n        .hasMessage(\"Method must have fixed arity\");", "author": "findepi", "createdAt": "2020-02-05T11:45:54Z", "path": "presto-tests/src/test/java/io/prestosql/tests/TestProcedureCreation.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.procedure.Procedure;\n+import org.assertj.core.api.ThrowableAssert;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static io.prestosql.spi.block.MethodHandleUtil.methodHandle;\n+import static io.prestosql.spi.type.VarcharType.VARCHAR;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowableOfType;\n+\n+@Test(singleThreaded = true)\n+public class TestProcedureCreation\n+{\n+    @Test\n+    public void shouldThrowExceptionWhenOptionalArgumentIsNotLast()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Optional arguments should follow required ones\",\n+                () -> createTestProcedure(ImmutableList.of(\n+                    new Procedure.Argument(\"name\", VARCHAR, false, null),\n+                    new Procedure.Argument(\"name2\", VARCHAR, true, null))));\n+\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Optional arguments should follow required ones\",\n+                () -> createTestProcedure(ImmutableList.of(\n+                        new Procedure.Argument(\"name\", VARCHAR, true, null),\n+                        new Procedure.Argument(\"name2\", VARCHAR, true, null),\n+                        new Procedure.Argument(\"name3\", VARCHAR, true, null),\n+                        new Procedure.Argument(\"name4\", VARCHAR, false, null),\n+                        new Procedure.Argument(\"name5\", VARCHAR, true, null))));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenArgumentNameRepeates()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Duplicate argument name: 'name'\",\n+                () -> createTestProcedure(ImmutableList.of(\n+                        new Procedure.Argument(\"name\", VARCHAR, false, null),\n+                        new Procedure.Argument(\"name\", VARCHAR, true, null))));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenProcedureIsNonVoid()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Method must return void\",\n+                () -> new Procedure(\n+                        \"schema\",\n+                        \"name\",\n+                        ImmutableList.of(),\n+                        methodHandle(Procedures.class, \"funWithoutArguments\")));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenMethodHandleIsNull()\n+    {\n+        assertThrows(\n+                NullPointerException.class,\n+                \"methodHandle is null\",\n+                () -> new Procedure(\n+                        \"schema\",\n+                        \"name\",\n+                        ImmutableList.of(),\n+                        null));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionWhenMethodHandleHasVarargs()\n+    {\n+        assertThrows(\n+                IllegalArgumentException.class,\n+                \"Method must have fixed arity\",\n+                () -> new Procedure(\n+                        \"schema\",\n+                        \"name\",\n+                        ImmutableList.of(),\n+                        methodHandle(Procedures.class, \"funWithVarargs\", String[].class)));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9b0b74a47a32954c969d6382db453c9e4403ab93", "url": "https://github.com/trinodb/trino/commit/9b0b74a47a32954c969d6382db453c9e4403ab93", "message": "Allow procedures to have optional arguments with default values", "committedDate": "2020-02-05T12:24:52Z", "type": "commit"}, {"oid": "9b0b74a47a32954c969d6382db453c9e4403ab93", "url": "https://github.com/trinodb/trino/commit/9b0b74a47a32954c969d6382db453c9e4403ab93", "message": "Allow procedures to have optional arguments with default values", "committedDate": "2020-02-05T12:24:52Z", "type": "forcePushed"}]}