{"pr_number": 2679, "pr_title": "Rubix integration", "pr_createdAt": "2020-01-30T11:50:43Z", "pr_url": "https://github.com/trinodb/trino/pull/2679", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMzNzc4Mw==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r373337783", "bodyText": "should this and configs below be configurable", "author": "ankitdixit", "createdAt": "2020-01-31T06:53:41Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import com.qubole.rubix.presto.CachingPrestoGoogleHadoopFileSystem;\n+import com.qubole.rubix.presto.CachingPrestoNativeAzureFileSystem;\n+import com.qubole.rubix.presto.CachingPrestoS3FileSystem;\n+import com.qubole.rubix.presto.PrestoClusterManager;\n+import com.qubole.rubix.spi.CacheConfig;\n+import io.prestosql.plugin.hive.ConfigurationInitializer;\n+import io.prestosql.spi.HostAddress;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.inject.Inject;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.qubole.rubix.spi.ClusterType.PRESTO_CLUSTER_MANAGER;\n+\n+public class RubixConfigurationInitializer\n+        implements ConfigurationInitializer\n+{\n+    private static final String RUBIX_S3_FS_CLASS_NAME = CachingPrestoS3FileSystem.class.getName();\n+    private static final String RUBIX_AZURE_FS_CLASS_NAME = CachingPrestoNativeAzureFileSystem.class.getName();\n+    private static final String RUBIX_GS_FS_CLASS_NAME = CachingPrestoGoogleHadoopFileSystem.class.getName();\n+\n+    private final boolean parallelWarmupEnabled;\n+    private final String cacheLocation;\n+\n+    // Configs below are dependent on node joining the cluster\n+    private boolean cacheNotReady = true;\n+    private boolean isMaster;\n+    private HostAddress masterAddress;\n+    private String nodeAddress;\n+\n+    @Inject\n+    public RubixConfigurationInitializer(RubixConfig config)\n+    {\n+        this.parallelWarmupEnabled = config.isParallelWarmupEnabled();\n+        this.cacheLocation = config.getCacheLocation();\n+    }\n+\n+    @Override\n+    public void initializeConfiguration(Configuration config)\n+    {\n+        if (cacheNotReady) {\n+            CacheConfig.setCacheDataEnabled(config, false);\n+            return;\n+        }\n+\n+        updateConfiguration(config);\n+    }\n+\n+    public Configuration updateConfiguration(Configuration config)\n+    {\n+        checkState(masterAddress != null, \"masterAddress is not set\");\n+        CacheConfig.setCacheDataEnabled(config, true);\n+        CacheConfig.setOnMaster(config, isMaster);\n+        CacheConfig.setCoordinatorHostName(config, masterAddress.getHostText());\n+        PrestoClusterManager.setPrestoServerPort(config, masterAddress.getPort());\n+        CacheConfig.setCurrentNodeHostName(config, nodeAddress);\n+\n+        CacheConfig.setIsParallelWarmupEnabled(config, parallelWarmupEnabled);\n+        CacheConfig.setCacheDataDirPrefix(config, cacheLocation);\n+\n+        CacheConfig.setEmbeddedMode(config, true);\n+        CacheConfig.setRubixClusterType(config, PRESTO_CLUSTER_MANAGER.ordinal());\n+        CacheConfig.enableHeartbeat(config, false);\n+        CacheConfig.setClusterNodeRefreshTime(config, 10);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0ODMyMQ==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r373948321", "bodyText": "Dont need to expose these to admins.", "author": "shubhamtagra", "createdAt": "2020-02-03T07:12:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMzNzc4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMzOTk1MQ==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r373339951", "bodyText": "It will be good to have parallelWarmupEnabled enabled by default", "author": "raunaqmorarka", "createdAt": "2020-01-31T07:03:02Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import io.airlift.configuration.Config;\n+\n+public class RubixConfig\n+{\n+    boolean rubixEnabled;\n+    boolean parallelWarmupEnabled;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0NzI1NQ==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r373947255", "bodyText": "done", "author": "shubhamtagra", "createdAt": "2020-02-03T07:08:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMzOTk1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNjMyOA==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r373426328", "bodyText": "This should be hive.cache.enabled. The fact that it uses Rubix under the covers is an implementation detail that doesn't need to be exposed to users and admins (similar, for example, to how we expose \"http server\" properties and not \"jetty server\" properties).", "author": "martint", "createdAt": "2020-01-31T11:04:15Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import io.airlift.configuration.Config;\n+\n+public class RubixConfig\n+{\n+    boolean rubixEnabled;\n+    boolean parallelWarmupEnabled;\n+    String cacheLocation = \"/tmp\";\n+\n+    public boolean isRubixEnabled()\n+    {\n+        return rubixEnabled;\n+    }\n+\n+    public boolean isParallelWarmupEnabled()\n+    {\n+        return parallelWarmupEnabled;\n+    }\n+\n+    @Config(\"hive.rubix-enabled\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk0NzMxNA==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r373947314", "bodyText": "done", "author": "shubhamtagra", "createdAt": "2020-02-03T07:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNjMyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNjU3NA==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r373426574", "bodyText": "This should be named hive.cache.parallel-warmup-enabled", "author": "martint", "createdAt": "2020-01-31T11:04:48Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import io.airlift.configuration.Config;\n+\n+public class RubixConfig\n+{\n+    boolean rubixEnabled;\n+    boolean parallelWarmupEnabled;\n+    String cacheLocation = \"/tmp\";\n+\n+    public boolean isRubixEnabled()\n+    {\n+        return rubixEnabled;\n+    }\n+\n+    public boolean isParallelWarmupEnabled()\n+    {\n+        return parallelWarmupEnabled;\n+    }\n+\n+    @Config(\"hive.rubix-enabled\")\n+    public RubixConfig setRubixEnabled(boolean value)\n+    {\n+        this.rubixEnabled = value;\n+        return this;\n+    }\n+\n+    @Config(\"hive.rubix.cache.parallel.warmup\")", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQyNjY1OQ==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r373426659", "bodyText": "Rename to hive.cache.location", "author": "martint", "createdAt": "2020-01-31T11:05:00Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfig.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import io.airlift.configuration.Config;\n+\n+public class RubixConfig\n+{\n+    boolean rubixEnabled;\n+    boolean parallelWarmupEnabled;\n+    String cacheLocation = \"/tmp\";\n+\n+    public boolean isRubixEnabled()\n+    {\n+        return rubixEnabled;\n+    }\n+\n+    public boolean isParallelWarmupEnabled()\n+    {\n+        return parallelWarmupEnabled;\n+    }\n+\n+    @Config(\"hive.rubix-enabled\")\n+    public RubixConfig setRubixEnabled(boolean value)\n+    {\n+        this.rubixEnabled = value;\n+        return this;\n+    }\n+\n+    @Config(\"hive.rubix.cache.parallel.warmup\")\n+    public RubixConfig setParallelWarmupEnabled(boolean value)\n+    {\n+        this.parallelWarmupEnabled = value;\n+        return this;\n+    }\n+\n+    public String getCacheLocation()\n+    {\n+        return cacheLocation;\n+    }\n+\n+    @Config(\"hive.rubix.cache.location\")", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA0NTQ4OQ==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r374045489", "bodyText": "I think nodeManager.getAllNodes() should be called only once per loop here", "author": "raunaqmorarka", "createdAt": "2020-02-03T11:12:59Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.qubole.rubix.bookkeeper.BookKeeper;\n+import com.qubole.rubix.bookkeeper.BookKeeperServer;\n+import com.qubole.rubix.bookkeeper.LocalDataTransferServer;\n+import com.qubole.rubix.core.CachingFileSystem;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.hive.ConfigurationInitializer;\n+import io.prestosql.spi.Node;\n+import io.prestosql.spi.NodeManager;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/*\n+ * Responsibilities of this initializer:\n+ * 1. Lazily setup RubixConfigurationInitializer with information about master when it is available\n+ * 2. Start Rubix Servers.\n+ * 3. Inject BookKeeper object into CachingFileSystem class\n+ */\n+public class RubixInitializer\n+{\n+    private static final Logger log = Logger.get(RubixInitializer.class);\n+\n+    private final RubixConfigurationInitializer rubixConfigurationInitializer;\n+    private final Set<ConfigurationInitializer> configurationInitializers;\n+\n+    @Inject\n+    public RubixInitializer(RubixConfigurationInitializer rubixConfigurationInitializer, Set<ConfigurationInitializer> configurationInitializers)\n+    {\n+        this.rubixConfigurationInitializer = rubixConfigurationInitializer;\n+        this.configurationInitializers = configurationInitializers;\n+    }\n+\n+    public void initializeRubix(NodeManager nodeManager)\n+    {\n+        ExecutorService initializerService = Executors.newSingleThreadExecutor();\n+        ListenableFuture<Boolean> nodeJoinFuture = MoreExecutors.listeningDecorator(initializerService).submit(() ->\n+        {\n+            while (!(nodeManager.getAllNodes().contains(nodeManager.getCurrentNode()) &&", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA0NTgyOA==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r374045828", "bodyText": "we could use !allNodes.getActiveCoordinators().isEmpty() here", "author": "raunaqmorarka", "createdAt": "2020-02-03T11:13:50Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.qubole.rubix.bookkeeper.BookKeeper;\n+import com.qubole.rubix.bookkeeper.BookKeeperServer;\n+import com.qubole.rubix.bookkeeper.LocalDataTransferServer;\n+import com.qubole.rubix.core.CachingFileSystem;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.hive.ConfigurationInitializer;\n+import io.prestosql.spi.Node;\n+import io.prestosql.spi.NodeManager;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/*\n+ * Responsibilities of this initializer:\n+ * 1. Lazily setup RubixConfigurationInitializer with information about master when it is available\n+ * 2. Start Rubix Servers.\n+ * 3. Inject BookKeeper object into CachingFileSystem class\n+ */\n+public class RubixInitializer\n+{\n+    private static final Logger log = Logger.get(RubixInitializer.class);\n+\n+    private final RubixConfigurationInitializer rubixConfigurationInitializer;\n+    private final Set<ConfigurationInitializer> configurationInitializers;\n+\n+    @Inject\n+    public RubixInitializer(RubixConfigurationInitializer rubixConfigurationInitializer, Set<ConfigurationInitializer> configurationInitializers)\n+    {\n+        this.rubixConfigurationInitializer = rubixConfigurationInitializer;\n+        this.configurationInitializers = configurationInitializers;\n+    }\n+\n+    public void initializeRubix(NodeManager nodeManager)\n+    {\n+        ExecutorService initializerService = Executors.newSingleThreadExecutor();\n+        ListenableFuture<Boolean> nodeJoinFuture = MoreExecutors.listeningDecorator(initializerService).submit(() ->\n+        {\n+            while (!(nodeManager.getAllNodes().contains(nodeManager.getCurrentNode()) &&\n+                nodeManager.getAllNodes().stream().anyMatch(Node::isCoordinator))) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3NzE2Mg==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r386277162", "bodyText": "nodeManager in an instance of NodeManager which doesnt have AllNodes methods (which is in InternalNodeManager) so this call is not possible", "author": "shubhamtagra", "createdAt": "2020-03-02T09:26:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA0NTgyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA0ODA0NA==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r374048044", "bodyText": "Can we do this via InternalNodeManager#addNodeChangeListener rather than the looping here ?", "author": "raunaqmorarka", "createdAt": "2020-02-03T11:19:23Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixInitializer.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.qubole.rubix.bookkeeper.BookKeeper;\n+import com.qubole.rubix.bookkeeper.BookKeeperServer;\n+import com.qubole.rubix.bookkeeper.LocalDataTransferServer;\n+import com.qubole.rubix.core.CachingFileSystem;\n+import io.airlift.log.Logger;\n+import io.prestosql.plugin.hive.ConfigurationInitializer;\n+import io.prestosql.spi.Node;\n+import io.prestosql.spi.NodeManager;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.inject.Inject;\n+\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/*\n+ * Responsibilities of this initializer:\n+ * 1. Lazily setup RubixConfigurationInitializer with information about master when it is available\n+ * 2. Start Rubix Servers.\n+ * 3. Inject BookKeeper object into CachingFileSystem class\n+ */\n+public class RubixInitializer\n+{\n+    private static final Logger log = Logger.get(RubixInitializer.class);\n+\n+    private final RubixConfigurationInitializer rubixConfigurationInitializer;\n+    private final Set<ConfigurationInitializer> configurationInitializers;\n+\n+    @Inject\n+    public RubixInitializer(RubixConfigurationInitializer rubixConfigurationInitializer, Set<ConfigurationInitializer> configurationInitializers)\n+    {\n+        this.rubixConfigurationInitializer = rubixConfigurationInitializer;\n+        this.configurationInitializers = configurationInitializers;\n+    }\n+\n+    public void initializeRubix(NodeManager nodeManager)\n+    {\n+        ExecutorService initializerService = Executors.newSingleThreadExecutor();\n+        ListenableFuture<Boolean> nodeJoinFuture = MoreExecutors.listeningDecorator(initializerService).submit(() ->\n+        {\n+            while (!(nodeManager.getAllNodes().contains(nodeManager.getCurrentNode()) &&", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3OTMzMQ==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r386279331", "bodyText": "Yes, It would be cleaner.\nIt will need changes to NodeManager interface and implementations to work with InternalNodeManager's listener methods. Handling removeNodeChangeListener in NodeManager could be tricky since callers are not aware of AllNodes class.", "author": "shubhamtagra", "createdAt": "2020-03-02T09:30:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA0ODA0NA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MDE3Mw==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r385980173", "bodyText": "This looks a bit strange. How about hive.cache.location", "author": "electrum", "createdAt": "2020-02-29T00:29:13Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfig.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import com.qubole.rubix.spi.CacheConfig;\n+import io.airlift.configuration.Config;\n+\n+public class RubixConfig\n+{\n+    private boolean cacheEnabled;\n+    private boolean parallelWarmupEnabled = true;\n+    private String cacheLocation = \"/tmp\";\n+    private int bookKeeperServerPort = CacheConfig.DEFAULT_BOOKKEEPER_SERVER_PORT;\n+    private int dataTransferServerPort = CacheConfig.DEFAULT_DATA_TRANSFER_SERVER_PORT;\n+\n+    public boolean isCacheEnabled()\n+    {\n+        return cacheEnabled;\n+    }\n+\n+    @Config(\"hive.cache.enabled\")\n+    public RubixConfig setCacheEnabled(boolean value)\n+    {\n+        this.cacheEnabled = value;\n+        return this;\n+    }\n+\n+    public boolean isParallelWarmupEnabled()\n+    {\n+        return parallelWarmupEnabled;\n+    }\n+\n+    @Config(\"hive.cache.parallel-warmup-enabled\")\n+    public RubixConfig setParallelWarmupEnabled(boolean value)\n+    {\n+        this.parallelWarmupEnabled = value;\n+        return this;\n+    }\n+\n+    public String getCacheLocation()\n+    {\n+        return cacheLocation;\n+    }\n+\n+    @Config(\"hive.cache.cache.location\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3OTQ2NQ==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r386279465", "bodyText": "changing this", "author": "shubhamtagra", "createdAt": "2020-03-02T09:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MDE3Mw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "1769b1f0cbc61bf0225ead1b685af358eae3a2ca", "url": "https://github.com/trinodb/trino/commit/1769b1f0cbc61bf0225ead1b685af358eae3a2ca", "message": "Rubix integration", "committedDate": "2020-03-06T04:50:22Z", "type": "commit"}, {"oid": "1769b1f0cbc61bf0225ead1b685af358eae3a2ca", "url": "https://github.com/trinodb/trino/commit/1769b1f0cbc61bf0225ead1b685af358eae3a2ca", "message": "Rubix integration", "committedDate": "2020-03-06T04:50:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODczMzcwOQ==", "url": "https://github.com/trinodb/trino/pull/2679#discussion_r388733709", "bodyText": "fs.wasbs.impl missing here ?", "author": "raunaqmorarka", "createdAt": "2020-03-06T06:34:26Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.rubix;\n+\n+import com.qubole.rubix.prestosql.CachingPrestoGoogleHadoopFileSystem;\n+import com.qubole.rubix.prestosql.CachingPrestoNativeAzureFileSystem;\n+import com.qubole.rubix.prestosql.CachingPrestoS3FileSystem;\n+import com.qubole.rubix.prestosql.PrestoClusterManager;\n+import io.prestosql.plugin.hive.ConfigurationInitializer;\n+import io.prestosql.spi.HostAddress;\n+import org.apache.hadoop.conf.Configuration;\n+\n+import javax.inject.Inject;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.qubole.rubix.spi.CacheConfig.enableHeartbeat;\n+import static com.qubole.rubix.spi.CacheConfig.setBookKeeperServerPort;\n+import static com.qubole.rubix.spi.CacheConfig.setCacheDataDirPrefix;\n+import static com.qubole.rubix.spi.CacheConfig.setCacheDataEnabled;\n+import static com.qubole.rubix.spi.CacheConfig.setClusterNodeRefreshTime;\n+import static com.qubole.rubix.spi.CacheConfig.setClusterNodesFetchRetryCount;\n+import static com.qubole.rubix.spi.CacheConfig.setCoordinatorHostName;\n+import static com.qubole.rubix.spi.CacheConfig.setCurrentNodeHostName;\n+import static com.qubole.rubix.spi.CacheConfig.setDataTransferServerPort;\n+import static com.qubole.rubix.spi.CacheConfig.setEmbeddedMode;\n+import static com.qubole.rubix.spi.CacheConfig.setIsParallelWarmupEnabled;\n+import static com.qubole.rubix.spi.CacheConfig.setOnMaster;\n+import static com.qubole.rubix.spi.CacheConfig.setRubixClusterType;\n+import static com.qubole.rubix.spi.CacheConfig.setWorkerNodeInfoExpiryPeriod;\n+import static com.qubole.rubix.spi.ClusterType.PRESTOSQL_CLUSTER_MANAGER;\n+\n+public class RubixConfigurationInitializer\n+        implements ConfigurationInitializer\n+{\n+    private static final String RUBIX_S3_FS_CLASS_NAME = CachingPrestoS3FileSystem.class.getName();\n+    private static final String RUBIX_AZURE_FS_CLASS_NAME = CachingPrestoNativeAzureFileSystem.class.getName();\n+    private static final String RUBIX_GS_FS_CLASS_NAME = CachingPrestoGoogleHadoopFileSystem.class.getName();\n+\n+    private final boolean parallelWarmupEnabled;\n+    private final String cacheLocation;\n+    private final int bookKeeperServerPort;\n+    private final int dataTransferServerPort;\n+\n+    // Configs below are dependent on node joining the cluster\n+    private boolean cacheNotReady = true;\n+    private boolean isMaster;\n+    private HostAddress masterAddress;\n+    private String nodeAddress;\n+\n+    @Inject\n+    public RubixConfigurationInitializer(RubixConfig config)\n+    {\n+        this.parallelWarmupEnabled = config.isParallelWarmupEnabled();\n+        this.cacheLocation = config.getCacheLocation();\n+        this.bookKeeperServerPort = config.getBookKeeperServerPort();\n+        this.dataTransferServerPort = config.getDataTransferServerPort();\n+    }\n+\n+    @Override\n+    public void initializeConfiguration(Configuration config)\n+    {\n+        if (cacheNotReady) {\n+            setCacheDataEnabled(config, false);\n+            return;\n+        }\n+\n+        updateConfiguration(config);\n+    }\n+\n+    public Configuration updateConfiguration(Configuration config)\n+    {\n+        checkState(masterAddress != null, \"masterAddress is not set\");\n+        setCacheDataEnabled(config, true);\n+        setOnMaster(config, isMaster);\n+        setCoordinatorHostName(config, masterAddress.getHostText());\n+        PrestoClusterManager.setPrestoServerPort(config, masterAddress.getPort());\n+        setCurrentNodeHostName(config, nodeAddress);\n+\n+        setIsParallelWarmupEnabled(config, parallelWarmupEnabled);\n+        setCacheDataDirPrefix(config, cacheLocation);\n+        setBookKeeperServerPort(config, bookKeeperServerPort);\n+        setDataTransferServerPort(config, dataTransferServerPort);\n+\n+        setEmbeddedMode(config, true);\n+        setRubixClusterType(config, PRESTOSQL_CLUSTER_MANAGER);\n+        enableHeartbeat(config, false);\n+        setClusterNodeRefreshTime(config, 10);\n+        setClusterNodesFetchRetryCount(config, Integer.MAX_VALUE);\n+        setWorkerNodeInfoExpiryPeriod(config, 1);\n+\n+        config.set(\"fs.s3.impl\", RUBIX_S3_FS_CLASS_NAME);\n+        config.set(\"fs.s3a.impl\", RUBIX_S3_FS_CLASS_NAME);\n+        config.set(\"fs.s3n.impl\", RUBIX_S3_FS_CLASS_NAME);\n+        config.set(\"fs.wasb.impl\", RUBIX_AZURE_FS_CLASS_NAME);", "originalCommit": "1769b1f0cbc61bf0225ead1b685af358eae3a2ca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}