{"pr_number": 2788, "pr_title": "Balance ArbitraryOutputBuffer distribution over clients", "pr_createdAt": "2020-02-11T00:10:32Z", "pr_url": "https://github.com/trinodb/trino/pull/2788", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4OTY3Mw==", "url": "https://github.com/trinodb/trino/pull/2788#discussion_r377589673", "bodyText": "use index = (index + 1) % buffers.size()", "author": "sopel39", "createdAt": "2020-02-11T11:54:27Z", "path": "presto-main/src/main/java/io/prestosql/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -228,11 +233,32 @@ public void enqueue(List<SerializedPage> pages)\n         masterBuffer.addPages(serializedPageReferences);\n \n         // process any pending reads from the client buffers\n-        for (ClientBuffer clientBuffer : safeGetBuffersSnapshot()) {\n+        clientBufferPollLoop();\n+    }\n+\n+    /**\n+     * Iterates client buffers, resuming where the previous cycle stopped if the master buffer was emptied before all clients were polled\n+     * and no new client buffers have been inserted.\n+     */\n+    private void clientBufferPollLoop()\n+    {\n+        List<ClientBuffer> buffers = safeGetBuffersSnapshot();\n+        if (buffers.isEmpty()) {\n+            return;\n+        }\n+        // handle potential for racy update of indexOffset and buffer list copy\n+        int index = nextClientBufferIndex.get() % buffers.size();\n+        for (int i = 0; i < buffers.size(); i++) {\n+            buffers.get(index).loadPagesIfNecessary(masterBuffer);\n+            index++;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYzNTA4OA==", "url": "https://github.com/trinodb/trino/pull/2788#discussion_r377635088", "bodyText": "Done", "author": "pettyjamesm", "createdAt": "2020-02-11T13:32:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4OTY3Mw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MTU4MA==", "url": "https://github.com/trinodb/trino/pull/2788#discussion_r377881580", "bodyText": "I'd prefer to keep this inline instead of a separate method.", "author": "electrum", "createdAt": "2020-02-11T20:32:10Z", "path": "presto-main/src/main/java/io/prestosql/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -228,11 +233,29 @@ public void enqueue(List<SerializedPage> pages)\n         masterBuffer.addPages(serializedPageReferences);\n \n         // process any pending reads from the client buffers\n-        for (ClientBuffer clientBuffer : safeGetBuffersSnapshot()) {\n+        clientBufferPollLoop();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyMTE5Mw==", "url": "https://github.com/trinodb/trino/pull/2788#discussion_r377921193", "bodyText": "Sure, placed back inline.", "author": "pettyjamesm", "createdAt": "2020-02-11T21:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MTU4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MjExNg==", "url": "https://github.com/trinodb/trino/pull/2788#discussion_r377882116", "bodyText": "indexOffset seems incorrect here (maybe was renamed after the comment was written). Maybe just say \"next index\" rather than referring to the field.", "author": "electrum", "createdAt": "2020-02-11T20:33:17Z", "path": "presto-main/src/main/java/io/prestosql/execution/buffer/ArbitraryOutputBuffer.java", "diffHunk": "@@ -228,11 +233,29 @@ public void enqueue(List<SerializedPage> pages)\n         masterBuffer.addPages(serializedPageReferences);\n \n         // process any pending reads from the client buffers\n-        for (ClientBuffer clientBuffer : safeGetBuffersSnapshot()) {\n+        clientBufferPollLoop();\n+    }\n+\n+    /**\n+     * Iterates client buffers, resuming where the previous cycle stopped if the master buffer was emptied before all clients were polled\n+     * and no new client buffers have been inserted.\n+     */\n+    private void clientBufferPollLoop()\n+    {\n+        List<ClientBuffer> buffers = safeGetBuffersSnapshot();\n+        if (buffers.isEmpty()) {\n+            return;\n+        }\n+        // handle potential for racy update of indexOffset and buffer list copy", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyMTExNw==", "url": "https://github.com/trinodb/trino/pull/2788#discussion_r377921117", "bodyText": "You are correct, updated.", "author": "pettyjamesm", "createdAt": "2020-02-11T21:51:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MjExNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MjkxNQ==", "url": "https://github.com/trinodb/trino/pull/2788#discussion_r377882915", "bodyText": "This can be\nassertThat(firstReads.values()).allMatch(Future::isDone);", "author": "electrum", "createdAt": "2020-02-11T20:35:05Z", "path": "presto-main/src/test/java/io/prestosql/execution/buffer/TestArbitraryOutputBuffer.java", "diffHunk": "@@ -423,6 +426,56 @@ public void testGetBeforeCreate()\n         assertBufferResultEquals(TYPES, getFuture(future, NO_WAIT), bufferResult(0, createPage(33)));\n     }\n \n+    @Test\n+    public void testResumeFromPreviousPosition()\n+    {\n+        OutputBuffers outputBuffers = createInitialEmptyOutputBuffers(ARBITRARY);\n+        OutputBufferId[] ids = new OutputBufferId[5];\n+        for (int i = 0; i < ids.length; i++) {\n+            ids[i] = new OutputBufferId(i);\n+            outputBuffers = outputBuffers.withBuffer(ids[i], i);\n+        }\n+\n+        ArbitraryOutputBuffer buffer = createArbitraryBuffer(outputBuffers, sizeOfPages(5));\n+        assertFalse(buffer.isFinished());\n+\n+        Map<OutputBufferId, ListenableFuture<BufferResult>> firstReads = new HashMap<>();\n+        for (OutputBufferId id : ids) {\n+            firstReads.put(id, buffer.get(id, 0L, sizeOfPages(1)));\n+        }\n+        // All must be blocked initially\n+        firstReads.values().forEach(future -> assertFalse(future.isDone()));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyMTI2OQ==", "url": "https://github.com/trinodb/trino/pull/2788#discussion_r377921269", "bodyText": "Neat, done.", "author": "pettyjamesm", "createdAt": "2020-02-11T21:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MjkxNQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "afed5fbd7e9987736ef6a2d1db851c2d13d47de0", "url": "https://github.com/trinodb/trino/commit/afed5fbd7e9987736ef6a2d1db851c2d13d47de0", "message": "Balance ArbitraryOutputBuffer distribution over clients\n\nPreviously, the order that client buffers were polled was always\nstarted with the first ClientBuffer, which could lead to data skew\nwhen the master buffer drained before all clients could be polled\nsince the client buffer traversal order was stable (but arbitrary).\n\nThis change stores the stop index of client buffer iteration to\nensure that subsequent polling loops don't overload the first client\nbuffer.", "committedDate": "2020-02-11T22:15:04Z", "type": "commit"}, {"oid": "afed5fbd7e9987736ef6a2d1db851c2d13d47de0", "url": "https://github.com/trinodb/trino/commit/afed5fbd7e9987736ef6a2d1db851c2d13d47de0", "message": "Balance ArbitraryOutputBuffer distribution over clients\n\nPreviously, the order that client buffers were polled was always\nstarted with the first ClientBuffer, which could lead to data skew\nwhen the master buffer drained before all clients could be polled\nsince the client buffer traversal order was stable (but arbitrary).\n\nThis change stores the stop index of client buffer iteration to\nensure that subsequent polling loops don't overload the first client\nbuffer.", "committedDate": "2020-02-11T22:15:04Z", "type": "forcePushed"}]}