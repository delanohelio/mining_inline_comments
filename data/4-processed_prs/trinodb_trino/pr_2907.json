{"pr_number": 2907, "pr_title": "Document filter for aggregate functions", "pr_createdAt": "2020-02-21T22:46:29Z", "pr_url": "https://github.com/trinodb/trino/pull/2907", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIzOTg3NA==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r383239874", "bodyText": "single <expression> looks like 1-arg agg func\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                AGGREATE_FUNCTION(<expression>) FILTER(WHERE <condition>)\n          \n          \n            \n                AGGREATE_FUNCTION(<arguments>) FILTER(WHERE <condition>)\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                AGGREATE_FUNCTION(<expression>) FILTER(WHERE <condition>)\n          \n          \n            \n                AGGREATE_FUNCTION(...) FILTER(WHERE <condition>)\n          \n      \n    \n    \n  \n\n?", "author": "findepi", "createdAt": "2020-02-24T12:35:19Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,58 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(<expression>) FILTER(WHERE <condition>)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI0MTQwMg==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r383241402", "bodyText": "i'd live an empty line between query and data output.\nin fact, we sometimes render this as 2 blocks.\nexample from accumulo.rst:\n.. code-block:: sql\n\n    DESCRIBE myschema.scientists;\n\n.. code-block:: none\n\n      Column   |  Type   | Extra |                      Comment\n    -----------+---------+-------+---------------------------------------------------\n     recordkey | varchar |       | Accumulo row ID\n     name      | varchar |       | Accumulo column name:name. Indexed: false\n     age       | bigint  |       | Accumulo column age:age. Indexed: false\n     birthday  | date    |       | Accumulo column birthday:birthday. Indexed: false", "author": "findepi", "createdAt": "2020-02-24T12:39:00Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,58 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(<expression>) FILTER(WHERE <condition>)\n+\n+For example, you want to add a condition on the count for Iris flowers,\n+modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+    species   |  count\n+    ------------+-------\n+    setosa     |    50\n+    virginica  |    50\n+    versicolor |    50\n+\n+If you just use a normal WHERE statement you loose information:\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+        count(*) AS count\n+    FROM memory.default.iris\n+    WHERE petallengthcm > 4\n+    GROUP BY species;\n+    species   | _col1\n+    ------------+-------\n+    virginica  |    50\n+    versicolor |    34\n+\n+Using a filter you retain all information:\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) FILTER (where petallengthcm > 4) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+    species   | count", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQxMTczMw==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r384411733", "bodyText": "i had a comment, but i don't see it, maybe i didnt publish...\nI'd just have one example showing filtered agg, instead of 3 examples (and only 1 showing that)\nWDYT?", "author": "findepi", "createdAt": "2020-02-26T10:43:38Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,67 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER(WHERE <condition>)\n+\n+For example, you want to add a condition on the count for Iris flowers,\n+modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    setosa     |   50\n+    virginica      50\n+    versicolor|    50\n+\n+If you just use a normal WHERE statement you loose information:\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+        count(*) AS count\n+    FROM memory.default.iris\n+    WHERE petallengthcm > 4\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    virginica  |   50\n+    versicolor     34\n+\n+Using a filter you retain all information:", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwNzU3Nw==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r384607577", "bodyText": "This is only one example. There are three queries and results so readers can actually see what the difference in result is. I would leave it as is.", "author": "mosabua", "createdAt": "2020-02-26T16:24:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQxMTczMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0MjQ1Mw==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r384642453", "bodyText": "Add space after FILTER", "author": "martint", "createdAt": "2020-02-26T17:18:49Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,67 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER(WHERE <condition>)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY0Mzc3Mw==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r384643773", "bodyText": "The canonical example (and very useful example) is to use FILTER to remove nulls from consideration when using array_agg:\nSELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\nFROM t\n\nThere's no easy way to achieve that, especially when the query involves other aggregations.", "author": "martint", "createdAt": "2020-02-26T17:21:09Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,67 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER(WHERE <condition>)\n+\n+For example, you want to add a condition on the count for Iris flowers,\n+modifying the following query.\n+\n+.. code-block:: none", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NzM5NA==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385467394", "bodyText": "Move this to the top, since it is describing generic syntax and shouldn't be mixed in between the descriptions of specific functions. Also, let's add a related section heading\nOrdering During Aggregation\n---------------------------", "author": "electrum", "createdAt": "2020-02-28T01:41:36Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NzQ5Mw==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385467493", "bodyText": "Lowercase aggregate_function since we write functions in lowercase (and keywords in uppercase)", "author": "electrum", "createdAt": "2020-02-28T01:42:00Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4MDE0Mw==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385880143", "bodyText": "I left FILTER and WHERE", "author": "mosabua", "createdAt": "2020-02-28T19:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NzQ5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NzY4Ng==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385467686", "bodyText": "This needs\n.. code-block:: none", "author": "electrum", "createdAt": "2020-02-28T01:42:47Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2Nzg1Nw==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385467857", "bodyText": "Change period to :: and remove the code-block part since this is SQL", "author": "electrum", "createdAt": "2020-02-28T01:43:27Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODM3NA==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385468374", "bodyText": "Let's make this a real example\nSELECT array_agg(name) FILTER (WHERE name IS NOT NULL)\nFROM region", "author": "electrum", "createdAt": "2020-02-28T01:45:41Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODUzNQ==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385468535", "bodyText": "Remove, since this is SQL", "author": "electrum", "createdAt": "2020-02-28T01:46:07Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\n+    FROM t\n+\n+As another example, imagine you want to add a condition on the count for Iris\n+flowers, modifying the following query.\n+\n+.. code-block:: none", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODcwNw==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385468707", "bodyText": "The formatting is off here. This row is missing | and the next one is misaligned", "author": "electrum", "createdAt": "2020-02-28T01:46:47Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\n+    FROM t\n+\n+As another example, imagine you want to add a condition on the count for Iris\n+flowers, modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    setosa     |   50\n+    virginica      50", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODcyOA==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385468728", "bodyText": "Missing |", "author": "electrum", "createdAt": "2020-02-28T01:46:55Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\n+    FROM t\n+\n+As another example, imagine you want to add a condition on the count for Iris\n+flowers, modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    setosa     |   50\n+    virginica      50\n+    versicolor|    50\n+\n+If you just use a normal WHERE statement you loose information:\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+        count(*) AS count\n+    FROM memory.default.iris\n+    WHERE petallengthcm > 4\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    virginica  |   50\n+    versicolor     34", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODc4Mg==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385468782", "bodyText": "petal_length_cm", "author": "electrum", "createdAt": "2020-02-28T01:47:09Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\n+    FROM t\n+\n+As another example, imagine you want to add a condition on the count for Iris\n+flowers, modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    setosa     |   50\n+    virginica      50\n+    versicolor|    50\n+\n+If you just use a normal WHERE statement you loose information:\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+        count(*) AS count\n+    FROM memory.default.iris\n+    WHERE petallengthcm > 4", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4MjI0Ng==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385882246", "bodyText": "in the book we have column names that conflate it all into one word for all of them ... if we change this here we should change all queries in the book. it was like that from when I got the original drafts. Wdyt @mattsfuller  and @martint ? For reference https://github.com/starburstdata/presto-the-definitive-guide/tree/master/iris-data-set\nI am fine changing this but this has to be done next week in the book source before it finished copy edit so we need to decide ASAP.", "author": "mosabua", "createdAt": "2020-02-28T19:32:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg5NjM2Mg==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385896362", "bodyText": "I think it's much cleaner and readable with what @electrum suggested, so I suggest we change it.", "author": "martint", "createdAt": "2020-02-28T20:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg5ODQ0MA==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385898440", "bodyText": "okay ... I will update this and the book repo now. and the book itself next week", "author": "mosabua", "createdAt": "2020-02-28T20:06:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODc4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODgxOA==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385468818", "bodyText": "FROM iris", "author": "electrum", "createdAt": "2020-02-28T01:47:20Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\n+    FROM t\n+\n+As another example, imagine you want to add a condition on the count for Iris\n+flowers, modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2ODg2Mg==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385468862", "bodyText": "FROM iris", "author": "electrum", "createdAt": "2020-02-28T01:47:27Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\n+    FROM t\n+\n+As another example, imagine you want to add a condition on the count for Iris\n+flowers, modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    setosa     |   50\n+    virginica      50\n+    versicolor|    50\n+\n+If you just use a normal WHERE statement you loose information:\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+        count(*) AS count\n+    FROM memory.default.iris", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2OTA4MA==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385469080", "bodyText": "Remove, as this is SQL", "author": "electrum", "createdAt": "2020-02-28T01:48:24Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\n+    FROM t\n+\n+As another example, imagine you want to add a condition on the count for Iris\n+flowers, modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    setosa     |   50\n+    virginica      50\n+    versicolor|    50\n+\n+If you just use a normal WHERE statement you loose information:\n+\n+.. code-block:: none", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2OTY1Ng==", "url": "https://github.com/trinodb/trino/pull/2907#discussion_r385469656", "bodyText": "Remove the row count or add it to the others", "author": "electrum", "createdAt": "2020-02-28T01:50:35Z", "path": "presto-docs/src/main/sphinx/functions/aggregate.rst", "diffHunk": "@@ -355,3 +360,75 @@ Lambda Aggregate Functions\n         -- (2, 42)\n \n     The state type must be a boolean, integer, floating-point, or date/time/interval.\n+\n+\n+Filtering During Aggregation\n+----------------------------\n+\n+The ``FILTER`` keyword can be used to remove rows from aggregation processing\n+with a condition expressed using a ``WHERE`` clause. This is evaluated for each\n+row before it is used in the aggregation and is supported for all aggregate\n+functions.\n+\n+    AGGREATE_FUNCTION(...) FILTER (WHERE <condition>)\n+\n+A common and very useful example is to use ``FILTER`` to remove nulls from\n+consideration when using ``array_agg``.\n+\n+.. code-block:: none\n+\n+    SELECT array_agg(col) FILTER (WHERE col IS NOT NULL)\n+    FROM t\n+\n+As another example, imagine you want to add a condition on the count for Iris\n+flowers, modifying the following query.\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    setosa     |   50\n+    virginica      50\n+    versicolor|    50\n+\n+If you just use a normal WHERE statement you loose information:\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+        count(*) AS count\n+    FROM memory.default.iris\n+    WHERE petallengthcm > 4\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    virginica  |   50\n+    versicolor     34\n+\n+Using a filter you retain all information:\n+\n+.. code-block:: none\n+\n+    SELECT species,\n+           count(*) FILTER (where petallengthcm > 4) AS count\n+    FROM memory.default.iris\n+    GROUP BY species;\n+\n+.. code-block:: none\n+\n+    species    | count\n+    -----------+-------\n+    virginica  |   50\n+    setosa     |    0\n+    versicolor |   34\n+    (3 rows)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "a69c378c0aed6d98c8c38054417e4fa8afcb5042", "url": "https://github.com/trinodb/trino/commit/a69c378c0aed6d98c8c38054417e4fa8afcb5042", "message": "Document filter for aggregate functions", "committedDate": "2020-02-28T20:13:09Z", "type": "commit"}, {"oid": "a69c378c0aed6d98c8c38054417e4fa8afcb5042", "url": "https://github.com/trinodb/trino/commit/a69c378c0aed6d98c8c38054417e4fa8afcb5042", "message": "Document filter for aggregate functions", "committedDate": "2020-02-28T20:13:09Z", "type": "forcePushed"}]}