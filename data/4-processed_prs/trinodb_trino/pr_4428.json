{"pr_number": 4428, "pr_title": "Support aggregation pushdown in MySQL connector", "pr_createdAt": "2020-07-12T13:28:27Z", "pr_url": "https://github.com/trinodb/trino/pull/4428", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA0NjQyOQ==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r456046429", "bodyText": "Remove", "author": "alexjo2144", "createdAt": "2020-07-16T20:05:53Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySQLClient.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import io.prestosql.plugin.jdbc.BaseJdbcConfig;\n+import io.prestosql.plugin.jdbc.ColumnMapping;\n+import io.prestosql.plugin.jdbc.JdbcClient;\n+import io.prestosql.plugin.jdbc.JdbcColumnHandle;\n+import io.prestosql.plugin.jdbc.JdbcExpression;\n+import io.prestosql.plugin.jdbc.JdbcTypeHandle;\n+import io.prestosql.spi.connector.AggregateFunction;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.spi.type.TypeManager;\n+import io.prestosql.type.InternalTypeManager;\n+import org.testng.annotations.Test;\n+\n+import java.sql.Types;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.testing.TestingConnectorSession.SESSION;\n+import static io.prestosql.testing.assertions.Assert.assertEquals;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestMySQLClient\n+{\n+    private static final TypeManager TYPE_MANAGER = new InternalTypeManager(createTestMetadataManager());\n+\n+    private static final JdbcColumnHandle BIGINT_COLUMN =\n+            JdbcColumnHandle.builder()\n+                    .setColumnName(\"c_bigint\")\n+                    .setColumnType(BIGINT)\n+                    .setJdbcTypeHandle(new JdbcTypeHandle(Types.BIGINT, Optional.of(\"int8\"), 0, 0, Optional.empty()))\n+                    .build();\n+\n+    private static final JdbcColumnHandle DOUBLE_COLUMN =\n+            JdbcColumnHandle.builder()\n+                    .setColumnName(\"c_double\")\n+                    .setColumnType(DOUBLE)\n+                    .setJdbcTypeHandle(new JdbcTypeHandle(Types.DOUBLE, Optional.of(\"double\"), 0, 0, Optional.empty()))\n+                    .build();\n+\n+    private static final JdbcClient JDBC_CLIENT = new MySqlClient(\n+            new BaseJdbcConfig(),\n+//            new MySqlConfig(),", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4NTI4Nw==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r459785287", "bodyText": "Fixed", "author": "yuokada", "createdAt": "2020-07-23T23:37:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA0NjQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5NDgyOA==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r458894828", "bodyText": "I believe that avg for Integer columns actually won't be pushed down. The avg function is only defined in the engine for BIGINT and DOUBLE. Other types will have a cast, which gets in the way of the pushdown.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            .with(expressionType().matching(type -> type == BIGINT || type == INTEGER))\n          \n          \n            \n                                            .with(singleInput().matching(variable().with(expressionType().equalTo(BIGINT))))", "author": "alexjo2144", "createdAt": "2020-07-22T15:49:04Z", "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/ImplementAvgBigint.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import io.prestosql.matching.Capture;\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.plugin.jdbc.JdbcColumnHandle;\n+import io.prestosql.plugin.jdbc.JdbcExpression;\n+import io.prestosql.plugin.jdbc.JdbcTypeHandle;\n+import io.prestosql.plugin.jdbc.expression.AggregateFunctionRule;\n+import io.prestosql.spi.connector.AggregateFunction;\n+import io.prestosql.spi.expression.Variable;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.base.Verify.verifyNotNull;\n+import static io.prestosql.matching.Capture.newCapture;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.expressionType;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.functionName;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.singleInput;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.variable;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static java.lang.String.format;\n+\n+public class ImplementAvgBigint\n+        implements AggregateFunctionRule\n+{\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"avg\"))\n+                .with(singleInput().matching(\n+                        variable()\n+                                .with(expressionType().matching(type -> type == BIGINT || type == INTEGER))", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1NjQ0NA==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r459956444", "bodyText": "good catch", "author": "findepi", "createdAt": "2020-07-24T09:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5NDgyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4OTkzMg==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r460389932", "bodyText": "@alexjo2144 I confirmed aggregate pushdown isn't triggered to INTEGER in mysql and postgresql.\nSo I revised.", "author": "yuokada", "createdAt": "2020-07-25T10:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5NDgyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5ODczMQ==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r458898731", "bodyText": "If https://github.com/prestosql/presto/pull/4313/files#diff-81a9801ba0bc1960cc32cc99ebf1928e gets merged first we could use that rather than defining this class", "author": "alexjo2144", "createdAt": "2020-07-22T15:54:30Z", "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/ImplementAvgBigint.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import io.prestosql.matching.Capture;\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.plugin.jdbc.JdbcColumnHandle;\n+import io.prestosql.plugin.jdbc.JdbcExpression;\n+import io.prestosql.plugin.jdbc.JdbcTypeHandle;\n+import io.prestosql.plugin.jdbc.expression.AggregateFunctionRule;\n+import io.prestosql.spi.connector.AggregateFunction;\n+import io.prestosql.spi.expression.Variable;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.base.Verify.verifyNotNull;\n+import static io.prestosql.matching.Capture.newCapture;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.expressionType;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.functionName;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.singleInput;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.variable;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static java.lang.String.format;\n+\n+public class ImplementAvgBigint", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1NjM0MA==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r459956340", "bodyText": "Let's not block on this. It's not a big problem to adapt later.", "author": "findepi", "createdAt": "2020-07-24T09:48:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5ODczMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwMTIxNQ==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r458901215", "bodyText": "You need a rebase, this method was renamed and now only takes one argument.", "author": "alexjo2144", "createdAt": "2020-07-22T15:58:00Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlIntegrationSmokeTest.java", "diffHunk": "@@ -225,6 +225,34 @@ public void testInsertIntoNotNullColumn()\n         assertUpdate(\"DROP TABLE test_insert_not_null\");\n     }\n \n+    @Test\n+    public void testAggregationPushdown()\n+            throws Exception\n+    {\n+        // TODO support aggregation pushdown with GROUPING SETS\n+        // TODO support aggregation over expressions\n+\n+        assertPushedDown(\"SELECT count(*) FROM nation\");\n+        assertPushedDown(\"SELECT count(nationkey) FROM nation\");\n+        assertPushedDown(\"SELECT regionkey, min(nationkey) FROM nation GROUP BY regionkey\");\n+        assertPushedDown(\"SELECT regionkey, max(nationkey) FROM nation GROUP BY regionkey\");\n+        assertPushedDown(\"SELECT regionkey, sum(nationkey) FROM nation GROUP BY regionkey\");\n+        assertPushedDown(\"SELECT regionkey, avg(regionkey) FROM nation GROUP BY regionkey\");\n+        assertPushedDown(", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4NTM1MA==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r459785350", "bodyText": "I will rebase.", "author": "yuokada", "createdAt": "2020-07-23T23:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwMTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4OTcwMA==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r459789700", "bodyText": "Rebased & Renamed.", "author": "yuokada", "createdAt": "2020-07-23T23:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkwMTIxNQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3OTQ2OQ==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r460379469", "bodyText": "Could you please fix the CI failure?\n2020-07-24T00:55:02.4084660Z [ERROR]   TestMySqlDistributedQueries>AbstractTestQueries.testExistsSubquery:1025->AbstractTestQueryFramework.assertQuery:120->AbstractTestQueryFramework.assertQuery:125 Execution of 'actual' query failed: SELECT o1.orderkey, COUNT(*) FROM orders o1  JOIN (SELECT * FROM orders LIMIT 10) o2 ON (SELECT avg(orderkey) FROM orders) > 3 GROUP BY o1.orderkey ORDER BY o1.orderkey LIMIT 5\n2020-07-24T00:55:02.4086032Z [ERROR]   TestMySqlDistributedQueries>AbstractTestQueries.testScalarSubquery:907->AbstractTestQueryFramework.assertQuery:120->AbstractTestQueryFramework.assertQuery:125 Execution of 'actual' query failed: SELECT DISTINCT orderkey FROM lineitem WHERE orderkey BETWEEN   (SELECT avg(orderkey) FROM orders) - 10    AND   (SELECT avg(orderkey) FROM orders) + 10\n2020-07-24T00:55:02.4086880Z [ERROR]   TestMySqlIntegrationSmokeTest>AbstractTestIntegrationSmokeTest.testAggregation:104->AbstractTestQueryFramework.assertQuery:130 Execution of 'actual' query failed: SELECT avg(nationkey) FROM nation\n2020-07-24T00:55:02.4087788Z [ERROR]   TestMySqlIntegrationSmokeTest.testAggregationPushdown:242->AbstractTestIntegrationSmokeTest.assertAggregationPushedDown:452->AbstractTestQueryFramework.computeActual:105->AbstractTestQueryFramework.computeActual:110 \u00bb Runtime\n\nmysql> SELECT cast(1 AS DOUBLE);\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'DOUBLE)' at line 1", "author": "ebyhr", "createdAt": "2020-07-25T08:01:47Z", "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/ImplementAvgBigint.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import io.prestosql.matching.Capture;\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.plugin.jdbc.JdbcColumnHandle;\n+import io.prestosql.plugin.jdbc.JdbcExpression;\n+import io.prestosql.plugin.jdbc.JdbcTypeHandle;\n+import io.prestosql.plugin.jdbc.expression.AggregateFunctionRule;\n+import io.prestosql.spi.connector.AggregateFunction;\n+import io.prestosql.spi.expression.Variable;\n+\n+import java.sql.Types;\n+import java.util.Optional;\n+\n+import static com.google.common.base.Verify.verify;\n+import static com.google.common.base.Verify.verifyNotNull;\n+import static io.prestosql.matching.Capture.newCapture;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.basicAggregation;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.expressionType;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.functionName;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.singleInput;\n+import static io.prestosql.plugin.jdbc.expression.AggregateFunctionPatterns.variable;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.spi.type.IntegerType.INTEGER;\n+import static java.lang.String.format;\n+\n+public class ImplementAvgBigint\n+        implements AggregateFunctionRule\n+{\n+    private static final Capture<Variable> INPUT = newCapture();\n+\n+    @Override\n+    public Pattern<AggregateFunction> getPattern()\n+    {\n+        return basicAggregation()\n+                .with(functionName().equalTo(\"avg\"))\n+                .with(singleInput().matching(\n+                        variable()\n+                                .with(expressionType().matching(type -> type == BIGINT || type == INTEGER))\n+                                .capturedAs(INPUT)));\n+    }\n+\n+    @Override\n+    public Optional<JdbcExpression> rewrite(AggregateFunction aggregateFunction, Captures captures, RewriteContext context)\n+    {\n+        Variable input = captures.get(INPUT);\n+        JdbcColumnHandle columnHandle = (JdbcColumnHandle) context.getAssignments().get(input.getName());\n+        verifyNotNull(columnHandle, \"Unbound variable: %s\", input);\n+        verify(aggregateFunction.getOutputType() == DOUBLE);\n+\n+        return Optional.of(new JdbcExpression(\n+                format(\"avg(CAST(%s AS double))\", columnHandle.toSqlExpression(context.getIdentifierQuote())),", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4MDU2Mw==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r460380563", "bodyText": "Yeah, I'm investigating the cause of it.", "author": "yuokada", "createdAt": "2020-07-25T08:15:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3OTQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4MDc4NQ==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r460380785", "bodyText": "@ebyhr Just a question. what version of mysql did you use to reproduce it?\nI can't reproduce it in mysql 8.0.\nmysql> SELECT cast(1 AS DOUBLE);\n+-------------------+\n| cast(1 AS DOUBLE) |\n+-------------------+\n|                 1 |\n+-------------------+\n1 row in set (0.00 sec)\n\nmysql> select version();\n+-----------+\n| version() |\n+-----------+\n| 8.0.19    |\n+-----------+\n1 row in set (0.00 sec)", "author": "yuokada", "createdAt": "2020-07-25T08:18:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3OTQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4MDk4OQ==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r460380989", "bodyText": "We are using version 8.0.12. If my remember correctly, casting to double was added in version 8.0.17.\nhttps://github.com/prestosql/presto/blob/337dd30d26a0ace0b5b2bd99ccedcc0a556f35de/presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestingMySqlServer.java#L30", "author": "ebyhr", "createdAt": "2020-07-25T08:21:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3OTQ2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4MTQ5NQ==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r460381495", "bodyText": "I see. And you are right.\n\nDOUBLE\nProduces a DOUBLE result. Added in MySQL 8.0.17.\n\nhttps://dev.mysql.com/doc/refman/8.0/en/cast-functions.html#function_cast", "author": "yuokada", "createdAt": "2020-07-25T08:27:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3OTQ2OQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzMTYyMw==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r476331623", "bodyText": "Add\nassertThat(query(\"SELECT regionkey, sum(nationkey) FROM nation WHERE regionkey < 4 GROUP BY regionkey\")).isCorrectlyPushedDown();\n        assertThat(query(\"SELECT regionkey, sum(nationkey) FROM nation WHERE regionkey < 4 AND name > 'AAA' GROUP BY regionkey\")).isNotFullyPushedDown(FilterNode.class);\n\nsee https://github.com/prestosql/presto/blob/1e69a5bfed50c7b41febcd62b79f598c52bf67d6/presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlIntegrationSmokeTest.java#L352-L353", "author": "findepi", "createdAt": "2020-08-25T10:02:47Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlIntegrationSmokeTest.java", "diffHunk": "@@ -226,6 +226,33 @@ public void testInsertIntoNotNullColumn()\n         assertUpdate(\"DROP TABLE test_insert_not_null\");\n     }\n \n+    @Test\n+    public void testAggregationPushdown()\n+            throws Exception\n+    {\n+        // TODO support aggregation pushdown with GROUPING SETS\n+        // TODO support aggregation over expressions\n+\n+        assertThat(query(\"SELECT count(*) FROM nation\")).isCorrectlyPushedDown();\n+        assertThat(query(\"SELECT count(nationkey) FROM nation\")).isCorrectlyPushedDown();\n+        assertThat(query(\"SELECT count(1) FROM nation\")).isCorrectlyPushedDown();\n+        assertThat(query(\"SELECT count() FROM nation\")).isCorrectlyPushedDown();\n+        assertThat(query(\"SELECT regionkey, min(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n+        assertThat(query(\"SELECT regionkey, max(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n+        assertThat(query(\"SELECT regionkey, sum(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n+        assertThat(query(\"SELECT regionkey, avg(nationkey) FROM nation GROUP BY regionkey\")).isCorrectlyPushedDown();\n+", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMjIyOA==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r476432228", "bodyText": "Thanks. I added those lines.", "author": "yuokada", "createdAt": "2020-08-25T13:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzMTYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzNjcyNg==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r507236726", "bodyText": "@findepi why isNotFullyPushedDown is used for \"SELECT regionkey, sum(nationkey) FROM nation WHERE regionkey < 4 AND name > 'AAA' GROUP BY regionkey\" ?", "author": "tooptoop4", "createdAt": "2020-10-18T22:52:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzMTYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4MjA2Mg==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r507682062", "bodyText": "@tooptoop4 https://github.com/prestosql/presto/blob/22717c61419c851b1c3814b60a3453b22d4a45ef/presto-mysql/src/main/java/io/prestosql/plugin/mysql/MySqlClient.java#L237-L238", "author": "findepi", "createdAt": "2020-10-19T11:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMzMTYyMw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1NDE0OA==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r476554148", "bodyText": "nit: TestMySqlClient", "author": "findepi", "createdAt": "2020-08-25T15:51:02Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySQLClient.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import io.prestosql.plugin.jdbc.BaseJdbcConfig;\n+import io.prestosql.plugin.jdbc.ColumnMapping;\n+import io.prestosql.plugin.jdbc.JdbcClient;\n+import io.prestosql.plugin.jdbc.JdbcColumnHandle;\n+import io.prestosql.plugin.jdbc.JdbcExpression;\n+import io.prestosql.plugin.jdbc.JdbcTypeHandle;\n+import io.prestosql.spi.connector.AggregateFunction;\n+import io.prestosql.spi.connector.ColumnHandle;\n+import io.prestosql.spi.expression.ConnectorExpression;\n+import io.prestosql.spi.expression.Variable;\n+import io.prestosql.spi.type.TypeManager;\n+import io.prestosql.type.InternalTypeManager;\n+import org.testng.annotations.Test;\n+\n+import java.sql.Types;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static io.prestosql.metadata.MetadataManager.createTestMetadataManager;\n+import static io.prestosql.spi.type.BigintType.BIGINT;\n+import static io.prestosql.spi.type.BooleanType.BOOLEAN;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.testing.TestingConnectorSession.SESSION;\n+import static io.prestosql.testing.assertions.Assert.assertEquals;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestMySQLClient", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3NjI0Mg==", "url": "https://github.com/trinodb/trino/pull/4428#discussion_r476676242", "bodyText": "Renamed.", "author": "yuokada", "createdAt": "2020-08-25T19:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1NDE0OA=="}], "type": "inlineReview"}, {"oid": "cec47fc5e13606e5de32bc77949e6a785d5bac59", "url": "https://github.com/trinodb/trino/commit/cec47fc5e13606e5de32bc77949e6a785d5bac59", "message": "Support aggregation pushdown in MySQL connector", "committedDate": "2020-08-25T19:04:43Z", "type": "commit"}, {"oid": "cec47fc5e13606e5de32bc77949e6a785d5bac59", "url": "https://github.com/trinodb/trino/commit/cec47fc5e13606e5de32bc77949e6a785d5bac59", "message": "Support aggregation pushdown in MySQL connector", "committedDate": "2020-08-25T19:04:43Z", "type": "forcePushed"}, {"oid": "5c6cefece76ba19aa7e8f0f0c6d7c8b591706aac", "url": "https://github.com/trinodb/trino/commit/5c6cefece76ba19aa7e8f0f0c6d7c8b591706aac", "message": "Add Pushdown section in MySQL document", "committedDate": "2020-08-25T19:07:17Z", "type": "commit"}]}