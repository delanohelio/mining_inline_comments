{"pr_number": 3946, "pr_title": "Fix incorrect cast from timestamp to time", "pr_createdAt": "2020-06-07T02:07:12Z", "pr_url": "https://github.com/trinodb/trino/pull/3946", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjUxMg==", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436362512", "bodyText": "nit: We usually use Kathmandu for this.", "author": "findepi", "createdAt": "2020-06-07T13:18:55Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestampLegacy.java", "diffHunk": "@@ -13,11 +13,41 @@\n  */\n package io.prestosql.operator.scalar.timestamp;\n \n+import io.prestosql.Session;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n public class TestTimestampLegacy\n         extends BaseTestTimestamp\n {\n     protected TestTimestampLegacy()\n     {\n         super(true);\n     }\n+\n+    @Test\n+    public void testCastToTimeWithDaylightSavings()\n+    {\n+        // The number of seconds since the beginning of the day for the America/Los_Angeles in 2020 doesn't match\n+        // that of 1970, the year of the epoch. Make sure the proper corrections are being performed.\n+        Session session = assertions.sessionBuilder()\n+                .setTimeZoneKey(getTimeZoneKey(\"America/Los_Angeles\"))", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3MjExNQ==", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436372115", "bodyText": "Does it matter? This timezone reproduces the issue and is easy to reason about.", "author": "martint", "createdAt": "2020-06-07T14:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MjQ5OQ==", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436382499", "bodyText": "Kathmandu zone is very easy to reason about.  It doesn't", "author": "findepi", "createdAt": "2020-06-07T17:05:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwOTc5Mw==", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436409793", "bodyText": "I guess what I'm referring to is to the fact that while I know what the daylight saving rules for America/Los_Angeles, I have no idea about Kathmandu's. I'd need to look them up (what day it switches over, etc).", "author": "martint", "createdAt": "2020-06-07T22:56:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2NDAxNQ==", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436564015", "bodyText": "We use Kathmandu in the code base for two reasons:\n\nit has an offset that is not whole hours (x:45)\nit has a different offset on 1970-01-01 than \"today\"\n(and it has no DST btw, which probably doesn't matter for this test)\n\nhttps://github.com/prestosql/presto/blob/4e1393d4933f73876999944ef9c7d0b5ddd3e534/presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/StandardColumnMappings.java#L357\nhttps://github.com/prestosql/presto/blob/21e3ddf55a641e1c17b7e4a17689223ff1120b42/presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctionsBase.java#L196\nhttps://github.com/prestosql/presto/blob/21e3ddf55a641e1c17b7e4a17689223ff1120b42/presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctionsBase.java#L1125-L1126\nThat doesn't not surprise me you know the rules for Los Angeles. I would need to look them up though.\nTo be clear: I am fine with this test using Los Angeles zone.\nI just do not agree that Los Angeles is \"better\" in general.\n(See also prestodb/presto#10078)", "author": "findepi", "createdAt": "2020-06-08T09:22:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU2NDY1OA==", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436564658", "bodyText": "Of course, we do not need (and we should not) use 2-4 selected zones everywhere.", "author": "findepi", "createdAt": "2020-06-08T09:23:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjUxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjYyMQ==", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436362621", "bodyText": "This could go into BaseTestTimestamp, to cover the new semantics (even though it was not broken)", "author": "findepi", "createdAt": "2020-06-07T13:20:06Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestTimestampLegacy.java", "diffHunk": "@@ -13,11 +13,41 @@\n  */\n package io.prestosql.operator.scalar.timestamp;\n \n+import io.prestosql.Session;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n public class TestTimestampLegacy\n         extends BaseTestTimestamp\n {\n     protected TestTimestampLegacy()\n     {\n         super(true);\n     }\n+\n+    @Test\n+    public void testCastToTimeWithDaylightSavings()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3MjM4OA==", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436372388", "bodyText": "I thought about that, but this is just testing an implementation detail. (New) timestamps are not sensitive to timezones, so it didn't feel right to be testing that.", "author": "martint", "createdAt": "2020-06-07T15:02:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM4MjU5Mg==", "url": "https://github.com/trinodb/trino/pull/3946#discussion_r436382592", "bodyText": "I would prefer to have a common test. The new semantics are immune to session zone & its DST, but it is OK to verify that with a test (\"black box\").", "author": "findepi", "createdAt": "2020-06-07T17:06:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjYyMQ=="}], "type": "inlineReview"}, {"oid": "87c5e75a7ce60b834e10c0ce3b44b96ba4fddc53", "url": "https://github.com/trinodb/trino/commit/87c5e75a7ce60b834e10c0ce3b44b96ba4fddc53", "message": "Fix incorrect cast from timestamp to time\n\nWhen the offset of the session timezone on the current day\ndiffers from the offset during the epoch due to, say, daylight\nsavings, the result of the cast would be wrong.", "committedDate": "2020-06-09T06:24:55Z", "type": "commit"}, {"oid": "87c5e75a7ce60b834e10c0ce3b44b96ba4fddc53", "url": "https://github.com/trinodb/trino/commit/87c5e75a7ce60b834e10c0ce3b44b96ba4fddc53", "message": "Fix incorrect cast from timestamp to time\n\nWhen the offset of the session timezone on the current day\ndiffers from the offset during the epoch due to, say, daylight\nsavings, the result of the cast would be wrong.", "committedDate": "2020-06-09T06:24:55Z", "type": "forcePushed"}]}