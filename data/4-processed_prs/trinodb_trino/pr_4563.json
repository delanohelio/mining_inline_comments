{"pr_number": 4563, "pr_title": "Fix handling of dates and timestamps before the 20th century", "pr_createdAt": "2020-07-24T10:43:18Z", "pr_url": "https://github.com/trinodb/trino/pull/4563", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5OTY1OA==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r459999658", "bodyText": "Can you please explain in comment why such logic is needed. It may be just me, but it is not obvious why original code does not work. What is the difference.", "author": "losipiuk", "createdAt": "2020-07-24T11:35:12Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -257,7 +259,11 @@ private Date getDate(int columnIndex, DateTimeZone localTimeZone)\n         }\n \n         try {\n-            return new Date(DATE_FORMATTER.withZone(localTimeZone).parseMillis(String.valueOf(value)));\n+            LocalDate localDate = DATE_FORMATTER.parseLocalDate(String.valueOf(value));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0OTUwMQ==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r460049501", "bodyText": "Thanks for pointing that out.  I'll comment the code, but I'll do it here first, so we can discuss.\nSo the problem was that by default, Joda uses the ISO chronology, which doesn't work for dates before the introduction of the Gregorian calendar.  The same is true for LocalDateTime in the new Java API.  Joda allows you to specify a chronology and from the description, GJChronology seemed the appropriate one, but it was producing results that were off by an hour.  Perhaps I did something wrong there, but anyway, the old Java calendar worked, so I stuck with it (also, we are moving away from Joda, so relying more on it didn't seem right).", "author": "aalbu", "createdAt": "2020-07-24T13:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5OTY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA3MDIyNg==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r460070226", "bodyText": "By quick google search I do not see a good approach which does not involve Joda (even if that one works, which is not obvious).", "author": "losipiuk", "createdAt": "2020-07-24T13:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5OTY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0MzIxNg==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r460243216", "bodyText": "We are not moving away from Joda-Time everywhere. java.time is preferable if it works, but is too expensive to use for many of the time related functions, due to the object creation overhead. (at least, this is how it appears ... it is possible that benchmarks could prove this wrong)", "author": "electrum", "createdAt": "2020-07-24T19:19:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5OTY1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NTA4MQ==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r460245081", "bodyText": "This seems fairly expensive. Can we only do this for dates in the affected range, and simply use LocalDate otherwise?", "author": "electrum", "createdAt": "2020-07-24T19:23:45Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -257,7 +259,11 @@ private Date getDate(int columnIndex, DateTimeZone localTimeZone)\n         }\n \n         try {\n-            return new Date(DATE_FORMATTER.withZone(localTimeZone).parseMillis(String.valueOf(value)));\n+            LocalDate localDate = DATE_FORMATTER.parseLocalDate(String.valueOf(value));\n+            GregorianCalendar calendar = new GregorianCalendar(localDate.getYear(), localDate.getMonthOfYear() - 1, localDate.getDayOfMonth());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI3MTE0OQ==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r460271149", "bodyText": "I thought about it, because I had heard complaints about performance, though I have never benchmarked myself or seen a real benchmark.  But it's easy enough to make this conditional.", "author": "aalbu", "createdAt": "2020-07-24T20:24:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NTA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0MjEyOQ==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r460442129", "bodyText": "By a rule of thumb, we  should stay away from Calendar unless benchmarks provide assurance it's OK to use it.\n(of course, this applies to \"reasonable dates\", I am fine with using Calendar for historical dates if needed)", "author": "findepi", "createdAt": "2020-07-25T20:11:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NTA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYxODQ2NQ==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r460618465", "bodyText": "I ran a simple micro benchmark and the approach using GregorianCalendar appears indeed to be much slower than Joda.", "author": "aalbu", "createdAt": "2020-07-27T02:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NTA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwMzk3Ng==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r460703976", "bodyText": "I ran a simple micro benchmark a\n\nIs it in a shape that we could add to the project?\nUsing an in memory result set we should be able to\nabstract the network\u00a0communication part.", "author": "findepi", "createdAt": "2020-07-27T07:43:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NTA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NjUxMw==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r461276513", "bodyText": "It was just a simple JMH benchmark exercising the 2 code snippets.", "author": "aalbu", "createdAt": "2020-07-28T02:16:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NTA4MQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNTU0NQ==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r460705545", "bodyText": "What do you mean by \"the default\" here?\nThe cutoff date defaults to 1582-10-15, but you are not using a constant.\nInstead youre asking for locale/env specific date. Maybe\n// The date when the Gregorian calendar was instituted, environment specific. Defaults to October 15, 1582.\n\n?", "author": "findepi", "createdAt": "2020-07-27T07:46:58Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -116,6 +119,9 @@\n             .toFormatter()\n             .withOffsetParsed();\n \n+    // the default date when the Gregorian calendar was instituted (October 15, 1582)\n+    private static final long GREGORIAN_CALENDAR_INTRODUCTION = new GregorianCalendar().getGregorianChange().getTime();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI2Njg0OQ==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r461266849", "bodyText": "It is a constant.  The actual change happened on different dates, in different countries, but GregorianCalendar doesn't have information for specific locales.  Instead, it provides a method the client can call to specify the cutover date (setGregorianChange()).  So unless that method is called, getGregorianChange() will always return the same value.\nAnyway, after adding some more tests, it turns out that Joda millisecond values are not consistent with java.sql.Date even for more recent dates (as late as the 1800's), so I decided to use Joda only starting with the 20th century.", "author": "aalbu", "createdAt": "2020-07-28T01:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNTU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0NTI2NQ==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r461345265", "bodyText": "Anyway, after adding some more tests, it turns out that Joda millisecond values are not consistent with java.sql.Date even for more recent dates (as late as the 1800's), so I decided to use Joda only starting with the 20th century.\n\nI forgot about that, but indeed. I think i remember finding a zone where java time and java.util.Calendar differed > 1900 (but before 1950).\njava time and java.util.Calendar use the same tz data file, but they seem to parse it differently.\n... I can only find as recent as 1890s in multiple zones (eg Europe/Warsaw or Asia/Aden), so maybe my memory is wrong. Using 1900 seems to be safe.\njava time and joda seem to behave the same as long as they have the same tz data. But tz data shouldn't change for the past date/times.\nThis is some variation of the test code i am using: https://github.com/findepi/urandom-bits/blob/master/src/main/java/findepi/time/JodaJdkZoneDrift.java", "author": "findepi", "createdAt": "2020-07-28T06:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNTU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU3MDgwNQ==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r461570805", "bodyText": "Nice, that's good info.", "author": "aalbu", "createdAt": "2020-07-28T13:17:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNTU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNzA1Mw==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r460707053", "bodyText": "it is \"appropriate\" in some way. I think it would be better to indicate the actual problem\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // the chronology used by default by Joda is not appropriate for dates preceding the introduction of the Gregorian calendar,\n          \n          \n            \n                        // The chronology used by Joda is not consistent with java.sql.Date\n          \n          \n            \n                         for dates preceding the introduction of the Gregorian calendar.\n          \n          \n            \n                        // Same millisecond value represents a different year/month/day.", "author": "findepi", "createdAt": "2020-07-27T07:49:47Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -257,7 +263,18 @@ private Date getDate(int columnIndex, DateTimeZone localTimeZone)\n         }\n \n         try {\n-            return new Date(DATE_FORMATTER.withZone(localTimeZone).parseMillis(String.valueOf(value)));\n+            long millis = DATE_FORMATTER.withZone(localTimeZone).parseMillis(String.valueOf(value));\n+            if (millis >= GREGORIAN_CALENDAR_INTRODUCTION) {\n+                return new Date(millis);\n+            }\n+            // the chronology used by default by Joda is not appropriate for dates preceding the introduction of the Gregorian calendar,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NTkxNA==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r461275914", "bodyText": "The documentation says:\n\nit is not historically accurate before 1583", "author": "aalbu", "createdAt": "2020-07-28T02:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNzA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0NTQ1NA==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r461345454", "bodyText": "I like the \"historically accurate\" term", "author": "findepi", "createdAt": "2020-07-28T06:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNzA1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0NTU3Nw==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r461345577", "bodyText": "of course it's not historically accurate for >1583 for some (many) countries as well", "author": "findepi", "createdAt": "2020-07-28T06:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNzA1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNzUzOA==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r460707538", "bodyText": "What are the end user visible symptoms of these differences? are they test covered?", "author": "findepi", "createdAt": "2020-07-27T07:50:45Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -257,7 +263,18 @@ private Date getDate(int columnIndex, DateTimeZone localTimeZone)\n         }\n \n         try {\n-            return new Date(DATE_FORMATTER.withZone(localTimeZone).parseMillis(String.valueOf(value)));\n+            long millis = DATE_FORMATTER.withZone(localTimeZone).parseMillis(String.valueOf(value));\n+            if (millis >= GREGORIAN_CALENDAR_INTRODUCTION) {\n+                return new Date(millis);\n+            }\n+            // the chronology used by default by Joda is not appropriate for dates preceding the introduction of the Gregorian calendar,\n+            // so for such cases we are falling back to the more expensive GregorianCalendar; note that Joda also has a chronology that\n+            // works for older dates, but it uses a slightly different algorithm, so we are sticking with the standard library", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3NjM4NQ==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r461276385", "bodyText": "The assertions I have added for dates before the introduction of the Gregorian calendar were failing using Joda's chronology.", "author": "aalbu", "createdAt": "2020-07-28T02:15:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNzUzOA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0NjU0MA==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r461346540", "bodyText": "Let's keep the optimistic path as simple as possible.\nPreviously it was\nreturn new Date(DATE_FORMATTER.withZone(localTimeZone).parseMillis(String.valueOf(value)));\n\nnow it can be\nlong millis = DATE_FORMATTER.withZone(localTimeZone).parseMillis(String.valueOf(value));\nif (millis >= MODERN_YEAR_MILLIS) {\n    return new Date(millis);\n}", "author": "findepi", "createdAt": "2020-07-28T06:26:42Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -257,7 +260,19 @@ private Date getDate(int columnIndex, DateTimeZone localTimeZone)\n         }\n \n         try {\n-            return new Date(DATE_FORMATTER.withZone(localTimeZone).parseMillis(String.valueOf(value)));\n+            LocalDate localDate = DATE_FORMATTER.parseLocalDate(String.valueOf(value));\n+            if (modernDate(localDate.getYear())) {\n+                long millis = localDate.toDateTimeAtStartOfDay(localTimeZone).getMillis();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0ODAyNA==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r461348024", "bodyText": "Introduce constants\n// Before that year, Java Time and Joda Time are not consistent with java.sql.Date and java.util.Calendar\n// Since January 1, 1900 in one zone is still December 31, 1899 in some other zone, we are adding 1 year margin.\nMODERN_YEAR = 1901\n\nMODERN_YEAR_MILLIS_UTC = LocalDate.of(MODERN_YEAR,1,1)...........\n\nThen you can inline modernDate", "author": "findepi", "createdAt": "2020-07-28T06:30:26Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -1788,11 +1803,25 @@ private static Timestamp parseTimestamp(String value, Function<String, ZoneId> t\n                 .atZone(zoneId)\n                 .toEpochSecond();\n \n-        Timestamp timestamp = new Timestamp(epochSecond * 1000);\n+        Timestamp timestamp;\n+        if (modernDate(year)) {\n+            timestamp = new Timestamp(epochSecond * 1000);\n+        }\n+        else {\n+            GregorianCalendar calendar = new GregorianCalendar(year, month - 1, day, hour, minute, second);\n+            calendar.setTimeZone(TimeZone.getTimeZone(zoneId));\n+            timestamp = new Timestamp(calendar.getTimeInMillis());\n+        }\n         timestamp.setNanos((int) rescale(fractionValue, precision, 9));\n         return timestamp;\n     }\n \n+    private static boolean modernDate(int year)\n+    {\n+        // before this year, the chronology used by Joda is not consistent with java.sql.Date\n+        return year >= 1900;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4MzMwOA==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r461983308", "bodyText": "This is a bit long, which makes it hard to read. Since we have multiple lines of text, wrapping at ~100 would look better and be easier to read.", "author": "electrum", "createdAt": "2020-07-29T01:23:20Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -257,7 +266,20 @@ private Date getDate(int columnIndex, DateTimeZone localTimeZone)\n         }\n \n         try {\n-            return new Date(DATE_FORMATTER.withZone(localTimeZone).parseMillis(String.valueOf(value)));\n+            long millis = DATE_FORMATTER.withZone(localTimeZone).parseMillis(String.valueOf(value));\n+            if (millis >= START_OF_MODERN_ERA) {\n+                return new Date(millis);\n+            }\n+\n+            // The chronology used by default by Joda is not historically accurate for dates preceding the introduction of the Gregorian calendar", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4MzgzNg==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r461983836", "bodyText": "No need for this constant, since it's only used in the constant below. It would actually be easier to read the below if it is simply said 1901, 1, 1 as then it's easy to compare with the comment above.", "author": "electrum", "createdAt": "2020-07-29T01:25:19Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -116,6 +120,11 @@\n             .toFormatter()\n             .withOffsetParsed();\n \n+    // Before 1900, Java Time and Joda Time are not consistent with java.sql.Date and java.util.Calendar\n+    // Since January 1, 1900 UTC is still December 31, 1899 in other zones, we are adding a 1 year margin.\n+    private static final int MODERN_ERA_YEAR = 1901;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4NDI0MQ==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r461984241", "bodyText": "This can be declared Calendar since we don't use any methods specific to GregorianCalendar.", "author": "electrum", "createdAt": "2020-07-29T01:26:47Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -257,7 +266,20 @@ private Date getDate(int columnIndex, DateTimeZone localTimeZone)\n         }\n \n         try {\n-            return new Date(DATE_FORMATTER.withZone(localTimeZone).parseMillis(String.valueOf(value)));\n+            long millis = DATE_FORMATTER.withZone(localTimeZone).parseMillis(String.valueOf(value));\n+            if (millis >= START_OF_MODERN_ERA) {\n+                return new Date(millis);\n+            }\n+\n+            // The chronology used by default by Joda is not historically accurate for dates preceding the introduction of the Gregorian calendar\n+            // and is not consistent with java.sql.Date (the same millisecond value represents a different year/month/day) before the 20th century.\n+            // For such dates we are falling back to using the more expensive GregorianCalendar; note that Joda also has a chronology that works for\n+            // older dates, but it uses a slightly different algorithm and still yields results that are not compatible with java.sql.Date.\n+            LocalDate localDate = DATE_FORMATTER.parseLocalDate(String.valueOf(value));\n+            GregorianCalendar calendar = new GregorianCalendar(localDate.getYear(), localDate.getMonthOfYear() - 1, localDate.getDayOfMonth());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4NDYzNQ==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r461984635", "bodyText": "Do this as\nlong epochMillis = SECONDS.toMillis(epochSecond);\nThen we avoid the constant and only do the calculation once.", "author": "electrum", "createdAt": "2020-07-29T01:28:15Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractPrestoResultSet.java", "diffHunk": "@@ -1788,7 +1810,16 @@ private static Timestamp parseTimestamp(String value, Function<String, ZoneId> t\n                 .atZone(zoneId)\n                 .toEpochSecond();\n \n-        Timestamp timestamp = new Timestamp(epochSecond * 1000);\n+        Timestamp timestamp;\n+        if (epochSecond * 1000 >= START_OF_MODERN_ERA) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4NTU1NQ==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r461985555", "bodyText": "I realize the others do this, but it'd be better to factor this out\nTimestamp expected = Timestamp.valueOf(LocalDateTime.of(1, 1, 1, 0, 0, 0);\nThat way it's clear to the reader that these are the same value.", "author": "electrum", "createdAt": "2020-07-29T01:31:41Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcResultSet.java", "diffHunk": "@@ -193,6 +225,45 @@ public void testObjectTypes()\n             assertEquals(rs.getTimestamp(column), Timestamp.valueOf(LocalDateTime.of(2018, 2, 13, 13, 14, 15, 555_555_556)));\n         });\n \n+        // distant past, but apparently not an uncommon value in practice\n+        checkRepresentation(\"TIMESTAMP '0001-01-01 00:00:00'\", Types.TIMESTAMP, (rs, column) -> {\n+            assertEquals(rs.getObject(column), Timestamp.valueOf(LocalDateTime.of(1, 1, 1, 0, 0, 0)));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NTM1OQ==", "url": "https://github.com/trinodb/trino/pull/4563#discussion_r462165359", "bodyText": "Others do it to avoid sharing a mutable objected as the expected state.", "author": "findepi", "createdAt": "2020-07-29T09:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4NTU1NQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "70c3998252beec5e39ba4bd91a30c3fc37fcbcc0", "url": "https://github.com/trinodb/trino/commit/70c3998252beec5e39ba4bd91a30c3fc37fcbcc0", "message": "Fix handling of dates and timestamps before the 20th century", "committedDate": "2020-07-30T02:08:18Z", "type": "commit"}, {"oid": "70c3998252beec5e39ba4bd91a30c3fc37fcbcc0", "url": "https://github.com/trinodb/trino/commit/70c3998252beec5e39ba4bd91a30c3fc37fcbcc0", "message": "Fix handling of dates and timestamps before the 20th century", "committedDate": "2020-07-30T02:08:18Z", "type": "forcePushed"}]}