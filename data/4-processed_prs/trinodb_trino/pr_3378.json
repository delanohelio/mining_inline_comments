{"pr_number": 3378, "pr_title": "Add column-pruning rules for ExchangeNode", "pr_createdAt": "2020-04-07T21:23:56Z", "pr_url": "https://github.com/trinodb/trino/pull/3378", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NDQxNQ==", "url": "https://github.com/trinodb/trino/pull/3378#discussion_r406964415", "bodyText": "No need to copy the lists here. It's up to ExchangeNode to do a defensive copy if it cares about it.", "author": "martint", "createdAt": "2020-04-10T22:11:18Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/PruneExchangeColumns.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.sql.planner.PartitioningScheme;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.plan.ExchangeNode;\n+import io.prestosql.sql.planner.plan.PlanNode;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static io.prestosql.sql.planner.plan.Patterns.exchange;\n+\n+/**\n+ * This rule restricts the outputs of ExchangeNode based on which\n+ * ExchangeNode's output symbols are either referenced by the\n+ * parent node or used for partitioning, ordering or as a hash\n+ * symbol by the ExchangeNode.\n+ * <p>\n+ * For each symbol removed from the output symbols list, the corresponding\n+ * input symbols are removed from ExchangeNode's inputs lists.\n+ * <p>\n+ * Transforms:\n+ * <pre>\n+ * - Project (o1)\n+ *      - Exchange:\n+ *        outputs [o1, o2, o3, h]\n+ *        partitioning by (o2)\n+ *        hash h\n+ *        inputs [[a1, a2, a3, h1], [b1, b2, b3, h2]]\n+ *          - source [a1, a2, a3, h1]\n+ *          - source [b1, b2, b3, h2]\n+ * </pre>\n+ * Into:\n+ * <pre>\n+ * - Project (o1)\n+ *      - Exchange:\n+ *        outputs [o1, o2, h]\n+ *        partitioning by (o2)\n+ *        hash h\n+ *        inputs [[a1, a2, h1], [b1, b2, h2]]\n+ *          - source [a1, a2, a3, h1]\n+ *          - source [b1, b2, b3, h2]\n+ * </pre>\n+ */\n+public class PruneExchangeColumns\n+        extends ProjectOffPushDownRule<ExchangeNode>\n+{\n+    public PruneExchangeColumns()\n+    {\n+        super(exchange());\n+    }\n+\n+    @Override\n+    protected Optional<PlanNode> pushDownProjectOff(Context context, ExchangeNode exchangeNode, Set<Symbol> referencedOutputs)\n+    {\n+        // Extract output symbols referenced by parent node or used for partitioning, ordering or as a hash symbol of the Exchange\n+        ImmutableSet.Builder<Symbol> builder = ImmutableSet.builder();\n+        builder.addAll(referencedOutputs);\n+        builder.addAll(exchangeNode.getPartitioningScheme().getPartitioning().getColumns());\n+        exchangeNode.getPartitioningScheme().getHashColumn().ifPresent(builder::add);\n+        exchangeNode.getOrderingScheme().ifPresent(orderingScheme -> builder.addAll(orderingScheme.getOrderBy()));\n+        Set<Symbol> outputsToRetain = builder.build();\n+\n+        if (outputsToRetain.size() == exchangeNode.getOutputSymbols().size()) {\n+            return Optional.empty();\n+        }\n+\n+        ImmutableList.Builder<Symbol> newOutputs = ImmutableList.builder();\n+        List<List<Symbol>> newInputs = new ArrayList<>(exchangeNode.getInputs().size());\n+        for (int i = 0; i < exchangeNode.getInputs().size(); i++) {\n+            newInputs.add(new ArrayList<>());\n+        }\n+\n+        // Retain used symbols from output list and corresponding symbols from all input lists\n+        for (int i = 0; i < exchangeNode.getOutputSymbols().size(); i++) {\n+            Symbol output = exchangeNode.getOutputSymbols().get(i);\n+            if (outputsToRetain.contains(output)) {\n+                newOutputs.add(output);\n+                for (int source = 0; source < exchangeNode.getInputs().size(); source++) {\n+                    newInputs.get(source).add(exchangeNode.getInputs().get(source).get(i));\n+                }\n+            }\n+        }\n+\n+        // newOutputs contains all partition, sort and hash symbols so simply swap the output layout\n+        PartitioningScheme newPartitioningScheme = new PartitioningScheme(\n+                exchangeNode.getPartitioningScheme().getPartitioning(),\n+                newOutputs.build(),\n+                exchangeNode.getPartitioningScheme().getHashColumn(),\n+                exchangeNode.getPartitioningScheme().isReplicateNullsAndAny(),\n+                exchangeNode.getPartitioningScheme().getBucketToPartition());\n+\n+        return Optional.of(new ExchangeNode(\n+                exchangeNode.getId(),\n+                exchangeNode.getType(),\n+                exchangeNode.getScope(),\n+                newPartitioningScheme,\n+                exchangeNode.getSources(),\n+                newInputs.stream().map(ImmutableList::copyOf).collect(toImmutableList()),", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "521955c027238328d59d03b48fac291f77998ca8", "url": "https://github.com/trinodb/trino/commit/521955c027238328d59d03b48fac291f77998ca8", "message": "Add column-pruning rule for ExchangeNode", "committedDate": "2020-04-14T15:49:16Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "9680b119152d14204835bea8c94abeac4ed570f0", "url": "https://github.com/trinodb/trino/commit/9680b119152d14204835bea8c94abeac4ed570f0", "message": "Add project-off rule for ExchangeNode", "committedDate": "2020-04-14T17:01:16Z", "type": "commit"}, {"oid": "9680b119152d14204835bea8c94abeac4ed570f0", "url": "https://github.com/trinodb/trino/commit/9680b119152d14204835bea8c94abeac4ed570f0", "message": "Add project-off rule for ExchangeNode", "committedDate": "2020-04-14T17:01:16Z", "type": "forcePushed"}]}