{"pr_number": 2405, "pr_title": "Use testcontainers for Mysql Connector tests", "pr_createdAt": "2020-01-04T19:26:40Z", "pr_url": "https://github.com/trinodb/trino/pull/2405", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTc5Mg==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363061792", "bodyText": "@electrum are we going to archive this project now?", "author": "findepi", "createdAt": "2020-01-05T00:12:56Z", "path": "presto-mysql/pom.xml", "diffHunk": "@@ -141,14 +141,8 @@\n         </dependency>\n \n         <dependency>\n-            <groupId>io.airlift</groupId>\n-            <artifactId>testing-mysql-server</artifactId>", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3MzgzNQ==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363073835", "bodyText": "We still have other usages in Presto, but long term, I think it makes sense to archive it, as we would no longer be maintaining it.", "author": "electrum", "createdAt": "2020-01-05T07:09:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEwMTk2Mg==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363101962", "bodyText": "I know. One more, i believe. (#2410 is related)", "author": "findepi", "createdAt": "2020-01-05T16:03:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTgyMg==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363061822", "bodyText": "since server is provided in arg, you shouldn't close it.\n(we were doing things like this because we're calling this in ctor code, where we couldn't try-with-resources)", "author": "findepi", "createdAt": "2020-01-05T00:14:26Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/MySqlQueryRunner.java", "diffHunk": "@@ -46,42 +45,38 @@ public static QueryRunner createMySqlQueryRunner(TestingMySqlServer server, Map<\n             throws Exception\n     {\n         try {\n-            return createMySqlQueryRunner(server.getJdbcUrl(), connectorProperties, tables);\n-        }\n-        catch (Throwable e) {\n-            closeAllSuppress(e, server);\n-            throw e;\n-        }\n-    }\n+            DistributedQueryRunner queryRunner = null;\n+            try {\n+                queryRunner = new DistributedQueryRunner(createSession(), 3);\n \n-    public static QueryRunner createMySqlQueryRunner(String jdbcUrl, Map<String, String> connectorProperties, Iterable<TpchTable<?>> tables)\n-            throws Exception\n-    {\n-        DistributedQueryRunner queryRunner = null;\n-        try {\n-            queryRunner = new DistributedQueryRunner(createSession(), 3);\n+                queryRunner.installPlugin(new TpchPlugin());\n+                queryRunner.createCatalog(\"tpch\", \"tpch\");\n \n-            queryRunner.installPlugin(new TpchPlugin());\n-            queryRunner.createCatalog(\"tpch\", \"tpch\");\n+                connectorProperties = new HashMap<>(ImmutableMap.copyOf(connectorProperties));\n+                connectorProperties.putIfAbsent(\"connection-url\", server.getJdbcUrl());\n+                connectorProperties.putIfAbsent(\"allow-drop-table\", \"true\");\n+                connectorProperties.putIfAbsent(\"connection-user\", server.getUser());\n+                connectorProperties.putIfAbsent(\"connection-password\", server.getPassword());\n \n-            connectorProperties = new HashMap<>(ImmutableMap.copyOf(connectorProperties));\n-            connectorProperties.putIfAbsent(\"connection-url\", jdbcUrl);\n-            connectorProperties.putIfAbsent(\"allow-drop-table\", \"true\");\n+                queryRunner.installPlugin(new MySqlPlugin());\n+                queryRunner.createCatalog(\"mysql\", \"mysql\", connectorProperties);\n \n-            queryRunner.installPlugin(new MySqlPlugin());\n-            queryRunner.createCatalog(\"mysql\", \"mysql\", connectorProperties);\n+                copyTpchTables(queryRunner, \"tpch\", TINY_SCHEMA_NAME, createSession(), tables);\n \n-            copyTpchTables(queryRunner, \"tpch\", TINY_SCHEMA_NAME, createSession(), tables);\n-\n-            return queryRunner;\n+                return queryRunner;\n+            }\n+            catch (Throwable e) {\n+                closeAllSuppress(e, queryRunner);\n+                throw e;\n+            }\n         }\n         catch (Throwable e) {\n-            closeAllSuppress(e, queryRunner);\n+            closeAllSuppress(e, server);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTgzNQ==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363061835", "bodyText": "move the init before try (the catch clause is pointless as long as queryRunner is null)", "author": "findepi", "createdAt": "2020-01-05T00:15:12Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/MySqlQueryRunner.java", "diffHunk": "@@ -46,42 +45,38 @@ public static QueryRunner createMySqlQueryRunner(TestingMySqlServer server, Map<\n             throws Exception\n     {\n         try {\n-            return createMySqlQueryRunner(server.getJdbcUrl(), connectorProperties, tables);\n-        }\n-        catch (Throwable e) {\n-            closeAllSuppress(e, server);\n-            throw e;\n-        }\n-    }\n+            DistributedQueryRunner queryRunner = null;\n+            try {\n+                queryRunner = new DistributedQueryRunner(createSession(), 3);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTg3NA==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363061874", "bodyText": "this belongs to BeforeClass, should not be in test ctor", "author": "findepi", "createdAt": "2020-01-05T00:15:53Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestCredentialPassThrough.java", "diffHunk": "@@ -25,36 +24,34 @@\n \n import static io.airlift.testing.Closeables.closeAllSuppress;\n import static io.prestosql.testing.TestingSession.testSessionBuilder;\n-import static java.lang.String.format;\n \n-public class TestCredentialPassthrough\n+public class TestCredentialPassThrough\n {\n-    private static final String TEST_SCHEMA = \"test_database\";\n     private final TestingMySqlServer mysqlServer;\n     private final QueryRunner mySqlQueryRunner;\n \n-    public TestCredentialPassthrough()\n+    public TestCredentialPassThrough()\n             throws Exception\n     {\n-        mysqlServer = new TestingMySqlServer(\"testuser\", \"testpass\", TEST_SCHEMA);\n+        mysqlServer = new TestingMySqlServer();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTg3OQ==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363061879", "bodyText": "i think we treat \"passthrough\" as a single word, so lowercase t", "author": "findepi", "createdAt": "2020-01-05T00:16:15Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestCredentialPassThrough.java", "diffHunk": "@@ -25,36 +24,34 @@\n \n import static io.airlift.testing.Closeables.closeAllSuppress;\n import static io.prestosql.testing.TestingSession.testSessionBuilder;\n-import static java.lang.String.format;\n \n-public class TestCredentialPassthrough\n+public class TestCredentialPassThrough\n {\n-    private static final String TEST_SCHEMA = \"test_database\";\n     private final TestingMySqlServer mysqlServer;\n     private final QueryRunner mySqlQueryRunner;\n \n-    public TestCredentialPassthrough()\n+    public TestCredentialPassThrough()\n             throws Exception\n     {\n-        mysqlServer = new TestingMySqlServer(\"testuser\", \"testpass\", TEST_SCHEMA);\n+        mysqlServer = new TestingMySqlServer();\n         mySqlQueryRunner = createQueryRunner(mysqlServer);\n     }\n \n     @Test\n-    public void testCredentialPassthrough()\n+    public void testCredentialPassThrough()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTkyNQ==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363061925", "bodyText": "same in class name", "author": "findepi", "createdAt": "2020-01-05T00:17:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NTA2Nw==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363075067", "bodyText": "Agreed, plus if we were to change it, that should be a separate commit.", "author": "electrum", "createdAt": "2020-01-05T07:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2MTg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2Mzc3Ng==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363063776", "bodyText": "The original MySQL version was 8.0.12.\nhttps://github.com/airlift/testing-mysql-server/blob/master/repack-mysql.sh#L5\nCan we use the same version or mention it in the commit description?", "author": "ebyhr", "createdAt": "2020-01-05T01:23:14Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestingMySqlServer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import org.testcontainers.containers.MySQLContainer;\n+\n+import java.io.Closeable;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+import static java.lang.String.format;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+public class TestingMySqlServer\n+        implements Closeable\n+{\n+    private final MySQLContainer<?> dockerContainer;\n+\n+    public TestingMySqlServer()\n+    {\n+        this.dockerContainer = new MySQLContainer<>(\"mysql:8.0.15\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NDgwMQ==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363074801", "bodyText": "Let's write this like the PostgreSQL one:\ndockerContainer = new MySQLContainer<>(\"mysql:8.0.15\")\n        .withDatabaseName(\"tpch\");\ndockerContainer.start();", "author": "electrum", "createdAt": "2020-01-05T07:34:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA2Mzc3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NDcxNA==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363074714", "bodyText": "Let's leave the execute method, at least for now, as it makes the diff easier to read.", "author": "electrum", "createdAt": "2020-01-05T07:32:09Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlIntegrationSmokeTest.java", "diffHunk": "@@ -94,28 +85,25 @@ public void testDropTable()\n \n     @Test\n     public void testViews()\n-            throws SQLException\n     {\n-        execute(\"CREATE OR REPLACE VIEW tpch.test_view AS SELECT * FROM tpch.orders\");\n+        mysqlServer.execute(\"CREATE OR REPLACE VIEW tpch.test_view AS SELECT * FROM tpch.orders\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NDc2Ng==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363074766", "bodyText": "We should close the container here if this throws.", "author": "electrum", "createdAt": "2020-01-05T07:33:23Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestingMySqlServer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import org.testcontainers.containers.MySQLContainer;\n+\n+import java.io.Closeable;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+import static java.lang.String.format;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+public class TestingMySqlServer\n+        implements Closeable\n+{\n+    private final MySQLContainer<?> dockerContainer;\n+\n+    public TestingMySqlServer()\n+    {\n+        this.dockerContainer = new MySQLContainer<>(\"mysql:8.0.15\");\n+        dockerContainer.withDatabaseName(\"tpch\");\n+        dockerContainer.start();\n+        execute(format(\"GRANT ALL PRIVILEGES ON *.* TO '%s'\", dockerContainer.getUsername()), \"root\", dockerContainer.getPassword());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3Nzk2MQ==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363077961", "bodyText": "It looks like this isn't necessary anymore, since this is the root MySQL user, which already has all privileges. It is needed with TestingMySqlServer as that is creating a user-provided non-root user.\nAs a demonstration, I did a simpler conversion of session property managers here: #2408", "author": "electrum", "createdAt": "2020-01-05T08:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NDc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc1NDA0Mg==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363754042", "bodyText": "It is needed so user can create or drop schema. Notice that org.testcontainers.containers.MySQLContainer#getUsername do not return root user. Alternatively I could use root user in tests.", "author": "kokosing", "createdAt": "2020-01-07T13:46:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NDc2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NDg0MA==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363074840", "bodyText": "Use getJdbcUrl() from MySQLContainer which already adds these options", "author": "electrum", "createdAt": "2020-01-05T07:35:57Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestingMySqlServer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import org.testcontainers.containers.MySQLContainer;\n+\n+import java.io.Closeable;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+import static java.lang.String.format;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+public class TestingMySqlServer\n+        implements Closeable\n+{\n+    private final MySQLContainer<?> dockerContainer;\n+\n+    public TestingMySqlServer()\n+    {\n+        this.dockerContainer = new MySQLContainer<>(\"mysql:8.0.15\");\n+        dockerContainer.withDatabaseName(\"tpch\");\n+        dockerContainer.start();\n+        execute(format(\"GRANT ALL PRIVILEGES ON *.* TO '%s'\", dockerContainer.getUsername()), \"root\", dockerContainer.getPassword());\n+    }\n+\n+    public String getJdbcUrl()\n+    {\n+        return format(\"jdbc:mysql://%s:%s?useSSL=false&allowPublicKeyRetrieval=true\", dockerContainer.getContainerIpAddress(), dockerContainer.getMappedPort(MYSQL_PORT));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA4NDgwNQ==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363084805", "bodyText": "I misread the code. This is done in the protected method constructUrlForConnection().", "author": "electrum", "createdAt": "2020-01-05T10:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NDg0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NDkxMQ==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363074911", "bodyText": "Why not\nDriverManager.getConnection(jdbc, user, password);", "author": "electrum", "createdAt": "2020-01-05T07:37:06Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestingMySqlServer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import org.testcontainers.containers.MySQLContainer;\n+\n+import java.io.Closeable;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+import static java.lang.String.format;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+public class TestingMySqlServer\n+        implements Closeable\n+{\n+    private final MySQLContainer<?> dockerContainer;\n+\n+    public TestingMySqlServer()\n+    {\n+        this.dockerContainer = new MySQLContainer<>(\"mysql:8.0.15\");\n+        dockerContainer.withDatabaseName(\"tpch\");\n+        dockerContainer.start();\n+        execute(format(\"GRANT ALL PRIVILEGES ON *.* TO '%s'\", dockerContainer.getUsername()), \"root\", dockerContainer.getPassword());\n+    }\n+\n+    public String getJdbcUrl()\n+    {\n+        return format(\"jdbc:mysql://%s:%s?useSSL=false&allowPublicKeyRetrieval=true\", dockerContainer.getContainerIpAddress(), dockerContainer.getMappedPort(MYSQL_PORT));\n+    }\n+\n+    public String getUser()\n+    {\n+        return dockerContainer.getUsername();\n+    }\n+\n+    public String getPassword()\n+    {\n+        return dockerContainer.getPassword();\n+    }\n+\n+    public String getDatabase()\n+    {\n+        return dockerContainer.getDatabaseName();\n+    }\n+\n+    public void execute(String sql)\n+    {\n+        execute(sql, getUser(), getPassword());\n+    }\n+\n+    private void execute(String sql, String user, String password)\n+    {\n+        String jdbc = getJdbcUrl();\n+\n+        Properties properties = new Properties();\n+        properties.setProperty(\"user\", user);\n+        properties.setProperty(\"password\", password);\n+\n+        try (Connection connection = DriverManager.getConnection(jdbc, properties);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NDk4OA==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363074988", "bodyText": "I'd prefer to avoid wrapping here. It's very common for test methods to throw checked exceptions.", "author": "electrum", "createdAt": "2020-01-05T07:39:11Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestingMySqlServer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import org.testcontainers.containers.MySQLContainer;\n+\n+import java.io.Closeable;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+\n+import static java.lang.String.format;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+public class TestingMySqlServer\n+        implements Closeable\n+{\n+    private final MySQLContainer<?> dockerContainer;\n+\n+    public TestingMySqlServer()\n+    {\n+        this.dockerContainer = new MySQLContainer<>(\"mysql:8.0.15\");\n+        dockerContainer.withDatabaseName(\"tpch\");\n+        dockerContainer.start();\n+        execute(format(\"GRANT ALL PRIVILEGES ON *.* TO '%s'\", dockerContainer.getUsername()), \"root\", dockerContainer.getPassword());\n+    }\n+\n+    public String getJdbcUrl()\n+    {\n+        return format(\"jdbc:mysql://%s:%s?useSSL=false&allowPublicKeyRetrieval=true\", dockerContainer.getContainerIpAddress(), dockerContainer.getMappedPort(MYSQL_PORT));\n+    }\n+\n+    public String getUser()\n+    {\n+        return dockerContainer.getUsername();\n+    }\n+\n+    public String getPassword()\n+    {\n+        return dockerContainer.getPassword();\n+    }\n+\n+    public String getDatabase()\n+    {\n+        return dockerContainer.getDatabaseName();\n+    }\n+\n+    public void execute(String sql)\n+    {\n+        execute(sql, getUser(), getPassword());\n+    }\n+\n+    private void execute(String sql, String user, String password)\n+    {\n+        String jdbc = getJdbcUrl();\n+\n+        Properties properties = new Properties();\n+        properties.setProperty(\"user\", user);\n+        properties.setProperty(\"password\", password);\n+\n+        try (Connection connection = DriverManager.getConnection(jdbc, properties);\n+                Statement statement = connection.createStatement()) {\n+            statement.execute(sql);\n+        }\n+        catch (SQLException e) {\n+            throw new RuntimeException(e);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA3NTAwMg==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r363075002", "bodyText": "Same comment as TestMySqlIntegrationSmokeTest. Let's keep the execute method for now.", "author": "electrum", "createdAt": "2020-01-05T07:39:50Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlCaseInsensitiveMapping.java", "diffHunk": "@@ -100,7 +74,7 @@ public void testNonLowerCaseTableName()\n         try (AutoCloseable ignore1 = withSchema(\"SomeSchema\");\n                 AutoCloseable ignore2 = withTable(\n                         \"SomeSchema.NonLowerCaseTable\", \"(lower_case_name varchar(10), Mixed_Case_Name varchar(10), UPPER_CASE_NAME varchar(10))\")) {\n-            execute(\"INSERT INTO SomeSchema.NonLowerCaseTable VALUES ('a', 'b', 'c')\");\n+            mySqlServer.execute(\"INSERT INTO SomeSchema.NonLowerCaseTable VALUES ('a', 'b', 'c')\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ1OTg3Ng==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r364459876", "bodyText": "Are we missing a dependency on the testcontainers artifact?", "author": "electrum", "createdAt": "2020-01-08T21:48:37Z", "path": "presto-mysql/pom.xml", "diffHunk": "@@ -141,14 +141,8 @@\n         </dependency>\n \n         <dependency>\n-            <groupId>io.airlift</groupId>\n-            <artifactId>testing-mysql-server</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-\n-        <dependency>", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3NTg0Nw==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r364575847", "bodyText": "Is this needed? Maven didn't complain. Notice that I am using org.testcontainers:mysql, it looks to be enough. I don't use anything else from testcontainers other than mysql container.", "author": "kokosing", "createdAt": "2020-01-09T06:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ1OTg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU5NjQyMQ==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r364596421", "bodyText": "If we extend the class instead of just using it, it requires testcontainers artifact.\nThe current CI failure:\n[WARNING] Used undeclared dependencies found:\n[WARNING]    org.testcontainers:testcontainers:jar:1.12.4:test", "author": "ebyhr", "createdAt": "2020-01-09T07:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ1OTg3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2MDAwNA==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r364460004", "bodyText": "Let's move this so all of the connection- properties are together", "author": "electrum", "createdAt": "2020-01-08T21:48:58Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/MySqlQueryRunner.java", "diffHunk": "@@ -45,28 +44,16 @@ public static QueryRunner createMySqlQueryRunner(TestingMySqlServer server, Tpch\n     public static QueryRunner createMySqlQueryRunner(TestingMySqlServer server, Map<String, String> connectorProperties, Iterable<TpchTable<?>> tables)\n             throws Exception\n     {\n+        DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(createSession()).build();\n         try {\n-            return createMySqlQueryRunner(server.getJdbcUrl(), connectorProperties, tables);\n-        }\n-        catch (Throwable e) {\n-            closeAllSuppress(e, server);\n-            throw e;\n-        }\n-    }\n-\n-    public static QueryRunner createMySqlQueryRunner(String jdbcUrl, Map<String, String> connectorProperties, Iterable<TpchTable<?>> tables)\n-            throws Exception\n-    {\n-        DistributedQueryRunner queryRunner = null;\n-        try {\n-            queryRunner = DistributedQueryRunner.builder(createSession()).build();\n-\n             queryRunner.installPlugin(new TpchPlugin());\n             queryRunner.createCatalog(\"tpch\", \"tpch\");\n \n             connectorProperties = new HashMap<>(ImmutableMap.copyOf(connectorProperties));\n-            connectorProperties.putIfAbsent(\"connection-url\", jdbcUrl);\n+            connectorProperties.putIfAbsent(\"connection-url\", server.getJdbcUrl());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2MDIxMw==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r364460213", "bodyText": "This can be inlined", "author": "electrum", "createdAt": "2020-01-08T21:49:31Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlIntegrationSmokeTest.java", "diffHunk": "@@ -227,10 +219,11 @@ protected boolean canDropSchema()\n \n     @Override\n     protected void cleanUpSchemas(List<String> schemaNames)\n-            throws SQLException\n+            throws Exception\n     {\n         for (String schemaName : schemaNames) {\n-            execute(\"DROP SCHEMA \" + schemaName);\n+            String sql = \"DROP SCHEMA \" + schemaName;\n+            execute(sql);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2MDMwNw==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r364460307", "bodyText": "Why change this? Exception is good for @Test method but I'd prefer if helper methods throw the correct exception type.", "author": "electrum", "createdAt": "2020-01-08T21:49:44Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlIntegrationSmokeTest.java", "diffHunk": "@@ -248,11 +241,8 @@ public void testColumnComment()\n     }\n \n     private void execute(String sql)\n-            throws SQLException\n+            throws Exception", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2MDM4OA==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r364460388", "bodyText": "See comment for execute", "author": "electrum", "createdAt": "2020-01-08T21:49:57Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlIntegrationSmokeTest.java", "diffHunk": "@@ -227,10 +219,11 @@ protected boolean canDropSchema()\n \n     @Override\n     protected void cleanUpSchemas(List<String> schemaNames)\n-            throws SQLException\n+            throws Exception", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ2MDkyMQ==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r364460921", "bodyText": "Consider making this extend MySQLContainer like I did in 79b5d4f. That avoids needing all of the pass-through methods.", "author": "electrum", "createdAt": "2020-01-08T21:51:23Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestingMySqlServer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import org.testcontainers.containers.MySQLContainer;\n+\n+import java.io.Closeable;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import static java.lang.String.format;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+public class TestingMySqlServer", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "30097a466cee573c17d7af45f9c17daa03abe011", "url": "https://github.com/trinodb/trino/commit/30097a466cee573c17d7af45f9c17daa03abe011", "message": "Do not leak resources in TestCredentialPassthrough", "committedDate": "2020-01-09T06:25:33Z", "type": "commit"}, {"oid": "d0bfae942c6ebb1e6bbd9cf479b86ed83b9b04fd", "url": "https://github.com/trinodb/trino/commit/d0bfae942c6ebb1e6bbd9cf479b86ed83b9b04fd", "message": "Generalize exception thrown in tests", "committedDate": "2020-01-09T06:25:33Z", "type": "commit"}, {"oid": "09942314b00915e6e9685e3eb0176121e26940c6", "url": "https://github.com/trinodb/trino/commit/09942314b00915e6e9685e3eb0176121e26940c6", "message": "Remove extra annotations", "committedDate": "2020-01-09T06:25:33Z", "type": "commit"}, {"oid": "14130b0babd785a4cbb90cebf15eda948aa44af1", "url": "https://github.com/trinodb/trino/commit/14130b0babd785a4cbb90cebf15eda948aa44af1", "message": "Do not swallow exception when closing TestTable", "committedDate": "2020-01-09T06:25:33Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU3OTc0NA==", "url": "https://github.com/trinodb/trino/pull/2405#discussion_r364579744", "bodyText": "@electrum WRT: I am going to not declare exception here. It propagates to all other places. The entire smelly commit 2d70587 was because of this.\nWhen I applied https://github.com/prestosql/presto/pull/2405/files#r364460921, then start method has to handle this exception anyway which was ugly.", "author": "kokosing", "createdAt": "2020-01-09T06:45:47Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestingMySqlServer.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.mysql;\n+\n+import org.testcontainers.containers.MySQLContainer;\n+\n+import java.io.Closeable;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import static java.lang.String.format;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+public class TestingMySqlServer\n+        implements Closeable\n+{\n+    private final MySQLContainer<?> dockerContainer;\n+\n+    public TestingMySqlServer()\n+            throws Exception\n+    {\n+        this.dockerContainer = new MySQLContainer<>(\"mysql:8.0.12\")\n+                .withDatabaseName(\"tpch\");\n+        dockerContainer.start();\n+        execute(format(\"GRANT ALL PRIVILEGES ON *.* TO '%s'\", dockerContainer.getUsername()), \"root\", dockerContainer.getPassword());\n+    }\n+\n+    public String getJdbcUrl()\n+    {\n+        return format(\"jdbc:mysql://%s:%s?useSSL=false&allowPublicKeyRetrieval=true\", dockerContainer.getContainerIpAddress(), dockerContainer.getMappedPort(MYSQL_PORT));\n+    }\n+\n+    public String getUser()\n+    {\n+        return dockerContainer.getUsername();\n+    }\n+\n+    public String getPassword()\n+    {\n+        return dockerContainer.getPassword();\n+    }\n+\n+    public String getDatabase()\n+    {\n+        return dockerContainer.getDatabaseName();\n+    }\n+\n+    public void execute(String sql)\n+            throws SQLException\n+    {\n+        execute(sql, getUser(), getPassword());\n+    }\n+\n+    public void execute(String sql, String user, String password)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "09d86bb0c11e6094946b8c12d0884ddd9bfa2017", "url": "https://github.com/trinodb/trino/commit/09d86bb0c11e6094946b8c12d0884ddd9bfa2017", "message": "Use testcontainers for Mysql Connector tests\n\nAdditionally:\n- fixed scope of method\n- do not allocate resources in test constructors\n- move execute method to TestingMySqlServer\n- use user and password explicitly", "committedDate": "2020-01-09T10:39:55Z", "type": "commit"}, {"oid": "09d86bb0c11e6094946b8c12d0884ddd9bfa2017", "url": "https://github.com/trinodb/trino/commit/09d86bb0c11e6094946b8c12d0884ddd9bfa2017", "message": "Use testcontainers for Mysql Connector tests\n\nAdditionally:\n- fixed scope of method\n- do not allocate resources in test constructors\n- move execute method to TestingMySqlServer\n- use user and password explicitly", "committedDate": "2020-01-09T10:39:55Z", "type": "forcePushed"}]}