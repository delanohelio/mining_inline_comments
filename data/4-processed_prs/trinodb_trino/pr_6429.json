{"pr_number": 6429, "pr_title": "Random cleanups", "pr_createdAt": "2020-12-23T13:56:58Z", "pr_url": "https://github.com/trinodb/trino/pull/6429", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4MTQyOQ==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r547981429", "bodyText": "Can this config be refreshed? I vaguely remember some topology providers have refresh. If so, this doesn't look thread-safe.", "author": "hashhar", "createdAt": "2020-12-23T14:21:09Z", "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SubnetTopologyConfig.java", "diffHunk": "@@ -35,11 +35,10 @@\n     @Config(\"node-scheduler.network-topology.subnet.cidr-prefix-lengths\")\n     public SubnetTopologyConfig setCidrPrefixLengths(String commaSeparatedLengths)\n     {\n-        List<Integer> lengths = Splitter.on(',').omitEmptyStrings().splitToList(commaSeparatedLengths).stream()\n+\n+        this.cidrPrefixLengths = Splitter.on(',').omitEmptyStrings().splitToList(commaSeparatedLengths).stream()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1NDQ1NQ==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r548854455", "bodyText": "Can this config be refreshed?\n\nIDK. Yet this change does make any difference regarding thread-safety. Can you please elaborate if you think I am missing something here?", "author": "losipiuk", "createdAt": "2020-12-25T10:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4MTQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTk3Mg==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549615972", "bodyText": "Nevermind, there can never be two concurrent updates since we cannot have multiple refresh policies at a time.", "author": "hashhar", "createdAt": "2020-12-29T08:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4MTQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4Mzk1Mg==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r547983952", "bodyText": "Not equivalent. Will not allow null elements.", "author": "hashhar", "createdAt": "2020-12-23T14:26:31Z", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -218,9 +218,9 @@ private Object getLegacyValue(Object value, Type type)\n                 return value;\n             }\n \n-            return unmodifiableList(((List<Object>) value).stream()\n+            return ((List<Object>) value).stream()\n                     .map(element -> getLegacyValue(element, elementType))\n-                    .collect(toList()));\n+                    .collect(toUnmodifiableList());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MzgwOQ==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r548853809", "bodyText": "Good catch. Reverted.", "author": "losipiuk", "createdAt": "2020-12-25T10:43:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4Mzk1Mg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1OTI3Mg==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549159272", "bodyText": "This is part of Drop unneeded semicolon commit", "author": "findepi", "createdAt": "2020-12-27T20:14:34Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcVendorCompatibility.java", "diffHunk": "@@ -452,7 +452,7 @@ void tearDown()\n     private static class OracleReferenceDriver\n             implements ReferenceDriver\n     {\n-        private OracleContainer oracleServer;\n+        private final OracleContainer oracleServer;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1OTI3NA==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549159274", "bodyText": "This is part of Drop unneeded semicolon commit", "author": "findepi", "createdAt": "2020-12-27T20:14:37Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcVendorCompatibility.java", "diffHunk": "@@ -537,7 +537,7 @@ public String toString()\n     private static class PostgresqlReferenceDriver\n             implements ReferenceDriver\n     {\n-        private PostgreSQLContainer<?> postgresqlContainer;\n+        private final PostgreSQLContainer<?> postgresqlContainer;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1OTU1OA==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549159558", "bodyText": "This is indeed redundant, but it seems we do this by convention pretty much for most of enums, i guess", "author": "findepi", "createdAt": "2020-12-27T20:17:21Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/IndexJoinNode.java", "diffHunk": "@@ -65,7 +65,7 @@ public IndexJoinNode(\n \n         private final String joinLabel;\n \n-        private Type(String joinLabel)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyMTc0Mw==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549621743", "bodyText": "I would drop this. And drop others as we go. Note that in this PR I only looked at presto-main. There is a chance I will go over the others from time to time as a relaxation execrcise.", "author": "losipiuk", "createdAt": "2020-12-29T08:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1OTU1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1OTY3OQ==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549159679", "bodyText": ".distinct() is redundant (and would go on separate line, if retained)\n(if you want to keep it, please explain why)", "author": "findepi", "createdAt": "2020-12-27T20:18:47Z", "path": "presto-main/src/main/java/io/prestosql/execution/scheduler/SqlQueryScheduler.java", "diffHunk": "@@ -649,9 +649,9 @@ public void abort()\n     private static ListenableFuture<?> whenAllStages(Collection<SqlStageExecution> stages, Predicate<StageState> predicate)\n     {\n         checkArgument(!stages.isEmpty(), \"stages is empty\");\n-        Set<StageId> stageIds = newConcurrentHashSet(stages.stream()\n-                .map(SqlStageExecution::getStageId)\n-                .collect(toSet()));\n+        Set<StageId> stageIds = stages.stream()\n+                .map(SqlStageExecution::getStageId).distinct()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxOTYzNg==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549619636", "bodyText": "not needed indeed.", "author": "losipiuk", "createdAt": "2020-12-29T08:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1OTY3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE2MDMyOQ==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549160329", "bodyText": "Would https://errorprone.info/bugpattern/StaticQualifiedUsingExpression catch this?", "author": "findepi", "createdAt": "2020-12-27T20:26:04Z", "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestPruneAggregationColumns.java", "diffHunk": "@@ -74,7 +74,7 @@ private ProjectNode buildProjectedAggregation(PlanBuilder planBuilder, Predicate\n                 planBuilder.aggregation(aggregationBuilder -> aggregationBuilder\n                         .source(planBuilder.values(key))\n                         .singleGroupingSet(key)\n-                        .addAggregation(a, planBuilder.expression(\"count()\"), ImmutableList.of())\n-                        .addAggregation(b, planBuilder.expression(\"count()\"), ImmutableList.of())));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxODk5Mg==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549618992", "bodyText": "Yep", "author": "losipiuk", "createdAt": "2020-12-29T08:41:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE2MDMyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYyNDI0Mw==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549624243", "bodyText": "I added this check to set.", "author": "losipiuk", "createdAt": "2020-12-29T08:59:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE2MDMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE2MDM3OQ==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549160379", "bodyText": "do we typically static-import these?\n(the Access PlanBuilder.expressions in static manner commit adds static import in some cases and qualified call in some other places, intentional?)", "author": "findepi", "createdAt": "2020-12-27T20:26:28Z", "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestPruneAggregationColumns.java", "diffHunk": "@@ -74,7 +74,7 @@ private ProjectNode buildProjectedAggregation(PlanBuilder planBuilder, Predicate\n                 planBuilder.aggregation(aggregationBuilder -> aggregationBuilder\n                         .source(planBuilder.values(key))\n                         .singleGroupingSet(key)\n-                        .addAggregation(a, planBuilder.expression(\"count()\"), ImmutableList.of())\n-                        .addAggregation(b, planBuilder.expression(\"count()\"), ImmutableList.of())));\n+                        .addAggregation(a, PlanBuilder.expression(\"count()\"), ImmutableList.of())\n+                        .addAggregation(b, PlanBuilder.expression(\"count()\"), ImmutableList.of())));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxMDQwOQ==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549610409", "bodyText": "I added static import when possible. In some cases it conflicted with ExpressionMatcher expression. Maybe this is the reason to not static import at all?", "author": "losipiuk", "createdAt": "2020-12-29T08:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE2MDM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxMjg0MQ==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549612841", "bodyText": "Good question. this is \"whatever\" for now for me, we can talk about this sepearete from this PR", "author": "findepi", "createdAt": "2020-12-29T08:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE2MDM3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE2MDU0MA==", "url": "https://github.com/trinodb/trino/pull/6429#discussion_r549160540", "bodyText": "Remove unneeded casts\n\n\"Remove redundant casts\" ?", "author": "findepi", "createdAt": "2020-12-27T20:28:18Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timetz/TimeWithTimeZoneToVarcharCast.java", "diffHunk": "@@ -61,10 +61,10 @@ public static Slice cast(@LiteralParameter(\"p\") long precision, @SqlType(\"time(p\n     // Can't name this format() because we can't have a qualified reference to String.format() below\n     private static Slice formatAsString(int precision, long picos, int offsetMinutes)\n     {\n-        int size = (int) (8 + // hour:minute:second\n+        int size = 8 + // hour:minute:second", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "6281c956de79f7584ad0425476ac8be35bb6c1b2", "url": "https://github.com/trinodb/trino/commit/6281c956de79f7584ad0425476ac8be35bb6c1b2", "message": "Replace negated isPresent with isEmpty", "committedDate": "2021-01-08T09:31:04Z", "type": "commit"}, {"oid": "5cdc2b4d43f799fcee8a56bd2988530f3b3c1eba", "url": "https://github.com/trinodb/trino/commit/5cdc2b4d43f799fcee8a56bd2988530f3b3c1eba", "message": "Drop unneeded semicolon", "committedDate": "2021-01-08T09:31:05Z", "type": "commit"}, {"oid": "a96dc91bc49246572330d7be273f7cf1153e0f1a", "url": "https://github.com/trinodb/trino/commit/a96dc91bc49246572330d7be273f7cf1153e0f1a", "message": "Use method reference", "committedDate": "2021-01-08T09:31:05Z", "type": "commit"}, {"oid": "3a279ca29d83b792136dc4c9e78adceccaf05d59", "url": "https://github.com/trinodb/trino/commit/3a279ca29d83b792136dc4c9e78adceccaf05d59", "message": "Make fields final", "committedDate": "2021-01-08T09:31:05Z", "type": "commit"}, {"oid": "7d9eead03c278f7cb5711e9f134af0051109f0ab", "url": "https://github.com/trinodb/trino/commit/7d9eead03c278f7cb5711e9f134af0051109f0ab", "message": "Remove unneeded field", "committedDate": "2021-01-08T09:31:05Z", "type": "commit"}, {"oid": "df7acf69debba57a62fd27d63f01690815b86bdf", "url": "https://github.com/trinodb/trino/commit/df7acf69debba57a62fd27d63f01690815b86bdf", "message": "Drop unneeded modifier", "committedDate": "2021-01-08T09:31:05Z", "type": "commit"}, {"oid": "4aa23c5fb8a4ff473b4b6b95e2a5f41fcc956f1f", "url": "https://github.com/trinodb/trino/commit/4aa23c5fb8a4ff473b4b6b95e2a5f41fcc956f1f", "message": "Use UTF_8 constant", "committedDate": "2021-01-08T09:31:05Z", "type": "commit"}, {"oid": "6ba9eae7b6cbb533b9f212099846dc127cd09ea5", "url": "https://github.com/trinodb/trino/commit/6ba9eae7b6cbb533b9f212099846dc127cd09ea5", "message": "Simplify building collection out of stream", "committedDate": "2021-01-08T09:31:05Z", "type": "commit"}, {"oid": "5747f1f776781fd1c04251e59c58b1f39ae6334e", "url": "https://github.com/trinodb/trino/commit/5747f1f776781fd1c04251e59c58b1f39ae6334e", "message": "Simplify assertion", "committedDate": "2021-01-08T09:31:05Z", "type": "commit"}, {"oid": "49d0481a6481bf7c9da196df318f6319af574e3b", "url": "https://github.com/trinodb/trino/commit/49d0481a6481bf7c9da196df318f6319af574e3b", "message": "Inline redundant variable", "committedDate": "2021-01-08T09:31:05Z", "type": "commit"}, {"oid": "69825ce9bcfe44f5313f8e5692366d802f675db6", "url": "https://github.com/trinodb/trino/commit/69825ce9bcfe44f5313f8e5692366d802f675db6", "message": "Access method in static manner", "committedDate": "2021-01-08T09:49:18Z", "type": "commit"}, {"oid": "745c553f29a033f1f420ca8e19153751e9185eec", "url": "https://github.com/trinodb/trino/commit/745c553f29a033f1f420ca8e19153751e9185eec", "message": "Enable StaticQualifiedUsingExpression error check", "committedDate": "2021-01-08T09:49:18Z", "type": "commit"}, {"oid": "ff9dada43df9c078d6f930440169c8258b4c8151", "url": "https://github.com/trinodb/trino/commit/ff9dada43df9c078d6f930440169c8258b4c8151", "message": "Remove redundant casts", "committedDate": "2021-01-08T09:49:18Z", "type": "commit"}, {"oid": "ff9dada43df9c078d6f930440169c8258b4c8151", "url": "https://github.com/trinodb/trino/commit/ff9dada43df9c078d6f930440169c8258b4c8151", "message": "Remove redundant casts", "committedDate": "2021-01-08T09:49:18Z", "type": "forcePushed"}]}