{"pr_number": 4396, "pr_title": "Add SQL syntax for GRANT/REVOKE on schema", "pr_createdAt": "2020-07-09T08:03:22Z", "pr_url": "https://github.com/trinodb/trino/pull/4396", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0ODEyNg==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r452048126", "bodyText": "io.prestosql.metadata.Metadata#schemaExists?", "author": "kokosing", "createdAt": "2020-07-09T08:23:20Z", "path": "presto-main/src/main/java/io/prestosql/execution/GrantTask.java", "diffHunk": "@@ -49,13 +54,50 @@ public String getName()\n     @Override\n     public ListenableFuture<?> execute(Grant statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n     {\n-        Session session = stateMachine.getSession();\n-        QualifiedObjectName tableName = createQualifiedObjectName(session, statement, statement.getTableName());\n+        if (statement.getType().filter(GrantOnType.SCHEMA::equals).isPresent()) {\n+            executeGrantOnSchema(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        else {\n+            executeGrantOnTable(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        return immediateFuture(null);\n+    }\n+\n+    private void executeGrantOnSchema(Session session, Grant statement, Metadata metadata, AccessControl accessControl)\n+    {\n+        CatalogSchemaName schemaName = createCatalogSchemaName(session, statement, Optional.of(statement.getName()));\n+        Optional<CatalogName> catalogHandle = metadata.getCatalogHandle(session, schemaName.getCatalogName());\n+        if (catalogHandle.isEmpty()) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0ODUzMw==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r452048533", "bodyText": "io.prestosql.metadata.Metadata#schemaExists?", "author": "kokosing", "createdAt": "2020-07-09T08:23:59Z", "path": "presto-main/src/main/java/io/prestosql/execution/RevokeTask.java", "diffHunk": "@@ -49,13 +54,49 @@ public String getName()\n     @Override\n     public ListenableFuture<?> execute(Revoke statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n     {\n-        Session session = stateMachine.getSession();\n-        QualifiedObjectName tableName = createQualifiedObjectName(session, statement, statement.getTableName());\n+        if (statement.getType().filter(GrantOnType.SCHEMA::equals).isPresent()) {\n+            executeRevokeOnSchema(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        else {\n+            executeRevokeOnTable(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        return immediateFuture(null);\n+    }\n+\n+    private void executeRevokeOnSchema(Session session, Revoke statement, Metadata metadata, AccessControl accessControl)\n+    {\n+        CatalogSchemaName schemaName = createCatalogSchemaName(session, statement, Optional.of(statement.getName()));\n+        Optional<CatalogName> catalogHandle = metadata.getCatalogHandle(session, schemaName.getCatalogName());\n+        if (catalogHandle.isEmpty()) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5MjA4Mw==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456292083", "bodyText": "ping", "author": "kokosing", "createdAt": "2020-07-17T08:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0ODUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0OTY1Mg==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r452049652", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ON (SCHEMA | TABLE)? qualifiedName TO grantee=principal\n          \n          \n            \n                    ON (SCHEMA | TABLE)? qualifiedName \n          \n          \n            \n                    TO grantee=principal", "author": "kokosing", "createdAt": "2020-07-09T08:25:48Z", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -87,12 +87,12 @@ statement\n     | SET ROLE (ALL | NONE | role=identifier)                          #setRole\n     | GRANT\n         (privilege (',' privilege)* | ALL PRIVILEGES)\n-        ON TABLE? qualifiedName TO grantee=principal\n+        ON (SCHEMA | TABLE)? qualifiedName TO grantee=principal", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0OTc1NA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r452049754", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ON (SCHEMA | TABLE)? qualifiedName FROM grantee=principal      #revoke\n          \n          \n            \n                    ON (SCHEMA | TABLE)? qualifiedName \n          \n          \n            \n                    FROM grantee=principal      #revoke", "author": "kokosing", "createdAt": "2020-07-09T08:25:59Z", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -87,12 +87,12 @@ statement\n     | SET ROLE (ALL | NONE | role=identifier)                          #setRole\n     | GRANT\n         (privilege (',' privilege)* | ALL PRIVILEGES)\n-        ON TABLE? qualifiedName TO grantee=principal\n+        ON (SCHEMA | TABLE)? qualifiedName TO grantee=principal\n         (WITH GRANT OPTION)?                                           #grant\n     | REVOKE\n         (GRANT OPTION FOR)?\n         (privilege (',' privilege)* | ALL PRIVILEGES)\n-        ON TABLE? qualifiedName FROM grantee=principal                 #revoke\n+        ON (SCHEMA | TABLE)? qualifiedName FROM grantee=principal      #revoke", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1MDMzMg==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r452050332", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                SCHEMA,\n          \n          \n            \n                TABLE\n          \n          \n            \n                SCHEMA,\n          \n          \n            \n                TABLE,\n          \n          \n            \n                /**/;", "author": "kokosing", "createdAt": "2020-07-09T08:26:58Z", "path": "presto-parser/src/main/java/io/prestosql/sql/tree/GrantOnType.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.tree;\n+\n+public enum GrantOnType\n+{\n+    SCHEMA,\n+    TABLE", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1MTUwOQ==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r452051509", "bodyText": "separate commit, you are changing not related test. As I understand this test case with present TABLE keyword in GRANT statement was missing, right?", "author": "kokosing", "createdAt": "2020-07-09T08:28:54Z", "path": "presto-parser/src/test/java/io/prestosql/sql/parser/TestSqlParser.java", "diffHunk": "@@ -1623,30 +1624,38 @@ public void testGrant()\n         assertStatement(\"GRANT INSERT, DELETE ON t TO u\",\n                 new Grant(\n                         Optional.of(ImmutableList.of(\"INSERT\", \"DELETE\")),\n-                        false,\n+                        Optional.empty(),\n                         QualifiedName.of(\"t\"),\n                         new PrincipalSpecification(PrincipalSpecification.Type.UNSPECIFIED, new Identifier(\"u\")),\n                         false));\n         assertStatement(\"GRANT SELECT ON t TO ROLE PUBLIC WITH GRANT OPTION\",\n                 new Grant(\n                         Optional.of(ImmutableList.of(\"SELECT\")),\n-                        false, QualifiedName.of(\"t\"),\n+                        Optional.empty(),\n+                        QualifiedName.of(\"t\"),\n                         new PrincipalSpecification(PrincipalSpecification.Type.ROLE, new Identifier(\"PUBLIC\")),\n                         true));\n-        assertStatement(\"GRANT ALL PRIVILEGES ON t TO USER u\",\n+        assertStatement(\"GRANT ALL PRIVILEGES ON TABLE t TO USER u\",", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyNTIzOA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r452125238", "bodyText": "Correct", "author": "lukasz-walkiewicz", "createdAt": "2020-07-09T10:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1MTUwOQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYxMDA2OA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r455610068", "bodyText": "don't append   when node.getType().isEmpty(), same for grant", "author": "kokosing", "createdAt": "2020-07-16T08:20:49Z", "path": "presto-parser/src/main/java/io/prestosql/sql/SqlFormatter.java", "diffHunk": "@@ -1366,10 +1367,11 @@ public Void visitRevoke(Revoke node, Integer indent)\n             }\n \n             builder.append(\" ON \");\n-            if (node.isTable()) {\n-                builder.append(\"TABLE \");\n+            if (node.getType().isPresent()) {\n+                builder.append(node.getType().get().toString());\n             }\n-            builder.append(node.getTableName())\n+            builder.append(\" \");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5MjgzMg==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456292832", "bodyText": "I think this should accept a Set<Privilege> like Metadata::grant*. No change request, just for consideration for follow up because we would need to change check for tables as well.", "author": "kokosing", "createdAt": "2020-07-17T08:19:01Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/security/LegacyAccessControl.java", "diffHunk": "@@ -247,6 +247,16 @@ public void checkCanSetCatalogSessionProperty(ConnectorSecurityContext context,\n     {\n     }\n \n+    @Override\n+    public void checkCanGrantSchemaPrivilege(ConnectorSecurityContext context, Privilege privilege, String schemaName, PrestoPrincipal grantee, boolean grantOption)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5Mzc5Mg==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456293792", "bodyText": "MockConnectorAccessControl? So it could be generic for other use cases?", "author": "kokosing", "createdAt": "2020-07-17T08:20:54Z", "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorSchemaAccessControl.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector;\n+\n+import io.prestosql.plugin.base.security.AllowAllAccessControl;\n+import io.prestosql.spi.connector.ConnectorSecurityContext;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static io.prestosql.spi.security.AccessDeniedException.denyGrantSchemaPrivilege;\n+import static io.prestosql.spi.security.AccessDeniedException.denyRevokeSchemaPrivilege;\n+import static java.util.Objects.requireNonNull;\n+\n+class MockConnectorSchemaAccessControl", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5Mzk2MA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456293960", "bodyText": "Make it optional. If it is empty let it work as allow all.", "author": "kokosing", "createdAt": "2020-07-17T08:21:11Z", "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorSchemaAccessControl.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector;\n+\n+import io.prestosql.plugin.base.security.AllowAllAccessControl;\n+import io.prestosql.spi.connector.ConnectorSecurityContext;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static io.prestosql.spi.security.AccessDeniedException.denyGrantSchemaPrivilege;\n+import static io.prestosql.spi.security.AccessDeniedException.denyRevokeSchemaPrivilege;\n+import static java.util.Objects.requireNonNull;\n+\n+class MockConnectorSchemaAccessControl\n+        extends AllowAllAccessControl\n+{\n+    private static final String INFORMATION_SCHEMA = \"information_schema\";\n+\n+    private final SchemaGrants schemaGrants;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NDIzOA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456294238", "bodyText": "public?", "author": "kokosing", "createdAt": "2020-07-17T08:21:39Z", "path": "presto-main/src/test/java/io/prestosql/connector/SchemaGrants.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector;\n+\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static java.util.Objects.requireNonNull;\n+\n+class SchemaGrants", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NDMwMw==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456294303", "bodyText": "just use Set. What am I missing?", "author": "kokosing", "createdAt": "2020-07-17T08:21:46Z", "path": "presto-main/src/test/java/io/prestosql/connector/SchemaGrants.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector;\n+\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static java.util.Objects.requireNonNull;\n+\n+class SchemaGrants\n+{\n+    private final Map<SchemaGrant, SchemaGrant> grants = new HashMap<>(); // Using map to be able to manipulate an element on insert", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgyMTMzMA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456821330", "bodyText": "Set doesn't have a method to get an existing entry. I've left a comment.", "author": "lukasz-walkiewicz", "createdAt": "2020-07-18T19:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NDMwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1NDY3OA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456954678", "bodyText": "This is very misleading then. And also it looks like you had to hack hashCode/equals methods.\nHow about having a real map? Map<String /* schema */, Grant> or Map<UserAndSchema, Grant>?", "author": "kokosing", "createdAt": "2020-07-19T20:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NDMwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NTY2NA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456295664", "bodyText": "isGrantable or canGrant", "author": "kokosing", "createdAt": "2020-07-17T08:24:16Z", "path": "presto-main/src/test/java/io/prestosql/connector/SchemaGrants.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector;\n+\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static java.util.Objects.requireNonNull;\n+\n+class SchemaGrants\n+{\n+    private final Map<SchemaGrant, SchemaGrant> grants = new HashMap<>(); // Using map to be able to manipulate an element on insert\n+\n+    void grant(PrestoPrincipal principal, String schemaName, Set<Privilege> privileges, boolean grantOption)\n+    {\n+        privileges.forEach(privilege -> {\n+            SchemaGrant grant = new SchemaGrant(principal, schemaName, privilege, grantOption);\n+            // OR on grant options if grant already exists\n+            if (grants.containsKey(grant)) {\n+                grant = new SchemaGrant(principal, schemaName, privilege, grantOption || grants.get(grant).grantOption);\n+            }\n+            grants.put(grant, grant);\n+        });\n+    }\n+\n+    void revoke(PrestoPrincipal principal, String schemaName, Set<Privilege> privileges, boolean grantOption)\n+    {\n+        privileges.forEach(privilege -> grants.remove(new SchemaGrant(principal, schemaName, privilege, grantOption)));\n+    }\n+\n+    boolean isAllowed(String user, String schemaName, Privilege privilege)\n+    {\n+        if (grants.isEmpty()) {\n+            return true;\n+        }\n+        return grants.containsKey(new SchemaGrant(new PrestoPrincipal(USER, user), schemaName, privilege));\n+    }\n+\n+    boolean isAllowedWithGrant(String user, String schemaName, Privilege privilege)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5NzQxNA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456297414", "bodyText": "Can you please add on top of this few tests for GRANT/REVOKE table privileges?", "author": "kokosing", "createdAt": "2020-07-17T08:27:14Z", "path": "presto-main/src/test/java/io/prestosql/connector/MockConnector.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5ODg3MQ==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456298871", "bodyText": "\u2764\ufe0f It looks very nice!", "author": "kokosing", "createdAt": "2020-07-17T08:29:52Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestGrant", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5OTE2NA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456299164", "bodyText": "you don't init method to setup admin and other sessions", "author": "kokosing", "createdAt": "2020-07-17T08:30:19Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestGrant\n+{\n+    private Session admin;\n+    private Session alice;\n+    private Session bob;\n+    private DistributedQueryRunner queryRunner;\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+            throws Exception\n+    {\n+        admin = testSessionBuilder()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5OTQ0MQ==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456299441", "bodyText": "assertThat assertThat?", "author": "kokosing", "createdAt": "2020-07-17T08:30:53Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestGrant\n+{\n+    private Session admin;\n+    private Session alice;\n+    private Session bob;\n+    private DistributedQueryRunner queryRunner;\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+            throws Exception\n+    {\n+        admin = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"admin\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        alice = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"alice\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        bob = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"bob\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        queryRunner = DistributedQueryRunner.builder(admin).build();\n+\n+        MockConnectorFactory connectorFactory = MockConnectorFactory.builder()\n+                .withListSchemaNames(session -> ImmutableList.of(\"information_schema\", \"default\"))\n+                .withSchemaGrants(\"admin\", \"default\", EnumSet.allOf(Privilege.class), true)\n+                .withSchemaGrants(\"alice\", \"default\", ImmutableSet.of(Privilege.SELECT), true)\n+                .build();\n+\n+        queryRunner.installPlugin(new MockConnectorPlugin(connectorFactory));\n+\n+        queryRunner.createCatalog(\"local\", \"mock\");\n+\n+        assertions = new QueryAssertions(queryRunner);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testDefaultGrants()\n+    {\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", admin).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", alice).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", bob).assertThat().matches(\"VALUES (VARCHAR 'information_schema')\"));\n+    }\n+\n+    @Test\n+    public void testGrantOnSchema()\n+    {\n+        queryRunner.execute(admin, \"GRANT SELECT ON SCHEMA default TO bob\");\n+\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", bob).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5OTU0NQ==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456299545", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", bob).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));\n          \n          \n            \n                    assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", bob).assertThat()\n          \n          \n            \n                         .matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));", "author": "kokosing", "createdAt": "2020-07-17T08:31:03Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestGrant\n+{\n+    private Session admin;\n+    private Session alice;\n+    private Session bob;\n+    private DistributedQueryRunner queryRunner;\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+            throws Exception\n+    {\n+        admin = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"admin\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        alice = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"alice\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        bob = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"bob\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        queryRunner = DistributedQueryRunner.builder(admin).build();\n+\n+        MockConnectorFactory connectorFactory = MockConnectorFactory.builder()\n+                .withListSchemaNames(session -> ImmutableList.of(\"information_schema\", \"default\"))\n+                .withSchemaGrants(\"admin\", \"default\", EnumSet.allOf(Privilege.class), true)\n+                .withSchemaGrants(\"alice\", \"default\", ImmutableSet.of(Privilege.SELECT), true)\n+                .build();\n+\n+        queryRunner.installPlugin(new MockConnectorPlugin(connectorFactory));\n+\n+        queryRunner.createCatalog(\"local\", \"mock\");\n+\n+        assertions = new QueryAssertions(queryRunner);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testDefaultGrants()\n+    {\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", admin).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", alice).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", bob).assertThat().matches(\"VALUES (VARCHAR 'information_schema')\"));\n+    }\n+\n+    @Test\n+    public void testGrantOnSchema()\n+    {\n+        queryRunner.execute(admin, \"GRANT SELECT ON SCHEMA default TO bob\");\n+\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", bob).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5OTc1NA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r456299754", "bodyText": "Add tests for:\nGRANT/REVOKE ALL\nGRANT/REVOKE GRANT OPTION", "author": "kokosing", "createdAt": "2020-07-17T08:31:24Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestGrant\n+{\n+    private Session admin;\n+    private Session alice;\n+    private Session bob;\n+    private DistributedQueryRunner queryRunner;\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+            throws Exception\n+    {\n+        admin = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"admin\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        alice = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"alice\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        bob = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(\"bob\"))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+\n+        queryRunner = DistributedQueryRunner.builder(admin).build();\n+\n+        MockConnectorFactory connectorFactory = MockConnectorFactory.builder()\n+                .withListSchemaNames(session -> ImmutableList.of(\"information_schema\", \"default\"))\n+                .withSchemaGrants(\"admin\", \"default\", EnumSet.allOf(Privilege.class), true)\n+                .withSchemaGrants(\"alice\", \"default\", ImmutableSet.of(Privilege.SELECT), true)\n+                .build();\n+\n+        queryRunner.installPlugin(new MockConnectorPlugin(connectorFactory));\n+\n+        queryRunner.createCatalog(\"local\", \"mock\");\n+\n+        assertions = new QueryAssertions(queryRunner);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testDefaultGrants()\n+    {\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", admin).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", alice).assertThat().matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\"));\n+        assertThat(assertions.query(\"SHOW SCHEMAS FROM local\", bob).assertThat().matches(\"VALUES (VARCHAR 'information_schema')\"));\n+    }\n+\n+    @Test\n+    public void testGrantOnSchema()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NTA2Ng==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480985066", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ON ( table_name | TABLE table_name | SCHEMA schema_name) TO ( user | USER user | ROLE role )\n          \n          \n            \n                ON ( table_name | TABLE table_name | SCHEMA schema_name) \n          \n          \n            \n                TO ( user | USER user | ROLE role )", "author": "kokosing", "createdAt": "2020-09-01T09:03:25Z", "path": "presto-docs/src/main/sphinx/sql/grant.rst", "diffHunk": "@@ -8,7 +8,7 @@ Synopsis\n .. code-block:: none\n \n     GRANT ( privilege [, ...] | ( ALL PRIVILEGES ) )\n-    ON [ TABLE ] table_name TO ( user | USER user | ROLE role )\n+    ON ( table_name | TABLE table_name | SCHEMA schema_name) TO ( user | USER user | ROLE role )", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NTczNQ==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480985735", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ON ( table_name | TABLE table_name | SCHEMA schema_name ) FROM ( user | USER user | ROLE role )\n          \n          \n            \n                ON ( table_name | TABLE table_name | SCHEMA schema_name ) \n          \n          \n            \n                FROM ( user | USER user | ROLE role )", "author": "kokosing", "createdAt": "2020-09-01T09:04:29Z", "path": "presto-docs/src/main/sphinx/sql/revoke.rst", "diffHunk": "@@ -9,7 +9,7 @@ Synopsis\n \n     REVOKE [ GRANT OPTION FOR ]\n     ( privilege [, ...] | ALL PRIVILEGES )\n-    ON [ TABLE ] table_name FROM ( user | USER user | ROLE role )\n+    ON ( table_name | TABLE table_name | SCHEMA schema_name ) FROM ( user | USER user | ROLE role )", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NjExNQ==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480986115", "bodyText": "Mention the semantic of grant privileges to table (in separate commit) and then for schema", "author": "kokosing", "createdAt": "2020-09-01T09:05:05Z", "path": "presto-docs/src/main/sphinx/sql/grant.rst", "diffHunk": "@@ -8,7 +8,7 @@ Synopsis\n .. code-block:: none\n \n     GRANT ( privilege [, ...] | ( ALL PRIVILEGES ) )\n-    ON [ TABLE ] table_name TO ( user | USER user | ROLE role )\n+    ON ( table_name | TABLE table_name | SCHEMA schema_name) TO ( user | USER user | ROLE role )\n     [ WITH GRANT OPTION ]\n \n Description", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NjE4MA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480986180", "bodyText": "Mention the semantic of revoke privileges to table (in separate commit) and then for schema", "author": "kokosing", "createdAt": "2020-09-01T09:05:13Z", "path": "presto-docs/src/main/sphinx/sql/revoke.rst", "diffHunk": "@@ -9,7 +9,7 @@ Synopsis\n \n     REVOKE [ GRANT OPTION FOR ]\n     ( privilege [, ...] | ALL PRIVILEGES )\n-    ON [ TABLE ] table_name FROM ( user | USER user | ROLE role )\n+    ON ( table_name | TABLE table_name | SCHEMA schema_name ) FROM ( user | USER user | ROLE role )\n \n Description", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NzIyMw==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480987223", "bodyText": "io.prestosql.testing.sql.TestTable#randomTableSuffix?", "author": "kokosing", "createdAt": "2020-09-01T09:07:10Z", "path": "presto-tests/src/test/java/io/prestosql/common/Randoms.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.common;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+public final class Randoms\n+{\n+    private Randoms() {}\n+\n+    public static String randomUsername()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5MDQwMA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480990400", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!metadata.catalogExists(session, schemaName.getCatalogName())) {\n          \n          \n            \n                        throw semanticException(CATALOG_NOT_FOUND, statement, \"Catalog '%s' does not exist\", schemaName.getCatalogName());\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nI think this is not needed, the below check is good enough.", "author": "kokosing", "createdAt": "2020-09-01T09:12:43Z", "path": "presto-main/src/main/java/io/prestosql/execution/RevokeTask.java", "diffHunk": "@@ -49,13 +54,52 @@ public String getName()\n     @Override\n     public ListenableFuture<?> execute(Revoke statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n     {\n-        Session session = stateMachine.getSession();\n-        QualifiedObjectName tableName = createQualifiedObjectName(session, statement, statement.getTableName());\n+        if (statement.getType().filter(GrantOnType.SCHEMA::equals).isPresent()) {\n+            executeRevokeOnSchema(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        else {\n+            executeRevokeOnTable(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        return immediateFuture(null);\n+    }\n+\n+    private void executeRevokeOnSchema(Session session, Revoke statement, Metadata metadata, AccessControl accessControl)\n+    {\n+        CatalogSchemaName schemaName = createCatalogSchemaName(session, statement, Optional.of(statement.getName()));\n+\n+        if (!metadata.catalogExists(session, schemaName.getCatalogName())) {\n+            throw semanticException(CATALOG_NOT_FOUND, statement, \"Catalog '%s' does not exist\", schemaName.getCatalogName());\n+        }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5MDY5NA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480990694", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!metadata.catalogExists(session, schemaName.getCatalogName())) {\n          \n          \n            \n                        throw semanticException(CATALOG_NOT_FOUND, statement, \"Catalog '%s' does not exist\", schemaName.getCatalogName());\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nI think this is not needed, the below check is good enough.", "author": "kokosing", "createdAt": "2020-09-01T09:13:11Z", "path": "presto-main/src/main/java/io/prestosql/execution/GrantTask.java", "diffHunk": "@@ -49,13 +54,53 @@ public String getName()\n     @Override\n     public ListenableFuture<?> execute(Grant statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n     {\n-        Session session = stateMachine.getSession();\n-        QualifiedObjectName tableName = createQualifiedObjectName(session, statement, statement.getTableName());\n+        if (statement.getType().filter(GrantOnType.SCHEMA::equals).isPresent()) {\n+            executeGrantOnSchema(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        else {\n+            executeGrantOnTable(stateMachine.getSession(), statement, metadata, accessControl);\n+        }\n+        return immediateFuture(null);\n+    }\n+\n+    private void executeGrantOnSchema(Session session, Grant statement, Metadata metadata, AccessControl accessControl)\n+    {\n+        CatalogSchemaName schemaName = createCatalogSchemaName(session, statement, Optional.of(statement.getName()));\n+\n+        if (!metadata.catalogExists(session, schemaName.getCatalogName())) {\n+            throw semanticException(CATALOG_NOT_FOUND, statement, \"Catalog '%s' does not exist\", schemaName.getCatalogName());\n+        }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5MjY0Nw==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480992647", "bodyText": "toImmutableSet", "author": "kokosing", "createdAt": "2020-09-01T09:16:47Z", "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorAccessControl.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector;\n+\n+import io.prestosql.plugin.base.security.AllowAllAccessControl;\n+import io.prestosql.spi.connector.ConnectorSecurityContext;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static io.prestosql.spi.security.AccessDeniedException.denyGrantSchemaPrivilege;\n+import static io.prestosql.spi.security.AccessDeniedException.denyRevokeSchemaPrivilege;\n+import static java.util.Objects.requireNonNull;\n+\n+class MockConnectorAccessControl\n+        extends AllowAllAccessControl\n+{\n+    private static final String INFORMATION_SCHEMA = \"information_schema\";\n+\n+    private final SchemaGrants schemaGrants;\n+\n+    MockConnectorAccessControl(SchemaGrants schemaGrants)\n+    {\n+        this.schemaGrants = requireNonNull(schemaGrants, \"schemaGrants is null\");\n+    }\n+\n+    @Override\n+    public Set<String> filterSchemas(ConnectorSecurityContext context, Set<String> schemaNames)\n+    {\n+        return schemaNames.stream()\n+                .filter(schema ->\n+                        schema.equalsIgnoreCase(INFORMATION_SCHEMA) ||\n+                                Arrays.stream(Privilege.values())\n+                                        .anyMatch(privilege -> schemaGrants.isAllowed(context.getIdentity().getUser(), schema, privilege)))\n+                .collect(Collectors.toSet());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5MzAwMg==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480993002", "bodyText": "you might want to extract this condition as method", "author": "kokosing", "createdAt": "2020-09-01T09:17:22Z", "path": "presto-main/src/test/java/io/prestosql/connector/MockConnectorAccessControl.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.connector;\n+\n+import io.prestosql.plugin.base.security.AllowAllAccessControl;\n+import io.prestosql.spi.connector.ConnectorSecurityContext;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static io.prestosql.spi.security.AccessDeniedException.denyGrantSchemaPrivilege;\n+import static io.prestosql.spi.security.AccessDeniedException.denyRevokeSchemaPrivilege;\n+import static java.util.Objects.requireNonNull;\n+\n+class MockConnectorAccessControl\n+        extends AllowAllAccessControl\n+{\n+    private static final String INFORMATION_SCHEMA = \"information_schema\";\n+\n+    private final SchemaGrants schemaGrants;\n+\n+    MockConnectorAccessControl(SchemaGrants schemaGrants)\n+    {\n+        this.schemaGrants = requireNonNull(schemaGrants, \"schemaGrants is null\");\n+    }\n+\n+    @Override\n+    public Set<String> filterSchemas(ConnectorSecurityContext context, Set<String> schemaNames)\n+    {\n+        return schemaNames.stream()\n+                .filter(schema ->\n+                        schema.equalsIgnoreCase(INFORMATION_SCHEMA) ||\n+                                Arrays.stream(Privilege.values())\n+                                        .anyMatch(privilege -> schemaGrants.isAllowed(context.getIdentity().getUser(), schema, privilege)))", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5Mzg1OQ==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480993859", "bodyText": "In docs  you mentioned that SHOW GRANTS ON SCHEMA is supported, please undo the change in docs", "author": "kokosing", "createdAt": "2020-09-01T09:18:53Z", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -87,12 +87,14 @@ statement\n     | SET ROLE (ALL | NONE | role=identifier)                          #setRole\n     | GRANT\n         (privilege (',' privilege)* | ALL PRIVILEGES)\n-        ON TABLE? qualifiedName TO grantee=principal\n+        ON (SCHEMA | TABLE)? qualifiedName\n+        TO grantee=principal\n         (WITH GRANT OPTION)?                                           #grant\n     | REVOKE\n         (GRANT OPTION FOR)?\n         (privilege (',' privilege)* | ALL PRIVILEGES)\n-        ON TABLE? qualifiedName FROM grantee=principal                 #revoke\n+        ON (SCHEMA | TABLE)? qualifiedName\n+        FROM grantee=principal                                         #revoke\n     | SHOW GRANTS\n         (ON TABLE? qualifiedName)?                                     #showGrants", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5NDgxNA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480994814", "bodyText": "Please add tests for that", "author": "kokosing", "createdAt": "2020-09-01T09:20:35Z", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedAccessControl.java", "diffHunk": "@@ -306,6 +308,22 @@ public void checkCanSetCatalogSessionProperty(ConnectorSecurityContext context,\n         }\n     }\n \n+    @Override\n+    public void checkCanGrantSchemaPrivilege(ConnectorSecurityContext context, Privilege privilege, String schemaName, PrestoPrincipal grantee, boolean grantOption)\n+    {\n+        if (!isSchemaOwner(context, schemaName)) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5NDg4MA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480994880", "bodyText": "Please add tests for that", "author": "kokosing", "createdAt": "2020-09-01T09:20:42Z", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/security/FileBasedSystemAccessControl.java", "diffHunk": "@@ -660,6 +662,28 @@ public void checkCanSetCatalogSessionProperty(SystemSecurityContext context, Str\n     {\n     }\n \n+    @Override\n+    public void checkCanGrantSchemaPrivilege(SystemSecurityContext context, Privilege privilege, CatalogSchemaName schema, PrestoPrincipal grantee, boolean grantOption)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5NjA4Ng==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480996086", "bodyText": "While you are it, can you please also add few tests for GRANT/REVOKE ON TABLE?", "author": "kokosing", "createdAt": "2020-09-01T09:22:43Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.connector.MutableSchemaGrants;\n+import io.prestosql.connector.SchemaGrants;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.common.Randoms.randomUsername;\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestGrant\n+{\n+    private final Session admin = testSessionBuilder()\n+            .setIdentity(Identity.ofUser(\"admin\"))\n+            .setCatalog(\"local\")\n+            .setSchema(\"default\")\n+            .build();\n+\n+    private DistributedQueryRunner queryRunner;\n+    private QueryAssertions assertions;\n+\n+    private String username;\n+    private Session user;\n+\n+    @BeforeClass\n+    public void initClass()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner.builder(admin).build();\n+\n+        SchemaGrants schemaGrants = new MutableSchemaGrants();\n+        schemaGrants.grant(new PrestoPrincipal(USER, admin.getUser()), \"default\", EnumSet.allOf(Privilege.class), true);\n+\n+        MockConnectorFactory connectorFactory = MockConnectorFactory.builder()\n+                .withListSchemaNames(session -> ImmutableList.of(\"information_schema\", \"default\"))\n+                .withSchemaGrants(schemaGrants)\n+                .build();\n+\n+        queryRunner.installPlugin(new MockConnectorPlugin(connectorFactory));\n+\n+        queryRunner.createCatalog(\"local\", \"mock\");\n+\n+        assertions = new QueryAssertions(queryRunner);\n+    }\n+\n+    @BeforeTest\n+    public void initTest()\n+    {\n+        username = randomUsername();\n+        user = testSessionBuilder()\n+                .setIdentity(Identity.ofUser(username))\n+                .setCatalog(\"local\")\n+                .setSchema(\"default\")\n+                .build();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void testDefaultGrants()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5NjYwMA==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480996600", "bodyText": "Please also add tests for SHOW GRANTS and information_schema.table_privileges while using GRANT/REVOKE ON SCHEMA", "author": "kokosing", "createdAt": "2020-09-01T09:23:34Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrant.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.connector.MutableSchemaGrants;\n+import io.prestosql.connector.SchemaGrants;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.common.Randoms.randomUsername;\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestGrant", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5Njk5MQ==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r480996991", "bodyText": "I would merge TestGrant with TestRevoke.  :)", "author": "kokosing", "createdAt": "2020-09-01T09:24:14Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestRevoke.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.connector.MutableSchemaGrants;\n+import io.prestosql.connector.SchemaGrants;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.common.Randoms.randomUsername;\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestRevoke", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "ea236543f08a7450c121672433f87733a9aeee52", "url": "https://github.com/trinodb/trino/commit/ea236543f08a7450c121672433f87733a9aeee52", "message": "Test parsing grant statement with TABLE keyword", "committedDate": "2020-10-29T12:36:42Z", "type": "commit"}, {"oid": "3a56915e3748484d7e654f265a919a782b4ef893", "url": "https://github.com/trinodb/trino/commit/3a56915e3748484d7e654f265a919a782b4ef893", "message": "Create MockPlugin on top of MockConnector\n\n* Remove Tpch usages\n* Add missing handles\n* Extract inner classes", "committedDate": "2020-10-29T12:36:42Z", "type": "commit"}, {"oid": "48bddee257359bbd36605ea29880a84e0a3c4fee", "url": "https://github.com/trinodb/trino/commit/48bddee257359bbd36605ea29880a84e0a3c4fee", "message": "Add SQL syntax for GRANT & REVOKE on schema", "committedDate": "2020-10-29T12:36:42Z", "type": "commit"}, {"oid": "18ed2fb83b738ba8a2e4426a81bba609a20fd8e3", "url": "https://github.com/trinodb/trino/commit/18ed2fb83b738ba8a2e4426a81bba609a20fd8e3", "message": "Add test for grant and revoke on table", "committedDate": "2020-10-29T12:36:42Z", "type": "commit"}, {"oid": "7fee5fab9f78f43ef854ef8fa176d72f638f9351", "url": "https://github.com/trinodb/trino/commit/7fee5fab9f78f43ef854ef8fa176d72f638f9351", "message": "Document semantic of grant and revoke", "committedDate": "2020-10-29T12:36:43Z", "type": "commit"}, {"oid": "7fee5fab9f78f43ef854ef8fa176d72f638f9351", "url": "https://github.com/trinodb/trino/commit/7fee5fab9f78f43ef854ef8fa176d72f638f9351", "message": "Document semantic of grant and revoke", "committedDate": "2020-10-29T12:36:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNDY0Mg==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r515024642", "bodyText": "just session?", "author": "kokosing", "createdAt": "2020-10-30T11:15:42Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestGrantOnSchema.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.prestosql.Session;\n+import io.prestosql.connector.Grants;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.connector.MutableGrants;\n+import io.prestosql.spi.connector.SchemaTableName;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DataProviders;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.common.Randoms.randomUsername;\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestGrantOnSchema\n+{\n+    private final Session admin = sessionOf(\"admin\");\n+    private final Grants<String> schemaGrants = new MutableGrants<>();\n+    private DistributedQueryRunner queryRunner;\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void initClass()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner.builder(admin).build();\n+        MockConnectorFactory connectorFactory = MockConnectorFactory.builder()\n+                .withListSchemaNames(session -> ImmutableList.of(\"information_schema\", \"default\"))\n+                .withListTables((session, schema) ->\n+                        \"default\".equalsIgnoreCase(schema) ? ImmutableList.of(new SchemaTableName(schema, \"table_one\")) : ImmutableList.of())\n+                .withSchemaGrants(schemaGrants)\n+                .build();\n+        queryRunner.installPlugin(new MockConnectorPlugin(connectorFactory));\n+        queryRunner.createCatalog(\"local\", \"mock\");\n+        assertions = new QueryAssertions(queryRunner);\n+        schemaGrants.grant(new PrestoPrincipal(USER, admin.getUser()), \"default\", EnumSet.allOf(Privilege.class), true);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test(dataProviderClass = DataProviders.class, dataProvider = \"trueFalse\")\n+    public void testExistingGrants(boolean grantOption)\n+    {\n+        String username = randomUsername();\n+        Session user = sessionOf(username);\n+        schemaGrants.grant(new PrestoPrincipal(USER, user.getUser()), \"default\", EnumSet.allOf(Privilege.class), grantOption);\n+\n+        assertThat(assertions.query(admin, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\");\n+        assertThat(assertions.query(user, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\");\n+        assertThat(assertions.query(admin, \"SHOW TABLES FROM default\")).matches(\"VALUES (VARCHAR 'table_one')\");\n+        assertThat(assertions.query(user, \"SHOW TABLES FROM default\")).matches(\"VALUES (VARCHAR 'table_one')\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testValidGrant(String privilege)\n+    {\n+        String username = randomUsername();\n+        Session user = sessionOf(username);\n+\n+        queryRunner.execute(admin, format(\"GRANT %s ON SCHEMA default TO %s\", privilege, username));\n+\n+        assertThat(assertions.query(user, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\");\n+        assertThat(assertions.query(admin, \"SHOW TABLES FROM default\")).matches(\"VALUES (VARCHAR 'table_one')\");\n+        assertThat(assertions.query(user, \"SHOW TABLES FROM default\")).matches(\"VALUES (VARCHAR 'table_one')\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testValidGrantWithGrantOption(String privilege)\n+    {\n+        String username = randomUsername();\n+        Session user = sessionOf(username);\n+\n+        queryRunner.execute(admin, format(\"GRANT %s ON SCHEMA default TO %s WITH GRANT OPTION\", privilege, username));\n+\n+        assertThat(assertions.query(user, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\");\n+        assertThat(assertions.query(user, format(\"GRANT %s ON SCHEMA default TO %s\", privilege, randomUsername()))).matches(\"VALUES (BOOLEAN 'TRUE')\");\n+        assertThat(assertions.query(user, format(\"GRANT %s ON SCHEMA default TO %s WITH GRANT OPTION\", privilege, randomUsername()))).matches(\"VALUES (BOOLEAN 'TRUE')\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testGrantOnNonExistingCatalog(String privilege)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(admin, format(\"GRANT %s ON SCHEMA missing_catalog.missing_schema TO %s\", privilege, randomUsername())))\n+                .hasMessageContaining(\"Schema 'missing_catalog.missing_schema' does not exist\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testGrantOnNonExistingSchema(String privilege)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(admin, format(\"GRANT %s ON SCHEMA missing_schema TO %s\", privilege, randomUsername())))\n+                .hasMessageContaining(\"Schema 'local.missing_schema' does not exist\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testAccessDenied(String privilege)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(sessionOf(randomUsername()), format(\"GRANT %s ON SCHEMA default TO %s\", privilege, randomUsername())))\n+                .hasMessageContaining(\"Access Denied: Cannot grant privilege SELECT on schema default\");\n+    }\n+\n+    @DataProvider(name = \"privileges\")\n+    public static Object[][] privileges()\n+    {\n+        return new Object[][] {\n+                {\"SELECT\"},\n+                {\"ALL PRIVILEGES\"}\n+        };\n+    }\n+\n+    private static Session sessionOf(String username)", "originalCommit": "48bddee257359bbd36605ea29880a84e0a3c4fee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNTQyMw==", "url": "https://github.com/trinodb/trino/pull/4396#discussion_r515025423", "bodyText": "session?", "author": "kokosing", "createdAt": "2020-10-30T11:17:09Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestRevokeOnSchema.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.Session;\n+import io.prestosql.connector.Grants;\n+import io.prestosql.connector.MockConnectorFactory;\n+import io.prestosql.connector.MockConnectorPlugin;\n+import io.prestosql.connector.MutableGrants;\n+import io.prestosql.spi.security.Identity;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+import io.prestosql.spi.security.Privilege;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.EnumSet;\n+\n+import static io.prestosql.common.Randoms.randomUsername;\n+import static io.prestosql.spi.security.PrincipalType.USER;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestRevokeOnSchema\n+{\n+    private static final Session admin = sessionOf(\"admin\");\n+    private static final Session userWithAllPrivileges = sessionOf(randomUsername());\n+    private static final Session userWithSelect = sessionOf(randomUsername());\n+    private DistributedQueryRunner queryRunner;\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void initClass()\n+            throws Exception\n+    {\n+        queryRunner = DistributedQueryRunner.builder(userWithAllPrivileges).build();\n+        Grants<String> schemaGrants = new MutableGrants<>();\n+        schemaGrants.grant(new PrestoPrincipal(USER, admin.getUser()), \"default\", EnumSet.allOf(Privilege.class), true);\n+        schemaGrants.grant(new PrestoPrincipal(USER, userWithAllPrivileges.getUser()), \"default\", EnumSet.allOf(Privilege.class), true);\n+        schemaGrants.grant(new PrestoPrincipal(USER, userWithSelect.getUser()), \"default\", ImmutableSet.of(Privilege.SELECT), true);\n+        MockConnectorFactory connectorFactory = MockConnectorFactory.builder()\n+                .withListSchemaNames(session -> ImmutableList.of(\"information_schema\", \"default\"))\n+                .withSchemaGrants(schemaGrants)\n+                .build();\n+        queryRunner.installPlugin(new MockConnectorPlugin(connectorFactory));\n+        queryRunner.createCatalog(\"local\", \"mock\");\n+        assertions = new QueryAssertions(queryRunner);\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test(dataProvider = \"privilegesAndUsers\")\n+    public void testRevokeOnSchema(String privilege, Session user)\n+    {\n+        assertThat(assertions.query(user, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema'), (VARCHAR 'default')\");\n+\n+        queryRunner.execute(admin, format(\"REVOKE %s ON SCHEMA default FROM %s\", privilege, user.getUser()));\n+\n+        assertThat(assertions.query(user, \"SHOW SCHEMAS FROM local\")).matches(\"VALUES (VARCHAR 'information_schema')\");\n+    }\n+\n+    @Test(dataProvider = \"privilegesAndUsers\")\n+    public void testRevokeOnNonExistingCatalog(String privilege, Session user)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(admin, format(\"REVOKE %s ON SCHEMA missing_catalog.missing_schema FROM %s\", privilege, user.getUser())))\n+                .hasMessageContaining(\"Schema 'missing_catalog.missing_schema' does not exist\");\n+    }\n+\n+    @Test(dataProvider = \"privilegesAndUsers\")\n+    public void testRevokeOnNonExistingSchema(String privilege, Session user)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(admin, format(\"REVOKE %s ON SCHEMA missing_schema FROM %s\", privilege, user.getUser())))\n+                .hasMessageContaining(\"Schema 'local.missing_schema' does not exist\");\n+    }\n+\n+    @Test(dataProvider = \"privileges\")\n+    public void testAccessDenied(String privilege)\n+    {\n+        assertThatThrownBy(() -> queryRunner.execute(sessionOf(randomUsername()), format(\"REVOKE %s ON SCHEMA default FROM %s\", privilege, randomUsername())))\n+                .hasMessageContaining(\"Access Denied: Cannot revoke privilege SELECT on schema default\");\n+    }\n+\n+    @DataProvider(name = \"privilegesAndUsers\")\n+    public static Object[][] privilegesAndUsers()\n+    {\n+        return new Object[][] {\n+                {\"SELECT\", userWithSelect},\n+                {\"ALL PRIVILEGES\", userWithAllPrivileges}\n+        };\n+    }\n+\n+    @DataProvider(name = \"privileges\")\n+    public static Object[][] privileges()\n+    {\n+        return new Object[][] {\n+                {\"SELECT\"},\n+                {\"ALL PRIVILEGES\"}\n+        };\n+    }\n+\n+    private static Session sessionOf(String username)", "originalCommit": "48bddee257359bbd36605ea29880a84e0a3c4fee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}