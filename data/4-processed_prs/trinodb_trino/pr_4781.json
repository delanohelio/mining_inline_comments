{"pr_number": 4781, "pr_title": "Fix serialization of NULL values in ARRAY and MAP types for legacy values", "pr_createdAt": "2020-08-11T13:29:46Z", "pr_url": "https://github.com/trinodb/trino/pull/4781", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYxMDg1Mg==", "url": "https://github.com/trinodb/trino/pull/4781#discussion_r468610852", "bodyText": "Any idea why it was here before? Just an ommision?", "author": "losipiuk", "createdAt": "2020-08-11T14:12:17Z", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -210,47 +212,47 @@ private Object getLegacyValue(Object value, Type type)\n         }\n \n         if (type instanceof ArrayType) {\n+            checkArgument(value instanceof List, \"ArrayType.getValueObject should return List\");\n+\n             Type elementType = ((ArrayType) type).getElementType();\n \n             if (!(elementType instanceof TimestampType || elementType instanceof TimestampWithTimeZoneType)) {\n                 return value;\n             }\n \n-            return ((List<Object>) value).stream()\n+            return unmodifiableList(((List<Object>) value).stream()\n                     .map(element -> getLegacyValue(element, elementType))\n-                    .collect(toImmutableList());\n+                    .collect(toList()));\n         }\n \n         if (type instanceof MapType) {\n+            checkArgument(value instanceof Map, \"MapType.getValueObject should return Map\");\n+\n             Type keyType = ((MapType) type).getKeyType();\n             Type valueType = ((MapType) type).getValueType();\n \n-            return ((Map<Object, Object>) value).entrySet().stream()\n-                    .collect(toImmutableMap(entry -> getLegacyValue(entry.getKey(), keyType), entry -> getLegacyValue(entry.getValue(), valueType)));\n+            // We cannot use streams here due to https://bugs.openjdk.java.net/browse/JDK-8148463\n+            Map<Object, Object> result = new HashMap<>();\n+            for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) value).entrySet()) {\n+                result.put(getLegacyValue(entry.getKey(), keyType), getLegacyValue(entry.getValue(), valueType));\n+            }\n+            return unmodifiableMap(result);\n         }\n \n         if (type instanceof RowType) {\n-            List<RowType.Field> fields = ((RowType) type).getFields();\n-\n-            if (value instanceof Map) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwNTk1Mg==", "url": "https://github.com/trinodb/trino/pull/4781#discussion_r468705952", "bodyText": "I guess so, I've double-checked and RowType.getObjectValue returns List<Object>. I've added assertions that will throw an exception if this is not true so we will know :)", "author": "wendigo", "createdAt": "2020-08-11T16:22:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYxMDg1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYxNTM5NQ==", "url": "https://github.com/trinodb/trino/pull/4781#discussion_r468615395", "bodyText": "Is the fact that we are testing in TIMESTAMP beneficial in any way. If so please also use timestamp in test related to MAP. Otherwise change the test method shouldHandleNullValuesInArray", "author": "losipiuk", "createdAt": "2020-08-11T14:16:20Z", "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -280,6 +289,62 @@ public void shouldHandleNullTimestamps()\n                 .containsExactly(newArrayList(null, null));\n     }\n \n+    @Test\n+    public void shouldHandleNullTimestampsInArray()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYyMDc5NQ==", "url": "https://github.com/trinodb/trino/pull/4781#discussion_r468620795", "bodyText": "unused?", "author": "losipiuk", "createdAt": "2020-08-11T14:22:21Z", "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -420,4 +485,37 @@ public void accept(Throwable throwable)\n             return exceptions;\n         }\n     }\n+\n+    private static MapType createMapType(Type keyType, Type valueType)\n+    {\n+        return new MapType(\n+                keyType,\n+                valueType,\n+                methodHandle(TestQueryResultRows.class, \"throwUnsupportedOperationException\"),\n+                methodHandle(TestQueryResultRows.class, \"throwUnsupportedOperationException\"),\n+                methodHandle(TestQueryResultRows.class, \"throwUnsupportedOperationException\"),\n+                methodHandle(TestQueryResultRows.class, \"keyHashBlock\", Block.class, int.class));\n+    }\n+\n+    public static void throwUnsupportedOperationException()\n+    {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public static long keyHashBlock(Block block, int position)\n+    {\n+        return 1L;\n+    }\n+\n+    public static Block rowBlockOf(List<Type> parameterTypes, Object... values)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwMjI2Ng==", "url": "https://github.com/trinodb/trino/pull/4781#discussion_r468802266", "bodyText": "Is this redundant with the check below", "author": "dain", "createdAt": "2020-08-11T19:04:41Z", "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -281,7 +288,63 @@ public void shouldHandleNullTimestamps()\n     }\n \n     @Test\n-    public void shouldHandleRowTypeWithNullFieldValue()\n+    public void shouldHandleNullValuesInArray()\n+    {\n+        List<Column> columns = ImmutableList.of(new Column(\"_col0\", ARRAY, new ClientTypeSignature(ARRAY)));\n+        List<Type> types = ImmutableList.of(new ArrayType(TimestampWithTimeZoneType.TIMESTAMP_WITH_TIME_ZONE));\n+\n+        List<Page> pages = rowPagesBuilder(types)\n+                .row(singletonList(null))\n+                .build();\n+\n+        TestExceptionConsumer exceptionConsumer = new TestExceptionConsumer();\n+        QueryResultRows rows = queryResultRowsBuilder(getSession())\n+                .withColumnsAndTypes(columns, types)\n+                .withExceptionConsumer(exceptionConsumer)\n+                .addPages(pages)\n+                .build();\n+\n+        assertThat(exceptionConsumer.getExceptions()).isEmpty();\n+        assertFalse(rows.isEmpty(), \"rows are empty\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgxMTU0Ng==", "url": "https://github.com/trinodb/trino/pull/4781#discussion_r468811546", "bodyText": "@dain I'd like to refactor this test as some parts can be reused. This test matches others in terms of assertions so I'd leave that as it is for now if you're ok with that \ud83d\ude42", "author": "wendigo", "createdAt": "2020-08-11T19:22:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwMjI2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyOTIzMA==", "url": "https://github.com/trinodb/trino/pull/4781#discussion_r468929230", "bodyText": "Grammar nit: \"rows is empty\"\nThough we should use AssertJ\nassertThat(rows).isPresent();", "author": "electrum", "createdAt": "2020-08-11T23:58:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwMjI2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzMDk2Mw==", "url": "https://github.com/trinodb/trino/pull/4781#discussion_r469030963", "bodyText": "This is not an optional :)", "author": "wendigo", "createdAt": "2020-08-12T06:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwMjI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgwMDMxNQ==", "url": "https://github.com/trinodb/trino/pull/4781#discussion_r468800315", "bodyText": "Remove these checks. They are actually worse than simply doing the cast, since the cast will return the actual class name (including the Java module), but these checks do not. They're also not particularly useful, since these types only have one implementation.", "author": "electrum", "createdAt": "2020-08-11T19:00:54Z", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -210,47 +212,47 @@ private Object getLegacyValue(Object value, Type type)\n         }\n \n         if (type instanceof ArrayType) {\n+            checkArgument(value instanceof List, \"ArrayType.getValueObject should return List\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyNzUzOA==", "url": "https://github.com/trinodb/trino/pull/4781#discussion_r468927538", "bodyText": "This comment indicates it is a bug that will be fixed (at which point we could change the code), but it's unclear that this is the case. It seems more likely to be a documentation / specification bug which will be addressed by updating the documentation. Probably better to say that toMap() does not allow null, so that we don't have an un-actionable comment forever.", "author": "electrum", "createdAt": "2020-08-11T23:52:41Z", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -210,47 +212,47 @@ private Object getLegacyValue(Object value, Type type)\n         }\n \n         if (type instanceof ArrayType) {\n+            checkArgument(value instanceof List, \"ArrayType.getValueObject should return List\");\n+\n             Type elementType = ((ArrayType) type).getElementType();\n \n             if (!(elementType instanceof TimestampType || elementType instanceof TimestampWithTimeZoneType)) {\n                 return value;\n             }\n \n-            return ((List<Object>) value).stream()\n+            return unmodifiableList(((List<Object>) value).stream()\n                     .map(element -> getLegacyValue(element, elementType))\n-                    .collect(toImmutableList());\n+                    .collect(toList()));\n         }\n \n         if (type instanceof MapType) {\n+            checkArgument(value instanceof Map, \"MapType.getValueObject should return Map\");\n+\n             Type keyType = ((MapType) type).getKeyType();\n             Type valueType = ((MapType) type).getValueType();\n \n-            return ((Map<Object, Object>) value).entrySet().stream()\n-                    .collect(toImmutableMap(entry -> getLegacyValue(entry.getKey(), keyType), entry -> getLegacyValue(entry.getValue(), valueType)));\n+            // We cannot use streams here due to https://bugs.openjdk.java.net/browse/JDK-8148463", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyODEyMw==", "url": "https://github.com/trinodb/trino/pull/4781#discussion_r468928123", "bodyText": "Use map.forEach() here\n((Map<Object, Object>) value).forEach((key, value) ->\n        result.put(getLegacyValue(key, keyType), getLegacyValue(value, valueType)));", "author": "electrum", "createdAt": "2020-08-11T23:54:56Z", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -210,47 +212,47 @@ private Object getLegacyValue(Object value, Type type)\n         }\n \n         if (type instanceof ArrayType) {\n+            checkArgument(value instanceof List, \"ArrayType.getValueObject should return List\");\n+\n             Type elementType = ((ArrayType) type).getElementType();\n \n             if (!(elementType instanceof TimestampType || elementType instanceof TimestampWithTimeZoneType)) {\n                 return value;\n             }\n \n-            return ((List<Object>) value).stream()\n+            return unmodifiableList(((List<Object>) value).stream()\n                     .map(element -> getLegacyValue(element, elementType))\n-                    .collect(toImmutableList());\n+                    .collect(toList()));\n         }\n \n         if (type instanceof MapType) {\n+            checkArgument(value instanceof Map, \"MapType.getValueObject should return Map\");\n+\n             Type keyType = ((MapType) type).getKeyType();\n             Type valueType = ((MapType) type).getValueType();\n \n-            return ((Map<Object, Object>) value).entrySet().stream()\n-                    .collect(toImmutableMap(entry -> getLegacyValue(entry.getKey(), keyType), entry -> getLegacyValue(entry.getValue(), valueType)));\n+            // We cannot use streams here due to https://bugs.openjdk.java.net/browse/JDK-8148463\n+            Map<Object, Object> result = new HashMap<>();\n+            for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) value).entrySet()) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyODE4Mg==", "url": "https://github.com/trinodb/trino/pull/4781#discussion_r468928182", "bodyText": "Remove", "author": "electrum", "createdAt": "2020-08-11T23:55:04Z", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -210,47 +212,47 @@ private Object getLegacyValue(Object value, Type type)\n         }\n \n         if (type instanceof ArrayType) {\n+            checkArgument(value instanceof List, \"ArrayType.getValueObject should return List\");\n+\n             Type elementType = ((ArrayType) type).getElementType();\n \n             if (!(elementType instanceof TimestampType || elementType instanceof TimestampWithTimeZoneType)) {\n                 return value;\n             }\n \n-            return ((List<Object>) value).stream()\n+            return unmodifiableList(((List<Object>) value).stream()\n                     .map(element -> getLegacyValue(element, elementType))\n-                    .collect(toImmutableList());\n+                    .collect(toList()));\n         }\n \n         if (type instanceof MapType) {\n+            checkArgument(value instanceof Map, \"MapType.getValueObject should return Map\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkyODIzNw==", "url": "https://github.com/trinodb/trino/pull/4781#discussion_r468928237", "bodyText": "Remove", "author": "electrum", "createdAt": "2020-08-11T23:55:11Z", "path": "presto-main/src/main/java/io/prestosql/server/protocol/QueryResultRows.java", "diffHunk": "@@ -210,47 +212,47 @@ private Object getLegacyValue(Object value, Type type)\n         }\n \n         if (type instanceof ArrayType) {\n+            checkArgument(value instanceof List, \"ArrayType.getValueObject should return List\");\n+\n             Type elementType = ((ArrayType) type).getElementType();\n \n             if (!(elementType instanceof TimestampType || elementType instanceof TimestampWithTimeZoneType)) {\n                 return value;\n             }\n \n-            return ((List<Object>) value).stream()\n+            return unmodifiableList(((List<Object>) value).stream()\n                     .map(element -> getLegacyValue(element, elementType))\n-                    .collect(toImmutableList());\n+                    .collect(toList()));\n         }\n \n         if (type instanceof MapType) {\n+            checkArgument(value instanceof Map, \"MapType.getValueObject should return Map\");\n+\n             Type keyType = ((MapType) type).getKeyType();\n             Type valueType = ((MapType) type).getValueType();\n \n-            return ((Map<Object, Object>) value).entrySet().stream()\n-                    .collect(toImmutableMap(entry -> getLegacyValue(entry.getKey(), keyType), entry -> getLegacyValue(entry.getValue(), valueType)));\n+            // We cannot use streams here due to https://bugs.openjdk.java.net/browse/JDK-8148463\n+            Map<Object, Object> result = new HashMap<>();\n+            for (Map.Entry<Object, Object> entry : ((Map<Object, Object>) value).entrySet()) {\n+                result.put(getLegacyValue(entry.getKey(), keyType), getLegacyValue(entry.getValue(), valueType));\n+            }\n+            return unmodifiableMap(result);\n         }\n \n         if (type instanceof RowType) {\n-            List<RowType.Field> fields = ((RowType) type).getFields();\n-\n-            if (value instanceof Map) {\n-                Map<String, Object> values = (Map<String, Object>) value;\n+            checkArgument(value instanceof List, \"RowType.getValueObject should return List\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkzMTI2MA==", "url": "https://github.com/trinodb/trino/pull/4781#discussion_r468931260", "bodyText": "Do this as\nprivate static final Metadata METADATA = createTestMetadataManager();\n\nMETADATA.getType(mapType(keyType.getTypeSignature(), keyType.getTypeSignature()));", "author": "electrum", "createdAt": "2020-08-12T00:05:38Z", "path": "presto-main/src/test/java/io/prestosql/server/protocol/TestQueryResultRows.java", "diffHunk": "@@ -420,4 +483,25 @@ public void accept(Throwable throwable)\n             return exceptions;\n         }\n     }\n+\n+    private static MapType createMapType(Type keyType, Type valueType)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4e7602bf1b008a4342bd6cd8739c31ab059c1420", "url": "https://github.com/trinodb/trino/commit/4e7602bf1b008a4342bd6cd8739c31ab059c1420", "message": "Fix legacy serialization of NULL values for ARRAY and MAP", "committedDate": "2020-08-12T06:29:02Z", "type": "commit"}, {"oid": "4e7602bf1b008a4342bd6cd8739c31ab059c1420", "url": "https://github.com/trinodb/trino/commit/4e7602bf1b008a4342bd6cd8739c31ab059c1420", "message": "Fix legacy serialization of NULL values for ARRAY and MAP", "committedDate": "2020-08-12T06:29:02Z", "type": "forcePushed"}]}