{"pr_number": 3562, "pr_title": "Add random suffix to all tables in TestDistributedQueries", "pr_createdAt": "2020-04-27T21:02:01Z", "pr_url": "https://github.com/trinodb/trino/pull/3562", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODE5Mw==", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416158193", "bodyText": "Actually, do we need to pass any argument here? Maybe we could have only getUniqueTableName() or just getUniqueName()?", "author": "kokosing", "createdAt": "2020-04-27T21:22:51Z", "path": "presto-testing/src/main/java/io/prestosql/testing/sql/TestTable.java", "diffHunk": "@@ -66,6 +66,11 @@ public void close()\n         sqlExecutor.execute(\"DROP TABLE \" + name);\n     }\n \n+    public static String getTestTableName(String baseTableName)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2NTA0Nw==", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416165047", "bodyText": "Maybe we could have only getUniqueTableName() or just getUniqueName()?\n\nthat won't work. table name prefix is very important. it's sometimes the only useuful information in an err msg\nbut i think we don't need this method; the inline version with manual concatenation is rather readable", "author": "findepi", "createdAt": "2020-04-27T21:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5NDk5OA==", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416194998", "bodyText": "I can switch them to match the existing tests. My only preference for this was the extra _ between the prefix and the random suffix.", "author": "alexjo2144", "createdAt": "2020-04-27T22:33:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcyODM3NA==", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416728374", "bodyText": "Just removed that method, opting for the inline string concat like the existing tests.", "author": "alexjo2144", "createdAt": "2020-04-28T15:53:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODU4NQ==", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416158585", "bodyText": "This test is missing DROP", "author": "kokosing", "createdAt": "2020-04-27T21:23:28Z", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -349,94 +354,101 @@ protected void assertCreateTableAsSelect(Session session, @Language(\"SQL\") Strin\n     @Test\n     public void testRenameTable()\n     {\n-        assertUpdate(\"CREATE TABLE test_rename AS SELECT 123 x\", 1);\n+        String tableName = getTestTableName(\"test_rename\");\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT 123 x\", 1);\n \n-        assertUpdate(\"ALTER TABLE test_rename RENAME TO test_rename_new\");\n-        assertQuery(\"SELECT x FROM test_rename_new\", \"VALUES 123\");\n+        String renamedTable = getTestTableName(\"test_rename_new\");\n+        assertUpdate(\"ALTER TABLE \" + tableName + \" RENAME TO \" + renamedTable);\n+        assertQuery(\"SELECT x FROM \" + renamedTable, \"VALUES 123\");\n \n-        assertUpdate(\"ALTER TABLE test_rename_new RENAME TO TEST_RENAME\"); // 'TEST_RENAME' is upper-case, not delimited\n+        String uppercaseName = getTestTableName(\"TEST_RENAME\");\n+        assertUpdate(\"ALTER TABLE \" + renamedTable + \" RENAME TO \" + uppercaseName); // 'TEST_RENAME' is upper-case, not delimited\n         assertQuery(\n-                \"SELECT x FROM test_rename\", // 'test_rename' is lower-case, not delimited\n+                \"SELECT x FROM \" + uppercaseName.toLowerCase(ENGLISH), // 'test_rename' is lower-case, not delimited\n                 \"VALUES 123\");\n \n-        assertUpdate(\"DROP TABLE test_rename\");\n+        assertUpdate(\"DROP TABLE \" + uppercaseName);\n \n-        assertFalse(getQueryRunner().tableExists(getSession(), \"test_rename\"));\n-        assertFalse(getQueryRunner().tableExists(getSession(), \"test_rename_new\"));\n+        assertFalse(getQueryRunner().tableExists(getSession(), tableName));\n+        assertFalse(getQueryRunner().tableExists(getSession(), renamedTable));\n     }\n \n     @Test\n     public void testCommentTable()\n     {\n-        assertUpdate(\"CREATE TABLE test_comment(id integer)\");\n+        String tableName = getTestTableName(\"test_comment\");\n+        assertUpdate(\"CREATE TABLE \" + tableName + \"(id integer)\");\n \n-        assertUpdate(\"COMMENT ON TABLE test_comment IS 'new comment'\");\n-        MaterializedResult materializedRows = computeActual(\"SHOW CREATE TABLE test_comment\");\n+        assertUpdate(\"COMMENT ON TABLE \" + tableName + \" IS 'new comment'\");\n+        MaterializedResult materializedRows = computeActual(\"SHOW CREATE TABLE \" + tableName);\n         assertTrue(materializedRows.getMaterializedRows().get(0).getField(0).toString().contains(\"COMMENT 'new comment'\"));\n \n-        assertUpdate(\"COMMENT ON TABLE test_comment IS ''\");\n-        materializedRows = computeActual(\"SHOW CREATE TABLE test_comment\");\n+        assertUpdate(\"COMMENT ON TABLE \" + tableName + \" IS ''\");\n+        materializedRows = computeActual(\"SHOW CREATE TABLE \" + tableName);\n         assertTrue(materializedRows.getMaterializedRows().get(0).getField(0).toString().contains(\"COMMENT ''\"));\n \n-        assertUpdate(\"COMMENT ON TABLE test_comment IS NULL\");\n-        materializedRows = computeActual(\"SHOW CREATE TABLE test_comment\");\n+        assertUpdate(\"COMMENT ON TABLE \" + tableName + \" IS NULL\");\n+        materializedRows = computeActual(\"SHOW CREATE TABLE \" + tableName);\n         assertFalse(materializedRows.getMaterializedRows().get(0).getField(0).toString().contains(\"COMMENT\"));\n \n-        assertUpdate(\"DROP TABLE test_comment\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n     @Test\n     public void testRenameColumn()\n     {\n-        assertUpdate(\"CREATE TABLE test_rename_column AS SELECT 'some value' x\", 1);\n+        String tableName = getTestTableName(\"test_rename_column\");\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT 'some value' x\", 1);\n \n-        assertUpdate(\"ALTER TABLE test_rename_column RENAME COLUMN x TO y\");\n-        assertQuery(\"SELECT y FROM test_rename_column\", \"VALUES 'some value'\");\n+        assertUpdate(\"ALTER TABLE \" + tableName + \" RENAME COLUMN x TO y\");\n+        assertQuery(\"SELECT y FROM \" + tableName, \"VALUES 'some value'\");\n \n-        assertUpdate(\"ALTER TABLE test_rename_column RENAME COLUMN y TO Z\"); // 'Z' is upper-case, not delimited\n+        assertUpdate(\"ALTER TABLE \" + tableName + \" RENAME COLUMN y TO Z\"); // 'Z' is upper-case, not delimited\n         assertQuery(\n-                \"SELECT z FROM test_rename_column\", // 'z' is lower-case, not delimited\n+                \"SELECT z FROM \" + tableName, // 'z' is lower-case, not delimited\n                 \"VALUES 'some value'\");\n \n         // There should be exactly one column\n-        assertQuery(\"SELECT * FROM test_rename_column\", \"VALUES 'some value'\");\n+        assertQuery(\"SELECT * FROM \" + tableName, \"VALUES 'some value'\");\n \n-        assertUpdate(\"DROP TABLE test_rename_column\");\n+        assertUpdate(\"DROP TABLE \" + tableName);\n     }\n \n     @Test\n     public void testDropColumn()\n     {\n-        assertUpdate(\"CREATE TABLE test_drop_column AS SELECT 123 x, 111 a\", 1);\n+        String tableName = getTestTableName(\"test_drop_column\");\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT 123 x, 111 a\", 1);\n \n-        assertUpdate(\"ALTER TABLE test_drop_column DROP COLUMN x\");\n-        assertQueryFails(\"SELECT x FROM test_drop_column\", \".* Column 'x' cannot be resolved\");\n+        assertUpdate(\"ALTER TABLE \" + tableName + \" DROP COLUMN x\");\n+        assertQueryFails(\"SELECT x FROM \" + tableName, \".* Column 'x' cannot be resolved\");\n \n-        assertQueryFails(\"ALTER TABLE test_drop_column DROP COLUMN a\", \".* Cannot drop the only column in a table\");\n+        assertQueryFails(\"ALTER TABLE \" + tableName + \" DROP COLUMN a\", \".* Cannot drop the only column in a table\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcyNzgyMg==", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416727822", "bodyText": "Added", "author": "alexjo2144", "createdAt": "2020-04-28T15:52:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1ODU4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTM3OQ==", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416159379", "bodyText": "It looks like only few tests left... so maybe let's continue the convention from other tests.", "author": "kokosing", "createdAt": "2020-04-27T21:24:47Z", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -154,41 +155,45 @@ public void testResetSession()\n     @Test\n     public void testCreateTable()\n     {\n-        assertUpdate(\"CREATE TABLE test_create (a bigint, b double, c varchar)\");\n-        assertTrue(getQueryRunner().tableExists(getSession(), \"test_create\"));\n-        assertTableColumnNames(\"test_create\", \"a\", \"b\", \"c\");\n+        String tableName = getTestTableName(\"test_create\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcyNzczOA==", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416727738", "bodyText": "Ah, I thought I had gotten them all. I just added a few that I missed the first round, but let me know if I missed any more.", "author": "alexjo2144", "createdAt": "2020-04-28T15:52:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1OTM3OQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgwNzY2Ng==", "url": "https://github.com/trinodb/trino/pull/3562#discussion_r416807666", "bodyText": "update the comment", "author": "findepi", "createdAt": "2020-04-28T17:49:34Z", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestDistributedQueries.java", "diffHunk": "@@ -349,94 +353,101 @@ protected void assertCreateTableAsSelect(Session session, @Language(\"SQL\") Strin\n     @Test\n     public void testRenameTable()\n     {\n-        assertUpdate(\"CREATE TABLE test_rename AS SELECT 123 x\", 1);\n+        String tableName = \"test_rename_\" + randomTableSuffix();\n+        assertUpdate(\"CREATE TABLE \" + tableName + \" AS SELECT 123 x\", 1);\n \n-        assertUpdate(\"ALTER TABLE test_rename RENAME TO test_rename_new\");\n-        assertQuery(\"SELECT x FROM test_rename_new\", \"VALUES 123\");\n+        String renamedTable = \"test_rename_new_\" + randomTableSuffix();\n+        assertUpdate(\"ALTER TABLE \" + tableName + \" RENAME TO \" + renamedTable);\n+        assertQuery(\"SELECT x FROM \" + renamedTable, \"VALUES 123\");\n \n-        assertUpdate(\"ALTER TABLE test_rename_new RENAME TO TEST_RENAME\"); // 'TEST_RENAME' is upper-case, not delimited\n+        String uppercaseName = \"TEST_RENAME_\" + randomTableSuffix();\n+        assertUpdate(\"ALTER TABLE \" + renamedTable + \" RENAME TO \" + uppercaseName); // 'TEST_RENAME' is upper-case, not delimited\n         assertQuery(\n-                \"SELECT x FROM test_rename\", // 'test_rename' is lower-case, not delimited\n+                \"SELECT x FROM \" + uppercaseName.toLowerCase(ENGLISH), // 'test_rename' is lower-case, not delimited", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f01751bec02d10f686018dba2a5b156a6f6f1cd3", "url": "https://github.com/trinodb/trino/commit/f01751bec02d10f686018dba2a5b156a6f6f1cd3", "message": "Add random suffix to all tables in TestDistributedQueries", "committedDate": "2020-04-28T18:14:02Z", "type": "commit"}, {"oid": "f01751bec02d10f686018dba2a5b156a6f6f1cd3", "url": "https://github.com/trinodb/trino/commit/f01751bec02d10f686018dba2a5b156a6f6f1cd3", "message": "Add random suffix to all tables in TestDistributedQueries", "committedDate": "2020-04-28T18:14:02Z", "type": "forcePushed"}]}