{"pr_number": 4080, "pr_title": "Support the SQL TRANSLATE function", "pr_createdAt": "2020-06-18T15:00:14Z", "pr_url": "https://github.com/trinodb/trino/pull/4080", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MDc2OA==", "url": "https://github.com/trinodb/trino/pull/4080#discussion_r442390768", "bodyText": "This could use checkCondition from Failures. We can also rephrase the error message a bit:\ncheckCondition(originalsCodePoints.length == translationsLength, INVALID_FUNCTION_ARGUMENT, \"Translate originals and translations must be the same length\");", "author": "electrum", "createdAt": "2020-06-18T17:31:49Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/StringFunctions.java", "diffHunk": "@@ -911,4 +913,42 @@ public static boolean startsWith(@SqlType(\"varchar(x)\") Slice source, @SqlType(\"\n         }\n         return source.compareTo(0, prefix.length(), prefix, 0, prefix.length()) == 0;\n     }\n+\n+    @Description(\"Translate characters from the source string based on original and translations strings\")\n+    @ScalarFunction\n+    @LiteralParameters({\"x\", \"y\", \"z\"})\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice translate(@SqlType(\"varchar(x)\") Slice source, @SqlType(\"varchar(y)\") Slice originals, @SqlType(\"varchar(z)\") Slice translations)\n+    {\n+        int[] translationsCodePoints = castToCodePoints(translations);\n+        int translationsLength = translationsCodePoints.length;\n+        int[] originalsCodePoints = castToCodePoints(originals);\n+        if (originalsCodePoints.length != translationsLength) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5NjI2NA==", "url": "https://github.com/trinodb/trino/pull/4080#discussion_r442396264", "bodyText": "You mentioned that previously but I spaced - - thanks; added.", "author": "djsstarburst", "createdAt": "2020-06-18T17:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MDc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MTE3Ng==", "url": "https://github.com/trinodb/trino/pull/4080#discussion_r442391176", "bodyText": "I think this can simplify to\nint translatedCodePoint = map.getOrDefault(codePoint, codePoint);", "author": "electrum", "createdAt": "2020-06-18T17:32:37Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/StringFunctions.java", "diffHunk": "@@ -911,4 +913,42 @@ public static boolean startsWith(@SqlType(\"varchar(x)\") Slice source, @SqlType(\"\n         }\n         return source.compareTo(0, prefix.length(), prefix, 0, prefix.length()) == 0;\n     }\n+\n+    @Description(\"Translate characters from the source string based on original and translations strings\")\n+    @ScalarFunction\n+    @LiteralParameters({\"x\", \"y\", \"z\"})\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice translate(@SqlType(\"varchar(x)\") Slice source, @SqlType(\"varchar(y)\") Slice originals, @SqlType(\"varchar(z)\") Slice translations)\n+    {\n+        int[] translationsCodePoints = castToCodePoints(translations);\n+        int translationsLength = translationsCodePoints.length;\n+        int[] originalsCodePoints = castToCodePoints(originals);\n+        if (originalsCodePoints.length != translationsLength) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, \"The length of the translate originals is not equal to the length of the translations\");\n+        }\n+\n+        Int2IntOpenHashMap map = new Int2IntOpenHashMap(translationsLength);\n+        for (int index = 0; index < translationsLength; index++) {\n+            map.put(originalsCodePoints[index], translationsCodePoints[index]);\n+        }\n+        int[] sourceCodePoints = castToCodePoints(source);\n+        int sourceLength = sourceCodePoints.length;\n+        int[] targetCodePoints = new int[sourceLength];\n+        int targetLength = 0;\n+        for (int index = 0; index < sourceLength; index++) {\n+            int codePoint = sourceCodePoints[index];\n+            int value = map.getOrDefault(codePoint, -1);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5NjA0OQ==", "url": "https://github.com/trinodb/trino/pull/4080#discussion_r442396049", "bodyText": "Good point; thanks!", "author": "djsstarburst", "createdAt": "2020-06-18T17:41:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MTE3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MTcwMw==", "url": "https://github.com/trinodb/trino/pull/4080#discussion_r442391703", "bodyText": "Does this not work? This seems like a good test case to have, either working or as an explicitly disallowed input.", "author": "electrum", "createdAt": "2020-06-18T17:33:29Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestStringFunctions.java", "diffHunk": "@@ -1046,4 +1046,27 @@ public void testCharConcat()\n \n         assertFunction(\"concat(cast(null as char(1)), cast(' ' as char(1)))\", createCharType(2), null);\n     }\n+\n+    @Test\n+    public void testTranslate()\n+    {\n+        //assertFunction(\"translate('abcd', '', '')\", VARCHAR, \"abcd\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMTU3NQ==", "url": "https://github.com/trinodb/trino/pull/4080#discussion_r442401575", "bodyText": "No, accidentally left commented out.  Fixed.", "author": "djsstarburst", "createdAt": "2020-06-18T17:51:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MTcwMw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzMjQzMw==", "url": "https://github.com/trinodb/trino/pull/4080#discussion_r444532433", "bodyText": "Please write these as full select queries that can be copy/pasted by the user:\nSELECT translate('abcd', '', ''); -- 'abcd'\nSo add SELECT and semicolon.", "author": "electrum", "createdAt": "2020-06-23T21:58:44Z", "path": "presto-docs/src/main/sphinx/functions/string.rst", "diffHunk": "@@ -168,6 +168,28 @@ String Functions\n     position ``start``. Positions start with ``1``. A negative starting\n     position is interpreted as being relative to the end of the string.\n \n+.. function:: translate(source, from, to) -> varchar\n+\n+   Returns the ``source`` string translated by replacing characters found in the\n+   ``from`` string with the corresponding characters in the ``to`` string.  If the ``from``\n+   string contains duplicates, only the first is used.  If the ``source`` character\n+   does not exist in the ``from`` string, the ``source`` character will be copied\n+   without translation.  If the index of the matching character in the ``from``\n+   string is beyond the length of the ``to`` string, the ``source`` character will\n+   be omitted from the resulting string.\n+\n+   Here are some examples illustrating the translate function::\n+\n+       translate('abcd', '', '') -- 'abcd'", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUzNzYxNg==", "url": "https://github.com/trinodb/trino/pull/4080#discussion_r444537616", "bodyText": "This \\u is actually a Java escape and not valid in SQL (it works in the test because it's translated by the Java compiler, so it's effectively a literal character in the SQL)\nWe can write this using the SQL U& syntax as documented here: https://prestosql.io/docs/current/language/types.html#string\nFor the output, we can paste the literal in directly.\nSELECT translate('abcd', 'b', U&'\\+01F600'); -- a\ud83d\ude00cd", "author": "electrum", "createdAt": "2020-06-23T22:12:36Z", "path": "presto-docs/src/main/sphinx/functions/string.rst", "diffHunk": "@@ -168,6 +168,28 @@ String Functions\n     position ``start``. Positions start with ``1``. A negative starting\n     position is interpreted as being relative to the end of the string.\n \n+.. function:: translate(source, from, to) -> varchar\n+\n+   Returns the ``source`` string translated by replacing characters found in the\n+   ``from`` string with the corresponding characters in the ``to`` string.  If the ``from``\n+   string contains duplicates, only the first is used.  If the ``source`` character\n+   does not exist in the ``from`` string, the ``source`` character will be copied\n+   without translation.  If the index of the matching character in the ``from``\n+   string is beyond the length of the ``to`` string, the ``source`` character will\n+   be omitted from the resulting string.\n+\n+   Here are some examples illustrating the translate function::\n+\n+       translate('abcd', '', '') -- 'abcd'\n+       translate('abcd', 'a', 'z') -- 'zbcd'\n+       translate('abcda', 'a', 'z') -- 'zbcdz'\n+       translate('Palho\u00e7a', '\u00e7','c') -- 'Palhoca'\n+       translate('abcd', 'b', '\\uD840\\uDC00') -- 'a\\uD840\\uDC00cd'", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bdc4f061639129cf3168a4abffc9f8798851401b", "url": "https://github.com/trinodb/trino/commit/bdc4f061639129cf3168a4abffc9f8798851401b", "message": "Support the SQL TRANSLATE function\n\nThis implementation follows the specification used by Postgres;\nsee the documentation section of this commit, which also includes\nillustrative examples.", "committedDate": "2020-06-23T23:15:43Z", "type": "commit"}, {"oid": "bdc4f061639129cf3168a4abffc9f8798851401b", "url": "https://github.com/trinodb/trino/commit/bdc4f061639129cf3168a4abffc9f8798851401b", "message": "Support the SQL TRANSLATE function\n\nThis implementation follows the specification used by Postgres;\nsee the documentation section of this commit, which also includes\nillustrative examples.", "committedDate": "2020-06-23T23:15:43Z", "type": "forcePushed"}]}