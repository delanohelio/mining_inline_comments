{"pr_number": 6185, "pr_title": "Ensure exactly single delivery of query completion event", "pr_createdAt": "2020-12-02T22:13:30Z", "pr_url": "https://github.com/trinodb/trino/pull/6185", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMzMzE2Mg==", "url": "https://github.com/trinodb/trino/pull/6185#discussion_r535333162", "bodyText": "remember to remove", "author": "findepi", "createdAt": "2020-12-03T15:31:06Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListenerBasic.java", "diffHunk": "@@ -259,7 +259,7 @@ public void testReferencedTablesAndRoutines()\n         assertEquals(routine.getAuthorization(), \"user\");\n     }\n \n-    @Test\n+    @Test(invocationCount = 100)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMzMzI3OA==", "url": "https://github.com/trinodb/trino/pull/6185#discussion_r535333278", "bodyText": "reminder", "author": "findepi", "createdAt": "2020-12-03T15:31:11Z", "path": ".github/workflows/ci.yml", "diffHunk": "@@ -239,7 +239,7 @@ jobs:\n           - \"presto-oracle\"\n           - \"presto-kudu\"\n           - \"presto-phoenix,presto-iceberg,presto-druid\"\n-    timeout-minutes: 60\n+    timeout-minutes: 180", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMzNDk2Mg==", "url": "https://github.com/trinodb/trino/pull/6185#discussion_r535334962", "bodyText": "private final\n\n\nremove false, as its the default (\"code style\" i guess)", "author": "findepi", "createdAt": "2020-12-03T15:32:18Z", "path": "presto-main/src/main/java/io/prestosql/dispatcher/LocalDispatchQuery.java", "diffHunk": "@@ -56,22 +56,27 @@\n     private final QueryStateMachine stateMachine;\n     private final ListenableFuture<QueryExecution> queryExecutionFuture;\n \n+    private final QueryMonitor queryMonitor;\n     private final ClusterSizeMonitor clusterSizeMonitor;\n \n     private final Executor queryExecutor;\n \n     private final Consumer<QueryExecution> querySubmitter;\n-    private final SettableFuture<DispatchStatus> submitted = SettableFuture.create();\n+    private final SettableFuture<?> submitted = SettableFuture.create();\n+\n+    AtomicBoolean notificationSentOrGuaranteed = new AtomicBoolean(false);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMzNjk4MA==", "url": "https://github.com/trinodb/trino/pull/6185#discussion_r535336980", "bodyText": "Previously queryExecutionFuture.cancel(true); was done only for FAILED state. Let's maybe retain that behavior, as it seems not related", "author": "findepi", "createdAt": "2020-12-03T15:33:47Z", "path": "presto-main/src/main/java/io/prestosql/dispatcher/LocalDispatchQuery.java", "diffHunk": "@@ -86,16 +91,16 @@ public LocalDispatchQuery(\n             }\n         });\n \n+        queryMonitor.queryCreatedEvent(stateMachine.getBasicQueryInfo(Optional.empty()));\n         stateMachine.addStateChangeListener(state -> {\n             if (state == QueryState.FAILED) {\n-                // if query is failed and dispatching was not finished yet, marking dispatching as failed\n-                submitted.set(FAILED);\n-                queryExecutionFuture.cancel(true);\n+                if (notificationSentOrGuaranteed.compareAndSet(false, true)) {\n+                    queryMonitor.queryImmediateFailureEvent(getBasicQueryInfo(), getFullQueryInfo().getFailureInfo());\n+                }\n             }\n-\n-            if (state.ordinal() > QueryState.DISPATCHING.ordinal()) {\n-                // we went past dispatching phase; warking submitted as successful\n-                submitted.set(DISPATCHED);\n+            if (state.isDone()) {\n+                submitted.set(null);\n+                queryExecutionFuture.cancel(true);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM0NzQ5Ng==", "url": "https://github.com/trinodb/trino/pull/6185#discussion_r535347496", "bodyText": "Actually a bit before my changes (see screenshot) it was done for all finished states. Not entiryly sure why I changed that. But given fact that we are rolling back the protocol I introduced it feels natural to rollback this change too:", "author": "losipiuk", "createdAt": "2020-12-03T15:43:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMzNjk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMzNzcxOQ==", "url": "https://github.com/trinodb/trino/pull/6185#discussion_r535337719", "bodyText": "too many empty line\n(this is fixed in the TMP commit)", "author": "findepi", "createdAt": "2020-12-03T15:34:28Z", "path": "presto-main/src/main/java/io/prestosql/dispatcher/LocalDispatchQueryFactory.java", "diffHunk": "@@ -110,7 +109,7 @@ public DispatchQuery createDispatchQuery(\n                 warningCollector,\n                 StatementUtils.getQueryType(preparedQuery.getStatement().getClass()));\n \n-        queryMonitor.queryCreatedEvent(stateMachine.getBasicQueryInfo(Optional.empty()));\n+", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMzODU0Nw==", "url": "https://github.com/trinodb/trino/pull/6185#discussion_r535338547", "bodyText": "separate commit, or revert", "author": "findepi", "createdAt": "2020-12-03T15:35:13Z", "path": "presto-main/src/main/java/io/prestosql/execution/SqlQueryManager.java", "diffHunk": "@@ -323,8 +315,8 @@ private void enforceScanLimits()\n             Optional<DataSize> limitOpt = getQueryMaxScanPhysicalBytes(query.getSession());\n             if (maxQueryScanPhysicalBytes.isPresent()) {\n                 limitOpt = limitOpt\n-                    .flatMap(sessionLimit -> maxQueryScanPhysicalBytes.map(serverLimit -> Ordering.natural().min(serverLimit, sessionLimit)))\n-                    .or(() -> maxQueryScanPhysicalBytes);\n+                        .flatMap(sessionLimit -> maxQueryScanPhysicalBytes.map(serverLimit -> Ordering.natural().min(serverLimit, sessionLimit)))\n+                        .or(() -> maxQueryScanPhysicalBytes);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1b2ce509109eb816af51a7efdd399315bace0394", "url": "https://github.com/trinodb/trino/commit/1b2ce509109eb816af51a7efdd399315bace0394", "message": "Ensure exactly single delivery of query completion event", "committedDate": "2020-12-03T15:46:59Z", "type": "commit"}, {"oid": "1b2ce509109eb816af51a7efdd399315bace0394", "url": "https://github.com/trinodb/trino/commit/1b2ce509109eb816af51a7efdd399315bace0394", "message": "Ensure exactly single delivery of query completion event", "committedDate": "2020-12-03T15:46:59Z", "type": "forcePushed"}]}