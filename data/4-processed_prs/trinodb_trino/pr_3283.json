{"pr_number": 3283, "pr_title": "Support syntax and AST building for Materialized View Commands ...", "pr_createdAt": "2020-03-30T13:43:16Z", "pr_url": "https://github.com/trinodb/trino/pull/3283", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3OTc1NA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r421479754", "bodyText": "Refresh design is outlined here: https://docs.google.com/document/d/1GYIyEhJQ3ngvOPmJYWU-8zwDQRCMXkBDZaSn3c3MF0k/edit# , please ignore the open question here.", "author": "anjalinorwood", "createdAt": "2020-05-07T12:53:26Z", "path": "presto-main/src/main/java/io/prestosql/execution/RefreshMaterializedViewTask.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.QualifiedObjectName;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.parser.SqlParser;\n+import io.prestosql.sql.tree.Expression;\n+import io.prestosql.sql.tree.RefreshMaterializedView;\n+import io.prestosql.transaction.TransactionManager;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n+import static io.prestosql.metadata.MetadataUtil.createQualifiedObjectName;\n+import static java.util.Objects.requireNonNull;\n+\n+public class RefreshMaterializedViewTask\n+        implements DataDefinitionTask<RefreshMaterializedView>\n+{\n+    private final SqlParser sqlParser;\n+\n+    @Inject\n+    public RefreshMaterializedViewTask(SqlParser sqlParser, FeaturesConfig featuresConfig)\n+    {\n+        this.sqlParser = requireNonNull(sqlParser, \"sqlParser is null\");\n+        requireNonNull(featuresConfig, \"featuresConfig is null\");\n+    }\n+\n+    @Override\n+    public String getName()\n+    {\n+        return \"REFRESH MATERIALIZED VIEW\";\n+    }\n+\n+    @Override\n+    public String explain(RefreshMaterializedView statement, List<Expression> parameters)\n+    {\n+        return \"REFRESH MATERIALIZED VIEW \" + statement.getName();\n+    }\n+\n+    @Override\n+    public ListenableFuture<?> execute(RefreshMaterializedView statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n+    {\n+        Session session = stateMachine.getSession();\n+        QualifiedObjectName name = createQualifiedObjectName(session, statement, statement.getName());\n+\n+        accessControl.checkCanDeleteFromTable(session.toSecurityContext(), name);\n+        accessControl.checkCanInsertIntoTable(session.toSecurityContext(), name);\n+\n+        // OPEN QUESTION", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNzg1OQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r436207859", "bodyText": "There's a major revamp of the planner on the way, so you may want to rebase on that change to avoid conflicts later on: #3600", "author": "martint", "createdAt": "2020-06-05T23:41:09Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -409,6 +414,80 @@ private RelationPlan createInsertPlan(Analysis analysis, Insert insertStatement)\n                 statisticsMetadata);\n     }\n \n+    private RelationPlan createRefreshMVPlan(Analysis analysis, RefreshMV refreshMVStatement)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MjIwMg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r436752202", "bodyText": "ok, will do. Temporarily turning the PR to 'Draft' to make frequent changes and ensure that tests pass. Thanks.", "author": "anjalinorwood", "createdAt": "2020-06-08T14:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNzg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2NzcyMw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r438167723", "bodyText": "Hi Martin, I rebased this code on top of PR #3600 and is also rebased on top of master. Can you please give it a look? Thanks.", "author": "anjalinorwood", "createdAt": "2020-06-10T14:30:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwNzg1OQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2MjMzNw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r438462337", "bodyText": "Place each argument on a separate line when splitting across multiple lines.", "author": "martint", "createdAt": "2020-06-10T23:31:42Z", "path": "presto-main/src/main/java/io/prestosql/execution/CreateMaterializedViewTask.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.QualifiedObjectName;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.ConnectorMaterializedViewDefinition;\n+import io.prestosql.sql.analyzer.Analysis;\n+import io.prestosql.sql.analyzer.Analyzer;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.parser.SqlParser;\n+import io.prestosql.sql.tree.CreateMaterializedView;\n+import io.prestosql.sql.tree.Expression;\n+import io.prestosql.sql.tree.NodeRef;\n+import io.prestosql.sql.tree.Parameter;\n+import io.prestosql.sql.tree.Statement;\n+import io.prestosql.transaction.TransactionManager;\n+\n+import javax.inject.Inject;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n+import static io.prestosql.metadata.MetadataUtil.createQualifiedObjectName;\n+import static io.prestosql.spi.StandardErrorCode.NOT_FOUND;\n+import static io.prestosql.spi.connector.ConnectorViewDefinition.ViewColumn;\n+import static io.prestosql.sql.NodeUtils.mapFromProperties;\n+import static io.prestosql.sql.ParameterUtils.parameterExtractor;\n+import static io.prestosql.sql.SqlFormatterUtil.getFormattedSql;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CreateMaterializedViewTask\n+        implements DataDefinitionTask<CreateMaterializedView>\n+{\n+    private final SqlParser sqlParser;\n+\n+    @Inject\n+    public CreateMaterializedViewTask(SqlParser sqlParser, FeaturesConfig featuresConfig)\n+    {\n+        this.sqlParser = requireNonNull(sqlParser, \"sqlParser is null\");\n+        requireNonNull(featuresConfig, \"featuresConfig is null\");\n+    }\n+\n+    @Override\n+    public String getName()\n+    {\n+        return \"CREATE MATERIALIZED VIEW\";\n+    }\n+\n+    @Override\n+    public String explain(CreateMaterializedView statement, List<Expression> parameters)\n+    {\n+        return \"CREATE MATERIALIZED VIEW \" + statement.getName();\n+    }\n+\n+    @Override\n+    public ListenableFuture<?> execute(CreateMaterializedView statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n+    {\n+        Session session = stateMachine.getSession();\n+        QualifiedObjectName name = createQualifiedObjectName(session, statement, statement.getName());\n+        Map<NodeRef<Parameter>, Expression> parameterLookup = parameterExtractor(statement, parameters);\n+\n+        accessControl.checkCanCreateView(session.toSecurityContext(), name);\n+        accessControl.checkCanCreateTable(session.toSecurityContext(), name);\n+\n+        String sql = getFormattedSql(statement.getQuery(), sqlParser);\n+\n+        Analysis analysis = analyzeStatement(statement, session, metadata, accessControl, parameters, parameterLookup, stateMachine.getWarningCollector(), sql);\n+\n+        List<ViewColumn> columns = analysis.getOutputDescriptor(statement.getQuery())\n+                .getVisibleFields().stream()\n+                .map(field -> new ViewColumn(field.getName().get(), field.getType().getTypeId()))\n+                .collect(toImmutableList());\n+\n+        Optional<String> owner = Optional.of(session.getUser());\n+\n+        CatalogName catalogName = metadata.getCatalogHandle(session, name.getCatalogName())\n+                .orElseThrow(() -> new PrestoException(NOT_FOUND, \"Catalog does not exist: \" + name.getCatalogName()));\n+\n+        Map<String, Expression> sqlProperties = mapFromProperties(statement.getProperties());\n+        Map<String, Object> properties = metadata.getTablePropertyManager().getProperties(\n+                catalogName,\n+                name.getCatalogName(),\n+                sqlProperties,\n+                session,\n+                metadata,\n+                accessControl,\n+                parameterLookup);\n+\n+        Map<String, Object> finalProperties = combineProperties(sqlProperties.keySet(), properties);\n+\n+        ConnectorMaterializedViewDefinition definition = new ConnectorMaterializedViewDefinition(\n+                sql,\n+                null,\n+                session.getCatalog(),\n+                session.getSchema(),\n+                columns,\n+                owner,\n+                false,\n+                statement.getComment(),\n+                finalProperties);\n+\n+        metadata.createMaterializedView(session, name, definition, statement.isReplace(), statement.isNotExists());\n+\n+        return immediateFuture(null);\n+    }\n+\n+    private Analysis analyzeStatement(Statement statement, Session session, Metadata metadata, AccessControl accessControl, List<Expression> parameters,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2NTQ4Nw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r438465487", "bodyText": "This method is a no-op. The !finalProperties.containsKey(entry.getKey()) will cause every entry from defaultProperties to be copied to the result map. It's equivalent to just returning the input map.", "author": "martint", "createdAt": "2020-06-10T23:43:02Z", "path": "presto-main/src/main/java/io/prestosql/execution/CreateMaterializedViewTask.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.QualifiedObjectName;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.ConnectorMaterializedViewDefinition;\n+import io.prestosql.sql.analyzer.Analysis;\n+import io.prestosql.sql.analyzer.Analyzer;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.parser.SqlParser;\n+import io.prestosql.sql.tree.CreateMaterializedView;\n+import io.prestosql.sql.tree.Expression;\n+import io.prestosql.sql.tree.NodeRef;\n+import io.prestosql.sql.tree.Parameter;\n+import io.prestosql.sql.tree.Statement;\n+import io.prestosql.transaction.TransactionManager;\n+\n+import javax.inject.Inject;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n+import static io.prestosql.metadata.MetadataUtil.createQualifiedObjectName;\n+import static io.prestosql.spi.StandardErrorCode.NOT_FOUND;\n+import static io.prestosql.spi.connector.ConnectorViewDefinition.ViewColumn;\n+import static io.prestosql.sql.NodeUtils.mapFromProperties;\n+import static io.prestosql.sql.ParameterUtils.parameterExtractor;\n+import static io.prestosql.sql.SqlFormatterUtil.getFormattedSql;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CreateMaterializedViewTask\n+        implements DataDefinitionTask<CreateMaterializedView>\n+{\n+    private final SqlParser sqlParser;\n+\n+    @Inject\n+    public CreateMaterializedViewTask(SqlParser sqlParser, FeaturesConfig featuresConfig)\n+    {\n+        this.sqlParser = requireNonNull(sqlParser, \"sqlParser is null\");\n+        requireNonNull(featuresConfig, \"featuresConfig is null\");\n+    }\n+\n+    @Override\n+    public String getName()\n+    {\n+        return \"CREATE MATERIALIZED VIEW\";\n+    }\n+\n+    @Override\n+    public String explain(CreateMaterializedView statement, List<Expression> parameters)\n+    {\n+        return \"CREATE MATERIALIZED VIEW \" + statement.getName();\n+    }\n+\n+    @Override\n+    public ListenableFuture<?> execute(CreateMaterializedView statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n+    {\n+        Session session = stateMachine.getSession();\n+        QualifiedObjectName name = createQualifiedObjectName(session, statement, statement.getName());\n+        Map<NodeRef<Parameter>, Expression> parameterLookup = parameterExtractor(statement, parameters);\n+\n+        accessControl.checkCanCreateView(session.toSecurityContext(), name);\n+        accessControl.checkCanCreateTable(session.toSecurityContext(), name);\n+\n+        String sql = getFormattedSql(statement.getQuery(), sqlParser);\n+\n+        Analysis analysis = analyzeStatement(statement, session, metadata, accessControl, parameters, parameterLookup, stateMachine.getWarningCollector(), sql);\n+\n+        List<ViewColumn> columns = analysis.getOutputDescriptor(statement.getQuery())\n+                .getVisibleFields().stream()\n+                .map(field -> new ViewColumn(field.getName().get(), field.getType().getTypeId()))\n+                .collect(toImmutableList());\n+\n+        Optional<String> owner = Optional.of(session.getUser());\n+\n+        CatalogName catalogName = metadata.getCatalogHandle(session, name.getCatalogName())\n+                .orElseThrow(() -> new PrestoException(NOT_FOUND, \"Catalog does not exist: \" + name.getCatalogName()));\n+\n+        Map<String, Expression> sqlProperties = mapFromProperties(statement.getProperties());\n+        Map<String, Object> properties = metadata.getTablePropertyManager().getProperties(\n+                catalogName,\n+                name.getCatalogName(),\n+                sqlProperties,\n+                session,\n+                metadata,\n+                accessControl,\n+                parameterLookup);\n+\n+        Map<String, Object> finalProperties = combineProperties(sqlProperties.keySet(), properties);\n+\n+        ConnectorMaterializedViewDefinition definition = new ConnectorMaterializedViewDefinition(\n+                sql,\n+                null,\n+                session.getCatalog(),\n+                session.getSchema(),\n+                columns,\n+                owner,\n+                false,\n+                statement.getComment(),\n+                finalProperties);\n+\n+        metadata.createMaterializedView(session, name, definition, statement.isReplace(), statement.isNotExists());\n+\n+        return immediateFuture(null);\n+    }\n+\n+    private Analysis analyzeStatement(Statement statement, Session session, Metadata metadata, AccessControl accessControl, List<Expression> parameters,\n+        Map<NodeRef<Parameter>, Expression> parameterLookup, WarningCollector warningCollector, String query)\n+    {\n+        Analyzer analyzer = new Analyzer(session, metadata, sqlParser, accessControl, Optional.empty(), parameters, parameterLookup, warningCollector);\n+        return analyzer.analyze(statement);\n+    }\n+\n+    private static Map<String, Object> combineProperties(Set<String> specifiedPropertyKeys, Map<String, Object> defaultProperties)\n+    {\n+        Map<String, Object> finalProperties = new HashMap<>();\n+        for (Map.Entry<String, Object> entry : defaultProperties.entrySet()) {\n+            if (specifiedPropertyKeys.contains(entry.getKey()) || !finalProperties.containsKey(entry.getKey())) {\n+                finalProperties.put(entry.getKey(), entry.getValue());\n+            }\n+        }\n+        return finalProperties;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyMTc2NA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r439121764", "bodyText": "yes, you are right. Fixed.", "author": "anjalinorwood", "createdAt": "2020-06-11T23:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2NTQ4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2NTgyMA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r438465820", "bodyText": "Why both?", "author": "martint", "createdAt": "2020-06-10T23:44:08Z", "path": "presto-main/src/main/java/io/prestosql/execution/CreateMaterializedViewTask.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.QualifiedObjectName;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.ConnectorMaterializedViewDefinition;\n+import io.prestosql.sql.analyzer.Analysis;\n+import io.prestosql.sql.analyzer.Analyzer;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.parser.SqlParser;\n+import io.prestosql.sql.tree.CreateMaterializedView;\n+import io.prestosql.sql.tree.Expression;\n+import io.prestosql.sql.tree.NodeRef;\n+import io.prestosql.sql.tree.Parameter;\n+import io.prestosql.sql.tree.Statement;\n+import io.prestosql.transaction.TransactionManager;\n+\n+import javax.inject.Inject;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n+import static io.prestosql.metadata.MetadataUtil.createQualifiedObjectName;\n+import static io.prestosql.spi.StandardErrorCode.NOT_FOUND;\n+import static io.prestosql.spi.connector.ConnectorViewDefinition.ViewColumn;\n+import static io.prestosql.sql.NodeUtils.mapFromProperties;\n+import static io.prestosql.sql.ParameterUtils.parameterExtractor;\n+import static io.prestosql.sql.SqlFormatterUtil.getFormattedSql;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CreateMaterializedViewTask\n+        implements DataDefinitionTask<CreateMaterializedView>\n+{\n+    private final SqlParser sqlParser;\n+\n+    @Inject\n+    public CreateMaterializedViewTask(SqlParser sqlParser, FeaturesConfig featuresConfig)\n+    {\n+        this.sqlParser = requireNonNull(sqlParser, \"sqlParser is null\");\n+        requireNonNull(featuresConfig, \"featuresConfig is null\");\n+    }\n+\n+    @Override\n+    public String getName()\n+    {\n+        return \"CREATE MATERIALIZED VIEW\";\n+    }\n+\n+    @Override\n+    public String explain(CreateMaterializedView statement, List<Expression> parameters)\n+    {\n+        return \"CREATE MATERIALIZED VIEW \" + statement.getName();\n+    }\n+\n+    @Override\n+    public ListenableFuture<?> execute(CreateMaterializedView statement, TransactionManager transactionManager, Metadata metadata, AccessControl accessControl, QueryStateMachine stateMachine, List<Expression> parameters)\n+    {\n+        Session session = stateMachine.getSession();\n+        QualifiedObjectName name = createQualifiedObjectName(session, statement, statement.getName());\n+        Map<NodeRef<Parameter>, Expression> parameterLookup = parameterExtractor(statement, parameters);\n+\n+        accessControl.checkCanCreateView(session.toSecurityContext(), name);\n+        accessControl.checkCanCreateTable(session.toSecurityContext(), name);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2NzU1Ng==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r438467556", "bodyText": "Also, permissions are being checked in the analyzer, as well, so this is redundant", "author": "martint", "createdAt": "2020-06-10T23:50:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2NTgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2MDAxNQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r439060015", "bodyText": "You are right, the permissions are being checked in Analyzer. So, I will remove this code.\nI think here is how access checks should be done (current code is not complete/correct .. will fix).\n\nStatementAnalyzer:visitCreateMaterializedView:\n\nCheck 'canCreateView' with materialized view name as parameter\nCheck 'canCreateTable' with storage table name as parameter\n\n\nDropMaterializedViewTask:execute:\n\nCheck 'canDropView' with materialized view name as parameter\ncheck 'canDropTable' with storage table name as parameter\n\n\nRefresh materialized view is broken into delete/insert etc .. so those commands perform access control checks.\nWhat do you think?", "author": "anjalinorwood", "createdAt": "2020-06-11T20:42:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2NTgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3NTg0Mg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r442575842", "bodyText": "That makes sense. We need to make sure the refresh actions execute with the permissions of the owner of the materialized view. We need to consider how that will work, if at all, for credential pass-through.", "author": "martint", "createdAt": "2020-06-19T00:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2NTgyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNjQxNw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r463816417", "bodyText": "We talked offline about credential passthrough. It does not work as expected for views as well and materialized views emulate the view design. So, for now, we will document that credential passthrough is not supported with materialized views.", "author": "anjalinorwood", "createdAt": "2020-07-31T20:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2NTgyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2NjM4NA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r438466384", "bodyText": "No need to wrap arguments here.", "author": "martint", "createdAt": "2020-06-10T23:46:03Z", "path": "presto-main/src/main/java/io/prestosql/metadata/Metadata.java", "diffHunk": "@@ -508,4 +509,25 @@ default ResolvedFunction getCoercion(Type fromType, Type toType)\n     ColumnPropertyManager getColumnPropertyManager();\n \n     AnalyzePropertyManager getAnalyzePropertyManager();\n+\n+    /**\n+     * Creates the specified materialized view with the specified view definition.\n+     */\n+    void createMaterializedView(Session session, QualifiedObjectName viewName, ConnectorMaterializedViewDefinition definition, boolean replace,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2NjUxNA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r438466514", "bodyText": "No need to wrap arguments here", "author": "martint", "createdAt": "2020-06-10T23:46:24Z", "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -1054,6 +1055,46 @@ public void dropView(Session session, QualifiedObjectName viewName)\n         metadata.dropView(session.toConnectorSession(catalogName), viewName.asSchemaTableName());\n     }\n \n+    @Override\n+    public void createMaterializedView(Session session, QualifiedObjectName viewName, ConnectorMaterializedViewDefinition definition, boolean replace,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2NzkyMw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r438467923", "bodyText": "No need to wrap arguments here", "author": "martint", "createdAt": "2020-06-10T23:51:13Z", "path": "presto-main/src/test/java/io/prestosql/metadata/AbstractMockMetadata.java", "diffHunk": "@@ -710,4 +711,29 @@ public AnalyzePropertyManager getAnalyzePropertyManager()\n     {\n         return Optional.empty();\n     }\n+\n+    @Override\n+    public void createMaterializedView(Session session, QualifiedObjectName viewName, ConnectorMaterializedViewDefinition definition, boolean replace,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2ODE1MQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r438468151", "bodyText": "SECURITY INVOKER doesn't make sense for materialized views. They need to run with DEFINER mode always, so let's just get rid of this", "author": "martint", "createdAt": "2020-06-10T23:51:55Z", "path": "presto-parser/src/main/antlr4/io/prestosql/sql/parser/SqlBase.g4", "diffHunk": "@@ -64,9 +64,17 @@ statement\n     | ALTER TABLE tableName=qualifiedName\n         ADD COLUMN column=columnDefinition                             #addColumn\n     | ANALYZE qualifiedName (WITH properties)?                         #analyze\n+    | CREATE (OR REPLACE)?  MATERIALIZED VIEW\n+        (IF NOT EXISTS)?\n+        qualifiedName\n+        (SECURITY (DEFINER | INVOKER))?", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNDI1Mw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r438824253", "bodyText": "Done. (I had done it as a part of 'additional syntax' commit, but that commit is going away, so using this commit to remove the 'security' mode code).", "author": "anjalinorwood", "createdAt": "2020-06-11T14:22:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2ODE1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2ODQyOQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r438468429", "bodyText": "See comment above", "author": "martint", "createdAt": "2020-06-10T23:52:46Z", "path": "presto-parser/src/main/java/io/prestosql/sql/parser/AstBuilder.java", "diffHunk": "@@ -348,6 +352,57 @@ public Node visitCreateTable(SqlBaseParser.CreateTableContext context)\n                 comment);\n     }\n \n+    @Override\n+    public Node visitCreateMaterializedView(SqlBaseParser.CreateMaterializedViewContext context)\n+    {\n+        Optional<String> comment = Optional.empty();\n+        if (context.COMMENT() != null) {\n+            comment = Optional.of(((StringLiteral) visit(context.string())).getValue());\n+        }\n+\n+        List<Property> properties = ImmutableList.of();\n+        if (context.properties() != null) {\n+            properties = visit(context.properties().property(), Property.class);\n+        }\n+\n+        Optional<CreateMaterializedView.Security> security = Optional.empty();\n+        if (context.DEFINER() != null) {\n+            security = Optional.of(CreateMaterializedView.Security.DEFINER);\n+        }\n+        else if (context.INVOKER() != null) {\n+            security = Optional.of(CreateMaterializedView.Security.INVOKER);\n+        }", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgyNDQyNw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r438824427", "bodyText": "Done", "author": "anjalinorwood", "createdAt": "2020-06-11T14:23:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2ODQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2ODQ5Mg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r438468492", "bodyText": "Don't use final for local variables", "author": "martint", "createdAt": "2020-06-10T23:53:02Z", "path": "presto-parser/src/main/java/io/prestosql/sql/parser/AstBuilder.java", "diffHunk": "@@ -348,6 +352,57 @@ public Node visitCreateTable(SqlBaseParser.CreateTableContext context)\n                 comment);\n     }\n \n+    @Override\n+    public Node visitCreateMaterializedView(SqlBaseParser.CreateMaterializedViewContext context)\n+    {\n+        Optional<String> comment = Optional.empty();\n+        if (context.COMMENT() != null) {\n+            comment = Optional.of(((StringLiteral) visit(context.string())).getValue());\n+        }\n+\n+        List<Property> properties = ImmutableList.of();\n+        if (context.properties() != null) {\n+            properties = visit(context.properties().property(), Property.class);\n+        }\n+\n+        Optional<CreateMaterializedView.Security> security = Optional.empty();\n+        if (context.DEFINER() != null) {\n+            security = Optional.of(CreateMaterializedView.Security.DEFINER);\n+        }\n+        else if (context.INVOKER() != null) {\n+            security = Optional.of(CreateMaterializedView.Security.INVOKER);\n+        }\n+\n+        final Token start = context.query().start;\n+        final Interval interval = new Interval(start.getStartIndex(), context.stop.getStopIndex());\n+        final Optional<String> originalSql = Optional.of(start.getInputStream().getText(interval));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2ODc4MA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r438468780", "bodyText": "Place each argument on a separate line when splitting across multiple lines.", "author": "martint", "createdAt": "2020-06-10T23:53:58Z", "path": "presto-parser/src/main/java/io/prestosql/sql/tree/CreateMaterializedView.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CreateMaterializedView\n+        extends Statement\n+{\n+    public enum Security\n+    {\n+        INVOKER, DEFINER\n+    }\n+\n+    private final QualifiedName name;\n+    private final Query query;\n+    private final boolean replace;\n+    private final boolean notExists;\n+    private final List<Property> properties;\n+    private final Optional<String> comment;\n+    private final Optional<String> originalSql;\n+    private final Optional<CreateMaterializedView.Security> security;\n+\n+    public CreateMaterializedView(Optional<NodeLocation> location, QualifiedName name, Query query, boolean replace, boolean notExists,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2OTA1OA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r438469058", "bodyText": "Why is this being stored in textual form in this class?", "author": "martint", "createdAt": "2020-06-10T23:54:59Z", "path": "presto-parser/src/main/java/io/prestosql/sql/tree/CreateMaterializedView.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CreateMaterializedView\n+        extends Statement\n+{\n+    public enum Security\n+    {\n+        INVOKER, DEFINER\n+    }\n+\n+    private final QualifiedName name;\n+    private final Query query;\n+    private final boolean replace;\n+    private final boolean notExists;\n+    private final List<Property> properties;\n+    private final Optional<String> comment;\n+    private final Optional<String> originalSql;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA2NjM3Mg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r439066372", "bodyText": "Sorry, neither needed nor should it be here. Removed.", "author": "anjalinorwood", "createdAt": "2020-06-11T20:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2OTA1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ2OTMzOQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r438469339", "bodyText": "No need to wrap arguments here", "author": "martint", "createdAt": "2020-06-10T23:55:54Z", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -848,4 +848,38 @@ default ConnectorTableProperties getTableProperties(ConnectorSession session, Co\n      * <p>\n      */\n     default void validateScan(ConnectorSession session, ConnectorTableHandle handle) {}\n+\n+    /**\n+     * Create the specified materialized view. The view definition is intended to\n+     * be serialized by the connector for permanent storage.\n+     */\n+    default void createMaterializedView(ConnectorSession session, SchemaTableName viewName, ConnectorMaterializedViewDefinition definition, boolean replace,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MDI2MQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r440380261", "bodyText": "Enhance the message to say:\n'writerTarget must be CreateTarget, InsertTarget or RefreshMVTarget'", "author": "anjalinorwood", "createdAt": "2020-06-15T18:55:18Z", "path": "presto-main/src/main/java/io/prestosql/operator/TableWriterOperator.java", "diffHunk": "@@ -89,7 +90,8 @@ public TableWriterOperatorFactory(\n             this.planNodeId = requireNonNull(planNodeId, \"planNodeId is null\");\n             this.columnChannels = requireNonNull(columnChannels, \"columnChannels is null\");\n             this.pageSinkManager = requireNonNull(pageSinkManager, \"pageSinkManager is null\");\n-            checkArgument(writerTarget instanceof CreateTarget || writerTarget instanceof InsertTarget, \"writerTarget must be CreateTarget or InsertTarget\");\n+            checkArgument(writerTarget instanceof CreateTarget || writerTarget instanceof InsertTarget || writerTarget instanceof TableWriterNode.RefreshMVTarget,\n+                    \"writerTarget must be CreateTarget or InsertTarget\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3Njc0Ng==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r442576746", "bodyText": "This shouldn't be a rewrite (actually, rewrites are a bit of a mis-feature). Instead, it should go through analysis and planning, similar to how views are resolved and expanded.", "author": "martint", "createdAt": "2020-06-19T00:58:28Z", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/RefreshMaterializedViewRewrite.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.rewrite;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Lists;\n+import io.prestosql.Session;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.QualifiedObjectName;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.spi.connector.ConnectorMaterializedViewDefinition;\n+import io.prestosql.sql.analyzer.QueryExplainer;\n+import io.prestosql.sql.parser.ParsingException;\n+import io.prestosql.sql.parser.SqlParser;\n+import io.prestosql.sql.tree.AstVisitor;\n+import io.prestosql.sql.tree.Expression;\n+import io.prestosql.sql.tree.Identifier;\n+import io.prestosql.sql.tree.Node;\n+import io.prestosql.sql.tree.NodeRef;\n+import io.prestosql.sql.tree.Parameter;\n+import io.prestosql.sql.tree.QualifiedName;\n+import io.prestosql.sql.tree.Query;\n+import io.prestosql.sql.tree.RefreshMV;\n+import io.prestosql.sql.tree.RefreshMaterializedView;\n+import io.prestosql.sql.tree.Statement;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static io.prestosql.metadata.MetadataUtil.createQualifiedObjectName;\n+import static io.prestosql.spi.StandardErrorCode.INVALID_VIEW;\n+import static io.prestosql.spi.StandardErrorCode.TABLE_NOT_FOUND;\n+import static io.prestosql.sql.ParsingUtil.createParsingOptions;\n+import static io.prestosql.sql.analyzer.SemanticExceptions.semanticException;\n+import static java.util.Objects.requireNonNull;\n+\n+final class RefreshMaterializedViewRewrite", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3NDIxOA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r454674218", "bodyText": "Done.", "author": "anjalinorwood", "createdAt": "2020-07-14T22:08:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3Njc0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3Njg4Mg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r442576882", "bodyText": "Don't use abbreviations. Cal this RefreshMaterializedView", "author": "martint", "createdAt": "2020-06-19T00:59:06Z", "path": "presto-parser/src/main/java/io/prestosql/sql/tree/RefreshMV.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class RefreshMV", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNzYyNg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r445817626", "bodyText": "Got it. Renamed all 'RefreshMV' classes to 'RefreshMaterializedView'. Variable names still use abbreviations.", "author": "anjalinorwood", "createdAt": "2020-06-25T20:25:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3Njg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3NzMyMg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r442577322", "bodyText": "The node should be a reflection of the query syntax. As such, the Query has no place here, since it's not something that would be typed as part of the REFRESH MATERIALIZED VIEW xxx command. I understand why you added it, but see my comment in RefreshMaterializedViewRewrite for how to approach it.", "author": "martint", "createdAt": "2020-06-19T01:00:57Z", "path": "presto-parser/src/main/java/io/prestosql/sql/tree/RefreshMV.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class RefreshMV\n+        extends Statement\n+{\n+    private final QualifiedName target;\n+    private final Query query;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNzc0NA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r445817744", "bodyText": "Got it.", "author": "anjalinorwood", "createdAt": "2020-06-25T20:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU3NzMyMg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyMzUwMQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452523501", "bodyText": "Rename notExists to ignoreExisting", "author": "martint", "createdAt": "2020-07-09T22:25:26Z", "path": "presto-main/src/main/java/io/prestosql/metadata/Metadata.java", "diffHunk": "@@ -508,4 +509,24 @@ default ResolvedFunction getCoercion(Type fromType, Type toType)\n     ColumnPropertyManager getColumnPropertyManager();\n \n     AnalyzePropertyManager getAnalyzePropertyManager();\n+\n+    /**\n+     * Creates the specified materialized view with the specified view definition.\n+     */\n+    void createMaterializedView(Session session, QualifiedObjectName viewName, ConnectorMaterializedViewDefinition definition, boolean replace, boolean notExists);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwMzQ4OQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r454703489", "bodyText": "Done", "author": "anjalinorwood", "createdAt": "2020-07-14T23:31:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyMzUwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyNzI5MQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452527291", "bodyText": "What does AbstractMap.SimpleEntry<Boolean, Optional<String>> represent? Consider adding a dedicated holder object for that concept instead of using AbstractMap.SimpleEntry, which is supposed to represent at key-value pair for a map.", "author": "martint", "createdAt": "2020-07-09T22:36:44Z", "path": "presto-main/src/main/java/io/prestosql/metadata/Metadata.java", "diffHunk": "@@ -529,4 +536,9 @@ default ResolvedFunction getCoercion(Type fromType, Type toType)\n      * Returns the materialized view definition for the specified view name.\n      */\n     Optional<ConnectorMaterializedViewDefinition> getMaterializedView(Session session, QualifiedObjectName viewName);\n+\n+    /**\n+     * Method for the engine to determine if a materialized view is current with respect to the tables it depends on.\n+     */\n+    AbstractMap.SimpleEntry<Boolean, Optional<String>> isMaterializedViewCurrent(Session session, TableHandle tableHandle);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQzMDA1Nw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r455430057", "bodyText": "Added 'MaterializedViewFreshness' class that has two fields isFresh and incrementalRefreshPredicate. Please suggest a better class name if you think of one. (I am horrible with names :-|).", "author": "anjalinorwood", "createdAt": "2020-07-15T23:53:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyNzI5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNDc1NQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452534755", "bodyText": "Place each argument on a separate line when splitting across multiple lines.", "author": "martint", "createdAt": "2020-07-09T22:59:51Z", "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -822,6 +823,34 @@ public boolean supportsMissingColumnsOnInsert(Session session, TableHandle table\n         return metadata.finishInsert(session.toConnectorSession(catalogName), tableHandle.getConnectorHandle(), fragments, computedStatistics);\n     }\n \n+    @Override\n+    public InsertTableHandle beginRefreshMaterializedView(Session session, TableHandle tableHandle, boolean skipRefresh)\n+    {\n+        CatalogName catalogName = tableHandle.getCatalogName();\n+        CatalogMetadata catalogMetadata = getCatalogMetadataForWrite(session, catalogName);\n+        ConnectorMetadata metadata = catalogMetadata.getMetadata();\n+        ConnectorTransactionHandle transactionHandle = catalogMetadata.getTransactionHandleFor(catalogName);\n+        ConnectorInsertTableHandle handle = metadata.beginRefreshMaterializedView(session.toConnectorSession(catalogName), tableHandle.getConnectorHandle(), skipRefresh);\n+        return new InsertTableHandle(tableHandle.getCatalogName(), transactionHandle, handle);\n+    }\n+\n+    @Override\n+    public Optional<ConnectorOutputMetadata> finishRefreshMaterializedView(Session session,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNDY2Ng==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r454704666", "bodyText": "Hmm, my version of code here shows each argument on a separate line. Are you seeing something else?", "author": "anjalinorwood", "createdAt": "2020-07-14T23:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNDc1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzOTI2Ng==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452539266", "bodyText": "Don't abbreviate the variable name.", "author": "martint", "createdAt": "2020-07-09T23:14:29Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analysis.java", "diffHunk": "@@ -162,6 +162,7 @@\n     private final Map<NodeRef<Unnest>, UnnestAnalysis> unnestAnalysis = new LinkedHashMap<>();\n     private Optional<Create> create = Optional.empty();\n     private Optional<Insert> insert = Optional.empty();\n+    private Optional<RefreshMaterializedView> refreshMV = Optional.empty();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNTMyMQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r454705321", "bodyText": "Done", "author": "anjalinorwood", "createdAt": "2020-07-14T23:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzOTI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzOTQ1NA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452539454", "bodyText": "Do not abbreviate variable names.", "author": "martint", "createdAt": "2020-07-09T23:15:04Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analysis.java", "diffHunk": "@@ -602,6 +603,16 @@ public void setInsert(Insert insert)\n         return insert;\n     }\n \n+    public void setRefreshMaterializedView(RefreshMaterializedView refreshMV)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNjUyMA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r454706520", "bodyText": "done", "author": "anjalinorwood", "createdAt": "2020-07-14T23:40:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzOTQ1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzOTk3Mg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452539972", "bodyText": "I'd suggest naming this RefreshMaterializedViewAnalysis", "author": "martint", "createdAt": "2020-07-09T23:16:43Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analysis.java", "diffHunk": "@@ -942,6 +953,44 @@ public TableHandle getTarget()\n         }\n     }\n \n+    @Immutable\n+    public static final class RefreshMaterializedView", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNzQ2MQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r454707461", "bodyText": "Done", "author": "anjalinorwood", "createdAt": "2020-07-14T23:44:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzOTk3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MTA2NA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452541064", "bodyText": "Don't abbreviate variable names (optionalMatView). Just call it optionalView", "author": "martint", "createdAt": "2020-07-09T23:20:30Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -439,6 +442,69 @@ protected Scope visitInsert(Insert insert, Optional<Scope> scope)\n             return createAndAssignScope(insert, scope, Field.newUnqualified(\"rows\", BIGINT));\n         }\n \n+        @Override\n+        protected Scope visitRefreshMaterializedView(RefreshMaterializedView refreshMaterializedView, Optional<Scope> scope)\n+        {\n+            QualifiedObjectName name = createQualifiedObjectName(session, refreshMaterializedView, refreshMaterializedView.getName());\n+            Optional<ConnectorMaterializedViewDefinition> optionalMatView = metadata.getMaterializedView(session, name);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwOTE4MQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r454709181", "bodyText": "done", "author": "anjalinorwood", "createdAt": "2020-07-14T23:49:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MTA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MTkxNQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452541915", "bodyText": "node isn't used.", "author": "martint", "createdAt": "2020-07-09T23:23:22Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1044,6 +1104,32 @@ protected Scope visitLateral(Lateral node, Optional<Scope> scope)\n             return createAndAssignScope(node, scope, queryScope.getRelationType());\n         }\n \n+        Optional<QualifiedName> getMaterializedViewStorageTableName(Node node, QualifiedObjectName name)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwODQzNA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r454708434", "bodyText": "Removed 'node'", "author": "anjalinorwood", "createdAt": "2020-07-14T23:47:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MTkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MjAxNg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452542016", "bodyText": "optionalMatView -> optionalView (avoid abbreviations)", "author": "martint", "createdAt": "2020-07-09T23:23:46Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1044,6 +1104,32 @@ protected Scope visitLateral(Lateral node, Optional<Scope> scope)\n             return createAndAssignScope(node, scope, queryScope.getRelationType());\n         }\n \n+        Optional<QualifiedName> getMaterializedViewStorageTableName(Node node, QualifiedObjectName name)\n+        {\n+            Optional<ConnectorMaterializedViewDefinition> optionalMatView = metadata.getMaterializedView(session, name);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwOTk5OQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r454709999", "bodyText": "done", "author": "anjalinorwood", "createdAt": "2020-07-14T23:52:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MjAxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MjM5MA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452542390", "bodyText": "This can be declared below where the assignment is made. I would just get rid of the variable altogether, though and inline it in the return call.", "author": "martint", "createdAt": "2020-07-09T23:24:55Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1044,6 +1104,32 @@ protected Scope visitLateral(Lateral node, Optional<Scope> scope)\n             return createAndAssignScope(node, scope, queryScope.getRelationType());\n         }\n \n+        Optional<QualifiedName> getMaterializedViewStorageTableName(Node node, QualifiedObjectName name)\n+        {\n+            Optional<ConnectorMaterializedViewDefinition> optionalMatView = metadata.getMaterializedView(session, name);\n+            if (!optionalMatView.isPresent()) {\n+                return Optional.empty();\n+            }\n+\n+            QualifiedName storageName;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxMzUwNg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r454713506", "bodyText": "right. done.", "author": "anjalinorwood", "createdAt": "2020-07-15T00:04:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MjM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MjU1NQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452542555", "bodyText": "private", "author": "martint", "createdAt": "2020-07-09T23:25:21Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1044,6 +1104,32 @@ protected Scope visitLateral(Lateral node, Optional<Scope> scope)\n             return createAndAssignScope(node, scope, queryScope.getRelationType());\n         }\n \n+        Optional<QualifiedName> getMaterializedViewStorageTableName(Node node, QualifiedObjectName name)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxMDUxMg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r454710512", "bodyText": "done", "author": "anjalinorwood", "createdAt": "2020-07-14T23:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MjU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MzA1Nw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452543057", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!optionalMatView.isPresent()) {\n          \n          \n            \n                        if (optionalMatView.isEmpty()) {", "author": "martint", "createdAt": "2020-07-09T23:26:58Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1044,6 +1104,32 @@ protected Scope visitLateral(Lateral node, Optional<Scope> scope)\n             return createAndAssignScope(node, scope, queryScope.getRelationType());\n         }\n \n+        Optional<QualifiedName> getMaterializedViewStorageTableName(Node node, QualifiedObjectName name)\n+        {\n+            Optional<ConnectorMaterializedViewDefinition> optionalMatView = metadata.getMaterializedView(session, name);\n+            if (!optionalMatView.isPresent()) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxMjg2OQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r454712869", "bodyText": "Done", "author": "anjalinorwood", "createdAt": "2020-07-15T00:02:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MzA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0Mzc3OQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452543779", "bodyText": "getProperties().getOrDefault(\"storage_table\", \"\") should be a proper attribute of ConnectorMaterializedViewDefinition. Storing it and accessing it as a dynamic property is brittle. Also, it might conflict with properties defined by the connector.", "author": "martint", "createdAt": "2020-07-09T23:29:07Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1044,6 +1104,32 @@ protected Scope visitLateral(Lateral node, Optional<Scope> scope)\n             return createAndAssignScope(node, scope, queryScope.getRelationType());\n         }\n \n+        Optional<QualifiedName> getMaterializedViewStorageTableName(Node node, QualifiedObjectName name)\n+        {\n+            Optional<ConnectorMaterializedViewDefinition> optionalMatView = metadata.getMaterializedView(session, name);\n+            if (!optionalMatView.isPresent()) {\n+                return Optional.empty();\n+            }\n+\n+            QualifiedName storageName;\n+\n+            String storageTable = String.valueOf(optionalMatView.get().getProperties().getOrDefault(\"storage_table\", \"\"));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2ODQzMw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r455968433", "bodyText": "I agree. Added it as an attribute,", "author": "anjalinorwood", "createdAt": "2020-07-16T17:55:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0Mzc3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NDQwMg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452544402", "bodyText": "schema is not used below. I belive viewExpandedText is being passed incorrectly in the position of catalog, and catalog is being passed in the position of schema.", "author": "martint", "createdAt": "2020-07-09T23:31:10Z", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMaterializedViewDefinition.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.StringJoiner;\n+\n+public class ConnectorMaterializedViewDefinition\n+        extends ConnectorViewDefinition\n+{\n+    private final Map<String, Object> properties;\n+    private final Optional<String> comment;\n+\n+    public Map<String, Object> getProperties()\n+    {\n+        return properties;\n+    }\n+\n+    @Override\n+    public Optional<String> getComment()\n+    {\n+        return comment;\n+    }\n+\n+    @JsonCreator\n+    public ConnectorMaterializedViewDefinition(\n+            @JsonProperty(\"originalSql\") String originalSql,\n+            @JsonProperty(\"viewExpandedText\") Optional<String> viewExpandedText,\n+            @JsonProperty(\"catalog\") Optional<String> catalog,\n+            @JsonProperty(\"schema\") Optional<String> schema,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcxNDQ1Ng==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r454714456", "bodyText": "Sorry, I made a local change as I was testing with Iceberg connector and forgot to push. The correct call looks like:\nsuper(originalSql, catalog, schema, columns, comment, owner, false);", "author": "anjalinorwood", "createdAt": "2020-07-15T00:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NDQwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NDg5Ng==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452544896", "bodyText": "I don't think we should model materialized views as subtypes of ConnectorViewDefinition. They are separate entities (despite their name) with their own characteristics and behaviors that don't necessarily line up with views.", "author": "martint", "createdAt": "2020-07-09T23:32:51Z", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMaterializedViewDefinition.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.StringJoiner;\n+\n+public class ConnectorMaterializedViewDefinition\n+        extends ConnectorViewDefinition", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MTQ3NA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r456591474", "bodyText": "Yes, I made the change now.", "author": "anjalinorwood", "createdAt": "2020-07-17T17:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NDg5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0ODI0NQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452548245", "bodyText": "What's viewExpandedText?", "author": "martint", "createdAt": "2020-07-09T23:43:50Z", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMaterializedViewDefinition.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.StringJoiner;\n+\n+public class ConnectorMaterializedViewDefinition\n+        extends ConnectorViewDefinition\n+{\n+    private final Map<String, Object> properties;\n+    private final Optional<String> comment;\n+\n+    public Map<String, Object> getProperties()\n+    {\n+        return properties;\n+    }\n+\n+    @Override\n+    public Optional<String> getComment()\n+    {\n+        return comment;\n+    }\n+\n+    @JsonCreator\n+    public ConnectorMaterializedViewDefinition(\n+            @JsonProperty(\"originalSql\") String originalSql,\n+            @JsonProperty(\"viewExpandedText\") Optional<String> viewExpandedText,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU5MTY1MQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r456591651", "bodyText": "Leftover from when materialized views extended views. Removed now.", "author": "anjalinorwood", "createdAt": "2020-07-17T17:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0ODI0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0ODc3MQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452548771", "bodyText": "These probably need to be \"delimited\" (new Identifier(..., true)) to avoid issues with case sensitivity or ambiguities.", "author": "martint", "createdAt": "2020-07-09T23:45:39Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1044,6 +1104,32 @@ protected Scope visitLateral(Lateral node, Optional<Scope> scope)\n             return createAndAssignScope(node, scope, queryScope.getRelationType());\n         }\n \n+        Optional<QualifiedName> getMaterializedViewStorageTableName(Node node, QualifiedObjectName name)\n+        {\n+            Optional<ConnectorMaterializedViewDefinition> optionalMatView = metadata.getMaterializedView(session, name);\n+            if (!optionalMatView.isPresent()) {\n+                return Optional.empty();\n+            }\n+\n+            QualifiedName storageName;\n+\n+            String storageTable = String.valueOf(optionalMatView.get().getProperties().getOrDefault(\"storage_table\", \"\"));\n+            if (StringUtils.isEmpty(storageTable)) {\n+                return Optional.empty();\n+            }\n+            Identifier catalogName = new Identifier(name.getCatalogName());\n+            Identifier schemaName = new Identifier(name.getSchemaName());\n+            Identifier tableName = new Identifier(storageTable);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQzNjgzNQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r455436835", "bodyText": "Done", "author": "anjalinorwood", "createdAt": "2020-07-16T00:15:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0ODc3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0OTg4MQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452549881", "bodyText": "There's nothing specific about \"materialized view storage table\" in this method -- it could work for any table. Since it's a rather trivial method, it's used in just one place, and it doesn't seem specific to materialized views, inline it and remove it.", "author": "martint", "createdAt": "2020-07-09T23:49:22Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1044,6 +1104,32 @@ protected Scope visitLateral(Lateral node, Optional<Scope> scope)\n             return createAndAssignScope(node, scope, queryScope.getRelationType());\n         }\n \n+        Optional<QualifiedName> getMaterializedViewStorageTableName(Node node, QualifiedObjectName name)\n+        {\n+            Optional<ConnectorMaterializedViewDefinition> optionalMatView = metadata.getMaterializedView(session, name);\n+            if (!optionalMatView.isPresent()) {\n+                return Optional.empty();\n+            }\n+\n+            QualifiedName storageName;\n+\n+            String storageTable = String.valueOf(optionalMatView.get().getProperties().getOrDefault(\"storage_table\", \"\"));\n+            if (StringUtils.isEmpty(storageTable)) {\n+                return Optional.empty();\n+            }\n+            Identifier catalogName = new Identifier(name.getCatalogName());\n+            Identifier schemaName = new Identifier(name.getSchemaName());\n+            Identifier tableName = new Identifier(storageTable);\n+            storageName = QualifiedName.of(ImmutableList.of(catalogName, schemaName, tableName));\n+            return Optional.of(storageName);\n+        }\n+\n+        Optional<TableHandle> getMaterializedViewStorageTableHandle(Node node, QualifiedName storageName)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE5NjA1OQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r455196059", "bodyText": "done", "author": "anjalinorwood", "createdAt": "2020-07-15T16:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0OTg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1Mjg0MQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452552841", "bodyText": "== true is unnecessary", "author": "martint", "createdAt": "2020-07-10T00:00:00Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1058,10 +1144,28 @@ protected Scope visitTable(Table table, Optional<Scope> scope)\n             QualifiedObjectName name = createQualifiedObjectName(session, table, table.getName());\n             analysis.addEmptyColumnReferencesForTable(accessControl, session.getIdentity(), name);\n \n-            // is this a reference to a view?\n-            Optional<ConnectorViewDefinition> optionalView = metadata.getView(session, name);\n-            if (optionalView.isPresent()) {\n-                return createScopeForView(table, name, scope, optionalView.get());\n+            // If this is a materialized view, get the name of the storage table\n+            Optional<QualifiedName> storageName = getMaterializedViewStorageTableName(table, name);\n+            Optional<TableHandle> storageHandle = Optional.empty();\n+            if (storageName.isPresent()) {\n+                storageHandle = getMaterializedViewStorageTableHandle(table, storageName.get());\n+            }\n+\n+            // If materialized view is current, answer the query using the storage table\n+            Identifier catalogName = new Identifier(name.getCatalogName());\n+            Identifier schemaName = new Identifier(name.getSchemaName());\n+            Identifier tableName = new Identifier(name.getObjectName());\n+            QualifiedName mvName = QualifiedName.of(ImmutableList.of(catalogName, schemaName, tableName));\n+            Optional<TableHandle> mvHandle = metadata.getTableHandle(session, createQualifiedObjectName(session, table, mvName));\n+            if (storageHandle.isPresent() && metadata.isMaterializedViewCurrent(session, mvHandle.get()).getKey() == true) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE5MTk0MQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r455191941", "bodyText": "done", "author": "anjalinorwood", "createdAt": "2020-07-15T16:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1Mjg0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1MjkyMQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452552921", "bodyText": "Don't abbreviate variable names", "author": "martint", "createdAt": "2020-07-10T00:00:17Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1058,10 +1144,28 @@ protected Scope visitTable(Table table, Optional<Scope> scope)\n             QualifiedObjectName name = createQualifiedObjectName(session, table, table.getName());\n             analysis.addEmptyColumnReferencesForTable(accessControl, session.getIdentity(), name);\n \n-            // is this a reference to a view?\n-            Optional<ConnectorViewDefinition> optionalView = metadata.getView(session, name);\n-            if (optionalView.isPresent()) {\n-                return createScopeForView(table, name, scope, optionalView.get());\n+            // If this is a materialized view, get the name of the storage table\n+            Optional<QualifiedName> storageName = getMaterializedViewStorageTableName(table, name);\n+            Optional<TableHandle> storageHandle = Optional.empty();\n+            if (storageName.isPresent()) {\n+                storageHandle = getMaterializedViewStorageTableHandle(table, storageName.get());\n+            }\n+\n+            // If materialized view is current, answer the query using the storage table\n+            Identifier catalogName = new Identifier(name.getCatalogName());\n+            Identifier schemaName = new Identifier(name.getSchemaName());\n+            Identifier tableName = new Identifier(name.getObjectName());\n+            QualifiedName mvName = QualifiedName.of(ImmutableList.of(catalogName, schemaName, tableName));\n+            Optional<TableHandle> mvHandle = metadata.getTableHandle(session, createQualifiedObjectName(session, table, mvName));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE5MTA3Nw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r455191077", "bodyText": "done", "author": "anjalinorwood", "createdAt": "2020-07-15T16:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1MjkyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1NDM3MA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452554370", "bodyText": "We already have the storage table handle at this point. No need to roundtrip again via the table name.", "author": "martint", "createdAt": "2020-07-10T00:05:46Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1058,10 +1144,28 @@ protected Scope visitTable(Table table, Optional<Scope> scope)\n             QualifiedObjectName name = createQualifiedObjectName(session, table, table.getName());\n             analysis.addEmptyColumnReferencesForTable(accessControl, session.getIdentity(), name);\n \n-            // is this a reference to a view?\n-            Optional<ConnectorViewDefinition> optionalView = metadata.getView(session, name);\n-            if (optionalView.isPresent()) {\n-                return createScopeForView(table, name, scope, optionalView.get());\n+            // If this is a materialized view, get the name of the storage table\n+            Optional<QualifiedName> storageName = getMaterializedViewStorageTableName(table, name);\n+            Optional<TableHandle> storageHandle = Optional.empty();\n+            if (storageName.isPresent()) {\n+                storageHandle = getMaterializedViewStorageTableHandle(table, storageName.get());\n+            }\n+\n+            // If materialized view is current, answer the query using the storage table\n+            Identifier catalogName = new Identifier(name.getCatalogName());\n+            Identifier schemaName = new Identifier(name.getSchemaName());\n+            Identifier tableName = new Identifier(name.getObjectName());\n+            QualifiedName mvName = QualifiedName.of(ImmutableList.of(catalogName, schemaName, tableName));\n+            Optional<TableHandle> mvHandle = metadata.getTableHandle(session, createQualifiedObjectName(session, table, mvName));\n+            if (storageHandle.isPresent() && metadata.isMaterializedViewCurrent(session, mvHandle.get()).getKey() == true) {\n+                name = createQualifiedObjectName(session, table, storageName.get());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE4ODEzNw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r455188137", "bodyText": "I moved the evaluation of 'tableHandle' up and simply assigned 'storageHandle' to 'tableHandle' at this point.", "author": "anjalinorwood", "createdAt": "2020-07-15T16:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1NDM3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1ODEyMg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452558122", "bodyText": "This change doesn't seem necessary.", "author": "martint", "createdAt": "2020-07-10T00:19:50Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1124,20 +1228,21 @@ private void analyzeFiltersAndMasks(Table table, QualifiedObjectName name, Optio\n                     .withRelationType(RelationId.anonymous(), new RelationType(fields))\n                     .build();\n \n+            final QualifiedObjectName finalName = name;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2NjMwNQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r455166305", "bodyText": "yes, reverted", "author": "anjalinorwood", "createdAt": "2020-07-15T16:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1ODEyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1ODQwMg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452558402", "bodyText": "Don't abbreviate names. In this case, it could be renamed to just refreshTarget as a concise and to-the-point name.", "author": "martint", "createdAt": "2020-07-10T00:20:47Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalExecutionPlanner.java", "diffHunk": "@@ -2906,6 +2906,11 @@ private static TableFinisher createTableFinisher(Session session, TableFinishNod\n             else if (target instanceof InsertTarget) {\n                 return metadata.finishInsert(session, ((InsertTarget) target).getHandle(), fragments, statistics);\n             }\n+            else if (target instanceof TableWriterNode.RefreshMaterializedViewTarget) {\n+                TableWriterNode.RefreshMaterializedViewTarget refreshMVTarget = (TableWriterNode.RefreshMaterializedViewTarget) target;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE1MTM4MA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r455151380", "bodyText": "done", "author": "anjalinorwood", "createdAt": "2020-07-15T15:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1ODQwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1OTQzMw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452559433", "bodyText": "Don't abbreviate variable names", "author": "martint", "createdAt": "2020-07-10T00:25:05Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -411,6 +416,76 @@ private RelationPlan createInsertPlan(Analysis analysis, Insert insertStatement)\n                 statisticsMetadata);\n     }\n \n+    private RelationPlan createRefreshMaterializedViewPlan(Analysis analysis)\n+    {\n+        Analysis.RefreshMaterializedView refreshMV = analysis.getRefreshMaterializedView().get();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0OTc2Ng==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r455149766", "bodyText": "renamed to 'refreshAnalysis'", "author": "anjalinorwood", "createdAt": "2020-07-15T15:41:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1OTQzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MjYyOA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452562628", "bodyText": "This looks exactly the same as createInsertPlan, except for that target table handles and a couple of other things. There's probably some opportunity for reuse, especially given the complexity of this method.", "author": "martint", "createdAt": "2020-07-10T00:38:20Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -411,6 +416,76 @@ private RelationPlan createInsertPlan(Analysis analysis, Insert insertStatement)\n                 statisticsMetadata);\n     }\n \n+    private RelationPlan createRefreshMaterializedViewPlan(Analysis analysis)\n+    {\n+        Analysis.RefreshMaterializedView refreshMV = analysis.getRefreshMaterializedView().get();\n+\n+        TableMetadata tableMetadata = metadata.getTableMetadata(session, refreshMV.getTarget());\n+\n+        RelationPlan plan = createRelationPlan(analysis, refreshMV.getQuery());\n+\n+        Map<String, ColumnHandle> columns = metadata.getColumnHandles(session, refreshMV.getTarget());\n+        Assignments.Builder assignments = Assignments.builder();\n+        boolean supportsMissingColumnsOnInsert = metadata.supportsMissingColumnsOnInsert(session, refreshMV.getTarget());\n+        ImmutableList.Builder<ColumnMetadata> insertedColumnsBuilder = ImmutableList.builder();\n+\n+        for (ColumnMetadata column : tableMetadata.getColumns()) {\n+            if (column.isHidden()) {\n+                continue;\n+            }\n+            Symbol output = symbolAllocator.newSymbol(column.getName(), column.getType());\n+            int index = refreshMV.getColumns().indexOf(columns.get(column.getName()));\n+            if (index < 0) {\n+                if (supportsMissingColumnsOnInsert) {\n+                    continue;\n+                }\n+                Expression cast = new Cast(new NullLiteral(), toSqlType(column.getType()));\n+                assignments.put(output, cast);\n+                insertedColumnsBuilder.add(column);\n+            }\n+            else {\n+                Symbol input = plan.getSymbol(index);\n+                Type tableType = column.getType();\n+                Type queryType = symbolAllocator.getTypes().get(input);\n+\n+                if (queryType.equals(tableType) || typeCoercion.isTypeOnlyCoercion(queryType, tableType)) {\n+                    assignments.put(output, input.toSymbolReference());\n+                }\n+                else {\n+                    Expression cast = noTruncationCast(input.toSymbolReference(), queryType, tableType);\n+                    assignments.put(output, cast);\n+                }\n+                insertedColumnsBuilder.add(column);\n+            }\n+        }\n+\n+        ProjectNode projectNode = new ProjectNode(idAllocator.getNextId(), plan.getRoot(), assignments.build());\n+\n+        List<ColumnMetadata> insertedColumns = insertedColumnsBuilder.build();\n+        List<Field> fields = insertedColumns.stream()\n+                .map(column -> Field.newUnqualified(column.getName(), column.getType()))\n+                .collect(toImmutableList());\n+        Scope scope = Scope.builder().withRelationType(RelationId.anonymous(), new RelationType(fields)).build();\n+\n+        plan = new RelationPlan(projectNode, scope, projectNode.getOutputSymbols(), Optional.empty());\n+\n+        String catalogName = refreshMV.getTarget().getCatalogName().getCatalogName();\n+        TableStatisticsMetadata statisticsMetadata = metadata.getStatisticsCollectionMetadataForWrite(session, catalogName, tableMetadata.getMetadata());\n+\n+        List<String> insertedTableColumnNames = insertedColumns.stream()\n+                .map(ColumnMetadata::getName)\n+                .collect(toImmutableList());\n+\n+        Optional<NewTableLayout> newTableLayout = metadata.getInsertLayout(session, refreshMV.getTarget());\n+        return createTableWriterPlan(\n+            analysis,\n+            plan,\n+            new TableWriterNode.RefreshMaterializedViewReference(refreshMV.getMaterializedViewHandle(), refreshMV.getTarget(), new ArrayList<>(analysis.getTables())),\n+            insertedTableColumnNames,\n+            newTableLayout,\n+            statisticsMetadata);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxNTg0MQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r463815841", "bodyText": "I did some refactoring .. let me know what you think.", "author": "anjalinorwood", "createdAt": "2020-07-31T20:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MjYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MjcyMQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452562721", "bodyText": "Unrelated formatting change", "author": "martint", "createdAt": "2020-07-10T00:38:53Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/QueryPlanner.java", "diffHunk": "@@ -307,7 +307,7 @@ private PlanBuilder planFrom(QuerySpecification node)\n \n         if (node.getFrom().isPresent()) {\n             relationPlan = new RelationPlanner(analysis, symbolAllocator, idAllocator, lambdaDeclarationToSymbolMap, metadata, outerContext, session)\n-                .process(node.getFrom().get(), null);\n+                    .process(node.getFrom().get(), null);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0NjY4NA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r455146684", "bodyText": "reverted", "author": "anjalinorwood", "createdAt": "2020-07-15T15:36:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MjcyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2Mjg0Mw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452562843", "bodyText": "ImmutableList.copyOf()", "author": "martint", "createdAt": "2020-07-10T00:39:20Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/TableWriterNode.java", "diffHunk": "@@ -317,6 +318,94 @@ public String toString()\n         }\n     }\n \n+    public static class RefreshMaterializedViewReference\n+            extends WriterTarget\n+    {\n+        private final TableHandle materializedViewHandle;\n+        private final TableHandle storageTableHandle;\n+        private final List<TableHandle> sourceTableHandles;\n+\n+        public RefreshMaterializedViewReference(TableHandle materializedViewHandle, TableHandle storageTableHandle, List<TableHandle> sourceTableHandles)\n+        {\n+            this.materializedViewHandle = requireNonNull(materializedViewHandle, \"Materialized view handle is null\");\n+            this.storageTableHandle = requireNonNull(storageTableHandle, \"Storage table handle is null\");\n+            this.sourceTableHandles = sourceTableHandles;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzNzMzNg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r455137336", "bodyText": "done", "author": "anjalinorwood", "createdAt": "2020-07-15T15:23:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2Mjg0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MjkxOA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452562918", "bodyText": "ImmutableList.copyOf()", "author": "martint", "createdAt": "2020-07-10T00:39:39Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/TableWriterNode.java", "diffHunk": "@@ -317,6 +318,94 @@ public String toString()\n         }\n     }\n \n+    public static class RefreshMaterializedViewReference\n+            extends WriterTarget\n+    {\n+        private final TableHandle materializedViewHandle;\n+        private final TableHandle storageTableHandle;\n+        private final List<TableHandle> sourceTableHandles;\n+\n+        public RefreshMaterializedViewReference(TableHandle materializedViewHandle, TableHandle storageTableHandle, List<TableHandle> sourceTableHandles)\n+        {\n+            this.materializedViewHandle = requireNonNull(materializedViewHandle, \"Materialized view handle is null\");\n+            this.storageTableHandle = requireNonNull(storageTableHandle, \"Storage table handle is null\");\n+            this.sourceTableHandles = sourceTableHandles;\n+        }\n+\n+        public TableHandle getMaterializedViewHandle()\n+        {\n+            return materializedViewHandle;\n+        }\n+\n+        public TableHandle getStorageTableHandle()\n+        {\n+            return storageTableHandle;\n+        }\n+\n+        public List<TableHandle> getSourceTableHandles()\n+        {\n+            return sourceTableHandles;\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return materializedViewHandle.toString();\n+        }\n+    }\n+\n+    public static class RefreshMaterializedViewTarget\n+            extends WriterTarget\n+    {\n+        private final InsertTableHandle handle;\n+        private final SchemaTableName schemaTableName;\n+        private final boolean skipRefresh;\n+        private final List<TableHandle> sourceTableHandles;\n+\n+        @JsonCreator\n+        public RefreshMaterializedViewTarget(\n+                @JsonProperty(\"handle\") InsertTableHandle handle,\n+                @JsonProperty(\"schemaTableName\") SchemaTableName schemaTableName,\n+                @JsonProperty(\"skipRefresh\") boolean skipRefresh,\n+                @JsonProperty(\"sourceTableHandles\") List<TableHandle> sourceTableHandles)\n+        {\n+            this.handle = handle;\n+            this.schemaTableName = requireNonNull(schemaTableName, \"schemaTableName is null\");\n+            this.skipRefresh = skipRefresh;\n+            this.sourceTableHandles = sourceTableHandles;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzNzE2NQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r455137165", "bodyText": "done", "author": "anjalinorwood", "createdAt": "2020-07-15T15:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MjkxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MzA1OA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r452563058", "bodyText": "requireNonNull", "author": "martint", "createdAt": "2020-07-10T00:40:15Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/plan/TableWriterNode.java", "diffHunk": "@@ -317,6 +318,94 @@ public String toString()\n         }\n     }\n \n+    public static class RefreshMaterializedViewReference\n+            extends WriterTarget\n+    {\n+        private final TableHandle materializedViewHandle;\n+        private final TableHandle storageTableHandle;\n+        private final List<TableHandle> sourceTableHandles;\n+\n+        public RefreshMaterializedViewReference(TableHandle materializedViewHandle, TableHandle storageTableHandle, List<TableHandle> sourceTableHandles)\n+        {\n+            this.materializedViewHandle = requireNonNull(materializedViewHandle, \"Materialized view handle is null\");\n+            this.storageTableHandle = requireNonNull(storageTableHandle, \"Storage table handle is null\");\n+            this.sourceTableHandles = sourceTableHandles;\n+        }\n+\n+        public TableHandle getMaterializedViewHandle()\n+        {\n+            return materializedViewHandle;\n+        }\n+\n+        public TableHandle getStorageTableHandle()\n+        {\n+            return storageTableHandle;\n+        }\n+\n+        public List<TableHandle> getSourceTableHandles()\n+        {\n+            return sourceTableHandles;\n+        }\n+\n+        @Override\n+        public String toString()\n+        {\n+            return materializedViewHandle.toString();\n+        }\n+    }\n+\n+    public static class RefreshMaterializedViewTarget\n+            extends WriterTarget\n+    {\n+        private final InsertTableHandle handle;\n+        private final SchemaTableName schemaTableName;\n+        private final boolean skipRefresh;\n+        private final List<TableHandle> sourceTableHandles;\n+\n+        @JsonCreator\n+        public RefreshMaterializedViewTarget(\n+                @JsonProperty(\"handle\") InsertTableHandle handle,\n+                @JsonProperty(\"schemaTableName\") SchemaTableName schemaTableName,\n+                @JsonProperty(\"skipRefresh\") boolean skipRefresh,\n+                @JsonProperty(\"sourceTableHandles\") List<TableHandle> sourceTableHandles)\n+        {\n+            this.handle = handle;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzMzY5Ng==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r455133696", "bodyText": "done", "author": "anjalinorwood", "createdAt": "2020-07-15T15:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MzA1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgzMTk2OQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r464831969", "bodyText": "@martint I had proposed that we perform checkCanCreateTable access check on storage table, but storage table name is generated by the connector and is not available at this point in code.\nTo keep code symmetric, dropMaterializedView also performs the checkCanDropTable check on materialized view.", "author": "anjalinorwood", "createdAt": "2020-08-04T06:40:34Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -925,6 +924,7 @@ protected Scope visitCreateMaterializedView(CreateMaterializedView node, Optiona\n             Scope queryScope = analyzer.analyze(node.getQuery(), scope);\n \n             accessControl.checkCanCreateView(session.toSecurityContext(), viewName);\n+            accessControl.checkCanCreateTable(session.toSecurityContext(), viewName);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgxMzExNw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r466813117", "bodyText": "That's for the case when the user doesn't specify a storage table right? In that case, it's appropriate to not check, since it's expected that the connector will generate a table the user has access to.\nFor the case where a user specifies a storage table, that should be validated.", "author": "martint", "createdAt": "2020-08-07T04:24:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgzMTk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5NzgwMw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r470597803", "bodyText": "Currently syntax does not allow the user to specify the storage table name (even though the extended syntax has the provision to build it in the future). So, I will remove the accessControl.checkCanCreateTable and accessControl.checkCanDropTable checks.", "author": "anjalinorwood", "createdAt": "2020-08-14T12:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgzMTk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgzNTIxNw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r464835217", "bodyText": "@martint I wanted to point out that, here we read materialized view like a logical view since it is stale. Another option would be:\nAnalyze materialized view to get columns and other attributes and create a new logical view and create scope for that. This analysis is necessary since the columns exposed by the materialized view is a single dummy column of type varchar. (This is similar to how a presto view exposes a single dummy column of type varchar).\nStoring actual column list at create materialized view time also poses issues since the column list needs to be a list of hive metastore columns and the connector does not have the correct TypeManager to do that conversion from SPI TypeId to hive column type.", "author": "anjalinorwood", "createdAt": "2020-08-04T06:48:37Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1143,22 +1134,23 @@ protected Scope visitTable(Table table, Optional<Scope> scope)\n \n             QualifiedObjectName name = createQualifiedObjectName(session, table, table.getName());\n             analysis.addEmptyColumnReferencesForTable(accessControl, session.getIdentity(), name);\n+            Optional<TableHandle> tableHandle = metadata.getTableHandle(session, name);\n \n             // If this is a materialized view, get the name of the storage table\n-            Optional<QualifiedName> storageName = getMaterializedViewStorageTableName(table, name);\n+            Optional<QualifiedName> storageName = getMaterializedViewStorageTableName(name);\n             Optional<TableHandle> storageHandle = Optional.empty();\n             if (storageName.isPresent()) {\n-                storageHandle = getMaterializedViewStorageTableHandle(table, storageName.get());\n+                storageHandle = metadata.getTableHandle(session, createQualifiedObjectName(session, table, storageName.get()));\n             }\n \n             // If materialized view is current, answer the query using the storage table\n             Identifier catalogName = new Identifier(name.getCatalogName());\n             Identifier schemaName = new Identifier(name.getSchemaName());\n             Identifier tableName = new Identifier(name.getObjectName());\n-            QualifiedName mvName = QualifiedName.of(ImmutableList.of(catalogName, schemaName, tableName));\n-            Optional<TableHandle> mvHandle = metadata.getTableHandle(session, createQualifiedObjectName(session, table, mvName));\n-            if (storageHandle.isPresent() && metadata.isMaterializedViewCurrent(session, mvHandle.get()).getKey() == true) {\n-                name = createQualifiedObjectName(session, table, storageName.get());\n+            QualifiedName materializedViewName = QualifiedName.of(ImmutableList.of(catalogName, schemaName, tableName));\n+            Optional<TableHandle> materializedViewHandle = metadata.getTableHandle(session, createQualifiedObjectName(session, table, materializedViewName));\n+            if (storageHandle.isPresent() && metadata.isMaterializedViewCurrent(session, materializedViewHandle.get()).getIsFresh()) {\n+                tableHandle = storageHandle;\n             }\n             else {\n                 // Either this is a reference to a logical view or the materialized view is not current and should be expanded like a logical view", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzOTQ3Mw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r471039473", "bodyText": "After our offline discussion. We analyze the materialized view and create scope for it similar to a logical view. This also checks for recursive materialized view definitions etc.", "author": "anjalinorwood", "createdAt": "2020-08-15T22:22:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgzNTIxNw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgxMjM3Nw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r466812377", "bodyText": "First argument should go on the next line", "author": "martint", "createdAt": "2020-08-07T04:21:02Z", "path": "presto-main/src/main/java/io/prestosql/execution/CreateMaterializedViewTask.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.QualifiedObjectName;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.ConnectorMaterializedViewDefinition;\n+import io.prestosql.sql.analyzer.Analysis;\n+import io.prestosql.sql.analyzer.Analyzer;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.parser.SqlParser;\n+import io.prestosql.sql.tree.CreateMaterializedView;\n+import io.prestosql.sql.tree.Expression;\n+import io.prestosql.sql.tree.NodeRef;\n+import io.prestosql.sql.tree.Parameter;\n+import io.prestosql.sql.tree.Statement;\n+import io.prestosql.transaction.TransactionManager;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n+import static io.prestosql.metadata.MetadataUtil.createQualifiedObjectName;\n+import static io.prestosql.spi.StandardErrorCode.NOT_FOUND;\n+import static io.prestosql.sql.NodeUtils.mapFromProperties;\n+import static io.prestosql.sql.ParameterUtils.parameterExtractor;\n+import static io.prestosql.sql.SqlFormatterUtil.getFormattedSql;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CreateMaterializedViewTask\n+        implements DataDefinitionTask<CreateMaterializedView>\n+{\n+    private final SqlParser sqlParser;\n+\n+    @Inject\n+    public CreateMaterializedViewTask(SqlParser sqlParser, FeaturesConfig featuresConfig)\n+    {\n+        this.sqlParser = requireNonNull(sqlParser, \"sqlParser is null\");\n+        requireNonNull(featuresConfig, \"featuresConfig is null\");\n+    }\n+\n+    @Override\n+    public String getName()\n+    {\n+        return \"CREATE MATERIALIZED VIEW\";\n+    }\n+\n+    @Override\n+    public String explain(CreateMaterializedView statement, List<Expression> parameters)\n+    {\n+        return \"CREATE MATERIALIZED VIEW \" + statement.getName();\n+    }\n+\n+    @Override\n+    public ListenableFuture<?> execute(CreateMaterializedView statement,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwNDg4Ng==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r470304886", "bodyText": "Unrelated formatting change", "author": "martint", "createdAt": "2020-08-13T23:35:38Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -294,14 +321,14 @@ private RelationPlan createAnalyzePlan(Analysis analysis, Analyze analyzeStateme\n         PlanNode planNode = new StatisticsWriterNode(\n                 idAllocator.getNextId(),\n                 new AggregationNode(\n-                        idAllocator.getNextId(),\n-                        TableScanNode.newInstance(idAllocator.getNextId(), targetTable, tableScanOutputs.build(), symbolToColumnHandle.build()),\n-                        statisticAggregations.getAggregations(),\n-                        singleGroupingSet(groupingSymbols),\n-                        ImmutableList.of(),\n-                        AggregationNode.Step.SINGLE,\n-                        Optional.empty(),\n-                        Optional.empty()),\n+                idAllocator.getNextId(),\n+                TableScanNode.newInstance(idAllocator.getNextId(), targetTable, tableScanOutputs.build(), symbolToColumnHandle.build()),\n+                statisticAggregations.getAggregations(),\n+                singleGroupingSet(groupingSymbols),\n+                ImmutableList.of(),\n+                AggregationNode.Step.SINGLE,\n+                Optional.empty(),\n+                Optional.empty()),\n                 new StatisticsWriterNode.WriteStatisticsReference(targetTable),", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyOTMxMQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r470629311", "bodyText": "fixed.", "author": "anjalinorwood", "createdAt": "2020-08-14T13:39:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwNDg4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwNDk2OA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r470304968", "bodyText": "Why did this get removed?", "author": "martint", "createdAt": "2020-08-13T23:35:55Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -123,13 +124,7 @@\n \n public class LogicalPlanner\n {\n-    public enum Stage\n-    {\n-        CREATED, OPTIMIZED, OPTIMIZED_AND_VALIDATED\n-    }\n-", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyODgzNA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r470628834", "bodyText": "reverted. Sorry, unintentional", "author": "anjalinorwood", "createdAt": "2020-08-14T13:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwNDk2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwNTAxNg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r470305016", "bodyText": "Unrelated formatting change", "author": "martint", "createdAt": "2020-08-13T23:36:04Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -123,13 +124,7 @@\n \n public class LogicalPlanner\n {\n-    public enum Stage\n-    {\n-        CREATED, OPTIMIZED, OPTIMIZED_AND_VALIDATED\n-    }\n-\n     private final PlanNodeIdAllocator idAllocator;\n-", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyODAyMg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r470628022", "bodyText": "reverted", "author": "anjalinorwood", "createdAt": "2020-08-14T13:36:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwNTAxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwNTEzOA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r470305138", "bodyText": "First argument should go on the next line", "author": "martint", "createdAt": "2020-08-13T23:36:30Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -341,25 +368,29 @@ private RelationPlan createTableCreationPlan(Analysis analysis, Query query)\n                 statisticsMetadata);\n     }\n \n-    private RelationPlan createInsertPlan(Analysis analysis, Insert insertStatement)\n+    private RelationPlan getInsertPlan(Analysis analysis,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyODQ3NA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r470628474", "bodyText": "done", "author": "anjalinorwood", "createdAt": "2020-08-14T13:37:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwNTEzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwNTI4OQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r470305289", "bodyText": "Unrelated formatting change?", "author": "martint", "createdAt": "2020-08-13T23:37:04Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -549,21 +610,21 @@ private Expression noTruncationCast(Expression expression, Type fromType, Type t\n         ResolvedFunction fail = metadata.resolveFunction(QualifiedName.of(\"fail\"), fromTypes(VARCHAR));\n \n         return new IfExpression(\n-                // check if the trimmed value fits in the target type\n-                new ComparisonExpression(\n-                        GREATER_THAN_OR_EQUAL,\n-                        new GenericLiteral(\"BIGINT\", Integer.toString(targetLength)),\n-                        new CoalesceExpression(\n-                                new FunctionCall(\n-                                        spaceTrimmedLength.toQualifiedName(),\n-                                        ImmutableList.of(new Cast(expression, toSqlType(VARCHAR)))),\n-                                new GenericLiteral(\"BIGINT\", \"0\"))),\n-                new Cast(expression, toSqlType(toType)),\n-                new Cast(\n-                        new FunctionCall(\n-                                fail.toQualifiedName(),\n-                                ImmutableList.of(new Cast(new StringLiteral(\"Cannot truncate non-space characters on INSERT\"), toSqlType(VARCHAR)))),\n-                        toSqlType(toType)));\n+            // check if the trimmed value fits in the target type\n+            new ComparisonExpression(\n+                GREATER_THAN_OR_EQUAL,\n+                new GenericLiteral(\"BIGINT\", Integer.toString(targetLength)),\n+                new CoalesceExpression(\n+                    new FunctionCall(\n+                        spaceTrimmedLength.toQualifiedName(),\n+                        ImmutableList.of(new Cast(expression, toSqlType(VARCHAR)))),\n+                    new GenericLiteral(\"BIGINT\", \"0\"))),\n+            new Cast(expression, toSqlType(toType)),\n+            new Cast(\n+                new FunctionCall(\n+                    fail.toQualifiedName(),\n+                    ImmutableList.of(new Cast(new StringLiteral(\"Cannot truncate non-space characters on INSERT\"), toSqlType(VARCHAR)))),\n+                toSqlType(toType)));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyNzc3OQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r470627779", "bodyText": "Yes, sorry, I went back and reverted all such unintentional formatting changes in this file.", "author": "anjalinorwood", "createdAt": "2020-08-14T13:36:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwNTI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwNTQ5NA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r470305494", "bodyText": "Why did this method move?", "author": "martint", "createdAt": "2020-08-13T23:37:42Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LogicalPlanner.java", "diffHunk": "@@ -179,6 +174,34 @@ public LogicalPlanner(\n         this.warningCollector = requireNonNull(warningCollector, \"warningCollector is null\");\n     }\n \n+    private static Map<NodeRef<LambdaArgumentDeclaration>, Symbol> buildLambdaDeclarationToSymbolMap(Analysis analysis, SymbolAllocator symbolAllocator)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyODYyNA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r470628624", "bodyText": "reverted. Sorry, unintentional", "author": "anjalinorwood", "createdAt": "2020-08-14T13:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwNTQ5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwNjAxNg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r470306016", "bodyText": "As we discussed offline, the freshness check and short-circuiting should be done in the RefreshMaterializedView task class, before we even get to the planner/optimizer.", "author": "martint", "createdAt": "2020-08-13T23:39:34Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/BeginTableWrite.java", "diffHunk": "@@ -187,6 +187,16 @@ private WriterTarget createWriterTarget(WriterTarget target)\n                 DeleteTarget delete = (DeleteTarget) target;\n                 return new DeleteTarget(metadata.beginDelete(session, delete.getHandle()), delete.getSchemaTableName());\n             }\n+            if (target instanceof TableWriterNode.RefreshMaterializedViewReference) {\n+                TableWriterNode.RefreshMaterializedViewReference refreshMV = (TableWriterNode.RefreshMaterializedViewReference) target;\n+                boolean skipRefresh = false;\n+\n+                if (metadata.isMaterializedViewCurrent(session, refreshMV.getMaterializedViewHandle()).getIsFresh()) {\n+                    skipRefresh = true;\n+                }\n+                return new TableWriterNode.RefreshMaterializedViewTarget(metadata.beginRefreshMaterializedView(session, refreshMV.getStorageTableHandle(), skipRefresh),", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzOTUwNw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r471039507", "bodyText": "We discussed offline. In statement analysis we figure out whether refresh should be skipped and if yes, planner plans a no-op plan.", "author": "anjalinorwood", "createdAt": "2020-08-15T22:23:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMwNjAxNg=="}], "type": "inlineReview"}, {"oid": "525b75f14844372817ffc85e8d69b918b22e17e7", "url": "https://github.com/trinodb/trino/commit/525b75f14844372817ffc85e8d69b918b22e17e7", "message": "skip refresh\n\nskip refresh connector api calls when materialized view is fresh", "committedDate": "2020-08-15T22:59:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNDg1OQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r473204859", "bodyText": "Let's make this more specific: isSkipMaterializedViewRefresh", "author": "martint", "createdAt": "2020-08-19T17:30:12Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analysis.java", "diffHunk": "@@ -214,6 +215,16 @@ public void resetUpdateType()\n         this.target = Optional.empty();\n     }\n \n+    public boolean isSkipRefresh()", "originalCommit": "525b75f14844372817ffc85e8d69b918b22e17e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQxNjI1Mg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r478416252", "bodyText": "Renamed the member variable and getter and setter.", "author": "anjalinorwood", "createdAt": "2020-08-27T13:24:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNDg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNzEyMw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r473207123", "bodyText": "First argument should go on the next line", "author": "martint", "createdAt": "2020-08-19T17:34:05Z", "path": "presto-main/src/main/java/io/prestosql/execution/CreateMaterializedViewTask.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.util.concurrent.ListenableFuture;\n+import io.prestosql.Session;\n+import io.prestosql.connector.CatalogName;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.QualifiedObjectName;\n+import io.prestosql.security.AccessControl;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.connector.ConnectorMaterializedViewDefinition;\n+import io.prestosql.sql.analyzer.Analysis;\n+import io.prestosql.sql.analyzer.Analyzer;\n+import io.prestosql.sql.analyzer.FeaturesConfig;\n+import io.prestosql.sql.parser.SqlParser;\n+import io.prestosql.sql.tree.CreateMaterializedView;\n+import io.prestosql.sql.tree.Expression;\n+import io.prestosql.sql.tree.NodeRef;\n+import io.prestosql.sql.tree.Parameter;\n+import io.prestosql.sql.tree.Statement;\n+import io.prestosql.transaction.TransactionManager;\n+\n+import javax.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.google.common.collect.ImmutableList.toImmutableList;\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n+import static io.prestosql.metadata.MetadataUtil.createQualifiedObjectName;\n+import static io.prestosql.spi.StandardErrorCode.NOT_FOUND;\n+import static io.prestosql.sql.NodeUtils.mapFromProperties;\n+import static io.prestosql.sql.ParameterUtils.parameterExtractor;\n+import static io.prestosql.sql.SqlFormatterUtil.getFormattedSql;\n+import static java.util.Objects.requireNonNull;\n+\n+public class CreateMaterializedViewTask\n+        implements DataDefinitionTask<CreateMaterializedView>\n+{\n+    private final SqlParser sqlParser;\n+\n+    @Inject\n+    public CreateMaterializedViewTask(SqlParser sqlParser, FeaturesConfig featuresConfig)\n+    {\n+        this.sqlParser = requireNonNull(sqlParser, \"sqlParser is null\");\n+        requireNonNull(featuresConfig, \"featuresConfig is null\");\n+    }\n+\n+    @Override\n+    public String getName()\n+    {\n+        return \"CREATE MATERIALIZED VIEW\";\n+    }\n+\n+    @Override\n+    public String explain(CreateMaterializedView statement, List<Expression> parameters)\n+    {\n+        return \"CREATE MATERIALIZED VIEW \" + statement.getName();\n+    }\n+\n+    @Override\n+    public ListenableFuture<?> execute(\n+            CreateMaterializedView statement,\n+            TransactionManager transactionManager,\n+            Metadata metadata,\n+            AccessControl accessControl,\n+            QueryStateMachine stateMachine,\n+            List<Expression> parameters)\n+    {\n+        Session session = stateMachine.getSession();\n+        QualifiedObjectName name = createQualifiedObjectName(session, statement, statement.getName());\n+        Map<NodeRef<Parameter>, Expression> parameterLookup = parameterExtractor(statement, parameters);\n+\n+        String sql = getFormattedSql(statement.getQuery(), sqlParser);\n+\n+        Analysis analysis = analyzeStatement(statement, session, metadata, accessControl, parameters, parameterLookup, stateMachine.getWarningCollector(), sql);\n+\n+        List<ConnectorMaterializedViewDefinition.Column> columns = analysis.getOutputDescriptor(statement.getQuery())\n+                .getVisibleFields().stream()\n+                .map(field -> new ConnectorMaterializedViewDefinition.Column(field.getName().get(), field.getType().getTypeId()))\n+                .collect(toImmutableList());\n+\n+        Optional<String> owner = Optional.of(session.getUser());\n+\n+        CatalogName catalogName = metadata.getCatalogHandle(session, name.getCatalogName())\n+                .orElseThrow(() -> new PrestoException(NOT_FOUND, \"Catalog does not exist: \" + name.getCatalogName()));\n+\n+        Map<String, Expression> sqlProperties = mapFromProperties(statement.getProperties());\n+        Map<String, Object> properties = metadata.getTablePropertyManager().getProperties(\n+                catalogName,\n+                name.getCatalogName(),\n+                sqlProperties,\n+                session,\n+                metadata,\n+                accessControl,\n+                parameterLookup);\n+\n+        ConnectorMaterializedViewDefinition definition = new ConnectorMaterializedViewDefinition(\n+                sql,\n+                null,\n+                session.getCatalog(),\n+                session.getSchema(),\n+                columns,\n+                statement.getComment(),\n+                owner,\n+                properties);\n+\n+        metadata.createMaterializedView(session, name, definition, statement.isReplace(), statement.isNotExists());\n+\n+        return immediateFuture(null);\n+    }\n+\n+    private Analysis analyzeStatement(Statement statement,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQxNzA1NQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r478417055", "bodyText": "done", "author": "anjalinorwood", "createdAt": "2020-08-27T13:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNzEyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzMjAwNQ==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r473232005", "bodyText": "One argument per line when breaking across multiple lines", "author": "martint", "createdAt": "2020-08-19T18:18:36Z", "path": "presto-main/src/main/java/io/prestosql/metadata/Metadata.java", "diffHunk": "@@ -264,6 +266,17 @@\n      */\n     Optional<ConnectorOutputMetadata> finishInsert(Session session, InsertTableHandle tableHandle, Collection<Slice> fragments, Collection<ComputedStatistics> computedStatistics);\n \n+    /**\n+     * Begin refresh materialized view query\n+     */\n+    InsertTableHandle beginRefreshMaterializedView(Session session, TableHandle tableHandle);\n+\n+    /**\n+     * Finish refresh materialized view query\n+     */\n+    Optional<ConnectorOutputMetadata> finishRefreshMaterializedView(Session session, InsertTableHandle tableHandle, Collection<Slice> fragments,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQxODU4Nw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r478418587", "bodyText": "done", "author": "anjalinorwood", "createdAt": "2020-08-27T13:27:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzMjAwNQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwODQxNg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r478608416", "bodyText": "This isn't used in this PR. Let's remove it.", "author": "martint", "createdAt": "2020-08-27T18:17:00Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/util/HiveUtil.java", "diffHunk": "@@ -677,6 +682,23 @@ public static ConnectorViewDefinition decodeViewData(String data)\n         return VIEW_CODEC.fromJson(bytes);\n     }\n \n+    public static String encodeMaterializedViewData(ConnectorMaterializedViewDefinition definition)\n+    {\n+        byte[] bytes = MATERIALIZED_VIEW_CODEC.toJsonBytes(definition);\n+        String data = Base64.getEncoder().encodeToString(bytes);\n+        return MATERIALIZED_VIEW_PREFIX + data + MATERIALIZED_VIEW_SUFFIX;\n+    }\n+\n+    public static ConnectorMaterializedViewDefinition decodeMaterializedViewData(String data)\n+    {\n+        checkCondition(data.startsWith(MATERIALIZED_VIEW_PREFIX), HIVE_INVALID_VIEW_DATA, \"Materialized View data missing prefix: %s\", data);\n+        checkCondition(data.endsWith(MATERIALIZED_VIEW_SUFFIX), HIVE_INVALID_VIEW_DATA, \"Materialized View data missing suffix: %s\", data);\n+        data = data.substring(MATERIALIZED_VIEW_PREFIX.length());\n+        data = data.substring(0, data.length() - MATERIALIZED_VIEW_SUFFIX.length());\n+        byte[] bytes = Base64.getDecoder().decode(data);\n+        return MATERIALIZED_VIEW_CODEC.fromJson(bytes);\n+    }\n+", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczMzY3OA==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r478733678", "bodyText": "Correct. Used in Iceberg connector only. Removed it.", "author": "anjalinorwood", "createdAt": "2020-08-27T22:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwODQxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwOTQ0Mw==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r478609443", "bodyText": "This isn't used. Let's remove it", "author": "martint", "createdAt": "2020-08-27T18:19:00Z", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/TableToken.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+public interface TableToken", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODczMzczNg==", "url": "https://github.com/trinodb/trino/pull/3283#discussion_r478733736", "bodyText": "Correct. Used in Iceberg connector only. Removed it.", "author": "anjalinorwood", "createdAt": "2020-08-27T22:38:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwOTQ0Mw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "abc24ae6d9ca5450f1e5ce7ea30666fd40f46404", "url": "https://github.com/trinodb/trino/commit/abc24ae6d9ca5450f1e5ce7ea30666fd40f46404", "message": "Support Materialized Views\n\nThis commit adds support for Materialized Views in Presto engine.\nMuch like a logical view, a materialized view has a SQL query associated with it.\nUnlike logical view, it stores data corresponding to the SQL query.\n\nThe commit adds support for commands like CREATE MATERIALIZED VIEW, REFRESH MATERIALIZED VIEW,\nSHOW CREATE MATERIALIZED VIEW and DROP MATERIALIZED VIEW.\nThe commit adds support for reading data from a  materialized view when it is fresh with\nrespect to its underlying base tables. When a materialized view is stale with respect to its\nbase tables, the materialized view is resolved to base tables using the associated definition.\nQuerying the materialized view always returns the current/fresh data irrespective of the state\nof the materialized view.\n\nA materialized view is modeled as a combination of a SQL definition and a storage table\nthat holds the data.\n\nThe \u2018Refresh Materialized View\u2019 command is implemented as follows:\nREFRESH MATERIALIZED VIEW Implementation:\n+ Refresh materialized view operation is implemented as a table writer that drops partitions from,\n  deletes data from and inserts data into the storage table as needed. The source of the data is\n  the query associated with the materialized view.\n+ A new type of TableWriterOperator, \u2018RefreshMaterializedViewTarget\u2019 is implemented. This translates\n  into two connector API calls \u2018beginRefreshMaterializedView\u2019 and \u2018finishRefreshMaterializedView\u2019.\n+ StatementAnalyzer determines if the materialized view is fresh and sets the flag in Analysis.\n  If the materialized view is fresh, logical planner plans the refresh operation as a no-op.\n+ The \u2018beginRefreshMaterializedView\u2019 implementation for a connector is expected to do the following:\n  + Start a transaction\n  + Drop specified partitions of the storage table based on input parameters (applicable only\n    for incremental refresh of the materialized view)\n  + Delete data from specified partitions of the storage table or all of the data from the\n    storage table based on input parameters (applicable for incremental refresh and full refresh\n    respectively)\n  + Return a ConnectorInsertTableHandle\n+ The \u2018finishRefreshMaterializedView\u2019 implementation for a connector is expected to do the following:\n  + Insert data into the storage table based on parameters\n  + Store the table tokens for the base tables in the storage table\n  + Commit the transaction.\n+ Note that the refresh materialized view operation is performed in the scope of a single\n  transaction in the connector.\n\nAccess control:\nGiven that materialized views can be seen as a combination of a view and a table,\naccess control for a CREATE MATERIALIZED VIEW command is a combination of access\nchecks for CREATE TABLE and CREATE VIEW commands.\nSimilarly, a REFRESH MATERIALIZED VIEW command is a combination of DELETE and INSERT\noperations and access checks for this command is a combination of access checks\nfor DELETE and INSERT.\nLastly, a DROP MATERIALIZED VIEW access check is a combination of DROP TABLE and\nDROP VIEW command.", "committedDate": "2020-08-31T20:32:51Z", "type": "commit"}, {"oid": "abc24ae6d9ca5450f1e5ce7ea30666fd40f46404", "url": "https://github.com/trinodb/trino/commit/abc24ae6d9ca5450f1e5ce7ea30666fd40f46404", "message": "Support Materialized Views\n\nThis commit adds support for Materialized Views in Presto engine.\nMuch like a logical view, a materialized view has a SQL query associated with it.\nUnlike logical view, it stores data corresponding to the SQL query.\n\nThe commit adds support for commands like CREATE MATERIALIZED VIEW, REFRESH MATERIALIZED VIEW,\nSHOW CREATE MATERIALIZED VIEW and DROP MATERIALIZED VIEW.\nThe commit adds support for reading data from a  materialized view when it is fresh with\nrespect to its underlying base tables. When a materialized view is stale with respect to its\nbase tables, the materialized view is resolved to base tables using the associated definition.\nQuerying the materialized view always returns the current/fresh data irrespective of the state\nof the materialized view.\n\nA materialized view is modeled as a combination of a SQL definition and a storage table\nthat holds the data.\n\nThe \u2018Refresh Materialized View\u2019 command is implemented as follows:\nREFRESH MATERIALIZED VIEW Implementation:\n+ Refresh materialized view operation is implemented as a table writer that drops partitions from,\n  deletes data from and inserts data into the storage table as needed. The source of the data is\n  the query associated with the materialized view.\n+ A new type of TableWriterOperator, \u2018RefreshMaterializedViewTarget\u2019 is implemented. This translates\n  into two connector API calls \u2018beginRefreshMaterializedView\u2019 and \u2018finishRefreshMaterializedView\u2019.\n+ StatementAnalyzer determines if the materialized view is fresh and sets the flag in Analysis.\n  If the materialized view is fresh, logical planner plans the refresh operation as a no-op.\n+ The \u2018beginRefreshMaterializedView\u2019 implementation for a connector is expected to do the following:\n  + Start a transaction\n  + Drop specified partitions of the storage table based on input parameters (applicable only\n    for incremental refresh of the materialized view)\n  + Delete data from specified partitions of the storage table or all of the data from the\n    storage table based on input parameters (applicable for incremental refresh and full refresh\n    respectively)\n  + Return a ConnectorInsertTableHandle\n+ The \u2018finishRefreshMaterializedView\u2019 implementation for a connector is expected to do the following:\n  + Insert data into the storage table based on parameters\n  + Store the table tokens for the base tables in the storage table\n  + Commit the transaction.\n+ Note that the refresh materialized view operation is performed in the scope of a single\n  transaction in the connector.\n\nAccess control:\nGiven that materialized views can be seen as a combination of a view and a table,\naccess control for a CREATE MATERIALIZED VIEW command is a combination of access\nchecks for CREATE TABLE and CREATE VIEW commands.\nSimilarly, a REFRESH MATERIALIZED VIEW command is a combination of DELETE and INSERT\noperations and access checks for this command is a combination of access checks\nfor DELETE and INSERT.\nLastly, a DROP MATERIALIZED VIEW access check is a combination of DROP TABLE and\nDROP VIEW command.", "committedDate": "2020-08-31T20:32:51Z", "type": "forcePushed"}]}