{"pr_number": 5043, "pr_title": "Add DynamicFilter#isAwaitable method", "pr_createdAt": "2020-09-01T10:53:00Z", "pr_url": "https://github.com/trinodb/trino/pull/5043", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkzMjkxOA==", "url": "https://github.com/trinodb/trino/pull/5043#discussion_r482932918", "bodyText": "Should there be short-circuiting here to declare the filter as complete as soon as one of the filters is an all ? (and equivalent change in isBlocked)", "author": "raunaqmorarka", "createdAt": "2020-09-03T12:17:17Z", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -223,8 +224,7 @@ public DynamicFilter createDynamicFilter(QueryId queryId, List<DynamicFilters.De\n             @Override\n             public boolean isComplete()\n             {\n-                return dynamicFilters.stream()\n-                        .allMatch(context.getDynamicFilterSummaries()::containsKey);\n+                return lazyDynamicFilterFutures.stream().allMatch(Future::isDone);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk2ODQ2Ng==", "url": "https://github.com/trinodb/trino/pull/5043#discussion_r482968466", "bodyText": "we intersect multiple DFs, ignore the above", "author": "raunaqmorarka", "createdAt": "2020-09-03T13:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkzMjkxOA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg4ODkwMA==", "url": "https://github.com/trinodb/trino/pull/5043#discussion_r486888900", "bodyText": "or !isBlocked.isDone() ?", "author": "findepi", "createdAt": "2020-09-11T09:10:19Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/LocalDynamicFiltersCollector.java", "diffHunk": "@@ -154,6 +154,12 @@ public synchronized boolean isComplete()\n             return futuresLeft == 0;\n         }\n \n+        @Override\n+        public synchronized boolean isAwaitable()\n+        {\n+            return futuresLeft > 0;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkxOTYxMA==", "url": "https://github.com/trinodb/trino/pull/5043#discussion_r486919610", "bodyText": "isBlocked will unblock when DF is narrowed down partially, but DF is still awaitable", "author": "sopel39", "createdAt": "2020-09-11T09:40:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg4ODkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MTk3Ng==", "url": "https://github.com/trinodb/trino/pull/5043#discussion_r486961976", "bodyText": "Yes, but then new isBlocked should be created, right?\nSo, in every moment current value of isBlocked.isBlocked() could be used here -- am i right?", "author": "findepi", "createdAt": "2020-09-11T10:40:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg4ODkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk3MjQyOA==", "url": "https://github.com/trinodb/trino/pull/5043#discussion_r486972428", "bodyText": "Yes, but then new isBlocked should be created, right?\n\nAh, right. Although futuresLeft > 0; seems more explicit", "author": "sopel39", "createdAt": "2020-09-11T11:03:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg4ODkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg5MDQwMg==", "url": "https://github.com/trinodb/trino/pull/5043#discussion_r486890402", "bodyText": "Grammar wise it could be phrased as\nReturns a future, which ...", "author": "findepi", "createdAt": "2020-09-11T09:11:42Z", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/DynamicFilter.java", "diffHunk": "@@ -43,7 +49,9 @@ public boolean isComplete()\n     };\n \n     /**\n-     * Block until dynamic filter is narrowed down.\n+     * Returned future blocks until dynamic filter is narrowed down. Future\n+     * completes immediately if filter cannot be narrowed down more or filter\n+     * cannot be waited for (consult result of {@link DynamicFilter#isAwaitable()} method).", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg5MjE2Mw==", "url": "https://github.com/trinodb/trino/pull/5043#discussion_r486892163", "bodyText": "why not just !splitProduced.get() ?", "author": "findepi", "createdAt": "2020-09-11T09:13:31Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestLazyCoordinatorDynamicFiltering.java", "diffHunk": "@@ -211,7 +211,7 @@ public void close()\n                         @Override\n                         public boolean isFinished()\n                         {\n-                            if (!dynamicFilter.isComplete() || !splitProduced.get()) {\n+                            if (dynamicFilter.isAwaitable() || !splitProduced.get()) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg5Mjc3OQ==", "url": "https://github.com/trinodb/trino/pull/5043#discussion_r486892779", "bodyText": "nit: why not fmt this just like isComplete above?", "author": "findepi", "createdAt": "2020-09-11T09:14:07Z", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -227,6 +227,12 @@ public boolean isComplete()\n                         .allMatch(context.getDynamicFilterSummaries()::containsKey);\n             }\n \n+            @Override\n+            public boolean isAwaitable()\n+            {\n+                return lazyDynamicFilterFutures.stream().anyMatch(future -> !future.isDone());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c2bba56a5baf8724c67ad8f23289418547358451", "url": "https://github.com/trinodb/trino/commit/c2bba56a5baf8724c67ad8f23289418547358451", "message": "Add DynamicFilter#isAwaitable method\n\nDynamicFilter#isAwaitable method can be used together with\nDynamicFilter#isBlocked to wait for narrowed dynamic filters.\nSome dynamic filters cannot be waited for (e.g for replicated joins).\nTherefore existing DynamicFilter#isComplete method cannot be used\nto determine if one can still wait for dynamic filter to be narrowed\n(isComplete could return false while isBlocked would return completed\nfuture immediatelly).", "committedDate": "2020-09-11T09:50:26Z", "type": "commit"}, {"oid": "c2bba56a5baf8724c67ad8f23289418547358451", "url": "https://github.com/trinodb/trino/commit/c2bba56a5baf8724c67ad8f23289418547358451", "message": "Add DynamicFilter#isAwaitable method\n\nDynamicFilter#isAwaitable method can be used together with\nDynamicFilter#isBlocked to wait for narrowed dynamic filters.\nSome dynamic filters cannot be waited for (e.g for replicated joins).\nTherefore existing DynamicFilter#isComplete method cannot be used\nto determine if one can still wait for dynamic filter to be narrowed\n(isComplete could return false while isBlocked would return completed\nfuture immediatelly).", "committedDate": "2020-09-11T09:50:26Z", "type": "forcePushed"}]}