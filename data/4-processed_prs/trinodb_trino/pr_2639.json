{"pr_number": 2639, "pr_title": "User mapping and impersonation docs", "pr_createdAt": "2020-01-27T13:46:34Z", "pr_url": "https://github.com/trinodb/trino/pull/2639", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNDIxNw==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378014217", "bodyText": "Should this be\n\nFile containing rules for mapping users.\n\nuser-extraction -> user-mapping", "author": "electrum", "createdAt": "2020-02-12T02:45:59Z", "path": "presto-docs/src/main/sphinx/security/ldap.rst", "diffHunk": "@@ -76,24 +76,29 @@ to the coordinator's ``config.properties`` file:\n     http-server.https.keystore.path=/etc/presto_keystore.jks\n     http-server.https.keystore.key=keystore_password\n \n-======================================================= ======================================================\n-Property                                                Description\n-======================================================= ======================================================\n-``http-server.authentication.type``                     Enable password authentication for the Presto\n-                                                        coordinator. Must be set to ``PASSWORD``.\n-``http-server.https.enabled``                           Enables HTTPS access for the Presto coordinator.\n-                                                        Should be set to ``true``. Default value is\n-                                                        ``false``.\n-``http-server.https.port``                              HTTPS server port.\n-``http-server.https.keystore.path``                     The location of the Java Keystore file that will be\n-                                                        used to secure TLS.\n-``http-server.https.keystore.key``                      The password for the keystore. This must match the\n-                                                        password you specified when creating the keystore.\n-``http-server.authentication.allow-forwarded-https``    Enable treating forwarded HTTPS requests over HTTP\n-                                                        as secure.  Requires the ``X-Forwarded-Proto`` header\n-                                                        to be set to ``https`` on forwarded requests.\n-                                                        Default value is ``false``.\n-======================================================= ======================================================\n+============================================================= ======================================================\n+Property                                                      Description\n+============================================================= ======================================================\n+``http-server.authentication.type``                           Enable password authentication for the Presto\n+                                                              coordinator. Must be set to ``PASSWORD``.\n+``http-server.https.enabled``                                 Enables HTTPS access for the Presto coordinator.\n+                                                              Should be set to ``true``. Default value is\n+                                                              ``false``.\n+``http-server.https.port``                                    HTTPS server port.\n+``http-server.https.keystore.path``                           The location of the Java Keystore file that will be\n+                                                              used to secure TLS.\n+``http-server.https.keystore.key``                            The password for the keystore. This must match the\n+                                                              password you specified when creating the keystore.\n+``http-server.authentication.allow-forwarded-https``          Enable treating forwarded HTTPS requests over HTTP\n+                                                              as secure.  Requires the ``X-Forwarded-Proto`` header\n+                                                              to be set to ``https`` on forwarded requests.\n+                                                              Default value is ``false``.\n+``http-server.authentication.password.user-mapping.pattern``  Regex to match against user.  If matched, user will be\n+                                                              replaced with first regex group. If not matched,\n+                                                              authentication is denied.  Default is ``(.*)``.\n+``http-server.authentication.password.user-extraction.file``  File containing rules for extracting user.  See", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNDYzNA==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378014634", "bodyText": "Should this be\n\nFile containing rules for mapping users.", "author": "electrum", "createdAt": "2020-02-12T02:47:58Z", "path": "presto-docs/src/main/sphinx/security/server.rst", "diffHunk": "@@ -97,29 +97,34 @@ Kerberos authentication is configured in the coordinator node's\n     http-server.https.keystore.path=/etc/presto_keystore.jks\n     http-server.https.keystore.key=keystore_password\n \n-======================================================= ======================================================\n-Property                                                Description\n-======================================================= ======================================================\n-``http-server.authentication.type``                     Authentication type for the Presto\n-                                                        coordinator. Must be set to ``KERBEROS``.\n-``http-server.authentication.krb5.service-name``        The Kerberos service name for the Presto coordinator.\n-                                                        Must match the Kerberos principal.\n-``http-server.authentication.krb5.principal-hostname``  The Kerberos hostname for the Presto coordinator.\n-                                                        Must match the Kerberos principal. This parameter is\n-                                                        optional. If included, Presto uses this value\n-                                                        in the host part of the Kerberos principal instead\n-                                                        of the machine's hostname.\n-``http-server.authentication.krb5.keytab``              The location of the keytab that can be used to\n-                                                        authenticate the Kerberos principal.\n-``http.authentication.krb5.config``                     The location of the Kerberos configuration file.\n-``http-server.https.enabled``                           Enables HTTPS access for the Presto coordinator.\n-                                                        Should be set to ``true``.\n-``http-server.https.port``                              HTTPS server port.\n-``http-server.https.keystore.path``                     The location of the Java Keystore file that is\n-                                                        used to secure TLS.\n-``http-server.https.keystore.key``                      The password for the keystore. This must match the\n-                                                        password you specified when creating the keystore.\n-======================================================= ======================================================\n+========================================================= ======================================================\n+Property                                                  Description\n+========================================================= ======================================================\n+``http-server.authentication.type``                       Authentication type for the Presto\n+                                                          coordinator. Must be set to ``KERBEROS``.\n+``http-server.authentication.krb5.service-name``          The Kerberos service name for the Presto coordinator.\n+                                                          Must match the Kerberos principal.\n+``http-server.authentication.krb5.principal-hostname``    The Kerberos hostname for the Presto coordinator.\n+                                                          Must match the Kerberos principal. This parameter is\n+                                                          optional. If included, Presto uses this value\n+                                                          in the host part of the Kerberos principal instead\n+                                                          of the machine's hostname.\n+``http-server.authentication.krb5.keytab``                The location of the keytab that can be used to\n+                                                          authenticate the Kerberos principal.\n+``http.authentication.krb5.config``                       The location of the Kerberos configuration file.\n+``http-server.https.enabled``                             Enables HTTPS access for the Presto coordinator.\n+                                                          Should be set to ``true``.\n+``http-server.https.port``                                HTTPS server port.\n+``http-server.https.keystore.path``                       The location of the Java Keystore file that is\n+                                                          used to secure TLS.\n+``http-server.https.keystore.key``                        The password for the keystore. This must match the\n+                                                          password you specified when creating the keystore.\n+``http-server.authentication.krb5.user-mapping.pattern``  Regex to match against user.  If matched, user will be\n+                                                          replaced with first regex group. If not matched,\n+                                                          authentication is denied.  Default is ``(.*)``.\n+``http-server.authentication.krb5.user-mapping.file``     File containing rules for extracting user.  See", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNDg3OQ==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378014879", "bodyText": "using a user mapping", "author": "electrum", "createdAt": "2020-02-12T02:49:00Z", "path": "presto-docs/src/main/sphinx/security/server.rst", "diffHunk": "@@ -151,6 +156,16 @@ See :doc:`/develop/system-access-control` for details.\n \n .. _coordinator-troubleshooting:\n \n+User Mapping\n+------------\n+\n+After authenticating with Kerberos, the Presto server receives the user's principal which is typically similar to\n+an email address.  For example, when ``alice`` logs in in Presto might receive ``alice@example.com``.  By default,\n+Presto will use the full Kerberos principal name, but this can be mapped to a shorter name using an user-extraction", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNDkzNg==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378014936", "bodyText": "Comma after \"rules\"\nuser-extraction -> user-mapping", "author": "electrum", "createdAt": "2020-02-12T02:49:15Z", "path": "presto-docs/src/main/sphinx/security/server.rst", "diffHunk": "@@ -151,6 +156,16 @@ See :doc:`/develop/system-access-control` for details.\n \n .. _coordinator-troubleshooting:\n \n+User Mapping\n+------------\n+\n+After authenticating with Kerberos, the Presto server receives the user's principal which is typically similar to\n+an email address.  For example, when ``alice`` logs in in Presto might receive ``alice@example.com``.  By default,\n+Presto will use the full Kerberos principal name, but this can be mapped to a shorter name using an user-extraction\n+pattern.  For simple extraction rules the  ``http-server.authentication.krb5.user-extraction.pattern`` configuration", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxNTEwNw==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378015107", "bodyText": "Missing word \"a\"\n\ncan be set to a Java regular expression", "author": "electrum", "createdAt": "2020-02-12T02:50:03Z", "path": "presto-docs/src/main/sphinx/security/server.rst", "diffHunk": "@@ -151,6 +156,16 @@ See :doc:`/develop/system-access-control` for details.\n \n .. _coordinator-troubleshooting:\n \n+User Mapping\n+------------\n+\n+After authenticating with Kerberos, the Presto server receives the user's principal which is typically similar to\n+an email address.  For example, when ``alice`` logs in in Presto might receive ``alice@example.com``.  By default,\n+Presto will use the full Kerberos principal name, but this can be mapped to a shorter name using an user-extraction\n+pattern.  For simple extraction rules the  ``http-server.authentication.krb5.user-extraction.pattern`` configuration\n+property can be set to Java regular expression, and Presto will use the value of the first matcher group.  If the", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxOTEwOA==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378019108", "bodyText": "Extra word \"do\"", "author": "electrum", "createdAt": "2020-02-12T03:07:16Z", "path": "presto-docs/src/main/sphinx/security/server.rst", "diffHunk": "@@ -151,6 +156,16 @@ See :doc:`/develop/system-access-control` for details.\n \n .. _coordinator-troubleshooting:\n \n+User Mapping\n+------------\n+\n+After authenticating with Kerberos, the Presto server receives the user's principal which is typically similar to\n+an email address.  For example, when ``alice`` logs in in Presto might receive ``alice@example.com``.  By default,\n+Presto will use the full Kerberos principal name, but this can be mapped to a shorter name using an user-extraction\n+pattern.  For simple extraction rules the  ``http-server.authentication.krb5.user-extraction.pattern`` configuration\n+property can be set to Java regular expression, and Presto will use the value of the first matcher group.  If the\n+regular expression do does not match, the authentication is denied.  For more complex user-extraction rules see .", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxOTIwMQ==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378019201", "bodyText": "This last sentence seems wrong (mentions \"extraction\") and doesn't link anywhere", "author": "electrum", "createdAt": "2020-02-12T03:07:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxOTEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxOTc5Ng==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378019796", "bodyText": "Remove extra blank line", "author": "electrum", "createdAt": "2020-02-12T03:10:27Z", "path": "presto-docs/src/main/sphinx/security/built-in-system-access-control.rst", "diffHunk": "@@ -143,9 +144,47 @@ and deny all other access, you can use the following rules:\n       ]\n     }\n \n+Impersonation Rules\n+-------------------\n+\n+These rules control the ability of a user to impersonate another user.  In\n+some environments it is desirable for an administrator (or managed system) to\n+run queries on behalf of other users.  In these cases the administrator\n+authenticates using their credentials, and then submits a query as a different\n+user.  When the user context is changed, Presto will verify the administrator\n+is authorized to run queries as the target user.\n+\n+When these rules are present, the authorization is based on the first matching\n+rule read from top to bottom.  If no rules match, the authorization is denied.\n+If impersonation rules are not present but the legacy principal rules are specified,\n+it is assumed impersonation access control is being handled by the principal rules,\n+so impersonation is allowed.  If neither impersonation or principal rules are\n+defined, impersonation is not allowed.\n+\n+Each impersonation rule is composed of the following fields:\n+\n+* ``originalUser`` (required): regex to match against the user requesting the impersonation.\n+* ``newUser`` (required): regex to match against the user that will be impersonated.\n+* ``allow`` (optional): boolean indicating if the authentication should be allowed.\n+\n+The following example allows the two admins ``alice`` and ``bob`` to impersonate\n+any user, except not the other admin.  It also allows any user to impersonate the\n+``test`` user:\n+\n+.. literalinclude:: user-impersonation.json\n+    :language: json\n+", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxOTk2MQ==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378019961", "bodyText": "and -> or", "author": "electrum", "createdAt": "2020-02-12T03:11:15Z", "path": "presto-docs/src/main/sphinx/security/user-mapping.rst", "diffHunk": "@@ -0,0 +1,61 @@\n+============\n+User Mapping\n+============\n+\n+User mapping defines rules for mapping from users in the authentication system to Presto users.  This\n+mapping is particularly important for Kerberos and certificate authentication where the user names", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyMDQ0Mg==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378020442", "bodyText": "password -> Password", "author": "electrum", "createdAt": "2020-02-12T03:13:39Z", "path": "presto-docs/src/main/sphinx/security/user-mapping.rst", "diffHunk": "@@ -0,0 +1,61 @@\n+============\n+User Mapping\n+============\n+\n+User mapping defines rules for mapping from users in the authentication system to Presto users.  This\n+mapping is particularly important for Kerberos and certificate authentication where the user names\n+are complex like ``alice@example`` or ``CN=Alice Smith, OU=Finance, O=Acme, C=US``.\n+\n+User mapping can be configured with a simple regex extraction pattern, or more complex rules in a\n+separate configuration file.\n+\n+Pattern Mapping Rule\n+--------------------\n+\n+The pattern mapping rule maps the authentication user to the first matching group in the regular\n+expression.  If the regular expression does not match the authentication user, authentication is\n+denied.\n+\n+Each authentication system has a separate property for the user mapping pattern to allow different mapping\n+when multiple authentication systems are enabled:\n+\n+===================================== ===============================================================\n+Authentication                        Property\n+===================================== ===============================================================\n+Username and password (file or LDAP)  ``http-server.authentication.password.user-mapping.pattern``", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyMDY3Ng==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378020676", "bodyText": "json -> JSON", "author": "electrum", "createdAt": "2020-02-12T03:14:56Z", "path": "presto-docs/src/main/sphinx/security/user-mapping.rst", "diffHunk": "@@ -0,0 +1,61 @@\n+============\n+User Mapping\n+============\n+\n+User mapping defines rules for mapping from users in the authentication system to Presto users.  This\n+mapping is particularly important for Kerberos and certificate authentication where the user names\n+are complex like ``alice@example`` or ``CN=Alice Smith, OU=Finance, O=Acme, C=US``.\n+\n+User mapping can be configured with a simple regex extraction pattern, or more complex rules in a\n+separate configuration file.\n+\n+Pattern Mapping Rule\n+--------------------\n+\n+The pattern mapping rule maps the authentication user to the first matching group in the regular\n+expression.  If the regular expression does not match the authentication user, authentication is\n+denied.\n+\n+Each authentication system has a separate property for the user mapping pattern to allow different mapping\n+when multiple authentication systems are enabled:\n+\n+===================================== ===============================================================\n+Authentication                        Property\n+===================================== ===============================================================\n+Username and password (file or LDAP)  ``http-server.authentication.password.user-mapping.pattern``\n+Kerberos                              ``http-server.authentication.krb5.user-mapping.pattern``\n+Certificate                           ``http-server.authentication.certificate.user-mapping.pattern``\n+Json Web Token                        ``http-server.authentication.jwt.user-mapping.pattern``\n+===================================== ===============================================================\n+\n+File Mapping Rules\n+------------------\n+\n+The file mapping rules allow for more complex mappings from the authentication user.  These rules are\n+loaded from a json file defined in a configuration property.  The mapping is based on the first matching", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyMDgwOQ==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378020809", "bodyText": "The mapping is based on the first matching rule, processed from top to bottom.", "author": "electrum", "createdAt": "2020-02-12T03:15:37Z", "path": "presto-docs/src/main/sphinx/security/user-mapping.rst", "diffHunk": "@@ -0,0 +1,61 @@\n+============\n+User Mapping\n+============\n+\n+User mapping defines rules for mapping from users in the authentication system to Presto users.  This\n+mapping is particularly important for Kerberos and certificate authentication where the user names\n+are complex like ``alice@example`` or ``CN=Alice Smith, OU=Finance, O=Acme, C=US``.\n+\n+User mapping can be configured with a simple regex extraction pattern, or more complex rules in a\n+separate configuration file.\n+\n+Pattern Mapping Rule\n+--------------------\n+\n+The pattern mapping rule maps the authentication user to the first matching group in the regular\n+expression.  If the regular expression does not match the authentication user, authentication is\n+denied.\n+\n+Each authentication system has a separate property for the user mapping pattern to allow different mapping\n+when multiple authentication systems are enabled:\n+\n+===================================== ===============================================================\n+Authentication                        Property\n+===================================== ===============================================================\n+Username and password (file or LDAP)  ``http-server.authentication.password.user-mapping.pattern``\n+Kerberos                              ``http-server.authentication.krb5.user-mapping.pattern``\n+Certificate                           ``http-server.authentication.certificate.user-mapping.pattern``\n+Json Web Token                        ``http-server.authentication.jwt.user-mapping.pattern``\n+===================================== ===============================================================\n+\n+File Mapping Rules\n+------------------\n+\n+The file mapping rules allow for more complex mappings from the authentication user.  These rules are\n+loaded from a json file defined in a configuration property.  The mapping is based on the first matching\n+rule read from top to bottom. If no rules match, authentication is denied.  Each rule is composed of the", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyMTI2OQ==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378021269", "bodyText": "Missing second backquote on bob@uk.example.com", "author": "electrum", "createdAt": "2020-02-12T03:17:40Z", "path": "presto-docs/src/main/sphinx/security/user-mapping.rst", "diffHunk": "@@ -0,0 +1,61 @@\n+============\n+User Mapping\n+============\n+\n+User mapping defines rules for mapping from users in the authentication system to Presto users.  This\n+mapping is particularly important for Kerberos and certificate authentication where the user names\n+are complex like ``alice@example`` or ``CN=Alice Smith, OU=Finance, O=Acme, C=US``.\n+\n+User mapping can be configured with a simple regex extraction pattern, or more complex rules in a\n+separate configuration file.\n+\n+Pattern Mapping Rule\n+--------------------\n+\n+The pattern mapping rule maps the authentication user to the first matching group in the regular\n+expression.  If the regular expression does not match the authentication user, authentication is\n+denied.\n+\n+Each authentication system has a separate property for the user mapping pattern to allow different mapping\n+when multiple authentication systems are enabled:\n+\n+===================================== ===============================================================\n+Authentication                        Property\n+===================================== ===============================================================\n+Username and password (file or LDAP)  ``http-server.authentication.password.user-mapping.pattern``\n+Kerberos                              ``http-server.authentication.krb5.user-mapping.pattern``\n+Certificate                           ``http-server.authentication.certificate.user-mapping.pattern``\n+Json Web Token                        ``http-server.authentication.jwt.user-mapping.pattern``\n+===================================== ===============================================================\n+\n+File Mapping Rules\n+------------------\n+\n+The file mapping rules allow for more complex mappings from the authentication user.  These rules are\n+loaded from a json file defined in a configuration property.  The mapping is based on the first matching\n+rule read from top to bottom. If no rules match, authentication is denied.  Each rule is composed of the\n+following fields:\n+\n+* ``pattern`` (required): regex to match against authentication user.\n+* ``user`` (optional): replacement string to substitute against pattern.\n+  The default value is ``$1``.\n+* ``allow`` (optional): boolean indicating if the authentication should be allowed.\n+\n+The following example maps all users like ``alice@example.com`` to just ``alice``, except for the ``test``\n+user which is denied authentication, and it maps users like ``bob@uk.example.com` to ``bob_uk``:", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyMTc2NQ==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378021765", "bodyText": "Add another region like apple_tw", "author": "electrum", "createdAt": "2020-02-12T03:20:08Z", "path": "presto-main/src/test/java/io/prestosql/server/security/TestUserMapping.java", "diffHunk": "@@ -88,4 +88,18 @@ public void testMultipleRule()\n         assertThrows(UserMappingException.class, () -> userMapping.extractUser(\"test@example.com\"));\n         assertThrows(UserMappingException.class, () -> userMapping.extractUser(\"apple@other.example.com\"));\n     }\n+\n+    @Test\n+    public void testDocsExample()\n+            throws Exception\n+    {\n+        // TODO: figure out a better way to validate documentation\n+        File docExample = new File(\"../presto-docs/src/main/sphinx/security/user-mapping.json\");\n+        UserMapping userMapping = createUserMapping(Optional.empty(), Optional.of(docExample));\n+\n+        assertEquals(userMapping.extractUser(\"apple@example.com\"), \"apple\");\n+        assertEquals(userMapping.extractUser(\"apple@uk.example.com\"), \"apple_uk\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyMTkwOA==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378021908", "bodyText": "specifying -> specify", "author": "electrum", "createdAt": "2020-02-12T03:20:54Z", "path": "presto-docs/src/main/sphinx/security/built-in-system-access-control.rst", "diffHunk": "@@ -71,9 +71,10 @@ contents:\n The config file is specified in JSON format.\n \n * It contains the rules defining which catalog can be accessed by which user (see Catalog Rules below).\n+* The impersonation rules specifying which user impersonations are allowed (see Impersonation Rules below).", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyMjA1Nw==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378022057", "bodyText": "Comma after \"cases\"", "author": "electrum", "createdAt": "2020-02-12T03:21:39Z", "path": "presto-docs/src/main/sphinx/security/built-in-system-access-control.rst", "diffHunk": "@@ -143,9 +144,47 @@ and deny all other access, you can use the following rules:\n       ]\n     }\n \n+Impersonation Rules\n+-------------------\n+\n+These rules control the ability of a user to impersonate another user.  In\n+some environments it is desirable for an administrator (or managed system) to\n+run queries on behalf of other users.  In these cases the administrator", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyMjI2MA==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378022260", "bodyText": "the authorization is based on the first matching rule, processed from top to bottom.", "author": "electrum", "createdAt": "2020-02-12T03:22:51Z", "path": "presto-docs/src/main/sphinx/security/built-in-system-access-control.rst", "diffHunk": "@@ -143,9 +144,47 @@ and deny all other access, you can use the following rules:\n       ]\n     }\n \n+Impersonation Rules\n+-------------------\n+\n+These rules control the ability of a user to impersonate another user.  In\n+some environments it is desirable for an administrator (or managed system) to\n+run queries on behalf of other users.  In these cases the administrator\n+authenticates using their credentials, and then submits a query as a different\n+user.  When the user context is changed, Presto will verify the administrator\n+is authorized to run queries as the target user.\n+\n+When these rules are present, the authorization is based on the first matching", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyMjM2Nw==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378022367", "bodyText": "or -> nor", "author": "electrum", "createdAt": "2020-02-12T03:23:19Z", "path": "presto-docs/src/main/sphinx/security/built-in-system-access-control.rst", "diffHunk": "@@ -143,9 +144,47 @@ and deny all other access, you can use the following rules:\n       ]\n     }\n \n+Impersonation Rules\n+-------------------\n+\n+These rules control the ability of a user to impersonate another user.  In\n+some environments it is desirable for an administrator (or managed system) to\n+run queries on behalf of other users.  In these cases the administrator\n+authenticates using their credentials, and then submits a query as a different\n+user.  When the user context is changed, Presto will verify the administrator\n+is authorized to run queries as the target user.\n+\n+When these rules are present, the authorization is based on the first matching\n+rule read from top to bottom.  If no rules match, the authorization is denied.\n+If impersonation rules are not present but the legacy principal rules are specified,\n+it is assumed impersonation access control is being handled by the principal rules,\n+so impersonation is allowed.  If neither impersonation or principal rules are", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyMjg2NQ==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378022865", "bodyText": "Commas around \"alice and bob\"", "author": "electrum", "createdAt": "2020-02-12T03:25:38Z", "path": "presto-docs/src/main/sphinx/security/built-in-system-access-control.rst", "diffHunk": "@@ -143,9 +144,47 @@ and deny all other access, you can use the following rules:\n       ]\n     }\n \n+Impersonation Rules\n+-------------------\n+\n+These rules control the ability of a user to impersonate another user.  In\n+some environments it is desirable for an administrator (or managed system) to\n+run queries on behalf of other users.  In these cases the administrator\n+authenticates using their credentials, and then submits a query as a different\n+user.  When the user context is changed, Presto will verify the administrator\n+is authorized to run queries as the target user.\n+\n+When these rules are present, the authorization is based on the first matching\n+rule read from top to bottom.  If no rules match, the authorization is denied.\n+If impersonation rules are not present but the legacy principal rules are specified,\n+it is assumed impersonation access control is being handled by the principal rules,\n+so impersonation is allowed.  If neither impersonation or principal rules are\n+defined, impersonation is not allowed.\n+\n+Each impersonation rule is composed of the following fields:\n+\n+* ``originalUser`` (required): regex to match against the user requesting the impersonation.\n+* ``newUser`` (required): regex to match against the user that will be impersonated.\n+* ``allow`` (optional): boolean indicating if the authentication should be allowed.\n+\n+The following example allows the two admins ``alice`` and ``bob`` to impersonate", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyMjk1MQ==", "url": "https://github.com/trinodb/trino/pull/2639#discussion_r378022951", "bodyText": "Maybe change to\n\nexcept they may not impersonate each other", "author": "electrum", "createdAt": "2020-02-12T03:26:02Z", "path": "presto-docs/src/main/sphinx/security/built-in-system-access-control.rst", "diffHunk": "@@ -143,9 +144,47 @@ and deny all other access, you can use the following rules:\n       ]\n     }\n \n+Impersonation Rules\n+-------------------\n+\n+These rules control the ability of a user to impersonate another user.  In\n+some environments it is desirable for an administrator (or managed system) to\n+run queries on behalf of other users.  In these cases the administrator\n+authenticates using their credentials, and then submits a query as a different\n+user.  When the user context is changed, Presto will verify the administrator\n+is authorized to run queries as the target user.\n+\n+When these rules are present, the authorization is based on the first matching\n+rule read from top to bottom.  If no rules match, the authorization is denied.\n+If impersonation rules are not present but the legacy principal rules are specified,\n+it is assumed impersonation access control is being handled by the principal rules,\n+so impersonation is allowed.  If neither impersonation or principal rules are\n+defined, impersonation is not allowed.\n+\n+Each impersonation rule is composed of the following fields:\n+\n+* ``originalUser`` (required): regex to match against the user requesting the impersonation.\n+* ``newUser`` (required): regex to match against the user that will be impersonated.\n+* ``allow`` (optional): boolean indicating if the authentication should be allowed.\n+\n+The following example allows the two admins ``alice`` and ``bob`` to impersonate\n+any user, except not the other admin.  It also allows any user to impersonate the", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "96f87df9482dcffcd9769f40c1a76e115ead67d7", "url": "https://github.com/trinodb/trino/commit/96f87df9482dcffcd9769f40c1a76e115ead67d7", "message": "Rename user-extraction to user-mapping", "committedDate": "2020-02-13T00:40:10Z", "type": "commit"}, {"oid": "07ba4771ff40af82b8297d9e17ef2d855e85a445", "url": "https://github.com/trinodb/trino/commit/07ba4771ff40af82b8297d9e17ef2d855e85a445", "message": "Add user-mapping documentation", "committedDate": "2020-02-13T00:40:11Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "a32db6cf918bb1d696d9f5b7204ffbb957f33d9e", "url": "https://github.com/trinodb/trino/commit/a32db6cf918bb1d696d9f5b7204ffbb957f33d9e", "message": "Add impersonation docs", "committedDate": "2020-02-13T01:52:43Z", "type": "commit"}, {"oid": "a32db6cf918bb1d696d9f5b7204ffbb957f33d9e", "url": "https://github.com/trinodb/trino/commit/a32db6cf918bb1d696d9f5b7204ffbb957f33d9e", "message": "Add impersonation docs", "committedDate": "2020-02-13T01:52:43Z", "type": "forcePushed"}]}