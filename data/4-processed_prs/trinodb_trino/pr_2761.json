{"pr_number": 2761, "pr_title": "Fix reading from large Parquet files", "pr_createdAt": "2020-02-07T19:28:46Z", "pr_url": "https://github.com/trinodb/trino/pull/2761", "timeline": [{"oid": "c619f60ed7dc8ab242f447522d35cc5d35f51938", "url": "https://github.com/trinodb/trino/commit/c619f60ed7dc8ab242f447522d35cc5d35f51938", "message": "Fix reading from large Parquet files\n\nThis is a fix for https://github.com/prestosql/presto/issues/2730. When\nmerging small reads, if the first range and second range are more than 2\nGB apart, mergeAdjacentDiskRanges() throw sn ArithmeticException because\nmerging those two ranges is too big to fit in a DiskRange. The correct\nbehavior is to not merge those ranges because this implies the ranges\nare farther apart than maxReadSizeBytes.", "committedDate": "2020-02-07T19:25:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5MDU0Mg==", "url": "https://github.com/trinodb/trino/pull/2761#discussion_r384890542", "bodyText": "Wouldn't it be better to check for the problem condition instead of catching the exception afterwards?\nSomething like this:\n            if (Math.max(last.getEnd(), current.getEnd() - Math.min(last.getOffset(), current.getOffset())) <= Integer.MAX_VALUE) {\n                DiskRange merged = last.span(current);\n                if (merged.getLength() <= maxReadSizeBytes && last.getEnd() + maxMergeDistanceBytes >= current.getOffset()) {\n                    last = merged;\n                }\n            }", "author": "lhofhansl", "createdAt": "2020-02-27T03:05:49Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/parquet/HdfsParquetDataSource.java", "diffHunk": "@@ -241,8 +241,15 @@ public static HdfsParquetDataSource buildHdfsParquetDataSource(\n         DiskRange last = ranges.get(0);\n         for (int i = 1; i < ranges.size(); i++) {\n             DiskRange current = ranges.get(i);\n-            DiskRange merged = last.span(current);\n-            if (merged.getLength() <= maxReadSizeBytes && last.getEnd() + maxMergeDistanceBytes >= current.getOffset()) {\n+            DiskRange merged = null;\n+            boolean blockTooLong = false;\n+            try {\n+                merged = last.span(current);\n+            }\n+            catch (ArithmeticException e) {", "originalCommit": "c619f60ed7dc8ab242f447522d35cc5d35f51938", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMzc0Ng==", "url": "https://github.com/trinodb/trino/pull/2761#discussion_r395213746", "bodyText": "The issue is that it duplicates the logic of DiskRange, so it's not much better. Alternatively, we could add a method to check it that would result in a valid span, but the current approach is good enough.", "author": "martint", "createdAt": "2020-03-19T17:52:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5MDU0Mg=="}], "type": "inlineReview"}]}