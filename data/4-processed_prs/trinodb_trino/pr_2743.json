{"pr_number": 2743, "pr_title": "Include filtered columns in EXPLAIN (TYPE IO)", "pr_createdAt": "2020-02-05T21:17:07Z", "pr_url": "https://github.com/trinodb/trino/pull/2743", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3NDAwOA==", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r381974008", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    Sets.newLinkedHashSet(\n          \n          \n            \n                                                    ImmutableSet.of(", "author": "Praveen2112", "createdAt": "2020-02-20T12:40:50Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -249,13 +262,155 @@ public void testIoExplain()\n                                                                         new FormattedRange(\n                                                                                 new FormattedMarker(Optional.of(\"1\"), EXACTLY),\n                                                                                 new FormattedMarker(Optional.of(\"199\"), EXACTLY)))))),\n+                                    ImmutableSet.of(\n+                                        new ColumnConstraint(\n+                                            \"custkey\",\n+                                            BIGINT,\n+                                            new FormattedDomain(\n+                                                false,\n+                                                ImmutableSet.of(\n+                                                    new FormattedRange(\n+                                                        new FormattedMarker(Optional.empty(), ABOVE),\n+                                                        new FormattedMarker(Optional.of(\"10\"), EXACTLY)))))),\n                                         estimate)),\n                         Optional.of(new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\")),\n                         estimate));\n \n         assertUpdate(\"DROP TABLE test_orders\");\n     }\n \n+    @Test\n+    public void testIoExplainColumnFilters()\n+    {\n+        // Test IO explain with small number of discrete components.\n+        computeActual(\"CREATE TABLE test_orders WITH (partitioned_by = ARRAY['orderkey']) AS SELECT custkey, orderstatus, orderkey FROM orders WHERE orderkey < 3\");\n+\n+        EstimatedStatsAndCost estimate = new EstimatedStatsAndCost(2.0, 48.0, 48.0, 0.0, 0.0);\n+        EstimatedStatsAndCost finalEstimate = new EstimatedStatsAndCost(0.0, 0.0, 96.0, 0.0, 0.0);\n+        MaterializedResult result = computeActual(\"EXPLAIN (TYPE IO, FORMAT JSON) SELECT custkey, orderkey, orderstatus FROM test_orders WHERE custkey <= 10 and orderstatus='P'\");\n+        assertEquals(\n+                getIoPlanCodec().fromJson((String) getOnlyElement(result.getOnlyColumnAsSet())),\n+                new IoPlan(\n+                        ImmutableSet.of(\n+                                new TableColumnInfo(\n+                                        new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\"),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"orderkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"1\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"1\"), EXACTLY)),\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"2\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"2\"), EXACTLY)))))),\n+                                        Sets.newLinkedHashSet(", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3NjU3Mw==", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r381976573", "bodyText": "Can we directly visit the filterNode instead of going via project node ?", "author": "Praveen2112", "createdAt": "2020-02-20T12:46:40Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/IoPlanPrinter.java", "diffHunk": "@@ -600,19 +616,90 @@ protected Void visitPlan(PlanNode node, IoPlanBuilder context)\n         }\n \n         @Override\n-        public Void visitTableScan(TableScanNode node, IoPlanBuilder context)\n+        public Void visitFilter(FilterNode node, IoPlanBuilder context)\n+        {\n+            return visitScanFilterAndProjectInfo(node, Optional.of(node), Optional.empty(), context);\n+        }\n+\n+        @Override\n+        public Void visitProject(ProjectNode node, IoPlanBuilder context)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3OTE5Ng==", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r381979196", "bodyText": "Instead of passing the FilterNode here can we pass the  filter Expression ? So when we visit a normal TableScan we compute the column details like\naddConstraintsFromFilter(TRUE_LITERAL, tableScanNode, context)\n\nWhen visiting a FilterNode we can check for its source and compute i/o based on its source", "author": "Praveen2112", "createdAt": "2020-02-20T12:52:08Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/IoPlanPrinter.java", "diffHunk": "@@ -600,19 +616,90 @@ protected Void visitPlan(PlanNode node, IoPlanBuilder context)\n         }\n \n         @Override\n-        public Void visitTableScan(TableScanNode node, IoPlanBuilder context)\n+        public Void visitFilter(FilterNode node, IoPlanBuilder context)\n+        {\n+            return visitScanFilterAndProjectInfo(node, Optional.of(node), Optional.empty(), context);\n+        }\n+\n+        @Override\n+        public Void visitProject(ProjectNode node, IoPlanBuilder context)\n+        {\n+            if (node.getSource() instanceof FilterNode) {\n+                return visitScanFilterAndProjectInfo(node, Optional.of((FilterNode) node.getSource()), Optional.of(node), context);\n+            }\n+\n+            return visitScanFilterAndProjectInfo(node, Optional.empty(), Optional.of(node), context);\n+        }\n+\n+        private Void visitScanFilterAndProjectInfo(\n+                PlanNode node,\n+                Optional<FilterNode> filterNode,\n+                Optional<ProjectNode> projectNode,\n+                IoPlanBuilder context)\n+        {\n+            checkState(projectNode.isPresent() || filterNode.isPresent());\n+\n+            PlanNode sourceNode;\n+            if (filterNode.isPresent()) {\n+                sourceNode = filterNode.get().getSource();\n+            }\n+            else {\n+                sourceNode = projectNode.get().getSource();\n+            }\n+\n+            Optional<TableScanNode> scanNode;\n+            if (sourceNode instanceof TableScanNode) {\n+                scanNode = Optional.of((TableScanNode) sourceNode);\n+            }\n+            else {\n+                scanNode = Optional.empty();\n+            }\n+\n+            if (scanNode.isPresent() && filterNode.isPresent()) {\n+                addConstraintsFromFilter(filterNode.get(), scanNode.get(), context);\n+                return null;\n+            }\n+\n+            sourceNode.accept(this, context);\n+            return null;\n+        }\n+\n+        private void addConstraintsFromFilter(FilterNode filterNode, TableScanNode tableScanNode, IoPlanBuilder context)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMDI2MA==", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r384420260", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    Sets.newLinkedHashSet(\n          \n          \n            \n                                                    ImmutableSet.of", "author": "Praveen2112", "createdAt": "2020-02-26T10:59:08Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -249,13 +262,289 @@ public void testIoExplain()\n                                                                         new FormattedRange(\n                                                                                 new FormattedMarker(Optional.of(\"1\"), EXACTLY),\n                                                                                 new FormattedMarker(Optional.of(\"199\"), EXACTLY)))))),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"custkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.empty(), ABOVE),\n+                                                                                new FormattedMarker(Optional.of(\"10\"), EXACTLY)))))),\n                                         estimate)),\n                         Optional.of(new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\")),\n                         estimate));\n \n+        EstimatedStatsAndCost finalEstimate = new EstimatedStatsAndCost(Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN);\n+        estimate = new EstimatedStatsAndCost(1.0, 18.0, 18, 0.0, 0.0);\n+        result = computeActual(\"EXPLAIN (TYPE IO, FORMAT JSON) INSERT INTO test_orders SELECT custkey, orderkey FROM test_orders WHERE orderkey = 100\");\n+        assertEquals(\n+                getIoPlanCodec().fromJson((String) getOnlyElement(result.getOnlyColumnAsSet())),\n+                new IoPlan(\n+                        ImmutableSet.of(\n+                                new TableColumnInfo(\n+                                        new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\"),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"orderkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                 false,\n+                                                                ImmutableSet.of(\n+                                                                         new FormattedRange(\n+                                                                                 new FormattedMarker(Optional.of(\"100\"), EXACTLY),\n+                                                                                 new FormattedMarker(Optional.of(\"100\"), EXACTLY)))))),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"orderkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                 ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"100\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"100\"), EXACTLY)))))),\n+                                estimate)),\n+                        Optional.of(new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\")),\n+                        finalEstimate));\n+\n         assertUpdate(\"DROP TABLE test_orders\");\n     }\n \n+    @Test\n+    public void testIoExplainColumnFilters()\n+    {\n+        // Test IO explain with small number of discrete components.\n+        computeActual(\"CREATE TABLE test_orders WITH (partitioned_by = ARRAY['orderkey']) AS SELECT custkey, orderstatus, orderkey FROM orders WHERE orderkey < 3\");\n+\n+        EstimatedStatsAndCost estimate = new EstimatedStatsAndCost(2.0, 48.0, 48.0, 0.0, 0.0);\n+        EstimatedStatsAndCost finalEstimate = new EstimatedStatsAndCost(0.0, 0.0, 96.0, 0.0, 0.0);\n+        MaterializedResult result = computeActual(\"EXPLAIN (TYPE IO, FORMAT JSON) SELECT custkey, orderkey, orderstatus FROM test_orders WHERE custkey <= 10 and orderstatus='P'\");\n+        assertEquals(\n+                getIoPlanCodec().fromJson((String) getOnlyElement(result.getOnlyColumnAsSet())),\n+                new IoPlan(\n+                        ImmutableSet.of(\n+                                new TableColumnInfo(\n+                                        new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\"),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"orderkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"1\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"1\"), EXACTLY)),\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"2\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"2\"), EXACTLY)))))),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"custkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.empty(), ABOVE),\n+                                                                                new FormattedMarker(Optional.of(\"10\"), EXACTLY))))),\n+                                                new ColumnConstraint(\n+                                                        \"orderstatus\",\n+                                                        VarcharType.createVarcharType(1),\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"P\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"P\"), EXACTLY)))))),\n+                                        estimate)),\n+                        Optional.empty(),\n+                        finalEstimate));\n+        result = computeActual(\"EXPLAIN (TYPE IO, FORMAT JSON) SELECT custkey, orderkey, orderstatus FROM test_orders WHERE custkey <= 10 and (orderstatus='P' or orderstatus='S')\");\n+        assertEquals(\n+                getIoPlanCodec().fromJson((String) getOnlyElement(result.getOnlyColumnAsSet())),\n+                new IoPlan(\n+                        ImmutableSet.of(\n+                                new TableColumnInfo(\n+                                        new CatalogSchemaTableName(catalog, \"tpch\", \"test_orders\"),\n+                                        ImmutableSet.of(\n+                                                new ColumnConstraint(\n+                                                        \"orderkey\",\n+                                                        BIGINT,\n+                                                        new FormattedDomain(\n+                                                                false,\n+                                                                ImmutableSet.of(\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"1\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"1\"), EXACTLY)),\n+                                                                        new FormattedRange(\n+                                                                                new FormattedMarker(Optional.of(\"2\"), EXACTLY),\n+                                                                                new FormattedMarker(Optional.of(\"2\"), EXACTLY)))))),\n+                                        Sets.newLinkedHashSet(", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNzUwNA==", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r384937504", "bodyText": "I guess we can change this to ImmutableSet.of", "author": "Praveen2112", "createdAt": "2020-02-27T06:39:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMDI2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMjI3NA==", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r384422274", "bodyText": "Can we move this method below the overridden methods ?", "author": "Praveen2112", "createdAt": "2020-02-26T11:03:06Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/IoPlanPrinter.java", "diffHunk": "@@ -600,19 +615,46 @@ protected Void visitPlan(PlanNode node, IoPlanBuilder context)\n         }\n \n         @Override\n-        public Void visitTableScan(TableScanNode node, IoPlanBuilder context)\n+        public Void visitFilter(FilterNode node, IoPlanBuilder context)\n         {\n-            TableMetadata tableMetadata = metadata.getTableMetadata(session, node.getTable());\n-            TupleDomain<ColumnHandle> predicate = metadata.getTableProperties(session, node.getTable()).getPredicate();\n-            EstimatedStatsAndCost estimatedStatsAndCost = getEstimatedStatsAndCost(node);\n+            PlanNode source = node.getSource();\n+            if (source instanceof TableScanNode) {\n+                addInputTableConstraints(node.getPredicate(), (TableScanNode) source, context);\n+                return null;\n+            }\n+\n+            return processChildren(node, context);\n+        }\n+\n+        private void addInputTableConstraints(Expression filterExpression, TableScanNode tableScanNode, IoPlanBuilder context)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNDA5MA==", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r389124090", "bodyText": "I don't see a good reason for changing the name of this class, so I'd keep it as it was before. At a minimum, if we're changing it to make usage or meaning clearer, it should be done in a separate commit.", "author": "martint", "createdAt": "2020-03-06T20:19:37Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/IoPlanPrinter.java", "diffHunk": "@@ -244,36 +247,36 @@ public boolean equals(Object obj)\n                 }\n                 TableColumnInfo o = (TableColumnInfo) obj;\n                 return Objects.equals(table, o.table) &&\n-                        Objects.equals(columnConstraints, o.columnConstraints) &&\n+                        Objects.equals(columns, o.columns) &&\n                         Objects.equals(estimate, o.estimate);\n             }\n \n             @Override\n             public int hashCode()\n             {\n-                return Objects.hash(table, columnConstraints, estimate);\n+                return Objects.hash(table, columns, estimate);\n             }\n \n             @Override\n             public String toString()\n             {\n                 return toStringHelper(this)\n                         .add(\"table\", table)\n-                        .add(\"columnConstraints\", columnConstraints)\n+                        .add(\"columns\", columns)\n                         .add(\"estimate\", estimate)\n                         .toString();\n             }\n         }\n     }\n \n-    public static class ColumnConstraint\n+    public static class Column", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNDg2MA==", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r389124860", "bodyText": "Rename tableScanNode to just tableScan", "author": "martint", "createdAt": "2020-03-06T20:21:19Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/IoPlanPrinter.java", "diffHunk": "@@ -650,6 +663,22 @@ else if (writerTarget instanceof CreateReference || writerTarget instanceof Inse\n             return processChildren(node, context);\n         }\n \n+        private void addInputTableConstraints(TupleDomain<ColumnHandle> filterDomain, TableScanNode tableScanNode, IoPlanBuilder context)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyNjI1MQ==", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r389126251", "bodyText": "What if there's an overlap between the table properties and the filter? (e.g., a filter limits a column to some range and table properties limit the same column to another range)? If I read this correctly, you'll end up with two entries for that column. This code should do an intersection of the corresponding domains.", "author": "martint", "createdAt": "2020-03-06T20:24:31Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/IoPlanPrinter.java", "diffHunk": "@@ -650,6 +663,22 @@ else if (writerTarget instanceof CreateReference || writerTarget instanceof Inse\n             return processChildren(node, context);\n         }\n \n+        private void addInputTableConstraints(TupleDomain<ColumnHandle> filterDomain, TableScanNode tableScanNode, IoPlanBuilder context)\n+        {\n+            TableHandle table = tableScanNode.getTable();\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, table);\n+            TupleDomain<ColumnHandle> predicate = metadata.getTableProperties(session, table).getPredicate();\n+            EstimatedStatsAndCost estimatedStatsAndCost = getEstimatedStatsAndCost(tableScanNode);\n+            context.addInputTableColumnInfo(\n+                    new IoPlan.TableColumnInfo(\n+                            new CatalogSchemaTableName(\n+                                    tableMetadata.getCatalogName().getCatalogName(),\n+                                    tableMetadata.getTable().getSchemaName(),\n+                                    tableMetadata.getTable().getTableName()),\n+                            Sets.union(parseConstraints(table, predicate), parseConstraints(table, filterDomain)),", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3MTkzNg==", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r394571936", "bodyText": "Why is columnConstraints being renamed to columns? In particular, changing this in the JSON representation will break backward compatibility.", "author": "martint", "createdAt": "2020-03-18T18:56:23Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/planprinter/IoPlanPrinter.java", "diffHunk": "@@ -201,17 +203,17 @@ private EstimatedStatsAndCost getEstimatedStatsAndCost()\n         public static class TableColumnInfo\n         {\n             private final CatalogSchemaTableName table;\n-            private final Set<ColumnConstraint> columnConstraints;\n+            private final Set<ColumnConstraint> columns;\n             private final EstimatedStatsAndCost estimate;\n \n             @JsonCreator\n             public TableColumnInfo(\n                     @JsonProperty(\"table\") CatalogSchemaTableName table,\n-                    @JsonProperty(\"columnConstraints\") Set<ColumnConstraint> columnConstraints,\n+                    @JsonProperty(\"columns\") Set<ColumnConstraint> columns,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5ODMwNQ==", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r394598305", "bodyText": "I renamed it based on feedback you have me here: #2743 (comment). Maybe I misunderstood? I'm happy to change it back if you think that's better.", "author": "JamesRTaylor", "createdAt": "2020-03-18T19:46:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3MTkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMDQ2Ng==", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r394610466", "bodyText": "Ah, sorry if that was confusing... I may have crossed the names. My overall point was that we shouldn't rename it from what it was (and also not add a new field for the filters, but reuse the existing one).", "author": "martint", "createdAt": "2020-03-18T20:10:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3MTkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNDYyNQ==", "url": "https://github.com/trinodb/trino/pull/2743#discussion_r394704625", "bodyText": "I've changed the element name back to columnConstraints", "author": "JamesRTaylor", "createdAt": "2020-03-18T23:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3MTkzNg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "ea09bc201b6ba2637df9aab75c7cc290ee1882e3", "url": "https://github.com/trinodb/trino/commit/ea09bc201b6ba2637df9aab75c7cc290ee1882e3", "message": "Include filtered columns in EXPLAIN (TYPE IO)", "committedDate": "2020-03-18T22:39:08Z", "type": "commit"}, {"oid": "ea09bc201b6ba2637df9aab75c7cc290ee1882e3", "url": "https://github.com/trinodb/trino/commit/ea09bc201b6ba2637df9aab75c7cc290ee1882e3", "message": "Include filtered columns in EXPLAIN (TYPE IO)", "committedDate": "2020-03-18T22:39:08Z", "type": "forcePushed"}]}