{"pr_number": 3084, "pr_title": "Use HiveCatalogName to export S3 statistics without name conflicts", "pr_createdAt": "2020-03-12T15:00:53Z", "pr_url": "https://github.com/trinodb/trino/pull/3084", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNDE1Mg==", "url": "https://github.com/trinodb/trino/pull/3084#discussion_r391714152", "bodyText": "There is HiveCatalogName bean binded already", "author": "kokosing", "createdAt": "2020-03-12T15:47:52Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/InternalHiveConnectorFactory.java", "diffHunk": "@@ -81,7 +81,7 @@ public static Connector createConnector(String catalogName, Map<String, String>\n                     new ConnectorObjectNameGeneratorModule(catalogName, \"io.prestosql.plugin.hive\", \"presto.plugin.hive\"),\n                     new JsonModule(),\n                     new HiveModule(),\n-                    new HiveS3Module(),\n+                    new HiveS3Module(catalogName),", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNDgzOQ==", "url": "https://github.com/trinodb/trino/pull/3084#discussion_r391714839", "bodyText": "You can use provider of HiveCatalogName and pass function here to generate name lazy. After guice configuration", "author": "kokosing", "createdAt": "2020-03-12T15:48:51Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/s3/HiveS3Module.java", "diffHunk": "@@ -39,7 +47,7 @@ protected void setup(Binder binder)\n \n             binder.bind(PrestoS3FileSystemStats.class).toInstance(PrestoS3FileSystem.getFileSystemStats());\n             newExporter(binder).export(PrestoS3FileSystemStats.class)\n-                    .as(generator -> generator.generatedNameOf(PrestoS3FileSystem.class));\n+                    .as(generator -> generator.generatedNameOf(PrestoS3FileSystem.class, catalogName));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMyMTQzNA==", "url": "https://github.com/trinodb/trino/pull/3084#discussion_r392321434", "bodyText": "I tried to replace catalogName with binder.getProvider(HiveCatalogName.class).get().toString() but I'm getting the following error:\n2020-03-13T16:45:14.015+0100\tERROR\tmain\tio.prestosql.server.PrestoServer\tUnable to create injector, see the following errors:\n\n1) Error injecting constructor, java.lang.NullPointerException: moduleSource cannot be null.\n  at org.weakref.jmx.guice.GuiceMBeanExporter.<init>(GuiceMBeanExporter.java:40)\n  at org.weakref.jmx.guice.MBeanModule.configure(MBeanModule.java:39)\n  while locating org.weakref.jmx.guice.GuiceMBeanExporter\n\n1 error\ncom.google.inject.CreationException: Unable to create injector, see the following errors:\n\n1) Error injecting constructor, java.lang.NullPointerException: moduleSource cannot be null.\n  at org.weakref.jmx.guice.GuiceMBeanExporter.<init>(GuiceMBeanExporter.java:40)\n  at org.weakref.jmx.guice.MBeanModule.configure(MBeanModule.java:39)\n  while locating org.weakref.jmx.guice.GuiceMBeanExporter\n\n1 error\n\tat com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:543)\n\tat com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:186)\n\tat com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:109)\n\tat com.google.inject.Guice.createInjector(Guice.java:87)\n\tat io.airlift.bootstrap.Bootstrap.initialize(Bootstrap.java:245)\n\tat io.prestosql.plugin.hive.InternalHiveConnectorFactory.createConnector(InternalHiveConnectorFactory.java:96)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat io.prestosql.plugin.hive.HiveConnectorFactory.create(HiveConnectorFactory.java:52)\n\tat io.prestosql.connector.ConnectorManager.createConnector(ConnectorManager.java:341)\n\tat io.prestosql.connector.ConnectorManager.createCatalog(ConnectorManager.java:203)\n\tat io.prestosql.connector.ConnectorManager.createCatalog(ConnectorManager.java:195)\n\tat io.prestosql.connector.ConnectorManager.createCatalog(ConnectorManager.java:181)\n\tat io.prestosql.metadata.StaticCatalogStore.loadCatalog(StaticCatalogStore.java:88)\n\tat io.prestosql.metadata.StaticCatalogStore.loadCatalogs(StaticCatalogStore.java:68)\n\tat io.prestosql.server.PrestoServer.run(PrestoServer.java:129)\n\tat io.prestosql.$gen.Presto_null____20200313_154403_1.run(Unknown Source)\n\tat io.prestosql.server.PrestoServer.main(PrestoServer.java:72)\nCaused by: java.lang.NullPointerException: moduleSource cannot be null.\n\tat com.google.common.base.Preconditions.checkNotNull(Preconditions.java:895)\n\tat com.google.inject.spi.ElementSource.<init>(ElementSource.java:94)\n\tat com.google.inject.spi.Elements$RecordingBinder.getElementSource(Elements.java:561)\n\tat com.google.inject.spi.Elements$RecordingBinder.getProvider(Elements.java:411)\n\tat com.google.inject.spi.Elements$RecordingBinder.getProvider(Elements.java:406)\n\tat com.google.inject.spi.Elements$RecordingBinder.getProvider(Elements.java:418)\n\tat io.prestosql.plugin.hive.s3.HiveS3Module.lambda$setup$0(HiveS3Module.java:43)\n\tat org.weakref.jmx.guice.Mapping.getName(Mapping.java:36)\n\tat org.weakref.jmx.guice.GuiceMBeanExporter.export(GuiceMBeanExporter.java:92)\n\tat org.weakref.jmx.guice.GuiceMBeanExporter.<init>(GuiceMBeanExporter.java:42)\n\tat org.weakref.jmx.guice.GuiceMBeanExporter$$FastClassByGuice$$6cc63b28.newInstance(<generated>)\n\tat com.google.inject.internal.DefaultConstructionProxyFactory$FastClassProxy.newInstance(DefaultConstructionProxyFactory.java:89)\n\tat com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:114)\n\tat com.google.inject.internal.ConstructorInjector.access$000(ConstructorInjector.java:32)\n\tat com.google.inject.internal.ConstructorInjector$1.call(ConstructorInjector.java:98)\n\tat com.google.inject.internal.ProvisionListenerStackCallback$Provision.provision(ProvisionListenerStackCallback.java:112)\n\tat io.airlift.bootstrap.LifeCycleModule.provision(LifeCycleModule.java:54)\n\tat com.google.inject.internal.ProvisionListenerStackCallback$Provision.provision(ProvisionListenerStackCallback.java:120)\n\tat com.google.inject.internal.ProvisionListenerStackCallback.provision(ProvisionListenerStackCallback.java:66)\n\tat com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:93)\n\tat com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:306)\n\tat com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)\n\tat com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:168)\n\tat com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:39)\n\tat com.google.inject.internal.InternalInjectorCreator.loadEagerSingletons(InternalInjectorCreator.java:211)\n\tat com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:182)\n\t... 18 more\n\nI'm open to suggestions, it seems the binder isn't ready to create a provider at this point (we're still during module setup).", "author": "MiguelWeezardo", "createdAt": "2020-03-13T16:03:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNDgzOQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMzU2Nw==", "url": "https://github.com/trinodb/trino/pull/3084#discussion_r392703567", "bodyText": "just catalogName?", "author": "kokosing", "createdAt": "2020-03-15T19:17:13Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/s3/HiveS3Module.java", "diffHunk": "@@ -38,8 +41,9 @@ protected void setup(Binder binder)\n             configBinder(binder).bindConfig(HiveS3Config.class);\n \n             binder.bind(PrestoS3FileSystemStats.class).toInstance(PrestoS3FileSystem.getFileSystemStats());\n+            Provider<HiveCatalogName> catalogNameProvider = binder.getProvider(HiveCatalogName.class);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwMzU4Nw==", "url": "https://github.com/trinodb/trino/pull/3084#discussion_r392703587", "bodyText": "I would inline this method.", "author": "kokosing", "createdAt": "2020-03-15T19:17:26Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/s3/HiveS3Module.java", "diffHunk": "@@ -53,6 +57,11 @@ else if (type == S3FileSystemType.HADOOP_DEFAULT) {\n         }\n     }\n \n+    private String generateStatisticNameForCatalog(Class<?> type, ObjectNameGenerator generator, Provider<HiveCatalogName> catalogNameProvider)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA3ODQxOQ==", "url": "https://github.com/trinodb/trino/pull/3084#discussion_r393078419", "bodyText": "formatting change is unrelated and incorrect", "author": "kokosing", "createdAt": "2020-03-16T14:44:41Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/s3/HiveS3Module.java", "diffHunk": "@@ -38,8 +40,9 @@ protected void setup(Binder binder)\n             configBinder(binder).bindConfig(HiveS3Config.class);\n \n             binder.bind(PrestoS3FileSystemStats.class).toInstance(PrestoS3FileSystem.getFileSystemStats());\n+            Provider<HiveCatalogName> catalogName = binder.getProvider(HiveCatalogName.class);\n             newExporter(binder).export(PrestoS3FileSystemStats.class)\n-                    .as(generator -> generator.generatedNameOf(PrestoS3FileSystem.class));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "4520bac81d86d84b375a42ec97fad8915efa08bc", "url": "https://github.com/trinodb/trino/commit/4520bac81d86d84b375a42ec97fad8915efa08bc", "message": "Use catalog name in S3 statistics name\n\nThis fixes the problem of conflicting JMX keys for S3 statistics\nwhen Hive and Iceberg connectors are loaded.", "committedDate": "2020-03-16T18:46:08Z", "type": "commit"}, {"oid": "4520bac81d86d84b375a42ec97fad8915efa08bc", "url": "https://github.com/trinodb/trino/commit/4520bac81d86d84b375a42ec97fad8915efa08bc", "message": "Use catalog name in S3 statistics name\n\nThis fixes the problem of conflicting JMX keys for S3 statistics\nwhen Hive and Iceberg connectors are loaded.", "committedDate": "2020-03-16T18:46:08Z", "type": "forcePushed"}]}