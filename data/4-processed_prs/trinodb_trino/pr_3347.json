{"pr_number": 3347, "pr_title": "Add to Elastic connector IpAddress field", "pr_createdAt": "2020-04-05T19:14:08Z", "pr_url": "https://github.com/trinodb/trino/pull/3347", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MDYwNQ==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403750605", "bodyText": "see https://prestosql.io/docs/current/language/types.html#ipaddress", "author": "findepi", "createdAt": "2020-04-05T20:08:31Z", "path": "presto-docs/src/main/sphinx/connector/elasticsearch.rst", "diffHunk": "@@ -182,6 +182,7 @@ Elasticsearch Presto\n ``keyword``   ``VARCHAR``\n ``text``      ``VARCHAR``\n ``date``      ``TIMESTAMP``\n+``ip``        ``VARCHAR``", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1NzQ1MA==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403757450", "bodyText": "Agreed, it would be better to map this to ipaddress", "author": "electrum", "createdAt": "2020-04-05T21:11:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MDYwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc2Mzc5Mg==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403763792", "bodyText": "I change it.. but I'm unable to make this work..\nthe code to read the value is on IpAddressDecoder\ncan someone guide me?", "author": "eskabetxe", "createdAt": "2020-04-05T22:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MDYwNQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzOTk4Nw==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403839987", "bodyText": "You may want to follow io.prestosql.type.IpAddressOperators#castFromVarcharToIpAddress logic.\n@electrum should we copy the method here? or is there a way to reuse?", "author": "findepi", "createdAt": "2020-04-06T05:38:38Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/decoders/IpAddressDecoder.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.elasticsearch.decoders;\n+\n+import com.google.common.net.InetAddresses;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import org.elasticsearch.search.SearchHit;\n+\n+import java.net.Inet6Address;\n+import java.util.function.Supplier;\n+\n+import static io.prestosql.spi.StandardErrorCode.TYPE_MISMATCH;\n+import static io.prestosql.type.IpAddressType.IPADDRESS;\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public class IpAddressDecoder\n+        implements Decoder\n+{\n+    private final String path;\n+\n+    public IpAddressDecoder(String path)\n+    {\n+        this.path = requireNonNull(path, \"path is null\");\n+    }\n+\n+    @Override\n+    public void decode(SearchHit hit, Supplier<Object> getter, BlockBuilder output)\n+    {\n+        Object value = getter.get();\n+        if (value == null) {\n+            output.appendNull();\n+        }\n+        else if (value instanceof String) {\n+            String address = (String) value;\n+            if (address.contains(\".\")) {\n+                address = \"::\" + address;\n+            }\n+            BlockBuilder blockBuilder = IPADDRESS.createFixedSizeBlockBuilder(1);\n+            Slice slice = Slices.wrappedBuffer(InetAddresses.forString(address).getAddress());\n+            IPADDRESS.writeSlice(blockBuilder, slice);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg3OTgzNQ==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403879835", "bodyText": "I still have the same error\nCaused by: java.lang.IllegalArgumentException: position is not valid at io.prestosql.spi.block.RunLengthEncodedBlock.checkReadablePosition(RunLengthEncodedBlock.java:311) at io.prestosql.spi.block.RunLengthEncodedBlock.isNull(RunLengthEncodedBlock.java:277) at io.prestosql.type.IpAddressType.getObjectValue(IpAddressType.java:121)", "author": "eskabetxe", "createdAt": "2020-04-06T07:26:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzOTk4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4ODQyNg==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403888426", "bodyText": "in current code, you're not writing to output\nIPADDRESS.writeSlice(blockBuilder, slice); -> IPADDRESS.writeSlice(output, slice);\nyou don't need intermediate block build, see\nhttps://github.com/prestosql/presto/blob/677df2ced0306609d870c75b75da347c4a688e62/presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/decoders/VarbinaryDecoder.java#L37-L39", "author": "findepi", "createdAt": "2020-04-06T07:43:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzOTk4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkxODgyNg==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403918826", "bodyText": "yes its that..\nbut I have to touch TestingPrestoClient to add IPADDRESS on convertToRowValue", "author": "eskabetxe", "createdAt": "2020-04-06T08:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzOTk4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwMDAyOQ==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r404600029", "bodyText": "We should copy that logic for now. Ideally, we would lookup the cast operator in TypeManager, but I don\u2019t think that is supported yet and @dain has reservations about adding it due to conflicting with the function work.", "author": "electrum", "createdAt": "2020-04-07T07:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzOTk4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxMzcwMA==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r404613700", "bodyText": "done", "author": "eskabetxe", "createdAt": "2020-04-07T08:02:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzOTk4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4OTExOQ==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403889119", "bodyText": "I understand this is just temporary change.\nThis will need to be reverted, but let's focus on this once you get things working.\n(#3347 (comment))", "author": "findepi", "createdAt": "2020-04-06T07:44:32Z", "path": "presto-elasticsearch/pom.xml", "diffHunk": "@@ -303,20 +303,18 @@\n         <dependency>\n             <groupId>org.testcontainers</groupId>\n             <artifactId>elasticsearch</artifactId>\n-            <version>1.12.3</version>\n             <scope>test</scope>\n         </dependency>\n \n         <dependency>\n             <groupId>io.prestosql</groupId>\n             <artifactId>presto-client</artifactId>\n-            <scope>test</scope>\n         </dependency>\n \n+\n         <dependency>\n             <groupId>io.prestosql</groupId>\n             <artifactId>presto-main</artifactId>\n-            <scope>test</scope>", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg5MzYzMg==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r403893632", "bodyText": "I have to do this to get IpAddressType", "author": "eskabetxe", "createdAt": "2020-04-06T07:52:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4OTExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NTk4Mw==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r404395983", "bodyText": "i added a fixup for this -- 701d2f5", "author": "findepi", "createdAt": "2020-04-06T21:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4OTExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU5NDUwNA==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r404594504", "bodyText": "@findepi  there are problems with that change\nIpAddressDecoder.java:[20,25] package io.prestosql.type does not exist\nElasticsearchPageSource.java:[73,32] package io.prestosql.type does not exist\nthe problematic imports are\nio.prestosql.type.IpAddressOperators\nio.prestosql.type.IpAddressType\nthe change you add to ElasticSearchMetadata should be replicated in this two class?", "author": "eskabetxe", "createdAt": "2020-04-07T07:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4OTExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxMzgxMQ==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r404613811", "bodyText": "fixed", "author": "eskabetxe", "createdAt": "2020-04-07T08:02:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg4OTExOQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxODkwOA==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r405018908", "bodyText": "Nit: use a regular comment, not javadoc:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                  *this is a copy of IpAddressOperators.castFromVarcharToIpAddress method\n          \n          \n            \n                  */\n          \n          \n            \n                // This is a copy of IpAddressOperators.castFromVarcharToIpAddress method", "author": "martint", "createdAt": "2020-04-07T18:21:06Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/decoders/IpAddressDecoder.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.elasticsearch.decoders;\n+\n+import com.google.common.net.InetAddresses;\n+import io.airlift.slice.Slice;\n+import io.airlift.slice.Slices;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.type.Type;\n+import org.elasticsearch.search.SearchHit;\n+\n+import java.util.function.Supplier;\n+\n+import static io.airlift.slice.Slices.wrappedBuffer;\n+import static io.prestosql.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static io.prestosql.spi.StandardErrorCode.INVALID_CAST_ARGUMENT;\n+import static io.prestosql.spi.StandardErrorCode.TYPE_MISMATCH;\n+import static java.lang.String.format;\n+import static java.lang.System.arraycopy;\n+import static java.util.Objects.requireNonNull;\n+\n+public class IpAddressDecoder\n+        implements Decoder\n+{\n+    private final String path;\n+    private final Type ipAddressType;\n+\n+    public IpAddressDecoder(String path, Type type)\n+    {\n+        this.path = requireNonNull(path, \"path is null\");\n+        this.ipAddressType = requireNonNull(type, \"type is null\");\n+    }\n+\n+    @Override\n+    public void decode(SearchHit hit, Supplier<Object> getter, BlockBuilder output)\n+    {\n+        Object value = getter.get();\n+        if (value == null) {\n+            output.appendNull();\n+        }\n+        else if (value instanceof String) {\n+            String address = (String) value;\n+            Slice slice = castToIpAddress(Slices.utf8Slice(address));\n+            ipAddressType.writeSlice(output, slice);\n+        }\n+        else {\n+            throw new PrestoException(TYPE_MISMATCH, format(\"Expected a string value for field '%s' of type IP: %s [%s]\", path, value, value.getClass().getSimpleName()));\n+        }\n+    }\n+\n+    /**\n+      *this is a copy of IpAddressOperators.castFromVarcharToIpAddress method\n+      */", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzMTY3Nw==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r405031677", "bodyText": "done", "author": "eskabetxe", "createdAt": "2020-04-07T18:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxODkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTA4NQ==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r405019085", "bodyText": "Unrelated changes?", "author": "martint", "createdAt": "2020-04-07T18:21:24Z", "path": "presto-elasticsearch/pom.xml", "diffHunk": "@@ -331,18 +330,6 @@\n             <scope>test</scope>\n         </dependency>\n \n-        <dependency>\n-            <groupId>io.airlift</groupId>\n-            <artifactId>http-server</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-\n-        <dependency>\n-            <groupId>io.airlift</groupId>\n-            <artifactId>node</artifactId>\n-            <scope>test</scope>\n-        </dependency>\n-", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzMTc1NA==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r405031754", "bodyText": "reverted", "author": "eskabetxe", "createdAt": "2020-04-07T18:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTE3OQ==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r405019179", "bodyText": "Unrelated change?", "author": "martint", "createdAt": "2020-04-07T18:21:34Z", "path": "presto-elasticsearch/pom.xml", "diffHunk": "@@ -355,12 +342,6 @@\n             <scope>test</scope>\n         </dependency>\n \n-        <dependency>\n-            <groupId>javax.servlet</groupId>\n-            <artifactId>javax.servlet-api</artifactId>\n-            <scope>test</scope>\n-        </dependency>", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzMTgwMw==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r405031803", "bodyText": "reverted", "author": "eskabetxe", "createdAt": "2020-04-07T18:42:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTMzMg==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r405019332", "bodyText": "Unrelated change?", "author": "martint", "createdAt": "2020-04-07T18:21:47Z", "path": "presto-elasticsearch/pom.xml", "diffHunk": "@@ -303,7 +303,6 @@\n         <dependency>\n             <groupId>org.testcontainers</groupId>\n             <artifactId>elasticsearch</artifactId>\n-            <version>1.12.3</version>", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzMTgzMw==", "url": "https://github.com/trinodb/trino/pull/3347#discussion_r405031833", "bodyText": "reverted", "author": "eskabetxe", "createdAt": "2020-04-07T18:42:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxOTMzMg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "0f18922922a024a32ca862f2080ffa50d0065cc1", "url": "https://github.com/trinodb/trino/commit/0f18922922a024a32ca862f2080ffa50d0065cc1", "message": "Add to Elastic connector IpAddress field", "committedDate": "2020-04-07T18:41:09Z", "type": "commit"}, {"oid": "0f18922922a024a32ca862f2080ffa50d0065cc1", "url": "https://github.com/trinodb/trino/commit/0f18922922a024a32ca862f2080ffa50d0065cc1", "message": "Add to Elastic connector IpAddress field", "committedDate": "2020-04-07T18:41:09Z", "type": "forcePushed"}]}