{"pr_number": 3512, "pr_title": "Optimize Elasticsearch queries that fetch no columns", "pr_createdAt": "2020-04-22T19:30:03Z", "pr_url": "https://github.com/trinodb/trino/pull/3512", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ1MTk1OA==", "url": "https://github.com/trinodb/trino/pull/3512#discussion_r413451958", "bodyText": "Interesting that POST works.  Shouldn't this be a GET?", "author": "aalbu", "createdAt": "2020-04-23T01:55:33Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/client/ElasticsearchClient.java", "diffHunk": "@@ -615,6 +607,45 @@ public SearchResponse nextPage(String scrollId)\n         }\n     }\n \n+    public long count(String index, int shard, QueryBuilder query)\n+    {\n+        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource()\n+                .query(query);\n+\n+        LOG.debug(\"Count: %s:%s, query: %s\", index, shard, sourceBuilder);\n+\n+        long start = System.nanoTime();\n+        try {\n+            Response response;\n+            try {\n+                response = client.getLowLevelClient()\n+                        .performRequest(\n+                                \"POST\",", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0NzM3OQ==", "url": "https://github.com/trinodb/trino/pull/3512#discussion_r413547379", "bodyText": "It's not surprising. It's probably not very strict about it. But yeah, it's supposed to be a GET according to the documentation. I'll adjust it.", "author": "martint", "createdAt": "2020-04-23T06:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ1MTk1OA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2MjMwNQ==", "url": "https://github.com/trinodb/trino/pull/3512#discussion_r416862305", "bodyText": "@sopel39 is it safe to inject 2 billion row pages into the system?\nin case of select count(*) from .., they are going to be partial aggregated quickly\nwhat about select 1 from .. query?\n(Martin, if you make pages, smaller, make it also lazy, as pages list  may grow big. Currently, it's well consttrained by my imagination)", "author": "findepi", "createdAt": "2020-04-28T19:19:41Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchPageSourceProvider.java", "diffHunk": "@@ -53,10 +58,33 @@ public ConnectorPageSource createPageSource(\n         requireNonNull(split, \"split is null\");\n         requireNonNull(table, \"table is null\");\n \n-        return new ElasticsearchPageSource(\n+        ElasticsearchTableHandle elasticsearchTable = (ElasticsearchTableHandle) table;\n+        ElasticsearchSplit elasticsearchSplit = (ElasticsearchSplit) split;\n+\n+        if (columns.isEmpty()) {\n+            long count = client.count(\n+                    elasticsearchSplit.getIndex(),\n+                    elasticsearchSplit.getShard(),\n+                    buildSearchQuery(session, elasticsearchTable.getConstraint().transform(ElasticsearchColumnHandle.class::cast), elasticsearchTable.getQuery()));\n+\n+            if (elasticsearchTable.getLimit().isPresent()) {\n+                count = Math.min(elasticsearchTable.getLimit().getAsLong(), count);\n+            }\n+\n+            ImmutableList.Builder<Page> pages = ImmutableList.builder();\n+            while (count > 0) {\n+                int batch = Ints.saturatedCast(count);\n+                pages.add(new Page(batch));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzNzYxNQ==", "url": "https://github.com/trinodb/trino/pull/3512#discussion_r417537615", "bodyText": "These pages are empty, actually. The only thing they carry is a count.", "author": "martint", "createdAt": "2020-04-29T18:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2MjMwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0MzYzNg==", "url": "https://github.com/trinodb/trino/pull/3512#discussion_r418343636", "bodyText": "Yes, I know. But if you project a column (random or constant), they become non-empty and i think ScanFilterProject won't be able to split this into multiple small ones. Will it?", "author": "findepi", "createdAt": "2020-04-30T23:24:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2MjMwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2MjgzMQ==", "url": "https://github.com/trinodb/trino/pull/3512#discussion_r416862831", "bodyText": "ScanQueryPageSource is going to repeat the same logic.\nMaybe do it here once, and pass to client.count or ScanQueryPageSource?", "author": "findepi", "createdAt": "2020-04-28T19:20:31Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchPageSourceProvider.java", "diffHunk": "@@ -53,10 +58,33 @@ public ConnectorPageSource createPageSource(\n         requireNonNull(split, \"split is null\");\n         requireNonNull(table, \"table is null\");\n \n-        return new ElasticsearchPageSource(\n+        ElasticsearchTableHandle elasticsearchTable = (ElasticsearchTableHandle) table;\n+        ElasticsearchSplit elasticsearchSplit = (ElasticsearchSplit) split;\n+\n+        if (columns.isEmpty()) {\n+            long count = client.count(\n+                    elasticsearchSplit.getIndex(),\n+                    elasticsearchSplit.getShard(),\n+                    buildSearchQuery(session, elasticsearchTable.getConstraint().transform(ElasticsearchColumnHandle.class::cast), elasticsearchTable.getQuery()));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU0Mjk3Mg==", "url": "https://github.com/trinodb/trino/pull/3512#discussion_r417542972", "bodyText": "That's less ideal. I consider that an implementation detail of the specific page source. This branch of the if is really a \"CountQueryPageSource\", but I thought it overkill to create a dedicated class for it.\nI moved this whole block into a separate dedicated method.", "author": "martint", "createdAt": "2020-04-29T19:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2MjgzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2NzQ1MQ==", "url": "https://github.com/trinodb/trino/pull/3512#discussion_r416867451", "bodyText": "would be nice to use sth like ThriftMetastoreApiStats -- less verbose and count failures too\n(no change requested)", "author": "findepi", "createdAt": "2020-04-28T19:28:32Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/client/ElasticsearchClient.java", "diffHunk": "@@ -613,6 +605,45 @@ public SearchResponse nextPage(String scrollId)\n         }\n     }\n \n+    public long count(String index, int shard, QueryBuilder query)\n+    {\n+        SearchSourceBuilder sourceBuilder = SearchSourceBuilder.searchSource()\n+                .query(query);\n+\n+        LOG.debug(\"Count: %s:%s, query: %s\", index, shard, sourceBuilder);\n+\n+        long start = System.nanoTime();\n+        try {\n+            Response response;\n+            try {\n+                response = client.getLowLevelClient()\n+                        .performRequest(\n+                                \"GET\",\n+                                format(\"/%s/_count?preference=_shards:%s\", index, shard),\n+                                ImmutableMap.of(),\n+                                new StringEntity(sourceBuilder.toString()),\n+                                new BasicHeader(\"Content-Type\", \"application/json\"));\n+            }\n+            catch (ResponseException e) {\n+                throw propagate(e);\n+            }\n+            catch (IOException e) {\n+                throw new PrestoException(ELASTICSEARCH_CONNECTION_ERROR, e);\n+            }\n+\n+            try {\n+                return COUNT_RESPONSE_CODEC.fromJson(EntityUtils.toByteArray(response.getEntity()))\n+                        .getCount();\n+            }\n+            catch (IOException e) {\n+                throw new PrestoException(ELASTICSEARCH_INVALID_RESPONSE, e);\n+            }\n+        }\n+        finally {\n+            countStats.add(Duration.nanosSince(start));\n+        }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2Nzk4OA==", "url": "https://github.com/trinodb/trino/pull/3512#discussion_r416867988", "bodyText": "would be nice to extract this in a separate \"extract ..\" commit\n(i assume nothing material changed beyond that btw)", "author": "findepi", "createdAt": "2020-04-28T19:29:29Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/client/ElasticsearchClient.java", "diffHunk": "@@ -663,6 +701,31 @@ public TimeStat getNextPageStats()\n         return handler.process(body);\n     }\n \n+    private static PrestoException propagate(ResponseException exception)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2OTAyMg==", "url": "https://github.com/trinodb/trino/pull/3512#discussion_r416869022", "bodyText": "as we are heading towards more agg pushdowns, you can add this as generic test cases in\nio.prestosql.testing.AbstractTestIntegrationSmokeTest#testCountAll", "author": "findepi", "createdAt": "2020-04-28T19:31:21Z", "path": "presto-elasticsearch/src/test/java/io/prestosql/elasticsearch/BaseElasticsearchSmokeTest.java", "diffHunk": "@@ -739,6 +740,15 @@ public void testMultiIndexAlias()\n                 \"SELECT (SELECT count(*) FROM region) + (SELECT count(*) FROM nation)\");\n     }\n \n+    @Test\n+    public void testCount()\n+    {\n+        assertQuery(\"SELECT count(*) FROM orders\");\n+        assertQuery(\"SELECT count(*) FROM orders WHERE orderkey > 10\");\n+        assertQuery(\"SELECT count(*) FROM (SELECT * FROM orders LIMIT 10)\");\n+        assertQuery(\"SELECT count(*) FROM (SELECT * FROM orders WHERE orderkey > 10 LIMIT 10)\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "dd06d27a2bd465bb68c2e774f23bbbb895b79172", "url": "https://github.com/trinodb/trino/commit/dd06d27a2bd465bb68c2e774f23bbbb895b79172", "message": "Extract error handling processing to a separate method", "committedDate": "2020-05-09T00:35:05Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4OTk5NA==", "url": "https://github.com/trinodb/trino/pull/3512#discussion_r422489994", "bodyText": "please capture some motivation how we ended up with a modest number as a comment", "author": "findepi", "createdAt": "2020-05-09T12:29:34Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/CountQueryPageSource.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.elasticsearch;\n+\n+import io.prestosql.elasticsearch.client.ElasticsearchClient;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.connector.ConnectorPageSource;\n+import io.prestosql.spi.connector.ConnectorSession;\n+\n+import static io.prestosql.elasticsearch.ElasticsearchQueryBuilder.buildSearchQuery;\n+import static java.util.Objects.requireNonNull;\n+\n+class CountQueryPageSource\n+        implements ConnectorPageSource\n+{\n+    private static final int BATCH_SIZE = 10000;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ5MDA1Mw==", "url": "https://github.com/trinodb/trino/pull/3512#discussion_r422490053", "bodyText": "readTime -> readTimeNanos\n(btw we have readTimeNanos in ScanQueryPageSource)", "author": "findepi", "createdAt": "2020-05-09T12:30:08Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/CountQueryPageSource.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.elasticsearch;\n+\n+import io.prestosql.elasticsearch.client.ElasticsearchClient;\n+import io.prestosql.spi.Page;\n+import io.prestosql.spi.connector.ConnectorPageSource;\n+import io.prestosql.spi.connector.ConnectorSession;\n+\n+import static io.prestosql.elasticsearch.ElasticsearchQueryBuilder.buildSearchQuery;\n+import static java.util.Objects.requireNonNull;\n+\n+class CountQueryPageSource\n+        implements ConnectorPageSource\n+{\n+    private static final int BATCH_SIZE = 10000;\n+\n+    private final long readTime;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8a675a93e6b5da4624be08068f32da70d1aaa7ea", "url": "https://github.com/trinodb/trino/commit/8a675a93e6b5da4624be08068f32da70d1aaa7ea", "message": "Optimize Elasticsearch queries that fetch no columns\n\nIn that case, the connector only needs to produce pages with\na row count. We leverage Elasticsearch's count API.", "committedDate": "2020-05-10T16:47:59Z", "type": "commit"}, {"oid": "8a675a93e6b5da4624be08068f32da70d1aaa7ea", "url": "https://github.com/trinodb/trino/commit/8a675a93e6b5da4624be08068f32da70d1aaa7ea", "message": "Optimize Elasticsearch queries that fetch no columns\n\nIn that case, the connector only needs to produce pages with\na row count. We leverage Elasticsearch's count API.", "committedDate": "2020-05-10T16:47:59Z", "type": "forcePushed"}]}