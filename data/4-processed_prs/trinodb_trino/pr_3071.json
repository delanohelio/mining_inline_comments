{"pr_number": 3071, "pr_title": "Introduce HiveMetastoreDecorator", "pr_createdAt": "2020-03-11T13:32:28Z", "pr_url": "https://github.com/trinodb/trino/pull/3071", "timeline": [{"oid": "798846982bbba8e2f673702fdc5ea5f29235186e", "url": "https://github.com/trinodb/trino/commit/798846982bbba8e2f673702fdc5ea5f29235186e", "message": "Introduce HiveMetastoreDecorator", "committedDate": "2020-03-11T13:36:09Z", "type": "commit"}, {"oid": "798846982bbba8e2f673702fdc5ea5f29235186e", "url": "https://github.com/trinodb/trino/commit/798846982bbba8e2f673702fdc5ea5f29235186e", "message": "Introduce HiveMetastoreDecorator", "committedDate": "2020-03-11T13:36:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0ODc1Ng==", "url": "https://github.com/trinodb/trino/pull/3071#discussion_r391148756", "bodyText": "Why its specific to caching?", "author": "sopel39", "createdAt": "2020-03-11T17:39:51Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/cache/CachingHiveMetastoreModule.java", "diffHunk": "@@ -36,15 +39,22 @@\n     public void configure(Binder binder)\n     {\n         configBinder(binder).bindConfig(CachingHiveMetastoreConfig.class);\n+        newOptionalBinder(binder, HiveMetastoreDecorator.class);\n         newExporter(binder).export(HiveMetastore.class)\n                 .as(generator -> generator.generatedNameOf(CachingHiveMetastore.class));\n     }\n \n     @Provides\n     @Singleton\n-    public HiveMetastore createCachingHiveMetastore(@ForCachingHiveMetastore HiveMetastore delegate, @ForCachingHiveMetastore Executor executor, CachingHiveMetastoreConfig config)\n+    public HiveMetastore createCachingHiveMetastore(\n+            @ForCachingHiveMetastore HiveMetastore delegate,\n+            @ForCachingHiveMetastore Executor executor,\n+            CachingHiveMetastoreConfig config,\n+            Optional<HiveMetastoreDecorator> hiveMetastoreDecorator)\n     {\n-        return cachingHiveMetastore(delegate, executor, config);\n+        HiveMetastore decoratedDelegate = hiveMetastoreDecorator.map(decorator -> decorator.decorate(delegate))\n+                .orElse(delegate);\n+        return cachingHiveMetastore(decoratedDelegate, executor, config);", "originalCommit": "798846982bbba8e2f673702fdc5ea5f29235186e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5Mjc3MA==", "url": "https://github.com/trinodb/trino/pull/3071#discussion_r391192770", "bodyText": "It is not specific to caching. Caching module is the one that provides actual HiveMetastore implementation.", "author": "kokosing", "createdAt": "2020-03-11T18:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0ODc1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwNjI0Nw==", "url": "https://github.com/trinodb/trino/pull/3071#discussion_r391306247", "bodyText": "But why not to decorate caching metastore instead? Who provides ForCachingHiveMetastore? I think it should he decorated there.\nPutting it here is odd", "author": "sopel39", "createdAt": "2020-03-11T22:27:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0ODc1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNjMxNQ==", "url": "https://github.com/trinodb/trino/pull/3071#discussion_r391316315", "bodyText": "That\u2019s a good point. Do we want to decorate physical or logical calls? We should probably document this in the interface.", "author": "electrum", "createdAt": "2020-03-11T22:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0ODc1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyMzc0Ng==", "url": "https://github.com/trinodb/trino/pull/3071#discussion_r391523746", "bodyText": "Who provides ForCachingHiveMetastore?\n\nEvery metastore module like FileHiveMetastoreModule etc.\n\nI think it should he decorated there.\n\nThen I would need to decorate metastore in 4 places. Also possibly there might be Hive metastore that are provided externally, then I might not be able to do it there.\n\nDo we want to decorate physical or logical calls?\n\nI care only about physical calls.\n\nWe should probably document this in the interface.\n\nDo you mean javadoc?\nI think the best design would be to provide a new guice module between metastores modules and caching module, but I considered this as an overkill.", "author": "kokosing", "createdAt": "2020-03-12T10:21:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0ODc1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUyNDQzNA==", "url": "https://github.com/trinodb/trino/pull/3071#discussion_r391524434", "bodyText": "Every metastore module like FileHiveMetastoreModule etc.\n\nI think another module and annotation (e.g @ForHiveMetastoreDecorator) would be cleaner solution (less binding, more flexible)", "author": "sopel39", "createdAt": "2020-03-12T10:23:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0ODc1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzMjkxOA==", "url": "https://github.com/trinodb/trino/pull/3071#discussion_r391532918", "bodyText": "Do you mean to using @ForHiveMetastoreDecorator instead of current @ForHiveMetastoreCaching?  And then module with decoration would produce bean with @ForHiveMetastoreCaching?\nI somehow think that this kind of a contract that every metastore module produce @ForHiveMetastoreCaching. I didn't want to change that.\nInstead maybe we should not annotate beans with information where they should be consumed but with information what do they provide. So I propose to have:\n\n@BaseHiveMetastore\n@DecoratedHiveMetastore\n@CachingHiveMetastore\nThen last module would expose @CachingHiveMetastore as the HiveMetastore.\nWDYT?", "author": "kokosing", "createdAt": "2020-03-12T10:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0ODc1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUzNTc5MQ==", "url": "https://github.com/trinodb/trino/pull/3071#discussion_r391535791", "bodyText": "@CachingHiveMetastore would not be necessarily caching. I thin using @ForXXX abstracts actual providing implementation", "author": "sopel39", "createdAt": "2020-03-12T10:44:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0ODc1Ng=="}], "type": "inlineReview"}]}