{"pr_number": 6158, "pr_title": "Efficiently enumerate symlinked files from manifest", "pr_createdAt": "2020-11-30T21:33:23Z", "pr_url": "https://github.com/trinodb/trino/pull/6158", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "decd097e0e45b8dd8265f71d797866c84f398074", "url": "https://github.com/trinodb/trino/commit/decd097e0e45b8dd8265f71d797866c84f398074", "message": "Extract BackgroundHiveSplitLoader#createHiveSymlinkSplits", "committedDate": "2020-12-01T13:43:17Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU3MDc4Mg==", "url": "https://github.com/trinodb/trino/pull/6158#discussion_r533570782", "bodyText": "The test relies on ordering in paths being preserved. Maybe use assertEqualsNoOrder(paths, Streams.stream(splitIterator.get()).map(InternalHiveSplit::getPath).collect(toImmutableList())?", "author": "willmostly", "createdAt": "2020-12-01T16:58:02Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestBackgroundHiveSplitLoader.java", "diffHunk": "@@ -742,6 +749,81 @@ public void testValidateFileBuckets()\n         BackgroundHiveSplitLoader.validateFileBuckets(bucketFiles, 30, \"tableName\", \"partitionName\");\n     }\n \n+    @Test\n+    public void testBuildManifestFileIterator()\n+            throws Exception\n+    {\n+        CachingDirectoryLister directoryLister = new CachingDirectoryLister(new Duration(5, TimeUnit.MINUTES), 1000, ImmutableList.of());\n+        Configuration configuration = new Configuration(false);\n+        Properties schema = new Properties();\n+        schema.setProperty(FILE_INPUT_FORMAT, SymlinkTextInputFormat.class.getName());\n+        schema.setProperty(SERIALIZATION_LIB, AVRO.getSerDe());\n+\n+        Path firstFilePath = new Path(\"hdfs://VOL1:9000/db_name/table_name/file1\");\n+        Path secondFilePath = new Path(\"hdfs://VOL1:9000/db_name/table_name/file2\");\n+        List<Path> paths = ImmutableList.of(firstFilePath, secondFilePath);\n+        List<LocatedFileStatus> files = paths.stream()\n+                .map(TestBackgroundHiveSplitLoader::locatedFileStatus)\n+                .collect(toImmutableList());\n+\n+        BackgroundHiveSplitLoader backgroundHiveSplitLoader = backgroundHiveSplitLoader(\n+                files,\n+                directoryLister);\n+        Optional<Iterator<InternalHiveSplit>> splitIterator = backgroundHiveSplitLoader.buildManifestFileIterator(\n+                configuration,\n+                \"partition\",\n+                schema,\n+                ImmutableList.of(),\n+                TupleDomain.all(),\n+                () -> true,\n+                false,\n+                TableToPartitionMapping.empty(),\n+                new Path(\"hdfs://VOL1:9000/db_name/table_name\"),\n+                paths,\n+                true);\n+        assertTrue(splitIterator.isPresent());\n+        List<InternalHiveSplit> splits = Streams.stream(splitIterator.get())\n+                .collect(toImmutableList());\n+        assertEquals(splits.size(), 2);\n+        assertEquals(splits.get(0).getPath(), firstFilePath.toString());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5MDA4Mg==", "url": "https://github.com/trinodb/trino/pull/6158#discussion_r533690082", "bodyText": "Nit: declare variable as Set", "author": "electrum", "createdAt": "2020-12-01T20:09:19Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/BackgroundHiveSplitLoader.java", "diffHunk": "@@ -361,13 +370,40 @@ private void invokeNoMoreSplitsIfNecessary()\n         FileSystem fs = hdfsEnvironment.getFileSystem(hdfsContext, path);\n         boolean s3SelectPushdownEnabled = shouldEnablePushdownForTable(session, table, path.toString(), partition.getPartition());\n \n+        // S3 Select pushdown works at the granularity of individual S3 objects,\n+        // therefore we must not split files when it is enabled.\n+        // Skip header / footer lines are not splittable except for a special case when skip.header.line.count=1\n+        boolean splittable = !s3SelectPushdownEnabled && getFooterCount(schema) == 0 && getHeaderCount(schema) <= 1;\n+\n         if (inputFormat instanceof SymlinkTextInputFormat) {\n             if (tableBucketInfo.isPresent()) {\n                 throw new PrestoException(NOT_SUPPORTED, \"Bucketed table in SymlinkTextInputFormat is not yet supported\");\n             }\n             List<Path> targetPaths = hdfsEnvironment.doAs(\n                     hdfsContext.getIdentity().getUser(),\n                     () -> getTargetPathsFromSymlink(fs, path));\n+            ImmutableSet<Path> parents = targetPaths.stream()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5MTc1NQ==", "url": "https://github.com/trinodb/trino/pull/6158#discussion_r533691755", "bodyText": "For a locally used map, I would just a HashMap", "author": "electrum", "createdAt": "2020-12-01T20:12:07Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/BackgroundHiveSplitLoader.java", "diffHunk": "@@ -601,6 +631,63 @@ private void invokeNoMoreSplitsIfNecessary()\n         return lastResult;\n     }\n \n+    @VisibleForTesting\n+    Optional<Iterator<InternalHiveSplit>> buildManifestFileIterator(\n+            Configuration configuration,\n+            String partitionName,\n+            Properties schema,\n+            List<HivePartitionKey> partitionKeys,\n+            TupleDomain<HiveColumnHandle> effectivePredicate,\n+            BooleanSupplier partitionMatchSupplier,\n+            boolean s3SelectPushdownEnabled,\n+            TableToPartitionMapping tableToPartitionMapping,\n+            Path parent,\n+            List<Path> paths,\n+            boolean splittable)\n+            throws IOException\n+    {\n+        FileSystem targetFilesystem = hdfsEnvironment.getFileSystem(hdfsContext, parent);\n+\n+        ImmutableMap.Builder<Path, LocatedFileStatus> fileStatusesBuilder = ImmutableMap.builder();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5MjQzNQ==", "url": "https://github.com/trinodb/trino/pull/6158#discussion_r533692435", "bodyText": "Move this comment before the \"if\", since it's explaining what it does", "author": "electrum", "createdAt": "2020-12-01T20:13:23Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/BackgroundHiveSplitLoader.java", "diffHunk": "@@ -601,6 +631,63 @@ private void invokeNoMoreSplitsIfNecessary()\n         return lastResult;\n     }\n \n+    @VisibleForTesting\n+    Optional<Iterator<InternalHiveSplit>> buildManifestFileIterator(\n+            Configuration configuration,\n+            String partitionName,\n+            Properties schema,\n+            List<HivePartitionKey> partitionKeys,\n+            TupleDomain<HiveColumnHandle> effectivePredicate,\n+            BooleanSupplier partitionMatchSupplier,\n+            boolean s3SelectPushdownEnabled,\n+            TableToPartitionMapping tableToPartitionMapping,\n+            Path parent,\n+            List<Path> paths,\n+            boolean splittable)\n+            throws IOException\n+    {\n+        FileSystem targetFilesystem = hdfsEnvironment.getFileSystem(hdfsContext, parent);\n+\n+        ImmutableMap.Builder<Path, LocatedFileStatus> fileStatusesBuilder = ImmutableMap.builder();\n+        HiveFileIterator fileStatusIterator = new HiveFileIterator(table, parent, targetFilesystem, directoryLister, namenodeStats, IGNORED, false);\n+        fileStatusIterator.forEachRemaining(status -> fileStatusesBuilder.put(getPathWithoutSchemeAndAuthority(status.getPath()), status));\n+\n+        Map<Path, LocatedFileStatus> fileStatuses = fileStatusesBuilder.build();\n+        List<LocatedFileStatus> locatedFileStatuses = new ArrayList<>();\n+        for (Path path : paths) {\n+            LocatedFileStatus status = fileStatuses.get(getPathWithoutSchemeAndAuthority(path));\n+            if (status == null) {\n+                return Optional.empty();\n+                // This check will catch all directories in the manifest since HiveFileIterator will not return any directories.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5MzYyOA==", "url": "https://github.com/trinodb/trino/pull/6158#discussion_r533693628", "bodyText": "Remove period at end of description (we don't have that for others)\nLet's use the word \"directory\" instead of \"folder\", since that's the more common term for Hadoop", "author": "electrum", "createdAt": "2020-12-01T20:15:29Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveConfig.java", "diffHunk": "@@ -1009,4 +1011,17 @@ public HiveConfig setTimestampPrecision(HiveTimestampPrecision timestampPrecisio\n         this.timestampPrecision = timestampPrecision;\n         return this;\n     }\n+\n+    public boolean isOptimizeSymlinkListing()\n+    {\n+        return this.optimizeSymlinkListing;\n+    }\n+\n+    @Config(\"hive.optimize-symlink-listing\")\n+    @ConfigDescription(\"Optimize listing for SymlinkTextFormat tables with files in a single folder.\")", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5NDMwOA==", "url": "https://github.com/trinodb/trino/pull/6158#discussion_r533694308", "bodyText": "Same comments as other description", "author": "electrum", "createdAt": "2020-12-01T20:16:45Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveSessionProperties.java", "diffHunk": "@@ -390,6 +391,11 @@ public HiveSessionProperties(\n                         DYNAMIC_FILTERING_PROBE_BLOCKING_TIMEOUT,\n                         \"Duration to wait for completion of dynamic filters during split generation for probe side table\",\n                         hiveConfig.getDynamicFilteringProbeBlockingTimeout(),\n+                        false),\n+                booleanProperty(\n+                        OPTIMIZE_SYMLINK_LISTING,\n+                        \"Optimize listing for SymlinkTextFormat tables with files in a single folder.\",", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5NDgzMA==", "url": "https://github.com/trinodb/trino/pull/6158#discussion_r533694830", "bodyText": "This can be\n List<InternalHiveSplit> splits = ImmutableList.copyOf(splitIterator.get());", "author": "electrum", "createdAt": "2020-12-01T20:17:44Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestBackgroundHiveSplitLoader.java", "diffHunk": "@@ -742,6 +749,81 @@ public void testValidateFileBuckets()\n         BackgroundHiveSplitLoader.validateFileBuckets(bucketFiles, 30, \"tableName\", \"partitionName\");\n     }\n \n+    @Test\n+    public void testBuildManifestFileIterator()\n+            throws Exception\n+    {\n+        CachingDirectoryLister directoryLister = new CachingDirectoryLister(new Duration(5, TimeUnit.MINUTES), 1000, ImmutableList.of());\n+        Configuration configuration = new Configuration(false);\n+        Properties schema = new Properties();\n+        schema.setProperty(FILE_INPUT_FORMAT, SymlinkTextInputFormat.class.getName());\n+        schema.setProperty(SERIALIZATION_LIB, AVRO.getSerDe());\n+\n+        Path firstFilePath = new Path(\"hdfs://VOL1:9000/db_name/table_name/file1\");\n+        Path secondFilePath = new Path(\"hdfs://VOL1:9000/db_name/table_name/file2\");\n+        List<Path> paths = ImmutableList.of(firstFilePath, secondFilePath);\n+        List<LocatedFileStatus> files = paths.stream()\n+                .map(TestBackgroundHiveSplitLoader::locatedFileStatus)\n+                .collect(toImmutableList());\n+\n+        BackgroundHiveSplitLoader backgroundHiveSplitLoader = backgroundHiveSplitLoader(\n+                files,\n+                directoryLister);\n+        Optional<Iterator<InternalHiveSplit>> splitIterator = backgroundHiveSplitLoader.buildManifestFileIterator(\n+                configuration,\n+                \"partition\",\n+                schema,\n+                ImmutableList.of(),\n+                TupleDomain.all(),\n+                () -> true,\n+                false,\n+                TableToPartitionMapping.empty(),\n+                new Path(\"hdfs://VOL1:9000/db_name/table_name\"),\n+                paths,\n+                true);\n+        assertTrue(splitIterator.isPresent());\n+        List<InternalHiveSplit> splits = Streams.stream(splitIterator.get())", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "26187760a4079c03f77dac700fc206c36ba2a34c", "url": "https://github.com/trinodb/trino/commit/26187760a4079c03f77dac700fc206c36ba2a34c", "message": "Efficiently enumerate symlinked files from manifest\n\nGet file statuses in bulk when symlinked\nfiles have single common parent directory.", "committedDate": "2020-12-01T21:30:08Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "362be2a322602e4ea238cb6c722b5b12bb34f169", "url": "https://github.com/trinodb/trino/commit/362be2a322602e4ea238cb6c722b5b12bb34f169", "message": "Add Parquet symlink table product test", "committedDate": "2020-12-02T09:53:42Z", "type": "commit"}, {"oid": "362be2a322602e4ea238cb6c722b5b12bb34f169", "url": "https://github.com/trinodb/trino/commit/362be2a322602e4ea238cb6c722b5b12bb34f169", "message": "Add Parquet symlink table product test", "committedDate": "2020-12-02T09:53:42Z", "type": "forcePushed"}]}