{"pr_number": 4150, "pr_title": "Remove redundant EXISTS during optimization", "pr_createdAt": "2020-06-22T19:26:02Z", "pr_url": "https://github.com/trinodb/trino/pull/4150", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxMzU0NA==", "url": "https://github.com/trinodb/trino/pull/4150#discussion_r444013544", "bodyText": "isAtLeastScalar?", "author": "kokosing", "createdAt": "2020-06-23T07:21:18Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveRedundantExists.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.iterative.Rule;\n+import io.prestosql.sql.planner.optimizations.QueryCardinalityUtil;\n+import io.prestosql.sql.planner.plan.ApplyNode;\n+import io.prestosql.sql.planner.plan.Assignments;\n+import io.prestosql.sql.planner.plan.ProjectNode;\n+import io.prestosql.sql.tree.ExistsPredicate;\n+import io.prestosql.sql.tree.Expression;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.applyNode;\n+import static io.prestosql.sql.tree.BooleanLiteral.FALSE_LITERAL;\n+import static io.prestosql.sql.tree.BooleanLiteral.TRUE_LITERAL;\n+\n+/**\n+ * Given:\n+ *\n+ * <pre>\n+ * - Apply [X.*, e = EXISTS (true)]\n+ *   - X\n+ *   - S with cardinality >= 1\n+ * </pre>\n+ *\n+ * Produces:\n+ *\n+ * <pre>\n+ * - Project [X.*, e = true]\n+ *   - X\n+ * </pre>\n+ *\n+ * Given:\n+ *\n+ * <pre>\n+ * - Apply [X.*, e = EXISTS (true)]\n+ *   - X\n+ *   - S with cardinality = 0\n+ * </pre>\n+ *\n+ * Produces:\n+ *\n+ * <pre>\n+ * - Project [X.*, e = false]\n+ *   - X\n+ * </pre>\n+ */\n+public class RemoveRedundantExists\n+        implements Rule<ApplyNode>\n+{\n+    private static final Pattern<ApplyNode> PATTERN = applyNode()\n+            .matching(node -> node.getSubqueryAssignments()\n+                    .getExpressions().stream()\n+                    .allMatch(expression -> expression instanceof ExistsPredicate && ((ExistsPredicate) expression).getSubquery().equals(TRUE_LITERAL)));\n+\n+    @Override\n+    public Pattern<ApplyNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ApplyNode node, Captures captures, Context context)\n+    {\n+        Assignments.Builder assignments = Assignments.builder();\n+        assignments.putIdentities(node.getInput().getOutputSymbols());\n+\n+        Expression result;\n+        if (QueryCardinalityUtil.isAtMost(node.getSubquery(), context.getLookup(), 0)) {\n+            result = FALSE_LITERAL;\n+        }\n+        else if (QueryCardinalityUtil.isAtLeast(node.getSubquery(), context.getLookup(), 1)) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxMzg0Nw==", "url": "https://github.com/trinodb/trino/pull/4150#discussion_r444013847", "bodyText": "It would be nice to extract QueryCardinalityUtil.itEmpty()", "author": "kokosing", "createdAt": "2020-06-23T07:21:54Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveRedundantExists.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.iterative.Rule;\n+import io.prestosql.sql.planner.optimizations.QueryCardinalityUtil;\n+import io.prestosql.sql.planner.plan.ApplyNode;\n+import io.prestosql.sql.planner.plan.Assignments;\n+import io.prestosql.sql.planner.plan.ProjectNode;\n+import io.prestosql.sql.tree.ExistsPredicate;\n+import io.prestosql.sql.tree.Expression;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.applyNode;\n+import static io.prestosql.sql.tree.BooleanLiteral.FALSE_LITERAL;\n+import static io.prestosql.sql.tree.BooleanLiteral.TRUE_LITERAL;\n+\n+/**\n+ * Given:\n+ *\n+ * <pre>\n+ * - Apply [X.*, e = EXISTS (true)]\n+ *   - X\n+ *   - S with cardinality >= 1\n+ * </pre>\n+ *\n+ * Produces:\n+ *\n+ * <pre>\n+ * - Project [X.*, e = true]\n+ *   - X\n+ * </pre>\n+ *\n+ * Given:\n+ *\n+ * <pre>\n+ * - Apply [X.*, e = EXISTS (true)]\n+ *   - X\n+ *   - S with cardinality = 0\n+ * </pre>\n+ *\n+ * Produces:\n+ *\n+ * <pre>\n+ * - Project [X.*, e = false]\n+ *   - X\n+ * </pre>\n+ */\n+public class RemoveRedundantExists\n+        implements Rule<ApplyNode>\n+{\n+    private static final Pattern<ApplyNode> PATTERN = applyNode()\n+            .matching(node -> node.getSubqueryAssignments()\n+                    .getExpressions().stream()\n+                    .allMatch(expression -> expression instanceof ExistsPredicate && ((ExistsPredicate) expression).getSubquery().equals(TRUE_LITERAL)));\n+\n+    @Override\n+    public Pattern<ApplyNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(ApplyNode node, Captures captures, Context context)\n+    {\n+        Assignments.Builder assignments = Assignments.builder();\n+        assignments.putIdentities(node.getInput().getOutputSymbols());\n+\n+        Expression result;\n+        if (QueryCardinalityUtil.isAtMost(node.getSubquery(), context.getLookup(), 0)) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxNDE1OA==", "url": "https://github.com/trinodb/trino/pull/4150#discussion_r444014158", "bodyText": "S is not referenced above", "author": "kokosing", "createdAt": "2020-06-23T07:22:27Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveRedundantExists.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.iterative.Rule;\n+import io.prestosql.sql.planner.optimizations.QueryCardinalityUtil;\n+import io.prestosql.sql.planner.plan.ApplyNode;\n+import io.prestosql.sql.planner.plan.Assignments;\n+import io.prestosql.sql.planner.plan.ProjectNode;\n+import io.prestosql.sql.tree.ExistsPredicate;\n+import io.prestosql.sql.tree.Expression;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.applyNode;\n+import static io.prestosql.sql.tree.BooleanLiteral.FALSE_LITERAL;\n+import static io.prestosql.sql.tree.BooleanLiteral.TRUE_LITERAL;\n+\n+/**\n+ * Given:\n+ *\n+ * <pre>\n+ * - Apply [X.*, e = EXISTS (true)]\n+ *   - X\n+ *   - S with cardinality >= 1", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxODc5Mg==", "url": "https://github.com/trinodb/trino/pull/4150#discussion_r444318792", "bodyText": "Not sure I understand. S is the subquery branch of the Apply. The \"assignment\" (i..e, e = EXISTS(true)) is computed over S", "author": "martint", "createdAt": "2020-06-23T15:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxNDE1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAxNDI4Mg==", "url": "https://github.com/trinodb/trino/pull/4150#discussion_r444014282", "bodyText": "S is not referenced above", "author": "kokosing", "createdAt": "2020-06-23T07:22:41Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveRedundantExists.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.Symbol;\n+import io.prestosql.sql.planner.iterative.Rule;\n+import io.prestosql.sql.planner.optimizations.QueryCardinalityUtil;\n+import io.prestosql.sql.planner.plan.ApplyNode;\n+import io.prestosql.sql.planner.plan.Assignments;\n+import io.prestosql.sql.planner.plan.ProjectNode;\n+import io.prestosql.sql.tree.ExistsPredicate;\n+import io.prestosql.sql.tree.Expression;\n+\n+import static io.prestosql.sql.planner.plan.Patterns.applyNode;\n+import static io.prestosql.sql.tree.BooleanLiteral.FALSE_LITERAL;\n+import static io.prestosql.sql.tree.BooleanLiteral.TRUE_LITERAL;\n+\n+/**\n+ * Given:\n+ *\n+ * <pre>\n+ * - Apply [X.*, e = EXISTS (true)]\n+ *   - X\n+ *   - S with cardinality >= 1\n+ * </pre>\n+ *\n+ * Produces:\n+ *\n+ * <pre>\n+ * - Project [X.*, e = true]\n+ *   - X\n+ * </pre>\n+ *\n+ * Given:\n+ *\n+ * <pre>\n+ * - Apply [X.*, e = EXISTS (true)]\n+ *   - X\n+ *   - S with cardinality = 0", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5NjA4Mg==", "url": "https://github.com/trinodb/trino/pull/4150#discussion_r444096082", "bodyText": "static import expression", "author": "sopel39", "createdAt": "2020-06-23T09:40:00Z", "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestRemoveRedundantExists.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.sql.planner.assertions.PlanMatchPattern;\n+import io.prestosql.sql.planner.iterative.rule.test.BaseRuleTest;\n+import io.prestosql.sql.planner.plan.Assignments;\n+import io.prestosql.sql.tree.ExistsPredicate;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.project;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.values;\n+import static io.prestosql.sql.tree.BooleanLiteral.TRUE_LITERAL;\n+\n+public class TestRemoveRedundantExists\n+        extends BaseRuleTest\n+{\n+    @Test\n+    public void testExistsFalse()\n+    {\n+        tester().assertThat(new RemoveRedundantExists())\n+                .on(p -> p.apply(Assignments.of(p.symbol(\"exists\"), new ExistsPredicate(TRUE_LITERAL)),\n+                        ImmutableList.of(),\n+                        p.values(1),\n+                        p.values(0)))\n+                .matches(\n+                        project(\n+                                ImmutableMap.of(\"exists\", PlanMatchPattern.expression(\"false\")),", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5Njg3MA==", "url": "https://github.com/trinodb/trino/pull/4150#discussion_r444096870", "bodyText": "Add another test case where there is more than just exists assignment (rule should not fire)", "author": "sopel39", "createdAt": "2020-06-23T09:41:23Z", "path": "presto-main/src/test/java/io/prestosql/sql/planner/iterative/rule/TestRemoveRedundantExists.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.sql.planner.assertions.PlanMatchPattern;\n+import io.prestosql.sql.planner.iterative.rule.test.BaseRuleTest;\n+import io.prestosql.sql.planner.plan.Assignments;\n+import io.prestosql.sql.tree.ExistsPredicate;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.project;\n+import static io.prestosql.sql.planner.assertions.PlanMatchPattern.values;\n+import static io.prestosql.sql.tree.BooleanLiteral.TRUE_LITERAL;\n+\n+public class TestRemoveRedundantExists\n+        extends BaseRuleTest\n+{\n+    @Test\n+    public void testExistsFalse()\n+    {\n+        tester().assertThat(new RemoveRedundantExists())\n+                .on(p -> p.apply(Assignments.of(p.symbol(\"exists\"), new ExistsPredicate(TRUE_LITERAL)),", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c8a31a077f825d0b94d10402965e20a25cee2d28", "url": "https://github.com/trinodb/trino/commit/c8a31a077f825d0b94d10402965e20a25cee2d28", "message": "Remove redundant EXISTS during optimization\n\nThis was being done during initial planning, which complicates\nthings unnecessarily.", "committedDate": "2020-06-23T15:26:55Z", "type": "commit"}, {"oid": "c8a31a077f825d0b94d10402965e20a25cee2d28", "url": "https://github.com/trinodb/trino/commit/c8a31a077f825d0b94d10402965e20a25cee2d28", "message": "Remove redundant EXISTS during optimization\n\nThis was being done during initial planning, which complicates\nthings unnecessarily.", "committedDate": "2020-06-23T15:26:55Z", "type": "forcePushed"}]}