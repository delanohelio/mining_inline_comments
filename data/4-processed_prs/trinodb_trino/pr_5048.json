{"pr_number": 5048, "pr_title": "Add from_iso8601_timestamp_nanos operation", "pr_createdAt": "2020-09-01T15:02:16Z", "pr_url": "https://github.com/trinodb/trino/pull/5048", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMzg0Mw==", "url": "https://github.com/trinodb/trino/pull/5048#discussion_r490623843", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static LongTimestampWithTimeZone fromISO8601TimestampNanos(ConnectorSession session, @SqlType(\"varchar(x)\") Slice iso8601DateTime)\n          \n          \n            \n                public static LongTimestampWithTimeZone fromIso8601TimestampNanos(ConnectorSession session, @SqlType(\"varchar(x)\") Slice iso8601DateTime)", "author": "martint", "createdAt": "2020-09-17T23:54:01Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -162,6 +168,19 @@ public static long fromISO8601Timestamp(ConnectorSession session, @SqlType(\"varc\n         return packDateTimeWithZone(parseDateTimeHelper(formatter, iso8601DateTime.toStringUtf8()));\n     }\n \n+    @ScalarFunction(\"from_iso8601_timestamp_nanos\")\n+    @LiteralParameters(\"x\")\n+    @SqlType(\"timestamp(9) with time zone\")\n+    public static LongTimestampWithTimeZone fromISO8601TimestampNanos(ConnectorSession session, @SqlType(\"varchar(x)\") Slice iso8601DateTime)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMTQ0Mw==", "url": "https://github.com/trinodb/trino/pull/5048#discussion_r492221443", "bodyText": "should I also change the other function above? since it's also called fromISO8601Timestamp", "author": "alec-heif", "createdAt": "2020-09-21T17:16:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMzg0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMjk1Ng==", "url": "https://github.com/trinodb/trino/pull/5048#discussion_r492222956", "bodyText": "Yes, but let's do it in a separate commit, as it's cleanup of existing code.", "author": "martint", "createdAt": "2020-09-21T17:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyMzg0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNDUxNQ==", "url": "https://github.com/trinodb/trino/pull/5048#discussion_r490624515", "bodyText": "This method is unnecessary. It's used in a single place and doesn't provide much value. Inline it where it's being called.", "author": "martint", "createdAt": "2020-09-17T23:56:23Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -291,6 +310,24 @@ private static DateTime parseDateTimeHelper(DateTimeFormatter formatter, String\n         }\n     }\n \n+    private static ZonedDateTime parseJavaDateTimeHelper(java.time.format.DateTimeFormatter formatter, String datetimeString)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNTY2Ng==", "url": "https://github.com/trinodb/trino/pull/5048#discussion_r490625666", "bodyText": "This is inconsistent with the other variant (from_iso8601_timestamp), which uses session timezone if the timezone is missing from the input value.", "author": "martint", "createdAt": "2020-09-18T00:00:39Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -291,6 +310,24 @@ private static DateTime parseDateTimeHelper(DateTimeFormatter formatter, String\n         }\n     }\n \n+    private static ZonedDateTime parseJavaDateTimeHelper(java.time.format.DateTimeFormatter formatter, String datetimeString)\n+    {\n+        TemporalAccessor dt;\n+        try {\n+            dt = formatter.parseBest(datetimeString, ZonedDateTime::from, LocalDateTime::from);\n+        }\n+        catch (DateTimeParseException e) {\n+            throw new PrestoException(INVALID_FUNCTION_ARGUMENT, e);\n+        }\n+\n+        if (dt instanceof ZonedDateTime) {\n+            return (ZonedDateTime) dt;\n+        }\n+        else {\n+            return ((LocalDateTime) dt).atZone(ZoneId.of(\"UTC\"));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNTc5MA==", "url": "https://github.com/trinodb/trino/pull/5048#discussion_r490625790", "bodyText": "Don't abbreviate variable names.", "author": "martint", "createdAt": "2020-09-18T00:01:06Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -291,6 +310,24 @@ private static DateTime parseDateTimeHelper(DateTimeFormatter formatter, String\n         }\n     }\n \n+    private static ZonedDateTime parseJavaDateTimeHelper(java.time.format.DateTimeFormatter formatter, String datetimeString)\n+    {\n+        TemporalAccessor dt;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNTg0OA==", "url": "https://github.com/trinodb/trino/pull/5048#discussion_r490625848", "bodyText": "Don't abbreviate variable names", "author": "martint", "createdAt": "2020-09-18T00:01:19Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -162,6 +168,19 @@ public static long fromISO8601Timestamp(ConnectorSession session, @SqlType(\"varc\n         return packDateTimeWithZone(parseDateTimeHelper(formatter, iso8601DateTime.toStringUtf8()));\n     }\n \n+    @ScalarFunction(\"from_iso8601_timestamp_nanos\")\n+    @LiteralParameters(\"x\")\n+    @SqlType(\"timestamp(9) with time zone\")\n+    public static LongTimestampWithTimeZone fromISO8601TimestampNanos(ConnectorSession session, @SqlType(\"varchar(x)\") Slice iso8601DateTime)\n+    {\n+        java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ISO_DATE_TIME;\n+        ZonedDateTime zdt = parseJavaDateTimeHelper(formatter, iso8601DateTime.toStringUtf8());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNjA1MQ==", "url": "https://github.com/trinodb/trino/pull/5048#discussion_r490626051", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    long picosOfSecond = zdt.getNano() * 1000L;\n          \n          \n            \n                    long picosOfSecond = zdt.getNano() * PICOSECONDS_PER_NANOSECOND;", "author": "martint", "createdAt": "2020-09-18T00:02:06Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/DateTimeFunctions.java", "diffHunk": "@@ -162,6 +168,19 @@ public static long fromISO8601Timestamp(ConnectorSession session, @SqlType(\"varc\n         return packDateTimeWithZone(parseDateTimeHelper(formatter, iso8601DateTime.toStringUtf8()));\n     }\n \n+    @ScalarFunction(\"from_iso8601_timestamp_nanos\")\n+    @LiteralParameters(\"x\")\n+    @SqlType(\"timestamp(9) with time zone\")\n+    public static LongTimestampWithTimeZone fromISO8601TimestampNanos(ConnectorSession session, @SqlType(\"varchar(x)\") Slice iso8601DateTime)\n+    {\n+        java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ISO_DATE_TIME;\n+        ZonedDateTime zdt = parseJavaDateTimeHelper(formatter, iso8601DateTime.toStringUtf8());\n+\n+        long picosOfSecond = zdt.getNano() * 1000L;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYyNjE4NA==", "url": "https://github.com/trinodb/trino/pull/5048#discussion_r490626184", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testFromISO8601Nanos()\n          \n          \n            \n                public void testFromIso8601Nanos()", "author": "martint", "createdAt": "2020-09-18T00:02:40Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "diffHunk": "@@ -288,6 +290,23 @@ public void testFromISO8601()\n         assertFunction(\"from_iso8601_date('\" + DATE_ISO8601_STRING + \"')\", DateType.DATE, toDate(DATE));\n     }\n \n+    @Test\n+    public void testFromISO8601Nanos()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2191f78e0c4abaf3cd45dd977847092bff851cfa", "url": "https://github.com/trinodb/trino/commit/2191f78e0c4abaf3cd45dd977847092bff851cfa", "message": "Add from_iso8601_timestamp_nanos function", "committedDate": "2020-09-22T20:26:57Z", "type": "commit"}, {"oid": "2191f78e0c4abaf3cd45dd977847092bff851cfa", "url": "https://github.com/trinodb/trino/commit/2191f78e0c4abaf3cd45dd977847092bff851cfa", "message": "Add from_iso8601_timestamp_nanos function", "committedDate": "2020-09-22T20:26:57Z", "type": "forcePushed"}]}