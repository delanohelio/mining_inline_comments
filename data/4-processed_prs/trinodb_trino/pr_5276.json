{"pr_number": 5276, "pr_title": "Improve nested loop operator", "pr_createdAt": "2020-09-23T13:59:41Z", "pr_url": "https://github.com/trinodb/trino/pull/5276", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUyMzcwMQ==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r494523701", "bodyText": "This logic is wrong, I know. Will fix.", "author": "pettyjamesm", "createdAt": "2020-09-24T18:26:08Z", "path": "presto-main/src/main/java/io/prestosql/operator/NestedLoopJoinOperator.java", "diffHunk": "@@ -235,6 +235,63 @@ public void close()\n         afterClose.run();\n     }\n \n+    private static Iterator<Page> createNestedLoopIterator(Page probePage, Page buildPage)\n+    {\n+        int probeChannels = probePage.getChannelCount();\n+        int buildChannels = buildPage.getChannelCount();\n+        if (probeChannels == 0 && buildChannels == 0) {\n+            int probePositions = probePage.getPositionCount();\n+            int buildPositions = buildPage.getPositionCount();\n+            try {\n+                // positionCount is an int. Make sure the product can still fit in an int.\n+                int outputPositions = multiplyExact(probePositions, buildPositions);\n+                return new PageRepeatingIterator(new Page(outputPositions), 1);\n+            }\n+            catch (ArithmeticException ignored) {\n+            }\n+            // Repeat larger position count a smaller position count number of times\n+            Page outputPage = new Page(max(probePositions, buildPositions));\n+            return new PageRepeatingIterator(outputPage, min(probePositions, buildPositions));\n+        }\n+        else if (probeChannels == 0) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2MTkyMg==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r494861922", "bodyText": "Why aren't build channels extracted by pruning projection? It seems like it should be the case. If it isn't, we already lost because build data was transferred over the network.", "author": "sopel39", "createdAt": "2020-09-25T09:23:34Z", "path": "presto-main/src/main/java/io/prestosql/operator/NestedLoopBuildOperator.java", "diffHunk": "@@ -33,22 +35,24 @@\n         private final int operatorId;\n         private final PlanNodeId planNodeId;\n         private final JoinBridgeManager<NestedLoopJoinBridge> nestedLoopJoinBridgeManager;\n+        private final List<Integer> buildChannels;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2NTE5Nw==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r494865197", "bodyText": "These channels should be used for reordering only and not pruning. If we use this for (build) prunning, we lost already because data was already transferred over the network.\nI think we should have something plan validator like ValidateCrossJoins that would assert that cross joins do not do build pruning.", "author": "sopel39", "createdAt": "2020-09-25T09:29:18Z", "path": "presto-main/src/main/java/io/prestosql/operator/NestedLoopJoinOperator.java", "diffHunk": "@@ -123,21 +121,19 @@ public OperatorFactory duplicate()\n     private final OperatorContext operatorContext;\n     private final Runnable afterClose;\n \n-    private final List<Integer> probeChannels;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3MDA3Mg==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r494870072", "bodyText": "Cross join should never have to prune inputs from neither source. If it did, it would fail in ValidateDependenciesChecker:\ncheckDependencies(node.getOutputSymbols(), inputs, \"Cross join output symbols (%s) must contain all of the source symbols (%s)\", node.getOutputSymbols(), inputs);", "author": "kasiafi", "createdAt": "2020-09-25T09:37:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2NTE5Nw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0OTYyOA==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r496549628", "bodyText": "Commit message needs update", "author": "sopel39", "createdAt": "2020-09-29T08:52:39Z", "path": "presto-main/src/main/java/io/prestosql/operator/NestedLoopJoinOperator.java", "diffHunk": "@@ -15,6 +15,7 @@\n ", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0NzM2MQ==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r496647361", "bodyText": "Good call, changed.", "author": "pettyjamesm", "createdAt": "2020-09-29T11:38:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0OTYyOA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5NjA1MA==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r499796050", "bodyText": "Have you benchmarked this to make sure it's an issue? If it's on the hot path, the VM will likely inline it and the invokeinterface call shouldn't matter.", "author": "martint", "createdAt": "2020-10-05T18:38:34Z", "path": "presto-main/src/main/java/io/prestosql/operator/NestedLoopJoinOperator.java", "diffHunk": "@@ -235,59 +242,132 @@ public void close()\n         afterClose.run();\n     }\n \n+    @VisibleForTesting\n+    static NestedLoopOutputIterator createNestedLoopOutputIterator(Page probePage, Page buildPage, int[] probeChannels, int[] buildChannels)\n+    {\n+        if (probeChannels.length == 0 && buildChannels.length == 0) {\n+            int probePositions = probePage.getPositionCount();\n+            int buildPositions = buildPage.getPositionCount();\n+            try {\n+                // positionCount is an int. Make sure the product can still fit in an int.\n+                int outputPositions = multiplyExact(probePositions, buildPositions);\n+                return new PageRepeatingIterator(new Page(outputPositions), 1);\n+            }\n+            catch (ArithmeticException ignored) {\n+            }\n+            // Repeat larger position count a smaller position count number of times\n+            Page outputPage = new Page(max(probePositions, buildPositions));\n+            return new PageRepeatingIterator(outputPage, min(probePositions, buildPositions));\n+        }\n+        else if (probeChannels.length == 0 && probePage.getPositionCount() <= buildPage.getPositionCount()) {\n+            return new PageRepeatingIterator(buildPage.getColumns(buildChannels), probePage.getPositionCount());\n+        }\n+        else if (buildChannels.length == 0 && buildPage.getPositionCount() <= probePage.getPositionCount()) {\n+            return new PageRepeatingIterator(probePage.getColumns(probeChannels), buildPage.getPositionCount());\n+        }\n+        else {\n+            return new NestedLoopPageBuilder(probePage, buildPage, probeChannels, buildChannels);\n+        }\n+    }\n+\n+    // bi-morphic parent class to avoid invoking iterator interface methods via invokeinterface on the hot path", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyOTk0NQ==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r499829945", "bodyText": "The performance issue isn't the invokeinterface vs invokevirtual really, both would be inlined with direct dispatch so long as the call site is actually bimorphic. The abstract parent class and this comment are here to explain that it's important that the implementation stay bimorphic and doesn't become megamorphic in some future change which might otherwise be very easy to do accidentally.\nFor instance, I very nearly made this line return Iterators.singletonIterator(new Page(outputPositions)); until I realized what that would do to the resulting C2 output.", "author": "pettyjamesm", "createdAt": "2020-10-05T19:43:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5NjA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwMTMwMw==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r500501303", "bodyText": "I've clarified the comment to better describe the original intention behind it and made the parent class not implement Iterator<Page to the same end. Let me know if that's enough to satisfy the concern here or if you'd like another flavor instead.", "author": "pettyjamesm", "createdAt": "2020-10-06T18:15:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc5NjA1MA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3Njc3Nw==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r501276777", "bodyText": "It'd be safer to cap the max number of positions in a page. Some operators that append columns may not be able to split the input page into smaller pages, so this could result in massive pages.", "author": "martint", "createdAt": "2020-10-07T20:04:19Z", "path": "presto-main/src/main/java/io/prestosql/operator/NestedLoopJoinOperator.java", "diffHunk": "@@ -235,59 +242,130 @@ public void close()\n         afterClose.run();\n     }\n \n+    @VisibleForTesting\n+    static NestedLoopOutputIterator createNestedLoopOutputIterator(Page probePage, Page buildPage, int[] probeChannels, int[] buildChannels)\n+    {\n+        if (probeChannels.length == 0 && buildChannels.length == 0) {\n+            int probePositions = probePage.getPositionCount();\n+            int buildPositions = buildPage.getPositionCount();\n+            try {\n+                // positionCount is an int. Make sure the product can still fit in an int.\n+                int outputPositions = multiplyExact(probePositions, buildPositions);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxNTM1MA==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r501315350", "bodyText": "Sure, let me know how you want to go about settling on the maximum value to use and whether you want that to be configurable.", "author": "pettyjamesm", "createdAt": "2020-10-07T21:17:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3Njc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0ODQxNQ==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r501348415", "bodyText": "The value from PageProcessor.MAX_BATCH_SIZE is a reasonable choice.", "author": "martint", "createdAt": "2020-10-07T22:35:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3Njc3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5OTA2NQ==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r501699065", "bodyText": "Sounds good, will ensure that this only happens when the resulting position count is within that limit.", "author": "pettyjamesm", "createdAt": "2020-10-08T12:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3Njc3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNDA4NQ==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r501304085", "bodyText": "Same as above, we should cap the number of positions per page.", "author": "martint", "createdAt": "2020-10-07T20:54:50Z", "path": "presto-main/src/main/java/io/prestosql/operator/NestedLoopJoinPagesBuilder.java", "diffHunk": "@@ -47,12 +51,44 @@ public void addPage(Page page)\n             return;\n         }\n \n+        // Fast path for empty output channels\n+        if (page.getChannelCount() == 0) {\n+            updatePagePositionCounter(page.getPositionCount());\n+            return;\n+        }\n+\n         pages.add(page);\n         estimatedSize += page.getRetainedSizeInBytes();\n     }\n \n+    private void updatePagePositionCounter(int positions)\n+    {\n+        try {\n+            this.emptyChannelPositionCounter = addExact(this.emptyChannelPositionCounter, positions);\n+        }\n+        catch (ArithmeticException overflow) {\n+            flushPositionCounter();\n+            this.emptyChannelPositionCounter = positions;\n+        }\n+    }\n+\n+    private void flushPositionCounter()\n+    {\n+        checkState(!finished, \"NestedLoopJoinPagesBuilder is finished\");\n+        if (emptyChannelPositionCounter > 0) {\n+            Page output = new Page(emptyChannelPositionCounter);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxNDk1Mw==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r501314953", "bodyText": "Do you have a recommendation in how to go about deciding what that limit should be? Is this theoretically safe when both probe and build side channels are empty or is that just as dangerous?", "author": "pettyjamesm", "createdAt": "2020-10-07T21:16:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNDA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0OTc3OA==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r501349778", "bodyText": "No, it's as dangerous. For instance, consider a query like:\nSELECT count(*) OVER () FROM t CROSS JOIN u\n\nIt will process a single page through WindowOperator and will produce a single column with the resulting count.", "author": "martint", "createdAt": "2020-10-07T22:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNDA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwMTg4Ng==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r501701886", "bodyText": "Updated the CR to enforce that upper bound on the accumulated position count.", "author": "pettyjamesm", "createdAt": "2020-10-08T13:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNDA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNzc2MA==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r501307760", "bodyText": "Not sure I understand. Where is the \"pending\" page being held? From my reading of the code above, there's no page involved. It's just an int in this  class until it's time to flush it, at which point a page is created and estimatedSize is updated.", "author": "martint", "createdAt": "2020-10-07T21:01:48Z", "path": "presto-main/src/main/java/io/prestosql/operator/NestedLoopJoinPagesBuilder.java", "diffHunk": "@@ -47,12 +51,44 @@ public void addPage(Page page)\n             return;\n         }\n \n+        // Fast path for empty output channels\n+        if (page.getChannelCount() == 0) {\n+            updatePagePositionCounter(page.getPositionCount());\n+            return;\n+        }\n+\n         pages.add(page);\n         estimatedSize += page.getRetainedSizeInBytes();\n     }\n \n+    private void updatePagePositionCounter(int positions)\n+    {\n+        try {\n+            this.emptyChannelPositionCounter = addExact(this.emptyChannelPositionCounter, positions);\n+        }\n+        catch (ArithmeticException overflow) {\n+            flushPositionCounter();\n+            this.emptyChannelPositionCounter = positions;\n+        }\n+    }\n+\n+    private void flushPositionCounter()\n+    {\n+        checkState(!finished, \"NestedLoopJoinPagesBuilder is finished\");\n+        if (emptyChannelPositionCounter > 0) {\n+            Page output = new Page(emptyChannelPositionCounter);\n+            pages.add(output);\n+            estimatedSize += output.getRetainedSizeInBytes();\n+            this.emptyChannelPositionCounter = 0;\n+        }\n+    }\n+\n     public DataSize getEstimatedSize()\n     {\n+        if (emptyChannelPositionCounter > 0) {\n+            // account for pending positionCount only page\n+            return DataSize.ofBytes(estimatedSize + POSITION_ONLY_PAGE_RETAINED_SIZE);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxMDE4OQ==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r501310189", "bodyText": "That's true. I wanted to avoid suddenly having an estimated size that increases right as the operator completes (even though the growth here is supposed to in at most, a few bytes). Basically, accounting for the page size that we know will be created when the build side finishes as soon as we know that it will be created. I'm fine removing it if you think it's pointless.", "author": "pettyjamesm", "createdAt": "2020-10-07T21:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNzc2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM0OTg4Mw==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r501349883", "bodyText": "It seems overkill, so I'd remove it to keep the code simpler.", "author": "martint", "createdAt": "2020-10-07T22:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNzc2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5OTY2Nw==", "url": "https://github.com/trinodb/trino/pull/5276#discussion_r501699667", "bodyText": "Removed", "author": "pettyjamesm", "createdAt": "2020-10-08T12:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNzc2MA=="}], "type": "inlineReview"}, {"oid": "ce8456456807a373fe2f62843a3762e6688a8727", "url": "https://github.com/trinodb/trino/commit/ce8456456807a373fe2f62843a3762e6688a8727", "message": "Add Page constructor for empty blocks case\n\nAvoids varargs empty array creation per call for these usage sites", "committedDate": "2020-10-08T12:24:18Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "cd38e2cd17291deeab4c9dcb015499ca8356270b", "url": "https://github.com/trinodb/trino/commit/cd38e2cd17291deeab4c9dcb015499ca8356270b", "message": "Improve NestedLoopJoinOperator performance\n\n- Modifies NestedLoopJoinPagesBuilder to combine empty pages (aka:\npositionCount only pages) when the build side of the nested loop\njoin is empty\n- Handles the case where either probe or build side outputs are empty\nand position counts are fewer by emitting the same page repeatedly,\navoiding unnecessary per-iteration allocations\n- Reduces the amount of block array copies made in the standard case\nby reusing a block buffer to build each page and letting the Page\nconstructor clone it (ie: 1/2 as many allocations)\n- Nullifies the output iterator as well as the probe page when finished\niterating through it to make the referenced pages elligible for GC. Also\nnullifies more fields when the operator is closed for the same reason.", "committedDate": "2020-10-08T13:07:16Z", "type": "commit"}, {"oid": "cd38e2cd17291deeab4c9dcb015499ca8356270b", "url": "https://github.com/trinodb/trino/commit/cd38e2cd17291deeab4c9dcb015499ca8356270b", "message": "Improve NestedLoopJoinOperator performance\n\n- Modifies NestedLoopJoinPagesBuilder to combine empty pages (aka:\npositionCount only pages) when the build side of the nested loop\njoin is empty\n- Handles the case where either probe or build side outputs are empty\nand position counts are fewer by emitting the same page repeatedly,\navoiding unnecessary per-iteration allocations\n- Reduces the amount of block array copies made in the standard case\nby reusing a block buffer to build each page and letting the Page\nconstructor clone it (ie: 1/2 as many allocations)\n- Nullifies the output iterator as well as the probe page when finished\niterating through it to make the referenced pages elligible for GC. Also\nnullifies more fields when the operator is closed for the same reason.", "committedDate": "2020-10-08T13:07:16Z", "type": "forcePushed"}]}