{"pr_number": 5378, "pr_title": "Fix AccummulatorCompiler to work with type-specific stack representation", "pr_createdAt": "2020-10-01T14:27:01Z", "pr_url": "https://github.com/trinodb/trino/pull/5378", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc3OTc0MA==", "url": "https://github.com/trinodb/trino/pull/5378#discussion_r501779740", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public interface TestAggregationState\n          \n          \n            \n                        extends AccumulatorState\n          \n          \n            \n                {\n          \n          \n            \n                }\n          \n          \n            \n                public interface TestAggregationState\n          \n          \n            \n                        extends AccumulatorState {}", "author": "findepi", "createdAt": "2020-10-08T14:45:28Z", "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/TestAccumulatorCompiler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.aggregation;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.bytecode.DynamicClassLoader;\n+import io.prestosql.operator.aggregation.state.StateCompiler;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.function.AccumulatorState;\n+import io.prestosql.spi.function.AccumulatorStateFactory;\n+import io.prestosql.spi.function.AccumulatorStateSerializer;\n+import io.prestosql.spi.type.LongTimestamp;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.testng.services.ReportUnannotatedMethods;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.Optional;\n+\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.INPUT_CHANNEL;\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static io.prestosql.util.Reflection.methodHandle;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestAccumulatorCompiler\n+{\n+    @Test\n+    public void testAccumulatorCompilerForTypeSpecificObjectParameter()\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(TestAccumulatorCompiler.class.getClassLoader());\n+\n+        TimestampType parameterType = TimestampType.TIMESTAMP_NANOS;\n+        assertThat(parameterType.getJavaType()).isEqualTo(LongTimestamp.class);\n+\n+        Class<? extends AccumulatorState> stateInterface = TestAggregationState.class;\n+        AccumulatorStateSerializer<?> stateSerializer = StateCompiler.generateStateSerializer(stateInterface, classLoader);\n+        AccumulatorStateFactory<?> stateFactory = StateCompiler.generateStateFactory(stateInterface, classLoader);\n+\n+        MethodHandle inputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationInput\", TestAggregationState.class, LongTimestamp.class);\n+        MethodHandle combineFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationCombine\", TestAggregationState.class, TestAggregationState.class);\n+        MethodHandle outputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationOutput\", TestAggregationState.class, BlockBuilder.class);\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                \"longTimestampAggregation\",\n+                ImmutableList.of(\n+                        new AggregationMetadata.ParameterMetadata(STATE),\n+                        new AggregationMetadata.ParameterMetadata(INPUT_CHANNEL, parameterType)),\n+                inputFunction,\n+                Optional.empty(),\n+                combineFunction,\n+                outputFunction,\n+                ImmutableList.of(new AggregationMetadata.AccumulatorStateDescriptor(\n+                        stateInterface,\n+                        stateSerializer,\n+                        stateFactory)),\n+                RealType.REAL);\n+\n+        // test if we can compile aggregation\n+        assertThat(AccumulatorCompiler.generateAccumulatorFactoryBinder(metadata, classLoader)).isNotNull();\n+\n+        // TODO test if aggregation actually works...\n+    }\n+\n+    public interface TestAggregationState\n+            extends AccumulatorState\n+    {\n+    }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc3OTk2Nw==", "url": "https://github.com/trinodb/trino/pull/5378#discussion_r501779967", "bodyText": "Any existing aggs that can benefit from your change?", "author": "findepi", "createdAt": "2020-10-08T14:45:47Z", "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/TestAccumulatorCompiler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.aggregation;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.bytecode.DynamicClassLoader;\n+import io.prestosql.operator.aggregation.state.StateCompiler;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.function.AccumulatorState;\n+import io.prestosql.spi.function.AccumulatorStateFactory;\n+import io.prestosql.spi.function.AccumulatorStateSerializer;\n+import io.prestosql.spi.type.LongTimestamp;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.testng.services.ReportUnannotatedMethods;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.Optional;\n+\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.INPUT_CHANNEL;\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static io.prestosql.util.Reflection.methodHandle;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestAccumulatorCompiler\n+{\n+    @Test\n+    public void testAccumulatorCompilerForTypeSpecificObjectParameter()\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(TestAccumulatorCompiler.class.getClassLoader());\n+\n+        TimestampType parameterType = TimestampType.TIMESTAMP_NANOS;\n+        assertThat(parameterType.getJavaType()).isEqualTo(LongTimestamp.class);\n+\n+        Class<? extends AccumulatorState> stateInterface = TestAggregationState.class;\n+        AccumulatorStateSerializer<?> stateSerializer = StateCompiler.generateStateSerializer(stateInterface, classLoader);\n+        AccumulatorStateFactory<?> stateFactory = StateCompiler.generateStateFactory(stateInterface, classLoader);\n+\n+        MethodHandle inputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationInput\", TestAggregationState.class, LongTimestamp.class);\n+        MethodHandle combineFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationCombine\", TestAggregationState.class, TestAggregationState.class);\n+        MethodHandle outputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationOutput\", TestAggregationState.class, BlockBuilder.class);\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                \"longTimestampAggregation\",\n+                ImmutableList.of(\n+                        new AggregationMetadata.ParameterMetadata(STATE),\n+                        new AggregationMetadata.ParameterMetadata(INPUT_CHANNEL, parameterType)),\n+                inputFunction,\n+                Optional.empty(),\n+                combineFunction,\n+                outputFunction,\n+                ImmutableList.of(new AggregationMetadata.AccumulatorStateDescriptor(\n+                        stateInterface,\n+                        stateSerializer,\n+                        stateFactory)),\n+                RealType.REAL);\n+\n+        // test if we can compile aggregation\n+        assertThat(AccumulatorCompiler.generateAccumulatorFactoryBinder(metadata, classLoader)).isNotNull();\n+\n+        // TODO test if aggregation actually works...\n+    }\n+\n+    public interface TestAggregationState\n+            extends AccumulatorState\n+    {\n+    }\n+\n+    @ReportUnannotatedMethods.Suppress\n+    public static void longTimestampAggregationInput(TestAggregationState state, LongTimestamp value) {}", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwMjc4Ng==", "url": "https://github.com/trinodb/trino/pull/5378#discussion_r501802786", "bodyText": "nope :)", "author": "losipiuk", "createdAt": "2020-10-08T15:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc3OTk2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc4MDI4MA==", "url": "https://github.com/trinodb/trino/pull/5378#discussion_r501780280", "bodyText": "Just move those static methods into inner class (just as if you were declaring aggregation)", "author": "findepi", "createdAt": "2020-10-08T14:46:09Z", "path": "presto-main/src/test/java/io/prestosql/operator/aggregation/TestAccumulatorCompiler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.aggregation;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.bytecode.DynamicClassLoader;\n+import io.prestosql.operator.aggregation.state.StateCompiler;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.function.AccumulatorState;\n+import io.prestosql.spi.function.AccumulatorStateFactory;\n+import io.prestosql.spi.function.AccumulatorStateSerializer;\n+import io.prestosql.spi.type.LongTimestamp;\n+import io.prestosql.spi.type.RealType;\n+import io.prestosql.spi.type.TimestampType;\n+import io.prestosql.testng.services.ReportUnannotatedMethods;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.util.Optional;\n+\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.INPUT_CHANNEL;\n+import static io.prestosql.operator.aggregation.AggregationMetadata.ParameterMetadata.ParameterType.STATE;\n+import static io.prestosql.util.Reflection.methodHandle;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestAccumulatorCompiler\n+{\n+    @Test\n+    public void testAccumulatorCompilerForTypeSpecificObjectParameter()\n+    {\n+        DynamicClassLoader classLoader = new DynamicClassLoader(TestAccumulatorCompiler.class.getClassLoader());\n+\n+        TimestampType parameterType = TimestampType.TIMESTAMP_NANOS;\n+        assertThat(parameterType.getJavaType()).isEqualTo(LongTimestamp.class);\n+\n+        Class<? extends AccumulatorState> stateInterface = TestAggregationState.class;\n+        AccumulatorStateSerializer<?> stateSerializer = StateCompiler.generateStateSerializer(stateInterface, classLoader);\n+        AccumulatorStateFactory<?> stateFactory = StateCompiler.generateStateFactory(stateInterface, classLoader);\n+\n+        MethodHandle inputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationInput\", TestAggregationState.class, LongTimestamp.class);\n+        MethodHandle combineFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationCombine\", TestAggregationState.class, TestAggregationState.class);\n+        MethodHandle outputFunction = methodHandle(TestAccumulatorCompiler.class, \"longTimestampAggregationOutput\", TestAggregationState.class, BlockBuilder.class);\n+        AggregationMetadata metadata = new AggregationMetadata(\n+                \"longTimestampAggregation\",\n+                ImmutableList.of(\n+                        new AggregationMetadata.ParameterMetadata(STATE),\n+                        new AggregationMetadata.ParameterMetadata(INPUT_CHANNEL, parameterType)),\n+                inputFunction,\n+                Optional.empty(),\n+                combineFunction,\n+                outputFunction,\n+                ImmutableList.of(new AggregationMetadata.AccumulatorStateDescriptor(\n+                        stateInterface,\n+                        stateSerializer,\n+                        stateFactory)),\n+                RealType.REAL);\n+\n+        // test if we can compile aggregation\n+        assertThat(AccumulatorCompiler.generateAccumulatorFactoryBinder(metadata, classLoader)).isNotNull();\n+\n+        // TODO test if aggregation actually works...\n+    }\n+\n+    public interface TestAggregationState\n+            extends AccumulatorState\n+    {\n+    }\n+\n+    @ReportUnannotatedMethods.Suppress", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1c0e6f8dc8ef59c2410c7a53a109c7d77ff38957", "url": "https://github.com/trinodb/trino/commit/1c0e6f8dc8ef59c2410c7a53a109c7d77ff38957", "message": "Fix exception message", "committedDate": "2020-10-08T15:22:23Z", "type": "commit"}, {"oid": "adbcc2921309fa36f287f7e4500175a5fd10ce07", "url": "https://github.com/trinodb/trino/commit/adbcc2921309fa36f287f7e4500175a5fd10ce07", "message": "Fix AccummulatorCompiler to work with type-specific stack representation\n\nFix aggregation compiler to work fine if input function is defined for\nType which uses non standard stack representation. E.g. TIMESTAMP(p>6)\nuses LongTimestamp on stack.", "committedDate": "2020-10-08T15:22:23Z", "type": "commit"}, {"oid": "adbcc2921309fa36f287f7e4500175a5fd10ce07", "url": "https://github.com/trinodb/trino/commit/adbcc2921309fa36f287f7e4500175a5fd10ce07", "message": "Fix AccummulatorCompiler to work with type-specific stack representation\n\nFix aggregation compiler to work fine if input function is defined for\nType which uses non standard stack representation. E.g. TIMESTAMP(p>6)\nuses LongTimestamp on stack.", "committedDate": "2020-10-08T15:22:23Z", "type": "forcePushed"}]}