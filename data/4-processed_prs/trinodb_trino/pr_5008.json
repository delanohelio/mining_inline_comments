{"pr_number": 5008, "pr_title": "Reuse s/SuiteConfig/EnvironmentConfig with env commands", "pr_createdAt": "2020-08-28T12:14:08Z", "pr_url": "https://github.com/trinodb/trino/pull/5008", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzNjc3MA==", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479236770", "bodyText": "why so?\nI guess the modules can add both new suites and new environments. Right?", "author": "losipiuk", "createdAt": "2020-08-28T12:32:35Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/cli/SuiteList.java", "diffHunk": "@@ -37,11 +38,11 @@\n public final class SuiteList\n         implements Runnable\n {\n-    private final Module additionalSuites;\n+    private final Module additionalEnvironments;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzODg2Mw==", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479238863", "bodyText": "I've corrected this in a subsequent commit. I'll squash those.", "author": "wendigo", "createdAt": "2020-08-28T12:34:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzNjc3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0MDk4OQ==", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479240989", "bodyText": "these are not providers. These are just configs.", "author": "losipiuk", "createdAt": "2020-08-28T12:36:06Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentConfigFactory.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.google.common.collect.Ordering;\n+import com.google.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class EnvironmentConfigFactory\n+{\n+    private final Map<String, EnvironmentConfig> configProviders;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0MjM2NQ==", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479242365", "bodyText": "I'll rename that", "author": "wendigo", "createdAt": "2020-08-28T12:37:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0MDk4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0NzQyNg==", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479247426", "bodyText": "This limits the expressiveness of env up. Are you sure people did not depend on possibility to build test environment bit by bit?", "author": "losipiuk", "createdAt": "2020-08-28T12:41:27Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentOptions.java", "diffHunk": "@@ -25,17 +23,8 @@\n \n public final class EnvironmentOptions\n {\n-    @Option(name = \"--hadoop-base-image\", title = \"image\", description = \"Hadoop base image\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0OTUxOA==", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479249518", "bodyText": "That's why I've created config-env-based that allows passing those values using ENV. There is also a possibility to create EnvironmentConfig with desired values and use it with env up.", "author": "wendigo", "createdAt": "2020-08-28T12:43:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0NzQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1MDI3MQ==", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479250271", "bodyText": "So actually it makes extending configuration properties for environments easier than before. No need to pass it along with the command-line.", "author": "wendigo", "createdAt": "2020-08-28T12:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0NzQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1MjgwOA==", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479252808", "bodyText": "Yeah - I have just got to that commit. I think it is fine.\nWould you mind to document it a bit in README.md?", "author": "losipiuk", "createdAt": "2020-08-28T12:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0NzQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1NTEzOQ==", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479255139", "bodyText": "Sure thing.", "author": "wendigo", "createdAt": "2020-08-28T12:50:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0NzQyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1MDg2Mg==", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479250862", "bodyText": "move above enablePrestoJavaDebugger(DockerContainer container, int debugPort)", "author": "losipiuk", "createdAt": "2020-08-28T12:45:12Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/common/Standard.java", "diffHunk": "@@ -153,4 +145,20 @@ public static void enablePrestoJavaDebugger(DockerContainer container, int debug\n             throw new UncheckedIOException(e);\n         }\n     }\n+\n+    public static void enablePrestoJavaDebugger(String containerName, DockerContainer dockerContainer)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxNzA3Mg==", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479317072", "bodyText": "defensive copy", "author": "losipiuk", "createdAt": "2020-08-28T13:58:06Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentConfigFactory.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env;\n+\n+import com.google.common.collect.Ordering;\n+import com.google.inject.Inject;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static java.util.Objects.requireNonNull;\n+\n+public class EnvironmentConfigFactory\n+{\n+    private final Map<String, EnvironmentConfig> configurations;\n+\n+    @Inject\n+    public EnvironmentConfigFactory(Map<String, EnvironmentConfig> configurations)\n+    {\n+        this.configurations = requireNonNull(configurations, \"configurations is null\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyMzQ1Nw==", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479323457", "bodyText": "call it baseEnvironmentOptions and instead of mutating it create new instance based on it in provideEnvironmentOptions", "author": "losipiuk", "createdAt": "2020-08-28T14:04:49Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/EnvironmentModule.java", "diffHunk": "@@ -14,26 +14,36 @@\n package io.prestosql.tests.product.launcher.env;\n \n import com.google.inject.Binder;\n+import com.google.inject.Inject;\n import com.google.inject.Module;\n+import com.google.inject.Provides;\n+import com.google.inject.Singleton;\n import com.google.inject.multibindings.MapBinder;\n+import io.prestosql.tests.product.launcher.PathResolver;\n import io.prestosql.tests.product.launcher.env.common.Hadoop;\n import io.prestosql.tests.product.launcher.env.common.Kafka;\n import io.prestosql.tests.product.launcher.env.common.Kerberos;\n import io.prestosql.tests.product.launcher.env.common.KerberosKms;\n import io.prestosql.tests.product.launcher.env.common.Standard;\n import io.prestosql.tests.product.launcher.testcontainers.PortBinder;\n \n+import java.io.File;\n+\n import static com.google.inject.multibindings.MapBinder.newMapBinder;\n+import static io.prestosql.tests.product.launcher.env.Environments.nameForConfigClass;\n import static java.util.Objects.requireNonNull;\n \n public final class EnvironmentModule\n         implements Module\n {\n     public static final String BASE_PACKAGE = \"io.prestosql.tests.product.launcher.env.environment\";\n+    public static final String BASE_CONFIG_PACKAGE = \"io.prestosql.tests.product.launcher.env.configs\";\n+    private final EnvironmentOptions environmentOptions;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyNDUxMA==", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479324510", "bodyText": "call out to super.getExcludedGroups", "author": "losipiuk", "createdAt": "2020-08-28T14:05:58Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/configs/ConfigEnvBased.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.configs;\n+\n+import com.google.common.base.Splitter;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static java.lang.System.getenv;\n+\n+public class ConfigEnvBased\n+        extends ConfigDefault\n+{\n+    @Override\n+    public String getHadoopBaseImage()\n+    {\n+        return getEnvOrDefault(\"HADOOP_BASE_IMAGE\", super.getHadoopBaseImage());\n+    }\n+\n+    @Override\n+    public String getImagesVersion()\n+    {\n+        return getEnvOrDefault(\"DOCKER_IMAGES_VERSION\", super.getImagesVersion());\n+    }\n+\n+    @Override\n+    public String getHadoopImagesVersion()\n+    {\n+        return getEnvOrDefault(\"HADOOP_IMAGES_VERSION\", super.getHadoopImagesVersion());\n+    }\n+\n+    @Override\n+    public String getTemptoEnvironmentConfigFile()\n+    {\n+        return getEnvOrDefault(\"TEMPTO_ENVIRONMENT_CONFIG_FILE\", super.getTemptoEnvironmentConfigFile());\n+    }\n+\n+    @Override\n+    public List<String> getExcludedGroups()\n+    {\n+        return Splitter.on(',')\n+                .omitEmptyStrings()\n+                .trimResults()\n+                .splitToList(getEnvOrDefault(\"DISTRO_SKIP_GROUP\", \"\"));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyNDY3Nw==", "url": "https://github.com/trinodb/trino/pull/5008#discussion_r479324677", "bodyText": "call out to super.getExcludedTests", "author": "losipiuk", "createdAt": "2020-08-28T14:06:10Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/configs/ConfigEnvBased.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.product.launcher.env.configs;\n+\n+import com.google.common.base.Splitter;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static java.lang.System.getenv;\n+\n+public class ConfigEnvBased\n+        extends ConfigDefault\n+{\n+    @Override\n+    public String getHadoopBaseImage()\n+    {\n+        return getEnvOrDefault(\"HADOOP_BASE_IMAGE\", super.getHadoopBaseImage());\n+    }\n+\n+    @Override\n+    public String getImagesVersion()\n+    {\n+        return getEnvOrDefault(\"DOCKER_IMAGES_VERSION\", super.getImagesVersion());\n+    }\n+\n+    @Override\n+    public String getHadoopImagesVersion()\n+    {\n+        return getEnvOrDefault(\"HADOOP_IMAGES_VERSION\", super.getHadoopImagesVersion());\n+    }\n+\n+    @Override\n+    public String getTemptoEnvironmentConfigFile()\n+    {\n+        return getEnvOrDefault(\"TEMPTO_ENVIRONMENT_CONFIG_FILE\", super.getTemptoEnvironmentConfigFile());\n+    }\n+\n+    @Override\n+    public List<String> getExcludedGroups()\n+    {\n+        return Splitter.on(',')\n+                .omitEmptyStrings()\n+                .trimResults()\n+                .splitToList(getEnvOrDefault(\"DISTRO_SKIP_GROUP\", \"\"));\n+    }\n+\n+    @Override\n+    public List<String> getExcludedTests()\n+    {\n+        return Splitter.on(',')\n+                .omitEmptyStrings()\n+                .trimResults()\n+                .splitToList(getEnvOrDefault(\"DISTRO_SKIP_TEST\", \"\"));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d353cdb1d9850c6d8c7b9d8a8ca39837af71b751", "url": "https://github.com/trinodb/trino/commit/d353cdb1d9850c6d8c7b9d8a8ca39837af71b751", "message": "Rename SuiteConfig to EnvironmentConfig", "committedDate": "2020-08-29T09:32:16Z", "type": "commit"}, {"oid": "e0691026d5f0a338a2de5931b3a7c826a199312d", "url": "https://github.com/trinodb/trino/commit/e0691026d5f0a338a2de5931b3a7c826a199312d", "message": "Simplify environment configuration passing", "committedDate": "2020-08-29T09:32:17Z", "type": "commit"}, {"oid": "13dbb62be62d446b337938a94becd1ffc5dfe3b3", "url": "https://github.com/trinodb/trino/commit/13dbb62be62d446b337938a94becd1ffc5dfe3b3", "message": "Simplify environment definitions", "committedDate": "2020-08-29T09:32:17Z", "type": "commit"}, {"oid": "e2f57946cab416b21dee20087d609309dcbc4121", "url": "https://github.com/trinodb/trino/commit/e2f57946cab416b21dee20087d609309dcbc4121", "message": "Add ENV based environment config", "committedDate": "2020-08-29T09:32:17Z", "type": "commit"}, {"oid": "6e5f8c287679e7a4fd7998f4764cd1df93184f43", "url": "https://github.com/trinodb/trino/commit/6e5f8c287679e7a4fd7998f4764cd1df93184f43", "message": "Remove unnecessary qualifier", "committedDate": "2020-08-29T09:32:17Z", "type": "commit"}, {"oid": "6e5f8c287679e7a4fd7998f4764cd1df93184f43", "url": "https://github.com/trinodb/trino/commit/6e5f8c287679e7a4fd7998f4764cd1df93184f43", "message": "Remove unnecessary qualifier", "committedDate": "2020-08-29T09:32:17Z", "type": "forcePushed"}]}