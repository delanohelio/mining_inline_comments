{"pr_number": 6121, "pr_title": "Make JdbcTypeHandle.columnSize optional", "pr_createdAt": "2020-11-27T12:06:49Z", "pr_url": "https://github.com/trinodb/trino/pull/6121", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3NDA1MQ==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r531574051", "bodyText": "\ud83d\ude2e", "author": "kokosing", "createdAt": "2020-11-27T12:28:09Z", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestingH2JdbcClient.java", "diffHunk": "@@ -27,7 +27,7 @@\n class TestingH2JdbcClient\n         extends BaseJdbcClient\n {\n-    private static final JdbcTypeHandle BIGINT_TYPE_HANDLE = new JdbcTypeHandle(Types.BIGINT, Optional.empty(), -1, Optional.empty(), Optional.empty(), Optional.empty());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3NDIyOQ==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r531574229", "bodyText": "Is this all about?", "author": "kokosing", "createdAt": "2020-11-27T12:28:35Z", "path": "presto-mysql/src/main/java/io/prestosql/plugin/mysql/MySqlClient.java", "diffHunk": "@@ -112,7 +112,7 @@ public MySqlClient(BaseJdbcConfig config, ConnectionFactory connectionFactory, T\n         super(config, \"`\", connectionFactory);\n         this.jsonType = typeManager.getType(new TypeSignature(StandardTypes.JSON));\n \n-        JdbcTypeHandle bigintTypeHandle = new JdbcTypeHandle(Types.BIGINT, Optional.of(\"bigint\"), 0, Optional.empty(), Optional.empty(), Optional.empty());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMjg5MQ==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r531602891", "bodyText": "consider marking this constructor as @Deprecated.", "author": "ssheikin", "createdAt": "2020-11-27T13:29:53Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTypeHandle.java", "diffHunk": "@@ -47,21 +47,21 @@ public JdbcTypeHandle(\n             @JsonProperty(\"arrayDimensions\") Optional<Integer> arrayDimensions,\n             @JsonProperty(\"caseSensitivity\") Optional<CaseSensitivity> caseSensitivity)\n     {\n-        this(jdbcType, jdbcTypeName, columnSize, Optional.of(decimalDigits), arrayDimensions, caseSensitivity);\n+        this(jdbcType, jdbcTypeName, Optional.of(columnSize), Optional.of(decimalDigits), arrayDimensions, caseSensitivity);\n     }\n \n     @JsonCreator\n     public JdbcTypeHandle(\n             @JsonProperty(\"jdbcType\") int jdbcType,\n             @JsonProperty(\"jdbcTypeName\") Optional<String> jdbcTypeName,\n-            @JsonProperty(\"columnSize\") int columnSize,\n+            @JsonProperty(\"columnSize\") Optional<Integer> columnSize,\n             @JsonProperty(\"decimalDigits\") Optional<Integer> decimalDigits,\n             @JsonProperty(\"arrayDimensions\") Optional<Integer> arrayDimensions,\n             @JsonProperty(\"caseSensitivity\") Optional<CaseSensitivity> caseSensitivity)\n     {\n         this.jdbcType = jdbcType;\n         this.jdbcTypeName = requireNonNull(jdbcTypeName, \"jdbcTypeName is null\");\n-        this.columnSize = columnSize;\n+        this.columnSize = requireNonNull(columnSize, \"columnSize is null\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwOTAyMQ==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r531609021", "bodyText": "This is the only non-deprecated constructor here.", "author": "findepi", "createdAt": "2020-11-27T13:41:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMjg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwNDA2OA==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r531604068", "bodyText": "Consider to revert condition in naming:\nint getRequiredColumnSize() -> int getColumnSize() \nOptional<Integer> getColumnSize() -> Optional<Integer> getOptionalColumnSize()\n\nAs it is more inline with standard java naming.\nAnd according to commit message: The COLUMN_SIZE field is null in **some** cases, so only in that some cases we will have longer getOptionalColumnSize()", "author": "ssheikin", "createdAt": "2020-11-27T13:32:05Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTypeHandle.java", "diffHunk": "@@ -80,11 +80,17 @@ public int getJdbcType()\n     }\n \n     @JsonProperty\n-    public int getColumnSize()\n+    public Optional<Integer> getColumnSize()\n     {\n         return columnSize;\n     }\n \n+    @JsonIgnore\n+    public int getRequiredColumnSize()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwODUwNw==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r531608507", "bodyText": "consistent with https://github.com/prestosql/presto/blob/ece62ab29bc96a723669687e17bc2eef183a2d4d/presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTypeHandle.java#L88-L98\nalso, since the new getRequiredColumnSize is not a drop in replacement for the old method, i want anyone using this class to update their code, rather than blindly continue to call same method, but with a different behavior.", "author": "findepi", "createdAt": "2020-11-27T13:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwNDA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY5NTg4NQ==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r532695885", "bodyText": "Personally, I'd rename it to something like getColumnSizeOrThrow to be closer to Optional.orElseThrow.\nIt's not quite clear from the name what the semantics of getRequiredColumnSize are.\n(I'd say the same about getRequiredDecimalDigits.)", "author": "jirassimok", "createdAt": "2020-11-30T15:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwNDA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyMDE5Mw==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r533320193", "bodyText": "preexisting, so let's keep compatible with existing name for  now and we can change both if we want to\nother name proposal is getExisting.......  not sure.", "author": "findepi", "createdAt": "2020-12-01T10:58:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwNDA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzMDI2NQ==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r533330265", "bodyText": "And according to commit message: The COLUMN_SIZE field is null in some cases, so only in that some cases we will have longer getOptionalColumnSize()\n\nThat's interesting, but i am concerned about implicit validating happening within a method that looks like ordinary getter (\"getColumnSize\").", "author": "findepi", "createdAt": "2020-12-01T11:15:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwNDA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzNjg1Mg==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r533336852", "bodyText": "I had the same idea like @jirassimok -> but had the feeling it could mislead a user a little bit as well -> and maybe with such name it's already better to inline this method -> but there are a lot of occurrences -> goto begin.\nBut as long this idea came to someone else I'd vote for it.", "author": "ssheikin", "createdAt": "2020-12-01T11:27:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwNDA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM0MjgyOA==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r533342828", "bodyText": "I personally do not like \"OrThrow\" in method names. I want the method to declare semantics (\"something is required\"), rather than describe implementation (\"i will throw\").\nAnyway, i think both names are OK names, but one is existing (getRequiredDecimalDigits) and I do not want to change this within this PR.\nThe change int getColumnSize to Optional getColumnSize is already a problem to accommodate to for anyone depending on this code.", "author": "findepi", "createdAt": "2020-12-01T11:37:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwNDA2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI2MTIyNA==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r532261224", "bodyText": "the code here relied on NULL being represented as 0.", "author": "findepi", "createdAt": "2020-11-29T20:24:15Z", "path": "presto-phoenix/src/main/java/io/prestosql/plugin/phoenix/PhoenixClient.java", "diffHunk": "@@ -279,7 +279,7 @@ protected String getTableSchemaName(ResultSet resultSet)\n             case NVARCHAR:\n             case LONGVARCHAR:\n             case LONGNVARCHAR:\n-                if (typeHandle.getRequiredColumnSize() == 0) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY5MzU3Ng==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r532693576", "bodyText": "Maybe there should be makeTypeHandle(int, String, int) in this class to make this simpler to read and easier to change.", "author": "jirassimok", "createdAt": "2020-11-30T15:43:47Z", "path": "presto-base-jdbc/src/test/java/io/prestosql/plugin/jdbc/TestingJdbcTypeHandle.java", "diffHunk": "@@ -20,20 +20,20 @@\n {\n     private TestingJdbcTypeHandle() {}\n \n-    public static final JdbcTypeHandle JDBC_BOOLEAN = new JdbcTypeHandle(Types.BOOLEAN, Optional.of(\"boolean\"), 1, Optional.empty(), Optional.empty(), Optional.empty());\n+    public static final JdbcTypeHandle JDBC_BOOLEAN = new JdbcTypeHandle(Types.BOOLEAN, Optional.of(\"boolean\"), Optional.of(1), Optional.empty(), Optional.empty(), Optional.empty());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMxODk3Mg==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r533318972", "bodyText": "in this class -- could be.\nhowever, i dont want to introduce a public API into JdbcTypeHandle... maybe a builder would be nice (but wouldn't improve this particular place)", "author": "findepi", "createdAt": "2020-12-01T10:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY5MzU3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU0MDMzNQ==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r535540335", "bodyText": "I agree\u2014this is the only place where we construct so many JdbcTypeHandle (and with so many duplicate arguments).", "author": "jirassimok", "createdAt": "2020-12-03T19:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY5MzU3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyMjA1Ng==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r532722056", "bodyText": "The varchar mapping could use the new Optional-bearing getter:\nreturn type.getColumnSize()\n    .filter(length -> length <= VarcharType.MAX_LENGTH)\n    .map(length -> varcharColumnMapping(createVarcharType(length)))\n    .or(() -> Optional.of(varcharColumnMapping(createUnboundedVarcharType())));", "author": "jirassimok", "createdAt": "2020-11-30T16:20:58Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/StandardColumnMappings.java", "diffHunk": "@@ -525,30 +524,32 @@ public static LocalTime fromPrestoTime(long value)\n             case Types.NUMERIC:\n             case Types.DECIMAL:\n                 int decimalDigits = type.getRequiredDecimalDigits();\n-                int precision = columnSize + max(-decimalDigits, 0); // Map decimal(p, -s) (negative scale) to decimal(p+s, 0).\n+                int precision = type.getRequiredColumnSize() + max(-decimalDigits, 0); // Map decimal(p, -s) (negative scale) to decimal(p+s, 0).\n                 if (precision > Decimals.MAX_PRECISION) {\n                     return Optional.empty();\n                 }\n                 return Optional.of(decimalColumnMapping(createDecimalType(precision, max(decimalDigits, 0))));\n \n             case Types.CHAR:\n             case Types.NCHAR:\n-                if (columnSize > CharType.MAX_LENGTH) {\n-                    if (columnSize > VarcharType.MAX_LENGTH) {\n+                int charLength = type.getRequiredColumnSize();\n+                if (charLength > CharType.MAX_LENGTH) {\n+                    if (charLength > VarcharType.MAX_LENGTH) {\n                         return Optional.of(varcharColumnMapping(createUnboundedVarcharType()));\n                     }\n-                    return Optional.of(varcharColumnMapping(createVarcharType(columnSize)));\n+                    return Optional.of(varcharColumnMapping(createVarcharType(charLength)));\n                 }\n-                return Optional.of(charColumnMapping(createCharType(columnSize)));\n+                return Optional.of(charColumnMapping(createCharType(charLength)));\n \n             case Types.VARCHAR:\n             case Types.NVARCHAR:\n             case Types.LONGVARCHAR:\n             case Types.LONGNVARCHAR:\n-                if (columnSize > VarcharType.MAX_LENGTH) {\n+                int varcharLength = type.getRequiredColumnSize();\n+                if (varcharLength > VarcharType.MAX_LENGTH) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyMTMwOA==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r533321308", "bodyText": "maybe it is just me, but I find it hard to read code using Optional#filter. That's too clever for me.\n(i have no problem writing such code though)", "author": "findepi", "createdAt": "2020-12-01T10:59:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyMjA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3MTY2Nw==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r533471667", "bodyText": "For one this simple, I think it's readable, and the pattern is easy to learn, but it's a matter of taste. (And for anything more complicated (like the mapping for char), it's a definitely bad idea.)\nI still prefer using Optional chaining, but this might be a more readable way to do that, or you could leave it as-is.\nreturn type.getColumnSize()\n    .map(length ->\n        length <= VarcharType.MAX_LENGTH\n            ? createVarcharType(length)\n            : createUnboundedVarcharType())\n    .map(StandardColumnMappings::varcharColumnMapping)\n(Though neither this nor the current solution works if any JDBC supports unbounded varchar and reports them as having null column size. I assume we don't know any such JDBC.)", "author": "jirassimok", "createdAt": "2020-12-01T14:51:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyMjA1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyNDQyNA==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r532724424", "bodyText": "Why use both conditions instead of checking charLength <= CharType.MAX_LENGTH and otherwise falling through to the VARCHAR case?\nThe char mapping could be modified to use the Optional version of getColumnSize, but it's not as nice as it is for varchar.\nreturn type.getOptionalColumnSize()\n        .filter(length -> length <= CharType.MAX_LENGTH)\n        .map(length -> charColumnMapping(createCharType(length)))\n        .or(() -> type.getOptionalColumnSize()\n                .filter(length -> length <= VarcharType.MAX_LENGTH)\n                .map(length -> varcharColumnMapping(createVarcharType(length)))\n                .or(() -> Optional.of(varcharColumnMapping(createUnboundedVarcharType()))));", "author": "jirassimok", "createdAt": "2020-11-30T16:24:11Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/StandardColumnMappings.java", "diffHunk": "@@ -525,30 +524,32 @@ public static LocalTime fromPrestoTime(long value)\n             case Types.NUMERIC:\n             case Types.DECIMAL:\n                 int decimalDigits = type.getRequiredDecimalDigits();\n-                int precision = columnSize + max(-decimalDigits, 0); // Map decimal(p, -s) (negative scale) to decimal(p+s, 0).\n+                int precision = type.getRequiredColumnSize() + max(-decimalDigits, 0); // Map decimal(p, -s) (negative scale) to decimal(p+s, 0).\n                 if (precision > Decimals.MAX_PRECISION) {\n                     return Optional.empty();\n                 }\n                 return Optional.of(decimalColumnMapping(createDecimalType(precision, max(decimalDigits, 0))));\n \n             case Types.CHAR:\n             case Types.NCHAR:\n-                if (columnSize > CharType.MAX_LENGTH) {\n-                    if (columnSize > VarcharType.MAX_LENGTH) {\n+                int charLength = type.getRequiredColumnSize();\n+                if (charLength > CharType.MAX_LENGTH) {\n+                    if (charLength > VarcharType.MAX_LENGTH) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyMTk2Nw==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r533321967", "bodyText": "In case of char, the length must be present. It's erroneous to have a char, but not know its length.", "author": "findepi", "createdAt": "2020-12-01T11:01:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyNDQyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczNDcxMg==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r532734712", "bodyText": "Maybe fullPrecision would be a better name? (Doesn't matter either way.)", "author": "jirassimok", "createdAt": "2020-11-30T16:37:49Z", "path": "presto-oracle/src/main/java/io/prestosql/plugin/oracle/OracleClient.java", "diffHunk": "@@ -270,9 +268,10 @@ public void createSchema(JdbcIdentity identity, String schemaName)\n                         oracleDoubleWriteFunction(),\n                         FULL_PUSHDOWN));\n             case OracleTypes.NUMBER:\n+                int oraclePrecision = typeHandle.getRequiredColumnSize();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyMjQ0Ng==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r533322446", "bodyText": "\"actualPrecision\"? \"originalPrecision\"?", "author": "findepi", "createdAt": "2020-12-01T11:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczNDcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3MjU0Ng==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r533472546", "bodyText": "Anything like that works, but \"oraclePrecision\" doesn't capture the right semantics.", "author": "jirassimok", "createdAt": "2020-12-01T14:52:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczNDcxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0ODE5MA==", "url": "https://github.com/trinodb/trino/pull/6121#discussion_r535248190", "bodyText": "changed to actualPrecision", "author": "findepi", "createdAt": "2020-12-03T13:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczNDcxMg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "1c28b223dbccb9237f41ecc467ebb634188fbf97", "url": "https://github.com/trinodb/trino/commit/1c28b223dbccb9237f41ecc467ebb634188fbf97", "message": "Remove @JsonCreator annotations from non-@JsonCreator constructor", "committedDate": "2020-12-04T09:30:55Z", "type": "commit"}, {"oid": "1284b8e916b7b65d1a98ab101ea19cc697bfb770", "url": "https://github.com/trinodb/trino/commit/1284b8e916b7b65d1a98ab101ea19cc697bfb770", "message": "Validate DATA_TYPE is present\n\n`ResultSet.getInt` returns an int value even if the result row value is\nactually NULL.", "committedDate": "2020-12-04T09:30:55Z", "type": "commit"}, {"oid": "c9ce57243408ecd1667f083b939319d2c1ab8322", "url": "https://github.com/trinodb/trino/commit/c9ce57243408ecd1667f083b939319d2c1ab8322", "message": "Make JdbcTypeHandle.columnSize optional\n\nThe `COLUMN_SIZE` field is null in some cases, e.g. can be null in\nMySQL.", "committedDate": "2020-12-04T09:30:55Z", "type": "commit"}, {"oid": "c9ce57243408ecd1667f083b939319d2c1ab8322", "url": "https://github.com/trinodb/trino/commit/c9ce57243408ecd1667f083b939319d2c1ab8322", "message": "Make JdbcTypeHandle.columnSize optional\n\nThe `COLUMN_SIZE` field is null in some cases, e.g. can be null in\nMySQL.", "committedDate": "2020-12-04T09:30:55Z", "type": "forcePushed"}]}