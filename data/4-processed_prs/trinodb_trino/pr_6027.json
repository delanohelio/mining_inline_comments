{"pr_number": 6027, "pr_title": "Use eventual assertion with query stats", "pr_createdAt": "2020-11-20T09:26:13Z", "pr_url": "https://github.com/trinodb/trino/pull/6027", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MzU4NA==", "url": "https://github.com/trinodb/trino/pull/6027#discussion_r527563584", "bodyText": "This doesn't work. Final stats are set once. If they are wrong, they will stay wrong.", "author": "sopel39", "createdAt": "2020-11-20T09:32:32Z", "path": "presto-kafka/src/test/java/io/prestosql/plugin/kafka/TestKafkaIntegrationPushDown.java", "diffHunk": "@@ -105,38 +106,36 @@ public void stopKafka()\n     }\n \n     @Test\n-    public void testPartitionPushDown() throws ExecutionException, InterruptedException\n+    public void testPartitionPushDown()\n+            throws ExecutionException, InterruptedException\n     {\n         createMessages(topicNamePartition);\n         String sql = format(\"SELECT count(*) FROM default.%s WHERE _partition_id=1\", topicNamePartition);\n \n         ResultWithQueryId<MaterializedResult> queryResult = getDistributedQueryRunner().executeWithQueryId(getSession(), sql);\n-        assertEquals(getQueryInfo(getDistributedQueryRunner(), queryResult).getQueryStats().getProcessedInputPositions(), MESSAGE_NUM / 2);\n+        assertEventually(() -> assertEquals(getQueryInfo(getDistributedQueryRunner(), queryResult).getQueryStats().getProcessedInputPositions(), MESSAGE_NUM / 2));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NzU2Mg==", "url": "https://github.com/trinodb/trino/pull/6027#discussion_r527567562", "bodyText": "oh... so we need to retry query execution as well.", "author": "kokosing", "createdAt": "2020-11-20T09:39:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MzU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3NDU1NQ==", "url": "https://github.com/trinodb/trino/pull/6027#discussion_r527574555", "bodyText": "Unfortunately yes. We should fix the base issue, but that is some digging into complex scheduler.", "author": "sopel39", "createdAt": "2020-11-20T09:50:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MzU4NA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkyOTUxNQ==", "url": "https://github.com/trinodb/trino/pull/6027#discussion_r551929515", "bodyText": "static import", "author": "skrzypo987", "createdAt": "2021-01-05T13:25:45Z", "path": "core/trino-main/src/main/java/io/trino/testing/assertions/Assert.java", "diffHunk": "@@ -50,6 +52,11 @@ public static void assertEquals(Iterable<?> actual, Iterable<?> expected, String\n         }\n     }\n \n+    public static void assertEventually(Runnable assertion)\n+    {\n+        assertEventually(new Duration(30, TimeUnit.SECONDS), assertion);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5153cf9064ef7534d77757481fb057028a7a05b6", "url": "https://github.com/trinodb/trino/commit/5153cf9064ef7534d77757481fb057028a7a05b6", "message": "Use eventual assertion with query stats\n\nIt is possible that retrieved query stats might not collect all\ninformation, so running eventual assertion to make tests more reliable.", "committedDate": "2021-01-15T13:06:22Z", "type": "commit"}, {"oid": "5153cf9064ef7534d77757481fb057028a7a05b6", "url": "https://github.com/trinodb/trino/commit/5153cf9064ef7534d77757481fb057028a7a05b6", "message": "Use eventual assertion with query stats\n\nIt is possible that retrieved query stats might not collect all\ninformation, so running eventual assertion to make tests more reliable.", "committedDate": "2021-01-15T13:06:22Z", "type": "forcePushed"}]}