{"pr_number": 3159, "pr_title": "Disallow SHOW STATS for row filters and column masking", "pr_createdAt": "2020-03-19T12:44:13Z", "pr_url": "https://github.com/trinodb/trino/pull/3159", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxNjEyMQ==", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396316121", "bodyText": "the previous version was more readable", "author": "findepi", "createdAt": "2020-03-23T09:34:12Z", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -253,11 +251,8 @@ private Constraint getConstraint(Plan plan)\n                     .where(TableScanNode.class::isInstance)\n                     .findSingle();\n \n-            if (!scanNode.isPresent()) {\n-                return Constraint.alwaysFalse();\n-            }\n-\n-            return new Constraint(metadata.getTableProperties(session, scanNode.get().getTable()).getPredicate());\n+            return scanNode.map(tableScanNode -> new Constraint(metadata.getTableProperties(session, tableScanNode.getTable()).getPredicate()))\n+                    .orElseGet(Constraint::alwaysFalse);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxODE2OQ==", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396318169", "bodyText": "Extract getQueryRelation method commit:\n\nthe getQueryRelation -> getRelationQuery\nit's not really \"Extract... \", because you're also changing flow... Maybe Factor out getting query for SHOW STATS", "author": "findepi", "createdAt": "2020-03-23T09:37:36Z", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -128,26 +128,30 @@ protected Node visitShowStats(ShowStats node, Void context)\n         {\n             checkState(queryExplainer.isPresent(), \"Query explainer must be provided for SHOW STATS SELECT\");\n \n-            if (node.getRelation() instanceof TableSubquery) {\n-                Query query = ((TableSubquery) node.getRelation()).getQuery();\n-                QuerySpecification specification = (QuerySpecification) query.getQueryBody();\n-\n-                Plan plan;\n+            Query query = getRelationQuery(node);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxOTE5NQ==", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396319195", "bodyText": "add also a test case:\nassertQueryFails(\"SHOW STATS FOR (SELECT * FROM (SELECT * FROM nation))\", \nbtw i think the case you have currently doesn't match the test method name -- it's more like testShowStatsWithoutTableScan", "author": "findepi", "createdAt": "2020-03-23T09:39:08Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestShowStats.java", "diffHunk": "@@ -191,6 +191,12 @@ public void testShowStatsWithMultipleFromFails()\n         assertQueryFails(\"SHOW STATS FOR (SELECT * FROM nation_partitioned, region)\", \".*There must be exactly one table in query passed to SHOW STATS SELECT clause\");\n     }\n \n+    @Test\n+    public void testShowStatsWithSubqueryFails()\n+    {\n+        assertQueryFails(\"SHOW STATS FOR (SELECT * FROM (VALUES 1))\", \".*There must be exactly one table in query passed to SHOW STATS SELECT clause\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMTU5OQ==", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396321599", "bodyText": "This is fishy. Rather than filter, we should verify the  the FROM is just a table.\n(like we did https://github.com/prestosql/presto/blob/1f9088dc5757d18abf1f622f64d8bad4a87e8e2b/presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java#L176-L177)\nAdd a test case like\nSTATS FOR \n  SELECT * \n  FROM nation, (subquery)", "author": "findepi", "createdAt": "2020-03-23T09:43:07Z", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -156,6 +170,17 @@ private Query getRelationQuery(ShowStats node)\n             throw new IllegalArgumentException(\"Expected either TableSubquery or Table as relation\");\n         }\n \n+        private Table getTable(ShowStats node, QuerySpecification specification)\n+        {\n+            check(specification.getFrom().isPresent(), node, \"There must be exactly one table in query passed to SHOW STATS SELECT clause\");\n+            List<Table> tables = preOrder(specification.getFrom().get())\n+                    .filter(Table.class::isInstance)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMTc5Mw==", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396321793", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return tables.get(0);\n          \n          \n            \n                        return getOnlyElement(tables);", "author": "findepi", "createdAt": "2020-03-23T09:43:29Z", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -156,6 +170,17 @@ private Query getRelationQuery(ShowStats node)\n             throw new IllegalArgumentException(\"Expected either TableSubquery or Table as relation\");\n         }\n \n+        private Table getTable(ShowStats node, QuerySpecification specification)\n+        {\n+            check(specification.getFrom().isPresent(), node, \"There must be exactly one table in query passed to SHOW STATS SELECT clause\");\n+            List<Table> tables = preOrder(specification.getFrom().get())\n+                    .filter(Table.class::isInstance)\n+                    .map(Table.class::cast)\n+                    .collect(toImmutableList());\n+            check(tables.size() == 1, node, \"There must be exactly one table in query passed to SHOW STATS SELECT clause\");\n+            return tables.get(0);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMjQ3OQ==", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396322479", "bodyText": "Do validation after access control in ShowStats\nValidation potentially could leak information about column masks and row\nfilters used during the planning (done within ShowStatsRewrite).\n\n\nCan we have a test covering precisely this?\nshould we ask AC whether there are any masks?", "author": "findepi", "createdAt": "2020-03-23T09:44:38Z", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -140,9 +140,23 @@ protected Node visitShowStats(ShowStats node, Void context)\n                 throw rewriteAccessDeniedException(e);\n             }\n \n+            Table table = getTable(node, specification);\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, node, table.getName());\n+            TableHandle tableHandle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, node, \"Table '%s' not found\", table.getName()));\n+            TableMetadata tableMetadata = metadata.getTableMetadata(session, tableHandle);\n+            Set<String> columnNames = extractStatsColumns(tableMetadata, specification.getSelect().getSelectItems());\n+\n+            try {\n+                accessControl.checkCanSelectFromColumns(session.toSecurityContext(), tableName, columnNames);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0NDY1Mw==", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396444653", "bodyText": "should we ask AC whether there are any masks?\n\nI do that in next commit.", "author": "kokosing", "createdAt": "2020-03-23T13:21:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMjQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1NTg5NQ==", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396455895", "bodyText": "Validation potentially could leak information about column masks and row\n\nI meant that if column mask is a function the user might get an error with information showing that function.", "author": "kokosing", "createdAt": "2020-03-23T13:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMjQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4NDA4MA==", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396484080", "bodyText": "so maybe squash the two commits", "author": "findepi", "createdAt": "2020-03-23T14:18:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMjQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5MjkzOQ==", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396492939", "bodyText": "So I did", "author": "kokosing", "createdAt": "2020-03-23T14:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMjQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMzg4MA==", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396323880", "bodyText": "Use the getTableHandle(Node node, QualifiedName table) method, instead of removing it\nhttps://github.com/prestosql/presto/blob/1f9088dc5757d18abf1f622f64d8bad4a87e8e2b/presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java#L263-L268", "author": "findepi", "createdAt": "2020-03-23T09:47:07Z", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -140,9 +140,23 @@ protected Node visitShowStats(ShowStats node, Void context)\n                 throw rewriteAccessDeniedException(e);\n             }\n \n+            Table table = getTable(node, specification);\n+            QualifiedObjectName tableName = createQualifiedObjectName(session, node, table.getName());\n+            TableHandle tableHandle = metadata.getTableHandle(session, tableName)\n+                    .orElseThrow(() -> semanticException(TABLE_NOT_FOUND, node, \"Table '%s' not found\", table.getName()));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ0NDI0OQ==", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396444249", "bodyText": "I am going to use tableName later on, so there are not much benefits of this method.", "author": "kokosing", "createdAt": "2020-03-23T13:20:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyMzg4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyNTcwOA==", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396325708", "bodyText": "i think you should grab ConnectorTableMetadata instead of calling connector metadata for each column separately.", "author": "findepi", "createdAt": "2020-03-23T09:49:58Z", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -154,9 +156,19 @@ protected Node visitShowStats(ShowStats node, Void context)\n                 throw rewriteAccessDeniedException(e);\n             }\n \n+            for (ColumnHandle column : columnHandles.values()) {\n+                ColumnMetadata columnMetadata = metadata.getColumnMetadata(session, tableHandle, column);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyNjg3OQ==", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396326879", "bodyText": "maybe add\n// SHOW STATS could reveal min, max value which would be otherwise filtered out; or could reveal statistical properties of the data, like row count", "author": "findepi", "createdAt": "2020-03-23T09:51:49Z", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -154,9 +156,19 @@ protected Node visitShowStats(ShowStats node, Void context)\n                 throw rewriteAccessDeniedException(e);\n             }\n \n+            for (ColumnHandle column : columnHandles.values()) {\n+                ColumnMetadata columnMetadata = metadata.getColumnMetadata(session, tableHandle, column);\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, columnMetadata.getName(), columnMetadata.getType()).isEmpty()) {\n+                    throw new PrestoException(NOT_SUPPORTED, \"SHOW STATS for table with column masking is not supported: \" + columnMetadata.getName());\n+                }\n+            }\n+            if (!accessControl.getRowFilters(session.toSecurityContext(), tableName).isEmpty()) {\n+                throw new PrestoException(NOT_SUPPORTED, \"SHOW STATS is not supported for a table with row filtering\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyNzM1Nw==", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396327357", "bodyText": "This should be verified only for the columns requested.\nIe if i SHOW STATS FOR SELECT a FROM t, then mask on b doesn't matter", "author": "findepi", "createdAt": "2020-03-23T09:52:29Z", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowStatsRewrite.java", "diffHunk": "@@ -154,9 +156,19 @@ protected Node visitShowStats(ShowStats node, Void context)\n                 throw rewriteAccessDeniedException(e);\n             }\n \n+            for (ColumnHandle column : columnHandles.values()) {\n+                ColumnMetadata columnMetadata = metadata.getColumnMetadata(session, tableHandle, column);\n+                if (!accessControl.getColumnMasks(session.toSecurityContext(), tableName, columnMetadata.getName(), columnMetadata.getType()).isEmpty()) {\n+                    throw new PrestoException(NOT_SUPPORTED, \"SHOW STATS for table with column masking is not supported: \" + columnMetadata.getName());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyNzkxMw==", "url": "https://github.com/trinodb/trino/pull/3159#discussion_r396327913", "bodyText": "add\n\ncase when masked column is explicitly selected (alone, or with others)\ncase when masked column is not selected", "author": "findepi", "createdAt": "2020-03-23T09:53:16Z", "path": "presto-main/src/test/java/io/prestosql/sql/query/TestColumnMask.java", "diffHunk": "@@ -351,4 +351,19 @@ public void testInvalidMasks()\n             assertions.assertFails(\"SELECT orderkey FROM orders\", \"\\\\Qline 1:20: Column mask for 'orders.orderkey' cannot contain aggregations, window functions or grouping operations: [GROUPING (orderkey)]\\\\E\");\n         });\n     }\n+\n+    @Test\n+    public void testShowStats()\n+    {\n+        assertions.executeExclusively(() -> {\n+            accessControl.reset();\n+            accessControl.columnMask(\n+                    new QualifiedObjectName(CATALOG, \"tiny\", \"orders\"),\n+                    \"orderkey\",\n+                    USER,\n+                    new ViewExpression(USER, Optional.of(CATALOG), Optional.of(\"tiny\"), \"7\"));\n+\n+            assertions.assertFails(\"SHOW STATS FOR (SELECT * FROM orders)\", \"\\\\QSHOW STATS for table with column masking is not supported: orderkey\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "57bbb28ff3a26e098e9e0a75c922902a8284901e", "url": "https://github.com/trinodb/trino/commit/57bbb28ff3a26e098e9e0a75c922902a8284901e", "message": "Cleanup in ShowStatsRewrite\n\n - variables inline\n - variables rename\n - fix formatting\n - change visibility scope\n - static import", "committedDate": "2020-03-23T13:34:40Z", "type": "commit"}, {"oid": "d5a2ca5a529acaaef754a79f7393bfa43b1549bf", "url": "https://github.com/trinodb/trino/commit/d5a2ca5a529acaaef754a79f7393bfa43b1549bf", "message": "Factor out getting query for SHOW STATS", "committedDate": "2020-03-23T13:34:50Z", "type": "commit"}, {"oid": "c5414ce1b5489f716e01f2cfd88b3ae0ba6ec56e", "url": "https://github.com/trinodb/trino/commit/c5414ce1b5489f716e01f2cfd88b3ae0ba6ec56e", "message": "Disallow SHOW STATS for tables with filters and masking", "committedDate": "2020-03-23T13:49:43Z", "type": "commit"}, {"oid": "c5414ce1b5489f716e01f2cfd88b3ae0ba6ec56e", "url": "https://github.com/trinodb/trino/commit/c5414ce1b5489f716e01f2cfd88b3ae0ba6ec56e", "message": "Disallow SHOW STATS for tables with filters and masking", "committedDate": "2020-03-23T13:49:43Z", "type": "forcePushed"}]}