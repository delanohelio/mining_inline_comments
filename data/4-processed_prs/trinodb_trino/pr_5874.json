{"pr_number": 5874, "pr_title": "Support multiple LDAP user bind patterns", "pr_createdAt": "2020-11-09T07:06:14Z", "pr_url": "https://github.com/trinodb/trino/pull/5874", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1OTA5Mw==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r519659093", "bodyText": "There is no point in logging when you throw", "author": "kokosing", "createdAt": "2020-11-09T09:20:45Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -143,7 +147,13 @@ private Principal authenticateWithUserBind(Credential credential)\n             String userDistinguishedName = createUserDistinguishedName(user);\n             if (groupAuthorizationSearchPattern.isPresent()) {\n                 // user password is also validated as user DN and password is used for querying LDAP\n-                checkGroupMembership(user, userDistinguishedName, credential.getPassword());\n+                String searchBase = userBaseDistinguishedName.orElseThrow();\n+                String groupSearch = replaceUser(groupAuthorizationSearchPattern.get(), user);\n+                if (!isGroupMember(searchBase, groupSearch, userDistinguishedName, credential.getPassword())) {\n+                    String message = format(\"User [%s] not a member of an authorized group\", user);\n+                    log.debug(message);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ2MDQ5Ng==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r525460496", "bodyText": "I agree, but all of the code in this class logs and throws, so I copied the style of the existing code.", "author": "dain", "createdAt": "2020-11-17T19:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1OTA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyODI3NA==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r526528274", "bodyText": "The authentication code is kind of an exception, since the access denied causes an auth failure without any stack trace or logging. We might want to move the logging to the authentication system itself, but that's a separate project from this refactoring.", "author": "electrum", "createdAt": "2020-11-19T01:16:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1OTA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI1Mjc1MA==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r528252750", "bodyText": "Talked to @electrum, we're going to leave this as is for now", "author": "dain", "createdAt": "2020-11-21T22:51:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1OTA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExNDE1Nw==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r525114157", "bodyText": "same", "author": "kokosing", "createdAt": "2020-11-17T12:24:15Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -230,42 +224,53 @@ static boolean containsSpecialCharacters(String user)\n         return SPECIAL_CHARACTERS.matchesAnyOf(user);\n     }\n \n-    private String validateGroupMembership(String user, DirContext context)\n+    private String lookupUserDistinguishedName(String user)\n             throws NamingException\n     {\n-        NamingEnumeration<SearchResult> search = searchGroupMembership(user, context);\n-        try {\n-            if (!search.hasMore()) {\n-                String message = format(\"User [%s] not a member of an authorized group\", user);\n-                log.debug(message);\n-                throw new AccessDeniedException(message);\n-            }\n+        String searchBase = userBaseDistinguishedName.orElseThrow();\n+        String searchFilter = replaceUser(groupAuthorizationSearchPattern.orElseThrow(), user);\n+        Set<String> userDistinguishedNames = lookupUserDistinguishedName(searchBase, searchFilter, bindDistinguishedName.orElseThrow(), bindPassword.orElseThrow());\n+        if (userDistinguishedNames.isEmpty()) {\n+            String message = format(\"User [%s] not a member of an authorized group\", user);\n+            log.debug(message);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExNDE4OA==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r525114188", "bodyText": "same", "author": "kokosing", "createdAt": "2020-11-17T12:24:19Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -230,42 +224,53 @@ static boolean containsSpecialCharacters(String user)\n         return SPECIAL_CHARACTERS.matchesAnyOf(user);\n     }\n \n-    private String validateGroupMembership(String user, DirContext context)\n+    private String lookupUserDistinguishedName(String user)\n             throws NamingException\n     {\n-        NamingEnumeration<SearchResult> search = searchGroupMembership(user, context);\n-        try {\n-            if (!search.hasMore()) {\n-                String message = format(\"User [%s] not a member of an authorized group\", user);\n-                log.debug(message);\n-                throw new AccessDeniedException(message);\n-            }\n+        String searchBase = userBaseDistinguishedName.orElseThrow();\n+        String searchFilter = replaceUser(groupAuthorizationSearchPattern.orElseThrow(), user);\n+        Set<String> userDistinguishedNames = lookupUserDistinguishedName(searchBase, searchFilter, bindDistinguishedName.orElseThrow(), bindPassword.orElseThrow());\n+        if (userDistinguishedNames.isEmpty()) {\n+            String message = format(\"User [%s] not a member of an authorized group\", user);\n+            log.debug(message);\n+            throw new AccessDeniedException(message);\n+        }\n+        if (userDistinguishedNames.size() > 1) {\n+            String message = format(\"Multiple group membership results for user [%s]: %s\", user, userDistinguishedNames);\n+            log.debug(message);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExNTU2Nw==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r525115567", "bodyText": "try with resources?\nIf DirContext is not closeable then:\ntry (CloseableWrapper<DirContext> context = wrap(createUserDirContext(contextUserDistinguishedName, contextPassword)) {\n\n?", "author": "kokosing", "createdAt": "2020-11-17T12:26:39Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/JdkLdapAuthenticatorClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSet.Builder;\n+import io.airlift.log.Logger;\n+import io.airlift.security.pem.PemReader;\n+import io.prestosql.spi.security.AccessDeniedException;\n+\n+import javax.inject.Inject;\n+import javax.naming.AuthenticationException;\n+import javax.naming.NamingEnumeration;\n+import javax.naming.NamingException;\n+import javax.naming.directory.DirContext;\n+import javax.naming.directory.SearchControls;\n+import javax.naming.directory.SearchResult;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyStore;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static io.prestosql.plugin.password.jndi.JndiUtils.createDirContext;\n+import static java.util.Objects.requireNonNull;\n+import static javax.naming.Context.INITIAL_CONTEXT_FACTORY;\n+import static javax.naming.Context.PROVIDER_URL;\n+import static javax.naming.Context.REFERRAL;\n+import static javax.naming.Context.SECURITY_AUTHENTICATION;\n+import static javax.naming.Context.SECURITY_CREDENTIALS;\n+import static javax.naming.Context.SECURITY_PRINCIPAL;\n+\n+public class JdkLdapAuthenticatorClient\n+        implements LdapAuthenticatorClient\n+{\n+    private static final Logger log = Logger.get(JdkLdapAuthenticatorClient.class);\n+\n+    private final Map<String, String> basicEnvironment;\n+    private final Optional<SSLContext> sslContext;\n+\n+    @Inject\n+    public JdkLdapAuthenticatorClient(LdapConfig ldapConfig)\n+    {\n+        String ldapUrl = requireNonNull(ldapConfig.getLdapUrl(), \"ldapUrl is null\");\n+        if (ldapUrl.startsWith(\"ldap://\")) {\n+            log.warn(\"Passwords will be sent in the clear to the LDAP server. Please consider using SSL to connect.\");\n+        }\n+\n+        this.basicEnvironment = ImmutableMap.<String, String>builder()\n+                .put(INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\")\n+                .put(PROVIDER_URL, ldapUrl)\n+                .put(REFERRAL, ldapConfig.isIgnoreReferrals() ? \"ignore\" : \"follow\")\n+                .build();\n+\n+        this.sslContext = Optional.ofNullable(ldapConfig.getTrustCertificate())\n+                .map(JdkLdapAuthenticatorClient::createSslContext);\n+    }\n+\n+    @Override\n+    public void validatePassword(String userDistinguishedName, String password)\n+            throws NamingException\n+    {\n+        createUserDirContext(userDistinguishedName, password).close();\n+    }\n+\n+    @Override\n+    public boolean isGroupMember(String searchBase, String groupSearch, String contextUserDistinguishedName, String contextPassword)\n+            throws NamingException\n+    {\n+        DirContext context = createUserDirContext(contextUserDistinguishedName, contextPassword);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1ODc3MA==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r525458770", "bodyText": "I didn't know about CloseableWrapper I'll give it a try", "author": "dain", "createdAt": "2020-11-17T19:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExNTU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ2MTE1NA==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r525461154", "bodyText": "I just make up this name, you would need to write your own. My point was wrap non closeable object as closeable so you could use try-with-resources.", "author": "kokosing", "createdAt": "2020-11-17T19:56:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExNTU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5MDQyNw==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r526490427", "bodyText": "This entire code base is already using try/finally, so this follows the existing code.", "author": "dain", "createdAt": "2020-11-18T23:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExNTU2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExNzMzMw==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r525117333", "bodyText": "We also need real product tests with real ldap service. See io.prestosql.tests.jdbc.TestLdapPrestoJdbc", "author": "kokosing", "createdAt": "2020-11-17T12:29:54Z", "path": "presto-password-authenticators/src/test/java/io/prestosql/plugin/password/ldap/TestLdapAuthenticator.java", "diffHunk": "@@ -50,4 +144,67 @@ public void testContainsSpecialCharacters()\n                 .as(\"Angle brackets\")\n                 .isEqualTo(true);\n     }\n+\n+    private static class TestLdapAuthenticatorClient", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1ODI5Ng==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r525458296", "bodyText": "I don't think we need a real product test.  This code verifies that both paths are checked.  So for an integration, if one test works, multiple will work by extension.", "author": "dain", "createdAt": "2020-11-17T19:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExNzMzMw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNjY2NA==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r528036664", "bodyText": "Let's fix all these to do the formatting in the logger call", "author": "electrum", "createdAt": "2020-11-21T00:24:11Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -143,7 +147,13 @@ private Principal authenticateWithUserBind(Credential credential)\n             String userDistinguishedName = createUserDistinguishedName(user);\n             if (groupAuthorizationSearchPattern.isPresent()) {\n                 // user password is also validated as user DN and password is used for querying LDAP\n-                checkGroupMembership(user, userDistinguishedName, credential.getPassword());\n+                String searchBase = userBaseDistinguishedName.orElseThrow();\n+                String groupSearch = replaceUser(groupAuthorizationSearchPattern.get(), user);\n+                if (!isGroupMember(searchBase, groupSearch, userDistinguishedName, credential.getPassword())) {\n+                    String message = format(\"User [%s] not a member of an authorized group\", user);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNjc5MA==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r528036790", "bodyText": "Don't import Builder since it's ambiguous by itself", "author": "electrum", "createdAt": "2020-11-21T00:24:42Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -19,6 +19,9 @@\n import com.google.common.cache.CacheLoader;\n import com.google.common.cache.LoadingCache;\n import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSet.Builder;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNjk3Nw==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r528036977", "bodyText": "Static import", "author": "electrum", "createdAt": "2020-11-21T00:25:33Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -230,42 +224,53 @@ static boolean containsSpecialCharacters(String user)\n         return SPECIAL_CHARACTERS.matchesAnyOf(user);\n     }\n \n-    private String validateGroupMembership(String user, DirContext context)\n+    private String lookupUserDistinguishedName(String user)\n             throws NamingException\n     {\n-        NamingEnumeration<SearchResult> search = searchGroupMembership(user, context);\n-        try {\n-            if (!search.hasMore()) {\n-                String message = format(\"User [%s] not a member of an authorized group\", user);\n-                log.debug(message);\n-                throw new AccessDeniedException(message);\n-            }\n+        String searchBase = userBaseDistinguishedName.orElseThrow();\n+        String searchFilter = replaceUser(groupAuthorizationSearchPattern.orElseThrow(), user);\n+        Set<String> userDistinguishedNames = lookupUserDistinguishedName(searchBase, searchFilter, bindDistinguishedName.orElseThrow(), bindPassword.orElseThrow());\n+        if (userDistinguishedNames.isEmpty()) {\n+            String message = format(\"User [%s] not a member of an authorized group\", user);\n+            log.debug(message);\n+            throw new AccessDeniedException(message);\n+        }\n+        if (userDistinguishedNames.size() > 1) {\n+            String message = format(\"Multiple group membership results for user [%s]: %s\", user, userDistinguishedNames);\n+            log.debug(message);\n+            throw new AccessDeniedException(message);\n+        }\n+        return Iterables.getOnlyElement(userDistinguishedNames);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNzI1OA==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r528037258", "bodyText": "This might not be the best checked exception to use for generic LDAP clients, but we can update that later if needed", "author": "electrum", "createdAt": "2020-11-21T00:26:59Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticatorClient.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import javax.naming.NamingException;\n+\n+import java.util.Set;\n+\n+public interface LdapAuthenticatorClient\n+{\n+    void validatePassword(String userDistinguishedName, String password)\n+            throws NamingException;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNzQzMg==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r528037432", "bodyText": "Make method name plural lookupUserDistinguishedNames", "author": "electrum", "createdAt": "2020-11-21T00:27:50Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticatorClient.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.password.ldap;\n+\n+import javax.naming.NamingException;\n+\n+import java.util.Set;\n+\n+public interface LdapAuthenticatorClient\n+{\n+    void validatePassword(String userDistinguishedName, String password)\n+            throws NamingException;\n+\n+    boolean isGroupMember(String searchBase, String groupSearch, String contextUserDistinguishedName, String contextPassword)\n+            throws NamingException;\n+\n+    Set<String> lookupUserDistinguishedName(String searchBase, String searchFilter, String contextUserDistinguishedName, String contextPassword)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNzgwMA==", "url": "https://github.com/trinodb/trino/pull/5874#discussion_r528037800", "bodyText": "Use log formatting", "author": "electrum", "createdAt": "2020-11-21T00:29:59Z", "path": "presto-password-authenticators/src/main/java/io/prestosql/plugin/password/ldap/LdapAuthenticator.java", "diffHunk": "@@ -112,28 +113,32 @@ private Principal authenticateWithUserBind(Credential credential)\n         if (containsSpecialCharacters(user)) {\n             throw new AccessDeniedException(\"Username contains a special LDAP character\");\n         }\n-        try {\n-            String userDistinguishedName = createUserDistinguishedName(user);\n-            if (groupAuthorizationSearchPattern.isPresent()) {\n-                // user password is also validated as user DN and password is used for querying LDAP\n-                String searchBase = userBaseDistinguishedName.orElseThrow();\n-                String groupSearch = replaceUser(groupAuthorizationSearchPattern.get(), user);\n-                if (!client.isGroupMember(searchBase, groupSearch, userDistinguishedName, credential.getPassword())) {\n-                    String message = format(\"User [%s] not a member of an authorized group\", user);\n-                    log.debug(message);\n-                    throw new AccessDeniedException(message);\n+        Exception lastException = new RuntimeException();\n+        for (String userBindSearchPattern : userBindSearchPatterns) {\n+            try {\n+                String userDistinguishedName = replaceUser(userBindSearchPattern, user);\n+                if (groupAuthorizationSearchPattern.isPresent()) {\n+                    // user password is also validated as user DN and password is used for querying LDAP\n+                    String searchBase = userBaseDistinguishedName.orElseThrow();\n+                    String groupSearch = replaceUser(groupAuthorizationSearchPattern.get(), user);\n+                    if (!client.isGroupMember(searchBase, groupSearch, userDistinguishedName, credential.getPassword())) {\n+                        String message = format(\"User [%s] not a member of an authorized group\", user);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d80be3108a72877bb6627cf4afd11d033715c7c1", "url": "https://github.com/trinodb/trino/commit/d80be3108a72877bb6627cf4afd11d033715c7c1", "message": "Restructure LdapAuthenticator code", "committedDate": "2020-11-21T21:17:47Z", "type": "commit"}, {"oid": "b207cc4d03f62247250d2ac29bae956604aa5443", "url": "https://github.com/trinodb/trino/commit/b207cc4d03f62247250d2ac29bae956604aa5443", "message": "Add LdapAuthenticatorClient abstraction", "committedDate": "2020-11-21T21:20:20Z", "type": "commit"}, {"oid": "bcfdb244cc293685d6f52ab8b135f267b733b8a1", "url": "https://github.com/trinodb/trino/commit/bcfdb244cc293685d6f52ab8b135f267b733b8a1", "message": "Add unit test for LdapAuthenticator", "committedDate": "2020-11-21T21:53:18Z", "type": "commit"}, {"oid": "12df47084ad362d8f5d7c41b56ea356b58c471b7", "url": "https://github.com/trinodb/trino/commit/12df47084ad362d8f5d7c41b56ea356b58c471b7", "message": "Support multiple LDAP user bind patterns", "committedDate": "2020-11-21T21:53:19Z", "type": "commit"}, {"oid": "519e0e1dc1c6306484c8a51e4ba54bb4c36219ca", "url": "https://github.com/trinodb/trino/commit/519e0e1dc1c6306484c8a51e4ba54bb4c36219ca", "message": "Add abstractions to simplify JdkLdapAuthenticatorClient", "committedDate": "2020-11-21T21:53:19Z", "type": "commit"}, {"oid": "519e0e1dc1c6306484c8a51e4ba54bb4c36219ca", "url": "https://github.com/trinodb/trino/commit/519e0e1dc1c6306484c8a51e4ba54bb4c36219ca", "message": "Add abstractions to simplify JdkLdapAuthenticatorClient", "committedDate": "2020-11-21T21:53:19Z", "type": "forcePushed"}]}