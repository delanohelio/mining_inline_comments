{"pr_number": 4412, "pr_title": "Avoid hard-coded Hadoop warehouse paths", "pr_createdAt": "2020-07-10T02:11:45Z", "pr_url": "https://github.com/trinodb/trino/pull/4412", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0OTk4NQ==", "url": "https://github.com/trinodb/trino/pull/4412#discussion_r452649985", "bodyText": "We can use format here to interpolate warehouseDirectory.", "author": "Lewuathe", "createdAt": "2020-07-10T06:38:33Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestTextFileHiveTable.java", "diffHunk": "@@ -36,59 +38,66 @@\n     @Inject\n     private HdfsClient hdfsClient;\n \n+    @Inject\n+    @Named(\"databases.hive.warehouse_directory_path\")\n+    private String warehouseDirectory;\n+\n     @BeforeTestWithContext\n     public void setup()\n             throws Exception\n     {\n-        hdfsClient.createDirectory(\"/user/hive/warehouse/TestTextFileHiveTable/single_column\");\n+        hdfsClient.createDirectory(warehouseDirectory + \"/TestTextFileHiveTable/single_column\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjE2NA==", "url": "https://github.com/trinodb/trino/pull/4412#discussion_r452746164", "bodyText": "I think this is fine. Single concatenation is more readable than format imo.", "author": "losipiuk", "createdAt": "2020-07-10T09:56:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0OTk4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MTkyNw==", "url": "https://github.com/trinodb/trino/pull/4412#discussion_r452651927", "bodyText": "Is there any case where it's okay to return invalid URI? Isn't it better to reporting an exception properly instead of just returning the original table location?", "author": "Lewuathe", "createdAt": "2020-07-10T06:44:01Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/util/TableLocationUtils.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive.util;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+import static com.google.common.collect.Iterables.getOnlyElement;\n+import static io.prestosql.tests.utils.QueryExecutors.onPresto;\n+import static java.lang.String.format;\n+\n+public final class TableLocationUtils\n+{\n+    private TableLocationUtils()\n+    {\n+    }\n+\n+    public static String getTableLocation(String tableName, int partitionColumns)\n+    {\n+        StringBuilder regex = new StringBuilder(\"/[^/]*$\");\n+        for (int i = 0; i < partitionColumns; i++) {\n+            regex.insert(0, \"/[^/]*\");\n+        }\n+        return getOnlyElement(onPresto().executeQuery(format(\"SELECT DISTINCT regexp_replace(\\\"$path\\\", '%s', '') FROM %s\", regex.toString(), tableName)).column(1));\n+    }\n+\n+    public static String getTablePath(String tableName, int partitionColumns)\n+    {\n+        String location = getTableLocation(tableName, partitionColumns);\n+        try {\n+            URI uri = new URI(location);\n+            return uri.getPath();\n+        }\n+        catch (URISyntaxException e) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzM2Ng==", "url": "https://github.com/trinodb/trino/pull/4412#discussion_r452747366", "bodyText": "+1.\nCan you provide explanation in the comment when do we expect the exception to happen.", "author": "losipiuk", "createdAt": "2020-07-10T09:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MTkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc4NjExMA==", "url": "https://github.com/trinodb/trino/pull/4412#discussion_r452786110", "bodyText": "I did not mean to do that, I don't know how that slipped through.", "author": "aalbu", "createdAt": "2020-07-10T11:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MTkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5OTU1NA==", "url": "https://github.com/trinodb/trino/pull/4412#discussion_r453099554", "bodyText": "I guess this relates to trinodb/tempto@706f495\nThere, it was done defensively, as location can be specified as \"path\", not uri. Wasn't sure if metastore will always normalize it, by adding hdfs://host/ prefix.\nMaybe it does.", "author": "findepi", "createdAt": "2020-07-10T22:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MTkyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMzg3Mg==", "url": "https://github.com/trinodb/trino/pull/4412#discussion_r453103872", "bodyText": "Even if it doesn't, new URL(\"/user/hive/warehouse/foo\").getPath() works just like new URL(\"hdfs://hadoop-master:9000/user/hive/warehouse/foo\").getPath().", "author": "aalbu", "createdAt": "2020-07-10T22:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MTkyNw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "817a605c57c401af39061a2f077a632d8bbb6467", "url": "https://github.com/trinodb/trino/commit/817a605c57c401af39061a2f077a632d8bbb6467", "message": "Avoid hard-coded Hadoop warehouse paths", "committedDate": "2020-07-10T16:48:34Z", "type": "commit"}, {"oid": "817a605c57c401af39061a2f077a632d8bbb6467", "url": "https://github.com/trinodb/trino/commit/817a605c57c401af39061a2f077a632d8bbb6467", "message": "Avoid hard-coded Hadoop warehouse paths", "committedDate": "2020-07-10T16:48:34Z", "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxNzk0Nw==", "url": "https://github.com/trinodb/trino/pull/4412#discussion_r453617947", "bodyText": "This property is weridly named. Based on usege it means \"Hive is creating tables as ACID by default\". Hence the name suggest \"Tempto should create tables as ACID\".\nWe should either flip the meaning.\nOr name it sth like \"orc_tables_created_as_acid_in_hive\".\nBut I think we should just reveverse its meaning to \"Tempto should create tables as non-transactional\".\nAnd then use:\n(createTablesAsAcid.orElse(false) ? \"TBLPROPERTIES ('transactional' = 'true')\" : \"\");\n\nmakes sense?", "author": "losipiuk", "createdAt": "2020-07-13T12:37:30Z", "path": "presto-product-tests/src/main/resources/tempto-configuration.yaml", "diffHunk": "@@ -21,6 +21,7 @@ databases:\n     warehouse_directory_path: /user/hive/warehouse\n     inject_stats_for_immutable_tables: true\n     inject_stats_for_mutable_tables: true\n+    create_tables_as_acid: false", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0a4cedc6612158c22d93ac19b8bd7c3970edacef", "url": "https://github.com/trinodb/trino/commit/0a4cedc6612158c22d93ac19b8bd7c3970edacef", "message": "Tempto configuration property indicating if tables are transactional by default", "committedDate": "2020-07-13T12:47:30Z", "type": "commit"}, {"oid": "0a4cedc6612158c22d93ac19b8bd7c3970edacef", "url": "https://github.com/trinodb/trino/commit/0a4cedc6612158c22d93ac19b8bd7c3970edacef", "message": "Tempto configuration property indicating if tables are transactional by default", "committedDate": "2020-07-13T12:47:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyNjIwMQ==", "url": "https://github.com/trinodb/trino/pull/4412#discussion_r453626201", "bodyText": "This should possibly be consumed by table fulfillers which are part of Tempto itself. Not only by the code here. But it can be a follwoup.", "author": "losipiuk", "createdAt": "2020-07-13T12:51:38Z", "path": "presto-product-tests/src/main/resources/tempto-configuration.yaml", "diffHunk": "@@ -21,6 +21,7 @@ databases:\n     warehouse_directory_path: /user/hive/warehouse\n     inject_stats_for_immutable_tables: true\n     inject_stats_for_mutable_tables: true\n+    enforce_non_transactional_tables: false", "originalCommit": "0a4cedc6612158c22d93ac19b8bd7c3970edacef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}