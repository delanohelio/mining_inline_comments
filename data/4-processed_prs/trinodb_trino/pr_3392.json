{"pr_number": 3392, "pr_title": "Add starts_with function", "pr_createdAt": "2020-04-09T11:45:50Z", "pr_url": "https://github.com/trinodb/trino/pull/3392", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNzcxNw==", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r406927717", "bodyText": "How about \"Tests whether substring is a prefix of string\".\n@mosabua, any suggestions?", "author": "martint", "createdAt": "2020-04-10T20:26:57Z", "path": "presto-docs/src/main/sphinx/functions/string.rst", "diffHunk": "@@ -141,6 +141,10 @@ String Functions\n     Returns the starting position of the first instance of ``substring`` in\n     ``string``. Positions start with ``1``. If not found, ``0`` is returned.\n \n+.. function:: starts_with(string, substring) -> boolean\n+\n+    Returns boolean whether ``string`` starts with ``substring`` or not", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5Mjc5OQ==", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r407592799", "bodyText": "thats good.. or\nDetermine if the supplied string starts with substring.\nThe \"or not\" is redundant in my opinion.", "author": "mosabua", "createdAt": "2020-04-13T17:08:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNzcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyOTcyMw==", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r406929723", "bodyText": "Can you add tests for:\n\nstrings that contain non-ascii unicode characters?\nwhere the string is shorter than the substring\nempty string and/or empty substring", "author": "martint", "createdAt": "2020-04-10T20:30:46Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestStringFunctions.java", "diffHunk": "@@ -284,6 +284,11 @@ public void testStringPosition()\n         testStrPosAndPosition(\"\", null, null);\n         testStrPosAndPosition(null, null, null);\n \n+        assertFunction(\"STARTS_WITH('foo', 'foo')\", BOOLEAN, true);\n+        assertFunction(\"STARTS_WITH('foo', 'bar')\", BOOLEAN, false);\n+        assertFunction(\"STARTS_WITH('foo_bar_baz', 'foo')\", BOOLEAN, true);\n+        assertFunction(\"STARTS_WITH('foo_bar_baz', 'bar')\", BOOLEAN, false);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTc1NQ==", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r406999755", "bodyText": "Added several test cases", "author": "yuokada", "createdAt": "2020-04-11T01:27:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyOTcyMw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5ODQ2NQ==", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r406998465", "bodyText": "substring and string should be surrounded by `\nAlso, there's an extra \" at the end of the sentence.", "author": "martint", "createdAt": "2020-04-11T01:14:42Z", "path": "presto-docs/src/main/sphinx/functions/string.rst", "diffHunk": "@@ -141,6 +141,10 @@ String Functions\n     Returns the starting position of the first instance of ``substring`` in\n     ``string``. Positions start with ``1``. If not found, ``0`` is returned.\n \n+.. function:: starts_with(string, substring) -> boolean\n+\n+    Tests whether substring is a prefix of string\".", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5ODUzMA==", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r406998530", "bodyText": "else is unnecessary:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (source.length() < prefix.length()) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    else {\n          \n          \n            \n                        return source.compareTo(0, prefix.length(), prefix, 0, prefix.length()) == 0;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (source.length() < prefix.length()) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    return source.compareTo(0, prefix.length(), prefix, 0, prefix.length()) == 0;", "author": "martint", "createdAt": "2020-04-11T01:15:26Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/StringFunctions.java", "diffHunk": "@@ -899,4 +899,18 @@ public static Slice concat(@LiteralParameter(\"x\") Long x, @SqlType(\"char(x)\") Sl\n \n         return result;\n     }\n+\n+    @Description(\"Determine whether source starts with prefix or not\")\n+    @ScalarFunction(\"starts_with\")\n+    @LiteralParameters({\"x\", \"y\"})\n+    @SqlType(StandardTypes.BOOLEAN)\n+    public static boolean startsWith(@SqlType(\"varchar(x)\") Slice source, @SqlType(\"varchar(y)\") Slice prefix)\n+    {\n+        if (source.length() < prefix.length()) {\n+            return false;\n+        }\n+        else {\n+            return source.compareTo(0, prefix.length(), prefix, 0, prefix.length()) == 0;\n+        }", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5OTcwNQ==", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r406999705", "bodyText": "Fixed.", "author": "yuokada", "createdAt": "2020-04-11T01:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5ODUzMA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwODUyNw==", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r407008527", "bodyText": "nit: We can remove (\"starts_with\") because the method name startsWith  will be translated to starts_with function.", "author": "ebyhr", "createdAt": "2020-04-11T02:56:50Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/StringFunctions.java", "diffHunk": "@@ -899,4 +899,16 @@ public static Slice concat(@LiteralParameter(\"x\") Long x, @SqlType(\"char(x)\") Sl\n \n         return result;\n     }\n+\n+    @Description(\"Determine whether source starts with prefix or not\")\n+    @ScalarFunction(\"starts_with\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAxMDI5MQ==", "url": "https://github.com/trinodb/trino/pull/3392#discussion_r407010291", "bodyText": "Removed.", "author": "yuokada", "createdAt": "2020-04-11T03:17:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAwODUyNw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "91e0e2e13a72499b1a9b1fd004c5db24cde91e13", "url": "https://github.com/trinodb/trino/commit/91e0e2e13a72499b1a9b1fd004c5db24cde91e13", "message": "Add starts_with function", "committedDate": "2020-04-11T05:37:55Z", "type": "commit"}, {"oid": "91e0e2e13a72499b1a9b1fd004c5db24cde91e13", "url": "https://github.com/trinodb/trino/commit/91e0e2e13a72499b1a9b1fd004c5db24cde91e13", "message": "Add starts_with function", "committedDate": "2020-04-11T05:37:55Z", "type": "forcePushed"}]}