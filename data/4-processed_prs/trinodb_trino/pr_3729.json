{"pr_number": 3729, "pr_title": "Refactor RubixConfigurationInitializer into dynamic provider", "pr_createdAt": "2020-05-14T11:03:52Z", "pr_url": "https://github.com/trinodb/trino/pull/3729", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA1NjcxMQ==", "url": "https://github.com/trinodb/trino/pull/3729#discussion_r425056711", "bodyText": "Are we in control over ordering of DynamicConfigurationProviders. This check makes sense only if we know RubixConfigurationInitializer will run last. Right?", "author": "losipiuk", "createdAt": "2020-05-14T11:11:08Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "diffHunk": "@@ -69,17 +74,20 @@ public RubixConfigurationInitializer(RubixConfig config)\n     }\n \n     @Override\n-    public void initializeConfiguration(Configuration config)\n+    public void updateConfiguration(Configuration config, HdfsContext context, URI uri)\n     {\n+        checkState(getCacheKey(config) == null, \"Rubix does not support dynamic FileSystems\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA3OTMzMA==", "url": "https://github.com/trinodb/trino/pull/3729#discussion_r425079330", "bodyText": "Are we in control over ordering of DynamicConfigurationProviders. This check makes sense only if we know RubixConfigurationInitializer will run last. Right?\n\nYes. This is best effort check.\nI've removed this test for now since it might be confusing", "author": "sopel39", "createdAt": "2020-05-14T11:55:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA1NjcxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA1NzkzOQ==", "url": "https://github.com/trinodb/trino/pull/3729#discussion_r425057939", "bodyText": "private", "author": "losipiuk", "createdAt": "2020-05-14T11:13:36Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/rubix/RubixConfigurationInitializer.java", "diffHunk": "@@ -69,17 +74,20 @@ public RubixConfigurationInitializer(RubixConfig config)\n     }\n \n     @Override\n-    public void initializeConfiguration(Configuration config)\n+    public void updateConfiguration(Configuration config, HdfsContext context, URI uri)\n     {\n+        checkState(getCacheKey(config) == null, \"Rubix does not support dynamic FileSystems\");\n+\n         if (!cacheReady) {\n             setCacheDataEnabled(config, false);\n+            setCacheKey(config, \"rubix_disabled\");\n             return;\n         }\n \n         updateConfiguration(config);\n     }\n \n-    public Configuration updateConfiguration(Configuration config)\n+    public void updateConfiguration(Configuration config)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4NTkzMA==", "url": "https://github.com/trinodb/trino/pull/3729#discussion_r425085930", "bodyText": "This needs to stay package-private as it's accessed from RubixInitializer", "author": "sopel39", "createdAt": "2020-05-14T12:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA1NzkzOQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTExNTAxMw==", "url": "https://github.com/trinodb/trino/pull/3729#discussion_r425115013", "bodyText": "not needed any more", "author": "losipiuk", "createdAt": "2020-05-14T12:58:14Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/DynamicConfigurationProvider.java", "diffHunk": "@@ -24,6 +24,11 @@\n {\n     void updateConfiguration(Configuration configuration, HdfsContext context, URI uri);\n \n+    static String getCacheKey(Configuration configuration)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "52d4b6c16b30a26bf13574af8e44448bebe44b20", "url": "https://github.com/trinodb/trino/commit/52d4b6c16b30a26bf13574af8e44448bebe44b20", "message": "Refactor RubixConfigurationInitializer into dynamic provider\n\nPreviously there was a race condition between first\nFileSystem request and Rubix cache initialization.\nNow RubixConfigurationInitializer is dynamic provider so\nRubix cache should start being used once Rubix is initialized.", "committedDate": "2020-05-14T13:02:59Z", "type": "commit"}, {"oid": "52d4b6c16b30a26bf13574af8e44448bebe44b20", "url": "https://github.com/trinodb/trino/commit/52d4b6c16b30a26bf13574af8e44448bebe44b20", "message": "Refactor RubixConfigurationInitializer into dynamic provider\n\nPreviously there was a race condition between first\nFileSystem request and Rubix cache initialization.\nNow RubixConfigurationInitializer is dynamic provider so\nRubix cache should start being used once Rubix is initialized.", "committedDate": "2020-05-14T13:02:59Z", "type": "forcePushed"}]}