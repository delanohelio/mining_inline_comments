{"pr_number": 3246, "pr_title": "Record routines in query event", "pr_createdAt": "2020-03-26T16:03:09Z", "pr_url": "https://github.com/trinodb/trino/pull/3246", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNDUzNw==", "url": "https://github.com/trinodb/trino/pull/3246#discussion_r399104537", "bodyText": "Can you please also add a test for procedure?\nAlso we have two access checks: one for function and one for procedure. So we need to be able to recognize if the routine is a function or procedure.", "author": "kokosing", "createdAt": "2020-03-27T08:32:38Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestEventListener.java", "diffHunk": "@@ -276,6 +277,13 @@ public void testReferencedTables()\n         ColumnInfo column = table.getColumns().get(0);\n         assertEquals(column.getColumn(), \"linenumber\");\n         assertTrue(column.getMasks().isEmpty());\n+\n+        List<RoutineInfo> routines = event.getMetadata().getRoutines();\n+        assertEquals(tables.size(), 1);\n+\n+        RoutineInfo routine = routines.get(0);\n+        assertEquals(routine.getRoutine(), \"sum\");\n+        assertEquals(routine.getAuthorization(), \"user\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NjU0Ng==", "url": "https://github.com/trinodb/trino/pull/3246#discussion_r399566546", "bodyText": "Also we have two access checks: one for function and one for procedure. So we need to be able to recognize if the routine is a function or procedure.\n\nWhy does it matter?", "author": "martint", "createdAt": "2020-03-27T22:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNDUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgyMjk3Nw==", "url": "https://github.com/trinodb/trino/pull/3246#discussion_r399822977", "bodyText": "Can you please also add a test for procedure?\n\nUnfortunately, we don't have any infrastructure to test events for non-SQL tasks or register procedures with the testing query runners.", "author": "martint", "createdAt": "2020-03-29T16:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNDUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAxMjA3OA==", "url": "https://github.com/trinodb/trino/pull/3246#discussion_r400012078", "bodyText": "Why does it matter?\n\nWe have two access control checks. Same for tables and views. However we have single table info entity to handle tables and views. So let's leave it as is for now.", "author": "kokosing", "createdAt": "2020-03-30T08:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNDUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI1NDIxNg==", "url": "https://github.com/trinodb/trino/pull/3246#discussion_r400254216", "bodyText": "Right, but to clarify, the contents in the event are not about the mechanics \"control checks\", but about the shape of the query. I.e., which tables/views and routines are accessed by the query using what user's identity -- whether that's performed by one or more concrete access check methods is orthogonal and an implementation detail of how the checks are performed. If those mechanics change in the future, the information in the event will remain the same.", "author": "martint", "createdAt": "2020-03-30T14:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNDUzNw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "a56d3f1a655d20fe95d26cff67c18d8cbb95feba", "url": "https://github.com/trinodb/trino/commit/a56d3f1a655d20fe95d26cff67c18d8cbb95feba", "message": "Record referenced routines in query event", "committedDate": "2020-03-29T16:46:51Z", "type": "commit"}, {"oid": "a56d3f1a655d20fe95d26cff67c18d8cbb95feba", "url": "https://github.com/trinodb/trino/commit/a56d3f1a655d20fe95d26cff67c18d8cbb95feba", "message": "Record referenced routines in query event", "committedDate": "2020-03-29T16:46:51Z", "type": "forcePushed"}]}