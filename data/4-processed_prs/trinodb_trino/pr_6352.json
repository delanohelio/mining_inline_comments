{"pr_number": 6352, "pr_title": "Support setting TIME TZ and TIMESTAMP TZ in prepared statement", "pr_createdAt": "2020-12-15T21:03:35Z", "pr_url": "https://github.com/trinodb/trino/pull/6352", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4NTMzMg==", "url": "https://github.com/trinodb/trino/pull/6352#discussion_r543685332", "bodyText": "#6299", "author": "findepi", "createdAt": "2020-12-15T21:05:02Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -410,6 +410,26 @@ private String toTimestampLiteral(Object value)\n         throw invalidConversion(value, \"timestamp\");\n     }\n \n+    private void setAsTimestampWithTimeZone(int parameterIndex, Object value)\n+            throws SQLException\n+    {\n+        requireNonNull(value, \"value is null\");\n+\n+        String literal = toTimestampWithTimeZoneLiteral(value);\n+        setParameter(parameterIndex, formatLiteral(\"TIMESTAMP\", literal));\n+    }\n+\n+    private String toTimestampWithTimeZoneLiteral(Object value)\n+            throws SQLException\n+    {\n+        // TODO (https://github.com/prestosql/presto/issues/6299) support ZonedDateTime", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4NTUxMg==", "url": "https://github.com/trinodb/trino/pull/6352#discussion_r543685512", "bodyText": "#6351", "author": "findepi", "createdAt": "2020-12-15T21:05:20Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -801,6 +806,56 @@ public void testConvertTime()\n                 .roundTripsAs(Types.TIME, timeWithMillisecond);\n     }\n \n+    @Test\n+    public void testConvertTimeWithTimeZone()\n+            throws SQLException\n+    {\n+        // zero fraction\n+        assertBind((ps, i) -> ps.setObject(i, OffsetTime.of(12, 34, 56, 0, UTC), Types.TIME_WITH_TIMEZONE))\n+                .resultsIn(\"time(0) with time zone\", \"TIME '12:34:56+00:00'\")\n+                .roundTripsAs(Types.TIME_WITH_TIMEZONE, toSqlTime(LocalTime.of(5, 34, 56)));\n+\n+        // setObject with implicit type\n+        assertBind((ps, i) -> ps.setObject(i, OffsetTime.of(12, 34, 56, 0, UTC)))\n+                .resultsIn(\"time(0) with time zone\", \"TIME '12:34:56+00:00'\");\n+\n+        // setObject with JDBCType\n+        assertBind((ps, i) -> ps.setObject(i, OffsetTime.of(12, 34, 56, 0, UTC), JDBCType.TIME_WITH_TIMEZONE))\n+                .resultsIn(\"time(0) with time zone\", \"TIME '12:34:56+00:00'\");\n+\n+        // millisecond precision\n+        assertBind((ps, i) -> ps.setObject(i, OffsetTime.of(12, 34, 56, 555_000_000, UTC), Types.TIME_WITH_TIMEZONE))\n+                .resultsIn(\"time(3) with time zone\", \"TIME '12:34:56.555+00:00'\")\n+                .roundTripsAs(Types.TIME_WITH_TIMEZONE, toSqlTime(LocalTime.of(5, 34, 56, 555_000_000)));\n+\n+        // microsecond precision\n+        assertBind((ps, i) -> ps.setObject(i, OffsetTime.of(12, 34, 56, 555_555_000, UTC), Types.TIME_WITH_TIMEZONE))\n+                .resultsIn(\"time(6) with time zone\", \"TIME '12:34:56.555555+00:00'\")\n+                .roundTripsAs(Types.TIME_WITH_TIMEZONE, toSqlTime(LocalTime.of(5, 34, 56, 556_000_000)));\n+\n+        // nanosecond precision\n+        assertBind((ps, i) -> ps.setObject(i, OffsetTime.of(12, 34, 56, 555_555_555, UTC), Types.TIME_WITH_TIMEZONE))\n+                .resultsIn(\"time(9) with time zone\", \"TIME '12:34:56.555555555+00:00'\")\n+                .roundTripsAs(Types.TIME_WITH_TIMEZONE, toSqlTime(LocalTime.of(5, 34, 56, 556_000_000)));\n+\n+        // positive offset\n+        assertBind((ps, i) -> ps.setObject(i, OffsetTime.of(12, 34, 56, 123_456_789, ZoneOffset.ofHoursMinutes(7, 35)), Types.TIME_WITH_TIMEZONE))\n+                .resultsIn(\"time(9) with time zone\", \"TIME '12:34:56.123456789+07:35'\");\n+        // TODO (https://github.com/prestosql/presto/issues/6351) the result is not as expected here:", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4NjA5MQ==", "url": "https://github.com/trinodb/trino/pull/6352#discussion_r543686091", "bodyText": "#6299", "author": "findepi", "createdAt": "2020-12-15T21:06:22Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -544,6 +596,10 @@ else if (x instanceof LocalDate) {\n         else if (x instanceof Time) {\n             setTime(parameterIndex, (Time) x);\n         }\n+        // TODO (https://github.com/prestosql/presto/issues/6299) LocalTime -> setAsTime", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "3fa3af393ab585769ddb04d248ce06548fd5fe2e", "url": "https://github.com/trinodb/trino/commit/3fa3af393ab585769ddb04d248ce06548fd5fe2e", "message": "Add TimeWithTimeZoneType.isShort", "committedDate": "2020-12-15T21:15:35Z", "type": "commit"}, {"oid": "bdbb3928bb6138428560cd2562062ce336c06240", "url": "https://github.com/trinodb/trino/commit/bdbb3928bb6138428560cd2562062ce336c06240", "message": "Remove redundant formatter option", "committedDate": "2020-12-15T21:15:36Z", "type": "commit"}, {"oid": "6b7e3f5ef8a641694a71fe8e81fb1bdda4cfe711", "url": "https://github.com/trinodb/trino/commit/6b7e3f5ef8a641694a71fe8e81fb1bdda4cfe711", "message": "Swap actual/expected in assertion", "committedDate": "2020-12-15T21:15:37Z", "type": "commit"}, {"oid": "8ba193eaba71572f1657251c01f8bc23045a35b5", "url": "https://github.com/trinodb/trino/commit/8ba193eaba71572f1657251c01f8bc23045a35b5", "message": "Support setting TIME TZ & OffsetTime in prepared statement", "committedDate": "2020-12-15T21:15:38Z", "type": "commit"}, {"oid": "582480a99f9f893db093dc18dfb6c15df535b0f3", "url": "https://github.com/trinodb/trino/commit/582480a99f9f893db093dc18dfb6c15df535b0f3", "message": "Support setting TIMESTAMP TZ in prepared statement", "committedDate": "2020-12-15T21:15:39Z", "type": "commit"}, {"oid": "a94e011b44b706cbd55caffb4bce1fff875cc83a", "url": "https://github.com/trinodb/trino/commit/a94e011b44b706cbd55caffb4bce1fff875cc83a", "message": "Remove redundant else", "committedDate": "2020-12-15T21:15:40Z", "type": "commit"}, {"oid": "a94e011b44b706cbd55caffb4bce1fff875cc83a", "url": "https://github.com/trinodb/trino/commit/a94e011b44b706cbd55caffb4bce1fff875cc83a", "message": "Remove redundant else", "committedDate": "2020-12-15T21:15:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI2NjM0Nw==", "url": "https://github.com/trinodb/trino/pull/6352#discussion_r544266347", "bodyText": "Can you just use OFFSET_TIME_FORMATTER.parse() for that?", "author": "losipiuk", "createdAt": "2020-12-16T12:40:10Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -343,6 +350,28 @@ private String toTimeLiteral(Object value)\n         throw invalidConversion(value, \"time\");\n     }\n \n+    private void setAsTimeWithTimeZone(int parameterIndex, Object value)\n+            throws SQLException\n+    {\n+        requireNonNull(value, \"value is null\");\n+\n+        String literal = toTimeWithTimeZoneLiteral(value);\n+        setParameter(parameterIndex, formatLiteral(\"TIME\", literal));\n+    }\n+\n+    private String toTimeWithTimeZoneLiteral(Object value)\n+            throws SQLException\n+    {\n+        if (value instanceof OffsetTime) {\n+            return OFFSET_TIME_FORMATTER.format((OffsetTime) value);\n+        }\n+        if (value instanceof String) {\n+            // TODO validate proper format", "originalCommit": "8ba193eaba71572f1657251c01f8bc23045a35b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzNTY0MA==", "url": "https://github.com/trinodb/trino/pull/6352#discussion_r544435640", "bodyText": "Conceptually yes, but it does not support picosecond precision.", "author": "findepi", "createdAt": "2020-12-16T16:22:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI2NjM0Nw=="}], "type": "inlineReview"}]}