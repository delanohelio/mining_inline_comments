{"pr_number": 3099, "pr_title": "Add support for SHOW CREATE SCHEMA.", "pr_createdAt": "2020-03-14T23:32:09Z", "pr_url": "https://github.com/trinodb/trino/pull/3099", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYzMDk1NA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r392630954", "bodyText": "This will need discussion. If only an owner or admin can do this, it's kinda pointless. On the other hand information can be leaked this way: Where the schema is located or that the assigned USER or ROLE exists.\nMaybe limiting this to Owner/Admin is fine.", "author": "lhofhansl", "createdAt": "2020-03-15T00:40:25Z", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -486,6 +495,33 @@ protected Node visitShowCreate(ShowCreate node, Void context)\n                 return singleValueQuery(\"Create Table\", formatSql(createTable).trim());\n             }\n \n+            if (node.getType() == SCHEMA) {\n+                CatalogSchemaName schemaName = createCatalogSchemaName(session, node, Optional.of(node.getName()));\n+                Optional<ConnectorSchemaDefinition> schema = metadata.getSchema(session, schemaName);\n+\n+                // TODO: at present everyone can see schema metadata", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYzMTAzMw==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r392631033", "bodyText": "This would also need discussion. I'm using it only when retrieving schema info, not when creating a schema (to avoid changing many dozens of interfaces/classes)", "author": "lhofhansl", "createdAt": "2020-03-15T00:41:59Z", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorSchemaDefinition.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.connector;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.prestosql.spi.security.PrestoPrincipal;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class ConnectorSchemaDefinition", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYzMTA1Mg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r392631052", "bodyText": "See the comment... With this we can avoid adding a new method to each and every connector.", "author": "lhofhansl", "createdAt": "2020-03-15T00:42:40Z", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -521,6 +522,15 @@ default void dropView(ConnectorSession session, SchemaTableName viewName)\n         return Optional.empty();\n     }\n \n+    /**\n+     * Gets the schema definition for the specified schema.\n+     */\n+    default Optional<ConnectorSchemaDefinition> getSchema(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        // Only the Hive Connector supports this. This default simplifies all other connectors.\n+        return Optional.of(new ConnectorSchemaDefinition(Collections.emptyMap(), Optional.empty()));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwODQ0NQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399108445", "bodyText": "Let's iterate over io.prestosql.plugin.hive.HiveSchemaProperties#SCHEMA_PROPERTIES instead listing all properties here.", "author": "kokosing", "createdAt": "2020-03-27T08:40:16Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1732,6 +1734,26 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Optional<ConnectorSchemaDefinition> getSchema(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            return Optional.empty();\n+        }\n+        return metastore.getDatabase(schemaName.getSchemaName())\n+                .flatMap(db -> {\n+                    ImmutableSortedMap.Builder<String, Object> properties = ImmutableSortedMap.naturalOrder();\n+\n+                    // this is the only current properties for Hive\n+                    Optional<String> dbLocation = db.getLocation();\n+                    dbLocation.ifPresent(location -> properties.put(HiveSchemaProperties.LOCATION_PROPERTY, location));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyMzQwOQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399423409", "bodyText": "Not sure how I would that. Each property has a different source. So while I could loop, each value (like location here) has a different way to get the value, unless we generalize that and match it up with the Hive properties.", "author": "lhofhansl", "createdAt": "2020-03-27T17:22:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwODQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExMzY4Mg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399113682", "bodyText": "I would prefer to have two methods. One to get schema properties and one to schema owner. You may want to use io.prestosql.spi.connector.ConnectorMetadata#schemaExists to verify if schema exists.", "author": "kokosing", "createdAt": "2020-03-27T08:50:14Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1732,6 +1734,26 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Optional<ConnectorSchemaDefinition> getSchema(ConnectorSession session, CatalogSchemaName schemaName)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyMDI3MQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399420271", "bodyText": "I was trying to avoid polluting the interface even more, and the owner is kinda part of the definition of a schema. I don't feel strongly, though.", "author": "lhofhansl", "createdAt": "2020-03-27T17:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExMzY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwMjM2Ng==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399502366", "bodyText": "It needs to be filterSchema to filter out the information_schema and the \"sys\" schema. Schema existence is checked higher in the call stack and in addition the Database is an Optional.", "author": "lhofhansl", "createdAt": "2020-03-27T19:46:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExMzY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNjgwNg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399116806", "bodyText": "How does SHOW CREATE TABLE work when user does not specify any property, are they still displayed?\nI am concern about displaying locations. It looks like external_location is not displayed when it is not set to some custom value.", "author": "kokosing", "createdAt": "2020-03-27T08:56:11Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -713,6 +713,55 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testShowCreateSchema()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_show_create_schema\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE authorized_users\");\n+        assertUpdate(admin, \"GRANT authorized_users TO user\");\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_show_create_schema\");\n+        String createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION USER hive\\n\" +\n+                \"WITH \\\\(\\n\" +\n+                \"   location = '.*test_show_create_schema'\\n\" +", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxOTMxMQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399419311", "bodyText": "Hmm... I wouldn't know how to distinguish this. The location is set in the metadata, either a default or a given value. I'll dig into this.", "author": "lhofhansl", "createdAt": "2020-03-27T17:15:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNjgwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwMTE2MQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399501161", "bodyText": "Schema is handled differently. The Hivemetastore sets the default, so it's always set. Without some bigger effort I cannot hide it if it is the Hive default.\nTable location, on the other hand, is shown when the table's type is \"external table\", otherwise it isn't even set.", "author": "lhofhansl", "createdAt": "2020-03-27T19:44:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNjgwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2MjY3Mg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399562672", "bodyText": "Found a way by using the metastore's get_config_value. I also implemented that for the FileHiveMetastore by supporting the warehouse config there.", "author": "lhofhansl", "createdAt": "2020-03-27T22:15:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNjgwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3MzUwNQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399573505", "bodyText": "Now of course I cannot test showing the location anymore. Adding this:\n        // now test with a custom schema location\n        File tempDir = createTempDir();\n        assertUpdate(admin, format(\"CREATE SCHEMA test_schema_with_location WITH (location = '%s')\", tempDir));\n\n        createSchemaSql = format(\"\" +\n                \"CREATE SCHEMA %s.test_schema_with_location\\n\" +\n                \"AUTHORIZATION USER hive\\n\" +\n                \"WITH \\\\(\\n\" +\n                \"   location = '%s'\\n\" +\n                \"\\\\)\",\n                getSession().getCatalog().get(),\n                tempDir);\n\n        actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_schema_with_location\").getOnlyColumnAsSet()).toString();\n        assertEquals(actualResult, createSchemaSql);\n        assertUpdate(user, \"DROP SCHEMA test_schema_with_location\");\n\nDoes not work, since the metastore used for tests does not allow setting schema,", "author": "lhofhansl", "createdAt": "2020-03-27T22:54:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNjgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNzQ4Ng==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399117486", "bodyText": "Use assertEquals", "author": "kokosing", "createdAt": "2020-03-27T08:57:36Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -713,6 +713,55 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testShowCreateSchema()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_show_create_schema\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE authorized_users\");\n+        assertUpdate(admin, \"GRANT authorized_users TO user\");\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_show_create_schema\");\n+        String createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION USER hive\\n\" +\n+                \"WITH \\\\(\\n\" +\n+                \"   location = '.*test_show_create_schema'\\n\" +\n+                \"\\\\)\",\n+                getSession().getCatalog().get());\n+\n+        String actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertTrue(actualResult.matches(createSchemaSql), \"Expected [\" + createSchemaSql + \"] but found [\" + actualResult + \"]\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNzI3MQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399427271", "bodyText": "This is doing regex pattern matching, so assertEquals won't work.", "author": "lhofhansl", "createdAt": "2020-03-27T17:28:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNzQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNzU5Mg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399117592", "bodyText": "assertEquals", "author": "kokosing", "createdAt": "2020-03-27T08:57:48Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -713,6 +713,55 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testShowCreateSchema()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_show_create_schema\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE authorized_users\");\n+        assertUpdate(admin, \"GRANT authorized_users TO user\");\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_show_create_schema\");\n+        String createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION USER hive\\n\" +\n+                \"WITH \\\\(\\n\" +\n+                \"   location = '.*test_show_create_schema'\\n\" +\n+                \"\\\\)\",\n+                getSession().getCatalog().get());\n+\n+        String actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertTrue(actualResult.matches(createSchemaSql), \"Expected [\" + createSchemaSql + \"] but found [\" + actualResult + \"]\");\n+\n+        assertQueryFails(user, \"SHOW CREATE SCHEMA test_show_create_schema\", \"Access Denied: Cannot show create schema for test_show_create_schema\");\n+\n+        assertUpdate(admin, \"ALTER SCHEMA test_show_create_schema SET AUTHORIZATION ROLE authorized_users\");\n+\n+        createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION ROLE authorized_users\\n\" +\n+                \"WITH \\\\(\\n\" +\n+                \"   location = '.*test_show_create_schema'\\n\" +\n+                \"\\\\)\",\n+                getSession().getCatalog().get());\n+\n+        actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertTrue(actualResult.matches(createSchemaSql), \"Expected [\" + createSchemaSql + \"] but found [\" + actualResult + \"]\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyOTI1NQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399429255", "bodyText": "Same here...", "author": "lhofhansl", "createdAt": "2020-03-27T17:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNzU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyODk2OQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404628969", "bodyText": "Please introduce dedicated assertMatch to do regex based assertions.", "author": "kokosing", "createdAt": "2020-04-07T08:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNzU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzNjQ1Mw==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r405036453", "bodyText": "Please see https://github.com/prestosql/presto/pull/3323/files#diff-cdc872cbe68e8a7497f8d7f189d58379R159, it looks much better", "author": "kokosing", "createdAt": "2020-04-07T18:50:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNzU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTExNzgzMg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r399117832", "bodyText": "renane authorized_users  to test_show_create_schema_role", "author": "kokosing", "createdAt": "2020-03-27T08:58:17Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -713,6 +713,55 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testShowCreateSchema()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_show_create_schema\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE authorized_users\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyMzI2Nw==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404623267", "bodyText": "ImmutableMap.of()", "author": "kokosing", "createdAt": "2020-04-07T08:18:09Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1732,6 +1734,36 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            return Collections.emptyMap();\n+        }\n+        String warehouse = metastore.getConfigValue(WAREHOUSE.getVarname()).orElseGet(() -> WAREHOUSE.getDefaultVal().toString());\n+        Optional<Database> db = metastore.getDatabase(schemaName.getSchemaName());\n+        if (db.isPresent()) {\n+            Optional<String> location = db.get().getLocation();\n+            // this is currently the only property for Hive\n+            // (only shown when it's not the default location)\n+            if (location.isPresent() && !location.get().startsWith(warehouse)) {\n+                return Collections.singletonMap(HiveSchemaProperties.LOCATION_PROPERTY, location.get());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNDQxNQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404624415", "bodyText": "I think this condition is not enough. Is it possible that one could create external table under warehouse location? Like pointing to data of another managed table? I do think there is a check for that in Hive and this allowed. We need to verify full path, not only prefix.\nPlease add test for that.", "author": "kokosing", "createdAt": "2020-04-07T08:19:57Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1732,6 +1734,36 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            return Collections.emptyMap();\n+        }\n+        String warehouse = metastore.getConfigValue(WAREHOUSE.getVarname()).orElseGet(() -> WAREHOUSE.getDefaultVal().toString());\n+        Optional<Database> db = metastore.getDatabase(schemaName.getSchemaName());\n+        if (db.isPresent()) {\n+            Optional<String> location = db.get().getLocation();\n+            // this is currently the only property for Hive\n+            // (only shown when it's not the default location)\n+            if (location.isPresent() && !location.get().startsWith(warehouse)) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzNTE3OQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r405035179", "bodyText": "The default is <warehouse.dir>/<schemaname>.db, but any path is allowed (without ending in .db). So I think we should verify <warehouse.dir>/<schemaname> exactly.\nBut people can vary the \"extension\" too. The file based hive metastore has no extensions.\nSo if you name your location <warehouse.dir>/<schemaname>.mydb should I show the location or not?\nAlso looks like there are no further checks. I can create a schema in /a/b/c and also in /a/b, then create a table t in /a/b. Now we have a schema c and table t in the same directory.\n@kokosing", "author": "lhofhansl", "createdAt": "2020-04-07T18:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNDQxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3NDkwMA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r405074900", "bodyText": "BTW. Hive always shows the location whether it's default or not.\nPerhaps it's better to follow that?\nhive> create database bla;\nOK\nTime taken: 0.884 seconds\nhive> show create schema bla;\nOK\nCREATE DATABASE `bla`\nLOCATION\n  'hdfs://localhost:9000/user/hive/warehouse/bla.db'\nTime taken: 0.048 seconds, Fetched: 3 row(s)", "author": "lhofhansl", "createdAt": "2020-04-07T19:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNDQxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNDg4OA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404624888", "bodyText": "ImmtableMap.of()\nThis is an unwritten convention.", "author": "kokosing", "createdAt": "2020-04-07T08:20:43Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1732,6 +1734,36 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            return Collections.emptyMap();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNTA5Mw==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404625093", "bodyText": "ImmtableMap.of()", "author": "kokosing", "createdAt": "2020-04-07T08:20:59Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1732,6 +1734,36 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            return Collections.emptyMap();\n+        }\n+        String warehouse = metastore.getConfigValue(WAREHOUSE.getVarname()).orElseGet(() -> WAREHOUSE.getDefaultVal().toString());\n+        Optional<Database> db = metastore.getDatabase(schemaName.getSchemaName());\n+        if (db.isPresent()) {\n+            Optional<String> location = db.get().getLocation();\n+            // this is currently the only property for Hive\n+            // (only shown when it's not the default location)\n+            if (location.isPresent() && !location.get().startsWith(warehouse)) {\n+                return Collections.singletonMap(HiveSchemaProperties.LOCATION_PROPERTY, location.get());\n+            }\n+        }\n+\n+        return Collections.emptyMap();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNTgzMg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404625832", "bodyText": "This is not responsibility of connector to filter schemas. It should be handled somewhere in ShowQueriesRewrite\nAlso if user is allowed to do show create schema then we don't need to filter schema here.", "author": "kokosing", "createdAt": "2020-04-07T08:22:11Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1732,6 +1734,36 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            return Collections.emptyMap();\n+        }\n+        String warehouse = metastore.getConfigValue(WAREHOUSE.getVarname()).orElseGet(() -> WAREHOUSE.getDefaultVal().toString());\n+        Optional<Database> db = metastore.getDatabase(schemaName.getSchemaName());\n+        if (db.isPresent()) {\n+            Optional<String> location = db.get().getLocation();\n+            // this is currently the only property for Hive\n+            // (only shown when it's not the default location)\n+            if (location.isPresent() && !location.get().startsWith(warehouse)) {\n+                return Collections.singletonMap(HiveSchemaProperties.LOCATION_PROPERTY, location.get());\n+            }\n+        }\n+\n+        return Collections.emptyMap();\n+    }\n+\n+    @Override\n+    public Optional<PrestoPrincipal> getSchemaOwner(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5Mzk4MA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404993980", "bodyText": "This is for the information_schema and for Hive's sys schema.\n(see listSchemas, listTables methods, etc.)", "author": "lhofhansl", "createdAt": "2020-04-07T17:40:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNTgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxNTMxOA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r405015318", "bodyText": "That is to say: information_schema and sys have no owner as such, and they also do not have any properties.", "author": "lhofhansl", "createdAt": "2020-04-07T18:15:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNTgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNjA4Mg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406036082", "bodyText": "Please do not use filterSchema but just make sure that requested schema is one of these. And if it is the case I think we should throw an exception.\n@findepi I think you are more familiar with sys schema. Are ok with my suggestion?", "author": "kokosing", "createdAt": "2020-04-09T08:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNTgzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxMjQwOA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406612408", "bodyText": "See #3099 (comment)\ngetSchemaOwner should look similar to getSchemaProperties\n(btw, i wasn't following -- did you consider combining them into single getSchemaMetadata operation?)", "author": "findepi", "createdAt": "2020-04-10T05:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNTgzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyNzg2MA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404627860", "bodyText": "You should use io.prestosql.testing.AbstractTestQueryFramework#executeExclusively", "author": "kokosing", "createdAt": "2020-04-07T08:25:19Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -716,6 +756,66 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testShowCreateSchema()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_show_create_schema\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE test_show_create_schema_role\");\n+        assertUpdate(admin, \"GRANT test_show_create_schema_role TO user\");\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_show_create_schema\");\n+\n+        String createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION USER hive\",\n+                getSession().getCatalog().get());\n+\n+        String actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertEquals(actualResult, createSchemaSql);\n+\n+        assertQueryFails(user, \"SHOW CREATE SCHEMA test_show_create_schema\", \"Access Denied: Cannot show create schema for test_show_create_schema\");\n+\n+        assertUpdate(admin, \"ALTER SCHEMA test_show_create_schema SET AUTHORIZATION ROLE test_show_create_schema_role\");\n+\n+        createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION ROLE test_show_create_schema_role\",\n+                getSession().getCatalog().get());\n+\n+        actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertEquals(actualResult, createSchemaSql);\n+\n+        // test that LOCATION is shown when it does not match the metastore's default\n+        testingMetastore.overrideConfig(WAREHOUSE.getVarname(), \"x\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYyODA0NA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404628044", "bodyText": "provide reset() method that would reset all the custom configuration", "author": "kokosing", "createdAt": "2020-04-07T08:25:35Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -716,6 +756,66 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testShowCreateSchema()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+\n+        Session user = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setSchema(\"test_show_create_schema\")\n+                .setIdentity(Identity.forUser(\"user\").withPrincipal(getSession().getIdentity().getPrincipal()).build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE ROLE test_show_create_schema_role\");\n+        assertUpdate(admin, \"GRANT test_show_create_schema_role TO user\");\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_show_create_schema\");\n+\n+        String createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION USER hive\",\n+                getSession().getCatalog().get());\n+\n+        String actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertEquals(actualResult, createSchemaSql);\n+\n+        assertQueryFails(user, \"SHOW CREATE SCHEMA test_show_create_schema\", \"Access Denied: Cannot show create schema for test_show_create_schema\");\n+\n+        assertUpdate(admin, \"ALTER SCHEMA test_show_create_schema SET AUTHORIZATION ROLE test_show_create_schema_role\");\n+\n+        createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION ROLE test_show_create_schema_role\",\n+                getSession().getCatalog().get());\n+\n+        actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertEquals(actualResult, createSchemaSql);\n+\n+        // test that LOCATION is shown when it does not match the metastore's default\n+        testingMetastore.overrideConfig(WAREHOUSE.getVarname(), \"x\");\n+\n+        createSchemaSql = format(\"\" +\n+                \"CREATE SCHEMA %s.test_show_create_schema\\n\" +\n+                \"AUTHORIZATION ROLE test_show_create_schema_role\\n\" +\n+                \"WITH \\\\(\\n\" +\n+                \"   location = '.*test_show_create_schema'\\n\" +\n+                \"\\\\)\",\n+                getSession().getCatalog().get());\n+\n+        actualResult = getOnlyElement(computeActual(admin, \"SHOW CREATE SCHEMA test_show_create_schema\").getOnlyColumnAsSet()).toString();\n+        assertTrue(actualResult.matches(createSchemaSql), \"Expected [\" + createSchemaSql + \"] but found [\" + actualResult + \"]\");\n+\n+        testingMetastore.overrideConfig(WAREHOUSE.getVarname(), null);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMDU4OQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404630589", "bodyText": "I don't like this optionality. When you ask for properties of not existing object this method should fail. Returning empty map suggests that object exists but has no properties.\nSame to the method below.", "author": "kokosing", "createdAt": "2020-04-07T08:29:32Z", "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -960,6 +961,34 @@ public void finishDelete(Session session, TableHandle tableHandle, Collection<Sl\n         return ImmutableMap.copyOf(views);\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(Session session, CatalogSchemaName schemaName)\n+    {\n+        if (schemaExists(session, schemaName)) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMDc2NQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r405010765", "bodyText": "Hmm... I was following other examples such as getView and getTable. But these are different.", "author": "lhofhansl", "createdAt": "2020-04-07T18:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMDU4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzMDExNA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r405030114", "bodyText": "This is more like io.prestosql.metadata.MetadataManager#getTableProperties", "author": "kokosing", "createdAt": "2020-04-07T18:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMDU4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwMDkzNg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r405100936", "bodyText": "Added an error check to both methods.", "author": "lhofhansl", "createdAt": "2020-04-07T20:44:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMDU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMDcyMA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404630720", "bodyText": "ImmutableMap", "author": "kokosing", "createdAt": "2020-04-07T08:29:42Z", "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -960,6 +961,34 @@ public void finishDelete(Session session, TableHandle tableHandle, Collection<Sl\n         return ImmutableMap.copyOf(views);\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(Session session, CatalogSchemaName schemaName)\n+    {\n+        if (schemaExists(session, schemaName)) {\n+            CatalogMetadata catalogMetadata = getCatalogMetadata(session, new CatalogName(schemaName.getCatalogName()));\n+            CatalogName catalogName = catalogMetadata.getCatalogName();\n+            ConnectorMetadata metadata = catalogMetadata.getMetadataFor(catalogName);\n+\n+            ConnectorSession connectorSession = session.toConnectorSession(catalogName);\n+            return metadata.getSchemaProperties(connectorSession, schemaName);\n+        }\n+        return Collections.emptyMap();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMTIxMQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r404631211", "bodyText": "invert condition. Then else block is not needed.", "author": "kokosing", "createdAt": "2020-04-07T08:30:28Z", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -486,7 +494,31 @@ protected Node visitShowCreate(ShowCreate node, Void context)\n                 return singleValueQuery(\"Create Table\", formatSql(createTable).trim());\n             }\n \n-            throw new UnsupportedOperationException(\"SHOW CREATE only supported for tables and views\");\n+            if (node.getType() == SCHEMA) {\n+                CatalogSchemaName schemaName = createCatalogSchemaName(session, node, Optional.of(node.getName()));\n+                accessControl.checkCanShowCreateSchema(session.toSecurityContext(), schemaName);\n+\n+                if (metadata.schemaExists(session, schemaName)) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNDc5Nw==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406034797", "bodyText": "I would you to use io.prestosql.plugin.hive.HiveSchemaProperties#SCHEMA_PROPERTIES. So whenever someone adds new schema property they don't need to do any changes here.", "author": "kokosing", "createdAt": "2020-04-09T08:18:01Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1738,6 +1740,41 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            // \"information_schema\" and \"sys\" have no properties\n+            return ImmutableMap.of();\n+        }\n+        Optional<Database> db = metastore.getDatabase(schemaName.getSchemaName());\n+        if (db.isPresent()) {\n+            Optional<String> location = db.get().getLocation();\n+            // this is currently the only property for Hive", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1ODAxNw==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406358017", "bodyText": "Not sure what you mean. I would still need to add custom code here for each property to retrieved. For example the location is read from the Database object. Other properties have other ways to be retrieved.\nCan you explain what you mean? Apologies if I'm missing something obvious.\nDo you mean add a method to HiveSchemaProperties that is being passed a Database object? Or more like HiveTableProperties?", "author": "lhofhansl", "createdAt": "2020-04-09T17:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNDc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MjgwOA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406472808", "bodyText": "I added method to HiveSchemaProperties. Lemme know what you think.", "author": "lhofhansl", "createdAt": "2020-04-09T20:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNDc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNTc4Nw==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406035787", "bodyText": "Please do not use filterSchema but just make sure that requested schema is one of these. And if it is the case I think we should throw an exception.\n@findepi I think you are more familiar with sys schema. Are ok with my suggestion?", "author": "kokosing", "createdAt": "2020-04-09T08:19:51Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1738,6 +1740,41 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        if (!filterSchema(schemaName.getSchemaName())) {\n+            // \"information_schema\" and \"sys\" have no properties", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MzE4OA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406353188", "bodyText": "That's precisely what HiveMetadata.filterSchema does, though. It's a static method that checks for these schemas (I suppose it's badly named).\nI can throw an exception instead, but I'd just do the same check with extra code.", "author": "lhofhansl", "createdAt": "2020-04-09T17:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNTc4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3MzA5OA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406373098", "bodyText": "Should I add a new error code to HiveErrorCode?", "author": "lhofhansl", "createdAt": "2020-04-09T17:48:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNTc4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MjU2MQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406472561", "bodyText": "Have look. Throwing NOT_SUPPORTED exception now.", "author": "lhofhansl", "createdAt": "2020-04-09T20:56:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNTc4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxMjE5NA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406612194", "bodyText": "Can engine call getSchemaProperties without calling schemaExists first? (Does engine guarantee that?)\n\nyes => sys needs to be filtered out; and we should return NOT_FOUND (because we pretend the \"sys\" schema does not exist, as indicated by false from schemaExists)\nno => checkState would be more appropriate: checkState(filterSchema(..), \"Schema is not accessible: %s\", schemaName)", "author": "findepi", "createdAt": "2020-04-10T05:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNTc4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyNTI2Mg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406625262", "bodyText": "This is indeed only called from ShowQueriesRewrite,Visitor.visitShowCreate(...), which does check schemaExists first and throws SCHEMA_NOT_FOUND from there. (Although it's not guaranteed that nobody will add such a call in the future.)\nAdded checkState bit...", "author": "lhofhansl", "createdAt": "2020-04-10T06:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNTc4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNjIwNg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406036206", "bodyText": "Do you still need it?", "author": "kokosing", "createdAt": "2020-04-09T08:20:35Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/file/FileHiveMetastore.java", "diffHunk": "@@ -224,6 +225,15 @@ public synchronized void setDatabaseOwner(HiveIdentity identity, String database\n         writeSchemaFile(\"database\", databaseMetadataDirectory, databaseCodec, new DatabaseMetadata(newDatabase), true);\n     }\n \n+    @Override\n+    public Optional<String> getConfigValue(String name)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MDgxNw==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406350817", "bodyText": "I thought it might not hurt to have it . Happy to remove it.", "author": "lhofhansl", "createdAt": "2020-04-09T17:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNjIwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1OTQxOQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r407659419", "bodyText": "I would be happy too.\nWe typically do not leave things that are not used. Future is unpredictable, so let's avoid of being too smart.", "author": "kokosing", "createdAt": "2020-04-13T19:08:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNjIwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM2NDA4NA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r408364084", "bodyText": "I'll remove it.", "author": "lhofhansl", "createdAt": "2020-04-14T18:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNjIwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNzQ1Mw==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406037453", "bodyText": "the other day I left a comment to use assertj, it has some native support for regex matching. If you apply that comment then I would expect this code become very fluent and so we might have no longer a need for this method (we could just inline it).\nassertMatch -> assertMatches", "author": "kokosing", "createdAt": "2020-04-09T08:22:42Z", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -115,6 +116,11 @@ protected Object computeScalar(@Language(\"SQL\") String sql)\n         return computeActual(sql).getOnlyValue();\n     }\n \n+    protected void assertMatch(String actual, String regex)\n+    {\n+        assertTrue(actual.matches(regex), \"[\" + actual + \"] does not match [\" + regex + \"]\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzNzg2MQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406037861", "bodyText": "static. It does not belong to AbstractTestQueryFramework, but rather to something like PrestoAssert.", "author": "kokosing", "createdAt": "2020-04-09T08:23:23Z", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -115,6 +116,11 @@ protected Object computeScalar(@Language(\"SQL\") String sql)\n         return computeActual(sql).getOnlyValue();\n     }\n \n+    protected void assertMatch(String actual, String regex)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzOTU4Nw==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406039587", "bodyText": "I think it should throw by default.", "author": "kokosing", "createdAt": "2020-04-09T08:26:23Z", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -521,6 +522,22 @@ default void dropView(ConnectorSession session, SchemaTableName viewName)\n         return Optional.empty();\n     }\n \n+    /**\n+     * Gets the schema properties for the specified schema.\n+     */\n+    default Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        return Collections.emptyMap();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MDE4MQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406350181", "bodyText": "Hmm... Should SHOW CREATE SCHEMA fail on every connector except the Hive connector?", "author": "lhofhansl", "createdAt": "2020-04-09T17:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzOTU4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0MjMyNw==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406442327", "bodyText": "I suppose any connector that does not support schemas should - and safely - throw an exception.", "author": "lhofhansl", "createdAt": "2020-04-09T19:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzOTU4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzOTYyNg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406039626", "bodyText": "I think it should throw by default.", "author": "kokosing", "createdAt": "2020-04-09T08:26:27Z", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorMetadata.java", "diffHunk": "@@ -521,6 +522,22 @@ default void dropView(ConnectorSession session, SchemaTableName viewName)\n         return Optional.empty();\n     }\n \n+    /**\n+     * Gets the schema properties for the specified schema.\n+     */\n+    default Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        return Collections.emptyMap();\n+    }\n+\n+    /**\n+     * Get the schema properties for the specified schema.\n+     */\n+    default Optional<PrestoPrincipal> getSchemaOwner(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        return Optional.empty();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MDIyNQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r406350225", "bodyText": "Same here, should SHOW CREATE SCHEMA fail on every connector except the Hive connector?", "author": "lhofhansl", "createdAt": "2020-04-09T17:07:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAzOTYyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1ODMwMA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r407658300", "bodyText": "Access control should be done on different level. If this method is called then you should  assume that user has access to this schema or it will be filtered later.\nIn other words, please remove this line.", "author": "kokosing", "createdAt": "2020-04-13T19:06:38Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1748,6 +1751,32 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        checkState(filterSchema(schemaName.getSchemaName()), \"Schema is not accessible: %s\", schemaName);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0OTU4Mw==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r408349583", "bodyText": "We have discussed this above :) See @findepi 's comment. It's not access control.\nThis is only for the information_schema and sys. And those are not available for properties or ownership. These should never be triggered, since all callers check for schemaExists first, it's just a safety consistency check in case someone adds a call to this later.", "author": "lhofhansl", "createdAt": "2020-04-14T18:32:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1ODMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczMjg5OA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r408732898", "bodyText": "I see, thanks!", "author": "kokosing", "createdAt": "2020-04-15T10:14:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1ODMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1ODM0NA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r407658344", "bodyText": "Access control should be done on different level. If this method is called then you should  assume that user has access to this schema or it will be filtered later.\nIn other words, please remove this line.", "author": "kokosing", "createdAt": "2020-04-13T19:06:43Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1748,6 +1751,32 @@ public void dropView(ConnectorSession session, SchemaTableName viewName)\n         return tableNames.build();\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        checkState(filterSchema(schemaName.getSchemaName()), \"Schema is not accessible: %s\", schemaName);\n+\n+        Optional<Database> db = metastore.getDatabase(schemaName.getSchemaName());\n+        if (db.isPresent()) {\n+            return HiveSchemaProperties.fromDatabase(db.get());\n+        }\n+\n+        throw new SchemaNotFoundException(schemaName.getSchemaName());\n+    }\n+\n+    @Override\n+    public Optional<PrestoPrincipal> getSchemaOwner(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        checkState(filterSchema(schemaName.getSchemaName()), \"Schema is not accessible: %s\", schemaName);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0OTY2MA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r408349660", "bodyText": "See above :)", "author": "lhofhansl", "createdAt": "2020-04-14T18:32:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1ODM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MzAwOQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r407953009", "bodyText": "Is this correct? I guess RDBMS might have a notion of schema owner. Maybe we should leave it unimplemented?", "author": "kokosing", "createdAt": "2020-04-14T08:21:30Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -82,6 +83,18 @@ public boolean schemaExists(ConnectorSession session, String schemaName)\n         return ImmutableList.copyOf(jdbcClient.getSchemaNames(JdbcIdentity.from(session)));\n     }\n \n+    @Override\n+    public Optional<PrestoPrincipal> getSchemaOwner(ConnectorSession session, CatalogSchemaName schemaName)\n+    {\n+        return Optional.empty();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MTIxNg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r408351216", "bodyText": "Throw UnsupportedException?\nWhat I did was to have an implementation that does not fail for every connector that supports CREATE SCHEMA. Wouldn't it be weird to have SHOW CREATE SCHEMA fail with an exception here?\nNo problem removing the implementation here, we have to just be aware of the implications.", "author": "lhofhansl", "createdAt": "2020-04-14T18:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MzAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4MjE1Mw==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r408382153", "bodyText": "I think we might add properties for schemas in the Jdbc Connector in the future. So getSchema  Owner (IMHO) should not fail.", "author": "lhofhansl", "createdAt": "2020-04-14T19:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MzAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczMjUyNw==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r408732527", "bodyText": "Wouldn't it be weird to have SHOW CREATE SCHEMA fail with an exception here?\n\nIf it is better to fail than return incorrect data. In other words, JDBC connectors is a pandora box let's not open it for now.", "author": "kokosing", "createdAt": "2020-04-15T10:13:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MzAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5OTM1Mg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r408999352", "bodyText": "Ok... Lemme do that.", "author": "lhofhansl", "createdAt": "2020-04-15T17:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MzAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMzI0MQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r409013241", "bodyText": "Also... I assume the same holds for KuduMetadata, BlackHoleMetaData, MemoryMetadata, PhoenixMetadata?\nThe logic I followed was that if a connector has CREATE SCHEMA it should also not fail when doing SHOW CREATE SCHEMA even when there's no info to show.\nUnless I hear otherwise from you I will remove all no-op implementation of these methods and have all those connectors fail when issuing SHOW CREATE SCHEMA.", "author": "lhofhansl", "createdAt": "2020-04-15T17:30:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MzAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzM1Mg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r409067352", "bodyText": "BlackHoleMetaData and MemoryMetadata are trivial so you could implement that method for them.\nI would skip rest for now.", "author": "kokosing", "createdAt": "2020-04-15T19:01:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MzAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3NjMwOA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r409176308", "bodyText": "Oh missed this. I will add this back for BlockHoleMetadata and MemoryMetadata.", "author": "lhofhansl", "createdAt": "2020-04-15T22:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MzAwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1NDY2Mg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r407954662", "bodyText": "We need also add simple test to io.prestosql.testing.AbstractTestIntegrationSmokeTest. That file is used to test connector implementations, you change connector SPI so we need tests for other connectors. It can be very simple, without any access control. Probably for most of the connectors it will be skipped.", "author": "kokosing", "createdAt": "2020-04-14T08:24:16Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -716,6 +716,56 @@ public void testSchemaAuthorization()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testShowCreateSchema()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxMjAyMg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r408412022", "bodyText": "I'm not sure what I would test.\nIt's kinda like TestHiveIntegrationSmokeTest.testSchemaOperations, which only exists in TestHiveIntegrationSmokeTest, because it doesn't make sense for many other connectors, and there's no equivalent for this test in the other connector tests.\nI do not see any tests in there for features that are not supported in some connectors.\nDo you have a suggestions about what I can test generally?", "author": "lhofhansl", "createdAt": "2020-04-14T20:23:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1NDY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczMTQxNQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r408731415", "bodyText": "I was thinking to add simple SHOW CREATE SCHEMA tpch. If connector does not support this, then we could disable that test for this connector, but it will be known that there is a feature that given connector does not support.", "author": "kokosing", "createdAt": "2020-04-15T10:11:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1NDY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwNDM4OA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r409004388", "bodyText": "I see. Makes sense.\nShould probably pull TestHiveIntegrationSmokeTest.testSchemaOperations up to AbstractTestIntegrationSmokeTest as well then.\nEdit: So I looked at it more. The only connectors that support this now are the HiveConnector and the IcebergConnector. So if I add a method to AbstractTestIntegrationSmokeTest all other connectors would just have an empty implementation, and Hive and Iceberg would have a slightly different implementation. So nothing gained :)", "author": "lhofhansl", "createdAt": "2020-04-15T17:15:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1NDY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2ODg0Ng==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r409068846", "bodyText": "Makes sense", "author": "kokosing", "createdAt": "2020-04-15T19:04:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1NDY2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1NzU3NA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r407957574", "bodyText": "I think we should fail if schema does not exists", "author": "kokosing", "createdAt": "2020-04-14T08:28:54Z", "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -957,6 +957,34 @@ public void finishDelete(Session session, TableHandle tableHandle, Collection<Sl\n         return ImmutableMap.copyOf(views);\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(Session session, CatalogSchemaName schemaName)\n+    {\n+        if (schemaExists(session, schemaName)) {\n+            CatalogMetadata catalogMetadata = getCatalogMetadata(session, new CatalogName(schemaName.getCatalogName()));\n+            CatalogName catalogName = catalogMetadata.getCatalogName();\n+            ConnectorMetadata metadata = catalogMetadata.getMetadataFor(catalogName);\n+\n+            ConnectorSession connectorSession = session.toConnectorSession(catalogName);\n+            return metadata.getSchemaProperties(connectorSession, schemaName);\n+        }\n+        return ImmutableMap.of();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1NzY3NA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r407957674", "bodyText": "I think we should fail if schema does not exists", "author": "kokosing", "createdAt": "2020-04-14T08:29:03Z", "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -957,6 +957,34 @@ public void finishDelete(Session session, TableHandle tableHandle, Collection<Sl\n         return ImmutableMap.copyOf(views);\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(Session session, CatalogSchemaName schemaName)\n+    {\n+        if (schemaExists(session, schemaName)) {\n+            CatalogMetadata catalogMetadata = getCatalogMetadata(session, new CatalogName(schemaName.getCatalogName()));\n+            CatalogName catalogName = catalogMetadata.getCatalogName();\n+            ConnectorMetadata metadata = catalogMetadata.getMetadataFor(catalogName);\n+\n+            ConnectorSession connectorSession = session.toConnectorSession(catalogName);\n+            return metadata.getSchemaProperties(connectorSession, schemaName);\n+        }\n+        return ImmutableMap.of();\n+    }\n+\n+    @Override\n+    public Optional<PrestoPrincipal> getSchemaOwner(Session session, CatalogSchemaName schemaName)\n+    {\n+        if (schemaExists(session, schemaName)) {\n+            CatalogMetadata catalogMetadata = getCatalogMetadata(session, new CatalogName(schemaName.getCatalogName()));\n+            CatalogName catalogName = catalogMetadata.getCatalogName();\n+            ConnectorMetadata metadata = catalogMetadata.getMetadataFor(catalogName);\n+\n+            ConnectorSession connectorSession = session.toConnectorSession(catalogName);\n+            return metadata.getSchemaOwner(connectorSession, schemaName);\n+        }\n+        return Optional.empty();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1OTMyOA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r407959328", "bodyText": "I think we should check existence of object before access control", "author": "kokosing", "createdAt": "2020-04-14T08:31:44Z", "path": "presto-main/src/main/java/io/prestosql/sql/rewrite/ShowQueriesRewrite.java", "diffHunk": "@@ -486,7 +494,30 @@ protected Node visitShowCreate(ShowCreate node, Void context)\n                 return singleValueQuery(\"Create Table\", formatSql(createTable).trim());\n             }\n \n-            throw new UnsupportedOperationException(\"SHOW CREATE only supported for tables and views\");\n+            if (node.getType() == SCHEMA) {\n+                CatalogSchemaName schemaName = createCatalogSchemaName(session, node, Optional.of(node.getName()));\n+                accessControl.checkCanShowCreateSchema(session.toSecurityContext(), schemaName);\n+\n+                if (!metadata.schemaExists(session, schemaName)) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4MDQ5MQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r408380491", "bodyText": "See visitShowTables. It checks access first. It feels also generally better to check access first, otherwise you can \"poke\" the system (by trying schema names) and gain information you should not access to. Currently that might to be an issue with schema, but we might tighten visibility in the future.", "author": "lhofhansl", "createdAt": "2020-04-14T19:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1OTMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMzAxMQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r408433011", "bodyText": "Wait... No, you're right. Show Tables is different. I'll change it.", "author": "lhofhansl", "createdAt": "2020-04-14T21:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1OTMyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExMDUxNQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411110515", "bodyText": "invert the condition.", "author": "kokosing", "createdAt": "2020-04-20T05:53:03Z", "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -957,6 +958,34 @@ public void finishDelete(Session session, TableHandle tableHandle, Collection<Sl\n         return ImmutableMap.copyOf(views);\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(Session session, CatalogSchemaName schemaName)\n+    {\n+        if (schemaExists(session, schemaName)) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNDg1OQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411514859", "bodyText": "Done.", "author": "lhofhansl", "createdAt": "2020-04-20T16:23:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExMDUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExMDU0Mg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411110542", "bodyText": "invert the condition.", "author": "kokosing", "createdAt": "2020-04-20T05:53:07Z", "path": "presto-main/src/main/java/io/prestosql/metadata/MetadataManager.java", "diffHunk": "@@ -957,6 +958,34 @@ public void finishDelete(Session session, TableHandle tableHandle, Collection<Sl\n         return ImmutableMap.copyOf(views);\n     }\n \n+    @Override\n+    public Map<String, Object> getSchemaProperties(Session session, CatalogSchemaName schemaName)\n+    {\n+        if (schemaExists(session, schemaName)) {\n+            CatalogMetadata catalogMetadata = getCatalogMetadata(session, new CatalogName(schemaName.getCatalogName()));\n+            CatalogName catalogName = catalogMetadata.getCatalogName();\n+            ConnectorMetadata metadata = catalogMetadata.getMetadataFor(catalogName);\n+\n+            ConnectorSession connectorSession = session.toConnectorSession(catalogName);\n+            return metadata.getSchemaProperties(connectorSession, schemaName);\n+        }\n+        throw new PrestoException(SCHEMA_NOT_FOUND, format(\"Schema '%s' does not exist\", schemaName));\n+    }\n+\n+    @Override\n+    public Optional<PrestoPrincipal> getSchemaOwner(Session session, CatalogSchemaName schemaName)\n+    {\n+        if (schemaExists(session, schemaName)) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNDk4NQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411514985", "bodyText": "Done.", "author": "lhofhansl", "createdAt": "2020-04-20T16:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExMDU0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExMTExNA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411111114", "bodyText": "No need to implement them here, these methods throw by default", "author": "kokosing", "createdAt": "2020-04-20T05:54:51Z", "path": "presto-main/src/test/java/io/prestosql/metadata/AbstractMockMetadata.java", "diffHunk": "@@ -387,6 +387,18 @@ public void finishDelete(Session session, TableHandle tableHandle, Collection<Sl\n         throw new UnsupportedOperationException();\n     }\n \n+    @Override", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwMDg4NA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411500884", "bodyText": "I do not think that is true. This implements Metadata not ConnectorMetadata.", "author": "lhofhansl", "createdAt": "2020-04-20T16:04:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExMTExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExMjIyMg==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411112222", "bodyText": "Why do you need this method here?", "author": "kokosing", "createdAt": "2020-04-20T05:57:55Z", "path": "presto-main/src/test/java/io/prestosql/security/TestAccessControlManager.java", "diffHunk": "@@ -225,6 +225,11 @@ public void checkCanSetSystemSessionProperty(SystemSecurityContext context, Stri\n                 return Optional.of(new ViewExpression(\"user\", Optional.empty(), Optional.empty(), \"connector mask\"));\n             }\n \n+            @Override\n+            public void checkCanShowCreateSchema(ConnectorSecurityContext context, String schemaName)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNTI2OQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411515269", "bodyText": "We don't :)\nI removed it.", "author": "lhofhansl", "createdAt": "2020-04-20T16:23:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExMjIyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExMjM4MA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411112380", "bodyText": "I think this method could be removed too (in separate commit)", "author": "kokosing", "createdAt": "2020-04-20T05:58:13Z", "path": "presto-main/src/test/java/io/prestosql/security/TestAccessControlManager.java", "diffHunk": "@@ -225,6 +225,11 @@ public void checkCanSetSystemSessionProperty(SystemSecurityContext context, Stri\n                 return Optional.of(new ViewExpression(\"user\", Optional.empty(), Optional.empty(), \"connector mask\"));\n             }\n \n+            @Override\n+            public void checkCanShowCreateSchema(ConnectorSecurityContext context, String schemaName)\n+            {\n+            }\n+\n             @Override\n             public void checkCanShowCreateTable(ConnectorSecurityContext context, SchemaTableName tableName)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExNTYzMQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411115631", "bodyText": "FYI #3484", "author": "kokosing", "createdAt": "2020-04-20T06:06:53Z", "path": "presto-main/src/test/java/io/prestosql/security/TestAccessControlManager.java", "diffHunk": "@@ -490,6 +495,12 @@ public void checkCanShowCreateTable(ConnectorSecurityContext context, SchemaTabl\n             throw new UnsupportedOperationException();\n         }\n \n+        @Override\n+        public void checkCanShowCreateSchema(ConnectorSecurityContext context, String schemaName)\n+        {\n+            throw new UnsupportedOperationException();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExNTkyOA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411115928", "bodyText": "separate commit?", "author": "kokosing", "createdAt": "2020-04-20T06:07:41Z", "path": "presto-parser/src/main/java/io/prestosql/sql/SqlFormatter.java", "diffHunk": "@@ -823,7 +823,7 @@ protected Void visitCreateSchema(CreateSchema node, Integer context)\n             }\n             builder.append(formatName(node.getSchemaName()));\n             if (node.getPrincipal().isPresent()) {\n-                builder.append(\" AUTHORIZATION \")\n+                builder.append(\"\\nAUTHORIZATION \")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwMjEzMw==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411502133", "bodyText": "Let's leave it this was if we can. Matches all the tests now.", "author": "lhofhansl", "createdAt": "2020-04-20T16:06:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExNTkyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExNjMyOQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411116329", "bodyText": "add:\nSCHEMA,\n/**/;\n\nThat way you can add new entries with changing only single line.", "author": "kokosing", "createdAt": "2020-04-20T06:08:41Z", "path": "presto-parser/src/main/java/io/prestosql/sql/tree/ShowCreate.java", "diffHunk": "@@ -28,7 +28,8 @@\n     public enum Type\n     {\n         TABLE,\n-        VIEW\n+        VIEW,\n+        SCHEMA", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNTQyNw==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411515427", "bodyText": "Done.", "author": "lhofhansl", "createdAt": "2020-04-20T16:24:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExNjMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExNjY1NA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411116654", "bodyText": "make it deny by default, see #3484", "author": "kokosing", "createdAt": "2020-04-20T06:09:35Z", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorAccessControl.java", "diffHunk": "@@ -122,6 +122,13 @@ default void checkCanShowSchemas(ConnectorSecurityContext context)\n         return emptySet();\n     }\n \n+    /**\n+     * Check if identity is allowed to execute SHOW CREATE SCHEMA.\n+     *\n+     * @throws io.prestosql.spi.security.AccessDeniedException if not allowed\n+     */\n+    void checkCanShowCreateSchema(ConnectorSecurityContext context, String schemaName);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNTU1MQ==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411515551", "bodyText": "Done.", "author": "lhofhansl", "createdAt": "2020-04-20T16:24:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTExNjY1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2NjMwOA==", "url": "https://github.com/trinodb/trino/pull/3099#discussion_r411966308", "bodyText": "Please remove, it is not used.", "author": "kokosing", "createdAt": "2020-04-21T08:07:04Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "diffHunk": "@@ -164,6 +164,11 @@ public SemiTransactionalHiveMetastore(\n         return delegate.getAllDatabases();\n     }\n \n+    public Optional<String> getConfigValue(String name)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e17d38471a8ef645ae3f982745cf1197dff0acbf", "url": "https://github.com/trinodb/trino/commit/e17d38471a8ef645ae3f982745cf1197dff0acbf", "message": "Add support for SHOW CREATE SCHEMA.\n\nAdd support for authorized users to see the definitin of a schema,\nincluding its owner and location.", "committedDate": "2020-04-21T16:06:22Z", "type": "commit"}]}