{"pr_number": 3761, "pr_title": "Use Instant to track session start time", "pr_createdAt": "2020-05-16T00:51:57Z", "pr_url": "https://github.com/trinodb/trino/pull/3761", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MDIzMQ==", "url": "https://github.com/trinodb/trino/pull/3761#discussion_r426150231", "bodyText": "rename field and ctor to start", "author": "findepi", "createdAt": "2020-05-16T12:40:09Z", "path": "presto-main/src/main/java/io/prestosql/testing/TestingConnectorSession.java", "diffHunk": "@@ -48,7 +49,7 @@\n     private final TimeZoneKey timeZoneKey;\n     private final Locale locale;\n     private final Optional<String> traceToken;\n-    private final long startTime;\n+    private final Instant startTime;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MDI0Ng==", "url": "https://github.com/trinodb/trino/pull/3761#discussion_r426150246", "bodyText": "start", "author": "findepi", "createdAt": "2020-05-16T12:40:21Z", "path": "presto-main/src/main/java/io/prestosql/testing/TestingConnectorSession.java", "diffHunk": "@@ -164,7 +165,7 @@ public static Builder builder()\n         private TimeZoneKey timeZoneKey = UTC_KEY;\n         private final Locale locale = ENGLISH;\n         private final Optional<String> traceToken = Optional.empty();\n-        private Optional<Long> startTime = Optional.empty();\n+        private Optional<Instant> startTime = Optional.empty();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MDI2Nw==", "url": "https://github.com/trinodb/trino/pull/3761#discussion_r426150267", "bodyText": "setStart", "author": "findepi", "createdAt": "2020-05-16T12:40:40Z", "path": "presto-main/src/main/java/io/prestosql/testing/TestingConnectorSession.java", "diffHunk": "@@ -181,7 +182,7 @@ public Builder setTimeZoneKey(TimeZoneKey timeZoneKey)\n             return this;\n         }\n \n-        public Builder setStartTime(long startTime)\n+        public Builder setStartTime(Instant startTime)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MDM1MQ==", "url": "https://github.com/trinodb/trino/pull/3761#discussion_r426150351", "bodyText": "In session builder you can leave an overload taking millis, this would improve readability of the code here.", "author": "findepi", "createdAt": "2020-05-16T12:41:55Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestDateTimeFunctions.java", "diffHunk": "@@ -50,7 +52,7 @@ public void testFormatDateCannotImplicitlyAddTimeZoneToTimestampLiteral()\n     public void testLocalTime()\n     {\n         Session localSession = Session.builder(session)\n-                .setStartTime(new DateTime(2017, 3, 1, 14, 30, 0, 0, DATE_TIME_ZONE).getMillis())\n+                .setStartTime(Instant.ofEpochMilli(new DateTime(2017, 3, 1, 14, 30, 0, 0, DATE_TIME_ZONE).getMillis()))", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwOTI1OA==", "url": "https://github.com/trinodb/trino/pull/3761#discussion_r426209258", "bodyText": "We want to discourage usages where it's constructing the Instant from millis. Ideally, all these calls should use Java's datetime to instant conversions instead of using Joda's DateTime .", "author": "martint", "createdAt": "2020-05-17T02:18:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MDM1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MDQxMA==", "url": "https://github.com/trinodb/trino/pull/3761#discussion_r426150410", "bodyText": "add @Deprecated too?\n(should we have a static check?)", "author": "findepi", "createdAt": "2020-05-16T12:42:36Z", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/ConnectorSession.java", "diffHunk": "@@ -38,7 +39,15 @@ default String getUser()\n \n     Optional<String> getTraceToken();\n \n-    long getStartTime();\n+    /**\n+     * @deprecated use {@link #getStart()} instead\n+     */\n+    default long getStartTime()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwOTI5Mg==", "url": "https://github.com/trinodb/trino/pull/3761#discussion_r426209292", "bodyText": "What do you mean by a static check?", "author": "martint", "createdAt": "2020-05-17T02:19:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MDQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxMzg0Mg==", "url": "https://github.com/trinodb/trino/pull/3761#discussion_r426213842", "bodyText": "Using deprecated in the Javadoc without the annotation.", "author": "electrum", "createdAt": "2020-05-17T03:45:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MDQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwNjUyNw==", "url": "https://github.com/trinodb/trino/pull/3761#discussion_r426306527", "bodyText": "That makes sense. Is it even feasible to do that with checkstyle?", "author": "martint", "createdAt": "2020-05-17T21:23:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MDQxMA=="}], "type": "inlineReview"}, {"oid": "18ff2e5ce83cdd91a4c8d48b8ab9b4f126f374b0", "url": "https://github.com/trinodb/trino/commit/18ff2e5ce83cdd91a4c8d48b8ab9b4f126f374b0", "message": "Use Instant to track session start time\n\nThis is needed for higher precision version of the special\ndatetime functions (localtimestamp, current_timestamp, etc),\nsince Instant can provide nanosecond precision vs the current\nvalue in milliseconds.", "committedDate": "2020-05-17T02:31:59Z", "type": "commit"}, {"oid": "18ff2e5ce83cdd91a4c8d48b8ab9b4f126f374b0", "url": "https://github.com/trinodb/trino/commit/18ff2e5ce83cdd91a4c8d48b8ab9b4f126f374b0", "message": "Use Instant to track session start time\n\nThis is needed for higher precision version of the special\ndatetime functions (localtimestamp, current_timestamp, etc),\nsince Instant can provide nanosecond precision vs the current\nvalue in milliseconds.", "committedDate": "2020-05-17T02:31:59Z", "type": "forcePushed"}]}