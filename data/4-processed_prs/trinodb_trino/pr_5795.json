{"pr_number": 5795, "pr_title": "Prefer most recently working metastore", "pr_createdAt": "2020-11-03T13:27:47Z", "pr_url": "https://github.com/trinodb/trino/pull/5795", "timeline": [{"oid": "09345ddd5d37ff579c33c35af65d8804117c77a9", "url": "https://github.com/trinodb/trino/commit/09345ddd5d37ff579c33c35af65d8804117c77a9", "message": "Rename field", "committedDate": "2020-11-03T08:26:42Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3ODAwNQ==", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516978005", "bodyText": ".", "author": "findepi", "createdAt": "2020-11-03T21:54:59Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -87,8 +98,11 @@ public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastor\n     public ThriftMetastoreClient createMetastoreClient(Optional<String> delegationToken)\n             throws TException\n     {\n+//        Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3ODMzNQ==", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516978335", "bodyText": "Any chance to keep fewer overloads of the ctor?", "author": "findepi", "createdAt": "2020-11-03T21:55:41Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -63,14 +69,19 @@ public StaticMetastoreLocator(StaticMetastoreConfig config, ThriftMetastoreAuthe\n     }\n \n     public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastoreUsername, ThriftMetastoreClientFactory clientFactory)\n+    {\n+        this(metastoreUris, metastoreUsername, clientFactory, Ticker.systemTicker());\n+    }\n+\n+    private StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastoreUsername, ThriftMetastoreClientFactory clientFactory, Ticker ticker)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5MzkxOQ==", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516993919", "bodyText": "Not really. I could have 3 but then I would have duplication of param->field initialization.\nOr I could go with 2 - but then I would need to explicitly pass systemTicker in calling code which I dont want", "author": "losipiuk", "createdAt": "2020-11-03T22:31:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3ODMzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3OTY1NQ==", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516979655", "bodyText": "pre-existing, but not so nice...\nWe're sorting a list and then getting indexOf for every element.\nWe could eg encode metastoreindex as a payload in the Backoff object,\nor map to Entry<Integer, Backoff> and sort that", "author": "findepi", "createdAt": "2020-11-03T21:58:47Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -87,8 +98,11 @@ public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastor\n     public ThriftMetastoreClient createMetastoreClient(Optional<String> delegationToken)\n             throws TException\n     {\n+//        Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration);\n+        Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration)\n+                .thenComparingLong(Backoff::getLastFailureTimestamp);\n         List<Integer> indices = backoffs.stream()\n-                .sorted(Comparator.comparingLong(Backoff::getBackoffDuration))\n+                .sorted(comparator)\n                 .map(backoffs::indexOf)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5MDQ3MA==", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516990470", "bodyText": "Yeah. I also noticed that. O(n^2) hurts. Even if not really matters :).\nI will see if it looks nicer if reworked.", "author": "losipiuk", "createdAt": "2020-11-03T22:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3OTY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMjM1Nw==", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r517002357", "bodyText": "PTAL 4c99d636bc4a72e2c146861aa07bb36a85e902c9", "author": "losipiuk", "createdAt": "2020-11-03T22:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3OTY1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4MDUzOQ==", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516980539", "bodyText": "do you want to reset lastFailureTimestamp here (as it used to be)?\nnote that you do not sort over success field", "author": "findepi", "createdAt": "2020-11-03T22:00:29Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -138,34 +152,46 @@ private static URI checkMetastoreUri(URI uri)\n         return uri;\n     }\n \n-    private static class Backoff\n+    static class Backoff\n     {\n-        private static final long MIN_BACKOFF = new Duration(50, MILLISECONDS).roundTo(NANOSECONDS);\n-        private static final long MAX_BACKOFF = new Duration(60, SECONDS).roundTo(NANOSECONDS);\n+        static final long MIN_BACKOFF = new Duration(50, MILLISECONDS).roundTo(NANOSECONDS);\n+        static final long MAX_BACKOFF = new Duration(60, SECONDS).roundTo(NANOSECONDS);\n \n-        private final Ticker ticker = Ticker.systemTicker();\n+        private final Ticker ticker;\n         private long backoffDuration = MIN_BACKOFF;\n-        private OptionalLong lastFailureTimestamp = OptionalLong.empty();\n+        private boolean success = true;\n+        private long lastFailureTimestamp;\n+\n+        Backoff(Ticker ticker)\n+        {\n+            this.ticker = requireNonNull(ticker, \"ticker is null\");\n+        }\n \n         synchronized void fail()\n         {\n-            lastFailureTimestamp = OptionalLong.of(ticker.read());\n+            success = false;\n+            lastFailureTimestamp = ticker.read();\n             backoffDuration = min(backoffDuration * 2, MAX_BACKOFF);\n         }\n \n         synchronized void success()\n         {\n-            lastFailureTimestamp = OptionalLong.empty();\n+            success = true;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5Nzk3OA==", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516997978", "bodyText": "Reworked to retain lastFailureTimestamp as OptionalLong and dropped success flag", "author": "losipiuk", "createdAt": "2020-11-03T22:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4MDUzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4MTYwOQ==", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516981609", "bodyText": "This looks like incrementing lastFailureTimestamp value, but it may actually decrement it -- ticker can return a negative value.\nMaybe init lastFailureTimestamp to Long.MIN_VALUE to make reader's life easier?", "author": "findepi", "createdAt": "2020-11-03T22:02:48Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -138,34 +152,46 @@ private static URI checkMetastoreUri(URI uri)\n         return uri;\n     }\n \n-    private static class Backoff\n+    static class Backoff\n     {\n-        private static final long MIN_BACKOFF = new Duration(50, MILLISECONDS).roundTo(NANOSECONDS);\n-        private static final long MAX_BACKOFF = new Duration(60, SECONDS).roundTo(NANOSECONDS);\n+        static final long MIN_BACKOFF = new Duration(50, MILLISECONDS).roundTo(NANOSECONDS);\n+        static final long MAX_BACKOFF = new Duration(60, SECONDS).roundTo(NANOSECONDS);\n \n-        private final Ticker ticker = Ticker.systemTicker();\n+        private final Ticker ticker;\n         private long backoffDuration = MIN_BACKOFF;\n-        private OptionalLong lastFailureTimestamp = OptionalLong.empty();\n+        private boolean success = true;\n+        private long lastFailureTimestamp;\n+\n+        Backoff(Ticker ticker)\n+        {\n+            this.ticker = requireNonNull(ticker, \"ticker is null\");\n+        }\n \n         synchronized void fail()\n         {\n-            lastFailureTimestamp = OptionalLong.of(ticker.read());\n+            success = false;\n+            lastFailureTimestamp = ticker.read();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NDMzMQ==", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r516994331", "bodyText": "ticker can return a negative value\nGood point I did not know that. I will use MIN_VALUE", "author": "losipiuk", "createdAt": "2020-11-03T22:32:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4MTYwOQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMTc0NQ==", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r517401745", "bodyText": "@VisibleForTesting", "author": "findepi", "createdAt": "2020-11-04T14:53:45Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -138,15 +152,20 @@ private static URI checkMetastoreUri(URI uri)\n         return uri;\n     }\n \n-    private static class Backoff\n+    static class Backoff", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMzE0Mg==", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r517403142", "bodyText": "the public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastoreUsername, ThriftMetastoreClientFactory clientFactory) seems unused now", "author": "findepi", "createdAt": "2020-11-04T14:55:32Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -63,14 +70,19 @@ public StaticMetastoreLocator(StaticMetastoreConfig config, ThriftMetastoreAuthe\n     }\n \n     public StaticMetastoreLocator(List<URI> metastoreUris, @Nullable String metastoreUsername, ThriftMetastoreClientFactory clientFactory)\n+    {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMzg5MA==", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r517403890", "bodyText": "Construct a list of attempted addresses (in order of attempt) so that \"Failed connecting to Hive metastore: \" below is accurate.\nThen you can remove addresses field.", "author": "findepi", "createdAt": "2020-11-04T14:56:31Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/thrift/StaticMetastoreLocator.java", "diffHunk": "@@ -101,15 +102,14 @@ public ThriftMetastoreClient createMetastoreClient(Optional<String> delegationTo\n     {\n         Comparator<Backoff> comparator = Comparator.comparingLong(Backoff::getBackoffDuration)\n                 .thenComparingLong(Backoff::getLastFailureTimestamp);\n-        List<Integer> indices = backoffs.stream()\n+        List<Backoff> backoffsSorted = backoffs.stream()\n                 .sorted(comparator)\n-                .map(backoffs::indexOf)\n                 .collect(toImmutableList());\n \n         TException lastException = null;\n-        for (int index : indices) {\n+        for (Backoff backoff : backoffsSorted) {\n             try {\n-                return getClient(addresses.get(index), backoffs.get(index), delegationToken);\n+                return getClient(backoff.getAddress(), backoff, delegationToken);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQzMTE5NA==", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r517431194", "bodyText": "Yeah - did not come to my mind that maybe order in error message is not that important.", "author": "losipiuk", "createdAt": "2020-11-04T15:33:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMzg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQzMzYxNg==", "url": "https://github.com/trinodb/trino/pull/5795#discussion_r517433616", "bodyText": "Actually unsorted list could still be recovered from List of backoffs.", "author": "losipiuk", "createdAt": "2020-11-04T15:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMzg5MA=="}], "type": "inlineReview"}, {"oid": "a9bacfd3957ae226fb607df4c5e760172c6111a6", "url": "https://github.com/trinodb/trino/commit/a9bacfd3957ae226fb607df4c5e760172c6111a6", "message": "Prefer most recently working metastore", "committedDate": "2020-11-04T15:32:56Z", "type": "commit"}, {"oid": "a2178279c1c7a8521551ae4f8e5c04082f9d00f2", "url": "https://github.com/trinodb/trino/commit/a2178279c1c7a8521551ae4f8e5c04082f9d00f2", "message": "Add reverse mapping from Backoff to metastore address", "committedDate": "2020-11-04T15:39:55Z", "type": "commit"}, {"oid": "a2178279c1c7a8521551ae4f8e5c04082f9d00f2", "url": "https://github.com/trinodb/trino/commit/a2178279c1c7a8521551ae4f8e5c04082f9d00f2", "message": "Add reverse mapping from Backoff to metastore address", "committedDate": "2020-11-04T15:39:55Z", "type": "forcePushed"}]}