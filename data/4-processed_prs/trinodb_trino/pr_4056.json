{"pr_number": 4056, "pr_title": "Add support for null format property of Hive tables", "pr_createdAt": "2020-06-17T02:50:27Z", "pr_url": "https://github.com/trinodb/trino/pull/4056", "timeline": [{"oid": "73e7814887fd0daae3b0650cb22b3c317e09224a", "url": "https://github.com/trinodb/trino/commit/73e7814887fd0daae3b0650cb22b3c317e09224a", "message": "Clean up Optional handling in HiveMetadata.doGetTableMetadata", "committedDate": "2020-06-17T01:54:54Z", "type": "commit"}, {"oid": "652fdadb999aa5f1947ab997c67568883ceceb58", "url": "https://github.com/trinodb/trino/commit/652fdadb999aa5f1947ab997c67568883ceceb58", "message": "Use serdeConstants for header/footer skip property keys", "committedDate": "2020-06-17T01:55:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2NDUzMw==", "url": "https://github.com/trinodb/trino/pull/4056#discussion_r441464533", "bodyText": "Please pass string as value for parameter for statement to look valid.", "author": "losipiuk", "createdAt": "2020-06-17T11:05:20Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -3597,6 +3634,8 @@ public void testCreateTableWithInvalidProperties()\n                 .hasMessageMatching(\"Cannot specify skip_header_line_count table property for storage format: ORC\");\n         assertThatThrownBy(() -> assertUpdate(\"CREATE TABLE test_orc_skip_footer (col1 bigint) WITH (format = 'ORC', skip_footer_line_count = 1)\"))\n                 .hasMessageMatching(\"Cannot specify skip_footer_line_count table property for storage format: ORC\");\n+        assertThatThrownBy(() -> assertUpdate(\"CREATE TABLE test_orc_skip_footer (col1 bigint) WITH (format = 'ORC', null_format = 1)\"))", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2ODgxNA==", "url": "https://github.com/trinodb/trino/pull/4056#discussion_r441468814", "bodyText": "We are rarely doing javadoc comments in the codebase as they tend to get out of sync with the code.\nI would drop this one as method name and parameters are self-explanatory enough.", "author": "losipiuk", "createdAt": "2020-06-17T11:14:32Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -3251,115 +3252,96 @@ public void testShowCreateTable()\n         assertEquals(getOnlyElement(actualResult.getOnlyColumnAsSet()), createTableSql);\n     }\n \n-    @Test\n-    public void testCreateExternalTable()\n+    /**\n+     * Boilerplate wrapper for tests creating external textfile tables.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2OTE2Ng==", "url": "https://github.com/trinodb/trino/pull/4056#discussion_r441469166", "bodyText": "drop comment", "author": "losipiuk", "createdAt": "2020-06-17T11:15:15Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -3251,115 +3252,96 @@ public void testShowCreateTable()\n         assertEquals(getOnlyElement(actualResult.getOnlyColumnAsSet()), createTableSql);\n     }\n \n-    @Test\n-    public void testCreateExternalTable()\n+    /**\n+     * Boilerplate wrapper for tests creating external textfile tables.\n+     * @param tableName Name for this test.\n+     * @param fileContents Contents of the table's text file.\n+     * @param expectedResults Expected results of the query; should be have the form {@code \"VALUES (...)\"}.\n+     * @param tableProperties Property lines to pass to the {@code WITH} clause of {@code CREATE TABLE}.\n+     * @throws Exception\n+     */\n+    private void testCreateExternalTable(\n+            String tableName,\n+            String fileContents,\n+            String expectedResults,\n+            List<String> tableProperties)\n             throws Exception\n     {\n         File tempDir = createTempDir();\n         File dataFile = new File(tempDir, \"test.txt\");\n-        Files.write(\"hello\\u0001world\\nbye\\u0001world\", dataFile, UTF_8);\n-\n-        @Language(\"SQL\") String createTableSql = format(\"\" +\n-                        \"CREATE TABLE %s.%s.test_create_external (\\n\" +\n-                        \"   action varchar,\\n\" +\n-                        \"   name varchar\\n\" +\n-                        \")\\n\" +\n-                        \"WITH (\\n\" +\n-                        \"   external_location = '%s',\\n\" +\n-                        \"   format = 'TEXTFILE',\\n\" +\n-                        \"   textfile_field_separator = U&'\\\\0001'\\n\" +\n-                        \")\",\n-                getSession().getCatalog().get(),\n-                getSession().getSchema().get(),\n-                new Path(tempDir.toURI().toASCIIString()).toString());\n-\n-        assertUpdate(createTableSql);\n-        MaterializedResult actual = computeActual(\"SHOW CREATE TABLE test_create_external\");\n-        assertEquals(actual.getOnlyValue(), createTableSql);\n+        Files.asCharSink(dataFile, UTF_8).write(fileContents);\n \n-        assertQuery(\"SELECT action, name FROM test_create_external\", \"VALUES ('hello', 'world'), ('bye', 'world')\");\n-        assertUpdate(\"DROP TABLE test_create_external\");\n-\n-        // file should still exist after drop\n-        assertFile(dataFile);\n-\n-        deleteRecursively(tempDir.toPath(), ALLOW_INSECURE);\n-    }\n-\n-    @Test\n-    public void testCreateExternalTableTextFileFieldSeparatorEscape()\n-            throws Exception\n-    {\n-        String tableName = \"test_create_external_text_file_with_field_separator_and_escape\";\n-\n-        File tempDir = createTempDir();\n-        File dataFile = new File(tempDir, \"test.txt\");\n-        Files.write(\"HelloEFFWorld\\nByeEFFWorld\", dataFile, UTF_8);\n+        // Table properties\n+        StringJoiner propertiesSql = new StringJoiner(\",\\n   \");\n+        propertiesSql.add(\n+                format(\"external_location = '%s'\", new Path(tempDir.toURI().toASCIIString())));\n+        propertiesSql.add(\"format = 'TEXTFILE'\");\n+        tableProperties.forEach(propertiesSql::add);\n \n         @Language(\"SQL\") String createTableSql = format(\"\" +\n                         \"CREATE TABLE %s.%s.%s (\\n\" +\n-                        \"   action varchar,\\n\" +\n-                        \"   name varchar\\n\" +\n+                        \"   col1 varchar,\\n\" +\n+                        \"   col2 varchar\\n\" +\n                         \")\\n\" +\n                         \"WITH (\\n\" +\n-                        \"   external_location = '%s',\\n\" +\n-                        \"   format = 'TEXTFILE',\\n\" +\n-                        \"   textfile_field_separator = 'F',\\n\" +\n-                        \"   textfile_field_separator_escape = 'E'\\n\" +\n+                        \"   %s\\n\" +\n                         \")\",\n                 getSession().getCatalog().get(),\n                 getSession().getSchema().get(),\n                 tableName,\n-                new Path(tempDir.toURI().toASCIIString()).toString());\n+                propertiesSql);\n \n         assertUpdate(createTableSql);\n-        MaterializedResult actual = computeActual(\"SHOW CREATE TABLE test_create_external_text_file_with_field_separator_and_escape\");\n+        MaterializedResult actual = computeActual(format(\"SHOW CREATE TABLE %s\", tableName));\n         assertEquals(actual.getOnlyValue(), createTableSql);\n \n-        assertQuery(\"SELECT action, name FROM test_create_external_text_file_with_field_separator_and_escape\", \"VALUES ('HelloF', 'World'), ('ByeF', 'World')\");\n-        assertUpdate(\"DROP TABLE test_create_external_text_file_with_field_separator_and_escape\");\n-\n-        // file should still exist after drop\n-        assertFile(dataFile);\n-\n+        assertQuery(format(\"SELECT col1, col2 from %s\", tableName), expectedResults);\n+        assertUpdate(format(\"DROP TABLE %s\", tableName));\n+        assertFile(dataFile); // file should still exist after drop\n         deleteRecursively(tempDir.toPath(), ALLOW_INSECURE);\n     }\n \n     @Test\n-    public void testCreateExternalTableTextFileNullFormat()\n-            throws Exception\n+    public void testCreateExternalTable() throws Exception\n     {\n-        String tableName = \"test_create_external_file_with_null_format\";\n-        File tempDir = createTempDir();\n-        File dataFile = new File(tempDir, \"test.txt\");\n-        Files.asCharSink(dataFile, UTF_8).write(\"hello\\u0001NULL_VALUE\\nNULL_VALUE\\u0001123\");\n-\n-        @Language(\"SQL\") String createTableSql = format(\"\" +\n-                        \"CREATE TABLE %s (\\n\" +\n-                        \"   action varchar,\\n\" +\n-                        \"   name varchar\\n\" +\n-                        \")\\n\" +\n-                        \"WITH (\\n\" +\n-                        \"   external_location = '%s',\\n\" +\n-                        \"   format = 'TEXTFILE',\\n\" +\n-                        \"   null_format = 'NULL_VALUE'\\n\" +\n-                        \")\",\n-                format(\"%s.%s.%s\",\n-                        getSession().getCatalog().get(),\n-                        getSession().getSchema().get(),\n-                        tableName),\n-                new Path(tempDir.toURI().toASCIIString()).toString());\n+        testCreateExternalTable(\n+                \"test_create_external\",\n+                \"hello\\u0001world\\nbye\\u0001world\",\n+                \"VALUES ('hello', 'world'), ('bye', 'world')\",\n+                ImmutableList.of());\n+    }\n \n-        assertUpdate(createTableSql);\n-        MaterializedResult actual = computeActual(format(\"SHOW CREATE TABLE %s\", tableName));\n-        assertEquals(actual.getOnlyValue(), createTableSql);\n+    @Test\n+    public void testCreateExternalTableWithFieldSeparator() throws Exception\n+    {\n+        testCreateExternalTable(\n+                \"test_create_external\",\n+                \"helloXworld\\nbyeXworld\",\n+                \"VALUES ('hello', 'world'), ('bye', 'world')\",\n+                ImmutableList.of(\"textfile_field_separator = 'X'\"));\n+    }\n \n-        assertQuery(format(\"SELECT action, name FROM %s\", tableName), \"VALUES ('hello', NULL), (NULL, 123)\");\n-        assertUpdate(format(\"DROP TABLE %s\", tableName));\n+    @Test\n+    public void testCreateExternalTableWithFieldSeparatorEscape() throws Exception\n+    {\n+        testCreateExternalTable(\n+                \"test_create_external_text_file_with_field_separator_and_escape\",\n+                \"HelloEFFWorld\\nByeEFFWorld\",\n+                \"VALUES ('HelloF', 'World'), ('ByeF', 'World')\",\n+                // Properties", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3MDA4OA==", "url": "https://github.com/trinodb/trino/pull/4056#discussion_r441470088", "bodyText": "The Also, add a separate test for the default field delimiter should be extracted to separate commit.", "author": "losipiuk", "createdAt": "2020-06-17T11:17:10Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -3251,115 +3252,96 @@ public void testShowCreateTable()\n         assertEquals(getOnlyElement(actualResult.getOnlyColumnAsSet()), createTableSql);\n     }\n \n-    @Test\n-    public void testCreateExternalTable()\n+    /**", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA3MTY1NA==", "url": "https://github.com/trinodb/trino/pull/4056#discussion_r442071654", "bodyText": "I have just notice that it would be nicer to move this refactoring commit before \"Add null format property to Hive textfile tables\".\nAnd then only add testCreateExternalTableWithNullFormat in new form.\nNow we are adding testCreateExternalTableWithNullFormat and then refactoring it in followup commit.\nIt is nice to have. But not a must do.", "author": "losipiuk", "createdAt": "2020-06-18T08:51:59Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -70,6 +70,7 @@\n import java.util.Map;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "33e503739c84c4a707c8cb06216d1f5bc3c6b004", "url": "https://github.com/trinodb/trino/commit/33e503739c84c4a707c8cb06216d1f5bc3c6b004", "message": "Reduce code duplication in tests for external textfile Hive tables", "committedDate": "2020-06-18T14:44:38Z", "type": "commit"}, {"oid": "329e7eeef3f8c1948198435636dd5a9109c62ed2", "url": "https://github.com/trinodb/trino/commit/329e7eeef3f8c1948198435636dd5a9109c62ed2", "message": "Add separate test for external Hive table with field separator", "committedDate": "2020-06-18T14:44:39Z", "type": "commit"}, {"oid": "df84ad0d1bcd429e538d5e50df844d7841ba0161", "url": "https://github.com/trinodb/trino/commit/df84ad0d1bcd429e538d5e50df844d7841ba0161", "message": "Add null format property to Hive textfile tables", "committedDate": "2020-06-18T14:45:42Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "d5c8a9c69763b64a66f5bf6ed74f85881bc902d7", "url": "https://github.com/trinodb/trino/commit/d5c8a9c69763b64a66f5bf6ed74f85881bc902d7", "message": "Reduce code duplication in Hive integration tests", "committedDate": "2020-06-18T15:47:30Z", "type": "commit"}, {"oid": "d5c8a9c69763b64a66f5bf6ed74f85881bc902d7", "url": "https://github.com/trinodb/trino/commit/d5c8a9c69763b64a66f5bf6ed74f85881bc902d7", "message": "Reduce code duplication in Hive integration tests", "committedDate": "2020-06-18T15:47:30Z", "type": "forcePushed"}]}