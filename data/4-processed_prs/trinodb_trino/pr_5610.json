{"pr_number": 5610, "pr_title": "Implement SSLVerification parameter to JDBC driver", "pr_createdAt": "2020-10-20T08:47:50Z", "pr_url": "https://github.com/trinodb/trino/pull/5610", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwODAxMg==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r508408012", "bodyText": "Can we set it as a default value in AbstractConnectionProperty ?", "author": "Praveen2112", "createdAt": "2020-10-20T11:01:47Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -255,10 +262,12 @@ public Ssl()\n     {\n         private static final Predicate<Properties> IF_SSL_ENABLED =\n                 checkedPredicate(properties -> SSL.getValue(properties).orElse(false));\n+        private static final Predicate<Properties> IF_SSL_VERIFICATION_ENABLED =\n+                checkedPredicate(properties -> !SSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.FULL).equals(SslVerificationMode.NONE));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1MjY3NA==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r508452674", "bodyText": "Thank you for the review.\nCurrently, SSLVerification is only allowed if SSL is enabled. If a default value is set to SSLVerification, when SSL is not enabled (default), the following exception will be thrown:\njava.sql.SQLException: Connection property 'SSLVerification' is not allowed\nIn order to resolve this problem, should SSLVerification be allowed regardless of whether SSL is enabled or not?", "author": "choiwaiyiu", "createdAt": "2020-10-20T12:20:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwODAxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwOTEyOQ==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r508409129", "bodyText": "Can we do a static import of setupInsecureSsl", "author": "Praveen2112", "createdAt": "2020-10-20T11:03:44Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -216,14 +222,25 @@ public void setupClient(OkHttpClient.Builder builder)\n             }\n \n             if (useSecureConnection) {\n-                setupSsl(\n-                        builder,\n-                        SSL_KEY_STORE_PATH.getValue(properties),\n-                        SSL_KEY_STORE_PASSWORD.getValue(properties),\n-                        SSL_KEY_STORE_TYPE.getValue(properties),\n-                        SSL_TRUST_STORE_PATH.getValue(properties),\n-                        SSL_TRUST_STORE_PASSWORD.getValue(properties),\n-                        SSL_TRUST_STORE_TYPE.getValue(properties));\n+                SslVerificationMode sslVerificationMode = SSL_VERIFICATION.getValue(properties).orElse(FULL);\n+                if (sslVerificationMode.equals(FULL) || sslVerificationMode.equals(CA)) {\n+                    setupSsl(\n+                            builder,\n+                            SSL_KEY_STORE_PATH.getValue(properties),\n+                            SSL_KEY_STORE_PASSWORD.getValue(properties),\n+                            SSL_KEY_STORE_TYPE.getValue(properties),\n+                            SSL_TRUST_STORE_PATH.getValue(properties),\n+                            SSL_TRUST_STORE_PASSWORD.getValue(properties),\n+                            SSL_TRUST_STORE_TYPE.getValue(properties));\n+                }\n+\n+                if (sslVerificationMode.equals(CA)) {\n+                    builder.hostnameVerifier((hostname, session) -> true);\n+                }\n+\n+                if (sslVerificationMode.equals(NONE)) {\n+                    OkHttpUtil.setupInsecureSsl(builder);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2NDAzOA==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r508464038", "bodyText": "you should use default value when SSL_VERIFICATION is not set explicitly. Also this predicate should be defined SslVerificationMode and reused instead of being copied 3 times.", "author": "kokosing", "createdAt": "2020-10-20T12:37:37Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -303,10 +318,12 @@ public SslTrustStorePath()\n     {\n         private static final Predicate<Properties> IF_TRUST_STORE =\n                 checkedPredicate(properties -> SSL_TRUST_STORE_PATH.getValue(properties).isPresent());\n+        private static final Predicate<Properties> IF_SSL_VERIFICATION_ENABLED =\n+                checkedPredicate(properties -> !SSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.FULL).equals(SslVerificationMode.NONE));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2OTY1OQ==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r508469659", "bodyText": "Please correct me if I am wrong. Key stores are not to used to verify SSL but to authenticate using SSL. So SSL verification should not affect this.", "author": "kokosing", "createdAt": "2020-10-20T12:45:53Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -255,10 +262,12 @@ public Ssl()\n     {\n         private static final Predicate<Properties> IF_SSL_ENABLED =\n                 checkedPredicate(properties -> SSL.getValue(properties).orElse(false));\n+        private static final Predicate<Properties> IF_SSL_VERIFICATION_ENABLED =\n+                checkedPredicate(properties -> !SSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.FULL).equals(SslVerificationMode.NONE));\n \n         public SslKeyStorePath()\n         {\n-            super(\"SSLKeyStorePath\", NOT_REQUIRED, IF_SSL_ENABLED, STRING_CONVERTER);\n+            super(\"SSLKeyStorePath\", NOT_REQUIRED, IF_SSL_ENABLED.and(IF_SSL_VERIFICATION_ENABLED), STRING_CONVERTER);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg4MjQ1Nw==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r508882457", "bodyText": "The current implementation follows the description in #5246.\nWhen the SSLVerification mode is NONE, the following properties will be disallowed:\n\nSSLKeyStorePath\nSSLKeyStorePassword\nSSLKeyStoreType\nSSLTrustStorePath\nSSLTrustStorePassword\nSSLTrustStoreType", "author": "choiwaiyiu", "createdAt": "2020-10-20T22:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2OTY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1OTIzOQ==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509059239", "bodyText": "Ok, as I understand to goal is to make impossible to use SSL (certificate) authentication with SSLVerification=NONE.\n@electrum Do I understand this correctly?", "author": "kokosing", "createdAt": "2020-10-21T07:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2OTY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ3MDQyMg==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r508470422", "bodyText": "you should use default value.", "author": "kokosing", "createdAt": "2020-10-20T12:47:05Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -216,14 +222,25 @@ public void setupClient(OkHttpClient.Builder builder)\n             }\n \n             if (useSecureConnection) {\n-                setupSsl(\n-                        builder,\n-                        SSL_KEY_STORE_PATH.getValue(properties),\n-                        SSL_KEY_STORE_PASSWORD.getValue(properties),\n-                        SSL_KEY_STORE_TYPE.getValue(properties),\n-                        SSL_TRUST_STORE_PATH.getValue(properties),\n-                        SSL_TRUST_STORE_PASSWORD.getValue(properties),\n-                        SSL_TRUST_STORE_TYPE.getValue(properties));\n+                SslVerificationMode sslVerificationMode = SSL_VERIFICATION.getValue(properties).orElse(FULL);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1MTg3Nw==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509051877", "bodyText": "use static import for IF_SSL_VERIFICATION_ENABLED", "author": "kokosing", "createdAt": "2020-10-21T07:33:11Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -258,7 +270,7 @@ public Ssl()\n \n         public SslKeyStorePath()\n         {\n-            super(\"SSLKeyStorePath\", NOT_REQUIRED, IF_SSL_ENABLED, STRING_CONVERTER);\n+            super(\"SSLKeyStorePath\", NOT_REQUIRED, IF_SSL_ENABLED.and(SslVerificationMode.IF_SSL_VERIFICATION_ENABLED), STRING_CONVERTER);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1MzIzMA==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509053230", "bodyText": "why this one is defined here, and IF_SSL_VERIFICATION_ENABLED is defined elsewhere?", "author": "kokosing", "createdAt": "2020-10-21T07:35:28Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -318,7 +330,19 @@ public SslTrustStorePassword()\n \n         public SslTrustStoreType()\n         {\n-            super(\"SSLTrustStoreType\", NOT_REQUIRED, IF_TRUST_STORE, STRING_CONVERTER);\n+            super(\"SSLTrustStoreType\", NOT_REQUIRED, IF_TRUST_STORE.and(SslVerificationMode.IF_SSL_VERIFICATION_ENABLED), STRING_CONVERTER);\n+        }\n+    }\n+\n+    private static class SslVerification\n+            extends AbstractConnectionProperty<SslVerificationMode>\n+    {\n+        private static final Predicate<Properties> IF_SSL_ENABLED =", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1NTA0MQ==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509055041", "bodyText": "it would be nice to replace\nSSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.valueOf(DEFAULTS.get(SSL_VERIFICATION.getKey())) with new SSL_VERIFICATION.getValueOrDefault(properties), that would require adding new method but it would be much readable.", "author": "kokosing", "createdAt": "2020-10-21T07:38:33Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -41,6 +41,16 @@\n \n final class ConnectionProperties\n {\n+    enum SslVerificationMode\n+    {\n+        FULL,\n+        CA,\n+        NONE;\n+\n+        static final Predicate<Properties> IF_SSL_VERIFICATION_ENABLED =\n+                checkedPredicate(properties -> !SSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.valueOf(DEFAULTS.get(SSL_VERIFICATION.getKey()))).equals(SslVerificationMode.NONE));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1NTczOA==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509055738", "bodyText": "I find removing properties hacky, I would prefer to modify logic below instead to handle mentioned cases.", "author": "kokosing", "createdAt": "2020-10-21T07:39:43Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -105,6 +112,16 @@ private PrestoDriverUri(URI uri, Properties driverProperties)\n         address = HostAndPort.fromParts(uri.getHost(), uri.getPort());\n         properties = mergeConnectionProperties(uri, driverProperties);\n \n+        // Remove the default SSL_VERIFICATION property in the following cases in which SSL_VERIFICATION is not allowed", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg2NTI3NQ==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509865275", "bodyText": "Instead of removing the default SSL_VERIFICATION property in specific cases, I added a isProvided variable in AbstractConnectionProperty which is used to compose a Predicate to determine whether the SSL_VERIFICATION property is allowed or not.", "author": "choiwaiyiu", "createdAt": "2020-10-22T03:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1NTczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1NjM3Mg==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509056372", "bodyText": "it is unintuitive that this belongs to if (useSecureConnection) { block.\nI think we need to change the code and remove useSecureConnection and instead use sslVerificationMode", "author": "kokosing", "createdAt": "2020-10-21T07:40:41Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -216,14 +233,25 @@ public void setupClient(OkHttpClient.Builder builder)\n             }\n \n             if (useSecureConnection) {\n-                setupSsl(\n-                        builder,\n-                        SSL_KEY_STORE_PATH.getValue(properties),\n-                        SSL_KEY_STORE_PASSWORD.getValue(properties),\n-                        SSL_KEY_STORE_TYPE.getValue(properties),\n-                        SSL_TRUST_STORE_PATH.getValue(properties),\n-                        SSL_TRUST_STORE_PASSWORD.getValue(properties),\n-                        SSL_TRUST_STORE_TYPE.getValue(properties));\n+                SslVerificationMode sslVerificationMode = SSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.valueOf(getDefaults().get(SSL_VERIFICATION.getKey())));\n+                if (sslVerificationMode.equals(FULL) || sslVerificationMode.equals(CA)) {\n+                    setupSsl(\n+                            builder,\n+                            SSL_KEY_STORE_PATH.getValue(properties),\n+                            SSL_KEY_STORE_PASSWORD.getValue(properties),\n+                            SSL_KEY_STORE_TYPE.getValue(properties),\n+                            SSL_TRUST_STORE_PATH.getValue(properties),\n+                            SSL_TRUST_STORE_PASSWORD.getValue(properties),\n+                            SSL_TRUST_STORE_TYPE.getValue(properties));\n+                }\n+\n+                if (sslVerificationMode.equals(CA)) {\n+                    builder.hostnameVerifier((hostname, session) -> true);\n+                }\n+\n+                if (sslVerificationMode.equals(NONE)) {\n+                    setupInsecureSsl(builder);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkzNTg0OQ==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509935849", "bodyText": "final?", "author": "kokosing", "createdAt": "2020-10-22T07:24:41Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractConnectionProperty.java", "diffHunk": "@@ -30,6 +30,7 @@\n {\n     private final String key;\n     private final Optional<String> defaultValue;\n+    private boolean isProvided;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkzNjY2NQ==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509936665", "bodyText": "I don't like this field. It express the state of independent object  (Properties here in this case) and not actual property description. I think instead you should have local variable in the context of usage.", "author": "kokosing", "createdAt": "2020-10-22T07:26:06Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/AbstractConnectionProperty.java", "diffHunk": "@@ -69,6 +71,18 @@ public String getKey()\n         return defaultValue;\n     }\n \n+    @Override\n+    public void setIsProvided(Properties properties)\n+    {\n+        isProvided = properties.containsKey(key);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkzODc0Mg==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509938742", "bodyText": "let's not move existing properties.", "author": "kokosing", "createdAt": "2020-10-22T07:29:50Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -196,9 +231,6 @@ public SocksProxy()\n     private static class HttpProxy\n             extends AbstractConnectionProperty<HostAndPort>\n     {\n-        private static final Predicate<Properties> NO_SOCKS_PROXY =", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkzOTAyMQ==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509939021", "bodyText": "no need to wrap it in additional class.", "author": "kokosing", "createdAt": "2020-10-22T07:30:12Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -34,13 +34,49 @@\n import static io.prestosql.client.ClientSelectedRole.Type.ALL;\n import static io.prestosql.client.ClientSelectedRole.Type.NONE;\n import static io.prestosql.jdbc.AbstractConnectionProperty.checkedPredicate;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_KEY_STORE;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_SSL_ENABLED;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_SSL_VERIFICATION_ALLOWED;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_SSL_VERIFICATION_ENABLED;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_TRUST_STORE;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.NO_HTTP_PROXY;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.NO_SOCKS_PROXY;\n import static java.util.Collections.unmodifiableMap;\n import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n import static java.util.stream.Collectors.toMap;\n \n final class ConnectionProperties\n {\n+    enum SslVerificationMode\n+    {\n+        FULL, CA, NONE;\n+    }\n+\n+    static class Predicates", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkzOTU1NQ==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509939555", "bodyText": "getValueOrDefault?", "author": "kokosing", "createdAt": "2020-10-22T07:31:09Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -215,7 +222,8 @@ public void setupClient(OkHttpClient.Builder builder)\n                 builder.addInterceptor(basicAuth(getUser(), password));\n             }\n \n-            if (useSecureConnection) {\n+            SslVerificationMode sslVerificationMode = SSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.valueOf(getDefaults().get(SSL_VERIFICATION.getKey())));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0MDU5OQ==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509940599", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            checkedPredicate(properties -> SSL.isProvided() && SSL.getValue(properties).get() || !SSL_VERIFICATION.isProvided());\n          \n          \n            \n                            checkedPredicate(properties -> SSL.getValue(properties).isPresent() && SSL.getValue(properties).get() || !SSL_VERIFICATION.getValue(properties).isPresent());\n          \n      \n    \n    \n  \n\nNo need for isProvided", "author": "kokosing", "createdAt": "2020-10-22T07:33:07Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -34,13 +34,49 @@\n import static io.prestosql.client.ClientSelectedRole.Type.ALL;\n import static io.prestosql.client.ClientSelectedRole.Type.NONE;\n import static io.prestosql.jdbc.AbstractConnectionProperty.checkedPredicate;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_KEY_STORE;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_SSL_ENABLED;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_SSL_VERIFICATION_ALLOWED;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_SSL_VERIFICATION_ENABLED;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.IF_TRUST_STORE;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.NO_HTTP_PROXY;\n+import static io.prestosql.jdbc.ConnectionProperties.Predicates.NO_SOCKS_PROXY;\n import static java.util.Collections.unmodifiableMap;\n import static java.util.Objects.requireNonNull;\n import static java.util.function.Function.identity;\n import static java.util.stream.Collectors.toMap;\n \n final class ConnectionProperties\n {\n+    enum SslVerificationMode\n+    {\n+        FULL, CA, NONE;\n+    }\n+\n+    static class Predicates\n+    {\n+        static final Predicate<Properties> IF_KEY_STORE =\n+                checkedPredicate(properties -> SSL_KEY_STORE_PATH.getValue(properties).isPresent());\n+\n+        static final Predicate<Properties> IF_SSL_ENABLED =\n+                checkedPredicate(properties -> SSL.getValue(properties).orElse(false));\n+\n+        static final Predicate<Properties> IF_SSL_VERIFICATION_ALLOWED =\n+                checkedPredicate(properties -> SSL.isProvided() && SSL.getValue(properties).get() || !SSL_VERIFICATION.isProvided());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0NTA2Mg==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509945062", "bodyText": "Since we set a default value to SSL_VERIFICATION, SSL_VERIFICATION.getValue(properties).isPresent() is always true.\nTherefore, if we use SSL_VERIFICATION.getValue(properties).isPresent() in the Predicate, as long as the SSL property is not set, the following exception will be thrown:\njava.sql.SQLException: Connection property 'SSLVerification' is not allowed", "author": "choiwaiyiu", "createdAt": "2020-10-22T07:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0MDU5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk1MTUyOA==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509951528", "bodyText": "I don't get it. How getValue(properties) return a default value when there is no value? If that would be a case then we don't need getValueOrDefault.", "author": "kokosing", "createdAt": "2020-10-22T07:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0MDU5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2MTA5Nw==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509961097", "bodyText": "In PrestoDriverUri the default properties are merge into a Properties object which will be validated.\nAs a result, the key of SSL_VERIFICATION will always exist in the Properties object even if it is not provided in the uri or driver properties.\nTherefore, when the SSL property is not set, the exception java.sql.SQLException: Connection property 'SSLVerification' is not allowed will be thrown.", "author": "choiwaiyiu", "createdAt": "2020-10-22T08:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0MDU5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MzI3Nw==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r509973277", "bodyText": "Setting a default value to the SSL property should solve issue. I actually once tried this approach but failed to make the program function correctly. Then I used to isProvided approach.\nBut now I think that maybe the \"setting default value to SSL\" approach did not work was just because I set a wrong condition to check if the SSL_VERIFICATION is allowed in the Predicate.\nI will try to resolve this problem by setting a default value to the SSL property without using the isProvided variable. I apologize for committing the code without thinking about this problem thoroughly enough.", "author": "choiwaiyiu", "createdAt": "2020-10-22T08:25:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0MDU5OQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2MDkyNA==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r510060924", "bodyText": "If we set default values to SSL and SSL_VERIFICATION, the previous code will throw an exception in the following case:\n\nBoth of SSL and SSL_VERIFICATION are not provided in the URI or driver properties\nThe default values of SSL and SSL_VERIFICATION are merged into the variable properties\nSSL=false by default\nSSL=false and SSL_VERIFICATION in properties => java.sql.SQLException: Connection property 'SSLVerification' is not allowed\n\nI tried to solve this problem by first validating the provided properties, then merging the default properties into the variable properties without overwriting.", "author": "choiwaiyiu", "createdAt": "2020-10-22T10:42:35Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -103,10 +109,14 @@ private PrestoDriverUri(URI uri, Properties driverProperties)\n     {\n         this.uri = requireNonNull(uri, \"uri is null\");\n         address = HostAndPort.fromParts(uri.getHost(), uri.getPort());\n-        properties = mergeConnectionProperties(uri, driverProperties);\n+        properties = mergeProvidedProperties(uri, driverProperties);\n+\n+        setSSLPropertyByPortIfNotProvided(properties, uri);\n \n         validateConnectionProperties(properties);\n \n+        setDefaultPropertiesIfNotProvided(properties);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2NzYzNQ==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511867635", "bodyText": "Maybe SSL_VERIFICATION should not have default value then or be ignored when SSL=false?", "author": "kokosing", "createdAt": "2020-10-26T10:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2MDkyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg5Mzk2Mg==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511893962", "bodyText": "When SSL=false is set by the user and SSL_VERIFICATION is also set by the user, an exception should be thrown stating that SSL_VERIFICATION is not allowed.\nIf there is a default value for SSL_VERIFICATION and the logic to set the properties remains the same, I am not sure how to tell if the default value is overwritten or not and such information is required to determine if SSL_VERIFICATION is allowed or not.\nFor example, for the following cases:\n\nSSL_VERIFICATION=FULL (set by the user), and SSL is not set.\nSSL_VERIFICATION=FULL (set by the user), and SSL=false is set.\nSSL_VERIFICATION=FULL (by default), and SSL is not set.\nSSL_VERIFICATION=FULL (by default), and SSL=false is set.\n\nCase 1 and 2 should throw an exception.\nCase 3 and 4 should ignore the default value of SSL_VERIFICATION  and no exception should be thrown.\n@kokosing Should we implement the SSLVerification parameter without a default value?", "author": "choiwaiyiu", "createdAt": "2020-10-26T11:33:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2MDkyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkxMDQ2Mw==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511910463", "bodyText": "Should we implement the SSLVerification parameter without a default value?\n\nYes, that sounds like a good idea. Thank you!", "author": "kokosing", "createdAt": "2020-10-26T12:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2MDkyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkxNjA2MA==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511916060", "bodyText": "Thank you for the confirmation. Will implement it without a default value.", "author": "choiwaiyiu", "createdAt": "2020-10-26T12:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA2MDkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3MTY5Mg==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r510071692", "bodyText": "@kokosing I am not sure how to avoid calling orElse(FULL) after getValueOrDefault(properties).\nMay I ask for your advice? Thank you.", "author": "choiwaiyiu", "createdAt": "2020-10-22T11:02:00Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -215,7 +225,8 @@ public void setupClient(OkHttpClient.Builder builder)\n                 builder.addInterceptor(basicAuth(getUser(), password));\n             }\n \n-            if (useSecureConnection) {\n+            SslVerificationMode sslVerificationMode = SSL_VERIFICATION.getValueOrDefault(properties).orElse(FULL);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4MzE2MA==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r510183160", "bodyText": "Replace it with orElseThrow(). We expect it to have a default value, so it should fail otherwise.", "author": "kokosing", "createdAt": "2020-10-22T13:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3MTY5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5OTY2Mg==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r510199662", "bodyText": "Resolved. Thank you.", "author": "choiwaiyiu", "createdAt": "2020-10-22T14:18:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3MTY5Mg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNTY1MQ==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511815651", "bodyText": "Please define this in SslVerification and reuse it.", "author": "kokosing", "createdAt": "2020-10-26T09:19:07Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -256,9 +275,12 @@ public Ssl()\n         private static final Predicate<Properties> IF_SSL_ENABLED =\n                 checkedPredicate(properties -> SSL.getValue(properties).orElse(false));\n \n+        private static final Predicate<Properties> IF_SSL_VERIFICATION_ENABLED =", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2ODQ1Mw==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511868453", "bodyText": "Changed the code to define IF_SSL_VERIFICATION_ENABLED in SslVerification and reuse it.\nStatic import is not used in order to declare SslVerification as a private class (as other property classes are).", "author": "choiwaiyiu", "createdAt": "2020-10-26T10:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNTY1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNzg3MA==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511817870", "bodyText": "checkedPredicate(properties ->  !SSL_VERIFICATION.getValueOrDefault(properties).orElseThrow().equals(SslVerificationMode.NONE));\n\nWhat SSL_VERIFICATION.getValueOrDefault(properties).isEmpty() would mean? NONE or FULL. I think we require a value here, we cannot evaluate this predicate to false if value is not set as that would mean NONE.", "author": "kokosing", "createdAt": "2020-10-26T09:22:52Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -256,9 +275,12 @@ public Ssl()\n         private static final Predicate<Properties> IF_SSL_ENABLED =\n                 checkedPredicate(properties -> SSL.getValue(properties).orElse(false));\n \n+        private static final Predicate<Properties> IF_SSL_VERIFICATION_ENABLED =\n+                checkedPredicate(properties -> SSL_VERIFICATION.getValueOrDefault(properties).isPresent() && !SSL_VERIFICATION.getValueOrDefault(properties).get().equals(SslVerificationMode.NONE));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMzMyNg==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511833326", "bodyText": "SSL_VERIFICATION is expected to have a default value.\nIf SSL_VERIFICATION.getValueOrDefault(properties).isEmpty(), should an exception be thrown just like what is done in PrestoDriverUri?\nSslVerificationMode sslVerificationMode = SSL_VERIFICATION.getValueOrDefault(properties).orElseThrow(() ->\n                            new SQLException(\"No default value for connection property \" + SSL_VERIFICATION.getKey()));", "author": "choiwaiyiu", "createdAt": "2020-10-26T09:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNzg3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2MjMzMA==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511862330", "bodyText": "SSL_VERIFICATION is expected to have a default value.\n\nYes, so SSL_VERIFICATION.getValueOrDefault(properties).isPresent() is not needed here.", "author": "kokosing", "createdAt": "2020-10-26T10:35:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNzg3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg3MDU3MA==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511870570", "bodyText": "Fixed the code to throw an exception instead of disallowing SSL_VERIFICATION.\nSSL_VERIFICATION.getValueOrDefault(properties).isPresent() was removed.", "author": "choiwaiyiu", "createdAt": "2020-10-26T10:49:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxNzg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxOTgzMg==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511819832", "bodyText": "you changed the logic here. Previously port could influence if SSL is enabled, now SSL is changing the port. Please revert that change.", "author": "kokosing", "createdAt": "2020-10-26T09:25:58Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -103,12 +109,17 @@ private PrestoDriverUri(URI uri, Properties driverProperties)\n     {\n         this.uri = requireNonNull(uri, \"uri is null\");\n         address = HostAndPort.fromParts(uri.getHost(), uri.getPort());\n-        properties = mergeConnectionProperties(uri, driverProperties);\n+        properties = mergeProvidedProperties(uri, driverProperties);\n+\n+        setSSLPropertyByPortIfNotProvided(properties, uri);\n \n         validateConnectionProperties(properties);\n \n+        setDefaultPropertiesIfNotProvided(properties);\n+\n         // enable SSL by default for standard port\n-        useSecureConnection = SSL.getValue(properties).orElse(uri.getPort() == 443);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg0Mzc3Nw==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511843777", "bodyText": "I move the logic to the following method. The logic should be the same.\nSince we need to make SSL_VERIFICATION valid when SSL is not set by the user and the port is 443, the following method needs to be executed before validateConnectionProperties().\n(I should use isEmpty() instead of !isPresent())\nprivate static void setSSLPropertyByPortIfNotProvided(Properties properties, URI uri)\n            throws SQLException\n    {\n        if (!SSL.getValue(properties).isPresent()) {\n            properties.setProperty(SSL.getKey(), Boolean.toString((uri.getPort() == 443)));\n        }\n    }", "author": "choiwaiyiu", "createdAt": "2020-10-26T10:04:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgxOTgzMg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2Mjg1OQ==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511862859", "bodyText": "Why this method was renamed?", "author": "kokosing", "createdAt": "2020-10-26T10:36:35Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -103,12 +109,17 @@ private PrestoDriverUri(URI uri, Properties driverProperties)\n     {\n         this.uri = requireNonNull(uri, \"uri is null\");\n         address = HostAndPort.fromParts(uri.getHost(), uri.getPort());\n-        properties = mergeConnectionProperties(uri, driverProperties);\n+        properties = mergeProvidedProperties(uri, driverProperties);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2NTAzOA==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511865038", "bodyText": "Please use org.assertj.core.api.Assertions.assertThatThrownBy; instead of expectedExceptions", "author": "kokosing", "createdAt": "2020-10-26T10:40:11Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestPrestoDriverAuth.java", "diffHunk": "@@ -230,6 +230,126 @@ public void testFailedUnknownPublicKey()\n         }\n     }\n \n+    @Test\n+    public void testSuccessFullSslVerification()\n+            throws Exception\n+    {\n+        String accessToken = Jwts.builder()\n+                .setSubject(\"test\")\n+                .setHeaderParam(KEY_ID, \"33\")\n+                .signWith(SignatureAlgorithm.RS256, privateKey33)\n+                .compact();\n+\n+        try (Connection connection = createConnection(ImmutableMap.of(\"accessToken\", accessToken, \"SSLVerification\", \"FULL\"))) {\n+            try (Statement statement = connection.createStatement()) {\n+                assertTrue(statement.execute(\"SELECT 123\"));\n+                ResultSet rs = statement.getResultSet();\n+                assertTrue(rs.next());\n+                assertEquals(rs.getLong(1), 123);\n+                assertFalse(rs.next());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testSuccessCaSslVerification()\n+            throws Exception\n+    {\n+        String accessToken = Jwts.builder()\n+                .setSubject(\"test\")\n+                .setHeaderParam(KEY_ID, \"33\")\n+                .signWith(SignatureAlgorithm.RS256, privateKey33)\n+                .compact();\n+\n+        try (Connection connection = createConnection(ImmutableMap.of(\"accessToken\", accessToken, \"SSLVerification\", \"CA\"))) {\n+            try (Statement statement = connection.createStatement()) {\n+                assertTrue(statement.execute(\"SELECT 123\"));\n+                ResultSet rs = statement.getResultSet();\n+                assertTrue(rs.next());\n+                assertEquals(rs.getLong(1), 123);\n+                assertFalse(rs.next());\n+            }\n+        }\n+    }\n+\n+    // TODO: testSuccessCaSslVerificationMismatchedHostnameValidCA()\n+\n+    // TODO: testSuccessNoneSslVerificationMismatchedHostname()\n+\n+    // TODO: testSuccessNoneSslVerificationInvalidCA()\n+\n+    @Test(expectedExceptions = SQLException.class, expectedExceptionsMessageRegExp = \"Connection property 'SSLVerification' is not allowed\")", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2NzcyNw==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511867727", "bodyText": "This affects mergeProvidedProperties and things that were overwritten there will be no longer overwritten.", "author": "kokosing", "createdAt": "2020-10-26T10:44:51Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -359,16 +389,23 @@ private static Properties mergeConnectionProperties(URI uri, Properties driverPr\n         }\n \n         Properties result = new Properties();\n-        setProperties(result, defaults);\n         setProperties(result, urlProperties);\n         setProperties(result, suppliedProperties);\n         return result;\n     }\n \n+    private static void setDefaultPropertiesIfNotProvided(Properties properties)\n+    {\n+        Map<String, String> defaults = ConnectionProperties.getDefaults();\n+        setProperties(properties, defaults);\n+    }\n+\n     private static void setProperties(Properties properties, Map<String, String> values)\n     {\n         for (Entry<String, String> entry : values.entrySet()) {\n-            properties.setProperty(entry.getKey(), entry.getValue());\n+            if (!properties.containsKey(entry.getKey())) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2ODY1Nw==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r511868657", "bodyText": "I would prefer to have this code to work as it worked previously that defaults are overwritten instead of added later.", "author": "kokosing", "createdAt": "2020-10-26T10:46:25Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoDriverUri.java", "diffHunk": "@@ -359,16 +389,23 @@ private static Properties mergeConnectionProperties(URI uri, Properties driverPr\n         }\n \n         Properties result = new Properties();\n-        setProperties(result, defaults);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0ODgwNQ==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r512448805", "bodyText": "Static import is not applied to SslVerificationMode.FULL and SslVerificationMode.NONE as io.prestosql.client.ClientSelectedRole.Type.NONE has already been imported.", "author": "choiwaiyiu", "createdAt": "2020-10-27T06:45:24Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/ConnectionProperties.java", "diffHunk": "@@ -250,15 +257,27 @@ public Ssl()\n         }\n     }\n \n-    private static class SslKeyStorePath\n-            extends AbstractConnectionProperty<String>\n+    private static class SslVerification\n+            extends AbstractConnectionProperty<SslVerificationMode>\n     {\n         private static final Predicate<Properties> IF_SSL_ENABLED =\n                 checkedPredicate(properties -> SSL.getValue(properties).orElse(false));\n \n+        static final Predicate<Properties> IF_SSL_VERIFICATION_ENABLED =\n+                IF_SSL_ENABLED.and(checkedPredicate(properties -> !SSL_VERIFICATION.getValue(properties).orElse(SslVerificationMode.FULL).equals(SslVerificationMode.NONE)));\n+", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5NDgzMQ==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r512494831", "bodyText": "Can you please add a test where port 443 is used and when there is no SSL=true given but SSLVerification is set.", "author": "kokosing", "createdAt": "2020-10-27T08:25:39Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestPrestoDriverUri.java", "diffHunk": "@@ -234,6 +266,39 @@ public void testUriWithSslEnabledPassword()\n         assertEquals(properties.getProperty(SSL_TRUST_STORE_PASSWORD.getKey()), \"password\");\n     }\n \n+    @Test\n+    public void testUriWithSslEnabledUsing443SslVerificationFull()\n+            throws SQLException\n+    {\n+        PrestoDriverUri parameters = createDriverUri(\"presto://localhost:443/blackhole?SSL=true&SSLVerification=FULL\");\n+        assertUriPortScheme(parameters, 443, \"https\");\n+\n+        Properties properties = parameters.getProperties();\n+        assertEquals(properties.getProperty(SSL_VERIFICATION.getKey()), FULL.name());\n+    }\n+\n+    @Test\n+    public void testUriWithSslEnabledUsing443SslVerificationCA()\n+            throws SQLException\n+    {\n+        PrestoDriverUri parameters = createDriverUri(\"presto://localhost:443/blackhole?SSL=true&SSLVerification=CA\");\n+        assertUriPortScheme(parameters, 443, \"https\");\n+\n+        Properties properties = parameters.getProperties();\n+        assertEquals(properties.getProperty(SSL_VERIFICATION.getKey()), CA.name());\n+    }\n+\n+    @Test\n+    public void testUriWithSslEnabledUsing443SslVerificationNONE()\n+            throws SQLException\n+    {\n+        PrestoDriverUri parameters = createDriverUri(\"presto://localhost:443/blackhole?SSL=true&SSLVerification=NONE\");\n+        assertUriPortScheme(parameters, 443, \"https\");\n+\n+        Properties properties = parameters.getProperties();\n+        assertEquals(properties.getProperty(SSL_VERIFICATION.getKey()), NONE.name());\n+    }\n+", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUxMjg1OA==", "url": "https://github.com/trinodb/trino/pull/5610#discussion_r512512858", "bodyText": "Added a test which expects an exception java.sql.SQLException: Connection property 'SSLVerification' is not allowed.\nThis matches the behavior of SslKeyStorePath and SslTrustStorePath.\nAlso added similar tests for SslKeyStorePath and SslTrustStorePath.", "author": "choiwaiyiu", "createdAt": "2020-10-27T08:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5NDgzMQ=="}], "type": "inlineReview"}, {"oid": "9fe8573a0b8582a41b90dfd5cd60bd973882eb60", "url": "https://github.com/trinodb/trino/commit/9fe8573a0b8582a41b90dfd5cd60bd973882eb60", "message": "Implement SSLVerification parameter to JDBC drive", "committedDate": "2020-10-27T08:50:14Z", "type": "commit"}, {"oid": "9fe8573a0b8582a41b90dfd5cd60bd973882eb60", "url": "https://github.com/trinodb/trino/commit/9fe8573a0b8582a41b90dfd5cd60bd973882eb60", "message": "Implement SSLVerification parameter to JDBC drive", "committedDate": "2020-10-27T08:50:14Z", "type": "forcePushed"}]}