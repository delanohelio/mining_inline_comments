{"pr_number": 3496, "pr_title": "Minor cleanups in planner", "pr_createdAt": "2020-04-21T01:54:46Z", "pr_url": "https://github.com/trinodb/trino/pull/3496", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5OTQ4OA==", "url": "https://github.com/trinodb/trino/pull/3496#discussion_r412399488", "bodyText": "mappings values are mutable lists. Maybe make immutable copies or use ImmutableListMultimap instead?", "author": "kasiafi", "createdAt": "2020-04-21T18:38:38Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/Analysis.java", "diffHunk": "@@ -987,6 +999,28 @@ public GroupingSetAnalysis(\n         }\n     }\n \n+    public static class UnnestAnalysis\n+    {\n+        private final Map<NodeRef<Expression>, List<Field>> mappings;\n+        private final Optional<Field> ordinalityField;\n+\n+        public UnnestAnalysis(Map<NodeRef<Expression>, List<Field>> mappings, Optional<Field> ordinalityField)\n+        {\n+            this.mappings = requireNonNull(mappings, \"mappings is null\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxNjMxNg==", "url": "https://github.com/trinodb/trino/pull/3496#discussion_r412416316", "bodyText": "You could use analysis.getOutputDescriptor(node) instead of analysis.getScope(node).getRelationType()", "author": "kasiafi", "createdAt": "2020-04-21T19:03:57Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -715,16 +668,48 @@ else if (type instanceof MapType) {\n             }\n         }\n \n+        return planUnnest(\n+                initializePlanBuilder(leftPlan),\n+                node,\n+                leftPlan.getRoot().getOutputSymbols(),\n+                filterExpression,\n+                joinNode.getType(),\n+                analysis.getScope(joinNode));\n+    }\n+\n+    private RelationPlan planUnnest(PlanBuilder subPlan, Unnest node, List<Symbol> replicatedColumns, Optional<Expression> filter, Join.Type type, Scope outputScope)\n+    {\n+        subPlan = subPlan.appendProjections(node.getExpressions(), symbolAllocator, idAllocator);\n+\n+        Map<Field, Symbol> allocations = analysis.getScope(node)\n+                .getRelationType()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0MzUzMA==", "url": "https://github.com/trinodb/trino/pull/3496#discussion_r412443530", "bodyText": "The parameter replicatedColumns defined as leftPlan.getRoot().getOutputSymbols() is not equivalent to leftPlan.getFieldMappings(), used here before the change. But it seems correct. Should we consider it a fix?", "author": "kasiafi", "createdAt": "2020-04-21T19:46:54Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/RelationPlanner.java", "diffHunk": "@@ -715,16 +668,48 @@ else if (type instanceof MapType) {\n             }\n         }\n \n+        return planUnnest(\n+                initializePlanBuilder(leftPlan),\n+                node,\n+                leftPlan.getRoot().getOutputSymbols(),\n+                filterExpression,\n+                joinNode.getType(),\n+                analysis.getScope(joinNode));\n+    }\n+\n+    private RelationPlan planUnnest(PlanBuilder subPlan, Unnest node, List<Symbol> replicatedColumns, Optional<Expression> filter, Join.Type type, Scope outputScope)\n+    {\n+        subPlan = subPlan.appendProjections(node.getExpressions(), symbolAllocator, idAllocator);\n+\n+        Map<Field, Symbol> allocations = analysis.getScope(node)\n+                .getRelationType()\n+                .getVisibleFields().stream()\n+                .collect(toImmutableMap(Function.identity(), symbolAllocator::newSymbol));\n+\n+        UnnestAnalysis unnestAnalysis = analysis.getUnnest(node);\n+        ImmutableMap.Builder<Symbol, List<Symbol>> mappings = ImmutableMap.builder();\n+        for (Expression expression : node.getExpressions()) {\n+            Symbol input = subPlan.translate(expression);\n+            List<Symbol> outputs = unnestAnalysis.getMappings().get(NodeRef.of(expression)).stream()\n+                    .map(allocations::get)\n+                    .collect(toImmutableList());\n+\n+            mappings.put(input, outputs);\n+        }\n+\n         UnnestNode unnestNode = new UnnestNode(\n                 idAllocator.getNextId(),\n-                projectNode,\n-                leftPlan.getFieldMappings(),\n-                unnestSymbols.build(),\n-                ordinalitySymbol,\n-                JoinNode.Type.typeConvert(joinNode.getType()),\n-                filterExpression);\n-\n-        return new RelationPlan(unnestNode, analysis.getScope(joinNode), unnestNode.getOutputSymbols());\n+                subPlan.getRoot(),\n+                replicatedColumns,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyNTg2MA==", "url": "https://github.com/trinodb/trino/pull/3496#discussion_r412725860", "bodyText": "Good catch. Actually, it needs to be getFieldMappings() to guarantee that the order of the symbols from leftPlan matches the order of the fields described by the output descriptor for the join node.", "author": "martint", "createdAt": "2020-04-22T07:08:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0MzUzMA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "bbd40a97af84667f57af446930384db8eb444f94", "url": "https://github.com/trinodb/trino/commit/bbd40a97af84667f57af446930384db8eb444f94", "message": "Clean up planning of unnest\n\nThe decision of how unnest expressions map to output fields\nis now determined by the analyzer. Doing this in the planner\nduplicates effort and is brittle.", "committedDate": "2020-04-27T17:11:17Z", "type": "commit"}, {"oid": "bbd40a97af84667f57af446930384db8eb444f94", "url": "https://github.com/trinodb/trino/commit/bbd40a97af84667f57af446930384db8eb444f94", "message": "Clean up planning of unnest\n\nThe decision of how unnest expressions map to output fields\nis now determined by the analyzer. Doing this in the planner\nduplicates effort and is brittle.", "committedDate": "2020-04-27T17:11:17Z", "type": "forcePushed"}]}