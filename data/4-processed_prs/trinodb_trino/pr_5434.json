{"pr_number": 5434, "pr_title": "Add dynamic filter collection time stats", "pr_createdAt": "2020-10-06T14:53:07Z", "pr_url": "https://github.com/trinodb/trino/pull/5434", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwODI4MQ==", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500508281", "bodyText": "Use dynamicFilterCollectionTime.get(filterId) and perform null check on that to avoid lookup in map twice", "author": "raunaqmorarka", "createdAt": "2020-10-06T18:25:45Z", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -683,6 +727,15 @@ private void stageCannotScheduleMoreTasks(StageId stageId, int numberOfTasks)\n         {\n             return replicatedDynamicFilters;\n         }\n+\n+        private Optional<Duration> getDynamicFilterCollectionDuration(DynamicFilterId filterId)\n+        {\n+            if (queryStartTime.get() == null || !dynamicFilterCollectionTime.containsKey(filterId)) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyODA1NA==", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500828054", "bodyText": "This has would have nice added value that the code is properly guarded even if there are map .remove calls somewhere -- now, or in the future. (there aren't today)", "author": "findepi", "createdAt": "2020-10-07T08:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwODI4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyNDUyNw==", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500824527", "bodyText": "does this belong to  registerQuery overload being called above?", "author": "findepi", "createdAt": "2020-10-07T08:19:20Z", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -123,6 +127,12 @@ public void registerQuery(SqlQueryExecution sqlQueryExecution, SubPlan fragmente\n                     dynamicFilters,\n                     lazyDynamicFilters,\n                     replicatedDynamicFilters);\n+\n+            sqlQueryExecution.addStateChangeListener(state -> {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzMzg5NQ==", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500833895", "bodyText": "nope. One needs SqlQueryExecution to register for events. The other overload is for testing", "author": "sopel39", "createdAt": "2020-10-07T08:33:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyNDUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyNjM0OA==", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500826348", "bodyText": "The query will be STARTING very soon:\nhttps://github.com/prestosql/presto/blob/a29fc64a478818c52c0714e05d24241cc6ef4464/presto-main/src/main/java/io/prestosql/execution/SqlQueryExecution.java#L376-L379\nthe callback adds complexity & theoretical uncertainty whcih i would prefer to avoid, if possible.\nwould it be still OK to start the timer immediately here?", "author": "findepi", "createdAt": "2020-10-07T08:22:06Z", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -123,6 +127,12 @@ public void registerQuery(SqlQueryExecution sqlQueryExecution, SubPlan fragmente\n                     dynamicFilters,\n                     lazyDynamicFilters,\n                     replicatedDynamicFilters);\n+\n+            sqlQueryExecution.addStateChangeListener(state -> {\n+                if (state == STARTING) {\n+                    queryIsStarting(sqlQueryExecution.getQueryId());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzNDcxMw==", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500834713", "bodyText": "Yes. Makes sense.", "author": "sopel39", "createdAt": "2020-10-07T08:35:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyNjM0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyNzAwNg==", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500827006", "bodyText": "rnn", "author": "findepi", "createdAt": "2020-10-07T08:23:05Z", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -521,18 +547,21 @@ public int hashCode()\n         private final String simplifiedDomain;\n         private final int rangeCount;\n         private final int discreteValuesCount;\n+        private final Optional<Duration> collectionDuration;\n \n         @JsonCreator\n         public DynamicFilterDomainStats(\n                 @JsonProperty(\"dynamicFilterId\") DynamicFilterId dynamicFilterId,\n                 @JsonProperty(\"simplifiedDomain\") String simplifiedDomain,\n                 @JsonProperty(\"rangeCount\") int rangeCount,\n-                @JsonProperty(\"discreteValuesCount\") int discreteValuesCount)\n+                @JsonProperty(\"discreteValuesCount\") int discreteValuesCount,\n+                @JsonProperty(\"collectionDuration\") Optional<Duration> collectionDuration)\n         {\n             this.dynamicFilterId = dynamicFilterId;\n             this.simplifiedDomain = simplifiedDomain;\n             this.rangeCount = rangeCount;\n             this.discreteValuesCount = discreteValuesCount;\n+            this.collectionDuration = collectionDuration;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyODU4MQ==", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500828581", "bodyText": "under what circumstances can queryStartTime.get() == null?", "author": "findepi", "createdAt": "2020-10-07T08:25:28Z", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -683,6 +727,15 @@ private void stageCannotScheduleMoreTasks(StageId stageId, int numberOfTasks)\n         {\n             return replicatedDynamicFilters;\n         }\n+\n+        private Optional<Duration> getDynamicFilterCollectionDuration(DynamicFilterId filterId)\n+        {\n+            if (queryStartTime.get() == null || !dynamicFilterCollectionTime.containsKey(filterId)) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg0ODAzNg==", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500848036", "bodyText": "state listeners are executed asynchroniusly, so they could be late. Anyway, I've removed using of state listener completely", "author": "sopel39", "createdAt": "2020-10-07T08:55:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyODU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyODg2OA==", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500828868", "bodyText": "fmt: all args to new DynamicFilterDomainStats should be on the new DynamicFilterDomainStats line, or each on separate line", "author": "findepi", "createdAt": "2020-10-07T08:25:57Z", "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -127,7 +127,7 @@ public void testDynamicFilterSummaryCompletion()\n         assertEquals(\n                 stats.getDynamicFilterDomainStats(),\n                 ImmutableList.of(new DynamicFilterDomainStats(\n-                        filterId, getExpectedDomainString(1L, 3L), 3, 0)));\n+                        filterId, getExpectedDomainString(1L, 3L), 3, 0, Optional.empty())));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyOTA2Ng==", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500829066", "bodyText": "fmt: all args to new DynamicFilterDomainStats should be on the new DynamicFilterDomainStats line, or each on separate line", "author": "findepi", "createdAt": "2020-10-07T08:26:15Z", "path": "presto-main/src/test/java/io/prestosql/server/TestDynamicFilterService.java", "diffHunk": "@@ -292,11 +292,11 @@ public void testDynamicFilter()\n         assertEquals(stats.getReplicatedDynamicFilters(), 0);\n         assertEquals(ImmutableSet.copyOf(stats.getDynamicFilterDomainStats()), ImmutableSet.of(\n                 new DynamicFilterDomainStats(\n-                        filterId1, getExpectedDomainString(1L, 2L), 2, 0),\n+                        filterId1, getExpectedDomainString(1L, 2L), 2, 0, Optional.empty()),\n                 new DynamicFilterDomainStats(\n-                        filterId2, getExpectedDomainString(2L, 3L), 2, 0),\n+                        filterId2, getExpectedDomainString(2L, 3L), 2, 0, Optional.empty()),\n                 new DynamicFilterDomainStats(\n-                        filterId3, Domain.none(INTEGER).toString(session.toConnectorSession()), 0, 0)));\n+                        filterId3, Domain.none(INTEGER).toString(session.toConnectorSession()), 0, 0, Optional.empty())));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyOTM5MA==", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500829390", "bodyText": "verify(queryStartTime.get() == 0, \"queryStartTime already set\");", "author": "findepi", "createdAt": "2020-10-07T08:26:48Z", "path": "presto-main/src/main/java/io/prestosql/server/DynamicFilterService.java", "diffHunk": "@@ -669,6 +708,11 @@ private void stageCannotScheduleMoreTasks(StageId stageId, int numberOfTasks)\n             stageNumberOfTasks.put(stageId, numberOfTasks);\n         }\n \n+        private void queryIsStarting()\n+        {\n+            queryStartTime.set(System.nanoTime());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg0NzQ5Mw==", "url": "https://github.com/trinodb/trino/pull/5434#discussion_r500847493", "bodyText": "removed", "author": "sopel39", "createdAt": "2020-10-07T08:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyOTM5MA=="}], "type": "inlineReview"}, {"oid": "6a3cd2f03b3dee547eca43f2072fe96ff395654b", "url": "https://github.com/trinodb/trino/commit/6a3cd2f03b3dee547eca43f2072fe96ff395654b", "message": "Add dynamic filter collection time stats", "committedDate": "2020-10-07T08:57:57Z", "type": "commit"}, {"oid": "38573d2814314ea83856952107c0fc8cea7ce676", "url": "https://github.com/trinodb/trino/commit/38573d2814314ea83856952107c0fc8cea7ce676", "message": "Use requireNonNull", "committedDate": "2020-10-07T08:57:57Z", "type": "commit"}, {"oid": "97312764d7946cd16aadcaf530502f033235299e", "url": "https://github.com/trinodb/trino/commit/97312764d7946cd16aadcaf530502f033235299e", "message": "Fix formatting", "committedDate": "2020-10-07T09:00:10Z", "type": "commit"}, {"oid": "97312764d7946cd16aadcaf530502f033235299e", "url": "https://github.com/trinodb/trino/commit/97312764d7946cd16aadcaf530502f033235299e", "message": "Fix formatting", "committedDate": "2020-10-07T09:00:10Z", "type": "forcePushed"}]}