{"pr_number": 4349, "pr_title": "Fix old client compatibility with parametric timestamp type", "pr_createdAt": "2020-07-05T19:01:08Z", "pr_url": "https://github.com/trinodb/trino/pull/4349", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzU2OA==", "url": "https://github.com/trinodb/trino/pull/4349#discussion_r449917568", "bodyText": "We should introduce a configuration option / session property to toggle this behavior. It will be temporary until clients get a chance to update their logic to handle variable-precision types.", "author": "martint", "createdAt": "2020-07-05T20:52:02Z", "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaPageSource.java", "diffHunk": "@@ -249,10 +251,21 @@ private void addColumnsRecords(QualifiedTablePrefix prefix)\n         for (Map.Entry<SchemaTableName, List<ColumnMetadata>> entry : listTableColumns(session, metadata, accessControl, prefix).entrySet()) {\n             SchemaTableName tableName = entry.getKey();\n             int ordinalPosition = 1;\n+            String columnDisplayName = \"\";\n             for (ColumnMetadata column : entry.getValue()) {\n                 if (column.isHidden()) {\n                     continue;\n                 }\n+                if (column.getType() instanceof TimestampType && ((TimestampType) column.getType()).getPrecision() == TimestampType.DEFAULT_PRECISION) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzNzIzNA==", "url": "https://github.com/trinodb/trino/pull/4349#discussion_r450137234", "bodyText": "Working on this change now.", "author": "sajjoseph", "createdAt": "2020-07-06T10:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzU2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4Mjc0OQ==", "url": "https://github.com/trinodb/trino/pull/4349#discussion_r450982749", "bodyText": "Made the changes to allow session level parameter to control this option.", "author": "sajjoseph", "createdAt": "2020-07-07T16:12:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzU2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzYyMw==", "url": "https://github.com/trinodb/trino/pull/4349#discussion_r449917623", "bodyText": "This variable can be declared inside the look, right before if (column.getType instanceof ...)", "author": "martint", "createdAt": "2020-07-05T20:52:41Z", "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaPageSource.java", "diffHunk": "@@ -249,10 +251,21 @@ private void addColumnsRecords(QualifiedTablePrefix prefix)\n         for (Map.Entry<SchemaTableName, List<ColumnMetadata>> entry : listTableColumns(session, metadata, accessControl, prefix).entrySet()) {\n             SchemaTableName tableName = entry.getKey();\n             int ordinalPosition = 1;\n+            String columnDisplayName = \"\";", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkzMzQ2Nw==", "url": "https://github.com/trinodb/trino/pull/4349#discussion_r449933467", "bodyText": "Will do.", "author": "sajjoseph", "createdAt": "2020-07-05T23:58:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzYyMw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NTc5OA==", "url": "https://github.com/trinodb/trino/pull/4349#discussion_r450575798", "bodyText": "legacy already has a special meaning for timestamps. It's used to indicate timestamp semantics where timestamps are treated like instants.\nI would suggest a different name, such as \"omit_timestamp_precision\"", "author": "martint", "createdAt": "2020-07-07T02:22:35Z", "path": "presto-main/src/main/java/io/prestosql/SystemSessionProperties.java", "diffHunk": "@@ -128,6 +128,7 @@\n     public static final String REQUIRED_WORKERS_COUNT = \"required_workers_count\";\n     public static final String REQUIRED_WORKERS_MAX_WAIT_TIME = \"required_workers_max_wait_time\";\n     public static final String COST_ESTIMATION_WORKER_COUNT = \"cost_estimation_worker_count\";\n+    public static final String ENABLE_LEGACY_TIMESTAMP_FORMAT_SUPPORT = \"enable_legacy_timestamp_support\";", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAzNzM3OQ==", "url": "https://github.com/trinodb/trino/pull/4349#discussion_r451037379", "bodyText": "done.", "author": "sajjoseph", "createdAt": "2020-07-07T17:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NTc5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NjQwMA==", "url": "https://github.com/trinodb/trino/pull/4349#discussion_r450576400", "bodyText": "See comment above. Also, let's prefix the config option with deprecated. to make it clear this is on its way out.", "author": "martint", "createdAt": "2020-07-07T02:24:45Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/FeaturesConfig.java", "diffHunk": "@@ -215,6 +216,18 @@ public FeaturesConfig setDistributedIndexJoinsEnabled(boolean distributedIndexJo\n         return this;\n     }\n \n+    public boolean isLegacyTimestampFormatEnabled()\n+    {\n+        return enableLegacyTimestampFormat;\n+    }\n+\n+    @Config(\"legacy-timestamp-format-enabled\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAzNzE5MQ==", "url": "https://github.com/trinodb/trino/pull/4349#discussion_r451037191", "bodyText": "Fixed", "author": "sajjoseph", "createdAt": "2020-07-07T17:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NjQwMA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "cede23053c5f952f68bcef77d3242c0a8fa0b31e", "url": "https://github.com/trinodb/trino/commit/cede23053c5f952f68bcef77d3242c0a8fa0b31e", "message": "Add option to render timestamp type without precision\n\nSome clients expect timestamp and timestamp w/ timezone type names\nto be rendered without precision. The recent changes to add support\nfor variable precision timestamp types break this assumption.\n\nThis change introduces a configuration option and session property\nto restore the old behavior while client implementations are fixed.", "committedDate": "2020-07-07T17:59:58Z", "type": "commit"}, {"oid": "cede23053c5f952f68bcef77d3242c0a8fa0b31e", "url": "https://github.com/trinodb/trino/commit/cede23053c5f952f68bcef77d3242c0a8fa0b31e", "message": "Add option to render timestamp type without precision\n\nSome clients expect timestamp and timestamp w/ timezone type names\nto be rendered without precision. The recent changes to add support\nfor variable precision timestamp types break this assumption.\n\nThis change introduces a configuration option and session property\nto restore the old behavior while client implementations are fixed.", "committedDate": "2020-07-07T17:59:58Z", "type": "forcePushed"}]}