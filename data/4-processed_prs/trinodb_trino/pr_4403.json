{"pr_number": 4403, "pr_title": "Don't implement and call deprecated ConnectorPageSourceProvider.createPageSource", "pr_createdAt": "2020-07-09T14:35:35Z", "pr_url": "https://github.com/trinodb/trino/pull/4403", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMDY3OA==", "url": "https://github.com/trinodb/trino/pull/4403#discussion_r453100678", "bodyText": "This is, in general, not safe. It's better to have explicit per-test exclusions", "author": "findepi", "createdAt": "2020-07-10T22:13:05Z", "path": "presto-spi/src/test/java/io/prestosql/spi/testing/InterfaceTestUtils.java", "diffHunk": "@@ -47,6 +47,10 @@ private InterfaceTestUtils() {}\n             if (method.getDeclaringClass() == Object.class) {\n                 continue;\n             }\n+            if (method.getAnnotation(Deprecated.class) != null) {\n+                // deprecated methods in interfaces exist for backwards compatibility only; they don't have to be implemented", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1ODE3MA==", "url": "https://github.com/trinodb/trino/pull/4403#discussion_r453158170", "bodyText": "This became de facto a 'pattern' in Presto code, other interfaces adhere to it as well.\nAlso if we use the solution from my next comment, this reflection-based check test becomes unnecessary.", "author": "iirekm", "createdAt": "2020-07-11T05:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMDY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5MzkzMA==", "url": "https://github.com/trinodb/trino/pull/4403#discussion_r474793930", "bodyText": "Please remove this one", "author": "findepi", "createdAt": "2020-08-21T16:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMDY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxOTQ3OQ==", "url": "https://github.com/trinodb/trino/pull/4403#discussion_r475519479", "bodyText": "done, but I don't like this solution\nwe should start using something else for backwards compatibility ASAP, for example something like XxxxResponse xxxx(XxxxRequest request), even if it may look exaggerated in the beginning", "author": "iirekm", "createdAt": "2020-08-24T10:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMDY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMTE4NA==", "url": "https://github.com/trinodb/trino/pull/4403#discussion_r453101184", "bodyText": "i'd prefer to keep it:\n\nit safes mental overhear required to justify not having it\nsomeone could use this class in their code and now would lose TCCL wrapping\n\nis there a benefit from removing it?", "author": "findepi", "createdAt": "2020-07-10T22:14:58Z", "path": "presto-plugin-toolkit/src/main/java/io/prestosql/plugin/base/classloader/ClassLoaderSafeConnectorPageSourceProvider.java", "diffHunk": "@@ -42,14 +42,6 @@ public ClassLoaderSafeConnectorPageSourceProvider(@ForClassLoaderSafe ConnectorP\n         this.classLoader = requireNonNull(classLoader, \"classLoader is null\");\n     }\n \n-    @Override\n-    public ConnectorPageSource createPageSource(ConnectorTransactionHandle transaction, ConnectorSession session, ConnectorSplit split, ConnectorTableHandle table, List<ColumnHandle> columns)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1NzkxNg==", "url": "https://github.com/trinodb/trino/pull/4403#discussion_r453157916", "bodyText": "this method was never called in Presto\n\n\ncopy&paste is also bad, makes even more confusion, especially that somebody can take this class as an example for their own implementations\n\n\nthey will have to be removed at some time in future - why promote bad behavior\n\n\nthe case when somebody calls deprecated method is rare, but indeed can be serious; maybe the pattern should be modified a bit:\n\n\ninterface Xxxxx {\n  @Deprecated\n  default void xxxxx(...) {\n    try {\n      xxxxx(...);  // call non-deprecated version (if exists)\n    } catch(StackOverflowException e) { \n       throw new UnsupportedOperationException(\"xxxxx not implemented\");\n    }\n\n   void xxxxx(...) {\n      xxxxx(...); // call deprecated version (if exists)\n   }\n}\nI know this is not the most beautiful code in the world, but for @deprecated stuff, to be removed in the future, I think it's pretty acceptable.", "author": "iirekm", "createdAt": "2020-07-11T05:22:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2MDkzNQ==", "url": "https://github.com/trinodb/trino/pull/4403#discussion_r453160935", "bodyText": "I suggest we leave the method, with throw Unsupported  as the implementation.\nThis way we have the safety you want, and also the readability provisions I want.\nAnd there is no need to relax the assertions in the test.", "author": "findepi", "createdAt": "2020-07-11T06:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NTQ0OA==", "url": "https://github.com/trinodb/trino/pull/4403#discussion_r454345448", "bodyText": "there are many more places like this, with even more serious problems, my suggestion how to solve this once and for all is here: #4448", "author": "iirekm", "createdAt": "2020-07-14T13:12:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2MTkxNQ==", "url": "https://github.com/trinodb/trino/pull/4403#discussion_r456061915", "bodyText": "Thanks for linking the two together.\nI feel strongly that ClassLoaderSafe* should just dutifully implement all methods.", "author": "findepi", "createdAt": "2020-07-16T20:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwMTE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTAwNA==", "url": "https://github.com/trinodb/trino/pull/4403#discussion_r456349004", "bodyText": "Maybe it instead of this pull request we should simply remove this deprecated method? How long ago was it deprecated?", "author": "kokosing", "createdAt": "2020-07-17T10:06:04Z", "path": "presto-pinot/src/main/java/io/prestosql/pinot/PinotPageSourceProvider.java", "diffHunk": "@@ -25,6 +25,7 @@\n import io.prestosql.spi.connector.ConnectorSplit;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIzMTIwOA==", "url": "https://github.com/trinodb/trino/pull/4403#discussion_r464231208", "bodyText": "I agree, we can just remove it now.", "author": "electrum", "createdAt": "2020-08-03T07:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ2MDg5Mg==", "url": "https://github.com/trinodb/trino/pull/4403#discussion_r474460892", "bodyText": "@iirekm How about it?", "author": "kokosing", "createdAt": "2020-08-21T07:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0OTAwNA=="}], "type": "inlineReview"}, {"oid": "eaf6099df1d45c0189b11dc8bb87486c9c74d1d1", "url": "https://github.com/trinodb/trino/commit/eaf6099df1d45c0189b11dc8bb87486c9c74d1d1", "message": "Don't implement deprecated ConnectorPageSourceProvider.createPageSource", "committedDate": "2020-08-31T10:28:04Z", "type": "commit"}]}