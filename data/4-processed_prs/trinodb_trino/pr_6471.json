{"pr_number": 6471, "pr_title": "Get Data compression only for non-indexed SQL Server tables", "pr_createdAt": "2020-12-30T02:31:17Z", "pr_url": "https://github.com/trinodb/trino/pull/6471", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAwMzYyOQ==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550003629", "bodyText": "Please move GROUP BY and HAVING to new lines.", "author": "ssheikin", "createdAt": "2020-12-30T07:53:19Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -428,9 +428,10 @@ public void setNull(PreparedStatement statement, int index)\n         return handle.createQuery(\"\" +\n                 \"SELECT data_compression_desc FROM sys.partitions p \" +\n                 \"INNER JOIN sys.tables t ON p.object_id = t.object_id \" +\n+                \"INNER JOIN sys.schemas s ON t.schema_id = s.schema_id \" +\n                 \"INNER JOIN sys.indexes i ON t.object_id = i.object_id \" +\n-                \"WHERE SCHEMA_NAME(t.schema_id) = :schema AND t.name = :table_name AND i.type IN (0,1) \" +\n-                \"AND i.data_space_id NOT IN (SELECT data_space_id FROM sys.partition_schemes)\")\n+                \"WHERE s.name = :schema AND t.name = :table_name AND p.index_id = 0 AND i.type = 0 \" +\n+                \"AND i.data_space_id NOT IN (SELECT data_space_id FROM sys.partition_schemes) GROUP BY data_compression_desc HAVING count(*) <= 1\")", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAwNjgzMw==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550006833", "bodyText": "This is not precise name as SHOW CREATE does not support indexes.\nYou test Data Compression here.\nCould you please rename this method similar to the commit message?", "author": "ssheikin", "createdAt": "2020-12-30T07:57:49Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -417,6 +417,30 @@ public void testShowCreateForPartitionedTablesWithDataCompression()\n                         \")\");\n     }\n \n+    @Test\n+    public void testShowCreateForIndexedNonPartitionedTablesWithDataCompression()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAxMTYyOQ==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550011629", "bodyText": "It's harder to compare text with regexp.\nIt's easier to compare text with text.\nPlease consider\n.matches -> isEqualTo,\n\\\\w+\\\\.\\\\w+\\\\. -> getSession().getCatalog().orElseThrow() + \".\" + getSession().getSchema().orElseThrow() + \".\" + \nMay be extract common sql part.", "author": "ssheikin", "createdAt": "2020-12-30T08:04:14Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -417,6 +417,30 @@ public void testShowCreateForPartitionedTablesWithDataCompression()\n                         \")\");\n     }\n \n+    @Test\n+    public void testShowCreateForIndexedNonPartitionedTablesWithDataCompression()\n+    {\n+        sqlServer.execute(\"CREATE TABLE IndexedTable (\\n\" +\n+                \"   key1 BIGINT NOT NULL,\\n\" +\n+                \"   key2 BIGINT NOT NULL,\\n\" +\n+                \"   key3 BIGINT NOT NULL,\\n\" +\n+                \"   key4 BIGINT NOT NULL,\\n\" +\n+                \"   key5 BIGINT NOT NULL,\\n\" +\n+                \"   CONSTRAINT PK_IndexedTable PRIMARY KEY CLUSTERED (key1),\\n\" +\n+                \"   CONSTRAINT IX_IndexedTable UNIQUE (key2, key3),\\n\" +\n+                \"   INDEX IX_MyTable4 NONCLUSTERED (key4, key5))\\n\" +\n+                \"   WITH (DATA_COMPRESSION = PAGE)\");\n+\n+        assertThat((String) computeActual(\"SHOW CREATE TABLE IndexedTable\").getOnlyValue())\n+                .matches(\"CREATE TABLE \\\\w+\\\\.\\\\w+\\\\.indexedtable \\\\Q(\\n\" +", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAxOTg4NA==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550019884", "bodyText": "p.index_id = 0 AND i.type = 0\n\nwhy do you need this check?\njust for the info:\n\nsys.partitions.index_id\nIndicates the ID of the index within the object to which this partition belongs.\n0 = heap\n1 = clustered index\n2 or greater = nonclustered index\nhttps://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-partitions-transact-sql?view=sql-server-ver15\n\n\nsys.indexes.type\nType of index:\n0 = Heap\n1 = Clustered\n2 = Nonclustered\n3 = XML\n4 = Spatial\n5 = Clustered columnstore index.\u00a0Applies to: SQL Server 2014 (12.x) and later.\n6 = Nonclustered columnstore index.\u00a0Applies to: SQL Server 2012 (11.x) and later.\n7 = Nonclustered hash index.\u00a0Applies to: SQL Server 2014 (12.x) and later.\nhttps://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-indexes-transact-sql?view=sql-server-ver15", "author": "ssheikin", "createdAt": "2020-12-30T08:15:22Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -428,9 +428,10 @@ public void setNull(PreparedStatement statement, int index)\n         return handle.createQuery(\"\" +\n                 \"SELECT data_compression_desc FROM sys.partitions p \" +\n                 \"INNER JOIN sys.tables t ON p.object_id = t.object_id \" +\n+                \"INNER JOIN sys.schemas s ON t.schema_id = s.schema_id \" +\n                 \"INNER JOIN sys.indexes i ON t.object_id = i.object_id \" +\n-                \"WHERE SCHEMA_NAME(t.schema_id) = :schema AND t.name = :table_name AND i.type IN (0,1) \" +\n-                \"AND i.data_space_id NOT IN (SELECT data_space_id FROM sys.partition_schemes)\")\n+                \"WHERE s.name = :schema AND t.name = :table_name AND p.index_id = 0 AND i.type = 0 \" +", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAyMTg2MQ==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550021861", "bodyText": "Currently we have planned to support only for Heap tables. So we have restricted for other types of object", "author": "Praveen2112", "createdAt": "2020-12-30T08:17:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAxOTg4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE4MDQ1OQ==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550180459", "bodyText": "could you please add two /* Heap */ comments near = 0", "author": "ssheikin", "createdAt": "2020-12-30T12:36:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAxOTg4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwMDAwNA==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550200004", "bodyText": "Good idea to add a comment:\n\"WHERE s.name = :schema AND t.name = :table_name \" +\n\"AND p.index_id = 0 \" + // ....\n\"AND i.type = 0 \" // 0 means Heap index type", "author": "findepi", "createdAt": "2020-12-30T13:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAxOTg4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIxMjY4Ng==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550212686", "bodyText": "I think comments within sql fit better here.", "author": "ssheikin", "createdAt": "2020-12-30T14:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAxOTg4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzNjc0NQ==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550236745", "bodyText": "@ssheikin no need to send our comments to SQL Server, is there?", "author": "findepi", "createdAt": "2020-12-30T15:41:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAxOTg4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzNzE2MA==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550237160", "bodyText": "You are right. Is it expensive?", "author": "ssheikin", "createdAt": "2020-12-30T15:42:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAxOTg4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzNzQwNg==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550237406", "bodyText": "Not at all. Just redundant.", "author": "findepi", "createdAt": "2020-12-30T15:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDAxOTg4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3OTU1Mg==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550179552", "bodyText": "Maybe it worth to create separate test testShowCreateForIndexedTablesAreNotSupportedYet just to underline that current test fails not because of data compression once such support is implemented?", "author": "ssheikin", "createdAt": "2020-12-30T12:33:43Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -417,6 +417,30 @@ public void testShowCreateForPartitionedTablesWithDataCompression()\n                         \")\");\n     }\n \n+    @Test\n+    public void testShowCreateForIndexedNonPartitionedTablesWithDataCompression()\n+    {\n+        sqlServer.execute(\"CREATE TABLE IndexedTable (\\n\" +\n+                \"   key1 BIGINT NOT NULL,\\n\" +\n+                \"   key2 BIGINT NOT NULL,\\n\" +\n+                \"   key3 BIGINT NOT NULL,\\n\" +\n+                \"   key4 BIGINT NOT NULL,\\n\" +\n+                \"   key5 BIGINT NOT NULL,\\n\" +\n+                \"   CONSTRAINT PK_IndexedTable PRIMARY KEY CLUSTERED (key1),\\n\" +", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE5OTQ5OA==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550199498", "bodyText": "replacing SCHEMA_NAME with INNER JOIN sys.schemas looks like independent change.\nplease split this into 2 commits?", "author": "findepi", "createdAt": "2020-12-30T13:44:11Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -428,8 +428,9 @@ public void setNull(PreparedStatement statement, int index)\n         return handle.createQuery(\"\" +\n                 \"SELECT data_compression_desc FROM sys.partitions p \" +\n                 \"INNER JOIN sys.tables t ON p.object_id = t.object_id \" +\n+                \"INNER JOIN sys.schemas s ON t.schema_id = s.schema_id \" +\n                 \"INNER JOIN sys.indexes i ON t.object_id = i.object_id \" +\n-                \"WHERE SCHEMA_NAME(t.schema_id) = :schema AND t.name = :table_name AND i.type IN (0,1) \" +", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwMDI0Ng==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550200246", "bodyText": "matches -> isEqualTo", "author": "findepi", "createdAt": "2020-12-30T13:46:38Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -417,6 +417,30 @@ public void testShowCreateForPartitionedTablesWithDataCompression()\n                         \")\");\n     }\n \n+    @Test\n+    public void testShowCreateForNonIndexedNonPartitionedTablesWithDataCompression()\n+    {\n+        sqlServer.execute(\"CREATE TABLE IndexedTable (\\n\" +\n+                \"   key1 BIGINT NOT NULL,\\n\" +\n+                \"   key2 BIGINT NOT NULL,\\n\" +\n+                \"   key3 BIGINT NOT NULL,\\n\" +\n+                \"   key4 BIGINT NOT NULL,\\n\" +\n+                \"   key5 BIGINT NOT NULL,\\n\" +\n+                \"   CONSTRAINT PK_IndexedTable PRIMARY KEY CLUSTERED (key1),\\n\" +\n+                \"   CONSTRAINT IX_IndexedTable UNIQUE (key2, key3),\\n\" +\n+                \"   INDEX IX_MyTable4 NONCLUSTERED (key4, key5))\\n\" +\n+                \"   WITH (DATA_COMPRESSION = PAGE)\");\n+\n+        assertThat((String) computeActual(\"SHOW CREATE TABLE IndexedTable\").getOnlyValue())\n+                .matches(\"CREATE TABLE sqlserver\\\\.dbo\\\\.indexedtable \\\\Q(\\n\" +", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwMDQ1Nw==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550200457", "bodyText": "IndexedTable -> test_show_indexed_table", "author": "findepi", "createdAt": "2020-12-30T13:47:10Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -417,6 +417,30 @@ public void testShowCreateForPartitionedTablesWithDataCompression()\n                         \")\");\n     }\n \n+    @Test\n+    public void testShowCreateForNonIndexedNonPartitionedTablesWithDataCompression()\n+    {\n+        sqlServer.execute(\"CREATE TABLE IndexedTable (\\n\" +", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIwMTExNw==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550201117", "bodyText": "NonIndexed\n\nthe test table is called indexed. is it indexed or non-indexed?\n\nNonPartitioned\n\nremove\n\nTablesWithDataCompression\n\nCompressedTable", "author": "findepi", "createdAt": "2020-12-30T13:49:22Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -417,6 +417,30 @@ public void testShowCreateForPartitionedTablesWithDataCompression()\n                         \")\");\n     }\n \n+    @Test\n+    public void testShowCreateForNonIndexedNonPartitionedTablesWithDataCompression()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzMjM5MA==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550232390", "bodyText": "Please add comment that SHOW CREATE TABLE does not support indices and table compression yet.", "author": "ssheikin", "createdAt": "2020-12-30T15:28:05Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -417,6 +417,30 @@ public void testShowCreateForPartitionedTablesWithDataCompression()\n                         \")\");\n     }\n \n+    @Test\n+    public void testShowCreateForIndexedAndCompressedTable()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzMzUyOA==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r550233528", "bodyText": "nit: this comment belongs to java now. Once sql code is copied to sql editor this comment is lost. I still think that it has to be within sql.", "author": "ssheikin", "createdAt": "2020-12-30T15:31:40Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -428,8 +428,11 @@ public void setNull(PreparedStatement statement, int index)\n         return handle.createQuery(\"\" +\n                 \"SELECT data_compression_desc FROM sys.partitions p \" +\n                 \"INNER JOIN sys.tables t ON p.object_id = t.object_id \" +\n+                \"INNER JOIN sys.schemas s ON t.schema_id = s.schema_id \" +\n                 \"INNER JOIN sys.indexes i ON t.object_id = i.object_id \" +\n-                \"WHERE SCHEMA_NAME(t.schema_id) = :schema AND t.name = :table_name AND i.type IN (0,1) \" +\n+                \"WHERE s.name = :schema AND t.name = :table_name \" +\n+                \"AND p.index_id = 0 \" + // Heap", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUxMjE4MQ==", "url": "https://github.com/trinodb/trino/pull/6471#discussion_r551512181", "bodyText": "don't you need to drop pfSales and psSales? The best would be to use io.trino.testing.sql.TestTable (modified somehow) for things like that.", "author": "kokosing", "createdAt": "2021-01-04T19:12:51Z", "path": "plugin/trino-sqlserver/src/test/java/io/trino/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -415,6 +415,8 @@ public void testShowCreateForPartitionedTablesWithDataCompression()\n                         \"   salesdate date,\\n\" +\n                         \"   quantity integer\\n\" +\n                         \")\");\n+\n+        assertUpdate(\"DROP TABLE partitionedSales\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "5b65816af4851f5819102e85c36572acd6723502", "url": "https://github.com/trinodb/trino/commit/5b65816af4851f5819102e85c36572acd6723502", "message": "Optimize query to match schema name\n\nUsing INNER JOIN with sys.schemas help us with indexes", "committedDate": "2021-01-06T07:41:50Z", "type": "commit"}, {"oid": "7fb4f275f803c3cad4f7f2d4a95fc95811887cc2", "url": "https://github.com/trinodb/trino/commit/7fb4f275f803c3cad4f7f2d4a95fc95811887cc2", "message": "Drop table and other objects in SQL Server tests", "committedDate": "2021-01-06T07:41:50Z", "type": "commit"}, {"oid": "41836c04e8bb6c4febf20c1b7b998b5b82ab636f", "url": "https://github.com/trinodb/trino/commit/41836c04e8bb6c4febf20c1b7b998b5b82ab636f", "message": "Get Data compression only for non-indexed SQL Server tables", "committedDate": "2021-01-06T07:41:50Z", "type": "commit"}, {"oid": "41836c04e8bb6c4febf20c1b7b998b5b82ab636f", "url": "https://github.com/trinodb/trino/commit/41836c04e8bb6c4febf20c1b7b998b5b82ab636f", "message": "Get Data compression only for non-indexed SQL Server tables", "committedDate": "2021-01-06T07:41:50Z", "type": "forcePushed"}]}