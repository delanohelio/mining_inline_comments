{"pr_number": 4565, "pr_title": "Eliminate pushed down filters above JDBC TableScan", "pr_createdAt": "2020-07-24T14:48:58Z", "pr_url": "https://github.com/trinodb/trino/pull/4565", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyODI0MQ==", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460728241", "bodyText": "Should deprecate the other assertQuery method?", "author": "kokosing", "createdAt": "2020-07-27T08:29:15Z", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -115,6 +120,16 @@ protected Object computeScalar(@Language(\"SQL\") String sql)\n         return computeActual(sql).getOnlyValue();\n     }\n \n+    protected AssertProvider<QueryAssert> query(@Language(\"SQL\") String sql)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNzEzNQ==", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460807135", "bodyText": "Will adorning the code with strikethroughs help much? Also, i do not think QueryAssert is ready yet.\nFor example, it does not coerce expected values. This is good in general, but not eternally convenient.", "author": "findepi", "createdAt": "2020-07-27T10:51:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyODI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4MjQ2NQ==", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460782465", "bodyText": "don't you need to deprecate the assertQueryReturnsEmptyResult method?", "author": "kokosing", "createdAt": "2020-07-27T10:02:36Z", "path": "presto-testing/src/main/java/io/prestosql/testing/AbstractTestQueryFramework.java", "diffHunk": "@@ -243,12 +244,14 @@ protected void assertQueryFails(Session session, @Language(\"SQL\") String sql, @L\n \n     protected void assertQueryReturnsEmptyResult(@Language(\"SQL\") String sql)\n     {\n-        QueryAssertions.assertQueryReturnsEmptyResult(queryRunner, getSession(), sql);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwNzcwNA==", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460807704", "bodyText": "This doesn't bring much benefit, until someone actually updates all the call sites.\nI didn't want to do that in this PR.", "author": "findepi", "createdAt": "2020-07-27T10:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4MjQ2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NDk1NA==", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460784954", "bodyText": "isNotPushedDown() or .planHas(FilterNode.class)?", "author": "kokosing", "createdAt": "2020-07-27T10:07:17Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlIntegrationSmokeTest.java", "diffHunk": "@@ -237,6 +237,37 @@ public void testColumnComment()\n         assertUpdate(\"DROP TABLE test_column_comment\");\n     }\n \n+    @Test\n+    public void testPredicatePushdown()\n+    {\n+        // varchar equality\n+        assertThat(query(\"SELECT regionkey, nationkey, name FROM nation WHERE name = 'ROMANIA'\"))\n+                .matches(\"VALUES (BIGINT '3', BIGINT '19', CAST('ROMANIA' AS varchar(255)))\");\n+\n+        // varchar range\n+        assertThat(query(\"SELECT regionkey, nationkey, name FROM nation WHERE name BETWEEN 'POLAND' AND 'RPA'\"))\n+                .matches(\"VALUES (BIGINT '3', BIGINT '19', CAST('ROMANIA' AS varchar(255)))\");\n+\n+        // varchar different case\n+        assertThat(query(\"SELECT regionkey, nationkey, name FROM nation WHERE name = 'romania'\"))\n+                .returnsEmptyResult();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyMDkwNA==", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460820904", "bodyText": "added", "author": "findepi", "createdAt": "2020-07-27T11:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NDk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NjUxOA==", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460786518", "bodyText": "prestoFilter? and pushedDown -> remoteFilter?", "author": "kokosing", "createdAt": "2020-07-27T10:10:10Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/PushdownController.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc;\n+\n+import io.prestosql.spi.predicate.Domain;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public interface PushdownController\n+{\n+    DomainPushdownResult apply(Domain domain);\n+\n+    final class DomainPushdownResult\n+    {\n+        private final Domain pushedDown;\n+        // In some cases, remainingFilter can be the same as pushedDown, e.g. when target database is case insensitive\n+        private final Domain remainingFilter;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwODEwOA==", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460808108", "bodyText": "remainingFilter is a common name across the codebase. I didn't want to invent a  new name here", "author": "findepi", "createdAt": "2020-07-27T10:53:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4NjUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4Njk2NQ==", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460786965", "bodyText": "PredicatePushdownController?", "author": "kokosing", "createdAt": "2020-07-27T10:11:03Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/PushdownController.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.jdbc;\n+\n+import io.prestosql.spi.predicate.Domain;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public interface PushdownController", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyMTAxMA==", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460821010", "bodyText": "renamed", "author": "findepi", "createdAt": "2020-07-27T11:21:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc4Njk2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyMDYzMA==", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460820630", "bodyText": "#4593", "author": "findepi", "createdAt": "2020-07-27T11:20:44Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -117,7 +117,7 @@ protected void copyTableSchema(Connection connection, String catalogName, String\n         if (mapping.isPresent()) {\n             return mapping;\n         }\n-        // TODO implement proper type mapping\n+        // TODO (https://github.com/prestosql/presto/issues/4593) implement proper type mapping", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyMDY5MQ==", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460820691", "bodyText": "#4596", "author": "findepi", "createdAt": "2020-07-27T11:20:54Z", "path": "presto-sqlserver/src/main/java/io/prestosql/plugin/sqlserver/SqlServerClient.java", "diffHunk": "@@ -63,7 +63,7 @@\n         if (domain.getValues().getRanges().getRangeCount() > SQL_SERVER_MAX_LIST_EXPRESSIONS) {\n             pushedDown = domain.simplify();\n         }\n-        // TODO eliminate filter above table scan\n+        // TODO (https://github.com/prestosql/presto/issues/4596) eliminate filter above table scan", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgyMDczOQ==", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r460820739", "bodyText": "#4596", "author": "findepi", "createdAt": "2020-07-27T11:20:59Z", "path": "presto-sqlserver/src/test/java/io/prestosql/plugin/sqlserver/TestSqlServerIntegrationSmokeTest.java", "diffHunk": "@@ -106,19 +107,26 @@ public void testDecimalPredicatePushdown()\n             sqlServer.execute(\"INSERT INTO test_decimal_pushdown VALUES (123.321, 123456789.987654321)\");\n \n             assertThat(query(\"SELECT * FROM test_decimal_pushdown WHERE short_decimal <= 124\"))\n-                    .matches(\"VALUES (CAST(123.321 AS decimal(9,3)), CAST(123456789.987654321 AS decimal(30, 10)))\");\n+                    .matches(\"VALUES (CAST(123.321 AS decimal(9,3)), CAST(123456789.987654321 AS decimal(30, 10)))\")\n+                    .isNotFullyPushedDown(FilterNode.class); // TODO (https://github.com/prestosql/presto/issues/4596) eliminate filter above table scan", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM5NTIxNw==", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r461395217", "bodyText": "do not initialize this variable here, it is very likely to be overwritten. Let's define it in the same block where remainingFilter is defined.", "author": "kokosing", "createdAt": "2020-07-28T08:05:31Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcMetadata.java", "diffHunk": "@@ -117,6 +120,36 @@ public JdbcTableHandle getTableHandle(ConnectorSession session, SchemaTableName\n \n         TupleDomain<ColumnHandle> oldDomain = handle.getConstraint();\n         TupleDomain<ColumnHandle> newDomain = oldDomain.intersect(constraint.getSummary());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ0MDU5MA==", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r461440590", "bodyText": "i use the variable to select whcih code block i do", "author": "findepi", "createdAt": "2020-07-28T09:18:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM5NTIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2NDc3Nw==", "url": "https://github.com/trinodb/trino/pull/4565#discussion_r461464777", "bodyText": "Right, I overlooked that. Thanks", "author": "kokosing", "createdAt": "2020-07-28T09:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM5NTIxNw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "c3fd8bc0642000300237bf87cec8c7ace06d992e", "url": "https://github.com/trinodb/trino/commit/c3fd8bc0642000300237bf87cec8c7ace06d992e", "message": "Add diagnostic property to disable pushdown to connector", "committedDate": "2020-08-17T21:20:18Z", "type": "commit"}, {"oid": "6143c7e036197eeaf66766752601e32e7a9cead1", "url": "https://github.com/trinodb/trino/commit/6143c7e036197eeaf66766752601e32e7a9cead1", "message": "Make assertAggregationPushedDown more generic\n\nPreviously the method was applicable to aggregation pushdown tests and\nonly in JDBC connectors, as it relied on a catalog session property.\n\nNow it's applicable to all connectors, and to other kinds of pushdown as\nwell.", "committedDate": "2020-08-17T21:20:18Z", "type": "commit"}, {"oid": "4669275397ed92823e077aa23ceb818356939653", "url": "https://github.com/trinodb/trino/commit/4669275397ed92823e077aa23ceb818356939653", "message": "Change parameter order in QueryAssert.query\n\n`session` should come before `query`. This is consistent with\n`AbstractTestQueryFramework` and also provides for more readable tests\nwhen session is provided as a variable to multiple invocations in\nsequence.", "committedDate": "2020-08-17T21:20:18Z", "type": "commit"}, {"oid": "9824709cfede460564098d45edd325b56bfe98d6", "url": "https://github.com/trinodb/trino/commit/9824709cfede460564098d45edd325b56bfe98d6", "message": "Provide QueryAssert in AbstractTestQueryFramework", "committedDate": "2020-08-17T21:20:18Z", "type": "commit"}, {"oid": "fbb91ba3b22d74773f42d2226957745bae601ef1", "url": "https://github.com/trinodb/trino/commit/fbb91ba3b22d74773f42d2226957745bae601ef1", "message": "Move pushdown assertion to QueryAssert", "committedDate": "2020-08-17T21:20:18Z", "type": "commit"}, {"oid": "f07d1f401957f3b03a8df2d5a9e3ff78251c6752", "url": "https://github.com/trinodb/trino/commit/f07d1f401957f3b03a8df2d5a9e3ff78251c6752", "message": "Add QueryAssert#returnsEmptyResult", "committedDate": "2020-08-17T21:20:18Z", "type": "commit"}, {"oid": "82854cd8f839e826c4c0ca2925c5bff562fa880c", "url": "https://github.com/trinodb/trino/commit/82854cd8f839e826c4c0ca2925c5bff562fa880c", "message": "Convert if into switch", "committedDate": "2020-08-17T21:20:18Z", "type": "commit"}, {"oid": "ef3650e8d933caa7435cb8009f67c795d505e99b", "url": "https://github.com/trinodb/trino/commit/ef3650e8d933caa7435cb8009f67c795d505e99b", "message": "Add JdbcClient method for getting ColumnMapping", "committedDate": "2020-08-17T21:20:18Z", "type": "commit"}, {"oid": "c0a0a8d0f49116f34eee39fc53f200aa01a269f8", "url": "https://github.com/trinodb/trino/commit/c0a0a8d0f49116f34eee39fc53f200aa01a269f8", "message": "Eliminate filter above JDBC table scan", "committedDate": "2020-08-17T21:20:18Z", "type": "commit"}, {"oid": "c0a0a8d0f49116f34eee39fc53f200aa01a269f8", "url": "https://github.com/trinodb/trino/commit/c0a0a8d0f49116f34eee39fc53f200aa01a269f8", "message": "Eliminate filter above JDBC table scan", "committedDate": "2020-08-17T21:20:18Z", "type": "forcePushed"}]}