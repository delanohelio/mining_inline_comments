{"pr_number": 6479, "pr_title": "Change Trino to match Hive on column rename/drop/add", "pr_createdAt": "2020-12-30T20:32:27Z", "pr_url": "https://github.com/trinodb/trino/pull/6479", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NDAwNA==", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562984004", "bodyText": "Tables can have arbitrary formats, so if the mapping fails, we should assume they are index based.\nSince this is for reading, I think we can ignore output format here (just use input format and serde).", "author": "electrum", "createdAt": "2021-01-23T00:24:10Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/HiveStorageFormat.java", "diffHunk": "@@ -160,6 +165,14 @@ else if (type.getCategory() == Category.PRIMITIVE) {\n         }\n     }\n \n+    private static final Map<StorageFormat, HiveStorageFormat> HIVE_STORAGE_FORMAT_FROM_STORAGE_FORMAT = Arrays.stream(HiveStorageFormat.values())\n+            .collect(toImmutableMap(format -> StorageFormat.create(format.getSerDe(), format.getInputFormat(), format.getOutputFormat()), identity()));\n+\n+    public static HiveStorageFormat getHiveStorageFormat(StorageFormat storageFormat)\n+    {\n+        return requireNonNull(HIVE_STORAGE_FORMAT_FROM_STORAGE_FORMAT.get(storageFormat), \"Could not find format for \" + storageFormat);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk5OTYyOA==", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562999628", "bodyText": "I changed the method return to be Optional, and changed the map key to be a class with just the serDe and inputFormat.", "author": "djsstarburst", "createdAt": "2021-01-23T01:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NDAwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NDk1MA==", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562984950", "bodyText": "Maybe simplify to\nif (handle != null && !orcColumn.getColumnName().equals(handle.getName())) {\n    orcColumn = new OrcColumn(...);\n}\nbuilder.add(orcColumn);", "author": "electrum", "createdAt": "2021-01-23T00:28:01Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/orc/OrcPageSourceFactory.java", "diffHunk": "@@ -426,6 +428,41 @@ else if (column.getBaseHiveColumnIndex() < fileColumns.size()) {\n         }\n     }\n \n+    /**\n+     * Recreate the list of fileColumns, updating the names of any whose names have changed in the\n+     * corresponding elements of the desiredColumns list.  NOTE: this renaming is only applied to\n+     * top-level columns, not nested columns.\n+     * @param fileColumns All OrcColumns nested in the root column of the table.\n+     * @param desiredColumns HiveColumnHandles for the metastore's table columns.\n+     * @return Return the fileColumns list with any OrcColumn corresponding to a desiredColumn renamed if\n+     * the names differ from those specified in the desiredColumns.\n+     */\n+    private static List<OrcColumn> ensureColumnNameConsistency(List<OrcColumn> fileColumns, List<HiveColumnHandle> desiredColumns)\n+    {\n+        int columnCount = fileColumns.size();\n+        ImmutableList.Builder<OrcColumn> builder = ImmutableList.builderWithExpectedSize(columnCount);\n+\n+        Map<Integer, HiveColumnHandle> desiredColumnsByNumber = desiredColumns.stream()\n+                .collect(toImmutableMap(HiveColumnHandle::getBaseHiveColumnIndex, identity()));\n+\n+        for (int index = 0; index < columnCount; index++) {\n+            OrcColumn orcColumn = fileColumns.get(index);\n+            HiveColumnHandle handle = desiredColumnsByNumber.get(index);\n+            if (handle != null) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk5OTY0Mw==", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562999643", "bodyText": "Simplified.", "author": "djsstarburst", "createdAt": "2021-01-23T01:51:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NDk1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NTEyMQ==", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562985121", "bodyText": "Could shorten the code a bit by naming this column", "author": "electrum", "createdAt": "2021-01-23T00:28:50Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/orc/OrcPageSourceFactory.java", "diffHunk": "@@ -426,6 +428,41 @@ else if (column.getBaseHiveColumnIndex() < fileColumns.size()) {\n         }\n     }\n \n+    /**\n+     * Recreate the list of fileColumns, updating the names of any whose names have changed in the\n+     * corresponding elements of the desiredColumns list.  NOTE: this renaming is only applied to\n+     * top-level columns, not nested columns.\n+     * @param fileColumns All OrcColumns nested in the root column of the table.\n+     * @param desiredColumns HiveColumnHandles for the metastore's table columns.\n+     * @return Return the fileColumns list with any OrcColumn corresponding to a desiredColumn renamed if\n+     * the names differ from those specified in the desiredColumns.\n+     */\n+    private static List<OrcColumn> ensureColumnNameConsistency(List<OrcColumn> fileColumns, List<HiveColumnHandle> desiredColumns)\n+    {\n+        int columnCount = fileColumns.size();\n+        ImmutableList.Builder<OrcColumn> builder = ImmutableList.builderWithExpectedSize(columnCount);\n+\n+        Map<Integer, HiveColumnHandle> desiredColumnsByNumber = desiredColumns.stream()\n+                .collect(toImmutableMap(HiveColumnHandle::getBaseHiveColumnIndex, identity()));\n+\n+        for (int index = 0; index < columnCount; index++) {\n+            OrcColumn orcColumn = fileColumns.get(index);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk5OTY0Ng==", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562999646", "bodyText": "Shortened.", "author": "djsstarburst", "createdAt": "2021-01-23T01:51:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NTEyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NjM3Ng==", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562986376", "bodyText": "I don't think this setIdentity() call is needed. (it seems redundant in all the other tests)", "author": "electrum", "createdAt": "2021-01-23T00:34:59Z", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7616,6 +7617,59 @@ public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps()\n         assertThat(query(nanosSessions, \"SELECT ts FROM hive_timestamp_nanos.tpch.\" + prestoViewNameNanos)).matches(\"VALUES TIMESTAMP '1990-01-02 12:13:14.123000000'\");\n     }\n \n+    @Test(dataProvider = \"legalUseColumnNamesProvider\")\n+    public void testUseColumnNames(HiveStorageFormat format, boolean formatUseColumnNames)\n+    {\n+        String lcFormat = format.name().toLowerCase(Locale.ROOT);\n+        Session.SessionBuilder builder = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk5OTY1MQ==", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562999651", "bodyText": "Removed.", "author": "djsstarburst", "createdAt": "2021-01-23T01:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NjM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NjU0Mw==", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562986543", "bodyText": "It seems clearer to invert this, since a boolean with \"not\" creates a double negative: canSeeOldData", "author": "electrum", "createdAt": "2021-01-23T00:35:39Z", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7616,6 +7617,59 @@ public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps()\n         assertThat(query(nanosSessions, \"SELECT ts FROM hive_timestamp_nanos.tpch.\" + prestoViewNameNanos)).matches(\"VALUES TIMESTAMP '1990-01-02 12:13:14.123000000'\");\n     }\n \n+    @Test(dataProvider = \"legalUseColumnNamesProvider\")\n+    public void testUseColumnNames(HiveStorageFormat format, boolean formatUseColumnNames)\n+    {\n+        String lcFormat = format.name().toLowerCase(Locale.ROOT);\n+        Session.SessionBuilder builder = Session.builder(getQueryRunner().getDefaultSession())\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build());\n+        if (format == HiveStorageFormat.ORC || format == HiveStorageFormat.PARQUET) {\n+            builder.setCatalogSessionProperty(catalog, lcFormat + \"_use_column_names\", String.valueOf(formatUseColumnNames));\n+        }\n+        Session admin = builder.build();\n+        String tableName = format(\"test_renames_%s_%s_%s\", lcFormat, formatUseColumnNames, randomTableSuffix());\n+        assertUpdate(admin, format(\"CREATE TABLE %s (id BIGINT, old_name VARCHAR, age INT, state VARCHAR) WITH (format = '%s', partitioned_by = ARRAY['state'])\", tableName, format));\n+        assertUpdate(admin, format(\"INSERT INTO %s VALUES(111, 'Katy', 57, 'CA')\", tableName), 1);\n+        assertQuery(admin, \"SELECT * FROM \" + tableName, \"VALUES(111, 'Katy', 57, 'CA')\");\n+\n+        assertUpdate(admin, format(\"ALTER TABLE %s RENAME COLUMN old_name TO new_name\", tableName));\n+\n+        boolean doesntSeeOldData = formatUseColumnNames || NAMED_COLUMN_ONLY_FORMATS.contains(format);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk5OTY1Nw==", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r562999657", "bodyText": "Inverted.", "author": "djsstarburst", "createdAt": "2021-01-23T01:51:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk4NjU0Mw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIzOTkxNA==", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r566239914", "bodyText": "Avoid abbreviations in variable names", "author": "martint", "createdAt": "2021-01-28T16:39:44Z", "path": "plugin/trino-hive/src/test/java/io/trino/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -7616,6 +7617,56 @@ public void testSelectFromPrestoViewReferencingHiveTableWithTimestamps()\n         assertThat(query(nanosSessions, \"SELECT ts FROM hive_timestamp_nanos.tpch.\" + prestoViewNameNanos)).matches(\"VALUES TIMESTAMP '1990-01-02 12:13:14.123000000'\");\n     }\n \n+    @Test(dataProvider = \"legalUseColumnNamesProvider\")\n+    public void testUseColumnNames(HiveStorageFormat format, boolean formatUseColumnNames)\n+    {\n+        String lcFormat = format.name().toLowerCase(Locale.ROOT);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjI5MTI5Nw==", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r566291297", "bodyText": "Changed to lowerCaseFormat.", "author": "djsstarburst", "createdAt": "2021-01-28T17:51:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjIzOTkxNA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "0fda8f28e44504fd0713f805ee893be4b56a0df5", "url": "https://github.com/trinodb/trino/commit/0fda8f28e44504fd0713f805ee893be4b56a0df5", "message": "Change Trino to match Hive on column rename/drop/add\n\nThis commit changes the behavior of Trino to match Hive when columns are renamed,\nadded or dropped.  Specifically:\n\n* ORC transactional tables were changed to by default find columns by\n  column index rather than by name.  ORC non-transactional tables already\n  found columns by column index by default.\n* Parquet was changed to by default find columns by name rather\n  than by column index.\n* The Hive config parameter partition_use_column_names, which is used only for ORC\n  and Parquet, has been eliminated because it was redundant once the default\n  settings for ORC and Parquet were changed to match Hive behavior.\n\nBefore this change, if the name of a top-level column in a Hive ORC transactional\ntable was changed, a subsequent Trino query would not see column data inserted before\nthe name change, but Hive would see the old data.  After this change, if column names\nin old data files differ from column names from the metastore, by default Trino like\nHive will still see the old column values.  This default behavior can be changed by\nsetting session parameter hive.orc-use-column-names = true.\n\nSimilarly, before this change, if the name of a top-level column in a Hive Parquet\ntable was changed, a subsequent Trino query would see column data inserted before\nthe name change, but Hive returns null.  After this change, if column names read\nfrom the Parquet data file differ from column names from the metastore, Trino\nreturns null for renamed column, matching Hive's behavior.  This default behavior\ncan be changed by setting session parameter hive.parquet-use-column-names = false.\n\nThis commit does not address differences between Trino and Hive\nin response to column type changes.  This commit also does not address\nname or type changes inside complex types like ROW.\n\nThe bulk of this commit is a collection of tests that verify Hive\nand Trino behavior.", "committedDate": "2021-01-28T20:47:17Z", "type": "commit"}, {"oid": "0fda8f28e44504fd0713f805ee893be4b56a0df5", "url": "https://github.com/trinodb/trino/commit/0fda8f28e44504fd0713f805ee893be4b56a0df5", "message": "Change Trino to match Hive on column rename/drop/add\n\nThis commit changes the behavior of Trino to match Hive when columns are renamed,\nadded or dropped.  Specifically:\n\n* ORC transactional tables were changed to by default find columns by\n  column index rather than by name.  ORC non-transactional tables already\n  found columns by column index by default.\n* Parquet was changed to by default find columns by name rather\n  than by column index.\n* The Hive config parameter partition_use_column_names, which is used only for ORC\n  and Parquet, has been eliminated because it was redundant once the default\n  settings for ORC and Parquet were changed to match Hive behavior.\n\nBefore this change, if the name of a top-level column in a Hive ORC transactional\ntable was changed, a subsequent Trino query would not see column data inserted before\nthe name change, but Hive would see the old data.  After this change, if column names\nin old data files differ from column names from the metastore, by default Trino like\nHive will still see the old column values.  This default behavior can be changed by\nsetting session parameter hive.orc-use-column-names = true.\n\nSimilarly, before this change, if the name of a top-level column in a Hive Parquet\ntable was changed, a subsequent Trino query would see column data inserted before\nthe name change, but Hive returns null.  After this change, if column names read\nfrom the Parquet data file differ from column names from the metastore, Trino\nreturns null for renamed column, matching Hive's behavior.  This default behavior\ncan be changed by setting session parameter hive.parquet-use-column-names = false.\n\nThis commit does not address differences between Trino and Hive\nin response to column type changes.  This commit also does not address\nname or type changes inside complex types like ROW.\n\nThe bulk of this commit is a collection of tests that verify Hive\nand Trino behavior.", "committedDate": "2021-01-28T20:47:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjY0NTkxMg==", "url": "https://github.com/trinodb/trino/pull/6479#discussion_r596645912", "bodyText": "These tests have nothing to do with transactional tables, so please move them out from TestHiveTransactionalTable", "author": "findepi", "createdAt": "2021-03-18T08:33:33Z", "path": "testing/trino-product-tests/src/main/java/io/trino/tests/hive/TestHiveTransactionalTable.java", "diffHunk": "@@ -779,6 +779,169 @@ public void testInsertOnlyMultipleWriters(boolean bucketed, HiveOrPresto inserte\n         });\n     }\n \n+    @Test(groups = HIVE_TRANSACTIONAL, dataProvider = \"transactionModeProvider\")\n+    public void testColumnRenamesOrcPartitioned(boolean transactional)\n+    {\n+        withTemporaryTable(\"test_column_renames_partitioned\", transactional, false, NONE, tableName -> {\n+            onPresto().executeQuery(format(\"CREATE TABLE %s (id BIGINT, old_name VARCHAR, age INT, old_state VARCHAR)\" +\n+                    \" WITH (format = 'ORC', transactional = %s, partitioned_by = ARRAY['old_state'])\", tableName, transactional));\n+            testOrcColumnRenames(tableName);\n+\n+            log.info(\"About to rename partition column old_state to new_state\");\n+            assertThat(() -> onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN old_state TO new_state\", tableName)))\n+                    .failsWithMessage(\"Renaming partition columns is not supported\");\n+        });\n+    }\n+\n+    @Test(groups = HIVE_TRANSACTIONAL, dataProvider = \"transactionModeProvider\")\n+    public void testColumnRenamesOrcNotPartitioned(boolean transactional)\n+    {\n+        ensureSchemaEvolutionSupported();\n+        withTemporaryTable(\"test_orc_column_renames_not_partitioned\", transactional, false, NONE, tableName -> {\n+            onPresto().executeQuery(format(\"CREATE TABLE %s (id BIGINT, old_name VARCHAR, age INT, old_state VARCHAR)\" +\n+                    \" WITH (format = 'ORC', transactional = %s)\", tableName, transactional));\n+            testOrcColumnRenames(tableName);\n+        });\n+    }\n+\n+    private void testOrcColumnRenames(String tableName)\n+    {\n+        onPresto().executeQuery(format(\"INSERT INTO %s VALUES (111, 'Katy', 57, 'CA'), (222, 'Joe', 72, 'WA')\", tableName));\n+        verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(111, \"Katy\", 57, \"CA\"), row(222, \"Joe\", 72, \"WA\"));\n+\n+        onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN old_name TO new_name\", tableName));\n+        log.info(\"This shows that Presto and Hive can still query old data after a single rename\");\n+        verifySelectForPrestoAndHive(\"SELECT age FROM \" + tableName, \"new_name = 'Katy'\", row(57));\n+\n+        onPresto().executeQuery(format(\"INSERT INTO %s VALUES(333, 'Joan', 23, 'OR')\", tableName));\n+        verifySelectForPrestoAndHive(\"SELECT age FROM \" + tableName, \"new_name != 'Joe'\", row(57), row(23));\n+\n+        onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN new_name TO newer_name\", tableName));\n+        log.info(\"This shows that Presto and Hive can still query old data after a double rename\");\n+        verifySelectForPrestoAndHive(\"SELECT age FROM \" + tableName, \"newer_name = 'Katy'\", row(57));\n+\n+        onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN newer_name TO old_name\", tableName));\n+        log.info(\"This shows that Presto and Hive can still query old data after a rename back to the original name\");\n+        verifySelectForPrestoAndHive(\"SELECT age FROM \" + tableName, \"old_name = 'Katy'\", row(57));\n+        verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(111, \"Katy\", 57, \"CA\"), row(222, \"Joe\", 72, \"WA\"), row(333, \"Joan\", 23, \"OR\"));\n+    }\n+\n+    @Test(groups = HIVE_TRANSACTIONAL, dataProvider = \"transactionModeProvider\")\n+    public void testOrcColumnSwap(boolean transactional)\n+    {\n+        withTemporaryTable(\"test_orc_column_renames\", transactional, false, NONE, tableName -> {\n+            onPresto().executeQuery(format(\"CREATE TABLE %s (name VARCHAR, state VARCHAR) WITH (format = 'ORC', transactional = %s)\", tableName, transactional));\n+            onPresto().executeQuery(format(\"INSERT INTO %s VALUES ('Katy', 'CA'), ('Joe', 'WA')\", tableName));\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(\"Katy\", \"CA\"), row(\"Joe\", \"WA\"));\n+\n+            onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN name TO new_name\", tableName));\n+            onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN state TO name\", tableName));\n+            onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN new_name TO state\", tableName));\n+            log.info(\"This shows that Presto and Hive can still query old data, but because of the renames, columns are swapped!\");\n+            verifySelectForPrestoAndHive(\"SELECT state, name FROM \" + tableName, \"TRUE\", row(\"Katy\", \"CA\"), row(\"Joe\", \"WA\"));\n+        });\n+    }\n+\n+    @Test(groups = HIVE_TRANSACTIONAL)\n+    public void testBehaviorOnParquetColumnRenames()\n+    {\n+        ensureSchemaEvolutionSupported();\n+        withTemporaryTable(\"test_parquet_column_renames\", false, false, NONE, tableName -> {\n+            onPresto().executeQuery(format(\"CREATE TABLE %s (id BIGINT, old_name VARCHAR, age INT, old_state VARCHAR) WITH (format = 'PARQUET', transactional = false)\", tableName));\n+            onPresto().executeQuery(format(\"INSERT INTO %s VALUES (111, 'Katy', 57, 'CA'), (222, 'Joe', 72, 'WA')\", tableName));\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(111, \"Katy\", 57, \"CA\"), row(222, \"Joe\", 72, \"WA\"));\n+\n+            onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN old_name TO new_name\", tableName));\n+\n+            onPresto().executeQuery(format(\"INSERT INTO %s VALUES (333, 'Fineas', 31, 'OR')\", tableName));\n+\n+            log.info(\"This shows that Hive and Trino do not see old data after a rename\");\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"TRUE\", row(111, null, 57, \"CA\"), row(222, null, 72, \"WA\"), row(333, \"Fineas\", 31, \"OR\"));\n+\n+            onPresto().executeQuery(format(\"ALTER TABLE %s RENAME COLUMN new_name TO old_name\", tableName));\n+            onPresto().executeQuery(format(\"INSERT INTO %s VALUES (444, 'Gladys', 47, 'WA')\", tableName));\n+            log.info(\"This shows that Presto and Hive both see data in old data files after renaming back to the original column name\");\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"TRUE\", row(111, \"Katy\", 57, \"CA\"), row(222, \"Joe\", 72, \"WA\"), row(333, null, 31, \"OR\"), row(444, \"Gladys\", 47, \"WA\"));\n+        });\n+    }\n+\n+    @Test(groups = HIVE_TRANSACTIONAL, dataProvider = \"transactionModeProvider\")\n+    public void testOrcColumnDropAdd(boolean transactional)\n+    {\n+        ensureSchemaEvolutionSupported();\n+        withTemporaryTable(\"test_orc_add_drop\", transactional, false, NONE, tableName -> {\n+            onPresto().executeQuery(format(\"CREATE TABLE %s (id BIGINT, old_name VARCHAR, age INT, old_state VARCHAR) WITH (transactional = %s)\", tableName, transactional));\n+            onPresto().executeQuery(format(\"INSERT INTO %s VALUES (111, 'Katy', 57, 'CA'), (222, 'Joe', 72, 'WA')\", tableName));\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(111, \"Katy\", 57, \"CA\"), row(222, \"Joe\", 72, \"WA\"));\n+\n+            onPresto().executeQuery(format(\"ALTER TABLE %s DROP COLUMN old_state\", tableName));\n+            log.info(\"This shows that neither Presto nor Hive see the old data after a column is dropped\");\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(111, \"Katy\", 57), row(222, \"Joe\", 72));\n+\n+            onPresto().executeQuery(format(\"INSERT INTO %s VALUES (333, 'Kelly', 45)\", tableName));\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(111, \"Katy\", 57), row(222, \"Joe\", 72), row(333, \"Kelly\", 45));\n+\n+            onPresto().executeQuery(format(\"ALTER TABLE %s ADD COLUMN new_state VARCHAR\", tableName));\n+            log.info(\"This shows that for ORC, Presto and Hive both see data inserted into a dropped column when a column of the same type but different name is added\");\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(111, \"Katy\", 57, \"CA\"), row(222, \"Joe\", 72, \"WA\"), row(333, \"Kelly\", 45, null));\n+        });\n+    }\n+\n+    @Test(groups = HIVE_TRANSACTIONAL, dataProvider = \"transactionModeProvider\")\n+    public void testOrcColumnTypeChange(boolean transactional)\n+    {\n+        ensureSchemaEvolutionSupported();\n+        withTemporaryTable(\"test_orc_column_type_change\", transactional, false, NONE, tableName -> {\n+            onPresto().executeQuery(format(\"CREATE TABLE %s (id INT, old_name VARCHAR, age TINYINT, old_state VARCHAR) WITH (transactional = %s)\", tableName, transactional));\n+            onPresto().executeQuery(format(\"INSERT INTO %s VALUES (111, 'Katy', 57, 'CA'), (222, 'Joe', 72, 'WA')\", tableName));\n+            verifySelectForPrestoAndHive(\"SELECT * FROM \" + tableName, \"true\", row(111, \"Katy\", 57, \"CA\"), row(222, \"Joe\", 72, \"WA\"));\n+\n+            onHive().executeQuery(format(\"ALTER TABLE %s CHANGE COLUMN age age INT\", tableName));\n+            log.info(\"This shows that Hive see the old data after a column is widened\");\n+            assertThat(onHive().executeQuery(\"SELECT * FROM \" + tableName))\n+                    .containsOnly(row(111, \"Katy\", 57, \"CA\"), row(222, \"Joe\", 72, \"WA\"));\n+            log.info(\"This shows that Trino gets an exception trying to widen the type\");\n+            assertThat(() -> onPresto().executeQuery(\"SELECT * FROM \" + tableName))\n+                    .failsWithMessageMatching(\".*Malformed ORC file. Cannot read SQL type 'integer' from ORC stream '.*.age' of type BYTE with attributes.*\");\n+        });\n+    }\n+\n+    @Test(groups = HIVE_TRANSACTIONAL)\n+    public void testParquetColumnDropAdd()", "originalCommit": "0fda8f28e44504fd0713f805ee893be4b56a0df5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}