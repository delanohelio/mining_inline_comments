{"pr_number": 4129, "pr_title": "Incorrect JMX stats for queued queries", "pr_createdAt": "2020-06-22T01:45:13Z", "pr_url": "https://github.com/trinodb/trino/pull/4129", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4NDAxMw==", "url": "https://github.com/trinodb/trino/pull/4129#discussion_r443284013", "bodyText": "I've added these assertions just to illustrate the problem.  I'll remove them once we settle on a way to address it.", "author": "aalbu", "createdAt": "2020-06-22T01:55:23Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestExecutionJmxMetrics.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.execution.resourcegroups.InternalResourceGroupManager;\n+import io.prestosql.plugin.resourcegroups.ResourceGroupManagerPlugin;\n+import io.prestosql.spi.QueryId;\n+import io.prestosql.testing.DistributedQueryRunner;\n+import io.prestosql.tests.tpch.TpchQueryRunnerBuilder;\n+import org.testng.annotations.Test;\n+\n+import javax.management.MBeanServer;\n+import javax.management.ObjectName;\n+\n+import static io.prestosql.execution.QueryState.FAILED;\n+import static io.prestosql.execution.QueryState.QUEUED;\n+import static io.prestosql.execution.QueryState.RUNNING;\n+import static io.prestosql.execution.TestQueryRunnerUtil.cancelQuery;\n+import static io.prestosql.execution.TestQueryRunnerUtil.createQuery;\n+import static io.prestosql.execution.TestQueryRunnerUtil.waitForQueryState;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestExecutionJmxMetrics\n+{\n+    private static final String LONG_RUNNING_QUERY = \"SELECT COUNT(*) FROM tpch.sf100000.lineitem\";\n+\n+    @Test(timeOut = 30_000)\n+    public void testQueryStats()\n+            throws Exception\n+    {\n+        try (DistributedQueryRunner queryRunner = TpchQueryRunnerBuilder.builder().build()) {\n+            queryRunner.installPlugin(new ResourceGroupManagerPlugin());\n+            InternalResourceGroupManager<?> resourceGroupManager = queryRunner.getCoordinator().getResourceGroupManager()\n+                    .orElseThrow(() -> new IllegalStateException(\"Resource manager not configured\"));\n+            resourceGroupManager.setConfigurationManager(\n+                    \"file\",\n+                    ImmutableMap.of(\n+                            \"resource-groups.config-file\",\n+                            getClass().getClassLoader().getResource(\"resource_groups_single_query.json\").getPath()));\n+            MBeanServer mbeanServer = queryRunner.getCoordinator().getMbeanServer();\n+\n+            QueryId firstDashboardQuery = createQuery(queryRunner, dashboardSession(), LONG_RUNNING_QUERY);\n+            waitForQueryState(queryRunner, firstDashboardQuery, RUNNING);\n+            // the second \"dashboard\" query can't run right away because the resource group has a hardConcurrencyLimit of 1\n+            QueryId secondDashboardQuery = createQuery(queryRunner, dashboardSession(), LONG_RUNNING_QUERY);\n+            waitForQueryState(queryRunner, secondDashboardQuery, QUEUED);\n+\n+            assertEquals(getDispatchManagerAttribute(mbeanServer, \"RunningQueryCount\"), 1);\n+            assertEquals(getDispatchManagerAttribute(mbeanServer, \"RunningQueries\"), 1);\n+            assertEquals(getQueryManagerAttribute(mbeanServer, \"RunningQueries\"), 1);\n+\n+            assertEquals(getDispatchManagerAttribute(mbeanServer, \"QueuedQueryCount\"), 1);\n+            // the old attribute has the correct value\n+            assertEquals(getDispatchManagerAttribute(mbeanServer, \"QueuedQueries\"), 1);\n+            // this MBean does not track queued queries correctly\n+            assertEquals(getQueryManagerAttribute(mbeanServer, \"QueuedQueries\"), 0);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4OTY4OA==", "url": "https://github.com/trinodb/trino/pull/4129#discussion_r443289688", "bodyText": "This doesn't match the semantics of RunningQueries from QueryManagerStats - that class counted a query as running only when transitioning to RUNNING state, which counted queries in all previous states as QueuedQueries, which didn't seem right.  This mimics the logic used to display running queries on the UI.", "author": "aalbu", "createdAt": "2020-06-22T02:27:19Z", "path": "presto-main/src/main/java/io/prestosql/dispatcher/DispatchManager.java", "diffHunk": "@@ -261,6 +262,22 @@ private boolean queryCreated(DispatchQuery dispatchQuery)\n                 .collect(toImmutableList());\n     }\n \n+    @Managed\n+    public long getQueuedQueryCount()\n+    {\n+        return queryTracker.getAllQueries().stream()\n+                .filter(query -> query.getBasicQueryInfo().getState() == QUEUED)\n+                .count();\n+    }\n+\n+    @Managed\n+    public long getRunningQueryCount()\n+    {\n+        return queryTracker.getAllQueries().stream()\n+                .filter(query -> query.getBasicQueryInfo().getState() == QUEUED && !query.getBasicQueryInfo().getQueryStats().isFullyBlocked())", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "49e2b85c80c18cd4eece9c96444fa69adee098dc", "url": "https://github.com/trinodb/trino/commit/49e2b85c80c18cd4eece9c96444fa69adee098dc", "message": "Fix tracking of queued queries in JMX stats\n\nTransfer the responsibility of exposing query manager stats to\nDispatchManager. Stop tracking RunningQueries and QueuedQueries in\nQueryManagerStats, since they were not computed accurately. Expose\nMBean attributes with the same names based on information obtained\nfrom QueryTracker.", "committedDate": "2020-06-23T03:09:31Z", "type": "commit"}, {"oid": "9c32b48abb328a29dc683cf640575067dd5aa9b7", "url": "https://github.com/trinodb/trino/commit/9c32b48abb328a29dc683cf640575067dd5aa9b7", "message": "Check more often if the state we're waiting for has been reached", "committedDate": "2020-06-23T03:09:31Z", "type": "commit"}, {"oid": "9c32b48abb328a29dc683cf640575067dd5aa9b7", "url": "https://github.com/trinodb/trino/commit/9c32b48abb328a29dc683cf640575067dd5aa9b7", "message": "Check more often if the state we're waiting for has been reached", "committedDate": "2020-06-23T03:09:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYzOTUyNQ==", "url": "https://github.com/trinodb/trino/pull/4129#discussion_r445639525", "bodyText": "Will this scale for cluster with large number of concurrent queries? The JMX scrape intervals can be as low as 10 seconds. So is calling getAllQueries() at 6 rpm OK for the cluster?\nI too prefer this change since everything is simpler now but am concerned about the above point.", "author": "hashhar", "createdAt": "2020-06-25T15:20:06Z", "path": "presto-main/src/main/java/io/prestosql/dispatcher/DispatchManager.java", "diffHunk": "@@ -261,6 +263,22 @@ private boolean queryCreated(DispatchQuery dispatchQuery)\n                 .collect(toImmutableList());\n     }\n \n+    @Managed\n+    public long getQueuedQueries()\n+    {\n+        return queryTracker.getAllQueries().stream()", "originalCommit": "9c32b48abb328a29dc683cf640575067dd5aa9b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY2NzIxMA==", "url": "https://github.com/trinodb/trino/pull/4129#discussion_r445667210", "bodyText": "It's not an expensive operation.  The UI actually calls this (see https://github.com/prestosql/presto/blob/master/presto-main/src/main/java/io/prestosql/server/ui/ClusterStatsResource.java#L78) more often than that.", "author": "aalbu", "createdAt": "2020-06-25T16:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYzOTUyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5OTczMA==", "url": "https://github.com/trinodb/trino/pull/4129#discussion_r445699730", "bodyText": "related?", "author": "findepi", "createdAt": "2020-06-25T16:50:49Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestQueryRunnerUtil.java", "diffHunk": "@@ -64,7 +64,7 @@ public static void waitForQueryState(DistributedQueryRunner queryRunner, QueryId\n                     dispatchManager.getQueryInfo(queryInfo.getQueryId());\n                 }\n             }\n-            MILLISECONDS.sleep(500);\n+            MILLISECONDS.sleep(100);", "originalCommit": "9c32b48abb328a29dc683cf640575067dd5aa9b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTcxMjQ4MQ==", "url": "https://github.com/trinodb/trino/pull/4129#discussion_r445712481", "bodyText": "It's on a separate commit.  Not necessary, just trying to speed up tests - waiting half a second to check query state changes seemed excessive.  Do you think 100ms is too short?", "author": "aalbu", "createdAt": "2020-06-25T17:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5OTczMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc0MTU5NQ==", "url": "https://github.com/trinodb/trino/pull/4129#discussion_r445741595", "bodyText": "It's on a separate commit.\n\nnvrm, i missed that", "author": "findepi", "createdAt": "2020-06-25T18:03:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY5OTczMA=="}], "type": "inlineReview"}]}