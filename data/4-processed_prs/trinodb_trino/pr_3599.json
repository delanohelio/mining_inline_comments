{"pr_number": 3599, "pr_title": "Return varchar type for substr function with char argument", "pr_createdAt": "2020-05-02T09:51:55Z", "pr_url": "https://github.com/trinodb/trino/pull/3599", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MjM3MA==", "url": "https://github.com/trinodb/trino/pull/3599#discussion_r418942370", "bodyText": "do we have a test ensuring trailing space is preserved?\nlike\nassertFunction(\"SUBSTR(CAST('keep trailing' AS CHAR(14)), 1, 14)\", createVarcharType(14), \"keep trailing \");", "author": "findepi", "createdAt": "2020-05-02T10:37:20Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/TestStringFunctions.java", "diffHunk": "@@ -390,41 +390,41 @@ public void testSubstring()\n     @Test\n     public void testCharSubstring()\n     {\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5)\", createCharType(13), padRight(\"ratically\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 50)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5)\", createCharType(13), padRight(\"cally\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -50)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 0)\", createCharType(13), padRight(\"\", 13));\n-\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 6)\", createCharType(13), padRight(\"ratica\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 10)\", createCharType(13), padRight(\"ratically\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 50)\", createCharType(13), padRight(\"ratically\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 50, 10)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5, 4)\", createCharType(13), padRight(\"call\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5, 40)\", createCharType(13), padRight(\"cally\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -50, 4)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 0, 4)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 0)\", createCharType(13), padRight(\"\", 13));\n-\n-        assertFunction(\"SUBSTR(CAST('abc def' AS CHAR(7)), 1, 4)\", createCharType(7), padRight(\"abc\", 7));\n-\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 5)\", createCharType(13), padRight(\"ratically\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 50)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM -5)\", createCharType(13), padRight(\"cally\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM -50)\", createCharType(13), padRight(\"\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 0)\", createCharType(13), padRight(\"\", 13));\n-\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 5 FOR 6)\", createCharType(13), padRight(\"ratica\", 13));\n-        assertFunction(\"SUBSTRING(CAST('Quadratically' AS CHAR(13)) FROM 5 FOR 50)\", createCharType(13), padRight(\"ratically\", 13));\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5)\", createVarcharType(13), \"ratically\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 50)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5)\", createVarcharType(13), \"cally\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -50)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 0)\", createVarcharType(13), \"\");\n+\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 6)\", createVarcharType(13), \"ratica\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 10)\", createVarcharType(13), \"ratically\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 50)\", createVarcharType(13), \"ratically\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 50, 10)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5, 4)\", createVarcharType(13), \"call\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -5, 40)\", createVarcharType(13), \"cally\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), -50, 4)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 0, 4)\", createVarcharType(13), \"\");\n+        assertFunction(\"SUBSTR(CAST('Quadratically' AS CHAR(13)), 5, 0)\", createVarcharType(13), \"\");\n+\n+        assertFunction(\"SUBSTR(CAST('abc def' AS CHAR(7)), 1, 4)\", createVarcharType(7), \"abc \");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2NTQ2MQ==", "url": "https://github.com/trinodb/trino/pull/3599#discussion_r418965461", "bodyText": "Thanks, I was missing the case. Updated.", "author": "ebyhr", "createdAt": "2020-05-02T14:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0MjM3MA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "c997deeb8f416c733fc029b06373bfda5e766bde", "url": "https://github.com/trinodb/trino/commit/c997deeb8f416c733fc029b06373bfda5e766bde", "message": "Return varchar type for substr function with char argument", "committedDate": "2020-06-07T07:08:32Z", "type": "commit"}, {"oid": "c997deeb8f416c733fc029b06373bfda5e766bde", "url": "https://github.com/trinodb/trino/commit/c997deeb8f416c733fc029b06373bfda5e766bde", "message": "Return varchar type for substr function with char argument", "committedDate": "2020-06-07T07:08:32Z", "type": "forcePushed"}]}