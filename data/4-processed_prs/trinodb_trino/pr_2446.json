{"pr_number": 2446, "pr_title": "Add deprecated function warning", "pr_createdAt": "2020-01-09T01:04:06Z", "pr_url": "https://github.com/trinodb/trino/pull/2446", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMDE0Ng==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r367720146", "bodyText": "This should be done in the analyzer, not during query optimization. The check should go in ExpressionAnalyzer.visitFunctionCall.", "author": "martint", "createdAt": "2020-01-17T00:40:26Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/sanity/warnings/DeprecatedFunctionWarning.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.sanity.warnings;\n+\n+import io.prestosql.Session;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.FunctionMetadata;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.ResolvedFunction;\n+import io.prestosql.spi.PrestoWarning;\n+import io.prestosql.sql.planner.ExpressionExtractor;\n+import io.prestosql.sql.planner.SimplePlanVisitor;\n+import io.prestosql.sql.planner.TypeAnalyzer;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.plan.AggregationNode;\n+import io.prestosql.sql.planner.plan.PlanNode;\n+import io.prestosql.sql.planner.plan.WindowNode;\n+import io.prestosql.sql.planner.sanity.PlanSanityChecker;\n+import io.prestosql.sql.tree.DefaultTraversalVisitor;\n+import io.prestosql.sql.tree.Expression;\n+import io.prestosql.sql.tree.FunctionCall;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.spi.connector.StandardWarningCode.DREPRCATED_FUNCTION;\n+\n+public final class DeprecatedFunctionWarning\n+        implements PlanSanityChecker.Checker\n+{\n+    @Override\n+    public void validate(PlanNode plan, Session session, Metadata metadata, TypeAnalyzer typeAnalyzer, TypeProvider types, WarningCollector warningCollector)\n+    {\n+        for (Expression expression : ExpressionExtractor.extractExpressions(plan)) {\n+            new DefaultTraversalVisitor<Void, Void>()\n+            {\n+                @Override\n+                protected Void visitFunctionCall(FunctionCall node, Void context)\n+                {\n+                    Optional<ResolvedFunction> resolvedFunction = ResolvedFunction.fromQualifiedName(node.getName());\n+                    if (resolvedFunction.isPresent()) {\n+                        FunctionMetadata functionMetadata = metadata.getFunctionMetadata(resolvedFunction.get());\n+                        if (functionMetadata.isDeprecated()) {\n+                            warningCollector.add(new PrestoWarning(DREPRCATED_FUNCTION,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMDI4NA==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r367720284", "bodyText": "What's the purpose of this session property?", "author": "martint", "createdAt": "2020-01-17T00:40:58Z", "path": "presto-main/src/main/java/io/prestosql/SystemSessionProperties.java", "diffHunk": "@@ -552,6 +553,11 @@ public SystemSessionProperties(\n                         IGNORE_DOWNSTREAM_PREFERENCES,\n                         \"Ignore Parent's PreferredProperties in AddExchange optimizer\",\n                         featuresConfig.isIgnoreDownstreamPreferences(),\n+                        false),\n+                booleanProperty(", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMTM2MA==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r367721360", "bodyText": "Ideally, the deprecation message should be able to contain instructions about the reason for deprecation and possible substitutions. So, we'll need to capture this information in the deprecation annotation. Since @Deprecated doesn't take a description, we might need an additional annotation.", "author": "martint", "createdAt": "2020-01-17T00:45:34Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/sanity/warnings/DeprecatedFunctionWarning.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.sanity.warnings;\n+\n+import io.prestosql.Session;\n+import io.prestosql.execution.warnings.WarningCollector;\n+import io.prestosql.metadata.FunctionMetadata;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.ResolvedFunction;\n+import io.prestosql.spi.PrestoWarning;\n+import io.prestosql.sql.planner.ExpressionExtractor;\n+import io.prestosql.sql.planner.SimplePlanVisitor;\n+import io.prestosql.sql.planner.TypeAnalyzer;\n+import io.prestosql.sql.planner.TypeProvider;\n+import io.prestosql.sql.planner.plan.AggregationNode;\n+import io.prestosql.sql.planner.plan.PlanNode;\n+import io.prestosql.sql.planner.plan.WindowNode;\n+import io.prestosql.sql.planner.sanity.PlanSanityChecker;\n+import io.prestosql.sql.tree.DefaultTraversalVisitor;\n+import io.prestosql.sql.tree.Expression;\n+import io.prestosql.sql.tree.FunctionCall;\n+\n+import java.util.Optional;\n+\n+import static io.prestosql.spi.connector.StandardWarningCode.DREPRCATED_FUNCTION;\n+\n+public final class DeprecatedFunctionWarning\n+        implements PlanSanityChecker.Checker\n+{\n+    @Override\n+    public void validate(PlanNode plan, Session session, Metadata metadata, TypeAnalyzer typeAnalyzer, TypeProvider types, WarningCollector warningCollector)\n+    {\n+        for (Expression expression : ExpressionExtractor.extractExpressions(plan)) {\n+            new DefaultTraversalVisitor<Void, Void>()\n+            {\n+                @Override\n+                protected Void visitFunctionCall(FunctionCall node, Void context)\n+                {\n+                    Optional<ResolvedFunction> resolvedFunction = ResolvedFunction.fromQualifiedName(node.getName());\n+                    if (resolvedFunction.isPresent()) {\n+                        FunctionMetadata functionMetadata = metadata.getFunctionMetadata(resolvedFunction.get());\n+                        if (functionMetadata.isDeprecated()) {\n+                            warningCollector.add(new PrestoWarning(DREPRCATED_FUNCTION,\n+                                    String.format(\"Detected use of deprecated function: %s\", functionMetadata.getSignature().getName())));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxMjI2NQ==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r368012265", "bodyText": "This requires adding a new annotation and pass it into FunctionMetadata, which looks like a bit overkill to me. The existing @Description can be used to explain the substitution, just like what we do in session description:\nhttps://github.com/prestosql/presto/blob/5d013879f430fcb90cf37752c501df16baa073fa/presto-main/src/main/java/io/prestosql/SystemSessionProperties.java#L301", "author": "oneonestar", "createdAt": "2020-01-17T16:04:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMTM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAxNDUzOA==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r368014538", "bodyText": "That's a good point. Let's use that.", "author": "martint", "createdAt": "2020-01-17T16:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMTM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMTU4NA==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r367721584", "bodyText": "Typo: DREPRCATED", "author": "martint", "createdAt": "2020-01-17T00:46:21Z", "path": "presto-spi/src/main/java/io/prestosql/spi/connector/StandardWarningCode.java", "diffHunk": "@@ -21,6 +21,7 @@\n {\n     TOO_MANY_STAGES(0x0000_0001),\n     REDUNDANT_ORDER_BY(0x0000_0002),\n+    DREPRCATED_FUNCTION(0x0000_0003),", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxMTY1Ng==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r368711656", "bodyText": "deprecated. It should", "author": "mosabua", "createdAt": "2020-01-20T20:14:23Z", "path": "presto-docs/src/main/sphinx/develop/functions.rst", "diffHunk": "@@ -282,3 +282,25 @@ function follows:\n   is used when performing a ``GROUP BY`` aggregation, and an implementation\n   will be automatically generated for you, if you don't specify a\n   ``AccumulatorStateFactory``\n+\n+Deprecated Function\n+-------------------\n+\n+The ``@Deprecated`` annotation can be used to mark a function as deprecated", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxMTcwNQ==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r368711705", "bodyText": "Presto generates", "author": "mosabua", "createdAt": "2020-01-20T20:14:36Z", "path": "presto-docs/src/main/sphinx/develop/functions.rst", "diffHunk": "@@ -282,3 +282,25 @@ function follows:\n   is used when performing a ``GROUP BY`` aggregation, and an implementation\n   will be automatically generated for you, if you don't specify a\n   ``AccumulatorStateFactory``\n+\n+Deprecated Function\n+-------------------\n+\n+The ``@Deprecated`` annotation can be used to mark a function as deprecated\n+and should no longer be used. Presto will generates a warning whenever a SQL", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxMTgwNA==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r368711804", "bodyText": "and SQL statement", "author": "mosabua", "createdAt": "2020-01-20T20:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxMTcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc3MTMwOA==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r368771308", "bodyText": "and SQL statement\n\nYou mean a SQL statement?\n-The ``@Deprecated`` annotation can be used to mark a function as deprecated\n-and should no longer be used. Presto will generates a warning whenever a SQL\n+The ``@Deprecated`` annotation can be used to mark a function as deprecated.\n+It should no longer be used. Presto generates a warning whenever a SQL statement", "author": "oneonestar", "createdAt": "2020-01-21T01:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxMTcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxMzE1Nw==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r368713157", "bodyText": "When a functions is deprecated, the @Description needs to be replaced with a note about the deprecation and the replacement function:", "author": "mosabua", "createdAt": "2020-01-20T20:20:11Z", "path": "presto-docs/src/main/sphinx/develop/functions.rst", "diffHunk": "@@ -282,3 +282,25 @@ function follows:\n   is used when performing a ``GROUP BY`` aggregation, and an implementation\n   will be automatically generated for you, if you don't specify a\n   ``AccumulatorStateFactory``\n+\n+Deprecated Function\n+-------------------\n+\n+The ``@Deprecated`` annotation can be used to mark a function as deprecated\n+and should no longer be used. Presto will generates a warning whenever a SQL\n+uses a deprecated function. When a function is deprecated, it should also be", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxMjM0OA==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r368712348", "bodyText": "Use a more descriptive name than c.", "author": "martint", "createdAt": "2020-01-20T20:17:08Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestDeprecatedFunctionWarning.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.client.Warning;\n+import io.prestosql.operator.aggregation.state.LongAndDoubleState;\n+import io.prestosql.operator.window.RankFunction;\n+import io.prestosql.spi.WarningCode;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.StandardWarningCode;\n+import io.prestosql.spi.function.AggregationFunction;\n+import io.prestosql.spi.function.CombineFunction;\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.InputFunction;\n+import io.prestosql.spi.function.OutputFunction;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlNullable;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.function.TypeParameter;\n+import io.prestosql.spi.function.WindowFunctionSignature;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.testing.QueryRunner;\n+import org.intellij.lang.annotations.Language;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+import static io.prestosql.execution.TestQueryRunnerUtil.createQueryRunner;\n+import static io.prestosql.metadata.FunctionExtractor.extractFunctions;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.testng.Assert.fail;\n+\n+public class TestDeprecatedFunctionWarning\n+{\n+    private static final WarningCode DEPRECATED_FUNCTION_WARNING_CODE = StandardWarningCode.DEPRECATED_FUNCTION.toWarningCode();\n+    private static final String EXPECTED_WARNING_MSG = \"(DEPRECATED) Use foo() instead.\";\n+\n+    private QueryRunner queryRunner;\n+\n+    @BeforeClass\n+    public void setUp()\n+            throws Exception\n+    {\n+        queryRunner = createQueryRunner(ImmutableMap.of());\n+        ImmutableList.of(TestScalaFunction.class,\n+                TestDeprecatedParametericScalaFunction.class,\n+                TestNonDeprecatedParametericScalaFunction.class,\n+                TestDeprecatedAggregation.class,\n+                TestNonDeprecatedAggregation.class,\n+                TestDeprecatedWindow.class,\n+                TestNonDeprecatedWindow.class)\n+                .forEach(c -> queryRunner.addFunctions(extractFunctions(c)));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxMjQzNg==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r368712436", "bodyText": "First element should go on the next line since we're breaking them up across multiple lines", "author": "martint", "createdAt": "2020-01-20T20:17:32Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestDeprecatedFunctionWarning.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.Session;\n+import io.prestosql.client.Warning;\n+import io.prestosql.operator.aggregation.state.LongAndDoubleState;\n+import io.prestosql.operator.window.RankFunction;\n+import io.prestosql.spi.WarningCode;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.connector.StandardWarningCode;\n+import io.prestosql.spi.function.AggregationFunction;\n+import io.prestosql.spi.function.CombineFunction;\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.InputFunction;\n+import io.prestosql.spi.function.OutputFunction;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlNullable;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.function.TypeParameter;\n+import io.prestosql.spi.function.WindowFunctionSignature;\n+import io.prestosql.spi.type.StandardTypes;\n+import io.prestosql.testing.QueryRunner;\n+import org.intellij.lang.annotations.Language;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+import static io.prestosql.execution.TestQueryRunnerUtil.createQueryRunner;\n+import static io.prestosql.metadata.FunctionExtractor.extractFunctions;\n+import static io.prestosql.spi.type.DoubleType.DOUBLE;\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.testng.Assert.fail;\n+\n+public class TestDeprecatedFunctionWarning\n+{\n+    private static final WarningCode DEPRECATED_FUNCTION_WARNING_CODE = StandardWarningCode.DEPRECATED_FUNCTION.toWarningCode();\n+    private static final String EXPECTED_WARNING_MSG = \"(DEPRECATED) Use foo() instead.\";\n+\n+    private QueryRunner queryRunner;\n+\n+    @BeforeClass\n+    public void setUp()\n+            throws Exception\n+    {\n+        queryRunner = createQueryRunner(ImmutableMap.of());\n+        ImmutableList.of(TestScalaFunction.class,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzMTI2NQ==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r369231265", "bodyText": "This is a little ambiguous. It's not clear whether it refers to the function or the annotation. Maybe rephrase as:\n\nThe @Deprecated annotation can be used to mark a function as deprecated and to indicate that it should no longer be used.\n\n@mosabua, do you have any suggestions?", "author": "martint", "createdAt": "2020-01-21T20:40:02Z", "path": "presto-docs/src/main/sphinx/develop/functions.rst", "diffHunk": "@@ -282,3 +282,25 @@ function follows:\n   is used when performing a ``GROUP BY`` aggregation, and an implementation\n   will be automatically generated for you, if you don't specify a\n   ``AccumulatorStateFactory``\n+\n+Deprecated Function\n+-------------------\n+\n+The ``@Deprecated`` annotation can be used to mark a function as deprecated.\n+It should no longer be used. Presto generates a warning whenever a SQL statement", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI1OTIzOQ==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r369259239", "bodyText": "haha.. that was my suggestion .. I thought it is clear as one sentence.\nMaybe we use\nThe @Deprecated annotation has to be used on any function that should no longer be used. The annotation causes Presto to generate a warning whenever...", "author": "mosabua", "createdAt": "2020-01-21T21:44:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzMTI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzMTg5Mg==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r369231892", "bodyText": "I don't think this is necessary. This change does not affect behavior or break compatibility, so there's no need to make it configurable. It also won't be \"active\" unless a function is already deprecated.", "author": "martint", "createdAt": "2020-01-21T20:41:30Z", "path": "presto-main/src/main/java/io/prestosql/SystemSessionProperties.java", "diffHunk": "@@ -523,6 +524,11 @@ public SystemSessionProperties(\n                         \"Experimental: Use late materialization (including WorkProcessor pipelines)\",\n                         featuresConfig.isLateMaterializationEnabled(),\n                         false),\n+                booleanProperty(", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzMzM1NA==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r369233354", "bodyText": "This should be a separate change. Also, we should discuss whether we want to deprecate those functions or fix their behavior. So, let's start with an issue that describes how the behavior is broken and go from there.", "author": "martint", "createdAt": "2020-01-21T20:44:51Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/JsonFunctions.java", "diffHunk": "@@ -360,17 +361,21 @@ public static Boolean jsonArrayContains(@SqlType(StandardTypes.JSON) Slice json,\n         }\n     }\n \n+    @Deprecated\n     @SqlNullable\n     @ScalarFunction(\"json_array_get\")\n+    @Description(\"(DEPRECATED) If the extracted element is a string, it will be converted into an invalid JSON\")\n     @LiteralParameters(\"x\")\n     @SqlType(StandardTypes.JSON)\n     public static Slice varcharJsonArrayGet(@SqlType(\"varchar(x)\") Slice json, @SqlType(StandardTypes.BIGINT) long index)\n     {\n         return jsonArrayGet(json, index);\n     }\n \n+    @Deprecated\n     @SqlNullable\n     @ScalarFunction\n+    @Description(\"(DEPRECATED) If the extracted element is a string, it will be converted into an invalid JSON\")\n     @SqlType(StandardTypes.JSON)\n     public static Slice jsonArrayGet(@SqlType(StandardTypes.JSON) Slice json, @SqlType(StandardTypes.BIGINT) long index)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzNTQ5NA==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r369335494", "bodyText": "Ref: #2573", "author": "oneonestar", "createdAt": "2020-01-22T01:50:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzMzM1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzNTQzMg==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r369235432", "bodyText": "Same here... I don't think this is necessary. This change does not affect behavior or break compatibility, so there's no need to make it configurable.", "author": "martint", "createdAt": "2020-01-21T20:49:21Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/FeaturesConfig.java", "diffHunk": "@@ -965,6 +966,18 @@ public FeaturesConfig setLateMaterializationEnabled(boolean lateMaterializationE\n         return this;\n     }\n \n+    public boolean isDeprecatedFunctionWarningEnabled()\n+    {\n+        return deprecatedFunctionWarningEnabled;\n+    }\n+\n+    @Config(\"analyzer.deprecated-function-warning-enabled\")\n+    public FeaturesConfig setDeprecatedFunctionWarningEnabled(boolean deprecatedFunctionWarningEnabled)\n+    {\n+        this.deprecatedFunctionWarningEnabled = deprecatedFunctionWarningEnabled;\n+        return this;\n+    }\n+", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzNjI1OA==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r369236258", "bodyText": "This class name has too many redundant words. How about calling it DeprecatedFunctionsPlugin?", "author": "martint", "createdAt": "2020-01-21T20:51:15Z", "path": "presto-tests/src/test/java/io/prestosql/execution/TestUDFPluginDeprecatedUDFPlugin.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.prestosql.spi.Plugin;\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import java.util.Set;\n+\n+public class TestUDFPluginDeprecatedUDFPlugin", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzNDc1NQ==", "url": "https://github.com/trinodb/trino/pull/2446#discussion_r369334755", "bodyText": "Rename s to server", "author": "martint", "createdAt": "2020-01-22T01:46:53Z", "path": "presto-testing/src/main/java/io/prestosql/testing/DistributedQueryRunner.java", "diffHunk": "@@ -278,6 +279,12 @@ public void installPlugin(Plugin plugin)\n         log.info(\"Installed plugin %s in %s\", plugin.getClass().getSimpleName(), nanosSince(start).convertToMostSuccinctTimeUnit());\n     }\n \n+    @Override\n+    public void addFunctions(List<? extends SqlFunction> functions)\n+    {\n+        servers.forEach(s -> s.getMetadata().addFunctions(functions));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6fe651952e2a3506f1dc0e128831b5460a5e9284", "url": "https://github.com/trinodb/trino/commit/6fe651952e2a3506f1dc0e128831b5460a5e9284", "message": "Add deprecated function warning", "committedDate": "2020-01-22T01:55:28Z", "type": "commit"}, {"oid": "6fe651952e2a3506f1dc0e128831b5460a5e9284", "url": "https://github.com/trinodb/trino/commit/6fe651952e2a3506f1dc0e128831b5460a5e9284", "message": "Add deprecated function warning", "committedDate": "2020-01-22T01:55:28Z", "type": "forcePushed"}]}