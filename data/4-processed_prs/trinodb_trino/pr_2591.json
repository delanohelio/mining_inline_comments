{"pr_number": 2591, "pr_title": "Migrate elasticsearch tests to testcontainers", "pr_createdAt": "2020-01-23T02:27:13Z", "pr_url": "https://github.com/trinodb/trino/pull/2591", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMDE5OA==", "url": "https://github.com/trinodb/trino/pull/2591#discussion_r369910198", "bodyText": "How about extending ElasticsearchContainer as TestingMySqlServer?\nI suppose it would be better to use elasticsearch/elasticsearch-oss from the viewpoint of the license.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    container = new ElasticsearchContainer(\"docker.elastic.co/elasticsearch/elasticsearch:6.0.0\");\n          \n          \n            \n                    container = new ElasticsearchContainer(\"docker.elastic.co/elasticsearch/elasticsearch-oss:6.0.0\");", "author": "ebyhr", "createdAt": "2020-01-23T02:46:08Z", "path": "presto-elasticsearch/src/test/java/io/prestosql/elasticsearch/ElasticsearchServer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.elasticsearch;\n+\n+import com.google.common.net.HostAndPort;\n+import org.testcontainers.elasticsearch.ElasticsearchContainer;\n+\n+public class ElasticsearchServer\n+{\n+    private final ElasticsearchContainer container;\n+\n+    public ElasticsearchServer()\n+    {\n+        container = new ElasticsearchContainer(\"docker.elastic.co/elasticsearch/elasticsearch:6.0.0\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyNTU0Ng==", "url": "https://github.com/trinodb/trino/pull/2591#discussion_r369925546", "bodyText": "No, I\u2019d rather not use inheritance for the purpose of code reuse. Composition and delegation is much cleaner and future-proof. Not sure why we did TestingMysqlServer that way", "author": "martint", "createdAt": "2020-01-23T04:20:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMDE5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMjE1OQ==", "url": "https://github.com/trinodb/trino/pull/2591#discussion_r369912159", "bodyText": "nit: Can we introduce //launguage=JSON comment? As you may already know, it will improve the readability on Intellij.", "author": "ebyhr", "createdAt": "2020-01-23T02:56:55Z", "path": "presto-elasticsearch/src/test/java/io/prestosql/elasticsearch/TestElasticsearchIntegrationSmokeTest.java", "diffHunk": "@@ -102,105 +112,100 @@ public void testNestedFields()\n                 .put(\"fields.fieldb\", \"valueb\")\n                 .build());\n \n-        embeddedElasticsearchNode.getClient()\n-                .admin()\n-                .indices()\n-                .refresh(refreshRequest(indexName))\n-                .actionGet();\n-\n         assertQuery(\n                 \"SELECT name, fields.fielda, fields.fieldb FROM data\",\n                 \"VALUES ('nestfield', 32, 'valueb')\");\n     }\n \n     @Test\n     public void testArrayFields()\n+            throws IOException\n     {\n         String indexName = \"test_arrays\";\n \n-        embeddedElasticsearchNode.getClient()\n-                .admin()\n-                .indices()\n-                .prepareCreate(indexName)\n-                .addMapping(\"doc\", \"\" +\n-                                \"{\" +\n-                                \"  \\\"_meta\\\": {\" +\n-                                \"    \\\"presto\\\": {\" +\n-                                \"      \\\"a\\\": {\" +\n-                                \"        \\\"b\\\": {\" +\n-                                \"          \\\"y\\\": {\" +\n-                                \"            \\\"isArray\\\": true\" +\n-                                \"          }\" +\n-                                \"        }\" +\n-                                \"      },\" +\n-                                \"      \\\"c\\\": {\" +\n-                                \"        \\\"f\\\": {\" +\n-                                \"          \\\"g\\\": {\" +\n-                                \"            \\\"isArray\\\": true\" +\n-                                \"          },\" +\n-                                \"          \\\"isArray\\\": true\" +\n-                                \"        }\" +\n-                                \"      },\" +\n-                                \"      \\\"j\\\": {\" +\n-                                \"        \\\"isArray\\\": true\" +\n-                                \"      },\" +\n-                                \"      \\\"k\\\": {\" +\n-                                \"        \\\"isArray\\\": true\" +\n-                                \"      }\" +\n-                                \"    }\" +\n-                                \"  },\" +\n-                                \"  \\\"properties\\\":{\" +\n-                                \"    \\\"a\\\": {\" +\n-                                \"      \\\"type\\\": \\\"object\\\",\" +\n-                                \"      \\\"properties\\\": {\" +\n-                                \"        \\\"b\\\": {\" +\n-                                \"          \\\"type\\\": \\\"object\\\",\" +\n-                                \"          \\\"properties\\\": {\" +\n-                                \"            \\\"x\\\": {\" +\n-                                \"              \\\"type\\\": \\\"integer\\\"\" +\n-                                \"            },\" +\n-                                \"            \\\"y\\\": {\" +\n-                                \"              \\\"type\\\": \\\"keyword\\\"\" +\n-                                \"            }\" +\n-                                \"          } \" +\n-                                \"        }\" +\n-                                \"      }\" +\n-                                \"    },\" +\n-                                \"    \\\"c\\\": {\" +\n-                                \"      \\\"type\\\": \\\"object\\\",\" +\n-                                \"      \\\"properties\\\": {\" +\n-                                \"        \\\"d\\\": {\" +\n-                                \"          \\\"type\\\": \\\"keyword\\\"\" +\n-                                \"        },\" +\n-                                \"        \\\"e\\\": {\" +\n-                                \"          \\\"type\\\": \\\"keyword\\\"\" +\n-                                \"        },\" +\n-                                \"        \\\"f\\\": {\" +\n-                                \"          \\\"type\\\": \\\"object\\\",\" +\n-                                \"          \\\"properties\\\": {\" +\n-                                \"            \\\"g\\\": {\" +\n-                                \"              \\\"type\\\": \\\"integer\\\"\" +\n-                                \"            },\" +\n-                                \"            \\\"h\\\": {\" +\n-                                \"              \\\"type\\\": \\\"integer\\\"\" +\n-                                \"            }\" +\n-                                \"          } \" +\n-                                \"        }\" +\n-                                \"      }\" +\n-                                \"    },\" +\n-                                \"    \\\"i\\\": {\" +\n-                                \"      \\\"type\\\": \\\"long\\\"\" +\n-                                \"    },\" +\n-                                \"    \\\"j\\\": {\" +\n-                                \"      \\\"type\\\": \\\"long\\\"\" +\n-                                \"    },\" +\n-                                \"    \\\"k\\\": {\" +\n-                                \"      \\\"type\\\": \\\"long\\\"\" +\n-                                \"    }\" +\n-                                \"  }\" +\n-                                \"}\",\n-                        XContentType.JSON)\n-                .get();\n+        String mapping = \"\" +", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkyNTcxNQ==", "url": "https://github.com/trinodb/trino/pull/2591#discussion_r369925715", "bodyText": "That\u2019s a good idea. I\u2019ll see if the @Language annotation works.", "author": "martint", "createdAt": "2020-01-23T04:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMjE1OQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2ODM4MA==", "url": "https://github.com/trinodb/trino/pull/2591#discussion_r370668380", "bodyText": "nit: We can remove String.", "author": "ebyhr", "createdAt": "2020-01-24T14:42:36Z", "path": "presto-elasticsearch/src/test/java/io/prestosql/elasticsearch/TestElasticsearchIntegrationSmokeTest.java", "diffHunk": "@@ -669,11 +615,25 @@ protected boolean canDropSchema()\n         return false;\n     }\n \n-    private void index(String indexName, Map<String, Object> document)\n+    private void index(String index, Map<String, Object> document)\n+            throws IOException\n+    {\n+        client.index(new IndexRequest(index, \"doc\")\n+                .source(document)\n+                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE));\n+    }\n+\n+    private void addAlias(String index, String alias)\n+            throws IOException\n+    {\n+        client.getLowLevelClient()\n+                .performRequest(\"PUT\", String.format(\"/%s/_alias/%s\", index, alias));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d04b31c4d91b0365419f175698a4dcb1176b4455", "url": "https://github.com/trinodb/trino/commit/d04b31c4d91b0365419f175698a4dcb1176b4455", "message": "Add option to ignore Elasticsearch publish_address\n\nThe address is used to address Elasticsearch nodes. When\nrunning in a container environment, the published address\nmay not match the public address of the container.\n\nThis option makes the connector ignore the published address\nand use the configured address, instead.", "committedDate": "2020-01-24T16:10:16Z", "type": "commit"}, {"oid": "9409fdbee06bc9e4a631898aaed67f0de05abc75", "url": "https://github.com/trinodb/trino/commit/9409fdbee06bc9e4a631898aaed67f0de05abc75", "message": "Skip object fields with no properties", "committedDate": "2020-01-24T16:10:16Z", "type": "commit"}, {"oid": "bd4b3dd0b77ece2d56d58a38834f952e3f970905", "url": "https://github.com/trinodb/trino/commit/bd4b3dd0b77ece2d56d58a38834f952e3f970905", "message": "Migrate Elasticsearch tests to testcontainers", "committedDate": "2020-01-24T16:10:16Z", "type": "commit"}, {"oid": "bd4b3dd0b77ece2d56d58a38834f952e3f970905", "url": "https://github.com/trinodb/trino/commit/bd4b3dd0b77ece2d56d58a38834f952e3f970905", "message": "Migrate Elasticsearch tests to testcontainers", "committedDate": "2020-01-24T16:10:16Z", "type": "forcePushed"}]}