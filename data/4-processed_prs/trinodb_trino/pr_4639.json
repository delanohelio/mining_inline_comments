{"pr_number": 4639, "pr_title": "Add support for Iceberg metadata delete", "pr_createdAt": "2020-07-30T14:41:12Z", "pr_url": "https://github.com/trinodb/trino/pull/4639", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4MjM2NQ==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467282365", "bodyText": "We can just call this $row_id. The \"shard\" name is specific to Raptor", "author": "electrum", "createdAt": "2020-08-07T21:32:49Z", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -453,6 +457,12 @@ public ConnectorInsertTableHandle beginInsert(ConnectorSession session, Connecto\n                 .collect(toImmutableList())));\n     }\n \n+    @Override\n+    public ColumnHandle getUpdateRowIdColumnHandle(ConnectorSession session, ConnectorTableHandle tableHandle)\n+    {\n+        return new IcebergColumnHandle(0, \"$shard_row_id\", BIGINT, Optional.empty());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODkwNg==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467338906", "bodyText": "Changed.", "author": "djsstarburst", "createdAt": "2020-08-08T00:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4MjM2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4NDUxMw==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467284513", "bodyText": "Let's keep the name the same so that the diff is smaller", "author": "electrum", "createdAt": "2020-08-07T21:35:37Z", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -598,23 +608,47 @@ public void rollback()\n     @Override\n     public Optional<ConstraintApplicationResult<ConnectorTableHandle>> applyFilter(ConnectorSession session, ConnectorTableHandle handle, Constraint constraint)\n     {\n-        IcebergTableHandle table = (IcebergTableHandle) handle;\n+        IcebergTableHandle tableHandle = (IcebergTableHandle) handle;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODkxNQ==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467338915", "bodyText": "Done.", "author": "djsstarburst", "createdAt": "2020-08-08T00:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4NDUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4NzkyMw==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467287923", "bodyText": "Maybe do this as\nBiPredicate<IcebergColumnHandle, Domain> contains = (column, domain) -> partitionSourceIds.contains(column.getId());\nTupleDomain<ColumnHandle> remainingTupleDomain = newDomain.filter(contains.negate());\nTupleDomain<IcebergColumnHandle> enforcedTupleDomain = newDomain.filter(contains);", "author": "electrum", "createdAt": "2020-08-07T21:40:12Z", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -598,23 +608,47 @@ public void rollback()\n     @Override\n     public Optional<ConstraintApplicationResult<ConnectorTableHandle>> applyFilter(ConnectorSession session, ConnectorTableHandle handle, Constraint constraint)\n     {\n-        IcebergTableHandle table = (IcebergTableHandle) handle;\n+        IcebergTableHandle tableHandle = (IcebergTableHandle) handle;\n+\n         // TODO: Remove TupleDomain#simplify once Iceberg supports IN expression\n         TupleDomain<IcebergColumnHandle> newDomain = constraint.getSummary()\n                 .transform(IcebergColumnHandle.class::cast)\n-                .simplify()\n-                .intersect(table.getPredicate());\n+                .intersect(tableHandle.getPredicate());\n+\n+        if (newDomain.isNone()) {\n+            return Optional.empty();\n+        }\n \n-        if (newDomain.equals(table.getPredicate())) {\n+        if (newDomain.equals(tableHandle.getPredicate())) {\n             return Optional.empty();\n         }\n \n+        org.apache.iceberg.Table icebergTable = getIcebergTable(metastore, hdfsEnvironment, session, tableHandle.getSchemaTableName());\n+\n+        List<PartitionField> fields = icebergTable.spec().fields().stream()\n+                .filter(field -> field.transform().isIdentity())\n+                .collect(toImmutableList());\n+\n+        // Ensure partition specs in all manifests contain the identity fields from the predicate\n+        if (!icebergTable.specs().values().stream().allMatch(spec -> spec.fields().containsAll(fields))) {\n+            return Optional.empty();\n+        }\n+\n+        Set<Integer> partitionSourceIds = icebergTable.spec().fields().stream()\n+                .filter(field -> field.transform().isIdentity())\n+                .map(PartitionField::sourceId)\n+                .collect(toImmutableSet());\n+        TupleDomain<ColumnHandle> remainingTupleDomain = newDomain.filter((column, domain) -> !partitionSourceIds.contains(column.getId()))", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODkyNg==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467338926", "bodyText": "Nice!  Changed.  The remainingTupleDomain needs suffix .transform(ColumnHandle.class::cast) in this formulation.", "author": "djsstarburst", "createdAt": "2020-08-08T00:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI4NzkyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NDExMw==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467294113", "bodyText": "We could make these sum(col2) to verify that we got the exact rows.", "author": "electrum", "createdAt": "2020-08-07T21:48:16Z", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODk0Nw==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467338947", "bodyText": "Good idea; done.", "author": "djsstarburst", "createdAt": "2020-08-08T00:42:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NDExMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NDc0Ng==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467294746", "bodyText": "Nit: lowercase column names", "author": "electrum", "createdAt": "2020-08-07T21:49:03Z", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 3\");\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 2\");\n+        dropTable(session, \"test_metadata_delete_simple\");\n+    }\n+\n+    @Test\n+    public void testMetadataDelete()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteForFormat);\n+    }\n+\n+    private void testMetadataDeleteForFormat(Session session, FileFormat format)\n+    {\n+        @Language(\"SQL\") String createTable = \"\" +\n+                \"CREATE TABLE test_metadata_delete \" +\n+                \"(\" +\n+                \"  ORDER_KEY BIGINT,\" +", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODk2Nw==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467338967", "bodyText": "Fixed.  That's what I get from copying the Hive test ;)", "author": "djsstarburst", "createdAt": "2020-08-08T00:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NDc0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NDkyNQ==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467294925", "bodyText": "This is normally written on the previous line like\nCREATE TABLE foo (", "author": "electrum", "createdAt": "2020-08-07T21:49:17Z", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 3\");\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 2\");\n+        dropTable(session, \"test_metadata_delete_simple\");\n+    }\n+\n+    @Test\n+    public void testMetadataDelete()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteForFormat);\n+    }\n+\n+    private void testMetadataDeleteForFormat(Session session, FileFormat format)\n+    {\n+        @Language(\"SQL\") String createTable = \"\" +\n+                \"CREATE TABLE test_metadata_delete \" +\n+                \"(\" +", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzODk4MA==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467338980", "bodyText": "Fixed.", "author": "djsstarburst", "createdAt": "2020-08-08T00:42:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NDkyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NzAwMA==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467297000", "bodyText": "This cast shouldn't be necessary as the 3 literal should be integer.\nNit: lowercase column names and add space around operators (same for other queries)", "author": "electrum", "createdAt": "2020-08-07T21:51:57Z", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 3\");\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 2\");\n+        dropTable(session, \"test_metadata_delete_simple\");\n+    }\n+\n+    @Test\n+    public void testMetadataDelete()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteForFormat);\n+    }\n+\n+    private void testMetadataDeleteForFormat(Session session, FileFormat format)\n+    {\n+        @Language(\"SQL\") String createTable = \"\" +\n+                \"CREATE TABLE test_metadata_delete \" +\n+                \"(\" +\n+                \"  ORDER_KEY BIGINT,\" +\n+                \"  LINE_NUMBER INTEGER,\" +\n+                \"  LINE_STATUS VARCHAR\" +\n+                \") \" +\n+                \"WITH (\" +\n+                format(\" format = '%s', partitioning = ARRAY[ 'LINE_NUMBER', 'LINE_STATUS' ]\", format.name()) +\n+                \") \";\n+\n+        assertUpdate(session, createTable);\n+\n+        assertUpdate(session, \"\" +\n+                        \"INSERT INTO test_metadata_delete \" +\n+                        \"SELECT orderkey, linenumber, linestatus \" +\n+                        \"FROM tpch.tiny.lineitem\",\n+                \"SELECT count(*) FROM lineitem\");\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 14\");\n+\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete WHERE LINE_STATUS='F' AND LINE_NUMBER=CAST(3 AS INTEGER)\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTA2NQ==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467339065", "bodyText": "Cast removed and column names and whitespace fixed everywhere.", "author": "djsstarburst", "createdAt": "2020-08-08T00:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5NzAwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5ODA4Mg==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467298082", "bodyText": "This is expected since H2 doesn't have the test_in_small_set. Please remove comment", "author": "electrum", "createdAt": "2020-08-07T21:53:22Z", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 3\");\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 2\");\n+        dropTable(session, \"test_metadata_delete_simple\");\n+    }\n+\n+    @Test\n+    public void testMetadataDelete()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteForFormat);\n+    }\n+\n+    private void testMetadataDeleteForFormat(Session session, FileFormat format)\n+    {\n+        @Language(\"SQL\") String createTable = \"\" +\n+                \"CREATE TABLE test_metadata_delete \" +\n+                \"(\" +\n+                \"  ORDER_KEY BIGINT,\" +\n+                \"  LINE_NUMBER INTEGER,\" +\n+                \"  LINE_STATUS VARCHAR\" +\n+                \") \" +\n+                \"WITH (\" +\n+                format(\" format = '%s', partitioning = ARRAY[ 'LINE_NUMBER', 'LINE_STATUS' ]\", format.name()) +\n+                \") \";\n+\n+        assertUpdate(session, createTable);\n+\n+        assertUpdate(session, \"\" +\n+                        \"INSERT INTO test_metadata_delete \" +\n+                        \"SELECT orderkey, linenumber, linestatus \" +\n+                        \"FROM tpch.tiny.lineitem\",\n+                \"SELECT count(*) FROM lineitem\");\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 14\");\n+\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete WHERE LINE_STATUS='F' AND LINE_NUMBER=CAST(3 AS INTEGER)\");\n+        assertQuery(session, \"SELECT * FROM test_metadata_delete\", \"SELECT orderkey, linenumber, linestatus FROM lineitem WHERE linestatus<>'F' or linenumber<>3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 13\");\n+\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete WHERE LINE_STATUS='O'\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT * FROM test_metadata_delete\", \"SELECT orderkey, linenumber, linestatus FROM lineitem WHERE linestatus<>'O' AND linenumber<>3\");\n+\n+        assertQueryFails(\"DELETE FROM test_metadata_delete WHERE ORDER_KEY=1\", \"This connector only supports delete where one or more partitions are deleted entirely\");\n+\n+        assertUpdate(session, \"DROP TABLE test_metadata_delete\");\n+\n+        assertFalse(getQueryRunner().tableExists(getSession(), \"test_metadata_delete\"));\n+    }\n+\n+    @Test\n+    public void testInSmallSet()\n+    {\n+        testWithAllFileFormats(this::testInSmallSetForFormat);\n+    }\n+\n+    private void testInSmallSetForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, \"CREATE TABLE test_in_small_set (col1 INTEGER, col2 BIGINT)\");\n+        assertUpdate(session, \"INSERT INTO test_in_small_set VALUES (1, 10)\", 1);\n+        MaterializedResult result = computeActual(\"SELECT col1 FROM test_in_small_set WHERE col1 IN (1)\");\n+        // The query below fails in h2 with the col1 IN (1) or col1 = 1.  It works fine in Iceberg.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTExNg==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467339116", "bodyText": "Removed along with this test, since it covers a subset of what's tested by the following test.", "author": "djsstarburst", "createdAt": "2020-08-08T00:43:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5ODA4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5ODE0MQ==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467298141", "bodyText": "Same", "author": "electrum", "createdAt": "2020-08-07T21:53:26Z", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -587,6 +595,112 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testMetadataDeleteSimple()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteSimpleForFormat);\n+    }\n+\n+    private void testMetadataDeleteSimpleForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, format(\"CREATE TABLE test_metadata_delete_simple (col1 BIGINT, col2 BIGINT) WITH (format = '%s', partitioning = ARRAY['col1'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_metadata_delete_simple VALUES(1, 100), (1, 101), (1, 102), (2, 200), (2, 201), (3, 300)\", 6);\n+        assertQueryFails(\n+                session,\n+                \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1 AND col2 > 101\",\n+                \"This connector only supports delete where one or more partitions are deleted entirely\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 3\");\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete_simple WHERE col1 = 1\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_metadata_delete_simple\", \"SELECT 3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete_simple$partitions\\\"\", \"SELECT 2\");\n+        dropTable(session, \"test_metadata_delete_simple\");\n+    }\n+\n+    @Test\n+    public void testMetadataDelete()\n+    {\n+        testWithAllFileFormats(this::testMetadataDeleteForFormat);\n+    }\n+\n+    private void testMetadataDeleteForFormat(Session session, FileFormat format)\n+    {\n+        @Language(\"SQL\") String createTable = \"\" +\n+                \"CREATE TABLE test_metadata_delete \" +\n+                \"(\" +\n+                \"  ORDER_KEY BIGINT,\" +\n+                \"  LINE_NUMBER INTEGER,\" +\n+                \"  LINE_STATUS VARCHAR\" +\n+                \") \" +\n+                \"WITH (\" +\n+                format(\" format = '%s', partitioning = ARRAY[ 'LINE_NUMBER', 'LINE_STATUS' ]\", format.name()) +\n+                \") \";\n+\n+        assertUpdate(session, createTable);\n+\n+        assertUpdate(session, \"\" +\n+                        \"INSERT INTO test_metadata_delete \" +\n+                        \"SELECT orderkey, linenumber, linestatus \" +\n+                        \"FROM tpch.tiny.lineitem\",\n+                \"SELECT count(*) FROM lineitem\");\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 14\");\n+\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete WHERE LINE_STATUS='F' AND LINE_NUMBER=CAST(3 AS INTEGER)\");\n+        assertQuery(session, \"SELECT * FROM test_metadata_delete\", \"SELECT orderkey, linenumber, linestatus FROM lineitem WHERE linestatus<>'F' or linenumber<>3\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 13\");\n+\n+        assertUpdate(session, \"DELETE FROM test_metadata_delete WHERE LINE_STATUS='O'\");\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_metadata_delete$partitions\\\"\", \"SELECT 6\");\n+        assertQuery(session, \"SELECT * FROM test_metadata_delete\", \"SELECT orderkey, linenumber, linestatus FROM lineitem WHERE linestatus<>'O' AND linenumber<>3\");\n+\n+        assertQueryFails(\"DELETE FROM test_metadata_delete WHERE ORDER_KEY=1\", \"This connector only supports delete where one or more partitions are deleted entirely\");\n+\n+        assertUpdate(session, \"DROP TABLE test_metadata_delete\");\n+\n+        assertFalse(getQueryRunner().tableExists(getSession(), \"test_metadata_delete\"));\n+    }\n+\n+    @Test\n+    public void testInSmallSet()\n+    {\n+        testWithAllFileFormats(this::testInSmallSetForFormat);\n+    }\n+\n+    private void testInSmallSetForFormat(Session session, FileFormat format)\n+    {\n+        assertUpdate(session, \"CREATE TABLE test_in_small_set (col1 INTEGER, col2 BIGINT)\");\n+        assertUpdate(session, \"INSERT INTO test_in_small_set VALUES (1, 10)\", 1);\n+        MaterializedResult result = computeActual(\"SELECT col1 FROM test_in_small_set WHERE col1 IN (1)\");\n+        // The query below fails in h2 with the col1 IN (1) or col1 = 1.  It works fine in Iceberg.\n+        //assertQuery(session, \"SELECT col1 FROM test_in_small_set WHERE col1 IN (1)\");\n+        dropTable(session, \"test_in_small_set\");\n+    }\n+\n+    @Test\n+    public void testInSet()\n+    {\n+        testWithAllFileFormats((session, format) -> testInSetForFormat(session, format, 31));\n+        testWithAllFileFormats((session, format) -> testInSetForFormat(session, format, 35));\n+    }\n+\n+    private void testInSetForFormat(Session session, FileFormat format, int inCount)\n+    {\n+        String values = range(1, inCount + 1)\n+                .mapToObj(n -> format(\"(%s, %s)\", n, n + 10))\n+                .collect(joining(\", \"));\n+        String inList = range(1, inCount + 1)\n+                .mapToObj(Integer::toString)\n+                .collect(joining(\", \"));\n+\n+        assertUpdate(session, \"CREATE TABLE test_in_set (col1 INTEGER, col2 BIGINT)\");\n+        assertUpdate(session, format(\"INSERT INTO test_in_set VALUES %s\", values), inCount);\n+        MaterializedResult result = computeActual(format(\"SELECT col1 FROM test_in_set WHERE col1 IN (%s)\", inList));\n+        // The query below fails in h2 with any value of inCount.  It works in Iceberg.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTEzNg==", "url": "https://github.com/trinodb/trino/pull/4639#discussion_r467339136", "bodyText": "Removed.", "author": "djsstarburst", "createdAt": "2020-08-08T00:43:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5ODE0MQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "e1ff098a84f46911d5efd00bcebec99ce1422faa", "url": "https://github.com/trinodb/trino/commit/e1ff098a84f46911d5efd00bcebec99ce1422faa", "message": "Add support for Iceberg metadata delete\n\nThis commit adds support for Iceberg metadata delete, as well as\na couple of smoke tests showing that it works correctly.\n\nThe changes required to support delete in IcebergMetadata.applyFilter()\nincluded removal of a call to TupleDomain.simplify() on the constraint\nsummary domain, because otherwise the enforced and unenforced domains\ndon't equal the original set.  This is consistent with the Hive\ntreatment of TupleDomains.  It's mentioned here because it may result\nin performance problems during query planning for queries of the form\nSELECT ... FROM my_table WHERE x IN very_large_set, which was\napparently the reason the .simplify() call was added.", "committedDate": "2020-08-08T13:46:00Z", "type": "commit"}, {"oid": "e1ff098a84f46911d5efd00bcebec99ce1422faa", "url": "https://github.com/trinodb/trino/commit/e1ff098a84f46911d5efd00bcebec99ce1422faa", "message": "Add support for Iceberg metadata delete\n\nThis commit adds support for Iceberg metadata delete, as well as\na couple of smoke tests showing that it works correctly.\n\nThe changes required to support delete in IcebergMetadata.applyFilter()\nincluded removal of a call to TupleDomain.simplify() on the constraint\nsummary domain, because otherwise the enforced and unenforced domains\ndon't equal the original set.  This is consistent with the Hive\ntreatment of TupleDomains.  It's mentioned here because it may result\nin performance problems during query planning for queries of the form\nSELECT ... FROM my_table WHERE x IN very_large_set, which was\napparently the reason the .simplify() call was added.", "committedDate": "2020-08-08T13:46:00Z", "type": "forcePushed"}]}