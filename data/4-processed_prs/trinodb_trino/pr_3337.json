{"pr_number": 3337, "pr_title": "Pass RemoteTable to createTableSql", "pr_createdAt": "2020-04-04T10:17:00Z", "pr_url": "https://github.com/trinodb/trino/pull/3337", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MTI1Mw==", "url": "https://github.com/trinodb/trino/pull/3337#discussion_r403751253", "bodyText": "RemoteTableName (like SchemaTableName)", "author": "findepi", "createdAt": "2020-04-05T20:13:56Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTableHandle.java", "diffHunk": "@@ -32,11 +32,7 @@\n         implements ConnectorTableHandle\n {\n     private final SchemaTableName schemaTableName;\n-\n-    // catalog, schema and table names are reported by the remote database\n-    private final String catalogName;\n-    private final String schemaName;\n-    private final String tableName;\n+    private final RemoteTable remoteTable;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MTI5Nw==", "url": "https://github.com/trinodb/trino/pull/3337#discussion_r403751297", "bodyText": "@Deprecated", "author": "findepi", "createdAt": "2020-04-05T20:14:09Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTableHandle.java", "diffHunk": "@@ -45,19 +41,26 @@ public JdbcTableHandle(SchemaTableName schemaTableName, @Nullable String catalog\n         this(schemaTableName, catalogName, schemaName, tableName, TupleDomain.all(), OptionalLong.empty());\n     }\n \n+    public JdbcTableHandle(", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MTM3OA==", "url": "https://github.com/trinodb/trino/pull/3337#discussion_r403751378", "bodyText": "no longer @JsonProperty\n\n\nmake @Deprecated ?", "author": "findepi", "createdAt": "2020-04-05T20:15:00Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTableHandle.java", "diffHunk": "@@ -69,23 +72,27 @@ public SchemaTableName getSchemaTableName()\n     }\n \n     @JsonProperty\n+    public RemoteTable getRemoteTable()\n+    {\n+        return remoteTable;\n+    }\n+\n     @Nullable\n     public String getCatalogName()\n     {\n-        return catalogName;\n+        return remoteTable.getCatalogName().orElse(null);\n     }\n \n-    @JsonProperty\n     @Nullable\n     public String getSchemaName()\n     {\n-        return schemaName;\n+        return remoteTable.getSchemaName().orElse(null);\n     }\n \n     @JsonProperty\n     public String getTableName()\n     {\n-        return tableName;\n+        return remoteTable.getTableName();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MTM4MQ==", "url": "https://github.com/trinodb/trino/pull/3337#discussion_r403751381", "bodyText": "make @Deprecated ?", "author": "findepi", "createdAt": "2020-04-05T20:15:02Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTableHandle.java", "diffHunk": "@@ -69,23 +72,27 @@ public SchemaTableName getSchemaTableName()\n     }\n \n     @JsonProperty\n+    public RemoteTable getRemoteTable()\n+    {\n+        return remoteTable;\n+    }\n+\n     @Nullable\n     public String getCatalogName()\n     {\n-        return catalogName;\n+        return remoteTable.getCatalogName().orElse(null);\n     }\n \n-    @JsonProperty\n     @Nullable\n     public String getSchemaName()\n     {\n-        return schemaName;\n+        return remoteTable.getSchemaName().orElse(null);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MTM4Mg==", "url": "https://github.com/trinodb/trino/pull/3337#discussion_r403751382", "bodyText": "make @Deprecated ?", "author": "findepi", "createdAt": "2020-04-05T20:15:04Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/JdbcTableHandle.java", "diffHunk": "@@ -69,23 +72,27 @@ public SchemaTableName getSchemaTableName()\n     }\n \n     @JsonProperty\n+    public RemoteTable getRemoteTable()\n+    {\n+        return remoteTable;\n+    }\n+\n     @Nullable\n     public String getCatalogName()\n     {\n-        return catalogName;\n+        return remoteTable.getCatalogName().orElse(null);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MTUzNQ==", "url": "https://github.com/trinodb/trino/pull/3337#discussion_r403751535", "bodyText": "replace this with a class javadoc:\n/**\n * Qualified table name reported by the remote database.\n */", "author": "findepi", "createdAt": "2020-04-05T20:16:38Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/RemoteTable.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.prestosql.plugin.jdbc;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Joiner;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class RemoteTable\n+{\n+    // catalog, schema and table names are reported by the remote database", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MTgyNA==", "url": "https://github.com/trinodb/trino/pull/3337#discussion_r403751824", "bodyText": "By convention, we use @JsonProperty(\"xxxx\") (named params).\nThis may be redundant now since airlift/airbase@d6de168 ...\nHowever, then I am not sure whether @JsonProperty adds anything. Maybe it's totally redundant?", "author": "findepi", "createdAt": "2020-04-05T20:18:58Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/RemoteTable.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.prestosql.plugin.jdbc;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Joiner;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class RemoteTable\n+{\n+    // catalog, schema and table names are reported by the remote database\n+    private final Optional<String> catalogName;\n+    private final Optional<String> schemaName;\n+    private final String tableName;\n+\n+    @JsonCreator\n+    public RemoteTable(\n+            @JsonProperty Optional<String> catalogName,\n+            @JsonProperty Optional<String> schemaName,\n+            @JsonProperty String tableName)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MTg2MQ==", "url": "https://github.com/trinodb/trino/pull/3337#discussion_r403751861", "bodyText": "BTW add JSON roundtrip test.", "author": "findepi", "createdAt": "2020-04-05T20:19:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MTgyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxMDg2Nw==", "url": "https://github.com/trinodb/trino/pull/3337#discussion_r405510867", "bodyText": "@JsonProperty is not needed. Thanks for this idea. Good to know. Test was also nice.", "author": "kokosing", "createdAt": "2020-04-08T13:09:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MTgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MTk5Nw==", "url": "https://github.com/trinodb/trino/pull/3337#discussion_r403751997", "bodyText": "is it? the code looks like it's not", "author": "findepi", "createdAt": "2020-04-05T20:20:30Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -690,6 +692,7 @@ protected String getTableSchemaName(ResultSet resultSet)\n         return resultSet.getString(\"TABLE_SCHEM\");\n     }\n \n+    @Nullable", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MjA4MQ==", "url": "https://github.com/trinodb/trino/pull/3337#discussion_r403752081", "bodyText": "Maybe add TODO in the body, to remove special treatment for \"\" values.\n(isNullOrEmpty => != null)", "author": "findepi", "createdAt": "2020-04-05T20:21:34Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -896,7 +899,12 @@ protected String quoted(String name)\n         return identifierQuote + name + identifierQuote;\n     }\n \n-    protected String quoted(String catalog, String schema, String table)\n+    protected String quoted(RemoteTable remoteTable)\n+    {\n+        return quoted(remoteTable.getCatalogName().orElse(null), remoteTable.getSchemaName().orElse(null), remoteTable.getTableName());\n+    }\n+\n+    protected String quoted(@Nullable String catalog, @Nullable String schema, String table)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyMzIzMQ==", "url": "https://github.com/trinodb/trino/pull/3337#discussion_r405523231", "bodyText": "I am not sure. That would require me to know that special value \"\" is not special in some database. Maybe there a RDBMS that uses empty string instead of null?", "author": "kokosing", "createdAt": "2020-04-08T13:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MjA4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMDI3MA==", "url": "https://github.com/trinodb/trino/pull/3337#discussion_r406620270", "bodyText": "I agree", "author": "findepi", "createdAt": "2020-04-10T06:20:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MjA4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MjE2MA==", "url": "https://github.com/trinodb/trino/pull/3337#discussion_r403752160", "bodyText": "final\n(this module is intended to be extended by external parties, so we should be more paranoid the eg in presto-main)", "author": "findepi", "createdAt": "2020-04-05T20:22:11Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/RemoteTable.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.prestosql.plugin.jdbc;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Joiner;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+public class RemoteTable", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0OTkyNA==", "url": "https://github.com/trinodb/trino/pull/3337#discussion_r462549924", "bodyText": "Maybe introduce a variable for RemoteTableName", "author": "electrum", "createdAt": "2020-07-29T19:54:48Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -455,7 +455,7 @@ protected JdbcOutputTableHandle createTable(ConnectorSession session, ConnectorT\n                 columnList.add(getColumnSql(session, column, columnName));\n             }\n \n-            String sql = createTableSql(catalog, remoteSchema, tableName, columnList.build());\n+            String sql = createTableSql(new RemoteTableName(Optional.ofNullable(catalog), Optional.ofNullable(remoteSchema), tableName), columnList.build());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU1MDEyNA==", "url": "https://github.com/trinodb/trino/pull/3337#discussion_r462550124", "bodyText": "This would be easier to read with wrapping", "author": "electrum", "createdAt": "2020-07-29T19:55:07Z", "path": "presto-base-jdbc/src/main/java/io/prestosql/plugin/jdbc/BaseJdbcClient.java", "diffHunk": "@@ -921,6 +921,11 @@ protected String quoted(String name)\n         return identifierQuote + name + identifierQuote;\n     }\n \n+    protected String quoted(RemoteTableName remoteTableName)\n+    {\n+        return quoted(remoteTableName.getCatalogName().orElse(null), remoteTableName.getSchemaName().orElse(null), remoteTableName.getTableName());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5b24d42aeb89b2474ad3ef1333010ed710426d83", "url": "https://github.com/trinodb/trino/commit/5b24d42aeb89b2474ad3ef1333010ed710426d83", "message": "Introduce JDBC RemoteTableName", "committedDate": "2020-07-30T08:18:04Z", "type": "commit"}, {"oid": "800945685a4d591399514fd12c24ef48bb4855ff", "url": "https://github.com/trinodb/trino/commit/800945685a4d591399514fd12c24ef48bb4855ff", "message": "Add missing Nullable annotations", "committedDate": "2020-07-30T08:18:04Z", "type": "commit"}, {"oid": "291d208898e4fadde877c8a5dbbf79390f9c4439", "url": "https://github.com/trinodb/trino/commit/291d208898e4fadde877c8a5dbbf79390f9c4439", "message": "Pass RemoteTable to createTableSql\n\nPassing RemoteTable is much less error prone that passing a triple of\nStrings. Especially, where some of them are nullable.", "committedDate": "2020-07-30T08:20:28Z", "type": "commit"}, {"oid": "291d208898e4fadde877c8a5dbbf79390f9c4439", "url": "https://github.com/trinodb/trino/commit/291d208898e4fadde877c8a5dbbf79390f9c4439", "message": "Pass RemoteTable to createTableSql\n\nPassing RemoteTable is much less error prone that passing a triple of\nStrings. Especially, where some of them are nullable.", "committedDate": "2020-07-30T08:20:28Z", "type": "forcePushed"}]}