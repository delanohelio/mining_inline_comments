{"pr_number": 3638, "pr_title": "Parallelize stats update", "pr_createdAt": "2020-05-06T05:51:22Z", "pr_url": "https://github.com/trinodb/trino/pull/3638", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5OTAwNw==", "url": "https://github.com/trinodb/trino/pull/3638#discussion_r427699007", "bodyText": "Perhaps use the signature we use elsewhere in this class (MoreFutures.getFutureValue(fileRenameFuture, PrestoException.class)).", "author": "aalbu", "createdAt": "2020-05-20T01:59:03Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "diffHunk": "@@ -1603,8 +1606,12 @@ private void executeAddPartitionOperations()\n \n         private void executeUpdateStatisticsOperations()\n         {\n+            ImmutableList.Builder<CompletableFuture<?>> executeUpdateFutures = ImmutableList.builder();\n             for (UpdateStatisticsOperation operation : updateStatisticsOperations) {\n-                operation.run(delegate);\n+                executeUpdateFutures.add(CompletableFuture.runAsync(() -> operation.run(delegate), updateExecutor));\n+            }\n+            for (CompletableFuture<?> executeUpdateFuture : executeUpdateFutures.build()) {\n+                MoreFutures.getFutureValue(executeUpdateFuture);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxNzc5NA==", "url": "https://github.com/trinodb/trino/pull/3638#discussion_r428217794", "bodyText": "Done.", "author": "sanchitkashyap", "createdAt": "2020-05-20T18:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY5OTAwNw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0NTM5NQ==", "url": "https://github.com/trinodb/trino/pull/3638#discussion_r428545395", "bodyText": "Previously failed operation would cause fast-failure of stats update. Now update would continue (in threads) even though one of the futures failed. I think we should wait for all futures to complete. Perhaps we should have a utility method that encapsulates mechanism from executeIrreversibleMetastoreOperations\nWDYT: @electrum @findepi ?", "author": "sopel39", "createdAt": "2020-05-21T09:28:39Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "diffHunk": "@@ -1603,8 +1606,12 @@ private void executeAddPartitionOperations()\n \n         private void executeUpdateStatisticsOperations()\n         {\n+            ImmutableList.Builder<CompletableFuture<?>> executeUpdateFutures = ImmutableList.builder();\n             for (UpdateStatisticsOperation operation : updateStatisticsOperations) {\n-                operation.run(delegate);\n+                executeUpdateFutures.add(CompletableFuture.runAsync(() -> operation.run(delegate), updateExecutor));\n+            }\n+            for (CompletableFuture<?> executeUpdateFuture : executeUpdateFutures.build()) {\n+                MoreFutures.getFutureValue(executeUpdateFuture, PrestoException.class);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MTgwNQ==", "url": "https://github.com/trinodb/trino/pull/3638#discussion_r429851805", "bodyText": "Good catch. We could use eg CompletionService to detect failure early, but yes, we still should somehow notify others need to be cancelled?\nFor stats happening during CREATE TABLE, it's fine to just cancel them (& await), as table creation rollback will clean the state.\nNot sure what we should do for ANALYZE or ALTER.", "author": "findepi", "createdAt": "2020-05-25T10:05:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0NTM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk0MTA4OA==", "url": "https://github.com/trinodb/trino/pull/3638#discussion_r430941088", "bodyText": "@findepi  are you suggesting that we cancel the other threads if one of the future fails or should we just wait for all futures to complete? If we just want to wait then we could do something like executeIrreversibleMetastoreOperations as @sopel39  suggested.", "author": "sanchitkashyap", "createdAt": "2020-05-27T08:22:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0NTM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1Njc4Nw==", "url": "https://github.com/trinodb/trino/pull/3638#discussion_r430956787", "bodyText": "If we could cancel remaining futures that would be best, but I'm not sure it's simple to implement. IMO something like executeIrreversibleMetastoreOperations is good enough.", "author": "sopel39", "createdAt": "2020-05-27T08:47:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0NTM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM4NjgzNQ==", "url": "https://github.com/trinodb/trino/pull/3638#discussion_r448386835", "bodyText": "added changes similar to executeIrreversibleMetastoreOperations", "author": "sanchitkashyap", "createdAt": "2020-07-01T14:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0NTM5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0NjU4MQ==", "url": "https://github.com/trinodb/trino/pull/3638#discussion_r428546581", "bodyText": "I think now there can be a race condition if one of the update futures fails, but others continue. In such case update and undo operations would be executed at the same time", "author": "sopel39", "createdAt": "2020-05-21T09:31:16Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "diffHunk": "@@ -1659,13 +1666,19 @@ private void undoAlterPartitionOperations()\n \n         private void undoUpdateStatisticsOperations()\n         {\n+            ImmutableList.Builder<CompletableFuture<?>> undoUpdateFutures = ImmutableList.builder();\n             for (UpdateStatisticsOperation operation : updateStatisticsOperations) {\n-                try {\n-                    operation.undo(delegate);\n-                }\n-                catch (Throwable throwable) {\n-                    logCleanupFailure(throwable, \"failed to rollback: %s\", operation.getDescription());\n-                }\n+                undoUpdateFutures.add(CompletableFuture.runAsync(() -> {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM4NTgzNA==", "url": "https://github.com/trinodb/trino/pull/3638#discussion_r448385834", "bodyText": "This should not happen after the latest changes.", "author": "sanchitkashyap", "createdAt": "2020-07-01T14:03:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0NjU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0NzMyNA==", "url": "https://github.com/trinodb/trino/pull/3638#discussion_r428547324", "bodyText": "just use getFutureValue(undoUpdateFuture). none of the futures can fail as we catch all throwables. You could add a comment also.", "author": "sopel39", "createdAt": "2020-05-21T09:32:47Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/SemiTransactionalHiveMetastore.java", "diffHunk": "@@ -1659,13 +1666,19 @@ private void undoAlterPartitionOperations()\n \n         private void undoUpdateStatisticsOperations()\n         {\n+            ImmutableList.Builder<CompletableFuture<?>> undoUpdateFutures = ImmutableList.builder();\n             for (UpdateStatisticsOperation operation : updateStatisticsOperations) {\n-                try {\n-                    operation.undo(delegate);\n-                }\n-                catch (Throwable throwable) {\n-                    logCleanupFailure(throwable, \"failed to rollback: %s\", operation.getDescription());\n-                }\n+                undoUpdateFutures.add(CompletableFuture.runAsync(() -> {\n+                    try {\n+                        operation.undo(delegate);\n+                    }\n+                    catch (Throwable throwable) {\n+                        logCleanupFailure(throwable, \"failed to rollback: %s\", operation.getDescription());\n+                    }\n+                }, updateExecutor));\n+            }\n+            for (CompletableFuture<?> undoUpdateFuture : undoUpdateFutures.build()) {\n+                MoreFutures.getFutureValue(undoUpdateFuture, PrestoException.class);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM4NzQyNQ==", "url": "https://github.com/trinodb/trino/pull/3638#discussion_r448387425", "bodyText": "done", "author": "sanchitkashyap", "createdAt": "2020-07-01T14:05:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0NzMyNA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "f8de1fa4bdf6f15a068a663444772560baed5d1c", "url": "https://github.com/trinodb/trino/commit/f8de1fa4bdf6f15a068a663444772560baed5d1c", "message": "Parallelize stats update", "committedDate": "2020-11-09T11:52:54Z", "type": "commit"}, {"oid": "f8de1fa4bdf6f15a068a663444772560baed5d1c", "url": "https://github.com/trinodb/trino/commit/f8de1fa4bdf6f15a068a663444772560baed5d1c", "message": "Parallelize stats update", "committedDate": "2020-11-09T11:52:54Z", "type": "forcePushed"}]}