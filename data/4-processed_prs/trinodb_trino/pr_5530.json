{"pr_number": 5530, "pr_title": "Support coercing varchar types in hive", "pr_createdAt": "2020-10-12T15:38:23Z", "pr_url": "https://github.com/trinodb/trino/pull/5530", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM4MDIzNA==", "url": "https://github.com/trinodb/trino/pull/5530#discussion_r503380234", "bodyText": "@findepi we could instead refactor createCoercer to return an Optional object, thoughts?", "author": "phd3", "createdAt": "2020-10-12T15:41:27Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePageSource.java", "diffHunk": "@@ -162,7 +163,7 @@ public HivePageSource(\n                 HiveType fromType = columnMapping.getBaseTypeCoercionFrom().get().getHiveTypeForDereferences(dereferenceIndices).get();\n                 HiveType toType = columnMapping.getHiveColumnHandle().getHiveType();\n                 if (!fromType.equals(toType)) {\n-                    coercers.add(Optional.of(createCoercer(typeManager, fromType, toType)));\n+                    coercers.add(Optional.ofNullable(createCoercer(typeManager, fromType, toType)));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2MjA5Mw==", "url": "https://github.com/trinodb/trino/pull/5530#discussion_r506262093", "bodyText": "Let's not add this to SPI. We should add it when it is commonly needed.\nThis can be just a helper method next to createCoercer", "author": "findepi", "createdAt": "2020-10-16T10:20:43Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/VarcharType.java", "diffHunk": "@@ -261,4 +262,10 @@ private static long comparisonOperator(@BlockPosition Block leftBlock, @BlockInd\n         int rightLength = rightBlock.getSliceLength(rightPosition);\n         return leftBlock.compareTo(leftPosition, 0, leftLength, rightBlock, rightPosition, 0, rightLength);\n     }\n+\n+    public boolean narrowerThan(VarcharType other)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NTEyOQ==", "url": "https://github.com/trinodb/trino/pull/5530#discussion_r506265129", "bodyText": "Return Functions.identity() instead for now.\nAs a followup, yes it makes sense to have createCoercer return Optional.\nThen the fromType.equals(toType) check should be moved inside the method.", "author": "findepi", "createdAt": "2020-10-16T10:24:05Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePageSource.java", "diffHunk": "@@ -363,6 +364,17 @@ public ConnectorPageSource getPageSource()\n         if (fromType instanceof VarcharType && (toHiveType.equals(HIVE_BYTE) || toHiveType.equals(HIVE_SHORT) || toHiveType.equals(HIVE_INT) || toHiveType.equals(HIVE_LONG))) {\n             return new VarcharToIntegerNumberCoercer<>((VarcharType) fromType, toType);\n         }\n+        if (fromType instanceof VarcharType && toType instanceof VarcharType) {\n+            VarcharType toVarcharType = (VarcharType) toType;\n+            VarcharType fromVarcharType = (VarcharType) fromType;\n+\n+            if (toVarcharType.narrowerThan(fromVarcharType)) {\n+                return new VarcharCoercer(fromVarcharType, toVarcharType);\n+            }\n+\n+            // Coercion not worth the copying penalty when toType is wider\n+            return null;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NTM5Ng==", "url": "https://github.com/trinodb/trino/pull/5530#discussion_r506265396", "bodyText": "revert (per comment above)", "author": "findepi", "createdAt": "2020-10-16T10:24:23Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePageSource.java", "diffHunk": "@@ -496,7 +508,7 @@ public StructCoercer(TypeManager typeManager, HiveType fromHiveType, HiveType to\n                     coercers.add(Optional.empty());\n                 }\n                 else if (!fromFieldTypes.get(i).equals(toFieldTypes.get(i))) {\n-                    coercers.add(Optional.of(createCoercer(typeManager, fromFieldTypes.get(i), toFieldTypes.get(i))));\n+                    coercers.add(Optional.ofNullable(createCoercer(typeManager, fromFieldTypes.get(i), toFieldTypes.get(i))));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NTkwMg==", "url": "https://github.com/trinodb/trino/pull/5530#discussion_r506265902", "bodyText": "This should operate on Slice directly.", "author": "findepi", "createdAt": "2020-10-16T10:25:01Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/coercions/VarcharCoercer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.coercions;\n+\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.type.VarcharType;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static io.airlift.slice.Slices.utf8Slice;\n+\n+public class VarcharCoercer\n+        extends TypeCoercer<VarcharType, VarcharType>\n+{\n+    public VarcharCoercer(VarcharType fromType, VarcharType toType)\n+    {\n+        super(fromType, toType);\n+        checkArgument(toType.narrowerThan(fromType), \"Coercer to a wider varchar type should not be required\");\n+    }\n+\n+    @Override\n+    protected void applyCoercedValue(BlockBuilder blockBuilder, Block block, int position)\n+    {\n+        String value = fromType.getSlice(block, position).toStringUtf8();\n+        toType.writeSlice(blockBuilder, utf8Slice(value.substring(0, toType.getBoundedLength())));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NzE5OA==", "url": "https://github.com/trinodb/trino/pull/5530#discussion_r506267198", "bodyText": "Add a test case where eg \ud83d\udcb0\ud83d\udcb0\ud83d\udcb0 (varchar(3)) gets truncated to varchar(2) resulting in \ud83d\udcb0\ud83d\udcb0", "author": "findepi", "createdAt": "2020-10-16T10:26:30Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveCoercion.java", "diffHunk": "@@ -383,6 +391,8 @@ private void doTestHiveCoercion(HiveTableDefinition tableDefinition)\n                         //new BigDecimal(\"-12345.12345\"),\n                         -Float.parseFloat(decimalToFloatVal),\n                         -12345.12345,\n+                        \"abc\",", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ2MDg0Mg==", "url": "https://github.com/trinodb/trino/pull/5530#discussion_r506460842", "bodyText": "the last value is truncating from abc (varchar(3)) to ab (varchar(2)). Could you please elaborate on what you're suggesting here?", "author": "phd3", "createdAt": "2020-10-16T14:04:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NzE5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ2OTMwMw==", "url": "https://github.com/trinodb/trino/pull/5530#discussion_r506469303", "bodyText": "The point is -- see https://github.com/prestosql/presto/pull/5530/files#r506265902\nYou are truncating using String#substring, which is correct for values within Unicode BMP, but not correct for characters encoded in UTF-16 as surrogate pairs. \ud83d\udcb0 is an example such character. Current code will probably truncate to \ud83d\udcb0 instead of \ud83d\udcb0\ud83d\udcb0.", "author": "findepi", "createdAt": "2020-10-16T14:11:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NzE5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ3MTU4NQ==", "url": "https://github.com/trinodb/trino/pull/5530#discussion_r506471585", "bodyText": "Got it, will look into it. thanks for the explanation.", "author": "phd3", "createdAt": "2020-10-16T14:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI2NzE5OA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MTc3MQ==", "url": "https://github.com/trinodb/trino/pull/5530#discussion_r509971771", "bodyText": "\"not worth\" is not the right term. \"is type only\" would be more accurate, but i would actually remove the comment.", "author": "findepi", "createdAt": "2020-10-22T08:23:34Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePageSource.java", "diffHunk": "@@ -363,6 +364,17 @@ public ConnectorPageSource getPageSource()\n         if (fromType instanceof VarcharType && (toHiveType.equals(HIVE_BYTE) || toHiveType.equals(HIVE_SHORT) || toHiveType.equals(HIVE_INT) || toHiveType.equals(HIVE_LONG))) {\n             return new VarcharToIntegerNumberCoercer<>((VarcharType) fromType, toType);\n         }\n+        if (fromType instanceof VarcharType && toType instanceof VarcharType) {\n+            VarcharType toVarcharType = (VarcharType) toType;\n+            VarcharType fromVarcharType = (VarcharType) fromType;\n+\n+            if (narrowerThan(toVarcharType, fromVarcharType)) {\n+                return new VarcharCoercer(fromVarcharType, toVarcharType);\n+            }\n+\n+            // Coercion not worth the copying penalty when toType is wider", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MTkyMw==", "url": "https://github.com/trinodb/trino/pull/5530#discussion_r509971923", "bodyText": "add\n// TODO make the method return Optional", "author": "findepi", "createdAt": "2020-10-22T08:23:47Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePageSource.java", "diffHunk": "@@ -363,6 +364,17 @@ public ConnectorPageSource getPageSource()\n         if (fromType instanceof VarcharType && (toHiveType.equals(HIVE_BYTE) || toHiveType.equals(HIVE_SHORT) || toHiveType.equals(HIVE_INT) || toHiveType.equals(HIVE_LONG))) {\n             return new VarcharToIntegerNumberCoercer<>((VarcharType) fromType, toType);\n         }\n+        if (fromType instanceof VarcharType && toType instanceof VarcharType) {\n+            VarcharType toVarcharType = (VarcharType) toType;\n+            VarcharType fromVarcharType = (VarcharType) fromType;\n+\n+            if (narrowerThan(toVarcharType, fromVarcharType)) {\n+                return new VarcharCoercer(fromVarcharType, toVarcharType);\n+            }\n+\n+            // Coercion not worth the copying penalty when toType is wider\n+            return Function.identity();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3NDg5NA==", "url": "https://github.com/trinodb/trino/pull/5530#discussion_r509974894", "bodyText": "UNBOUNDED_LENGTH is not really a length limit (otherwise, why would we discern this as a special case?)\nwould\nif (first.isUnbounded() || second.isUnbounded()) {\n    return !first.isUnbounded();\n}\nreturn first.getBoundedLength() < second.getBoundedLength();\n\nwork?", "author": "findepi", "createdAt": "2020-10-22T08:28:17Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePageSource.java", "diffHunk": "@@ -406,6 +418,13 @@ public ConnectorPageSource getPageSource()\n         throw new PrestoException(NOT_SUPPORTED, format(\"Unsupported coercion from %s to %s\", fromHiveType, toHiveType));\n     }\n \n+    public static boolean narrowerThan(VarcharType first, VarcharType second)\n+    {\n+        requireNonNull(first, \"first is null\");\n+        requireNonNull(second, \"second is null\");\n+        return first.getLength().orElse(VarcharType.UNBOUNDED_LENGTH) < second.getLength().orElse(VarcharType.UNBOUNDED_LENGTH);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0581133e9535a3e9767d50c0952d5ada69ec5ed1", "url": "https://github.com/trinodb/trino/commit/0581133e9535a3e9767d50c0952d5ada69ec5ed1", "message": "Declare applyCoercedValue method as abstract", "committedDate": "2020-10-23T22:28:20Z", "type": "commit"}, {"oid": "6083d85724850467d81a5423077d853ea7cdd76b", "url": "https://github.com/trinodb/trino/commit/6083d85724850467d81a5423077d853ea7cdd76b", "message": "Support coercing varchar types in hive connector", "committedDate": "2020-10-23T22:28:49Z", "type": "commit"}, {"oid": "6083d85724850467d81a5423077d853ea7cdd76b", "url": "https://github.com/trinodb/trino/commit/6083d85724850467d81a5423077d853ea7cdd76b", "message": "Support coercing varchar types in hive connector", "committedDate": "2020-10-23T22:28:49Z", "type": "forcePushed"}]}