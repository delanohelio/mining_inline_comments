{"pr_number": 4373, "pr_title": "Fix ExpressionEquivalence for long timestamp", "pr_createdAt": "2020-07-07T03:26:28Z", "pr_url": "https://github.com/trinodb/trino/pull/4373", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNDY4NQ==", "url": "https://github.com/trinodb/trino/pull/4373#discussion_r450614685", "bodyText": "no need for unsignedm sine they are in \"signed\" range", "author": "findepi", "createdAt": "2020-07-07T05:12:26Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/LongTimestamp.java", "diffHunk": "@@ -63,4 +64,14 @@ public int hashCode()\n     {\n         return Objects.hash(epochMicros, picosOfMicro);\n     }\n+\n+    @Override\n+    public int compareTo(LongTimestamp other)\n+    {\n+        int value = Long.compare(epochMicros, other.epochMicros);\n+        if (value != 0) {\n+            return value;\n+        }\n+        return Integer.compareUnsigned(picosOfMicro, other.picosOfMicro);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2MDk2NQ==", "url": "https://github.com/trinodb/trino/pull/4373#discussion_r450660965", "bodyText": "This matches the compare implementation in the Type class.", "author": "dain", "createdAt": "2020-07-07T07:23:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNDY4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNDkwNw==", "url": "https://github.com/trinodb/trino/pull/4373#discussion_r450614907", "bodyText": "techncally this cast is wrong, leftValue is not Comparable<Object>\ni'd rather cast to a raw type Comparable (and add rawtypes to noinspection as well)", "author": "findepi", "createdAt": "2020-07-07T05:13:16Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/optimizations/ExpressionEquivalence.java", "diffHunk": "@@ -285,8 +284,13 @@ public int compare(RowExpression left, RowExpression right)\n                 if (javaType == float.class || javaType == double.class) {\n                     return Double.compare(((Number) leftValue).doubleValue(), ((Number) rightValue).doubleValue());\n                 }\n-                if (javaType == Slice.class) {\n-                    return ((Slice) leftValue).compareTo((Slice) rightValue);\n+                if (leftValue instanceof Comparable) {\n+                    try {\n+                        //noinspection unchecked\n+                        return ((Comparable<Object>) leftValue).compareTo(rightValue);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNTA0NA==", "url": "https://github.com/trinodb/trino/pull/4373#discussion_r450615044", "bodyText": "Integer.compare", "author": "findepi", "createdAt": "2020-07-07T05:13:51Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/LongTimestampWithTimeZone.java", "diffHunk": "@@ -66,4 +69,34 @@ public short getTimeZoneKey()\n     {\n         return timeZoneKey;\n     }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        LongTimestampWithTimeZone that = (LongTimestampWithTimeZone) o;\n+        return epochMillis == that.epochMillis &&\n+                picosOfMilli == that.picosOfMilli;\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+        return Objects.hash(epochMillis, picosOfMilli);\n+    }\n+\n+    @Override\n+    public int compareTo(LongTimestampWithTimeZone other)\n+    {\n+        int value = Long.compare(epochMillis, other.epochMillis);\n+        if (value != 0) {\n+            return value;\n+        }\n+        return Integer.compareUnsigned(picosOfMilli, other.picosOfMilli);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY2MTAyMQ==", "url": "https://github.com/trinodb/trino/pull/4373#discussion_r450661021", "bodyText": "This matches the compare implementation in the Type class.", "author": "dain", "createdAt": "2020-07-07T07:23:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYxNTA0NA=="}], "type": "inlineReview"}, {"oid": "f7e74b0734eb605401c07297d3089fbb20d200fe", "url": "https://github.com/trinodb/trino/commit/f7e74b0734eb605401c07297d3089fbb20d200fe", "message": "Fix ExpressionEquivalence for long timestamp", "committedDate": "2020-07-07T07:36:45Z", "type": "commit"}, {"oid": "f7e74b0734eb605401c07297d3089fbb20d200fe", "url": "https://github.com/trinodb/trino/commit/f7e74b0734eb605401c07297d3089fbb20d200fe", "message": "Fix ExpressionEquivalence for long timestamp", "committedDate": "2020-07-07T07:36:45Z", "type": "forcePushed"}]}