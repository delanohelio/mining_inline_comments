{"pr_number": 5154, "pr_title": "More Oracle integration tests", "pr_createdAt": "2020-09-14T11:49:29Z", "pr_url": "https://github.com/trinodb/trino/pull/5154", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3NTY0NA==", "url": "https://github.com/trinodb/trino/pull/5154#discussion_r487875644", "bodyText": "io.airlift.testing.Closeables#closeAll(oracleServer);\noracleServer = null;", "author": "findepi", "createdAt": "2020-09-14T12:33:49Z", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/BaseOracleIntegrationSmokeTest.java", "diffHunk": "@@ -49,7 +56,9 @@ protected abstract QueryRunner createOracleQueryRunner(TestingOracleServer serve\n     @AfterClass(alwaysRun = true)\n     public final void destroy()\n     {\n-        oracleServer.close();\n+        if (oracleServer != null) {\n+            oracleServer.close();\n+        }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxMDQ0MA==", "url": "https://github.com/trinodb/trino/pull/5154#discussion_r487910440", "bodyText": "io.prestosql.testing.AbstractTestDistributedQueries#testInsert is run for Oracle as well", "author": "findepi", "createdAt": "2020-09-14T13:26:29Z", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/BaseOracleIntegrationSmokeTest.java", "diffHunk": "@@ -90,9 +99,44 @@ public void testShowCreateTable()\n                         \")\");\n     }\n \n+    @Test\n+    public void testDropTable()\n+    {\n+        String tableName = \"test_drop\" + randomTableSuffix();\n+        assertUpdate(format(\"CREATE TABLE %s AS SELECT 1 test_drop\", tableName), 1);\n+        assertTrue(getQueryRunner().tableExists(getSession(), tableName));\n+\n+        assertUpdate(\"DROP TABLE \" + tableName);\n+        assertFalse(getQueryRunner().tableExists(getSession(), tableName));\n+    }\n+\n+    @Test\n+    public void testInsert()\n+    {\n+        try (TestTable table = new TestTable(onOracle(), getUser() + \".test_insert\", \"(x number(19), y varchar(100))\")) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxMTM2OA==", "url": "https://github.com/trinodb/trino/pull/5154#discussion_r487911368", "bodyText": "is it just method split?\nwonder whether this is covered by io.prestosql.testing.AbstractTestDistributedQueries#testDataMappingSmokeTest\n(perhaps not full?)", "author": "findepi", "createdAt": "2020-09-14T13:27:48Z", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/BaseOracleIntegrationSmokeTest.java", "diffHunk": "@@ -113,39 +157,65 @@ public void testPredicatePushdown()\n         assertThat(query(\"SELECT orderkey FROM orders WHERE orderdate = DATE '1992-09-29'\"))\n                 .matches(\"VALUES CAST(1250 AS DECIMAL(19,0)), 34406, 38436, 57570\")\n                 .isCorrectlyPushedDown();\n+    }\n \n-        predicatePushdownTest(\"decimal(9, 3)\", \"123.321\", \"<=\", \"124\", \"CAST(123.321 AS decimal(9, 3))\");\n-        predicatePushdownTest(\"decimal(9, 3)\", \"123.321\", \"<=\", \"123.321\", \"CAST(123.321 AS decimal(9, 3))\");\n-        predicatePushdownTest(\"decimal(9, 3)\", \"123.321\", \"=\", \"123.321\", \"CAST(123.321 AS decimal(9, 3))\");\n-        predicatePushdownTest(\"decimal(30, 10)\", \"123456789.987654321\", \"<=\", \"123456790\", \"CAST(123456789.987654321 AS decimal(30, 10))\");\n-        predicatePushdownTest(\"decimal(30, 10)\", \"123456789.987654321\", \"<=\", \"123456789.987654321\", \"CAST(123456789.987654321 AS decimal(30, 10))\");\n-        predicatePushdownTest(\"decimal(30, 10)\", \"123456789.987654321\", \"=\", \"123456789.987654321\", \"CAST(123456789.987654321 AS decimal(30, 10))\");\n-        predicatePushdownTest(\"float(63)\", \"123456789.987654321\", \"<=\", \"CAST(123456789.99 AS REAL)\", \"CAST(123456789.987654321 AS DOUBLE)\");\n-        predicatePushdownTest(\"float(63)\", \"123456789.987654321\", \"<=\", \"CAST(123456789.99 AS DOUBLE)\", \"CAST(123456789.987654321 AS DOUBLE)\");\n-        predicatePushdownTest(\"float(126)\", \"123456789.987654321\", \"<=\", \"CAST(123456789.99 AS REAL)\", \"CAST(123456789.987654321 AS DOUBLE)\");\n-        predicatePushdownTest(\"float(126)\", \"123456789.987654321\", \"<=\", \"CAST(123456789.99 AS DOUBLE)\", \"CAST(123456789.987654321 AS DOUBLE)\");\n-        predicatePushdownTest(\"CHAR(1)\", \"'0'\", \"=\", \"'0'\", \"CHAR'0'\");\n-        predicatePushdownTest(\"CHAR(1)\", \"'0'\", \"<=\", \"'0'\", \"CHAR'0'\");\n-        predicatePushdownTest(\"CHAR(5)\", \"'0'\", \"=\", \"CHAR'0'\", \"CHAR'0    '\");\n+    @Test\n+    public void testPredicatePushdownForNumerics()\n+    {\n+        predicatePushdownTest(\"decimal(9, 3)\", \"123.321\", \"<=\", \"124\");\n+        predicatePushdownTest(\"decimal(9, 3)\", \"123.321\", \"<=\", \"123.321\");\n+        predicatePushdownTest(\"decimal(9, 3)\", \"123.321\", \"=\", \"123.321\");\n+        predicatePushdownTest(\"decimal(30, 10)\", \"123456789.987654321\", \"<=\", \"123456790\");\n+        predicatePushdownTest(\"decimal(30, 10)\", \"123456789.987654321\", \"<=\", \"123456789.987654321\");\n+        predicatePushdownTest(\"decimal(30, 10)\", \"123456789.987654321\", \"=\", \"123456789.987654321\");\n+        predicatePushdownTest(\"float(63)\", \"123456789.987654321\", \"<=\", \"CAST(123456789.99 AS REAL)\");\n+        predicatePushdownTest(\"float(63)\", \"123456789.987654321\", \"<=\", \"CAST(123456789.99 AS DOUBLE)\");\n+        predicatePushdownTest(\"float(126)\", \"123456789.987654321\", \"<=\", \"CAST(123456789.99 AS REAL)\");\n+        predicatePushdownTest(\"float(126)\", \"123456789.987654321\", \"<=\", \"CAST(123456789.99 AS DOUBLE)\");\n+        predicatePushdownTest(\"BINARY_FLOAT\", \"5.0f\", \"=\", \"CAST(5.0 AS REAL)\");\n+        predicatePushdownTest(\"BINARY_DOUBLE\", \"20.233\", \"=\", \"CAST(20.233 AS DOUBLE)\");\n+        predicatePushdownTest(\"NUMBER(5,3)\", \"5.0\", \"=\", \"CAST(5.0 AS DECIMAL(5,3))\");\n     }\n \n-    private void predicatePushdownTest(String oracleType, String oracleLiteral, String operator, String filterLiteral, String compareLiteral)\n-            throws Exception\n+    @Test\n+    public void testPredicatePushdownForChars()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3NzU4Ng==", "url": "https://github.com/trinodb/trino/pull/5154#discussion_r487977586", "bodyText": "There is some overlap, but this method additionally checks that predicates are pushed dow in the presence of casts.", "author": "aalbu", "createdAt": "2020-09-14T14:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxMTM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0Nzc5OQ==", "url": "https://github.com/trinodb/trino/pull/5154#discussion_r488047799", "bodyText": "oh, i missed that -- the method tests that the PPD actually takes place, not only that results are correct", "author": "findepi", "createdAt": "2020-09-14T16:01:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxMTM2OA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxMTQ2MQ==", "url": "https://github.com/trinodb/trino/pull/5154#discussion_r489311461", "bodyText": "could you remove oracleServer from this class and only add the field in concrete subclass.\nOtherwise we cannot be sure that some test would not execute the query on oracle dicreactly using oracleServer.execute and not via onOracle()", "author": "losipiuk", "createdAt": "2020-09-16T09:51:10Z", "path": "presto-oracle/src/test/java/io/prestosql/plugin/oracle/BaseOracleIntegrationSmokeTest.java", "diffHunk": "@@ -113,39 +151,65 @@ public void testPredicatePushdown()\n         assertThat(query(\"SELECT orderkey FROM orders WHERE orderdate = DATE '1992-09-29'\"))\n                 .matches(\"VALUES CAST(1250 AS DECIMAL(19,0)), 34406, 38436, 57570\")\n                 .isCorrectlyPushedDown();\n+    }\n \n-        predicatePushdownTest(\"decimal(9, 3)\", \"123.321\", \"<=\", \"124\", \"CAST(123.321 AS decimal(9, 3))\");\n-        predicatePushdownTest(\"decimal(9, 3)\", \"123.321\", \"<=\", \"123.321\", \"CAST(123.321 AS decimal(9, 3))\");\n-        predicatePushdownTest(\"decimal(9, 3)\", \"123.321\", \"=\", \"123.321\", \"CAST(123.321 AS decimal(9, 3))\");\n-        predicatePushdownTest(\"decimal(30, 10)\", \"123456789.987654321\", \"<=\", \"123456790\", \"CAST(123456789.987654321 AS decimal(30, 10))\");\n-        predicatePushdownTest(\"decimal(30, 10)\", \"123456789.987654321\", \"<=\", \"123456789.987654321\", \"CAST(123456789.987654321 AS decimal(30, 10))\");\n-        predicatePushdownTest(\"decimal(30, 10)\", \"123456789.987654321\", \"=\", \"123456789.987654321\", \"CAST(123456789.987654321 AS decimal(30, 10))\");\n-        predicatePushdownTest(\"float(63)\", \"123456789.987654321\", \"<=\", \"CAST(123456789.99 AS REAL)\", \"CAST(123456789.987654321 AS DOUBLE)\");\n-        predicatePushdownTest(\"float(63)\", \"123456789.987654321\", \"<=\", \"CAST(123456789.99 AS DOUBLE)\", \"CAST(123456789.987654321 AS DOUBLE)\");\n-        predicatePushdownTest(\"float(126)\", \"123456789.987654321\", \"<=\", \"CAST(123456789.99 AS REAL)\", \"CAST(123456789.987654321 AS DOUBLE)\");\n-        predicatePushdownTest(\"float(126)\", \"123456789.987654321\", \"<=\", \"CAST(123456789.99 AS DOUBLE)\", \"CAST(123456789.987654321 AS DOUBLE)\");\n-        predicatePushdownTest(\"CHAR(1)\", \"'0'\", \"=\", \"'0'\", \"CHAR'0'\");\n-        predicatePushdownTest(\"CHAR(1)\", \"'0'\", \"<=\", \"'0'\", \"CHAR'0'\");\n-        predicatePushdownTest(\"CHAR(5)\", \"'0'\", \"=\", \"CHAR'0'\", \"CHAR'0    '\");\n+    @Test\n+    public void testPredicatePushdownForNumerics()\n+    {\n+        predicatePushdownTest(\"DECIMAL(9, 3)\", \"123.321\", \"<=\", \"124\");\n+        predicatePushdownTest(\"DECIMAL(9, 3)\", \"123.321\", \"<=\", \"123.321\");\n+        predicatePushdownTest(\"DECIMAL(9, 3)\", \"123.321\", \"=\", \"123.321\");\n+        predicatePushdownTest(\"DECIMAL(30, 10)\", \"123456789.987654321\", \"<=\", \"123456790\");\n+        predicatePushdownTest(\"DECIMAL(30, 10)\", \"123456789.987654321\", \"<=\", \"123456789.987654321\");\n+        predicatePushdownTest(\"DECIMAL(30, 10)\", \"123456789.987654321\", \"=\", \"123456789.987654321\");\n+        predicatePushdownTest(\"FLOAT(63)\", \"123456789.987654321\", \"<=\", \"CAST(123456789.99 AS REAL)\");\n+        predicatePushdownTest(\"FLOAT(63)\", \"123456789.987654321\", \"<=\", \"CAST(123456789.99 AS DOUBLE)\");\n+        predicatePushdownTest(\"FLOAT(126)\", \"123456789.987654321\", \"<=\", \"CAST(123456789.99 AS REAL)\");\n+        predicatePushdownTest(\"FLOAT(126)\", \"123456789.987654321\", \"<=\", \"CAST(123456789.99 AS DOUBLE)\");\n+        predicatePushdownTest(\"BINARY_FLOAT\", \"5.0f\", \"=\", \"CAST(5.0 AS REAL)\");\n+        predicatePushdownTest(\"BINARY_DOUBLE\", \"20.233\", \"=\", \"CAST(20.233 AS DOUBLE)\");\n+        predicatePushdownTest(\"NUMBER(5,3)\", \"5.0\", \"=\", \"CAST(5.0 AS DECIMAL(5,3))\");\n     }\n \n-    private void predicatePushdownTest(String oracleType, String oracleLiteral, String operator, String filterLiteral, String compareLiteral)\n-            throws Exception\n+    @Test\n+    public void testPredicatePushdownForChars()\n     {\n-        String tableName = \"test_pushdown_\" + oracleType.replaceAll(\"[^a-zA-Z0-9]\", \"\");\n-        try (AutoCloseable ignored = withTable(tableName, format(\"(c %s)\", oracleType))) {\n-            oracleServer.execute(format(\"INSERT INTO %s VALUES (%s)\", tableName, oracleLiteral));\n+        predicatePushdownTest(\"CHAR(1)\", \"'0'\", \"=\", \"'0'\");\n+        predicatePushdownTest(\"CHAR(1)\", \"'0'\", \"<=\", \"'0'\");\n+        predicatePushdownTest(\"CHAR(5)\", \"'0'\", \"=\", \"CHAR'0'\");\n+        predicatePushdownTest(\"CHAR(7)\", \"'my_char'\", \"=\", \"CAST('my_char' AS CHAR(7))\");\n+        predicatePushdownTest(\"NCHAR(7)\", \"'my_char'\", \"=\", \"CAST('my_char' AS CHAR(7))\");\n+        predicatePushdownTest(\"VARCHAR2(7)\", \"'my_char'\", \"=\", \"CAST('my_char' AS VARCHAR(7))\");\n+        predicatePushdownTest(\"NVARCHAR2(7)\", \"'my_char'\", \"=\", \"CAST('my_char' AS VARCHAR(7))\");\n+\n+        try (TestTable table = new TestTable(\n+                onOracle(),\n+                getUser() + \".test_pdown_\",\n+                \"(c_clob CLOB, c_nclob NCLOB)\",\n+                ImmutableList.of(\"'my_clob', 'my_nclob'\"))) {\n+            assertThat(query(format(\"SELECT c_clob FROM %s WHERE c_clob = cast('my_clob' as varchar)\", table.getName()))).isNotFullyPushedDown(FilterNode.class);\n+            assertThat(query(format(\"SELECT c_nclob FROM %s WHERE c_nclob = cast('my_nclob' as varchar)\", table.getName()))).isNotFullyPushedDown(FilterNode.class);\n+        }\n+    }\n+\n+    private void predicatePushdownTest(String oracleType, String oracleLiteral, String operator, String filterLiteral)\n+    {\n+        String tableName = \"test_pdown_\" + oracleType.replaceAll(\"[^a-zA-Z0-9]\", \"\");\n+        try (TestTable table = new TestTable(onOracle(), getUser() + \".\" + tableName, format(\"(c %s)\", oracleType))) {\n+            onOracle().execute(format(\"INSERT INTO %s VALUES (%s)\", table.getName(), oracleLiteral));\n \n-            assertThat(query(format(\"SELECT * FROM %s WHERE c %s %s\", tableName, operator, filterLiteral)))\n-                    .matches(format(\"VALUES (%s)\", compareLiteral))\n+            assertThat(query(format(\"SELECT * FROM %s WHERE c %s %s\", table.getName(), operator, filterLiteral)))\n                     .isCorrectlyPushedDown();\n         }\n     }\n \n-    private AutoCloseable withTable(String tableName, String tableDefinition)\n-            throws Exception\n+    protected String getUser()\n+    {\n+        return TEST_USER;\n+    }\n+\n+    protected SqlExecutor onOracle()\n     {\n-        oracleServer.execute(format(\"CREATE TABLE %s%s\", tableName, tableDefinition));\n-        return () -> oracleServer.execute(format(\"DROP TABLE %s\", tableName));\n+        return oracleServer::execute;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "3693946e696bec85cb2aeae8fb0075f47d347df0", "url": "https://github.com/trinodb/trino/commit/3693946e696bec85cb2aeae8fb0075f47d347df0", "message": "Refactor and improve coverage for Oracle integration tests", "committedDate": "2020-09-18T03:25:00Z", "type": "commit"}, {"oid": "3693946e696bec85cb2aeae8fb0075f47d347df0", "url": "https://github.com/trinodb/trino/commit/3693946e696bec85cb2aeae8fb0075f47d347df0", "message": "Refactor and improve coverage for Oracle integration tests", "committedDate": "2020-09-18T03:25:00Z", "type": "forcePushed"}]}