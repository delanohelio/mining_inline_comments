{"pr_number": 4535, "pr_title": "Ignore ES indexes without mappings", "pr_createdAt": "2020-07-22T12:33:34Z", "pr_url": "https://github.com/trinodb/trino/pull/4535", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0Mzg1MQ==", "url": "https://github.com/trinodb/trino/pull/4535#discussion_r458943851", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    client.getAliases().entrySet().stream()\n          \n          \n            \n                            .filter(entry -> indexes.contains(entry.getKey()))\n          \n          \n            \n                            .flatMap(entry -> entry.getValue().stream().map(alias -> new SchemaTableName(this.schemaName, alias)))\n          \n          \n            \n                    client.getAliases().entrySet().stream()\n          \n          \n            \n                            .filter(entry -> indexes.contains(entry.getKey()))\n          \n          \n            \n                            .flatMap(entry -> entry.getValue().stream())\n          \n          \n            \n                            .map(alias -> new SchemaTableName(this.schemaName, alias))", "author": "losipiuk", "createdAt": "2020-07-22T16:59:05Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -339,13 +341,15 @@ else if (type instanceof ObjectType) {\n         }\n \n         ImmutableList.Builder<SchemaTableName> result = ImmutableList.builder();\n+        Set<String> indexes = client.getIndexes().stream().collect(toUnmodifiableSet());\n \n-        client.getIndexes().stream()\n+        indexes.stream()\n                 .map(index -> new SchemaTableName(this.schemaName, index))\n                 .forEach(result::add);\n \n-        client.getAliases().stream()\n-                .map(index -> new SchemaTableName(this.schemaName, index))\n+        client.getAliases().entrySet().stream()\n+                .filter(entry -> indexes.contains(entry.getKey()))\n+                .flatMap(entry -> entry.getValue().stream().map(alias -> new SchemaTableName(this.schemaName, alias)))", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1ODQ0Ng==", "url": "https://github.com/trinodb/trino/pull/4535#discussion_r459958446", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (docsCount + deletedDocsCount == 0) {\n          \n          \n            \n                                if (docsCount == 0 && deletedDocsCount == 0) {", "author": "findepi", "createdAt": "2020-07-24T09:52:40Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/client/ElasticsearchClient.java", "diffHunk": "@@ -447,12 +447,22 @@ private int shardPreference(SearchShardsResponse.Shard left, SearchShardsRespons\n \n     public List<String> getIndexes()\n     {\n-        return doRequest(\"/_cat/indices?h=index&format=json&s=index:asc\", body -> {\n+        return doRequest(\"/_cat/indices?h=index,docs.count,docs.deleted&format=json&s=index:asc\", body -> {\n             try {\n                 ImmutableList.Builder<String> result = ImmutableList.builder();\n                 JsonNode root = OBJECT_MAPPER.readTree(body);\n                 for (int i = 0; i < root.size(); i++) {\n-                    result.add(root.get(i).get(\"index\").asText());\n+                    String index = root.get(i).get(\"index\").asText();\n+                    // make sure the index has mappings we can use to derive the schema\n+                    int docsCount = root.get(i).get(\"docs.count\").asInt();\n+                    int deletedDocsCount = root.get(i).get(\"docs.deleted\").asInt();\n+                    if (docsCount + deletedDocsCount == 0) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1OTA3MA==", "url": "https://github.com/trinodb/trino/pull/4535#discussion_r459959070", "bodyText": "is it equiv to createIndex(indexName, '{}')?", "author": "findepi", "createdAt": "2020-07-24T09:54:00Z", "path": "presto-elasticsearch/src/test/java/io/prestosql/elasticsearch/BaseElasticsearchSmokeTest.java", "diffHunk": "@@ -840,6 +892,12 @@ private void addAlias(String index, String alias)\n \n     protected abstract String indexMapping(@Language(\"JSON\") String properties);\n \n+    private void createIndex(String indexName)\n+            throws IOException\n+    {\n+        client.getLowLevelClient().performRequest(\"PUT\", \"/\" + indexName, ImmutableMap.of());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxNjAxNg==", "url": "https://github.com/trinodb/trino/pull/4535#discussion_r460016016", "bodyText": "No, ElasticsearchClient expects at least one property to be present when processing mappings.", "author": "aalbu", "createdAt": "2020-07-24T12:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1OTA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1OTQyMw==", "url": "https://github.com/trinodb/trino/pull/4535#discussion_r459959423", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Set<String> indexes = client.getIndexes().stream().collect(toUnmodifiableSet());\n          \n          \n            \n                    Set<String> indexes = ImmutableSet.copyOf(client.getIndexes());", "author": "findepi", "createdAt": "2020-07-24T09:54:45Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -339,13 +341,15 @@ else if (type instanceof ObjectType) {\n         }\n \n         ImmutableList.Builder<SchemaTableName> result = ImmutableList.builder();\n+        Set<String> indexes = client.getIndexes().stream().collect(toUnmodifiableSet());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6af32560c028b0e69947bfacde7ca4483181d267", "url": "https://github.com/trinodb/trino/commit/6af32560c028b0e69947bfacde7ca4483181d267", "message": "Ignore ES indexes without mappings", "committedDate": "2020-07-24T12:25:59Z", "type": "commit"}, {"oid": "6af32560c028b0e69947bfacde7ca4483181d267", "url": "https://github.com/trinodb/trino/commit/6af32560c028b0e69947bfacde7ca4483181d267", "message": "Ignore ES indexes without mappings", "committedDate": "2020-07-24T12:25:59Z", "type": "forcePushed"}]}