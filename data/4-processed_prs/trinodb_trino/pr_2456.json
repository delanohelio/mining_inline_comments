{"pr_number": 2456, "pr_title": "Remove redundant CrossJoin operators", "pr_createdAt": "2020-01-09T17:57:38Z", "pr_url": "https://github.com/trinodb/trino/pull/2456", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwMTE0Mg==", "url": "https://github.com/trinodb/trino/pull/2456#discussion_r365001142", "bodyText": "inline WITH", "author": "findepi", "createdAt": "2020-01-09T22:57:57Z", "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestLogicalPlanner.java", "diffHunk": "@@ -1274,4 +1274,18 @@ public void testRedundantHashRemovalForUnionAllAndMarkDistinct()\n                                                                         node(ProjectNode.class,\n                                                                                 node(TableScanNode.class))))))))));\n     }\n+\n+    @Test\n+    public void testRemoveRedundantCrossJoin()\n+    {\n+        assertPlan(\"WITH temp AS (SELECT 1 AS a) SELECT regionkey from nation, temp WHERE regionkey = temp.a\",", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwMTg1MQ==", "url": "https://github.com/trinodb/trino/pull/2456#discussion_r365001851", "bodyText": "add a test case with SELECT * -- the 1 from the scalar subquery should be pulled up and cross join still eliminated.", "author": "findepi", "createdAt": "2020-01-09T23:00:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwMTE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5NjgyOA==", "url": "https://github.com/trinodb/trino/pull/2456#discussion_r365596828", "bodyText": "But in case SELECT *  -- then we might not be able to pull up now. We need something like a EqualityInference for ProjectExpressions which I guess we don't have rn.", "author": "Praveen2112", "createdAt": "2020-01-12T17:01:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwMTE0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYxMzk0Nw==", "url": "https://github.com/trinodb/trino/pull/2456#discussion_r365613947", "bodyText": "Right. You can add a commented out test case, with TODO https://github.com/prestosql/presto/issues/2480 -- #2480.", "author": "findepi", "createdAt": "2020-01-12T21:54:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwMTE0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE2NTUzMQ==", "url": "https://github.com/trinodb/trino/pull/2456#discussion_r365165531", "bodyText": "Should we care about cases where sAtMost(some, context.getLookup(), 0))?", "author": "kokosing", "createdAt": "2020-01-10T10:21:35Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/iterative/rule/RemoveRedundantCrossJoin.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.planner.iterative.rule;\n+\n+import io.prestosql.matching.Captures;\n+import io.prestosql.matching.Pattern;\n+import io.prestosql.sql.planner.iterative.Rule;\n+import io.prestosql.sql.planner.plan.JoinNode;\n+\n+import static io.prestosql.sql.planner.optimizations.QueryCardinalityUtil.isScalar;\n+import static io.prestosql.sql.planner.plan.Patterns.join;\n+\n+public class RemoveRedundantCrossJoin\n+        implements Rule<JoinNode>\n+{\n+    private static final Pattern<JoinNode> PATTERN = join().matching(JoinNode::isCrossJoin);\n+\n+    @Override\n+    public Pattern<JoinNode> getPattern()\n+    {\n+        return PATTERN;\n+    }\n+\n+    @Override\n+    public Result apply(JoinNode node, Captures captures, Context context)\n+    {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5NjgwNw==", "url": "https://github.com/trinodb/trino/pull/2456#discussion_r365596807", "bodyText": "if it has 0 rows then we can replace the join with an empty values node..the same can be extended for other join also.", "author": "Praveen2112", "createdAt": "2020-01-12T17:00:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE2NTUzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYxMjgzNw==", "url": "https://github.com/trinodb/trino/pull/2456#discussion_r365612837", "bodyText": "Right. It can be a separate rule (and separate PR), since this will apply to inner and left/right.", "author": "findepi", "createdAt": "2020-01-12T21:39:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE2NTUzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0MDgzOA==", "url": "https://github.com/trinodb/trino/pull/2456#discussion_r365540838", "bodyText": "@Praveen2112  Any particular reason you added it here?\nMaybe this could go together with\nhttps://github.com/prestosql/presto/blob/b15ad53a359f6c8cbf91b21b453b828b0cb82782/presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java#L310-L335\n@martint do you remember why RemoveUnreferencedScalarSubqueries isn't there?\nAnd why we run this suite only once?", "author": "findepi", "createdAt": "2020-01-11T20:35:42Z", "path": "presto-main/src/main/java/io/prestosql/sql/planner/PlanOptimizers.java", "diffHunk": "@@ -428,7 +429,8 @@ public PlanOptimizers(\n                         estimatedExchangesCostCalculator,\n                         ImmutableSet.of(\n                                 new RemoveRedundantIdentityProjections(),\n-                                new PushAggregationThroughOuterJoin())),\n+                                new PushAggregationThroughOuterJoin(),\n+                                new RemoveRedundantCrossJoin())),", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5NjkzNQ==", "url": "https://github.com/trinodb/trino/pull/2456#discussion_r365596935", "bodyText": "Initially we have aaded in L#310 but expression in the scalar query gets translated to the probe side of the join after we run the PredicatePushDown optimizer so added it along with RemoveRedundantIdentityProjections", "author": "Praveen2112", "createdAt": "2020-01-12T17:03:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0MDgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcwODQxMg==", "url": "https://github.com/trinodb/trino/pull/2456#discussion_r365708412", "bodyText": "@martint ?", "author": "findepi", "createdAt": "2020-01-13T09:35:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0MDgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4MjA1Mg==", "url": "https://github.com/trinodb/trino/pull/2456#discussion_r365982052", "bodyText": "Yeah, ideally all rules should be in the same IterativeOptimizer, unless they cause the optimizer to take a greedy step it won't be able to get out of (such as how Intersect and Except are converted to a combination of joins and aggregations).", "author": "martint", "createdAt": "2020-01-13T19:21:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0MDgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2OTQwMg==", "url": "https://github.com/trinodb/trino/pull/2456#discussion_r368169402", "bodyText": "Let's add it to both places (for future-proofing), and add a comment here explaining why it has to appear here for now.", "author": "martint", "createdAt": "2020-01-17T22:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0MDgzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyODM2Ng==", "url": "https://github.com/trinodb/trino/pull/2456#discussion_r368228366", "bodyText": "have added it at both the places", "author": "Praveen2112", "createdAt": "2020-01-18T14:00:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0MDgzOA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "585a383e8e37fc63397cdfbc2ebb87659304ffe8", "url": "https://github.com/trinodb/trino/commit/585a383e8e37fc63397cdfbc2ebb87659304ffe8", "message": "Eliminate redundant CROSS JOIN with scalar", "committedDate": "2020-01-22T02:18:16Z", "type": "commit"}, {"oid": "585a383e8e37fc63397cdfbc2ebb87659304ffe8", "url": "https://github.com/trinodb/trino/commit/585a383e8e37fc63397cdfbc2ebb87659304ffe8", "message": "Eliminate redundant CROSS JOIN with scalar", "committedDate": "2020-01-22T02:18:16Z", "type": "forcePushed"}]}