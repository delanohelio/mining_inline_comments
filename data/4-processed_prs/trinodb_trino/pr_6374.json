{"pr_number": 6374, "pr_title": "Ignore failures translating hive views while listing views", "pr_createdAt": "2020-12-17T21:19:02Z", "pr_url": "https://github.com/trinodb/trino/pull/6374", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3NjIxNw==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r545476217", "bodyText": "What's the implication of not adding failing views to the view map? What would happen if one of these views was referenced in a query?", "author": "JamesRTaylor", "createdAt": "2020-12-17T23:37:57Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1917,6 +1918,26 @@ public boolean supportsMetadataDelete(ConnectorSession session, ConnectorTableHa\n         return handle.getTableParameters().isEmpty() || !isFullAcidTable(handle.getTableParameters().get());\n     }\n \n+    @Override\n+    public Map<SchemaTableName, ConnectorViewDefinition> getViews(ConnectorSession session, Optional<String> schemaName)\n+    {\n+        ImmutableMap.Builder<SchemaTableName, ConnectorViewDefinition> views = ImmutableMap.builder();\n+        for (SchemaTableName name : listViews(session, schemaName)) {\n+            try {\n+                getView(session, name).ifPresent(view -> views.put(name, view));\n+            }\n+            catch (PrestoException e) {\n+                if (e.getErrorCode().equals(HIVE_VIEW_TRANSLATION_ERROR.toErrorCode())) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ0MTM5Mw==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r547441393", "bodyText": "view resolution shouldn't be impacted, as getViews method is only used for listing views and columns.", "author": "phd3", "createdAt": "2020-12-22T18:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3NjIxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3NzIzOQ==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r545477239", "bodyText": "Based on your comment, are you leaning toward not committing this test because you're worried about future versions of Coral supporting these functions? Perhaps you can instead use a construct that you think may never be supported by Coral? I like the idea of keeping the test if it's possible. FWIW, there are often times that tests need to be removed as functionality evolves.", "author": "JamesRTaylor", "createdAt": "2020-12-17T23:40:48Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -231,6 +233,32 @@ public void testHiveViewInInformationSchema()\n                 .contains(row(\"n_nationkey\", \"bigint\", \"\", \"\"));\n     }\n \n+    @Test(groups = HIVE_VIEWS)\n+    public void testFailingHiveViewsForInformationSchema()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQzOTY2Ng==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r547439666", "bodyText": "Added a more reliable test.", "author": "phd3", "createdAt": "2020-12-22T18:34:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ3NzIzOQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEzNDk1OQ==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r546134959", "bodyText": "Can we have a test for reading information_schema.views when one of the views cannot be translated?\n(in fact, we could perhaps define a totally bogus view for that -- would that be possible?)\nAlso, can we have a test for reading information_schema.columns without and with filter?\nThis is where the ConnectorMetadata.getViews seems to be also used.", "author": "findepi", "createdAt": "2020-12-18T23:03:08Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -1917,6 +1918,26 @@ public boolean supportsMetadataDelete(ConnectorSession session, ConnectorTableHa\n         return handle.getTableParameters().isEmpty() || !isFullAcidTable(handle.getTableParameters().get());\n     }\n \n+    @Override\n+    public Map<SchemaTableName, ConnectorViewDefinition> getViews(ConnectorSession session, Optional<String> schemaName)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQzOTQyOA==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r547439428", "bodyText": "Added the suggested tests.", "author": "phd3", "createdAt": "2020-12-22T18:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjEzNDk1OQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNDM4OA==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r547514388", "bodyText": "Maybe add a bit more explanation:\n// Skip older versions since they don't support \"getTableNamesByType\" in ThriftHiveMetastore#getAllViews\n// and so information_schema.views does not include translated Hive views properly\n\nBTW, it still worthwhile to run the test with older Hive versions, just the assertions would be different -- to document current behavior & prevent regressions.\nHow would it look like if you used getHiveVersionMajor() on per-assertion basis?\nkind of like https://github.com/prestosql/presto/blob/3c5b5b053affa6cf093e7f4cbca0bb26d9bfb380/presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveTableStatistics.java#L129-L131", "author": "findepi", "createdAt": "2020-12-22T21:25:16Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -231,6 +233,45 @@ public void testHiveViewInInformationSchema()\n                 .contains(row(\"n_nationkey\", \"bigint\", \"\", \"\"));\n     }\n \n+    @Test(groups = HIVE_VIEWS)\n+    public void testFailingHiveViewsForInformationSchema()\n+    {\n+        if (getHiveVersionMajor() < 3) {\n+            // Skip older versions since they don't support \"getTableNamesByType\" in ThriftHiveMetastore#getAllViews\n+            throw new SkipException(\"Only test the behavior for hive 3\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg5Mjg0Nw==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r547892847", "bodyText": "Can you also add a test to TestHiveViewsLegacy.java to document behavior difference.\n...\nSecond thought, actually it may not apply, as I am not sure if you may force legacy view translation logic to throw HIVE_VIEW_TRANSLATION_ERROR", "author": "losipiuk", "createdAt": "2020-12-23T10:39:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNDM4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNTAzOQ==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r547515039", "bodyText": "DISTINCT table_name -> table_name, column_name\nso that we test also what is returned for these views", "author": "findepi", "createdAt": "2020-12-22T21:26:54Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -231,6 +233,45 @@ public void testHiveViewInInformationSchema()\n                 .contains(row(\"n_nationkey\", \"bigint\", \"\", \"\"));\n     }\n \n+    @Test(groups = HIVE_VIEWS)\n+    public void testFailingHiveViewsForInformationSchema()\n+    {\n+        if (getHiveVersionMajor() < 3) {\n+            // Skip older versions since they don't support \"getTableNamesByType\" in ThriftHiveMetastore#getAllViews\n+            throw new SkipException(\"Only test the behavior for hive 3\");\n+        }\n+\n+        onHive().executeQuery(\"DROP SCHEMA IF EXISTS test_list_failing_views CASCADE\");\n+        onHive().executeQuery(\"CREATE SCHEMA test_list_failing_views\");\n+        onHive().executeQuery(\"CREATE VIEW test_list_failing_views.correct_view AS SELECT * FROM nation limit 5\");\n+\n+        // Create a view for which the translation is guaranteed to fail\n+        onPresto().executeQuery(\"CREATE TABLE test_list_failing_views.table_dropped (col0 BIGINT)\");\n+        onHive().executeQuery(\"CREATE VIEW test_list_failing_views.failing_view AS SELECT * FROM test_list_failing_views.table_dropped\");\n+        onPresto().executeQuery(\"DROP TABLE test_list_failing_views.table_dropped\");\n+\n+        assertThat(query(\"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views'\"))\n+                .containsOnly(row(\"correct_view\"));\n+\n+        assertThat(query(\"SELECT table_name FROM information_schema.views\"))\n+                .contains(row(\"correct_view\"));\n+\n+        assertThat(query(\"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views' and table_name = 'correct_view'\"))\n+                .containsOnly(row(\"correct_view\"));\n+\n+        // Listing fails when metadata for the problematic view is queried specifically\n+        assertThatThrownBy(() -> query(\"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views' and table_name = 'failing_view'\"))\n+                .hasMessageContaining(\"Failed to translate Hive view 'test_list_failing_views.failing_view'\");\n+\n+        // Queries on information_schema.columns also trigger ConnectorMetadata#getViews. Columns from failing_view are\n+        // listed too since HiveMetadata#listTableColumns does not ignore views.\n+        assertThat(query(\"SELECT DISTINCT table_name FROM information_schema.columns WHERE table_schema = 'test_list_failing_views'\"))\n+                .containsOnly(row(\"correct_view\"), row(\"failing_view\"));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNTI5Ng==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r547515296", "bodyText": "Why does it fail? In the unfiltered information_schema.columns query we were OK to use information available in metastore, without translating the view. Why are we not doing this here?", "author": "findepi", "createdAt": "2020-12-22T21:27:45Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestHiveViews.java", "diffHunk": "@@ -231,6 +233,45 @@ public void testHiveViewInInformationSchema()\n                 .contains(row(\"n_nationkey\", \"bigint\", \"\", \"\"));\n     }\n \n+    @Test(groups = HIVE_VIEWS)\n+    public void testFailingHiveViewsForInformationSchema()\n+    {\n+        if (getHiveVersionMajor() < 3) {\n+            // Skip older versions since they don't support \"getTableNamesByType\" in ThriftHiveMetastore#getAllViews\n+            throw new SkipException(\"Only test the behavior for hive 3\");\n+        }\n+\n+        onHive().executeQuery(\"DROP SCHEMA IF EXISTS test_list_failing_views CASCADE\");\n+        onHive().executeQuery(\"CREATE SCHEMA test_list_failing_views\");\n+        onHive().executeQuery(\"CREATE VIEW test_list_failing_views.correct_view AS SELECT * FROM nation limit 5\");\n+\n+        // Create a view for which the translation is guaranteed to fail\n+        onPresto().executeQuery(\"CREATE TABLE test_list_failing_views.table_dropped (col0 BIGINT)\");\n+        onHive().executeQuery(\"CREATE VIEW test_list_failing_views.failing_view AS SELECT * FROM test_list_failing_views.table_dropped\");\n+        onPresto().executeQuery(\"DROP TABLE test_list_failing_views.table_dropped\");\n+\n+        assertThat(query(\"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views'\"))\n+                .containsOnly(row(\"correct_view\"));\n+\n+        assertThat(query(\"SELECT table_name FROM information_schema.views\"))\n+                .contains(row(\"correct_view\"));\n+\n+        assertThat(query(\"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views' and table_name = 'correct_view'\"))\n+                .containsOnly(row(\"correct_view\"));\n+\n+        // Listing fails when metadata for the problematic view is queried specifically\n+        assertThatThrownBy(() -> query(\"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views' and table_name = 'failing_view'\"))\n+                .hasMessageContaining(\"Failed to translate Hive view 'test_list_failing_views.failing_view'\");\n+\n+        // Queries on information_schema.columns also trigger ConnectorMetadata#getViews. Columns from failing_view are\n+        // listed too since HiveMetadata#listTableColumns does not ignore views.\n+        assertThat(query(\"SELECT DISTINCT table_name FROM information_schema.columns WHERE table_schema = 'test_list_failing_views'\"))\n+                .containsOnly(row(\"correct_view\"), row(\"failing_view\"));\n+\n+        assertThatThrownBy(() -> query(\"SELECT * FROM information_schema.columns WHERE table_schema = 'test_list_failing_views' AND table_name = 'failing_view'\"))\n+                .hasMessageContaining(\"Failed to translate Hive view 'test_list_failing_views.failing_view'\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMzMjgyOA==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r548332828", "bodyText": "This is because the unfiltered version uses HiveMetadata#getViews, which ignores failures. Filtered version uses HiveMetadata#getView which doesn't.", "author": "phd3", "createdAt": "2020-12-24T00:41:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNTI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MTk1OQ==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r549151959", "bodyText": "That's technically understood and what i anticipated, but is there a sound reason for the difference?", "author": "findepi", "createdAt": "2020-12-27T18:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNTI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTEzNjUzNg==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r551136536", "bodyText": "Note that information_schema.views also has a similar discrepancy of ignoring v/s failing for unfiltered v/s filtered case. Do you think the discrepancy is okay there but not for information_schema.columns?\nAn argument in favor of the discrepancy is that - we want to show most other metadata (from valid views) when only some of the tables/views have invalid metadata. In the \"filtered\" case, the specific view being looked for is problematic, so failing doesn't result in losing any metadata.\nTo make filtered v/s unfiltered cases more consistent, I think it'd help to make ConnectorMetadata#getViews (and other listing calls) return an iterator, but may be do such an SPI change in a separate PR.", "author": "phd3", "createdAt": "2021-01-04T06:28:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNTI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTEzNjg2Ng==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r551136866", "bodyText": "From SQL perspective, I see how this is problematic. While listing with a coerce filter, we ignore the failing view. But for point-lookup, we fail the query. So to be consistent, we might want to always ignore so that we can atleast return partial correct metadata where we can. How about we swallow PrestoExceptions from https://github.com/trinodb/trino/blob/master/core/trino-main/src/main/java/io/trino/metadata/MetadataManager.java#L1036 to do this? This will resolve discrepancy for both the tables.", "author": "phd3", "createdAt": "2021-01-04T06:29:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNTI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc3NzA2OQ==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r551777069", "bodyText": "I think you made a valid point and i see how inconsistent it is. It is not limited to views either and we have this \"ignore or throw? sacrifice SQL consistency?\" challenge in other places as well.\nI think it does not help to solve those cases on one-by-one basis, as this may lead to different decisions in different cases (eg due to different priorities or whatever else).\nLet's maybe have a dedicated discussion, document the outcome somewhere and go ahead.\nMy prediction is that chances are high we come to the conclusion aligned with your thinking, but i would really want to preserve the consistency by being a bit more structured about the decision making process.\nWhat do you think?", "author": "findepi", "createdAt": "2021-01-05T08:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNTI5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTU1NjI5Mg==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r565556292", "bodyText": "@findepi Does it seem reasonable to you to go ahead with this PR in the current form? We can update this test for filtered case in future according to the final verdict in #6551. (The current approach seems aligned with @kokosing 's opinion too.)", "author": "phd3", "createdAt": "2021-01-27T18:56:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNTI5Ng=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "9f8b4bd8b3016e451241754e305f35048c65018e", "url": "https://github.com/trinodb/trino/commit/9f8b4bd8b3016e451241754e305f35048c65018e", "message": "Rename assertion methods in TestHiveViews", "committedDate": "2021-01-04T20:42:31Z", "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQwNDUzMA==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r578404530", "bodyText": "We should also ignore TableNotFoundException (race condition)", "author": "findepi", "createdAt": "2021-02-18T13:11:44Z", "path": "plugin/trino-hive/src/main/java/io/trino/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -2006,6 +2007,26 @@ public boolean supportsMetadataDelete(ConnectorSession session, ConnectorTableHa\n         return handle.getTableParameters().isEmpty() || !isFullAcidTable(handle.getTableParameters().get());\n     }\n \n+    @Override\n+    public Map<SchemaTableName, ConnectorViewDefinition> getViews(ConnectorSession session, Optional<String> schemaName)\n+    {\n+        ImmutableMap.Builder<SchemaTableName, ConnectorViewDefinition> views = ImmutableMap.builder();\n+        for (SchemaTableName name : listViews(session, schemaName)) {\n+            try {\n+                getView(session, name).ifPresent(view -> views.put(name, view));\n+            }\n+            catch (TrinoException e) {\n+                if (e.getErrorCode().equals(HIVE_VIEW_TRANSLATION_ERROR.toErrorCode())) {\n+                    // Ignore hive views for which translation fails", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQwNTM1OA==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r578405358", "bodyText": "Make sure it's clear we're talking about Trino's information_schema, not the one in HMS", "author": "findepi", "createdAt": "2021-02-18T13:13:08Z", "path": "testing/trino-product-tests/src/main/java/io/trino/tests/hive/TestHiveViews.java", "diffHunk": "@@ -13,5 +13,71 @@\n  */\n package io.trino.tests.hive;\n \n+import io.trino.tempto.Requires;\n+import io.trino.tempto.assertions.QueryAssert;\n+import io.trino.tempto.fulfillment.table.hive.tpch.ImmutableTpchTablesRequirements;\n+import org.testng.annotations.Test;\n+\n+import static io.trino.tempto.assertions.QueryAssert.Row.row;\n+import static io.trino.tempto.assertions.QueryAssert.assertThat;\n+import static io.trino.tempto.query.QueryExecutor.query;\n+import static io.trino.tests.TestGroups.HIVE_VIEWS;\n+import static io.trino.tests.utils.QueryExecutors.onHive;\n+import static io.trino.tests.utils.QueryExecutors.onPresto;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@Requires({\n+        ImmutableTpchTablesRequirements.ImmutableNationTable.class,\n+        ImmutableTpchTablesRequirements.ImmutableOrdersTable.class,\n+})\n public class TestHiveViews\n-        extends AbstractTestHiveViews {}\n+        extends AbstractTestHiveViews\n+{\n+    @Test(groups = HIVE_VIEWS)\n+    public void testFailingHiveViewsForInformationSchema()\n+    {\n+        // The expected behavior is different across hive versions. For hive 3, the call \"getTableNamesByType\" is\n+        // used in ThriftHiveMetastore#getAllViews. For older versions, the fallback to doGetTablesWithParameter\n+        // is used, so information_schema.views does not include translated Hive views.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODc2ODAwNQ==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r578768005", "bodyText": "Please move the comment just above assertion queries.", "author": "losipiuk", "createdAt": "2021-02-18T21:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQwNTM1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQwNjI0MA==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r578406240", "bodyText": "I very much dislike annotation-based requirements, because they make working with tests harder.\nAnyway TestHiveViewsLegacy already uses this, so please keep it.\nimport the inner classes", "author": "findepi", "createdAt": "2021-02-18T13:14:29Z", "path": "testing/trino-product-tests/src/main/java/io/trino/tests/hive/TestHiveViews.java", "diffHunk": "@@ -13,5 +13,71 @@\n  */\n package io.trino.tests.hive;\n \n+import io.trino.tempto.Requires;\n+import io.trino.tempto.assertions.QueryAssert;\n+import io.trino.tempto.fulfillment.table.hive.tpch.ImmutableTpchTablesRequirements;\n+import org.testng.annotations.Test;\n+\n+import static io.trino.tempto.assertions.QueryAssert.Row.row;\n+import static io.trino.tempto.assertions.QueryAssert.assertThat;\n+import static io.trino.tempto.query.QueryExecutor.query;\n+import static io.trino.tests.TestGroups.HIVE_VIEWS;\n+import static io.trino.tests.utils.QueryExecutors.onHive;\n+import static io.trino.tests.utils.QueryExecutors.onPresto;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@Requires({\n+        ImmutableTpchTablesRequirements.ImmutableNationTable.class,\n+        ImmutableTpchTablesRequirements.ImmutableOrdersTable.class,\n+})", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQwNzI3Nw==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r578407277", "bodyText": "assertThatThrownBy should be followed with the actual assertion.", "author": "findepi", "createdAt": "2021-02-18T13:15:56Z", "path": "testing/trino-product-tests/src/main/java/io/trino/tests/hive/TestHiveViews.java", "diffHunk": "@@ -13,5 +13,71 @@\n  */\n package io.trino.tests.hive;\n \n+import io.trino.tempto.Requires;\n+import io.trino.tempto.assertions.QueryAssert;\n+import io.trino.tempto.fulfillment.table.hive.tpch.ImmutableTpchTablesRequirements;\n+import org.testng.annotations.Test;\n+\n+import static io.trino.tempto.assertions.QueryAssert.Row.row;\n+import static io.trino.tempto.assertions.QueryAssert.assertThat;\n+import static io.trino.tempto.query.QueryExecutor.query;\n+import static io.trino.tests.TestGroups.HIVE_VIEWS;\n+import static io.trino.tests.utils.QueryExecutors.onHive;\n+import static io.trino.tests.utils.QueryExecutors.onPresto;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@Requires({\n+        ImmutableTpchTablesRequirements.ImmutableNationTable.class,\n+        ImmutableTpchTablesRequirements.ImmutableOrdersTable.class,\n+})\n public class TestHiveViews\n-        extends AbstractTestHiveViews {}\n+        extends AbstractTestHiveViews\n+{\n+    @Test(groups = HIVE_VIEWS)\n+    public void testFailingHiveViewsForInformationSchema()\n+    {\n+        // The expected behavior is different across hive versions. For hive 3, the call \"getTableNamesByType\" is\n+        // used in ThriftHiveMetastore#getAllViews. For older versions, the fallback to doGetTablesWithParameter\n+        // is used, so information_schema.views does not include translated Hive views.\n+\n+        onHive().executeQuery(\"DROP SCHEMA IF EXISTS test_list_failing_views CASCADE\");\n+        onHive().executeQuery(\"CREATE SCHEMA test_list_failing_views\");\n+        onHive().executeQuery(\"CREATE VIEW test_list_failing_views.correct_view AS SELECT * FROM nation limit 5\");\n+\n+        // Create a view for which the translation is guaranteed to fail\n+        onPresto().executeQuery(\"CREATE TABLE test_list_failing_views.table_dropped (col0 BIGINT)\");\n+        onHive().executeQuery(\"CREATE VIEW test_list_failing_views.failing_view AS SELECT * FROM test_list_failing_views.table_dropped\");\n+        onPresto().executeQuery(\"DROP TABLE test_list_failing_views.table_dropped\");\n+\n+        runQueryWithAssertion(\n+                \"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views'\",\n+                getHiveVersionMajor() == 3\n+                        ? queryAssert -> queryAssert.containsOnly(row(\"correct_view\"))\n+                        : QueryAssert::hasNoRows);\n+\n+        runQueryWithAssertion(\"SELECT table_name FROM information_schema.views\",\n+                getHiveVersionMajor() == 3\n+                        ? queryAssert -> queryAssert.contains(row(\"correct_view\"))\n+                        : queryAssert -> assertThatThrownBy(() -> queryAssert.contains(row(\"correct_view\"))));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODc2OTIyNw==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r578769227", "bodyText": "nit; can we make it\nif ( getHiveVersionMajor() == 3) {\n// assertThat(...)\n}\nelse {\n// different assertThat...\n}", "author": "losipiuk", "createdAt": "2021-02-18T21:50:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQwNzI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTI0MzYyNA==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r585243624", "bodyText": "@losipiuk @findepi\nRemoved ternary conditional operator to simplify (and hence also removed the related refactoring commit)\nSo, previously the PR had:\n        runQueryWithAssertion(\n                \"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views'\",\n                getHiveVersionMajor() == 3\n                        ? queryAssert -> queryAssert.containsOnly(row(\"correct_view\"))\n                        : QueryAssert::hasNoRows);\n\n        runQueryWithAssertion(\n                \"SELECT table_name FROM information_schema.views\",\n                getHiveVersionMajor() == 3\n                        ? queryAssert -> queryAssert.contains(row(\"correct_view\"))\n                        : queryAssert -> assertThatThrownBy(() -> queryAssert.contains(row(\"correct_view\"))));\n\nand now changed it to\n        String withSchemaFilter = \"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views'\";\n        String withNoFilter = \"SELECT table_name FROM information_schema.views\";\n        if (getHiveVersionMajor() == 3) {\n            assertThat(query(withSchemaFilter)).containsOnly(row(\"correct_view\"));\n            assertTrue(query(withNoFilter).rows().contains(ImmutableList.of(\"correct_view\")));\n        }\n        else {\n            assertThat(query(withSchemaFilter)).hasNoRows();\n            assertFalse(query(withNoFilter).rows().contains(ImmutableList.of(\"correct_view\")));\n        }\n\nOne problem is that QueryAssert doesn't have doesNotContain method currently, so ended up using assertTrue and assertFalse for the withNoFilter query. LMK if you'd prefer assertThatThrownBy (which seems bit hard to read) or any other cleaner way to handle this.", "author": "phd3", "createdAt": "2021-03-02T04:30:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQwNzI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTM1ODUxMw==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r585358513", "bodyText": "Can't you assert on rows() using standard collection assertion:\nAssertions.assertThat(query(withNoFilter).rows()).doesNotContain(.....)", "author": "losipiuk", "createdAt": "2021-03-02T08:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQwNzI3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQwODM2NA==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r578408364", "bodyText": "Why this does not depend on the hive version? please add a comment", "author": "findepi", "createdAt": "2021-02-18T13:17:34Z", "path": "testing/trino-product-tests/src/main/java/io/trino/tests/hive/TestHiveViews.java", "diffHunk": "@@ -13,5 +13,71 @@\n  */\n package io.trino.tests.hive;\n \n+import io.trino.tempto.Requires;\n+import io.trino.tempto.assertions.QueryAssert;\n+import io.trino.tempto.fulfillment.table.hive.tpch.ImmutableTpchTablesRequirements;\n+import org.testng.annotations.Test;\n+\n+import static io.trino.tempto.assertions.QueryAssert.Row.row;\n+import static io.trino.tempto.assertions.QueryAssert.assertThat;\n+import static io.trino.tempto.query.QueryExecutor.query;\n+import static io.trino.tests.TestGroups.HIVE_VIEWS;\n+import static io.trino.tests.utils.QueryExecutors.onHive;\n+import static io.trino.tests.utils.QueryExecutors.onPresto;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+@Requires({\n+        ImmutableTpchTablesRequirements.ImmutableNationTable.class,\n+        ImmutableTpchTablesRequirements.ImmutableOrdersTable.class,\n+})\n public class TestHiveViews\n-        extends AbstractTestHiveViews {}\n+        extends AbstractTestHiveViews\n+{\n+    @Test(groups = HIVE_VIEWS)\n+    public void testFailingHiveViewsForInformationSchema()\n+    {\n+        // The expected behavior is different across hive versions. For hive 3, the call \"getTableNamesByType\" is\n+        // used in ThriftHiveMetastore#getAllViews. For older versions, the fallback to doGetTablesWithParameter\n+        // is used, so information_schema.views does not include translated Hive views.\n+\n+        onHive().executeQuery(\"DROP SCHEMA IF EXISTS test_list_failing_views CASCADE\");\n+        onHive().executeQuery(\"CREATE SCHEMA test_list_failing_views\");\n+        onHive().executeQuery(\"CREATE VIEW test_list_failing_views.correct_view AS SELECT * FROM nation limit 5\");\n+\n+        // Create a view for which the translation is guaranteed to fail\n+        onPresto().executeQuery(\"CREATE TABLE test_list_failing_views.table_dropped (col0 BIGINT)\");\n+        onHive().executeQuery(\"CREATE VIEW test_list_failing_views.failing_view AS SELECT * FROM test_list_failing_views.table_dropped\");\n+        onPresto().executeQuery(\"DROP TABLE test_list_failing_views.table_dropped\");\n+\n+        runQueryWithAssertion(\n+                \"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views'\",\n+                getHiveVersionMajor() == 3\n+                        ? queryAssert -> queryAssert.containsOnly(row(\"correct_view\"))\n+                        : QueryAssert::hasNoRows);\n+\n+        runQueryWithAssertion(\"SELECT table_name FROM information_schema.views\",\n+                getHiveVersionMajor() == 3\n+                        ? queryAssert -> queryAssert.contains(row(\"correct_view\"))\n+                        : queryAssert -> assertThatThrownBy(() -> queryAssert.contains(row(\"correct_view\"))));\n+\n+        assertThat(query(\"SELECT table_name FROM information_schema.views WHERE table_schema = 'test_list_failing_views' and table_name = 'correct_view'\"))\n+                .containsOnly(row(\"correct_view\"));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODQwOTE5NA==", "url": "https://github.com/trinodb/trino/pull/6374#discussion_r578409194", "bodyText": "Let's use \"Trino\" here even though the body has onPresto.\nLess work later.", "author": "findepi", "createdAt": "2021-02-18T13:18:46Z", "path": "testing/trino-product-tests/src/main/java/io/trino/tests/hive/AbstractTestHiveViews.java", "diffHunk": "@@ -359,14 +359,14 @@ public void testCurrentUser()\n         assertThat(connectToPresto(\"alice@presto\").executeQuery(testQuery)).containsOnly(row(\"alice\"));\n     }\n \n-    protected static void assertViewQuery(String query, Consumer<QueryAssert> assertion)\n+    protected static void assertOnHiveAndPresto(String query, Consumer<QueryAssert> assertion)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "0b19aa8aefc47f3c42a4c9f81b58e111468ec016", "url": "https://github.com/trinodb/trino/commit/0b19aa8aefc47f3c42a4c9f81b58e111468ec016", "message": "Ignore failures translating hive views while listing views", "committedDate": "2021-03-02T19:20:25Z", "type": "commit"}, {"oid": "0b19aa8aefc47f3c42a4c9f81b58e111468ec016", "url": "https://github.com/trinodb/trino/commit/0b19aa8aefc47f3c42a4c9f81b58e111468ec016", "message": "Ignore failures translating hive views while listing views", "committedDate": "2021-03-02T19:20:25Z", "type": "forcePushed"}]}