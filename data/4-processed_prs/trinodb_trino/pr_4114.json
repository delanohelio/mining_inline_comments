{"pr_number": 4114, "pr_title": "Verify host path being mounted in or copied into docker container", "pr_createdAt": "2020-06-20T14:11:22Z", "pr_url": "https://github.com/trinodb/trino/pull/4114", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNTAyNw==", "url": "https://github.com/trinodb/trino/pull/4114#discussion_r443135027", "bodyText": "Static import", "author": "kokosing", "createdAt": "2020-06-20T14:28:06Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -36,6 +39,28 @@ public DockerContainer(String dockerImageName)\n         setCopyToFileContainerPathMap(new LinkedHashMap<>());\n     }\n \n+    @Override\n+    public DockerContainer withFileSystemBind(String hostPath, String containerPath)\n+    {\n+        verifyHostPath(hostPath);\n+        return super.withFileSystemBind(hostPath, containerPath);\n+    }\n+\n+    @Override\n+    public DockerContainer withFileSystemBind(String hostPath, String containerPath, BindMode mode)\n+    {\n+        verifyHostPath(hostPath);\n+        return super.withFileSystemBind(hostPath, containerPath, mode);\n+    }\n+\n+    // Mounting a non-existing file results in docker creating a directory. This is often not the desired effect. Fail fast instead.\n+    private static void verifyHostPath(String hostPath)\n+    {\n+        if (!Files.exists(Paths.get(hostPath))) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1Mzk0Nw==", "url": "https://github.com/trinodb/trino/pull/4114#discussion_r443153947", "bodyText": "i have this as it is, i think this is more readable here.", "author": "findepi", "createdAt": "2020-06-20T19:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNTAyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNTA4OA==", "url": "https://github.com/trinodb/trino/pull/4114#discussion_r443135088", "bodyText": "Can you use this in copy methods also? I recently was copying non existing file and it failed very late (during product tests execution).", "author": "kokosing", "createdAt": "2020-06-20T14:29:15Z", "path": "presto-product-tests-launcher/src/main/java/io/prestosql/tests/product/launcher/env/DockerContainer.java", "diffHunk": "@@ -36,6 +39,28 @@ public DockerContainer(String dockerImageName)\n         setCopyToFileContainerPathMap(new LinkedHashMap<>());\n     }\n \n+    @Override\n+    public DockerContainer withFileSystemBind(String hostPath, String containerPath)\n+    {\n+        verifyHostPath(hostPath);\n+        return super.withFileSystemBind(hostPath, containerPath);\n+    }\n+\n+    @Override\n+    public DockerContainer withFileSystemBind(String hostPath, String containerPath, BindMode mode)\n+    {\n+        verifyHostPath(hostPath);\n+        return super.withFileSystemBind(hostPath, containerPath, mode);\n+    }\n+\n+    // Mounting a non-existing file results in docker creating a directory. This is often not the desired effect. Fail fast instead.\n+    private static void verifyHostPath(String hostPath)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1NDEyNA==", "url": "https://github.com/trinodb/trino/pull/4114#discussion_r443154124", "bodyText": "added (where possible)", "author": "findepi", "createdAt": "2020-06-20T19:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzNTA4OA=="}], "type": "inlineReview"}, {"oid": "d5da5828aa42622ae1db684304e1ad51bc1500b6", "url": "https://github.com/trinodb/trino/commit/d5da5828aa42622ae1db684304e1ad51bc1500b6", "message": "Verify host path being mounted in or copied into docker container", "committedDate": "2020-06-20T19:26:19Z", "type": "commit"}, {"oid": "d5da5828aa42622ae1db684304e1ad51bc1500b6", "url": "https://github.com/trinodb/trino/commit/d5da5828aa42622ae1db684304e1ad51bc1500b6", "message": "Verify host path being mounted in or copied into docker container", "committedDate": "2020-06-20T19:26:19Z", "type": "forcePushed"}]}