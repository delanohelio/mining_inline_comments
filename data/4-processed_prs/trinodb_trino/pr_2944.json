{"pr_number": 2944, "pr_title": "Fix UI redirect with proxy", "pr_createdAt": "2020-02-25T23:54:18Z", "pr_url": "https://github.com/trinodb/trino/pull/2944", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1ODY0OQ==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r384358649", "bodyText": "If there is\nX-Forwarder-Proto https\nX-Forwarder-Host my-load-balancer.local\n\nthen using 8080 (in absence of X-Forwarded-Port) seems unreasonable.\nUsing https' default would make more sense to me.\n(This is why i wrote the code this way.)\n@electrum?", "author": "findepi", "createdAt": "2020-02-26T09:10:05Z", "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -318,21 +319,10 @@ private static String getRedirectLocation(HttpServletRequest request, String pat\n \n     static String getRedirectLocation(HttpServletRequest request, String path, String queryParameter)\n     {\n-        HttpUriBuilder builder;\n-        if (isNullOrEmpty(request.getHeader(X_FORWARDED_HOST))) {\n-            // not forwarded\n-            builder = uriBuilder()\n-                    .scheme(request.getScheme())\n-                    .host(request.getServerName())\n-                    .port(request.getServerPort());\n-        }\n-        else {\n-            // forwarded\n-            builder = uriBuilder()\n+        HttpUriBuilder builder = uriBuilder()\n                     .scheme(firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_PROTO)), request.getScheme()))\n-                    .host(request.getHeader(X_FORWARDED_HOST));\n-            getForwarderPort(request).ifPresent(builder::port);\n-        }\n+                    .host(firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_HOST)), request.getServerName()))\n+                    .port(getForwarderPort(request).orElse(request.getServerPort()));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3MTgwMQ==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r384771801", "bodyText": "I tried looking at the spec, but it doesn't say anything useful. So I suggest we just make sure that AWS, GCP, and Azue LBs work:\n\nALB: https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/x-forwarded-headers.html\nGCP: https://cloud.google.com/load-balancing/docs/https\nAsure: https://docs.microsoft.com/bs-latn-ba/azure/frontdoor/front-door-http-headers-protocol\nOne thing interesting, it looks like the X-Forwarded-Host header can contain a port.", "author": "dain", "createdAt": "2020-02-26T21:18:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1ODY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkxMzU1Mg==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r385913552", "bodyText": "Interesting. Seems AWS ALB, GCP don't document X-Forwarded-Host at all, so if we want to support that, we need to find out the load balancer IP address differently. For example, GCP suggests it puts a bunch of different addresses in X-Forwarded-For and one could be the load balancer's IP.\n... I am probably missing something obvious, this doesn't sound convincing to myself.", "author": "findepi", "createdAt": "2020-02-28T20:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1ODY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3MTkzNQ==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r385971935", "bodyText": "Hi,\nWe are facing same problem as well at Alicloud SLB which does not support X-Forwarded-Host. Just provides X-Forwarded-For and X-Forwarded-Proto. Somehow it needs https be activated when X-Forwarded-Proto present, i guess.\nAs an alternative Host header provided, but i am not sure whether it is a good fit or not.", "author": "veysiertekin", "createdAt": "2020-02-28T23:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1ODY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NTEzMg==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r385985132", "bodyText": "@findepi and @veysiertekin I don't think they provide X-Forwarded-Host because it isn't needed.  For those systems, the host is unchanged from the host header in the request, because the LB run on the same host just on a different port.", "author": "dain", "createdAt": "2020-02-29T01:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1ODY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDQ1Nw==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r386010457", "bodyText": "@dain  in AWS ALB cases, the host (machine) is definitely separate. But, maybe, we get it in the Host header and that's why we don't need it?", "author": "findepi", "createdAt": "2020-02-29T07:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1ODY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2ODQ1Mw==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r386068453", "bodyText": "From the original issue, his headers are:\nX-Forwarded-Proto: https\nX-Forwarded-Port: 443\nHost: presto.domain.net\n\nIn this case, we change the protocol, and port, but not the host which was presto.domain.net.", "author": "dain", "createdAt": "2020-03-01T01:29:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1ODY0OQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDU2MQ==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r386010561", "bodyText": "We determined -Host cannot be the activator (sorry for that!)\nBut having -Host | -Proto an activator but not -Port seems arbitrary.\nIn any case, this requires a code comment explaining the choice.", "author": "findepi", "createdAt": "2020-02-29T07:56:52Z", "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -371,15 +357,30 @@ private static String parseJwt(byte[] hmac, String jwt)\n                 .getSubject();\n     }\n \n-    private static Optional<Integer> getForwarderPort(HttpServletRequest request)\n+    private static HttpUriBuilder toUriBuilderWithForwarding(HttpServletRequest request)\n     {\n-        if (!isNullOrEmpty(request.getHeader(X_FORWARDED_PORT))) {\n-            try {\n-                return Optional.of(parseInt(request.getHeader(X_FORWARDED_PORT)));\n-            }\n-            catch (ArithmeticException ignore) {\n+        HttpUriBuilder builder;\n+        if (isNullOrEmpty(request.getHeader(X_FORWARDED_PROTO)) && isNullOrEmpty(request.getHeader(X_FORWARDED_HOST))) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2ODY4NQ==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r386068685", "bodyText": "When did we decide that the X_FORWARDED_HOST is not an \"activator\".  We decided that X_FORWARDED_PROTO alone without the other two doesn't make much sense.  I am fine making it an activator also, since none of the LBs seem to do that, so it shouldn't matter.  BTW the port header isn't part of the spec.  The X_FORWARDED_HOST header is documented here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host", "author": "dain", "createdAt": "2020-03-01T01:35:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MTA4NA==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r391961084", "bodyText": "It's probably best to make any of these an activator. I don't see a downside in doing so.", "author": "electrum", "createdAt": "2020-03-12T23:43:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2Mzk5NA==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r391963994", "bodyText": "I think this should be\n.hostAndPort(HostAndPort.fromString(request.getHeader(HOST)))\nWe don't want to add the port number unless the original request had one. Though, what happens if there's no Host header? Is that legal?", "author": "electrum", "createdAt": "2020-03-12T23:54:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDU2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDYzNA==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r386010634", "bodyText": "Add a comment explaining who's setting -Host with port numbers.", "author": "findepi", "createdAt": "2020-02-29T07:58:26Z", "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -371,15 +357,30 @@ private static String parseJwt(byte[] hmac, String jwt)\n                 .getSubject();\n     }\n \n-    private static Optional<Integer> getForwarderPort(HttpServletRequest request)\n+    private static HttpUriBuilder toUriBuilderWithForwarding(HttpServletRequest request)\n     {\n-        if (!isNullOrEmpty(request.getHeader(X_FORWARDED_PORT))) {\n-            try {\n-                return Optional.of(parseInt(request.getHeader(X_FORWARDED_PORT)));\n-            }\n-            catch (ArithmeticException ignore) {\n+        HttpUriBuilder builder;\n+        if (isNullOrEmpty(request.getHeader(X_FORWARDED_PROTO)) && isNullOrEmpty(request.getHeader(X_FORWARDED_HOST))) {\n+            // not forwarded\n+            builder = uriBuilder()\n+                    .scheme(request.getScheme())\n+                    .host(request.getServerName())\n+                    .port(request.getServerPort());\n+        }\n+        else {\n+            // forwarded\n+            builder = uriBuilder()\n+                    .scheme(firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_PROTO)), request.getScheme()))\n+                    .hostAndPort(HostAndPort.fromString(firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_HOST)), request.getServerName())));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2ODc1OQ==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r386068759", "bodyText": "I don't understand.  The Host and X-Forwarded-Host header both allow an optional port.  If the port is not specified, the default port is used.", "author": "dain", "createdAt": "2020-03-01T01:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDYzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2NDA2Nw==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r391964067", "bodyText": "Same, I think this should be using request.getHeader(HOST)", "author": "electrum", "createdAt": "2020-03-12T23:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDYzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDgxMQ==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r386010811", "bodyText": "i deliberately used .replace instead of using uri builder.\nReplace is simplistic, so it's obvious what the expected value is.\nWith uri builder used in the test and in the code under test, it's not as obvious.", "author": "findepi", "createdAt": "2020-02-29T08:01:28Z", "path": "presto-main/src/test/java/io/prestosql/server/ui/TestWebUi.java", "diffHunk": "@@ -344,13 +344,115 @@ private static void assertRedirect(OkHttpClient client, String url, String redir\n         if (testProxy) {\n             request = new Request.Builder()\n                     .url(url)\n-                    .header(X_FORWARDED_PROTO, \"https\")\n+                    .header(X_FORWARDED_PROTO, \"test\")\n                     .header(X_FORWARDED_HOST, \"my-load-balancer.local\")\n-                    .header(X_FORWARDED_PORT, \"443\")\n+                    .header(X_FORWARDED_PORT, \"123\")\n                     .build();\n             try (Response response = client.newCall(request).execute()) {\n                 assertEquals(response.code(), SC_SEE_OTHER);\n-                assertEquals(response.header(LOCATION), \"https://my-load-balancer.local:443/\" + redirectLocation.replaceFirst(\"^([^/]*/){3}\", \"\"));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2ODkxNg==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r386068916", "bodyText": "I am confused by this statement.  The regex to replace sub parts in the middle of the string would be very complex (I can not even read the regex above without a lot of thought).  I find the new code really clear:\nuriBuilderFrom(URI.create(redirectLocation))\n                    .scheme(\"test\")\n                    .host(\"my-load-balancer.local\")\n                    .port(123)\n                    .toString());\n\nIt literally says, take the redirect location, and replace some bits.", "author": "dain", "createdAt": "2020-03-01T01:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDg2MA==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r386010860", "bodyText": "Isn't in this case simply http://my-load-balancer.local/? we could use constant here", "author": "findepi", "createdAt": "2020-02-29T08:02:53Z", "path": "presto-main/src/test/java/io/prestosql/server/ui/TestWebUi.java", "diffHunk": "@@ -344,13 +344,115 @@ private static void assertRedirect(OkHttpClient client, String url, String redir\n         if (testProxy) {\n             request = new Request.Builder()\n                     .url(url)\n-                    .header(X_FORWARDED_PROTO, \"https\")\n+                    .header(X_FORWARDED_PROTO, \"test\")\n                     .header(X_FORWARDED_HOST, \"my-load-balancer.local\")\n-                    .header(X_FORWARDED_PORT, \"443\")\n+                    .header(X_FORWARDED_PORT, \"123\")\n                     .build();\n             try (Response response = client.newCall(request).execute()) {\n                 assertEquals(response.code(), SC_SEE_OTHER);\n-                assertEquals(response.header(LOCATION), \"https://my-load-balancer.local:443/\" + redirectLocation.replaceFirst(\"^([^/]*/){3}\", \"\"));\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .scheme(\"test\")\n+                                .host(\"my-load-balancer.local\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_PROTO, \"test\")\n+                    .header(X_FORWARDED_HOST, \"my-load-balancer.local:123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .scheme(\"test\")\n+                                .host(\"my-load-balancer.local\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_PROTO, \"test\")\n+                    .header(X_FORWARDED_PORT, \"123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .scheme(\"test\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_PROTO, \"test\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .scheme(\"test\")\n+                                .defaultPort()\n+                                .toString());\n+            }\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_HOST, \"my-load-balancer.local\")\n+                    .header(X_FORWARDED_PORT, \"123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .host(\"my-load-balancer.local\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_HOST, \"my-load-balancer.local:123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .host(\"my-load-balancer.local\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_HOST, \"my-load-balancer.local\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .host(\"my-load-balancer.local\")\n+                                .defaultPort()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2ODk2OQ==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r386068969", "bodyText": "No. The code is uriBuilderFrom, so the subsequent lines are \"replacements\".", "author": "dain", "createdAt": "2020-03-01T01:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDg2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxMDkwMg==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r386010902", "bodyText": "Add a comment like // X-Forwarded-Port not recognized as valid forwarding", "author": "findepi", "createdAt": "2020-02-29T08:03:41Z", "path": "presto-main/src/test/java/io/prestosql/server/ui/TestWebUi.java", "diffHunk": "@@ -344,13 +344,115 @@ private static void assertRedirect(OkHttpClient client, String url, String redir\n         if (testProxy) {\n             request = new Request.Builder()\n                     .url(url)\n-                    .header(X_FORWARDED_PROTO, \"https\")\n+                    .header(X_FORWARDED_PROTO, \"test\")\n                     .header(X_FORWARDED_HOST, \"my-load-balancer.local\")\n-                    .header(X_FORWARDED_PORT, \"443\")\n+                    .header(X_FORWARDED_PORT, \"123\")\n                     .build();\n             try (Response response = client.newCall(request).execute()) {\n                 assertEquals(response.code(), SC_SEE_OTHER);\n-                assertEquals(response.header(LOCATION), \"https://my-load-balancer.local:443/\" + redirectLocation.replaceFirst(\"^([^/]*/){3}\", \"\"));\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .scheme(\"test\")\n+                                .host(\"my-load-balancer.local\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_PROTO, \"test\")\n+                    .header(X_FORWARDED_HOST, \"my-load-balancer.local:123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .scheme(\"test\")\n+                                .host(\"my-load-balancer.local\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_PROTO, \"test\")\n+                    .header(X_FORWARDED_PORT, \"123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .scheme(\"test\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_PROTO, \"test\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .scheme(\"test\")\n+                                .defaultPort()\n+                                .toString());\n+            }\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_HOST, \"my-load-balancer.local\")\n+                    .header(X_FORWARDED_PORT, \"123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .host(\"my-load-balancer.local\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_HOST, \"my-load-balancer.local:123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .host(\"my-load-balancer.local\")\n+                                .port(123)\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_HOST, \"my-load-balancer.local\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(\n+                        response.header(LOCATION),\n+                        uriBuilderFrom(URI.create(redirectLocation))\n+                                .host(\"my-load-balancer.local\")\n+                                .defaultPort()\n+                                .toString());\n+            }\n+\n+            request = new Request.Builder()\n+                    .url(url)\n+                    .header(X_FORWARDED_PORT, \"123\")\n+                    .build();\n+            try (Response response = client.newCall(request).execute()) {\n+                assertEquals(response.code(), SC_SEE_OTHER);\n+                assertEquals(response.header(LOCATION), redirectLocation);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2MjM0OA==", "url": "https://github.com/trinodb/trino/pull/2944#discussion_r391962348", "bodyText": "Could simplify this to\nOptional.ofNullable(emptyToNull(request.getHeader(X_FORWARDED_PORT)))\n        .map(Ints::tryParseInt)\n        .ifPresent(builder::port);", "author": "electrum", "createdAt": "2020-03-12T23:47:48Z", "path": "presto-main/src/main/java/io/prestosql/server/ui/FormWebUiAuthenticationManager.java", "diffHunk": "@@ -371,15 +357,30 @@ private static String parseJwt(byte[] hmac, String jwt)\n                 .getSubject();\n     }\n \n-    private static Optional<Integer> getForwarderPort(HttpServletRequest request)\n+    private static HttpUriBuilder toUriBuilderWithForwarding(HttpServletRequest request)\n     {\n-        if (!isNullOrEmpty(request.getHeader(X_FORWARDED_PORT))) {\n-            try {\n-                return Optional.of(parseInt(request.getHeader(X_FORWARDED_PORT)));\n-            }\n-            catch (ArithmeticException ignore) {\n+        HttpUriBuilder builder;\n+        if (isNullOrEmpty(request.getHeader(X_FORWARDED_PROTO)) && isNullOrEmpty(request.getHeader(X_FORWARDED_HOST))) {\n+            // not forwarded\n+            builder = uriBuilder()\n+                    .scheme(request.getScheme())\n+                    .host(request.getServerName())\n+                    .port(request.getServerPort());\n+        }\n+        else {\n+            // forwarded\n+            builder = uriBuilder()\n+                    .scheme(firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_PROTO)), request.getScheme()))\n+                    .hostAndPort(HostAndPort.fromString(firstNonNull(emptyToNull(request.getHeader(X_FORWARDED_HOST)), request.getServerName())));\n+\n+            if (!isNullOrEmpty(request.getHeader(X_FORWARDED_PORT))) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "6c85ca1f9d35e609ee2251fc33ed8739ed211200", "url": "https://github.com/trinodb/trino/commit/6c85ca1f9d35e609ee2251fc33ed8739ed211200", "message": "Fix UI redirect with proxy", "committedDate": "2020-03-13T22:25:07Z", "type": "commit"}, {"oid": "6c85ca1f9d35e609ee2251fc33ed8739ed211200", "url": "https://github.com/trinodb/trino/commit/6c85ca1f9d35e609ee2251fc33ed8739ed211200", "message": "Fix UI redirect with proxy", "committedDate": "2020-03-13T22:25:07Z", "type": "forcePushed"}]}