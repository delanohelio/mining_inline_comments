{"pr_number": 6349, "pr_title": "Avoid repeatedly setting memory limits in QueryContext", "pr_createdAt": "2020-12-15T15:59:24Z", "pr_url": "https://github.com/trinodb/trino/pull/6349", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzNjE5NA==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543536194", "bodyText": "It's unclear to me if it's intentional (or desirable) that a task update would previously cause these values to change once a query was promoted to the reserved pool. If so, it's easy enough to modify this PR to handle that as well- just need to know the intended behavior in that situation.", "author": "pettyjamesm", "createdAt": "2020-12-15T17:21:08Z", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +112,25 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()\n+    {\n+        return needsMemoryLimitsInitialized;\n+    }\n+\n+    public synchronized void setMemoryLimitsInitialized()\n+    {\n+        needsMemoryLimitsInitialized = false;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n     public synchronized void setResourceOvercommit()\n     {\n         // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n         // The coordinator will kill the query if the cluster runs out of memory.\n         maxUserMemory = memoryPool.getMaxBytes();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2MjQ2Ng==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543562466", "bodyText": "Since it's unclear what the intended or correct interaction between resource over-commit and the reserved pool should be in this scenario, I've opted to preserve the current effective behavior by modifying the memory limits for resource over-commit queries as part of their memory pool change.", "author": "pettyjamesm", "createdAt": "2020-12-15T17:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzNjE5NA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYxMzc5Mg==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543613792", "bodyText": "nit: I'd rename this to memoryLimitsInitialized and default it to false. I think it'll help with readability of the setter.", "author": "phd3", "createdAt": "2020-12-15T19:09:01Z", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -70,6 +70,10 @@\n     private final SpillSpaceTracker spillSpaceTracker;\n     private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;\n+    private boolean needsMemoryLimitsInitialized = true;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxNTQxMA==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543715410", "bodyText": "Sure, changed.", "author": "pettyjamesm", "createdAt": "2020-12-15T21:56:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYxMzc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0MDg3Ng==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543640876", "bodyText": "If we decide to stick with changing the limits based on the pool type, can you please add another commit to fix local general pool --> local memory pool in comment?", "author": "phd3", "createdAt": "2020-12-15T19:50:41Z", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()\n+    {\n+        return needsMemoryLimitsInitialized;\n+    }\n+\n+    public synchronized void setMemoryLimitsInitialized()\n+    {\n+        needsMemoryLimitsInitialized = false;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n     public synchronized void setResourceOvercommit()\n     {\n+        isResourceOverCommit = true;\n         // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxMjU2MA==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543712560", "bodyText": "Before this change it wasn't necessarily broken, since the subsequent task update would trigger the memory limit reset based on the current pool max size. This change is required in order to preserve that behavior (although it performs it earlier) so I'm not sure it's really something that should be split into its own commit.", "author": "pettyjamesm", "createdAt": "2020-12-15T21:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0MDg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyNTAwMw==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r543725003", "bodyText": "@pettyjamesm yes the behavior wasn't broken, I just meant to update the comment on line 131 to reflect the behavior correctly. The worker kills the query if the corresponding pool limit is reached, as opposed to the \"general\" pool as mentioned in the comment. (It's an independent thing, but doesn't matter much if you'd like to do it in the same commit.)", "author": "phd3", "createdAt": "2020-12-15T22:13:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0MDg3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2MzM3MA==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544363370", "bodyText": "Ah, ok- I misunderstood. Added a new commit to clear up that comment and fix one other javadoc reference.", "author": "pettyjamesm", "createdAt": "2020-12-16T14:54:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY0MDg3Ng=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MDc4OQ==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544170789", "bodyText": "rename to isMemoryLimitInitialized", "author": "sopel39", "createdAt": "2020-12-16T10:08:30Z", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1NTMxOQ==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544355319", "bodyText": "isMemoryLimitsInitialized() instead.", "author": "pettyjamesm", "createdAt": "2020-12-16T14:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MDc4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MTEyNA==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544171124", "bodyText": "rename to memoryLimitInitialized", "author": "sopel39", "createdAt": "2020-12-16T10:08:58Z", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -70,6 +70,10 @@\n     private final SpillSpaceTracker spillSpaceTracker;\n     private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;\n+    private boolean memoryLimitsInitialized;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1NTA4Nw==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544355087", "bodyText": "There are multiple limits involved (maxUserMemory / maxTotalMemory).", "author": "pettyjamesm", "createdAt": "2020-12-16T14:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MTEyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MTI4MA==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544171280", "bodyText": "this should be volatile", "author": "sopel39", "createdAt": "2020-12-16T10:09:14Z", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -70,6 +70,10 @@\n     private final SpillSpaceTracker spillSpaceTracker;\n     private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;\n+    private boolean memoryLimitsInitialized;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1NjM2OQ==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544356369", "bodyText": "Made volatile (even though it's safe enough to do a redundant initialization and maybe slight cheaper as a non-volatile)", "author": "pettyjamesm", "createdAt": "2020-12-16T14:46:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MTI4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE3MTUwNQ==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544171505", "bodyText": "no synchronization is needed", "author": "sopel39", "createdAt": "2020-12-16T10:09:32Z", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean needsMemoryLimitsInitialized()\n+    {\n+        return !memoryLimitsInitialized;\n+    }\n+\n+    public synchronized void setMemoryLimitsInitialized()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE4NDQ0NA==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544184444", "bodyText": "call it resourceOverCommit", "author": "sopel39", "createdAt": "2020-12-16T10:28:37Z", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -70,6 +70,10 @@\n     private final SpillSpaceTracker spillSpaceTracker;\n     private final Map<TaskId, TaskContext> taskContexts = new ConcurrentHashMap<>();\n \n+    @GuardedBy(\"this\")\n+    private boolean isResourceOverCommit;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM1NjUwNw==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544356507", "bodyText": "Done", "author": "pettyjamesm", "createdAt": "2020-12-16T14:47:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE4NDQ0NA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2NTc1MQ==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544365751", "bodyText": "this is redundant. We already call queryContext.setMemoryLimitsInitialized(); in updateTask", "author": "sopel39", "createdAt": "2020-12-16T14:57:19Z", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,26 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean isMemoryLimitsInitialized()\n+    {\n+        return memoryLimitsInitialized;\n+    }\n+\n+    public void setMemoryLimitsInitialized()\n+    {\n+        memoryLimitsInitialized = true;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n     public synchronized void setResourceOvercommit()\n     {\n+        resourceOverCommit = true;\n         // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n         // The coordinator will kill the query if the cluster runs out of memory.\n         maxUserMemory = memoryPool.getMaxBytes();\n         maxTotalMemory = memoryPool.getMaxBytes();\n+        //  Mark future memory limit updates as unnecessary\n+        setMemoryLimitsInitialized();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2ODA3Ng==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r544368076", "bodyText": "Sure.", "author": "pettyjamesm", "createdAt": "2020-12-16T15:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2NTc1MQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2NDI1NA==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545564254", "bodyText": "may be just rename the commit to Fix comments in QueryContext or have two separate commits?", "author": "phd3", "createdAt": "2020-12-18T04:22:36Z", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -126,7 +126,7 @@ public synchronized void initializeMemoryLimits(boolean resourceOverCommit, long\n         checkArgument(maxTotalMemory > 0, \"maxTotalMemory must be > 0, found: %s\", maxTotalMemory);\n         this.resourceOverCommit = resourceOverCommit;\n         if (resourceOverCommit) {\n-            // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n+            // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local memory pool.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwNTg1Mw==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545905853", "bodyText": "Reworded commit.", "author": "pettyjamesm", "createdAt": "2020-12-18T15:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU2NDI1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNTc3NA==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545625774", "bodyText": "nit: I'd keep this as >=0, since we don't disallow 0 on the session property.", "author": "phd3", "createdAt": "2020-12-18T07:45:24Z", "path": "presto-main/src/main/java/io/prestosql/memory/QueryContext.java", "diffHunk": "@@ -110,13 +114,28 @@ public QueryContext(\n                 newRootAggregatedMemoryContext(new QueryMemoryReservationHandler(this::updateSystemMemory, this::tryReserveMemoryNotSupported), 0L));\n     }\n \n+    public boolean isMemoryLimitsInitialized()\n+    {\n+        return memoryLimitsInitialized;\n+    }\n+\n     // TODO: This method should be removed, and the correct limit set in the constructor. However, due to the way QueryContext is constructed the memory limit is not known in advance\n-    public synchronized void setResourceOvercommit()\n+    public synchronized void initializeMemoryLimits(boolean resourceOverCommit, long maxUserMemory, long maxTotalMemory)\n     {\n-        // Allow the query to use the entire pool. This way the worker will kill the query, if it uses the entire local general pool.\n-        // The coordinator will kill the query if the cluster runs out of memory.\n-        maxUserMemory = memoryPool.getMaxBytes();\n-        maxTotalMemory = memoryPool.getMaxBytes();\n+        checkArgument(maxUserMemory > 0, \"maxUserMemory must be > 0, found: %s\", maxUserMemory);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwNTk4Ng==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545905986", "bodyText": "Changed to >=.", "author": "pettyjamesm", "createdAt": "2020-12-18T15:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyNTc3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyOTQ1MA==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545629450", "bodyText": "nit: may be remove the comment or mention query_max_total_memory_per_node too?", "author": "phd3", "createdAt": "2020-12-18T07:54:31Z", "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -372,24 +373,18 @@ public TaskInfo updateTask(Session session, TaskId taskId, Optional<PlanFragment\n         requireNonNull(sources, \"sources is null\");\n         requireNonNull(outputBuffers, \"outputBuffers is null\");\n \n-        if (resourceOvercommit(session)) {\n-            // TODO: This should have been done when the QueryContext was created. However, the session isn't available at that point.\n-            queryContexts.getUnchecked(taskId.getQueryId()).setResourceOvercommit();\n-        }\n-        else {\n+        SqlTask sqlTask = tasks.getUnchecked(taskId);\n+        QueryContext queryContext = sqlTask.getQueryContext();\n+        if (!queryContext.isMemoryLimitsInitialized()) {\n             long sessionQueryMaxMemoryPerNode = getQueryMaxMemoryPerNode(session).toBytes();\n             long sessionQueryTotalMaxMemoryPerNode = getQueryMaxTotalMemoryPerNode(session).toBytes();\n             // Session property query_max_memory_per_node is used to only decrease memory limit", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwNjE5OA==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545906198", "bodyText": "Made the comment more general", "author": "pettyjamesm", "createdAt": "2020-12-18T15:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYyOTQ1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzNjkyNQ==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r545636925", "bodyText": "looks like a bug, good catch!", "author": "phd3", "createdAt": "2020-12-18T08:10:12Z", "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -145,16 +146,15 @@ public SqlTaskManager(\n         SqlTaskExecutionFactory sqlTaskExecutionFactory = new SqlTaskExecutionFactory(taskNotificationExecutor, taskExecutor, planner, splitMonitor, config);\n \n         this.localMemoryManager = requireNonNull(localMemoryManager, \"localMemoryManager is null\");\n-        DataSize maxQueryUserMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n+        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         DataSize maxQueryTotalMemoryPerNode = nodeMemoryConfig.getMaxQueryTotalMemoryPerNode();\n         DataSize maxQuerySpillPerNode = nodeSpillConfig.getQueryMaxSpillPerNode();\n \n-        DataSize maxQueryMemoryPerNode = nodeMemoryConfig.getMaxQueryMemoryPerNode();\n         queryMaxMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n-        queryMaxTotalMemoryPerNode = maxQueryMemoryPerNode.toBytes();\n+        queryMaxTotalMemoryPerNode = maxQueryTotalMemoryPerNode.toBytes();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2NzA0OQ==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r546567049", "bodyText": "@sopel39 not sure if there's an easy way to write test for this bugfix, since it'll require asserting failure for a manufactured query that reliably uses low user memory but high total memory - per node. any ideas? (the change looks straightforward though.)", "author": "phd3", "createdAt": "2020-12-21T08:19:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzNjkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwMTQ2MQ==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r546801461", "bodyText": "It should be possible to use io.prestosql.execution.SqlTaskManager#getQueryContext (which is visible for testing) and then update memory via io.prestosql.memory.QueryContext#updateUserMemory or io.prestosql.memory.QueryContext#updateSystemMemory to see that they fail.\n@pettyjamesm could you add such test?", "author": "sopel39", "createdAt": "2020-12-21T16:25:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzNjkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5OTI1Nw==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r547299257", "bodyText": "I don't think it's worthwhile to add that test, given that an existing memory pool test started failing after this refactor and that we'd have to either either add @VisibleForTesting getters to the memory limit fields or probe at their values (one fake query at a time) by triggering failures through their already @VisibleForTesting MemoryTrackingContext. At the end of the day, the behavior here is relatively simple and the bug was only introduced looked like a copy-pasta error, not a behavioral subtlety.\nJust my opinion though, if the above test is needed to get this merged I'll add it.", "author": "pettyjamesm", "createdAt": "2020-12-22T14:12:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzNjkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwODI1Nw==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r547308257", "bodyText": "I think such test is important as these memory limits are vital to Presto. In fact, I wonder why nobody spotted it already", "author": "sopel39", "createdAt": "2020-12-22T14:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzNjkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM0Nzc4MA==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r547347780", "bodyText": "Test added.", "author": "pettyjamesm", "createdAt": "2020-12-22T15:39:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYzNjkyNQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2MDkwMA==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r546560900", "bodyText": "nit: redundant only", "author": "phd3", "createdAt": "2020-12-21T08:03:50Z", "path": "presto-main/src/main/java/io/prestosql/execution/SqlTaskManager.java", "diffHunk": "@@ -373,24 +373,18 @@ public TaskInfo updateTask(Session session, TaskId taskId, Optional<PlanFragment\n         requireNonNull(sources, \"sources is null\");\n         requireNonNull(outputBuffers, \"outputBuffers is null\");\n \n-        if (resourceOvercommit(session)) {\n-            // TODO: This should have been done when the QueryContext was created. However, the session isn't available at that point.\n-            queryContexts.getUnchecked(taskId.getQueryId()).setResourceOvercommit();\n-        }\n-        else {\n+        SqlTask sqlTask = tasks.getUnchecked(taskId);\n+        QueryContext queryContext = sqlTask.getQueryContext();\n+        if (!queryContext.isMemoryLimitsInitialized()) {\n             long sessionQueryMaxMemoryPerNode = getQueryMaxMemoryPerNode(session).toBytes();\n             long sessionQueryTotalMaxMemoryPerNode = getQueryMaxTotalMemoryPerNode(session).toBytes();\n-            // Session property query_max_memory_per_node is used to only decrease memory limit\n-            if (sessionQueryMaxMemoryPerNode <= queryMaxMemoryPerNode) {\n-                queryContexts.getUnchecked(taskId.getQueryId()).setMaxUserMemory(sessionQueryMaxMemoryPerNode);\n-            }\n-\n-            if (sessionQueryTotalMaxMemoryPerNode <= queryMaxTotalMemoryPerNode) {\n-                queryContexts.getUnchecked(taskId.getQueryId()).setMaxTotalMemory(sessionQueryTotalMaxMemoryPerNode);\n-            }\n+            // Session properties are only allowed to only decrease memory limits, not increase them", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk0NzQzMA==", "url": "https://github.com/trinodb/trino/pull/6349#discussion_r546947430", "bodyText": "Woops, fixed.", "author": "pettyjamesm", "createdAt": "2020-12-21T21:51:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2MDkwMA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "65b0cac1f0beb7188070d8e09f97c0af29de33b9", "url": "https://github.com/trinodb/trino/commit/65b0cac1f0beb7188070d8e09f97c0af29de33b9", "message": "Fix queryMaxTotalMemoryPerNode being set to queryMaxMemoryPerNode", "committedDate": "2020-12-22T15:32:49Z", "type": "commit"}, {"oid": "ac0d6a7c2ff16fffe609ccdefe886bda3f481d77", "url": "https://github.com/trinodb/trino/commit/ac0d6a7c2ff16fffe609ccdefe886bda3f481d77", "message": "Avoid repeatedly setting memory limits in QueryContext\n\nSynchronizing on the QueryContext as part of every task update adds\ncontention to the already heavily contended QueryContext instance\n(since each memory tracking update must synchronize as well). This\nchange checks whether the memory limit initialization is necessary\nbefore synchronizing to avoid adding the extra contention after they\nhave been set at least once successfully.", "committedDate": "2020-12-22T15:32:49Z", "type": "commit"}, {"oid": "8cdfae7d39bfe3ee6f7e7db6a5044e06c78a6d25", "url": "https://github.com/trinodb/trino/commit/8cdfae7d39bfe3ee6f7e7db6a5044e06c78a6d25", "message": "Fix comments about QueryMemoryContext and memory limits", "committedDate": "2020-12-22T15:32:49Z", "type": "commit"}, {"oid": "11e4da138d7c974514b7cd79b3a36dfd434635f9", "url": "https://github.com/trinodb/trino/commit/11e4da138d7c974514b7cd79b3a36dfd434635f9", "message": "Add test for QueryContext memory limits", "committedDate": "2020-12-22T15:32:49Z", "type": "commit"}, {"oid": "11e4da138d7c974514b7cd79b3a36dfd434635f9", "url": "https://github.com/trinodb/trino/commit/11e4da138d7c974514b7cd79b3a36dfd434635f9", "message": "Add test for QueryContext memory limits", "committedDate": "2020-12-22T15:32:49Z", "type": "forcePushed"}]}