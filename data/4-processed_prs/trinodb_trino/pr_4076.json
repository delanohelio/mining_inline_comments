{"pr_number": 4076, "pr_title": "Add support for scanned bytes limit on queries", "pr_createdAt": "2020-06-18T12:49:34Z", "pr_url": "https://github.com/trinodb/trino/pull/4076", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4NjIzNg==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r442786236", "bodyText": "I think this name is a little confusing with the change in https://github.com/prestosql/presto/pull/2083/files (query_max_input_data_size). How about query_max_scan_raw_bytes? Or query_max_raw_input_size as the method name for stage stats suggests.", "author": "Lewuathe", "createdAt": "2020-06-19T11:27:06Z", "path": "presto-main/src/main/java/io/prestosql/SystemSessionProperties.java", "diffHunk": "@@ -67,6 +68,7 @@\n     public static final String QUERY_MAX_RUN_TIME = \"query_max_run_time\";\n     public static final String RESOURCE_OVERCOMMIT = \"resource_overcommit\";\n     public static final String QUERY_MAX_CPU_TIME = \"query_max_cpu_time\";\n+    public static final String QUERY_MAX_SCAN_BYTES = \"query_max_scan_bytes\";", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMTExNQ==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r443131115", "bodyText": "Could you also add a test in TestQueryManager as #2083 does?\n\nThanks for you reply, I will add a testcase and fix the comments.", "author": "shenh062326", "createdAt": "2020-06-20T13:30:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4NjIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc5MDM2OQ==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r442790369", "bodyText": "Since DataSize(double size, Unit unit) construtor is deprecated, we can use DataSize.ofBytes(long) instead.", "author": "Lewuathe", "createdAt": "2020-06-19T11:37:23Z", "path": "presto-main/src/main/java/io/prestosql/execution/SqlQueryExecution.java", "diffHunk": "@@ -335,6 +336,21 @@ public Duration getTotalCpuTime()\n         return scheduler.getTotalCpuTime();\n     }\n \n+    @Override\n+    public DataSize getScannedBytes()\n+    {\n+        SqlQueryScheduler scheduler = queryScheduler.get();\n+        Optional<QueryInfo> finalQueryInfo = stateMachine.getFinalQueryInfo();\n+        if (finalQueryInfo.isPresent()) {\n+            return finalQueryInfo.get().getQueryStats().getRawInputDataSize();\n+        }\n+        if (scheduler == null) {\n+            return DataSize.succinctBytes(0);\n+        }\n+        StageInfo root = scheduler.getStageInfo();\n+        return new DataSize(stateMachine.getScanedBytes(root), BYTE);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc5MTM2MA==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r442791360", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (limit.getValue() > 0) { // only check when limit are setted\n          \n          \n            \n                        if (limit.getValue() > 0) { // only check when limits are set", "author": "Lewuathe", "createdAt": "2020-06-19T11:40:00Z", "path": "presto-main/src/main/java/io/prestosql/execution/SqlQueryManager.java", "diffHunk": "@@ -313,4 +323,21 @@ private void enforceCpuLimits()\n             }\n         }\n     }\n+\n+\n+    /**\n+     * Enforce query scan bytes limits\n+     */\n+    private void enforceScanLimits()\n+    {\n+        for (QueryExecution query : queryTracker.getAllQueries()) {\n+            DataSize limit = getQueryMaxScanBytes(query.getSession());\n+            if (limit.getValue() > 0) { // only check when limit are setted", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0MTkxNg==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r443141916", "bodyText": "You can make this function similar to https://github.com/prestosql/presto/blob/0050a9801f85e3411a4bb74fc0e8ea6ead50d41c/presto-main/src/main/java/io/prestosql/execution/SqlQueryManager.java#L335 just use query.getQueryInfo().getQueryStats().getPhysicalInputDataSize() instead.\nBoth getScanedBytes functions shouldn't be needed.", "author": "raunaqmorarka", "createdAt": "2020-06-20T16:13:11Z", "path": "presto-main/src/main/java/io/prestosql/execution/SqlQueryManager.java", "diffHunk": "@@ -313,4 +323,21 @@ private void enforceCpuLimits()\n             }\n         }\n     }\n+\n+\n+    /**\n+     * Enforce query scan bytes limits\n+     */\n+    private void enforceScanLimits()\n+    {\n+        for (QueryExecution query : queryTracker.getAllQueries()) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1NDIxNw==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r444754217", "bodyText": "As mentioned by @losipiuk in #2083 (comment)  , there may be performance issues with getQueryInfo. And physicalInputDataSize is not in BasicQueryInfo. should I add physicalInputDataSize to BasicQueryInfo, or add new functions to get physicalInputDataSize.\nlosipiuk 29 days ago Member\nI am a bit concerned about performance impact from frequent calling to getQueryInfo(). Can you use more lightweight getBasicQueryInfo instead?", "author": "shenh062326", "createdAt": "2020-06-24T09:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0MTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcyODgyOQ==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r446728829", "bodyText": "@raunaqmorarka Can you take a look at this?", "author": "shenh062326", "createdAt": "2020-06-29T01:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0MTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MTEwMg==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r446981102", "bodyText": "We can add physicalInputDataSize to BasicQueryStats and switch to using query.getBasicQueryInfo().getBasicQueryStats().getPhysicalInputDataSize()", "author": "raunaqmorarka", "createdAt": "2020-06-29T13:42:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0MTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNjYxMA==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r447436610", "bodyText": "Done", "author": "shenh062326", "createdAt": "2020-06-30T06:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0MTkxNg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwOTM2MQ==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r443509361", "bodyText": "There should be a config limit in QueryManagerConfig as well.\nBut we shouldn't allow users to bypass the server config limit through session override.\nCan follow this PR for those changes https://github.com/prestosql/presto/pull/2083/files", "author": "raunaqmorarka", "createdAt": "2020-06-22T12:03:22Z", "path": "presto-main/src/main/java/io/prestosql/execution/SqlQueryManager.java", "diffHunk": "@@ -313,4 +323,21 @@ private void enforceCpuLimits()\n             }\n         }\n     }\n+\n+\n+    /**\n+     * Enforce query scan bytes limits\n+     */\n+    private void enforceScanLimits()\n+    {\n+        for (QueryExecution query : queryTracker.getAllQueries()) {\n+            DataSize limit = getQueryMaxScanPhysicalBytes(query.getSession());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MDg5OA==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r446590898", "bodyText": "done", "author": "shenh062326", "createdAt": "2020-06-28T02:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwOTM2MQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4Nzg1Mw==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r448187853", "bodyText": "Add @NotNull and return Optional<DataSize>", "author": "raunaqmorarka", "createdAt": "2020-07-01T08:02:50Z", "path": "presto-main/src/main/java/io/prestosql/execution/QueryManagerConfig.java", "diffHunk": "@@ -295,6 +297,18 @@ public QueryManagerConfig setQueryMaxCpuTime(Duration queryMaxCpuTime)\n         return this;\n     }\n \n+    public DataSize getQueryMaxScanPhysicalBytes()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3MzAyNg==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r448273026", "bodyText": "I will fix the comments.", "author": "shenh062326", "createdAt": "2020-07-01T10:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4Nzg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcwMjAwMA==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r448702000", "bodyText": "Done", "author": "shenh062326", "createdAt": "2020-07-02T01:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4Nzg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4ODMyNg==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r448188326", "bodyText": "Change to Optional<DataSize> and make the default Optional.empty()", "author": "raunaqmorarka", "createdAt": "2020-07-01T08:03:44Z", "path": "presto-main/src/main/java/io/prestosql/execution/QueryManagerConfig.java", "diffHunk": "@@ -60,6 +61,7 @@\n     private Duration queryMaxRunTime = new Duration(100, TimeUnit.DAYS);\n     private Duration queryMaxExecutionTime = new Duration(100, TimeUnit.DAYS);\n     private Duration queryMaxCpuTime = new Duration(1_000_000_000, TimeUnit.DAYS);\n+    private DataSize queryMaxScanPhysicalBytes;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NTgzNQ==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r448785835", "bodyText": "Done", "author": "shenh062326", "createdAt": "2020-07-02T06:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4ODMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4OTExMA==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r448189110", "bodyText": "this.queryMaxScanPhysicalBytes = Optional.ofNullable(queryMaxScanPhysicalBytes)", "author": "raunaqmorarka", "createdAt": "2020-07-01T08:05:15Z", "path": "presto-main/src/main/java/io/prestosql/execution/QueryManagerConfig.java", "diffHunk": "@@ -295,6 +297,18 @@ public QueryManagerConfig setQueryMaxCpuTime(Duration queryMaxCpuTime)\n         return this;\n     }\n \n+    public DataSize getQueryMaxScanPhysicalBytes()\n+    {\n+        return queryMaxScanPhysicalBytes;\n+    }\n+\n+    @Config(\"query.max-scan-physical-bytes\")\n+    public QueryManagerConfig setQueryMaxScanPhysicalBytes(DataSize queryMaxScanPhysicalBytes)\n+    {\n+        this.queryMaxScanPhysicalBytes = queryMaxScanPhysicalBytes;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc4NTg4MA==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r448785880", "bodyText": "Done", "author": "shenh062326", "createdAt": "2020-07-02T06:53:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4OTExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4OTUyMw==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r448189523", "bodyText": "is this needed ?", "author": "raunaqmorarka", "createdAt": "2020-07-01T08:05:59Z", "path": "presto-tpch/src/main/java/io/prestosql/plugin/tpch/TpchRecordSet.java", "diffHunk": "@@ -109,7 +109,8 @@ public TpchRecordCursor(Iterator<E> rows, TpchTable<E> table, List<TpchColumn<E>\n         @Override\n         public long getCompletedBytes()\n         {\n-            return 0;\n+            // for test\n+            return 10;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3Mjg4OQ==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r448272889", "bodyText": "If return 0, the testcase testQueryScanExceeded won't exceed query.max-scan-physical-bytes, even set query.max-scan-physical-bytes to 0B.", "author": "shenh062326", "createdAt": "2020-07-01T10:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4OTUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4ODQ1Nw==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r449488457", "bodyText": "But this 10 looks a bit arbitrary number, either we have to fetch the completed bytes for a TPCH connector or we can try with a connector which exposes the completedBytes. Can we try with a query like this\nSELECT * FROM system.runtime.nodes", "author": "Praveen2112", "createdAt": "2020-07-03T09:42:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4OTUyMw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQzNjIxNw==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r449436217", "bodyText": "It would be better if we split the changes into two parts, first commit would add physicalInputDataSize to basic query stats and next one would add support restriction", "author": "Praveen2112", "createdAt": "2020-07-03T07:58:33Z", "path": "presto-main/src/main/java/io/prestosql/server/BasicQueryStats.java", "diffHunk": "@@ -79,6 +80,7 @@ public BasicQueryStats(\n             @JsonProperty(\"completedDrivers\") int completedDrivers,\n             @JsonProperty(\"rawInputDataSize\") DataSize rawInputDataSize,\n             @JsonProperty(\"rawInputPositions\") long rawInputPositions,\n+            @JsonProperty(\"physicalInputDataSize\") DataSize physicalInputDataSize,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcyMzYwOA==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r449723608", "bodyText": "Sounds good, I will split it into two pull request.", "author": "shenh062326", "createdAt": "2020-07-04T00:29:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQzNjIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1NjE0Mg==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r450156142", "bodyText": "Add a other pull request #4354 to add physicalInputDataSize to basic query stats.", "author": "shenh062326", "createdAt": "2020-07-06T11:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQzNjIxNw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0ODE1Mg==", "url": "https://github.com/trinodb/trino/pull/4076#discussion_r452648152", "bodyText": "It's super trivial but...\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    super(EXCEEDED_SCAN_LIMIT, \"Exceeded Scan limit of \" + limit.toString());\n          \n          \n            \n                    super(EXCEEDED_SCAN_LIMIT, \"Exceeded scan limit of \" + limit.toString());", "author": "Lewuathe", "createdAt": "2020-07-10T06:32:54Z", "path": "presto-main/src/main/java/io/prestosql/ExceededScanLimitException.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql;\n+\n+import io.airlift.units.DataSize;\n+import io.prestosql.spi.PrestoException;\n+\n+import static io.prestosql.spi.StandardErrorCode.EXCEEDED_SCAN_LIMIT;\n+\n+public class ExceededScanLimitException\n+        extends PrestoException\n+{\n+    public ExceededScanLimitException(DataSize limit)\n+    {\n+        super(EXCEEDED_SCAN_LIMIT, \"Exceeded Scan limit of \" + limit.toString());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "0fa400a57007f0d363b6b6960db94243458776cd", "url": "https://github.com/trinodb/trino/commit/0fa400a57007f0d363b6b6960db94243458776cd", "message": "Add support for scanned bytes limit on queries", "committedDate": "2020-07-13T01:56:14Z", "type": "commit"}, {"oid": "0fa400a57007f0d363b6b6960db94243458776cd", "url": "https://github.com/trinodb/trino/commit/0fa400a57007f0d363b6b6960db94243458776cd", "message": "Add support for scanned bytes limit on queries", "committedDate": "2020-07-13T01:56:14Z", "type": "forcePushed"}]}