{"pr_number": 4629, "pr_title": "Add support for version function", "pr_createdAt": "2020-07-30T03:12:12Z", "pr_url": "https://github.com/trinodb/trino/pull/4629", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNTUwMg==", "url": "https://github.com/trinodb/trino/pull/4629#discussion_r462715502", "bodyText": "We should pick a fixed return type for this function. Otherwise, the type will change from version to version (especially, for non-release builds, which tend to have longer version numbers). Let's go with VARCHAR, since we can't predict what the maximum length of the version string will be in advance.", "author": "martint", "createdAt": "2020-07-30T03:39:37Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/VersionFunction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.prestosql.annotation.UsedByGeneratedCode;\n+import io.prestosql.metadata.BoundVariables;\n+import io.prestosql.metadata.FunctionMetadata;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.Signature;\n+import io.prestosql.metadata.SqlScalarFunction;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static io.prestosql.metadata.FunctionKind.SCALAR;\n+import static io.prestosql.spi.type.VarcharType.createVarcharType;\n+import static io.prestosql.util.Reflection.methodHandle;\n+\n+public final class VersionFunction\n+        extends SqlScalarFunction\n+{\n+    private static final MethodHandle METHOD_HANDLE = methodHandle(VersionFunction.class, \"getVersion\", String.class);\n+    private final String nodeVersion;\n+\n+    public VersionFunction(String nodeVersion)\n+    {\n+        super(new FunctionMetadata(\n+                new Signature(\n+                        \"version\",\n+                        ImmutableList.of(),\n+                        ImmutableList.of(),\n+                        createVarcharType(nodeVersion.length()).getTypeSignature(),", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyOTE4MA==", "url": "https://github.com/trinodb/trino/pull/4629#discussion_r462729180", "bodyText": "Let\u2019s call the this the server version, as \u201cnode\u201d implies it is the version of a specific node (and which node in the cluster would it be?)", "author": "electrum", "createdAt": "2020-07-30T04:35:37Z", "path": "presto-docs/src/main/sphinx/functions/system.rst", "diffHunk": "@@ -0,0 +1,9 @@\n+==================\n+System Information\n+==================\n+\n+Functions providing information about the system environment.\n+\n+.. function:: version() -> varchar\n+\n+    Returns the node version.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyOTU1OA==", "url": "https://github.com/trinodb/trino/pull/4629#discussion_r462729558", "bodyText": "node -> server", "author": "electrum", "createdAt": "2020-07-30T04:37:09Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/VersionFunction.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.airlift.slice.Slice;\n+import io.prestosql.annotation.UsedByGeneratedCode;\n+import io.prestosql.metadata.BoundVariables;\n+import io.prestosql.metadata.FunctionMetadata;\n+import io.prestosql.metadata.Metadata;\n+import io.prestosql.metadata.Signature;\n+import io.prestosql.metadata.SqlScalarFunction;\n+\n+import java.lang.invoke.MethodHandle;\n+\n+import static io.airlift.slice.Slices.utf8Slice;\n+import static io.prestosql.metadata.FunctionKind.SCALAR;\n+import static io.prestosql.spi.type.VarcharType.createVarcharType;\n+import static io.prestosql.util.Reflection.methodHandle;\n+\n+public final class VersionFunction\n+        extends SqlScalarFunction\n+{\n+    private static final MethodHandle METHOD_HANDLE = methodHandle(VersionFunction.class, \"getVersion\", String.class);\n+    private final String nodeVersion;\n+\n+    public VersionFunction(String nodeVersion)\n+    {\n+        super(new FunctionMetadata(\n+                new Signature(\n+                        \"version\",\n+                        ImmutableList.of(),\n+                        ImmutableList.of(),\n+                        createVarcharType(nodeVersion.length()).getTypeSignature(),\n+                        ImmutableList.of(),\n+                        false),\n+                false,\n+                ImmutableList.of(),\n+                true,\n+                true,\n+                \"Return node version\",", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fd8f385378aaba214d9537d2d2cafd83bdfc968d", "url": "https://github.com/trinodb/trino/commit/fd8f385378aaba214d9537d2d2cafd83bdfc968d", "message": "Add support for version function", "committedDate": "2020-07-30T09:39:14Z", "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQyNDcyNg==", "url": "https://github.com/trinodb/trino/pull/4629#discussion_r551424726", "bodyText": "This seems to be the only test and so we do not really know whether the function works or always returns \"\".\nDo we need a product test for this function?", "author": "findepi", "createdAt": "2021-01-04T16:30:16Z", "path": "core/trino-main/src/test/java/io/trino/operator/scalar/TestVersionFunction.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.operator.scalar;\n+\n+import org.testng.annotations.Test;\n+\n+import static io.trino.spi.type.VarcharType.VARCHAR;\n+\n+public class TestVersionFunction\n+        extends AbstractTestFunctions\n+{\n+    @Test\n+    public void testVersion()\n+    {\n+        assertFunction(\"version()\", VARCHAR, \"<unknown>\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc1MDA3OQ==", "url": "https://github.com/trinodb/trino/pull/4629#discussion_r551750079", "bodyText": "@findepi Added a product test as https://github.com/trinodb/trino/pull/4629/files#diff-04e9af1f77428c07efae26b7d40ed64059d1abcad3115dc97d25c23256e55773. Could you review it again?", "author": "ebyhr", "createdAt": "2021-01-05T07:02:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQyNDcyNg=="}], "type": "inlineReview"}, {"oid": "d37cd9ec4b43e693cff0ce6d96f6fdd73922b13f", "url": "https://github.com/trinodb/trino/commit/d37cd9ec4b43e693cff0ce6d96f6fdd73922b13f", "message": "Add support for version function", "committedDate": "2021-01-05T06:22:25Z", "type": "commit"}, {"oid": "d37cd9ec4b43e693cff0ce6d96f6fdd73922b13f", "url": "https://github.com/trinodb/trino/commit/d37cd9ec4b43e693cff0ce6d96f6fdd73922b13f", "message": "Add support for version function", "committedDate": "2021-01-05T06:22:25Z", "type": "forcePushed"}]}