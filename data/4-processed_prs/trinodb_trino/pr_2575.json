{"pr_number": 2575, "pr_title": "Fix querying information schema with empty name as predicate", "pr_createdAt": "2020-01-22T06:35:19Z", "pr_url": "https://github.com/trinodb/trino/pull/2575", "timeline": [{"oid": "753c555cb01333a64e9fc9a67bded8011091fe51", "url": "https://github.com/trinodb/trino/commit/753c555cb01333a64e9fc9a67bded8011091fe51", "message": "Remove redundant comment", "committedDate": "2020-01-22T06:30:20Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyNTE5OQ==", "url": "https://github.com/trinodb/trino/pull/2575#discussion_r369425199", "bodyText": "Can you please also add a test to TestInformationSchemaConnector where you run actual query and verify the result?", "author": "kokosing", "createdAt": "2020-01-22T08:34:19Z", "path": "presto-main/src/test/java/io/prestosql/metadata/TestInformationSchemaMetadata.java", "diffHunk": "@@ -217,6 +218,36 @@ public void testInformationSchemaPredicatePushdownOnCatalogWiseTables()\n         assertFalse(result.isPresent());\n     }\n \n+    @Test\n+    public void testInformationSchemaPredicatePushdownForEmptyNames()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyNjM2OQ==", "url": "https://github.com/trinodb/trino/pull/2575#discussion_r369426369", "bodyText": "can you please extract an assertion method and call it twice: assertApplyFiterReturnsEmptyPrefixes(             ImmutableMap.of( new InformationSchemaColumnHandle(\"table_schema\"), new NullableValue(VARCHAR, Slices.utf8Slice(\"\"))));? and same for table_name", "author": "kokosing", "createdAt": "2020-01-22T08:37:14Z", "path": "presto-main/src/test/java/io/prestosql/metadata/TestInformationSchemaMetadata.java", "diffHunk": "@@ -217,6 +218,36 @@ public void testInformationSchemaPredicatePushdownOnCatalogWiseTables()\n         assertFalse(result.isPresent());\n     }\n \n+    @Test\n+    public void testInformationSchemaPredicatePushdownForEmptyNames()\n+    {\n+        TransactionId transactionId = transactionManager.beginTransaction(false);\n+\n+        Constraint constraint = new Constraint(TupleDomain.fromFixedValues(\n+                ImmutableMap.of(\n+                        new InformationSchemaColumnHandle(\"table_name\"), new NullableValue(VARCHAR, Slices.utf8Slice(\"\")))));\n+        ConnectorSession session = createNewSession(transactionId);\n+        ConnectorMetadata metadata = new InformationSchemaMetadata(\"test_catalog\", this.metadata);\n+        InformationSchemaTableHandle tableHandle = (InformationSchemaTableHandle)\n+                metadata.getTableHandle(session, new SchemaTableName(\"information_schema\", \"tables\"));\n+        tableHandle = metadata.applyFilter(session, tableHandle, constraint)\n+                .map(ConstraintApplicationResult::getHandle)\n+                .map(InformationSchemaTableHandle.class::cast)\n+                .orElseThrow(AssertionError::new);\n+        assertTrue(tableHandle.getPrefixes().isEmpty());\n+\n+        tableHandle = (InformationSchemaTableHandle)\n+                metadata.getTableHandle(session, new SchemaTableName(\"information_schema\", \"tables\"));\n+        constraint = new Constraint(TupleDomain.fromFixedValues(\n+                ImmutableMap.of(\n+                        new InformationSchemaColumnHandle(\"table_schema\"), new NullableValue(VARCHAR, Slices.utf8Slice(\"\")))));\n+        tableHandle = metadata.applyFilter(session, tableHandle, constraint)\n+                .map(ConstraintApplicationResult::getHandle)\n+                .map(InformationSchemaTableHandle.class::cast)\n+                .orElseThrow(AssertionError::new);\n+        assertTrue(tableHandle.getPrefixes().isEmpty());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyNzA2Ng==", "url": "https://github.com/trinodb/trino/pull/2575#discussion_r369427066", "bodyText": "move collect to new line", "author": "kokosing", "createdAt": "2020-01-22T08:38:52Z", "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaMetadata.java", "diffHunk": "@@ -311,6 +311,13 @@ private boolean isColumnsEnumeratingTable(InformationSchemaTable table)\n     }\n \n     private <T> Optional<Set<String>> filterString(TupleDomain<T> constraint, T column)\n+    {\n+        return generateFilterFromTupleDomain(constraint, column)\n+                .map(filteredString -> filteredString.stream()\n+                        .filter(value -> !value.isEmpty()).collect(toImmutableSet()));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyODIyMA==", "url": "https://github.com/trinodb/trino/pull/2575#discussion_r369428220", "bodyText": "This .filter(value -> !value.isEmpty()) can be only called for columns that we known that cannot have empty values (catalog, schema, table, column) however filterString suggests it is generic. Maybe rename or filterEmptyValues(filterString(...))? So it would be used in place where column is known.", "author": "kokosing", "createdAt": "2020-01-22T08:41:36Z", "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaMetadata.java", "diffHunk": "@@ -311,6 +311,13 @@ private boolean isColumnsEnumeratingTable(InformationSchemaTable table)\n     }\n \n     private <T> Optional<Set<String>> filterString(TupleDomain<T> constraint, T column)\n+    {\n+        return generateFilterFromTupleDomain(constraint, column)\n+                .map(filteredString -> filteredString.stream()\n+                        .filter(value -> !value.isEmpty()).collect(toImmutableSet()));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0ODg4NA==", "url": "https://github.com/trinodb/trino/pull/2575#discussion_r370148884", "bodyText": "I was thinking of method like String<Set> removeEmptyValues(Set<String values). Then you would use it like filterString(constraint, column).map(this::removeEmptyValues)", "author": "kokosing", "createdAt": "2020-01-23T14:28:38Z", "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaMetadata.java", "diffHunk": "@@ -310,6 +310,14 @@ private boolean isColumnsEnumeratingTable(InformationSchemaTable table)\n                 .map(schema -> new QualifiedTablePrefix(catalogName, schema));\n     }\n \n+    private <T> Optional<Set<String>> filterEmptyValues(TupleDomain<T> constraint, T column)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1NDgxMw==", "url": "https://github.com/trinodb/trino/pull/2575#discussion_r370254813", "bodyText": "Updated", "author": "Praveen2112", "createdAt": "2020-01-23T17:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0ODg4NA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI1NjQ1Ng==", "url": "https://github.com/trinodb/trino/pull/2575#discussion_r370256456", "bodyText": "static\nthis method is very much of utility kind, so I would define it at the very bottom of this class", "author": "kokosing", "createdAt": "2020-01-23T17:31:17Z", "path": "presto-main/src/main/java/io/prestosql/connector/informationschema/InformationSchemaMetadata.java", "diffHunk": "@@ -347,6 +347,13 @@ private boolean isColumnsEnumeratingTable(InformationSchemaTable table)\n         return Optional.empty();\n     }\n \n+    private Set<String> removeEmptyValues(Set<String> values)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8c4b7ccd0afa8b0fe555703c60e7e646ece90eb8", "url": "https://github.com/trinodb/trino/commit/8c4b7ccd0afa8b0fe555703c60e7e646ece90eb8", "message": "Fix querying information schema with empty name as predicate", "committedDate": "2020-01-23T17:40:16Z", "type": "commit"}, {"oid": "8c4b7ccd0afa8b0fe555703c60e7e646ece90eb8", "url": "https://github.com/trinodb/trino/commit/8c4b7ccd0afa8b0fe555703c60e7e646ece90eb8", "message": "Fix querying information schema with empty name as predicate", "committedDate": "2020-01-23T17:40:16Z", "type": "forcePushed"}]}