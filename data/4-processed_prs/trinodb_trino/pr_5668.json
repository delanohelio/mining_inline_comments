{"pr_number": 5668, "pr_title": "Make type checks for EXTRACT more precise ", "pr_createdAt": "2020-10-22T23:19:23Z", "pr_url": "https://github.com/trinodb/trino/pull/5668", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0OTI5NQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510749295", "bodyText": "add default branch with throw\nhowever, i think it would be better to impl this logic in the Extrac.Field enum.\nthe enum could take Set<Class<Type>> supportedTypes", "author": "findepi", "createdAt": "2020-10-23T09:16:38Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -1166,28 +1165,56 @@ protected Type visitParameter(Parameter node, StackableAstVisitorContext<Context\n         protected Type visitExtract(Extract node, StackableAstVisitorContext<Context> context)\n         {\n             Type type = process(node.getExpression(), context);\n-            if (!isDateTimeType(type)) {\n-                throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Type of argument to extract must be DATE, TIME, TIMESTAMP, or INTERVAL (actual %s)\", type);\n-            }\n             Extract.Field field = node.getField();\n-            if ((field == TIMEZONE_HOUR || field == TIMEZONE_MINUTE) && !(type instanceof TimeWithTimeZoneType || type instanceof TimestampWithTimeZoneType)) {\n-                throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Type of argument to extract time zone field must have a time zone (actual %s)\", type);\n+\n+            switch (field) {", "originalCommit": "611907feceaf6bfebc00482c2a12f433b508f61e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2MTYxOQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510961619", "bodyText": "however, i think it would be better to impl this logic in the Extrac.Field enum.\nthe enum could take Set<Class> supportedTypes\n\nThat would make the parser dependent on types. It's structurally not possible (there would be a circular dependency between modules), but also not appropriate, as it's something the AST/Parser is not concerned about.", "author": "martint", "createdAt": "2020-10-23T15:25:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc0OTI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MTAzNg==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510751036", "bodyText": "Please see #5652", "author": "findepi", "createdAt": "2020-10-23T09:19:38Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/date/TestExtract.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.date;\n+\n+import io.prestosql.Session;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.TestingSession;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestExtract", "originalCommit": "611907feceaf6bfebc00482c2a12f433b508f61e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4MTI5Ng==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510981296", "bodyText": "I know. That's what prompted me to look into this after realizing like EXTRACT(HOUR FROM DATE '...') don't fail as they should.", "author": "martint", "createdAt": "2020-10-23T15:54:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MTAzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MTM1Mg==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510751352", "bodyText": "uh... the default tz is not the default", "author": "findepi", "createdAt": "2020-10-23T09:20:10Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/date/TestExtract.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.date;\n+\n+import io.prestosql.Session;\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.sql.query.QueryAssertions;\n+import io.prestosql.testing.TestingSession;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static io.prestosql.testing.TestingSession.testSessionBuilder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestExtract\n+{\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        Session session = testSessionBuilder()\n+                .setTimeZoneKey(TestingSession.DEFAULT_TIME_ZONE_KEY)", "originalCommit": "611907feceaf6bfebc00482c2a12f433b508f61e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MzY5MQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510753691", "bodyText": "in #5614 i decided to test negative cases for one precision only. i guess it could be a bit simplistic... no strong opinion\nyou could test the negative case with a loop for brevity:\nfor precision 0 to 12\n assert \"EXTRACT .. FROM CAST(NULL AS time(precision))\" fails \n\n(message guarantees the failure is NULL-unrelated)", "author": "findepi", "createdAt": "2020-10-23T09:23:53Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/time/TestExtract.java", "diffHunk": "@@ -156,4 +157,284 @@ public void testMillisecond()\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.12345678901')\")).matches(\"BIGINT '123'\");\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.123456789012')\")).matches(\"BIGINT '123'\");\n     }\n+\n+    @Test\n+    public void testYear()\n+    {\n+        assertThatThrownBy(() -> assertions.expression(\"EXTRACT(YEAR FROM TIME '12:34:56')\"))\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"line 1:26: Cannot extract YEAR from time(0)\");\n+\n+        assertThatThrownBy(() -> assertions.expression(\"EXTRACT(YEAR FROM TIME '12:34:56.1')\"))\n+                .isInstanceOf(PrestoException.class)\n+                .hasMessage(\"line 1:26: Cannot extract YEAR from time(1)\");\n+\n+        assertThatThrownBy(() -> assertions.expression(\"EXTRACT(YEAR FROM TIME '12:34:56.12')\"))", "originalCommit": "611907feceaf6bfebc00482c2a12f433b508f61e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2NTk1Nw==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510965957", "bodyText": "in #5614 i decided to test negative cases for one precision only. i guess it could be a bit simplistic... no strong opinion\n\nIt's important to check all. Otherwise, it's easy for bugs due to type.equals(xxx) to slip by.", "author": "martint", "createdAt": "2020-10-23T15:29:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MzY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2OTUwOQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510969509", "bodyText": "you could test the negative case with a loop for brevity:\n\nLet me give that a try. I tend to prefer the explicit cases because it's 1) easier to step over the code, comment out parts, place breakpoints, etc. to debug specific issues. 2) the tests are more self-evident (although I understand this is subjective)", "author": "martint", "createdAt": "2020-10-23T15:35:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1MzY5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1NDg5NQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510754895", "bodyText": "ideally all TestExtract classes should have same order of methods, so we can easily find what is and what is not implemented yet.\nio.prestosql.operator.scalar.timestamptz.TestExtract is the most comprehensive today, and it lays out the method in from longest fields to shortest (year first, then to millis)", "author": "findepi", "createdAt": "2020-10-23T09:25:41Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/time/TestExtract.java", "diffHunk": "@@ -156,4 +157,284 @@ public void testMillisecond()\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.12345678901')\")).matches(\"BIGINT '123'\");\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.123456789012')\")).matches(\"BIGINT '123'\");\n     }\n+\n+    @Test\n+    public void testYear()", "originalCommit": "611907feceaf6bfebc00482c2a12f433b508f61e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk3MzEzOQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510973139", "bodyText": "Except that for date that's overkill. Each test is a one-liner, so it's easier to read if they are all in the same method.", "author": "martint", "createdAt": "2020-10-23T15:40:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1NDg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk3NzU0OQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r510977549", "bodyText": "As a sidenote, we may want to deprecate fields other than year, month, day, hour, minute, second, timezone_hour, timezone_minute and rely on the existing dedicated functions for others. The spec defines EXTRACT as:\n\n<extract expression> operates on a datetime or interval and returns an exact numeric value representing the value of one component of the datetime or interval.\n\nNone of the other \"fields\" we support are really components, but transformations.", "author": "martint", "createdAt": "2020-10-23T15:47:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1NDg5NQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyODUwNg==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511828506", "bodyText": "There is the IDE's warning as per https://github.com/prestosql/presto/blob/master/DEVELOPMENT.md#additional-ide-configuration", "author": "findepi", "createdAt": "2020-10-26T09:39:42Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timetz/TimeZoneHour.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timetz;\n+\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.LiteralParameters;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.LongTimeWithTimeZone;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import static io.prestosql.spi.type.DateTimeEncoding.unpackOffsetMinutes;\n+import static io.prestosql.type.DateTimes.MINUTES_PER_HOUR;\n+\n+@Description(\"Time zone hour of the given time\")\n+@ScalarFunction(\"timezone_hour\")\n+public class TimeZoneHour", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAyMDYzNA==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r512020634", "bodyText": "That warning is bogus in this case. This is not a \"utility class\" (of course, IntelliJ can't tell)", "author": "martint", "createdAt": "2020-10-26T14:51:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyODUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAyMTEzMw==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r512021133", "bodyText": "I'll make the class final as it's not meant to be extended, though.", "author": "martint", "createdAt": "2020-10-26T14:51:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyODUwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2MzczMg==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r512063732", "bodyText": "Thanks. I understand IntelliJ can be wrong in some cases.\nif we determine a given inspection is not something we obey, we should adjust https://github.com/prestosql/presto/blob/master/DEVELOPMENT.md#additional-ide-configuration accordingly.", "author": "findepi", "createdAt": "2020-10-26T15:45:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyODUwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgyOTI2OQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511829269", "bodyText": "Add test cases with negative offsets", "author": "findepi", "createdAt": "2020-10-26T09:40:55Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timetz/TimeZoneMinute.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timetz;\n+\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.LiteralParameters;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.LongTimeWithTimeZone;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import static io.prestosql.spi.type.DateTimeEncoding.unpackOffsetMinutes;\n+import static io.prestosql.type.DateTimes.MINUTES_PER_HOUR;\n+\n+@Description(\"Time zone minute of the given time\")\n+@ScalarFunction(\"timezone_minute\")\n+public class TimeZoneMinute\n+{\n+    private TimeZoneMinute() {}\n+\n+    @LiteralParameters(\"p\")\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long extract(@SqlType(\"time(p) with time zone\") long packedTime)\n+    {\n+        return unpackOffsetMinutes(packedTime) % MINUTES_PER_HOUR;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMTQ2MQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511831461", "bodyText": "We could want to improve types here.\nE.g. using integer or smallint (where applicable) could in theory improve query perf when the value ends up being compared with a decimal.\nissue?", "author": "findepi", "createdAt": "2020-10-26T09:44:34Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -1166,28 +1165,58 @@ protected Type visitParameter(Parameter node, StackableAstVisitorContext<Context\n         protected Type visitExtract(Extract node, StackableAstVisitorContext<Context> context)\n         {\n             Type type = process(node.getExpression(), context);\n-            if (!isDateTimeType(type)) {\n-                throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Type of argument to extract must be DATE, TIME, TIMESTAMP, or INTERVAL (actual %s)\", type);\n-            }\n             Extract.Field field = node.getField();\n-            if ((field == TIMEZONE_HOUR || field == TIMEZONE_MINUTE) && !(type instanceof TimeWithTimeZoneType || type instanceof TimestampWithTimeZoneType)) {\n-                throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Type of argument to extract time zone field must have a time zone (actual %s)\", type);\n+\n+            switch (field) {\n+                case YEAR:\n+                case MONTH:\n+                case DAY:\n+                    if (!(type instanceof DateType) &&\n+                            !(type instanceof TimestampType) &&\n+                            !(type instanceof TimestampWithTimeZoneType) &&\n+                            !(type.equals(INTERVAL_YEAR_MONTH))) {\n+                        throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Cannot extract %s from %s\", field, type);\n+                    }\n+                    break;\n+                case QUARTER:\n+                case WEEK:\n+                case DAY_OF_MONTH:\n+                case DAY_OF_WEEK:\n+                case DOW:\n+                case DAY_OF_YEAR:\n+                case DOY:\n+                case YEAR_OF_WEEK:\n+                case YOW:\n+                    if (!(type instanceof DateType) &&\n+                            !(type instanceof TimestampType) &&\n+                            !(type instanceof TimestampWithTimeZoneType)) {\n+                        throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Cannot extract %s from %s\", field, type);\n+                    }\n+                    break;\n+                case HOUR:\n+                case MINUTE:\n+                case SECOND:\n+                    if (!(type instanceof TimestampType) &&\n+                            !(type instanceof TimestampWithTimeZoneType) &&\n+                            !(type instanceof TimeType) &&\n+                            !(type instanceof TimeWithTimeZoneType) &&\n+                            !(type.equals(INTERVAL_DAY_TIME))) {\n+                        throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Cannot extract %s from %s\", field, type);\n+                    }\n+                    break;\n+                case TIMEZONE_MINUTE:\n+                case TIMEZONE_HOUR:\n+                    if (!(type instanceof TimestampWithTimeZoneType) && !(type instanceof TimeWithTimeZoneType)) {\n+                        throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Cannot extract %s from %s\", field, type);\n+                    }\n+                    break;\n+                default:\n+                    throw new UnsupportedOperationException(\"Unknown field: \" + field);\n             }\n \n             return setExpressionType(node, BIGINT);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3NjA4Mw==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r512276083", "bodyText": "#5701", "author": "martint", "createdAt": "2020-10-26T21:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMTQ2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMjI3OQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511832279", "bodyText": "DAY doesn't seem to make sense  for INTERVAL_YEAR_MONTH (and doesn't work either)", "author": "findepi", "createdAt": "2020-10-26T09:45:55Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -1166,28 +1165,58 @@ protected Type visitParameter(Parameter node, StackableAstVisitorContext<Context\n         protected Type visitExtract(Extract node, StackableAstVisitorContext<Context> context)\n         {\n             Type type = process(node.getExpression(), context);\n-            if (!isDateTimeType(type)) {\n-                throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Type of argument to extract must be DATE, TIME, TIMESTAMP, or INTERVAL (actual %s)\", type);\n-            }\n             Extract.Field field = node.getField();\n-            if ((field == TIMEZONE_HOUR || field == TIMEZONE_MINUTE) && !(type instanceof TimeWithTimeZoneType || type instanceof TimestampWithTimeZoneType)) {\n-                throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Type of argument to extract time zone field must have a time zone (actual %s)\", type);\n+\n+            switch (field) {\n+                case YEAR:\n+                case MONTH:\n+                case DAY:\n+                    if (!(type instanceof DateType) &&\n+                            !(type instanceof TimestampType) &&\n+                            !(type instanceof TimestampWithTimeZoneType) &&\n+                            !(type.equals(INTERVAL_YEAR_MONTH))) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAxODAxOA==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r512018018", "bodyText": "Oh yeah, copy/paste error.", "author": "martint", "createdAt": "2020-10-26T14:47:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMjI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzMzkyNw==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511833927", "bodyText": "We should test all the possible extract fields in this class.\nCan be here, or follow up (eg #5652?)\nHaving a common test structure (separate methods, or even an abstract AbstractTestExtract class), could be helpful for ensure 100% coverage. Thus, i'd rather have this method split, even if the new test methods end up being one liners.", "author": "findepi", "createdAt": "2020-10-26T09:48:36Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/date/TestExtract.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.date;\n+\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.sql.query.QueryAssertions;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestExtract\n+{\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        assertions = new QueryAssertions();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void test()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzNDU5OQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511834599", "bodyText": "Worth testing with negative dates (before epoch) too.", "author": "findepi", "createdAt": "2020-10-26T09:49:41Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/date/TestExtract.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.date;\n+\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.sql.query.QueryAssertions;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class TestExtract\n+{\n+    private QueryAssertions assertions;\n+\n+    @BeforeClass\n+    public void init()\n+    {\n+        assertions = new QueryAssertions();\n+    }\n+\n+    @AfterClass(alwaysRun = true)\n+    public void teardown()\n+    {\n+        assertions.close();\n+        assertions = null;\n+    }\n+\n+    @Test\n+    public void test()\n+    {\n+        assertThat(assertions.expression(\"EXTRACT(YEAR FROM DATE '2020-05-10')\")).matches(\"BIGINT '2020'\");\n+        assertThat(assertions.expression(\"EXTRACT(MONTH FROM DATE '2020-05-10')\")).matches(\"BIGINT '5'\");\n+        assertThat(assertions.expression(\"EXTRACT(DAY FROM DATE '2020-05-10')\")).matches(\"BIGINT '10'\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzNTI4NQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511835285", "bodyText": "This is in Remove redundant session initialization commit, but belongs to an earlier commit.", "author": "findepi", "createdAt": "2020-10-26T09:50:47Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -1170,14 +1170,22 @@ protected Type visitExtract(Extract node, StackableAstVisitorContext<Context> co\n             switch (field) {\n                 case YEAR:\n                 case MONTH:\n-                case DAY:", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzNTQ3Ng==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511835476", "bodyText": "This is in Remove redundant session initialization commit, but doesn't seem to belong here.", "author": "findepi", "createdAt": "2020-10-26T09:51:07Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -1170,14 +1170,22 @@ protected Type visitExtract(Extract node, StackableAstVisitorContext<Context> co\n             switch (field) {\n                 case YEAR:\n                 case MONTH:\n-                case DAY:\n                     if (!(type instanceof DateType) &&\n                             !(type instanceof TimestampType) &&\n                             !(type instanceof TimestampWithTimeZoneType) &&\n                             !(type.equals(INTERVAL_YEAR_MONTH))) {\n                         throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Cannot extract %s from %s\", field, type);\n                     }\n                     break;\n+                case DAY:", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzNTU2OQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511835569", "bodyText": "DAY doesn't seem to make sense for INTERVAL_YEAR_MONTH (and doesn't work either)", "author": "findepi", "createdAt": "2020-10-26T09:51:15Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -1170,14 +1170,22 @@ protected Type visitExtract(Extract node, StackableAstVisitorContext<Context> co\n             switch (field) {\n                 case YEAR:\n                 case MONTH:\n-                case DAY:\n                     if (!(type instanceof DateType) &&\n                             !(type instanceof TimestampType) &&\n                             !(type instanceof TimestampWithTimeZoneType) &&\n                             !(type.equals(INTERVAL_YEAR_MONTH))) {\n                         throw semanticException(TYPE_MISMATCH, node.getExpression(), \"Cannot extract %s from %s\", field, type);\n                     }\n                     break;\n+                case DAY:\n+                    if (!(type instanceof DateType) &&\n+                            !(type instanceof TimestampType) &&\n+                            !(type instanceof TimestampWithTimeZoneType) &&\n+                            !(type.equals(INTERVAL_YEAR_MONTH)) &&", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgzNjEwNg==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r511836106", "bodyText": "This is in Remove redundant session initialization commit, but doesn't seem to belong here.", "author": "findepi", "createdAt": "2020-10-26T09:52:09Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timestamp/TestExtract.java", "diffHunk": "@@ -297,7 +291,7 @@ public void testTimezoneHour()\n             int precision = i;\n             assertThatThrownBy(() -> assertions.expression(format(\"EXTRACT(TIMEZONE_HOUR FROM CAST(NULL AS TIMESTAMP(%s)))\", precision)))\n                     .isInstanceOf(PrestoException.class)\n-                    .hasMessage(format(\"line 1:35: Cannot extract TIMEZONE_HOUR from time(%s)\", precision));\n+                    .hasMessage(format(\"line 1:35: Cannot extract TIMEZONE_HOUR from timestamp(%s)\", precision));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5NDUzNQ==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r512494535", "bodyText": "Might be nice to test -00:35 here", "author": "findepi", "createdAt": "2020-10-27T08:25:09Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timetz/TestExtract.java", "diffHunk": "@@ -191,4 +191,126 @@ public void testMillisecond()\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.12345678901+08:35')\")).matches(\"BIGINT '123'\");\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.123456789012+08:35')\")).matches(\"BIGINT '123'\");\n     }\n+\n+    @Test\n+    public void testTimeZoneHour()\n+    {\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234567+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345678+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456789+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234567890+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345678901+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456789012+08:35')\")).matches(\"BIGINT '8'\");\n+\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234567+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345678+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456789+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234567890+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345678901+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456789012+08:35')\")).matches(\"BIGINT '8'\");\n+\n+        // negative offsets\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234567-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345678-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456789-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234567890-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345678901-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456789012-08:35')\")).matches(\"BIGINT '-8'\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5NDcyNg==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r512494726", "bodyText": "test -00:35 too", "author": "findepi", "createdAt": "2020-10-27T08:25:30Z", "path": "presto-main/src/test/java/io/prestosql/operator/scalar/timetz/TestExtract.java", "diffHunk": "@@ -191,4 +191,126 @@ public void testMillisecond()\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.12345678901+08:35')\")).matches(\"BIGINT '123'\");\n         assertThat(assertions.expression(\"millisecond(TIME '12:34:56.123456789012+08:35')\")).matches(\"BIGINT '123'\");\n     }\n+\n+    @Test\n+    public void testTimeZoneHour()\n+    {\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234567+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345678+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456789+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234567890+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345678901+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456789012+08:35')\")).matches(\"BIGINT '8'\");\n+\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234567+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345678+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456789+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234567890+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345678901+08:35')\")).matches(\"BIGINT '8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456789012+08:35')\")).matches(\"BIGINT '8'\");\n+\n+        // negative offsets\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234567-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345678-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456789-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.1234567890-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.12345678901-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_HOUR FROM TIME '12:34:56.123456789012-08:35')\")).matches(\"BIGINT '-8'\");\n+\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234567-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345678-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456789-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.1234567890-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.12345678901-08:35')\")).matches(\"BIGINT '-8'\");\n+        assertThat(assertions.expression(\"timezone_hour(TIME '12:34:56.123456789012-08:35')\")).matches(\"BIGINT '-8'\");\n+    }\n+\n+    @Test\n+    public void testTimeZoneMinute()\n+    {\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.1+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.12+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.123+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.1234+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.12345+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.123456+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.1234567+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.12345678+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.123456789+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.1234567890+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.12345678901+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.123456789012+08:35')\")).matches(\"BIGINT '35'\");\n+\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.1+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.12+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.123+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.1234+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.12345+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.123456+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.1234567+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.12345678+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.123456789+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.1234567890+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.12345678901+08:35')\")).matches(\"BIGINT '35'\");\n+        assertThat(assertions.expression(\"timezone_minute(TIME '12:34:56.123456789012+08:35')\")).matches(\"BIGINT '35'\");\n+\n+        // negative offsets\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.1-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.12-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.123-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.1234-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.12345-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.123456-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.1234567-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.12345678-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.123456789-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.1234567890-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.12345678901-08:35')\")).matches(\"BIGINT '-35'\");\n+        assertThat(assertions.expression(\"EXTRACT(TIMEZONE_MINUTE FROM TIME '12:34:56.123456789012-08:35')\")).matches(\"BIGINT '-35'\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5NTI4OA==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r512495288", "bodyText": "time -> time with time zone ?", "author": "findepi", "createdAt": "2020-10-27T08:26:24Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timetz/TimeZoneHour.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timetz;\n+\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.LiteralParameters;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.LongTimeWithTimeZone;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import static io.prestosql.spi.type.DateTimeEncoding.unpackOffsetMinutes;\n+import static io.prestosql.type.DateTimes.MINUTES_PER_HOUR;\n+\n+@Description(\"Time zone hour of the given time\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMzY5OA==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r513103698", "bodyText": "\"time\" is not meant to be a type, but a general indication of the kind of temporal value. The type is evident from the function signature as shown in SHOW FUNCTIONS.", "author": "martint", "createdAt": "2020-10-28T00:07:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5NTI4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI3ODk0Nw==", "url": "https://github.com/trinodb/trino/pull/5668#discussion_r513278947", "bodyText": "yeah i understand.\nin fact, i have no problem calling timestamp with time zone a \"timestamp\" for brevity\ni have more problem calling time with time zone a \"time\" though, because... it's just a \"pair\" :)", "author": "findepi", "createdAt": "2020-10-28T09:03:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5NTI4OA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "3b1080cb378cbf3b24cc8170f07a0fca65a3436a", "url": "https://github.com/trinodb/trino/commit/3b1080cb378cbf3b24cc8170f07a0fca65a3436a", "message": "Make classes final", "committedDate": "2020-10-28T00:45:39Z", "type": "commit"}, {"oid": "302340c57a21bb77bdf588b33c6483722110a60b", "url": "https://github.com/trinodb/trino/commit/302340c57a21bb77bdf588b33c6483722110a60b", "message": "Remove redundant session initalization", "committedDate": "2020-10-28T00:45:39Z", "type": "commit"}, {"oid": "be5cb413f6312d9e2c0f15a4b62f954c90a66039", "url": "https://github.com/trinodb/trino/commit/be5cb413f6312d9e2c0f15a4b62f954c90a66039", "message": "Make type checks for EXTRACT more precise\n\nPer the SQL specification:\n\n    If <extract field> is a <primary datetime field>, then it shall identify\n    a <primary datetime field> of the <interval value expression> or\n    <datetime value expression> immediately contained in <extract source>.", "committedDate": "2020-10-28T00:45:39Z", "type": "commit"}, {"oid": "95773cd4f7194fea98a0f857eadcaa7dee06f509", "url": "https://github.com/trinodb/trino/commit/95773cd4f7194fea98a0f857eadcaa7dee06f509", "message": "Add support for EXTRACT TIMEZONE_HOUR/MINUTE for time w/ tz", "committedDate": "2020-10-28T00:45:39Z", "type": "commit"}, {"oid": "95773cd4f7194fea98a0f857eadcaa7dee06f509", "url": "https://github.com/trinodb/trino/commit/95773cd4f7194fea98a0f857eadcaa7dee06f509", "message": "Add support for EXTRACT TIMEZONE_HOUR/MINUTE for time w/ tz", "committedDate": "2020-10-28T00:45:39Z", "type": "forcePushed"}]}