{"pr_number": 5639, "pr_title": "Improve window frames", "pr_createdAt": "2020-10-21T20:13:05Z", "pr_url": "https://github.com/trinodb/trino/pull/5639", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MjM5Mg==", "url": "https://github.com/trinodb/trino/pull/5639#discussion_r512262392", "bodyText": "I'd rename to SimpleChannelComparator", "author": "martint", "createdAt": "2020-10-26T20:55:37Z", "path": "presto-main/src/main/java/io/prestosql/operator/SimplePagesIndexInterChannelComparator.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator;\n+\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.type.BlockTypeOperators.BlockPositionComparison;\n+\n+import static com.google.common.base.Throwables.throwIfUnchecked;\n+import static io.prestosql.operator.SyntheticAddress.decodePosition;\n+import static io.prestosql.operator.SyntheticAddress.decodeSliceIndex;\n+import static io.prestosql.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SimplePagesIndexInterChannelComparator", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MjYzOA==", "url": "https://github.com/trinodb/trino/pull/5639#discussion_r512262638", "bodyText": "comparator?", "author": "martint", "createdAt": "2020-10-26T20:56:05Z", "path": "presto-main/src/main/java/io/prestosql/operator/SimplePagesIndexInterChannelComparator.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator;\n+\n+import io.prestosql.spi.PrestoException;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.type.BlockTypeOperators.BlockPositionComparison;\n+\n+import static com.google.common.base.Throwables.throwIfUnchecked;\n+import static io.prestosql.operator.SyntheticAddress.decodePosition;\n+import static io.prestosql.operator.SyntheticAddress.decodeSliceIndex;\n+import static io.prestosql.spi.StandardErrorCode.GENERIC_INTERNAL_ERROR;\n+import static java.util.Objects.requireNonNull;\n+\n+public class SimplePagesIndexInterChannelComparator\n+        implements PagesIndexComparator\n+{\n+    private final int leftChannel;\n+    private final int rightChannel;\n+    private final BlockPositionComparison comparison;\n+\n+    public SimplePagesIndexInterChannelComparator(int leftChannel, int rightChannel, BlockPositionComparison comparison)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NzE2OQ==", "url": "https://github.com/trinodb/trino/pull/5639#discussion_r512267169", "bodyText": "What does this comment apply to?", "author": "kasiafi", "createdAt": "2020-10-26T21:04:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MjYzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5NzE1Ng==", "url": "https://github.com/trinodb/trino/pull/5639#discussion_r512297156", "bodyText": "The variable name. Instead of comparison, I'd name it comparator.", "author": "martint", "createdAt": "2020-10-26T22:05:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MjYzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDQ3NQ==", "url": "https://github.com/trinodb/trino/pull/5639#discussion_r512264475", "bodyText": "private", "author": "martint", "createdAt": "2020-10-26T20:59:30Z", "path": "presto-main/src/main/java/io/prestosql/operator/WindowOperator.java", "diffHunk": "@@ -404,6 +415,71 @@ public void finishMemoryRevoke()\n             this.peerGroupHashStrategy = pagesIndex.createPagesHashStrategy(sortChannels, OptionalInt.empty());\n             this.rangeHashStrategy = pagesIndex.createPagesHashStrategyNoCompile(sortChannels, OptionalInt.empty(), Optional.empty());\n             this.preGroupedPartitionChannels = Ints.toArray(preGroupedPartitionChannels);\n+            this.frameBoundComparators = createFrameBoundComparators(pagesIndex, windowFunctionDefinitions);\n+        }\n+    }\n+\n+    /**\n+     * Create comparators necessary for seeking frame start or frame end for window functions with frame type RANGE.\n+     * Whenever a frame bound is specified as RANGE X PRECEDING or RANGE X FOLLOWING,\n+     * a dedicated comparator is created to compare sort key values with expected frame bound values.\n+     */\n+    private static Map<FrameBoundKey, PagesIndexComparator> createFrameBoundComparators(PagesIndex pagesIndex, List<WindowFunctionDefinition> windowFunctionDefinitions)\n+    {\n+        ImmutableMap.Builder<FrameBoundKey, PagesIndexComparator> builder = ImmutableMap.builder();\n+\n+        for (int i = 0; i < windowFunctionDefinitions.size(); i++) {\n+            FrameInfo frameInfo = windowFunctionDefinitions.get(i).getFrameInfo();\n+            if (frameInfo.getType() == RANGE) {\n+                if (frameInfo.getStartType() == PRECEDING || frameInfo.getStartType() == FOLLOWING) {\n+                    PagesIndexComparator comparator = pagesIndex.createInterChannelComparator(frameInfo.getSortKeyChannelForStartComparison(), frameInfo.getStartChannel());\n+                    builder.put(new FrameBoundKey(i, FrameBoundKey.Type.START), comparator);\n+                }\n+                if (frameInfo.getEndType() == PRECEDING || frameInfo.getEndType() == FOLLOWING) {\n+                    PagesIndexComparator comparator = pagesIndex.createInterChannelComparator(frameInfo.getSortKeyChannelForEndComparison(), frameInfo.getEndChannel());\n+                    builder.put(new FrameBoundKey(i, FrameBoundKey.Type.END), comparator);\n+                }\n+            }\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    public static class FrameBoundKey\n+    {\n+        final int functionIndex;\n+        final Type type;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NTM5OA==", "url": "https://github.com/trinodb/trino/pull/5639#discussion_r512265398", "bodyText": "createChannelComparator", "author": "martint", "createdAt": "2020-10-26T21:01:12Z", "path": "presto-main/src/main/java/io/prestosql/operator/PagesIndex.java", "diffHunk": "@@ -471,6 +472,12 @@ public PagesHashStrategy createPagesHashStrategyNoCompile(List<Integer> joinChan\n                 blockTypeOperators);\n     }\n \n+    public PagesIndexComparator createInterChannelComparator(int leftChannel, int rightChannel)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b9979c3ac4c34c30b24377d43ccbd6a15318bcde", "url": "https://github.com/trinodb/trino/commit/b9979c3ac4c34c30b24377d43ccbd6a15318bcde", "message": "Add support for RANGE", "committedDate": "2020-10-27T11:48:49Z", "type": "commit"}, {"oid": "b9979c3ac4c34c30b24377d43ccbd6a15318bcde", "url": "https://github.com/trinodb/trino/commit/b9979c3ac4c34c30b24377d43ccbd6a15318bcde", "message": "Add support for RANGE", "committedDate": "2020-10-27T11:48:49Z", "type": "forcePushed"}]}