{"pr_number": 3540, "pr_title": "Add a query with WHERE clause to DataTypeTest", "pr_createdAt": "2020-04-24T18:40:39Z", "pr_url": "https://github.com/trinodb/trino/pull/3540", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNTQ1MA==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r416905450", "bodyText": "Why not always?", "author": "findepi", "createdAt": "2020-04-28T20:36:07Z", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataTypeTest.java", "diffHunk": "@@ -31,16 +33,31 @@\n {\n     private final List<Input<?>> inputs = new ArrayList<>();\n \n-    private DataTypeTest() {}\n+    private boolean runSelectWithWhere;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MTE2NQ==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r418351165", "bodyText": "I was afraid of breaking existing tests.", "author": "MiguelWeezardo", "createdAt": "2020-04-30T23:49:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNTQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NjA5MA==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r418946090", "bodyText": "Can we give it a try?", "author": "findepi", "createdAt": "2020-05-02T11:19:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNTQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUyMzU5MQ==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r434523591", "bodyText": "Enabling it by default causes problems with:\n\nTestMySqlTypeMapping.testBasicTypes:107 \u00bb NoSuchElement\nTestMySqlTypeMapping.testJson:449 \u00bb NoSuchElement\nTestPhoenixSqlTypeMapping.testArray:260 \u00bb Runtime line 1:88: Function 'to_date' not registered\nTestPhoenixSqlTypeMapping.testArrayNulls:292 \u00bb Runtime ARRAY comparison not supported for arrays with null elements\nTestPhoenixSqlTypeMapping.testDate:239 \u00bb Runtime line 1:76: Function 'to_date' not registered\nTestPhoenixSqlTypeMapping.testDecimal:171 \u00bb Runtime line 1:1: Invalid numeric literal: 27182818284590452353602874713526624977\nTestPhoenixSqlTypeMapping.testVarbinary:111 \u00bb Runtime line 1:81: Function 'decode' not registered\n\nBecause of this, tests for the following modules were skipped:\n\npresto-postgresql\npresto-sqlserver\npresto-iceberg\n\nI suggest we disable WHERE clauses by default, and let maintainers of specific connectors enable them manually.", "author": "MiguelWeezardo", "createdAt": "2020-06-03T12:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNTQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyMTY2OQ==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r434621669", "bodyText": "TestMySqlTypeMapping.testBasicTypes:107 \u00bb NoSuchElement\n\nThat also shows other problem. When the test fails, there is no hint what went wrong.\nWe could eg  issue separate select for each data point. WDYT?", "author": "findepi", "createdAt": "2020-06-03T14:43:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNTQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyMzAzOA==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r434623038", "bodyText": "I checked that for TestMySqlTypeMapping.testBasicTypes failing data points are for double or float.\nChanging the test values from 123.45 to 123.25 solves the problem.", "author": "findepi", "createdAt": "2020-06-03T14:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNTQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5NjkwNg==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r435196906", "bodyText": "TestMySqlTypeMapping.testBasicTypes:107 \u00bb NoSuchElement\n\nThat also shows other problem. When the test fails, there is no hint what went wrong.\nWe could eg issue separate select for each data point. WDYT?\n\nI implemented it that way originally, but the test took several minutes because it had to issue O(N) queries. Maybe we should add this per-column iteration as a debug stage if the combined query fails for any reason?", "author": "MiguelWeezardo", "createdAt": "2020-06-04T11:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNTQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5OTE3NQ==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r435199175", "bodyText": "I checked that for TestMySqlTypeMapping.testBasicTypes failing data points are for double or float.\nChanging the test values from 123.45 to 123.25 solves the problem.\n\nDo you think this is related to the fact that 123.45 is not exactly representable in floating point?", "author": "MiguelWeezardo", "createdAt": "2020-06-04T12:00:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNTQ1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0MDg1MA==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r435240850", "bodyText": "Maybe we should add this per-column iteration as a debug stage if the combined query fails for any reason?\n\nclever.", "author": "findepi", "createdAt": "2020-06-04T13:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNTQ1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNjAwNQ==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r416906005", "bodyText": "is not needed because toPrestoLiteral handles NULLs", "author": "findepi", "createdAt": "2020-04-28T20:37:10Z", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataTypeTest.java", "diffHunk": "@@ -55,27 +72,66 @@ public void execute(QueryRunner prestoExecutor, Session session, DataSetup dataS\n         List<Object> expectedResults = inputs.stream().map(Input::toPrestoQueryResult).collect(toList());\n         try (TestTable testTable = dataSetup.setupTestTable(unmodifiableList(inputs))) {\n             MaterializedResult materializedRows = prestoExecutor.execute(session, \"SELECT * from \" + testTable.getName());\n-            assertEquals(materializedRows.getTypes(), expectedTypes);\n-            List<Object> actualResults = getOnlyElement(materializedRows).getFields();\n-            assertEquals(actualResults.size(), expectedResults.size(), \"lists don't have the same size\");\n-            for (int i = 0; i < expectedResults.size(); i++) {\n-                assertEquals(actualResults.get(i), expectedResults.get(i), \"Element \" + i);\n+            checkResults(expectedTypes, expectedResults, materializedRows);\n+            if (runSelectWithWhere) {\n+                String prestoQuery = buildPrestoQueryWithWhereClauses(testTable);\n+                MaterializedResult filteredRows = prestoExecutor.execute(session, prestoQuery);\n+                checkResults(expectedTypes, expectedResults, filteredRows);\n+            }\n+        }\n+    }\n+\n+    private String buildPrestoQueryWithWhereClauses(TestTable testTable)\n+    {\n+        List<String> predicates = new ArrayList<>();\n+        for (int i = 0; i < inputs.size(); i++) {\n+            Input<?> input = inputs.get(i);\n+            if (input.isUseInWhereClause()) {\n+                if (input.isNullValue()) {\n+                    predicates.add(format(\"col_%d IS NULL\", i));\n+                }", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1MjUwNQ==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r418352505", "bodyText": "Is \"IS NULL\" and \"IS NOT DISTINCT FROM NULL\" the same? If I remove the null check at this level we will be forced to use the same comparison operator for NULL and non-NULL cases.", "author": "MiguelWeezardo", "createdAt": "2020-04-30T23:54:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNjAwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NjEzOA==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r418946138", "bodyText": "Is \"IS NULL\" and \"IS NOT DISTINCT FROM NULL\" the same?\n\nyes", "author": "findepi", "createdAt": "2020-05-02T11:19:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNjAwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNzIxMw==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r416907213", "bodyText": "When this fails, it would be good to have a way to distinguish this failure from checkResults above.\nPoor man's wold be to extract the body of this if section to a new method", "author": "findepi", "createdAt": "2020-04-28T20:39:15Z", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataTypeTest.java", "diffHunk": "@@ -55,27 +72,66 @@ public void execute(QueryRunner prestoExecutor, Session session, DataSetup dataS\n         List<Object> expectedResults = inputs.stream().map(Input::toPrestoQueryResult).collect(toList());\n         try (TestTable testTable = dataSetup.setupTestTable(unmodifiableList(inputs))) {\n             MaterializedResult materializedRows = prestoExecutor.execute(session, \"SELECT * from \" + testTable.getName());\n-            assertEquals(materializedRows.getTypes(), expectedTypes);\n-            List<Object> actualResults = getOnlyElement(materializedRows).getFields();\n-            assertEquals(actualResults.size(), expectedResults.size(), \"lists don't have the same size\");\n-            for (int i = 0; i < expectedResults.size(); i++) {\n-                assertEquals(actualResults.get(i), expectedResults.get(i), \"Element \" + i);\n+            checkResults(expectedTypes, expectedResults, materializedRows);\n+            if (runSelectWithWhere) {\n+                String prestoQuery = buildPrestoQueryWithWhereClauses(testTable);\n+                MaterializedResult filteredRows = prestoExecutor.execute(session, prestoQuery);\n+                checkResults(expectedTypes, expectedResults, filteredRows);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNzYyNA==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r416907624", "bodyText": "why do we need this?", "author": "findepi", "createdAt": "2020-04-28T20:40:00Z", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataTypeTest.java", "diffHunk": "@@ -55,27 +72,66 @@ public void execute(QueryRunner prestoExecutor, Session session, DataSetup dataS\n         List<Object> expectedResults = inputs.stream().map(Input::toPrestoQueryResult).collect(toList());\n         try (TestTable testTable = dataSetup.setupTestTable(unmodifiableList(inputs))) {\n             MaterializedResult materializedRows = prestoExecutor.execute(session, \"SELECT * from \" + testTable.getName());\n-            assertEquals(materializedRows.getTypes(), expectedTypes);\n-            List<Object> actualResults = getOnlyElement(materializedRows).getFields();\n-            assertEquals(actualResults.size(), expectedResults.size(), \"lists don't have the same size\");\n-            for (int i = 0; i < expectedResults.size(); i++) {\n-                assertEquals(actualResults.get(i), expectedResults.get(i), \"Element \" + i);\n+            checkResults(expectedTypes, expectedResults, materializedRows);\n+            if (runSelectWithWhere) {\n+                String prestoQuery = buildPrestoQueryWithWhereClauses(testTable);\n+                MaterializedResult filteredRows = prestoExecutor.execute(session, prestoQuery);\n+                checkResults(expectedTypes, expectedResults, filteredRows);\n+            }\n+        }\n+    }\n+\n+    private String buildPrestoQueryWithWhereClauses(TestTable testTable)\n+    {\n+        List<String> predicates = new ArrayList<>();\n+        for (int i = 0; i < inputs.size(); i++) {\n+            Input<?> input = inputs.get(i);\n+            if (input.isUseInWhereClause()) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NDM0MQ==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r418354341", "bodyText": "We may want to selectively disable some values (NaN, Inf, Long.MIN_VALUE, etc.) from the WHERE clause, since I'm not sure all values would behave correctly in the IS NOT DISTINCT FROM value comparison.", "author": "MiguelWeezardo", "createdAt": "2020-05-01T00:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNzYyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNzk2Nw==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r416907967", "bodyText": "intentional? (same for other methods)", "author": "findepi", "createdAt": "2020-04-28T20:40:35Z", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataTypeTest.java", "diffHunk": "@@ -90,9 +146,14 @@ Object toPrestoQueryResult()\n             return dataType.toPrestoQueryResult(value);\n         }\n \n-        String toLiteral()\n+        public String toLiteral()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1Njc0MQ==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r418356741", "bodyText": "Yes, I wanted to be able to create new DataSetup implementations in different packages.", "author": "MiguelWeezardo", "createdAt": "2020-05-01T00:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwNzk2Nw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5NzQ0Ng==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r440197446", "bodyText": "Use io.prestosql.testing.datatype.DataType.realDataType().toLiteral()", "author": "findepi", "createdAt": "2020-06-15T14:01:09Z", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1546,7 +1553,17 @@ private static void checkIsDoubled(ZoneId zone, LocalDateTime dateTime)\n                         return \"'NaN'::real\";\n                     }\n                     return format(\"'%sInfinity'::real\", value > 0 ? \"+\" : \"-\");\n-                });\n+                },\n+                value -> {\n+                    if (Float.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Float.isNaN(value)) {\n+                        return \"nan()\";\n+                    }\n+                    return format(\"%sinfinity()\", value > 0 ? \"+\" : \"-\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5NzY5NA==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r440197694", "bodyText": "What is an example failure from here?", "author": "findepi", "createdAt": "2020-06-15T14:01:31Z", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataTypeTest.java", "diffHunk": "@@ -55,27 +75,85 @@ public void execute(QueryRunner prestoExecutor, Session session, DataSetup dataS\n         List<Object> expectedResults = inputs.stream().map(Input::toPrestoQueryResult).collect(toList());\n         try (TestTable testTable = dataSetup.setupTestTable(unmodifiableList(inputs))) {\n             MaterializedResult materializedRows = prestoExecutor.execute(session, \"SELECT * from \" + testTable.getName());\n-            assertEquals(materializedRows.getTypes(), expectedTypes);\n-            List<Object> actualResults = getOnlyElement(materializedRows).getFields();\n-            assertEquals(actualResults.size(), expectedResults.size(), \"lists don't have the same size\");\n-            for (int i = 0; i < expectedResults.size(); i++) {\n-                assertEquals(actualResults.get(i), expectedResults.get(i), \"Element \" + i);\n+            checkResults(expectedTypes, expectedResults, materializedRows);\n+            if (runSelectWithWhere) {\n+                queryWithWhere(prestoExecutor, session, expectedTypes, expectedResults, testTable);\n+            }\n+        }\n+    }\n+\n+    private void queryWithWhere(QueryRunner prestoExecutor, Session session, List<Type> expectedTypes, List<Object> expectedResults, TestTable testTable)\n+    {\n+        String prestoQuery = buildPrestoQueryWithWhereClauses(testTable);\n+        try {\n+            MaterializedResult filteredRows = prestoExecutor.execute(session, prestoQuery);\n+            checkResults(expectedTypes, expectedResults, filteredRows);\n+        }\n+        catch (RuntimeException e) {\n+            log.error(\"Exception caught during query with merged WHERE clause, querying one column at a time\", e);\n+            debugTypes(prestoExecutor, session, expectedTypes, expectedResults, testTable);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwMTUzNg==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r440801536", "bodyText": "2020-06-16T07:08:17.212-0500 INFO TIMELINE: Query 20200616_120817_00034_r86pt :: Transaction:[b059f772-d6bb-49d0-a4f0-3834a05593f9] :: elapsed 116ms :: planning 9ms :: waiting 59ms :: scheduling 66ms :: running 37ms :: finishing 4ms :: begin 2020-06-16T07:08:17.090-05:00 :: end 2020-06-16T07:08:17.206-05:00\n2020-06-16T07:08:17.230-0500 INFO TIMELINE: Query 20200616_120817_00035_r86pt :: Transaction:[] :: elapsed 0ms :: planning 0ms :: waiting 0ms :: scheduling 0ms :: running 0ms :: finishing 0ms :: begin 2020-06-16T07:08:17.225-05:00 :: end 2020-06-16T07:08:17.225-05:00\n2020-06-16T07:08:17.234-0500 SEVERE Exception caught during query with merged WHERE clause, querying one column at a time\n2020-06-16T07:08:17.234-0500 INFO Querying input: 0 (expected type: json, expectedResult: null) using: SELECT col_0 FROM tpch.test_boolean_array_as_json_gnxml WHERE col_0 IS NOT DISTINCT FROM NULL\n2020-06-16T07:08:17.356-0500 INFO Querying input: 1 (expected type: json, expectedResult: [[true,false],[false,true],[true,true]]) using: SELECT col_1 FROM tpch.test_boolean_array_as_json_gnxml WHERE col_1 IS NOT DISTINCT FROM ARRAY[ARRAY[true,false],ARRAY[false,true],ARRAY[true,true]]::boolean[]\n2020-06-16T07:08:17.361-0500 INFO TIMELINE: Query 20200616_120817_00036_r86pt :: Transaction:[207a85f5-0bca-46d2-9318-69bb24515e96] :: elapsed 112ms :: planning 22ms :: waiting 41ms :: scheduling 59ms :: running 25ms :: finishing 6ms :: begin 2020-06-16T07:08:17.239-05:00 :: end 2020-06-16T07:08:17.351-05:00\n2020-06-16T07:08:17.364-0500 INFO TIMELINE: Query 20200616_120817_00037_r86pt :: Transaction:[] :: elapsed 0ms :: planning 0ms :: waiting 0ms :: scheduling 0ms :: running 0ms :: finishing 0ms :: begin 2020-06-16T07:08:17.363-05:00 :: end 2020-06-16T07:08:17.363-05:00\n\n\n\njava.lang.RuntimeException: line 1:149: mismatched input ':'. Expecting: '%', '*', '+', '-', '.', '/', 'AND', 'AT', 'EXCEPT', 'FETCH', 'GROUP', 'HAVING', 'INTERSECT', 'LIMIT', 'OFFSET', 'OR', 'ORDER', 'UNION', '[', '||', <EOF>", "author": "MiguelWeezardo", "createdAt": "2020-06-16T12:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5NzY5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgzMTAyMA==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r440831020", "bodyText": "2020-06-16T07:08:59.077-0500 INFO TIMELINE: Query 20200616_120859_00286_r86pt :: Transaction:[7f93c7f9-d52c-4cf7-b66c-b96254412054] :: elapsed 70ms :: planning 5ms :: waiting 42ms :: scheduling 46ms :: running 17ms :: finishing 2ms :: begin 2020-06-16T07:08:59.003-05:00 :: end 2020-06-16T07:08:59.073-05:00\n2020-06-16T07:08:59.417-0500 SEVERE Exception caught during query with merged WHERE clause, querying one column at a time\n2020-06-16T07:08:59.417-0500 INFO Querying input: 0 (expected type: time, expectedResult: 01:12:34) using: SELECT col_0 FROM tpch.test_time_n5dm5 WHERE col_0 IS NOT DISTINCT FROM TIME '01:12:34.000'\n2020-06-16T07:08:59.419-0500 INFO TIMELINE: Query 20200616_120859_00287_r86pt :: Transaction:[c7e9c592-4a0b-49d5-8eed-18eceb2e29cf] :: elapsed 335ms :: planning 266ms :: waiting 34ms :: scheduling 47ms :: running 20ms :: finishing 2ms :: begin 2020-06-16T07:08:59.079-05:00 :: end 2020-06-16T07:08:59.414-05:00\n2020-06-16T07:08:59.532-0500 INFO Querying input: 1 (expected type: time, expectedResult: 02:12:34) using: SELECT col_1 FROM tpch.test_time_n5dm5 WHERE col_1 IS NOT DISTINCT FROM TIME '02:12:34.000'\n2020-06-16T07:08:59.534-0500 INFO TIMELINE: Query 20200616_120859_00288_r86pt :: Transaction:[43d0f8b4-ae0c-42c9-8692-11349a9f61f6] :: elapsed 108ms :: planning 30ms :: waiting 39ms :: scheduling 45ms :: running 30ms :: finishing 3ms :: begin 2020-06-16T07:08:59.421-05:00 :: end 2020-06-16T07:08:59.529-05:00\n2020-06-16T07:08:59.699-0500 INFO Querying input: 2 (expected type: time, expectedResult: 02:12:34.001) using: SELECT col_2 FROM tpch.test_time_n5dm5 WHERE col_2 IS NOT DISTINCT FROM TIME '02:12:34.001'\n2020-06-16T07:08:59.717-0500 INFO TIMELINE: Query 20200616_120859_00289_r86pt :: Transaction:[23b56815-e738-4d94-b481-3d3b1ef0a165] :: elapsed 159ms :: planning 39ms :: waiting 60ms :: scheduling 68ms :: running 47ms :: finishing 5ms :: begin 2020-06-16T07:08:59.537-05:00 :: end 2020-06-16T07:08:59.696-05:00\n2020-06-16T07:08:59.880-0500 INFO Querying input: 3 (expected type: time, expectedResult: 03:12:34) using: SELECT col_3 FROM tpch.test_time_n5dm5 WHERE col_3 IS NOT DISTINCT FROM TIME '03:12:34.000'\n2020-06-16T07:08:59.883-0500 INFO TIMELINE: Query 20200616_120859_00290_r86pt :: Transaction:[d5623e99-0eae-43c7-bf91-f9c28c26b185] :: elapsed 173ms :: planning 35ms :: waiting 101ms :: scheduling 111ms :: running 24ms :: finishing 3ms :: begin 2020-06-16T07:08:59.703-05:00 :: end 2020-06-16T07:08:59.876-05:00\n2020-06-16T07:09:00.078-0500 INFO Querying input: 4 (expected type: time, expectedResult: 04:12:34) using: SELECT col_4 FROM tpch.test_time_n5dm5 WHERE col_4 IS NOT DISTINCT FROM TIME '04:12:34.000'\n2020-06-16T07:09:00.080-0500 INFO TIMELINE: Query 20200616_120859_00291_r86pt :: Transaction:[415b82d0-87fd-492c-ae4d-04d60c6b7f3e] :: elapsed 192ms :: planning 70ms :: waiting 88ms :: scheduling 96ms :: running 23ms :: finishing 3ms :: begin 2020-06-16T07:08:59.884-05:00 :: end 2020-06-16T07:09:00.076-05:00\n2020-06-16T07:09:00.202-0500 INFO Querying input: 5 (expected type: time, expectedResult: 05:12:34) using: SELECT col_5 FROM tpch.test_time_n5dm5 WHERE col_5 IS NOT DISTINCT FROM TIME '05:12:34.000'\n2020-06-16T07:09:00.205-0500 INFO TIMELINE: Query 20200616_120900_00292_r86pt :: Transaction:[884ab229-807b-46fa-9fce-09ee7bb00c4d] :: elapsed 117ms :: planning 36ms :: waiting 49ms :: scheduling 55ms :: running 23ms :: finishing 3ms :: begin 2020-06-16T07:09:00.082-05:00 :: end 2020-06-16T07:09:00.199-05:00\n2020-06-16T07:09:00.307-0500 INFO Querying input: 6 (expected type: time, expectedResult: 06:12:34) using: SELECT col_6 FROM tpch.test_time_n5dm5 WHERE col_6 IS NOT DISTINCT FROM TIME '06:12:34.000'\n2020-06-16T07:09:00.310-0500 INFO TIMELINE: Query 20200616_120900_00293_r86pt :: Transaction:[8f1324a2-1d51-4910-8646-838da5e6c1ad] :: elapsed 97ms :: planning 27ms :: waiting 39ms :: scheduling 45ms :: running 23ms :: finishing 2ms :: begin 2020-06-16T07:09:00.206-05:00 :: end 2020-06-16T07:09:00.303-05:00\n2020-06-16T07:09:00.554-0500 INFO Querying input: 7 (expected type: time, expectedResult: 09:12:34) using: SELECT col_7 FROM tpch.test_time_n5dm5 WHERE col_7 IS NOT DISTINCT FROM TIME '09:12:34.000'\n2020-06-16T07:09:00.555-0500 INFO TIMELINE: Query 20200616_120900_00294_r86pt :: Transaction:[426d50be-1124-4849-8a0c-823faa6122b5] :: elapsed 239ms :: planning 46ms :: waiting 93ms :: scheduling 105ms :: running 81ms :: finishing 7ms :: begin 2020-06-16T07:09:00.311-05:00 :: end 2020-06-16T07:09:00.550-05:00\n2020-06-16T07:09:00.731-0500 INFO Querying input: 8 (expected type: time, expectedResult: 10:12:34) using: SELECT col_8 FROM tpch.test_time_n5dm5 WHERE col_8 IS NOT DISTINCT FROM TIME '10:12:34.000'\n2020-06-16T07:09:00.733-0500 INFO TIMELINE: Query 20200616_120900_00295_r86pt :: Transaction:[886dc453-4684-4329-a44c-4ea747d59adb] :: elapsed 171ms :: planning 44ms :: waiting 87ms :: scheduling 97ms :: running 29ms :: finishing 1ms :: begin 2020-06-16T07:09:00.557-05:00 :: end 2020-06-16T07:09:00.728-05:00\n2020-06-16T07:09:00.873-0500 INFO Querying input: 9 (expected type: time, expectedResult: 15:12:34.567) using: SELECT col_9 FROM tpch.test_time_n5dm5 WHERE col_9 IS NOT DISTINCT FROM TIME '15:12:34.567'\n2020-06-16T07:09:00.874-0500 INFO TIMELINE: Query 20200616_120900_00296_r86pt :: Transaction:[460967fe-c61e-4785-aed8-c6e22b12cdad] :: elapsed 136ms :: planning 41ms :: waiting 61ms :: scheduling 68ms :: running 23ms :: finishing 4ms :: begin 2020-06-16T07:09:00.735-05:00 :: end 2020-06-16T07:09:00.871-05:00\n2020-06-16T07:09:00.980-0500 INFO Querying input: 10 (expected type: time, expectedResult: 23:59:59.999) using: SELECT col_10 FROM tpch.test_time_n5dm5 WHERE col_10 IS NOT DISTINCT FROM TIME '23:59:59.999'\n2020-06-16T07:09:00.981-0500 INFO TIMELINE: Query 20200616_120900_00297_r86pt :: Transaction:[3319649d-c205-4508-9d2b-871fdf91c115] :: elapsed 100ms :: planning 28ms :: waiting 40ms :: scheduling 49ms :: running 20ms :: finishing 3ms :: begin 2020-06-16T07:09:00.877-05:00 :: end 2020-06-16T07:09:00.977-05:00\n2020-06-16T07:09:01.106-0500 INFO TIMELINE: Query 20200616_120900_00298_r86pt :: Transaction:[57e7653f-1238-4598-b261-635db6819186] :: elapsed 119ms :: planning 35ms :: waiting 50ms :: scheduling 57ms :: running 22ms :: finishing 5ms :: begin 2020-06-16T07:09:00.984-05:00 :: end 2020-06-16T07:09:01.103-05:00", "author": "MiguelWeezardo", "createdAt": "2020-06-16T13:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5NzY5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5Nzk2NQ==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r440197965", "bodyText": "unused? remove.", "author": "findepi", "createdAt": "2020-06-15T14:01:56Z", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataTypeTest.java", "diffHunk": "@@ -55,27 +75,85 @@ public void execute(QueryRunner prestoExecutor, Session session, DataSetup dataS\n         List<Object> expectedResults = inputs.stream().map(Input::toPrestoQueryResult).collect(toList());\n         try (TestTable testTable = dataSetup.setupTestTable(unmodifiableList(inputs))) {\n             MaterializedResult materializedRows = prestoExecutor.execute(session, \"SELECT * from \" + testTable.getName());\n-            assertEquals(materializedRows.getTypes(), expectedTypes);\n-            List<Object> actualResults = getOnlyElement(materializedRows).getFields();\n-            assertEquals(actualResults.size(), expectedResults.size(), \"lists don't have the same size\");\n-            for (int i = 0; i < expectedResults.size(); i++) {\n-                assertEquals(actualResults.get(i), expectedResults.get(i), \"Element \" + i);\n+            checkResults(expectedTypes, expectedResults, materializedRows);\n+            if (runSelectWithWhere) {\n+                queryWithWhere(prestoExecutor, session, expectedTypes, expectedResults, testTable);\n+            }\n+        }\n+    }\n+\n+    private void queryWithWhere(QueryRunner prestoExecutor, Session session, List<Type> expectedTypes, List<Object> expectedResults, TestTable testTable)\n+    {\n+        String prestoQuery = buildPrestoQueryWithWhereClauses(testTable);\n+        try {\n+            MaterializedResult filteredRows = prestoExecutor.execute(session, prestoQuery);\n+            checkResults(expectedTypes, expectedResults, filteredRows);\n+        }\n+        catch (RuntimeException e) {\n+            log.error(\"Exception caught during query with merged WHERE clause, querying one column at a time\", e);\n+            debugTypes(prestoExecutor, session, expectedTypes, expectedResults, testTable);\n+        }\n+    }\n+\n+    private void debugTypes(QueryRunner prestoExecutor, Session session, List<Type> expectedTypes, List<Object> expectedResults, TestTable testTable)\n+    {\n+        for (int i = 0; i < inputs.size(); i++) {\n+            Input<?> input = inputs.get(i);\n+            if (input.isUseInWhereClause()) {\n+                String debugQuery = String.format(\"SELECT col_%d FROM %s WHERE col_%d IS NOT DISTINCT FROM %s\", i, testTable.getName(), i, input.toPrestoLiteral());\n+                log.info(\"Querying input: %d (expected type: %s, expectedResult: %s) using: %s\", i, expectedTypes.get(i), expectedResults.get(i), debugQuery);\n+                MaterializedResult debugRows = prestoExecutor.execute(session, debugQuery);\n+                checkResults(expectedTypes.subList(i, i + 1), expectedResults.subList(i, i + 1), debugRows);\n+            }\n+        }\n+    }\n+\n+    private String buildPrestoQueryWithWhereClauses(TestTable testTable)\n+    {\n+        List<String> predicates = new ArrayList<>();\n+        for (int i = 0; i < inputs.size(); i++) {\n+            Input<?> input = inputs.get(i);\n+            if (input.isUseInWhereClause()) {\n+                predicates.add(format(\"col_%d IS NOT DISTINCT FROM %s\", i, input.toPrestoLiteral()));\n             }\n         }\n+        return \"SELECT * FROM \" + testTable.getName() + \" WHERE \" + join(\" AND \", predicates);\n+    }\n+\n+    private void checkResults(List<Type> expectedTypes, List<Object> expectedResults, MaterializedResult materializedRows)\n+    {\n+        assertEquals(materializedRows.getTypes(), expectedTypes);\n+        List<Object> actualResults = getOnlyElement(materializedRows).getFields();\n+        assertEquals(actualResults.size(), expectedResults.size(), \"lists don't have the same size\");\n+        for (int i = 0; i < expectedResults.size(); i++) {\n+            assertEquals(actualResults.get(i), expectedResults.get(i), \"Element \" + i);\n+        }\n     }\n \n     public static class Input<T>\n     {\n         private final DataType<T> dataType;\n         private final T value;\n+        private final boolean useInWhereClause;\n \n-        public Input(DataType<T> dataType, T value)\n+        public Input(DataType<T> dataType, T value, boolean useInWhereClause)\n         {\n             this.dataType = dataType;\n             this.value = value;\n+            this.useInWhereClause = useInWhereClause;\n         }\n \n-        String getInsertType()\n+        public boolean isUseInWhereClause()\n+        {\n+            return useInWhereClause;\n+        }\n+\n+        public boolean isNullValue()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE5ODk3Mg==", "url": "https://github.com/trinodb/trino/pull/3540#discussion_r440198972", "bodyText": "Similar here", "author": "findepi", "createdAt": "2020-06-15T14:03:28Z", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1560,6 +1577,16 @@ private static void checkIsDoubled(ZoneId zone, LocalDateTime dateTime)\n                         return \"'NaN'::double precision\";\n                     }\n                     return format(\"'%sInfinity'::double precision\", value > 0 ? \"+\" : \"-\");\n-                });\n+                },\n+                value -> {\n+                    if (Double.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Double.isNaN(value)) {\n+                        return \"nan()\";\n+                    }\n+                    return format(\"%sinfinity()\", value > 0 ? \"+\" : \"-\");\n+                },\n+                Function.identity());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "343d69a990037073725b808d4a39952b9a0fba20", "url": "https://github.com/trinodb/trino/commit/343d69a990037073725b808d4a39952b9a0fba20", "message": "Add a query with WHERE clause to DataTypeTest\n\nThis is useful for testing predicate pushdown.\n\nPlease note that this doesn't fail if predicate evaluation happens\non Presto side, you still need an assertion that checks for that.\n\nDebug one column at a time if DataTypeTest fails on WHERE query\n\nAdd WHERE clause to queries in Postgres type tests", "committedDate": "2020-06-16T12:22:25Z", "type": "commit"}, {"oid": "343d69a990037073725b808d4a39952b9a0fba20", "url": "https://github.com/trinodb/trino/commit/343d69a990037073725b808d4a39952b9a0fba20", "message": "Add a query with WHERE clause to DataTypeTest\n\nThis is useful for testing predicate pushdown.\n\nPlease note that this doesn't fail if predicate evaluation happens\non Presto side, you still need an assertion that checks for that.\n\nDebug one column at a time if DataTypeTest fails on WHERE query\n\nAdd WHERE clause to queries in Postgres type tests", "committedDate": "2020-06-16T12:22:25Z", "type": "forcePushed"}]}