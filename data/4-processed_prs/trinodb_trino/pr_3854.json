{"pr_number": 3854, "pr_title": "Add PostgreSQL and MySQL floating point type mapping tests", "pr_createdAt": "2020-05-26T12:39:07Z", "pr_url": "https://github.com/trinodb/trino/pull/3854", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNDQ3NA==", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r430424474", "bodyText": "It was intentionally private because of its implicit use of Object::toString.\nif someone wants this semantics, they should choose them explicitly, using the dataType(String insertType, Type prestoResultType, Function<T, String> toLiteral) overload.", "author": "findepi", "createdAt": "2020-05-26T13:46:47Z", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataType.java", "diffHunk": "@@ -197,11 +215,16 @@ public static String binaryLiteral(byte[] value)\n         return \"X'\" + base16().encode(value) + \"'\";\n     }\n \n-    private static <T> DataType<T> dataType(String insertType, Type prestoResultType)\n+    public static <T> DataType<T> dataType(String insertType, Type prestoResultType)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNjQ5MA==", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r430426490", "bodyText": "i would divide this across type boundaries instead\n    @Test\n    public void testDouble()\n    {\n        doublePrecisionFloatinPointTests(doubleDataType())\n                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_double\"));\n\n        doublePrecisionFloatinPointTests(postgreSqlDoubleDataType())\n                .execute(getQueryRunner(), postgresCreateAndInsert(\"presto_test_double\"));\n    }", "author": "findepi", "createdAt": "2020-05-26T13:49:30Z", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1259,6 +1261,44 @@ public void testMoney()\n                 .execute(getQueryRunner(), postgresCreateAndInsert(\"tpch.presto_test_money\"));\n     }\n \n+    @Test\n+    public void testPrestoCreatedFloatingPoint()\n+    {\n+        singlePrecisionFloatingPointTests(realDataType())\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_float\"));\n+        doublePrecisionFloatinPointTests(doubleDataType())\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_double\"));\n+    }\n+\n+    @Test\n+    public void testPostgresCreatedFloatingPoint()\n+    {\n+        singlePrecisionFloatingPointTests(postgreSqlRealDataType())\n+                .execute(getQueryRunner(), postgresCreateAndInsert(\"tpch.postgresql_test_float\"));\n+        doublePrecisionFloatinPointTests(postgreSqlDoubleDataType())\n+                .execute(getQueryRunner(), postgresCreateAndInsert(\"tpch.postgresql_test_double\"));\n+    }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNzc3Ng==", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r430427776", "bodyText": "You could reuse io.prestosql.testing.datatype.DataType#doubleDataType, if you avoid nan/infinity \"constants\":\nif (Double.isNaN(value)) {\n    return \"0 / 0\";\n}\nreturn format(\"%s1 / 0\", value > 0 ? \"+\" : \"-\");\n\n(up to you)", "author": "findepi", "createdAt": "2020-05-26T13:51:07Z", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1491,4 +1531,32 @@ private static void checkIsDoubled(ZoneId zone, LocalDateTime dateTime)\n     {\n         verify(zone.getRules().getValidOffsets(dateTime).size() == 2, \"Expected %s to be doubled in %s\", dateTime, zone);\n     }\n+\n+    public static DataType<Float> postgreSqlRealDataType()\n+    {\n+        return dataType(\"real\", RealType.REAL,\n+                value -> {\n+                    if (Float.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Float.isNaN(value)) {\n+                        return \"'NaN'\";\n+                    }\n+                    return format(\"'%sInfinity'\", value > 0 ? \"+\" : \"-\");\n+                });\n+    }\n+\n+    public static DataType<Double> postgreSqlDoubleDataType()\n+    {\n+        return dataType(\"double precision\", DoubleType.DOUBLE,\n+                value -> {\n+                    if (Double.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Double.isNaN(value)) {\n+                        return \"'NaN'\";\n+                    }\n+                    return format(\"'%sInfinity'\", value > 0 ? \"+\" : \"-\");\n+                });", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2MDU4Nw==", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r431060587", "bodyText": "Would work I guess. I like the constants though. More readable IMO.", "author": "losipiuk", "createdAt": "2020-05-27T11:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNzc3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyODk4NQ==", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r430428985", "bodyText": "Wow... Does the user get reasonable exception message?", "author": "findepi", "createdAt": "2020-05-26T13:52:43Z", "path": "presto-mysql/src/test/java/io/prestosql/plugin/mysql/TestMySqlTypeMapping.java", "diffHunk": "@@ -464,6 +466,40 @@ private DataTypeTest jsonTestCases(DataType<String> jsonDataType)\n                 .addRoundTrip(jsonDataType, \"[]\");\n     }\n \n+    @Test\n+    public void testPrestoCreatedFloatingPoint()\n+    {\n+        singlePrecisionFloatingPointTests(realDataType())\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_float\"));\n+        doublePrecisionFloatinPointTests(doubleDataType())\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_double\"));\n+    }\n+\n+    @Test\n+    public void testMysqlCreatedFloatingPoint()\n+    {\n+        singlePrecisionFloatingPointTests(mysqlFloatDataType())\n+                .execute(getQueryRunner(), mysqlCreateAndInsert(\"tpch.mysql_test_float\"));\n+        doublePrecisionFloatinPointTests(mysqlDoubleDataType())\n+                .execute(getQueryRunner(), mysqlCreateAndInsert(\"tpch.mysql_test_double\"));\n+    }\n+\n+    private static DataTypeTest singlePrecisionFloatingPointTests(DataType<Float> floatType)\n+    {\n+        // we are not testing Nan/-Infinity/+Infinity as those are not supported by MySQL", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5MDk3Mw==", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r431090973", "bodyText": "I mysql CLI you get:\n\nIf you try to put NaN as a value via MySQL JDBC you get java.sql.SQLException: 'NaN' is not a valid numeric or approximate numeric value", "author": "losipiuk", "createdAt": "2020-05-27T12:49:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyODk4NQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzMDY1OQ==", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r431830659", "bodyText": "Adding this overload may let you simplify call sites to the existing, 4-arg overload.", "author": "findepi", "createdAt": "2020-05-28T13:23:25Z", "path": "presto-testing/src/main/java/io/prestosql/testing/datatype/DataType.java", "diffHunk": "@@ -202,6 +220,11 @@ public static String binaryLiteral(byte[] value)\n         return new DataType<>(insertType, prestoResultType, Object::toString, Function.identity());\n     }\n \n+    public static <T> DataType<T> dataType(String insertType, Type prestoResultType, Function<T, String> toLiteral)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxMTI1Mg==", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r432411252", "bodyText": "for a followup", "author": "losipiuk", "createdAt": "2020-05-29T11:01:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzMDY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzMTQ5Mg==", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r431831492", "bodyText": "add a test exhausting precision of a float (~7 digits), to detect potential over-eager rounding", "author": "findepi", "createdAt": "2020-05-28T13:24:38Z", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1259,6 +1261,46 @@ public void testMoney()\n                 .execute(getQueryRunner(), postgresCreateAndInsert(\"tpch.presto_test_money\"));\n     }\n \n+    @Test\n+    public void testReal()\n+    {\n+        singlePrecisionFloatingPointTests(realDataType())\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_real\"));\n+\n+        singlePrecisionFloatingPointTests(postgreSqlRealDataType())\n+                .execute(getQueryRunner(), postgresCreateAndInsert(\"tpch.postgresql_test_real\"));\n+    }\n+\n+    @Test\n+    public void testDouble()\n+    {\n+        doublePrecisionFloatinPointTests(doubleDataType())\n+                .execute(getQueryRunner(), prestoCreateAsSelect(\"presto_test_double\"));\n+\n+        doublePrecisionFloatinPointTests(postgreSqlDoubleDataType())\n+                .execute(getQueryRunner(), postgresCreateAndInsert(\"tpch.postgresql_test_double\"));\n+    }\n+\n+    private static DataTypeTest singlePrecisionFloatingPointTests(DataType<Float> floatType)\n+    {\n+        return DataTypeTest.create()\n+                .addRoundTrip(floatType, 123.45f)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzMjA1MA==", "url": "https://github.com/trinodb/trino/pull/3854#discussion_r431832050", "bodyText": "a varchar?\nor \"'NaN'::double\"?", "author": "findepi", "createdAt": "2020-05-28T13:25:29Z", "path": "presto-postgresql/src/test/java/io/prestosql/plugin/postgresql/TestPostgreSqlTypeMapping.java", "diffHunk": "@@ -1491,4 +1533,32 @@ private static void checkIsDoubled(ZoneId zone, LocalDateTime dateTime)\n     {\n         verify(zone.getRules().getValidOffsets(dateTime).size() == 2, \"Expected %s to be doubled in %s\", dateTime, zone);\n     }\n+\n+    private static DataType<Float> postgreSqlRealDataType()\n+    {\n+        return dataType(\"real\", RealType.REAL,\n+                value -> {\n+                    if (Float.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Float.isNaN(value)) {\n+                        return \"'NaN'\";\n+                    }\n+                    return format(\"'%sInfinity'\", value > 0 ? \"+\" : \"-\");\n+                });\n+    }\n+\n+    private static DataType<Double> postgreSqlDoubleDataType()\n+    {\n+        return dataType(\"double precision\", DoubleType.DOUBLE,\n+                value -> {\n+                    if (Double.isFinite(value)) {\n+                        return value.toString();\n+                    }\n+                    if (Double.isNaN(value)) {\n+                        return \"'NaN'\";", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8bb623801920b88b578df1638179fb15fd25cbff", "url": "https://github.com/trinodb/trino/commit/8bb623801920b88b578df1638179fb15fd25cbff", "message": "Support NaN and Infinity in JDBC testing datatypes", "committedDate": "2020-05-29T08:39:01Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "e14309f1493e6357b04daa8700f66065b5afb69e", "url": "https://github.com/trinodb/trino/commit/e14309f1493e6357b04daa8700f66065b5afb69e", "message": "Add PostgreSQL floating point type mapping tests", "committedDate": "2020-05-29T09:15:14Z", "type": "commit"}, {"oid": "848c6de3274ecf122c2845a96c287fa3f8e34bb0", "url": "https://github.com/trinodb/trino/commit/848c6de3274ecf122c2845a96c287fa3f8e34bb0", "message": "Add MySQL floating point type mapping tests", "committedDate": "2020-05-29T09:15:14Z", "type": "commit"}, {"oid": "848c6de3274ecf122c2845a96c287fa3f8e34bb0", "url": "https://github.com/trinodb/trino/commit/848c6de3274ecf122c2845a96c287fa3f8e34bb0", "message": "Add MySQL floating point type mapping tests", "committedDate": "2020-05-29T09:15:14Z", "type": "forcePushed"}]}