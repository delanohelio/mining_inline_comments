{"pr_number": 5330, "pr_title": "Implement getCatalogSessionProperties", "pr_createdAt": "2020-09-28T17:01:44Z", "pr_url": "https://github.com/trinodb/trino/pull/5330", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyNjExMg==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r496526112", "bodyText": "Please extract AbstractSessionPropertyManager extraction as separate commit. So logical changes are separated from refactors. Now it is more difficult to track how it changed.", "author": "kokosing", "createdAt": "2020-09-29T08:27:56Z", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.session;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.session.SessionConfigurationContext;\n+import io.prestosql.spi.session.SessionPropertyConfigurationManager;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+public abstract class AbstractSessionPropertyManager\n+        implements SessionPropertyConfigurationManager", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc3MzUxNg==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r496773516", "bodyText": "Cut the change in 4 commits to ease the review", "author": "rclaude", "createdAt": "2020-09-29T14:39:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyNjExMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3NTExNg==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497375116", "bodyText": "Thanks!", "author": "kokosing", "createdAt": "2020-09-30T09:35:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyNjExMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyNzI5NA==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r496527294", "bodyText": "collect to immutable map directly", "author": "kokosing", "createdAt": "2020-09-29T08:29:01Z", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.session;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.session.SessionConfigurationContext;\n+import io.prestosql.spi.session.SessionPropertyConfigurationManager;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+public abstract class AbstractSessionPropertyManager\n+        implements SessionPropertyConfigurationManager\n+{\n+    protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n+\n+    private Map<String, String> getSessionProperties(SessionConfigurationContext context)\n+    {\n+        // later properties override earlier properties\n+        Map<String, String> combinedProperties = new HashMap<>();\n+        for (SessionMatchSpec sessionMatchSpec : getSessionMatchSpecs()) {\n+            combinedProperties.putAll(sessionMatchSpec.match(context));\n+        }\n+        return ImmutableMap.copyOf(combinedProperties);\n+    }\n+\n+    @Override\n+    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    {\n+        Map<String, String> combinedSystemSessionProperties = getSessionProperties(context)\n+                .entrySet()\n+                .stream()\n+                .filter(entry -> !entry.getKey().contains(\".\"))\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc3MDYyMg==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r496770622", "bodyText": "Done\nThanks! didn't knew about ImmutableMap collectors", "author": "rclaude", "createdAt": "2020-09-29T14:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUyNzI5NA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3NTczMA==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497375730", "bodyText": "extract this condition as method: !isCatalogSessionProperty()", "author": "kokosing", "createdAt": "2020-09-30T09:36:57Z", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -26,15 +26,24 @@\n {\n     protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n \n-    @Override\n-    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    private Map<String, String> getSessionProperties(SessionConfigurationContext context)\n     {\n         // later properties override earlier properties\n         Map<String, String> combinedProperties = new HashMap<>();\n         for (SessionMatchSpec sessionMatchSpec : getSessionMatchSpecs()) {\n             combinedProperties.putAll(sessionMatchSpec.match(context));\n         }\n-        return ImmutableMap.copyOf(combinedProperties);\n+        return combinedProperties;\n+    }\n+\n+    @Override\n+    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    {\n+        return getSessionProperties(context)\n+                .entrySet()\n+                .stream()\n+                .filter(entry -> !entry.getKey().contains(\".\"))", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1NzIyMQ==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497757221", "bodyText": "Done", "author": "rclaude", "createdAt": "2020-09-30T19:43:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3NTczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3NTgwMA==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497375800", "bodyText": "static import", "author": "kokosing", "createdAt": "2020-09-30T09:37:05Z", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -26,15 +26,24 @@\n {\n     protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n \n-    @Override\n-    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    private Map<String, String> getSessionProperties(SessionConfigurationContext context)\n     {\n         // later properties override earlier properties\n         Map<String, String> combinedProperties = new HashMap<>();\n         for (SessionMatchSpec sessionMatchSpec : getSessionMatchSpecs()) {\n             combinedProperties.putAll(sessionMatchSpec.match(context));\n         }\n-        return ImmutableMap.copyOf(combinedProperties);\n+        return combinedProperties;\n+    }\n+\n+    @Override\n+    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    {\n+        return getSessionProperties(context)\n+                .entrySet()\n+                .stream()\n+                .filter(entry -> !entry.getKey().contains(\".\"))\n+                .collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, Map.Entry::getValue));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1NzQ5Mw==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497757493", "bodyText": "Done", "author": "rclaude", "createdAt": "2020-09-30T19:43:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3NTgwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3NjQ3MA==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497376470", "bodyText": "Use ImmutableMap.Builder", "author": "kokosing", "createdAt": "2020-09-30T09:38:13Z", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -49,7 +50,22 @@\n     @Override\n     public Map<String, Map<String, String>> getCatalogSessionProperties(SessionConfigurationContext context)\n     {\n-        // NOT IMPLEMENTED YET\n-        return ImmutableMap.of();\n+        Map<String, Map<String, String>> catalogsSessionProperties = new HashMap<>();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2ODcyOA==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497768728", "bodyText": "Partially done\nTried using groupingby collector or a custom collector to do it in a single path but only came up with more verbose & harder to grasp implementations.", "author": "rclaude", "createdAt": "2020-09-30T20:05:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM3NjQ3MA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY2NzIwMA==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497667200", "bodyText": "We could just use interface type in the declaration", "author": "phd3", "createdAt": "2020-09-30T17:04:59Z", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/file/FileSessionPropertyManager.java", "diffHunk": "@@ -15,36 +15,33 @@\n \n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;\n-import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableList;\n import io.airlift.json.JsonCodec;\n import io.airlift.json.JsonCodecFactory;\n import io.airlift.json.ObjectMapperProvider;\n+import io.prestosql.plugin.session.AbstractSessionPropertyManager;\n import io.prestosql.plugin.session.SessionMatchSpec;\n-import io.prestosql.spi.session.SessionConfigurationContext;\n-import io.prestosql.spi.session.SessionPropertyConfigurationManager;\n \n import javax.inject.Inject;\n \n import java.io.IOException;\n import java.io.UncheckedIOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n \n import static com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n public class FileSessionPropertyManager\n-        implements SessionPropertyConfigurationManager\n+        extends AbstractSessionPropertyManager\n {\n     public static final JsonCodec<List<SessionMatchSpec>> CODEC = new JsonCodecFactory(\n             () -> new ObjectMapperProvider().get().enable(FAIL_ON_UNKNOWN_PROPERTIES))\n             .listJsonCodec(SessionMatchSpec.class);\n \n-    private final List<SessionMatchSpec> sessionMatchSpecs;\n+    private final ImmutableList<SessionMatchSpec> sessionMatchSpecs;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MTg5MQ==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497761891", "bodyText": "Made it explicit in the type so we can rely on it in getSessionMatchSpecs() and return the list without doing a ImmutableList.copyOf().", "author": "rclaude", "createdAt": "2020-09-30T19:52:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY2NzIwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3NzYxNA==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497677614", "bodyText": "It'll be good to modify the Limitations section in this file to be consistent with the new behavior.", "author": "phd3", "createdAt": "2020-09-30T17:20:28Z", "path": "presto-docs/src/main/sphinx/admin/session-property-managers.rst", "diffHunk": "@@ -60,7 +60,7 @@ Consider the following set of requirements:\n   limit of 1 hour (tighter than the constraint on ``global``).\n \n * All ETL queries (tagged with 'etl') are routed to subgroups under the ``global.pipeline`` group, and must be\n-  configured with certain properties to control writer behavior.\n+  configured with certain properties to control writer behavior and a hive catalog property.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1ODQyMA==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497758420", "bodyText": "Done", "author": "rclaude", "createdAt": "2020-09-30T19:45:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3NzYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4MjYyOA==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497682628", "bodyText": "I think we may want to getSystemSessionProperties and getCatalogSessionProperties final in this class to future-proof against possible subclasses that may try to override them. @kokosing what do you think?", "author": "phd3", "createdAt": "2020-09-30T17:29:00Z", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.session;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prestosql.spi.session.SessionConfigurationContext;\n+import io.prestosql.spi.session.SessionPropertyConfigurationManager;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public abstract class AbstractSessionPropertyManager\n+        implements SessionPropertyConfigurationManager\n+{\n+    protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n+\n+    @Override\n+    public Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2Mjk4Mg==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497762982", "bodyText": "Done", "author": "rclaude", "createdAt": "2020-09-30T19:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4MjYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4NjM3MQ==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497686371", "bodyText": "nit: indent", "author": "phd3", "createdAt": "2020-09-30T17:35:33Z", "path": "presto-session-property-managers/src/test/java/io/prestosql/plugin/session/db/TestDbSessionPropertyManager.java", "diffHunk": "@@ -82,14 +83,15 @@ public void destroy()\n     }\n \n     @Override\n-    protected void assertProperties(Map<String, String> properties, SessionMatchSpec... specs)\n+        protected void assertProperties(Map<String, String> systemProperties, Map<String, Map<String, String>> catalogProperties, SessionMatchSpec... specs)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2MjUwMA==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r497762500", "bodyText": "Fixed", "author": "rclaude", "createdAt": "2020-09-30T19:53:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4NjM3MQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1NTE3OA==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r498055178", "bodyText": "move it to the bottom, is less interesting than public API", "author": "kokosing", "createdAt": "2020-10-01T08:00:31Z", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -20,21 +20,38 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n \n public abstract class AbstractSessionPropertyManager\n         implements SessionPropertyConfigurationManager\n {\n     protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n \n-    @Override\n-    public final Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    private Map<String, String> getSessionProperties(SessionConfigurationContext context)\n     {\n         // later properties override earlier properties\n         Map<String, String> combinedProperties = new HashMap<>();\n         for (SessionMatchSpec sessionMatchSpec : getSessionMatchSpecs()) {\n             combinedProperties.putAll(sessionMatchSpec.match(context));\n         }\n-        return ImmutableMap.copyOf(combinedProperties);\n+        return combinedProperties;\n+    }\n+\n+    private static boolean isCatalogSessionProperty(Entry<String, String> property)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0MzkxMQ==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r498243911", "bodyText": "Done", "author": "rclaude", "createdAt": "2020-10-01T13:28:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1NTE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1NzIxOA==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r498057218", "bodyText": "put private methods below public. Put method definitions under their usage.", "author": "kokosing", "createdAt": "2020-10-01T08:04:32Z", "path": "presto-session-property-managers/src/main/java/io/prestosql/plugin/session/AbstractSessionPropertyManager.java", "diffHunk": "@@ -20,21 +20,38 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import static com.google.common.collect.ImmutableMap.toImmutableMap;\n \n public abstract class AbstractSessionPropertyManager\n         implements SessionPropertyConfigurationManager\n {\n     protected abstract List<SessionMatchSpec> getSessionMatchSpecs();\n \n-    @Override\n-    public final Map<String, String> getSystemSessionProperties(SessionConfigurationContext context)\n+    private Map<String, String> getSessionProperties(SessionConfigurationContext context)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0NDE4Nw==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r498244187", "bodyText": "Done", "author": "rclaude", "createdAt": "2020-10-01T13:28:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1NzIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1ODAyNw==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r498058027", "bodyText": "can you please add more tests. Where are two catalogs, where the are no. When the are some system session properties. Where input is empty etc.", "author": "kokosing", "createdAt": "2020-10-01T08:05:57Z", "path": "presto-session-property-managers/src/test/java/io/prestosql/plugin/session/db/TestDbSessionPropertyManager.java", "diffHunk": "@@ -211,4 +213,25 @@ public void testOrderingOfSpecs()\n         assertEquals(sessionProperties.get(\"prop_3\"), \"val_3_1\");\n         assertEquals(sessionProperties.size(), 3);\n     }\n+\n+    /**\n+     * A basic test for catalog session properties overrides with the {@link DbSessionPropertyManager}\n+     */\n+    @Test\n+    public void testCatalogSessionProperties()\n+    {\n+        dao.insertSpecRow(1, \".*\", null, null, null, 0);\n+        dao.insertSessionProperty(1, \"catalog_1.prop_1\", \"val_1\");\n+        dao.insertSessionProperty(1, \"catalog_1.prop_2\", \"val_2\");\n+\n+        dao.insertSpecRow(2, \".*\", null, null, null, 1);\n+        dao.insertSessionProperty(2, \"catalog_1.prop_1\", \"val_1_bis\");\n+        dao.insertSessionProperty(2, \"catalog_1.prop_3\", \"val_3\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0MzY0Ng==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r498243646", "bodyText": "Added test for empty tables, empty strings and dots handling edge cases.\nFor 2 catalogs, no catalog, those are covered by the shared tests in AbstractTestSessionPropertyManager.", "author": "rclaude", "createdAt": "2020-10-01T13:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODA1ODAyNw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyMDI4MQ==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r500520281", "bodyText": "This comment is not needed.", "author": "kokosing", "createdAt": "2020-10-06T18:45:21Z", "path": "presto-session-property-managers/src/test/java/io/prestosql/plugin/session/db/TestDbSessionPropertyManager.java", "diffHunk": "@@ -211,4 +213,37 @@ public void testOrderingOfSpecs()\n         assertEquals(sessionProperties.get(\"prop_3\"), \"val_3_1\");\n         assertEquals(sessionProperties.size(), 3);\n     }\n+\n+    /**\n+     * A basic test for catalog session properties overrides with the {@link DbSessionPropertyManager}\n+     */", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyMDM0MA==", "url": "https://github.com/trinodb/trino/pull/5330#discussion_r500520340", "bodyText": "This comment is not needed.", "author": "kokosing", "createdAt": "2020-10-06T18:45:28Z", "path": "presto-session-property-managers/src/test/java/io/prestosql/plugin/session/db/TestDbSessionPropertyManager.java", "diffHunk": "@@ -211,4 +213,37 @@ public void testOrderingOfSpecs()\n         assertEquals(sessionProperties.get(\"prop_3\"), \"val_3_1\");\n         assertEquals(sessionProperties.size(), 3);\n     }\n+\n+    /**\n+     * A basic test for catalog session properties overrides with the {@link DbSessionPropertyManager}\n+     */\n+    @Test\n+    public void testCatalogSessionProperties()\n+    {\n+        dao.insertSpecRow(1, \".*\", null, null, null, 0);\n+        dao.insertSessionProperty(1, \"catalog_1.prop_1\", \"val_1\");\n+        dao.insertSessionProperty(1, \"catalog_1.prop_2\", \"val_2\");\n+\n+        dao.insertSpecRow(2, \".*\", null, null, null, 1);\n+        dao.insertSessionProperty(2, \"catalog_1.prop_1\", \"val_1_bis\");\n+        dao.insertSessionProperty(2, \"catalog_1.prop_3\", \"val_3\");\n+\n+        specsProvider.refresh();\n+        SessionConfigurationContext context1 = new SessionConfigurationContext(\"foo\", Optional.empty(), ImmutableSet.of(), Optional.empty(), TEST_RG);\n+        assertEquals(manager.getCatalogSessionProperties(context1),\n+                ImmutableMap.of(\"catalog_1\",\n+                        ImmutableMap.of(\"prop_1\", \"val_1_bis\", \"prop_2\", \"val_2\", \"prop_3\", \"val_3\")));\n+    }\n+\n+    /**\n+     * Test empty tables\n+     */", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "3b096cbf318a59d294d1efee161aa5a9e32f7ac8", "url": "https://github.com/trinodb/trino/commit/3b096cbf318a59d294d1efee161aa5a9e32f7ac8", "message": "Refactor DB & File SessionPropertyManagers\n\nCreate AbstractSessionPropertyManager to share common code in FileSessionPropertyManager and DbSessionPropertyManager", "committedDate": "2020-10-08T13:07:20Z", "type": "commit"}, {"oid": "f31af65c844e4f2c8ee4878ce64dd1ef01fcdcd8", "url": "https://github.com/trinodb/trino/commit/f31af65c844e4f2c8ee4878ce64dd1ef01fcdcd8", "message": "Filter system session properties\n\nUse the convention that the first dot in a property name is a separator between a catalog name and a the catalog specific property name.\nThus only return session properties with name containing no dot.", "committedDate": "2020-10-08T13:07:20Z", "type": "commit"}, {"oid": "0730d073aae25c09fc3e909d9e9146998c41fb77", "url": "https://github.com/trinodb/trino/commit/0730d073aae25c09fc3e909d9e9146998c41fb77", "message": "Implement getCatalogSessionProperties\n\nWhat: Add support for setting default catalog session properties in FileSessionPropertyManager and DbSessionPropertyManager\nHow: Use the convention that the first dot in a property name is a separator between a catalog name and a the catalog specific property name", "committedDate": "2020-10-08T13:07:20Z", "type": "commit"}, {"oid": "21ad0364121136f30d2b8e33f4f7aab1e77a3b92", "url": "https://github.com/trinodb/trino/commit/21ad0364121136f30d2b8e33f4f7aab1e77a3b92", "message": "Update session property managers documentation\n\n* Add default catalog property configuration example\n* Remove limitation section", "committedDate": "2020-10-08T13:07:20Z", "type": "commit"}, {"oid": "2b6af84442d9170e92319de2ddc6ef692adbd418", "url": "https://github.com/trinodb/trino/commit/2b6af84442d9170e92319de2ddc6ef692adbd418", "message": "Add AbstractTestSessionPropertyManager tests\n\nTest empty catalog and proprety names: handled transparently and not filtered out\nSplit SessionPropertyManagers testMultipleMatch\n* Keep testing assembling of session properties from different matcher in testMultipleMatch\n* Test \"latter matcher override earlier ones\" behavior for system and catalog properties in dedicated tests.", "committedDate": "2020-10-08T13:07:20Z", "type": "commit"}, {"oid": "2b6af84442d9170e92319de2ddc6ef692adbd418", "url": "https://github.com/trinodb/trino/commit/2b6af84442d9170e92319de2ddc6ef692adbd418", "message": "Add AbstractTestSessionPropertyManager tests\n\nTest empty catalog and proprety names: handled transparently and not filtered out\nSplit SessionPropertyManagers testMultipleMatch\n* Keep testing assembling of session properties from different matcher in testMultipleMatch\n* Test \"latter matcher override earlier ones\" behavior for system and catalog properties in dedicated tests.", "committedDate": "2020-10-08T13:07:20Z", "type": "forcePushed"}]}