{"pr_number": 5412, "pr_title": "Forbid @BeforeMethod, @AfterMethod in multi-threaded tests ", "pr_createdAt": "2020-10-04T18:43:16Z", "pr_url": "https://github.com/trinodb/trino/pull/5412", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQwMTY5Ng==", "url": "https://github.com/trinodb/trino/pull/5412#discussion_r499401696", "bodyText": "nit: feels like some commas are missing in this sentence :)", "author": "losipiuk", "createdAt": "2020-10-05T07:48:16Z", "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportMultiThreadedBeforeOrAfterMethod.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import org.testng.IClassListener;\n+import org.testng.ITestClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static io.prestosql.testng.services.Listeners.reportListenerFailure;\n+import static java.lang.String.format;\n+\n+public class ReportMultiThreadedBeforeOrAfterMethod\n+        implements IClassListener\n+{\n+    @Override\n+    public void onBeforeClass(ITestClass testClass)\n+    {\n+        try {\n+            reportMultiThreadedBeforeOrAfterMethod(testClass);\n+        }\n+        catch (RuntimeException | Error e) {\n+            reportListenerFailure(\n+                    ReportMultiThreadedBeforeOrAfterMethod.class,\n+                    \"Failed to process %s: \\n%s\",\n+                    testClass,\n+                    getStackTraceAsString(e));\n+        }\n+    }\n+\n+    private void reportMultiThreadedBeforeOrAfterMethod(ITestClass testClass)\n+    {\n+        Class<?> realClass = testClass.getRealClass();\n+        Test testAnnotation = realClass.getAnnotation(Test.class);\n+        if (testAnnotation != null && testAnnotation.singleThreaded()) {\n+            return;\n+        }\n+\n+        Method[] methods = realClass.getMethods();\n+        for (Method method : methods) {\n+            if (method.getAnnotation(BeforeMethod.class) != null || method.getAnnotation(AfterMethod.class) != null) {\n+                throw new RuntimeException(format(\n+                        \"Test class %s should be annotated as singleThreaded if it contains mutable state as indicated by %s\",", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNjgzMQ==", "url": "https://github.com/trinodb/trino/pull/5412#discussion_r499506831", "bodyText": "added some commas somewhere", "author": "findepi", "createdAt": "2020-10-05T10:45:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQwMTY5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNDI3NA==", "url": "https://github.com/trinodb/trino/pull/5412#discussion_r499414274", "bodyText": "optional: While you are here, can you please change the code to not to swallow exceptions in tearDown?", "author": "kokosing", "createdAt": "2020-10-05T08:06:34Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/util/TestFSDataInputStreamTail.java", "diffHunk": "@@ -39,6 +39,7 @@\n import static org.testng.Assert.assertTrue;\n import static org.testng.Assert.fail;\n \n+@Test(singleThreaded = true) // e.g. test methods operate on shared, mutated tempFile", "originalCommit": "b838557eb6a0bc15b33253600f72c0647466ee70", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNTIwNw==", "url": "https://github.com/trinodb/trino/pull/5412#discussion_r499415207", "bodyText": "while you are here :)\npromVectorResponse is not closed", "author": "kokosing", "createdAt": "2020-10-05T08:08:23Z", "path": "presto-prometheus/src/test/java/io/prestosql/plugin/prometheus/TestPrometheusQueryVectorResponseParse.java", "diffHunk": "@@ -27,6 +27,7 @@\n import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertTrue;\n \n+@Test(singleThreaded = true) // see @BeforeMethod\n public class TestPrometheusQueryVectorResponseParse\n {\n     private InputStream promVectorResponse;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwODAzOQ==", "url": "https://github.com/trinodb/trino/pull/5412#discussion_r499508039", "bodyText": "chose to ignore for now", "author": "findepi", "createdAt": "2020-10-05T10:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNTIwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNTUzOA==", "url": "https://github.com/trinodb/trino/pull/5412#discussion_r499415538", "bodyText": "while you are here :)\n    @AfterMethod\n    @BeforeMethod\n\npick one?", "author": "kokosing", "createdAt": "2020-10-05T08:09:01Z", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/TestHiveHadoop2Plugin.java", "diffHunk": "@@ -38,6 +38,7 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n+@Test(singleThreaded = true) // see @BeforeMethod", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwODA2NQ==", "url": "https://github.com/trinodb/trino/pull/5412#discussion_r499508065", "bodyText": "chose to ignore for now", "author": "findepi", "createdAt": "2020-10-05T10:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNTUzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNTg1MQ==", "url": "https://github.com/trinodb/trino/pull/5412#discussion_r499415851", "bodyText": "maybe we don't need @BeforeMethod here, but only @BeforeClass", "author": "kokosing", "createdAt": "2020-10-05T08:09:35Z", "path": "presto-prometheus/src/test/java/io/prestosql/plugin/prometheus/TestPrometheusQueryVectorResponseParse.java", "diffHunk": "@@ -27,6 +27,7 @@\n import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertTrue;\n \n+@Test(singleThreaded = true) // see @BeforeMethod", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwODExNw==", "url": "https://github.com/trinodb/trino/pull/5412#discussion_r499508117", "bodyText": "chose to ignore for now", "author": "findepi", "createdAt": "2020-10-05T10:48:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNTg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNjAxMw==", "url": "https://github.com/trinodb/trino/pull/5412#discussion_r499416013", "bodyText": "squash this commit please with previous one.", "author": "kokosing", "createdAt": "2020-10-05T08:09:51Z", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/TestHiveHadoop2Plugin.java", "diffHunk": "@@ -38,6 +38,7 @@\n import static org.assertj.core.api.Assertions.assertThat;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwODE5OA==", "url": "https://github.com/trinodb/trino/pull/5412#discussion_r499508198", "bodyText": "which one?", "author": "findepi", "createdAt": "2020-10-05T10:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNjAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyODYyMg==", "url": "https://github.com/trinodb/trino/pull/5412#discussion_r499528622", "bodyText": "It seems that it is squashed now.", "author": "kokosing", "createdAt": "2020-10-05T11:28:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNjAxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNjQ4NQ==", "url": "https://github.com/trinodb/trino/pull/5412#discussion_r499416485", "bodyText": "Please make it @VisibleForTesting and please write few tests for it.", "author": "kokosing", "createdAt": "2020-10-05T08:10:40Z", "path": "presto-testng-services/src/main/java/io/prestosql/testng/services/ReportMultiThreadedBeforeOrAfterMethod.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.testng.services;\n+\n+import org.testng.IClassListener;\n+import org.testng.ITestClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+\n+import static com.google.common.base.Throwables.getStackTraceAsString;\n+import static io.prestosql.testng.services.Listeners.reportListenerFailure;\n+import static java.lang.String.format;\n+\n+public class ReportMultiThreadedBeforeOrAfterMethod\n+        implements IClassListener\n+{\n+    @Override\n+    public void onBeforeClass(ITestClass testClass)\n+    {\n+        try {\n+            reportMultiThreadedBeforeOrAfterMethod(testClass);\n+        }\n+        catch (RuntimeException | Error e) {\n+            reportListenerFailure(\n+                    ReportMultiThreadedBeforeOrAfterMethod.class,\n+                    \"Failed to process %s: \\n%s\",\n+                    testClass,\n+                    getStackTraceAsString(e));\n+        }\n+    }\n+\n+    private void reportMultiThreadedBeforeOrAfterMethod(ITestClass testClass)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwOTA4OQ==", "url": "https://github.com/trinodb/trino/pull/5412#discussion_r499509089", "bodyText": "This is much more simple than ReportUnannotatedMethods and i do not think we need a test for it now.", "author": "findepi", "createdAt": "2020-10-05T10:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNjQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyOTIzMw==", "url": "https://github.com/trinodb/trino/pull/5412#discussion_r499529233", "bodyText": "And so it should be simple to add tests.", "author": "kokosing", "createdAt": "2020-10-05T11:29:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQxNjQ4NQ=="}], "type": "inlineReview"}, {"oid": "daf7e16d13e62412668572aafd97800d7e55ed3a", "url": "https://github.com/trinodb/trino/commit/daf7e16d13e62412668572aafd97800d7e55ed3a", "message": "Mark test classes single-threaded", "committedDate": "2020-10-05T10:57:23Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "23580da3dc0aaf76261c064aeca376e5ac7e3f88", "url": "https://github.com/trinodb/trino/commit/23580da3dc0aaf76261c064aeca376e5ac7e3f88", "message": "Forbid @BeforeMethod, @AfterMethod in multi-threaded tests\n\nExistence of `@BeforeMethod` or `@AfterMethod` most often indicates a\nshared mutable state that needs to be e.g. reset. This means the class\nshould be marked `@Test(singleThreaded=true)`.", "committedDate": "2020-10-05T14:05:55Z", "type": "commit"}, {"oid": "14bc7a9df9f61d68ff1476feabc818fbc39e9ec2", "url": "https://github.com/trinodb/trino/commit/14bc7a9df9f61d68ff1476feabc818fbc39e9ec2", "message": "Do not ingnore tear down exceptions", "committedDate": "2020-10-05T14:05:55Z", "type": "commit"}, {"oid": "14bc7a9df9f61d68ff1476feabc818fbc39e9ec2", "url": "https://github.com/trinodb/trino/commit/14bc7a9df9f61d68ff1476feabc818fbc39e9ec2", "message": "Do not ingnore tear down exceptions", "committedDate": "2020-10-05T14:05:55Z", "type": "forcePushed"}]}