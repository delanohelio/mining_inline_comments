{"pr_number": 3302, "pr_title": "Add updateType to query event ", "pr_createdAt": "2020-04-01T11:56:47Z", "pr_url": "https://github.com/trinodb/trino/pull/3302", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2MDIyNA==", "url": "https://github.com/trinodb/trino/pull/3302#discussion_r401560224", "bodyText": "\"ADD COLUMN\" update type is also configured from io.prestosql.execution.DataDefinitionTask#getName also", "author": "kokosing", "createdAt": "2020-04-01T11:58:47Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -682,37 +683,43 @@ protected Scope visitResetSession(ResetSession node, Optional<Scope> scope)\n         @Override\n         protected Scope visitAddColumn(AddColumn node, Optional<Scope> scope)\n         {\n+            analysis.setUpdateType(\"ADD COLUMN\", createQualifiedObjectName(session, node, node.getName()));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxMTI4NA==", "url": "https://github.com/trinodb/trino/pull/3302#discussion_r401811284", "bodyText": "What's the purpose of this rename? I don't see the benefit in changing it.", "author": "martint", "createdAt": "2020-04-01T18:09:46Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/OutputTable.java", "diffHunk": "@@ -23,14 +23,14 @@\n import static java.util.Objects.requireNonNull;\n \n @Immutable\n-public final class Output\n+public final class OutputTable", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwNjY4OA==", "url": "https://github.com/trinodb/trino/pull/3302#discussion_r401906688", "bodyText": "I wanted to distinguish targetTable from targetSchema. But maybe renaming the class was too much.", "author": "kokosing", "createdAt": "2020-04-01T21:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxMTI4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxMjY2Mg==", "url": "https://github.com/trinodb/trino/pull/3302#discussion_r401812662", "bodyText": "What's \"target\" table? That's supposed to be what \"output\" captures (in QueryOutputMetadata)", "author": "martint", "createdAt": "2020-04-01T18:12:20Z", "path": "presto-spi/src/main/java/io/prestosql/spi/eventlistener/QueryMetadata.java", "diffHunk": "@@ -47,6 +50,7 @@ public QueryMetadata(\n             Optional<String> queryType,\n             Optional<String> preparedQuery,\n             String queryState,\n+            Optional<CatalogSchemaTableName> targetTable,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxMzI0OQ==", "url": "https://github.com/trinodb/trino/pull/3302#discussion_r401813249", "bodyText": "This is already captured in Output.", "author": "martint", "createdAt": "2020-04-01T18:13:21Z", "path": "presto-main/src/main/java/io/prestosql/execution/QueryInfo.java", "diffHunk": "@@ -108,6 +110,7 @@ public QueryInfo(\n             @JsonProperty(\"errorCode\") ErrorCode errorCode,\n             @JsonProperty(\"warnings\") List<PrestoWarning> warnings,\n             @JsonProperty(\"inputs\") Set<Input> inputs,\n+            @JsonProperty(\"outputSchema\") Optional<CatalogSchemaName> outputSchema,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3ODk2MQ==", "url": "https://github.com/trinodb/trino/pull/3302#discussion_r402178961", "bodyText": "msg mismatch (watch out when renaming)", "author": "findepi", "createdAt": "2020-04-02T09:33:20Z", "path": "presto-spi/src/main/java/io/prestosql/spi/eventlistener/QueryMetadata.java", "diffHunk": "@@ -54,6 +56,7 @@ public QueryMetadata(\n         this.queryId = requireNonNull(queryId, \"queryId is null\");\n         this.transactionId = requireNonNull(transactionId, \"transactionId is null\");\n         this.query = requireNonNull(query, \"query is null\");\n+        this.queryType = requireNonNull(queryType, \"updateType is null\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MjAzMA==", "url": "https://github.com/trinodb/trino/pull/3302#discussion_r402182030", "bodyText": "-> updateType", "author": "findepi", "createdAt": "2020-04-02T09:38:27Z", "path": "presto-spi/src/main/java/io/prestosql/spi/eventlistener/QueryMetadata.java", "diffHunk": "@@ -43,6 +44,7 @@ public QueryMetadata(\n             String queryId,\n             Optional<String> transactionId,\n             String query,\n+            Optional<String> queryType,", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NDc5MQ==", "url": "https://github.com/trinodb/trino/pull/3302#discussion_r402454791", "bodyText": "Actually, the class should be private since it's an implementation detail of QueryStateMachine, and its methods should be public.", "author": "martint", "createdAt": "2020-04-02T16:40:37Z", "path": "presto-main/src/main/java/io/prestosql/execution/QueryStateMachine.java", "diffHunk": "@@ -1127,12 +1127,12 @@ private static QueryStats pruneQueryStats(QueryStats queryStats)\n         @GuardedBy(\"this\")\n         private boolean noMoreExchangeLocations;\n \n-        public QueryOutputManager(Executor executor)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1ODQ4MA==", "url": "https://github.com/trinodb/trino/pull/3302#discussion_r402458480", "bodyText": "Same as above. The class is private, but its methods are part of the public interface of the PlanRoot class, so they should remain public.\nThe litmus test for this is: what if you wanted to move the class one level up? Aside from changing the class visibility modifier, it should just work.", "author": "martint", "createdAt": "2020-04-02T16:46:11Z", "path": "presto-main/src/main/java/io/prestosql/execution/SqlQueryExecution.java", "diffHunk": "@@ -604,7 +604,7 @@ private boolean shouldWaitForMinWorkers(Statement statement)\n         private final SubPlan root;\n         private final boolean summarizeTaskInfos;\n \n-        public PlanRoot(SubPlan root, boolean summarizeTaskInfos)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NDE0NA==", "url": "https://github.com/trinodb/trino/pull/3302#discussion_r402474144", "bodyText": "This is a matter of taste. And we have been in this discussion already several times. IDE thinks it is a warning, typically IDE is correct. I won't argue here and I will apply this comment.\nWhen I move class, then the design changes and methods and their accesses should be revisited. Also it is safer to keep methods private, so something do not get accidentally public.\nBesides that, do you have anything else", "author": "kokosing", "createdAt": "2020-04-02T17:10:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1ODQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMTMwMQ==", "url": "https://github.com/trinodb/trino/pull/3302#discussion_r402511301", "bodyText": "IDE thinks it is a warning, typically IDE is correct\n\nThat's also a matter of what warnings you have enabled. It doesn't show as a warning for me.\n\nWhen I move class, then the design changes and methods and their accesses should be revisited. Also it is safer to keep methods private, so something do not get accidentally public.\n\nOn the other hand, using private methods in this case is more confusing. private for methods of inner classes don't behave in the same way as for top-level classes -- they are not truly private, as they are visible to the enclosing class. This creates some \"cognitive dissonance\" and requires one to look at the code carefully to understand whether the method is meant to be used outside of the inner class or not. Using private vs public convention to indicate this makes it easier to reason about the code.\n\nBesides that, do you have anything else\n\nNo, that was it.", "author": "martint", "createdAt": "2020-04-02T18:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1ODQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU0OTk0OQ==", "url": "https://github.com/trinodb/trino/pull/3302#discussion_r402549949", "bodyText": "Either way is fine to me, I think we should write it down somewhere and so everyone else follow this and don't waste more time on it.", "author": "kokosing", "createdAt": "2020-04-02T19:11:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1ODQ4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MzIwNw==", "url": "https://github.com/trinodb/trino/pull/3302#discussion_r402553207", "bodyText": "https://github.com/prestosql/presto/wiki/Code-style :)", "author": "kokosing", "createdAt": "2020-04-02T19:17:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1ODQ4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1ODgzMw==", "url": "https://github.com/trinodb/trino/pull/3302#discussion_r402458833", "bodyText": "Same comment as above", "author": "martint", "createdAt": "2020-04-02T16:46:45Z", "path": "presto-main/src/main/java/io/prestosql/sql/analyzer/StatementAnalyzer.java", "diffHunk": "@@ -1766,7 +1766,7 @@ else if (column.getExpression() instanceof Identifier) {\n         {\n             private final Multimap<QualifiedName, Expression> assignments;\n \n-            public OrderByExpressionRewriter(Multimap<QualifiedName, Expression> assignments)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5fe9daac0e339fca60de4c9da8b111b7fcba638b", "url": "https://github.com/trinodb/trino/commit/5fe9daac0e339fca60de4c9da8b111b7fcba638b", "message": "Remove unused method", "committedDate": "2020-04-03T10:38:06Z", "type": "commit"}, {"oid": "d6e1630f7dba5d91cbdcabc99d12c07a7e2c08de", "url": "https://github.com/trinodb/trino/commit/d6e1630f7dba5d91cbdcabc99d12c07a7e2c08de", "message": "Remove unused tableHandles field", "committedDate": "2020-04-03T10:38:06Z", "type": "commit"}, {"oid": "72abec95585813a69e5167cfb9f3803a05e19ae4", "url": "https://github.com/trinodb/trino/commit/72abec95585813a69e5167cfb9f3803a05e19ae4", "message": "Add updateType to query event\n\nThanks to that event listener will know if query was SELECT, DELETE\nor any other DDL statement.", "committedDate": "2020-04-03T10:38:06Z", "type": "commit"}, {"oid": "72abec95585813a69e5167cfb9f3803a05e19ae4", "url": "https://github.com/trinodb/trino/commit/72abec95585813a69e5167cfb9f3803a05e19ae4", "message": "Add updateType to query event\n\nThanks to that event listener will know if query was SELECT, DELETE\nor any other DDL statement.", "committedDate": "2020-04-03T10:38:06Z", "type": "forcePushed"}]}