{"pr_number": 3891, "pr_title": "Use only first char from escapeChar table property in Hive", "pr_createdAt": "2020-05-31T02:29:04Z", "pr_url": "https://github.com/trinodb/trino/pull/3891", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5MjUwNw==", "url": "https://github.com/trinodb/trino/pull/3891#discussion_r438192507", "bodyText": "Note that there is no test for partitioned CTAS since Hive versions < 3.2 don't support it. See https://cwiki.apache.org/confluence/display/hive/LanguageManual+DDL#LanguageManualDDL-CreateTableAsSelect(CTAS).\n\nStarting with Hive 3.2.0, CTAS statements can define a partitioning specification for the target table (HIVE-20241).", "author": "hashhar", "createdAt": "2020-06-10T15:01:29Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestCsv.java", "diffHunk": "@@ -174,4 +175,89 @@ private static void assertSelect(String query, String tableName)\n                 .hasColumns(expected.getColumnTypes())\n                 .containsOnly(expectedRows);\n     }\n+\n+    @Test(groups = STORAGE_FORMATS)\n+    public void testInsertIntoCsvTableWithCustomMultiCharProperties()\n+    {\n+        String tableName = \"storage_formats_test_insert_into_csv_with_custom_multi_char_properties\";\n+        query(format(\"DROP TABLE IF EXISTS %s\", tableName));\n+        onHive().executeQuery(format(\n+                \"CREATE TABLE %s(\" +\n+                        \"   a  string,\" +\n+                        \"   b  string,\" +\n+                        \"   c  string\" +\n+                        \") ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde' \" +\n+                        \"WITH SERDEPROPERTIES ('escapeChar'='ee','separatorChar'='ss','quoteChar'='qq') \" +\n+                        \"STORED AS \" +\n+                        \"INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat' \" +\n+                        \"OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'\",\n+                tableName));\n+\n+        query(format(\n+                \"INSERT INTO %s(a, b, c) VALUES \" +\n+                        \"('1', 'a', 'A'), \" +\n+                        \"('2', 'b', 'B'), \" +\n+                        \"('3', 'c', 'C')\",\n+                tableName));\n+        assertThat(query(format(\"SELECT * FROM %s\", tableName)))\n+                .containsOnly(\n+                        row(\"1\", \"a\", \"A\"),\n+                        row(\"2\", \"b\", \"B\"),\n+                        row(\"3\", \"c\", \"C\"));\n+        query(format(\"DROP TABLE %s\", tableName));\n+    }\n+\n+    @Test(groups = STORAGE_FORMATS)\n+    public void testCreateCsvTableAsWithCustomMultiCharProperties()\n+    {\n+        String tableName = \"test_csv_table_multi_char_properties\";\n+        query(format(\"DROP TABLE IF EXISTS %s\", tableName));\n+        onHive().executeQuery(format(\n+                \"CREATE TABLE %s \" +\n+                        \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde' \" +\n+                        \"WITH SERDEPROPERTIES ('escapeChar'='ee','separatorChar'='ss','quoteChar'='qq') \" +\n+                        \"STORED AS \" +\n+                        \"INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat' \" +\n+                        \"OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat' \" +\n+                        \"AS \" +\n+                        \"SELECT \" +\n+                        \"'1' AS a, 'a' AS b, 'A' AS c\",\n+                tableName));\n+\n+        assertThat(query(format(\"SELECT * FROM %s\", tableName)))\n+                .containsOnly(row(\"1\", \"a\", \"A\"));\n+        query(format(\"DROP TABLE %s\", tableName));\n+    }\n+\n+    @Test(groups = STORAGE_FORMATS)\n+    public void testInsertIntoPartitionedCsvTableWithCustomMultiCharProperties()\n+    {\n+        String tableName = \"test_partitioned_csv_table_with_custom_multi_char_parameters\";\n+        query(format(\"DROP TABLE IF EXISTS %s\", tableName));\n+        onHive().executeQuery(format(\n+                \"CREATE TABLE %s(\" +\n+                        \"   a  string,\" +\n+                        \"   b  string,\" +\n+                        \"   c  string\" +\n+                        \") PARTITIONED BY (d bigint) \" +\n+                        \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde' \" +\n+                        \"WITH SERDEPROPERTIES ('escapeChar'='ee','separatorChar'='ss','quoteChar'='qq') \" +\n+                        \"STORED AS \" +\n+                        \"INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat' \" +\n+                        \"OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'\",\n+                tableName));\n+\n+        query(format(\n+                \"INSERT INTO %s(a, b, c, d) VALUES \" +\n+                        \"('1', 'a', 'A', 1), \" +\n+                        \"('2', 'b', 'B', 2), \" +\n+                        \"('3', 'c', 'C', 3)\",\n+                tableName));\n+        assertThat(query(format(\"SELECT * FROM %s\", tableName)))\n+                .containsOnly(\n+                        row(\"1\", \"a\", \"A\", 1L),\n+                        row(\"2\", \"b\", \"B\", 2L),\n+                        row(\"3\", \"c\", \"C\", 3L));\n+        query(format(\"DROP TABLE %s\", tableName));\n+    }\n }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzMTMxMA==", "url": "https://github.com/trinodb/trino/pull/3891#discussion_r441131310", "bodyText": "csvSerdeProperty.substring(0, 1)\n(also, can these properties be set to empty string? will we fail here?)", "author": "findepi", "createdAt": "2020-06-16T20:45:28Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveMetadata.java", "diffHunk": "@@ -624,12 +624,7 @@ private ConnectorTableMetadata doGetTableMetadata(ConnectorSession session, Sche\n \n     private static Optional<String> getCsvSerdeProperty(Table table, String key)\n     {\n-        return getSerdeProperty(table, key).map(csvSerdeProperty -> {\n-            if (csvSerdeProperty.length() > 1) {\n-                throw new PrestoException(HIVE_INVALID_METADATA, \"Only single character can be set for property: \" + key);\n-            }\n-            return csvSerdeProperty;\n-        });\n+        return getSerdeProperty(table, key).map(csvSerdeProperty -> String.valueOf(csvSerdeProperty.charAt(0)));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1MjE1OQ==", "url": "https://github.com/trinodb/trino/pull/3891#discussion_r441152159", "bodyText": "Hive doesn't allow empty strings for any of the 3 properties. Checked in 3.1 and 1.1.\nPresto also doesn't allow creating and fails with:\npresto:default> create table test(a varchar) with (format='CSV',csv_quote='');\nQuery 20200616_212543_00651_k26cy failed: csv_quote must be a single character string, but was: ''\nio.prestosql.spi.PrestoException: csv_quote must be a single character string, but was: ''\n\tat io.prestosql.plugin.hive.HiveTableProperties.getSingleCharacterProperty(HiveTableProperties.java:264)\n\tat io.prestosql.plugin.hive.HiveMetadata.getEmptyTableProperties(HiveMetadata.java:939)\n\tat io.prestosql.plugin.hive.HiveMetadata.createTable(HiveMetadata.java:819)\n\tat io.prestosql.plugin.base.classloader.ClassLoaderSafeConnectorMetadata.createTable(ClassLoaderSafeConnectorMetadata.java:318)\n\tat io.prestosql.metadata.MetadataManager.createTable(MetadataManager.java:635)\n\tat io.prestosql.execution.CreateTableTask.internalExecute(CreateTableTask.java:203)\n\tat io.prestosql.execution.CreateTableTask.execute(CreateTableTask.java:87)\n\tat io.prestosql.execution.CreateTableTask.execute(CreateTableTask.java:69)\n\tat io.prestosql.execution.DataDefinitionExecution.start(DataDefinitionExecution.java:167)\n\tat io.prestosql.execution.SqlQueryManager.createQuery(SqlQueryManager.java:237)\n\tat io.prestosql.dispatcher.LocalDispatchQuery.lambda$startExecution$7(LocalDispatchQuery.java:132)\n\tat io.prestosql.$gen.Presto_333____20200615_192640_2.run(Unknown Source)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base/java.lang.Thread.run(Thread.java:834)", "author": "hashhar", "createdAt": "2020-06-16T21:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzMTMxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwMTY1NQ==", "url": "https://github.com/trinodb/trino/pull/3891#discussion_r441301655", "bodyText": "move below testReadCsvTableWithMultiCharProperties, as a person reasing this class should see testReadCsvTableWithMultiCharProperties first, we logically depend on results of that test", "author": "findepi", "createdAt": "2020-06-17T06:09:23Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestCsv.java", "diffHunk": "@@ -174,4 +175,67 @@ private static void assertSelect(String query, String tableName)\n                 .hasColumns(expected.getColumnTypes())\n                 .containsOnly(expectedRows);\n     }\n+\n+    @Test(groups = STORAGE_FORMATS)\n+    public void testWriteCsvTableWithMultiCharProperties()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQwODYzMQ==", "url": "https://github.com/trinodb/trino/pull/3891#discussion_r441408631", "bodyText": "Makes sense.", "author": "hashhar", "createdAt": "2020-06-17T09:25:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwMTY1NQ=="}], "type": "inlineReview"}, {"oid": "f15de405649d8aaf3d24376d6f1b4b7c082cd540", "url": "https://github.com/trinodb/trino/commit/f15de405649d8aaf3d24376d6f1b4b7c082cd540", "message": "Use only first char from csv serde properties in Hive\n\nHive's CSV Serde only reads the first character of the serde properties\n(https://github.com/apache/hive/blob/60ff1fc7f8a9b010b99db0b1add788289f836b77/serde/src/java/org/apache/hadoop/hive/serde2/OpenCSVSerde.java#L98-L106)\nThis change allows Presto to use the same behaviour when reading\nexisting tables.\n\nNote that creating new tables with CSV serde from\nPresto still validates the length of the serde properties.\n\nFixes #3868.", "committedDate": "2020-06-17T11:57:18Z", "type": "commit"}]}