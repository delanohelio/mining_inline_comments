{"pr_number": 6063, "pr_title": "Added ability to have unique table location for each iceberg table", "pr_createdAt": "2020-11-23T18:22:45Z", "pr_url": "https://github.com/trinodb/trino/pull/6063", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODcxOQ==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r529798719", "bodyText": "We don't need to say \"if true\" for boolean properties, as that's redundant. Let's phrase this as\n\nInclude UUID in the table location", "author": "electrum", "createdAt": "2020-11-24T18:41:23Z", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergConfig.java", "diffHunk": "@@ -52,4 +54,18 @@ public IcebergConfig setCompressionCodec(HiveCompressionCodec compressionCodec)\n         this.compressionCodec = compressionCodec;\n         return this;\n     }\n+\n+    @NotNull\n+    public boolean isUniqueTableLocation()\n+    {\n+        return uniqueTableLocation;\n+    }\n+\n+    @Config(\"iceberg.unique-table-location\")\n+    @ConfigDescription(\"If true UUID will be added to the table location\")", "originalCommit": "e039d5d9586b9204d0fac111279822be52d24fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgzNzc0MA==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r529837740", "bodyText": "looks really better, thanks", "author": "sshkvar", "createdAt": "2020-11-24T19:50:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODcxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODc4MA==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r529798780", "bodyText": "Not needed since this returns a primitive", "author": "electrum", "createdAt": "2020-11-24T18:41:29Z", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergConfig.java", "diffHunk": "@@ -52,4 +54,18 @@ public IcebergConfig setCompressionCodec(HiveCompressionCodec compressionCodec)\n         this.compressionCodec = compressionCodec;\n         return this;\n     }\n+\n+    @NotNull", "originalCommit": "e039d5d9586b9204d0fac111279822be52d24fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgzODMyNQ==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r529838325", "bodyText": "removed, thanks", "author": "sshkvar", "createdAt": "2020-11-24T19:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODc4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwMTMwOA==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r529801308", "bodyText": "Should we remove the dashes? Compare\n\nmy_table-1ec297aa2e8511eb9dfe7bf8d2aea93a\nmy_table_1ec297aa-2e85-11eb-9dfe-7bf8d2aea93a", "author": "electrum", "createdAt": "2020-11-24T18:45:50Z", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -393,7 +397,8 @@ public ConnectorOutputTableHandle beginCreateTable(ConnectorSession session, Con\n         HiveIdentity identity = new HiveIdentity(session);\n         String targetPath = getTableLocation(tableMetadata.getProperties());\n         if (targetPath == null) {\n-            targetPath = getTableDefaultLocation(database, hdfsContext, hdfsEnvironment, schemaName, tableName).toString();\n+            String uniqueTableName = useUniqueTableLocation ? String.format(\"%s_%s\", tableName, UUID.randomUUID()) : tableName;", "originalCommit": "e039d5d9586b9204d0fac111279822be52d24fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgzOTA4Mg==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r529839082", "bodyText": "yes, without dashes looks better. Removed dashes and moved generation of unique table name to separate private method", "author": "sshkvar", "createdAt": "2020-11-24T19:52:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwMTMwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwMzE1Mw==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r529803153", "bodyText": "Wrap the argument, since all other arguments are wrapped", "author": "electrum", "createdAt": "2020-11-24T18:49:19Z", "path": "presto-iceberg/src/main/java/io/prestosql/plugin/iceberg/IcebergMetadataFactory.java", "diffHunk": "@@ -37,23 +38,24 @@ public IcebergMetadataFactory(\n             TypeManager typeManager,\n             JsonCodec<CommitTaskData> commitTaskDataJsonCodec)\n     {\n-        this(metastore, hdfsEnvironment, typeManager, commitTaskDataJsonCodec);\n+        this(metastore, hdfsEnvironment, typeManager, commitTaskDataJsonCodec, config.isUniqueTableLocation());\n     }\n \n     public IcebergMetadataFactory(\n             HiveMetastore metastore,\n             HdfsEnvironment hdfsEnvironment,\n             TypeManager typeManager,\n-            JsonCodec<CommitTaskData> commitTaskCodec)\n+            JsonCodec<CommitTaskData> commitTaskCodec, boolean useUniqueTableLocation)", "originalCommit": "e039d5d9586b9204d0fac111279822be52d24fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgzOTY5NA==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r529839694", "bodyText": "Not sure that I understand comment correct, but moved  boolean useUniqueTableLocation to the next line", "author": "sshkvar", "createdAt": "2020-11-24T19:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwMzE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDAwOTE5NA==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r634009194", "bodyText": "tableName + \"-\" + UUID.randomUUID().toString().replace(\"-\", \"\")", "author": "raunaqmorarka", "createdAt": "2021-05-18T03:14:54Z", "path": "plugin/trino-iceberg/src/main/java/io/trino/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -1074,6 +1078,11 @@ else if (strings.size() != 2) {\n         return viewToken;\n     }\n \n+    private String generateUniqueTableName(String tableName)\n+    {\n+        return String.format(\"%s-%s\", tableName, UUID.randomUUID().toString().replace(\"-\", \"\"));", "originalCommit": "647298023da5fc86990dcb0d8c2dadc92a83c85a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDAxNzc4NA==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r634017784", "bodyText": "Append  randomUUID to table location", "author": "raunaqmorarka", "createdAt": "2021-05-18T03:46:26Z", "path": "plugin/trino-iceberg/src/main/java/io/trino/plugin/iceberg/IcebergConfig.java", "diffHunk": "@@ -74,4 +76,17 @@ public IcebergConfig setUseFileSizeFromMetadata(boolean useFileSizeFromMetadata)\n         this.useFileSizeFromMetadata = useFileSizeFromMetadata;\n         return this;\n     }\n+\n+    public boolean isUniqueTableLocation()\n+    {\n+        return uniqueTableLocation;\n+    }\n+\n+    @Config(\"iceberg.unique-table-location\")\n+    @ConfigDescription(\"Include UUID in the table location\")", "originalCommit": "647298023da5fc86990dcb0d8c2dadc92a83c85a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzMzMzgxNQ==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r677333815", "bodyText": "\"Use randomized, unique table locations\"", "author": "findepi", "createdAt": "2021-07-27T10:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDAxNzc4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzMzNzUzMg==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r677337532", "bodyText": "The uniqueTableName variable name suggests we're making the table name unique, while we're only changing table location.\nLet's call the variable tableNameForLocation\nSince same naming problem applies to generateUniqueTableName, let's inline that method.\nString tableNameForLocation = tableName;\nif (useUniqueTableLocation) {\n    tableNameForLocation += \"-\" + randomUUID().toString().replace(\"-\", \"\")\n}", "author": "findepi", "createdAt": "2021-07-27T10:53:17Z", "path": "plugin/trino-iceberg/src/main/java/io/trino/plugin/iceberg/IcebergMetadata.java", "diffHunk": "@@ -495,7 +498,8 @@ public ConnectorOutputTableHandle beginCreateTable(ConnectorSession session, Con\n         HiveIdentity identity = new HiveIdentity(session);\n         String targetPath = getTableLocation(tableMetadata.getProperties());\n         if (targetPath == null) {\n-            targetPath = getTableDefaultLocation(database, hdfsContext, hdfsEnvironment, schemaName, tableName).toString();\n+            String uniqueTableName = useUniqueTableLocation ? generateUniqueTableName(tableName) : tableName;", "originalCommit": "647298023da5fc86990dcb0d8c2dadc92a83c85a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzYwMzQ4Nw==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r677603487", "bodyText": "@findepi sure, I will rebase this brach, add code fixes and tests in next few days", "author": "sshkvar", "createdAt": "2021-07-27T16:15:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzMzNzUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg3NzE3OQ==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r678877179", "bodyText": "@findepi I have rebased this brach.\nAdded few tests to check that uuid suffix added to a table location, and also added tests for check that table correctly dropped .\nWill be really appreciate for the review", "author": "sshkvar", "createdAt": "2021-07-29T06:56:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzMzNzUzMg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg4ODA0OQ==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r678888049", "bodyText": "The test class cannot be executed in threads, because the table name is shared between tests.\nInstead of making it single-threaded, use different table name in each test method.", "author": "findepi", "createdAt": "2021-07-29T07:15:33Z", "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/TestIcebergTableWithCustomLocation.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.iceberg;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import io.trino.Session;\n+import io.trino.plugin.hive.HdfsConfig;\n+import io.trino.plugin.hive.HdfsConfiguration;\n+import io.trino.plugin.hive.HdfsConfigurationInitializer;\n+import io.trino.plugin.hive.HdfsEnvironment;\n+import io.trino.plugin.hive.HiveHdfsConfiguration;\n+import io.trino.plugin.hive.NodeVersion;\n+import io.trino.plugin.hive.TestingHivePlugin;\n+import io.trino.plugin.hive.authentication.NoHdfsAuthentication;\n+import io.trino.plugin.hive.metastore.MetastoreConfig;\n+import io.trino.plugin.hive.metastore.Table;\n+import io.trino.plugin.hive.metastore.file.FileHiveMetastore;\n+import io.trino.plugin.hive.metastore.file.FileHiveMetastoreConfig;\n+import io.trino.spi.security.Identity;\n+import io.trino.spi.security.SelectedRole;\n+import io.trino.testing.AbstractTestQueryFramework;\n+import io.trino.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Optional;\n+\n+import static io.trino.spi.security.SelectedRole.Type.ROLE;\n+import static io.trino.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestIcebergTableWithCustomLocation\n+        extends AbstractTestQueryFramework\n+{\n+    private FileHiveMetastore metastore;\n+\n+    private static final String CATALOG = \"iceberg\";\n+    private static final String SCHEMA = \"iceberg_schema\";\n+    private static final String TABLE = \"iceberg_table\";", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg5NDc1NQ==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r678894755", "bodyText": "ok, I will change it", "author": "sshkvar", "createdAt": "2021-07-29T07:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg4ODA0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODk5NDkxOA==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r678994918", "bodyText": "done", "author": "sshkvar", "createdAt": "2021-07-29T09:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg4ODA0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg4ODY3OA==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r678888678", "bodyText": "would it work to use io.trino.plugin.hive.HiveTestUtils.HDFS_ENVIRONMENT instead?", "author": "findepi", "createdAt": "2021-07-29T07:16:34Z", "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/TestIcebergTableWithCustomLocation.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.iceberg;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import io.trino.Session;\n+import io.trino.plugin.hive.HdfsConfig;\n+import io.trino.plugin.hive.HdfsConfiguration;\n+import io.trino.plugin.hive.HdfsConfigurationInitializer;\n+import io.trino.plugin.hive.HdfsEnvironment;\n+import io.trino.plugin.hive.HiveHdfsConfiguration;\n+import io.trino.plugin.hive.NodeVersion;\n+import io.trino.plugin.hive.TestingHivePlugin;\n+import io.trino.plugin.hive.authentication.NoHdfsAuthentication;\n+import io.trino.plugin.hive.metastore.MetastoreConfig;\n+import io.trino.plugin.hive.metastore.Table;\n+import io.trino.plugin.hive.metastore.file.FileHiveMetastore;\n+import io.trino.plugin.hive.metastore.file.FileHiveMetastoreConfig;\n+import io.trino.spi.security.Identity;\n+import io.trino.spi.security.SelectedRole;\n+import io.trino.testing.AbstractTestQueryFramework;\n+import io.trino.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Optional;\n+\n+import static io.trino.spi.security.SelectedRole.Type.ROLE;\n+import static io.trino.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestIcebergTableWithCustomLocation\n+        extends AbstractTestQueryFramework\n+{\n+    private FileHiveMetastore metastore;\n+\n+    private static final String CATALOG = \"iceberg\";\n+    private static final String SCHEMA = \"iceberg_schema\";\n+    private static final String TABLE = \"iceberg_table\";\n+    private static final String TABLE_RENAMED = \"iceberg_table_renamed\";\n+\n+    @Override\n+    protected DistributedQueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        Session session = testSessionBuilder()\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+        DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(session).build();\n+\n+        File baseDir = queryRunner.getCoordinator().getBaseDataDir().resolve(\"iceberg_data\").toFile();\n+\n+        HdfsConfig hdfsConfig = new HdfsConfig();\n+        HdfsConfiguration hdfsConfiguration = new HiveHdfsConfiguration(new HdfsConfigurationInitializer(hdfsConfig), ImmutableSet.of());\n+        HdfsEnvironment hdfsEnvironment = new HdfsEnvironment(hdfsConfiguration, hdfsConfig, new NoHdfsAuthentication());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODk5NTIyNA==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r678995224", "bodyText": "removed HdfsEnvironment at all", "author": "sshkvar", "createdAt": "2021-07-29T09:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg4ODY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg4OTA0OQ==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r678889049", "bodyText": "what is this for?", "author": "findepi", "createdAt": "2021-07-29T07:17:08Z", "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/TestIcebergTableWithCustomLocation.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.iceberg;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import io.trino.Session;\n+import io.trino.plugin.hive.HdfsConfig;\n+import io.trino.plugin.hive.HdfsConfiguration;\n+import io.trino.plugin.hive.HdfsConfigurationInitializer;\n+import io.trino.plugin.hive.HdfsEnvironment;\n+import io.trino.plugin.hive.HiveHdfsConfiguration;\n+import io.trino.plugin.hive.NodeVersion;\n+import io.trino.plugin.hive.TestingHivePlugin;\n+import io.trino.plugin.hive.authentication.NoHdfsAuthentication;\n+import io.trino.plugin.hive.metastore.MetastoreConfig;\n+import io.trino.plugin.hive.metastore.Table;\n+import io.trino.plugin.hive.metastore.file.FileHiveMetastore;\n+import io.trino.plugin.hive.metastore.file.FileHiveMetastoreConfig;\n+import io.trino.spi.security.Identity;\n+import io.trino.spi.security.SelectedRole;\n+import io.trino.testing.AbstractTestQueryFramework;\n+import io.trino.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Optional;\n+\n+import static io.trino.spi.security.SelectedRole.Type.ROLE;\n+import static io.trino.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestIcebergTableWithCustomLocation\n+        extends AbstractTestQueryFramework\n+{\n+    private FileHiveMetastore metastore;\n+\n+    private static final String CATALOG = \"iceberg\";\n+    private static final String SCHEMA = \"iceberg_schema\";\n+    private static final String TABLE = \"iceberg_table\";\n+    private static final String TABLE_RENAMED = \"iceberg_table_renamed\";\n+\n+    @Override\n+    protected DistributedQueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        Session session = testSessionBuilder()\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+        DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(session).build();\n+\n+        File baseDir = queryRunner.getCoordinator().getBaseDataDir().resolve(\"iceberg_data\").toFile();\n+\n+        HdfsConfig hdfsConfig = new HdfsConfig();\n+        HdfsConfiguration hdfsConfiguration = new HiveHdfsConfiguration(new HdfsConfigurationInitializer(hdfsConfig), ImmutableSet.of());\n+        HdfsEnvironment hdfsEnvironment = new HdfsEnvironment(hdfsConfiguration, hdfsConfig, new NoHdfsAuthentication());\n+\n+        metastore = new FileHiveMetastore(\n+                new NodeVersion(\"test_version\"),\n+                hdfsEnvironment,\n+                new MetastoreConfig(),\n+                new FileHiveMetastoreConfig()\n+                        .setCatalogDirectory(baseDir.toURI().toString())\n+                        .setMetastoreUser(\"test\"));\n+\n+        TestingIcebergPlugin icebergPlugin = new TestingIcebergPlugin(metastore, false);\n+\n+        queryRunner.installPlugin(icebergPlugin);\n+        queryRunner.createCatalog(CATALOG, \"iceberg\", ImmutableMap.of(\"iceberg.unique-table-location\", \"true\"));\n+        queryRunner.installPlugin(new TestingHivePlugin(metastore));\n+        queryRunner.createCatalog(\"hive\", \"hive\", ImmutableMap.of(\"hive.security\", \"sql-standard\"));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODk5NTMzNA==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r678995334", "bodyText": "removed it", "author": "sshkvar", "createdAt": "2021-07-29T09:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg4OTA0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg4OTk4Mw==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r678889983", "bodyText": "We can use iceberg.default schema, so that we don't have to setup things.\nactually, the QueryRunner should have iceberg catalog, and the chosen schema set as session's default, so that you don't need to qualify tables in all the queries", "author": "findepi", "createdAt": "2021-07-29T07:18:42Z", "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/TestIcebergTableWithCustomLocation.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.iceberg;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import io.trino.Session;\n+import io.trino.plugin.hive.HdfsConfig;\n+import io.trino.plugin.hive.HdfsConfiguration;\n+import io.trino.plugin.hive.HdfsConfigurationInitializer;\n+import io.trino.plugin.hive.HdfsEnvironment;\n+import io.trino.plugin.hive.HiveHdfsConfiguration;\n+import io.trino.plugin.hive.NodeVersion;\n+import io.trino.plugin.hive.TestingHivePlugin;\n+import io.trino.plugin.hive.authentication.NoHdfsAuthentication;\n+import io.trino.plugin.hive.metastore.MetastoreConfig;\n+import io.trino.plugin.hive.metastore.Table;\n+import io.trino.plugin.hive.metastore.file.FileHiveMetastore;\n+import io.trino.plugin.hive.metastore.file.FileHiveMetastoreConfig;\n+import io.trino.spi.security.Identity;\n+import io.trino.spi.security.SelectedRole;\n+import io.trino.testing.AbstractTestQueryFramework;\n+import io.trino.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Optional;\n+\n+import static io.trino.spi.security.SelectedRole.Type.ROLE;\n+import static io.trino.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestIcebergTableWithCustomLocation\n+        extends AbstractTestQueryFramework\n+{\n+    private FileHiveMetastore metastore;\n+\n+    private static final String CATALOG = \"iceberg\";\n+    private static final String SCHEMA = \"iceberg_schema\";\n+    private static final String TABLE = \"iceberg_table\";\n+    private static final String TABLE_RENAMED = \"iceberg_table_renamed\";\n+\n+    @Override\n+    protected DistributedQueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        Session session = testSessionBuilder()\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+        DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(session).build();\n+\n+        File baseDir = queryRunner.getCoordinator().getBaseDataDir().resolve(\"iceberg_data\").toFile();\n+\n+        HdfsConfig hdfsConfig = new HdfsConfig();\n+        HdfsConfiguration hdfsConfiguration = new HiveHdfsConfiguration(new HdfsConfigurationInitializer(hdfsConfig), ImmutableSet.of());\n+        HdfsEnvironment hdfsEnvironment = new HdfsEnvironment(hdfsConfiguration, hdfsConfig, new NoHdfsAuthentication());\n+\n+        metastore = new FileHiveMetastore(\n+                new NodeVersion(\"test_version\"),\n+                hdfsEnvironment,\n+                new MetastoreConfig(),\n+                new FileHiveMetastoreConfig()\n+                        .setCatalogDirectory(baseDir.toURI().toString())\n+                        .setMetastoreUser(\"test\"));\n+\n+        TestingIcebergPlugin icebergPlugin = new TestingIcebergPlugin(metastore, false);\n+\n+        queryRunner.installPlugin(icebergPlugin);\n+        queryRunner.createCatalog(CATALOG, \"iceberg\", ImmutableMap.of(\"iceberg.unique-table-location\", \"true\"));\n+        queryRunner.installPlugin(new TestingHivePlugin(metastore));\n+        queryRunner.createCatalog(\"hive\", \"hive\", ImmutableMap.of(\"hive.security\", \"sql-standard\"));\n+        return queryRunner;\n+    }\n+\n+    @BeforeClass\n+    public void setUp()\n+    {\n+        assertQuerySucceeds(format(\"CREATE SCHEMA %s.%s\", CATALOG, SCHEMA));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODk5NTU1MQ==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r678995551", "bodyText": "done", "author": "sshkvar", "createdAt": "2021-07-29T09:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg4OTk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg5MDQ5NQ==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r678890495", "bodyText": "Would io.trino.plugin.iceberg.IcebergQueryRunner#createIcebergQueryRunner work?", "author": "findepi", "createdAt": "2021-07-29T07:19:32Z", "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/TestIcebergTableWithCustomLocation.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.trino.plugin.iceberg;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import io.trino.Session;\n+import io.trino.plugin.hive.HdfsConfig;\n+import io.trino.plugin.hive.HdfsConfiguration;\n+import io.trino.plugin.hive.HdfsConfigurationInitializer;\n+import io.trino.plugin.hive.HdfsEnvironment;\n+import io.trino.plugin.hive.HiveHdfsConfiguration;\n+import io.trino.plugin.hive.NodeVersion;\n+import io.trino.plugin.hive.TestingHivePlugin;\n+import io.trino.plugin.hive.authentication.NoHdfsAuthentication;\n+import io.trino.plugin.hive.metastore.MetastoreConfig;\n+import io.trino.plugin.hive.metastore.Table;\n+import io.trino.plugin.hive.metastore.file.FileHiveMetastore;\n+import io.trino.plugin.hive.metastore.file.FileHiveMetastoreConfig;\n+import io.trino.spi.security.Identity;\n+import io.trino.spi.security.SelectedRole;\n+import io.trino.testing.AbstractTestQueryFramework;\n+import io.trino.testing.DistributedQueryRunner;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.util.Optional;\n+\n+import static io.trino.spi.security.SelectedRole.Type.ROLE;\n+import static io.trino.testing.TestingSession.testSessionBuilder;\n+import static java.lang.String.format;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertNotEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestIcebergTableWithCustomLocation\n+        extends AbstractTestQueryFramework\n+{\n+    private FileHiveMetastore metastore;\n+\n+    private static final String CATALOG = \"iceberg\";\n+    private static final String SCHEMA = \"iceberg_schema\";\n+    private static final String TABLE = \"iceberg_table\";\n+    private static final String TABLE_RENAMED = \"iceberg_table_renamed\";\n+\n+    @Override\n+    protected DistributedQueryRunner createQueryRunner()\n+            throws Exception\n+    {\n+        Session session = testSessionBuilder()\n+                .setIdentity(Identity.forUser(\"hive\")\n+                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n+                        .build())\n+                .build();\n+        DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(session).build();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODk5NjE5NA==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r678996194", "bodyText": "yes, just added ability to pass custom iceberg catalog properties", "author": "sshkvar", "createdAt": "2021-07-29T09:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODg5MDQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTE3NDA3Ng==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r679174076", "bodyText": "Please update formatting\n\nall parameters on one line OR each parameter on its own line (including the first one)\nfor indentation please refer to https://github.com/airlift/codestyle/", "author": "findepi", "createdAt": "2021-07-29T13:54:58Z", "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/IcebergQueryRunner.java", "diffHunk": "@@ -66,11 +67,21 @@ public static DistributedQueryRunner createIcebergQueryRunner(Map<String, String\n         return createIcebergQueryRunner(extraProperties, format, tables, Optional.empty());\n     }\n \n+    public static DistributedQueryRunner createIcebergQueryRunner(Map<String, String> extraProperties,\n+                                                                  FileFormat format,\n+                                                                  List<TpchTable<?>> tables,\n+                                                                  Optional<File> metastoreDirectory)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTc2MzYxNA==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r679763614", "bodyText": "Thanks for the link to code style.\nFormatting updated", "author": "sshkvar", "createdAt": "2021-07-30T08:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTE3NDA3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTE3NDc0MQ==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r679174741", "bodyText": "We call it connectorProperties in other XxxQueryRunner classes.\nalso, no need for optional, since empty map has the same meaning\n           Map<String, String> connectorProperties)\n\nalso, please add it right after extraProperties (also seems usual)", "author": "findepi", "createdAt": "2021-07-29T13:55:34Z", "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/IcebergQueryRunner.java", "diffHunk": "@@ -66,11 +67,21 @@ public static DistributedQueryRunner createIcebergQueryRunner(Map<String, String\n         return createIcebergQueryRunner(extraProperties, format, tables, Optional.empty());\n     }\n \n+    public static DistributedQueryRunner createIcebergQueryRunner(Map<String, String> extraProperties,\n+                                                                  FileFormat format,\n+                                                                  List<TpchTable<?>> tables,\n+                                                                  Optional<File> metastoreDirectory)\n+            throws Exception\n+    {\n+        return createIcebergQueryRunner(extraProperties, format, tables, metastoreDirectory, Optional.empty());\n+    }\n+\n     public static DistributedQueryRunner createIcebergQueryRunner(\n             Map<String, String> extraProperties,\n             FileFormat format,\n             List<TpchTable<?>> tables,\n-            Optional<File> metastoreDirectory)\n+            Optional<File> metastoreDirectory,\n+            Optional<Map<String, String>> icebergPropertiesOverride)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTc2Mzc0NQ==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r679763745", "bodyText": "done", "author": "sshkvar", "createdAt": "2021-07-30T08:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTE3NDc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTE3NzQyNw==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r679177427", "bodyText": "Why two levels of nesting?\nWould it be fine to have just\nmetastoreDir = Files.createTempDirectory(\"....\");\n\n?", "author": "findepi", "createdAt": "2021-07-29T13:58:40Z", "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/TestIcebergTableWithCustomLocation.java", "diffHunk": "@@ -52,125 +43,91 @@\n         extends AbstractTestQueryFramework\n {\n     private FileHiveMetastore metastore;\n-\n-    private static final String CATALOG = \"iceberg\";\n-    private static final String SCHEMA = \"iceberg_schema\";\n-    private static final String TABLE = \"iceberg_table\";\n-    private static final String TABLE_RENAMED = \"iceberg_table_renamed\";\n+    private File metastoreDir;\n \n     @Override\n     protected DistributedQueryRunner createQueryRunner()\n             throws Exception\n     {\n-        Session session = testSessionBuilder()\n-                .setIdentity(Identity.forUser(\"hive\")\n-                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n-                        .build())\n-                .build();\n-        DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(session).build();\n-\n-        File baseDir = queryRunner.getCoordinator().getBaseDataDir().resolve(\"iceberg_data\").toFile();\n-\n-        HdfsConfig hdfsConfig = new HdfsConfig();\n-        HdfsConfiguration hdfsConfiguration = new HiveHdfsConfiguration(new HdfsConfigurationInitializer(hdfsConfig), ImmutableSet.of());\n-        HdfsEnvironment hdfsEnvironment = new HdfsEnvironment(hdfsConfiguration, hdfsConfig, new NoHdfsAuthentication());\n-\n-        metastore = new FileHiveMetastore(\n-                new NodeVersion(\"test_version\"),\n-                hdfsEnvironment,\n-                new MetastoreConfig(),\n-                new FileHiveMetastoreConfig()\n-                        .setCatalogDirectory(baseDir.toURI().toString())\n-                        .setMetastoreUser(\"test\"));\n-\n-        TestingIcebergPlugin icebergPlugin = new TestingIcebergPlugin(metastore, false);\n-\n-        queryRunner.installPlugin(icebergPlugin);\n-        queryRunner.createCatalog(CATALOG, \"iceberg\", ImmutableMap.of(\"iceberg.unique-table-location\", \"true\"));\n-        queryRunner.installPlugin(new TestingHivePlugin(metastore));\n-        queryRunner.createCatalog(\"hive\", \"hive\", ImmutableMap.of(\"hive.security\", \"sql-standard\"));\n-        return queryRunner;\n-    }\n-\n-    @BeforeClass\n-    public void setUp()\n-    {\n-        assertQuerySucceeds(format(\"CREATE SCHEMA %s.%s\", CATALOG, SCHEMA));\n-    }\n-\n-    @AfterMethod\n-    public void clean()\n-    {\n-        query(format(\"DROP TABLE IF EXISTS %s.%s.%s\", CATALOG, SCHEMA, TABLE));\n-        query(format(\"DROP TABLE IF EXISTS %s.%s.%s\", CATALOG, SCHEMA, TABLE_RENAMED));\n+        File tempDir = Files.createTempDirectory(\"test_iceberg_v2\").toFile();\n+        metastoreDir = new File(tempDir, \"iceberg_data\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTE4MjQ4OA==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r679182488", "bodyText": "however, it seems the test doesn't need to know the metastoreDir, so instead of setting it up (and cleaning it later), it should be sufficient to pass Optional.empty() for the metastoreDir, right?", "author": "findepi", "createdAt": "2021-07-29T14:04:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTE3NzQyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTc2NDgyNw==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r679764827", "bodyText": "we need metastoreDir because it is used in createTestingFileHiveMetastore(metastoreDir),\nbut I removed two levels nesting", "author": "sshkvar", "createdAt": "2021-07-30T08:55:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTE3NzQyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTE3Nzc0Nw==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r679177747", "bodyText": "use default\nnew IcebergConfig().getFileFormat()", "author": "findepi", "createdAt": "2021-07-29T13:59:04Z", "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/TestIcebergTableWithCustomLocation.java", "diffHunk": "@@ -52,125 +43,91 @@\n         extends AbstractTestQueryFramework\n {\n     private FileHiveMetastore metastore;\n-\n-    private static final String CATALOG = \"iceberg\";\n-    private static final String SCHEMA = \"iceberg_schema\";\n-    private static final String TABLE = \"iceberg_table\";\n-    private static final String TABLE_RENAMED = \"iceberg_table_renamed\";\n+    private File metastoreDir;\n \n     @Override\n     protected DistributedQueryRunner createQueryRunner()\n             throws Exception\n     {\n-        Session session = testSessionBuilder()\n-                .setIdentity(Identity.forUser(\"hive\")\n-                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n-                        .build())\n-                .build();\n-        DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(session).build();\n-\n-        File baseDir = queryRunner.getCoordinator().getBaseDataDir().resolve(\"iceberg_data\").toFile();\n-\n-        HdfsConfig hdfsConfig = new HdfsConfig();\n-        HdfsConfiguration hdfsConfiguration = new HiveHdfsConfiguration(new HdfsConfigurationInitializer(hdfsConfig), ImmutableSet.of());\n-        HdfsEnvironment hdfsEnvironment = new HdfsEnvironment(hdfsConfiguration, hdfsConfig, new NoHdfsAuthentication());\n-\n-        metastore = new FileHiveMetastore(\n-                new NodeVersion(\"test_version\"),\n-                hdfsEnvironment,\n-                new MetastoreConfig(),\n-                new FileHiveMetastoreConfig()\n-                        .setCatalogDirectory(baseDir.toURI().toString())\n-                        .setMetastoreUser(\"test\"));\n-\n-        TestingIcebergPlugin icebergPlugin = new TestingIcebergPlugin(metastore, false);\n-\n-        queryRunner.installPlugin(icebergPlugin);\n-        queryRunner.createCatalog(CATALOG, \"iceberg\", ImmutableMap.of(\"iceberg.unique-table-location\", \"true\"));\n-        queryRunner.installPlugin(new TestingHivePlugin(metastore));\n-        queryRunner.createCatalog(\"hive\", \"hive\", ImmutableMap.of(\"hive.security\", \"sql-standard\"));\n-        return queryRunner;\n-    }\n-\n-    @BeforeClass\n-    public void setUp()\n-    {\n-        assertQuerySucceeds(format(\"CREATE SCHEMA %s.%s\", CATALOG, SCHEMA));\n-    }\n-\n-    @AfterMethod\n-    public void clean()\n-    {\n-        query(format(\"DROP TABLE IF EXISTS %s.%s.%s\", CATALOG, SCHEMA, TABLE));\n-        query(format(\"DROP TABLE IF EXISTS %s.%s.%s\", CATALOG, SCHEMA, TABLE_RENAMED));\n+        File tempDir = Files.createTempDirectory(\"test_iceberg_v2\").toFile();\n+        metastoreDir = new File(tempDir, \"iceberg_data\");\n+        metastore = createTestingFileHiveMetastore(metastoreDir);\n+\n+        return createIcebergQueryRunner(\n+                ImmutableMap.of(),\n+                ORC,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTE3ODM3Ng==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r679178376", "bodyText": "as a follow up we should remove format parameter and use the new connectorProperties instead", "author": "findepi", "createdAt": "2021-07-29T13:59:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTE3Nzc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTc2NTIzMg==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r679765232", "bodyText": "replaced with new IcebergConfig().getFileFormat()", "author": "sshkvar", "createdAt": "2021-07-30T08:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTE3Nzc0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTE3OTM3Mw==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r679179373", "bodyText": "Do not use assertTrue with complex expressions. In case of failure, it produces unhelpful message.\nUse\n[org.assertj.core.api.Assertions.] assertThat(location).matches(....);\n\ninstead", "author": "findepi", "createdAt": "2021-07-29T14:00:57Z", "path": "plugin/trino-iceberg/src/test/java/io/trino/plugin/iceberg/TestIcebergTableWithCustomLocation.java", "diffHunk": "@@ -52,125 +43,91 @@\n         extends AbstractTestQueryFramework\n {\n     private FileHiveMetastore metastore;\n-\n-    private static final String CATALOG = \"iceberg\";\n-    private static final String SCHEMA = \"iceberg_schema\";\n-    private static final String TABLE = \"iceberg_table\";\n-    private static final String TABLE_RENAMED = \"iceberg_table_renamed\";\n+    private File metastoreDir;\n \n     @Override\n     protected DistributedQueryRunner createQueryRunner()\n             throws Exception\n     {\n-        Session session = testSessionBuilder()\n-                .setIdentity(Identity.forUser(\"hive\")\n-                        .withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\")))\n-                        .build())\n-                .build();\n-        DistributedQueryRunner queryRunner = DistributedQueryRunner.builder(session).build();\n-\n-        File baseDir = queryRunner.getCoordinator().getBaseDataDir().resolve(\"iceberg_data\").toFile();\n-\n-        HdfsConfig hdfsConfig = new HdfsConfig();\n-        HdfsConfiguration hdfsConfiguration = new HiveHdfsConfiguration(new HdfsConfigurationInitializer(hdfsConfig), ImmutableSet.of());\n-        HdfsEnvironment hdfsEnvironment = new HdfsEnvironment(hdfsConfiguration, hdfsConfig, new NoHdfsAuthentication());\n-\n-        metastore = new FileHiveMetastore(\n-                new NodeVersion(\"test_version\"),\n-                hdfsEnvironment,\n-                new MetastoreConfig(),\n-                new FileHiveMetastoreConfig()\n-                        .setCatalogDirectory(baseDir.toURI().toString())\n-                        .setMetastoreUser(\"test\"));\n-\n-        TestingIcebergPlugin icebergPlugin = new TestingIcebergPlugin(metastore, false);\n-\n-        queryRunner.installPlugin(icebergPlugin);\n-        queryRunner.createCatalog(CATALOG, \"iceberg\", ImmutableMap.of(\"iceberg.unique-table-location\", \"true\"));\n-        queryRunner.installPlugin(new TestingHivePlugin(metastore));\n-        queryRunner.createCatalog(\"hive\", \"hive\", ImmutableMap.of(\"hive.security\", \"sql-standard\"));\n-        return queryRunner;\n-    }\n-\n-    @BeforeClass\n-    public void setUp()\n-    {\n-        assertQuerySucceeds(format(\"CREATE SCHEMA %s.%s\", CATALOG, SCHEMA));\n-    }\n-\n-    @AfterMethod\n-    public void clean()\n-    {\n-        query(format(\"DROP TABLE IF EXISTS %s.%s.%s\", CATALOG, SCHEMA, TABLE));\n-        query(format(\"DROP TABLE IF EXISTS %s.%s.%s\", CATALOG, SCHEMA, TABLE_RENAMED));\n+        File tempDir = Files.createTempDirectory(\"test_iceberg_v2\").toFile();\n+        metastoreDir = new File(tempDir, \"iceberg_data\");\n+        metastore = createTestingFileHiveMetastore(metastoreDir);\n+\n+        return createIcebergQueryRunner(\n+                ImmutableMap.of(),\n+                ORC,\n+                ImmutableList.of(NATION),\n+                Optional.of(metastoreDir),\n+                Optional.of(ImmutableMap.of(\"iceberg.unique-table-location\", \"true\")));\n     }\n \n     @AfterClass(alwaysRun = true)\n-    public void tearDown()\n+    public void tearDown() throws IOException\n     {\n-        query(format(\"DROP SCHEMA %s.%s\", CATALOG, SCHEMA));\n+        deleteRecursively(metastoreDir.getParentFile().toPath(), ALLOW_INSECURE);\n     }\n \n     @Test\n     public void testTableHasUuidSuffixInLocation()\n     {\n-        assertQuerySucceeds(format(\"CREATE TABLE %s.%s.%s as select 1 as val\", CATALOG, SCHEMA, TABLE));\n-        Optional<Table> table = metastore.getTable(null, SCHEMA, TABLE);\n+        assertQuerySucceeds(\"CREATE TABLE table_with_uuid as select 1 as val\");\n+        Optional<Table> table = metastore.getTable(null, \"tpch\", \"table_with_uuid\");\n         assertTrue(table.isPresent(), \"Table should exists\");\n         String location = table.get().getStorage().getLocation();\n-        assertTrue(location.matches(format(\".*%s-[0-9a-f]{32}\", TABLE)), \"Table location should have UUID suffix\");\n+        assertTrue(location.matches(format(\".*%s-[0-9a-f]{32}\", \"table_with_uuid\")), \"Table location should have UUID suffix\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTc2NDk5MQ==", "url": "https://github.com/trinodb/trino/pull/6063#discussion_r679764991", "bodyText": "done", "author": "sshkvar", "createdAt": "2021-07-30T08:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3OTE3OTM3Mw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "0a30f7939798f0263cf2594cfa9f39f238afb456", "url": "https://github.com/trinodb/trino/commit/0a30f7939798f0263cf2594cfa9f39f238afb456", "message": "rebase: Added ability to have unique table location for each iceberg table", "committedDate": "2021-08-03T12:08:57Z", "type": "commit"}, {"oid": "0a30f7939798f0263cf2594cfa9f39f238afb456", "url": "https://github.com/trinodb/trino/commit/0a30f7939798f0263cf2594cfa9f39f238afb456", "message": "rebase: Added ability to have unique table location for each iceberg table", "committedDate": "2021-08-03T12:08:57Z", "type": "forcePushed"}]}