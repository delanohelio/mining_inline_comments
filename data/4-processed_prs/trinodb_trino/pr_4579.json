{"pr_number": 4579, "pr_title": "Add Iceberg smoke tests for partitioning transforms", "pr_createdAt": "2020-07-25T15:29:24Z", "pr_url": "https://github.com/trinodb/trino/pull/4579", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5MTIwOQ==", "url": "https://github.com/trinodb/trino/pull/4579#discussion_r465291209", "bodyText": "I think we could inline this method\ntestWithAllFileFormats(this:: testHourTransformForFormat);\ntestWithAllFileFormats(this:: testDayTransformForFormat);\n...", "author": "electrum", "createdAt": "2020-08-04T19:49:07Z", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -593,6 +593,210 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testDateTransforms()\n+    {\n+        testWithAllFileFormats(this::testDateTransformsForFormat);\n+    }\n+\n+    private void testDateTransformsForFormat(Session session, FileFormat format)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ1OTcyMQ==", "url": "https://github.com/trinodb/trino/pull/4579#discussion_r465459721", "bodyText": "Inlined.", "author": "djsstarburst", "createdAt": "2020-08-05T04:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5MTIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5MTcxMQ==", "url": "https://github.com/trinodb/trino/pull/4579#discussion_r465291711", "bodyText": "Maybe write this as\nString insertSql = \"INSERT INTO ... \" +\n        \"...\";\nassertUpdate(session, insertSql, 7);\nThen we don't have the trailing 7 at the end", "author": "electrum", "createdAt": "2020-08-04T19:50:03Z", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -593,6 +593,210 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testDateTransforms()\n+    {\n+        testWithAllFileFormats(this::testDateTransformsForFormat);\n+    }\n+\n+    private void testDateTransformsForFormat(Session session, FileFormat format)\n+    {\n+        testHourTransformForFormat(session, format);\n+        testDayTransformForFormat(session, format);\n+        testMonthTransformForFormat(session, format);\n+        testYearTransformForFormat(session, format);\n+    }\n+\n+    private void testHourTransformForFormat(Session session, FileFormat format)\n+    {\n+        String select = \"SELECT d_hour, row_count, d.min AS d_min, d.max AS d_max, b.min AS b_min, b.max AS b_max FROM \\\"test_hour_transform$partitions\\\"\";\n+\n+        assertUpdate(session, format(\"CREATE TABLE test_hour_transform (d TIMESTAMP, b BIGINT)\" +\n+                \" WITH (format = '%s', partitioning = ARRAY['hour(d)'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_hour_transform VALUES\" +", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ1OTcwMQ==", "url": "https://github.com/trinodb/trino/pull/4579#discussion_r465459701", "bodyText": "Changed in all 5 places it was done.", "author": "djsstarburst", "createdAt": "2020-08-05T04:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5MTcxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5MjQ2Ng==", "url": "https://github.com/trinodb/trino/pull/4579#discussion_r465292466", "bodyText": "This is a bit hard to read, wrap the lines\nString expected = (format == FileFormat.PARQUET) ?\n        \"VALUES(394460, 3, TIMESTAMP '2015-01-01 10:01:23', TIMESTAMP '2015-01-01 10:55:00', 1, 3)\" : \n        \"VALUES(394460, 3, NULL, NULL, 1, 3)\";", "author": "electrum", "createdAt": "2020-08-04T19:51:32Z", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -593,6 +593,210 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testDateTransforms()\n+    {\n+        testWithAllFileFormats(this::testDateTransformsForFormat);\n+    }\n+\n+    private void testDateTransformsForFormat(Session session, FileFormat format)\n+    {\n+        testHourTransformForFormat(session, format);\n+        testDayTransformForFormat(session, format);\n+        testMonthTransformForFormat(session, format);\n+        testYearTransformForFormat(session, format);\n+    }\n+\n+    private void testHourTransformForFormat(Session session, FileFormat format)\n+    {\n+        String select = \"SELECT d_hour, row_count, d.min AS d_min, d.max AS d_max, b.min AS b_min, b.max AS b_max FROM \\\"test_hour_transform$partitions\\\"\";\n+\n+        assertUpdate(session, format(\"CREATE TABLE test_hour_transform (d TIMESTAMP, b BIGINT)\" +\n+                \" WITH (format = '%s', partitioning = ARRAY['hour(d)'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_hour_transform VALUES\" +\n+                        \"(TIMESTAMP '2015-01-01 10:01:23', 1),\" +\n+                        \"(TIMESTAMP '2015-01-01 10:10:02', 2),\" +\n+                        \"(TIMESTAMP '2015-01-01 10:55:00', 3),\" +\n+                        \"(TIMESTAMP '2015-05-15 12:05:01', 4),\" +\n+                        \"(TIMESTAMP '2015-05-15 12:21:02', 5),\" +\n+                        \"(TIMESTAMP '2015-02-21 13:11:11', 6),\" +\n+                        \"(TIMESTAMP '2015-02-21 13:12:12', 7)\",\n+                7);\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_hour_transform$partitions\\\"\", \"SELECT 3\");\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_hour_transform WHERE hour(d) = 10\", \"SELECT 3\");\n+        // 394460 = (2015 - 1970) * 365 * 24 + leap day hours + 10\n+        // Parquet has min/max for timestamps but Orc does not.\n+        String expected = format == FileFormat.PARQUET ? \"VALUES(394460, 3, TIMESTAMP '2015-01-01 10:01:23', TIMESTAMP '2015-01-01 10:55:00', 1, 3)\" : \"VALUES(394460, 3, NULL, NULL, 1, 3)\";", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ1OTY5NQ==", "url": "https://github.com/trinodb/trino/pull/4579#discussion_r465459695", "bodyText": "Changed in the three places it was done.", "author": "djsstarburst", "createdAt": "2020-08-05T04:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5MjQ2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5Njg5NQ==", "url": "https://github.com/trinodb/trino/pull/4579#discussion_r465296895", "bodyText": "We should test day/month/year transform for timestamp as well. It's fine to do this as a follow up.", "author": "electrum", "createdAt": "2020-08-04T20:00:13Z", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -593,6 +593,210 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testDateTransforms()\n+    {\n+        testWithAllFileFormats(this::testDateTransformsForFormat);\n+    }\n+\n+    private void testDateTransformsForFormat(Session session, FileFormat format)\n+    {\n+        testHourTransformForFormat(session, format);\n+        testDayTransformForFormat(session, format);\n+        testMonthTransformForFormat(session, format);\n+        testYearTransformForFormat(session, format);\n+    }\n+\n+    private void testHourTransformForFormat(Session session, FileFormat format)\n+    {\n+        String select = \"SELECT d_hour, row_count, d.min AS d_min, d.max AS d_max, b.min AS b_min, b.max AS b_max FROM \\\"test_hour_transform$partitions\\\"\";\n+\n+        assertUpdate(session, format(\"CREATE TABLE test_hour_transform (d TIMESTAMP, b BIGINT)\" +\n+                \" WITH (format = '%s', partitioning = ARRAY['hour(d)'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_hour_transform VALUES\" +\n+                        \"(TIMESTAMP '2015-01-01 10:01:23', 1),\" +\n+                        \"(TIMESTAMP '2015-01-01 10:10:02', 2),\" +\n+                        \"(TIMESTAMP '2015-01-01 10:55:00', 3),\" +\n+                        \"(TIMESTAMP '2015-05-15 12:05:01', 4),\" +\n+                        \"(TIMESTAMP '2015-05-15 12:21:02', 5),\" +\n+                        \"(TIMESTAMP '2015-02-21 13:11:11', 6),\" +\n+                        \"(TIMESTAMP '2015-02-21 13:12:12', 7)\",\n+                7);\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_hour_transform$partitions\\\"\", \"SELECT 3\");\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_hour_transform WHERE hour(d) = 10\", \"SELECT 3\");\n+        // 394460 = (2015 - 1970) * 365 * 24 + leap day hours + 10\n+        // Parquet has min/max for timestamps but Orc does not.\n+        String expected = format == FileFormat.PARQUET ? \"VALUES(394460, 3, TIMESTAMP '2015-01-01 10:01:23', TIMESTAMP '2015-01-01 10:55:00', 1, 3)\" : \"VALUES(394460, 3, NULL, NULL, 1, 3)\";\n+        assertQuery(session, select + \" WHERE d_hour = 394460\", expected);\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_hour_transform WHERE hour(d) = 12\", \"SELECT 2\");\n+        expected = format == FileFormat.PARQUET ? \"VALUES(397679, 2, TIMESTAMP '2015-05-15 12:05:01', TIMESTAMP '2015-05-15 12:21:02', 4, 5)\" : \"VALUES(397679, 2, NULL, NULL, 4, 5)\";\n+        assertQuery(session, select + \" WHERE d_hour = 397679\", expected);\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_hour_transform WHERE hour(d) = 13\", \"SELECT 2\");\n+        expected = format == FileFormat.PARQUET ? \"VALUES(395687, 2, TIMESTAMP '2015-02-21 13:11:11', TIMESTAMP '2015-02-21 13:12:12', 6, 7)\" : \"VALUES(395687, 2, NULL, NULL, 6, 7)\";\n+        assertQuery(session, select + \" WHERE d_hour = 395687\", expected);\n+\n+        dropTable(session, \"test_hour_transform\");\n+    }\n+\n+    private void testDayTransformForFormat(Session session, FileFormat format)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ1OTY4MA==", "url": "https://github.com/trinodb/trino/pull/4579#discussion_r465459680", "bodyText": "Will do as a follow-up.", "author": "djsstarburst", "createdAt": "2020-08-05T04:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5Njg5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5NzU4OA==", "url": "https://github.com/trinodb/trino/pull/4579#discussion_r465297588", "bodyText": "Nit: all capital ORC", "author": "electrum", "createdAt": "2020-08-04T20:01:30Z", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -593,6 +593,210 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testDateTransforms()\n+    {\n+        testWithAllFileFormats(this::testDateTransformsForFormat);\n+    }\n+\n+    private void testDateTransformsForFormat(Session session, FileFormat format)\n+    {\n+        testHourTransformForFormat(session, format);\n+        testDayTransformForFormat(session, format);\n+        testMonthTransformForFormat(session, format);\n+        testYearTransformForFormat(session, format);\n+    }\n+\n+    private void testHourTransformForFormat(Session session, FileFormat format)\n+    {\n+        String select = \"SELECT d_hour, row_count, d.min AS d_min, d.max AS d_max, b.min AS b_min, b.max AS b_max FROM \\\"test_hour_transform$partitions\\\"\";\n+\n+        assertUpdate(session, format(\"CREATE TABLE test_hour_transform (d TIMESTAMP, b BIGINT)\" +\n+                \" WITH (format = '%s', partitioning = ARRAY['hour(d)'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_hour_transform VALUES\" +\n+                        \"(TIMESTAMP '2015-01-01 10:01:23', 1),\" +\n+                        \"(TIMESTAMP '2015-01-01 10:10:02', 2),\" +\n+                        \"(TIMESTAMP '2015-01-01 10:55:00', 3),\" +\n+                        \"(TIMESTAMP '2015-05-15 12:05:01', 4),\" +\n+                        \"(TIMESTAMP '2015-05-15 12:21:02', 5),\" +\n+                        \"(TIMESTAMP '2015-02-21 13:11:11', 6),\" +\n+                        \"(TIMESTAMP '2015-02-21 13:12:12', 7)\",\n+                7);\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_hour_transform$partitions\\\"\", \"SELECT 3\");\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_hour_transform WHERE hour(d) = 10\", \"SELECT 3\");\n+        // 394460 = (2015 - 1970) * 365 * 24 + leap day hours + 10\n+        // Parquet has min/max for timestamps but Orc does not.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ1OTY1MA==", "url": "https://github.com/trinodb/trino/pull/4579#discussion_r465459650", "bodyText": "Capitalized.", "author": "djsstarburst", "createdAt": "2020-08-05T04:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5NzU4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5ODM5MQ==", "url": "https://github.com/trinodb/trino/pull/4579#discussion_r465298391", "bodyText": "What time zone are the tests using? Can you check if they're using legacy timestamps? If it's not UTC time zone and legacy timestamps, I'm surprised this works.", "author": "electrum", "createdAt": "2020-08-04T20:03:06Z", "path": "presto-iceberg/src/test/java/io/prestosql/plugin/iceberg/TestIcebergSmoke.java", "diffHunk": "@@ -593,6 +593,210 @@ private void testPredicating(Session session, FileFormat fileFormat)\n         dropTable(session, \"test_predicating_on_real\");\n     }\n \n+    @Test\n+    public void testDateTransforms()\n+    {\n+        testWithAllFileFormats(this::testDateTransformsForFormat);\n+    }\n+\n+    private void testDateTransformsForFormat(Session session, FileFormat format)\n+    {\n+        testHourTransformForFormat(session, format);\n+        testDayTransformForFormat(session, format);\n+        testMonthTransformForFormat(session, format);\n+        testYearTransformForFormat(session, format);\n+    }\n+\n+    private void testHourTransformForFormat(Session session, FileFormat format)\n+    {\n+        String select = \"SELECT d_hour, row_count, d.min AS d_min, d.max AS d_max, b.min AS b_min, b.max AS b_max FROM \\\"test_hour_transform$partitions\\\"\";\n+\n+        assertUpdate(session, format(\"CREATE TABLE test_hour_transform (d TIMESTAMP, b BIGINT)\" +\n+                \" WITH (format = '%s', partitioning = ARRAY['hour(d)'])\", format.name()));\n+        assertUpdate(session, \"INSERT INTO test_hour_transform VALUES\" +\n+                        \"(TIMESTAMP '2015-01-01 10:01:23', 1),\" +\n+                        \"(TIMESTAMP '2015-01-01 10:10:02', 2),\" +\n+                        \"(TIMESTAMP '2015-01-01 10:55:00', 3),\" +\n+                        \"(TIMESTAMP '2015-05-15 12:05:01', 4),\" +\n+                        \"(TIMESTAMP '2015-05-15 12:21:02', 5),\" +\n+                        \"(TIMESTAMP '2015-02-21 13:11:11', 6),\" +\n+                        \"(TIMESTAMP '2015-02-21 13:12:12', 7)\",\n+                7);\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM \\\"test_hour_transform$partitions\\\"\", \"SELECT 3\");\n+\n+        assertQuery(session, \"SELECT COUNT(*) FROM test_hour_transform WHERE hour(d) = 10\", \"SELECT 3\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5OTYzMQ==", "url": "https://github.com/trinodb/trino/pull/4579#discussion_r465299631", "bodyText": "Can you change all of these to use SELECT d so that we confirm the exact timestamps we expect are returned? Same goes for all of the tests that use SELECT count(*)", "author": "electrum", "createdAt": "2020-08-04T20:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5ODM5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ1OTYzOQ==", "url": "https://github.com/trinodb/trino/pull/4579#discussion_r465459639", "bodyText": "The Session.timeZoneKey = \"Pacific/Apia\".  The session's system properties map is empty, i.e., no legacy_timestamp property.\nI changed all the SELECT count(*) uses to explicitly test which rows were returned.", "author": "djsstarburst", "createdAt": "2020-08-05T04:07:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5ODM5MQ=="}], "type": "inlineReview"}, {"oid": "90ab784c09a2843fbc308bb4ab3740b6c67f4738", "url": "https://github.com/trinodb/trino/commit/90ab784c09a2843fbc308bb4ab3740b6c67f4738", "message": "Add Iceberg smoke tests for partitioning transforms\n\nThis commit adds Iceberg smoke test for all partitioning\ntransforms: hour(), day(), month(), year(), bucket() and truncate().\nIt also fixes a bug in PartitionTable.\n\nOrc doesn't yet have min/max statistics for Timestamp columns.\nThey should be added.", "committedDate": "2020-08-05T04:05:48Z", "type": "commit"}, {"oid": "90ab784c09a2843fbc308bb4ab3740b6c67f4738", "url": "https://github.com/trinodb/trino/commit/90ab784c09a2843fbc308bb4ab3740b6c67f4738", "message": "Add Iceberg smoke tests for partitioning transforms\n\nThis commit adds Iceberg smoke test for all partitioning\ntransforms: hour(), day(), month(), year(), bucket() and truncate().\nIt also fixes a bug in PartitionTable.\n\nOrc doesn't yet have min/max statistics for Timestamp columns.\nThey should be added.", "committedDate": "2020-08-05T04:05:48Z", "type": "forcePushed"}]}