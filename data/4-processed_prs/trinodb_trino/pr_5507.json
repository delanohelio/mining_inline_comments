{"pr_number": 5507, "pr_title": "Add support for batching in JDBC driver", "pr_createdAt": "2020-10-10T15:33:45Z", "pr_url": "https://github.com/trinodb/trino/pull/5507", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMDUxNQ==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r502810515", "bodyText": "Here we could make map into a list, and verify right number and right positions of parameters were set", "author": "findepi", "createdAt": "2020-10-10T17:02:32Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +455,29 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchParameters.add(ImmutableMap.copyOf(parameters));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMDYwOQ==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r502810609", "bodyText": "should clearBatch be in finally?", "author": "findepi", "createdAt": "2020-10-10T17:03:52Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +455,29 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchParameters.add(ImmutableMap.copyOf(parameters));\n+    }\n+\n+    @Override\n+    public void clearBatch()\n+            throws SQLException\n+    {\n+        checkOpen();\n+        batchParameters.clear();\n+    }\n+\n+    @Override\n+    public int[] executeBatch()\n+            throws SQLException\n+    {\n+        int[] batchUpdateCounts = new int[batchParameters.size()];\n+        for (int i = 0; i < batchParameters.size(); i++) {\n+            super.execute(getExecuteSql(statementName, batchParameters.get(i)));\n+            batchUpdateCounts[i] = getUpdateCount();\n+        }\n+        clearBatch();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgxMDc2MQ==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r502810761", "bodyText": "Use memory connector and verify the data has been inserted correctly.", "author": "findepi", "createdAt": "2020-10-10T17:05:18Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -263,6 +263,38 @@ public void testExecuteUpdate()\n         }\n     }\n \n+    @Test\n+    public void testExecuteBatch()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"blackhole\", \"blackhole\")) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r503111849", "bodyText": "Should execute*() methods be disallowed once addBatch is called?", "author": "findepi", "createdAt": "2020-10-12T08:08:08Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +454,33 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM0ODQ2Ng==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r504348466", "bodyText": "@findepi Sorry, I couldn't understand well. Do you mean we should allow only executeBatch() and disallow other execute*() once addBatch() is used?", "author": "ebyhr", "createdAt": "2020-10-14T01:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyMTg3MQ==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r505621871", "bodyText": "i think so, but i admit i have not checked any other JDBC drivers for comparison", "author": "findepi", "createdAt": "2020-10-15T15:08:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxMDM1NQ==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r507010355", "bodyText": "@findepi I confirmed some JDBC drivers (MySQL, PostgreSQL, SQLServer & Oracle) and they don't have such limitation.", "author": "ebyhr", "createdAt": "2020-10-18T03:13:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY5OTA2Mg==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r507699062", "bodyText": "thanks for checking!\ncan i\n.setParameter(...)\n.addBatch()\n.setParameter(...)\n.executeUpdate()\n.addBatch()\n.executeBatch()\n\n?\nin such a case, what parameters will be added in the second addBatch() call? (eg does .executeUpdate() clear current params?)", "author": "findepi", "createdAt": "2020-10-19T12:17:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcyNDk2NQ==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r507724965", "bodyText": "@findepi It seems the behavior is different between Oracle and other JDBC drivers .\n\nOracle throws error occurred during batching: batch must be either executed or cleared at executeUpdate\nMySQL, PostgreSQL & SQLServer doesn't clear at executeUpdate. 3 rows are added in this case.", "author": "ebyhr", "createdAt": "2020-10-19T12:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyMTQ0MA==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r507821440", "bodyText": "I like the \"more strict\" approach -- if we can opt out from supporting some niche or purely hypothetical use-case, we should.", "author": "findepi", "createdAt": "2020-10-19T14:56:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMzE3Nw==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r511933177", "bodyText": "@findepi Added a logic to let execute* fail. Should we clear the status when called clearBatch?", "author": "ebyhr", "createdAt": "2020-10-26T12:48:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA2NTYxMw==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r512065613", "bodyText": "Makes sense to me. clearBatch looks like reverting the pristine state, right?", "author": "findepi", "createdAt": "2020-10-26T15:47:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU1ODM1Mg==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r515558352", "bodyText": "@findepi Right. Added isBatch = false in clearBatch().", "author": "ebyhr", "createdAt": "2020-11-01T00:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMzkwNw==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r503113907", "bodyText": "You can express this more concisely  as in\nhttps://github.com/prestosql/presto/blob/7771f046f19b868e1cde7e04876dd45d8b0647dd/presto-jdbc/src/test/java/io/prestosql/jdbc/TestPrestoDatabaseMetaData.java#L404\n(and then you can remove ORDER BY)", "author": "findepi", "createdAt": "2020-10-12T08:11:44Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -263,6 +266,47 @@ public void testExecuteUpdate()\n         }\n     }\n \n+    @Test\n+    public void testExecuteBatch()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"memory\", \"default\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_execute_batch (c_int integer)\");\n+            }\n+\n+            try (PreparedStatement preparedStatement = connection.prepareStatement(\n+                    \"INSERT INTO test_execute_batch VALUES (?)\")) {\n+                for (int i = 0; i < 3; i++) {\n+                    preparedStatement.setInt(1, i);\n+                    preparedStatement.addBatch();\n+                }\n+                assertEquals(preparedStatement.executeBatch(), new int[]{1, 1, 1});\n+\n+                try (Statement statement = connection.createStatement()) {\n+                    ResultSet resultSet = statement.executeQuery(\"SELECT c_int FROM test_execute_batch ORDER BY 1\");\n+                    for (int i = 0; i < 3; i++) {\n+                        assertTrue(resultSet.next());\n+                        assertEquals(i, resultSet.getInt(1));\n+                    }\n+                    assertFalse(resultSet.next());\n+                }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExNDI4OA==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r503114288", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            statement.execute(\"CREATE TABLE test_execute_batch (c_int integer)\");\n          \n          \n            \n                            statement.execute(\"CREATE TABLE test_execute_batch(c_int integer)\");", "author": "findepi", "createdAt": "2020-10-12T08:12:18Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcPreparedStatement.java", "diffHunk": "@@ -263,6 +266,47 @@ public void testExecuteUpdate()\n         }\n     }\n \n+    @Test\n+    public void testExecuteBatch()\n+            throws Exception\n+    {\n+        try (Connection connection = createConnection(\"memory\", \"default\")) {\n+            try (Statement statement = connection.createStatement()) {\n+                statement.execute(\"CREATE TABLE test_execute_batch (c_int integer)\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg2ODk3NQ==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r517868975", "bodyText": "final\nTest -> Testing", "author": "findepi", "createdAt": "2020-11-05T08:28:14Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/TestJdbcUtils.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.jdbc;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Objects.requireNonNull;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class TestJdbcUtils", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg3MDIzMg==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r517870232", "bodyText": "Add a test when executeBatch is called without calling addBatch first", "author": "findepi", "createdAt": "2020-11-05T08:30:09Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +454,33 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));\n+    }\n+\n+    @Override\n+    public void clearBatch()\n+            throws SQLException\n+    {\n+        checkOpen();\n+        batchValues.clear();\n+    }\n+\n+    @Override\n+    public int[] executeBatch()\n+            throws SQLException\n+    {\n+        try {\n+            int[] batchUpdateCounts = new int[batchValues.size()];", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ1OTA4NQ==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r519459085", "bodyText": "is it possible execute SQLs in batch as well instead of one by one ?\nex: in case of INSERT, one by one insertion cause small files (hive connector)", "author": "51yu", "createdAt": "2020-11-08T18:15:41Z", "path": "presto-jdbc/src/main/java/io/prestosql/jdbc/PrestoPreparedStatement.java", "diffHunk": "@@ -453,7 +459,35 @@ else if (x instanceof Timestamp) {\n     public void addBatch()\n             throws SQLException\n     {\n-        throw new NotImplementedException(\"PreparedStatement\", \"addBatch\");\n+        checkOpen();\n+        batchValues.add(toValues(parameters));\n+        isBatch = true;\n+    }\n+\n+    @Override\n+    public void clearBatch()\n+            throws SQLException\n+    {\n+        checkOpen();\n+        batchValues.clear();\n+        isBatch = false;\n+    }\n+\n+    @Override\n+    public int[] executeBatch()\n+            throws SQLException\n+    {\n+        try {\n+            int[] batchUpdateCounts = new int[batchValues.size()];\n+            for (int i = 0; i < batchValues.size(); i++) {\n+                super.execute(getExecuteSql(statementName, batchValues.get(i)));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3OTYwMA==", "url": "https://github.com/trinodb/trino/pull/5507#discussion_r519479600", "bodyText": "That would be nice to have, but i'd rather see this as a follow up to this change.", "author": "findepi", "createdAt": "2020-11-08T21:31:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ1OTA4NQ=="}], "type": "inlineReview"}, {"oid": "26f688fc2890ade741e4d3ad395515cd6f478ae7", "url": "https://github.com/trinodb/trino/commit/26f688fc2890ade741e4d3ad395515cd6f478ae7", "message": "Extract utility methods in JDBC module", "committedDate": "2020-11-11T01:16:54Z", "type": "commit"}, {"oid": "13658e2a77a84639500233b03e36a290be7c0508", "url": "https://github.com/trinodb/trino/commit/13658e2a77a84639500233b03e36a290be7c0508", "message": "Add support for batching in JDBC driver", "committedDate": "2020-11-11T01:16:54Z", "type": "commit"}, {"oid": "13658e2a77a84639500233b03e36a290be7c0508", "url": "https://github.com/trinodb/trino/commit/13658e2a77a84639500233b03e36a290be7c0508", "message": "Add support for batching in JDBC driver", "committedDate": "2020-11-11T01:16:54Z", "type": "forcePushed"}]}