{"pr_number": 3718, "pr_title": "Fix SHOW CREATE TABLE for Elastic Search", "pr_createdAt": "2020-05-13T13:09:37Z", "pr_url": "https://github.com/trinodb/trino/pull/3718", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4Mjc3OQ==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r424782779", "bodyText": "Move to the bottom of this file", "author": "martint", "createdAt": "2020-05-13T23:12:53Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -114,41 +111,90 @@ public ElasticsearchTableHandle getTableHandle(ConnectorSession session, SchemaT\n     @Override\n     public ConnectorTableMetadata getTableMetadata(ConnectorSession session, ConnectorTableHandle table)\n     {\n-        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n-        return getTableMetadata(handle.getSchema(), handle.getIndex());\n+        return getInternalTableMetadata(table).getConnectorTableMetadata();\n     }\n \n-    private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n+    private InternalTableMetadata getInternalTableMetadata(ConnectorTableHandle table)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return getInternalTableMetadata(handle.getSchema(), handle.getIndex());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata getInternalTableMetadata(String schemaName, String index)\n+    {\n+        return new InternalTableMetadata(\n+                new SchemaTableName(schemaName, index),\n+                client.getIndexMetadata(index));\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private class InternalTableMetadata", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4NjI3OA==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r424786278", "bodyText": "There's no good reason for this class to be non-static and for the logic in getColumnMetadata/getColumnHandles to be on-demand.\nMake the class a pure structure (and make it static), and initialize it with the handles and metadata. So, something like:\nprivate InternalTableMetadata makeInternalTableMetadata(SchemaTableName table, IndexMetadata metadata)\n{\n    // build List<ColumnMetadata> from IndexMetadata\n    List<ColumnMetadata> columnMetadata = ...;\n    // build Map<String, ColumnHandle> from IndexMetadata\n    Map<String, ColumnHandle> columnHandles = ...;\n\n    return new InternalTableMetadata(table, columnMetadata, columnHandles)\n}", "author": "martint", "createdAt": "2020-05-13T23:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4Mjc3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMzUxMg==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425023512", "bodyText": "Done. I added SchemaTableName to InternalTableMetatadata as you suggest but it is not used in the codebase. It is natural to be there though, and may come handy for object introspection.", "author": "losipiuk", "createdAt": "2020-05-14T10:09:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4Mjc3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4Njc4Ng==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r424786786", "bodyText": "This commit needs to come after (or be squashed with) the one that fixes the bug", "author": "martint", "createdAt": "2020-05-13T23:25:44Z", "path": "presto-elasticsearch/src/test/java/io/prestosql/elasticsearch/BaseElasticsearchSmokeTest.java", "diffHunk": "@@ -27,7 +27,6 @@\n import org.elasticsearch.client.RestClient;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2MDgwOA==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425060808", "bodyText": "Order is fine now (it was not before). Github UI ordering is broken, though.", "author": "losipiuk", "createdAt": "2020-05-14T11:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4Njc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2MTU5OQ==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425061599", "bodyText": "https://gist.github.com/findepi/7abf17c8a26d3b74e8bb9527caadfdbe", "author": "findepi", "createdAt": "2020-05-14T11:20:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4Njc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2NTkyOA==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425065928", "bodyText": "Yeah - I know. I did not want to kill automation.", "author": "losipiuk", "createdAt": "2020-05-14T11:29:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4Njc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4NjkzNg==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r424786936", "bodyText": "Add an explanation to the commit message describing why and what bug it fixes", "author": "martint", "createdAt": "2020-05-13T23:26:14Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/BuiltinColumns.java", "diffHunk": "@@ -13,15 +13,14 @@\n  */", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwMTgxOQ==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425401819", "bodyText": "Typos in the commit message: \"Elastic Seach\" and \"Elatics Search\"", "author": "martint", "createdAt": "2020-05-14T20:11:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4NjkzNg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2MTQxMQ==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425261411", "bodyText": "Since this fixes code that was introduced in the previous commit, squash it with that commit.", "author": "martint", "createdAt": "2020-05-14T16:15:51Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -158,9 +158,9 @@ private InternalTableMetadata makeInternalTableMetadata(String schema, String ta\n     {\n         ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n \n-        result.add(BuiltinColumns.ID.getMetadata());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2MjgxOQ==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425262819", "bodyText": "This can be renamed to metadata for brevity.", "author": "martint", "createdAt": "2020-05-14T16:17:40Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -120,32 +117,73 @@ public ConnectorTableMetadata getTableMetadata(ConnectorSession session, Connect\n \n     private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        InternalTableMetadata internalTableMetadata = makeInternalTableMetadata(schemaName, tableName);\n+        return new ConnectorTableMetadata(new SchemaTableName(schemaName, tableName), internalTableMetadata.getColumnMetadata());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata makeInternalTableMetadata(ConnectorTableHandle table)\n+    {\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return makeInternalTableMetadata(handle.getSchema(), handle.getIndex());\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private InternalTableMetadata makeInternalTableMetadata(String schema, String tableName)\n     {\n-        ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n+        IndexMetadata indexMetadata = client.getIndexMetadata(tableName);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2MzAyMA==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425263020", "bodyText": "This can be renamed to fields for brevity.", "author": "martint", "createdAt": "2020-05-14T16:17:58Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -120,32 +117,73 @@ public ConnectorTableMetadata getTableMetadata(ConnectorSession session, Connect\n \n     private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        InternalTableMetadata internalTableMetadata = makeInternalTableMetadata(schemaName, tableName);\n+        return new ConnectorTableMetadata(new SchemaTableName(schemaName, tableName), internalTableMetadata.getColumnMetadata());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata makeInternalTableMetadata(ConnectorTableHandle table)\n+    {\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return makeInternalTableMetadata(handle.getSchema(), handle.getIndex());\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private InternalTableMetadata makeInternalTableMetadata(String schema, String tableName)\n     {\n-        ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n+        IndexMetadata indexMetadata = client.getIndexMetadata(tableName);\n+        List<IndexMetadata.Field> indexColumnFields = getColumnFields(indexMetadata);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2NTY5Nw==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425265697", "bodyText": "Inline these variables:\nreturn new InternalTableMetadata(new SchemaTableName(schema, tableName), makeColumnMetadata(fields), makeColumnHandles(fields));", "author": "martint", "createdAt": "2020-05-14T16:22:03Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -120,32 +117,73 @@ public ConnectorTableMetadata getTableMetadata(ConnectorSession session, Connect\n \n     private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        InternalTableMetadata internalTableMetadata = makeInternalTableMetadata(schemaName, tableName);\n+        return new ConnectorTableMetadata(new SchemaTableName(schemaName, tableName), internalTableMetadata.getColumnMetadata());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata makeInternalTableMetadata(ConnectorTableHandle table)\n+    {\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return makeInternalTableMetadata(handle.getSchema(), handle.getIndex());\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private InternalTableMetadata makeInternalTableMetadata(String schema, String tableName)\n     {\n-        ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n+        IndexMetadata indexMetadata = client.getIndexMetadata(tableName);\n+        List<IndexMetadata.Field> indexColumnFields = getColumnFields(indexMetadata);\n+        List<ColumnMetadata> columnMetadata = makeColumnMetadata(indexColumnFields);\n+        Map<String, ColumnHandle> columnHandles = makeColumnHandles(indexColumnFields);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2Njg4MA==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425266880", "bodyText": "This can be renamed to metadata for brevity (and undo the rename below)", "author": "martint", "createdAt": "2020-05-14T16:23:19Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -120,32 +117,73 @@ public ConnectorTableMetadata getTableMetadata(ConnectorSession session, Connect\n \n     private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        InternalTableMetadata internalTableMetadata = makeInternalTableMetadata(schemaName, tableName);\n+        return new ConnectorTableMetadata(new SchemaTableName(schemaName, tableName), internalTableMetadata.getColumnMetadata());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata makeInternalTableMetadata(ConnectorTableHandle table)\n+    {\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return makeInternalTableMetadata(handle.getSchema(), handle.getIndex());\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private InternalTableMetadata makeInternalTableMetadata(String schema, String tableName)\n     {\n-        ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n+        IndexMetadata indexMetadata = client.getIndexMetadata(tableName);\n+        List<IndexMetadata.Field> indexColumnFields = getColumnFields(indexMetadata);\n+        List<ColumnMetadata> columnMetadata = makeColumnMetadata(indexColumnFields);\n+        Map<String, ColumnHandle> columnHandles = makeColumnHandles(indexColumnFields);\n \n-        result.add(BuiltinColumns.ID.getMetadata());\n-        result.add(BuiltinColumns.SOURCE.getMetadata());\n-        result.add(BuiltinColumns.SCORE.getMetadata());\n+        return new InternalTableMetadata(new SchemaTableName(schema, tableName), columnMetadata, columnHandles);\n+    }\n \n-        Map<String, Long> counts = metadata.getSchema()\n+    private List<IndexMetadata.Field> getColumnFields(IndexMetadata indexMetadata)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2NzQ0NQ==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425267445", "bodyText": "Rename to fields for brevity", "author": "martint", "createdAt": "2020-05-14T16:23:50Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -120,32 +117,73 @@ public ConnectorTableMetadata getTableMetadata(ConnectorSession session, Connect\n \n     private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        InternalTableMetadata internalTableMetadata = makeInternalTableMetadata(schemaName, tableName);\n+        return new ConnectorTableMetadata(new SchemaTableName(schemaName, tableName), internalTableMetadata.getColumnMetadata());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata makeInternalTableMetadata(ConnectorTableHandle table)\n+    {\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return makeInternalTableMetadata(handle.getSchema(), handle.getIndex());\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private InternalTableMetadata makeInternalTableMetadata(String schema, String tableName)\n     {\n-        ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n+        IndexMetadata indexMetadata = client.getIndexMetadata(tableName);\n+        List<IndexMetadata.Field> indexColumnFields = getColumnFields(indexMetadata);\n+        List<ColumnMetadata> columnMetadata = makeColumnMetadata(indexColumnFields);\n+        Map<String, ColumnHandle> columnHandles = makeColumnHandles(indexColumnFields);\n \n-        result.add(BuiltinColumns.ID.getMetadata());\n-        result.add(BuiltinColumns.SOURCE.getMetadata());\n-        result.add(BuiltinColumns.SCORE.getMetadata());\n+        return new InternalTableMetadata(new SchemaTableName(schema, tableName), columnMetadata, columnHandles);\n+    }\n \n-        Map<String, Long> counts = metadata.getSchema()\n+    private List<IndexMetadata.Field> getColumnFields(IndexMetadata indexMetadata)\n+    {\n+        ImmutableList.Builder<IndexMetadata.Field> result = ImmutableList.builder();\n+        Map<String, Long> counts = indexMetadata.getSchema()\n                 .getFields().stream()\n                 .collect(Collectors.groupingBy(f -> f.getName().toLowerCase(ENGLISH), Collectors.counting()));\n \n-        for (IndexMetadata.Field field : metadata.getSchema().getFields()) {\n+        for (IndexMetadata.Field field : indexMetadata.getSchema().getFields()) {\n             Type type = toPrestoType(field);\n             if (type == null || counts.get(field.getName().toLowerCase(ENGLISH)) > 1) {\n                 continue;\n             }\n+            result.add(field);\n+        }\n+        return result.build();\n+    }\n+\n+    private List<ColumnMetadata> makeColumnMetadata(List<IndexMetadata.Field> columnFields)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2Nzc2Mw==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425267763", "bodyText": "Rename to fields for brevity", "author": "martint", "createdAt": "2020-05-14T16:24:08Z", "path": "presto-elasticsearch/src/main/java/io/prestosql/elasticsearch/ElasticsearchMetadata.java", "diffHunk": "@@ -120,32 +117,73 @@ public ConnectorTableMetadata getTableMetadata(ConnectorSession session, Connect\n \n     private ConnectorTableMetadata getTableMetadata(String schemaName, String tableName)\n     {\n-        IndexMetadata metadata = client.getIndexMetadata(tableName);\n+        InternalTableMetadata internalTableMetadata = makeInternalTableMetadata(schemaName, tableName);\n+        return new ConnectorTableMetadata(new SchemaTableName(schemaName, tableName), internalTableMetadata.getColumnMetadata());\n+    }\n \n-        return new ConnectorTableMetadata(\n-                new SchemaTableName(schemaName, tableName),\n-                toColumnMetadata(metadata));\n+    private InternalTableMetadata makeInternalTableMetadata(ConnectorTableHandle table)\n+    {\n+        ElasticsearchTableHandle handle = (ElasticsearchTableHandle) table;\n+        return makeInternalTableMetadata(handle.getSchema(), handle.getIndex());\n     }\n \n-    private List<ColumnMetadata> toColumnMetadata(IndexMetadata metadata)\n+    private InternalTableMetadata makeInternalTableMetadata(String schema, String tableName)\n     {\n-        ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n+        IndexMetadata indexMetadata = client.getIndexMetadata(tableName);\n+        List<IndexMetadata.Field> indexColumnFields = getColumnFields(indexMetadata);\n+        List<ColumnMetadata> columnMetadata = makeColumnMetadata(indexColumnFields);\n+        Map<String, ColumnHandle> columnHandles = makeColumnHandles(indexColumnFields);\n \n-        result.add(BuiltinColumns.ID.getMetadata());\n-        result.add(BuiltinColumns.SOURCE.getMetadata());\n-        result.add(BuiltinColumns.SCORE.getMetadata());\n+        return new InternalTableMetadata(new SchemaTableName(schema, tableName), columnMetadata, columnHandles);\n+    }\n \n-        Map<String, Long> counts = metadata.getSchema()\n+    private List<IndexMetadata.Field> getColumnFields(IndexMetadata indexMetadata)\n+    {\n+        ImmutableList.Builder<IndexMetadata.Field> result = ImmutableList.builder();\n+        Map<String, Long> counts = indexMetadata.getSchema()\n                 .getFields().stream()\n                 .collect(Collectors.groupingBy(f -> f.getName().toLowerCase(ENGLISH), Collectors.counting()));\n \n-        for (IndexMetadata.Field field : metadata.getSchema().getFields()) {\n+        for (IndexMetadata.Field field : indexMetadata.getSchema().getFields()) {\n             Type type = toPrestoType(field);\n             if (type == null || counts.get(field.getName().toLowerCase(ENGLISH)) > 1) {\n                 continue;\n             }\n+            result.add(field);\n+        }\n+        return result.build();\n+    }\n+\n+    private List<ColumnMetadata> makeColumnMetadata(List<IndexMetadata.Field> columnFields)\n+    {\n+        ImmutableList.Builder<ColumnMetadata> result = ImmutableList.builder();\n+\n+        result.add(BuiltinColumns.ID.getMetadata());\n+        result.add(BuiltinColumns.SOURCE.getMetadata());\n+        result.add(BuiltinColumns.SCORE.getMetadata());\n \n-            result.add(makeColumnMetadata(field.getName(), type, supportsPredicates(field.getType())));\n+        for (IndexMetadata.Field field : columnFields) {\n+            result.add(ColumnMetadata.builder()\n+                    .setName(field.getName())\n+                    .setType(toPrestoType(field))\n+                    .build());\n+        }\n+        return result.build();\n+    }\n+\n+    public Map<String, ColumnHandle> makeColumnHandles(List<IndexMetadata.Field> columnFields)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYyMzE0Nw==", "url": "https://github.com/trinodb/trino/pull/3718#discussion_r425623147", "bodyText": "Also made this one private.", "author": "losipiuk", "createdAt": "2020-05-15T07:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2Nzc2Mw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "7777f28bbe134f80c59d2bfa91b5aadbbe951cee", "url": "https://github.com/trinodb/trino/commit/7777f28bbe134f80c59d2bfa91b5aadbbe951cee", "message": "Remove fake properties from Elastic Search column metadata\n\nElastic Search connector exploited column properties map in\nColumnMetadata to store extra information needed for execution. Namely:\n - original colum name (not lower cased)\n - if column can be used for pushdown\n\nThose were not registered in ColumnPropertyManager. That resulted in\nfailures when SHOW CREATE TABLE was executed for Elastic Search table.\n\nWe fix the issue by not storing extra properties in ColumnMetadata at\nall. Instead we build Elatics Search ColumnHandle directly from Index\nMetadata.", "committedDate": "2020-05-15T15:24:11Z", "type": "commit"}, {"oid": "6d1874dc8552a5aee2bba287a95fedf9fa30681b", "url": "https://github.com/trinodb/trino/commit/6d1874dc8552a5aee2bba287a95fedf9fa30681b", "message": "Enable testShowCreateTable for Elastic Search", "committedDate": "2020-05-15T15:24:11Z", "type": "commit"}, {"oid": "6d1874dc8552a5aee2bba287a95fedf9fa30681b", "url": "https://github.com/trinodb/trino/commit/6d1874dc8552a5aee2bba287a95fedf9fa30681b", "message": "Enable testShowCreateTable for Elastic Search", "committedDate": "2020-05-15T15:24:11Z", "type": "forcePushed"}]}