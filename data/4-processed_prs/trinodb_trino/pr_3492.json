{"pr_number": 3492, "pr_title": "Function documentation cleanup", "pr_createdAt": "2020-04-20T18:27:06Z", "pr_url": "https://github.com/trinodb/trino/pull/3492", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5Njk1Ng==", "url": "https://github.com/trinodb/trino/pull/3492#discussion_r423196956", "bodyText": "Should we mention the extra characters or link to an RFC?", "author": "dain", "createdAt": "2020-05-11T17:20:54Z", "path": "presto-docs/src/main/sphinx/functions/binary.rst", "diffHunk": "@@ -37,77 +53,76 @@ Binary Functions\n     negative starting position is interpreted as being relative to the end of\n     the string.\n \n-.. function:: to_base64(binary) -> varchar\n-\n-    Encodes ``binary`` into a base64 string representation.\n+Base64 Encoding Functions\n+-------------------------\n \n .. function:: from_base64(string) -> varbinary\n \n     Decodes binary data from the base64 encoded ``string``.\n \n-.. function:: to_base64url(binary) -> varchar\n+.. function:: to_base64(binary) -> varchar\n \n-    Encodes ``binary`` into a base64 string representation using the URL safe alphabet.\n+    Encodes ``binary`` into a base64 string representation.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5Nzc3OA==", "url": "https://github.com/trinodb/trino/pull/3492#discussion_r423197778", "bodyText": "These (int, long, float, double) should mention what happens when binary is greater or less than 4 or 8 bytes", "author": "dain", "createdAt": "2020-05-11T17:22:22Z", "path": "presto-docs/src/main/sphinx/functions/binary.rst", "diffHunk": "@@ -37,77 +53,76 @@ Binary Functions\n     negative starting position is interpreted as being relative to the end of\n     the string.\n \n-.. function:: to_base64(binary) -> varchar\n-\n-    Encodes ``binary`` into a base64 string representation.\n+Base64 Encoding Functions\n+-------------------------\n \n .. function:: from_base64(string) -> varbinary\n \n     Decodes binary data from the base64 encoded ``string``.\n \n-.. function:: to_base64url(binary) -> varchar\n+.. function:: to_base64(binary) -> varchar\n \n-    Encodes ``binary`` into a base64 string representation using the URL safe alphabet.\n+    Encodes ``binary`` into a base64 string representation.\n \n .. function:: from_base64url(string) -> varbinary\n \n     Decodes binary data from the base64 encoded ``string`` using the URL safe alphabet.\n \n-.. function:: to_hex(binary) -> varchar\n+.. function:: to_base64url(binary) -> varchar\n \n-    Encodes ``binary`` into a hex string representation.\n+    Encodes ``binary`` into a base64 string representation using the URL safe alphabet.\n+\n+Hex Encoding Functions\n+----------------------\n \n .. function:: from_hex(string) -> varbinary\n \n     Decodes binary data from the hex encoded ``string``.\n \n-.. function:: to_big_endian_64(bigint) -> varbinary\n+.. function:: to_hex(binary) -> varchar\n \n-    Encodes ``bigint`` in a 64-bit 2's complement big endian format.\n+    Encodes ``binary`` into a hex string representation.\n \n-.. function:: from_big_endian_64(binary) -> bigint\n+Integer Encoding Functions\n+--------------------------\n \n-    Decodes ``bigint`` value from a 64-bit 2's complement big endian ``binary``.\n+.. function:: from_big_endian_32(binary) -> integer\n+\n+    Decodes the 32-bit two's complement big-endian ``binary``.\n \n .. function:: to_big_endian_32(integer) -> varbinary\n \n-    Encodes ``integer`` in a 32-bit 2's complement big endian format.\n+    Encodes ``integer`` into a 32-bit two's complement big-endian format.\n \n-.. function:: from_big_endian_32(binary) -> integer\n+.. function:: from_big_endian_64(binary) -> bigint\n \n-    Decodes ``integer`` value from a 32-bit 2's complement big endian ``binary``.\n+    Decodes the 64-bit two's complement big-endian ``binary``.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5OTEyNw==", "url": "https://github.com/trinodb/trino/pull/3492#discussion_r423199127", "bodyText": "I believe it should be xxHash64", "author": "dain", "createdAt": "2020-05-11T17:24:36Z", "path": "presto-docs/src/main/sphinx/functions/binary.rst", "diffHunk": "@@ -142,18 +153,25 @@ Binary Functions\n \n     Computes the 64-bit SpookyHashV2 hash of ``binary``.\n \n+.. function:: xxhash64(binary) -> varbinary\n+\n+    Computes the xxhash64 hash of ``binary``.", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE4MzIyNQ==", "url": "https://github.com/trinodb/trino/pull/3492#discussion_r426183225", "bodyText": "There doesn't seem to be consensus, even from the author, but I agree that the capitalized version looks nicer.", "author": "electrum", "createdAt": "2020-05-16T19:25:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5OTEyNw=="}], "type": "inlineReview"}, {"oid": "6b846bed4597154e9cb139516a75bb993ed96e17", "url": "https://github.com/trinodb/trino/commit/6b846bed4597154e9cb139516a75bb993ed96e17", "message": "Cleanup documentation for binary functions", "committedDate": "2020-05-16T19:31:13Z", "type": "commit"}, {"oid": "74eb4844c42b7bfbf15de9d3eac96cde286bba69", "url": "https://github.com/trinodb/trino/commit/74eb4844c42b7bfbf15de9d3eac96cde286bba69", "message": "Reorganize math function documentation", "committedDate": "2020-05-16T19:31:13Z", "type": "commit"}, {"oid": "ac6ac5afa7b49db3d80c261011fa1ec27f93ebfd", "url": "https://github.com/trinodb/trino/commit/ac6ac5afa7b49db3d80c261011fa1ec27f93ebfd", "message": "Use same font for function parentheses", "committedDate": "2020-05-16T19:31:13Z", "type": "commit"}, {"oid": "ac6ac5afa7b49db3d80c261011fa1ec27f93ebfd", "url": "https://github.com/trinodb/trino/commit/ac6ac5afa7b49db3d80c261011fa1ec27f93ebfd", "message": "Use same font for function parentheses", "committedDate": "2020-05-16T19:31:13Z", "type": "forcePushed"}]}