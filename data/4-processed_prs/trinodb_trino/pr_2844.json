{"pr_number": 2844, "pr_title": "Use LogicalTypeAnnotation in some places", "pr_createdAt": "2020-02-15T22:35:22Z", "pr_url": "https://github.com/trinodb/trino/pull/2844", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTIyNw==", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379865227", "bodyText": "I think this can be\nreturn type.getLogicalTypeAnnotation().getType() == STRING;", "author": "electrum", "createdAt": "2020-02-16T00:22:38Z", "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "diffHunk": "@@ -220,6 +223,24 @@ private static void readTypeSchema(Types.GroupBuilder<?> builder, Iterator<Schem\n         return columnStatistics;\n     }\n \n+    private static boolean isStringType(PrimitiveType type)\n+    {\n+        if (type.getLogicalTypeAnnotation() == null) {\n+            return false;\n+        }\n+\n+        return type.getLogicalTypeAnnotation()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwNzg5OQ==", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379907899", "bodyText": "getType() is package private.", "author": "findepi", "createdAt": "2020-02-16T14:37:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTIyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTUyMQ==", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379865521", "bodyText": "Use the getters", "author": "electrum", "createdAt": "2020-02-16T00:25:54Z", "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "diffHunk": "@@ -314,55 +313,58 @@ private static PrimitiveTypeName getTypeName(Type type)\n         }\n     }\n \n-    private static OriginalType getOriginalType(ConvertedType type)\n+    // Copied from org.apache.parquet.format.converter.ParquetMetadataConverter#getLogicalTypeAnnotation(org.apache.parquet.format.ConvertedType, org.apache.parquet.format.SchemaElement)\n+    private static LogicalTypeAnnotation getLogicalTypeAnnotation(ConvertedType type, SchemaElement schemaElement)\n     {\n         switch (type) {\n             case UTF8:\n-                return OriginalType.UTF8;\n+                return LogicalTypeAnnotation.stringType();\n             case MAP:\n-                return OriginalType.MAP;\n+                return LogicalTypeAnnotation.mapType();\n             case MAP_KEY_VALUE:\n-                return OriginalType.MAP_KEY_VALUE;\n+                return LogicalTypeAnnotation.MapKeyValueTypeAnnotation.getInstance();\n             case LIST:\n-                return OriginalType.LIST;\n+                return LogicalTypeAnnotation.listType();\n             case ENUM:\n-                return OriginalType.ENUM;\n+                return LogicalTypeAnnotation.enumType();\n             case DECIMAL:\n-                return OriginalType.DECIMAL;\n+                int scale = (schemaElement == null ? 0 : schemaElement.scale);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwNzk3Mw==", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379907973", "bodyText": "This is verbatim copy of org.apache.parquet.format.converter.ParquetMetadataConverter#getLogicalTypeAnnotation, I'd prefer to keep it this way.", "author": "findepi", "createdAt": "2020-02-16T14:38:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTY2Nw==", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379865667", "bodyText": "The original error message seems good. IAE is correct since this is a bad argument.", "author": "electrum", "createdAt": "2020-02-16T00:28:58Z", "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "diffHunk": "@@ -314,55 +313,58 @@ private static PrimitiveTypeName getTypeName(Type type)\n         }\n     }\n \n-    private static OriginalType getOriginalType(ConvertedType type)\n+    // Copied from org.apache.parquet.format.converter.ParquetMetadataConverter#getLogicalTypeAnnotation(org.apache.parquet.format.ConvertedType, org.apache.parquet.format.SchemaElement)\n+    private static LogicalTypeAnnotation getLogicalTypeAnnotation(ConvertedType type, SchemaElement schemaElement)\n     {\n         switch (type) {\n             case UTF8:\n-                return OriginalType.UTF8;\n+                return LogicalTypeAnnotation.stringType();\n             case MAP:\n-                return OriginalType.MAP;\n+                return LogicalTypeAnnotation.mapType();\n             case MAP_KEY_VALUE:\n-                return OriginalType.MAP_KEY_VALUE;\n+                return LogicalTypeAnnotation.MapKeyValueTypeAnnotation.getInstance();\n             case LIST:\n-                return OriginalType.LIST;\n+                return LogicalTypeAnnotation.listType();\n             case ENUM:\n-                return OriginalType.ENUM;\n+                return LogicalTypeAnnotation.enumType();\n             case DECIMAL:\n-                return OriginalType.DECIMAL;\n+                int scale = (schemaElement == null ? 0 : schemaElement.scale);\n+                int precision = (schemaElement == null ? 0 : schemaElement.precision);\n+                return LogicalTypeAnnotation.decimalType(scale, precision);\n             case DATE:\n-                return OriginalType.DATE;\n+                return LogicalTypeAnnotation.dateType();\n             case TIME_MILLIS:\n-                return OriginalType.TIME_MILLIS;\n+                return LogicalTypeAnnotation.timeType(true, LogicalTypeAnnotation.TimeUnit.MILLIS);\n+            case TIME_MICROS:\n+                return LogicalTypeAnnotation.timeType(true, LogicalTypeAnnotation.TimeUnit.MICROS);\n             case TIMESTAMP_MILLIS:\n-                return OriginalType.TIMESTAMP_MILLIS;\n+                return LogicalTypeAnnotation.timestampType(true, LogicalTypeAnnotation.TimeUnit.MILLIS);\n+            case TIMESTAMP_MICROS:\n+                return LogicalTypeAnnotation.timestampType(true, LogicalTypeAnnotation.TimeUnit.MICROS);\n             case INTERVAL:\n-                return OriginalType.INTERVAL;\n+                return LogicalTypeAnnotation.IntervalLogicalTypeAnnotation.getInstance();\n             case INT_8:\n-                return OriginalType.INT_8;\n+                return LogicalTypeAnnotation.intType(8, true);\n             case INT_16:\n-                return OriginalType.INT_16;\n+                return LogicalTypeAnnotation.intType(16, true);\n             case INT_32:\n-                return OriginalType.INT_32;\n+                return LogicalTypeAnnotation.intType(32, true);\n             case INT_64:\n-                return OriginalType.INT_64;\n+                return LogicalTypeAnnotation.intType(64, true);\n             case UINT_8:\n-                return OriginalType.UINT_8;\n+                return LogicalTypeAnnotation.intType(8, false);\n             case UINT_16:\n-                return OriginalType.UINT_16;\n+                return LogicalTypeAnnotation.intType(16, false);\n             case UINT_32:\n-                return OriginalType.UINT_32;\n+                return LogicalTypeAnnotation.intType(32, false);\n             case UINT_64:\n-                return OriginalType.UINT_64;\n+                return LogicalTypeAnnotation.intType(64, false);\n             case JSON:\n-                return OriginalType.JSON;\n+                return LogicalTypeAnnotation.jsonType();\n             case BSON:\n-                return OriginalType.BSON;\n-            case TIMESTAMP_MICROS:\n-                return OriginalType.TIMESTAMP_MICROS;\n-            case TIME_MICROS:\n-                return OriginalType.TIME_MICROS;\n+                return LogicalTypeAnnotation.bsonType();\n             default:\n-                throw new IllegalArgumentException(\"Unknown converted type \" + type);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwODAyNQ==", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379908025", "bodyText": "This is verbatim copy of org.apache.parquet.format.converter.ParquetMetadataConverter#getLogicalTypeAnnotation, I'd prefer to keep it this way.\nThis should never be raised anyway, so likely it doesn't matter.", "author": "findepi", "createdAt": "2020-02-16T14:39:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NTY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NjAzNA==", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379866034", "bodyText": "We could add a shim to call this in the shaded Hive build, like this: https://github.com/prestosql/presto-hive-apache/blob/master/src/main/java/org/apache/parquet/io/ColumnIOUtil.java", "author": "electrum", "createdAt": "2020-02-16T00:38:24Z", "path": "presto-parquet/src/main/java/io/prestosql/parquet/reader/MetadataReader.java", "diffHunk": "@@ -293,55 +313,58 @@ private static PrimitiveTypeName getTypeName(Type type)\n         }\n     }\n \n-    private static OriginalType getOriginalType(ConvertedType type)\n+    // Copied from org.apache.parquet.format.converter.ParquetMetadataConverter#getLogicalTypeAnnotation(org.apache.parquet.format.ConvertedType, org.apache.parquet.format.SchemaElement)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwODgzMA==", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r379908830", "bodyText": "trinodb/trino-hive-apache#8", "author": "findepi", "createdAt": "2020-02-16T14:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg2NjAzNA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4OTI3MQ==", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r382789271", "bodyText": "don't forget to update this", "author": "findepi", "createdAt": "2020-02-21T20:25:22Z", "path": "pom.xml", "diffHunk": "@@ -444,7 +444,7 @@\n             <dependency>\n                 <groupId>io.prestosql.hive</groupId>\n                 <artifactId>hive-apache</artifactId>\n-                <version>3.0.0-4</version>\n+                <version>3.0.0-5-SNAPSHOT</version>", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ3NTU5MA==", "url": "https://github.com/trinodb/trino/pull/2844#discussion_r465475590", "bodyText": "You can update this now to 3.0.0-5", "author": "electrum", "createdAt": "2020-08-05T05:07:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4OTI3MQ=="}], "type": "inlineReview"}, {"oid": "aa82b8b4957d4f866c70a7843dd0e4d16880fd36", "url": "https://github.com/trinodb/trino/commit/aa82b8b4957d4f866c70a7843dd0e4d16880fd36", "message": "Inspect LogicalTypeAnnotation\n\n`OriginalType` is deprecated, inspect `LogicalTypeAnnotation` directly\ninstead.", "committedDate": "2020-08-21T14:58:23Z", "type": "commit"}, {"oid": "38f03477ea8ab38569e6c7738c8bd6f2f2b4d9dc", "url": "https://github.com/trinodb/trino/commit/38f03477ea8ab38569e6c7738c8bd6f2f2b4d9dc", "message": "Retain decimal attributes", "committedDate": "2020-08-21T14:59:17Z", "type": "commit"}, {"oid": "38f03477ea8ab38569e6c7738c8bd6f2f2b4d9dc", "url": "https://github.com/trinodb/trino/commit/38f03477ea8ab38569e6c7738c8bd6f2f2b4d9dc", "message": "Retain decimal attributes", "committedDate": "2020-08-21T14:59:17Z", "type": "forcePushed"}]}