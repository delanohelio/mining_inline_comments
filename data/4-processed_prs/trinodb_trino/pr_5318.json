{"pr_number": 5318, "pr_title": "Check expected exceptions precisely in TestJdbcResultSet", "pr_createdAt": "2020-09-28T08:29:50Z", "pr_url": "https://github.com/trinodb/trino/pull/5318", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MjI2Ng==", "url": "https://github.com/trinodb/trino/pull/5318#discussion_r495772266", "bodyText": "#5313", "author": "findepi", "createdAt": "2020-09-28T08:30:06Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -150,9 +171,13 @@ public void testTime()\n             checkRepresentation(connectedStatement.getStatement(), \"TIME '09:39:05.000'\", Types.TIME, (rs, column) -> {\n                 assertEquals(rs.getObject(column), Time.valueOf(LocalTime.of(9, 39, 5)));\n                 assertEquals(rs.getObject(column, Time.class), Time.valueOf(LocalTime.of(9, 39, 5)));\n-                assertThrows(() -> rs.getDate(column));\n+                assertThatThrownBy(() -> rs.getDate(column))\n+                        .isInstanceOf(SQLException.class)\n+                        .hasMessage(\"Invalid date from server: 09:39:05.000\"); // TODO (https://github.com/prestosql/presto/issues/5313) wrong message", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MjMxNw==", "url": "https://github.com/trinodb/trino/pull/5318#discussion_r495772317", "bodyText": "#5315", "author": "findepi", "createdAt": "2020-09-28T08:30:13Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -150,9 +171,13 @@ public void testTime()\n             checkRepresentation(connectedStatement.getStatement(), \"TIME '09:39:05.000'\", Types.TIME, (rs, column) -> {\n                 assertEquals(rs.getObject(column), Time.valueOf(LocalTime.of(9, 39, 5)));\n                 assertEquals(rs.getObject(column, Time.class), Time.valueOf(LocalTime.of(9, 39, 5)));\n-                assertThrows(() -> rs.getDate(column));\n+                assertThatThrownBy(() -> rs.getDate(column))\n+                        .isInstanceOf(SQLException.class)\n+                        .hasMessage(\"Invalid date from server: 09:39:05.000\"); // TODO (https://github.com/prestosql/presto/issues/5313) wrong message\n                 assertEquals(rs.getTime(column), Time.valueOf(LocalTime.of(9, 39, 5)));\n-                assertThrows(() -> rs.getTimestamp(column));\n+                assertThatThrownBy(() -> rs.getTimestamp(column))\n+                        .isInstanceOf(IllegalArgumentException.class) // TODO (https://github.com/prestosql/presto/issues/5315) SQLException", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc3MjM4OQ==", "url": "https://github.com/trinodb/trino/pull/5318#discussion_r495772389", "bodyText": "#5317", "author": "findepi", "createdAt": "2020-09-28T08:30:21Z", "path": "presto-jdbc/src/test/java/io/prestosql/jdbc/BaseTestJdbcResultSet.java", "diffHunk": "@@ -163,9 +188,13 @@ public void testTime()\n \n             checkRepresentation(connectedStatement.getStatement(), \"TIME '09:39:07 +01:00'\", Types.TIME /* TODO TIME_WITH_TIMEZONE */, (rs, column) -> {\n                 assertEquals(rs.getObject(column), Time.valueOf(LocalTime.of(1, 39, 7))); // TODO this should represent TIME '09:39:07 +01:00'\n-                assertThrows(() -> rs.getDate(column));\n+                assertThatThrownBy(() -> rs.getDate(column))\n+                        .isInstanceOf(SQLException.class)\n+                        .hasMessage(\"Invalid date from server: 09:39:07+01:00\"); // TODO (https://github.com/prestosql/presto/issues/5313) wrong message\n                 assertEquals(rs.getTime(column), Time.valueOf(LocalTime.of(1, 39, 7))); // TODO this should fail, or represent TIME '09:39:07'\n-                assertThrows(() -> rs.getTimestamp(column));\n+                assertThatThrownBy(() -> rs.getTimestamp(column))\n+                        .isInstanceOf(IllegalArgumentException.class) // TODO (https://github.com/prestosql/presto/issues/5315) SQLException\n+                        .hasMessage(\"Expected column to be a timestamp type but is time with time zone(0)\"); // TODO (https://github.com/prestosql/presto/issues/5317) placement of precision parameter", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "69fe4a9d2671f16b12585dc40a92d21b31f6d500", "url": "https://github.com/trinodb/trino/commit/69fe4a9d2671f16b12585dc40a92d21b31f6d500", "message": "Check expected exceptions precisely in TestJdbcResultSet\n\nReplace `assertThrows` with `assertThatThrownBy`.", "committedDate": "2020-09-28T10:49:46Z", "type": "commit"}, {"oid": "db49df718efd908b69e9826d2a75413ee431bbd7", "url": "https://github.com/trinodb/trino/commit/db49df718efd908b69e9826d2a75413ee431bbd7", "message": "Improve running TestJdbcResultSetCompatibilityOldServer from IDE\n\nPreviously running the test from IDE required setting\nTESTED_PRESTO_SERVER_VERSIONS environment.", "committedDate": "2020-09-28T10:49:46Z", "type": "commit"}, {"oid": "d160dc114e41cc522a60c3a5cde00a1be8047e74", "url": "https://github.com/trinodb/trino/commit/d160dc114e41cc522a60c3a5cde00a1be8047e74", "message": "Remove unused field", "committedDate": "2020-09-28T10:49:47Z", "type": "commit"}, {"oid": "d160dc114e41cc522a60c3a5cde00a1be8047e74", "url": "https://github.com/trinodb/trino/commit/d160dc114e41cc522a60c3a5cde00a1be8047e74", "message": "Remove unused field", "committedDate": "2020-09-28T10:49:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3OTIwOQ==", "url": "https://github.com/trinodb/trino/pull/5318#discussion_r495879209", "bodyText": "Hmmm. It was still useful to be able to test agains specific versions manually. Maybe not enough to keep it... IDK", "author": "losipiuk", "createdAt": "2020-09-28T11:48:12Z", "path": "presto-test-jdbc-compatibility-old-server/src/test/java/io/prestosql/TestJdbcResultSetCompatibilityOldServer.java", "diffHunk": "@@ -43,7 +43,6 @@\n {\n     private static final int NUMBER_OF_TESTED_VERSIONS = 5;\n     private static final int TESTED_VERSIONS_GRANULARITY = 3;\n-    private static final String TESTED_VERSIONS_ENV_KEY = \"TESTED_PRESTO_SERVER_VERSIONS\";", "originalCommit": "db49df718efd908b69e9826d2a75413ee431bbd7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}