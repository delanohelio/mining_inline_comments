{"pr_number": 3882, "pr_title": "Remove hand-rolled typesignature parser", "pr_createdAt": "2020-05-29T17:33:42Z", "pr_url": "https://github.com/trinodb/trino/pull/3882", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMTg4Mg==", "url": "https://github.com/trinodb/trino/pull/3882#discussion_r432901882", "bodyText": "Maybe use ImmutableSortedMap?", "author": "dain", "createdAt": "2020-05-31T01:52:24Z", "path": "presto-main/src/main/java/io/prestosql/metadata/BoundVariables.java", "diffHunk": "@@ -13,33 +13,37 @@\n  */\n package io.prestosql.metadata;\n \n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.common.collect.ImmutableMap;\n import io.prestosql.spi.type.Type;\n \n-import java.util.HashMap;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.TreeMap;\n \n import static com.google.common.base.MoreObjects.toStringHelper;\n import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.String.CASE_INSENSITIVE_ORDER;\n import static java.util.Objects.requireNonNull;\n \n public class BoundVariables\n {\n     private final Map<String, Type> typeVariables;\n     private final Map<String, Long> longVariables;\n \n-    @JsonCreator\n-    public BoundVariables(\n-            @JsonProperty(\"typeVariables\") Map<String, Type> typeVariables,\n-            @JsonProperty(\"longVariables\") Map<String, Long> longVariables)\n+    public BoundVariables(Map<String, Type> typeVariables, Map<String, Long> longVariables)\n     {\n         requireNonNull(typeVariables, \"typeVariableBindings is null\");\n         requireNonNull(longVariables, \"longVariableBindings is null\");\n-        this.typeVariables = ImmutableMap.copyOf(typeVariables);\n-        this.longVariables = ImmutableMap.copyOf(longVariables);\n+\n+        this.typeVariables = new TreeMap<>(CASE_INSENSITIVE_ORDER);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMjAwMg==", "url": "https://github.com/trinodb/trino/pull/3882#discussion_r432902002", "bodyText": "Assuming you don't have nulls or dupes you can collect to toImmutableSortedMap", "author": "dain", "createdAt": "2020-05-31T01:55:20Z", "path": "presto-main/src/main/java/io/prestosql/metadata/SignatureBinder.java", "diffHunk": "@@ -92,8 +92,11 @@\n         this.typeCoercion = new TypeCoercion(metadata::getType);\n         this.declaredSignature = requireNonNull(declaredSignature, \"parametrizedSignature is null\");\n         this.allowCoercion = allowCoercion;\n-        this.typeVariableConstraints = declaredSignature.getTypeVariableConstraints().stream()\n-                .collect(toMap(TypeVariableConstraint::getName, identity()));\n+\n+        typeVariableConstraints = new TreeMap<>(CASE_INSENSITIVE_ORDER);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMjA2OQ==", "url": "https://github.com/trinodb/trino/pull/3882#discussion_r432902069", "bodyText": "There is a toImmutableSortedSet you can use", "author": "dain", "createdAt": "2020-05-31T01:56:26Z", "path": "presto-main/src/main/java/io/prestosql/operator/annotations/FunctionsParserHelper.java", "diffHunk": "@@ -86,12 +87,13 @@ public static boolean containsImplementationDependencyAnnotation(Annotation[] an\n \n     public static List<TypeVariableConstraint> createTypeVariableConstraints(Collection<TypeParameter> typeParameters, List<ImplementationDependency> dependencies)\n     {\n-        Set<String> typeParameterNames = typeParameters.stream()\n+        Set<String> typeParameterNames = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+        typeParameters.stream()\n                 .map(TypeParameter::value)\n-                .collect(toImmutableSet());\n+                .forEach(typeParameterNames::add);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkwMjE0Nw==", "url": "https://github.com/trinodb/trino/pull/3882#discussion_r432902147", "bodyText": "toImmutableSortedSet", "author": "dain", "createdAt": "2020-05-31T01:57:47Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/annotations/ParametricScalarImplementation.java", "diffHunk": "@@ -505,9 +505,10 @@ private SpecializedSignature(\n             typeParameters.addAll(Arrays.asList(method.getAnnotationsByType(TypeParameter.class)));\n \n             literalParameters = parseLiteralParameters(method);\n-            typeParameterNames = typeParameters.stream()\n+            typeParameterNames = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n+            typeParameters.stream()\n                     .map(TypeParameter::value)\n-                    .collect(toImmutableSet());\n+                    .forEach(typeParameterNames::add);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "55a5cc5b20651b7c8e744e48fa8cf41393cb6596", "url": "https://github.com/trinodb/trino/commit/55a5cc5b20651b7c8e744e48fa8cf41393cb6596", "message": "Resolve bound variables case-insensitively\n\nCurrently, TypeSignatures are in the in-between world of\nSQL identifiers and internal representation of those identifiers.\nSometimes they are constructed manually. Other times, they are parsed.\nHowever, type variables are not accessed while taking into account\nSQL delimited identifier semantics.\n\nFor example, a type signature such as array(e) is equivalent to\nARRAY(e) but not to array(E) due to some callsites matching the `e`\nparameter without regards to whether it was quoted in the textual\nform of the signature.", "committedDate": "2020-05-31T07:25:11Z", "type": "commit"}, {"oid": "5a16104c017b8b7a9bcce11d1a5fffa3f74373e2", "url": "https://github.com/trinodb/trino/commit/5a16104c017b8b7a9bcce11d1a5fffa3f74373e2", "message": "Fix parsing of row(double precision)\n\nIt was being interpreted as row(\"double\" precision)\nbecause \"double\" was being interpreted as an identifier\nrepresenting the field name.", "committedDate": "2020-05-31T07:25:11Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "66912614ad2413930bbf96c25b31cddda2190168", "url": "https://github.com/trinodb/trino/commit/66912614ad2413930bbf96c25b31cddda2190168", "message": "Remove hand-rolled type signature parser", "committedDate": "2020-05-31T19:04:47Z", "type": "commit"}, {"oid": "66912614ad2413930bbf96c25b31cddda2190168", "url": "https://github.com/trinodb/trino/commit/66912614ad2413930bbf96c25b31cddda2190168", "message": "Remove hand-rolled type signature parser", "committedDate": "2020-05-31T19:04:47Z", "type": "forcePushed"}]}