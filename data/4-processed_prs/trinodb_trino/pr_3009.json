{"pr_number": 3009, "pr_title": "Allow to set custom metastore in HiveQueryRunner", "pr_createdAt": "2020-03-05T14:02:52Z", "pr_url": "https://github.com/trinodb/trino/pull/3009", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwODY3Nw==", "url": "https://github.com/trinodb/trino/pull/3009#discussion_r388408677", "bodyText": "setInitialTables", "author": "findepi", "createdAt": "2020-03-05T16:27:25Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/HiveQueryRunner.java", "diffHunk": "@@ -68,82 +70,94 @@ private HiveQueryRunner()\n     private static final String TPCH_BUCKETED_SCHEMA = \"tpch_bucketed\";\n     private static final DateTimeZone TIME_ZONE = DateTimeZone.forID(\"America/Bahia_Banderas\");\n \n-    public static DistributedQueryRunner createQueryRunner(TpchTable<?>... tables)\n+    public static DistributedQueryRunner create()\n             throws Exception\n     {\n-        return createQueryRunner(ImmutableList.copyOf(tables));\n+        return builder().build();\n     }\n \n-    public static DistributedQueryRunner createQueryRunner(Iterable<TpchTable<?>> tables)\n-            throws Exception\n+    public static Builder builder()\n     {\n-        return createQueryRunner(tables, ImmutableMap.of(), Optional.empty());\n+        return new Builder();\n     }\n \n-    public static DistributedQueryRunner createQueryRunner(Iterable<TpchTable<?>> tables, Map<String, String> extraProperties, Optional<Path> baseDataDir)\n-            throws Exception\n+    public static class Builder\n+            extends DistributedQueryRunner.Builder\n     {\n-        return createQueryRunner(tables, extraProperties, ImmutableMap.of(), baseDataDir);\n-    }\n+        private Map<String, String> extraHiveProperties = ImmutableMap.of();\n+        private List<TpchTable<?>> tables = ImmutableList.of();\n \n-    public static DistributedQueryRunner createQueryRunner(Iterable<TpchTable<?>> tables, Map<String, String> extraProperties, Map<String, String> extraHiveProperties, Optional<Path> baseDataDir)\n-            throws Exception\n-    {\n-        assertEquals(DateTimeZone.getDefault(), TIME_ZONE, \"Timezone not configured correctly. Add -Duser.timezone=America/Bahia_Banderas to your JVM arguments\");\n-        setupLogging();\n+        protected Builder()\n+        {\n+            super(createSession(Optional.of(new SelectedRole(ROLE, Optional.of(\"admin\")))));\n+        }\n \n-        DistributedQueryRunner queryRunner = DistributedQueryRunner\n-                .builder(createSession(Optional.of(new SelectedRole(ROLE, Optional.of(\"admin\")))))\n-                .setNodeCount(4)\n-                .setExtraProperties(extraProperties)\n-                .setBaseDataDir(baseDataDir)\n-                .build();\n+        public Builder setExtraHiveProperties(Map<String, String> extraHiveProperties)\n+        {\n+            this.extraHiveProperties = ImmutableMap.copyOf(requireNonNull(extraHiveProperties, \"extraHiveProperties is null\"));\n+            return this;\n+        }\n \n-        try {\n-            queryRunner.installPlugin(new TpchPlugin());\n-            queryRunner.createCatalog(\"tpch\", \"tpch\");\n-\n-            File baseDir = queryRunner.getCoordinator().getBaseDataDir().resolve(\"hive_data\").toFile();\n-\n-            FileHiveMetastore metastore = new FileHiveMetastore(HDFS_ENVIRONMENT, baseDir.toURI().toString(), \"test\");\n-            queryRunner.installPlugin(new TestingHivePlugin(metastore));\n-\n-            Map<String, String> hiveProperties = ImmutableMap.<String, String>builder()\n-                    .put(\"hive.time-zone\", TIME_ZONE.getID())\n-                    .put(\"hive.max-partitions-per-scan\", \"1000\")\n-                    .put(\"hive.assume-canonical-partition-keys\", \"true\")\n-                    .build();\n-\n-            hiveProperties = new HashMap<>(hiveProperties);\n-            hiveProperties.putAll(extraHiveProperties);\n-            hiveProperties.putIfAbsent(\"hive.security\", \"sql-standard\");\n-\n-            Map<String, String> hiveBucketedProperties = ImmutableMap.<String, String>builder()\n-                    .putAll(hiveProperties)\n-                    .put(\"hive.max-initial-split-size\", \"10kB\") // so that each bucket has multiple splits\n-                    .put(\"hive.max-split-size\", \"10kB\") // so that each bucket has multiple splits\n-                    .put(\"hive.storage-format\", \"TEXTFILE\") // so that there's no minimum split size for the file\n-                    .put(\"hive.compression-codec\", \"NONE\") // so that the file is splittable\n-                    .build();\n-            queryRunner.createCatalog(HIVE_CATALOG, HIVE_CATALOG, hiveProperties);\n-            queryRunner.createCatalog(HIVE_BUCKETED_CATALOG, HIVE_CATALOG, hiveBucketedProperties);\n-\n-            HiveIdentity identity = new HiveIdentity(SESSION);\n-            if (!metastore.getDatabase(TPCH_SCHEMA).isPresent()) {\n-                metastore.createDatabase(identity, createDatabaseMetastoreObject(TPCH_SCHEMA));\n-                copyTpchTables(queryRunner, \"tpch\", TINY_SCHEMA_NAME, createSession(Optional.empty()), tables);\n-            }\n+        public Builder setTables(Iterable<TpchTable<?>> tables)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwODg3Mg==", "url": "https://github.com/trinodb/trino/pull/3009#discussion_r388408872", "bodyText": "setHiveProperties? not sure why we had \"extra\" here", "author": "findepi", "createdAt": "2020-03-05T16:27:44Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/HiveQueryRunner.java", "diffHunk": "@@ -68,82 +70,94 @@ private HiveQueryRunner()\n     private static final String TPCH_BUCKETED_SCHEMA = \"tpch_bucketed\";\n     private static final DateTimeZone TIME_ZONE = DateTimeZone.forID(\"America/Bahia_Banderas\");\n \n-    public static DistributedQueryRunner createQueryRunner(TpchTable<?>... tables)\n+    public static DistributedQueryRunner create()\n             throws Exception\n     {\n-        return createQueryRunner(ImmutableList.copyOf(tables));\n+        return builder().build();\n     }\n \n-    public static DistributedQueryRunner createQueryRunner(Iterable<TpchTable<?>> tables)\n-            throws Exception\n+    public static Builder builder()\n     {\n-        return createQueryRunner(tables, ImmutableMap.of(), Optional.empty());\n+        return new Builder();\n     }\n \n-    public static DistributedQueryRunner createQueryRunner(Iterable<TpchTable<?>> tables, Map<String, String> extraProperties, Optional<Path> baseDataDir)\n-            throws Exception\n+    public static class Builder\n+            extends DistributedQueryRunner.Builder\n     {\n-        return createQueryRunner(tables, extraProperties, ImmutableMap.of(), baseDataDir);\n-    }\n+        private Map<String, String> extraHiveProperties = ImmutableMap.of();\n+        private List<TpchTable<?>> tables = ImmutableList.of();\n \n-    public static DistributedQueryRunner createQueryRunner(Iterable<TpchTable<?>> tables, Map<String, String> extraProperties, Map<String, String> extraHiveProperties, Optional<Path> baseDataDir)\n-            throws Exception\n-    {\n-        assertEquals(DateTimeZone.getDefault(), TIME_ZONE, \"Timezone not configured correctly. Add -Duser.timezone=America/Bahia_Banderas to your JVM arguments\");\n-        setupLogging();\n+        protected Builder()\n+        {\n+            super(createSession(Optional.of(new SelectedRole(ROLE, Optional.of(\"admin\")))));\n+        }\n \n-        DistributedQueryRunner queryRunner = DistributedQueryRunner\n-                .builder(createSession(Optional.of(new SelectedRole(ROLE, Optional.of(\"admin\")))))\n-                .setNodeCount(4)\n-                .setExtraProperties(extraProperties)\n-                .setBaseDataDir(baseDataDir)\n-                .build();\n+        public Builder setExtraHiveProperties(Map<String, String> extraHiveProperties)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwNDAyNg==", "url": "https://github.com/trinodb/trino/pull/3009#discussion_r388504026", "bodyText": "Because there are some defaults. And it was named like this before.", "author": "kokosing", "createdAt": "2020-03-05T19:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwODg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwOTkxNQ==", "url": "https://github.com/trinodb/trino/pull/3009#discussion_r388409915", "bodyText": "since you inherit parent builder, you should pass your own Builder type there and the parent builder should return T from build methods... otherwise code using builder needs to use methods in certain specific order, not the way builder should work\nfollow-up maybe", "author": "findepi", "createdAt": "2020-03-05T16:29:08Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/HiveQueryRunner.java", "diffHunk": "@@ -68,82 +70,94 @@ private HiveQueryRunner()\n     private static final String TPCH_BUCKETED_SCHEMA = \"tpch_bucketed\";\n     private static final DateTimeZone TIME_ZONE = DateTimeZone.forID(\"America/Bahia_Banderas\");\n \n-    public static DistributedQueryRunner createQueryRunner(TpchTable<?>... tables)\n+    public static DistributedQueryRunner create()\n             throws Exception\n     {\n-        return createQueryRunner(ImmutableList.copyOf(tables));\n+        return builder().build();\n     }\n \n-    public static DistributedQueryRunner createQueryRunner(Iterable<TpchTable<?>> tables)\n-            throws Exception\n+    public static Builder builder()\n     {\n-        return createQueryRunner(tables, ImmutableMap.of(), Optional.empty());\n+        return new Builder();\n     }\n \n-    public static DistributedQueryRunner createQueryRunner(Iterable<TpchTable<?>> tables, Map<String, String> extraProperties, Optional<Path> baseDataDir)\n-            throws Exception\n+    public static class Builder\n+            extends DistributedQueryRunner.Builder", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwNDI0Nw==", "url": "https://github.com/trinodb/trino/pull/3009#discussion_r388504247", "bodyText": "I was thinking about this. It looks like a follow-up", "author": "kokosing", "createdAt": "2020-03-05T19:12:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwOTkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxNTQ0MA==", "url": "https://github.com/trinodb/trino/pull/3009#discussion_r388515440", "bodyText": "#3015", "author": "kokosing", "createdAt": "2020-03-05T19:32:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQwOTkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMDE2Nw==", "url": "https://github.com/trinodb/trino/pull/3009#discussion_r388410167", "bodyText": "Why is this default?? TODO maybe", "author": "findepi", "createdAt": "2020-03-05T16:29:28Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/HiveQueryRunner.java", "diffHunk": "@@ -68,82 +70,94 @@ private HiveQueryRunner()\n     private static final String TPCH_BUCKETED_SCHEMA = \"tpch_bucketed\";\n     private static final DateTimeZone TIME_ZONE = DateTimeZone.forID(\"America/Bahia_Banderas\");\n \n-    public static DistributedQueryRunner createQueryRunner(TpchTable<?>... tables)\n+    public static DistributedQueryRunner create()\n             throws Exception\n     {\n-        return createQueryRunner(ImmutableList.copyOf(tables));\n+        return builder().build();\n     }\n \n-    public static DistributedQueryRunner createQueryRunner(Iterable<TpchTable<?>> tables)\n-            throws Exception\n+    public static Builder builder()\n     {\n-        return createQueryRunner(tables, ImmutableMap.of(), Optional.empty());\n+        return new Builder();\n     }\n \n-    public static DistributedQueryRunner createQueryRunner(Iterable<TpchTable<?>> tables, Map<String, String> extraProperties, Optional<Path> baseDataDir)\n-            throws Exception\n+    public static class Builder\n+            extends DistributedQueryRunner.Builder\n     {\n-        return createQueryRunner(tables, extraProperties, ImmutableMap.of(), baseDataDir);\n-    }\n+        private Map<String, String> extraHiveProperties = ImmutableMap.of();\n+        private List<TpchTable<?>> tables = ImmutableList.of();\n \n-    public static DistributedQueryRunner createQueryRunner(Iterable<TpchTable<?>> tables, Map<String, String> extraProperties, Map<String, String> extraHiveProperties, Optional<Path> baseDataDir)\n-            throws Exception\n-    {\n-        assertEquals(DateTimeZone.getDefault(), TIME_ZONE, \"Timezone not configured correctly. Add -Duser.timezone=America/Bahia_Banderas to your JVM arguments\");\n-        setupLogging();\n+        protected Builder()\n+        {\n+            super(createSession(Optional.of(new SelectedRole(ROLE, Optional.of(\"admin\")))));\n+        }\n \n-        DistributedQueryRunner queryRunner = DistributedQueryRunner\n-                .builder(createSession(Optional.of(new SelectedRole(ROLE, Optional.of(\"admin\")))))\n-                .setNodeCount(4)\n-                .setExtraProperties(extraProperties)\n-                .setBaseDataDir(baseDataDir)\n-                .build();\n+        public Builder setExtraHiveProperties(Map<String, String> extraHiveProperties)\n+        {\n+            this.extraHiveProperties = ImmutableMap.copyOf(requireNonNull(extraHiveProperties, \"extraHiveProperties is null\"));\n+            return this;\n+        }\n \n-        try {\n-            queryRunner.installPlugin(new TpchPlugin());\n-            queryRunner.createCatalog(\"tpch\", \"tpch\");\n-\n-            File baseDir = queryRunner.getCoordinator().getBaseDataDir().resolve(\"hive_data\").toFile();\n-\n-            FileHiveMetastore metastore = new FileHiveMetastore(HDFS_ENVIRONMENT, baseDir.toURI().toString(), \"test\");\n-            queryRunner.installPlugin(new TestingHivePlugin(metastore));\n-\n-            Map<String, String> hiveProperties = ImmutableMap.<String, String>builder()\n-                    .put(\"hive.time-zone\", TIME_ZONE.getID())\n-                    .put(\"hive.max-partitions-per-scan\", \"1000\")\n-                    .put(\"hive.assume-canonical-partition-keys\", \"true\")\n-                    .build();\n-\n-            hiveProperties = new HashMap<>(hiveProperties);\n-            hiveProperties.putAll(extraHiveProperties);\n-            hiveProperties.putIfAbsent(\"hive.security\", \"sql-standard\");\n-\n-            Map<String, String> hiveBucketedProperties = ImmutableMap.<String, String>builder()\n-                    .putAll(hiveProperties)\n-                    .put(\"hive.max-initial-split-size\", \"10kB\") // so that each bucket has multiple splits\n-                    .put(\"hive.max-split-size\", \"10kB\") // so that each bucket has multiple splits\n-                    .put(\"hive.storage-format\", \"TEXTFILE\") // so that there's no minimum split size for the file\n-                    .put(\"hive.compression-codec\", \"NONE\") // so that the file is splittable\n-                    .build();\n-            queryRunner.createCatalog(HIVE_CATALOG, HIVE_CATALOG, hiveProperties);\n-            queryRunner.createCatalog(HIVE_BUCKETED_CATALOG, HIVE_CATALOG, hiveBucketedProperties);\n-\n-            HiveIdentity identity = new HiveIdentity(SESSION);\n-            if (!metastore.getDatabase(TPCH_SCHEMA).isPresent()) {\n-                metastore.createDatabase(identity, createDatabaseMetastoreObject(TPCH_SCHEMA));\n-                copyTpchTables(queryRunner, \"tpch\", TINY_SCHEMA_NAME, createSession(Optional.empty()), tables);\n-            }\n+        public Builder setTables(Iterable<TpchTable<?>> tables)\n+        {\n+            this.tables = ImmutableList.copyOf(requireNonNull(tables, \"tables is null\"));\n+            return this;\n+        }\n \n-            if (!metastore.getDatabase(TPCH_BUCKETED_SCHEMA).isPresent()) {\n-                metastore.createDatabase(identity, createDatabaseMetastoreObject(TPCH_BUCKETED_SCHEMA));\n-                copyTpchTablesBucketed(queryRunner, \"tpch\", TINY_SCHEMA_NAME, createBucketedSession(Optional.empty()), tables);\n-            }\n+        public DistributedQueryRunner build()\n+                throws Exception\n+        {\n+            assertEquals(DateTimeZone.getDefault(), TIME_ZONE, \"Timezone not configured correctly. Add -Duser.timezone=America/Bahia_Banderas to your JVM arguments\");\n+            setupLogging();\n \n-            return queryRunner;\n-        }\n-        catch (Exception e) {\n-            queryRunner.close();\n-            throw e;\n+            DistributedQueryRunner queryRunner = super.build();\n+\n+            try {\n+                queryRunner.installPlugin(new TpchPlugin());\n+                queryRunner.createCatalog(\"tpch\", \"tpch\");\n+\n+                File baseDir = queryRunner.getCoordinator().getBaseDataDir().resolve(\"hive_data\").toFile();\n+\n+                FileHiveMetastore metastore = new FileHiveMetastore(HDFS_ENVIRONMENT, baseDir.toURI().toString(), \"test\");\n+                queryRunner.installPlugin(new TestingHivePlugin(metastore));\n+\n+                Map<String, String> hiveProperties = ImmutableMap.<String, String>builder()\n+                        .put(\"hive.time-zone\", TIME_ZONE.getID())\n+                        .put(\"hive.max-partitions-per-scan\", \"1000\")\n+                        .put(\"hive.assume-canonical-partition-keys\", \"true\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwNDQxMg==", "url": "https://github.com/trinodb/trino/pull/3009#discussion_r388504412", "bodyText": "It used to be default.", "author": "kokosing", "createdAt": "2020-03-05T19:13:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMDE2Nw=="}], "type": "inlineReview"}, {"oid": "5ba0f10bf00285b9ce166bfa7504f7616acae7df", "url": "https://github.com/trinodb/trino/commit/5ba0f10bf00285b9ce166bfa7504f7616acae7df", "message": "Introduce Builder for HiveQueryRunner", "committedDate": "2020-03-05T19:28:47Z", "type": "commit"}, {"oid": "3296c1713bc48387f9e53e9ed3f70cfa9744ddf1", "url": "https://github.com/trinodb/trino/commit/3296c1713bc48387f9e53e9ed3f70cfa9744ddf1", "message": "Cleanup in HiveQueryRunner", "committedDate": "2020-03-05T19:28:47Z", "type": "commit"}, {"oid": "05cf6ba4bc6481651c67e6a40e31b31be85623b5", "url": "https://github.com/trinodb/trino/commit/05cf6ba4bc6481651c67e6a40e31b31be85623b5", "message": "Allow to set custom metastore in HiveQueryRunner", "committedDate": "2020-03-05T19:28:48Z", "type": "commit"}, {"oid": "05cf6ba4bc6481651c67e6a40e31b31be85623b5", "url": "https://github.com/trinodb/trino/commit/05cf6ba4bc6481651c67e6a40e31b31be85623b5", "message": "Allow to set custom metastore in HiveQueryRunner", "committedDate": "2020-03-05T19:28:48Z", "type": "forcePushed"}]}