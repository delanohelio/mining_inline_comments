{"pr_number": 5789, "pr_title": "Alter view set authorization", "pr_createdAt": "2020-11-03T08:46:40Z", "pr_url": "https://github.com/trinodb/trino/pull/5789", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUwNTU2Nw==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r516505567", "bodyText": "test_view_authorization", "author": "kokosing", "createdAt": "2020-11-03T08:53:07Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -831,6 +831,70 @@ public void testTableAuthorizationForRole()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testViewAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_table_authorization\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUwNTY4Mw==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r516505683", "bodyText": "test_view_authorization_for_role", "author": "kokosing", "createdAt": "2020-11-03T08:53:21Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -831,6 +831,70 @@ public void testTableAuthorizationForRole()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testViewAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_table_authorization\");\n+        assertUpdate(admin, \"CREATE TABLE test_table_authorization.foo (col int)\");\n+        assertUpdate(admin, \"CREATE VIEW test_table_authorization.bar AS SELECT * FROM test_table_authorization.foo\");\n+\n+        assertAccessDenied(\n+                alice,\n+                \"ALTER VIEW test_table_authorization.bar SET AUTHORIZATION alice\",\n+                \"Cannot set authorization for view test_table_authorization.bar to USER alice\");\n+        assertUpdate(admin, \"ALTER VIEW test_table_authorization.bar SET AUTHORIZATION alice\");\n+        assertUpdate(alice, \"ALTER VIEW test_table_authorization.bar SET AUTHORIZATION admin\");\n+\n+        assertUpdate(admin, \"DROP VIEW test_table_authorization.bar\");\n+        assertUpdate(admin, \"DROP TABLE test_table_authorization.foo\");\n+        assertUpdate(admin, \"DROP SCHEMA test_table_authorization\");\n+    }\n+\n+    @Test\n+    public void testViewAuthorizationForRole()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_table_authorization\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUwNzEyNQ==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r516507125", "bodyText": "You don't need a table to create a view. You can simply have:\nCREATE VIEW test_table_authorization.bar AS SELECT current_user\n\nThis is nice because when you change the owner the value returned should change.\nAlso add tests when SECURITY is set to INVOKER (default is SECURITY OWNER), then changing owner should not change the returned value.", "author": "kokosing", "createdAt": "2020-11-03T08:55:43Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -831,6 +831,70 @@ public void testTableAuthorizationForRole()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testViewAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_table_authorization\");\n+        assertUpdate(admin, \"CREATE TABLE test_table_authorization.foo (col int)\");\n+        assertUpdate(admin, \"CREATE VIEW test_table_authorization.bar AS SELECT * FROM test_table_authorization.foo\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQyMzMxOQ==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r517423319", "bodyText": "I added tests with INVOKER and DEFINER. current_user function does not work like that thought so there is a standard view referencing a table to test that.", "author": "skrzypo987", "createdAt": "2020-11-04T15:23:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUwNzEyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUwOTc0Nw==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r516509747", "bodyText": "How about extracting abstract Task?", "author": "kokosing", "createdAt": "2020-11-03T09:00:17Z", "path": "presto-parser/src/main/java/io/prestosql/sql/tree/SetAuthorizationStatement.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.sql.tree;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+public abstract class SetAuthorizationStatement", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQyMzMzMw==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r517423333", "bodyText": "Those tasks actually vary so I don't think it will result in less code.", "author": "skrzypo987", "createdAt": "2020-11-04T15:23:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUwOTc0Nw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAwOTU0Mw==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r518009543", "bodyText": "Don't we want to make separate tests for such cases?", "author": "s2lomon", "createdAt": "2020-11-05T12:20:39Z", "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedAccessControl.java", "diffHunk": "@@ -301,6 +301,13 @@ public void testTableRules()\n         accessControl.checkCanSetTableAuthorization(ALICE, aliceTable, new PrestoPrincipal(PrincipalType.USER, \"some_user\"));\n         assertDenied(() -> accessControl.checkCanSetTableAuthorization(ALICE, bobTable, new PrestoPrincipal(PrincipalType.ROLE, \"some_role\")));\n         assertDenied(() -> accessControl.checkCanSetTableAuthorization(ALICE, bobTable, new PrestoPrincipal(PrincipalType.USER, \"some_user\")));\n+\n+        accessControl.checkCanSetViewAuthorization(ADMIN, testTable, new PrestoPrincipal(PrincipalType.ROLE, \"some_role\"));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxMTQ3NA==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r518011474", "bodyText": "I understand that for these scenarios the implementations simply checks for access for table, so putting these assertions here works, but It's something that requires the knowledge of the actual implementation to understand this test and therefore I would see it rather as a separate test. Not crucial, but think about it.", "author": "s2lomon", "createdAt": "2020-11-05T12:24:18Z", "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -590,6 +595,8 @@ public void testCheckCanSetTableAuthorizationForNonOwner()\n \n         assertAccessDenied(() -> accessControl.checkCanSetTableAuthorization(ALICE, new CatalogSchemaTableName(\"some-catalog\", \"test\", \"test\"), new PrestoPrincipal(PrincipalType.ROLE, \"some_role\")), AUTH_TABLE_ACCESS_DENIED_MESSAGE);\n         assertAccessDenied(() -> accessControl.checkCanSetTableAuthorization(ALICE, new CatalogSchemaTableName(\"some-catalog\", \"test\", \"test\"), new PrestoPrincipal(PrincipalType.USER, \"some_user\")), AUTH_TABLE_ACCESS_DENIED_MESSAGE);\n+        assertAccessDenied(() -> accessControl.checkCanSetViewAuthorization(ALICE, new CatalogSchemaTableName(\"some-catalog\", \"test\", \"test\"), new PrestoPrincipal(PrincipalType.ROLE, \"some_role\")), AUTH_VIEW_ACCESS_DENIED_MESSAGE);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MjgxNw==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r519652817", "bodyText": "this is really unreadable to cope with bar and foo. I need to check couple times what is what when trying to understand error messages below.", "author": "kokosing", "createdAt": "2020-11-09T09:10:26Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -853,6 +853,126 @@ public void testTableAuthorizationForRole()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testViewAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_view_authorization\");\n+        assertUpdate(admin, \"CREATE VIEW test_view_authorization.bar AS SELECT current_user AS user\");\n+\n+        assertAccessDenied(\n+                alice,\n+                \"ALTER VIEW test_view_authorization.bar SET AUTHORIZATION alice\",\n+                \"Cannot set authorization for view test_view_authorization.bar to USER alice\");\n+        assertUpdate(admin, \"ALTER VIEW test_view_authorization.bar SET AUTHORIZATION alice\");\n+        assertUpdate(alice, \"ALTER VIEW test_view_authorization.bar SET AUTHORIZATION admin\");\n+\n+        assertUpdate(admin, \"DROP VIEW test_view_authorization.bar\");\n+        assertUpdate(admin, \"DROP SCHEMA test_view_authorization\");\n+    }\n+\n+    @Test\n+    public void testViewAuthorizationSecurityDefiner()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_view_authorization\");\n+        assertUpdate(admin, \"CREATE TABLE test_view_authorization.foo (col int)\");\n+        assertUpdate(admin, \"INSERT INTO test_view_authorization.foo VALUES (1)\", 1);\n+        assertUpdate(admin, \"CREATE VIEW test_view_authorization.bar SECURITY DEFINER AS SELECT * from test_view_authorization.foo\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MzUxNw==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r519653517", "bodyText": "Having assertUpdate(admin, \"CREATE VIEW test_view_authorization.bar AS SELECT current_user AS user\"); would not decrease the coverage, but surely would simplify the test.", "author": "kokosing", "createdAt": "2020-11-09T09:11:38Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -853,6 +853,126 @@ public void testTableAuthorizationForRole()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testViewAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_view_authorization\");\n+        assertUpdate(admin, \"CREATE VIEW test_view_authorization.bar AS SELECT current_user AS user\");\n+\n+        assertAccessDenied(\n+                alice,\n+                \"ALTER VIEW test_view_authorization.bar SET AUTHORIZATION alice\",\n+                \"Cannot set authorization for view test_view_authorization.bar to USER alice\");\n+        assertUpdate(admin, \"ALTER VIEW test_view_authorization.bar SET AUTHORIZATION alice\");\n+        assertUpdate(alice, \"ALTER VIEW test_view_authorization.bar SET AUTHORIZATION admin\");\n+\n+        assertUpdate(admin, \"DROP VIEW test_view_authorization.bar\");\n+        assertUpdate(admin, \"DROP SCHEMA test_view_authorization\");\n+    }\n+\n+    @Test\n+    public void testViewAuthorizationSecurityDefiner()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_view_authorization\");\n+        assertUpdate(admin, \"CREATE TABLE test_view_authorization.foo (col int)\");\n+        assertUpdate(admin, \"INSERT INTO test_view_authorization.foo VALUES (1)\", 1);\n+        assertUpdate(admin, \"CREATE VIEW test_view_authorization.bar SECURITY DEFINER AS SELECT * from test_view_authorization.foo\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3Njk5Mw==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r519876993", "bodyText": "Too bad it does not work. Executing current_user seems to always return the user being logged in, not the one executing the query,", "author": "skrzypo987", "createdAt": "2020-11-09T14:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MzUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg4NTE4MQ==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r519885181", "bodyText": "That is the way it should work for DEFINER.", "author": "kokosing", "createdAt": "2020-11-09T15:10:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MzUxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM2MzY4Nw==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r520363687", "bodyText": "It does not.", "author": "skrzypo987", "createdAt": "2020-11-10T08:09:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1MzUxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1NDI2Mw==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r519654263", "bodyText": "use io.prestosql.testing.sql.TestTable#randomTableSuffix so names are random", "author": "kokosing", "createdAt": "2020-11-09T09:12:52Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -853,6 +853,126 @@ public void testTableAuthorizationForRole()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testViewAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_view_authorization\");\n+        assertUpdate(admin, \"CREATE VIEW test_view_authorization.bar AS SELECT current_user AS user\");\n+\n+        assertAccessDenied(\n+                alice,\n+                \"ALTER VIEW test_view_authorization.bar SET AUTHORIZATION alice\",\n+                \"Cannot set authorization for view test_view_authorization.bar to USER alice\");\n+        assertUpdate(admin, \"ALTER VIEW test_view_authorization.bar SET AUTHORIZATION alice\");\n+        assertUpdate(alice, \"ALTER VIEW test_view_authorization.bar SET AUTHORIZATION admin\");\n+\n+        assertUpdate(admin, \"DROP VIEW test_view_authorization.bar\");\n+        assertUpdate(admin, \"DROP SCHEMA test_view_authorization\");\n+    }\n+\n+    @Test\n+    public void testViewAuthorizationSecurityDefiner()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_view_authorization\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1NDM2Mg==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r519654362", "bodyText": "same comments as above", "author": "kokosing", "createdAt": "2020-11-09T09:13:02Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -853,6 +853,126 @@ public void testTableAuthorizationForRole()\n         assertUpdate(admin, \"DROP ROLE admin\");\n     }\n \n+    @Test\n+    public void testViewAuthorization()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_view_authorization\");\n+        assertUpdate(admin, \"CREATE VIEW test_view_authorization.bar AS SELECT current_user AS user\");\n+\n+        assertAccessDenied(\n+                alice,\n+                \"ALTER VIEW test_view_authorization.bar SET AUTHORIZATION alice\",\n+                \"Cannot set authorization for view test_view_authorization.bar to USER alice\");\n+        assertUpdate(admin, \"ALTER VIEW test_view_authorization.bar SET AUTHORIZATION alice\");\n+        assertUpdate(alice, \"ALTER VIEW test_view_authorization.bar SET AUTHORIZATION admin\");\n+\n+        assertUpdate(admin, \"DROP VIEW test_view_authorization.bar\");\n+        assertUpdate(admin, \"DROP SCHEMA test_view_authorization\");\n+    }\n+\n+    @Test\n+    public void testViewAuthorizationSecurityDefiner()\n+    {\n+        Session admin = Session.builder(getQueryRunner().getDefaultSession())\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"hive\").withRole(\"hive\", new SelectedRole(ROLE, Optional.of(\"admin\"))).build())\n+                .build();\n+\n+        Session alice = testSessionBuilder()\n+                .setCatalog(getSession().getCatalog().get())\n+                .setIdentity(Identity.forUser(\"alice\").build())\n+                .build();\n+\n+        assertUpdate(admin, \"CREATE SCHEMA test_view_authorization\");\n+        assertUpdate(admin, \"CREATE TABLE test_view_authorization.foo (col int)\");\n+        assertUpdate(admin, \"INSERT INTO test_view_authorization.foo VALUES (1)\", 1);\n+        assertUpdate(admin, \"CREATE VIEW test_view_authorization.bar SECURITY DEFINER AS SELECT * from test_view_authorization.foo\");\n+        assertUpdate(admin, \"GRANT SELECT ON test_view_authorization.bar TO alice\");\n+\n+        assertQuery(alice, \"SELECT * FROM test_view_authorization.bar\", \"VALUES (1)\");\n+        assertUpdate(admin, \"ALTER VIEW test_view_authorization.bar SET AUTHORIZATION alice\");\n+        assertQueryFails(alice, \"SELECT * FROM test_view_authorization.bar\", \"Access Denied: Cannot select from table test_view_authorization.foo\");\n+\n+        assertUpdate(alice, \"ALTER VIEW test_view_authorization.bar SET AUTHORIZATION admin\");\n+        assertUpdate(admin, \"DROP VIEW test_view_authorization.bar\");\n+        assertUpdate(admin, \"DROP TABLE test_view_authorization.foo\");\n+        assertUpdate(admin, \"DROP SCHEMA test_view_authorization\");\n+    }\n+\n+    @Test\n+    public void testViewAuthorizationSecurityInvoker()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1NTg5OA==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r519655898", "bodyText": "Please add a test with hive view (where views is defined in Hive).", "author": "kokosing", "createdAt": "2020-11-09T09:15:30Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestSqlStandardAccessControlChecks.java", "diffHunk": "@@ -221,6 +221,15 @@ public void testAccessControlSetTableAuthorization()\n         bobExecutor.executeQuery(format(\"ALTER TABLE %s SET AUTHORIZATION alice\", tableName));\n     }\n \n+    @Test(groups = {AUTHORIZATION, PROFILE_SPECIFIC_TESTS})\n+    public void testAccessControlSetViewAuthorization()\n+    {\n+        assertThat(() -> bobExecutor.executeQuery(format(\"ALTER VIEW %s SET AUTHORIZATION bob\", viewName)))\n+                .failsWithMessage(format(\"Access Denied: Cannot set authorization for view default.%s to USER bob\", viewName));\n+        aliceExecutor.executeQuery(format(\"ALTER VIEW %s SET AUTHORIZATION bob\", viewName));\n+        bobExecutor.executeQuery(format(\"ALTER VIEW %s SET AUTHORIZATION alice\", viewName));\n+    }", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3NjY2NA==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r519976664", "bodyText": "I get a Hive views are not supported when using hive views. I don't think they are supported in this setup.", "author": "skrzypo987", "createdAt": "2020-11-09T17:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1NTg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1NjI2NQ==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r519656265", "bodyText": "There is missing assertion that would prove that authorization was actually set. Below line could pass from other reasons too.", "author": "kokosing", "createdAt": "2020-11-09T09:16:05Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestSqlStandardAccessControlChecks.java", "diffHunk": "@@ -221,6 +221,15 @@ public void testAccessControlSetTableAuthorization()\n         bobExecutor.executeQuery(format(\"ALTER TABLE %s SET AUTHORIZATION alice\", tableName));\n     }\n \n+    @Test(groups = {AUTHORIZATION, PROFILE_SPECIFIC_TESTS})\n+    public void testAccessControlSetViewAuthorization()\n+    {\n+        assertThat(() -> bobExecutor.executeQuery(format(\"ALTER VIEW %s SET AUTHORIZATION bob\", viewName)))\n+                .failsWithMessage(format(\"Access Denied: Cannot set authorization for view default.%s to USER bob\", viewName));\n+        aliceExecutor.executeQuery(format(\"ALTER VIEW %s SET AUTHORIZATION bob\", viewName));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY1NjU2Nw==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r519656567", "bodyText": "I guess this belongs to different commit.", "author": "kokosing", "createdAt": "2020-11-09T09:16:38Z", "path": "presto-plugin-toolkit/src/test/java/io/prestosql/plugin/base/security/TestFileBasedSystemAccessControl.java", "diffHunk": "@@ -588,13 +597,29 @@ public void testCheckCanSetTableAuthorizationForOwner()\n         accessControl.checkCanSetViewAuthorization(ALICE, new CatalogSchemaTableName(\"some-catalog\", \"aliceschema\", \"test\"), new PrestoPrincipal(PrincipalType.USER, \"some_user\"));\n     }\n \n+    @Test", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMTA4Ng==", "url": "https://github.com/trinodb/trino/pull/5789#discussion_r521931086", "bodyText": "Update commit message to:\nExtract SetAuthorizationStatement class", "author": "kokosing", "createdAt": "2020-11-12T08:43:08Z", "path": "presto-parser/src/main/java/io/prestosql/sql/tree/SetAuthorizationStatement.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "03b2f82929f35512134c16dad270535947bdbb96", "url": "https://github.com/trinodb/trino/commit/03b2f82929f35512134c16dad270535947bdbb96", "message": "Add support for ALTER VIEW SET AUTHORIZATION", "committedDate": "2020-11-12T11:26:22Z", "type": "commit"}, {"oid": "fc5b486666ef986696830258d0ff5840bbf65bc9", "url": "https://github.com/trinodb/trino/commit/fc5b486666ef986696830258d0ff5840bbf65bc9", "message": "Extract SetAuthorizationStatement class", "committedDate": "2020-11-12T11:26:22Z", "type": "commit"}, {"oid": "565d0db4d2a2a0b731dd735844cfaa36ac321549", "url": "https://github.com/trinodb/trino/commit/565d0db4d2a2a0b731dd735844cfaa36ac321549", "message": "Add product tests for changing owner of view in hive", "committedDate": "2020-11-12T11:26:22Z", "type": "commit"}, {"oid": "565d0db4d2a2a0b731dd735844cfaa36ac321549", "url": "https://github.com/trinodb/trino/commit/565d0db4d2a2a0b731dd735844cfaa36ac321549", "message": "Add product tests for changing owner of view in hive", "committedDate": "2020-11-12T11:26:22Z", "type": "forcePushed"}]}