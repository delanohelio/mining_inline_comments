{"pr_number": 5673, "pr_title": "Remove a redundant check", "pr_createdAt": "2020-10-23T10:52:16Z", "pr_url": "https://github.com/trinodb/trino/pull/5673", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUxODY4Ng==", "url": "https://github.com/trinodb/trino/pull/5673#discussion_r511518686", "bodyText": "$literal$ -> #5683\nI am concerned about >= here. This looks like a bug in Unwrap, some assumption that is not true for timestamp with time zone. @martint am i right?", "author": "findepi", "createdAt": "2020-10-24T21:57:44Z", "path": "presto-main/src/test/java/io/prestosql/sql/planner/TestUnwrapCastInComparison.java", "diffHunk": "@@ -868,6 +868,20 @@ public void testTermOrder()\n                                 values(\"A\"))));\n     }\n \n+    @Test\n+    public void testCastToTimestampWithTimeZone()\n+    {\n+        assertPlan(\"SELECT * FROM (VALUES TIMESTAMP '2017-01-02 00:00:00') t(a) WHERE a > TIMESTAMP '1970-01-01 00:00:00 UTC'\",\n+                anyTree(\n+                        filter(\"A >= \\\"@$literal$@52QIVV94KJAG6012H0D1N0119RA6LCSSVNKM8B6JTILU3JAK21IEDGHNG60HPHG7PTGMGG1EK97JIUKSEI3OIA16H860JI4Q7NTACGH10Q5H8GCI8V7V3LAS2BG4DEIRONQPD9KEBO20HDMK79EBJB19D1TONRF80EHHKRHIOF9N2ADTIE7ERBEI4NEPQ100TE8GM1LJ3MA8JC9LUM7SBOBN\\\"(BIGINT '0')\",", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUxOTg3Ng==", "url": "https://github.com/trinodb/trino/pull/5673#discussion_r511519876", "bodyText": "it's session zone dependent (so for example i get > if i add:\n Session.builder(getQueryRunner().getDefaultSession())\n                        .setTimeZoneKey(TimeZoneKey.getTimeZoneKey(\"Europe/Warsaw\"))\n                        .build(),\n\n)\nthe default zone is Apia. I'd expect to easily find values that pass for Apia with >...", "author": "findepi", "createdAt": "2020-10-24T22:12:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUxODY4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzMjE0Nw==", "url": "https://github.com/trinodb/trino/pull/5673#discussion_r511532147", "bodyText": "Yeah, that's a bug. The problem is that the implicit coercion between timestamp -> timestamp with time zone is ill-defined due to its dependency on the session timezone. In particular:\nCAST(TIMESTAMP '1970-01-01 00:00:00 UTC' AS TIMESTAMP) = TIMESTAMP '1970-01-01 00:00:00'\nbut\nCAST(TIMESTAMP '1970-01-01 00:00:00' AS TIMESTAMP WITH TIME ZONE) <> TIMESTAMP '1970-01-01 00:00:00 UTC'\n(i.e, the conversion doesn't roundtrip)\nWe can add an exception to the Unwrap optimization, but we should also consider removing the implicit coercion between those types.", "author": "martint", "createdAt": "2020-10-25T01:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUxODY4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1MzY3MA==", "url": "https://github.com/trinodb/trino/pull/5673#discussion_r511553670", "bodyText": "#5685", "author": "findepi", "createdAt": "2020-10-25T06:25:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUxODY4Ng=="}], "type": "inlineReview"}, {"oid": "ce14cd4dd5a6693647d04f9372ad8155f75f5a17", "url": "https://github.com/trinodb/trino/commit/ce14cd4dd5a6693647d04f9372ad8155f75f5a17", "message": "Support storing KdbTree in block", "committedDate": "2020-10-27T10:20:34Z", "type": "commit"}, {"oid": "9beb1e0681af3ce172906a0419a162b93860d67f", "url": "https://github.com/trinodb/trino/commit/9beb1e0681af3ce172906a0419a162b93860d67f", "message": "Remove a redundant check\n\n`LiterlEncoder` handles representation of the optimized value back in\nthe plan, so `ExpressionInterpreter` does not need to care about this.", "committedDate": "2020-10-27T10:20:59Z", "type": "commit"}, {"oid": "9beb1e0681af3ce172906a0419a162b93860d67f", "url": "https://github.com/trinodb/trino/commit/9beb1e0681af3ce172906a0419a162b93860d67f", "message": "Remove a redundant check\n\n`LiterlEncoder` handles representation of the optimized value back in\nthe plan, so `ExpressionInterpreter` does not need to care about this.", "committedDate": "2020-10-27T10:20:59Z", "type": "forcePushed"}]}