{"pr_number": 3242, "pr_title": "Test OUTER to INNER join normalization", "pr_createdAt": "2020-03-25T18:13:44Z", "pr_url": "https://github.com/trinodb/trino/pull/3242", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MjczNw==", "url": "https://github.com/trinodb/trino/pull/3242#discussion_r399162737", "bodyText": "make this test DF independent (or with DF disabled). No need to mix DF here", "author": "sopel39", "createdAt": "2020-03-27T10:18:21Z", "path": "presto-main/src/test/java/io/prestosql/sql/planner/AbstractPredicatePushdownTest.java", "diffHunk": "@@ -440,6 +443,36 @@ public void testNonDeterministicPredicateNotPushedDown()\n                                                                 ImmutableMap.of(\"CUST_KEY\", \"custkey\"))))))));\n     }\n \n+    @Test\n+    public void testNormalizeOuterJoinToInner()\n+    {\n+        Session disableJoinReordering = Session.builder(getQueryRunner().getDefaultSession())\n+                .setSystemProperty(JOIN_REORDERING_STRATEGY, \"NONE\")\n+                .build();\n+\n+        assertPlan(\n+                \"SELECT customer.name, lineitem.partkey \" +\n+                        \"FROM lineitem \" +\n+                        \"LEFT JOIN orders ON lineitem.orderkey = orders.orderkey \" +\n+                        \"INNER JOIN customer ON orders.custkey = customer.custkey \" +\n+                        \"WHERE customer.name IS NOT NULL\",\n+                disableJoinReordering,\n+                anyTree(\n+                        join(\n+                                INNER,\n+                                ImmutableList.of(equiJoinClause(\"o_custkey\", \"c_custkey\")),\n+                                anyTree(\n+                                        join(\n+                                                enableDynamicFiltering ? INNER : LEFT, // TODO (https://github.com/prestosql/presto/issues/2392) this should be INNER also when dynamic filtering is off", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxMDk0Ng==", "url": "https://github.com/trinodb/trino/pull/3242#discussion_r399210946", "bodyText": "This test is run with and without DF.\nAs you see, it is DF-dependent -- the actual results depend on whether DF is enabled.\nIn the future, eg when we do #2392, the assertion will be simplified to be always INNER, and this will look better.", "author": "findepi", "createdAt": "2020-03-27T11:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MjczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIzNzMxNA==", "url": "https://github.com/trinodb/trino/pull/3242#discussion_r399237314", "bodyText": "As you see, it is DF-dependent -- the actual results depend on whether DF is enabled.\n\nRight, but we don't need to run this test twice to make sure normalization works. Normalization part is completely independent of DFs", "author": "sopel39", "createdAt": "2020-03-27T12:44:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MjczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1ODAyNA==", "url": "https://github.com/trinodb/trino/pull/3242#discussion_r399258024", "bodyText": "So this normalization works independently from DF:\nhttps://github.com/prestosql/presto/pull/3242/files#diff-3c91106969a4d5786ab8f7ef09d73b3bR462\nand this normalization depends on DF:\nhttps://github.com/prestosql/presto/pull/3242/files#diff-3c91106969a4d5786ab8f7ef09d73b3bR466", "author": "findepi", "createdAt": "2020-03-27T13:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MjczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2OTc3MA==", "url": "https://github.com/trinodb/trino/pull/3242#discussion_r399269770", "bodyText": "I think we want to test io.prestosql.sql.planner.optimizations.PredicatePushDown.Rewriter#tryNormalizeToOuterToInnerJoin. It doesn't dependent on DFs", "author": "sopel39", "createdAt": "2020-03-27T13:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MjczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxMjgwNg==", "url": "https://github.com/trinodb/trino/pull/3242#discussion_r399312806", "bodyText": "Yes, the conversion LEFT -> INNER happens in tryNormalizeToOuterToInnerJoin. No, the conversion depends on DF, because DF adds filters which allow tryNormalizeToOuterToInnerJointo do its job. With DF disabled,tryNormalizeToOuterToInnerJoin` does not get any information it could act upon.\nThis will be alleviated once we figure out how to do #2392 without CPU hit.", "author": "findepi", "createdAt": "2020-03-27T14:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MjczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM2MTIxMg==", "url": "https://github.com/trinodb/trino/pull/3242#discussion_r399361212", "bodyText": "tryNormalizeToOuterToInnerJoin` does not get any information it could act upon.\n\ntryNormalizeToOuterToInnerJoin pre-dated DFs and worked without them too.", "author": "sopel39", "createdAt": "2020-03-27T15:47:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MjczNw=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4NjU1Mg==", "url": "https://github.com/trinodb/trino/pull/3242#discussion_r400786552", "bodyText": "add comment how this test is different", "author": "sopel39", "createdAt": "2020-03-31T09:55:42Z", "path": "presto-main/src/test/java/io/prestosql/sql/planner/AbstractPredicatePushdownTest.java", "diffHunk": "@@ -439,6 +442,52 @@ public void testNonDeterministicPredicateNotPushedDown()\n                                                                 ImmutableMap.of(\"CUST_KEY\", \"custkey\"))))))));\n     }\n \n+    @Test\n+    public void testNormalizeOuterJoinToInner()\n+    {\n+        Session disableJoinReordering = Session.builder(getQueryRunner().getDefaultSession())\n+                .setSystemProperty(JOIN_REORDERING_STRATEGY, \"NONE\")\n+                .build();\n+\n+        assertPlan(\n+                \"SELECT customer.name, orders.orderdate \" +\n+                        \"FROM orders \" +\n+                        \"LEFT JOIN customer ON orders.custkey = customer.custkey \" +\n+                        \"WHERE customer.name IS NOT NULL\",\n+                disableJoinReordering,\n+                anyTree(\n+                        join(\n+                                INNER,\n+                                ImmutableList.of(equiJoinClause(\"o_custkey\", \"c_custkey\")),\n+                                anyTree(tableScan(\"orders\", ImmutableMap.of(\"o_orderdate\", \"orderdate\", \"o_custkey\", \"custkey\"))),\n+                                anyTree(\n+                                        filter(\n+                                                \"NOT (c_name IS NULL)\",\n+                                                tableScan(\"customer\", ImmutableMap.of(\"c_custkey\", \"custkey\", \"c_name\", \"name\")))))));\n+\n+        assertPlan(", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgyNTQ3Mw==", "url": "https://github.com/trinodb/trino/pull/3242#discussion_r400825473", "bodyText": "added that this is nested join case", "author": "findepi", "createdAt": "2020-03-31T11:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4NjU1Mg=="}], "type": "inlineReview"}, {"oid": "f40908b42fa815c5333840f151d85d817eb076c1", "url": "https://github.com/trinodb/trino/commit/f40908b42fa815c5333840f151d85d817eb076c1", "message": "Test OUTER to INNER join normalization", "committedDate": "2020-03-31T11:03:38Z", "type": "commit"}, {"oid": "f40908b42fa815c5333840f151d85d817eb076c1", "url": "https://github.com/trinodb/trino/commit/f40908b42fa815c5333840f151d85d817eb076c1", "message": "Test OUTER to INNER join normalization", "committedDate": "2020-03-31T11:03:38Z", "type": "forcePushed"}]}