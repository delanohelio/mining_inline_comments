{"pr_number": 5465, "pr_title": "Fix timestamps in system.runtime.queries", "pr_createdAt": "2020-10-08T09:22:45Z", "pr_url": "https://github.com/trinodb/trino/pull/5465", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3MzU0Nw==", "url": "https://github.com/trinodb/trino/pull/5465#discussion_r501573547", "bodyText": "#5464", "author": "findepi", "createdAt": "2020-10-08T09:23:02Z", "path": "presto-tests/src/test/java/io/prestosql/connector/system/TestSystemConnector.java", "diffHunk": "@@ -100,6 +107,36 @@ public void tearDown()\n         executor.shutdownNow();\n     }\n \n+    @Test\n+    public void testRuntimeQueriesTimestamps()\n+    {\n+        ZonedDateTime timeBefore = ZonedDateTime.now();\n+        computeActual(\"SELECT 1\");\n+        MaterializedResult result = computeActual(\"\" +\n+                \"SELECT max(created), max(started), max(last_heartbeat), max(\\\"end\\\") \" +\n+                \"FROM system.runtime.queries\");\n+        ZonedDateTime timeAfter = ZonedDateTime.now();\n+\n+        MaterializedRow row = Iterables.getOnlyElement(result.toTestTypes().getMaterializedRows());\n+        List<Object> fields = row.getFields();\n+        assertThat(fields).hasSize(4);\n+        for (int i = 0; i < fields.size(); i++) {\n+            final int fieldNumber = i;\n+            Object value = fields.get(fieldNumber);\n+            assertThat(value)\n+                    .as(\"value for field \" + fieldNumber)\n+                    .isNotNull()\n+                    .isInstanceOfSatisfying(LocalDateTime.class, localDatetime -> {\n+                        // TODO (https://github.com/prestosql/presto/issues/5464) map to `timestamp with time zone`", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYyNDk1MA==", "url": "https://github.com/trinodb/trino/pull/5465#discussion_r501624950", "bodyText": "I am a bit concerned about backward compatibility of this change. Not sure how commonly are those system schemas used by Presto users.", "author": "losipiuk", "createdAt": "2020-10-08T10:47:45Z", "path": "presto-main/src/main/java/io/prestosql/connector/system/TransactionsSystemTable.java", "diffHunk": "@@ -62,7 +65,7 @@ public TransactionsSystemTable(Metadata metadata, TransactionManager transaction\n                 .column(\"isolation_level\", createUnboundedVarcharType())\n                 .column(\"read_only\", BOOLEAN)\n                 .column(\"auto_commit_context\", BOOLEAN)\n-                .column(\"create_time\", TIMESTAMP_MILLIS)\n+                .column(\"create_time\", TIMESTAMP_TZ_MILLIS)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNTY0Mg==", "url": "https://github.com/trinodb/trino/pull/5465#discussion_r501635642", "bodyText": "See\n#4772\n#4756\n#4753\n#4752\ni guess system connector simply got missed during that effort, but @electrum @dain may know better.", "author": "findepi", "createdAt": "2020-10-08T11:07:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYyNDk1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzOTEyNg==", "url": "https://github.com/trinodb/trino/pull/5465#discussion_r501639126", "bodyText": "fair", "author": "losipiuk", "createdAt": "2020-10-08T11:14:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYyNDk1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYyNTI2Mg==", "url": "https://github.com/trinodb/trino/pull/5465#discussion_r501625262", "bodyText": "possible?", "author": "losipiuk", "createdAt": "2020-10-08T10:48:21Z", "path": "presto-main/src/main/java/io/prestosql/connector/system/TransactionsSystemTable.java", "diffHunk": "@@ -114,4 +117,13 @@ private static Block createStringsBlock(List<CatalogName> values)\n         }\n         return builder.build();\n     }\n+\n+    private static Long toTimestampWithTimeZoneMillis(DateTime dateTime)\n+    {\n+        if (dateTime == null) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNTc4Ng==", "url": "https://github.com/trinodb/trino/pull/5465#discussion_r501635786", "bodyText": "idk", "author": "findepi", "createdAt": "2020-10-08T11:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYyNTI2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNzEyMA==", "url": "https://github.com/trinodb/trino/pull/5465#discussion_r501637120", "bodyText": "fixed", "author": "findepi", "createdAt": "2020-10-08T11:10:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYyNTI2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYyODExMQ==", "url": "https://github.com/trinodb/trino/pull/5465#discussion_r501628111", "bodyText": "can you add test for system.runtime.transactions?", "author": "losipiuk", "createdAt": "2020-10-08T10:53:27Z", "path": "presto-tests/src/test/java/io/prestosql/connector/system/TestSystemConnector.java", "diffHunk": "@@ -100,6 +105,52 @@ public void tearDown()\n         executor.shutdownNow();\n     }\n \n+    @Test\n+    public void testRuntimeQueriesTimestamps()\n+    {\n+        ZonedDateTime timeBefore = ZonedDateTime.now();\n+        computeActual(\"SELECT 1\");\n+        MaterializedResult result = computeActual(\"\" +\n+                \"SELECT max(created), max(started), max(last_heartbeat), max(\\\"end\\\") \" +\n+                \"FROM system.runtime.queries\");\n+        ZonedDateTime timeAfter = ZonedDateTime.now();\n+\n+        MaterializedRow row = Iterables.getOnlyElement(result.toTestTypes().getMaterializedRows());\n+        List<Object> fields = row.getFields();\n+        assertThat(fields).hasSize(4);\n+        for (int i = 0; i < fields.size(); i++) {\n+            Object value = fields.get(i);\n+            assertThat((ZonedDateTime) value)\n+                    .as(\"value for field \" + i)\n+                    .isNotNull()\n+                    .isAfterOrEqualTo(timeBefore)\n+                    .isBeforeOrEqualTo(timeAfter);\n+        }\n+    }\n+\n+    @Test\n+    public void testRuntimeTasksTimestamps()\n+    {\n+        ZonedDateTime timeBefore = ZonedDateTime.now();\n+        computeActual(\"SELECT 1\");\n+        MaterializedResult result = computeActual(\"\" +\n+                \"SELECT max(created), max(start), max(last_heartbeat), max(\\\"end\\\") \" +\n+                \"FROM system.runtime.tasks\");\n+        ZonedDateTime timeAfter = ZonedDateTime.now();\n+\n+        MaterializedRow row = Iterables.getOnlyElement(result.toTestTypes().getMaterializedRows());\n+        List<Object> fields = row.getFields();\n+        assertThat(fields).hasSize(4);\n+        for (int i = 0; i < fields.size(); i++) {\n+            Object value = fields.get(i);\n+            assertThat((ZonedDateTime) value)\n+                    .as(\"value for field \" + i)\n+                    .isNotNull()\n+                    .isAfterOrEqualTo(timeBefore)\n+                    .isBeforeOrEqualTo(timeAfter);\n+        }\n+    }\n+", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzODc5NA==", "url": "https://github.com/trinodb/trino/pull/5465#discussion_r501638794", "bodyText": "added", "author": "findepi", "createdAt": "2020-10-08T11:13:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYyODExMQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1MjEwOA==", "url": "https://github.com/trinodb/trino/pull/5465#discussion_r501852108", "bodyText": "We can do a sanity check to make the test failure reason obvious in case the system clock happens to be adjusted in between the calls\nassertThat(timeAfter).isAfterOrEqualTo(timeBefore);", "author": "electrum", "createdAt": "2020-10-08T16:25:46Z", "path": "presto-tests/src/test/java/io/prestosql/connector/system/TestSystemConnector.java", "diffHunk": "@@ -100,6 +107,36 @@ public void tearDown()\n         executor.shutdownNow();\n     }\n \n+    @Test\n+    public void testRuntimeQueriesTimestamps()\n+    {\n+        ZonedDateTime timeBefore = ZonedDateTime.now();\n+        computeActual(\"SELECT 1\");\n+        MaterializedResult result = computeActual(\"\" +\n+                \"SELECT max(created), max(started), max(last_heartbeat), max(\\\"end\\\") \" +\n+                \"FROM system.runtime.queries\");\n+        ZonedDateTime timeAfter = ZonedDateTime.now();\n+", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwMDAxOQ==", "url": "https://github.com/trinodb/trino/pull/5465#discussion_r501900019", "bodyText": "if the clock is adjusted, we still can fail, even if timeAfter >= timeBefore, so not sure how helpful it would be", "author": "findepi", "createdAt": "2020-10-08T17:43:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1MjEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1Mzc0Nw==", "url": "https://github.com/trinodb/trino/pull/5465#discussion_r501853747", "bodyText": "We used the server time zone for JmxRecordSetProvider since that seems like the right thing to return. If the administrator chooses to run their server in a specific time zone, then that's probably what they want to see when looking at system tables. cc @dain", "author": "electrum", "createdAt": "2020-10-08T16:28:24Z", "path": "presto-main/src/main/java/io/prestosql/connector/system/QuerySystemTable.java", "diffHunk": "@@ -157,12 +158,12 @@ private static Long toMillis(Duration duration)\n         return duration.toMillis();\n     }\n \n-    // TODO (https://github.com/prestosql/presto/issues/5464) map to timestamp with time zone\n-    private static Long toTimeStamp(DateTime dateTime)\n+    private static Long toTimestampWithTimeZoneMillis(DateTime dateTime)\n     {\n         if (dateTime == null) {\n             return null;\n         }\n-        return dateTime.getMillis() * MICROSECONDS_PER_MILLISECOND;\n+        // dateTime.getZone() is the server zone, should be of no interest to the user", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkwMTExNA==", "url": "https://github.com/trinodb/trino/pull/5465#discussion_r501901114", "bodyText": "If we had an \"instant\" type, we would map to that. In the absence of \"instant\" type, we need to fill some zone, an we usually fill in UTC. eg\nhttps://github.com/prestosql/presto/blob/fbd4ca7f6ca1326a077fd06cd33b687cbfe17cf2/presto-postgresql/src/main/java/io/prestosql/plugin/postgresql/PostgreSqlClient.java#L617\nhttps://github.com/prestosql/presto/blob/91dbe5149ae593fc8f86d36a304f1f7e8dc9175c/presto-cassandra/src/main/java/io/prestosql/plugin/cassandra/CassandraRecordCursor.java#L109", "author": "findepi", "createdAt": "2020-10-08T17:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1Mzc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1OTQ4Ng==", "url": "https://github.com/trinodb/trino/pull/5465#discussion_r502259486", "bodyText": "Also, the problem with server zone is that it may be a political zone.\nPresto engine has no problem representing (point-in-time, zone) pairs.\nHowever, due to how they are formatted for the client, client can no longer distinguish values within\nsummer\u2192winter DST change.\npresto> SELECT\n     ->     increment,\n     ->     from_unixtime(base + increment * 3600, 'America/Los_Angeles')\n     -> FROM (VALUES(1572766200)) t(base)\n     -> CROSS JOIN UNNEST(sequence(0, 3)) u(increment);\n     ->\n increment |                    _col1\n-----------+---------------------------------------------\n         0 | 2019-11-03 00:30:00.000 America/Los_Angeles\n         1 | 2019-11-03 01:30:00.000 America/Los_Angeles\n         2 | 2019-11-03 01:30:00.000 America/Los_Angeles\n         3 | 2019-11-03 02:30:00.000 America/Los_Angeles\n(4 rows)", "author": "findepi", "createdAt": "2020-10-09T08:09:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1Mzc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2ODM1MA==", "url": "https://github.com/trinodb/trino/pull/5465#discussion_r502268350", "bodyText": "#5488", "author": "findepi", "createdAt": "2020-10-09T08:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1Mzc0Nw=="}], "type": "inlineReview"}, {"oid": "864b902deaaea96f5a6e1903b778e6408fc4865c", "url": "https://github.com/trinodb/trino/commit/864b902deaaea96f5a6e1903b778e6408fc4865c", "message": "Fix timestamps in system.runtime.queries", "committedDate": "2020-10-08T21:17:48Z", "type": "commit"}, {"oid": "8d4845d8da5e2aea29b6567dd26ea9e95d14e712", "url": "https://github.com/trinodb/trino/commit/8d4845d8da5e2aea29b6567dd26ea9e95d14e712", "message": "Fix timestamps in system.runtime.tasks", "committedDate": "2020-10-08T21:17:48Z", "type": "commit"}, {"oid": "2bdef21f83b2d106924e855cac78717e4f2f3ab6", "url": "https://github.com/trinodb/trino/commit/2bdef21f83b2d106924e855cac78717e4f2f3ab6", "message": "Fix timestamps in system.runtime.transactions", "committedDate": "2020-10-08T21:17:48Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "45c53291e903dd96a640b3390ab6884b8a9b3368", "url": "https://github.com/trinodb/trino/commit/45c53291e903dd96a640b3390ab6884b8a9b3368", "message": "Switch to timestamp with time zone in system.runtime.*", "committedDate": "2020-10-09T07:40:41Z", "type": "commit"}, {"oid": "45c53291e903dd96a640b3390ab6884b8a9b3368", "url": "https://github.com/trinodb/trino/commit/45c53291e903dd96a640b3390ab6884b8a9b3368", "message": "Switch to timestamp with time zone in system.runtime.*", "committedDate": "2020-10-09T07:40:41Z", "type": "forcePushed"}]}