{"pr_number": 4411, "pr_title": "Fix JDBC metadata for timestamp types", "pr_createdAt": "2020-07-09T20:18:12Z", "pr_url": "https://github.com/trinodb/trino/pull/4411", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyODM0Ng==", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r452728346", "bodyText": "Is TIMESTAMP_WITH_TIME_ZONE deprecated? Are there there any other usages of this? I think we should remove these contants.", "author": "kokosing", "createdAt": "2020-07-10T09:21:09Z", "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -372,10 +370,10 @@ static int jdbcDataType(Type type)\n         if (type.equals(TIME_WITH_TIME_ZONE)) {\n             return Types.TIME_WITH_TIMEZONE;\n         }\n-        if (type.equals(TIMESTAMP)) {\n+        if (type instanceof TimestampType) {\n             return Types.TIMESTAMP;\n         }\n-        if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0MzU5OA==", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r452843598", "bodyText": "Yes, but we can\u2019t remove them yet due to backward compatibility concerns.", "author": "martint", "createdAt": "2020-07-10T13:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyODM0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NDQzNA==", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453094434", "bodyText": "i think 5 may be actual max", "author": "findepi", "createdAt": "2020-07-10T21:55:37Z", "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -428,11 +426,24 @@ static Integer columnSize(Type type)\n         if (type.equals(DATE)) {\n             return 14; // +5881580-07-11 (2**31-1 days)\n         }\n-        if (type.equals(TIMESTAMP)) {\n-            return 15 + 8;\n-        }\n-        if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n-            return 15 + 8 + 6;\n+        if (type instanceof TimestampType) {\n+            // 1 digit for year sign\n+            // 6 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"\n+            // min(p, 1) for the fractional second period (i.e., no period if p == 0)\n+            // p for the fractional digits\n+            int precision = ((TimestampType) type).getPrecision();\n+            return 1 + 6 + 15 + Math.min(precision, 1) + precision;\n+        }\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            // 1 digit for year sign\n+            // 6 digits for year", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NDYxMQ==", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453094611", "bodyText": "static import", "author": "findepi", "createdAt": "2020-07-10T21:56:06Z", "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -428,11 +426,24 @@ static Integer columnSize(Type type)\n         if (type.equals(DATE)) {\n             return 14; // +5881580-07-11 (2**31-1 days)\n         }\n-        if (type.equals(TIMESTAMP)) {\n-            return 15 + 8;\n-        }\n-        if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n-            return 15 + 8 + 6;\n+        if (type instanceof TimestampType) {\n+            // 1 digit for year sign\n+            // 6 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"\n+            // min(p, 1) for the fractional second period (i.e., no period if p == 0)\n+            // p for the fractional digits\n+            int precision = ((TimestampType) type).getPrecision();\n+            return 1 + 6 + 15 + Math.min(precision, 1) + precision;\n+        }\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            // 1 digit for year sign\n+            // 6 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"\n+            // min(p, 1) for the fractional second period (i.e., no period if p == 0)\n+            // p for the fractional digits\n+            // 6 for timezone offset\n+            int precision = ((TimestampWithTimeZoneType) type).getPrecision();\n+            return 1 + 6 + 15 + Math.min(precision, 1) + precision + 6;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NDY5Mg==", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453094692", "bodyText": "this can be a named zone", "author": "findepi", "createdAt": "2020-07-10T21:56:20Z", "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -428,11 +426,24 @@ static Integer columnSize(Type type)\n         if (type.equals(DATE)) {\n             return 14; // +5881580-07-11 (2**31-1 days)\n         }\n-        if (type.equals(TIMESTAMP)) {\n-            return 15 + 8;\n-        }\n-        if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n-            return 15 + 8 + 6;\n+        if (type instanceof TimestampType) {\n+            // 1 digit for year sign\n+            // 6 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"\n+            // min(p, 1) for the fractional second period (i.e., no period if p == 0)\n+            // p for the fractional digits\n+            int precision = ((TimestampType) type).getPrecision();\n+            return 1 + 6 + 15 + Math.min(precision, 1) + precision;\n+        }\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            // 1 digit for year sign\n+            // 6 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"\n+            // min(p, 1) for the fractional second period (i.e., no period if p == 0)\n+            // p for the fractional digits\n+            // 6 for timezone offset", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NjM1Nw==", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453096357", "bodyText": "I realize. Not sure what to do about it, though. Where does the current + 6 come from?", "author": "martint", "createdAt": "2020-07-10T22:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NDY5Mg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1OTkxNQ==", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453159915", "bodyText": "Looks reasonable to me. Is it what eg Oracle does? they support named zones as well.\nThe assumption is that SystemV zones do not have long names, right?", "author": "findepi", "createdAt": "2020-07-11T05:47:59Z", "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -94,6 +94,10 @@\n     public static final SchemaTableName NAME = new SchemaTableName(\"jdbc\", \"columns\");\n \n     private static final int MAX_DOMAIN_SIZE = 100;\n+    private static final int MAX_TIMEZONE_LENGTH = ZoneId.getAvailableZoneIds().stream()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwNDY0OQ==", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453804649", "bodyText": "I haven't tried with Oracle. Let me check that.", "author": "martint", "createdAt": "2020-07-13T17:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1OTkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxNTIyNQ==", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453815225", "bodyText": "Oracle seems broken. It returns 13 as the display size for timestamp with time zone regardless of the precision. (13 can't even fit a timestamp with precision = 0 -- maybe if you represent it as +YYMMDDHHMMSS). Also, getPrecision returns 0 always.", "author": "martint", "createdAt": "2020-07-13T17:33:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1OTkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1OTk4Ng==", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453159986", "bodyText": "6", "author": "findepi", "createdAt": "2020-07-11T05:48:51Z", "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -428,11 +432,25 @@ static Integer columnSize(Type type)\n         if (type.equals(DATE)) {\n             return 14; // +5881580-07-11 (2**31-1 days)\n         }\n-        if (type.equals(TIMESTAMP)) {\n-            return 15 + 8;\n-        }\n-        if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n-            return 15 + 8 + 6;\n+        if (type instanceof TimestampType) {\n+            // 1 digit for year sign\n+            // 5 digits for year", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2MDAwOQ==", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453160009", "bodyText": "I believe it's 5, but please check", "author": "findepi", "createdAt": "2020-07-11T05:49:13Z", "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -428,11 +432,25 @@ static Integer columnSize(Type type)\n         if (type.equals(DATE)) {\n             return 14; // +5881580-07-11 (2**31-1 days)\n         }\n-        if (type.equals(TIMESTAMP)) {\n-            return 15 + 8;\n-        }\n-        if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n-            return 15 + 8 + 6;\n+        if (type instanceof TimestampType) {\n+            // 1 digit for year sign\n+            // 5 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"\n+            // min(p, 1) for the fractional second period (i.e., no period if p == 0)\n+            // p for the fractional digits\n+            int precision = ((TimestampType) type).getPrecision();\n+            return 1 + 5 + 15 + min(precision, 1) + precision;\n+        }\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            // 1 digit for year sign\n+            // 5 digits for year", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2MDM2MQ==", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453160361", "bodyText": "timestamp can definitely acommodate 6 digit years (and we have tests for that),\nbut i don't remember whether i checked the max timestamp and whether it could have 7.\nIIRC  timestamp with time zone ends up at 5 digit years", "author": "findepi", "createdAt": "2020-07-11T05:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2MDAwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2MDA0MA==", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453160040", "bodyText": "digits -> characters", "author": "findepi", "createdAt": "2020-07-11T05:49:36Z", "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -428,11 +432,25 @@ static Integer columnSize(Type type)\n         if (type.equals(DATE)) {\n             return 14; // +5881580-07-11 (2**31-1 days)\n         }\n-        if (type.equals(TIMESTAMP)) {\n-            return 15 + 8;\n-        }\n-        if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n-            return 15 + 8 + 6;\n+        if (type instanceof TimestampType) {\n+            // 1 digit for year sign\n+            // 5 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2MDA0Mg==", "url": "https://github.com/trinodb/trino/pull/4411#discussion_r453160042", "bodyText": "digits -> characters", "author": "findepi", "createdAt": "2020-07-11T05:49:41Z", "path": "presto-main/src/main/java/io/prestosql/connector/system/jdbc/ColumnJdbcTable.java", "diffHunk": "@@ -428,11 +432,25 @@ static Integer columnSize(Type type)\n         if (type.equals(DATE)) {\n             return 14; // +5881580-07-11 (2**31-1 days)\n         }\n-        if (type.equals(TIMESTAMP)) {\n-            return 15 + 8;\n-        }\n-        if (type.equals(TIMESTAMP_WITH_TIME_ZONE)) {\n-            return 15 + 8 + 6;\n+        if (type instanceof TimestampType) {\n+            // 1 digit for year sign\n+            // 5 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"\n+            // min(p, 1) for the fractional second period (i.e., no period if p == 0)\n+            // p for the fractional digits\n+            int precision = ((TimestampType) type).getPrecision();\n+            return 1 + 5 + 15 + min(precision, 1) + precision;\n+        }\n+        if (type instanceof TimestampWithTimeZoneType) {\n+            // 1 digit for year sign\n+            // 5 digits for year\n+            // 15 digits for \"-MM-DD HH:MM:SS\"", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "9a6bdfe6e237d41012e9e04fe7fdb98b3affe201", "url": "https://github.com/trinodb/trino/commit/9a6bdfe6e237d41012e9e04fe7fdb98b3affe201", "message": "Fix JDBC metadata for timestamp types", "committedDate": "2020-07-21T01:07:36Z", "type": "commit"}, {"oid": "9a6bdfe6e237d41012e9e04fe7fdb98b3affe201", "url": "https://github.com/trinodb/trino/commit/9a6bdfe6e237d41012e9e04fe7fdb98b3affe201", "message": "Fix JDBC metadata for timestamp types", "committedDate": "2020-07-21T01:07:36Z", "type": "forcePushed"}]}