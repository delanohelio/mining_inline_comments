{"pr_number": 6310, "pr_title": "Support picoseond date/times in DistributedQueryRunner", "pr_createdAt": "2020-12-11T16:05:47Z", "pr_url": "https://github.com/trinodb/trino/pull/6310", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3OTk1MQ==", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541079951", "bodyText": "what does it mean that \"X\" matches \"X\" ?", "author": "losipiuk", "createdAt": "2020-12-11T16:43:32Z", "path": "presto-tests/src/test/java/io/prestosql/tests/AbstractTestEngineOnlyQueries.java", "diffHunk": "@@ -109,6 +109,11 @@ public void testTimeLiterals()\n         // TODO https://github.com/prestosql/presto/issues/37\n         // TODO assertQuery(chicago, \"SELECT TIME '3:04:05'\");\n         // TODO assertQuery(kathmandu, \"SELECT TIME '3:04:05'\");\n+\n+        assertThat(query(\"SELECT TIME '01:23:45.123'\")).matches(\"SELECT TIME '01:23:45.123'\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MTU3NQ==", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541091575", "bodyText": "it means that the values was succesfully processed by the query runner (which wasn't the cxase before the fix)\nmaybe i should another add a test when the values differ and verify the message", "author": "findepi", "createdAt": "2020-12-11T17:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3OTk1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwOTMzMA==", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541309330", "bodyText": "added more apparent sense to the code, ptal", "author": "findepi", "createdAt": "2020-12-11T21:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3OTk1MQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwOTY5Nw==", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541309697", "bodyText": "cc @martint", "author": "findepi", "createdAt": "2020-12-11T21:27:26Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimeWithTimeZone.java", "diffHunk": "@@ -67,7 +67,7 @@ public boolean equals(Object o)\n         }\n \n         SqlTimeWithTimeZone other = (SqlTimeWithTimeZone) o;\n-        return precision == other.precision && normalizePicos(picos, offsetMinutes) == normalizePicos(other.picos, offsetMinutes);\n+        return precision == other.precision && normalizePicos(picos, offsetMinutes) == normalizePicos(other.picos, other.offsetMinutes);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyNDkwNw==", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541324907", "bodyText": "Good catch!", "author": "martint", "createdAt": "2020-12-11T21:43:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwOTY5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzNjUyNg==", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541336526", "bodyText": "Actually i think we should remove the normalize from here and compare both: picos, offsetMinutes by value.\nI think we don't have to carry SQL semantics over to this class.\nAlso, we don't do this in io.prestosql.spi.type.SqlTimestampWithTimeZone#equals either", "author": "findepi", "createdAt": "2020-12-11T21:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwOTY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyOTA0NQ==", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541329045", "bodyText": "Why is this outside the lambda below and as a separate variable?", "author": "martint", "createdAt": "2020-12-11T21:48:31Z", "path": "presto-tests/src/test/java/io/prestosql/tests/AbstractTestEngineOnlyQueries.java", "diffHunk": "@@ -111,6 +113,25 @@ public void testTimeLiterals()\n         // TODO assertQuery(kathmandu, \"SELECT TIME '3:04:05'\");\n     }\n \n+    /**\n+     * Tests query runner with results of vaious precisions, and query assert.\n+     */\n+    @Test\n+    public void testTimeQueryResult()\n+    {\n+        assertThat(query(\"SELECT TIME '01:23:45.123'\")).matches(\"SELECT TIME '01:23:45.123'\");\n+        assertThat(query(\"SELECT TIME '01:23:45.123456'\")).matches(\"SELECT TIME '01:23:45.123456'\");\n+        assertThat(query(\"SELECT TIME '01:23:45.123456789'\")).matches(\"SELECT TIME '01:23:45.123456789'\");\n+        assertThat(query(\"SELECT TIME '01:23:45.123456789012'\")).matches(\"SELECT TIME '01:23:45.123456789012'\");\n+\n+        QueryAssert queryAssert = assertThat(query(\"SELECT TIME '01:23:45.123456789012'\"));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTM4NTM0Ng==", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541385346", "bodyText": "So that assertThatThrowBy closure is as small as possible.", "author": "findepi", "createdAt": "2020-12-11T22:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyOTA0NQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "0df96b403ec9673ea8283a744eb80a326948ed37", "url": "https://github.com/trinodb/trino/commit/0df96b403ec9673ea8283a744eb80a326948ed37", "message": "Split test method", "committedDate": "2020-12-12T18:38:08Z", "type": "commit"}, {"oid": "b3d5c7f3ea56edc184d6fd852456746943c5ae87", "url": "https://github.com/trinodb/trino/commit/b3d5c7f3ea56edc184d6fd852456746943c5ae87", "message": "Fix SqlTimeWithTimeZone#equals wrt. offset", "committedDate": "2020-12-12T18:45:06Z", "type": "commit"}, {"oid": "885768d90c28c3cc077c4067aa7faed999cf7cf9", "url": "https://github.com/trinodb/trino/commit/885768d90c28c3cc077c4067aa7faed999cf7cf9", "message": "Fix long timestamp with time zone constants handling\n\n`PageFunctionCompiler` cache is keyed by the `RowExpression`, and in\ncase of constants, the constant's stack representation `equals` is\nused.\n\nIn case of `LongTimestampWithTimeZone`, the `equals` followed SQL\nspecification for `timestamp with time zone` equality (compare point in\ntime, ignore zone) and so different values were being treated as equal.\n\nThe stack representation's `equals` does not have to, however, adhere to\nSQL specifiation and can be value-based instead. The `Type` object\nprovides the equality from SQL perspective. In fact, for short\n`timestamp with time zone` types, or for `time with time zone` types,\nthe stack representation is `long` (boxed to `Long` in\n`ConstantExpression`) and obviously does not apply SQL semantics for\ncomparison.", "committedDate": "2020-12-12T18:45:06Z", "type": "commit"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgxNDU0Ng==", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r541814546", "bodyText": "Typo in commit message: :\"picoseond\"", "author": "martint", "createdAt": "2020-12-13T01:03:00Z", "path": "presto-testing/src/main/java/io/prestosql/testing/TestingPrestoClient.java", "diffHunk": "@@ -79,7 +79,13 @@\n public class TestingPrestoClient", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwODI3Mg==", "url": "https://github.com/trinodb/trino/pull/6310#discussion_r542008272", "bodyText": "thanks, fixed", "author": "findepi", "createdAt": "2020-12-13T21:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgxNDU0Ng=="}], "type": "inlineReview"}, {"oid": "17851698441d04b000d734f635d3ee4746243ef0", "url": "https://github.com/trinodb/trino/commit/17851698441d04b000d734f635d3ee4746243ef0", "message": "Support picosecond date/times in DistributedQueryRunner", "committedDate": "2020-12-13T21:21:23Z", "type": "commit"}, {"oid": "cf3e8b28c66b4bc81a2f8c5f95db3d3296dea816", "url": "https://github.com/trinodb/trino/commit/cf3e8b28c66b4bc81a2f8c5f95db3d3296dea816", "message": "Make SqlTimeWithTimeZone#equals value-based\n\nPer SQL specification, comparison between `time with time zone` values\ncompares them after normalizing to UTC. This logic, however, does not\nneed to be applied in the `SqlTimeWithTimeZone` class. The class can be\npurely value-based, the same way `SqlTimestampWithTimeZone` is.", "committedDate": "2020-12-13T21:21:34Z", "type": "commit"}, {"oid": "cf3e8b28c66b4bc81a2f8c5f95db3d3296dea816", "url": "https://github.com/trinodb/trino/commit/cf3e8b28c66b4bc81a2f8c5f95db3d3296dea816", "message": "Make SqlTimeWithTimeZone#equals value-based\n\nPer SQL specification, comparison between `time with time zone` values\ncompares them after normalizing to UTC. This logic, however, does not\nneed to be applied in the `SqlTimeWithTimeZone` class. The class can be\npurely value-based, the same way `SqlTimestampWithTimeZone` is.", "committedDate": "2020-12-13T21:21:34Z", "type": "forcePushed"}]}