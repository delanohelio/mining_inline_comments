{"pr_number": 3186, "pr_title": "Add SqlBaseParser initializer hook and refreshable ATN caches", "pr_createdAt": "2020-03-20T22:34:27Z", "pr_url": "https://github.com/trinodb/trino/pull/3186", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzOTc3Nw==", "url": "https://github.com/trinodb/trino/pull/3186#discussion_r395939777", "bodyText": "Suppress the warning so the IDE won't flag it\n@SuppressWarnings(\"ObjectEquality\")", "author": "electrum", "createdAt": "2020-03-21T00:16:12Z", "path": "presto-parser/src/main/java/io/prestosql/sql/parser/AntlrATNCacheFields.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.prestosql.sql.parser;\n+\n+import org.antlr.v4.runtime.Lexer;\n+import org.antlr.v4.runtime.Parser;\n+import org.antlr.v4.runtime.atn.ATN;\n+import org.antlr.v4.runtime.atn.LexerATNSimulator;\n+import org.antlr.v4.runtime.atn.ParserATNSimulator;\n+import org.antlr.v4.runtime.atn.PredictionContextCache;\n+import org.antlr.v4.runtime.dfa.DFA;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class AntlrATNCacheFields\n+{\n+    private final ATN atn;\n+    private final PredictionContextCache predictionContextCache;\n+    private final DFA[] decisionToDFA;\n+\n+    public AntlrATNCacheFields(ATN atn)\n+    {\n+        this.atn = requireNonNull(atn, \"atn is null\");\n+        this.predictionContextCache = new PredictionContextCache();\n+        this.decisionToDFA = createDecisionToDFA(atn);\n+    }\n+\n+    public void configureLexer(Lexer lexer)\n+    {\n+        requireNonNull(lexer, \"lexer is null\");\n+        // Intentional identity equals comparison", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzOTk2OA==", "url": "https://github.com/trinodb/trino/pull/3186#discussion_r395939968", "bodyText": "Can we use checkArgument for this? The parser depends on Guava already.\nAlso, we avoid using this. unless it's required", "author": "electrum", "createdAt": "2020-03-21T00:17:27Z", "path": "presto-parser/src/main/java/io/prestosql/sql/parser/AntlrATNCacheFields.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.prestosql.sql.parser;\n+\n+import org.antlr.v4.runtime.Lexer;\n+import org.antlr.v4.runtime.Parser;\n+import org.antlr.v4.runtime.atn.ATN;\n+import org.antlr.v4.runtime.atn.LexerATNSimulator;\n+import org.antlr.v4.runtime.atn.ParserATNSimulator;\n+import org.antlr.v4.runtime.atn.PredictionContextCache;\n+import org.antlr.v4.runtime.dfa.DFA;\n+\n+import static java.lang.String.format;\n+import static java.util.Objects.requireNonNull;\n+\n+public final class AntlrATNCacheFields\n+{\n+    private final ATN atn;\n+    private final PredictionContextCache predictionContextCache;\n+    private final DFA[] decisionToDFA;\n+\n+    public AntlrATNCacheFields(ATN atn)\n+    {\n+        this.atn = requireNonNull(atn, \"atn is null\");\n+        this.predictionContextCache = new PredictionContextCache();\n+        this.decisionToDFA = createDecisionToDFA(atn);\n+    }\n+\n+    public void configureLexer(Lexer lexer)\n+    {\n+        requireNonNull(lexer, \"lexer is null\");\n+        // Intentional identity equals comparison\n+        if (this.atn != lexer.getATN()) {\n+            throw new IllegalArgumentException(format(\"Lexer ATN mismatch: expected %s, found %s\", this.atn, lexer.getATN()));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk0MTE3MA==", "url": "https://github.com/trinodb/trino/pull/3186#discussion_r395941170", "bodyText": "Re: checkArgument- I\u2019m avoiding it here because it would incur boxing on the happy / fast path since we have more than 1 argument to interpolate.\nRe: the use of \u201cthis\u201d, I agree in this form it\u2019s become less necessary (refactored code) but doesn\u2019t seem to hurt given the cryptic nature of these field names and the reliance on object identity for correctness.", "author": "pettyjamesm", "createdAt": "2020-03-21T00:25:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzOTk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAxMzc2OQ==", "url": "https://github.com/trinodb/trino/pull/3186#discussion_r396013769", "bodyText": "There's actually an overload for the two argument Object variant in Guava 20", "author": "electrum", "createdAt": "2020-03-21T17:54:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzOTk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MzM0Ng==", "url": "https://github.com/trinodb/trino/pull/3186#discussion_r396473346", "bodyText": "Ah, didn't realize will change.", "author": "pettyjamesm", "createdAt": "2020-03-23T14:02:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkzOTk2OA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NDkyNA==", "url": "https://github.com/trinodb/trino/pull/3186#discussion_r399564924", "bodyText": "I'd just call this field initializer for conciseness.", "author": "martint", "createdAt": "2020-03-27T22:23:22Z", "path": "presto-parser/src/main/java/io/prestosql/sql/parser/SqlParser.java", "diffHunk": "@@ -67,6 +69,7 @@ public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol, int\n             .ignoredRule(SqlBaseParser.RULE_nonReserved)\n             .build();\n \n+    private final BiConsumer<SqlBaseLexer, SqlBaseParser> sqlBaseParserInitializer;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyNTY4NA==", "url": "https://github.com/trinodb/trino/pull/3186#discussion_r400425684", "bodyText": "Rebased the PR and renamed the field.", "author": "pettyjamesm", "createdAt": "2020-03-30T19:04:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2NDkyNA=="}], "type": "inlineReview"}, {"oid": "09b475894e873c0c475a2f79124f8f20f554a33f", "url": "https://github.com/trinodb/trino/commit/09b475894e873c0c475a2f79124f8f20f554a33f", "message": "Add SqlBaseParser initializer hook and refreshable ATN caches\n\nAdds utility classes that enable explicit initialization and\nmanagement of antlr parser and lexer ATN caches. Without them,\nthese fields are static constants that can grow to retain multiple\nGB of heap space depending on input query strings.", "committedDate": "2020-03-30T19:03:51Z", "type": "commit"}, {"oid": "09b475894e873c0c475a2f79124f8f20f554a33f", "url": "https://github.com/trinodb/trino/commit/09b475894e873c0c475a2f79124f8f20f554a33f", "message": "Add SqlBaseParser initializer hook and refreshable ATN caches\n\nAdds utility classes that enable explicit initialization and\nmanagement of antlr parser and lexer ATN caches. Without them,\nthese fields are static constants that can grow to retain multiple\nGB of heap space depending on input query strings.", "committedDate": "2020-03-30T19:03:51Z", "type": "forcePushed"}]}