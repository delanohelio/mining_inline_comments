{"pr_number": 3582, "pr_title": "Add hidden $partition column to Hive connector", "pr_createdAt": "2020-04-29T14:16:19Z", "pr_url": "https://github.com/trinodb/trino/pull/3582", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDIzNA==", "url": "https://github.com/trinodb/trino/pull/3582#discussion_r417464234", "bodyText": "Do we need some escaping of / or = here?", "author": "losipiuk", "createdAt": "2020-04-29T16:52:09Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HivePageSourceProvider.java", "diffHunk": "@@ -384,9 +385,12 @@ public int getIndex()\n                     }\n                 }\n                 else {\n+                    String partitionKeyValues = String.join(\"/\", partitionKeys.stream()\n+                            .map(partitionKey -> format(\"%s=%s\", partitionKey.getName(), partitionKey.getValue()))", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NjEzNw==", "url": "https://github.com/trinodb/trino/pull/3582#discussion_r417466137", "bodyText": "Also wouln't MAP be a better type here instead of VARCHAR?", "author": "losipiuk", "createdAt": "2020-04-29T16:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5OTkzMw==", "url": "https://github.com/trinodb/trino/pull/3582#discussion_r417699933", "bodyText": "I think escaping or encoding is needed. Let me update it.\nExactly, MAP type is also a candidate for this column.\n@martint Do you have any opinion?", "author": "ebyhr", "createdAt": "2020-04-30T01:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0MjI0OQ==", "url": "https://github.com/trinodb/trino/pull/3582#discussion_r418342249", "bodyText": "there might be also be :-escaping and canonicalization of representation.\nbut, since we know partition name before hand, why dont we just pass it here, instead of reconsructing?\ndid you consider this approach?\ncc @electrum", "author": "findepi", "createdAt": "2020-04-30T23:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDIzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NzM2MA==", "url": "https://github.com/trinodb/trino/pull/3582#discussion_r418447360", "bodyText": "Replaced with partitionName provided by Hive split.\nWe may still need to add manual escaping in tests.", "author": "ebyhr", "createdAt": "2020-05-01T07:33:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NDIzNA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMDAwMw==", "url": "https://github.com/trinodb/trino/pull/3582#discussion_r446020003", "bodyText": "nit: drop this assertion", "author": "losipiuk", "createdAt": "2020-06-26T07:40:23Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -3820,6 +3821,53 @@ public void testFileModifiedTimeHiddenColumn()\n         assertUpdate(\"DROP TABLE test_file_modified_time\");\n     }\n \n+    @Test\n+    public void testPartitionHiddenColumn()\n+    {\n+        @Language(\"SQL\") String createTable = \"CREATE TABLE test_partition_hidden_column \" +\n+                \"WITH (\" +\n+                \"partitioned_by = ARRAY['col1', 'col2']\" +\n+                \") AS \" +\n+                \"SELECT * FROM (VALUES \" +\n+                \"(0, 11, 21), (1, 12, 22), (2, 13, 23), \" +\n+                \"(3, 14, 24), (4, 15, 25), (5, 16, 26), \" +\n+                \"(6, 17, 27), (7, 18, 28), (8, 19, 29)\" +\n+                \" ) t (col0, col1, col2) \";\n+        assertUpdate(createTable, 9);\n+        assertTrue(getQueryRunner().tableExists(getSession(), \"test_partition_hidden_column\"));\n+\n+        TableMetadata tableMetadata = getTableMetadata(catalog, TPCH_SCHEMA, \"test_partition_hidden_column\");\n+        assertEquals(tableMetadata.getMetadata().getProperties().get(PARTITIONED_BY_PROPERTY), ImmutableList.of(\"col1\", \"col2\"));\n+\n+        List<String> columnNames = ImmutableList.of(\"col0\", \"col1\", \"col2\", PATH_COLUMN_NAME, FILE_SIZE_COLUMN_NAME, FILE_MODIFIED_TIME_COLUMN_NAME, PARTITION_COLUMN_NAME);\n+        List<ColumnMetadata> columnMetadatas = tableMetadata.getColumns();\n+        assertEquals(columnMetadatas.size(), columnNames.size());\n+        for (int i = 0; i < columnMetadatas.size(); i++) {\n+            ColumnMetadata columnMetadata = columnMetadatas.get(i);\n+            assertEquals(columnMetadata.getName(), columnNames.get(i));\n+            if (columnMetadata.getName().equals(PARTITION_COLUMN_NAME)) {\n+                // $partition should be hidden column\n+                assertTrue(columnMetadata.isHidden());\n+            }\n+        }\n+        assertEquals(getPartitions(\"test_partition_hidden_column\").size(), 9);\n+\n+        MaterializedResult results = computeActual(format(\"SELECT *, \\\"%s\\\" FROM test_partition_hidden_column\", PARTITION_COLUMN_NAME));\n+        for (int i = 0; i < results.getRowCount(); i++) {\n+            MaterializedRow row = results.getMaterializedRows().get(i);\n+            int col1 = (int) row.getField(1);\n+            int col2 = (int) row.getField(2);\n+            String actual = (String) row.getField(3);\n+            String expected = format(\"col1=%s/col2=%s\", col1, col2);\n+\n+            assertEquals(actual, expected);\n+        }\n+        assertEquals(results.getRowCount(), 9);\n+\n+        assertUpdate(\"DROP TABLE test_partition_hidden_column\");\n+        assertFalse(getQueryRunner().tableExists(getSession(), \"test_partition_hidden_column\"));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMjY0OQ==", "url": "https://github.com/trinodb/trino/pull/3582#discussion_r446022649", "bodyText": "You can drop index from loop. IMO this looks a bit cleaner:\n        for (MaterializedRow row : results.getMaterializedRows()) {\n            String actualPartition = (String) row.getField(3);\n            String expectedPartition = format(\"col1=%s/col2=%s\", row.getField(1), row.getField(2));\n            assertEquals(actualPartition, expectedPartition);\n        }", "author": "losipiuk", "createdAt": "2020-06-26T07:46:01Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -3820,6 +3821,53 @@ public void testFileModifiedTimeHiddenColumn()\n         assertUpdate(\"DROP TABLE test_file_modified_time\");\n     }\n \n+    @Test\n+    public void testPartitionHiddenColumn()\n+    {\n+        @Language(\"SQL\") String createTable = \"CREATE TABLE test_partition_hidden_column \" +\n+                \"WITH (\" +\n+                \"partitioned_by = ARRAY['col1', 'col2']\" +\n+                \") AS \" +\n+                \"SELECT * FROM (VALUES \" +\n+                \"(0, 11, 21), (1, 12, 22), (2, 13, 23), \" +\n+                \"(3, 14, 24), (4, 15, 25), (5, 16, 26), \" +\n+                \"(6, 17, 27), (7, 18, 28), (8, 19, 29)\" +\n+                \" ) t (col0, col1, col2) \";\n+        assertUpdate(createTable, 9);\n+        assertTrue(getQueryRunner().tableExists(getSession(), \"test_partition_hidden_column\"));\n+\n+        TableMetadata tableMetadata = getTableMetadata(catalog, TPCH_SCHEMA, \"test_partition_hidden_column\");\n+        assertEquals(tableMetadata.getMetadata().getProperties().get(PARTITIONED_BY_PROPERTY), ImmutableList.of(\"col1\", \"col2\"));\n+\n+        List<String> columnNames = ImmutableList.of(\"col0\", \"col1\", \"col2\", PATH_COLUMN_NAME, FILE_SIZE_COLUMN_NAME, FILE_MODIFIED_TIME_COLUMN_NAME, PARTITION_COLUMN_NAME);\n+        List<ColumnMetadata> columnMetadatas = tableMetadata.getColumns();\n+        assertEquals(columnMetadatas.size(), columnNames.size());\n+        for (int i = 0; i < columnMetadatas.size(); i++) {\n+            ColumnMetadata columnMetadata = columnMetadatas.get(i);\n+            assertEquals(columnMetadata.getName(), columnNames.get(i));\n+            if (columnMetadata.getName().equals(PARTITION_COLUMN_NAME)) {\n+                // $partition should be hidden column\n+                assertTrue(columnMetadata.isHidden());\n+            }\n+        }\n+        assertEquals(getPartitions(\"test_partition_hidden_column\").size(), 9);\n+\n+        MaterializedResult results = computeActual(format(\"SELECT *, \\\"%s\\\" FROM test_partition_hidden_column\", PARTITION_COLUMN_NAME));\n+        for (int i = 0; i < results.getRowCount(); i++) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyMjk4Ng==", "url": "https://github.com/trinodb/trino/pull/3582#discussion_r446022986", "bodyText": "drop comment", "author": "losipiuk", "createdAt": "2020-06-26T07:46:43Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/TestHiveIntegrationSmokeTest.java", "diffHunk": "@@ -3820,6 +3821,53 @@ public void testFileModifiedTimeHiddenColumn()\n         assertUpdate(\"DROP TABLE test_file_modified_time\");\n     }\n \n+    @Test\n+    public void testPartitionHiddenColumn()\n+    {\n+        @Language(\"SQL\") String createTable = \"CREATE TABLE test_partition_hidden_column \" +\n+                \"WITH (\" +\n+                \"partitioned_by = ARRAY['col1', 'col2']\" +\n+                \") AS \" +\n+                \"SELECT * FROM (VALUES \" +\n+                \"(0, 11, 21), (1, 12, 22), (2, 13, 23), \" +\n+                \"(3, 14, 24), (4, 15, 25), (5, 16, 26), \" +\n+                \"(6, 17, 27), (7, 18, 28), (8, 19, 29)\" +\n+                \" ) t (col0, col1, col2) \";\n+        assertUpdate(createTable, 9);\n+        assertTrue(getQueryRunner().tableExists(getSession(), \"test_partition_hidden_column\"));\n+\n+        TableMetadata tableMetadata = getTableMetadata(catalog, TPCH_SCHEMA, \"test_partition_hidden_column\");\n+        assertEquals(tableMetadata.getMetadata().getProperties().get(PARTITIONED_BY_PROPERTY), ImmutableList.of(\"col1\", \"col2\"));\n+\n+        List<String> columnNames = ImmutableList.of(\"col0\", \"col1\", \"col2\", PATH_COLUMN_NAME, FILE_SIZE_COLUMN_NAME, FILE_MODIFIED_TIME_COLUMN_NAME, PARTITION_COLUMN_NAME);\n+        List<ColumnMetadata> columnMetadatas = tableMetadata.getColumns();\n+        assertEquals(columnMetadatas.size(), columnNames.size());\n+        for (int i = 0; i < columnMetadatas.size(); i++) {\n+            ColumnMetadata columnMetadata = columnMetadatas.get(i);\n+            assertEquals(columnMetadata.getName(), columnNames.get(i));\n+            if (columnMetadata.getName().equals(PARTITION_COLUMN_NAME)) {\n+                // $partition should be hidden column", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5b6eaa9859305e969e01a4750e65b5dba5a9aee3", "url": "https://github.com/trinodb/trino/commit/5b6eaa9859305e969e01a4750e65b5dba5a9aee3", "message": "Add hidden $partition column to Hive connector", "committedDate": "2020-06-27T06:49:37Z", "type": "commit"}, {"oid": "5b6eaa9859305e969e01a4750e65b5dba5a9aee3", "url": "https://github.com/trinodb/trino/commit/5b6eaa9859305e969e01a4750e65b5dba5a9aee3", "message": "Add hidden $partition column to Hive connector", "committedDate": "2020-06-27T06:49:37Z", "type": "forcePushed"}]}