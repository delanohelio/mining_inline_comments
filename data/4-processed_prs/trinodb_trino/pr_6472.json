{"pr_number": 6472, "pr_title": "Fix operators that should be using IS NOT DISTINCT FROM rather than EQUALS", "pr_createdAt": "2020-12-30T02:49:20Z", "pr_url": "https://github.com/trinodb/trino/pull/6472", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEyODU4OA==", "url": "https://github.com/trinodb/trino/pull/6472#discussion_r550128588", "bodyText": "move it above other positionNotDistinctFromRow", "author": "sopel39", "createdAt": "2020-12-30T10:38:13Z", "path": "presto-main/src/main/java/io/prestosql/operator/PagesHashStrategy.java", "diffHunk": "@@ -59,6 +66,15 @@\n      */\n     boolean positionEqualsRow(int leftBlockIndex, int leftPosition, int rightPosition, Page rightPage);\n \n+    /**", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI4Mjc0MA==", "url": "https://github.com/trinodb/trino/pull/6472#discussion_r550282740", "bodyText": "Sorry, could you clarify this comment on what you think should be moved? I put the NOT DISTINCT variants directly below each of the EQUALS variants.", "author": "erichwang", "createdAt": "2020-12-30T18:14:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDEyODU4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1MzE5NQ==", "url": "https://github.com/trinodb/trino/pull/6472#discussion_r550153195", "bodyText": "add some nulls and NaNs to channel?", "author": "sopel39", "createdAt": "2020-12-30T11:11:36Z", "path": "presto-main/src/test/java/io/prestosql/sql/gen/TestJoinCompiler.java", "diffHunk": "@@ -109,11 +111,15 @@ public void testSingleChannel(boolean hashEnabled)\n                     Block rightBlock = channel.get(rightBlockIndex);\n                     for (int rightBlockPosition = 0; rightBlockPosition < rightBlock.getPositionCount(); rightBlockPosition++) {\n                         boolean expected = equalOperator.equalNullSafe(leftBlock, leftBlockPosition, rightBlock, rightBlockPosition);\n+                        boolean expectedNotDistinct = !distinctFromOperator.isDistinctFrom(leftBlock, leftBlockPosition, rightBlock, rightBlockPosition);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1NDY3Nw==", "url": "https://github.com/trinodb/trino/pull/6472#discussion_r550154677", "bodyText": "missing nulls", "author": "sopel39", "createdAt": "2020-12-30T11:13:42Z", "path": "presto-main/src/test/java/io/prestosql/operator/TestStreamingAggregationOperator.java", "diffHunk": "@@ -92,37 +93,51 @@ public void tearDown()\n     @Test\n     public void test()\n     {\n-        RowPagesBuilder rowPagesBuilder = RowPagesBuilder.rowPagesBuilder(BOOLEAN, VARCHAR, BIGINT);\n+        OperatorFactory operatorFactory = StreamingAggregationOperator.createOperatorFactory(\n+                0,\n+                new PlanNodeId(\"test\"),\n+                ImmutableList.of(BOOLEAN, DOUBLE, BIGINT),\n+                ImmutableList.of(DOUBLE),\n+                ImmutableList.of(1),\n+                AggregationNode.Step.SINGLE,\n+                ImmutableList.of(COUNT.bind(ImmutableList.of(0), Optional.empty()),\n+                        LONG_SUM.bind(ImmutableList.of(2), Optional.empty())),\n+                new JoinCompiler(new TypeOperators()));\n+\n+        RowPagesBuilder rowPagesBuilder = RowPagesBuilder.rowPagesBuilder(BOOLEAN, DOUBLE, BIGINT);\n         List<Page> input = rowPagesBuilder\n                 .addSequencePage(3, 0, 0, 1)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1NjAxMA==", "url": "https://github.com/trinodb/trino/pull/6472#discussion_r550156010", "bodyText": "please pick up #6462 as a prefix commit", "author": "sopel39", "createdAt": "2020-12-30T11:15:32Z", "path": "presto-main/src/test/java/io/prestosql/operator/TestWindowOperator.java", "diffHunk": "@@ -727,6 +731,67 @@ public void testFindEndPosition()\n         assertFindEndPosition(\"000000000000001111111111\", 14);\n     }\n \n+    @Test(dataProvider = \"spillEnabled\")\n+    public void testDistinctPartitionAndPeers(boolean spillEnabled, boolean revokeMemoryWhenAddingPages, long memoryLimit)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI4MzQ2MQ==", "url": "https://github.com/trinodb/trino/pull/6472#discussion_r550283461", "bodyText": "Sorry, this might be kind of n00b, but what does it mean to pick up a prefix commit?", "author": "erichwang", "createdAt": "2020-12-30T18:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1NjAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMyNTA3OQ==", "url": "https://github.com/trinodb/trino/pull/6472#discussion_r550325079", "bodyText": "I mean to cherry pick it before other commits", "author": "sopel39", "createdAt": "2020-12-30T20:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1NjAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM0NzQxNw==", "url": "https://github.com/trinodb/trino/pull/6472#discussion_r550347417", "bodyText": "You mean integrate into this PR commit chain right?", "author": "erichwang", "createdAt": "2020-12-30T22:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1NjAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDM0OTM4Nw==", "url": "https://github.com/trinodb/trino/pull/6472#discussion_r550349387", "bodyText": "Yup. Or rebase after I merge that PR", "author": "sopel39", "createdAt": "2020-12-30T22:52:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE1NjAxMA=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "1db06839ce314af33871caea68ab7b6055ed6834", "url": "https://github.com/trinodb/trino/commit/1db06839ce314af33871caea68ab7b6055ed6834", "message": "Add NOT DISTINCT operations to PagesHashStrategy", "committedDate": "2021-01-05T16:07:20Z", "type": "commit"}, {"oid": "609d39f59f36cd4c42057a1a646910aae2136ab8", "url": "https://github.com/trinodb/trino/commit/609d39f59f36cd4c42057a1a646910aae2136ab8", "message": "Fix StreamingAggregationOperator with proper DISTINCT grouping semantics", "committedDate": "2021-01-05T16:07:20Z", "type": "commit"}, {"oid": "28cf83d4c871010ba2673e9009bc1008a1d5e8c3", "url": "https://github.com/trinodb/trino/commit/28cf83d4c871010ba2673e9009bc1008a1d5e8c3", "message": "Fix WindowOperator with proper DISTINCT peer group semantics", "committedDate": "2021-01-05T16:07:20Z", "type": "commit"}, {"oid": "8f00b28d9e16f87bea8426430adadc3cb720cc99", "url": "https://github.com/trinodb/trino/commit/8f00b28d9e16f87bea8426430adadc3cb720cc99", "message": "Revert \"Force TopNRankingOperator compatibility with current Window behavior\"\n\nThis reverts commit ade8af11027ce287df976a95137349ff49240365.", "committedDate": "2021-01-05T16:08:28Z", "type": "commit"}, {"oid": "8f00b28d9e16f87bea8426430adadc3cb720cc99", "url": "https://github.com/trinodb/trino/commit/8f00b28d9e16f87bea8426430adadc3cb720cc99", "message": "Revert \"Force TopNRankingOperator compatibility with current Window behavior\"\n\nThis reverts commit ade8af11027ce287df976a95137349ff49240365.", "committedDate": "2021-01-05T16:08:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI0NzE0Mg==", "url": "https://github.com/trinodb/trino/pull/6472#discussion_r553247142", "bodyText": "commit message is too long", "author": "sopel39", "createdAt": "2021-01-07T10:39:32Z", "path": "core/trino-main/src/main/java/io/trino/operator/GroupedTopNRankAccumulator.java", "diffHunk": "@@ -577,11 +577,11 @@ private IntegrityStats verifyHeapIntegrity(long groupId, long heapNodeIndex)\n         verify(actualPeerGroupCount == peerGroupCount, \"Recorded peer group count does not match actual\");", "originalCommit": "8f00b28d9e16f87bea8426430adadc3cb720cc99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}