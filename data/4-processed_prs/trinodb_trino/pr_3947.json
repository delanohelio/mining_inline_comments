{"pr_number": 3947, "pr_title": "Implement parametric timestamp with time zone", "pr_createdAt": "2020-06-07T02:58:57Z", "pr_url": "https://github.com/trinodb/trino/pull/3947", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2NDQyMQ==", "url": "https://github.com/trinodb/trino/pull/3947#discussion_r439164421", "bodyText": "I think this is the same thing we fixed with Timestamp type", "author": "dain", "createdAt": "2020-06-12T01:48:03Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamptz/DateDiff.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timestamptz;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.LiteralParameters;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.LongTimestampWithTimeZone;\n+import io.prestosql.spi.type.StandardTypes;\n+import org.joda.time.chrono.ISOChronology;\n+\n+import static io.prestosql.operator.scalar.DateTimeFunctions.getTimestampField;\n+import static io.prestosql.spi.type.DateTimeEncoding.unpackMillisUtc;\n+import static io.prestosql.type.Timestamps.PICOSECONDS_PER_MILLISECOND;\n+import static io.prestosql.type.Timestamps.roundToNearest;\n+import static io.prestosql.util.DateTimeZoneIndex.unpackChronology;\n+\n+@Description(\"Difference of the given times in the given unit\")\n+@ScalarFunction(\"date_diff\")\n+public class DateDiff\n+{\n+    private DateDiff() {}\n+\n+    @LiteralParameters({\"x\", \"p\"})\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long diff(\n+            @SqlType(\"varchar(x)\") Slice unit,\n+            @SqlType(\"timestamp(p) with time zone\") long packedEpochMillis1,\n+            @SqlType(\"timestamp(p) with time zone\") long packedEpochMillis2)\n+    {\n+        return getTimestampField(unpackChronology(packedEpochMillis1), unit)\n+                .getDifferenceAsLong(unpackMillisUtc(packedEpochMillis2), unpackMillisUtc(packedEpochMillis1));\n+    }\n+\n+    @LiteralParameters({\"x\", \"p\"})\n+    @SqlType(StandardTypes.BIGINT)\n+    public static long diff(\n+            @SqlType(\"varchar(x)\") Slice unit,\n+            @SqlType(\"timestamp(p) with time zone\") LongTimestampWithTimeZone timestamp1,\n+            @SqlType(\"timestamp(p) with time zone\") LongTimestampWithTimeZone timestamp2)\n+    {\n+        long epochMillis1 = timestamp1.getEpochMillis();\n+        long epochMillis2 = timestamp2.getEpochMillis();\n+\n+        ISOChronology chronology = ISOChronology.getInstanceUTC();\n+\n+        long deltaMillis = getTimestampField(chronology, unit).getDifferenceAsLong(epochMillis2, epochMillis1);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2NDcwMA==", "url": "https://github.com/trinodb/trino/pull/3947#discussion_r439164700", "bodyText": "maybe add a helper method to for this", "author": "dain", "createdAt": "2020-06-12T01:49:35Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamptz/DateFormat.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timestamptz;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.LiteralParameter;\n+import io.prestosql.spi.function.LiteralParameters;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.LongTimestampWithTimeZone;\n+import io.prestosql.spi.type.StandardTypes;\n+\n+import static io.prestosql.operator.scalar.DateTimeFunctions.dateFormat;\n+import static io.prestosql.spi.type.DateTimeEncoding.unpackMillisUtc;\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static io.prestosql.type.Timestamps.PICOSECONDS_PER_MILLISECOND;\n+import static io.prestosql.type.Timestamps.roundToNearest;\n+import static io.prestosql.util.DateTimeZoneIndex.getChronology;\n+import static io.prestosql.util.DateTimeZoneIndex.unpackChronology;\n+\n+@ScalarFunction\n+@Description(\"Formats the given timestamp by the given format\")\n+public class DateFormat\n+{\n+    private DateFormat() {}\n+\n+    @LiteralParameters({\"x\", \"p\"})\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice format(ConnectorSession session, @SqlType(\"timestamp(p) with time zone\") long packedEpochMillis, @SqlType(\"varchar(x)\") Slice formatString)\n+    {\n+        return dateFormat(unpackChronology(packedEpochMillis), session.getLocale(), unpackMillisUtc(packedEpochMillis), formatString);\n+    }\n+\n+    @LiteralParameters({\"x\", \"p\"})\n+    @SqlType(StandardTypes.VARCHAR)\n+    public static Slice format(@LiteralParameter(\"p\") long precision, ConnectorSession session, @SqlType(\"timestamp(p) with time zone\") LongTimestampWithTimeZone timestamp, @SqlType(\"varchar(x)\") Slice formatString)\n+    {\n+        long epochMillis = timestamp.getEpochMillis();", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2NTAzMQ==", "url": "https://github.com/trinodb/trino/pull/3947#discussion_r439165031", "bodyText": "Maybe share the core implementation", "author": "dain", "createdAt": "2020-06-12T01:50:54Z", "path": "presto-main/src/main/java/io/prestosql/operator/scalar/timestamptz/DateTrunc.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.operator.scalar.timestamptz;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.function.Description;\n+import io.prestosql.spi.function.LiteralParameters;\n+import io.prestosql.spi.function.ScalarFunction;\n+import io.prestosql.spi.function.SqlType;\n+import io.prestosql.spi.type.LongTimestampWithTimeZone;\n+import org.joda.time.chrono.ISOChronology;\n+\n+import static io.prestosql.operator.scalar.DateTimeFunctions.getTimestampField;\n+import static io.prestosql.spi.type.DateTimeEncoding.unpackMillisUtc;\n+import static io.prestosql.spi.type.DateTimeEncoding.updateMillisUtc;\n+import static io.prestosql.spi.type.TimeZoneKey.getTimeZoneKey;\n+import static io.prestosql.util.DateTimeZoneIndex.getChronology;\n+import static io.prestosql.util.DateTimeZoneIndex.unpackChronology;\n+\n+@Description(\"Truncate to the specified precision\")\n+@ScalarFunction(\"date_trunc\")\n+public final class DateTrunc\n+{\n+    private DateTrunc() {}\n+\n+    @LiteralParameters({\"x\", \"p\"})\n+    @SqlType(\"timestamp(p) with time zone\")\n+    public static long truncate(\n+            @SqlType(\"varchar(x)\") Slice unit,\n+            @SqlType(\"timestamp(p) with time zone\") long packedEpochMillis)\n+    {\n+        ISOChronology chronology = unpackChronology(packedEpochMillis);\n+        long epochMillis = unpackMillisUtc(packedEpochMillis);\n+\n+        epochMillis = getTimestampField(chronology, unit).roundFloor(epochMillis);\n+\n+        return updateMillisUtc(epochMillis, packedEpochMillis);\n+    }\n+\n+    @LiteralParameters({\"x\", \"p\"})\n+    @SqlType(\"timestamp(p) with time zone\")\n+    public static LongTimestampWithTimeZone truncate(\n+            @SqlType(\"varchar(x)\") Slice unit,\n+            @SqlType(\"timestamp(p) with time zone\") LongTimestampWithTimeZone timestamp)\n+    {\n+        ISOChronology chronology = getChronology(getTimeZoneKey(timestamp.getTimeZoneKey()));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxOTYyNQ==", "url": "https://github.com/trinodb/trino/pull/3947#discussion_r441919625", "bodyText": "The core implementation is just one relatively simple line of code. It doesn't seem worth it.", "author": "martint", "createdAt": "2020-06-18T01:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2NTAzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2OTMzNA==", "url": "https://github.com/trinodb/trino/pull/3947#discussion_r439169334", "bodyText": "I like the factory name above.  consider removing the public constructor and using only factory methods... this might improve readabiliyt.", "author": "dain", "createdAt": "2020-06-12T02:08:54Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/LongTimestampWithTimeZone.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.type;\n+\n+import java.util.Objects;\n+\n+import static java.lang.Math.multiplyExact;\n+\n+public final class LongTimestampWithTimeZone\n+{\n+    private final long epochMillis;\n+    private final int picosOfMilli; // number of picoSeconds of the millisecond corresponding to epochMillis\n+    private final short timeZoneKey;\n+\n+    public static LongTimestampWithTimeZone fromEpochSecondsAndFraction(long epochSecond, long fractionInPicos, TimeZoneKey timeZoneKey)\n+    {\n+        return new LongTimestampWithTimeZone(\n+                epochSecond * 1_000 + fractionInPicos / 1_000_000_000,\n+                (int) (fractionInPicos % 1_000_000_000),\n+                timeZoneKey);\n+    }\n+\n+    public LongTimestampWithTimeZone(long epochMillis, int picosOfMilli, TimeZoneKey timeZoneKey)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2OTU5MQ==", "url": "https://github.com/trinodb/trino/pull/3947#discussion_r439169591", "bodyText": "Do we need these?  These methods are a bit dangerous, because SQL does not consider timezone when comparing TSwTZ... just the instant.", "author": "dain", "createdAt": "2020-06-12T02:10:07Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/LongTimestampWithTimeZone.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.type;\n+\n+import java.util.Objects;\n+\n+import static java.lang.Math.multiplyExact;\n+\n+public final class LongTimestampWithTimeZone\n+{\n+    private final long epochMillis;\n+    private final int picosOfMilli; // number of picoSeconds of the millisecond corresponding to epochMillis\n+    private final short timeZoneKey;\n+\n+    public static LongTimestampWithTimeZone fromEpochSecondsAndFraction(long epochSecond, long fractionInPicos, TimeZoneKey timeZoneKey)\n+    {\n+        return new LongTimestampWithTimeZone(\n+                epochSecond * 1_000 + fractionInPicos / 1_000_000_000,\n+                (int) (fractionInPicos % 1_000_000_000),\n+                timeZoneKey);\n+    }\n+\n+    public LongTimestampWithTimeZone(long epochMillis, int picosOfMilli, TimeZoneKey timeZoneKey)\n+    {\n+        this(epochMillis, picosOfMilli, timeZoneKey.getKey());\n+    }\n+\n+    public LongTimestampWithTimeZone(long epochMillis, int picosOfMilli, short timeZoneKey)\n+    {\n+        if (picosOfMilli < 0) {\n+            throw new IllegalArgumentException(\"fraction must be >= 0\");\n+        }\n+        this.epochMillis = epochMillis;\n+        this.picosOfMilli = picosOfMilli;\n+        this.timeZoneKey = timeZoneKey;\n+    }\n+\n+    public long getEpochMillis()\n+    {\n+        return epochMillis;\n+    }\n+\n+    public int getPicosOfMilli()\n+    {\n+        return picosOfMilli;\n+    }\n+\n+    public short getTimeZoneKey()\n+    {\n+        return timeZoneKey;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2NDIxMA==", "url": "https://github.com/trinodb/trino/pull/3947#discussion_r441864210", "bodyText": "Good point. I don't think we need them, but let me check.", "author": "martint", "createdAt": "2020-06-17T22:16:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE2OTU5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1OTMwOQ==", "url": "https://github.com/trinodb/trino/pull/3947#discussion_r441859309", "bodyText": "verify precision is in range [0, 12]", "author": "dain", "createdAt": "2020-06-17T22:03:04Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimestampWithTimeZoneType.java", "diffHunk": "@@ -13,63 +13,57 @@\n  */\n package io.prestosql.spi.type;\n \n-import io.prestosql.spi.block.Block;\n-import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.PrestoException;\n \n-import static io.prestosql.spi.type.DateTimeEncoding.unpackMillisUtc;\n+import static io.prestosql.spi.StandardErrorCode.NUMERIC_VALUE_OUT_OF_RANGE;\n+import static java.lang.String.format;\n \n-public final class TimestampWithTimeZoneType\n-        extends AbstractLongType\n+public abstract class TimestampWithTimeZoneType\n+        extends AbstractType\n+        implements FixedWidthType\n {\n-    public static final TimestampWithTimeZoneType TIMESTAMP_WITH_TIME_ZONE = new TimestampWithTimeZoneType();\n+    public static final int MAX_PRECISION = 12;\n \n-    private TimestampWithTimeZoneType()\n-    {\n-        super(new TypeSignature(StandardTypes.TIMESTAMP_WITH_TIME_ZONE));\n-    }\n+    public static final int MAX_SHORT_PRECISION = 3;\n+    private static final int DEFAULT_PRECISION = 3; // TODO: should be 6 per SQL spec\n \n-    @Override\n-    public Object getObjectValue(ConnectorSession session, Block block, int position)\n-    {\n-        if (block.isNull(position)) {\n-            return null;\n-        }\n+    @Deprecated\n+    public static final TimestampWithTimeZoneType TIMESTAMP_WITH_TIME_ZONE = createTimestampWithTimeZoneType(DEFAULT_PRECISION);\n \n-        return new SqlTimestampWithTimeZone(block.getLong(position, 0));\n-    }\n+    private final int precision;\n \n-    @Override\n-    public boolean equalTo(Block leftBlock, int leftPosition, Block rightBlock, int rightPosition)\n+    public static TimestampWithTimeZoneType createTimestampWithTimeZoneType(int precision)\n     {\n-        long leftValue = unpackMillisUtc(leftBlock.getLong(leftPosition, 0));\n-        long rightValue = unpackMillisUtc(rightBlock.getLong(rightPosition, 0));\n-        return leftValue == rightValue;\n+        if (precision <= MAX_SHORT_PRECISION) {\n+            return new ShortTimestampWithTimeZoneType(precision);\n+        }\n+        else if (precision <= MAX_PRECISION) {\n+            return new LongTimestampWithTimeZoneType(precision);\n+        }\n+\n+        throw new PrestoException(NUMERIC_VALUE_OUT_OF_RANGE, format(\"TIMESTAMP WITH TIME ZONE precision must be in range [0, %s]\", MAX_PRECISION));\n     }\n \n-    @Override\n-    public long hash(Block block, int position)\n+    protected TimestampWithTimeZoneType(int precision, Class<?> javaType)\n     {\n-        return AbstractLongType.hash(unpackMillisUtc(block.getLong(position, 0)));\n+        super(new TypeSignature(StandardTypes.TIMESTAMP_WITH_TIME_ZONE, TypeSignatureParameter.numericParameter(precision)), javaType);\n+        this.precision = precision;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg1OTU0Mg==", "url": "https://github.com/trinodb/trino/pull/3947#discussion_r441859542", "bodyText": "Make this and the methods below final", "author": "dain", "createdAt": "2020-06-17T22:03:43Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/TimestampWithTimeZoneType.java", "diffHunk": "@@ -13,63 +13,57 @@\n  */\n package io.prestosql.spi.type;\n \n-import io.prestosql.spi.block.Block;\n-import io.prestosql.spi.connector.ConnectorSession;\n+import io.prestosql.spi.PrestoException;\n \n-import static io.prestosql.spi.type.DateTimeEncoding.unpackMillisUtc;\n+import static io.prestosql.spi.StandardErrorCode.NUMERIC_VALUE_OUT_OF_RANGE;\n+import static java.lang.String.format;\n \n-public final class TimestampWithTimeZoneType\n-        extends AbstractLongType\n+public abstract class TimestampWithTimeZoneType\n+        extends AbstractType\n+        implements FixedWidthType\n {\n-    public static final TimestampWithTimeZoneType TIMESTAMP_WITH_TIME_ZONE = new TimestampWithTimeZoneType();\n+    public static final int MAX_PRECISION = 12;\n \n-    private TimestampWithTimeZoneType()\n-    {\n-        super(new TypeSignature(StandardTypes.TIMESTAMP_WITH_TIME_ZONE));\n-    }\n+    public static final int MAX_SHORT_PRECISION = 3;\n+    private static final int DEFAULT_PRECISION = 3; // TODO: should be 6 per SQL spec\n \n-    @Override\n-    public Object getObjectValue(ConnectorSession session, Block block, int position)\n-    {\n-        if (block.isNull(position)) {\n-            return null;\n-        }\n+    @Deprecated\n+    public static final TimestampWithTimeZoneType TIMESTAMP_WITH_TIME_ZONE = createTimestampWithTimeZoneType(DEFAULT_PRECISION);\n \n-        return new SqlTimestampWithTimeZone(block.getLong(position, 0));\n-    }\n+    private final int precision;\n \n-    @Override\n-    public boolean equalTo(Block leftBlock, int leftPosition, Block rightBlock, int rightPosition)\n+    public static TimestampWithTimeZoneType createTimestampWithTimeZoneType(int precision)\n     {\n-        long leftValue = unpackMillisUtc(leftBlock.getLong(leftPosition, 0));\n-        long rightValue = unpackMillisUtc(rightBlock.getLong(rightPosition, 0));\n-        return leftValue == rightValue;\n+        if (precision <= MAX_SHORT_PRECISION) {\n+            return new ShortTimestampWithTimeZoneType(precision);\n+        }\n+        else if (precision <= MAX_PRECISION) {\n+            return new LongTimestampWithTimeZoneType(precision);\n+        }\n+\n+        throw new PrestoException(NUMERIC_VALUE_OUT_OF_RANGE, format(\"TIMESTAMP WITH TIME ZONE precision must be in range [0, %s]\", MAX_PRECISION));\n     }\n \n-    @Override\n-    public long hash(Block block, int position)\n+    protected TimestampWithTimeZoneType(int precision, Class<?> javaType)\n     {\n-        return AbstractLongType.hash(unpackMillisUtc(block.getLong(position, 0)));\n+        super(new TypeSignature(StandardTypes.TIMESTAMP_WITH_TIME_ZONE, TypeSignatureParameter.numericParameter(precision)), javaType);\n+        this.precision = precision;\n     }\n \n-    @Override\n-    public int compareTo(Block leftBlock, int leftPosition, Block rightBlock, int rightPosition)\n+    public int getPrecision()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2MDg1OQ==", "url": "https://github.com/trinodb/trino/pull/3947#discussion_r441860859", "bodyText": "require non null?", "author": "dain", "createdAt": "2020-06-17T22:07:16Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/SqlTimestampWithTimeZone.java", "diffHunk": "@@ -17,76 +17,118 @@\n \n import java.time.Instant;\n import java.time.ZoneId;\n-import java.time.format.DateTimeFormatter;\n import java.util.Objects;\n-import java.util.TimeZone;\n \n-import static io.prestosql.spi.type.DateTimeEncoding.unpackMillisUtc;\n-import static io.prestosql.spi.type.DateTimeEncoding.unpackZoneKey;\n+import static io.prestosql.spi.type.Timestamps.PICOSECONDS_PER_MILLISECOND;\n+import static io.prestosql.spi.type.Timestamps.formatTimestampWithTimeZone;\n+import static io.prestosql.spi.type.Timestamps.round;\n \n public final class SqlTimestampWithTimeZone\n {\n+    private static final int NANOSECONDS_PER_MILLISECOND = 1_000_000;\n+    private static final int PICOSECONDS_PER_NANOSECOND = 1_000;\n+\n     // This needs to be Locale-independent, Java Time's DateTimeFormatter compatible and should never change, as it defines the external API data format.\n-    public static final String JSON_FORMAT = \"uuuu-MM-dd HH:mm:ss.SSS VV\";\n-    private static final DateTimeFormatter JSON_FORMATTER = DateTimeFormatter.ofPattern(JSON_FORMAT);\n+    public static final String JSON_FORMAT = \"uuuu-MM-dd HH:mm:ss[.SSS] VV\";\n \n-    private final long millisUtc;\n+    private final int precision;\n+    private final long epochMillis;\n+    private final int picosOfMilli;\n     private final TimeZoneKey timeZoneKey;\n \n-    public SqlTimestampWithTimeZone(long timestampWithTimeZone)\n+    public static SqlTimestampWithTimeZone newInstance(int precision, Instant instant, ZoneId zoneId)\n+    {\n+        return newInstanceWithRounding(precision, instant.toEpochMilli(), (instant.getNano() % NANOSECONDS_PER_MILLISECOND) * PICOSECONDS_PER_NANOSECOND, TimeZoneKey.getTimeZoneKey(zoneId.getId()));\n+    }\n+\n+    public static SqlTimestampWithTimeZone newInstance(int precision, long epochMillis, int picosOfMilli, TimeZoneKey timeZoneKey)\n+    {\n+        return newInstanceWithRounding(precision, epochMillis, picosOfMilli, timeZoneKey);\n+    }\n+\n+    private static SqlTimestampWithTimeZone newInstanceWithRounding(int precision, long epochMillis, int picosOfMilli, TimeZoneKey sessionTimeZoneKey)\n     {\n-        millisUtc = unpackMillisUtc(timestampWithTimeZone);\n-        timeZoneKey = unpackZoneKey(timestampWithTimeZone);\n+        if (precision < 3) {\n+            epochMillis = round(epochMillis, 3 - precision);\n+            picosOfMilli = 0;\n+        }\n+        else if (precision == 3) {\n+            if (round(picosOfMilli, 12 - precision) == PICOSECONDS_PER_MILLISECOND) {\n+                epochMillis++;\n+            }\n+            picosOfMilli = 0;\n+        }\n+        else {\n+            picosOfMilli = (int) round(picosOfMilli, 12 - precision);\n+        }\n+\n+        return new SqlTimestampWithTimeZone(precision, epochMillis, picosOfMilli, sessionTimeZoneKey);\n     }\n \n-    public SqlTimestampWithTimeZone(long millisUtc, TimeZoneKey timeZoneKey)\n+    private SqlTimestampWithTimeZone(int precision, long epochMillis, int picosOfMilli, TimeZoneKey timeZoneKey)\n     {\n-        this.millisUtc = millisUtc;\n+        this.precision = precision;\n+        this.epochMillis = epochMillis;\n+        this.picosOfMilli = picosOfMilli;\n         this.timeZoneKey = timeZoneKey;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2MjAwMQ==", "url": "https://github.com/trinodb/trino/pull/3947#discussion_r441862001", "bodyText": "Verify precision range?", "author": "dain", "createdAt": "2020-06-17T22:10:11Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/ShortTimestampWithTimeZoneType.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.type;\n+\n+import io.airlift.slice.Slice;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.LongArrayBlockBuilder;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import io.prestosql.spi.connector.ConnectorSession;\n+\n+import static io.prestosql.spi.type.DateTimeEncoding.unpackMillisUtc;\n+import static io.prestosql.spi.type.DateTimeEncoding.unpackZoneKey;\n+import static java.lang.Long.rotateLeft;\n+\n+/**\n+ * Encodes timestamps up to p = 6.\n+ *\n+ * For 0 <= p <= 3, the value is encoded as milliseconds from the 1970-01-01 00:00:00 epoch.\n+ * For 3 < p <= 6, the value is encoded as microseconds from the 1970-01-01 00:00:00 epoch.\n+ */\n+public class ShortTimestampWithTimeZoneType\n+        extends TimestampWithTimeZoneType\n+{\n+    public ShortTimestampWithTimeZoneType(int precision)\n+    {\n+        super(precision, long.class);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2MjgwNg==", "url": "https://github.com/trinodb/trino/pull/3947#discussion_r441862806", "bodyText": "This should be Long.BYTES + Integer.BYTES", "author": "dain", "createdAt": "2020-06-17T22:12:30Z", "path": "presto-spi/src/main/java/io/prestosql/spi/type/LongTimestampWithTimeZoneType.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.spi.type;\n+\n+import io.airlift.slice.XxHash64;\n+import io.prestosql.spi.block.Block;\n+import io.prestosql.spi.block.BlockBuilder;\n+import io.prestosql.spi.block.BlockBuilderStatus;\n+import io.prestosql.spi.block.Int96ArrayBlockBuilder;\n+import io.prestosql.spi.block.PageBuilderStatus;\n+import io.prestosql.spi.connector.ConnectorSession;\n+\n+import static io.airlift.slice.SizeOf.SIZE_OF_LONG;\n+import static io.prestosql.spi.type.DateTimeEncoding.packDateTimeWithZone;\n+import static io.prestosql.spi.type.DateTimeEncoding.unpackMillisUtc;\n+import static io.prestosql.spi.type.DateTimeEncoding.unpackZoneKey;\n+import static io.prestosql.spi.type.UnscaledDecimal128Arithmetic.compare;\n+\n+/**\n+ * The representation is a 96-bit value that contains the milliseconds from the epoch + session key\n+ * in the first long and the fractional increment in the remaining integer, as a number of picoseconds\n+ * additional to the epoch millisecond.\n+ */\n+public class LongTimestampWithTimeZoneType\n+        extends TimestampWithTimeZoneType\n+{\n+    public LongTimestampWithTimeZoneType(int precision)\n+    {\n+        super(precision, LongTimestampWithTimeZone.class);\n+    }\n+\n+    @Override\n+    public int getFixedSize()\n+    {\n+        return Long.BYTES + Long.BYTES;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "cff9e5031b1b2bbc57727bc4de467bab6b7e7713", "url": "https://github.com/trinodb/trino/commit/cff9e5031b1b2bbc57727bc4de467bab6b7e7713", "message": "Make rendering of type in protocol more robust\n\nRelying on ClientTypeSignature to render the string version of the type\nis brittle for any type with an irregular shape (e.g., timestamp(p) with time zone)", "committedDate": "2020-06-18T14:28:29Z", "type": "commit"}, {"oid": "32dcddd3883b111c3eadb3ffe7c3972c71775301", "url": "https://github.com/trinodb/trino/commit/32dcddd3883b111c3eadb3ffe7c3972c71775301", "message": "Move class to timestamp with time zone package", "committedDate": "2020-06-18T14:28:29Z", "type": "commit"}, {"oid": "e8a000e82d5947cb80cb95a30b58456924db7a41", "url": "https://github.com/trinodb/trino/commit/e8a000e82d5947cb80cb95a30b58456924db7a41", "message": "Implement variable-precision timestamp with time zone type", "committedDate": "2020-06-18T14:28:29Z", "type": "commit"}, {"oid": "e8a000e82d5947cb80cb95a30b58456924db7a41", "url": "https://github.com/trinodb/trino/commit/e8a000e82d5947cb80cb95a30b58456924db7a41", "message": "Implement variable-precision timestamp with time zone type", "committedDate": "2020-06-18T14:28:29Z", "type": "forcePushed"}]}