{"pr_number": 5492, "pr_title": "Refactor metastore Guice setup", "pr_createdAt": "2020-10-09T11:56:21Z", "pr_url": "https://github.com/trinodb/trino/pull/5492", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQzODEwNQ==", "url": "https://github.com/trinodb/trino/pull/5492#discussion_r502438105", "bodyText": "I am not convinced that it adds useful coverage, as we are not able to assert anything meaningful.", "author": "losipiuk", "createdAt": "2020-10-09T13:46:12Z", "path": "presto-hive-hadoop2/src/test/java/io/prestosql/plugin/hive/TestHiveHadoop2Plugin.java", "diffHunk": "@@ -65,6 +67,46 @@ public void deinitializeRubix()\n         CachingFileSystem.deinitialize();\n     }\n \n+    @Test\n+    public void testCreateConnector()\n+    {\n+        Plugin plugin = new HiveHadoop2Plugin();\n+        ConnectorFactory factory = getOnlyElement(plugin.getConnectorFactories());\n+        // simplest possible configuration\n+        factory.create(\"test\", ImmutableMap.of(\"hive.metastore.uri\", \"thrift://foo:1234\"), new TestingConnectorContext()).shutdown();\n+    }\n+\n+    @Test\n+    public void testThriftMetastore()\n+    {\n+        Plugin plugin = new HiveHadoop2Plugin();\n+        ConnectorFactory factory = getOnlyElement(plugin.getConnectorFactories());\n+        factory.create(\n+                \"test\",\n+                ImmutableMap.of(\n+                        \"hive.metastore\", \"thrift\",\n+                        \"hive.metastore.uri\", \"thrift://foo:1234\"),\n+                new TestingConnectorContext())\n+                .shutdown();\n+    }\n+\n+    @Test\n+    public void testGlueMetastore()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0MDcyNw==", "url": "https://github.com/trinodb/trino/pull/5492#discussion_r502440727", "bodyText": "this covers guice bindings. if not useful as a test itself, it is useful for development\n(unless i forget to run the test...)", "author": "findepi", "createdAt": "2020-10-09T13:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQzODEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0MTk3Mg==", "url": "https://github.com/trinodb/trino/pull/5492#discussion_r502441972", "bodyText": "in fact, there is currently no other test verifying GlueMetastoreModule works, as TestHiveGlueMetastore instantiates the metastore class directly", "author": "findepi", "createdAt": "2020-10-09T13:52:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQzODEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ2NDQxNw==", "url": "https://github.com/trinodb/trino/pull/5492#discussion_r502464417", "bodyText": "I guess product tests which use Glue is more reasonable way of testing if GlueMetastoreModule works. Yet it is not something you want to run often during development. Feel free to leave it if you found it useful", "author": "losipiuk", "createdAt": "2020-10-09T14:25:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQzODEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUxMzc0OQ==", "url": "https://github.com/trinodb/trino/pull/5492#discussion_r502513749", "bodyText": "i agree that we should have them -- #5426", "author": "findepi", "createdAt": "2020-10-09T15:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQzODEwNQ=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0MTMwOA==", "url": "https://github.com/trinodb/trino/pull/5492#discussion_r502441308", "bodyText": "Maybe RecordingAwareHiveMetastoreModule. Or OptionalRecordingHiveMetastoreModule. As now it has conditional logic inside.", "author": "losipiuk", "createdAt": "2020-10-09T13:51:12Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/RecordingHiveMetastoreModule.java", "diffHunk": "@@ -28,24 +32,52 @@\n import static org.weakref.jmx.guice.ExportBinder.newExporter;\n \n public class RecordingHiveMetastoreModule", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0Mjg3Mw==", "url": "https://github.com/trinodb/trino/pull/5492#discussion_r502442873", "bodyText": "modelled after CachingHiveMetastoreModule -- the module is named caching even though caching can be enabled or disabled\nalso, i am biding with ForRecordingHiveMetastore and then installing the RecordingHiveMetastoreModule, so RecordingHiveMetastoreModule must fulfil the contract even if recording is disabled.", "author": "findepi", "createdAt": "2020-10-09T13:53:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0MTMwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0MzA4NA==", "url": "https://github.com/trinodb/trino/pull/5492#discussion_r502443084", "bodyText": "Why exactly this one is needed?", "author": "losipiuk", "createdAt": "2020-10-09T13:53:53Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/RecordingHiveMetastoreModule.java", "diffHunk": "@@ -28,24 +32,52 @@\n import static org.weakref.jmx.guice.ExportBinder.newExporter;\n \n public class RecordingHiveMetastoreModule\n-        implements Module\n+        extends AbstractConfigurationAwareModule\n {\n     @Override\n-    public void configure(Binder binder)\n+    protected void setup(Binder binder)\n     {\n-        binder.bind(HiveMetastore.class)\n-                .annotatedWith(ForCachingHiveMetastore.class)\n-                .to(RecordingHiveMetastore.class)\n-                .in(Scopes.SINGLETON);\n-        binder.bind(RecordingHiveMetastore.class).in(Scopes.SINGLETON);\n-        binder.bind(HiveBlockEncodingSerde.class).in(Scopes.SINGLETON);\n+        if (buildConfigObject(HiveConfig.class).getRecordingPath() != null) {\n+            install(new RecordingModule());\n+        }\n+        else {\n+            install(new NoRecordingModule());\n+        }\n+    }\n+\n+    public static class RecordingModule\n+            implements Module\n+    {\n+        @Override\n+        public void configure(Binder binder)\n+        {\n+            binder.bind(HiveMetastore.class)\n+                    .annotatedWith(ForCachingHiveMetastore.class)\n+                    .to(RecordingHiveMetastore.class)\n+                    .in(Scopes.SINGLETON);\n+            binder.bind(RecordingHiveMetastore.class).in(Scopes.SINGLETON);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0Njk1Mw==", "url": "https://github.com/trinodb/trino/pull/5492#discussion_r502446953", "bodyText": "it is injected into WriteHiveMetastoreRecordingProcedure", "author": "findepi", "createdAt": "2020-10-09T13:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0MzA4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0NzgxMQ==", "url": "https://github.com/trinodb/trino/pull/5492#discussion_r502447811", "bodyText": "will add a test", "author": "findepi", "createdAt": "2020-10-09T14:00:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0MzA4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0NTk0Mg==", "url": "https://github.com/trinodb/trino/pull/5492#discussion_r502445942", "bodyText": "isnotnull check?", "author": "losipiuk", "createdAt": "2020-10-09T13:58:04Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/metastore/glue/DefaultGlueMetastoreTableFilterProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.plugin.hive.metastore.glue;\n+\n+import com.amazonaws.services.glue.model.Table;\n+import io.prestosql.plugin.hive.metastore.MetastoreConfig;\n+\n+import javax.inject.Inject;\n+import javax.inject.Provider;\n+\n+import java.util.function.Predicate;\n+\n+import static io.prestosql.plugin.hive.HiveMetadata.DELTA_LAKE_PROVIDER;\n+import static io.prestosql.plugin.hive.HiveMetadata.SPARK_TABLE_PROVIDER_KEY;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.function.Predicate.not;\n+\n+public class DefaultGlueMetastoreTableFilterProvider\n+        implements Provider<Predicate<Table>>\n+{\n+    private final boolean hideDeltaLakeTables;\n+\n+    @Inject\n+    public DefaultGlueMetastoreTableFilterProvider(MetastoreConfig metastoreConfig)\n+    {\n+        requireNonNull(metastoreConfig, \"metastoreConfig is null\");\n+        this.hideDeltaLakeTables = metastoreConfig.isHideDeltaLakeTables();\n+    }\n+\n+    @Override\n+    public Predicate<Table> get()\n+    {\n+        if (hideDeltaLakeTables) {\n+            return not(DefaultGlueMetastoreTableFilterProvider::isDeltaLakeTable);\n+        }\n+        return table -> true;\n+    }\n+\n+    public static boolean isDeltaLakeTable(Table table)\n+    {\n+        return table.getParameters().getOrDefault(SPARK_TABLE_PROVIDER_KEY, \"\").equalsIgnoreCase(DELTA_LAKE_PROVIDER);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0NzQ2OQ==", "url": "https://github.com/trinodb/trino/pull/5492#discussion_r502447469", "bodyText": "on what? table.getParameters() cannot be null", "author": "findepi", "createdAt": "2020-10-09T14:00:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0NTk0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ2MzczMw==", "url": "https://github.com/trinodb/trino/pull/5492#discussion_r502463733", "bodyText": "on table. But feel free to skip it if it is tested down the stack", "author": "losipiuk", "createdAt": "2020-10-09T14:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0NTk0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUxMzIxMA==", "url": "https://github.com/trinodb/trino/pull/5492#discussion_r502513210", "bodyText": "it should not be called for null table", "author": "findepi", "createdAt": "2020-10-09T15:34:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ0NTk0Mg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "d335b6a78ead6e94dba9b79a66a2e8101be5d3d1", "url": "https://github.com/trinodb/trino/commit/d335b6a78ead6e94dba9b79a66a2e8101be5d3d1", "message": "Add more tests in TestHiveHadoop2Plugin", "committedDate": "2020-10-09T20:33:38Z", "type": "commit"}, {"oid": "438b6271e18832aa3f6d895d9dee8fad6be4f903", "url": "https://github.com/trinodb/trino/commit/438b6271e18832aa3f6d895d9dee8fad6be4f903", "message": "Bind WriteHiveMetastoreRecordingProcedure in appropriate module", "committedDate": "2020-10-09T20:33:38Z", "type": "commit"}, {"oid": "706fb6de7f5d3f7fa94a3efdc0439bd26fd1ad2a", "url": "https://github.com/trinodb/trino/commit/706fb6de7f5d3f7fa94a3efdc0439bd26fd1ad2a", "message": "Simplify RecordingHiveMetastoreModule usage", "committedDate": "2020-10-09T20:33:38Z", "type": "commit"}, {"oid": "47428197bdcaad1d1ab9c3305782621fee19f9f3", "url": "https://github.com/trinodb/trino/commit/47428197bdcaad1d1ab9c3305782621fee19f9f3", "message": "Take just required information in createCache()", "committedDate": "2020-10-09T20:33:38Z", "type": "commit"}, {"oid": "bf2ddc87446af996882594aa34a1c7999700d9a3", "url": "https://github.com/trinodb/trino/commit/bf2ddc87446af996882594aa34a1c7999700d9a3", "message": "Move recording metastore configs to separate class\n\nThis makes the configuration options unavailable when they are not\nsupported, e.g. when using `file` metastore.", "committedDate": "2020-10-09T20:33:39Z", "type": "commit"}, {"oid": "76ad0dee2efddc55f0bc6efd534d30f737f21cb1", "url": "https://github.com/trinodb/trino/commit/76ad0dee2efddc55f0bc6efd534d30f737f21cb1", "message": "Allow injecting table filter in Glue metastore", "committedDate": "2020-10-09T20:33:39Z", "type": "commit"}, {"oid": "76ad0dee2efddc55f0bc6efd534d30f737f21cb1", "url": "https://github.com/trinodb/trino/commit/76ad0dee2efddc55f0bc6efd534d30f737f21cb1", "message": "Allow injecting table filter in Glue metastore", "committedDate": "2020-10-09T20:33:39Z", "type": "forcePushed"}, {"oid": "002a508a22ae4cfa23303e325c35f50723dcfd15", "url": "https://github.com/trinodb/trino/commit/002a508a22ae4cfa23303e325c35f50723dcfd15", "message": "Remove unused constant", "committedDate": "2020-10-09T20:53:16Z", "type": "commit"}]}