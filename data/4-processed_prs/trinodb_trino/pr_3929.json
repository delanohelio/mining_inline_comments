{"pr_number": 3929, "pr_title": "Eliminate redundant parameter extraction", "pr_createdAt": "2020-06-05T10:48:28Z", "pr_url": "https://github.com/trinodb/trino/pull/3929", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3NDUxMQ==", "url": "https://github.com/trinodb/trino/pull/3929#discussion_r435874511", "bodyText": "Can you explicitly specify expected number of parameters. 0 for the first test and 2 for the second?\nThe rename this method to assertParameterCount", "author": "losipiuk", "createdAt": "2020-06-05T12:01:02Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestParameterExtractor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.prestosql.sql.parser.ParsingOptions;\n+import io.prestosql.sql.parser.SqlParser;\n+import io.prestosql.sql.tree.Parameter;\n+import io.prestosql.sql.tree.Statement;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestParameterExtractor\n+{\n+    private final SqlParser sqlParser = new SqlParser();\n+\n+    @Test\n+    public void testNoParameter()\n+    {\n+        Statement statement = sqlParser.createStatement(\"SELECT c1, c2 FROM test_table WHERE c1 = 1 AND c2 > 2\", new ParsingOptions());\n+        assertEqualParameterCount(statement);\n+    }\n+\n+    @Test\n+    public void testParameterCount()\n+    {\n+        Statement statement = sqlParser.createStatement(\"SELECT c1, c2 FROM test_table WHERE c1 = ? AND c2 > ?\", new ParsingOptions());\n+        assertEqualParameterCount(statement);\n+    }\n+\n+    private void assertEqualParameterCount(Statement statement)", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExMTM0Mw==", "url": "https://github.com/trinodb/trino/pull/3929#discussion_r436111343", "bodyText": "It's generally better to be explicit about what's being tested. Readability of this test could be improved by doing this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertParameterCount(statement, 0);\n          \n          \n            \n                    assertThat(ParameterExtractor.getParameters(statement)).isEmpty();\n          \n          \n            \n                    assertThat(ParameterExtractor.getParameterCount(statement)).isEqualTo(0);", "author": "martint", "createdAt": "2020-06-05T19:04:33Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestParameterExtractor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.prestosql.sql.parser.ParsingOptions;\n+import io.prestosql.sql.parser.SqlParser;\n+import io.prestosql.sql.tree.Parameter;\n+import io.prestosql.sql.tree.Statement;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestParameterExtractor\n+{\n+    private final SqlParser sqlParser = new SqlParser();\n+\n+    @Test\n+    public void testNoParameter()\n+    {\n+        Statement statement = sqlParser.createStatement(\"SELECT c1, c2 FROM test_table WHERE c1 = 1 AND c2 > 2\", new ParsingOptions());\n+        assertParameterCount(statement, 0);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExMTU4OA==", "url": "https://github.com/trinodb/trino/pull/3929#discussion_r436111588", "bodyText": "Similarly, for this test:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertParameterCount(statement, 2);\n          \n          \n            \n                    assertThat(ParameterExtractor.getParameters(statement))\n          \n          \n            \n                            .containsExactly(\n          \n          \n            \n                                    new Parameter(new NodeLocation(1, 41), 0),\n          \n          \n            \n                                    new Parameter(new NodeLocation(1, 52), 1));\n          \n          \n            \n            \n          \n          \n            \n                            assertThat(ParameterExtractor.getParameterCount(statement)).isEqualTo(2);", "author": "martint", "createdAt": "2020-06-05T19:05:04Z", "path": "presto-main/src/test/java/io/prestosql/execution/TestParameterExtractor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.execution;\n+\n+import io.prestosql.sql.parser.ParsingOptions;\n+import io.prestosql.sql.parser.SqlParser;\n+import io.prestosql.sql.tree.Parameter;\n+import io.prestosql.sql.tree.Statement;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+public class TestParameterExtractor\n+{\n+    private final SqlParser sqlParser = new SqlParser();\n+\n+    @Test\n+    public void testNoParameter()\n+    {\n+        Statement statement = sqlParser.createStatement(\"SELECT c1, c2 FROM test_table WHERE c1 = 1 AND c2 > 2\", new ParsingOptions());\n+        assertParameterCount(statement, 0);\n+    }\n+\n+    @Test\n+    public void testParameterCount()\n+    {\n+        Statement statement = sqlParser.createStatement(\"SELECT c1, c2 FROM test_table WHERE c1 = ? AND c2 > ?\", new ParsingOptions());\n+        assertParameterCount(statement, 2);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "775899ea095b7a2876dfb8604068f28a97af651c", "url": "https://github.com/trinodb/trino/commit/775899ea095b7a2876dfb8604068f28a97af651c", "message": "Eliminate redundant parameter extraction\n\nParameterExtractor has similar implementations for getParameterCount and\ngetParameters. The former method can make use of the getParameters to\nget the size of parameters.", "committedDate": "2020-06-06T01:47:59Z", "type": "commit"}, {"oid": "775899ea095b7a2876dfb8604068f28a97af651c", "url": "https://github.com/trinodb/trino/commit/775899ea095b7a2876dfb8604068f28a97af651c", "message": "Eliminate redundant parameter extraction\n\nParameterExtractor has similar implementations for getParameterCount and\ngetParameters. The former method can make use of the getParameters to\nget the size of parameters.", "committedDate": "2020-06-06T01:47:59Z", "type": "forcePushed"}]}