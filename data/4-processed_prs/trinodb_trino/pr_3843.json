{"pr_number": 3843, "pr_title": "Add session property for disabling Hive cache", "pr_createdAt": "2020-05-25T11:59:29Z", "pr_url": "https://github.com/trinodb/trino/pull/3843", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMjI3Ng==", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r429902276", "bodyText": "Also drop identity and delagate to session.\nConsider leaving the non-null checks though.\nAdd description to non-null check for session.", "author": "losipiuk", "createdAt": "2020-05-25T12:12:28Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HdfsEnvironment.java", "diffHunk": "@@ -128,8 +125,7 @@ public HdfsContext(ConnectorSession session, String schemaName, String tableName\n             requireNonNull(schemaName, \"schemaName is null\");\n             requireNonNull(tableName, \"tableName is null\");\n             this.identity = requireNonNull(session.getIdentity(), \"session.getIdentity() is null\");\n-            this.source = requireNonNull(session.getSource(), \"session.getSource()\");\n-            this.queryId = Optional.of(session.getQueryId());\n+            this.session = Optional.of(requireNonNull(session));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNzQ5NA==", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r429907494", "bodyText": "Also drop identity and delagate to session.\n\nIdentity cannot be dropped as session object is not always available (e.g some GlueHiveMetastore uses DEFAULT_METASTORE_USER). In the future (once we have Glue impersonation) maybe identity can be dropped", "author": "sopel39", "createdAt": "2020-05-25T12:25:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMjI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkxNzg0MA==", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r429917840", "bodyText": "Yeah - right.\nI also noticed that there is rnn check for session already above. Drop the new one you added.", "author": "losipiuk", "createdAt": "2020-05-25T12:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMjI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMzA4Mw==", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r429903083", "bodyText": "drop hive_ prefix.", "author": "losipiuk", "createdAt": "2020-05-25T12:14:30Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveSessionProperties.java", "diffHunk": "@@ -90,6 +92,7 @@\n     private static final String IGNORE_ABSENT_PARTITIONS = \"ignore_absent_partitions\";\n     private static final String QUERY_PARTITION_FILTER_REQUIRED = \"query_partition_filter_required\";\n     private static final String PROJECTION_PUSHDOWN_ENABLED = \"projection_pushdown_enabled\";\n+    private static final String HIVE_CACHE_ENABLED = \"hive_cache_enabled\";", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNDA0OA==", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r429904048", "bodyText": "Function::identity?", "author": "losipiuk", "createdAt": "2020-05-25T12:16:57Z", "path": "presto-hive/src/main/java/io/prestosql/plugin/hive/HiveSessionProperties.java", "diffHunk": "@@ -363,7 +367,22 @@ public HiveSessionProperties(\n                         PROJECTION_PUSHDOWN_ENABLED,\n                         \"Projection push down enabled for hive\",\n                         hiveConfig.isProjectionPushdownEnabled(),\n-                        false));\n+                        false),\n+                new PropertyMetadata<>(\n+                        HIVE_CACHE_ENABLED,\n+                        \"Enable Hive caching\",\n+                        BOOLEAN,\n+                        Boolean.class,\n+                        rubixEnabledConfig.isCacheEnabled(),\n+                        false,\n+                        value -> {\n+                            boolean booleanValue = (boolean) value;\n+                            if (booleanValue && !rubixEnabledConfig.isCacheEnabled()) {\n+                                throw new PrestoException(INVALID_SESSION_PROPERTY, \"Cache can only be disabled via session property\");\n+                            }\n+                            return booleanValue;\n+                        },\n+                        value -> value));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNDA4NA==", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r430234084", "bodyText": "There is casting involved, so it doesn't work", "author": "sopel39", "createdAt": "2020-05-26T08:14:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNDA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNjEyMg==", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r429906122", "bodyText": "This test methods tends to look to long. Consider splitting into two (possibly calling out to shared private implementation).", "author": "losipiuk", "createdAt": "2020-05-25T12:22:05Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -296,6 +318,41 @@ public void testCacheRead(ReadMode readMode)\n                     assertGreaterThan(getCachedReadsCount(), beforeCachedReadsCount);\n                     assertEquals(getRemoteReadsCount(), firstRemoteReadsCount);\n                 });\n+\n+        long secondRemoteReadsCount = getRemoteReadsCount();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwOTI2Ng==", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r429909266", "bodyText": "The test does:\n\nwrites test file\nreads test file to warm-up cache and asserts counters (this ensures that cache is populated)\nreads test file with cache enabled and asserts counters (this ensures that cache works)\nreads test file with cache disabled via session property (this ensures that session property works)\nreads test fail again with cache enabled using new FS (this ensures that cache data is not dropped)\n\nI guess maybe 3) could be removed, but I don't think it would greatly simplify this test.", "author": "sopel39", "createdAt": "2020-05-25T12:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNjEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkxODUxNQ==", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r429918515", "bodyText": "I was more thinking of having one test which does:\n1,2,3. And other which is focused on session property and does 1,2,4,5. But not sure if that would be more readable.", "author": "losipiuk", "createdAt": "2020-05-25T12:51:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNjEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNDU2Ng==", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r430234566", "bodyText": "I'm not sure there isn't some interaction between 3) and 5), so that's why I prefer keep them together", "author": "sopel39", "createdAt": "2020-05-26T08:15:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwNjEyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMjcxNg==", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r429922716", "bodyText": "I hate this one. We are not sure that we are really testing anything. If we read from cache and stats were updated infrequently the assertions would still pass.\nCould we maybe add some extra cached-read which we do after non-cached read to be sure that we actually capute updated stats?\nActually the // read data with re-enabled cache section does that - but we could be more explicit about test logic here.\nSth like:\ntry (FileSystem cachingFileSystemWithCacheDisabled = getCachingFileSystem(nonCachingContext)) {\n            assertEquals(readFile(cachingFileSystemWithCacheDisabled.open(file)), randomData);\n\n            doSmallCachedRead()\n           assertEventually(\n               ...\n               () -> {\n                    assertGreaterThan(getCachedReadsCount(), secondCachedReadsCount+smallCachedRead);\n                    assertEquals(getRemoteReadsCount(), secondRemoteReadsCount);\n                }\n\n.... this gets ugly and is not readable. But maybe you have an idea how to dress it nicely in Java code and still avoid sleeps.\nIt would be best to have jmx object which exposes last time rubix stats were updated. Can we have it?", "author": "losipiuk", "createdAt": "2020-05-25T13:01:20Z", "path": "presto-hive/src/test/java/io/prestosql/plugin/hive/rubix/TestRubixCaching.java", "diffHunk": "@@ -296,6 +318,41 @@ public void testCacheRead(ReadMode readMode)\n                     assertGreaterThan(getCachedReadsCount(), beforeCachedReadsCount);\n                     assertEquals(getRemoteReadsCount(), firstRemoteReadsCount);\n                 });\n+\n+        long secondRemoteReadsCount = getRemoteReadsCount();\n+        long secondCachedReadsCount = getCachedReadsCount();\n+\n+        // read data with cache disabled via session property\n+        HdfsContext nonCachingContext = new HdfsContext(\n+                TestingConnectorSession.builder()\n+                        .setPropertyMetadata(hiveSessionProperties)\n+                        .setPropertyValues(ImmutableMap.of(\"hive_cache_enabled\", false))\n+                        .build(),\n+                \"test\");\n+        try (FileSystem cachingFileSystemWithCacheDisabled = getCachingFileSystem(nonCachingContext)) {\n+            assertEquals(readFile(cachingFileSystemWithCacheDisabled.open(file)), randomData);\n+\n+            // non-caching (native) file system should be used\n+            sleep(1000);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIzNjE2Mg==", "url": "https://github.com/trinodb/trino/pull/3843#discussion_r430236162", "bodyText": "I hate this one. We are not sure that we are really testing anything. If we read from cache and stats were updated infrequently the assertions would still pass.\n\nI know this sleep isn't great, but 1s should be more then enough and the test won't be flaky if it hiccups. I don't know how to make it better at this point.\n\nIt would be best to have jmx object which exposes last time rubix stats were updated. Can we have it?\n\nThis is probably a good idea, but it won't allow us to skip assertEventually", "author": "sopel39", "createdAt": "2020-05-26T08:17:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMjcxNg=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "accc04a0db77dc30ad7a5c9645f0be474b9a9a43", "url": "https://github.com/trinodb/trino/commit/accc04a0db77dc30ad7a5c9645f0be474b9a9a43", "message": "Include ConnectorSession in HdfsEnvironment", "committedDate": "2020-05-26T08:21:03Z", "type": "commit"}, {"oid": "7f13cfc82fc789618ac30c7f41219fd1e3d782fe", "url": "https://github.com/trinodb/trino/commit/7f13cfc82fc789618ac30c7f41219fd1e3d782fe", "message": "Add session property for disabling Hive cache", "committedDate": "2020-05-26T08:21:03Z", "type": "commit"}, {"oid": "7f13cfc82fc789618ac30c7f41219fd1e3d782fe", "url": "https://github.com/trinodb/trino/commit/7f13cfc82fc789618ac30c7f41219fd1e3d782fe", "message": "Add session property for disabling Hive cache", "committedDate": "2020-05-26T08:21:03Z", "type": "forcePushed"}]}