{"pr_number": 4301, "pr_title": "Improve assertions in TestAllDatatypesFromHiveConnector", "pr_createdAt": "2020-07-01T15:46:22Z", "pr_url": "https://github.com/trinodb/trino/pull/4301", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMzk1OQ==", "url": "https://github.com/trinodb/trino/pull/4301#discussion_r448623959", "bodyText": "?", "author": "findepi", "createdAt": "2020-07-01T21:24:30Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/HiveVersionProvider.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Module;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.initialization.SuiteModuleProvider;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import java.sql.DatabaseMetaData;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+\n+import static io.prestosql.tests.utils.QueryExecutors.onHive;\n+\n+public class HiveVersionProvider\n+{\n+    private Optional<HiveVersion> hiveVersion = Optional.empty();\n+\n+    @Inject\n+    public HiveVersionProvider() {}", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc5ODIxOQ==", "url": "https://github.com/trinodb/trino/pull/4301#discussion_r448798219", "bodyText": "dropped", "author": "losipiuk", "createdAt": "2020-07-02T07:20:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMzk1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDI0MQ==", "url": "https://github.com/trinodb/trino/pull/4301#discussion_r448624241", "bodyText": "make this thread safe", "author": "findepi", "createdAt": "2020-07-01T21:25:12Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/HiveVersionProvider.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Module;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.initialization.SuiteModuleProvider;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import java.sql.DatabaseMetaData;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+\n+import static io.prestosql.tests.utils.QueryExecutors.onHive;\n+\n+public class HiveVersionProvider\n+{\n+    private Optional<HiveVersion> hiveVersion = Optional.empty();\n+\n+    @Inject\n+    public HiveVersionProvider() {}\n+\n+    public HiveVersion getHiveVersion()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNTE2Ng==", "url": "https://github.com/trinodb/trino/pull/4301#discussion_r448625166", "bodyText": "return binder -> binder.bind(HiveVersionProvider.class).in(Singleton.class);", "author": "findepi", "createdAt": "2020-07-01T21:27:09Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/HiveVersionProvider.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Module;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.initialization.SuiteModuleProvider;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import java.sql.DatabaseMetaData;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+\n+import static io.prestosql.tests.utils.QueryExecutors.onHive;\n+\n+public class HiveVersionProvider\n+{\n+    private Optional<HiveVersion> hiveVersion = Optional.empty();\n+\n+    @Inject\n+    public HiveVersionProvider() {}\n+\n+    public HiveVersion getHiveVersion()\n+    {\n+        if (hiveVersion.isEmpty()) {\n+            detectHiveVersion();\n+        }\n+        return hiveVersion.get();\n+    }\n+\n+    private void detectHiveVersion()\n+    {\n+        try {\n+            DatabaseMetaData metaData = onHive().getConnection().getMetaData();\n+            int majorVersion = metaData.getDatabaseMajorVersion();\n+            int minorVersion = metaData.getDatabaseMinorVersion();\n+            this.hiveVersion = Optional.of(HiveVersion.createFromParts(majorVersion, minorVersion));\n+        }\n+        catch (SQLException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static class ModuleProvider\n+            implements SuiteModuleProvider\n+    {\n+        @Override\n+        public Module getModule(Configuration configuration)\n+        {\n+            return new AbstractModule()\n+            {\n+                @Override\n+                protected void configure()\n+                {\n+                    bind(HiveVersionProvider.class).in(Singleton.class);\n+                }\n+            };", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNTU3MA==", "url": "https://github.com/trinodb/trino/pull/4301#discussion_r448625570", "bodyText": "make this method return HiveVersion (then may be static)\nthis improves flow in getHiveVersion()", "author": "findepi", "createdAt": "2020-07-01T21:28:03Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/HiveVersionProvider.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.prestosql.tests.hive;\n+\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Module;\n+import io.prestosql.tempto.configuration.Configuration;\n+import io.prestosql.tempto.initialization.SuiteModuleProvider;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import java.sql.DatabaseMetaData;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+\n+import static io.prestosql.tests.utils.QueryExecutors.onHive;\n+\n+public class HiveVersionProvider\n+{\n+    private Optional<HiveVersion> hiveVersion = Optional.empty();\n+\n+    @Inject\n+    public HiveVersionProvider() {}\n+\n+    public HiveVersion getHiveVersion()\n+    {\n+        if (hiveVersion.isEmpty()) {\n+            detectHiveVersion();\n+        }\n+        return hiveVersion.get();\n+    }\n+\n+    private void detectHiveVersion()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNTk4OA==", "url": "https://github.com/trinodb/trino/pull/4301#discussion_r448625988", "bodyText": "can we expect \\\\. or (\\\\.|$) after 3rd number? (or how would we parse 3.1.2a3-xyz?)\nmove to the top\ntechnically, ^ and $ are redundant (you use matcher.matches() anyway)", "author": "findepi", "createdAt": "2020-07-01T21:29:00Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/HiveVersion.java", "diffHunk": "@@ -34,8 +39,22 @@ public int getMinorVersion()\n         return minorVersion;\n     }\n \n-    public static HiveVersion createFromParts(int majorVersion, int minorVersion)\n+    public int getPatchVersion()\n+    {\n+        return patchVersion;\n+    }\n+\n+    private static final Pattern HIVE_VERSION_PATTERN = Pattern.compile(\"^(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+).*$\");", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgyOTI4Nw==", "url": "https://github.com/trinodb/trino/pull/4301#discussion_r448829287", "bodyText": "3.1.2a3-xyz good point (maybe) that would fail of course. Though I did not ever see any letters in version string. returned by metadata (what I saw always looked like this: 3.1.3000.7.1.1.0-565)\nLet's address it when we spot it.", "author": "losipiuk", "createdAt": "2020-07-02T08:17:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNTk4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNzMyOA==", "url": "https://github.com/trinodb/trino/pull/4301#discussion_r448627328", "bodyText": "the brokenness is specific to Avro, Parquet and binary RCFile (afaict), but not eg to ORC.\nso isHiveWithBrokenAvroParquetTimestamps ?", "author": "findepi", "createdAt": "2020-07-01T21:32:06Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestAllDatatypesFromHiveConnector.java", "diffHunk": "@@ -398,17 +398,26 @@ public void testSelectAllDatatypesParquetFile()\n                         234.567,\n                         new BigDecimal(\"346\"),\n                         new BigDecimal(\"345.67800\"),\n-                        getHiveVersionMajor() < 3\n-                                ? Timestamp.valueOf(LocalDateTime.of(2015, 5, 10, 12, 15, 35, 123_000_000))\n+                        isHiveWithBrokenTimestampSemantics()\n                                 // TODO (https://github.com/prestosql/presto/issues/1218) requires https://issues.apache.org/jira/browse/HIVE-21002\n-                                : Timestamp.valueOf(LocalDateTime.of(2015, 5, 10, 18, 0, 35, 123_000_000)),\n+                                ? Timestamp.valueOf(LocalDateTime.of(2015, 5, 10, 18, 0, 35, 123_000_000))\n+                                : Timestamp.valueOf(LocalDateTime.of(2015, 5, 10, 12, 15, 35, 123_000_000)),\n                         \"ala ma kota\",\n                         \"ala ma kot\",\n                         \"ala ma    \",\n                         true,\n                         \"kot binarny\".getBytes(UTF_8)));\n     }\n \n+    private boolean isHiveWithBrokenTimestampSemantics()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNzc4Ng==", "url": "https://github.com/trinodb/trino/pull/4301#discussion_r448627786", "bodyText": "That's not exact.\n\nIn 3.1.0 timestamp semantics in hive changed in backward incompatible way\n\nTrue, https://issues.apache.org/jira/browse/HIVE-12192\n\nwhich was fixed in 3.1.2\n\nportion thereof, not all of it", "author": "findepi", "createdAt": "2020-07-01T21:33:12Z", "path": "presto-product-tests/src/main/java/io/prestosql/tests/hive/TestAllDatatypesFromHiveConnector.java", "diffHunk": "@@ -398,17 +398,26 @@ public void testSelectAllDatatypesParquetFile()\n                         234.567,\n                         new BigDecimal(\"346\"),\n                         new BigDecimal(\"345.67800\"),\n-                        getHiveVersionMajor() < 3\n-                                ? Timestamp.valueOf(LocalDateTime.of(2015, 5, 10, 12, 15, 35, 123_000_000))\n+                        isHiveWithBrokenTimestampSemantics()\n                                 // TODO (https://github.com/prestosql/presto/issues/1218) requires https://issues.apache.org/jira/browse/HIVE-21002\n-                                : Timestamp.valueOf(LocalDateTime.of(2015, 5, 10, 18, 0, 35, 123_000_000)),\n+                                ? Timestamp.valueOf(LocalDateTime.of(2015, 5, 10, 18, 0, 35, 123_000_000))\n+                                : Timestamp.valueOf(LocalDateTime.of(2015, 5, 10, 12, 15, 35, 123_000_000)),\n                         \"ala ma kota\",\n                         \"ala ma kot\",\n                         \"ala ma    \",\n                         true,\n                         \"kot binarny\".getBytes(UTF_8)));\n     }\n \n+    private boolean isHiveWithBrokenTimestampSemantics()\n+    {\n+        // In 3.1.0 timestamp semantics in hive changed in backward incompatible way, which was fixed in 3.1.2\n+        // https://issues.apache.org/jira/browse/HIVE-21002", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "d769eab40aceb8350a332299f1904f193aed49d2", "url": "https://github.com/trinodb/trino/commit/d769eab40aceb8350a332299f1904f193aed49d2", "message": "Extract Hive version detection to HiveVersionProvider", "committedDate": "2020-07-02T09:57:39Z", "type": "commit"}, {"oid": "50e07244fc1d14a8efc9b3677a6fa0301377f4c5", "url": "https://github.com/trinodb/trino/commit/50e07244fc1d14a8efc9b3677a6fa0301377f4c5", "message": "Expose Hive patch version to product tests", "committedDate": "2020-07-02T09:57:39Z", "type": "commit"}, {"oid": "8aac45666b319a31a4d4133b27e0e93773836118", "url": "https://github.com/trinodb/trino/commit/8aac45666b319a31a4d4133b27e0e93773836118", "message": "Improve assertions in TestAllDatatypesFromHiveConnector", "committedDate": "2020-07-02T09:57:39Z", "type": "commit"}, {"oid": "8aac45666b319a31a4d4133b27e0e93773836118", "url": "https://github.com/trinodb/trino/commit/8aac45666b319a31a4d4133b27e0e93773836118", "message": "Improve assertions in TestAllDatatypesFromHiveConnector", "committedDate": "2020-07-02T09:57:39Z", "type": "forcePushed"}]}