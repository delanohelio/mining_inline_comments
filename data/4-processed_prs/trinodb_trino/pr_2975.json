{"pr_number": 2975, "pr_title": "Reduce instance size and block copies in Page class", "pr_createdAt": "2020-03-01T20:57:13Z", "pr_url": "https://github.com/trinodb/trino/pull/2975", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0MzgxNA==", "url": "https://github.com/trinodb/trino/pull/2975#discussion_r386343814", "bodyText": "does this bring any performance benefits? I think it's negligible optimization and can be removed", "author": "sopel39", "createdAt": "2020-03-02T11:40:24Z", "path": "presto-spi/src/main/java/io/prestosql/spi/Page.java", "diffHunk": "@@ -23,35 +23,38 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.atomic.AtomicLong;\n \n import static io.airlift.slice.SizeOf.sizeOf;\n import static io.prestosql.spi.block.DictionaryId.randomDictionaryId;\n import static java.lang.Math.min;\n import static java.lang.String.format;\n import static java.util.Objects.requireNonNull;\n \n-public class Page\n+public final class Page\n {\n-    public static final int INSTANCE_SIZE = ClassLayout.parseClass(Page.class).instanceSize() +\n-            (3 * ClassLayout.parseClass(AtomicLong.class).instanceSize());\n+    public static final int INSTANCE_SIZE = ClassLayout.parseClass(Page.class).instanceSize();\n \n     private final Block[] blocks;\n     private final int positionCount;\n-    private final AtomicLong sizeInBytes = new AtomicLong(-1);\n-    private final AtomicLong retainedSizeInBytes = new AtomicLong(-1);\n-    private final AtomicLong logicalSizeInBytes = new AtomicLong(-1);\n+    private volatile long sizeInBytes = -1;\n+    private volatile long retainedSizeInBytes = -1;\n+    private volatile long logicalSizeInBytes = -1;\n \n     public Page(Block... blocks)\n     {\n-        this(determinePositionCount(blocks), blocks);\n+        this(true, determinePositionCount(blocks), blocks);\n     }\n \n     public Page(int positionCount, Block... blocks)\n+    {\n+        this(true, positionCount, blocks);\n+    }\n+\n+    private Page(boolean blocksCopyRequired, int positionCount, Block[] blocks)\n     {\n         requireNonNull(blocks, \"blocks is null\");\n-        this.blocks = Arrays.copyOf(blocks, blocks.length);\n         this.positionCount = positionCount;\n+        this.blocks = blocksCopyRequired ? blocks.clone() : blocks;", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwNjUyOQ==", "url": "https://github.com/trinodb/trino/pull/2975#discussion_r386406529", "bodyText": "In short, yes. This is proportional to the width of the page, so at a width of 256 columns without compressed oops- this is (256 * 8 bytes) ~2KiB for the array alone and that's essentially double since virtually all \"new page\" creating operations already allocated a Block array of that size before passing it in. This is often an \"inner loop\" to the real work being done on queries and workloads exists with significantly more than 256 columns. I'm actually more inclined to ask whether the defensive copy is carrying it's weight at all, but this iteration was just to remove it for \"trusted\" invocations of the constructor. Maybe a middle ground would be having a global flag (similar to \"enable assertions\") that could disable these copies entirely?", "author": "pettyjamesm", "createdAt": "2020-03-02T13:57:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0MzgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0NDI2Ng==", "url": "https://github.com/trinodb/trino/pull/2975#discussion_r386344266", "bodyText": "undo", "author": "sopel39", "createdAt": "2020-03-02T11:41:22Z", "path": "presto-spi/src/main/java/io/prestosql/spi/Page.java", "diffHunk": "@@ -311,16 +317,17 @@ public Page prependColumn(Block column)\n         result[0] = column;\n         System.arraycopy(blocks, 0, result, 1, blocks.length);\n \n-        return new Page(positionCount, result);\n+        return new Page(false, positionCount, result);\n     }\n \n-    private void updateRetainedSize()\n+    private long updateRetainedSize()", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwNzQ4Mg==", "url": "https://github.com/trinodb/trino/pull/2975#discussion_r386407482", "bodyText": "The alternative is a redundant volatile read in getRetainedSize() which is probably not that bad but seemed worse than modifying the return type here. Would you be satisfied with a rename (eg: updateAndReturnRetainedSize()) or is there something specific you want to preserve by keeping this method void?", "author": "pettyjamesm", "createdAt": "2020-03-02T13:59:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0NDI2Ng=="}], "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4Nzg2Ng==", "url": "https://github.com/trinodb/trino/pull/2975#discussion_r403387866", "bodyText": "Can you merge this commit into the last one, rename this method to wrapBlocksWithoutCopy, and then use this method in page instead of the constructor. I think this will make the Page code more readable because it will clearly state the intent to avoid the extra copy.", "author": "dain", "createdAt": "2020-04-03T23:52:27Z", "path": "presto-spi/src/main/java/io/prestosql/spi/Page.java", "diffHunk": "@@ -34,6 +34,15 @@\n {\n     public static final int INSTANCE_SIZE = ClassLayout.parseClass(Page.class).instanceSize();\n \n+    /**\n+     * Visible to give trusted classes like {@link PageBuilder} access to a constructor that doesn't\n+     * defensively copy the blocks\n+     */\n+    static Page ofBlocksWithoutCopy(int positionCount, Block[] blocks)", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA0MjY5OA==", "url": "https://github.com/trinodb/trino/pull/2975#discussion_r404042698", "bodyText": "Done.", "author": "pettyjamesm", "createdAt": "2020-04-06T12:13:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4Nzg2Ng=="}], "type": "inlineReview"}, {"oid": "fbb3b75b5bc6052c38bc6634e1df8e2d6b640f27", "url": "https://github.com/trinodb/trino/commit/fbb3b75b5bc6052c38bc6634e1df8e2d6b640f27", "message": "Reduce instance size and block copies in Page class\n\nRefactors Page class to avoid extra allocations and copies. Fields\ndidn't require AtomicLong semantics and simple volatile fields are\nnow used instead. Additionally, trusted methods can avoid copying\nBlock[] in the page constructor by using a new static helper method.\nFinally, no valid reason should exist for Page subclassing, so the\nclass is now final.", "committedDate": "2020-04-06T12:12:45Z", "type": "commit"}, {"oid": "fbb3b75b5bc6052c38bc6634e1df8e2d6b640f27", "url": "https://github.com/trinodb/trino/commit/fbb3b75b5bc6052c38bc6634e1df8e2d6b640f27", "message": "Reduce instance size and block copies in Page class\n\nRefactors Page class to avoid extra allocations and copies. Fields\ndidn't require AtomicLong semantics and simple volatile fields are\nnow used instead. Additionally, trusted methods can avoid copying\nBlock[] in the page constructor by using a new static helper method.\nFinally, no valid reason should exist for Page subclassing, so the\nclass is now final.", "committedDate": "2020-04-06T12:12:45Z", "type": "forcePushed"}]}