{"pr_number": 760, "pr_title": "Updates regarting ImportHandlers and ImportJobs.", "pr_createdAt": "2020-05-22T14:59:11Z", "pr_url": "https://github.com/scireum/sirius-biz/pull/760", "timeline": [{"oid": "9bfb233072787bf92f484e397b502e6dfad61011", "url": "https://github.com/scireum/sirius-biz/commit/9bfb233072787bf92f484e397b502e6dfad61011", "message": "Updates to the latest sirius dependencies.", "committedDate": "2020-05-22T14:27:25Z", "type": "commit"}, {"oid": "bad78307e0c5acc44c1e804ce1a98e667e9cf3ea", "url": "https://github.com/scireum/sirius-biz/commit/bad78307e0c5acc44c1e804ce1a98e667e9cf3ea", "message": "Uses SmartQuery.iterateBlockwise where suitable.", "committedDate": "2020-05-22T14:28:17Z", "type": "commit"}, {"oid": "48fa33f05fd84b6cc1b0bd67d307a9ef0df70777", "url": "https://github.com/scireum/sirius-biz/commit/48fa33f05fd84b6cc1b0bd67d307a9ef0df70777", "message": "Code style.\n\nConstructors of abstract classes shouldn't be public.", "committedDate": "2020-05-22T14:28:48Z", "type": "commit"}, {"oid": "87507347f32c096ab2cd968b7f4efa1ab52f57e8", "url": "https://github.com/scireum/sirius-biz/commit/87507347f32c096ab2cd968b7f4efa1ab52f57e8", "message": "Fixes a JavaDoc.", "committedDate": "2020-05-22T14:28:59Z", "type": "commit"}, {"oid": "ba7ec2b87318c8c0dcd87fb57512751ecee387e9", "url": "https://github.com/scireum/sirius-biz/commit/ba7ec2b87318c8c0dcd87fb57512751ecee387e9", "message": "Removes unnecessary code.\n\nThis has also been removed for SQLUserAccountImportHandler.\nThe same effect can now be achieved by invoking the method\nMongoTenantAware.skipTenantCheck() before saving the entity.", "committedDate": "2020-05-22T14:30:29Z", "type": "commit"}, {"oid": "673191c13eff2a75347e0aa294b5a3ca2b48a7ad", "url": "https://github.com/scireum/sirius-biz/commit/673191c13eff2a75347e0aa294b5a3ca2b48a7ad", "message": "Adds a common enum which can be used to control how missing entities are resolved.", "committedDate": "2020-05-22T14:31:07Z", "type": "commit"}, {"oid": "0889bd2ac20159475a4e79c916350ec200ccab97", "url": "https://github.com/scireum/sirius-biz/commit/0889bd2ac20159475a4e79c916350ec200ccab97", "message": "Merge remote-tracking branch 'origin/master' into aha/io-update", "committedDate": "2020-05-22T14:53:15Z", "type": "commit"}, {"oid": "b4fef7f86dac5c6fe1a7b44fdcb40190313ee23b", "url": "https://github.com/scireum/sirius-biz/commit/b4fef7f86dac5c6fe1a7b44fdcb40190313ee23b", "message": "Moves the import transactions framework from SellSite to sirius-biz.\n\nThe framework is product agnostic and has a great potential\nto be re-used.", "committedDate": "2020-05-22T14:55:06Z", "type": "commit"}, {"oid": "af4f95d57197f4faca501649b1a8470e4b8c4b50", "url": "https://github.com/scireum/sirius-biz/commit/af4f95d57197f4faca501649b1a8470e4b8c4b50", "message": "Provides translations for a common enum.", "committedDate": "2020-05-22T14:55:41Z", "type": "commit"}, {"oid": "f1107cbea7328ec7faf210d1c78585638a36af2f", "url": "https://github.com/scireum/sirius-biz/commit/f1107cbea7328ec7faf210d1c78585638a36af2f", "message": "Provides a base class for an sync import.\n\nSuch an import is intended to be used when working\nwith relational entities (entities representing a relation\nbetween other entities). These entities are often\nsynchronized in the ways described by SyncMode.\n\nThe EntityImportSyncJob provides the bulk load of\nthe implementation required to perform these.", "committedDate": "2020-05-22T14:57:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwOTUxOA==", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429309518", "bodyText": "find den feldname nicht gut, wieso nicht einfach transactionId oder importId oder sowas in die Richtung?", "author": "sabieber", "createdAt": "2020-05-22T15:19:58Z", "path": "src/main/java/sirius/biz/importer/txn/ImportTransactionData.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.importer.txn;\n+\n+import sirius.biz.importer.AutoImport;\n+import sirius.biz.protocol.NoJournal;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.Mapping;\n+\n+/**\n+ * Contains an import transaction id.\n+ * <p>\n+ * This is used by the {@link ImportTransactionHelper} to identify and delete all unchanged\n+ * entities after an update transaction has beend completed.\n+ * <p>\n+ * Note that appropriate index should be added to the embedding entity.\n+ */\n+public class ImportTransactionData extends Composite {\n+\n+    /**\n+     * Represents the last import transaction id which was used to modify the owning entity.\n+     */\n+    public static final Mapping TXN_ID = Mapping.named(\"txnId\");\n+    @AutoImport\n+    @NoJournal\n+    private long txnId = 0;", "originalCommit": "b4fef7f86dac5c6fe1a7b44fdcb40190313ee23b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMTA1MA==", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429311050", "bodyText": "Bzw rein theoretisch ginge ja wahrscheinlich auch nur ID weils ja n composite ist", "author": "sabieber", "createdAt": "2020-05-22T15:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwOTUxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyOTMxNA==", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429329314", "bodyText": "das ist halt bei S2 schon \u00fcberall so drin - un eigentlich ists wurst wie das feld heisst, auf das greifft man eig eh nie manuell zu", "author": "andyHa", "createdAt": "2020-05-22T15:57:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwOTUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMjI5Nw==", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429312297", "bodyText": "Find den Namen irgendwie nicht sehr deskriptiv, wieso nicht sowas wie TransactionalEntitiyImportJob oder RelationalEntityImportJob?", "author": "sabieber", "createdAt": "2020-05-22T15:25:17Z", "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportSyncJob.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.importer.format.ImportDictionary;\n+import sirius.biz.importer.txn.ImportTransactionHelper;\n+import sirius.biz.importer.txn.ImportTransactionalEntity;\n+import sirius.biz.jobs.params.BooleanParameter;\n+import sirius.biz.jobs.params.EnumParameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.tenants.Tenants;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.commons.Context;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.HandledException;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.data.LineBasedProcessor;\n+\n+import java.io.InputStream;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides a job for importing line based files (CSV, Excel) as relational entities.\n+ * <p>\n+ * This job behaves alomost exactly like {@link EntityImportJob}. The only difference is that it is suited for\n+ * \"relational\" entities (entities which represent a relation between two other entities). Theser are often\n+ * synchronized as described by {@link SyncMode}, which is handled by this implementation.\n+ * <p>\n+ * To support an ideal operation, such entities should implement {@link ImportTransactionalEntity} to that the\n+ * framework can provide efficient delta updates.\n+ *\n+ * @param <E> the type of entities being imported by this job\n+ * @param <Q> the generic type of queries for the entities being procesed\n+ */\n+public class EntityImportSyncJob<E extends BaseEntity<?> & ImportTransactionalEntity, Q extends Query<Q, E, ?>>", "originalCommit": "f1107cbea7328ec7faf210d1c78585638a36af2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNTcyOA==", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429315728", "bodyText": "F\u00e4nd RelationalEntityImportJob auch besser", "author": "mkeckmkeck", "createdAt": "2020-05-22T15:31:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMjI5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMjY2NQ==", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429312665", "bodyText": "sollten parts ned eher \u00fcber klassenfelder?", "author": "sabieber", "createdAt": "2020-05-22T15:25:55Z", "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportSyncJob.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.importer.format.ImportDictionary;\n+import sirius.biz.importer.txn.ImportTransactionHelper;\n+import sirius.biz.importer.txn.ImportTransactionalEntity;\n+import sirius.biz.jobs.params.BooleanParameter;\n+import sirius.biz.jobs.params.EnumParameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.tenants.Tenants;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.commons.Context;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.HandledException;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.data.LineBasedProcessor;\n+\n+import java.io.InputStream;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides a job for importing line based files (CSV, Excel) as relational entities.\n+ * <p>\n+ * This job behaves alomost exactly like {@link EntityImportJob}. The only difference is that it is suited for\n+ * \"relational\" entities (entities which represent a relation between two other entities). Theser are often\n+ * synchronized as described by {@link SyncMode}, which is handled by this implementation.\n+ * <p>\n+ * To support an ideal operation, such entities should implement {@link ImportTransactionalEntity} to that the\n+ * framework can provide efficient delta updates.\n+ *\n+ * @param <E> the type of entities being imported by this job\n+ * @param <Q> the generic type of queries for the entities being procesed\n+ */\n+public class EntityImportSyncJob<E extends BaseEntity<?> & ImportTransactionalEntity, Q extends Query<Q, E, ?>>\n+        extends DictionaryBasedImportJob {\n+\n+    protected final EntityDescriptor descriptor;\n+    protected Consumer<Context> contextExtender;\n+    protected ImportTransactionHelper importTransactionHelper;\n+    protected Class<E> type;\n+    protected SyncMode mode;\n+    protected BiConsumer<ProcessContext, Q> queryTuner;\n+\n+    @Part\n+    private static Mixing mixing;", "originalCommit": "f1107cbea7328ec7faf210d1c78585638a36af2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMzQwNQ==", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429313405", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void createorUpdateEntity(E entity, Context context, Watch watch) {\n          \n          \n            \n                private void createOrUpdateEntity(E entity, Context context, Watch watch) {\n          \n      \n    \n    \n  \n\nund halt an den anderen stellen auch", "author": "sabieber", "createdAt": "2020-05-22T15:27:17Z", "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportSyncJob.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.importer.format.ImportDictionary;\n+import sirius.biz.importer.txn.ImportTransactionHelper;\n+import sirius.biz.importer.txn.ImportTransactionalEntity;\n+import sirius.biz.jobs.params.BooleanParameter;\n+import sirius.biz.jobs.params.EnumParameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.tenants.Tenants;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.commons.Context;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.HandledException;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.data.LineBasedProcessor;\n+\n+import java.io.InputStream;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides a job for importing line based files (CSV, Excel) as relational entities.\n+ * <p>\n+ * This job behaves alomost exactly like {@link EntityImportJob}. The only difference is that it is suited for\n+ * \"relational\" entities (entities which represent a relation between two other entities). Theser are often\n+ * synchronized as described by {@link SyncMode}, which is handled by this implementation.\n+ * <p>\n+ * To support an ideal operation, such entities should implement {@link ImportTransactionalEntity} to that the\n+ * framework can provide efficient delta updates.\n+ *\n+ * @param <E> the type of entities being imported by this job\n+ * @param <Q> the generic type of queries for the entities being procesed\n+ */\n+public class EntityImportSyncJob<E extends BaseEntity<?> & ImportTransactionalEntity, Q extends Query<Q, E, ?>>\n+        extends DictionaryBasedImportJob {\n+\n+    protected final EntityDescriptor descriptor;\n+    protected Consumer<Context> contextExtender;\n+    protected ImportTransactionHelper importTransactionHelper;\n+    protected Class<E> type;\n+    protected SyncMode mode;\n+    protected BiConsumer<ProcessContext, Q> queryTuner;\n+\n+    @Part\n+    private static Mixing mixing;\n+\n+    @Part\n+    private static Tenants<?, ?, ?> rawTenants;\n+\n+    /**\n+     * Creates a new job for the given factory, name and process.\n+     *\n+     * @param fileParameter        the parameter which is used to derive the import file from\n+     * @param ignoreEmptyParameter the parameter which is used to determine if empty values should be ignored\n+     * @param syncModeParameter    the parameter which is used to determine the {@link SyncMode} to use\n+     * @param type                 the type of entities being imported\n+     * @param dictionary           the import dictionary to use\n+     * @param process              the process context itself\n+     * @param factoryName          the name of the factory which created this job\n+     */\n+    public EntityImportSyncJob(FileParameter fileParameter,\n+                               BooleanParameter ignoreEmptyParameter,\n+                               EnumParameter<SyncMode> syncModeParameter,\n+                               Class<E> type,\n+                               ImportDictionary dictionary,\n+                               ProcessContext process,\n+                               String factoryName) {\n+        super(fileParameter, ignoreEmptyParameter, dictionary, process);\n+        this.importer.setFactoryName(factoryName);\n+        this.importTransactionHelper = importer.findHelper(ImportTransactionHelper.class);\n+        this.mode = process.getParameter(syncModeParameter).orElse(SyncMode.NEW_AND_UPDATE_ONLY);\n+        this.type = type;\n+        this.descriptor = mixing.getDescriptor(type);\n+    }\n+\n+    /**\n+     * Specifies a context extender which can be used to transfer job parameters into the import context.\n+     *\n+     * @param contextExtender the extender to specify\n+     * @return the import job itself for fluent method calls\n+     */\n+    public EntityImportSyncJob<E, Q> withContextExtender(Consumer<Context> contextExtender) {\n+        this.contextExtender = contextExtender;\n+        return this;\n+    }\n+\n+    public EntityImportSyncJob<E, Q> withDeleteQueryTuner(BiConsumer<ProcessContext, Q> queryTuner) {\n+        this.queryTuner = queryTuner;\n+        return this;\n+    }\n+\n+    @Override\n+    protected void executeForStream(String filename, InputStream in) throws Exception {\n+        importTransactionHelper.start();\n+        LineBasedProcessor.create(filename, in).run(this, error -> {\n+            process.handle(error);\n+            return true;\n+        });\n+        commitImportTransaction();\n+    }\n+\n+    /**\n+     * Commits the import transaction by deleting all untouched entities.\n+     */\n+    protected void commitImportTransaction() {\n+        if (mode != SyncMode.SYNC) {\n+            return;\n+        }\n+\n+        Watch watch = Watch.start();\n+        importTransactionHelper.deleteUnmarked(type, this::tuneImportTransactionDeleteQuery, entity -> {\n+            process.addTiming(NLS.get(\"EntityImportJob.entityDeleted\"), watch.elapsed(TimeUnit.MILLISECONDS, true));\n+        });\n+    }\n+\n+    /**\n+     * Tunes the delete query of the import transaction so that all untouched entities will be deleted.\n+     *\n+     * @param deleteQuery the query to enhance\n+     */\n+    protected void tuneImportTransactionDeleteQuery(Q deleteQuery) {\n+        queryTuner.accept(process, deleteQuery);\n+    }\n+\n+    @Override\n+    protected final void handleRow(int index, Context context) {\n+        Watch watch = Watch.start();\n+\n+        if (contextExtender != null) {\n+            contextExtender.accept(context);\n+        }\n+\n+        E entity = findAndLoad(context);\n+        if (mode == SyncMode.DELETE_EXISTING) {\n+            if (!entity.isNew()) {\n+                importer.deleteNow(entity);\n+                process.addTiming(NLS.get(\"EntityImportJob.entityDeleted\"), watch.elapsedMillis());\n+            }\n+        } else {\n+            createorUpdateEntity(entity, context, watch);\n+        }\n+    }\n+\n+    private void createorUpdateEntity(E entity, Context context, Watch watch) {", "originalCommit": "f1107cbea7328ec7faf210d1c78585638a36af2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNjIyNA==", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429316224", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * \"relational\" entities (entities which represent a relation between two other entities). Theser are often\n          \n          \n            \n             * \"relational\" entities (entities which represent a relation between two other entities). These are often", "author": "mkeckmkeck", "createdAt": "2020-05-22T15:32:40Z", "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportSyncJob.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.importer.format.ImportDictionary;\n+import sirius.biz.importer.txn.ImportTransactionHelper;\n+import sirius.biz.importer.txn.ImportTransactionalEntity;\n+import sirius.biz.jobs.params.BooleanParameter;\n+import sirius.biz.jobs.params.EnumParameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.tenants.Tenants;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.commons.Context;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.HandledException;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.data.LineBasedProcessor;\n+\n+import java.io.InputStream;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides a job for importing line based files (CSV, Excel) as relational entities.\n+ * <p>\n+ * This job behaves alomost exactly like {@link EntityImportJob}. The only difference is that it is suited for\n+ * \"relational\" entities (entities which represent a relation between two other entities). Theser are often", "originalCommit": "f1107cbea7328ec7faf210d1c78585638a36af2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNjQxMw==", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429316413", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * To support an ideal operation, such entities should implement {@link ImportTransactionalEntity} to that the\n          \n          \n            \n             * To support an efficient operation, such entities should implement {@link ImportTransactionalEntity} to that the", "author": "mkeckmkeck", "createdAt": "2020-05-22T15:33:04Z", "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportSyncJob.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.importer.format.ImportDictionary;\n+import sirius.biz.importer.txn.ImportTransactionHelper;\n+import sirius.biz.importer.txn.ImportTransactionalEntity;\n+import sirius.biz.jobs.params.BooleanParameter;\n+import sirius.biz.jobs.params.EnumParameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.tenants.Tenants;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.commons.Context;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.HandledException;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.data.LineBasedProcessor;\n+\n+import java.io.InputStream;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides a job for importing line based files (CSV, Excel) as relational entities.\n+ * <p>\n+ * This job behaves alomost exactly like {@link EntityImportJob}. The only difference is that it is suited for\n+ * \"relational\" entities (entities which represent a relation between two other entities). Theser are often\n+ * synchronized as described by {@link SyncMode}, which is handled by this implementation.\n+ * <p>\n+ * To support an ideal operation, such entities should implement {@link ImportTransactionalEntity} to that the", "originalCommit": "f1107cbea7328ec7faf210d1c78585638a36af2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxODk1MA==", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429318950", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Only updates existing entities.\n          \n          \n            \n                 * Creates new entities and also updates existing ones.", "author": "mkeckmkeck", "createdAt": "2020-05-22T15:38:04Z", "path": "src/main/java/sirius/biz/jobs/batch/file/SyncMode.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.kernel.nls.NLS;\n+\n+/**\n+ * Declares the modes of operation for an {@link EntityImportJob}.\n+ */\n+public enum SyncMode {\n+\n+    /**\n+     * Only updates existing entities.", "originalCommit": "f1107cbea7328ec7faf210d1c78585638a36af2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxOTQ1Ng==", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429319456", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Creates new entities and also updates existing ones.\n          \n          \n            \n                 * Creates new entities, updates existing ones and deletes outdated entities.", "author": "mkeckmkeck", "createdAt": "2020-05-22T15:38:56Z", "path": "src/main/java/sirius/biz/jobs/batch/file/SyncMode.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.kernel.nls.NLS;\n+\n+/**\n+ * Declares the modes of operation for an {@link EntityImportJob}.\n+ */\n+public enum SyncMode {\n+\n+    /**\n+     * Only updates existing entities.\n+     */\n+    NEW_AND_UPDATE_ONLY,\n+\n+    /**\n+     * Only updates existing entities.\n+     */\n+    UPDATE_ONLY,\n+\n+    /**\n+     * Only creates new entities.\n+     */\n+    NEW_ONLY,\n+\n+    /**\n+     * Creates new entities and also updates existing ones.", "originalCommit": "f1107cbea7328ec7faf210d1c78585638a36af2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6e2ace6436ed322bd7de670b7d25a442ef67f7ff", "url": "https://github.com/scireum/sirius-biz/commit/6e2ace6436ed322bd7de670b7d25a442ef67f7ff", "message": "Apply suggestions from code review\n\nCo-authored-by: Matthias Keck <60612914+mkeckmkeck@users.noreply.github.com>\nCo-authored-by: Sascha Bieberstein <sabieber@users.noreply.github.com>", "committedDate": "2020-05-22T15:52:34Z", "type": "commit"}, {"oid": "2997a36cf90471ea66af06a16799a5f795e1ffb0", "url": "https://github.com/scireum/sirius-biz/commit/2997a36cf90471ea66af06a16799a5f795e1ffb0", "message": "Merge remote-tracking branch 'origin/master' into aha/io-update", "committedDate": "2020-05-22T15:52:51Z", "type": "commit"}, {"oid": "02ce493d19cb00ae9d9181762578c2dbdaf63645", "url": "https://github.com/scireum/sirius-biz/commit/02ce493d19cb00ae9d9181762578c2dbdaf63645", "message": "Changes based on PR review comments.", "committedDate": "2020-05-22T15:55:46Z", "type": "commit"}]}