{"pr_number": 904, "pr_title": "BREAKING CHANGE: Makes Job Parameters immutable.", "pr_createdAt": "2020-11-11T19:39:39Z", "pr_url": "https://github.com/scireum/sirius-biz/pull/904", "timeline": [{"oid": "48796bc53937250746f3726a9cd6eb68a2b8897f", "url": "https://github.com/scireum/sirius-biz/commit/48796bc53937250746f3726a9cd6eb68a2b8897f", "message": "Updates to the latest sirius dependencies.", "committedDate": "2020-11-11T17:39:57Z", "type": "commit"}, {"oid": "1b442321399184bfcfe3e4625cc37c4cf49ac25e", "url": "https://github.com/scireum/sirius-biz/commit/1b442321399184bfcfe3e4625cc37c4cf49ac25e", "message": "Refactors the Parameter of jobs.\n\nPreviously parameters were stateful instances which could not safely be shared or reused.\n\nWe now split the builder from the immutable result \"Parameter\" which can be made public\nvisible without the danger of a consumer or job which modifies the global instance\naccidentally.", "committedDate": "2020-11-11T17:53:48Z", "type": "commit"}, {"oid": "fa3ff14c5d6bef2fd3670ee14109ae6a081edde3", "url": "https://github.com/scireum/sirius-biz/commit/fa3ff14c5d6bef2fd3670ee14109ae6a081edde3", "message": "Uses the proper superclass for all known parameter builders.", "committedDate": "2020-11-11T17:54:40Z", "type": "commit"}, {"oid": "358a61f415672eea61c1bcbcd48725096f606031", "url": "https://github.com/scireum/sirius-biz/commit/358a61f415672eea61c1bcbcd48725096f606031", "message": "Performs all trivial conversions to the new Parameter API of jobs.", "committedDate": "2020-11-11T17:56:30Z", "type": "commit"}, {"oid": "f2a34f37354b8621b1474814fad24da683cd4ccc", "url": "https://github.com/scireum/sirius-biz/commit/f2a34f37354b8621b1474814fad24da683cd4ccc", "message": "Enforces the usage of Parameters in the Process framework.", "committedDate": "2020-11-11T18:56:27Z", "type": "commit"}, {"oid": "537eb6b5d5e550262aaa049687e1d61c1c7258fb", "url": "https://github.com/scireum/sirius-biz/commit/537eb6b5d5e550262aaa049687e1d61c1c7258fb", "message": "Uses the new parameter API for file based Jobs.\n\nThis eliminates a ton of parameters and makes the overall API way simpler.", "committedDate": "2020-11-11T19:17:55Z", "type": "commit"}, {"oid": "9a802ae38b2bddb872a2082b003e935e4e5804be", "url": "https://github.com/scireum/sirius-biz/commit/9a802ae38b2bddb872a2082b003e935e4e5804be", "message": "Uses the new parameter API in the JobsRoot.", "committedDate": "2020-11-11T19:18:10Z", "type": "commit"}, {"oid": "0f7cca09df86aeeed099f7f49ec046a6f3744b29", "url": "https://github.com/scireum/sirius-biz/commit/0f7cca09df86aeeed099f7f49ec046a6f3744b29", "message": "Provides access to the underlying builder of a parameter and utilizes this in the templates where neccesarry.", "committedDate": "2020-11-11T19:35:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU5OTI0Nw==", "url": "https://github.com/scireum/sirius-biz/pull/904#discussion_r521599247", "bodyText": "ArchiveExportJob gains a ZIP_FILE_EXTENSION constant in this PR of presumably the same semantics.", "author": "jakobvogel", "createdAt": "2020-11-11T19:49:06Z", "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "diffHunk": "@@ -119,7 +123,7 @@ protected boolean containsEntries(String... fileNamesToCheck) {\n \n     @Override\n     protected final boolean canHandleFileExtension(@Nullable String fileExtension) {\n-        return FILE_EXTENSION_ZIP.equalsIgnoreCase(fileExtension);\n+        return \"zip\".equalsIgnoreCase(fileExtension);", "originalCommit": "0f7cca09df86aeeed099f7f49ec046a6f3744b29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxMDk2NQ==", "url": "https://github.com/scireum/sirius-biz/pull/904#discussion_r521610965", "bodyText": "This is due to another refactoring concerning archive files - consider this state temporary and the next PR will hopefully fix this...", "author": "andyHa", "createdAt": "2020-11-11T20:11:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU5OTI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMTYyNg==", "url": "https://github.com/scireum/sirius-biz/pull/904#discussion_r521601626", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Helps to create a custom fil parameter with an appropriate file extension filter.\n          \n          \n            \n                 * Helps to create a custom file parameter with an appropriate file extension filter.", "author": "jakobvogel", "createdAt": "2020-11-11T19:53:31Z", "path": "src/main/java/sirius/biz/jobs/batch/file/FileImportJob.java", "diffHunk": "@@ -30,31 +33,50 @@\n  */\n public abstract class FileImportJob extends ImportJob {\n \n-    protected static final String FILE_EXTENSION_ZIP = \"zip\";\n+    /**\n+     * Contains the parameter which selects the file to import.\n+     * <p>\n+     * Note that even if another instance is used in {@link FileImportJobFactory#collectParameters(Consumer)}, this\n+     * will still work out as long as the parameter names are the same. Therefore both parameters should be\n+     * created using {@link #createFileParameter(List)}.\n+     */\n+    public static final Parameter<VirtualFile> FILE_PARAMETER = createFileParameter(null);\n \n     protected FileParameter fileParameter;\n \n     /**\n      * Creates a new job for the given factory and process context.\n      *\n-     * @param fileParameter the parameter which is used to derive the import file from\n-     * @param process       the process context in which the job is executed\n+     * @param process the process context in which the job is executed\n      */\n-    protected FileImportJob(FileParameter fileParameter, ProcessContext process) {\n+    protected FileImportJob(ProcessContext process) {\n         super(process);\n-        this.fileParameter = fileParameter;\n+    }\n+\n+    /**\n+     * Helps to create a custom fil parameter with an appropriate file extension filter.", "originalCommit": "0f7cca09df86aeeed099f7f49ec046a6f3744b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMTg3Mg==", "url": "https://github.com/scireum/sirius-biz/pull/904#discussion_r521601872", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param acceptedFileExtensions the file extensions to accept.\n          \n          \n            \n                 * @param acceptedFileExtensions the file extensions to accept", "author": "jakobvogel", "createdAt": "2020-11-11T19:54:00Z", "path": "src/main/java/sirius/biz/jobs/batch/file/FileImportJob.java", "diffHunk": "@@ -30,31 +33,50 @@\n  */\n public abstract class FileImportJob extends ImportJob {\n \n-    protected static final String FILE_EXTENSION_ZIP = \"zip\";\n+    /**\n+     * Contains the parameter which selects the file to import.\n+     * <p>\n+     * Note that even if another instance is used in {@link FileImportJobFactory#collectParameters(Consumer)}, this\n+     * will still work out as long as the parameter names are the same. Therefore both parameters should be\n+     * created using {@link #createFileParameter(List)}.\n+     */\n+    public static final Parameter<VirtualFile> FILE_PARAMETER = createFileParameter(null);\n \n     protected FileParameter fileParameter;\n \n     /**\n      * Creates a new job for the given factory and process context.\n      *\n-     * @param fileParameter the parameter which is used to derive the import file from\n-     * @param process       the process context in which the job is executed\n+     * @param process the process context in which the job is executed\n      */\n-    protected FileImportJob(FileParameter fileParameter, ProcessContext process) {\n+    protected FileImportJob(ProcessContext process) {\n         super(process);\n-        this.fileParameter = fileParameter;\n+    }\n+\n+    /**\n+     * Helps to create a custom fil parameter with an appropriate file extension filter.\n+     *\n+     * @param acceptedFileExtensions the file extensions to accept.", "originalCommit": "0f7cca09df86aeeed099f7f49ec046a6f3744b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMjQ3NA==", "url": "https://github.com/scireum/sirius-biz/pull/904#discussion_r521602474", "bodyText": "See previous comment, there is a constant for that in ArchiveExportJob", "author": "jakobvogel", "createdAt": "2020-11-11T19:55:09Z", "path": "src/main/java/sirius/biz/jobs/batch/file/FileImportJob.java", "diffHunk": "@@ -30,31 +33,50 @@\n  */\n public abstract class FileImportJob extends ImportJob {\n \n-    protected static final String FILE_EXTENSION_ZIP = \"zip\";\n+    /**\n+     * Contains the parameter which selects the file to import.\n+     * <p>\n+     * Note that even if another instance is used in {@link FileImportJobFactory#collectParameters(Consumer)}, this\n+     * will still work out as long as the parameter names are the same. Therefore both parameters should be\n+     * created using {@link #createFileParameter(List)}.\n+     */\n+    public static final Parameter<VirtualFile> FILE_PARAMETER = createFileParameter(null);\n \n     protected FileParameter fileParameter;\n \n     /**\n      * Creates a new job for the given factory and process context.\n      *\n-     * @param fileParameter the parameter which is used to derive the import file from\n-     * @param process       the process context in which the job is executed\n+     * @param process the process context in which the job is executed\n      */\n-    protected FileImportJob(FileParameter fileParameter, ProcessContext process) {\n+    protected FileImportJob(ProcessContext process) {\n         super(process);\n-        this.fileParameter = fileParameter;\n+    }\n+\n+    /**\n+     * Helps to create a custom fil parameter with an appropriate file extension filter.\n+     *\n+     * @param acceptedFileExtensions the file extensions to accept.\n+     * @return the parameter used to select the import file\n+     */\n+    public static Parameter<VirtualFile> createFileParameter(@Nullable List<String> acceptedFileExtensions) {\n+        FileParameter result = new FileParameter(\"file\", \"$FileImportJobFactory.file\").withBasePath(\"/work\");\n+        if (acceptedFileExtensions != null && !acceptedFileExtensions.isEmpty()) {\n+            result.withAcceptedExtensionsList(acceptedFileExtensions);\n+        }\n+        return result.markRequired().build();\n     }\n \n     @Override\n     public void execute() throws Exception {\n-        VirtualFile file = process.require(fileParameter);\n+        VirtualFile file = process.require(FILE_PARAMETER);\n \n         if (canHandleFileExtension(Value.of(file.fileExtension()).toLowerCase())) {\n             try (FileHandle fileHandle = file.download()) {\n                 backupInputFile(file.name(), fileHandle);\n                 executeForSingleFile(file.name(), fileHandle);\n             }\n-        } else if (FILE_EXTENSION_ZIP.equalsIgnoreCase(file.fileExtension())) {\n+        } else if (\"zip\".equalsIgnoreCase(file.fileExtension())) {", "originalCommit": "0f7cca09df86aeeed099f7f49ec046a6f3744b29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxMTAxNg==", "url": "https://github.com/scireum/sirius-biz/pull/904#discussion_r521611016", "bodyText": "s.a.", "author": "andyHa", "createdAt": "2020-11-11T20:11:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMjQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMjc5Nw==", "url": "https://github.com/scireum/sirius-biz/pull/904#discussion_r521602797", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * parameter and the one use to retrieve the value match properly.\n          \n          \n            \n                 * parameter and the one used to retrieve the value match properly.", "author": "jakobvogel", "createdAt": "2020-11-11T19:55:42Z", "path": "src/main/java/sirius/biz/jobs/batch/file/FileImportJobFactory.java", "diffHunk": "@@ -21,31 +22,35 @@\n  */\n public abstract class FileImportJobFactory extends ImportBatchProcessFactory {\n \n-    /**\n-     * Contains the parameter which is used to select the file (as <tt>VirtualFile</tt>).\n-     */\n-    protected final FileParameter fileParameter = createInputFileParameter();\n+    @Override\n+    protected String createProcessTitle(Map<String, String> context) {\n+        return getLabel() + \": \" + FileImportJob.FILE_PARAMETER.get(context).map(VirtualFile::name).orElse(\"-\");\n+    }\n+\n+    @Override\n+    protected void collectParameters(Consumer<Parameter<?>> parameterCollector) {\n+        parameterCollector.accept(createFileParameter());\n+    }\n \n     /**\n-     * Creates the parameter which is used to specify the input file.\n+     * Can be overwritten to create a custom parameter to select the input file.\n      * <p>\n-     * This is provided as a helper method so that other / similar jobs can re-use it.\n-     * We do not re-use the same parameter, as a parameter isn't immutable, so a global constant could\n-     * be easily set into an inconsistent state.\n+     * Note that this should use {@link FileImportJob#createFileParameter(List)} to ensure that the custom\n+     * parameter and the one use to retrieve the value match properly.", "originalCommit": "0f7cca09df86aeeed099f7f49ec046a6f3744b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwNTQxMg==", "url": "https://github.com/scireum/sirius-biz/pull/904#discussion_r521605412", "bodyText": "Who can verify and extract? The parameter? (Clarify?)", "author": "jakobvogel", "createdAt": "2020-11-11T20:00:46Z", "path": "src/main/java/sirius/biz/jobs/params/Parameter.java", "diffHunk": "@@ -9,135 +9,32 @@\n package sirius.biz.jobs.params;\n \n import sirius.kernel.commons.Value;\n-import sirius.kernel.health.Exceptions;\n+import sirius.kernel.di.transformers.Composable;\n import sirius.kernel.nls.NLS;\n \n import java.util.Map;\n import java.util.Optional;\n \n /**\n  * Defines a parameter which can be rendered in the UI and verify and extract a value from a context.", "originalCommit": "0f7cca09df86aeeed099f7f49ec046a6f3744b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwNjQzMw==", "url": "https://github.com/scireum/sirius-biz/pull/904#discussion_r521606433", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A parameter is setup using sublasses of this class which are eventually converted using {@link #build()}.\n          \n          \n            \n             * A parameter is set up using subclasses of this class which are eventually converted using {@link #build()}.", "author": "jakobvogel", "createdAt": "2020-11-11T20:02:45Z", "path": "src/main/java/sirius/biz/jobs/params/ParameterBuilder.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.params;\n+\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Provides a mutable instance which can be used to build {@link Parameter parameters}.\n+ * <p>\n+ * A parameter is setup using sublasses of this class which are eventually converted using {@link #build()}.", "originalCommit": "0f7cca09df86aeeed099f7f49ec046a6f3744b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwNzAwMw==", "url": "https://github.com/scireum/sirius-biz/pull/904#discussion_r521607003", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Once the parameter is build, the builder itself should no longer be used.\n          \n          \n            \n                 * Once the parameter is built, the builder itself should no longer be used.", "author": "jakobvogel", "createdAt": "2020-11-11T20:03:52Z", "path": "src/main/java/sirius/biz/jobs/params/ParameterBuilder.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.params;\n+\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Provides a mutable instance which can be used to build {@link Parameter parameters}.\n+ * <p>\n+ * A parameter is setup using sublasses of this class which are eventually converted using {@link #build()}.\n+ * This yields an immutable parameter object which can safely made visible (i.e. as constant) to be shared\n+ * across jobs.\n+ *\n+ * @param <V> the type of values produced by this parameter\n+ * @param <P> recursive type reference to support fluent method calls\n+ */\n+public abstract class ParameterBuilder<V, P extends ParameterBuilder<V, P>> {\n+\n+    /**\n+     * Provides a tri-state value for the visibility of a parameter.\n+     */\n+    private enum Visibility {NORMAL, ONLY_WITH_VALUE, HIDDEN}\n+\n+    private static final String HIDDEN_TEMPLATE_NAME = \"/templates/biz/jobs/params/hidden.html.pasta\";\n+\n+    protected String name;\n+    protected String label;\n+    protected String description;\n+    protected boolean required;\n+    protected Visibility visibility = Visibility.NORMAL;\n+    protected Parameter.LogVisibility logVisibility = Parameter.LogVisibility.NORMAL;\n+\n+    /**\n+     * Creates a new parameter with the given name and label.\n+     *\n+     * @param name  the name of the parameter\n+     * @param label the label of the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     */\n+    protected ParameterBuilder(String name, String label) {\n+        this.name = name;\n+        this.label = label;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected P self() {\n+        return (P) this;\n+    }\n+\n+    /**\n+     * Creates an immutable parameter from this builder.\n+     * <p>\n+     * Once the parameter is build, the builder itself should no longer be used.", "originalCommit": "0f7cca09df86aeeed099f7f49ec046a6f3744b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwNzk5NQ==", "url": "https://github.com/scireum/sirius-biz/pull/904#discussion_r521607995", "bodyText": "Which of the two @return?", "author": "jakobvogel", "createdAt": "2020-11-11T20:05:43Z", "path": "src/main/java/sirius/biz/jobs/params/ParameterBuilder.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.params;\n+\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Provides a mutable instance which can be used to build {@link Parameter parameters}.\n+ * <p>\n+ * A parameter is setup using sublasses of this class which are eventually converted using {@link #build()}.\n+ * This yields an immutable parameter object which can safely made visible (i.e. as constant) to be shared\n+ * across jobs.\n+ *\n+ * @param <V> the type of values produced by this parameter\n+ * @param <P> recursive type reference to support fluent method calls\n+ */\n+public abstract class ParameterBuilder<V, P extends ParameterBuilder<V, P>> {\n+\n+    /**\n+     * Provides a tri-state value for the visibility of a parameter.\n+     */\n+    private enum Visibility {NORMAL, ONLY_WITH_VALUE, HIDDEN}\n+\n+    private static final String HIDDEN_TEMPLATE_NAME = \"/templates/biz/jobs/params/hidden.html.pasta\";\n+\n+    protected String name;\n+    protected String label;\n+    protected String description;\n+    protected boolean required;\n+    protected Visibility visibility = Visibility.NORMAL;\n+    protected Parameter.LogVisibility logVisibility = Parameter.LogVisibility.NORMAL;\n+\n+    /**\n+     * Creates a new parameter with the given name and label.\n+     *\n+     * @param name  the name of the parameter\n+     * @param label the label of the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     */\n+    protected ParameterBuilder(String name, String label) {\n+        this.name = name;\n+        this.label = label;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected P self() {\n+        return (P) this;\n+    }\n+\n+    /**\n+     * Creates an immutable parameter from this builder.\n+     * <p>\n+     * Once the parameter is build, the builder itself should no longer be used.\n+     *\n+     * @return the immutable parameter to be used in {@link sirius.biz.jobs.JobFactory jobs}\n+     */\n+    public Parameter<V> build() {\n+        return new Parameter<>(self());\n+    }\n+\n+    /**\n+     * Specifies the label for the parameter.\n+     *\n+     * @param label the label of the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P withLabel(String label) {\n+        this.label = label;\n+        return self();\n+    }\n+\n+    /**\n+     * Specifies a short description for the parameter.\n+     *\n+     * @param description the description for the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P withDescription(String description) {\n+        this.description = description;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks the parameter as required.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P markRequired() {\n+        this.required = true;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter as visible.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P visible() {\n+        this.visibility = Visibility.NORMAL;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter as hidden.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P hidden() {\n+        this.visibility = Visibility.HIDDEN;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter as hidden if no value is present.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P hiddenIfEmpty() {\n+        this.visibility = Visibility.ONLY_WITH_VALUE;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter that it should only be logged in the system log.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P logInSystem() {\n+        this.logVisibility = Parameter.LogVisibility.SYSTEM;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter that it should not be logged.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P doNotLog() {\n+        this.logVisibility = Parameter.LogVisibility.NONE;\n+        return self();\n+    }\n+\n+    protected boolean isVisible(Map<String, String> context) {\n+        if (this.visibility == Visibility.HIDDEN) {\n+            return false;\n+        }\n+\n+        if (this.visibility == Visibility.NORMAL) {\n+            return true;\n+        }\n+\n+        return get(context).isPresent();\n+    }\n+\n+    protected String getEffectiveTemplateName(Map<String, String> context) {\n+        if (!isVisible(context)) {\n+            return HIDDEN_TEMPLATE_NAME;\n+        }\n+        return getTemplateName();\n+    }\n+\n+    /**\n+     * Returns the name of the template used to render the parameter in the UI.\n+     *\n+     * @return the name or path of the template used to render the parameter\n+     */\n+    protected abstract String getTemplateName();\n+\n+    protected String checkAndTransform(Value input) {\n+        try {\n+            return checkAndTransformValue(input);\n+        } catch (IllegalArgumentException e) {\n+            throw Exceptions.createHandled()\n+                            .withNLSKey(\"Parameter.invalidValue\")\n+                            .set(\"name\", getLabel())\n+                            .set(\"message\", e.getMessage())\n+                            .handle();\n+        }\n+    }\n+\n+    /**\n+     * Checks and transforms the given value.\n+     *\n+     * @param input the input wrapped as <tt>Value</tt>\n+     *              * @return a serialized string version of the given input which can later be resolved using\n+     *              * {@link #resolveFromString(Value)}\n+     * @return the value represented as string", "originalCommit": "0f7cca09df86aeeed099f7f49ec046a6f3744b29", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ef496fe46778023334eaf994d2c8552c4587aead", "url": "https://github.com/scireum/sirius-biz/commit/ef496fe46778023334eaf994d2c8552c4587aead", "message": "Apply suggestions from code review\n\nCo-authored-by: Jakob Vogel <jvo@scireum.de>", "committedDate": "2020-11-11T20:14:22Z", "type": "commit"}, {"oid": "f1ada0433f2b672f848dc371f2f0cedabf7df9dd", "url": "https://github.com/scireum/sirius-biz/commit/f1ada0433f2b672f848dc371f2f0cedabf7df9dd", "message": "Update ParameterBuilder.java", "committedDate": "2020-11-11T20:16:58Z", "type": "commit"}, {"oid": "706a276895221a2237dd6f6ae5ffd78fbc8bb697", "url": "https://github.com/scireum/sirius-biz/commit/706a276895221a2237dd6f6ae5ffd78fbc8bb697", "message": "Update Parameter.java", "committedDate": "2020-11-11T20:21:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg2OTIyMA==", "url": "https://github.com/scireum/sirius-biz/pull/904#discussion_r521869220", "bodyText": "Javadoc", "author": "mkeckmkeck", "createdAt": "2020-11-12T06:36:53Z", "path": "src/main/java/sirius/biz/jobs/params/ParameterBuilder.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.params;\n+\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Provides a mutable instance which can be used to build {@link Parameter parameters}.\n+ * <p>\n+ * A parameter is setup using sublasses of this class which are eventually converted using {@link #build()}.\n+ * This yields an immutable parameter object which can safely made visible (i.e. as constant) to be shared\n+ * across jobs.\n+ *\n+ * @param <V> the type of values produced by this parameter\n+ * @param <P> recursive type reference to support fluent method calls\n+ */\n+public abstract class ParameterBuilder<V, P extends ParameterBuilder<V, P>> {\n+\n+    /**\n+     * Provides a tri-state value for the visibility of a parameter.\n+     */\n+    private enum Visibility {NORMAL, ONLY_WITH_VALUE, HIDDEN}\n+\n+    private static final String HIDDEN_TEMPLATE_NAME = \"/templates/biz/jobs/params/hidden.html.pasta\";\n+\n+    protected String name;\n+    protected String label;\n+    protected String description;\n+    protected boolean required;\n+    protected Visibility visibility = Visibility.NORMAL;\n+    protected Parameter.LogVisibility logVisibility = Parameter.LogVisibility.NORMAL;\n+\n+    /**\n+     * Creates a new parameter with the given name and label.\n+     *\n+     * @param name  the name of the parameter\n+     * @param label the label of the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     */\n+    protected ParameterBuilder(String name, String label) {\n+        this.name = name;\n+        this.label = label;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected P self() {\n+        return (P) this;\n+    }\n+\n+    /**\n+     * Creates an immutable parameter from this builder.\n+     * <p>\n+     * Once the parameter is build, the builder itself should no longer be used.\n+     *\n+     * @return the immutable parameter to be used in {@link sirius.biz.jobs.JobFactory jobs}\n+     */\n+    public Parameter<V> build() {\n+        return new Parameter<>(self());\n+    }\n+\n+    /**\n+     * Specifies the label for the parameter.\n+     *\n+     * @param label the label of the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P withLabel(String label) {\n+        this.label = label;\n+        return self();\n+    }\n+\n+    /**\n+     * Specifies a short description for the parameter.\n+     *\n+     * @param description the description for the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P withDescription(String description) {\n+        this.description = description;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks the parameter as required.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P markRequired() {\n+        this.required = true;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter as visible.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P visible() {\n+        this.visibility = Visibility.NORMAL;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter as hidden.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P hidden() {\n+        this.visibility = Visibility.HIDDEN;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter as hidden if no value is present.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P hiddenIfEmpty() {\n+        this.visibility = Visibility.ONLY_WITH_VALUE;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter that it should only be logged in the system log.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P logInSystem() {\n+        this.logVisibility = Parameter.LogVisibility.SYSTEM;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter that it should not be logged.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P doNotLog() {\n+        this.logVisibility = Parameter.LogVisibility.NONE;\n+        return self();\n+    }\n+\n+    protected boolean isVisible(Map<String, String> context) {\n+        if (this.visibility == Visibility.HIDDEN) {\n+            return false;\n+        }\n+\n+        if (this.visibility == Visibility.NORMAL) {\n+            return true;\n+        }\n+\n+        return get(context).isPresent();\n+    }\n+\n+    protected String getEffectiveTemplateName(Map<String, String> context) {\n+        if (!isVisible(context)) {\n+            return HIDDEN_TEMPLATE_NAME;\n+        }\n+        return getTemplateName();\n+    }\n+\n+    /**\n+     * Returns the name of the template used to render the parameter in the UI.\n+     *\n+     * @return the name or path of the template used to render the parameter\n+     */\n+    protected abstract String getTemplateName();\n+\n+    protected String checkAndTransform(Value input) {", "originalCommit": "1b442321399184bfcfe3e4625cc37c4cf49ac25e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg2OTg0Ng==", "url": "https://github.com/scireum/sirius-biz/pull/904#discussion_r521869846", "bodyText": "Javadoc", "author": "mkeckmkeck", "createdAt": "2020-11-12T06:38:44Z", "path": "src/main/java/sirius/biz/jobs/params/ParameterBuilder.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.params;\n+\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Provides a mutable instance which can be used to build {@link Parameter parameters}.\n+ * <p>\n+ * A parameter is setup using sublasses of this class which are eventually converted using {@link #build()}.\n+ * This yields an immutable parameter object which can safely made visible (i.e. as constant) to be shared\n+ * across jobs.\n+ *\n+ * @param <V> the type of values produced by this parameter\n+ * @param <P> recursive type reference to support fluent method calls\n+ */\n+public abstract class ParameterBuilder<V, P extends ParameterBuilder<V, P>> {\n+\n+    /**\n+     * Provides a tri-state value for the visibility of a parameter.\n+     */\n+    private enum Visibility {NORMAL, ONLY_WITH_VALUE, HIDDEN}\n+\n+    private static final String HIDDEN_TEMPLATE_NAME = \"/templates/biz/jobs/params/hidden.html.pasta\";\n+\n+    protected String name;\n+    protected String label;\n+    protected String description;\n+    protected boolean required;\n+    protected Visibility visibility = Visibility.NORMAL;\n+    protected Parameter.LogVisibility logVisibility = Parameter.LogVisibility.NORMAL;\n+\n+    /**\n+     * Creates a new parameter with the given name and label.\n+     *\n+     * @param name  the name of the parameter\n+     * @param label the label of the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     */\n+    protected ParameterBuilder(String name, String label) {\n+        this.name = name;\n+        this.label = label;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected P self() {\n+        return (P) this;\n+    }\n+\n+    /**\n+     * Creates an immutable parameter from this builder.\n+     * <p>\n+     * Once the parameter is build, the builder itself should no longer be used.\n+     *\n+     * @return the immutable parameter to be used in {@link sirius.biz.jobs.JobFactory jobs}\n+     */\n+    public Parameter<V> build() {\n+        return new Parameter<>(self());\n+    }\n+\n+    /**\n+     * Specifies the label for the parameter.\n+     *\n+     * @param label the label of the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P withLabel(String label) {\n+        this.label = label;\n+        return self();\n+    }\n+\n+    /**\n+     * Specifies a short description for the parameter.\n+     *\n+     * @param description the description for the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P withDescription(String description) {\n+        this.description = description;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks the parameter as required.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P markRequired() {\n+        this.required = true;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter as visible.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P visible() {\n+        this.visibility = Visibility.NORMAL;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter as hidden.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P hidden() {\n+        this.visibility = Visibility.HIDDEN;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter as hidden if no value is present.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P hiddenIfEmpty() {\n+        this.visibility = Visibility.ONLY_WITH_VALUE;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter that it should only be logged in the system log.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P logInSystem() {\n+        this.logVisibility = Parameter.LogVisibility.SYSTEM;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter that it should not be logged.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P doNotLog() {\n+        this.logVisibility = Parameter.LogVisibility.NONE;\n+        return self();\n+    }\n+\n+    protected boolean isVisible(Map<String, String> context) {\n+        if (this.visibility == Visibility.HIDDEN) {\n+            return false;\n+        }\n+\n+        if (this.visibility == Visibility.NORMAL) {\n+            return true;\n+        }\n+\n+        return get(context).isPresent();\n+    }\n+\n+    protected String getEffectiveTemplateName(Map<String, String> context) {\n+        if (!isVisible(context)) {\n+            return HIDDEN_TEMPLATE_NAME;\n+        }\n+        return getTemplateName();\n+    }\n+\n+    /**\n+     * Returns the name of the template used to render the parameter in the UI.\n+     *\n+     * @return the name or path of the template used to render the parameter\n+     */\n+    protected abstract String getTemplateName();\n+\n+    protected String checkAndTransform(Value input) {\n+        try {\n+            return checkAndTransformValue(input);\n+        } catch (IllegalArgumentException e) {\n+            throw Exceptions.createHandled()\n+                            .withNLSKey(\"Parameter.invalidValue\")\n+                            .set(\"name\", getLabel())\n+                            .set(\"message\", e.getMessage())\n+                            .handle();\n+        }\n+    }\n+\n+    /**\n+     * Checks and transforms the given value.\n+     *\n+     * @param input the input wrapped as <tt>Value</tt>\n+     *              * @return a serialized string version of the given input which can later be resolved using\n+     *              * {@link #resolveFromString(Value)}\n+     * @return the value represented as string\n+     * @throws IllegalArgumentException in case of invalid data\n+     */\n+    protected abstract String checkAndTransformValue(Value input);\n+\n+    /**\n+     * Resolves the previously created string representation into the actual parameter value.\n+     * <p>\n+     * The string value will be created by {@link #checkAndTransformValue(Value)}.\n+     *\n+     * @param input the string value wrapped as <tt>Value</tt>\n+     * @return the resolved value wrapped as optional or an empty optional if the value couldn't be resolved\n+     */\n+    protected abstract Optional<V> resolveFromString(Value input);\n+\n+    protected Optional<V> get(Map<String, String> context) {", "originalCommit": "1b442321399184bfcfe3e4625cc37c4cf49ac25e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg2OTg4Ng==", "url": "https://github.com/scireum/sirius-biz/pull/904#discussion_r521869886", "bodyText": "Javadoc", "author": "mkeckmkeck", "createdAt": "2020-11-12T06:38:48Z", "path": "src/main/java/sirius/biz/jobs/params/ParameterBuilder.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.params;\n+\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Provides a mutable instance which can be used to build {@link Parameter parameters}.\n+ * <p>\n+ * A parameter is setup using sublasses of this class which are eventually converted using {@link #build()}.\n+ * This yields an immutable parameter object which can safely made visible (i.e. as constant) to be shared\n+ * across jobs.\n+ *\n+ * @param <V> the type of values produced by this parameter\n+ * @param <P> recursive type reference to support fluent method calls\n+ */\n+public abstract class ParameterBuilder<V, P extends ParameterBuilder<V, P>> {\n+\n+    /**\n+     * Provides a tri-state value for the visibility of a parameter.\n+     */\n+    private enum Visibility {NORMAL, ONLY_WITH_VALUE, HIDDEN}\n+\n+    private static final String HIDDEN_TEMPLATE_NAME = \"/templates/biz/jobs/params/hidden.html.pasta\";\n+\n+    protected String name;\n+    protected String label;\n+    protected String description;\n+    protected boolean required;\n+    protected Visibility visibility = Visibility.NORMAL;\n+    protected Parameter.LogVisibility logVisibility = Parameter.LogVisibility.NORMAL;\n+\n+    /**\n+     * Creates a new parameter with the given name and label.\n+     *\n+     * @param name  the name of the parameter\n+     * @param label the label of the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     */\n+    protected ParameterBuilder(String name, String label) {\n+        this.name = name;\n+        this.label = label;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected P self() {\n+        return (P) this;\n+    }\n+\n+    /**\n+     * Creates an immutable parameter from this builder.\n+     * <p>\n+     * Once the parameter is build, the builder itself should no longer be used.\n+     *\n+     * @return the immutable parameter to be used in {@link sirius.biz.jobs.JobFactory jobs}\n+     */\n+    public Parameter<V> build() {\n+        return new Parameter<>(self());\n+    }\n+\n+    /**\n+     * Specifies the label for the parameter.\n+     *\n+     * @param label the label of the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P withLabel(String label) {\n+        this.label = label;\n+        return self();\n+    }\n+\n+    /**\n+     * Specifies a short description for the parameter.\n+     *\n+     * @param description the description for the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P withDescription(String description) {\n+        this.description = description;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks the parameter as required.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P markRequired() {\n+        this.required = true;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter as visible.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P visible() {\n+        this.visibility = Visibility.NORMAL;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter as hidden.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P hidden() {\n+        this.visibility = Visibility.HIDDEN;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter as hidden if no value is present.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P hiddenIfEmpty() {\n+        this.visibility = Visibility.ONLY_WITH_VALUE;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter that it should only be logged in the system log.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P logInSystem() {\n+        this.logVisibility = Parameter.LogVisibility.SYSTEM;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks this parameter that it should not be logged.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public P doNotLog() {\n+        this.logVisibility = Parameter.LogVisibility.NONE;\n+        return self();\n+    }\n+\n+    protected boolean isVisible(Map<String, String> context) {\n+        if (this.visibility == Visibility.HIDDEN) {\n+            return false;\n+        }\n+\n+        if (this.visibility == Visibility.NORMAL) {\n+            return true;\n+        }\n+\n+        return get(context).isPresent();\n+    }\n+\n+    protected String getEffectiveTemplateName(Map<String, String> context) {\n+        if (!isVisible(context)) {\n+            return HIDDEN_TEMPLATE_NAME;\n+        }\n+        return getTemplateName();\n+    }\n+\n+    /**\n+     * Returns the name of the template used to render the parameter in the UI.\n+     *\n+     * @return the name or path of the template used to render the parameter\n+     */\n+    protected abstract String getTemplateName();\n+\n+    protected String checkAndTransform(Value input) {\n+        try {\n+            return checkAndTransformValue(input);\n+        } catch (IllegalArgumentException e) {\n+            throw Exceptions.createHandled()\n+                            .withNLSKey(\"Parameter.invalidValue\")\n+                            .set(\"name\", getLabel())\n+                            .set(\"message\", e.getMessage())\n+                            .handle();\n+        }\n+    }\n+\n+    /**\n+     * Checks and transforms the given value.\n+     *\n+     * @param input the input wrapped as <tt>Value</tt>\n+     *              * @return a serialized string version of the given input which can later be resolved using\n+     *              * {@link #resolveFromString(Value)}\n+     * @return the value represented as string\n+     * @throws IllegalArgumentException in case of invalid data\n+     */\n+    protected abstract String checkAndTransformValue(Value input);\n+\n+    /**\n+     * Resolves the previously created string representation into the actual parameter value.\n+     * <p>\n+     * The string value will be created by {@link #checkAndTransformValue(Value)}.\n+     *\n+     * @param input the string value wrapped as <tt>Value</tt>\n+     * @return the resolved value wrapped as optional or an empty optional if the value couldn't be resolved\n+     */\n+    protected abstract Optional<V> resolveFromString(Value input);\n+\n+    protected Optional<V> get(Map<String, String> context) {\n+        return resolveFromString(Value.of(context.get(getName())));\n+    }\n+\n+    protected V require(Map<String, String> context) {", "originalCommit": "1b442321399184bfcfe3e4625cc37c4cf49ac25e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5e137c3c7f4603bd10ff4e6b752ed388b4f2cbe4", "url": "https://github.com/scireum/sirius-biz/commit/5e137c3c7f4603bd10ff4e6b752ed388b4f2cbe4", "message": "Improves JavaDocs.", "committedDate": "2020-11-12T08:18:22Z", "type": "commit"}]}